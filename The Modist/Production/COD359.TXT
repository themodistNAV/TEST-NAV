OBJECT Codeunit 359 PeriodFormManagement
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00,NAVGB9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AccountingPeriod@1004 : Record 10560;
      CalendarSetup@1040000 : Record 10505;
      UseAccountingPeriod@1040002 : Boolean;
      CalendarSetupRead@1040003 : Boolean;
      UseAccountingPeriodTmp@1040001 : Boolean;

    PROCEDURE FindDate@2(SearchString@1000 : Text[3];VAR Calendar@1001 : Record 2000000007;PeriodType@1002 : 'Day,Week,Month,Quarter,Year') : Boolean;
    VAR
      Found@1003 : Boolean;
    BEGIN
      Calendar.SETRANGE("Period Type",PeriodType);
      Calendar."Period Type" := PeriodType;
      IF Calendar."Period Start" = 0D THEN
        Calendar."Period Start" := WORKDATE;
      IF SearchString IN ['','=><'] THEN
        SearchString := '=<>';
      GetCalendarSetup;
      UseAccountingPeriodTmp := UseAccountingPeriod;
      IF UseAccountingPeriod THEN BEGIN
        CASE PeriodType OF
          PeriodType::Day:
            IF CalendarSetup."Use System For Day Period" THEN
              UseAccountingPeriod := FALSE;
          PeriodType::Week:
            IF CalendarSetup."Use System For Week Period" THEN
              UseAccountingPeriod := FALSE;
          PeriodType::Month:
            IF CalendarSetup."Use System For Month Period" THEN
              UseAccountingPeriod := FALSE;
          PeriodType::Quarter:
            IF CalendarSetup."Use System For Quarter Period" THEN
              UseAccountingPeriod := FALSE;
        END;
      END;
      IF UseAccountingPeriod THEN BEGIN
        AccountingPeriod.RESET;
        UpdatePeriodType(Calendar,AccountingPeriod);
        Calendar.COPYFILTER("Period Start",AccountingPeriod."Period Start");
        AccountingPeriod."Period Type" := Calendar."Period Type";
        AccountingPeriod."Period Start" := Calendar."Period Start";
        Found := AccountingPeriod.FIND(SearchString);
        IF AccountingPeriod."Period End" = 0D THEN
          AccountingPeriod."Period End" := 31129999D;
        Calendar.TRANSFERFIELDS(AccountingPeriod);
      END ELSE BEGIN
        Found := Calendar.FIND(SearchString);
      END;
      IF Found THEN
        Calendar."Period End" := NORMALDATE(Calendar."Period End");
      UseAccountingPeriod := UseAccountingPeriodTmp;
      EXIT(Found);
    END;

    PROCEDURE NextDate@3(NextStep@1000 : Integer;VAR Calendar@1001 : Record 2000000007;PeriodType@1002 : 'Day,Week,Month,Quarter,Year') : Integer;
    BEGIN
      Calendar.SETRANGE("Period Type",PeriodType);
      Calendar."Period Type" := PeriodType;
      GetCalendarSetup;
      UseAccountingPeriodTmp := UseAccountingPeriod;
      IF UseAccountingPeriod THEN BEGIN
        CASE PeriodType OF
          PeriodType::Day:
            IF CalendarSetup."Use System For Day Period" THEN
              UseAccountingPeriod := FALSE;
          PeriodType::Week:
            IF CalendarSetup."Use System For Week Period" THEN
              UseAccountingPeriod := FALSE;
          PeriodType::Month:
            IF CalendarSetup."Use System For Month Period" THEN
              UseAccountingPeriod := FALSE;
          PeriodType::Quarter:
            IF CalendarSetup."Use System For Quarter Period" THEN
              UseAccountingPeriod := FALSE;
        END;
      END;
      IF UseAccountingPeriod THEN BEGIN
        AccountingPeriod.RESET;
        UpdatePeriodType(Calendar,AccountingPeriod);
        Calendar.COPYFILTER("Period Start",AccountingPeriod."Period Start");
        AccountingPeriod.TRANSFERFIELDS(Calendar);
        NextStep := AccountingPeriod.NEXT(NextStep);
        IF AccountingPeriod."Period End" = 0D THEN
          AccountingPeriod."Period End" := 31129999D;
        IF NextStep <> 0 THEN
          Calendar.TRANSFERFIELDS(AccountingPeriod);
      END ELSE BEGIN
        NextStep := Calendar.NEXT(NextStep);
        IF NextStep <> 0 THEN
          Calendar."Period End" := NORMALDATE(Calendar."Period End");
      END;
      EXIT(NextStep);
    END;

    PROCEDURE CreatePeriodFormat@4(PeriodType@1000 : 'Day,Week,Month,Quarter,Year';Date@1001 : Date) : Text[10];
    BEGIN
      GetCalendarSetup;
      IF UseAccountingPeriod THEN BEGIN
        CASE PeriodType OF
          PeriodType::Day:
            UseAccountingPeriod := NOT CalendarSetup."Use System For Day Period";
          PeriodType::Week:
            UseAccountingPeriod := NOT CalendarSetup."Use System For Week Period";
          PeriodType::Month:
            UseAccountingPeriod := NOT CalendarSetup."Use System For Month Period";
          PeriodType::Quarter:
            UseAccountingPeriod := NOT CalendarSetup."Use System For Quarter Period";
        END;
      END;
      CASE PeriodType OF
        PeriodType::Day:
          IF UseAccountingPeriod THEN
            EXIT(FORMAT(Date,0,CalendarSetup."Period Display Format Day"))
          ELSE
            EXIT(FORMAT(Date,0,CalendarSetup."System Display Format Day"));
        PeriodType::Week:
          BEGIN
            IF DATE2DWY(Date,2) = 1 THEN
              Date := Date + 7 - DATE2DWY(Date,1);
            IF UseAccountingPeriod THEN
              EXIT(FORMAT(Date,0,CalendarSetup."Period Display Format Week"))
            ELSE
              EXIT(FORMAT(Date,0,CalendarSetup."System Display Format Week"));
          END;
        PeriodType::Month:
          IF UseAccountingPeriod THEN
            EXIT(FORMAT(Date,0,CalendarSetup."Period Display Format Month"))
          ELSE
            EXIT(FORMAT(Date,0,CalendarSetup."System Display Format Month"));
        PeriodType::Quarter:
          IF UseAccountingPeriod THEN
            EXIT(FORMAT(Date,0,CalendarSetup."Period Display Format Quarter"))
          ELSE
            EXIT(FORMAT(Date,0,CalendarSetup."System Display Format Quarter"));
        PeriodType::Year:
          IF UseAccountingPeriod THEN
            EXIT(FORMAT(Date,0,CalendarSetup."Period Display Format Year"))
          ELSE
            EXIT(FORMAT(Date,0,CalendarSetup."System Display Format Year"));
      END;
    END;

    PROCEDURE GetFullPeriodDateFilter@12(PeriodType@1003 : 'Day,Week,Month,Quarter,Year,Accounting Period';DateFilter@1000 : Text) : Text;
    VAR
      AccountingPeriod@1002 : Record 10560;
      Period@1001 : Record 2000000007;
      StartDate@1004 : Date;
      EndDate@1005 : Date;
    BEGIN
      IF DateFilter = '' THEN
        EXIT(DateFilter);

      Period.SETFILTER("Period Start",DateFilter);
      StartDate := Period.GETRANGEMIN("Period Start");
      EndDate := Period.GETRANGEMAX("Period Start");
      CASE PeriodType OF
        PeriodType::Week,
        PeriodType::Month,
        PeriodType::Quarter,
        PeriodType::Year:
          BEGIN
            Period.SETRANGE("Period Type",PeriodType);
            Period.SETFILTER("Period Start",'<=%1',StartDate);
            Period.FINDLAST;
            StartDate := Period."Period Start";
            Period.SETRANGE("Period Start");
            Period.SETFILTER("Period End",'>%1',EndDate);
            Period.FINDFIRST;
            EndDate := NORMALDATE(Period."Period End");
          END;
        PeriodType::"Accounting Period":
          BEGIN
            AccountingPeriod.SETFILTER("Period Start",'<=%1',StartDate);
            AccountingPeriod.FINDLAST;
            StartDate := AccountingPeriod."Period Start";
            AccountingPeriod.SETFILTER("Period Start",'>%1',EndDate);
            AccountingPeriod.FINDFIRST;
            EndDate := AccountingPeriod."Period Start" - 1;
          END;
      END;
      Period.SETRANGE("Period Start",StartDate,EndDate);
      EXIT(Period.GETFILTER("Period Start"));
    END;

    PROCEDURE SetCalendarSource@1040000(VAR CalendarSource@1040004 : ' ,System,AccPeriod');
    BEGIN
      GetCalendarSetup;
      IF CalendarSource = CalendarSource::" " THEN
        GetDefaultCalendarSource(CalendarSource);
      UseAccountingPeriod := CalendarSource = CalendarSource::AccPeriod;
    END;

    LOCAL PROCEDURE GetCalendarSetup@1040005();
    BEGIN
      IF NOT CalendarSetupRead THEN
        IF NOT CalendarSetup.GET THEN
          CalendarSetup.INIT;
    END;

    PROCEDURE GetDefaultCalendarSource@1040002(VAR CalendarSource@1040000 : ',System,AccPeriod');
    VAR
      Text1041000@1041000 : TextConst 'ENU=You must specify %1 in the %2 table.;ENG=You must specify %1 in the %2 table.';
    BEGIN
      GetCalendarSetup;
      IF CalendarSetup."Default Source Calendar" = CalendarSetup."Default Source Calendar"::" " THEN
        ERROR(
          Text1041000,
          CalendarSetup.FIELDCAPTION("Default Source Calendar"),CalendarSetup.TABLECAPTION);
      CalendarSource := CalendarSetup."Default Source Calendar";
    END;

    PROCEDURE BuildDateFilter@1040001(Calendar@1040000 : Record 2000000007) : Text[50];
    BEGIN
      WITH Calendar DO BEGIN
        IF "Period End" = 0D THEN
          "Period End" := 31129999D;
        "Period End" := NORMALDATE("Period End");
        EXIT(FORMAT("Period Start") + '..' + FORMAT("Period End"));
      END;
    END;

    PROCEDURE CalcDate2@1040003(DateFormula@1040000 : DateFormula;VAR Date@1040001 : Date;VAR Calendar2@1040002 : Record 2000000007);
    VAR
      Text1041000@1041000 : TextConst 'ENU=DateFormula ''%1'' cannot be evaluated.;ENG=DateFormula ''%1'' cannot be evaluated.';
      OriginalDate@1040012 : Date;
      PeriodFormulaTxt@1040011 : Text[250];
      PeriodFormulaTxtArray@1040010 : ARRAY [250] OF Text[1];
      NoOfStepsText@1040008 : Text[250];
      StringPosition@1040007 : Integer;
      NoOfSteps@1040006 : Integer;
      MoveToEnd@1040005 : Boolean;
      MoveToBegin@1040004 : Boolean;
      MoveSteps@1040003 : Boolean;
      ScopeIdentifier@1040013 : ARRAY [5] OF Text[1];
      CurrentChar@1040016 : Text[1];
      DateFormula2@1040015 : DateFormula;
      CYearAccountingPeriod@1040017 : Boolean;
    BEGIN
      OriginalDate := Date;
      IF Date = 0D THEN
        Date := WORKDATE;
      PeriodFormulaTxt := FORMAT(DateFormula);
      PeriodFormulaTxt := DELCHR(PeriodFormulaTxt,'=',' ');
      IF COPYSTR(PeriodFormulaTxt,1,1) <> '-' THEN
        PeriodFormulaTxt := '+' + PeriodFormulaTxt;
      FOR StringPosition := 1 TO STRLEN(PeriodFormulaTxt) DO BEGIN
        PeriodFormulaTxtArray[StringPosition] := COPYSTR(PeriodFormulaTxt,StringPosition,1)
      END;
      EVALUATE(DateFormula2,'<CD>');
      ScopeIdentifier[1] := COPYSTR(FORMAT(DateFormula2),2,1);
      EVALUATE(DateFormula2,'<CW>');
      ScopeIdentifier[2] := COPYSTR(FORMAT(DateFormula2),2,1);
      EVALUATE(DateFormula2,'<CM>');
      ScopeIdentifier[3] := COPYSTR(FORMAT(DateFormula2),2,1);
      EVALUATE(DateFormula2,'<CQ>');
      ScopeIdentifier[4] := COPYSTR(FORMAT(DateFormula2),2,1);
      EVALUATE(DateFormula2,'<CY>');
      ScopeIdentifier[5] := COPYSTR(FORMAT(DateFormula2),2,1);
      CurrentChar := COPYSTR(FORMAT(DateFormula2),1,1);
      CYearAccountingPeriod := UseAccountingPeriod AND (STRPOS(FORMAT(DateFormula),FORMAT(DateFormula2)) > 0);
      FOR StringPosition := 1 TO STRLEN(PeriodFormulaTxt) DO BEGIN
        CASE PeriodFormulaTxtArray[StringPosition] OF
          ScopeIdentifier[1]:
            BEGIN
              FindDate2(Date,Calendar2,Calendar2."Period Type"::Date,MoveToEnd,MoveToBegin,MoveSteps,NoOfSteps);
            END;
          ScopeIdentifier[2]:
            BEGIN
              FindDate2(Date,Calendar2,Calendar2."Period Type"::Week,MoveToEnd,MoveToBegin,MoveSteps,NoOfSteps);
            END;
          ScopeIdentifier[3]:
            BEGIN
              FindDate2(Date,Calendar2,Calendar2."Period Type"::Month,MoveToEnd,MoveToBegin,MoveSteps,NoOfSteps);
            END;
          ScopeIdentifier[4]:
            BEGIN
              FindDate2(Date,Calendar2,Calendar2."Period Type"::Quarter,MoveToEnd,MoveToBegin,MoveSteps,NoOfSteps);
            END;
          ScopeIdentifier[5]:
            BEGIN
              FindDate2(Date,Calendar2,Calendar2."Period Type"::Year,MoveToEnd,MoveToBegin,MoveSteps,NoOfSteps);
            END;
          '+':
            BEGIN
              IF PeriodFormulaTxtArray[StringPosition + 1] = CurrentChar THEN BEGIN
                MoveToEnd := TRUE;
                StringPosition := StringPosition + 1;
              END ELSE BEGIN
                MoveSteps := TRUE;
                CLEAR(NoOfStepsText);
                WHILE PeriodFormulaTxtArray[StringPosition + 1] IN ['0','1','2','3','4','5','6','7','8','9'] DO BEGIN
                  NoOfStepsText := NoOfStepsText + PeriodFormulaTxtArray[StringPosition + 1];
                  StringPosition := StringPosition + 1;
                END;
                IF NoOfStepsText <> '' THEN
                  EVALUATE(NoOfSteps,NoOfStepsText)
                ELSE
                  NoOfSteps := 1;
              END;
            END;
          '-':
            BEGIN
              IF PeriodFormulaTxtArray[StringPosition + 1] = CurrentChar THEN BEGIN
                MoveToBegin := TRUE;
                StringPosition := StringPosition + 1;
              END ELSE BEGIN
                MoveSteps := TRUE;
                CLEAR(NoOfStepsText);
                WHILE PeriodFormulaTxtArray[StringPosition + 1] IN ['0','1','2','3','4','5','6','7','8','9'] DO BEGIN
                  NoOfStepsText := NoOfStepsText + PeriodFormulaTxtArray[StringPosition + 1];
                  StringPosition := StringPosition + 1;
                END;
                IF NoOfStepsText <> '' THEN
                  EVALUATE(NoOfSteps,NoOfStepsText)
                ELSE
                  NoOfSteps := 1;
                NoOfSteps := -NoOfSteps;
              END;
            END;
          ELSE
            ERROR(Text1041000,PeriodFormulaTxt);
        END;
      END;
      Date := NORMALDATE(Date);
      IF NOT UseAccountingPeriod AND NOT CYearAccountingPeriod THEN
        Date := CALCDATE(DateFormula,OriginalDate);
    END;

    LOCAL PROCEDURE FindDate2@1040014(VAR Date2@1040000 : Date;VAR Calendar2@1040003 : Record 2000000007;PeriodType@1040001 : 'Day,Week,Month,Quarter,Year';VAR MoveToEnd@1040008 : Boolean;VAR MoveToBegin@1040007 : Boolean;VAR MoveSteps@1040006 : Boolean;VAR NoOfSteps@1040005 : Integer);
    VAR
      AccountingPeriod2@1040002 : Record 10560;
      DateFormula@1040004 : DateFormula;
    BEGIN
      GetCalendarSetup;
      UseAccountingPeriodTmp := UseAccountingPeriod;
      IF UseAccountingPeriod THEN BEGIN
        CASE PeriodType OF
          PeriodType::Day:
            IF CalendarSetup."Use System For Day Period" THEN
              UseAccountingPeriod := FALSE;
          PeriodType::Week:
            IF CalendarSetup."Use System For Week Period" THEN
              UseAccountingPeriod := FALSE;
          PeriodType::Month:
            IF CalendarSetup."Use System For Month Period" THEN
              UseAccountingPeriod := FALSE;
          PeriodType::Quarter:
            IF CalendarSetup."Use System For Quarter Period" THEN
              UseAccountingPeriod := FALSE;
        END;
      END;
      IF UseAccountingPeriod THEN BEGIN
        WITH AccountingPeriod2 DO BEGIN
          RESET;
          SETRANGE("Period Type",PeriodType);
          "Period Start" := Date2;
          SETRANGE("Period Start",0D,Date2);
          FIND('+');
          SETRANGE("Period Start");
          CASE TRUE OF
            MoveSteps:
              BEGIN
                EVALUATE(DateFormula,FORMAT(NoOfSteps) + COPYSTR(FORMAT(PeriodType),1,1));
                Date2 := CALCDATE(DateFormula,Date2);
              END;
            MoveToBegin:
              Date2 := "Period Start";
            MoveToEnd:
              Date2 := NORMALDATE("Period End");
          END;
          Calendar2.TRANSFERFIELDS(AccountingPeriod2);
        END;
      END ELSE BEGIN
        WITH Calendar2 DO BEGIN
          RESET;
          SETRANGE("Period Type",PeriodType);
          "Period Start" := Date2;
          SETRANGE("Period Start",0D,Date2);
          FIND('+');
          SETRANGE("Period Start");
          CASE TRUE OF
            MoveSteps:
              BEGIN
                SETRANGE("Period Start");
                NEXT(NoOfSteps);
                Date2 := "Period Start";
              END;
            MoveToBegin:
              Date2 := "Period Start";
            MoveToEnd:
              Date2 := NORMALDATE("Period End");
          END;
        END;
      END;
      MoveToEnd := FALSE;
      MoveToBegin := FALSE;
      MoveSteps := FALSE;
      NoOfSteps := 0;
    END;

    PROCEDURE UpdatePeriodType@1040015(VAR Calendar@1040001 : Record 2000000007;VAR AccountingPeriod@1040000 : Record 10560);
    BEGIN
      IF Calendar."Period Type" = Calendar."Period Type"::Date THEN
        AccountingPeriod."Period Type" := AccountingPeriod."Period Type"::Day
      ELSE
        Calendar.COPYFILTER("Period Type",AccountingPeriod."Period Type");
    END;

    BEGIN
    END.
  }
}

