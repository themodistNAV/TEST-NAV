OBJECT Page 99000816 Production Order Statistics
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Production Order Statistics;
               ENG=Production Order Statistics];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table5405;
    DataCaptionFields=No.,Description;
    PageType=Card;
    OnOpenPage=VAR
                 MfgSetup@1000 : Record 99000765;
               BEGIN
                 MfgSetup.GET;
                 MfgSetup.TESTFIELD("Show Capacity In");
                 CapacityUoM := MfgSetup."Show Capacity In";
               END;

    OnAfterGetRecord=VAR
                       CalendarMgt@1000 : Codeunit 99000755;
                     BEGIN
                       CLEAR(StdCost);
                       CLEAR(ExpCost);
                       CLEAR(ActCost);
                       CLEAR(CostCalcMgt);

                       GLSetup.GET;

                       ExpCapNeed := CostCalcMgt.CalcProdOrderExpCapNeed(Rec,FALSE) / CalendarMgt.TimeFactor(CapacityUoM);
                       ActTimeUsed := CostCalcMgt.CalcProdOrderActTimeUsed(Rec,FALSE) / CalendarMgt.TimeFactor(CapacityUoM);
                       ProdOrderLine.SETRANGE(Status,Status);
                       ProdOrderLine.SETRANGE("Prod. Order No.","No.");
                       ProdOrderLine.SETRANGE("Planning Level Code",0);
                       ProdOrderLine.SETFILTER("Item No.",'<>%1','');
                       IF ProdOrderLine.FIND('-') THEN
                         REPEAT
                           CostCalcMgt.CalcShareOfTotalCapCost(ProdOrderLine,ShareOfTotalCapCost);
                           CostCalcMgt.CalcProdOrderLineStdCost(
                             ProdOrderLine,1,GLSetup."Amount Rounding Precision",
                             StdCost[1],StdCost[2],StdCost[3],StdCost[4],StdCost[5]);
                           CostCalcMgt.CalcProdOrderLineExpCost(
                             ProdOrderLine,ShareOfTotalCapCost,
                             ExpCost[1],ExpCost[2],ExpCost[3],ExpCost[4],ExpCost[5]);
                           CostCalcMgt.CalcProdOrderLineActCost(
                             ProdOrderLine,
                             ActCost[1],ActCost[2],ActCost[3],ActCost[4],ActCost[5],
                             DummyVar,DummyVar,DummyVar,DummyVar,DummyVar);
                         UNTIL ProdOrderLine.NEXT = 0;

                       CalcTotal(StdCost,StdCost[6]);
                       CalcTotal(ExpCost,ExpCost[6]);
                       CalcTotal(ActCost,ActCost[6]);
                       CalcVariance;
                       TimeExpendedPct := CalcIndicatorPct(ExpCapNeed,ActTimeUsed);
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 1903895301;2;Group  ;
                GroupType=FixedLayout }

    { 1900545401;3;Group  ;
                CaptionML=[ENU=Standard Cost;
                           ENG=Standard Cost] }

    { 38  ;4   ;Field     ;
                Name=MaterialCost_StandardCost;
                CaptionML=[ENU=Material Cost;
                           ENG=Material Cost];
                SourceExpr=StdCost[1];
                AutoFormatType=1;
                Editable=FALSE }

    { 25  ;4   ;Field     ;
                Name=CapacityCost_StandardCost;
                CaptionML=[ENU=Capacity Cost;
                           ENG=Capacity Cost];
                SourceExpr=StdCost[2];
                AutoFormatType=1;
                Editable=FALSE }

    { 30  ;4   ;Field     ;
                CaptionML=[ENU=Subcontracted Cost;
                           ENG=Subcontracted Cost];
                SourceExpr=StdCost[3];
                AutoFormatType=1;
                Editable=FALSE }

    { 29  ;4   ;Field     ;
                CaptionML=[ENU=Capacity Overhead;
                           ENG=Capacity Overhead];
                SourceExpr=StdCost[4];
                AutoFormatType=1;
                Editable=FALSE }

    { 45  ;4   ;Field     ;
                CaptionML=[ENU=Manufacturing Overhead;
                           ENG=Manufacturing Overhead];
                SourceExpr=StdCost[5];
                AutoFormatType=1;
                Editable=FALSE }

    { 23  ;4   ;Field     ;
                Name=TotalCost_StandardCost;
                CaptionML=[ENU=Total Cost;
                           ENG=Total Cost];
                SourceExpr=StdCost[6];
                AutoFormatType=1;
                Editable=FALSE }

    { 10  ;4   ;Field     ;
                CaptionML=[ENU=Capacity Need;
                           ENG=Capacity Need];
                SourceExpr=CapacityUoM;
                TableRelation="Capacity Unit of Measure".Code;
                OnValidate=VAR
                             CalendarMgt@1000 : Codeunit 99000755;
                           BEGIN
                             ExpCapNeed := CostCalcMgt.CalcProdOrderExpCapNeed(Rec,FALSE) / CalendarMgt.TimeFactor(CapacityUoM);
                             ActTimeUsed := CostCalcMgt.CalcProdOrderActTimeUsed(Rec,FALSE) / CalendarMgt.TimeFactor(CapacityUoM);
                           END;
                            }

    { 1900724501;3;Group  ;
                CaptionML=[ENU=Expected Cost;
                           ENG=Expected Cost] }

    { 39  ;4   ;Field     ;
                Name=MaterialCost_ExpectedCost;
                SourceExpr=ExpCost[1];
                AutoFormatType=1;
                Editable=FALSE }

    { 9   ;4   ;Field     ;
                Name=CapacityCost_ExpectedCost;
                SourceExpr=ExpCost[2];
                AutoFormatType=1;
                Editable=FALSE }

    { 31  ;4   ;Field     ;
                SourceExpr=ExpCost[3];
                AutoFormatType=1;
                Editable=FALSE }

    { 32  ;4   ;Field     ;
                SourceExpr=ExpCost[4];
                AutoFormatType=1;
                Editable=FALSE }

    { 44  ;4   ;Field     ;
                SourceExpr=ExpCost[5];
                Editable=FALSE }

    { 19  ;4   ;Field     ;
                Name=TotalCost_ExpectedCost;
                SourceExpr=ExpCost[6];
                AutoFormatType=1;
                Editable=FALSE }

    { 11  ;4   ;Field     ;
                DecimalPlaces=0:5;
                SourceExpr=ExpCapNeed;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              CostCalcMgt.CalcProdOrderExpCapNeed(Rec,TRUE);
                            END;
                             }

    { 1900724401;3;Group  ;
                CaptionML=[ENU=Actual Cost;
                           ENG=Actual Cost] }

    { 40  ;4   ;Field     ;
                Name=MaterialCost_ActualCost;
                SourceExpr=ActCost[1];
                AutoFormatType=1;
                Editable=FALSE }

    { 12  ;4   ;Field     ;
                Name=CapacityCost_ActualCost;
                SourceExpr=ActCost[2];
                AutoFormatType=1;
                Editable=FALSE }

    { 33  ;4   ;Field     ;
                SourceExpr=ActCost[3];
                AutoFormatType=1;
                Editable=FALSE }

    { 34  ;4   ;Field     ;
                SourceExpr=ActCost[4];
                AutoFormatType=1;
                Editable=FALSE }

    { 43  ;4   ;Field     ;
                SourceExpr=ActCost[5];
                Editable=FALSE }

    { 20  ;4   ;Field     ;
                Name=TotalCost_ActualCost;
                SourceExpr=ActCost[6];
                AutoFormatType=1;
                Editable=FALSE }

    { 14  ;4   ;Field     ;
                DecimalPlaces=0:5;
                SourceExpr=ActTimeUsed;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              CostCalcMgt.CalcProdOrderActTimeUsed(Rec,TRUE);
                            END;
                             }

    { 1900724301;3;Group  ;
                CaptionML=[ENU=Dev. %;
                           ENG=Dev. %] }

    { 41  ;4   ;Field     ;
                DecimalPlaces=0:5;
                SourceExpr=VarPct[1];
                Editable=FALSE }

    { 15  ;4   ;Field     ;
                DecimalPlaces=0:5;
                SourceExpr=VarPct[2];
                Editable=FALSE }

    { 35  ;4   ;Field     ;
                DecimalPlaces=0:5;
                SourceExpr=VarPct[3];
                Editable=FALSE }

    { 36  ;4   ;Field     ;
                DecimalPlaces=0:5;
                SourceExpr=VarPct[4];
                Editable=FALSE }

    { 42  ;4   ;Field     ;
                DecimalPlaces=0:5;
                SourceExpr=VarPct[5];
                Editable=FALSE }

    { 21  ;4   ;Field     ;
                DecimalPlaces=0:5;
                SourceExpr=VarPct[6];
                Editable=FALSE }

    { 17  ;4   ;Field     ;
                DecimalPlaces=0:5;
                SourceExpr=TimeExpendedPct;
                Editable=FALSE }

    { 1900295601;3;Group  ;
                CaptionML=[ENU=Variance;
                           ENG=Variance] }

    { 24  ;4   ;Field     ;
                SourceExpr=VarAmt[1];
                AutoFormatType=1;
                Editable=FALSE }

    { 22  ;4   ;Field     ;
                SourceExpr=VarAmt[2];
                AutoFormatType=1;
                Editable=FALSE }

    { 16  ;4   ;Field     ;
                SourceExpr=VarAmt[3];
                AutoFormatType=1;
                Editable=FALSE }

    { 13  ;4   ;Field     ;
                SourceExpr=VarAmt[4];
                AutoFormatType=1;
                Editable=FALSE }

    { 7   ;4   ;Field     ;
                SourceExpr=VarAmt[5];
                AutoFormatType=1;
                Editable=FALSE }

    { 47  ;4   ;Field     ;
                SourceExpr=VarAmt[6];
                AutoFormatType=1;
                Editable=FALSE }

    { 49  ;4   ;Field     ;
                SourceExpr=Text000;
                Visible=FALSE }

  }
  CODE
  {
    VAR
      ProdOrderLine@1007 : Record 5406;
      GLSetup@1008 : Record 98;
      CostCalcMgt@1006 : Codeunit 5836;
      StdCost@1000 : ARRAY [6] OF Decimal;
      ExpCost@1001 : ARRAY [6] OF Decimal;
      ActCost@1002 : ARRAY [6] OF Decimal;
      VarAmt@1018 : ARRAY [6] OF Decimal;
      VarPct@1019 : ARRAY [6] OF Decimal;
      DummyVar@1005 : Decimal;
      ShareOfTotalCapCost@1004 : Decimal;
      TimeExpendedPct@1003 : Decimal;
      ExpCapNeed@1009 : Decimal;
      ActTimeUsed@1010 : Decimal;
      Text000@1011 : TextConst 'ENU=Placeholder;ENG=Placeholder';
      CapacityUoM@1012 : Code[10];

    LOCAL PROCEDURE CalcTotal@2(Operand@1000 : ARRAY [6] OF Decimal;VAR Total@1001 : Decimal);
    VAR
      i@1002 : Integer;
    BEGIN
      Total := 0;

      FOR i := 1 TO ARRAYLEN(Operand) - 1 DO
        Total := Total + Operand[i];
    END;

    LOCAL PROCEDURE CalcVariance@3();
    VAR
      i@1000 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(VarAmt) DO BEGIN
        VarAmt[i] := ActCost[i] - StdCost[i];
        VarPct[i] := CalcIndicatorPct(StdCost[i],ActCost[i]);
      END;
    END;

    LOCAL PROCEDURE CalcIndicatorPct@1(Value@1000 : Decimal;Sum@1001 : Decimal) : Decimal;
    BEGIN
      IF Value = 0 THEN
        EXIT(0);

      EXIT(ROUND((Sum - Value) / Value * 100,1));
    END;

    BEGIN
    END.
  }
}

