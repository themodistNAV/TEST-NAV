OBJECT Table 9062364 Panel Link
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Panel Code");
               CheckModifyPermission();
               IF (Rec.ID = 0) THEN
                 Rec.ID := NewId();
               IF (Rec.Sequence = 0) THEN
                 Rec.Sequence := NewSequence();
               UpdateControlName();
               PanelTimestampManagement.Add(Rec."Panel Code");
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               CheckModifyPermission();
               PanelTimestampManagement.Add(Rec."Panel Code");
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               CheckModifyPermission();
               PanelEvent.RESET();
               PanelEvent.SETRANGE("Parent Table ID", DATABASE::"Panel Link");
               PanelEvent.SETRANGE("Parent Code", Rec."Panel Code");
               PanelEvent.SETRANGE("Parent ID", Rec.ID);
               PanelEvent.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               CheckModifyPermission();
               ProcessRename(xRec."Panel Code", xRec.ID, Rec."Panel Code", Rec.ID);
             END;

    CaptionML=[ENU=Panel Link;
               ENG=Panel Link];
    LookupPageID=Page9062452;
    DrillDownPageID=Page9062452;
  }
  FIELDS
  {
    { 1   ;   ;Panel Code          ;Code20        ;TableRelation=Panel;
                                                   OnValidate=BEGIN
                                                                UpdateControlName();
                                                              END;

                                                   CaptionML=[ENU=Panel Code;
                                                              ENG=Panel Code] }
    { 2   ;   ;ID                  ;Integer       ;OnValidate=BEGIN
                                                                UpdateControlName();
                                                              END;

                                                   CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 3   ;   ;Control Name        ;Text100       ;CaptionML=[ENU=Control Name;
                                                              ENG=Control Name] }
    { 4   ;   ;Text                ;Text100       ;CaptionML=[ENU=Text;
                                                              ENG=Text] }
    { 5   ;   ;Font Size           ;Integer       ;CaptionML=[ENU=Font Size;
                                                              ENG=Font Size];
                                                   MinValue=0 }
    { 6   ;   ;Font Style          ;Option        ;CaptionML=[ENU=Font Style;
                                                              ENG=Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline] }
    { 7   ;   ;Colour Code         ;Code20        ;TableRelation="System Colour";
                                                   OnLookup=BEGIN
                                                              IF (SystemColourManagement.SystemColourLookup(Rec."Colour Code")) THEN
                                                                Rec.VALIDATE("Colour Code");
                                                            END;

                                                   CaptionML=[ENU=Colour Code;
                                                              ENG=Colour Code] }
    { 8   ;   ;Sequence            ;Integer       ;CaptionML=[ENU=Sequence;
                                                              ENG=Sequence] }
    { 9   ;   ;Event Description   ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Panel Event".Description WHERE (Parent Table ID=CONST(9062364),
                                                                                                       Parent Code=FIELD(Panel Code),
                                                                                                       Parent ID=FIELD(ID),
                                                                                                       Type=FIELD(FILTER(Event Type Filter))));
                                                   CaptionML=[ENU=Event Description;
                                                              ENG=Event Description];
                                                   Editable=No }
    { 10  ;   ;Event Type Filter   ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Event Type Filter;
                                                              ENG=Event Type Filter];
                                                   OptionCaptionML=[ENU=" ,Click";
                                                                    ENG=" ,Click"];
                                                   OptionString=[ ,Click] }
    { 11  ;   ;Event Exists        ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Panel Event" WHERE (Parent Table ID=CONST(9062364),
                                                                                          Parent Code=FIELD(Panel Code),
                                                                                          Parent ID=FIELD(ID),
                                                                                          Type=FIELD(Event Type Filter)));
                                                   CaptionML=[ENU=Event Exists;
                                                              ENG=Event Exists];
                                                   Editable=No }
    { 12  ;   ;Events              ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Panel Event" WHERE (Parent Table ID=CONST(9062364),
                                                                                          Parent Code=FIELD(Panel Code),
                                                                                          Parent ID=FIELD(ID)));
                                                   CaptionML=[ENU=Events;
                                                              ENG=Events];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 13  ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ENG=Blocked] }
    { 20  ;   ;Parameter 1         ;Text50        ;CaptionML=[ENU=Parameter 1;
                                                              ENG=Parameter 1] }
    { 21  ;   ;Parameter 2         ;Text50        ;CaptionML=[ENU=Parameter 2;
                                                              ENG=Parameter 2] }
    { 22  ;   ;Parameter 3         ;Text50        ;CaptionML=[ENU=Parameter 3;
                                                              ENG=Parameter 3] }
    { 23  ;   ;Parameter 4         ;Text50        ;CaptionML=[ENU=Parameter 4;
                                                              ENG=Parameter 4] }
    { 24  ;   ;Parameter 5         ;Text50        ;CaptionML=[ENU=Parameter 5;
                                                              ENG=Parameter 5] }
    { 25  ;   ;Parameter 6         ;Text50        ;CaptionML=[ENU=Parameter 6;
                                                              ENG=Parameter 6] }
    { 30  ;   ;Panel Data ID       ;Integer       ;CaptionML=[ENU=Panel Data ID;
                                                              ENG=Panel Data ID] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Panel Code,ID                           ;Clustered=Yes }
    {    ;Panel Code,Sequence,ID                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Panel@1000000008 : Record 9062363;
      PanelEvent@1000000003 : Record 9062369;
      PanelPersonalisation@1000000006 : Record 9062372;
      EnhancedPermissionsMgt@1000000009 : Codeunit 9062277;
      PanelEventManagement@1000000004 : Codeunit 9062323;
      PanelTimestampManagement@1000000002 : Codeunit 9062385;
      PanelToolkit@1000000000 : Codeunit 9062320;
      SystemColourManagement@1000000007 : Codeunit 9062344;
      TnpToolkit@1000000001 : Codeunit 9062230;
      tEmptyEvent@1000000005 : TextConst 'ENU=(Click here to define what happens on link %1);ENG=(Click here to define what happens on link %1)';

    PROCEDURE "--- Initialisation ---"@1000000008();
    BEGIN
    END;

    PROCEDURE NewId@1000000015() : Integer;
    VAR
      lPanelLink@1000000000 : Record 9062364;
    BEGIN
      //DOC NA2015.3 - Returning new ID
      //  <- The ID

      Rec.TESTFIELD("Panel Code");

      lPanelLink.RESET();
      lPanelLink.SETRANGE("Panel Code", Rec."Panel Code");
      IF (lPanelLink.FINDLAST()) THEN
        EXIT(lPanelLink.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE NewIdFor@1000000006(pPanelCode@1000000001 : Code[20]) : Integer;
    BEGIN
      //DOC NA2015.4 - Returning new ID for given panel code
      //  -> pPanelCode: Panel code
      //  <- The ID

      Rec.RESET();
      Rec.SETRANGE("Panel Code", pPanelCode);
      IF (Rec.FINDLAST()) THEN
        EXIT(Rec.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE NewSequence@1000000000() : Integer;
    VAR
      lPanelLink@1000000000 : Record 9062364;
    BEGIN
      //DOC NA2015.4 - Returning new sequence
      //  <- The sequence

      lPanelLink.RESET();
      lPanelLink.SETCURRENTKEY("Panel Code", Sequence);
      lPanelLink.SETRANGE("Panel Code", Rec."Panel Code");
      IF (lPanelLink.FINDLAST()) THEN
        EXIT(lPanelLink.Sequence + 10)
      ELSE
        EXIT(10);
    END;

    PROCEDURE "--- General ---"@1000000009();
    BEGIN
    END;

    PROCEDURE ProcessRename@1000000012(pFromPanelCode@1000000000 : Code[20];pFromId@1000000002 : Integer;pToPanelCode@1000000001 : Code[20];pToId@1000000003 : Integer);
    VAR
      lFromPanelEvent@1000000004 : Record 9062369;
      lToPanelEvent@1000000005 : Record 9062369;
    BEGIN
      //DOC NA2015.2 - Processing rename (tables with non-standard relations)
      //  -> pFromPanelCode: From panel code
      //  -> pFromId: From ID
      //  -> pToPanelCode: To panel code
      //  -> pToId: To ID

      IF ((pFromPanelCode = pToPanelCode) AND (pFromId = pToId)) THEN
        EXIT;

      lFromPanelEvent.RESET();
      lFromPanelEvent.SETRANGE("Parent Table ID", DATABASE::"Panel Link");
      lFromPanelEvent.SETRANGE("Parent Code", pFromPanelCode);
      lFromPanelEvent.SETRANGE("Parent ID", pFromId);
      IF (lFromPanelEvent.FINDSET()) THEN
      BEGIN
        REPEAT
          lToPanelEvent := lFromPanelEvent;
          lToPanelEvent."Parent Code" := pToPanelCode;
          lToPanelEvent."Parent ID" := pToId;
          lToPanelEvent.INSERT(TRUE);
        UNTIL (lFromPanelEvent.NEXT() = 0);
        lFromPanelEvent.DELETEALL(TRUE);
      END;

      UpdateControlName();
    END;

    PROCEDURE UpdateControlName@1000000013();
    VAR
      eName@1000000000 : TextConst 'ENU=Control_%1_%2;ENG=Control_%1_%2';
    BEGIN
      //DOC NA2015.1 - Updating control name

      Rec."Control Name" := PanelToolkit.CodeIdToControlName(DATABASE::"Panel Link", Rec."Panel Code", Rec.ID);
    END;

    PROCEDURE MoveTo@1000000026(pDirection@1000000001 : Integer) : Boolean;
    VAR
      lTilePanelLink@1000000000 : Record 9062364;
      lFound@1000000004 : Boolean;
      lResult@1000000002 : Boolean;
      lSequence@1000000003 : Integer;
    BEGIN
      //DOC NA2015.8 - Moving link up / down on a list of link (sorted by sequence)
      //  -> pDirection: -1 = Up, 1 = Down, the rest ignored
      //  <- TRUE = Moved, FALSE = Not moved

      IF ( NOT (pDirection IN [-1, 1])) THEN
        EXIT(FALSE);

      lTilePanelLink.RESET();
      lTilePanelLink.SETCURRENTKEY("Panel Code", Sequence);
      lTilePanelLink.SETRANGE("Panel Code", Rec."Panel Code");
      IF (pDirection < 0) THEN
      BEGIN
        lTilePanelLink.SETFILTER(Sequence, '<%1', Rec.Sequence);
        lFound := lTilePanelLink.FINDLAST();
      END
      ELSE
      BEGIN
        lTilePanelLink.SETFILTER(Sequence, '>%1', Rec.Sequence);
        lFound := lTilePanelLink.FINDFIRST();
      END;
      IF (lFound) THEN
      BEGIN
        lSequence := lTilePanelLink.Sequence;
        lTilePanelLink.Sequence := Rec.Sequence;
        lTilePanelLink.MODIFY(TRUE);
        Rec.Sequence := lSequence;
        Rec.MODIFY(TRUE);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE CopyParametersFromPanel@1000000040(pPanel@1000000000 : Record 9062363);
    BEGIN
      //DOC NA2015.8 - Copying parameters from the given panel
      //  -> pPanel: The panel

      Rec."Parameter 1" := pPanel."Parameter 1";
      Rec."Parameter 2" := pPanel."Parameter 2";
      Rec."Parameter 3" := pPanel."Parameter 3";
      Rec."Parameter 4" := pPanel."Parameter 4";
      Rec."Parameter 5" := pPanel."Parameter 5";
      Rec."Parameter 6" := pPanel."Parameter 6";
    END;

    LOCAL PROCEDURE CheckModifyPermission@1000000023();
    BEGIN
      //DOC NA2016.15 - Checking modify permission (given to the panel)

      IF ( NOT (Panel.GET(Rec."Panel Code"))) THEN
        EXIT;
      EnhancedPermissionsMgt.CheckPanelModifyPermission(Panel, USERID());
    END;

    PROCEDURE "--- Personalisation ---"@1000000010();
    BEGIN
    END;

    PROCEDURE IsBlocked@1000000007() : Boolean;
    BEGIN
      //DOC NA2015.1 - Returning if the link is blocked (including personalisation)
      //  <- The flag

      IF (PanelPersonalisation.GET(USERID, DATABASE::"Panel Link", Rec."Panel Code", Rec.ID)) THEN
        EXIT(PanelPersonalisation.Blocked)
      ELSE
        EXIT(Rec.Blocked);
    END;

    PROCEDURE GetBlocked@1000000011() : Boolean;
    BEGIN
      //DOC NA2015.1 - Returning if the link is blocked (including personalisation)
      //  <- The flag

      IF (PanelPersonalisation.GET(USERID, DATABASE::"Panel Link", Rec."Panel Code", Rec.ID)) THEN
        EXIT(PanelPersonalisation.Blocked)
      ELSE
        EXIT(Rec.Blocked);
    END;

    PROCEDURE SetBlocked@1000000003(pBlocked@1000000000 : Boolean);
    BEGIN
      //DOC NA2015.1 - Setting personalised blocked flag of the link
      //  -> pBlocked: The flag

      IF (PanelPersonalisation.GET(USERID, DATABASE::"Panel Link", Rec."Panel Code", Rec.ID)) THEN
      BEGIN
        IF (PanelPersonalisation.Blocked <> pBlocked) THEN
        BEGIN
          PanelPersonalisation.VALIDATE(Blocked, pBlocked);
          PanelPersonalisation.MODIFY();
        END;
      END
      ELSE
      BEGIN
        InitialisePersonalisation(PanelPersonalisation);
        PanelPersonalisation.VALIDATE(Blocked, pBlocked);
        PanelPersonalisation.INSERT(TRUE);
      END;
    END;

    PROCEDURE FilterPersonalisation@1000000005(VAR pPanelPersonalisation@1000000000 : Record 9062372);
    BEGIN
      //DOC NA2015.1 - Filtering personalisation recordset
      //  <> pPanelPersonalisation: The record

      pPanelPersonalisation.RESET();
      pPanelPersonalisation.SETRANGE("User ID", USERID);
      pPanelPersonalisation.SETRANGE("Parent Table ID", DATABASE::"Panel Link");
      pPanelPersonalisation.SETRANGE("Parent Code", Rec."Panel Code");
      pPanelPersonalisation.SETRANGE("Parent ID", Rec.ID);
    END;

    PROCEDURE InitialisePersonalisation@1000000004(VAR pPanelPersonalisation@1000000000 : Record 9062372);
    BEGIN
      //DOC NA2015.1 - Initialising personalisation
      //  <> pPanelPersonalisation: The record

      pPanelPersonalisation.INIT();
      pPanelPersonalisation.VALIDATE("User ID", USERID);
      pPanelPersonalisation.VALIDATE("Parent Table ID", DATABASE::"Panel Link");
      pPanelPersonalisation.VALIDATE("Parent Code", Rec."Panel Code");
      pPanelPersonalisation.VALIDATE("Parent ID", Rec.ID);
    END;

    PROCEDURE RemovePersonalisation@1000000014();
    VAR
      lPanelPersonalisation@1000000000 : Record 9062372;
    BEGIN
      //DOC NA2015.1 - Removing personalisation

      FilterPersonalisation(lPanelPersonalisation);
      lPanelPersonalisation.DELETEALL(TRUE);
    END;

    PROCEDURE "--- Events ---"@1000000052();
    BEGIN
    END;

    PROCEDURE EventsInformation@1000000021() : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning events information
      //  <- The information

      Rec.CALCFIELDS(Events);
      EXIT(PanelEventManagement.EventsInformation(Rec.Events));
    END;

    PROCEDURE ClickEventInformation@1000000051() : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning click event information
      //  <- The information

      EXIT(EventInformation(Rec."Event Type Filter"::Click));
    END;

    PROCEDURE EventInformation@1000000050(pEventType@1000000000 : Integer) : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning event information
      //  -> pEventType: Event type
      //  <- The information

      Rec.SETRANGE("Event Type Filter", pEventType);
      Rec.CALCFIELDS("Event Description");
      IF (Rec."Event Description" <> '') THEN
        EXIT(Rec."Event Description")
      ELSE
      BEGIN
        Rec."Event Type Filter" := pEventType;
        EXIT(STRSUBSTNO(tEmptyEvent, FORMAT(Rec."Event Type Filter")));
      END;
    END;

    PROCEDURE "--- Related Information ---"@1000000035();
    BEGIN
    END;

    PROCEDURE ShowEvents@1000000002();
    BEGIN
      //DOC NA2015.1 - Showing events

      PanelEventManagement.ShowEvents(DATABASE::"Panel Link", Rec."Panel Code", Rec.ID);
    END;

    PROCEDURE ShowEvent@1000000001(pEventType@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Showing an event
      //  -> pEventType: Event type

      PanelEventManagement.ShowEvent(DATABASE::"Panel Link", Rec."Panel Code", Rec.ID, pEventType);
    END;

    BEGIN
    {
      //DOC NA2015.1 JH 15/04/2014 - Created
      //DOC NA2015.1 JH 18/05/2014 - Panels 3
      //DOC NA2015.3 JH 30/07/2014 - Bugfixes
      //DOC NA2015.4 JH 16/02/2015 - Fixes
      //DOC NA2015.8 JH 26/06/2015 - Tile lists
      //DOC NA2016.8 JH 28/08/2015 - Upgraded to 2016
    }
    END.
  }
}

