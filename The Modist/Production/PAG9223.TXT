OBJECT Page 9223 Item Statistics Matrix
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Item Statistics Matrix;
               ENG=Item Statistics Matrix];
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=ItemName;
    PageType=List;
    OnInit=BEGIN
             Field32Visible := TRUE;
             Field31Visible := TRUE;
             Field30Visible := TRUE;
             Field29Visible := TRUE;
             Field28Visible := TRUE;
             Field27Visible := TRUE;
             Field26Visible := TRUE;
             Field25Visible := TRUE;
             Field24Visible := TRUE;
             Field23Visible := TRUE;
             Field22Visible := TRUE;
             Field21Visible := TRUE;
             Field20Visible := TRUE;
             Field19Visible := TRUE;
             Field18Visible := TRUE;
             Field17Visible := TRUE;
             Field16Visible := TRUE;
             Field15Visible := TRUE;
             Field14Visible := TRUE;
             Field13Visible := TRUE;
             Field12Visible := TRUE;
             Field11Visible := TRUE;
             Field10Visible := TRUE;
             Field9Visible := TRUE;
             Field8Visible := TRUE;
             Field7Visible := TRUE;
             Field6Visible := TRUE;
             Field5Visible := TRUE;
             Field4Visible := TRUE;
             Field3Visible := TRUE;
             Field2Visible := TRUE;
             Field1Visible := TRUE;
           END;

    OnOpenPage=BEGIN
                 Field1Visible := 1 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field2Visible := 2 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field3Visible := 3 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field4Visible := 4 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field5Visible := 5 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field6Visible := 6 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field7Visible := 7 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field8Visible := 8 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field9Visible := 9 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field10Visible := 10 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field11Visible := 11 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field12Visible := 12 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field13Visible := 13 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field14Visible := 14 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field15Visible := 15 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field16Visible := 16 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field17Visible := 17 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field18Visible := 18 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field19Visible := 19 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field20Visible := 20 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field21Visible := 21 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field22Visible := 22 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field23Visible := 23 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field24Visible := 24 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field25Visible := 25 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field26Visible := 26 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field27Visible := 27 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field28Visible := 28 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field29Visible := 29 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field30Visible := 30 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field31Visible := 31 <= MATRIX_CurrentNoOfMatrixColumn;
                 Field32Visible := 32 <= MATRIX_CurrentNoOfMatrixColumn;

                 WITH Item DO BEGIN
                   IF "No." <> '' THEN
                     ItemFilter := "No.";
                   IF GETFILTER("Date Filter") <> '' THEN
                     DateFilter := GETFILTER("Date Filter");
                   IF GETFILTER("Variant Filter") <> '' THEN
                     VariantFilter := GETFILTER("Variant Filter");
                   IF GETFILTER("Location Filter") <> '' THEN
                     LocationFilter := GETFILTER("Location Filter");
                 END;

                 IF ColumnDimCode = '' THEN
                   ColumnDimCode := Text002;
                 ItemBuffer."Column Option" := DimCodeToOption(ColumnDimCode);
                 PeriodInitialized := DateFilter <> '';
                 FindPeriod('');
                 ItemName := STRSUBSTNO('%1  %2',Item."No.",Item.Description);
               END;

    OnFindRecord=BEGIN
                   WITH ItemBuffer DO BEGIN
                     IF "Line Option" = "Line Option"::"Profit Calculation" THEN
                       IntegerLine.SETRANGE(Number,1,5)
                     ELSE
                       IF "Line Option" = "Line Option"::"Cost Specification" THEN
                         IntegerLine.SETRANGE(Number,1,9);
                     EXIT(FindRec("Line Option",Rec,Which));
                   END;
                 END;

    OnNextRecord=BEGIN
                   EXIT(NextRec(ItemBuffer."Line Option",Rec,Steps));
                 END;

    OnAfterGetRecord=VAR
                       MATRIX_Steps@1000 : Integer;
                     BEGIN
                       NameIndent := 0;
                       Amount := Calculate(FALSE);
                       MATRIX_ColumnOrdinal := 0;
                       IF MATRIX_OnFindRecord('=><') THEN BEGIN
                         MATRIX_ColumnOrdinal := 1;
                         REPEAT
                           MATRIX_OnAfterGetRecord(MATRIX_ColumnOrdinal);
                           MATRIX_Steps := MATRIX_OnNextRecord(1);
                           MATRIX_ColumnOrdinal := MATRIX_ColumnOrdinal + MATRIX_Steps;
                         UNTIL (MATRIX_ColumnOrdinal - MATRIX_Steps = ARRAYLEN(MatrixRecords)) OR (MATRIX_Steps = 0);
                         IF MATRIX_ColumnOrdinal <> 1 THEN
                           MATRIX_OnNextRecord(1 - MATRIX_ColumnOrdinal);
                       END;
                       NameOnFormat;
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                IndentationColumnName=NameIndent;
                IndentationControls=Name;
                GroupType=Repeater }

    { 22  ;2   ;Field     ;
                SourceExpr=Name;
                StyleExpr='Strong' }

    { 30  ;2   ;Field     ;
                CaptionML=[ENU=Total Amount;
                           ENG=Total Amount];
                BlankZero=Yes;
                SourceExpr=Amount;
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                StyleExpr='Strong';
                OnDrillDown=BEGIN
                              WITH ItemBuffer DO
                                IF NOT (("Line Option" = "Line Option"::"Profit Calculation") AND
                                        ((Name = FIELDCAPTION("Profit (LCY)")) OR (Name = FIELDCAPTION("Profit %"))) OR
                                        (("Line Option" = "Line Option"::"Cost Specification") AND (Name = FIELDCAPTION("Inventoriable Costs"))))
                                THEN BEGIN
                                  SetCommonFilters(ItemBuffer);
                                  SetFilters(ItemBuffer,0);
                                  DrillDown;
                                END;
                            END;
                             }

    { 1012;2   ;Field     ;
                Name=Field1;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[1];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[1];
                Visible=Field1Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(1);
                            END;
                             }

    { 1013;2   ;Field     ;
                Name=Field2;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[2];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[2];
                Visible=Field2Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(2);
                            END;
                             }

    { 1014;2   ;Field     ;
                Name=Field3;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[3];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[3];
                Visible=Field3Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(3);
                            END;
                             }

    { 1015;2   ;Field     ;
                Name=Field4;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[4];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[4];
                Visible=Field4Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(4);
                            END;
                             }

    { 1016;2   ;Field     ;
                Name=Field5;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[5];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[5];
                Visible=Field5Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(5);
                            END;
                             }

    { 1017;2   ;Field     ;
                Name=Field6;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[6];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[6];
                Visible=Field6Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(6);
                            END;
                             }

    { 1018;2   ;Field     ;
                Name=Field7;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[7];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[7];
                Visible=Field7Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(7);
                            END;
                             }

    { 1019;2   ;Field     ;
                Name=Field8;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[8];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[8];
                Visible=Field8Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(8);
                            END;
                             }

    { 1020;2   ;Field     ;
                Name=Field9;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[9];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[9];
                Visible=Field9Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(9);
                            END;
                             }

    { 1021;2   ;Field     ;
                Name=Field10;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[10];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[10];
                Visible=Field10Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(10);
                            END;
                             }

    { 1022;2   ;Field     ;
                Name=Field11;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[11];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[11];
                Visible=Field11Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(11);
                            END;
                             }

    { 1023;2   ;Field     ;
                Name=Field12;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[12];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[12];
                Visible=Field12Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(12);
                            END;
                             }

    { 1024;2   ;Field     ;
                Name=Field13;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[13];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[13];
                Visible=Field13Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(13);
                            END;
                             }

    { 1025;2   ;Field     ;
                Name=Field14;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[14];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[14];
                Visible=Field14Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(14);
                            END;
                             }

    { 1026;2   ;Field     ;
                Name=Field15;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[15];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[15];
                Visible=Field15Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(15);
                            END;
                             }

    { 1027;2   ;Field     ;
                Name=Field16;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[16];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[16];
                Visible=Field16Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(16);
                            END;
                             }

    { 1028;2   ;Field     ;
                Name=Field17;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[17];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[17];
                Visible=Field17Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(17);
                            END;
                             }

    { 1029;2   ;Field     ;
                Name=Field18;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[18];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[18];
                Visible=Field18Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(18);
                            END;
                             }

    { 1030;2   ;Field     ;
                Name=Field19;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[19];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[19];
                Visible=Field19Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(19);
                            END;
                             }

    { 1031;2   ;Field     ;
                Name=Field20;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[20];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[20];
                Visible=Field20Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(20);
                            END;
                             }

    { 1032;2   ;Field     ;
                Name=Field21;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[21];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[21];
                Visible=Field21Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(21);
                            END;
                             }

    { 1033;2   ;Field     ;
                Name=Field22;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[22];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[22];
                Visible=Field22Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(22);
                            END;
                             }

    { 1034;2   ;Field     ;
                Name=Field23;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[23];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[23];
                Visible=Field23Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(23);
                            END;
                             }

    { 1035;2   ;Field     ;
                Name=Field24;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[24];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[24];
                Visible=Field24Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(24);
                            END;
                             }

    { 1036;2   ;Field     ;
                Name=Field25;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[25];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[25];
                Visible=Field25Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(25);
                            END;
                             }

    { 1037;2   ;Field     ;
                Name=Field26;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[26];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[26];
                Visible=Field26Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(26);
                            END;
                             }

    { 1038;2   ;Field     ;
                Name=Field27;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[27];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[27];
                Visible=Field27Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(27);
                            END;
                             }

    { 1039;2   ;Field     ;
                Name=Field28;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[28];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[28];
                Visible=Field28Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(28);
                            END;
                             }

    { 1040;2   ;Field     ;
                Name=Field29;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[29];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[29];
                Visible=Field29Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(29);
                            END;
                             }

    { 1041;2   ;Field     ;
                Name=Field30;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[30];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[30];
                Visible=Field30Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(30);
                            END;
                             }

    { 1042;2   ;Field     ;
                Name=Field31;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[31];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[31];
                Visible=Field31Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(31);
                            END;
                             }

    { 1043;2   ;Field     ;
                Name=Field32;
                BlankZero=Yes;
                SourceExpr=MATRIX_CellData[32];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + MATRIX_CaptionSet[32];
                Visible=Field32Visible;
                OnDrillDown=BEGIN
                              MATRIX_OnDrillDown(32);
                            END;
                             }

  }
  CODE
  {
    VAR
      Item@1081 : Record 27;
      ItemBuffer@1082 : Record 5821;
      IntegerLine@1083 : Record 2000000026;
      MatrixMgt@1002 : Codeunit 9200;
      ColumnDimCode@1084 : Text[30];
      ItemName@1085 : Text[250];
      PeriodType@1086 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      RoundingFactor@1087 : 'None,1,1000,1000000';
      AmountType@1088 : 'Net Change,Balance at Date';
      DateFilter@1089 : Text[30];
      InternalDateFilter@1090 : Text[30];
      ItemFilter@1091 : Code[250];
      VariantFilter@1092 : Code[250];
      LocationFilter@1093 : Code[250];
      ItemChargesFilter@1094 : Code[250];
      PeriodInitialized@1096 : Boolean;
      PerUnit@1098 : Boolean;
      IncludeExpected@1099 : Boolean;
      Qty@1101 : Decimal;
      CellAmount@1102 : Decimal;
      Text002@1103 : TextConst 'ENU=Period;ENG=Period';
      MatrixRecords@1106 : ARRAY [32] OF Record 367;
      MATRIX_CurrentNoOfMatrixColumn@1107 : Integer;
      MATRIX_ColumnOrdinal@1000 : Integer;
      MATRIX_CellData@1108 : ARRAY [32] OF Decimal;
      MATRIX_CaptionSet@1109 : ARRAY [32] OF Text[1024];
      RoundingFactorFormatString@1039 : Text;
      MatrixRecord@1001 : Record 367;
      Field1Visible@19069335 : Boolean INDATASET;
      Field2Visible@19014807 : Boolean INDATASET;
      Field3Visible@19062679 : Boolean INDATASET;
      Field4Visible@19074839 : Boolean INDATASET;
      Field5Visible@19043543 : Boolean INDATASET;
      Field6Visible@19067287 : Boolean INDATASET;
      Field7Visible@19067863 : Boolean INDATASET;
      Field8Visible@19039959 : Boolean INDATASET;
      Field9Visible@19008663 : Boolean INDATASET;
      Field10Visible@19006501 : Boolean INDATASET;
      Field11Visible@19052468 : Boolean INDATASET;
      Field12Visible@19013039 : Boolean INDATASET;
      Field13Visible@19079726 : Boolean INDATASET;
      Field14Visible@19077225 : Boolean INDATASET;
      Field15Visible@19035896 : Boolean INDATASET;
      Field16Visible@19003763 : Boolean INDATASET;
      Field17Visible@19049730 : Boolean INDATASET;
      Field18Visible@19007213 : Boolean INDATASET;
      Field19Visible@19053180 : Boolean INDATASET;
      Field20Visible@19014629 : Boolean INDATASET;
      Field21Visible@19060596 : Boolean INDATASET;
      Field22Visible@19021167 : Boolean INDATASET;
      Field23Visible@19047854 : Boolean INDATASET;
      Field24Visible@19045353 : Boolean INDATASET;
      Field25Visible@19004024 : Boolean INDATASET;
      Field26Visible@19011891 : Boolean INDATASET;
      Field27Visible@19057858 : Boolean INDATASET;
      Field28Visible@19015341 : Boolean INDATASET;
      Field29Visible@19061308 : Boolean INDATASET;
      Field30Visible@19010597 : Boolean INDATASET;
      Field31Visible@19056564 : Boolean INDATASET;
      Field32Visible@19017135 : Boolean INDATASET;
      NameIndent@19079073 : Integer INDATASET;

    LOCAL PROCEDURE DimCodeToOption@1110(DimCode@1000 : Text[30]) : Integer;
    VAR
      Location@1111 : Record 14;
    BEGIN
      CASE DimCode OF
        '':
          EXIT(-1);
        Text002:
          EXIT(4);
        Location.TABLECAPTION:
          EXIT(5);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE FindRec@1112(DimOption@1000 : 'Profit Calculation,Cost Specification,Purch. Item Charge Spec.,Sales Item Charge Spec.,Period,Location';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[250]) : Boolean;
    VAR
      ItemCharge@1113 : Record 5800;
      Location@1114 : Record 14;
      Period@1115 : Record 2000000007;
      PeriodFormMgt@1116 : Codeunit 359;
      Found@1117 : Boolean;
    BEGIN
      CASE DimOption OF
        DimOption::"Profit Calculation",
        DimOption::"Cost Specification":
          BEGIN
            IF EVALUATE(IntegerLine.Number,DimCodeBuf.Code) THEN;
            Found := IntegerLine.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(IntegerLine,DimCodeBuf);
          END;
        DimOption::"Purch. Item Charge Spec.",
        DimOption::"Sales Item Charge Spec.":
          BEGIN
            ItemCharge."No." := DimCodeBuf.Code;
            Found := ItemCharge.FIND(Which);
            IF Found THEN
              CopyAddChargesToBuf(ItemCharge,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF NOT PeriodInitialized THEN
              DateFilter := '';
            PeriodInitialized := TRUE;
            Period.RESET;
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter)
            ELSE
              IF NOT PeriodInitialized AND (InternalDateFilter <> '') THEN
                Period.SETFILTER("Period Start",InternalDateFilter);
            IF DimCodeBuf."Period Start" = 0D THEN
              Period.FINDFIRST
            ELSE
              Period."Period Start" := DimCodeBuf."Period Start";
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            IF Found THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::Location:
          BEGIN
            Location.Code := DimCodeBuf.Code;
            IF LocationFilter <> '' THEN
              Location.SETFILTER(Code,LocationFilter);
            Found := Location.FIND(Which);
            IF Found THEN
              CopyLocationToBuf(Location,DimCodeBuf);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE NextRec@1118(DimOption@1000 : 'Profit Calculation,Cost Specification,Purch. Item Charge Spec.,Sales Item Charge Spec.,Period,Location';VAR DimCodeBuf@1001 : Record 367;Steps@1002 : Integer) : Integer;
    VAR
      ItemCharge@1119 : Record 5800;
      Location@1120 : Record 14;
      Period@1121 : Record 2000000007;
      PeriodFormMgt@1122 : Codeunit 359;
      ResultSteps@1123 : Integer;
    BEGIN
      CASE DimOption OF
        DimOption::"Profit Calculation",
        DimOption::"Cost Specification":
          BEGIN
            IF EVALUATE(IntegerLine.Number,DimCodeBuf.Code) THEN;
            ResultSteps := IntegerLine.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(IntegerLine,DimCodeBuf);
          END;
        DimOption::"Purch. Item Charge Spec.",
        DimOption::"Sales Item Charge Spec.":
          BEGIN
            ItemCharge."No." := DimCodeBuf.Code;
            IF ItemChargesFilter <> '' THEN
              ItemCharge.SETFILTER("No.",ItemChargesFilter);
            ResultSteps := ItemCharge.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyAddChargesToBuf(ItemCharge,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter);
            Period."Period Start" := DimCodeBuf."Period Start";
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            IF ResultSteps <> 0 THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::Location:
          BEGIN
            Location.Code := DimCodeBuf.Code;
            IF LocationFilter <> '' THEN
              Location.SETFILTER(Code,LocationFilter);
            ResultSteps := Location.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyLocationToBuf(Location,DimCodeBuf);
          END;
      END;
      EXIT(ResultSteps);
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@1124(VAR TheDimValue@1000 : Record 2000000026;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH ItemBuffer DO
        CASE "Line Option" OF
          "Line Option"::"Profit Calculation":
            CASE TheDimValue.Number OF
              1:
                InsertRow('1',FIELDCAPTION("Sales (LCY)"),0,FALSE,TheDimCodeBuf);
              2:
                InsertRow('2',FIELDCAPTION("COGS (LCY)"),0,FALSE,TheDimCodeBuf);
              3:
                InsertRow('3',FIELDCAPTION("Non-Invtbl. Costs (LCY)"),0,FALSE,TheDimCodeBuf);
              4:
                InsertRow('4',FIELDCAPTION("Profit (LCY)"),0,FALSE,TheDimCodeBuf);
              5:
                InsertRow('5',FIELDCAPTION("Profit %"),0,FALSE,TheDimCodeBuf);
            END;
          "Line Option"::"Cost Specification":
            CASE TheDimValue.Number OF
              1:
                InsertRow('1',FIELDCAPTION("Inventoriable Costs"),0,TRUE,TheDimCodeBuf);
              2:
                InsertRow('2',FIELDCAPTION("Direct Cost (LCY)"),1,FALSE,TheDimCodeBuf);
              3:
                InsertRow('3',FIELDCAPTION("Revaluation (LCY)"),1,FALSE,TheDimCodeBuf);
              4:
                InsertRow('4',FIELDCAPTION("Rounding (LCY)"),1,FALSE,TheDimCodeBuf);
              5:
                InsertRow('5',FIELDCAPTION("Indirect Cost (LCY)"),1,FALSE,TheDimCodeBuf);
              6:
                InsertRow('6',FIELDCAPTION("Variance (LCY)"),1,FALSE,TheDimCodeBuf);
              7:
                InsertRow('7',FIELDCAPTION("Inventoriable Costs, Total"),0,TRUE,TheDimCodeBuf);
              8:
                InsertRow('8',FIELDCAPTION("COGS (LCY)"),0,TRUE,TheDimCodeBuf);
              9:
                InsertRow('9',FIELDCAPTION("Inventory (LCY)"),0,TRUE,TheDimCodeBuf);
            END;
        END
    END;

    LOCAL PROCEDURE CopyAddChargesToBuf@1125(VAR TheItemCharge@1000 : Record 5800;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheItemCharge."No.";
        Name := COPYSTR(
            STRSUBSTNO('%1 %2',TheItemCharge."No.",TheItemCharge.Description),1,50);
      END;
    END;

    LOCAL PROCEDURE CopyLocationToBuf@1126(VAR TheLocation@1000 : Record 14;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheLocation.Code;
        Name := TheLocation.Name;
      END;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@1127(VAR ThePeriod@1000 : Record 2000000007;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        "Period End" := ThePeriod."Period End";
        Name := ThePeriod."Period Name";
      END;
    END;

    LOCAL PROCEDURE InsertRow@1128(Code1@1000 : Code[10];Name1@1001 : Text[80];Indentation1@1002 : Integer;Bold1@1003 : Boolean;VAR TheDimCodeBuf@1004 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := Code1;
        Name := COPYSTR(Name1,1,MAXSTRLEN(Name));
        Indentation := Indentation1;
        "Show in Bold" := Bold1;
      END;
    END;

    LOCAL PROCEDURE FindPeriod@1129(SearchText@1000 : Code[10]);
    VAR
      Calendar@1130 : Record 2000000007;
      PeriodFormMgt@1131 : Codeunit 359;
    BEGIN
      IF DateFilter <> '' THEN BEGIN
        Calendar.SETFILTER("Period Start",DateFilter);
        IF NOT PeriodFormMgt.FindDate('+',Calendar,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      END;
      PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType);
      WITH ItemBuffer DO
        IF AmountType = AmountType::"Net Change" THEN BEGIN
          SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
          IF GETRANGEMIN("Date Filter") = GETRANGEMAX("Date Filter") THEN
            SETRANGE("Date Filter",GETRANGEMIN("Date Filter"));
        END ELSE
          SETRANGE("Date Filter",0D,Calendar."Period End");
      InternalDateFilter := ItemBuffer.GETFILTER("Date Filter");
    END;

    LOCAL PROCEDURE DrillDown@1139();
    VAR
      ValueEntry@1140 : Record 5802;
    BEGIN
      WITH ItemBuffer DO BEGIN
        ValueEntry.SETCURRENTKEY(
          "Item No.","Posting Date","Item Ledger Entry Type","Entry Type","Variance Type",
          "Item Charge No.","Location Code","Variant Code");
        IF GETFILTER("Item Filter") <> '' THEN
          COPYFILTER("Item Filter",ValueEntry."Item No.");
        IF GETFILTER("Date Filter") <> '' THEN
          COPYFILTER("Date Filter",ValueEntry."Posting Date")
        ELSE
          ValueEntry.SETRANGE("Posting Date",0D,31129999D);
        IF GETFILTER("Entry Type Filter") <> '' THEN
          COPYFILTER("Entry Type Filter",ValueEntry."Entry Type");
        IF GETFILTER("Item Ledger Entry Type Filter") <> '' THEN
          COPYFILTER("Item Ledger Entry Type Filter",ValueEntry."Item Ledger Entry Type");
        IF GETFILTER("Variance Type Filter") <> '' THEN
          COPYFILTER("Variance Type Filter",ValueEntry."Variance Type");
        IF GETFILTER("Item Charge No. Filter") <> '' THEN
          COPYFILTER("Item Charge No. Filter",ValueEntry."Item Charge No.");
        IF GETFILTER("Location Filter") <> '' THEN
          COPYFILTER("Location Filter",ValueEntry."Location Code");
        IF GETFILTER("Variant Filter") <> '' THEN
          COPYFILTER("Variant Filter",ValueEntry."Variant Code");
        CASE TRUE OF
          (("Line Option" = "Line Option"::"Profit Calculation") AND (Name = FIELDCAPTION("Sales (LCY)"))) OR
          ("Line Option" = "Line Option"::"Sales Item Charge Spec."):
            PAGE.RUN(0,ValueEntry,ValueEntry."Sales Amount (Actual)");
          Name = FIELDCAPTION("Non-Invtbl. Costs (LCY)"):
            PAGE.RUN(0,ValueEntry,ValueEntry."Cost Amount (Non-Invtbl.)");
          ELSE
            PAGE.RUN(0,ValueEntry,ValueEntry."Cost Amount (Actual)");
        END;
      END;
    END;

    LOCAL PROCEDURE SetCommonFilters@1141(VAR TheItemBuffer@1000 : Record 5821);
    BEGIN
      WITH TheItemBuffer DO BEGIN
        RESET;
        IF ItemFilter <> '' THEN
          SETFILTER("Item Filter",ItemFilter);
        IF DateFilter <> '' THEN
          SETFILTER("Date Filter",DateFilter);
        IF LocationFilter <> '' THEN
          SETFILTER("Location Filter",LocationFilter);
        IF VariantFilter <> '' THEN
          SETFILTER("Variant Filter",VariantFilter);
      END;
    END;

    LOCAL PROCEDURE SetFilters@1142(VAR ItemBuffer@1000 : Record 5821;LineOrColumn@1001 : 'Line,Column');
    VAR
      DimOption@1143 : 'Profit Calculation,Cost Specification,Purch. Item Charge Spec.,Sales Item Charge Spec.,Period,Location';
      DimCodeBuf@1144 : Record 367;
    BEGIN
      IF LineOrColumn = LineOrColumn::Line THEN BEGIN
        DimCodeBuf := Rec;
        DimOption := ItemBuffer."Line Option";
      END ELSE BEGIN
        DimCodeBuf := MatrixRecords[MATRIX_ColumnOrdinal];
        DimOption := ItemBuffer."Column Option";
      END;
      WITH ItemBuffer DO BEGIN
        CASE DimOption OF
          DimOption::Location:
            SETRANGE("Location Filter",DimCodeBuf.Code);
          DimOption::Period:
            IF AmountType = AmountType::"Net Change" THEN
              SETRANGE("Date Filter",DimCodeBuf."Period Start",DimCodeBuf."Period End")
            ELSE
              SETRANGE("Date Filter",0D,DimCodeBuf."Period End");
          DimOption::"Profit Calculation",
          DimOption::"Cost Specification":
            CASE Name OF
              FIELDCAPTION("Sales (LCY)"),
              FIELDCAPTION("COGS (LCY)"),
              FIELDCAPTION("Profit (LCY)"),
              FIELDCAPTION("Profit %"):
                BEGIN
                  SETRANGE("Item Ledger Entry Type Filter","Item Ledger Entry Type Filter"::Sale);
                  IF DimOption = DimOption::"Profit Calculation" THEN
                    SETFILTER("Entry Type Filter",'<>%1',"Entry Type Filter"::Revaluation);
                  SETRANGE("Variance Type Filter","Variance Type Filter"::" ");
                END;
              FIELDCAPTION("Direct Cost (LCY)"),
              FIELDCAPTION("Revaluation (LCY)"),
              FIELDCAPTION("Rounding (LCY)"),
              FIELDCAPTION("Indirect Cost (LCY)"),
              FIELDCAPTION("Variance (LCY)"),
              FIELDCAPTION("Inventoriable Costs, Total"):
                BEGIN
                  SETFILTER(
                    "Item Ledger Entry Type Filter",'<>%1&<>%2',
                    "Item Ledger Entry Type Filter"::Sale,
                    "Item Ledger Entry Type Filter"::" ");
                  SETRANGE("Variance Type Filter","Variance Type Filter"::" ");
                  CASE Name OF
                    FIELDCAPTION("Direct Cost (LCY)"):
                      SETRANGE("Entry Type Filter","Entry Type Filter"::"Direct Cost");
                    FIELDCAPTION("Revaluation (LCY)"):
                      SETRANGE("Entry Type Filter","Entry Type Filter"::Revaluation);
                    FIELDCAPTION("Rounding (LCY)"):
                      SETRANGE("Entry Type Filter","Entry Type Filter"::Rounding);
                    FIELDCAPTION("Indirect Cost (LCY)"):
                      SETRANGE("Entry Type Filter","Entry Type Filter"::"Indirect Cost");
                    FIELDCAPTION("Variance (LCY)"):
                      BEGIN
                        SETRANGE("Entry Type Filter","Entry Type Filter"::Variance);
                        SETFILTER("Variance Type Filter",'<>%1',"Variance Type Filter"::" ");
                      END;
                    FIELDCAPTION("Inventoriable Costs, Total"):
                      SETRANGE("Variance Type Filter");
                  END;
                END;
              ELSE
                SETRANGE("Item Ledger Entry Type Filter");
                SETRANGE("Variance Type Filter");
            END;
          DimOption::"Purch. Item Charge Spec.":
            BEGIN
              SETRANGE("Variance Type Filter","Variance Type Filter"::" ");
              SETRANGE("Item Ledger Entry Type Filter","Item Ledger Entry Type Filter"::Purchase);
              SETRANGE("Item Charge No. Filter",DimCodeBuf.Code);
            END;
          DimOption::"Sales Item Charge Spec.":
            BEGIN
              SETRANGE("Variance Type Filter","Variance Type Filter"::" ");
              SETRANGE("Item Ledger Entry Type Filter","Item Ledger Entry Type Filter"::Sale);
              SETRANGE("Item Charge No. Filter",DimCodeBuf.Code);
            END;
        END;
        IF GETFILTER("Item Ledger Entry Type Filter") = '' THEN
          SETFILTER(
            "Item Ledger Entry Type Filter",'<>%1',
            "Item Ledger Entry Type Filter"::" ")
      END;
    END;

    LOCAL PROCEDURE Calculate@1147(SetColumnFilter@1000 : Boolean) Amount : Decimal;
    BEGIN
      WITH ItemBuffer DO BEGIN
        CASE "Line Option" OF
          "Line Option"::"Profit Calculation",
          "Line Option"::"Cost Specification":
            CASE Name OF
              FIELDCAPTION("Sales (LCY)"):
                Amount := CalcSalesAmount(SetColumnFilter);
              FIELDCAPTION("COGS (LCY)"):
                Amount := CalcCostAmount(SetColumnFilter);
              FIELDCAPTION("Non-Invtbl. Costs (LCY)"):
                Amount := CalcCostAmountNonInvnt(SetColumnFilter);
              FIELDCAPTION("Profit (LCY)"):
                Amount := CalcSalesAmount(SetColumnFilter) +
                  CalcCostAmount(SetColumnFilter) +
                  CalcCostAmountNonInvnt(SetColumnFilter);
              FIELDCAPTION("Profit %"):
                IF CalcSalesAmount(SetColumnFilter) <> 0 THEN
                  Amount := ROUND(100 * (CalcSalesAmount(SetColumnFilter) +
                                         CalcCostAmount(SetColumnFilter) +
                                         CalcCostAmountNonInvnt(SetColumnFilter)) /
                      CalcSalesAmount(SetColumnFilter))
                ELSE
                  Amount := 0;
              FIELDCAPTION("Direct Cost (LCY)"),FIELDCAPTION("Revaluation (LCY)"),
              FIELDCAPTION("Rounding (LCY)"),FIELDCAPTION("Indirect Cost (LCY)"),
              FIELDCAPTION("Variance (LCY)"),FIELDCAPTION("Inventory (LCY)"),
              FIELDCAPTION("Inventoriable Costs, Total"):
                Amount := CalcCostAmount(SetColumnFilter);
              ELSE
                Amount := 0;
            END;
          "Line Option"::"Sales Item Charge Spec.":
            Amount := CalcSalesAmount(SetColumnFilter);
          "Line Option"::"Purch. Item Charge Spec.":
            Amount := CalcCostAmount(SetColumnFilter);
        END;
        IF PerUnit THEN BEGIN
          IF ("Line Option" = "Line Option"::"Profit Calculation") AND
             (Name = FIELDCAPTION("Profit %"))
          THEN
            Qty := 1
          ELSE
            Qty := CalcQty(SetColumnFilter);
          IF Qty <> 0 THEN
            Amount := Amount / ABS(Qty)
          ELSE
            Amount := 0;
        END;
        IF Name <> FIELDCAPTION("Profit %") THEN
          Amount := MatrixMgt.RoundValue(Amount,RoundingFactor);
      END;
    END;

    LOCAL PROCEDURE CalcSalesAmount@1148(SetColumnFilter@1000 : Boolean) : Decimal;
    BEGIN
      SetCommonFilters(ItemBuffer);
      SetFilters(ItemBuffer,0);
      IF SetColumnFilter THEN
        SetFilters(ItemBuffer,1);
      IF IncludeExpected THEN BEGIN
        ItemBuffer.CALCFIELDS("Sales Amount (Actual)","Sales Amount (Expected)");
        EXIT(ItemBuffer."Sales Amount (Actual)" + ItemBuffer."Sales Amount (Expected)");
      END;
      ItemBuffer.CALCFIELDS("Sales Amount (Actual)");
      EXIT(ItemBuffer."Sales Amount (Actual)");
    END;

    LOCAL PROCEDURE CalcCostAmount@1149(SetColumnFilter@1000 : Boolean) : Decimal;
    BEGIN
      SetCommonFilters(ItemBuffer);
      SetFilters(ItemBuffer,0);
      IF SetColumnFilter THEN
        SetFilters(ItemBuffer,1);
      IF IncludeExpected THEN BEGIN
        ItemBuffer.CALCFIELDS("Cost Amount (Actual)","Cost Amount (Expected)");
        EXIT(ItemBuffer."Cost Amount (Actual)" + ItemBuffer."Cost Amount (Expected)");
      END;
      ItemBuffer.CALCFIELDS("Cost Amount (Actual)");
      EXIT(ItemBuffer."Cost Amount (Actual)");
    END;

    LOCAL PROCEDURE CalcCostAmountNonInvnt@1150(SetColumnFilter@1000 : Boolean) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
      TotalCostAmountNonInvnt@1002 : Decimal;
    BEGIN
      SetCommonFilters(ItemBuffer);
      SetFilters(ItemBuffer,0);
      IF SetColumnFilter THEN
        SetFilters(ItemBuffer,1);
      ItemBuffer.SETRANGE("Item Ledger Entry Type Filter");

      COPYValueEntryFILTERS(ValueEntry);
      IF ValueEntry.FINDSET THEN
        REPEAT
          CASE ValueEntry."Document Type" OF
            ValueEntry."Document Type"::"Purchase Credit Memo":
              TotalCostAmountNonInvnt -= ValueEntry."Cost Amount (Non-Invtbl.)";
            ValueEntry."Document Type"::"Purchase Invoice":
              TotalCostAmountNonInvnt += GetSign(ValueEntry) * ValueEntry."Cost Amount (Non-Invtbl.)"
            ELSE
              TotalCostAmountNonInvnt += ValueEntry."Cost Amount (Non-Invtbl.)";
          END;
        UNTIL ValueEntry.NEXT = 0;

      EXIT(TotalCostAmountNonInvnt);
    END;

    LOCAL PROCEDURE CalcQty@1151(SetColumnFilter@1000 : Boolean) : Decimal;
    BEGIN
      SetCommonFilters(ItemBuffer);
      SetFilters(ItemBuffer,0);
      IF SetColumnFilter THEN
        SetFilters(ItemBuffer,1);
      ItemBuffer.SETRANGE("Entry Type Filter");
      ItemBuffer.SETRANGE("Item Charge No. Filter");
      IF IncludeExpected THEN BEGIN
        ItemBuffer.CALCFIELDS(Quantity);
        EXIT(ItemBuffer.Quantity);
      END;
      ItemBuffer.CALCFIELDS("Invoiced Quantity");
      EXIT(ItemBuffer."Invoiced Quantity");
    END;

    PROCEDURE SetItem@1152(VAR NewItem@1000 : Record 27);
    BEGIN
      Item.GET(NewItem."No.");
      Item.COPYFILTERS(NewItem);
    END;

    PROCEDURE Load@1154(MatrixColumns1@1005 : ARRAY [32] OF Text[1024];VAR MatrixRecords1@1006 : ARRAY [32] OF Record 367;CurrentNoOfMatrixColumns@1007 : Integer;_RoundingFactor@1010 : 'None,1,1000,1000000';_PerUnit@1009 : Boolean;_IncludeExpected@1008 : Boolean;_ItemBuffer@1004 : Record 5821;_Item@1003 : Record 27;_PeriodType@1002 : 'Day,Week,Month,Quarter,Year,Accounting Period';_AmountType@1000 : 'Net Change,Balance at Date';_ColumnDimCode@1012 : Text[30];_DateFilter@1013 : Code[250];_ItemFilter@1014 : Code[250];_LocationFilter@1015 : Code[250];_VariantFilter@1016 : Code[250]);
    BEGIN
      COPYARRAY(MATRIX_CaptionSet,MatrixColumns1,1);
      COPYARRAY(MatrixRecords,MatrixRecords1,1);
      MATRIX_CurrentNoOfMatrixColumn := CurrentNoOfMatrixColumns;
      RoundingFactor := _RoundingFactor;
      PerUnit := _PerUnit;
      IncludeExpected := _IncludeExpected;
      ItemBuffer := _ItemBuffer;
      Item := _Item;
      PeriodType := _PeriodType;
      AmountType := _AmountType;
      ColumnDimCode := _ColumnDimCode;
      DateFilter := _DateFilter;
      ItemFilter := _ItemFilter;
      LocationFilter := _LocationFilter;
      VariantFilter := _VariantFilter;
      RoundingFactorFormatString := MatrixMgt.GetFormatString(RoundingFactor,FALSE);
    END;

    LOCAL PROCEDURE MATRIX_OnDrillDown@1155(_MATRIX_ColumnOrdinal@1008 : Integer);
    BEGIN
      WITH ItemBuffer DO
        IF NOT (("Line Option" = "Line Option"::"Profit Calculation") AND
                ((Name = FIELDCAPTION("Profit (LCY)")) OR (Name = FIELDCAPTION("Profit %"))) OR
                (("Line Option" = "Line Option"::"Cost Specification") AND (Name = FIELDCAPTION("Inventoriable Costs"))))
        THEN BEGIN
          SetCommonFilters(ItemBuffer);
          SetFilters(ItemBuffer,0);
          MATRIX_ColumnOrdinal := _MATRIX_ColumnOrdinal;
          SetFilters(ItemBuffer,1);
          DrillDown;
        END;
    END;

    LOCAL PROCEDURE MATRIX_OnAfterGetRecord@1157(MATRIX_ColumnOrdinal@1010 : Integer);
    BEGIN
      CellAmount := Calculate(TRUE);
      MATRIX_CellData[MATRIX_ColumnOrdinal] := CellAmount;
    END;

    LOCAL PROCEDURE MATRIX_OnFindRecord@1935(Which@1786 : Text[1024]) : Boolean;
    BEGIN
      EXIT(FindRec(ItemBuffer."Column Option",MatrixRecord,Which));
    END;

    LOCAL PROCEDURE MATRIX_OnNextRecord@1936(Steps@1787 : Integer) : Integer;
    BEGIN
      EXIT(NextRec(ItemBuffer."Column Option",MatrixRecord,Steps));
    END;

    LOCAL PROCEDURE NameOnFormat@19039177();
    BEGIN
      NameIndent := Indentation;
    END;

    LOCAL PROCEDURE COPYValueEntryFILTERS@1(VAR ValueEntry@1000 : Record 5802);
    BEGIN
      ValueEntry.SETFILTER("Item No.",ItemFilter);
      ValueEntry.SETFILTER("Variant Code",VariantFilter);

      ValueEntry.SETFILTER("Item Ledger Entry Type",ItemBuffer.GETFILTER("Item Ledger Entry Type Filter"));
      ValueEntry.SETFILTER("Variance Type",ItemBuffer.GETFILTER("Variance Type Filter"));
      ValueEntry.SETFILTER("Entry Type",ItemBuffer.GETFILTER("Entry Type Filter"));
      ValueEntry.SETFILTER("Global Dimension 1 Code",ItemBuffer.GETFILTER("Global Dimension 1 Filter"));
      ValueEntry.SETFILTER("Global Dimension 2 Code",ItemBuffer.GETFILTER("Global Dimension 2 Filter"));
      ValueEntry.SETFILTER("Item Charge No.",ItemBuffer.GETFILTER("Item Charge No. Filter"));
      ValueEntry.SETFILTER("Source Type",ItemBuffer.GETFILTER("Source Type Filter"));
      ValueEntry.SETFILTER("Source Code",ItemBuffer.GETFILTER("Source No. Filter"));
      ValueEntry.SETFILTER("Posting Date",ItemBuffer.GETFILTER("Date Filter"));
      ValueEntry.SETFILTER("Location Code",ItemBuffer.GETFILTER("Location Filter"));
    END;

    LOCAL PROCEDURE GetSign@5(ValueEntry@1000 : Record 5802) : Decimal;
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      ItemLedgerEntry.GET(ValueEntry."Item Ledger Entry No.");
      IF (ValueEntry."Item Ledger Entry Type" = ValueEntry."Item Ledger Entry Type"::Purchase) AND
         (ItemLedgerEntry."Entry Type" = ItemLedgerEntry."Entry Type"::Sale)
      THEN
        EXIT(1);
      EXIT(-1);
    END;

    LOCAL PROCEDURE FormatStr@8() : Text;
    BEGIN
      EXIT(RoundingFactorFormatString);
    END;

    BEGIN
    END.
  }
}

