OBJECT Codeunit 9062354 Panel Menu Management
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.11;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ProposeAllMenus(TRUE);
          END;

  }
  CODE
  {
    VAR
      mPanelMenu@1000000001 : Record 9062446;
      mPanelMenuItem@1000000000 : Record 9062445;
      mObjectFieldToolkit@1000000003 : Codeunit 9062343;
      mPanelEventManagement@1000000006 : Codeunit 9062323;
      mTnpToolkit@1000000005 : Codeunit 9062230;
      mInteraction@1000000009 : Boolean;
      mSequence@1000000002 : Integer;
      mCounter@1000000004 : Integer;
      tPanelImage@1000000007 : TextConst 'ENU=Panel16;ENG=Panel16';
      tTileGroupImage@1000000008 : TextConst 'ENU=TileGroup16;ENG=TileGroup16';
      tTileImage@1000000010 : TextConst 'ENU=Tile16;ENG=Tile16';
      tPanelLinkImage@1000000011 : TextConst 'ENU=PanelLink16;ENG=PanelLink16';
      tRefreshImage@1000000012 : TextConst 'ENU=Refresh16;ENG=Refresh16';
      tBackImage@1000000013 : TextConst 'ENU=Back16;ENG=Back16';

    PROCEDURE "--- General Methods ---"@1000000013();
    BEGIN
    END;

    PROCEDURE ProposeAllMenus@1000000010(pInteraction@1000000005 : Boolean);
    VAR
      eConfirmation@1000000000 : TextConst 'ENU=Do you want to re-propose all tile panel menus?;ENG=Do you want to re-propose all tile panel menus?';
      eConfirmation2@1000000001 : TextConst 'ENU=Do you REALLY want to re-propose all tile panel menus?;ENG=Do you REALLY want to re-propose all tile panel menus?';
      lPanel@1000000002 : Record 9062363;
      eFinalMessage@1000000003 : TextConst 'ENU=All tile panel menus have been re-proposed.;ENG=All tile panel menus have been re-proposed.';
      lPanelMenu@1000000004 : Record 9062446;
    BEGIN
      //DOC NA2015.1 - Proposing all menus
      //  -> pInteraction: Interaction flag

      pInteraction := ((pInteraction) AND (GUIALLOWED));
      IF (pInteraction) THEN
      BEGIN
        IF ( NOT (CONFIRM(eConfirmation, FALSE))) THEN
          EXIT;
        IF ( NOT (CONFIRM(eConfirmation2, FALSE))) THEN
          EXIT;
      END;

      lPanel.RESET();
      lPanel.MODIFYALL("Menu Code", '');
      lPanel.MODIFYALL("Tile Menu Code", '');
      lPanel.MODIFYALL("Link Menu Code", '');

      lPanelMenu.DELETEALL(TRUE);

      IF (lPanel.FINDSET(TRUE)) THEN
      REPEAT
        lPanel.ProposeMenus(FALSE, TRUE);
      UNTIL (lPanel.NEXT() = 0);

      IF (pInteraction) THEN
        MESSAGE(eFinalMessage);
    END;

    PROCEDURE ProposeMenu@1000000014(pPanelType@1000000000 : Integer;pMenuType@1000000001 : Integer) : Code[20];
    BEGIN
      //DOC NA2015.1 - Proposing a menu
      //  -> pPanelType: Panel type
      //  -> pMenuType: Menu type
      //  <- Code of menu proposed

      mPanelMenu.RESET();
      mPanelMenu.SETRANGE("Panel Type", pPanelType);
      mPanelMenu.SETRANGE("Menu Type", pMenuType);
      IF ( NOT (mPanelMenu.FINDFIRST())) THEN
      BEGIN
        mPanelMenu.INIT();
        mPanelMenu.VALIDATE("Panel Type", pPanelType);
        mPanelMenu.VALIDATE("Menu Type", pMenuType);
        mPanelMenu.VALIDATE(Code, CreateMenuCode(pPanelType, pMenuType));
        mPanelMenu.VALIDATE(Name, CreateMenuName(pPanelType, pMenuType));
        mPanelMenu.INSERT(TRUE);
        ProposeMenuItems(pPanelType, pMenuType);
      END;
      EXIT(mPanelMenu.Code);
    END;

    LOCAL PROCEDURE ProposeMenuItems@1000000049(pPanelType@1000000001 : Integer;pMenuType@1000000000 : Integer);
    BEGIN
      //DOC NC2015.1 - Proposing menu items
      //  -> pPanelType: Panel type
      //  -> pMenuType: Menu type

      mSequence := 0;
      mCounter := 0;

      CASE (pPanelType) OF
        mPanelMenu."Panel Type"::"Tile Panel":
          CASE (pMenuType) OF
            mPanelMenu."Menu Type"::Panel:
              ProposeTilePanelItems();
            mPanelMenu."Menu Type"::Tile:
              ProposeTilePanelTileItems();
            mPanelMenu."Menu Type"::"Panel Link":
              ProposeTilePanelLinkItems();
          END;
        mPanelMenu."Panel Type"::"Tile List":
          CASE (pMenuType) OF
            mPanelMenu."Menu Type"::Panel:
              ProposeTileListItems();
            mPanelMenu."Menu Type"::Tile:
              ProposeTileListTileItems();
            mPanelMenu."Menu Type"::"Panel Link":
              ProposeTileListLinkItems();
          END;
      END;
    END;

    PROCEDURE "--- Items ---"@1000000005();
    BEGIN
    END;

    LOCAL PROCEDURE ProposeTilePanelItems@1000000028();
    BEGIN
      //DOC NA2015.1 - Proposing panel menu items

      CreateItem(mPanelMenuItem."Action Type"::"Edit Panel", FALSE, tPanelImage);
      CreateItem(mPanelMenuItem."Action Type"::"New Tile", FALSE, tTileImage);
      CreateSeparator(FALSE);
      CreateItem(mPanelMenuItem."Action Type"::Back, FALSE, tBackImage);
      CreateItem(mPanelMenuItem."Action Type"::Refresh, FALSE, tRefreshImage);

      CreateItem(mPanelMenuItem."Action Type"::"Apply Palette", TRUE, tPanelImage);
      CreateItem(mPanelMenuItem."Action Type"::"Edit Panels", TRUE, tPanelImage);
      CreateItem(mPanelMenuItem."Action Type"::"Copy Panel", TRUE, tPanelImage);
      CreateItem(mPanelMenuItem."Action Type"::"Reset Panel", TRUE, tPanelImage);
      CreateSeparator(TRUE);
      CreateItem(mPanelMenuItem."Action Type"::"Edit Tiles", TRUE, tTileImage);
      CreateItem(mPanelMenuItem."Action Type"::"Copy Tile", TRUE, tTileImage);
      CreateItem(mPanelMenuItem."Action Type"::"Show Tiles", TRUE, tTileImage);
      CreateSeparator(TRUE);
      CreateItem(mPanelMenuItem."Action Type"::"Edit Tile Groups", TRUE, tTileGroupImage);
      CreateItem(mPanelMenuItem."Action Type"::"New Tile Group", TRUE, tTileGroupImage);
      CreateItem(mPanelMenuItem."Action Type"::"Copy Tile Group", TRUE, tTileGroupImage);
      CreateItem(mPanelMenuItem."Action Type"::"Show Tile Groups", TRUE, tTileGroupImage);
      CreateSeparator(TRUE);
      CreateItem(mPanelMenuItem."Action Type"::"Edit Links", TRUE, tPanelLinkImage);
      CreateItem(mPanelMenuItem."Action Type"::"New Link", TRUE, tPanelLinkImage);
      CreateItem(mPanelMenuItem."Action Type"::"Copy Link", TRUE, tPanelLinkImage);
      CreateItem(mPanelMenuItem."Action Type"::"Show Links", TRUE, tPanelLinkImage);
      CreateItem(mPanelMenuItem."Action Type"::"Reset Links", TRUE, tPanelLinkImage);
    END;

    LOCAL PROCEDURE ProposeTilePanelTileItems@1000000029();
    BEGIN
      //DOC NA2015.1 - Proposing panel tile menu items

      CreateItem(mPanelMenuItem."Action Type"::"Edit Tile", FALSE, tTileImage);
      CreateItem(mPanelMenuItem."Action Type"::"New Tile", FALSE, tTileImage);
      CreateItem(mPanelMenuItem."Action Type"::"Delete Tile", FALSE, tTileImage);
      CreateSeparator(FALSE);
      CreateItem(mPanelMenuItem."Action Type"::"Load Image from Library", FALSE, tTileImage);
      CreateSeparator(FALSE);
      CreateItem(mPanelMenuItem."Action Type"::Back, FALSE, tBackImage);
      CreateItem(mPanelMenuItem."Action Type"::Refresh, FALSE, tRefreshImage);

      CreateItem(mPanelMenuItem."Action Type"::"Edit Tiles", TRUE, tTileImage);
      CreateItem(mPanelMenuItem."Action Type"::"Copy Tile", TRUE, tTileImage);
      CreateItem(mPanelMenuItem."Action Type"::"Show Tiles", TRUE, tTileImage);
      CreateItem(mPanelMenuItem."Action Type"::"Hide Tile", TRUE, tTileImage);
      CreateSeparator(TRUE);
      CreateItem(mPanelMenuItem."Action Type"::"Edit Panel", TRUE, tPanelImage);
      CreateItem(mPanelMenuItem."Action Type"::"Edit Panels", TRUE, tPanelImage);
      CreateItem(mPanelMenuItem."Action Type"::"Copy Panel", TRUE, tPanelImage);
      CreateItem(mPanelMenuItem."Action Type"::"Reset Panel", TRUE, tPanelImage);
      CreateSeparator(TRUE);
      CreateItem(mPanelMenuItem."Action Type"::"Edit Tile Groups", TRUE, tTileGroupImage);
      CreateItem(mPanelMenuItem."Action Type"::"New Tile Group", TRUE, tTileGroupImage);
      CreateItem(mPanelMenuItem."Action Type"::"Copy Tile Group", TRUE, tTileGroupImage);
      CreateItem(mPanelMenuItem."Action Type"::"Show Tile Groups", TRUE, tTileGroupImage);
    END;

    LOCAL PROCEDURE ProposeTilePanelLinkItems@1000000030();
    BEGIN
      //DOC NA2015.1 - Proposing panel link menu items

      CreateItem(mPanelMenuItem."Action Type"::"Edit Links", FALSE, tPanelLinkImage);
      CreateSeparator(FALSE);
      CreateItem(mPanelMenuItem."Action Type"::Back, FALSE, tBackImage);
      CreateItem(mPanelMenuItem."Action Type"::Refresh, FALSE, tRefreshImage);

      CreateItem(mPanelMenuItem."Action Type"::"Edit Link", TRUE, tPanelLinkImage);
      CreateItem(mPanelMenuItem."Action Type"::"New Link", TRUE, tPanelLinkImage);
      CreateItem(mPanelMenuItem."Action Type"::"Delete Link", TRUE, tPanelLinkImage);
      CreateSeparator(TRUE);
      CreateItem(mPanelMenuItem."Action Type"::"Copy Link", TRUE, tPanelLinkImage);
      CreateSeparator(TRUE);
      CreateItem(mPanelMenuItem."Action Type"::"Show Links", FALSE, tPanelLinkImage);
      CreateItem(mPanelMenuItem."Action Type"::"Hide Link", FALSE, tPanelLinkImage);
      CreateItem(mPanelMenuItem."Action Type"::"Reset Links", FALSE, tPanelLinkImage);
      CreateItem(mPanelMenuItem."Action Type"::"Edit Panel", TRUE, tPanelImage);
      CreateItem(mPanelMenuItem."Action Type"::"Edit Panels", TRUE, tPanelImage);
      CreateItem(mPanelMenuItem."Action Type"::"Copy Panel", TRUE, tPanelImage);
      CreateItem(mPanelMenuItem."Action Type"::"Reset Panel", TRUE, tPanelImage);
    END;

    LOCAL PROCEDURE ProposeTileListItems@1000000031();
    BEGIN
      //DOC NA2015.1 - Proposing tile list menu items

      CreateItem(mPanelMenuItem."Action Type"::Back, FALSE, tBackImage);
      CreateItem(mPanelMenuItem."Action Type"::Refresh, FALSE, tRefreshImage);
    END;

    LOCAL PROCEDURE ProposeTileListTileItems@1000000032();
    BEGIN
      //DOC NA2015.1 - Proposing tile list tile menu items

      CreateItem(mPanelMenuItem."Action Type"::Back, FALSE, tBackImage);
      CreateItem(mPanelMenuItem."Action Type"::Refresh, FALSE, tRefreshImage);
    END;

    LOCAL PROCEDURE ProposeTileListLinkItems@1000000033();
    BEGIN
      //DOC NA2015.1 - Proposing tile list link menu items

      CreateItem(mPanelMenuItem."Action Type"::Back, FALSE, tBackImage);
      CreateItem(mPanelMenuItem."Action Type"::Refresh, FALSE, tRefreshImage);
    END;

    PROCEDURE "--- Menu Code and Name ---"@1000000020();
    BEGIN
    END;

    LOCAL PROCEDURE PanelTypeCode@1000000034(pPanelType@1000000000 : Integer) : Code[20];
    VAR
      eTilePanel@1000000002 : TextConst 'ENU=TP;ENG=TP';
      eTileList@1000000003 : TextConst 'ENU=TL;ENG=TL';
      lPanelMenu@1000000004 : Record 9062446;
      lPanelTypeCode@1000000005 : Code[20];
    BEGIN
      //DOC NA2015.1 - Returning panel type code
      //  -> pPanelType: Panel type
      //  <- The code

      lPanelTypeCode := '';

      CASE (pPanelType) OF
        lPanelMenu."Panel Type"::"Tile Panel":
          lPanelTypeCode := eTilePanel;
        lPanelMenu."Panel Type"::"Tile List":
          lPanelTypeCode := eTileList;
        ELSE
          BEGIN
            lPanelMenu."Panel Type" := pPanelType;
            lPanelTypeCode := FORMAT(lPanelMenu."Panel Type");
          END;
      END;

      EXIT(lPanelTypeCode);
    END;

    LOCAL PROCEDURE PanelTypeName@1000000035(pPanelType@1000000000 : Integer) : Text[50];
    VAR
      lPanelMenu@1000000001 : Record 9062446;
    BEGIN
      //DOC NC2015.1 - Returning panel type name
      //  -> pPanelType: Panel type
      //  <- The name

      lPanelMenu."Panel Type" := pPanelType;
      EXIT(FORMAT(lPanelMenu."Panel Type"));
    END;

    LOCAL PROCEDURE MenuTypeCode@1000000037(pMenuType@1000000000 : Integer) : Code[20];
    VAR
      lPanelMenu@1000000001 : Record 9062446;
    BEGIN
      //DOC NC2015.1 - Returning menu type code
      //  -> pMenuType: Menu type
      //  <- The code

      lPanelMenu."Menu Type" := pMenuType;
      EXIT(FORMAT(lPanelMenu."Menu Type"));
    END;

    LOCAL PROCEDURE MenuTypeName@1000000038(pMenuType@1000000001 : Integer) : Text[50];
    VAR
      lPanelMenu@1000000000 : Record 9062446;
    BEGIN
      //DOC NC2015.1 - Returning menu type name
      //  -> pMenuType: Menu type
      //  <- The name

      lPanelMenu."Menu Type" := pMenuType;
      EXIT(FORMAT(lPanelMenu."Menu Type"));
    END;

    LOCAL PROCEDURE CreateMenuCode@1000000000(pPanelType@1000000000 : Integer;pMenuType@1000000003 : Integer) : Code[20];
    VAR
      eMenuCode@1000000001 : TextConst 'ENU=%1 %2;ENG=%1 %2';
    BEGIN
      //DOC NA2015.1 - Creating menu code
      //  -> pPanelType: Panel type
      //  -> pMenuType: Menu type
      //  <- Code found

      EXIT(STRSUBSTNO(eMenuCode, PanelTypeCode(pPanelType), MenuTypeCode(pMenuType)));
    END;

    LOCAL PROCEDURE CreateMenuName@1000000021(pPanelType@1000000001 : Integer;pMenuType@1000000000 : Integer) : Text[50];
    VAR
      eMenuName@1000000002 : TextConst 'ENU=%1 %2 Menu;ENG=%1 %2 Menu';
    BEGIN
      //DOC NA2015.1 - Creating menu name
      //  -> pPanelType: Panel type
      //  -> pMenuType: Menu type
      //  <- Code found

      EXIT(STRSUBSTNO(eMenuName, PanelTypeName(pPanelType), MenuTypeName(pMenuType)));
    END;

    LOCAL PROCEDURE "--- Internal Methods ---"@1000000006();
    BEGIN
    END;

    LOCAL PROCEDURE CreateItem@1000000007(pActionType@1000000000 : Integer;pAdditional@1000000001 : Boolean;pImageName@1000000002 : Text[50]);
    BEGIN
      //DOC NA2015.1 - Creating (menu) item
      //  -> pActionType: Action type
      //  -> pAdditional: Additional flag
      //  -> pImageName: Image name

      InitialiseItem(mPanelMenuItem."Item Type"::"Menu Item");

      mPanelMenuItem.VALIDATE("Action Type", pActionType);
      mPanelMenuItem.VALIDATE(Additional, pAdditional);
      mPanelMenuItem.VALIDATE("Image Name", pImageName);
      mPanelMenuItem.INSERT(TRUE);

      mCounter += 1;
    END;

    LOCAL PROCEDURE CreateSeparator@1000000009(pAdditional@1000000000 : Boolean);
    BEGIN
      //DOC NA2015.1 - Creating (menu) separator
      //  -> pAdditional: Additional flag

      InitialiseItem(mPanelMenuItem."Item Type"::Separator);

      mPanelMenuItem.VALIDATE(Additional, pAdditional);
      mPanelMenuItem.INSERT(TRUE);

      mCounter += 1;
    END;

    LOCAL PROCEDURE InitialiseItem@1000000011(pItemType@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Initialising (menu) item
      //  -> pItemType: Item type

      mSequence += 10;

      CLEAR(mPanelMenuItem);
      mPanelMenuItem.INIT();
      mPanelMenuItem.VALIDATE("Panel Menu Code", mPanelMenu.Code);
      mPanelMenuItem.VALIDATE(Sequence, mSequence);
      mPanelMenuItem.VALIDATE("Item Type", pItemType);
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 31/10/2013 - Created
      //DOC NA2015.1  JH 14/04/2014 - Panels 3
      //DOC NA2015.4  JH 12/02/2015 - Added some items to standard menus
      //DOC NA2016.10 JH 27/08/2015 - Upgraded to 2016
      //DOC NA2016.11 JH 06/11/2015 - "Action" renamed to "Action Type"
      //DOC NA2016.15 JH 09/05/2016 - CfMD modifications
    }
    END.
  }
}

