OBJECT Codeunit 9062324 Build Panel
{
  OBJECT-PROPERTIES
  {
    Date=24/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PanelTmp@1000000000 : TEMPORARY Record 9062363;
      PanelLinkTmp@1000000005 : TEMPORARY Record 9062364;
      PanelMenuTmp@1000000013 : TEMPORARY Record 9062446;
      PanelMenuItemTmp@1000000012 : TEMPORARY Record 9062445;
      SystemBehaviour@1000000022 : Record 9062230;
      TileGroupTmp@1000000004 : TEMPORARY Record 9062366;
      TileTmp@1000000003 : TEMPORARY Record 9062367;
      TileFrameTmp@1000000001 : TEMPORARY Record 9062368;
      PanelToolkit@1000000014 : Codeunit 9062320;
      PanelObj@1000000015 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Panel";
      PanelMenuObj@1000000020 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.PanelMenu";
      PanelMenuItemObj@1000000011 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.PanelMenuItem";
      PanelMenuItemTypeObj@1000000009 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.PanelMenuItemType";
      TileGroupObj@1000000016 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.TileGroup";
      TileObj@1000000017 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Tile";
      TileFrameObj@1000000018 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.TileFrame";
      PanelLinkObj@1000000021 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.PanelLink";
      Blob@1000000006 : TEMPORARY Record 99008535;
      BlobToolkit@1000000007 : Codeunit 9062242;
      Image@1000000008 : DotNet "'System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image";
      tSysBPanelAnimation@1000000023 : TextConst 'ENU=PANEL_ANIMATION;ENG=PANEL_ANIMATION';
      tSysBPanelFrames@1000000024 : TextConst 'ENU=PANEL_FRAMES;ENG=PANEL_FRAMES';
      PanelSettings@1000000025 : Boolean;
      PanelAnimation@1000000019 : Boolean;
      PanelFrames@1000000010 : Boolean;

    PROCEDURE "--- Adding ---"@1000000004();
    BEGIN
    END;

    PROCEDURE AddPanel@1000000005(pPanel@1000000000 : Record 9062363;pPreserveId@1000000001 : Boolean) : Code[20];
    BEGIN
      //DOC NA2015.1 - Adding a new panel
      //  -> pPanel: Panel to add
      //  -> pPreserveId: Flag to preserve the panel ID
      //  <- Code of the panel added

      PanelTmp := pPanel;
      IF ( NOT (pPreserveId)) THEN
        PanelTmp.UpdateControlName();
      PanelTmp.INSERT();

      EXIT(PanelTmp.Code);
    END;

    PROCEDURE AddTileGroup@1000000069(pTileGroup@1000000000 : Record 9062366;pPreserveId@1000000003 : Boolean) : Integer;
    VAR
      lId@1000000001 : Integer;
    BEGIN
      //DOC NA2015.1 - Adding a new tile group
      //  -> pTileGroup: Tile group to add
      //  -> pPreserveId: Flag to preserve the group ID
      //  <- ID of the group added

      IF (pPreserveId) THEN
        lId := pTileGroup.ID
      ELSE
        lId := TileGroupTmp.NewIdFor(PanelTmp.Code);

      TileGroupTmp := pTileGroup;
      TileGroupTmp.VALIDATE("Panel Code", PanelTmp.Code);
      TileGroupTmp.VALIDATE(ID, lId);
      IF ( NOT (pPreserveId)) THEN
        TileGroupTmp.UpdateControlName();
      TileGroupTmp.INSERT();

      EXIT(TileGroupTmp.ID);
    END;

    PROCEDURE AddTile@1000000065(pTile@1000000000 : Record 9062367;pPreserveId@1000000003 : Boolean) : Integer;
    VAR
      lId@1000000001 : Integer;
      lName@1000000002 : Text[100];
      lModify@1000000004 : Boolean;
    BEGIN
      //DOC NA2015.1 - Adding a new tile
      //  -> pPanelTile: Tile to add
      //  -> pPreserveId: Flag to preserve the tile ID
      //  <- ID of the tile added

      IF (pPreserveId) THEN
        lId := pTile.ID
      ELSE
        lId := TileTmp.NewIdFor(PanelTmp.Code);

      TileTmp := pTile;
      TileTmp.VALIDATE("Panel Code", PanelTmp.Code);
      TileTmp.VALIDATE(ID, lId);
      TileTmp.Image := pTile.Image;
      IF ( NOT (pPreserveId)) THEN
        TileTmp.UpdateControlName();
      TileTmp.INSERT();

      EXIT(TileTmp.ID);
    END;

    PROCEDURE AddTileFrame@1000000079(pTileFrame@1000000004 : Record 9062368;pPreserveId@1000000002 : Boolean) : Integer;
    VAR
      lId@1000000000 : Integer;
      lName@1000000001 : Text[100];
      lModify@1000000003 : Boolean;
    BEGIN
      //DOC NA2015.1 - Adding a new tile frame
      //  -> pTileFrame: Tile frame to add
      //  -> pPreserveId: Flag to preserve the tile frame ID
      //  <- ID of the frame added

      IF (pPreserveId) THEN
        lId := pTileFrame.ID
      ELSE
        lId := TileFrameTmp.NewIdFor(PanelTmp.Code, TileTmp.ID);

      pTileFrame.CALCFIELDS(Image);

      TileFrameTmp := pTileFrame;
      TileFrameTmp.VALIDATE("Panel Code", PanelTmp.Code);
      TileFrameTmp.VALIDATE("Tile ID", TileTmp.ID);
      TileFrameTmp.VALIDATE(ID, lId);
      TileFrameTmp.Image := pTileFrame.Image;
      IF ( NOT (pPreserveId)) THEN
        TileFrameTmp.UpdateControlName();
      TileFrameTmp.INSERT();

      EXIT(TileFrameTmp.ID);
    END;

    PROCEDURE AddPanelLink@1000000003(pPanelLink@1000000000 : Record 9062364;pPreserveId@1000000001 : Boolean) : Integer;
    VAR
      lId@1000000002 : Integer;
    BEGIN
      //DOC NA2015.1 - Adding a new panel link
      //  -> pPanelLink: The link to add
      //  -> pPreserveId: Flag to preserve the link ID
      //  <- ID of the link added

      IF (pPreserveId) THEN
        lId := pPanelLink.ID
      ELSE
        lId := PanelLinkTmp.NewIdFor(PanelTmp.Code);

      PanelLinkTmp := pPanelLink;
      PanelLinkTmp.VALIDATE("Panel Code", PanelTmp.Code);
      PanelLinkTmp.VALIDATE(ID, lId);
      IF ( NOT (pPreserveId)) THEN
        PanelLinkTmp.UpdateControlName();
      PanelLinkTmp.INSERT();

      EXIT(PanelLinkTmp.ID);
    END;

    PROCEDURE AddPanelMenu@1000000073(pPanelMenu@1000000000 : Record 9062446);
    BEGIN
      //DOC NA2015.1 - Adding a new panel menu
      //  -> pPanelMenu: Panel menu to add

      PanelMenuTmp := pPanelMenu;
      PanelMenuTmp.INSERT();
    END;

    PROCEDURE AddPanelMenuItem@1000000050(pPanelMenuItem@1000000000 : Record 9062445;pPreserveId@1000000002 : Boolean) : Integer;
    VAR
      lId@1000000001 : Integer;
    BEGIN
      //DOC NA2015.1 - Adding a new panel menu item
      //  -> pPanelMenuItem: Panel menu item to add
      //  -> pPreserveIds: Flag to preserve the item ID
      //  <- The ID of the item added

      IF (pPreserveId) THEN
        lId := pPanelMenuItem.ID
      ELSE
        lId := PanelMenuItemTmp.NewIdFor(PanelMenuTmp.Code);

      pPanelMenuItem.CALCFIELDS(Image);

      PanelMenuItemTmp := pPanelMenuItem;
      PanelMenuItemTmp.VALIDATE("Panel Menu Code", PanelMenuTmp.Code);
      PanelMenuItemTmp.VALIDATE(ID, lId);
      PanelMenuItemTmp.Image := pPanelMenuItem.Image;
      IF ( NOT (pPreserveId)) THEN
        PanelMenuItemTmp.UpdateControlName();
      PanelMenuItemTmp.INSERT();

      EXIT(PanelMenuItemTmp.ID);
    END;

    PROCEDURE "--- Getting ---"@1000000009();
    BEGIN
    END;

    PROCEDURE GetPanel@1000000010(VAR pPanel@1000000000 : Record 9062363);
    BEGIN
      //DOC NA2015.8 - Returning the current panel
      //  <> pPanel: Target record

      pPanel.COPY(PanelTmp, TRUE);
    END;

    PROCEDURE GetTileGroups@1000000018(VAR pTileGroup@1000000000 : Record 9062366);
    BEGIN
      //DOC NA2015.8 - Returning tile groups
      //  <> pTileGroup: Target recordset

      pTileGroup.COPY(TileGroupTmp, TRUE);
    END;

    PROCEDURE GetTiles@1000000017(VAR pTile@1000000000 : Record 9062367);
    BEGIN
      //DOC NA2015.8 - Returning tiles
      //  <> pTile: Target recordset

      pTile.COPY(TileTmp, TRUE);
    END;

    PROCEDURE GetTileFrames@1000000016(VAR pTileFrame@1000000000 : Record 9062368);
    BEGIN
      //DOC NA2015.8 - Returning tile frames
      //  <> pTileFrame: Target recordset

      pTileFrame.COPY(TileFrameTmp, TRUE);
    END;

    PROCEDURE GetPanelLinks@1000000015(VAR pPanelLink@1000000000 : Record 9062364);
    BEGIN
      //DOC NA2015.8 - Returning panel links
      //  <> pPanelLink: Target recordset

      pPanelLink.COPY(PanelLinkTmp, TRUE);
    END;

    PROCEDURE GetPanelMenus@1000000011(VAR pPanelMenu@1000000000 : Record 9062446);
    BEGIN
      //DOC NA2015.8 - Returning panel menu
      //  <> pPanelMenu: Target recordset

      pPanelMenu.COPY(PanelMenuTmp, TRUE);
    END;

    PROCEDURE GetPanelMenuItems@1000000020(VAR pPanelMenuItem@1000000000 : Record 9062445);
    BEGIN
      //DOC NA2015.8 - Returning panel menu item
      //  <> pPanelMenuItem: Target recordset

      pPanelMenuItem.COPY(PanelMenuItemTmp, TRUE);
    END;

    PROCEDURE "--- Building --"@1000000019();
    BEGIN
    END;

    PROCEDURE BuildPanel@1000000071(VAR pPanelObj@1000000000 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Panel");
    BEGIN
      //DOC NA2015.1 - Building a panel
      //  <> pPanelObj: Target panel object (.NET)

      BuildPanelSelected('', pPanelObj);
    END;

    LOCAL PROCEDURE BuildPanelSelected@1000000001(pPanelCode@1000000001 : Code[20];VAR pPanelObj@1000000004 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Panel");
    VAR
      lPanelFound@1000000000 : Boolean;
    BEGIN
      //DOC NA2015.1 - Building a panel with given code
      //  -> pPanelCode: Panel code
      //  <> pPanelObj: Target panel object (.NET)

      PanelTmp.RESET();
      IF (pPanelCode <> '') THEN
        lPanelFound := PanelTmp.GET(pPanelCode)
      ELSE
        lPanelFound := PanelTmp.FINDFIRST();
      IF ( NOT (lPanelFound)) THEN
        EXIT;

      GetPanelSettings();

      PanelObj := PanelObj.Panel();
      PanelObj.ControlName := PanelTmp."Control Name";
      PanelObj.Width.Preferred := PanelTmp."Preferred Width";
      PanelObj.Width.Minimum := PanelTmp."Minimum Width";
      PanelObj.Width.Maximum := PanelTmp."Maximum Width";
      PanelObj.Height.Preferred := PanelTmp."Preferred Height";
      PanelObj.Height.Minimum := PanelTmp."Minimum Height";
      PanelObj.Height.Maximum := PanelTmp."Maximum Height";
      PanelObj.Timestamp := CURRENTDATETIME();

      PanelObj.ShowText := PanelTmp."Show Text";
      PanelObj.Text := PanelTmp.Text;
      PanelObj.TextStyle.FontSize := PanelTmp."Text Font Size";
      PanelObj.TextStyle.FontStyleString := PanelToolkit.FontStyleString(PanelTmp."Text Font Style");
      PanelObj.TextStyle.ForegroundColourString := PanelToolkit.ForegroundColourString(PanelTmp."Text Colour Code");
      PanelObj.MarginString := PanelTmp.Margin;
      PanelObj.PaddingString := PanelTmp.Padding;

      PanelObj.ShowGroupHeaders := PanelTmp."Show Group Headers";
      PanelObj.SpaceBetweenGroups := PanelTmp."Space Between Groups";
      PanelObj.GroupHeaderStyle.FontSize := PanelTmp."Group Header Font Size";
      PanelObj.GroupHeaderStyle.FontStyleString := PanelToolkit.FontStyleString(PanelTmp."Group Header Font Style");
      PanelObj.GroupHeaderStyle.ForegroundColourString := PanelToolkit.ForegroundColourString(PanelTmp."Group Header Colour Code");

      PanelObj.TileSize := PanelTmp."Tile Size";
      PanelObj.TileBackgroundColourString := PanelToolkit.BackgroundColourString(PanelTmp."Tile Background Colour Code");
      PanelObj.TileRows := PanelTmp."Tile Rows";
      PanelObj.TilePaddingString := PanelTmp."Tile Padding";
      PanelObj.SpaceBetweenTiles := PanelTmp."Space Between Tiles";
      PanelObj.TileTextStyle.FontSize := PanelTmp."Tile Text Font Size";
      PanelObj.TileTextStyle.FontStyleString := PanelToolkit.FontStyleString(PanelTmp."Tile Text Font Style");
      PanelObj.TileTextStyle.ForegroundColourString := PanelToolkit.ForegroundColourString(PanelTmp."Tile Text Colour Code");
      PanelObj.TileTextAlignmentString := PanelToolkit.AlignmentString(PanelTmp."Tile Text Alignment");
      PanelObj.TileInfoStyle.FontSize := PanelTmp."Tile Info Font Size";
      PanelObj.TileInfoStyle.FontStyleString := PanelToolkit.FontStyleString(PanelTmp."Tile Info Font Style");
      PanelObj.TileInfoStyle.ForegroundColourString := PanelToolkit.ForegroundColourString(PanelTmp."Tile Info Colour Code");
      PanelObj.TileInfoAlignmentString := PanelToolkit.AlignmentString(PanelTmp."Tile Info Alignment");

      PanelObj.LargeTileInfoStyle.FontSize := PanelTmp."Large Tile Text Font Size";
      PanelObj.LargeTileTextStyle.FontStyleString := PanelToolkit.FontStyleString(PanelTmp."Large Tile Text Font Style");
      PanelObj.LargeTileTextStyle.ForegroundColourString := PanelToolkit.ForegroundColourString(PanelTmp."Large Tile Text Colour Code");
      PanelObj.LargeTileInfoStyle.FontSize := PanelTmp."Large Tile Info Font Size";
      PanelObj.LargeTileInfoStyle.FontStyleString := PanelToolkit.FontStyleString(PanelTmp."Large Tile Info Font Style");
      PanelObj.LargeTileInfoStyle.ForegroundColourString := PanelToolkit.ForegroundColourString(PanelTmp."Large Tile Info Colour Code");
      PanelObj.SmallTileInfoStyle.FontSize := PanelTmp."Small Tile Text Font Size";
      PanelObj.SmallTileTextStyle.FontStyleString := PanelToolkit.FontStyleString(PanelTmp."Small Tile Text Font Style");
      PanelObj.SmallTileTextStyle.ForegroundColourString := PanelToolkit.ForegroundColourString(PanelTmp."Small Tile Text Colour Code");
      PanelObj.SmallTileInfoStyle.FontSize := PanelTmp."Small Tile Info Font Size";
      PanelObj.SmallTileInfoStyle.FontStyleString := PanelToolkit.FontStyleString(PanelTmp."Small Tile Info Font Style");
      PanelObj.SmallTileInfoStyle.ForegroundColourString := PanelToolkit.ForegroundColourString(PanelTmp."Small Tile Info Colour Code");

      IF (PanelAnimation) THEN
      BEGIN
        PanelObj.AnimateArrival := PanelTmp."Animate Arrival";
        PanelObj.AnimateTiles := PanelTmp."Animate Tiles";
      END;
      PanelObj.TileAnimationTypeString := PanelToolkit.TileAnimationTypeString(PanelTmp."Tile Animation Type");
      PanelObj.TileMinimumAnimationInterval := PanelTmp."Tile Animation Min. Interval";
      PanelObj.TileMaximumAnimationInterval := PanelTmp."Tile Animation Max. Interval";

      PanelObj.ShowLinks := PanelTmp."Show Links";
      PanelObj.LinksWidth := PanelTmp."Links Width";
      PanelObj.LinkStyle.FontSize := PanelTmp."Link Font Size";
      PanelObj.LinkStyle.FontStyleString := PanelToolkit.FontStyleString(PanelTmp."Link Font Style");
      PanelObj.LinkStyle.ForegroundColourString := PanelToolkit.ForegroundColourString(PanelTmp."Link Colour Code");
      PanelObj.LinkMarginString := PanelTmp."Link Margin";
      PanelObj.LinkPaddingString := PanelTmp."Link Padding";

      PanelObj.UpdateCaption := PanelTmp."Update Caption";
      IF (PanelTmp."Update Caption") THEN
        IF (PanelTmp.Caption <> '') THEN
          PanelObj.Caption := PanelTmp.Caption
        ELSE IF (PanelTmp.Text <> '') THEN
          PanelObj.Caption := PanelTmp.Text
        ELSE IF (PanelTmp.Description <> '') THEN
          PanelObj.Caption := PanelTmp.Description
        ELSE
          PanelObj.Caption := PanelTmp.Code;

      BuildPanelMenu(PanelTmp.FIELDNO("Menu Code"));
      BuildPanelMenu(PanelTmp.FIELDNO("Tile Menu Code"));
      BuildPanelMenu(PanelTmp.FIELDNO("Link Menu Code"));

      TileGroupTmp.RESET();
      TileGroupTmp.SETCURRENTKEY("Panel Code", Sequence);
      TileGroupTmp.SETRANGE("Panel Code", PanelTmp.Code);
      TileGroupTmp.SETRANGE(Blocked, FALSE);
      IF (TileGroupTmp.FINDSET()) THEN
      REPEAT
        BuildTileGroup();
      UNTIL (TileGroupTmp.NEXT() = 0);

      PanelLinkTmp.RESET();
      PanelLinkTmp.SETCURRENTKEY("Panel Code", Sequence);
      PanelLinkTmp.SETRANGE("Panel Code", PanelTmp.Code);
      PanelLinkTmp.SETRANGE(Blocked, FALSE);
      IF (PanelLinkTmp.FINDSET()) THEN
      REPEAT
        BuildPanelLink();
      UNTIL (PanelLinkTmp.NEXT() = 0);

      pPanelObj := PanelObj;
    END;

    LOCAL PROCEDURE BuildTileGroup@1000000014();
    BEGIN
      //DOC NA2015.1 - Building a tile group

      TileGroupObj := TileGroupObj.TileGroup();
      TileGroupObj.ControlName := TileGroupTmp."Control Name";
      TileGroupObj.Text := TileGroupTmp.Text;

      TileTmp.RESET();
      TileTmp.SETCURRENTKEY("Panel Code", "Tile Group ID", Sequence);
      TileTmp.SETRANGE("Panel Code", PanelTmp.Code);
      TileTmp.SETRANGE("Tile Group ID", TileGroupTmp.ID);
      TileTmp.SETRANGE(Blocked, FALSE);
      IF (TileTmp.FINDSET()) THEN
      REPEAT
        BuildTile();
      UNTIL (TileTmp.NEXT() = 0);

      PanelObj.Groups.Add(TileGroupObj);
    END;

    LOCAL PROCEDURE BuildTile@1000000013();
    VAR
      lStyle@1000000000 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Style";
    BEGIN
      //DOC NA2015.1 - Building a tile

      GetPanelSettings();

      TileObj := TileObj.Tile();
      TileObj.ControlName := TileTmp."Control Name";
      TileObj.Text.Show := TileTmp."Show Text";
      TileObj.Text.Text := TileTmp.Text;
      IF ((TileTmp."Text Font Size" <> 0) OR (TileTmp."Text Font Style" <> TileTmp."Text Font Style"::" ") OR
          (TileTmp."Text Colour Code" <> '')) THEN
      BEGIN
        CloneStyleObj(PanelObj.TileTextStyle, lStyle);
        TileObj.Text.Style := lStyle;
        IF (TileTmp."Text Font Size" <> 0) THEN
          TileObj.Text.Style.FontSize := TileTmp."Text Font Size";
        IF (TileTmp."Text Font Style" <> TileTmp."Text Font Style"::" ") THEN
          TileObj.Text.Style.FontStyleString := PanelToolkit.FontStyleString(TileTmp."Text Font Style");
        IF (TileTmp."Text Colour Code" <> '') THEN
          TileObj.Text.Style.ForegroundColourString := PanelToolkit.ForegroundColourString(TileTmp."Text Colour Code");
      END;
      TileObj.Info.Show := TileTmp."Show Info";
      TileObj.Info.Text := TileTmp.Info;
      IF ((TileTmp."Info Font Size" <> 0) OR (TileTmp."Info Font Style" <> TileTmp."Info Font Style"::" ") OR
          (TileTmp."Info Colour Code" <> '')) THEN
      BEGIN
        CloneStyleObj(PanelObj.TileInfoStyle, lStyle);
        TileObj.Info.Style := lStyle;
        IF (TileTmp."Info Font Size" <> 0) THEN
          TileObj.Info.Style.FontSize := TileTmp."Info Font Size";
        IF (TileTmp."Info Font Style" <> TileTmp."Info Font Style"::" ") THEN
          TileObj.Info.Style.FontStyleString := PanelToolkit.FontStyleString(TileTmp."Info Font Style");
        IF (TileTmp."Info Colour Code" <> '') THEN
          TileObj.Info.Style.ForegroundColourString := PanelToolkit.ForegroundColourString(TileTmp."Info Colour Code");
      END;
      TileObj.SizeString := PanelToolkit.TileSizeString(TileTmp.Size);
      IF (TileTmp."Background Colour Code" <> '') THEN
        TileObj.BackgroundColourString := PanelToolkit.BackgroundColourString(TileTmp."Background Colour Code");

      TileTmp.CALCFIELDS(Image);
      IF (TileTmp.Image.HASVALUE) THEN
      BEGIN
        Blob.Blob := TileTmp.Image;
        BlobToolkit.BlobToImageS(Blob, Image);
        IF ( NOT (ISNULL(Image))) THEN
          TileObj.Image := Image;
      END;

      IF ((PanelAnimation) AND (PanelFrames) AND (PanelTmp."Animate Tiles") AND
          (PanelTmp."Tile Animation Type" <> PanelTmp."Tile Animation Type"::" ")) THEN
      BEGIN
        TileFrameTmp.RESET();
        TileFrameTmp.SETCURRENTKEY("Panel Code", "Tile ID", Sequence, ID);
        TileFrameTmp.SETRANGE("Panel Code", TileTmp."Panel Code");
        TileFrameTmp.SETRANGE("Tile ID", TileTmp.ID);
        TileFrameTmp.SETRANGE(Blocked, FALSE);
        IF (TileFrameTmp.FINDSET()) THEN
        REPEAT
          BuildTileFrame();
        UNTIL (TileFrameTmp.NEXT() = 0);
      END;

      TileObj.Parameters.Parameter1 := TileTmp."Parameter 1";
      TileObj.Parameters.Parameter2 := TileTmp."Parameter 2";
      TileObj.Parameters.Parameter3 := TileTmp."Parameter 3";
      TileObj.Parameters.Parameter4 := TileTmp."Parameter 4";
      TileObj.Parameters.Parameter5 := TileTmp."Parameter 5";
      TileObj.Parameters.Parameter6 := TileTmp."Parameter 6";
      TileObj.Parameters.PanelDataId := TileTmp."Panel Data ID";

      TileGroupObj.Tiles.Add(TileObj);
    END;

    LOCAL PROCEDURE BuildTileFrame@1000000038();
    VAR
      lStyle@1000000000 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Style";
      lTileField@1000000001 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.TileField";
    BEGIN
      //DOC NA2015.1 - Building tile frame

      TileFrameObj := TileFrameObj.TileFrame();
      IF ((TileFrameTmp.Text <> '') OR (TileFrameTmp."Text Font Size" <> 0) OR
          (TileFrameTmp."Text Font Style" <> TileFrameTmp."Text Font Style"::" ") OR (TileFrameTmp."Text Colour Code" <> '')) THEN
      BEGIN
        CloneTileFieldObj(TileObj.Text, PanelObj.TileTextStyle, lTileField);
        TileFrameObj.Text := lTileField;
        IF (TileFrameTmp.Text <> '') THEN
          TileFrameObj.Text.Text := TileFrameTmp.Text;
        IF (ISNULL(TileFrameObj.Text.Style)) THEN
          TileFrameObj.Text.Style := lStyle.Style();
        IF (TileFrameTmp."Text Font Size" <> 0) THEN
          TileFrameObj.Text.Style.FontSize := TileFrameTmp."Text Font Size";
        IF (TileFrameTmp."Text Font Style" <> TileFrameTmp."Text Font Style"::" ") THEN
          TileFrameObj.Text.Style.FontStyleString := PanelToolkit.FontStyleString(TileFrameTmp."Text Font Style");
        IF (TileFrameTmp."Text Colour Code" <> '') THEN
          TileFrameObj.Text.Style.ForegroundColourString := PanelToolkit.ForegroundColourString(TileFrameTmp."Text Colour Code");
      END;
      IF ((TileFrameTmp.Info <> '') OR (TileFrameTmp."Info Font Size" <> 0) OR
          (TileFrameTmp."Info Font Style" <> TileFrameTmp."Info Font Style"::" ") OR (TileFrameTmp."Info Colour Code" <> '')) THEN
      BEGIN
        CloneTileFieldObj(TileObj.Info, PanelObj.TileInfoStyle, lTileField);
        TileFrameObj.Info := lTileField;
        IF (TileFrameTmp.Info <> '') THEN
          TileFrameObj.Info.Text := TileFrameTmp.Info;
        IF (ISNULL(TileFrameObj.Info.Style)) THEN
          TileFrameObj.Info.Style := lStyle.Style();
        IF (TileFrameTmp."Info Font Size" <> 0) THEN
          TileFrameObj.Info.Style.FontSize := TileFrameTmp."Info Font Size";
        IF (TileFrameTmp."Info Font Style" <> TileFrameTmp."Info Font Style"::" ") THEN
          TileFrameObj.Info.Style.FontStyleString := PanelToolkit.FontStyleString(TileFrameTmp."Info Font Style");
        IF (TileFrameTmp."Info Colour Code" <> '') THEN
          TileFrameObj.Info.Style.ForegroundColourString := PanelToolkit.ForegroundColourString(TileFrameTmp."Info Colour Code");
      END;

      TileFrameTmp.CALCFIELDS(Image);
      IF (TileFrameTmp.Image.HASVALUE) THEN
      BEGIN
        Blob.Blob := TileFrameTmp.Image;
        BlobToolkit.BlobToImageS(Blob, Image);
        IF ( NOT (ISNULL(Image))) THEN
          TileFrameObj.Image := Image;
      END;

      TileObj.Frames.Add(TileFrameObj);
    END;

    LOCAL PROCEDURE BuildPanelLink@1000000006();
    VAR
      lStyle@1000000000 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Style";
    BEGIN
      //DOC NA2015.1 - Building panel link

      PanelLinkObj := PanelLinkObj.PanelLink();
      PanelLinkObj.ControlName := PanelLinkTmp."Control Name";
      PanelLinkObj.Text := PanelLinkTmp.Text;
      IF ((PanelLinkTmp."Font Size" <> 0) OR (PanelLinkTmp."Font Style" <> PanelLinkTmp."Font Style"::" ") OR
          (PanelLinkTmp."Colour Code" <> '')) THEN
      BEGIN
        CloneStyleObj(PanelObj.LinkStyle, lStyle);
        PanelLinkObj.Style := lStyle;
        IF (PanelLinkTmp."Font Size" <> 0) THEN
          PanelLinkObj.Style.FontSize := PanelLinkTmp."Font Size";
        IF (PanelLinkTmp."Font Style" <> PanelLinkTmp."Font Style"::" ") THEN
          PanelLinkObj.Style.FontStyleString := PanelToolkit.FontStyleString(PanelLinkTmp."Font Style");
        IF (PanelLinkTmp."Colour Code" <> '') THEN
          PanelLinkObj.Style.ForegroundColourString := PanelToolkit.ForegroundColourString(PanelLinkTmp."Colour Code");
      END;

      PanelLinkObj.Parameters.Parameter1 := PanelLinkTmp."Parameter 1";
      PanelLinkObj.Parameters.Parameter2 := PanelLinkTmp."Parameter 2";
      PanelLinkObj.Parameters.Parameter3 := PanelLinkTmp."Parameter 3";
      PanelLinkObj.Parameters.Parameter4 := PanelLinkTmp."Parameter 4";
      PanelLinkObj.Parameters.Parameter5 := PanelLinkTmp."Parameter 5";
      PanelLinkObj.Parameters.Parameter6 := PanelLinkTmp."Parameter 6";
      PanelLinkObj.Parameters.PanelDataId := PanelLinkTmp."Panel Data ID";

      PanelObj.Links.Add(PanelLinkObj);
    END;

    LOCAL PROCEDURE BuildPanelMenu@1000000049(pMenuFieldId@1000000000 : Integer);
    VAR
      lMenuCode@1000000003 : Code[20];
    BEGIN
      //DOC NA2015.1 - Building panel menu
      //  -> pMenuFieldId: Menu field ID

      CASE (pMenuFieldId) OF
        PanelTmp.FIELDNO("Menu Code"):
          lMenuCode := PanelTmp."Menu Code";
        PanelTmp.FIELDNO("Tile Menu Code"):
          lMenuCode := PanelTmp."Tile Menu Code";
        PanelTmp.FIELDNO("Link Menu Code"):
          lMenuCode := PanelTmp."Link Menu Code";
      END;

      IF ((lMenuCode = '') OR ( NOT (PanelMenuTmp.GET(lMenuCode)))) THEN
        EXIT;

      PanelMenuObj := PanelMenuObj.PanelMenu();

      PanelMenuItemTmp.RESET();
      PanelMenuItemTmp.SETCURRENTKEY("Panel Menu Code", Additional, Sequence);
      PanelMenuItemTmp.SETRANGE("Panel Menu Code", PanelMenuTmp.Code);
      PanelMenuItemTmp.SETRANGE(Blocked, FALSE);
      IF (PanelMenuItemTmp.FINDSET()) THEN
      REPEAT
        BuildPanelMenuItem();
      UNTIL (PanelMenuItemTmp.NEXT() = 0);

      CASE (pMenuFieldId) OF
        PanelTmp.FIELDNO("Menu Code"):
          PanelObj.Menu := PanelMenuObj;
        PanelTmp.FIELDNO("Tile Menu Code"):
          PanelObj.TileMenu := PanelMenuObj;
        PanelTmp.FIELDNO("Link Menu Code"):
          PanelObj.LinkMenu := PanelMenuObj;
      END;
    END;

    LOCAL PROCEDURE BuildPanelMenuItem@1000000055();
    VAR
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NA2015.1 - Building panel menu item

      CASE (PanelMenuItemTmp."Item Type") OF
        PanelMenuItemTmp."Item Type"::"Menu Item":
          BEGIN
            PanelMenuItemObj := PanelMenuItemObj.PanelMenuItem(PanelMenuItemTypeObj.TextItem);
            PanelMenuItemObj.ControlName := PanelMenuItemTmp."Control Name";
            PanelMenuItemObj.Text := PanelMenuItemTmp.Text;
            PanelMenuItemObj.Additional := PanelMenuItemTmp.Additional;
            PanelMenuItemTmp.CALCFIELDS(Image);
            IF (PanelMenuItemTmp.Image.HASVALUE) THEN
            BEGIN
              Blob.Blob := PanelMenuItemTmp.Image;
              BlobToolkit.BlobToImageS(Blob, Image);
              PanelMenuItemObj.Image := Image;
            END
            ELSE
              PanelMenuItemObj.ImageName := PanelMenuItemTmp."Image Name";
            PanelMenuObj.Items.Add(PanelMenuItemObj);
          END;
        PanelMenuItemTmp."Item Type"::Separator:
          BEGIN
            PanelMenuItemObj := PanelMenuItemObj.PanelMenuItem(PanelMenuItemTypeObj.Separator);
            PanelMenuItemObj.Additional := PanelMenuItemTmp.Additional;
            PanelMenuObj.Items.Add(PanelMenuItemObj);
          END;
      END;
    END;

    PROCEDURE "--- Updating ---"@1000000102();
    BEGIN
    END;

    PROCEDURE UpdatePanelTimestamp@1000000000(VAR pPanelObj@1000000000 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Panel";pUpdated@1000000002 : Boolean);
    VAR
      lDateTime@1000000001 : DateTime;
    BEGIN
      //DOC NA2015.1 - Updating panel timestamp
      //  <> pPanelObj: Panel object (.NET)
      //  -> pUpdated: Updated flag

      IF (pUpdated) THEN
        pPanelObj.Timestamp := CURRENTDATETIME();
    END;

    PROCEDURE UpdateTile@1000000112(pTile@1000000003 : Record 9062367;pFieldId@1000000000 : Integer;VAR pTileObj@1000000005 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Tile";VAR pUpdated@1000000004 : Boolean);
    BEGIN
      //DOC NA2015.1 - Updating tile
      //  -> pTile: Tile to drive the update
      //  -> pFieldId: Field ID
      //  <> pTileObj: Target tile object (.NET)
      //  <> pUpdated: Target updated flag

      CASE (pFieldId) OF
        pTile.FIELDNO("Show Text"):
          pTileObj.Text.Show := UpdateBoolean(pTileObj.Text.Show, pTile."Show Text", pUpdated);
        pTile.FIELDNO(Text):
          pTileObj.Text.Text := UpdateText(pTileObj.Text.Text, pTile.Text, pUpdated);
        pTile.FIELDNO("Text Font Size"):
          pTileObj.Text.Style.FontSize := UpdateInteger(pTileObj.Text.Style.FontSize, pTile."Text Font Size", pUpdated);
        pTile.FIELDNO("Text Font Style"):
          pTileObj.Text.Style.FontStyleString := UpdateText(pTileObj.Text.Style.FontStyleString, PanelToolkit.FontStyleString(pTile."Text Font Style"), pUpdated);
        pTile.FIELDNO("Text Colour Code"):
          pTileObj.Text.Style.ForegroundColourString := UpdateText(pTileObj.Text.Style.ForegroundColourString, PanelToolkit.ForegroundColourString(pTile."Text Colour Code"), pUpdated);
        pTile.FIELDNO("Show Info"):
          pTileObj.Info.Show := UpdateBoolean(pTileObj.Info.Show, pTile."Show Info", pUpdated);
        pTile.FIELDNO(Info):
          pTileObj.Info.Text := UpdateText(pTileObj.Info.Text, pTile.Info, pUpdated);
        pTile.FIELDNO("Info Font Size"):
          pTileObj.Info.Style.FontSize := UpdateInteger(pTileObj.Info.Style.FontSize, pTile."Text Font Size", pUpdated);
        pTile.FIELDNO("Info Font Style"):
          pTileObj.Info.Style.FontStyleString := UpdateText(pTileObj.Info.Style.FontStyleString, PanelToolkit.FontStyleString(pTile."Info Font Style"), pUpdated);
        pTile.FIELDNO("Info Colour Code"):
          pTileObj.Info.Style.ForegroundColourString := UpdateText(pTileObj.Info.Style.ForegroundColourString, PanelToolkit.ForegroundColourString(pTile."Info Colour Code"), pUpdated);
        pTile.FIELDNO(Size):
          pTileObj.SizeString := UpdateText(pTileObj.SizeString, PanelToolkit.TileSizeString(pTile.Size), pUpdated);
        pTile.FIELDNO("Background Colour Code"):
          pTileObj.BackgroundColourString := UpdateText(pTileObj.BackgroundColourString, PanelToolkit.BackgroundColourString(pTile."Background Colour Code"), pUpdated);
      END;
    END;

    PROCEDURE "--- Setting ---"@1000000106();
    BEGIN
    END;

    PROCEDURE UpdateBoolean@1000000107(pValue@1000000000 : Boolean;pNewValue@1000000001 : Boolean;VAR pUpdated@1000000002 : Boolean) : Boolean;
    BEGIN
      //DOC NA2015.1 - Updating boolean value (with update flag)
      //  -> pValue: Value
      //  -> pNewValue: New value
      //  <> pUpdated: Target updated flag
      //  <- New value

      pUpdated := ((pUpdated) OR (pValue <> pNewValue));
      EXIT(pNewValue);
    END;

    PROCEDURE UpdateText@1000000120(pValue@1000000000 : Text;pNewValue@1000000001 : Text;VAR pUpdated@1000000002 : Boolean) : Text;
    BEGIN
      //DOC NF2015.3 - Setting text with update flag
      //  -> pValue: Value
      //  -> pNewValue: New value
      //  <> pUpdated: Target updated flag
      //  <- New value

      pUpdated := ((pUpdated) OR (pValue <> pNewValue));
      EXIT(pNewValue);
    END;

    PROCEDURE UpdateInteger@1000000121(pValue@1000000000 : Integer;pNewValue@1000000001 : Integer;VAR pUpdated@1000000002 : Boolean) : Integer;
    BEGIN
      //DOC NF2015.3 - Updating integer with update flag
      //  -> pValue: Value
      //  -> pNewValue: New value
      //  <> pUpdated: Target updated flag
      //  <- New value

      pUpdated := ((pUpdated) OR (pValue <> pNewValue));
      EXIT(pNewValue);
    END;

    PROCEDURE "--- Tools ---"@1000000002();
    BEGIN
    END;

    LOCAL PROCEDURE CloneStyleObj@1000000007(pFromStyle@1000000001 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Style";VAR pToStyle@1000000002 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Style");
    VAR
      lStyle@1000000000 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Style";
    BEGIN
      //DOC NA2015.1 - Cloning a style (.NET) object
      //  -> pFromStyle: Source style
      //  <> pToStyle: Destination style

      IF ( NOT (ISNULL(pFromStyle))) THEN
        pToStyle := lStyle.Style(pFromStyle)
      ELSE
        pToStyle := lStyle.Style();
    END;

    LOCAL PROCEDURE CloneTileFieldObj@1000000008(pFromTileField@1000000001 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.TileField";pFromStyle@1000000004 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Style";VAR pToTileField@1000000002 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.TileField");
    VAR
      lStyle@1000000003 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Style";
      lTileField@1000000000 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.TileField";
    BEGIN
      //DOC NA2015.1 - Cloning a tile field (.NET) object
      //  -> pFromTileField: Source tile field
      //  -> pFromStyle: Source style (used only if pFromTileField.Style is null)
      //  <> pToTileField: Destination tile field

      IF ( NOT (ISNULL(pFromTileField.Style))) THEN
        lStyle := lStyle.Style(pFromTileField.Style)
      ELSE
        lStyle := lStyle.Style(pFromStyle);

      IF ( NOT (ISNULL(pFromTileField))) THEN
        pToTileField := lTileField.TileField(pFromTileField)
      ELSE
        pToTileField := lTileField.TileField();

      pToTileField.Style := lStyle;
    END;

    LOCAL PROCEDURE GetPanelSettings@1000000012();
    BEGIN
      //DOC NA2015.4 - Retrieving panel settings

      IF (PanelSettings) THEN
        EXIT;

      PanelAnimation := SystemBehaviour.GetBoolean(tSysBPanelAnimation);
      PanelFrames := SystemBehaviour.GetBoolean(tSysBPanelFrames);

      PanelSettings := TRUE;
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 09/10/2013 - Created
      //DOC NA2015.1  JH 21/02/2014 - Renamed, cleaning and bug-fixing
      //DOC NA2015.1  JH 14/03/2014 - New smart update
      //DOC NA2015.1  JH 15/04/2014 - Panels 3
      //DOC NA2015.3  JH 15/08/2014 - Fixes, amendments
      //DOC NA2015.4  JH 10/11/2014 - Upgraded to 2015
      //DOC NA2015.4  JH 05/02/2015 - Master switches for panel animation and frames
      //DOC NA2015.8  JH 26/06/2015 - New tiles version
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.12 JH 04/01/2016 - New panels
      //DOC NA2016.16 JH 19/05/2016 - CfMD amendments (new .NET library)
    }
    END.
  }
}

