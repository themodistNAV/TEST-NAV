OBJECT Table 9087016 Buying Staging Header
{
  OBJECT-PROPERTIES
  {
    Date=04/01/17;
    Time=[ 5:15:13 PM];
    Modified=Yes;
    Version List=NS2016.16,M0026,M0027,M0028,M0029,M0030,M0032,M0033;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF (Rec."No." = '') THEN
               BEGIN
                 nSembleSetup.VerifyAndGet();
                 NoSeriesManagement.InitSeries(nSembleSetup.GetBuyingStagingNos(), xRec."No. Series Code", 0D, Rec."No.", Rec."No. Series Code");
               END;
               IF (Rec."Document Date" = 0D) THEN
                 Rec."Document Date" := WORKDATE();
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=VAR
               StagingLine@1000000000 : Record 9087021;
             BEGIN
               BuyingStagingLine.RESET();
               BuyingStagingLine.SETRANGE("Buying Staging No.", Rec."No.");
               BuyingStagingLine.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Buying Staging Header;
               ENG=Buying Staging Header];
    LookupPageID=Page9087044;
    DrillDownPageID=Page9087044;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                CheckStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 10  ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                CheckStatusOpen();
                                                                IF (Rec."Vendor No." <> xRec."Vendor No.") THEN
                                                                BEGIN
                                                                  IF (Vendor.GET(Rec."Vendor No.")) THEN BEGIN
                                                                    Rec.VALIDATE("Currency Code", Vendor."Currency Code");
                                                                    //DOC M0029 DD 18/10/16 ++
                                                                    Rec.VALIDATE("Shipping Region Code", Vendor."Shipping Region Code");
                                                                    //DOC M0029 DD 18/10/16 --

                                                                    //DOC M0030 DD 19/10/16 ++
                                                                    Rec.VALIDATE("Shipment Method Code", Vendor."Shipment Method Code");
                                                                    //DOC M0030 DD 19/10/16 --
                                                                  END;

                                                                  UpdateLines(Rec.FIELDNO("Vendor No."));
                                                                END;
                                                                Rec.CALCFIELDS("Vendor Name");
                                                              END;

                                                   CaptionML=[ENU=Vendor No.;
                                                              ENG=Vendor No.] }
    { 11  ;   ;Vendor Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor No.)));
                                                   CaptionML=[ENU=Vendor Name;
                                                              ENG=Vendor Name];
                                                   Editable=No }
    { 20  ;   ;Currency Code       ;Code20        ;TableRelation=Currency;
                                                   OnValidate=VAR
                                                                lCurrencyExchangeRate@1000000000 : Record 330;
                                                              BEGIN
                                                                CheckStatusOpen();
                                                                IF (Rec."Currency Code" <> xRec."Currency Code") THEN
                                                                BEGIN
                                                                  IF (Rec."Currency Code" <> '') THEN
                                                                    Rec.VALIDATE("Currency Factor", lCurrencyExchangeRate.ExchangeRate(WORKDATE, Rec."Currency Code"))
                                                                  ELSE
                                                                    Rec.VALIDATE("Currency Factor", 1);
                                                                  UpdateLines(Rec.FIELDNO("Currency Code"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ENG=Currency Code] }
    { 21  ;   ;Currency Factor     ;Decimal       ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                CheckStatusOpen();
                                                                IF (Rec."Currency Factor" <> xRec."Currency Factor") THEN
                                                                  UpdateLines(Rec.FIELDNO("Currency Factor"));
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              ENG=Currency Factor];
                                                   DecimalPlaces=0:5 }
    { 30  ;   ;Shipment Method Code;Code20        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                CheckStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENG=Shipment Method Code] }
    { 40  ;   ;Discount %          ;Decimal       ;OnValidate=BEGIN
                                                                CheckStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Discount %;
                                                              ENG=Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 50  ;   ;Mark-up             ;Decimal       ;OnValidate=BEGIN
                                                                CheckStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Mark-up;
                                                              ENG=Mark-up];
                                                   DecimalPlaces=0:5 }
    { 60  ;   ;Delivery Window     ;Integer       ;OnValidate=BEGIN
                                                                CheckStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Delivery Window;
                                                              ENG=Delivery Window] }
    { 70  ;   ;No. Series Code     ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series Code;
                                                              ENG=No. Series Code];
                                                   Editable=No }
    { 80  ;   ;Freight Amount (LCY);Decimal       ;OnValidate=BEGIN
                                                                CheckStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Freight Amount (LCY);
                                                              ENG=Freight Amount (LCY)] }
    { 81  ;   ;Duty Amount (LCY)   ;Decimal       ;OnValidate=BEGIN
                                                                CheckStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Duty Amount (LCY);
                                                              ENG=Duty Amount (LCY)] }
    { 110 ;   ;Season Code         ;Code20        ;TableRelation=Season;
                                                   OnValidate=BEGIN
                                                                CheckStatusOpen();
                                                                IF (Rec."Season Code" <> xRec."Season Code") THEN
                                                                  Rec.VALIDATE("Sub-Season Code", '');
                                                              END;

                                                   CaptionML=[ENU=Season Code;
                                                              ENG=Season Code] }
    { 111 ;   ;Sub-Season Code     ;Code20        ;TableRelation=Sub-Season.Code WHERE (Season Code=FIELD(Season Code));
                                                   CaptionML=[ENU=Sub-Season Code;
                                                              ENG=Sub-Season Code] }
    { 130 ;   ;Reference No.       ;Code20        ;CaptionML=[ENU=Reference No.;
                                                              ENG=Reference No.] }
    { 131 ;   ;Buying Sheet No.    ;Code20        ;TableRelation="Buying Sheet Header";
                                                   OnValidate=BEGIN
                                                                IF (Rec."Buying Sheet No." <> xRec."Buying Sheet No.") THEN
                                                                  UpdateLines(Rec.FIELDNO("Buying Sheet No."));
                                                              END;

                                                   CaptionML=[ENU=Buying Sheet No.;
                                                              ENG=Buying Sheet No.] }
    { 140 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=Outstanding,Processed,Error;
                                                                    ENG=Outstanding,Processed,Error];
                                                   OptionString=Outstanding,Processed,Error }
    { 150 ;   ;Size Group Code     ;Code20        ;TableRelation="Size Group";
                                                   OnValidate=BEGIN
                                                                CheckStatusOpen();
                                                                IF (Rec."Size Group Code" <> xRec."Size Group Code") THEN
                                                                  UpdateLines(Rec.FIELDNO("Size Group Code"));
                                                              END;

                                                   CaptionML=[ENU=Size Group Code;
                                                              ENG=Size Group Code] }
    { 160 ;   ;Process             ;Boolean       ;OnValidate=BEGIN
                                                                IF ((Rec.Process <> xRec.Process) AND (Rec.Process)) THEN
                                                                  CODEUNIT.RUN(CODEUNIT::"Buying Staging Processing", Rec);
                                                              END;

                                                   CaptionML=[ENU=Process;
                                                              ENG=Process] }
    { 161 ;   ;Error Message       ;Text250       ;CaptionML=[ENU=Error Message;
                                                              ENG=Error Message] }
    { 170 ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENG=Document Date] }
    { 171 ;   ;Order Date          ;Date          ;CaptionML=[ENU=Order Date;
                                                              ENG=Order Date] }
    { 180 ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
    { 50610;  ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENG=Payment Terms Code];
                                                   Description=M0026 DD 13/10/16 }
    { 50620;  ;Deposit %           ;Decimal       ;Description=M0027 DD 18/10/16 }
    { 50630;  ;Shipment Window     ;Option        ;OptionCaptionML=[ENU=Ex-Factory,Delivered;
                                                                    ENG=Ex-Factory,Delivered];
                                                   OptionString=Ex-Factory,Delivered;
                                                   Description=M0028 DD 18/10/16 }
    { 50640;  ;Shipping Region Code;Code20        ;TableRelation="Shipping Region";
                                                   Description=M0029 DD 18/10/2016 }
    { 50650;  ;Shipment Date       ;Date          ;Description=M0032 DD 18/10/2016 }
    { 50660;  ;Cancellation Date   ;Date          ;Description=M0033 DD 18/10/2016 }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Buying Sheet No.                         }
    {    ;Reference No.                            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      nSembleSetup@1000000002 : Record 9087000;
      BuyingStagingLine@1000000004 : Record 9087017;
      Vendor@1000000005 : Record 23;
      NoSeriesManagement@1000000003 : Codeunit 396;
      TnpToolkit@1000000000 : Codeunit 9062230;

    PROCEDURE NoAssistEdit@2() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NS2015.1 - Assist edit for "No." field

      nSembleSetup.VerifyAndGet();
      IF (NoSeriesManagement.SelectSeries(nSembleSetup.GetBuyingStagingNos(), xRec."No. Series Code", Rec."No. Series Code")) THEN
      BEGIN
        NoSeriesManagement.SetSeries(Rec."No.");
        lResult := TRUE;
      END;
      EXIT(lResult);
    END;

    PROCEDURE CurrencyCodeAssistEdit@1000000009() : Boolean;
    VAR
      lChangeExchangeRate@1000000000 : Page 511;
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NS2015.1 - Assist edit for "Currency Code" field
      //  <- TRUE: Currency factor has been changed, update page; FALSE: Don't bother

      lResult := FALSE;

      CLEAR(lChangeExchangeRate);
      IF (Rec."Document Date" <> 0D) THEN
        lChangeExchangeRate.SetParameter(Rec."Currency Code", Rec."Currency Factor", Rec."Document Date")
      ELSE
        lChangeExchangeRate.SetParameter(Rec."Currency Code", Rec."Currency Factor", WORKDATE());
      IF (lChangeExchangeRate.RUNMODAL() = ACTION::OK) THEN
      BEGIN
        Rec.VALIDATE("Currency Factor", lChangeExchangeRate.GetParameter());
        lResult := TRUE;
      END;
      CLEAR(lChangeExchangeRate);

      EXIT(lResult);
    END;

    PROCEDURE CheckStatusOpen@1000000002();
    BEGIN
      Rec.TESTFIELD(Status, Rec.Status::Outstanding);
    END;

    PROCEDURE UpdateLines@1000000001(pFieldId@1000000000 : Integer);
    BEGIN
      //DOC NS2015.1 - Updating lines for given field ID
      //  -> pFieldId: Field ID

      BuyingStagingLine.RESET();
      BuyingStagingLine.SETRANGE("Buying Staging No.", Rec."No.");
      IF (BuyingStagingLine.FINDSET()) THEN
      REPEAT
        CASE (pFieldId) OF
          Rec.FIELDNO("Vendor No."):
            BuyingStagingLine.VALIDATE("Vendor No.", Rec."Vendor No.");
          Rec.FIELDNO("Buying Sheet No."):
            BuyingStagingLine.VALIDATE("Buying Sheet No.", Rec."Buying Sheet No.");
          Rec.FIELDNO("Size Group Code"):
            BuyingStagingLine.VALIDATE("Size Group Code", Rec."Size Group Code");
        END;
        BuyingStagingLine.MODIFY(TRUE);
      UNTIL (BuyingStagingLine.NEXT() = 0);
    END;

    PROCEDURE SetErrorMessage@1000000003(pErrorMessage@1000000000 : Text[1024]);
    BEGIN
      //DOC NS2015.1 - Setting error message
      //  -> pErrorMessage: The error message (full lenght; hast to be cut to fit the table field)

      Rec.VALIDATE("Error Message", COPYSTR(pErrorMessage, 1, MAXSTRLEN(Rec."Error Message")));
    END;

    PROCEDURE ResetStatus@1000000011();
    VAR
      lBuyingStagingHeader@1000000000 : Record 9087016;
      lResetBuyingStagingStatus@1000000001 : Report 9087001;
    BEGIN
      //DOC NS2016.16 - Resetting status

      lBuyingStagingHeader := Rec;
      lBuyingStagingHeader.SETRECFILTER();

      lResetBuyingStagingStatus.SETTABLEVIEW(lBuyingStagingHeader);
      lResetBuyingStagingStatus.Initialise(FALSE);
      lResetBuyingStagingStatus.RUNMODAL();
    END;

    PROCEDURE Archive@1000000008();
    VAR
      lBuyingStagingHeader@1000000000 : Record 9087016;
    BEGIN
      //DOC NS2015.1 - Archiving

      lBuyingStagingHeader := Rec;
      lBuyingStagingHeader.SETRECFILTER();

      REPORT.RUNMODAL(REPORT::"Archive Buying Staging", TRUE, FALSE, lBuyingStagingHeader);
    END;

    PROCEDURE ShowVendor@1000000006();
    VAR
      lVendor@1000000000 : Record 23;
    BEGIN
      Rec.TESTFIELD("Vendor No.");
      lVendor.GET(Rec."Vendor No.");
      PAGE.RUN(PAGE::"Vendor Card", lVendor);
    END;

    PROCEDURE ShowVendorColours@1000000007();
    VAR
      lVendor@1000000000 : Record 23;
    BEGIN
      Rec.TESTFIELD("Vendor No.");
      lVendor.GET(Rec."Vendor No.");
      lVendor.SETRECFILTER();
      PAGE.RUN(PAGE::"Vendor Colour List", lVendor);
    END;

    PROCEDURE ShowStyles@1000000004();
    VAR
      lStyle@1000000003 : Record 9087012;
      lStyleFilter@1000000000 : Code[1024];
      eNoStyles@1000000001 : TextConst 'ENU=There are no styles linked to the current requistion staging.;ENG=There are no styles linked to the current requistion staging.';
      lLastStyleNo@1000000002 : Code[20];
    BEGIN
      //DOC NS2015.1 - Showing styles

      lLastStyleNo := '';
      BuyingStagingLine.RESET();
      BuyingStagingLine.SETCURRENTKEY("Buying Staging No.", "Style No.");
      BuyingStagingLine.SETRANGE("Buying Staging No.", Rec."No.");
      BuyingStagingLine.SETFILTER("Style No.", '<>''''');
      IF (BuyingStagingLine.FINDSET()) THEN
        REPEAT
          IF (BuyingStagingLine."Style No." <> lLastStyleNo) THEN
          BEGIN
            IF (lStyleFilter <> '') THEN
              lStyleFilter := lStyleFilter + '|';
            lStyleFilter := lStyleFilter + BuyingStagingLine."Style No.";
            lLastStyleNo := BuyingStagingLine."Style No.";
          END;
        UNTIL (BuyingStagingLine.NEXT() = 0)
      ELSE
        ERROR(eNoStyles);

      lStyle.RESET();
      lStyle.SETFILTER("No.", lStyleFilter);
      PAGE.RUN(0, lStyle);
    END;

    PROCEDURE ShowItems@1000000000();
    VAR
      lItem@1000000002 : Record 27;
      lItemFilter@1000000001 : Code[1024];
      lLastItemNo@1000000000 : Code[20];
      eNoItems@1000000003 : TextConst 'ENU=There are no items linked to the current requistion staging.;ENG=There are no items linked to the current requistion staging.';
    BEGIN
      //DOC NS2015.1 - Showing items

      lLastItemNo := '';
      BuyingStagingLine.RESET();
      BuyingStagingLine.SETCURRENTKEY("Buying Staging No.", "Item No.");
      BuyingStagingLine.SETRANGE("Buying Staging No.", Rec."No.");
      BuyingStagingLine.SETFILTER("Item No.", '<>''''');
      IF (BuyingStagingLine.FINDSET()) THEN
        REPEAT
          IF (BuyingStagingLine."Item No." <> lLastItemNo) THEN
          BEGIN
            IF (lItemFilter <> '') THEN
              lItemFilter := lItemFilter + '|';
            lItemFilter := lItemFilter + BuyingStagingLine."Item No.";
            lLastItemNo := BuyingStagingLine."Item No.";
          END;
        UNTIL (BuyingStagingLine.NEXT() = 0)
      ELSE
        ERROR(eNoItems);

      lItem.RESET();
      lItem.SETFILTER("No.", lItemFilter);
      PAGE.RUN(0, lItem);
    END;

    PROCEDURE ShowBuyingSheet@1000000005();
    VAR
      lBuyingSheetHeader@1000000000 : Record 9087020;
    BEGIN
      //DOC NS2015.1 - Showing buying sheet

      Rec.TESTFIELD("Buying Sheet No.");
      lBuyingSheetHeader.GET(Rec."Buying Sheet No.");
      PAGE.RUN(PAGE::"Buying Sheet Card", lBuyingSheetHeader);
    END;

    PROCEDURE ShowArchives@1000000010();
    VAR
      lBuyingStagingArchHeader@1000000000 : Record 9087018;
    BEGIN
      //DOC NS2016.16 - Showing archives

      lBuyingStagingArchHeader.RESET();
      lBuyingStagingArchHeader.SETRANGE("No.", Rec."No.");
      PAGE.RUN(0, lBuyingStagingArchHeader);
    END;

    PROCEDURE GetStyle@1000000012() : Text;
    BEGIN
      //DOC NS2016.16 - Returning style
      //  <- The style

      CASE (Rec.Status) OF
        Rec.Status::Outstanding: EXIT('StandardAccent');
        Rec.Status::Error: EXIT('Unfavorable');
        ELSE EXIT('Standard');
      END;
    END;

    BEGIN
    {
      //DOC NS2015.1  JH 19/11/2013 - Created
      //DOC NS2016.16 JH 06/09/2016 - nSemble 2016
      //DOC M0026 DD 13/10/16 - Designed "Payment Terms Code" field.
      //DOC M0027 DD 18/10/16 - Designed "Deposit %" field.
      //DOC M0027 DD 18/10/16 - Designed "Deposit %" field.
      //DOC M0029 DD 18/10/16 - Designed "Shipping Region Code" fields.
      //DOC M0032 DD 18/10/16 - Designed "PO Ship Date" field.
      //DOC M0033 DD 18/10/16 - Designed "PO Cancel Date" field.
      //DOC M0030 DD 19/10/16 - Get Shipment Method from Vendor.
      //DOC M0032 PCM 28/11/16 - Renamed "PO Ship Date" to "Shipment Date".
      //DOC M0033 PCM 28/11/16 - Renamed "PO Cancel Date" to "Cancellation Date".
    }
    END.
  }
}

