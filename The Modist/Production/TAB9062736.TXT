OBJECT Table 9062736 AutoNAV Task Log Entry
{
  OBJECT-PROPERTIES
  {
    Date=17/12/15;
    Time=[ 5:23:42 PM];
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Job Queue Log Entry;
               ENG=Job Queue Log Entry];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Entry No.;
                                                              ENG=Entry No.] }
    { 2   ;   ;AutoNAV Task ID     ;GUID          ;CaptionML=[ENU=AutoNAV Task ID;
                                                              ENG=AutoNAV Task ID] }
    { 3   ;   ;User ID             ;Text65        ;TableRelation=User."User Name";
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              ENG=User ID] }
    { 4   ;   ;Start Date/Time     ;DateTime      ;CaptionML=[ENU=Start Date/Time;
                                                              ENG=Start Date/Time] }
    { 5   ;   ;End Date/Time       ;DateTime      ;CaptionML=[ENU=End Date/Time;
                                                              ENG=End Date/Time] }
    { 6   ;   ;Object Type to Run  ;Option        ;CaptionML=[ENU=Object Type to Run;
                                                              ENG=Object Type to Run];
                                                   OptionCaptionML=[ENU=,,,Report,,Codeunit;
                                                                    ENG=,,,Report,,Codeunit];
                                                   OptionString=,,,Report,,Codeunit }
    { 7   ;   ;Object ID to Run    ;Integer       ;CaptionML=[ENU=Object ID to Run;
                                                              ENG=Object ID to Run] }
    { 8   ;   ;Object Caption to Run;Text250      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=FIELD(Object Type to Run),
                                                                                                                Object ID=FIELD(Object ID to Run)));
                                                   CaptionML=[ENU=Object Caption to Run;
                                                              ENG=Object Caption to Run] }
    { 9   ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=Success,In Process,Error,,,,,,,,,,,Information,Debug;
                                                                    ENG=Success,In Process,Error,,,,,,,,,,,Information,Debug];
                                                   OptionString=Success,In Process,Error,,,,,,,,,,,Information,Debug }
    { 10  ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 11  ;   ;Error Message       ;Text250       ;CaptionML=[ENU=Error Message;
                                                              ENG=Error Message] }
    { 12  ;   ;Error Message 2     ;Text250       ;CaptionML=[ENU=Error Message 2;
                                                              ENG=Error Message 2] }
    { 13  ;   ;Error Message 3     ;Text250       ;CaptionML=[ENU=Error Message 3;
                                                              ENG=Error Message 3] }
    { 14  ;   ;Error Message 4     ;Text250       ;CaptionML=[ENU=Error Message 4;
                                                              ENG=Error Message 4] }
    { 15  ;   ;AutoNAV Task Queue Code;Code20     ;TableRelation="Job Queue";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=AutoNAV Task Queue Code;
                                                              ENG=AutoNAV Task Queue Code] }
    { 16  ;   ;Processed by User ID;Text65        ;CaptionML=[ENU=Processed by User ID;
                                                              ENG=Processed by User ID] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;AutoNAV Task Queue Code,AutoNAV Task ID  }
    {    ;AutoNAV Task Queue Code,AutoNAV Task ID,Start Date/Time }
    {    ;Start Date/Time,AutoNAV Task Queue Code,AutoNAV Task ID }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=There is no error message.;ENG=There is no error message.';
      Text002@1000 : TextConst 'ENU=Are you sure that you want to delete job queue log entries?;ENG=Are you sure that you want to delete job queue log entries?';
      Text003@1002 : TextConst 'ENU=Marked as Error by %1.;ENG=Marked as Error by %1.';
      Text004@1003 : TextConst 'ENU=Only entries with status In Progress can be marked as Error.;ENG=Only entries with status In Progress can be marked as Error.';

    PROCEDURE GetErrorMessage@1() : Text;
    BEGIN
      EXIT("Error Message" + "Error Message 2" + "Error Message 3" + "Error Message 4");
    END;

    PROCEDURE SetErrorMessage@2(ErrorText@1000 : Text);
    BEGIN
      "Error Message 2" := '';
      "Error Message 3" := '';
      "Error Message 4" := '';
      "Error Message" := COPYSTR(ErrorText,1,250);
      IF STRLEN(ErrorText) > 250 THEN
        "Error Message 2" := COPYSTR(ErrorText,251,250);
      IF STRLEN(ErrorText) > 500 THEN
        "Error Message 3" := COPYSTR(ErrorText,501,250);
      IF STRLEN(ErrorText) > 750 THEN
        "Error Message 4" := COPYSTR(ErrorText,751,250);
    END;

    PROCEDURE DeleteEntries@3(DaysOld@1000 : Integer);
    BEGIN
      IF NOT CONFIRM(Text002) THEN
        EXIT;
      SETFILTER(Status,'<>%1',Status::"In Process");
      SETFILTER("End Date/Time",'<=%1',CREATEDATETIME(TODAY - DaysOld,TIME));
      DELETEALL;
      SETRANGE("End Date/Time");
      SETRANGE(Status);
    END;

    PROCEDURE ShowErrorMessage@8();
    VAR
      e@1000 : Text;
    BEGIN
      e := GetErrorMessage;
      IF e = '' THEN
        e := Text001;
      MESSAGE(e);
    END;

    PROCEDURE MarkAsError@4();
    VAR
      AutoNavTask@1003 : Record 9062734;
      ErrorMessage@1002 : Text[1000];
    BEGIN
      IF Status <> Status::"In Process" THEN
        ERROR(Text004);

      ErrorMessage := STRSUBSTNO(Text003,USERID);

      IF AutoNavTask.GET("AutoNAV Task Queue Code", "AutoNAV Task ID") THEN
        AutoNavTask.SetError(ErrorMessage);

      Status := Status::Error;
      SetErrorMessage(ErrorMessage);
      MODIFY;
    END;

    PROCEDURE GetStyle@9062229() : Text;
    BEGIN
      CASE (Rec.Status) OF
        Rec.Status::"In Process":
          EXIT('StandardAccent');
        Rec.Status::Error:
          EXIT('Unfavorable');
        Rec.Status::Information:
          EXIT('Favorable');
        Rec.Status::Debug:
          EXIT('Ambiguous');
        ELSE
          EXIT('Standard');
      END;
    END;

    BEGIN
    END.
  }
}

