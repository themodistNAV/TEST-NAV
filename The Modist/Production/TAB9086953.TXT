OBJECT Table 9086953 nF. User
{
  OBJECT-PROPERTIES
  {
    Date=30/10/16;
    Time=11:22:24 AM;
    Version List=NF2016.17;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               Rec.TESTFIELD("User Security ID");
               Rec.TESTFIELD("User ID");
               NfRecordAuditToolkit.UpdateCreated(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               NfRecordAuditToolkit.UpdateModified(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               NfUserGroupMember.RESET();
               NfUserGroupMember.SETRANGE("nF. User ID", Rec.ID);
               NfUserGroupMember.SetSystemActivity(TRUE);
               NfUserGroupMember.DELETEALL(TRUE);
               NfUserGroupMember.SetSystemActivity(FALSE);

               NfPermissionGroupMember.RESET();
               NfPermissionGroupMember.SETRANGE(Type, NfPermissionGroupMember.Type::User);
               NfPermissionGroupMember.SETRANGE("nF. User / User Group ID", Rec.ID);
               NfPermissionGroupMember.SetSystemActivity(TRUE);
               NfPermissionGroupMember.DELETEALL(TRUE);
               NfPermissionGroupMember.SetSystemActivity(FALSE);

               NfUserPermissionSet.RESET();
               NfUserPermissionSet.SETCURRENTKEY("nF. User ID");
               NfUserPermissionSet.SETRANGE("nF. User ID", Rec.ID);
               NfUserPermissionSet.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=nForcement User;
               ENG=nForcement User];
    LookupPageID=Page9086959;
    DrillDownPageID=Page9086959;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 10  ;   ;User Security ID    ;GUID          ;OnValidate=VAR
                                                                lEmptyGuid@1000000000 : GUID;
                                                              BEGIN
                                                                IF (UserSecurityIdValidation) THEN
                                                                  EXIT;
                                                                UserSecurityIdValidation := TRUE;
                                                                IF (Rec."User Security ID" <> lEmptyGuid) THEN
                                                                BEGIN
                                                                  User.GET(Rec."User Security ID");
                                                                  Rec.VALIDATE("User ID", User."User Name");
                                                                  Rec.VALIDATE("User Name", User."Full Name");
                                                                  UpdateShortUserId(FALSE);
                                                                END
                                                                ELSE
                                                                BEGIN
                                                                  Rec.VALIDATE("User ID", '');
                                                                  Rec.VALIDATE("User Name", '');
                                                                  Rec.VALIDATE("Short User ID", '');
                                                                END;
                                                                UserSecurityIdValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=User Security ID;
                                                              ENG=User Security ID] }
    { 11  ;   ;User ID             ;Code50        ;OnValidate=VAR
                                                                lEmptyGuid@1000000000 : GUID;
                                                              BEGIN
                                                                IF (UserIdValidation) THEN
                                                                  EXIT;
                                                                UserIdValidation := TRUE;
                                                                UserManagement.ValidateUserID(Rec."User ID");
                                                                IF (Rec."User ID" <> '') THEN
                                                                BEGIN
                                                                  User.RESET();
                                                                  User.SETRANGE("User Name", Rec."User ID");
                                                                  User.FINDFIRST();
                                                                  Rec.VALIDATE("User Security ID", User."User Security ID");
                                                                END
                                                                ELSE
                                                                  Rec.VALIDATE("User Security ID", lEmptyGuid);
                                                                UserIdValidation := FALSE;
                                                                UpdateIdForRelations();
                                                              END;

                                                   OnLookup=BEGIN
                                                              UserManagement.LookupUserID(Rec."User ID");
                                                              Rec.VALIDATE("User ID");
                                                            END;

                                                   CaptionML=[ENU=User ID;
                                                              ENG=User ID] }
    { 12  ;   ;User Name           ;Text100       ;CaptionML=[ENU=User Name;
                                                              ENG=User Name] }
    { 13  ;   ;Short User ID       ;Code50        ;OnValidate=VAR
                                                                lEmptyGuid@1000000000 : GUID;
                                                              BEGIN
                                                                IF (ShortUserIdValidation) THEN
                                                                  EXIT;
                                                                ShortUserIdValidation := TRUE;
                                                                IF (Rec."Short User ID" <> '') THEN
                                                                BEGIN
                                                                  User.RESET();
                                                                  User.SETRANGE("User Name", Rec."Short User ID");
                                                                  User.FINDFIRST();
                                                                  Rec.VALIDATE("User Security ID", User."User Security ID");
                                                                  UpdateShortUserId(FALSE);
                                                                END
                                                                ELSE
                                                                  Rec.VALIDATE("User Security ID", lEmptyGuid);
                                                                ShortUserIdValidation := FALSE;
                                                                UpdateIdForRelations();
                                                              END;

                                                   OnLookup=BEGIN
                                                              UserManagement.LookupUserID(Rec."Short User ID");
                                                              Rec.VALIDATE("Short User ID");
                                                            END;

                                                   CaptionML=[ENU=Short User ID;
                                                              ENG=Short User ID] }
    { 20  ;   ;New                 ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=New;
                                                              ENG=New] }
    { 21  ;   ;Superuser           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Access Control" WHERE (User Security ID=FIELD(User Security ID),
                                                                                             Role ID=CONST(SUPER)));
                                                   CaptionML=[ENU=Superuser;
                                                              ENG=Superuser];
                                                   Editable=No }
    { 22  ;   ;Disabled            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist(User WHERE (User Security ID=FIELD(User Security ID),
                                                                                 State=CONST(Disabled)));
                                                   CaptionML=[ENU=Disabled;
                                                              ENG=Disabled];
                                                   Editable=No }
    { 23  ;   ;Hidden              ;Boolean       ;CaptionML=[ENU=Hidden;
                                                              ENG=Hidden] }
    { 24  ;   ;Pending             ;Boolean       ;CaptionML=[ENU=Pending;
                                                              ENG=Pending] }
    { 30  ;   ;Users to Update     ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Users to Update;
                                                              ENG=Users to Update];
                                                   OptionCaptionML=[ENU=" ,Pending,All";
                                                                    ENG=" ,Pending,All"];
                                                   OptionString=[ ,Pending,All] }
    { 40  ;   ;Contact No.         ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Contact No.;
                                                              ENG=Contact No.] }
    { 41  ;   ;Salesperson/Purchaser Code;Code10  ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Salesperson/Purchaser Code;
                                                              ENG=Salesperson/Purchaser Code] }
    { 42  ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor No.;
                                                              ENG=Vendor No.] }
    { 43  ;   ;Resource No.        ;Code20        ;TableRelation=Resource;
                                                   CaptionML=[ENU=Resource No.;
                                                              ENG=Resource No.] }
    { 44  ;   ;Employee No.        ;Code20        ;TableRelation=Employee;
                                                   CaptionML=[ENU=Employee No.;
                                                              ENG=Employee No.] }
    { 45  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code] }
    { 50  ;   ;Relation            ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Relation;
                                                              ENG=Relation];
                                                   OptionCaptionML=[ENU=" ,Contact,Salesperson/Purchaser,Vendor,Resource,Employee,Location";
                                                                    ENG=" ,Contact,Salesperson/Purchaser,Vendor,Resource,Employee,Location"];
                                                   OptionString=[ ,Contact,Salesperson/Purchaser,Vendor,Resource,Employee,Location] }
    { 51  ;   ;ID for Relations    ;Code20        ;CaptionML=[ENU=ID for Relations;
                                                              ENG=ID for Relations] }
    { 60  ;   ;E-Mail              ;Text50        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail;
                                                              ENG=E-Mail] }
    { 61  ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENG=Phone No.] }
    { 62  ;   ;Mobile Phone No.    ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Mobile Phone No.;
                                                              ENG=Mobile Phone No.] }
    { 70  ;   ;Pokemon Go Points   ;Integer       ;CaptionML=[ENU=Pokemon Go Points;
                                                              ENG=Pokemon Go Points];
                                                   MinValue=0 }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              NfRecordAuditToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              NfRecordAuditToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;ID                                       }
    {    ;User Security ID                        ;Clustered=Yes }
    {    ;User ID                                  }
    {    ;User Name                                }
    {    ;Hidden,User ID                           }
    {    ;Short User ID                            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      User@1000000000 : Record 2000000120;
      NfUserGroupMember@1000000006 : Record 9086956;
      NfUserPermissionSet@1000000010 : Record 9086954;
      NfPermissionGroupMember@1000000007 : Record 9086961;
      NfSetup@1000000008 : Record 9086950;
      NfIif@1000000011 : Codeunit 9086975;
      NfManagement@1000000001 : Codeunit 9086950;
      NfRecordAuditToolkit@1000000005 : Codeunit 9086951;
      UserManagement@1000000002 : Codeunit 418;
      UserSecurityIdValidation@1000000003 : Boolean;
      UserIdValidation@1000000004 : Boolean;
      ShortUserIdValidation@1000000009 : Boolean;

    PROCEDURE GetName@1000000007() : Text;
    BEGIN
      ///<summary>Returning user name (anything that can identify the user)</summary>
      ///<returns>The name</returns>

      IF (Rec."User Name" <> '') THEN
        EXIT(Rec."User Name")
      ELSE IF (Rec."Short User ID" <> '') THEN
        EXIT(Rec."Short User ID")
      ELSE IF (Rec."User ID" <> '') THEN
        EXIT(Rec."User ID")
      ELSE
        EXIT(FORMAT(Rec."User Security ID"));
    END;

    LOCAL PROCEDURE UpdateShortUserId@1000000006(pValidate@1000000000 : Boolean);
    VAR
      lShortUserId@1000000001 : Code[50];
    BEGIN
      ///<summary>Updating short user ID</summary>
      ///<param name="pValidate">Flag to validate</param>

      NfSetup.VerifyAndGet();
      IF (NfSetup."Hide User Domain") THEN
        lShortUserId := NfManagement.RemoveDomain(Rec."User ID")
      ELSE
        lShortUserId := Rec."User ID";
      IF (pValidate) THEN
        Rec.VALIDATE("Short User ID", lShortUserId)
      ELSE
        Rec."Short User ID" := lShortUserId;
      UpdateIdForRelations();
    END;

    LOCAL PROCEDURE UpdateIdForRelations@1000000005();
    VAR
      lId@1000000000 : Code[50];
    BEGIN
      ///<summary>Updating ID for relations</summary>

      IF (Rec."Short User ID" <> '') THEN
        lId := Rec."Short User ID"
      ELSE
        lId := Rec."User ID";

      Rec.VALIDATE("ID for Relations", COPYSTR(lId, 1, MAXSTRLEN(Rec."ID for Relations")));
    END;

    PROCEDURE GetStyle@1000000000() : Text;
    BEGIN
      ///<summary>Returning style (for presentation on a page)</summary>
      ///<returns>The style</returns>

      Rec.CALCFIELDS(Superuser);
      IF (Rec.Hidden) THEN
        EXIT('Ambiguous')
      ELSE IF (Rec.Disabled) THEN
        EXIT('Subordinate')
      ELSE IF (Rec.New) THEN
        EXIT('Unfavorable')
      ELSE IF (Rec.Pending) THEN
        EXIT('Attention')
      ELSE
        EXIT(NfIif.Text(Rec.Superuser, 'Strong', 'Standard'));
    END;

    PROCEDURE MarkAsPending@1000000003();
    BEGIN
      ///<summary>Marking the user as pending</summary>

      IF ( NOT (Rec.Pending)) THEN
      BEGIN
        Rec.VALIDATE(Pending, TRUE);
        Rec.MODIFY(TRUE);
      END;
    END;

    PROCEDURE NavigateToUser@1000000001();
    BEGIN
      ///<summary>Navigating to user</summary>

      Rec.TESTFIELD("User Security ID");
      User.GET(Rec."User Security ID");
      PAGE.RUN(PAGE::"User Card", User);
    END;

    PROCEDURE NavigateToUserSetup@1000000004();
    VAR
      lUserSetup@1000000000 : Record 91;
    BEGIN
      ///<summary>Navigating to user setup</summary>

      Rec.TESTFIELD("User ID");
      lUserSetup.RESET();
      lUserSetup.SETRANGE("User ID", Rec."User ID");
      PAGE.RUN(0, lUserSetup);
    END;

    PROCEDURE NavigateToUserPermissionSets@1000000002();
    VAR
      lAccessControl@1000000000 : Record 2000000053;
    BEGIN
      ///<summary>Navigating to user permission sets</summary>

      lAccessControl.RESET();
      lAccessControl.FILTERGROUP(2);
      lAccessControl.SETRANGE("User Security ID", Rec."User Security ID");
      lAccessControl.FILTERGROUP(0);
      PAGE.RUN(PAGE::"User Permission Sets", lAccessControl);
    END;

    PROCEDURE NavigateToContact@1000000008();
    VAR
      lContact@1000000000 : Record 5050;
    BEGIN
      ///<summary>Navigating to contact</summary>

      Rec.TESTFIELD("Contact No.");
      lContact.GET(Rec."Contact No.");
      PAGE.RUN(PAGE::"Contact Card", lContact);
    END;

    PROCEDURE NavigateToSalespersonPurchaser@1000000009();
    VAR
      lSalespersonPurchaser@1000000000 : Record 13;
    BEGIN
      ///<summary>Navigating to salesperson / purchaser</summary>

      Rec.TESTFIELD("Salesperson/Purchaser Code");
      lSalespersonPurchaser.GET(Rec."Salesperson/Purchaser Code");
      PAGE.RUN(PAGE::"Salesperson/Purchaser Card", lSalespersonPurchaser);
    END;

    PROCEDURE NavigateToVendor@1000000010();
    VAR
      lVendor@1000000000 : Record 23;
    BEGIN
      ///<summary>Navigating to vendor</summary>

      Rec.TESTFIELD("Vendor No.");
      lVendor.GET(Rec."Vendor No.");
      PAGE.RUN(PAGE::"Vendor Card", lVendor);
    END;

    PROCEDURE NavigateToResource@1000000011();
    VAR
      lResource@1000000000 : Record 156;
    BEGIN
      ///<summary>Navigating to resource</summary>

      Rec.TESTFIELD("Resource No.");
      lResource.GET(Rec."Resource No.");
      PAGE.RUN(PAGE::"Resource Card", lResource);
    END;

    PROCEDURE NavigateToEmployee@1000000012();
    VAR
      lEmployee@1000000000 : Record 5200;
    BEGIN
      ///<summary>Navigating to employee</summary>

      Rec.TESTFIELD("Employee No.");
      lEmployee.GET(Rec."Employee No.");
      PAGE.RUN(PAGE::"Employee Card", lEmployee);
    END;

    PROCEDURE NavigateToLocation@1000000017();
    VAR
      lLocation@1000000000 : Record 14;
    BEGIN
      ///<summary>Navigating to location</summary>

      Rec.TESTFIELD("Location Code");
      lLocation.GET(Rec."Location Code");
      PAGE.RUN(PAGE::"Location Card", lLocation);
    END;

    BEGIN
    {
      ///<summary>Table with nForcmement users</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-04-22">Created</change>
    }
    END.
  }
}

