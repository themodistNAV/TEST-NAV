OBJECT Codeunit 1530 Request Page Parameters Helper
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DataItemPathTxt@1000 : TextConst '@@@={Locked};ENU=/ReportParameters/DataItems/DataItem;ENG=/ReportParameters/DataItems/DataItem';
      OptionPathTxt@1002 : TextConst '@@@={Locked};ENU=/ReportParameters/Options/Field;ENG=/ReportParameters/Options/Field';
      XmlNodesNotFoundErr@1001 : TextConst 'ENU=The XML Nodes at %1 cannot be found in the XML Document %2.;ENG=The XML Nodes at %1 cannot be found in the XML Document %2.';
      RepParamsWrongNumberFoundErr@1003 : TextConst 'ENU=XML contains incorrect number of <ReportParameters> nodes.;ENG=XML contains incorrect number of <ReportParameters> nodes.';

    PROCEDURE ConvertParametersToFilters@3(RecRef@1005 : RecordRef;TempBlob@1000 : Record 99008535) : Boolean;
    VAR
      TableMetadata@1003 : Record 2000000136;
      FoundXmlNodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      IF NOT TableMetadata.GET(RecRef.NUMBER) THEN
        EXIT(FALSE);

      IF NOT FindNodes(FoundXmlNodeList,ReadParameters(TempBlob),DataItemPathTxt) THEN
        EXIT(FALSE);

      EXIT(GetFiltersForTable(RecRef,FoundXmlNodeList));
    END;

    LOCAL PROCEDURE ReadParameters@2(TempBlob@1000 : Record 99008535) Parameters : Text;
    VAR
      ParametersInStream@1002 : InStream;
    BEGIN
      IF TempBlob.Blob.HASVALUE THEN BEGIN
        TempBlob.Blob.CREATEINSTREAM(ParametersInStream);
        ParametersInStream.READTEXT(Parameters);
      END;
    END;

    LOCAL PROCEDURE FindNodes@31(VAR FoundXmlNodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";Parameters@1000 : Text;NodePath@1003 : Text) : Boolean;
    VAR
      XMLDOMMgt@1004 : Codeunit 6224;
      ParametersXmlDoc@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF NOT TryLoadXml(ParametersXmlDoc,Parameters) THEN
        EXIT(FALSE);

      IF NOT XMLDOMMgt.FindNodes(ParametersXmlDoc.DocumentElement,NodePath,FoundXmlNodeList) THEN
        ERROR(XmlNodesNotFoundErr,NodePath,ParametersXmlDoc.DocumentElement.InnerXml);

      EXIT(TRUE);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryLoadXml@1(VAR ParametersXmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Parameters@1001 : Text);
    BEGIN
      ParametersXmlDoc := ParametersXmlDoc.XmlDocument;
      ParametersXmlDoc.LoadXml(Parameters);
    END;

    LOCAL PROCEDURE GetFiltersForTable@10(RecRef@1003 : RecordRef;FoundXmlNodeList@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList") : Boolean;
    VAR
      FoundXmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      FOREACH FoundXmlNode IN FoundXmlNodeList DO
        IF (FoundXmlNode.Attributes.ItemOf('name').Value = GetTableCaption(RecRef.NUMBER)) OR
           (FoundXmlNode.Attributes.ItemOf('name').Value = GetTableName(RecRef.NUMBER))
        THEN BEGIN
          RecRef.SETVIEW(FoundXmlNode.InnerText);
          EXIT(TRUE);
        END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetTableCaption@11(TableID@1000 : Integer) : Text;
    VAR
      TableMetadata@1001 : Record 2000000136;
    BEGIN
      TableMetadata.GET(TableID);
      EXIT(TableMetadata.Caption);
    END;

    LOCAL PROCEDURE GetTableName@8(TableID@1000 : Integer) : Text;
    VAR
      TableMetadata@1001 : Record 2000000136;
    BEGIN
      TableMetadata.GET(TableID);
      EXIT(TableMetadata.Name);
    END;

    PROCEDURE BuildDynamicRequestPage@6(VAR FilterPageBuilder@1000 : FilterPageBuilder;EntityName@1005 : Code[20];TableID@1001 : Integer) : Boolean;
    VAR
      TableList@1002 : DotNet "'mscorlib'.System.Collections.ArrayList";
      Name@1004 : Text;
      Table@1003 : Integer;
    BEGIN
      IF NOT GetDataItems(TableList,EntityName,TableID) THEN
        EXIT(FALSE);

      FOREACH Table IN TableList DO BEGIN
        Name := FilterPageBuilder.ADDTABLE(GetTableCaption(Table),Table);
        AddFields(FilterPageBuilder,Name,Table);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetDataItems@4(VAR TableList@1001 : DotNet "'mscorlib'.System.Collections.ArrayList";EntityName@1004 : Code[20];TableID@1000 : Integer) : Boolean;
    VAR
      TableMetadata@1003 : Record 2000000136;
      DynamicRequestPageEntity@1002 : Record 1515;
    BEGIN
      IF NOT TableMetadata.GET(TableID) THEN
        EXIT(FALSE);

      TableList := TableList.ArrayList;
      TableList.Add(TableID);

      DynamicRequestPageEntity.SETRANGE(Name,EntityName);
      DynamicRequestPageEntity.SETRANGE("Table ID",TableID);
      IF DynamicRequestPageEntity.FINDSET THEN
        REPEAT
          IF NOT TableList.Contains(DynamicRequestPageEntity."Related Table ID") THEN
            TableList.Add(DynamicRequestPageEntity."Related Table ID");
        UNTIL DynamicRequestPageEntity.NEXT = 0;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddFields@9(VAR FilterPageBuilder@1000 : FilterPageBuilder;Name@1003 : Text;TableID@1002 : Integer);
    VAR
      DynamicRequestPageField@1001 : Record 1516;
    BEGIN
      DynamicRequestPageField.SETRANGE("Table ID",TableID);
      IF DynamicRequestPageField.FINDSET THEN
        REPEAT
          FilterPageBuilder.ADDFIELDNO(Name,DynamicRequestPageField."Field ID");
        UNTIL DynamicRequestPageField.NEXT = 0;
    END;

    PROCEDURE SetViewOnDynamicRequestPage@5(VAR FilterPageBuilder@1000 : FilterPageBuilder;Filters@1001 : Text;EntityName@1007 : Code[20];TableID@1003 : Integer) : Boolean;
    VAR
      RecRef@1006 : RecordRef;
      FoundXmlNodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      TableList@1004 : DotNet "'mscorlib'.System.Collections.ArrayList";
      Table@1005 : Integer;
    BEGIN
      IF NOT FindNodes(FoundXmlNodeList,Filters,DataItemPathTxt) THEN
        EXIT(FALSE);

      IF NOT GetDataItems(TableList,EntityName,TableID) THEN
        EXIT(FALSE);

      FOREACH Table IN TableList DO BEGIN
        RecRef.OPEN(Table);
        GetFiltersForTable(RecRef,FoundXmlNodeList);
        FilterPageBuilder.SETVIEW(GetTableCaption(Table),RecRef.GETVIEW(FALSE));
        RecRef.CLOSE;
        CLEAR(RecRef);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetViewFromDynamicRequestPage@7(VAR FilterPageBuilder@1000 : FilterPageBuilder;EntityName@1005 : Code[20];TableID@1001 : Integer) : Text;
    VAR
      TableList@1002 : DotNet "'mscorlib'.System.Collections.ArrayList";
      TableFilterDictionary@1003 : DotNet "'mscorlib'.System.Collections.Generic.Dictionary`2";
      Table@1004 : Integer;
    BEGIN
      IF NOT GetDataItems(TableList,EntityName,TableID) THEN
        EXIT('');

      TableFilterDictionary := TableFilterDictionary.Dictionary(TableList.Count);

      FOREACH Table IN TableList DO BEGIN
        IF NOT TableFilterDictionary.ContainsKey(Table) THEN
          TableFilterDictionary.Add(Table,FilterPageBuilder.GETVIEW(GetTableCaption(Table),FALSE));
      END;

      EXIT(ConvertFiltersToParameters(TableFilterDictionary));
    END;

    LOCAL PROCEDURE ConvertFiltersToParameters@19(TableFilterDictionary@1000 : DotNet "'mscorlib'.System.Collections.Generic.Dictionary`2") : Text;
    VAR
      XMLDOMMgt@1001 : Codeunit 6224;
      DataItemXmlNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DataItemsXmlNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlDoc@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReportParametersXmlNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableFilter@1006 : DotNet "'mscorlib'.System.Collections.Generic.KeyValuePair`2";
    BEGIN
      XmlDoc := XmlDoc.XmlDocument;

      XMLDOMMgt.AddRootElement(XmlDoc,'ReportParameters',ReportParametersXmlNode);
      XMLDOMMgt.AddDeclaration(XmlDoc,'1.0','utf-8','yes');

      XMLDOMMgt.AddElement(ReportParametersXmlNode,'DataItems','','',DataItemsXmlNode);
      FOREACH TableFilter IN TableFilterDictionary DO BEGIN
        XMLDOMMgt.AddElement(DataItemsXmlNode,'DataItem',TableFilter.Value,'',DataItemXmlNode);
        XMLDOMMgt.AddAttribute(DataItemXmlNode,'name',GetTableCaption(TableFilter.Key));
      END;

      EXIT(XmlDoc.InnerXml);
    END;

    PROCEDURE GetRequestPageOptionValue@13(OptionName@1004 : Text;Parameters@1002 : Text) : Text;
    VAR
      FoundXmlNodeList@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      FoundXmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TempValue@1005 : Text;
    BEGIN
      IF NOT FindNodes(FoundXmlNodeList,Parameters,OptionPathTxt) THEN
        EXIT('');

      FOREACH FoundXmlNode IN FoundXmlNodeList DO BEGIN
        TempValue := FoundXmlNode.Attributes.ItemOf('name').Value;
        IF FORMAT(TempValue) = FORMAT(OptionName) THEN
          EXIT(FoundXmlNode.InnerText);
      END;
    END;

    PROCEDURE GetReportID@12(RequestPageParameters@1004 : Text) : Text;
    VAR
      FoundXmlNodeList@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      IF NOT FindNodes(FoundXmlNodeList,RequestPageParameters,'/ReportParameters') THEN
        ERROR(RepParamsWrongNumberFoundErr);

      IF FoundXmlNodeList.Count <> 1 THEN
        ERROR(RepParamsWrongNumberFoundErr);

      EXIT(FoundXmlNodeList.Item(0).Attributes.ItemOf('id').Value)
    END;

    BEGIN
    END.
  }
}

