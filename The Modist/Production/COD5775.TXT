OBJECT Codeunit 5775 Whse. Management
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The Source Document is not defined.;ENG=The Source Document is not defined.';

    PROCEDURE GetSourceDocument@2(SourceType@1001 : Integer;SourceSubtype@1002 : '0,1,2,3,4,5,6,7,8,9,10') : Integer;
    VAR
      SourceDocument@1000 : ',S. Order,S. Invoice,S. Credit Memo,S. Return Order,P. Order,P. Invoice,P. Credit Memo,P. Return Order,Inb. Transfer,Outb. Transfer,Prod. Consumption,Item Jnl.,Phys. Invt. Jnl.,Reclass. Jnl.,Consumption Jnl.,Output Jnl.,BOM Jnl.,Serv. Order,Job Jnl.,Assembly Consumption,Assembly Order';
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Line":
          CASE SourceSubtype OF
            1:
              EXIT(SourceDocument::"S. Order");
            2:
              EXIT(SourceDocument::"S. Invoice");
            3:
              EXIT(SourceDocument::"S. Credit Memo");
            5:
              EXIT(SourceDocument::"S. Return Order");
          END;
        DATABASE::"Purchase Line":
          CASE SourceSubtype OF
            1:
              EXIT(SourceDocument::"P. Order");
            2:
              EXIT(SourceDocument::"P. Invoice");
            3:
              EXIT(SourceDocument::"P. Credit Memo");
            5:
              EXIT(SourceDocument::"P. Return Order");
          END;
        DATABASE::"Service Line":
          EXIT(SourceDocument::"Serv. Order");
        DATABASE::"Prod. Order Component":
          EXIT(SourceDocument::"Prod. Consumption");
        DATABASE::"Assembly Line":
          EXIT(SourceDocument::"Assembly Consumption");
        DATABASE::"Assembly Header":
          EXIT(SourceDocument::"Assembly Order");
        DATABASE::"Transfer Line":
          CASE SourceSubtype OF
            0:
              EXIT(SourceDocument::"Outb. Transfer");
            1:
              EXIT(SourceDocument::"Inb. Transfer");
          END;
        DATABASE::"Item Journal Line":
          CASE SourceSubtype OF
            0:
              EXIT(SourceDocument::"Item Jnl.");
            1:
              EXIT(SourceDocument::"Reclass. Jnl.");
            2:
              EXIT(SourceDocument::"Phys. Invt. Jnl.");
            4:
              EXIT(SourceDocument::"Consumption Jnl.");
            5:
              EXIT(SourceDocument::"Output Jnl.");
          END;
        DATABASE::"Job Journal Line":
          EXIT(SourceDocument::"Job Jnl.");
      END;
      ERROR(Text000);
    END;

    PROCEDURE GetSourceType@1(WhseWkshLine@1000 : Record 7326) SourceType : Integer;
    BEGIN
      WITH WhseWkshLine DO
        CASE "Whse. Document Type" OF
          "Whse. Document Type"::Receipt:
            SourceType := DATABASE::"Posted Whse. Receipt Line";
          "Whse. Document Type"::Shipment:
            SourceType := DATABASE::"Warehouse Shipment Line";
          "Whse. Document Type"::Production:
            SourceType := DATABASE::"Prod. Order Component";
          "Whse. Document Type"::Assembly:
            SourceType := DATABASE::"Assembly Line";
          "Whse. Document Type"::"Internal Put-away":
            SourceType := DATABASE::"Whse. Internal Put-away Line";
          "Whse. Document Type"::"Internal Pick":
            SourceType := DATABASE::"Whse. Internal Pick Line";
        END;
    END;

    PROCEDURE GetOutboundDocLineQtyOtsdg@3(SourceType@1006 : Integer;SourceSubType@1005 : '0,1,2,3,4,5,6,7,8,9,10';SourceNo@1004 : Code[20];SourceLineNo@1003 : Integer;SourceSubLineNo@1002 : Integer;VAR QtyOutstanding@1000 : Decimal;VAR QtyBaseOutstanding@1001 : Decimal);
    VAR
      WhseShptLine@1009 : Record 7321;
    BEGIN
      WITH WhseShptLine DO BEGIN
        SETCURRENTKEY("Source Type");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubType);
        SETRANGE("Source No.",SourceNo);
        SETRANGE("Source Line No.",SourceLineNo);
        IF FINDFIRST THEN BEGIN
          CALCSUMS("Qty. Outstanding (Base)","Qty. Outstanding");
          CALCFIELDS("Pick Qty. (Base)","Pick Qty.");
          QtyOutstanding := "Qty. Outstanding" - "Pick Qty." - "Qty. to Ship";
          QtyBaseOutstanding := "Qty. Outstanding (Base)" - "Pick Qty. (Base)" - "Qty. to Ship (Base)";
        END ELSE
          GetSrcDocLineQtyOutstanding(SourceType,SourceSubType,SourceNo,
            SourceLineNo,SourceSubLineNo,QtyOutstanding,QtyBaseOutstanding);
      END;
    END;

    LOCAL PROCEDURE GetSrcDocLineQtyOutstanding@7(SourceType@1006 : Integer;SourceSubType@1005 : '0,1,2,3,4,5,6,7,8,9,10';SourceNo@1004 : Code[20];SourceLineNo@1003 : Integer;SourceSubLineNo@1002 : Integer;VAR QtyOutstanding@1001 : Decimal;VAR QtyBaseOutstanding@1000 : Decimal);
    VAR
      SalesLine@1008 : Record 37;
      PurchaseLine@1009 : Record 39;
      TransferLine@1010 : Record 5741;
      ServiceLine@1013 : Record 5902;
      ProdOrderComp@1011 : Record 5407;
      AssemblyLine@1007 : Record 901;
      ProdOrderLine@1012 : Record 5406;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Line":
          IF SalesLine.GET(SourceSubType,SourceNo,SourceLineNo) THEN BEGIN
            QtyOutstanding := SalesLine."Outstanding Quantity";
            QtyBaseOutstanding := SalesLine."Outstanding Qty. (Base)";
          END;
        DATABASE::"Purchase Line":
          IF PurchaseLine.GET(SourceSubType,SourceNo,SourceLineNo) THEN BEGIN
            QtyOutstanding := PurchaseLine."Outstanding Quantity";
            QtyBaseOutstanding := PurchaseLine."Outstanding Qty. (Base)";
          END;
        DATABASE::"Transfer Line":
          IF TransferLine.GET(SourceNo,SourceLineNo) THEN
            CASE SourceSubType OF
              0: // Direction = Outbound
                BEGIN
                  QtyOutstanding :=
                    ROUND(TransferLine."Whse Outbnd. Otsdg. Qty (Base)" / (QtyOutstanding / QtyBaseOutstanding),0.00001);
                  QtyBaseOutstanding := TransferLine."Whse Outbnd. Otsdg. Qty (Base)";
                END;
              1: // Direction = Inbound
                BEGIN
                  QtyOutstanding :=
                    ROUND(TransferLine."Whse. Inbnd. Otsdg. Qty (Base)" / (QtyOutstanding / QtyBaseOutstanding),0.00001);
                  QtyBaseOutstanding := TransferLine."Whse. Inbnd. Otsdg. Qty (Base)";
                END;
            END;
        DATABASE::"Service Line":
          IF ServiceLine.GET(SourceSubType,SourceNo,SourceLineNo) THEN BEGIN
            QtyOutstanding := ServiceLine."Outstanding Quantity";
            QtyBaseOutstanding := ServiceLine."Outstanding Qty. (Base)";
          END;
        DATABASE::"Prod. Order Component":
          IF ProdOrderComp.GET(SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo) THEN BEGIN
            QtyOutstanding := ProdOrderComp."Remaining Quantity";
            QtyBaseOutstanding := ProdOrderComp."Remaining Qty. (Base)";
          END;
        DATABASE::"Assembly Line":
          IF AssemblyLine.GET(SourceSubType,SourceNo,SourceLineNo) THEN BEGIN
            QtyOutstanding := AssemblyLine."Remaining Quantity";
            QtyBaseOutstanding := AssemblyLine."Remaining Quantity (Base)";
          END;
        DATABASE::"Prod. Order Line":
          IF ProdOrderLine.GET(SourceSubType,SourceNo,SourceLineNo) THEN BEGIN
            QtyOutstanding := ProdOrderLine."Remaining Quantity";
            QtyBaseOutstanding := ProdOrderLine."Remaining Qty. (Base)";
          END;
        ELSE BEGIN
          QtyOutstanding := 0;
          QtyBaseOutstanding := 0;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

