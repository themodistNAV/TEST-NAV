OBJECT Codeunit 5331 CRM Coupling Management
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      RemoveCoupledContactsUnderCustomerQst@1000 : TextConst '@@@=%1 is a number;ENU=The Customer and Microsoft Dynamics CRM Account have %1 child Contact records coupled to one another. Do you want to delete their couplings as well?;ENG=The Customer and Microsoft Dynamics CRM Account have %1 child Contact records coupled to one another. Do you want to delete their couplings as well?';

    PROCEDURE IsRecordCoupledToCRM@10(RecordID@1000 : RecordID) : Boolean;
    VAR
      CRMIntegrationRecord@1001 : Record 5331;
    BEGIN
      EXIT(CRMIntegrationRecord.IsRecordCoupled(RecordID));
    END;

    PROCEDURE IsRecordCoupledToNAV@2(CRMID@1000 : GUID;NAVTableID@1001 : Integer) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      NAVRecordID@1003 : RecordID;
    BEGIN
      EXIT(CRMIntegrationRecord.FindRecordIDFromID(CRMID,NAVTableID,NAVRecordID));
    END;

    PROCEDURE CreateOrUpdateCoupling@101(RecordID@1000 : RecordID;VAR CRMID@1004 : GUID;VAR CreateNew@1001 : Boolean;VAR Synchronize@1002 : Boolean;VAR Direction@1003 : Option) : Boolean;
    BEGIN
      CASE RecordID.TABLENO OF
        DATABASE::Currency:
          EXIT(CreateOrUpdateCouplingCurrency(RecordID,CRMID,CreateNew,Synchronize,Direction));
        DATABASE::"Salesperson/Purchaser":
          EXIT(CreateOrUpdateCouplingSalesperson(RecordID,CRMID,Synchronize,Direction));
        DATABASE::Customer:
          EXIT(CreateOrUpdateCouplingCustomer(RecordID,CRMID,CreateNew,Synchronize,Direction));
        DATABASE::Contact:
          EXIT(CreateOrUpdateCouplingContact(RecordID,CRMID,CreateNew,Synchronize,Direction));
        DATABASE::Item:
          EXIT(CreateOrUpdateCouplingItem(RecordID,CRMID,CreateNew,Synchronize,Direction));
        DATABASE::Resource:
          EXIT(CreateOrUpdateCouplingResource(RecordID,CRMID,CreateNew,Synchronize,Direction));
        DATABASE::"Unit of Measure":
          EXIT(CreateOrUpdateCouplingUnitOfMeasure(RecordID,CRMID,CreateNew,Synchronize,Direction));
        ELSE
          EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE CreateOrUpdateCouplingCurrency@22(RecordID@1001 : RecordID;VAR CRMID@1006 : GUID;VAR CreateNew@1005 : Boolean;VAR Synchronize@1004 : Boolean;VAR Direction@1003 : Option) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      Currency@1007 : Record 4;
      CRMCouplingCurrency@1000 : Page 5245;
    BEGIN
      Currency.GET(RecordID);
      CRMCouplingCurrency.SETRECORD(Currency);
      IF CRMCouplingCurrency.RUNMODAL = ACTION::OK THEN BEGIN
        IF CRMCouplingCurrency.GetCreateNewInCRM THEN
          CreateNew := TRUE
        ELSE
          IF NOT ISNULLGUID(CRMCouplingCurrency.GetCRMID) THEN BEGIN
            CRMID := CRMCouplingCurrency.GetCRMID;
            CRMIntegrationRecord.CoupleRecordIdToCRMID(RecordID,CRMID);
            IF CRMCouplingCurrency.GetPerformInitialSynchronization THEN BEGIN
              Synchronize := TRUE;
              Direction := CRMCouplingCurrency.GetInitialSynchronizationDirection;
            END;
          END ELSE
            EXIT(FALSE);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateOrUpdateCouplingSalesperson@33(RecordID@1001 : RecordID;VAR CRMID@1005 : GUID;VAR Synchronize@1004 : Boolean;VAR Direction@1003 : Option) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      SalespersonPurchaser@1006 : Record 13;
      CRMCouplingSalesperson@1000 : Page 5240;
    BEGIN
      SalespersonPurchaser.GET(RecordID);
      CRMCouplingSalesperson.SETRECORD(SalespersonPurchaser);
      IF CRMCouplingSalesperson.RUNMODAL = ACTION::OK THEN BEGIN
        IF NOT ISNULLGUID(CRMCouplingSalesperson.GetCRMID) THEN BEGIN
          CRMID := CRMCouplingSalesperson.GetCRMID;
          CRMIntegrationRecord.CoupleRecordIdToCRMID(RecordID,CRMID);
          IF CRMCouplingSalesperson.GetPerformInitialSynchronization THEN BEGIN
            Synchronize := TRUE;
            Direction := CRMCouplingSalesperson.GetInitialSynchronizationDirection;
          END;
        END ELSE
          EXIT(FALSE);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateOrUpdateCouplingCustomer@36(RecordID@1001 : RecordID;VAR CRMID@1007 : GUID;VAR CreateNew@1006 : Boolean;VAR Synchronize@1005 : Boolean;VAR Direction@1004 : Option) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      Customer@1003 : Record 18;
      CRMCouplingCustomer@1000 : Page 5241;
    BEGIN
      Customer.GET(RecordID);
      CRMCouplingCustomer.SETRECORD(Customer);
      IF CRMCouplingCustomer.RUNMODAL = ACTION::OK THEN BEGIN
        IF CRMCouplingCustomer.GetCreateNewInCRM THEN
          CreateNew := TRUE
        ELSE
          IF NOT ISNULLGUID(CRMCouplingCustomer.GetCRMID) THEN BEGIN
            CRMID := CRMCouplingCustomer.GetCRMID;
            CRMIntegrationRecord.CoupleRecordIdToCRMID(RecordID,CRMID);
            IF CRMCouplingCustomer.GetPerformInitialSynchronization THEN BEGIN
              Synchronize := TRUE;
              Direction := CRMCouplingCustomer.GetInitialSynchronizationDirection;
            END;
          END ELSE
            EXIT(FALSE);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateOrUpdateCouplingContact@39(RecordID@1001 : RecordID;VAR CRMID@1006 : GUID;VAR CreateNew@1005 : Boolean;VAR Synchronize@1004 : Boolean;VAR Direction@1003 : Option) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      Contact@1007 : Record 5050;
      CRMCouplingContact@1000 : Page 5242;
    BEGIN
      Contact.GET(RecordID);
      CRMCouplingContact.SETRECORD(Contact);
      IF CRMCouplingContact.RUNMODAL = ACTION::OK THEN BEGIN
        IF CRMCouplingContact.GetCreateNewInCRM THEN
          CreateNew := TRUE
        ELSE
          IF NOT ISNULLGUID(CRMCouplingContact.GetCRMID) THEN BEGIN
            CRMID := CRMCouplingContact.GetCRMID;
            CRMIntegrationRecord.CoupleRecordIdToCRMID(RecordID,CRMID);
            IF CRMCouplingContact.GetPerformInitialSynchronization THEN BEGIN
              Synchronize := TRUE;
              Direction := CRMCouplingContact.GetInitialSynchronizationDirection;
            END;
          END ELSE
            EXIT(FALSE);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateOrUpdateCouplingItem@21(RecordID@1001 : RecordID;VAR CRMID@1006 : GUID;VAR CreateNew@1005 : Boolean;VAR Synchronize@1004 : Boolean;VAR Direction@1003 : Option) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      Item@1007 : Record 27;
      CRMCouplingItem@1000 : Page 5248;
    BEGIN
      Item.GET(RecordID);
      CRMCouplingItem.SETRECORD(Item);
      IF CRMCouplingItem.RUNMODAL = ACTION::OK THEN BEGIN
        IF CRMCouplingItem.GetCreateNewInCRM THEN
          CreateNew := TRUE
        ELSE
          IF NOT ISNULLGUID(CRMCouplingItem.GetCRMID) THEN BEGIN
            CRMID := CRMCouplingItem.GetCRMID;
            CRMIntegrationRecord.CoupleRecordIdToCRMID(RecordID,CRMID);
            IF CRMCouplingItem.GetPerformInitialSynchronization THEN BEGIN
              Synchronize := TRUE;
              Direction := CRMCouplingItem.GetInitialSynchronizationDirection;
            END;
          END ELSE
            EXIT(FALSE);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateOrUpdateCouplingResource@90(RecordID@1001 : RecordID;VAR CRMID@1006 : GUID;VAR CreateNew@1005 : Boolean;VAR Synchronize@1004 : Boolean;VAR Direction@1003 : Option) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      Resource@1007 : Record 156;
      CRMCouplingResource@1000 : Page 5270;
    BEGIN
      Resource.GET(RecordID);
      CRMCouplingResource.SETRECORD(Resource);
      IF CRMCouplingResource.RUNMODAL = ACTION::OK THEN BEGIN
        IF CRMCouplingResource.GetCreateNewInCRM THEN
          CreateNew := TRUE
        ELSE
          IF NOT ISNULLGUID(CRMCouplingResource.GetCRMID) THEN BEGIN
            CRMID := CRMCouplingResource.GetCRMID;
            CRMIntegrationRecord.CoupleRecordIdToCRMID(RecordID,CRMID);
            IF CRMCouplingResource.GetPerformInitialSynchronization THEN BEGIN
              Synchronize := TRUE;
              Direction := CRMCouplingResource.GetInitialSynchronizationDirection;
            END;
          END ELSE
            EXIT(FALSE);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateOrUpdateCouplingUnitOfMeasure@15(RecordID@1001 : RecordID;VAR CRMID@1006 : GUID;VAR CreateNew@1005 : Boolean;VAR Synchronize@1004 : Boolean;VAR Direction@1003 : Option) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      UnitOfMeasure@1007 : Record 204;
      CRMCouplingUnitOfMeasure@1000 : Page 5262;
    BEGIN
      UnitOfMeasure.GET(RecordID);
      CRMCouplingUnitOfMeasure.SETRECORD(UnitOfMeasure);
      IF CRMCouplingUnitOfMeasure.RUNMODAL = ACTION::OK THEN BEGIN
        IF CRMCouplingUnitOfMeasure.GetCreateNewInCRM THEN
          CreateNew := TRUE
        ELSE
          IF NOT ISNULLGUID(CRMCouplingUnitOfMeasure.GetCRMID) THEN BEGIN
            CRMID := CRMCouplingUnitOfMeasure.GetCRMID;
            CRMIntegrationRecord.CoupleRecordIdToCRMID(RecordID,CRMID);
            IF CRMCouplingUnitOfMeasure.GetPerformInitialSynchronization THEN BEGIN
              Synchronize := TRUE;
              Direction := CRMCouplingUnitOfMeasure.GetInitialSynchronizationDirection;
            END;
          END ELSE
            EXIT(FALSE);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE RemoveCoupling@1(RecordID@1000 : RecordID);
    BEGIN
      CASE RecordID.TABLENO OF
        DATABASE::Customer:
          RemoveCouplingCustomer(RecordID);
        ELSE
          RemoveSingleCoupling(RecordID);
      END;
    END;

    LOCAL PROCEDURE RemoveSingleCoupling@6(RecordID@1000 : RecordID);
    VAR
      CRMIntegrationRecord@1001 : Record 5331;
    BEGIN
      CRMIntegrationRecord.RemoveCouplingToRecord(RecordID);
    END;

    LOCAL PROCEDURE RemoveCouplingCustomer@3(RecordID@1000 : RecordID);
    VAR
      Contact@1001 : Record 5050;
      ContBusRel@1002 : Record 5054;
      Customer@1003 : Record 18;
      CRMAccount@1005 : Record 5341;
      CRMContact@1006 : Record 5342;
      CRMIntegrationRecord@1007 : Record 5331;
      TempContact@1009 : TEMPORARY Record 5050;
      CRMID@1008 : GUID;
    BEGIN
      // Convert the RecordID into a Customer
      Customer.GET(RecordID);

      // Get the Company Contact for this Customer
      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("No.",Customer."No.");
      IF ContBusRel.FINDFIRST THEN BEGIN
        // Get all Person Contacts under it
        Contact.SETCURRENTKEY("Company Name","Company No.",Type,Name);
        Contact.SETRANGE("Company No.",ContBusRel."Contact No.");
        Contact.SETRANGE(Type,Contact.Type::Person);
        IF Contact.FINDSET THEN BEGIN
          // Count the number of Contacts coupled to CRM Contacts under the CRM Account the Customer is coupled to
          CRMIntegrationRecord.FindIDFromRecordID(RecordID,CRMID);
          IF CRMAccount.GET(CRMID) THEN BEGIN
            REPEAT
              IF CRMIntegrationRecord.FindIDFromRecordID(Contact.RECORDID,CRMID) THEN BEGIN
                CRMContact.GET(CRMID);
                IF CRMContact.ParentCustomerId = CRMAccount.AccountId THEN BEGIN
                  TempContact.COPY(Contact);
                  TempContact.INSERT;
                END;
              END;
            UNTIL Contact.NEXT = 0;

            // If any, query for breaking their couplings
            IF TempContact.COUNT > 0 THEN
              IF CONFIRM(STRSUBSTNO(RemoveCoupledContactsUnderCustomerQst,TempContact.COUNT)) THEN BEGIN
                TempContact.FINDSET;
                REPEAT
                  RemoveSingleCoupling(TempContact.RECORDID);
                UNTIL TempContact.NEXT = 0;
              END;
          END;
        END;
      END;

      // Delete the coupling between the Customer and the CRM Account
      RemoveSingleCoupling(RecordID);
    END;

    BEGIN
    END.
  }
}

