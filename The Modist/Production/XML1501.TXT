OBJECT XMLport 1501 Import / Export Workflow
{
  OBJECT-PROPERTIES
  {
    Date=23/10/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43402;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Import / Export Workflow;
               ENG=Import / Export Workflow];
  }
  ELEMENTS
  {
    { [{D78F0F95-40A6-4A88-8DC5-48E949EDD8FF}];  ;Root                ;Element ;Text     }

    { [{BB7CD3F4-E488-472B-A356-0BC0B5B27EDB}];1 ;Workflow            ;Element ;Table   ;
                                                  SourceTable=Table1501;
                                                  MaxOccurs=Unbounded;
                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 IF ToWorkflowCode <> '' THEN
                                                                                   Workflow.Code := ToWorkflowCode;
                                                                               END;
                                                                                }

    { [{B62182AA-EA62-43E6-A9E1-F6B5274C7177}];2 ;Code                ;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=Workflow::Code }

    { [{8FAC2CEF-11C4-45B9-8436-D28802B93646}];2 ;Description         ;Attribute;Field  ;
                                                  DataType=Text;
                                                  SourceField=Workflow::Description;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              IF Workflow.Description = '' THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{F6D871CC-61E0-4A6E-A0D9-07D534B19C39}];2 ;Template            ;Attribute;Field  ;
                                                  DataType=Boolean;
                                                  SourceField=Workflow::Template;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              IF NOT Workflow.Template THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{64EFBF0A-055F-49E2-BDA8-9B36E2D155D5}];2 ;Category            ;Attribute;Field  ;
                                                  DataType=Code;
                                                  FieldValidate=No;
                                                  SourceField=Workflow::Category }

    { [{AE3DEA6A-9758-4111-8F36-F8AEEB904853}];2 ;WorkflowStep        ;Element ;Table   ;
                                                  SourceTable=Table1502;
                                                  LinkFields=Field2=FIELD(Field1);
                                                  LinkTable=Workflow;
                                                  MinOccurs=Zero }

    { [{760A8E16-1523-4E47-AD86-CE74F35C96A1}];3 ;StepID              ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Step::ID }

    { [{CDFA1C93-6703-462A-B396-80D776BAF5DB}];3 ;StepDescription     ;Attribute;Field  ;
                                                  DataType=Text;
                                                  SourceField=Workflow Step::Description;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              IF "Workflow Step".Description = '' THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{C69238DE-E7A5-408C-A2E4-C471025DE9EA}];3 ;EntryPoint          ;Attribute;Text   ;
                                                  DataType=Boolean;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  EVALUATE("Workflow Step"."Entry Point",EntryPoint);
                                                                                END;

                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 IF "Workflow Step"."Entry Point" = FALSE THEN
                                                                                   currXMLport.SKIP;

                                                                                 EntryPoint := FORMAT("Workflow Step"."Entry Point",0,2);
                                                                               END;
                                                                                }

    { [{5F16616D-A0C5-440F-835C-63DB85455DA6}];3 ;PreviousStepID      ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  FieldValidate=No;
                                                  SourceField=Workflow Step::Previous Workflow Step ID }

    { [{09FF3671-D199-4AB9-9A01-38695316CF23}];3 ;NextStepID          ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  FieldValidate=No;
                                                  SourceField=Workflow Step::Next Workflow Step ID;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              IF "Workflow Step"."Next Workflow Step ID" = 0 THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{8BAEB72F-AED2-45F0-B6CF-907738EFF2E4}];3 ;Type                ;Attribute;Text   ;
                                                  DataType=Option;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  EVALUATE("Workflow Step".Type,Type);
                                                                                END;

                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 Type := FORMAT("Workflow Step".Type,0,2);
                                                                               END;
                                                                                }

    { [{62AF7DF4-3FD0-4027-9C3C-44A7A50E2185}];3 ;FunctionName        ;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=Workflow Step::Function Name }

    { [{9DBDEAEE-9AD9-4170-8A84-470E1778F0D0}];3 ;SequenceNo          ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Step::Sequence No.;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              IF "Workflow Step"."Sequence No." = 0 THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{3F7BD4EE-62A9-4B02-B358-C80BED2DA192}];3 ;WorkflowStepArgument;Element ;Table   ;
                                                  SourceTable=Table1523;
                                                  LinkFields=Field1=FIELD(Field15),
                                                             Field2=FIELD(Field13);
                                                  LinkTable=Workflow Step;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once;
                                                  Import::OnAfterInsertRecord=BEGIN
                                                                                "Workflow Step".Argument := "Workflow Step Argument".ID;
                                                                              END;
                                                                               }

    { [{D761534C-A116-4777-8D83-0F1AEB6BE0B5}];4 ;GeneralJournalTemplateName;Attribute;Field;
                                                  DataType=Code;
                                                  SourceField=Workflow Step Argument::General Journal Template Name;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignField=VAR
                                                                               GenJournalTemplate@1000 : Record 80;
                                                                             BEGIN
                                                                               IF NOT GenJournalTemplate.GET("Workflow Step Argument"."General Journal Batch Name") THEN
                                                                                 "Workflow Step Argument"."General Journal Batch Name" := '';
                                                                             END;

                                                  Export::OnBeforePassField=BEGIN
                                                                              IF "Workflow Step Argument"."General Journal Template Name" = '' THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{BAD54047-201D-425E-AD9C-D808BCE39A46}];4 ;GeneralJournalBatchName;Attribute;Field;
                                                  DataType=Code;
                                                  SourceField=Workflow Step Argument::General Journal Batch Name;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignField=VAR
                                                                               GenJournalBatch@1000 : Record 232;
                                                                             BEGIN
                                                                               IF NOT GenJournalBatch.GET("Workflow Step Argument"."General Journal Template Name",
                                                                                    "Workflow Step Argument"."General Journal Batch Name")
                                                                               THEN
                                                                                 "Workflow Step Argument"."General Journal Batch Name" := '';
                                                                             END;

                                                  Export::OnBeforePassField=BEGIN
                                                                              IF "Workflow Step Argument"."General Journal Batch Name" = '' THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{4DE84001-F7FB-4696-A9CC-D365E39A5A70}];4 ;ResponseFunctionName;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=Workflow Step Argument::Response Function Name;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              IF "Workflow Step Argument"."Response Function Name" = '' THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{DAB90975-7B3E-4C09-9099-4356771E582A}];4 ;LinkTargetPage      ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Step Argument::Link Target Page;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignField=VAR
                                                                               AllObjWithCaption@1000 : Record 2000000058;
                                                                             BEGIN
                                                                               IF NOT AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Page,"Workflow Step Argument"."Link Target Page") THEN
                                                                                 "Workflow Step Argument"."Link Target Page" := 0;
                                                                             END;

                                                  Export::OnBeforePassField=BEGIN
                                                                              IF "Workflow Step Argument"."Link Target Page" = 0 THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{8ED013D2-D611-47B9-999D-6851F1EADBAB}];4 ;CustomLink          ;Attribute;Field  ;
                                                  DataType=Text;
                                                  SourceField=Workflow Step Argument::Custom Link;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              IF "Workflow Step Argument"."Custom Link" = '' THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{2D31B849-094E-49CE-990C-33425F777DB8}];4 ;EventConditions     ;Attribute;Text   ;
                                                  DataType=BLOB;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignVariable=VAR
                                                                                  OutStream@1002 : OutStream;
                                                                                  Convert@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
                                                                                  Encoding@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
                                                                                BEGIN
                                                                                  IF EventConditions = '' THEN
                                                                                    currXMLport.SKIP;

                                                                                  "Workflow Step Argument"."Event Conditions".CREATEOUTSTREAM(OutStream);
                                                                                  OutStream.WRITETEXT(Encoding.Unicode.GetString(Convert.FromBase64String(EventConditions)));
                                                                                END;

                                                  Export::OnBeforePassVariable=VAR
                                                                                 InStream@1000 : InStream;
                                                                                 Convert@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
                                                                                 Encoding@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
                                                                                 Conditions@1003 : Text;
                                                                               BEGIN
                                                                                 IF NOT "Workflow Step Argument"."Event Conditions".HASVALUE THEN
                                                                                   currXMLport.SKIP;

                                                                                 "Workflow Step Argument".CALCFIELDS("Event Conditions");
                                                                                 "Workflow Step Argument"."Event Conditions".CREATEINSTREAM(InStream);
                                                                                 InStream.READTEXT(Conditions);
                                                                                 EventConditions := Convert.ToBase64String(Encoding.Unicode.GetBytes(Conditions));
                                                                               END;
                                                                                }

    { [{A543563F-9339-4755-B527-FCEEB13C1B7E}];4 ;ApproverType        ;Attribute;Text   ;
                                                  DataType=Option;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  EVALUATE("Workflow Step Argument"."Approver Type",ApproverType);
                                                                                END;

                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 IF "Workflow Step Argument"."Approver Type" = 0 THEN
                                                                                   currXMLport.SKIP;

                                                                                 ApproverType := FORMAT("Workflow Step Argument"."Approver Type",0,2);
                                                                               END;
                                                                                }

    { [{7540163B-E79E-410D-8069-83937D529F91}];4 ;ApproverLimitType   ;Attribute;Text   ;
                                                  DataType=Option;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  EVALUATE("Workflow Step Argument"."Approver Limit Type",ApproverLimitType);
                                                                                END;

                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 IF "Workflow Step Argument"."Approver Limit Type" = 0 THEN
                                                                                   currXMLport.SKIP;

                                                                                 ApproverLimitType := FORMAT("Workflow Step Argument"."Approver Limit Type",0,2);
                                                                               END;
                                                                                }

    { [{0A4EE309-EF87-4EFE-B574-7C66F2ED2216}];4 ;WorkflowUserGroupCode;Attribute;Field ;
                                                  DataType=Code;
                                                  SourceField=Workflow Step Argument::Workflow User Group Code;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignField=VAR
                                                                               WorkflowUserGroup@1000 : Record 1540;
                                                                             BEGIN
                                                                               IF NOT WorkflowUserGroup.GET("Workflow Step Argument"."Workflow User Group Code") THEN
                                                                                 "Workflow Step Argument"."Workflow User Group Code" := '';
                                                                             END;

                                                  Export::OnBeforePassField=BEGIN
                                                                              IF "Workflow Step Argument"."Workflow User Group Code" = '' THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{F43EF3AA-A6C7-49F9-B86E-3152B049C939}];4 ;DueDateFormula      ;Attribute;Text   ;
                                                  DataType=DateFormula;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  IF NOT EVALUATE("Workflow Step Argument"."Due Date Formula",DueDateFormula) THEN
                                                                                    currXMLport.SKIP;
                                                                                END;

                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 IF FORMAT("Workflow Step Argument"."Due Date Formula") = '' THEN
                                                                                   currXMLport.SKIP;

                                                                                 DueDateFormula := FORMAT("Workflow Step Argument"."Due Date Formula");
                                                                               END;
                                                                                }

    { [{AC66FDF1-35D9-4737-AEF2-E32557E15CB1}];4 ;Message             ;Attribute;Field  ;
                                                  DataType=Text;
                                                  SourceField=Workflow Step Argument::Message;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              IF "Workflow Step Argument".Message = '' THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{2AE177C0-B78D-4234-86D5-61C8D99BC5A1}];4 ;DelegateAfter       ;Attribute;Text   ;
                                                  DataType=Option;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  EVALUATE("Workflow Step Argument"."Delegate After",DelegateAfter);
                                                                                END;

                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 IF "Workflow Step Argument"."Delegate After" = 0 THEN
                                                                                   currXMLport.SKIP;

                                                                                 DelegateAfter := FORMAT("Workflow Step Argument"."Delegate After",0,2);
                                                                               END;
                                                                                }

    { [{C90D1BD9-0D9B-48D8-8461-35C60994EFEA}];4 ;ShowConfirmationMessage;Attribute;Field;
                                                  DataType=Boolean;
                                                  SourceField=Workflow Step Argument::Show Confirmation Message;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              IF NOT "Workflow Step Argument"."Show Confirmation Message" THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{0289AF15-8726-4693-8274-BCB03D19615E}];4 ;TableNumber         ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Step Argument::Table No.;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignField=VAR
                                                                               AllObjWithCaption@1000 : Record 2000000058;
                                                                             BEGIN
                                                                               IF NOT AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Table,"Workflow Step Argument"."Table No.") THEN
                                                                                 "Workflow Step Argument"."Table No." := 0;
                                                                             END;

                                                  Export::OnBeforePassField=BEGIN
                                                                              IF "Workflow Step Argument"."Table No." = 0 THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{CAD15D49-74A3-421A-AD12-2C194A62A53A}];4 ;FieldNumber         ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Step Argument::Field No.;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignField=VAR
                                                                               Field@1000 : Record 2000000041;
                                                                             BEGIN
                                                                               IF NOT Field.GET("Workflow Step Argument"."Table No.","Workflow Step Argument"."Field No.") THEN
                                                                                 "Workflow Step Argument"."Field No." := 0;
                                                                             END;

                                                  Export::OnBeforePassField=BEGIN
                                                                              IF "Workflow Step Argument"."Field No." = 0 THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{9786F409-E8E5-4168-AE31-B6127D39783B}];4 ;ResponseOptionGroup ;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=Workflow Step Argument::Response Option Group;
                                                  Occurrence=Optional;
                                                  Export::OnBeforePassField=BEGIN
                                                                              IF "Workflow Step Argument"."Response Option Group" = '' THEN
                                                                                currXMLport.SKIP;
                                                                            END;
                                                                             }

    { [{111D7E08-747D-45BF-A66B-609CAE3BF5D6}];3 ;WorkflowRule        ;Element ;Table   ;
                                                  SourceTable=Table1524;
                                                  LinkFields=Field8=FIELD(Field2),
                                                             Field9=FIELD(Field1);
                                                  LinkTable=Workflow Step;
                                                  MinOccurs=Zero }

    { [{D4B0D0EA-F0B7-4DB2-B978-ED2D9666CD58}];4 ;RuleID              ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Rule::ID }

    { [{7307F3F9-E23C-4A55-9221-5677E4D6FC00}];4 ;RuleTableNumber     ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Rule::Table ID }

    { [{26C2E1A7-8CA8-4F6A-BAB5-A8095751EC3A}];4 ;RuleFieldNumber     ;Attribute;Field  ;
                                                  DataType=Integer;
                                                  SourceField=Workflow Rule::Field No. }

    { [{4B092B35-D47C-4B7A-AEF5-95D2E325D0EF}];4 ;Operator            ;Attribute;Text   ;
                                                  DataType=Option;
                                                  Occurrence=Optional;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  EVALUATE("Workflow Rule".Operator,Operator);
                                                                                END;

                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 Operator := FORMAT("Workflow Rule".Operator,0,2);
                                                                               END;
                                                                                }

    { [{6775CDD4-8E5D-4AB3-9878-D4B9533B4C7F}];2 ;WorkflowCategory    ;Element ;Table   ;
                                                  SourceTable=Table1508;
                                                  LinkFields=Field1=FIELD(Field5);
                                                  LinkTable=Workflow;
                                                  LinkTableForceInsert=No;
                                                  AutoSave=No;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once }

    { [{A12A21D9-F712-4BA7-94F9-797AAF0C14DB}];3 ;CategoryCode        ;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=Workflow Category::Code }

    { [{77A67A7C-ACFA-4C5C-85D3-F400E5C4EA83}];3 ;CategoryDescription ;Attribute;Field  ;
                                                  DataType=Text;
                                                  SourceField=Workflow Category::Description;
                                                  Import::OnAfterAssignField=BEGIN
                                                                               IF "Workflow Category".INSERT THEN;
                                                                             END;
                                                                              }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      ToWorkflowCode@1000 : Code[20];

    PROCEDURE InitWorkflow@5(NewWorkflowCode@1000 : Code[20]);
    BEGIN
      ToWorkflowCode := NewWorkflowCode;
    END;

    BEGIN
    END.
  }
}

