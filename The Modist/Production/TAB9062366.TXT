OBJECT Table 9062366 Tile Group
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Panel Code");
               CheckModifyPermission();
               IF (Rec.ID = 0) THEN
                 Rec.ID := NewId();
               UpdateControlName();
               PanelTimestampToolkit.Add(Rec."Panel Code");
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               CheckModifyPermission();
               PanelTimestampToolkit.Add(Rec."Panel Code");
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               CheckModifyPermission();
               Tile.RESET();
               Tile.SETCURRENTKEY("Panel Code", "Tile Group ID");
               Tile.SETRANGE("Panel Code", Rec."Panel Code");
               Tile.SETRANGE("Tile Group ID", Rec.ID);
               IF (Tile.FINDSET(TRUE)) THEN
               REPEAT
                 Tile.VALIDATE("Tile Group ID", 0);
                 Tile.MODIFY(TRUE);
               UNTIL (Tile.NEXT() = 0);

               PanelTimestampToolkit.Add(Rec."Panel Code");
             END;

    OnRename=VAR
               eRenameDisabled@1000000000 : TextConst 'ENU=Rename of "%1" is disabled.;ENG=Rename of "%1" is disabled.';
             BEGIN
               CheckModifyPermission();
               ERROR(eRenameDisabled, Rec.TABLECAPTION);
             END;

    CaptionML=[ENU=Tile Group;
               ENG=Tile Group];
    LookupPageID=Page9062453;
    DrillDownPageID=Page9062453;
  }
  FIELDS
  {
    { 1   ;   ;Panel Code          ;Code20        ;TableRelation=Panel;
                                                   OnValidate=BEGIN
                                                                UpdateControlName();
                                                              END;

                                                   CaptionML=[ENU=Panel Code;
                                                              ENG=Panel Code] }
    { 3   ;   ;ID                  ;Integer       ;OnValidate=BEGIN
                                                                UpdateControlName();
                                                              END;

                                                   CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 5   ;   ;Text                ;Text250       ;CaptionML=[ENU=Text;
                                                              ENG=Text] }
    { 6   ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ENG=Blocked] }
    { 7   ;   ;Sequence            ;Integer       ;CaptionML=[ENU=Sequence;
                                                              ENG=Sequence];
                                                   MinValue=0 }
    { 8   ;   ;Control Name        ;Text100       ;CaptionML=[ENU=Control Name;
                                                              ENG=Control Name] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Panel Code,ID                           ;Clustered=Yes }
    {    ;Panel Code,Sequence,ID                   }
    {    ;Panel Code,Control Name                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Panel@1000000003 : Record 9062363;
      PanelPersonalisation@1000000001 : Record 9062372;
      Tile@1000000009 : Record 9062367;
      CopyPanel@1000000002 : Codeunit 9062352;
      EnhancedPermissionsMgt@1000000004 : Codeunit 9062277;
      PanelTimestampToolkit@1000000010 : Codeunit 9062385;
      PanelToolkit@1000000000 : Codeunit 9062320;
      TnpToolkit@1000000006 : Codeunit 9062230;
      tFromTo@1000000008 : TextConst 'ENU=From the Current %1,To the Current %1;ENG=From the Current %1,To the Current %1';

    PROCEDURE "--- Initialisation ---"@1000000008();
    BEGIN
    END;

    PROCEDURE NewId@1000000015() : Integer;
    VAR
      lTileGroup@1000000000 : Record 9062366;
    BEGIN
      //DOC NA2015.1 - Returning new ID
      //  <- The ID

      Rec.TESTFIELD("Panel Code");

      lTileGroup.RESET();
      lTileGroup.SETRANGE("Panel Code", Rec."Panel Code");
      IF (lTileGroup.FINDLAST()) THEN
        EXIT(lTileGroup.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE NewIdFor@1000000006(pPanelCode@1000000001 : Code[20]) : Integer;
    BEGIN
      //DOC NA2015.1 - Returning new ID for given panel code
      //  -> pPanelCode: Panel code
      //  <- The ID

      Rec.RESET();
      Rec.SETRANGE("Panel Code", pPanelCode);
      IF (Rec.FINDLAST()) THEN
        EXIT(Rec.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE NewSequence@1000000000() : Integer;
    VAR
      lTileGroup@1000000000 : Record 9062366;
    BEGIN
      //DOC NA2015.1 - Returning new sequence
      //  <- The sequence

      lTileGroup.RESET();
      lTileGroup.SETCURRENTKEY("Panel Code", Sequence);
      lTileGroup.SETRANGE("Panel Code", Rec."Panel Code");
      IF (lTileGroup.FINDLAST()) THEN
        EXIT(lTileGroup.Sequence + 10)
      ELSE
        EXIT(10);
    END;

    PROCEDURE "--- General ---"@1000000009();
    BEGIN
    END;

    PROCEDURE ProcessRename@1000000012(pFromPanelCode@1000000000 : Code[20];pFromId@1000000002 : Integer;pToPanelCode@1000000001 : Code[20];pToId@1000000003 : Integer);
    VAR
      lFromPanelPersonalisation@1000000004 : Record 9062372;
      lToPanelPersonalisation@1000000005 : Record 9062372;
    BEGIN
      //DOC NA2015.2 - Processing rename (tables with non-standard relations)
      //  -> pFromPanelCode: From panel code
      //  -> pFromId: From ID
      //  -> pToPanelCode: To panel code
      //  -> pToId: To ID

      IF ((pFromPanelCode = pToPanelCode) AND (pFromId = pToId)) THEN
        EXIT;

      lFromPanelPersonalisation.RESET();
      lFromPanelPersonalisation.SETRANGE("Parent Table ID", DATABASE::"Tile Group");
      lFromPanelPersonalisation.SETRANGE("Parent Code", Rec."Panel Code");
      lFromPanelPersonalisation.SETRANGE("Parent ID", Rec.ID);
      IF (lFromPanelPersonalisation.FINDSET()) THEN
      BEGIN
        REPEAT
          lToPanelPersonalisation := lFromPanelPersonalisation;
          lToPanelPersonalisation."Parent Code" := pToPanelCode;
          lToPanelPersonalisation."Parent ID" := pToId;
          lToPanelPersonalisation.INSERT(TRUE);
        UNTIL (lFromPanelPersonalisation.NEXT() = 0);
        lFromPanelPersonalisation.DELETEALL(TRUE);
      END;

      UpdateControlName();
    END;

    PROCEDURE UpdateControlName@1000000013();
    VAR
      eName@1000000000 : TextConst 'ENU=Control_%1_%2;ENG=Control_%1_%2';
    BEGIN
      //DOC NA2015.8 - Updating control name

      Rec."Control Name" := PanelToolkit.CodeIdToControlName(DATABASE::"Tile Group", Rec."Panel Code", Rec.ID);
    END;

    PROCEDURE MoveTo@1000000026(pDirection@1000000001 : Integer) : Boolean;
    VAR
      lTileGroup@1000000000 : Record 9062366;
      lFound@1000000004 : Boolean;
      lResult@1000000002 : Boolean;
      lSequence@1000000003 : Integer;
    BEGIN
      //DOC NA2015.8 - Moving tile group up / down on a list of tiles (sorted by sequence)
      //  -> pDirection: -1 = Up, 1 = Down, the rest ignored
      //  <- TRUE = Moved, FALSE = Not moved

      IF ( NOT (pDirection IN [-1, 1])) THEN
        EXIT(FALSE);

      lTileGroup.RESET();
      lTileGroup.SETCURRENTKEY("Panel Code", Sequence);
      lTileGroup.SETRANGE("Panel Code", Rec."Panel Code");
      IF (pDirection < 0) THEN
      BEGIN
        lTileGroup.SETFILTER(Sequence, '<%1', Rec.Sequence);
        lFound := lTileGroup.FINDLAST();
      END
      ELSE
      BEGIN
        lTileGroup.SETFILTER(Sequence, '>%1', Rec.Sequence);
        lFound := lTileGroup.FINDFIRST();
      END;
      IF (lFound) THEN
      BEGIN
        lSequence := lTileGroup.Sequence;
        lTileGroup.Sequence := Rec.Sequence;
        lTileGroup.MODIFY(TRUE);
        Rec.Sequence := lSequence;
        Rec.MODIFY(TRUE);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE CopyTo@1000000011();
    BEGIN
      //DOC NA2015.1 - Copying panel (or a part of it)

      CLEAR(CopyPanel);
      CopyPanel.CopySelected(DATABASE::"Tile Group", Rec."Panel Code", Rec.ID, 0);
    END;

    LOCAL PROCEDURE CheckModifyPermission@1000000023();
    BEGIN
      //DOC NA2016.15 - Checking modify permission (given to the panel)

      IF ( NOT (Panel.GET(Rec."Panel Code"))) THEN
        EXIT;
      EnhancedPermissionsMgt.CheckPanelModifyPermission(Panel, USERID());
    END;

    PROCEDURE "--- Personalisation ---"@1000000001();
    BEGIN
    END;

    PROCEDURE IsBlocked@1000000002() : Boolean;
    BEGIN
      //DOC NA2015.1 - Returning if the group is blocked (including personalisation)
      //  <- The flag

      IF (PanelPersonalisation.GET(USERID, DATABASE::"Tile Group", Rec."Panel Code", Rec.ID)) THEN
        EXIT(PanelPersonalisation.Blocked)
      ELSE
        EXIT(Rec.Blocked);
    END;

    PROCEDURE SetBlocked@1000000003(pBlocked@1000000000 : Boolean);
    BEGIN
      //DOC NA2015.1 - Setting personalised blocked flag of the group
      //  -> pBlocked: The flag

      IF (PanelPersonalisation.GET(USERID, DATABASE::"Tile Group", Rec."Panel Code", Rec.ID)) THEN
      BEGIN
        IF (PanelPersonalisation.Blocked <> pBlocked) THEN
        BEGIN
          PanelPersonalisation.VALIDATE(Blocked, pBlocked);
          PanelPersonalisation.MODIFY();
        END;
      END
      ELSE
      BEGIN
        InitialisePersonalisation(PanelPersonalisation);
        PanelPersonalisation.VALIDATE(Blocked, pBlocked);
        PanelPersonalisation.INSERT(TRUE);
      END;
    END;

    PROCEDURE FilterPersonalisation@1000000005(VAR pPanelPersonalisation@1000000000 : Record 9062372);
    BEGIN
      //DOC NA2015.1 - Filtering personalisation recordset
      //  <> pPanelPersonalisation: The record

      pPanelPersonalisation.RESET();
      pPanelPersonalisation.SETRANGE("User ID", USERID);
      pPanelPersonalisation.SETRANGE("Parent Table ID", DATABASE::"Tile Group");
      pPanelPersonalisation.SETRANGE("Parent Code", Rec."Panel Code");
      pPanelPersonalisation.SETRANGE("Parent ID", Rec.ID);
    END;

    PROCEDURE InitialisePersonalisation@1000000004(VAR pPanelPersonalisation@1000000000 : Record 9062372);
    BEGIN
      //DOC NA2015.1 - Initialising personalisation
      //  <> pPanelPersonalisation: The record

      pPanelPersonalisation.INIT();
      pPanelPersonalisation.VALIDATE("User ID", USERID);
      pPanelPersonalisation.VALIDATE("Parent Table ID", DATABASE::"Tile Group");
      pPanelPersonalisation.VALIDATE("Parent Code", Rec."Panel Code");
      pPanelPersonalisation.VALIDATE("Parent ID", Rec.ID);
    END;

    PROCEDURE RemovePersonalisation@1000000014(pTileGroup@1000000001 : Boolean;pTiles@1000000002 : Boolean);
    VAR
      lPanelPersonalisation@1000000000 : Record 9062372;
    BEGIN
      //DOC NA2015.1 - Removing personalisation
      //  -> pTileGroup: Remove tile group presonalisation
      //  -> pTiles: Remove tiles presonalisation

      IF (pTileGroup) THEN
      BEGIN
        FilterPersonalisation(lPanelPersonalisation);
        lPanelPersonalisation.DELETEALL(TRUE);
      END;

      IF (pTiles) THEN
      BEGIN
        Tile.RESET();
        Tile.SETCURRENTKEY("Panel Code", "Tile Group ID");
        Tile.SETRANGE("Panel Code", Rec."Panel Code");
        Tile.SETRANGE("Tile Group ID", Rec.ID);
        IF (Tile.FINDSET()) THEN
        REPEAT
          Tile.RemovePersonalisation();
        UNTIL (Tile.NEXT() = 0);
      END;
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 17/07/2013 - Created
      //DOC NA2015.1  JH 14/04/2014 - Panels 3
      //DOC NA2015.8  JH 30/06/2015 - Fixes
      //DOC NA2016.8  JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.15 JH 05/05/2016 - Enhanced permissions
    }
    END.
  }
}

