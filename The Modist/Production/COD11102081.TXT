OBJECT Codeunit 11102081 OM - Create Table Wizard
{
  OBJECT-PROPERTIES
  {
    Date=19/11/15;
    Time=12:00:00 PM;
    Version List=OMA10.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TmpCALHistoryLine@1000 : TEMPORARY Record 11102053;
      TranslationToolLineBuffer@1001 : TEMPORARY Record 11102068;
      ObjectBuffer@1002 : TEMPORARY Record 2000000001;
      FieldBuffer@1003 : TEMPORARY Record 2000000041;
      FieldType@1004 : ' ,Primary 1,Name 1,Search,No. Series,Primary 2,Line No.,Name 2';
      ObjectType2@1005 : ' ,Table,Sub Table,,,,Card Page,Sub Page,List Page';

    PROCEDURE GetObjects@14(VAR TmpObject@1000 : TEMPORARY Record 2000000001;VAR CreateObject@1001 : ARRAY [8] OF Boolean;VAR ObjectType2@1002 : ARRAY [8] OF ',Table,Form,,,,,,Page';VAR ObjectNo@1003 : ARRAY [8] OF Integer;VAR ObjectName@1004 : ARRAY [8] OF Text[30]);
    VAR
      i@1005 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(ObjectNo) DO
        IF CreateObject[i] AND (ObjectNo[i] <> 0) THEN BEGIN
          TmpObject.Type := ObjectType2[i];
          TmpObject.ID := ObjectNo[i];
          TmpObject.Name := ObjectName[i];
          TmpObject."DBM Table No." := i;
          TmpObject.INSERT;
        END;
    END;

    PROCEDURE GetFields@12(VAR TmpObject@1000 : TEMPORARY Record 2000000001;VAR TmpField@1001 : TEMPORARY Record 2000000041;VAR PrimaryKeyField@1002 : 'Code,No.,Primary Key,Entry No.';VAR CreateDescriptionNameField@1003 : 'None,Description,Name';VAR CreateSearchNameField@1004 : Boolean;VAR UseNoSeries@1005 : Boolean;VAR NoSeriesTableNo@1006 : Integer;VAR NoSeriesFieldNo@1007 : Integer;VAR TranslationToolLine@1008 : Record 11102068);
    VAR
      SearchFieldName@1009 : Text[1024];
      SubTableName@1010 : Text[1024];
      TableName2@1011 : Text[1024];
      SubTableNo@1012 : Integer;
      TableNo@1013 : Integer;
    BEGIN
      FillBuffer(TmpObject, TmpField, TranslationToolLine);

      TableNo := ObjectNo(ObjectType2::Table);
      TableName2 := ObjectName2(ObjectType2::Table);

      CASE PrimaryKeyField OF
        PrimaryKeyField::Code :
          AddToFieldTable(TmpField, TableNo, TableName2, 'Code', 'Code20', FieldType::"Primary 1", 0, 0);
        PrimaryKeyField::"No." :
          AddToFieldTable(TmpField, TableNo, TableName2, 'No.', 'Code20', FieldType::"Primary 1", 0, 0);
        PrimaryKeyField::"Primary Key" :
          AddToFieldTable(TmpField, TableNo, TableName2, 'Primary Key', 'Code10', FieldType::"Primary 1", 0, 0);
        PrimaryKeyField::"Entry No." :
          AddToFieldTable(TmpField, TableNo, TableName2, 'Entry No.', 'Integer', FieldType::"Primary 1", 0, 0);
      END;

      CASE CreateDescriptionNameField OF
        CreateDescriptionNameField::Description :
          BEGIN
            AddToFieldTable(TmpField, TableNo, TableName2, 'Description', 'Text50', FieldType::"Name 1", 0, 0);
            SearchFieldName := 'Search Description';
          END;
        CreateDescriptionNameField::Name :
          BEGIN
            AddToFieldTable(TmpField, TableNo, TableName2, 'Name', 'Text50', FieldType::"Name 1", 0, 0);
            SearchFieldName := 'Search Name';
          END;
      END;

      IF CreateSearchNameField AND (CreateDescriptionNameField <> CreateDescriptionNameField::None) THEN
        AddToFieldTable(TmpField, TableNo, TableName2, SearchFieldName, 'Code50', FieldType::Search, 0, 0);

      IF UseNoSeries THEN
        AddToFieldTable(TmpField, TableNo, TableName2, 'No. Series', 'Code10', FieldType::"No. Series",
        NoSeriesTableNo, NoSeriesFieldNo);

      SubTableNo := ObjectNo(ObjectType2::"Sub Table");
      SubTableName := ObjectName2(ObjectType2::"Sub Table");
      IF SubTableNo <> 0 THEN BEGIN
        AddToFieldTable(TmpField, SubTableNo, SubTableName, 'Code', 'Code20', FieldType::"Primary 2", 0, 0);
        AddToFieldTable(TmpField, SubTableNo, SubTableName, 'Line No.', 'Integer', FieldType::"Line No.", 0, 0);
        AddToFieldTable(TmpField, SubTableNo, SubTableName, 'Description', 'Text50', FieldType::"Name 2", 0, 0);
      END;

      IF TranslationToolLine.FINDSET THEN
        REPEAT
          IF (TranslationToolLine."Entry No." > 100) AND TranslationToolLine."Name Changed" THEN
            IF TmpField.FINDSET THEN
              REPEAT
                IF TmpField.Type + 100 = TranslationToolLine."Caption Entry No." THEN BEGIN
                  TmpField.FieldName := COPYSTR(TranslationToolLine.Name, 1, MAXSTRLEN(TmpField.FieldName));
                  TmpField.MODIFY;
                END;
              UNTIL TmpField.NEXT = 0;
        UNTIL TranslationToolLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AddToFieldTable@15(VAR TmpField@1000 : TEMPORARY Record 2000000041;VAR TableNo@1001 : Integer;VAR TableName2@1002 : Text[1024];FieldName2@1003 : Text[1024];TypeName@1004 : Text[1024];Type@1005 : Integer;RelationTableNo@1006 : Integer;RelationFieldNo@1007 : Integer);
    BEGIN
      IF TableNo = TmpField.TableNo THEN
        TmpField."No." += 1
      ELSE
        TmpField."No." := 1;

      TmpField.TableNo := TableNo;
      TmpField.TableName := TableName2;
      TmpField.FieldName := FieldName2;
      TmpField.Type := Type;
      TmpField."Type Name" := TypeName;
      TmpField.RelationTableNo := RelationTableNo;
      TmpField.RelationFieldNo := RelationFieldNo;
      TmpField.INSERT;
    END;

    PROCEDURE CreateObjects@13(VAR TmpObject@1000 : TEMPORARY Record 2000000001;VAR TmpField@1001 : TEMPORARY Record 2000000041;VAR TranslationToolLine@1002 : Record 11102068;VAR TableType@1003 : 'Master Data,Document,Setup,Ledger Entry';VAR AddFieldGroup@1004 : Boolean;VAR RecordLinks@1005 : 'No,Visible,Not Visible';VAR Notes@1006 : 'No,Visible,Not Visible');
    VAR
      i@1007 : Integer;
    BEGIN
      FillBuffer(TmpObject, TmpField, TranslationToolLine);
      FOR i := 1 TO 8 DO
        IF ObjectNo(i) <> 0 THEN
          CASE i OF
            ObjectType2::Table : CreateTable(AddFieldGroup);
            ObjectType2::"Sub Table" : CreateSubTable;
            ObjectType2::"Card Page" : CreateCardPage(TableType, RecordLinks, Notes);
            ObjectType2::"Sub Page" : CreateSubPage;
            ObjectType2::"List Page" : CreateListPage(TableType, RecordLinks, Notes);
          END;
    END;

    LOCAL PROCEDURE CreateTable@1(VAR AddFieldGroup@1000 : Boolean);
    BEGIN
      OpenObject(ObjectType2::Table);

      A('  PROPERTIES');
      A('  {');

      IF FldNo(FieldType::Search) <> 0 THEN
        A('    DataCaptionFields=' + FldName(FieldType::"Primary 1") + ',' + FldName(FieldType::"Name 1") + ';');

      CreateOnInsertTrigger;
      CreateOnDeleteTrigger;

      IF ObjectNo(ObjectType2::"List Page") <> 0 THEN BEGIN
        A('    LookupPageID=Page' + FORMAT(ObjectBuffer.ID) + ';');
        A('    DrillDownPageID=Page' + FORMAT(ObjectBuffer.ID) + ';');
      END;

      A('  }');
      A('  FIELDS');
      A('  {');

      CreatePrimaryField;
      CreateNameField;
      CreateSearchField;
      CreateNosSeriesField;

      A('  }');
      A('  KEYS');
      A('  {');
      A('    {    ;' + PADSTR(FldName(FieldType::"Primary 1"), 41) + '}');
      IF FldNo(FieldType::Search) <> 0 THEN
        A('    {    ;' + PADSTR(FldName(FieldType::Search), 41) + '}');
      A('  }');
      IF AddFieldGroup AND (FldNo(FieldType::"Name 1") <> 0) THEN BEGIN
        A('  FIELDGROUPS');
        A('  {');
        A(
          '    { 1   ;DropDown            ;Field' + FORMAT(FldNo(FieldType::"Primary 1")) +
          ',Field' + FORMAT(FldNo(FieldType::"Name 1")) + ' }');
        A('  }');
      END;
      A('  CODE');
      A('  {');

      CreateOnAssistEdit;

      CloseObject(ObjectType2::Table);
    END;

    LOCAL PROCEDURE CreateSubTable@23();
    BEGIN
      OpenObject(ObjectType2::"Sub Table");

      A('  PROPERTIES');
      A('  {');
      A('  }');
      A('  FIELDS');
      A('  {');

      WriteFieldLine(FieldType::"Primary 2");
      O(51, ';TableRelation=Table' + FORMAT(ObjectNo(ObjectType2::Table)) + ' }');
      WriteFieldLine(FieldType::"Line No.");
      WriteFieldLine(FieldType::"Name 2");

      A('  }');
      A('  KEYS');
      A('  {');
      A('    {    ;Field1,Field2                             }');
      A('  }');
      A('  CODE');
      A('  {');

      CloseObject(ObjectType2::"Sub Table");
    END;

    LOCAL PROCEDURE CreateCardPage@4(VAR TableType@1000 : 'Master Data,Document,Setup,Ledger Entry';VAR RecordLinks@1001 : 'No,Visible,Not Visible';VAR Notes@1002 : 'No,Visible,Not Visible');
    BEGIN
      OpenObject(ObjectType2::"Card Page");

      A('  PROPERTIES');
      A('  {');
      A('    SourceTable=Table' + FORMAT(ObjectNo(ObjectType2::Table)) + ';');

      IF TableType = TableType::Setup THEN BEGIN
        A('    OnOpenPage=BEGIN');
        A('                 RESET;');
        A('                 IF NOT GET THEN');
        A('                   INSERT;');
        A('               END;');
        A('');
      END;

      A('  }');
      A('  CONTROLS');
      A('  {');
      A('    { 1   ;0   ;Container ;');
      A('                ContainerType=ContentArea }');
      A('');
      A('    { 2   ;1   ;Group     }');
      A('');
      IF TableType <> TableType::Setup THEN BEGIN
        IF FldNo(FieldType::"No. Series") <> 0 THEN BEGIN
          A('    { 3   ;2   ;Field     ;');
          A('                SourceExpr=Field1;');
          A('                OnAssistEdit=BEGIN');
          A('                               IF AssistEdit THEN');
          A('                                 CurrPage.UPDATE;');
          A('                             END;');
          A('                              }');
        END ELSE BEGIN
          A('    { 3   ;2   ;Field     ;');
          A('                Importance=Promoted;');
          A('                SourceExpr=Field1 }');
        END;
        A('');
      END;
      IF FldNo(FieldType::"Name 1") <> 0 THEN BEGIN
        A('    { 4   ;2   ;Field     ;');
        A('                Importance=Promoted;');
        A('                SourceExpr=Field' + FORMAT(FldNo(FieldType::"Name 1")) + ' }');
        A('');
      END;
      IF FldNo(FieldType::Search) <> 0 THEN BEGIN
        A('    { 5   ;2   ;Field     ;');
        A('                SourceExpr=Field' + FORMAT(FldNo(FieldType::Search)) + ' }');
        A('');
      END;

      IF ObjectNo(ObjectType2::"Sub Page") <> 0 THEN BEGIN
        A('    { 6   ;1   ;Part      ;');
        A('                SubPageLink=Field1=FIELD(Field1);');
        A('                PagePartID=Page' + FORMAT(ObjectNo(ObjectType2::"Sub Page")) + ';');
        A('                PartType=Page }');
        A('');
      END;

      A('    { 7   ;0   ;Container ;');
      A('                ContainerType=FactBoxArea }');
      A('');
      IF RecordLinks <> RecordLinks::No THEN BEGIN
        A('    { 8   ;1   ;Part      ;');
        A('                Visible=' + BooleanSourceExpr(RecordLinks = RecordLinks::Visible) + ';');
        A('                PartType=System;');
        A('                SystemPartID=RecordLinks }');
        A('');
      END;
      IF Notes <> Notes::No THEN BEGIN
        A('    { 9   ;1   ;Part      ;');
        A('                Visible=' + BooleanSourceExpr(Notes = Notes::Visible) + ';');
        A('                PartType=System;');
        A('                SystemPartID=Notes }');
        A('');
      END;
      A('  }');
      A('  CODE');
      A('  {');

      CloseObject(ObjectType2::"Card Page");
    END;

    LOCAL PROCEDURE CreateSubPage@24();
    BEGIN
      OpenObject(ObjectType2::"Sub Page");

      A('  PROPERTIES');
      A('  {');
      A('    SourceTable=Table' + FORMAT(ObjectNo(ObjectType2::"Sub Table")) + ';');
      A('    PageType=ListPart;');
      A('    AutoSplitKey=Yes;');
      A('  }');
      A('  CONTROLS');
      A('  {');
      A('    { 1   ;0   ;Container ;');
      A('                ContainerType=ContentArea }');
      A('');
      A('    { 2   ;1   ;Group     ;');
      A('                Name=Group;');
      A('                GroupType=Repeater }');
      A('');
      A('    { 3   ;2   ;Field     ;');
      A('                SourceExpr=Field' + FORMAT(FldNo(FieldType::"Name 2")) + ' }');
      A('');
      A('  }');
      A('  CODE');
      A('  {');

      CloseObject(ObjectType2::"Sub Page");
    END;

    LOCAL PROCEDURE CreateListPage@5(VAR TableType@1000 : 'Master Data,Document,Setup,Ledger Entry';VAR RecordLinks@1001 : 'No,Visible,Not Visible';VAR Notes@1002 : 'No,Visible,Not Visible');
    BEGIN
      OpenObject(ObjectType2::"List Page");

      A('  PROPERTIES');
      A('  {');

      IF (ObjectNo(ObjectType2::"Card Page") <> 0) OR (TableType = TableType::"Ledger Entry") THEN
        A('    Editable=0;');

      A('    SourceTable=Table' + FORMAT(ObjectNo(ObjectType2::Table)) + ';');
      A('    PageType=List;');

      IF ObjectNo(ObjectType2::"Card Page") <> 0 THEN
        A('    CardPageID=Page' + FORMAT(ObjectNo(ObjectType2::"Card Page")) + ';');

      A('  }');
      A('  CONTROLS');
      A('  {');
      A('    { 1   ;0   ;Container ;');
      A('                ContainerType=ContentArea }');
      A('');
      A('    { 2   ;1   ;Group     ;');
      A('                GroupType=Repeater }');
      A('');
      A('    { 3   ;2   ;Field     ;');
      A('                SourceExpr=Field1 }');
      A('');
      IF FldNo(FieldType::"Name 1") <> 0 THEN BEGIN
        A('    { 4   ;2   ;Field     ;');
        A('                SourceExpr=Field' + FORMAT(FldNo(FieldType::"Name 1")) + ' }');
        A('');
      END;
      IF FldNo(FieldType::Search) <> 0 THEN BEGIN
        A('    { 5   ;2   ;Field     ;');
        A('                SourceExpr=Field' + FORMAT(FldNo(FieldType::Search)) + ' }');
        A('');
      END;
      A('    { 6   ;0   ;Container ;');
      A('                ContainerType=FactBoxArea }');
      A('');
      IF RecordLinks <> RecordLinks::No THEN BEGIN
        A('    { 7   ;1   ;Part      ;');
        A('                Visible=' + BooleanSourceExpr(RecordLinks = RecordLinks::Visible) + ';');
        A('                PartType=System;');
        A('                SystemPartID=RecordLinks }');
        A('');
      END;
      IF Notes <> Notes::No THEN BEGIN
        A('    { 8   ;1   ;Part      ;');
        A('                Visible=' + BooleanSourceExpr(Notes = Notes::Visible) + ';');
        A('                PartType=System;');
        A('                SystemPartID=Notes }');
        A('');
      END;
      A('  }');
      A('  CODE');
      A('  {');

      CloseObject(ObjectType2::"List Page");
    END;

    LOCAL PROCEDURE CreatePrimaryField@27();
    VAR
      LastProperty@1000 : 'Caption,Search,Validate,NotBlank';
      FirstProperty@1001 : Boolean;
    BEGIN
      IF FldNo(FieldType::Search) <> 0 THEN
        LastProperty := LastProperty::Search;

      IF FldNo(FieldType::"No. Series") <> 0 THEN
        LastProperty := LastProperty::Validate;

      IF FldName(FieldType::"Primary 1") = 'Code' THEN
        LastProperty := LastProperty::NotBlank;
      WriteFieldLine(FieldType::"Primary 1");

      FirstProperty := TRUE;

      IF FldNo(FieldType::Search) <> 0 THEN BEGIN
        O(51, ';AltSearchField=Field' + FORMAT(FldNo(FieldType::Search)) + CloseLineCharacter(LastProperty <> LastProperty::Search));
        FirstProperty := FALSE;
      END;

      IF FldNo(FieldType::"No. Series") <> 0 THEN BEGIN
        IF FirstProperty THEN BEGIN
          O(51, ';OnValidate=VAR');
          FirstProperty := FALSE;
        END ELSE
          A(PADSTR('', 51) + 'OnValidate=VAR');

        A(PADSTR('', 51) + '             ' + NosSeriesTableName + '@1000 : Record ' + FORMAT(NosSeriesTableNo) + ';');
        A(PADSTR('', 51) + '             NoSeriesMgt@1001 : Codeunit 396;');
        A(PADSTR('', 51) + '           BEGIN');
        A(PADSTR('', 51) + '             IF Field1 <> xRec.Field1 THEN BEGIN');
        A(PADSTR('', 51) + '               ' + NosSeriesTableName + '.GET;');
        A(PADSTR('', 51) + '               NoSeriesMgt.TestManual(' + NosSeriesTableName + '.' + NosSeriesFieldName + ');');
        A(PADSTR('', 51) + '               Field' + FORMAT(FldNo(FieldType::"No. Series")) + ' := '''';');
        A(PADSTR('', 51) + '             END;');
        A(PADSTR('', 51) + '           END;');
        IF LastProperty = LastProperty::Validate THEN
          A(PADSTR('', 51) + '            }')
        ELSE
          A('');
      END;

      IF FldName(FieldType::"Primary 1") = 'Code' THEN
        IF FirstProperty THEN
          O(51, ';NotBlank=1 }')
        ELSE
          A(PADSTR('', 51) + 'NotBlank=1 }');
    END;

    LOCAL PROCEDURE CreateNameField@28();
    BEGIN
      IF FldNo(FieldType::"Name 1") = 0 THEN
        EXIT;

      IF FldNo(FieldType::Search) <> 0 THEN BEGIN
        WriteFieldLine(FieldType::"Name 1");
        O(51, ';OnValidate=BEGIN');
        A(PADSTR('', 51) + '             IF (Field3 = UPPERCASE(xRec.Field2)) OR');
        A(PADSTR('', 51) + '                (Field3 = '''')');
        A(PADSTR('', 51) + '             THEN');
        A(PADSTR('', 51) + '               Field3 := Field2;');
        A(PADSTR('', 51) + '           END;');
        A(PADSTR('', 51) + '            }');
      END ELSE
        WriteFieldLine(FieldType::"Name 1");
    END;

    LOCAL PROCEDURE CreateSearchField@29();
    BEGIN
      IF FldNo(FieldType::Search) = 0 THEN
        EXIT;

      WriteFieldLine(FieldType::Search);
    END;

    LOCAL PROCEDURE CreateNosSeriesField@30();
    BEGIN
      IF FldNo(FieldType::"No. Series") = 0 THEN
        EXIT;

      WriteFieldLine(FieldType::"No. Series");
      O(51, ';TableRelation="No. Series";');
      A(PADSTR('', 51) + 'Editable=0 }');
    END;

    LOCAL PROCEDURE WriteFieldLine@35(Type@1000 : Integer);
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      IF FieldBuffer.FINDSET THEN
        REPEAT
          IF FieldBuffer.Type = Type THEN
            Field := FieldBuffer;
        UNTIL FieldBuffer.NEXT = 0;

      A('    { ' + PADSTR(FORMAT(Field."No."), 4) + ';   ;' + PADSTR(Field.FieldName, 20) + ';' + PADSTR(Field."Type Name", 14) + ' }');
    END;

    LOCAL PROCEDURE CreateOnInsertTrigger@20();
    VAR
      Setup@1000 : Record 11102035;
      NosSeriesField@1001 : Text[30];
    BEGIN
      Setup.CustomGet;

      IF FldNo(FieldType::"No. Series") = 0 THEN
        EXIT;

      NosSeriesField := 'Field' + FORMAT(FldNo(FieldType::"No. Series"));

      A('    OnInsert=VAR');
      A('               ' + NosSeriesTableName + '@1000 : Record ' + FORMAT(NosSeriesTableNo) + ';');
      A('               NoSeriesMgt@1001 : Codeunit 396;');
      A('             BEGIN');
      A('               IF Field1 = '''' THEN BEGIN');
      A('                 ' + NosSeriesTableName + '.GET;');
      A('                 ' + NosSeriesTableName + '.TESTFIELD(' + NosSeriesFieldName + ');');

      IF Setup."Space after Comma" = Setup."Space after Comma"::Mandatory THEN
        A('                 NoSeriesMgt.InitSeries(' + NosSeriesTableName + '.' + NosSeriesFieldName + ', ' +
          'xRec.' + NosSeriesField + ', 0D, Field1, ' + NosSeriesField + ');')
      ELSE
        A('                 NoSeriesMgt.InitSeries(' + NosSeriesTableName + '.' + NosSeriesFieldName + ',' +
          'xRec.' + NosSeriesField + ',0D,Field1,' + NosSeriesField + ');');

      A('               END;');
      A('             END;');
      A('');
    END;

    LOCAL PROCEDURE CreateOnDeleteTrigger@8();
    VAR
      Setup@1000 : Record 11102035;
      SubTableName@1001 : Text[1024];
    BEGIN
      Setup.CustomGet;

      IF ObjectNo(ObjectType2::"Sub Table") = 0 THEN
        EXIT;

      SubTableName := Capitalize(ObjectName2(ObjectType2::"Sub Table"));

      A('    OnDelete=VAR');
      A('               ' + SubTableName + '@1000 : Record ' + FORMAT(ObjectNo(ObjectType2::"Sub Table")) + ';');
      A('             BEGIN');
      IF Setup."Space after Comma" = Setup."Space after Comma"::Mandatory THEN
        A('               ' + SubTableName + '.SETRANGE(Field1, Field1);')
      ELSE
        A('               ' + SubTableName + '.SETRANGE(Field1,Field1);');
      A('               ' + SubTableName + '.DELETEALL(TRUE);');
      A('             END;');
      A('');
    END;

    LOCAL PROCEDURE CreateOnAssistEdit@21();
    VAR
      Setup@1000 : Record 11102035;
      NosSeriesField@1001 : Text[30];
    BEGIN
      Setup.CustomGet;

      IF FldNo(FieldType::"No. Series") = 0 THEN
        EXIT;

      NosSeriesField := 'Field' + FORMAT(FldNo(FieldType::"No. Series"));

      A('');
      A('    PROCEDURE AssistEdit@2() : Boolean;');
      A('    VAR');
      A('      ' + NosSeriesTableName + '@1001 : Record ' + FORMAT(NosSeriesTableNo) + ';');
      A('      NoSeriesMgt@1000 : Codeunit 396;');
      A('    BEGIN');
      A('      ' + NosSeriesTableName + '.GET;');
      A('      ' + NosSeriesTableName + '.TESTFIELD(' + NosSeriesFieldName + ');');
      IF Setup."Space after Comma" = Setup."Space after Comma"::Mandatory THEN
        A('      IF NoSeriesMgt.SelectSeries(' + NosSeriesTableName + '.' +
          NosSeriesFieldName + ', xRec.' + NosSeriesField + ', ' + NosSeriesField + ') THEN BEGIN')
      ELSE
        A('      IF NoSeriesMgt.SelectSeries(' + NosSeriesTableName + '.' +
          NosSeriesFieldName + ',xRec.' + NosSeriesField + ',' + NosSeriesField + ') THEN BEGIN');
      A('        NoSeriesMgt.SetSeries(Field1);');
      A('        EXIT(TRUE);');
      A('      END;');
      A('    END;');
    END;

    LOCAL PROCEDURE OpenObject@19(Type@1000 : Integer);
    VAR
      Setup@1001 : Record 11102035;
    BEGIN
      Setup.CustomGet;

      TmpCALHistoryLine.RESET;
      TmpCALHistoryLine.DELETEALL;
      CLEAR(TmpCALHistoryLine);

      A('OBJECT ' + ObjectTypeName(Type) + ' ' + FORMAT(ObjectNo(Type)) + ' ' + ObjectName2(Type));
      A('{');
      A('  OBJECT-PROPERTIES');
      A('  {');
      A('    Date=' + FORMAT(TODAY) + ';');
      A('    Time=' + FORMAT(TIME) + ';');
      A('    Modified=1;');
      A('    Version List=;');
      A('  }');
    END;

    LOCAL PROCEDURE CloseObject@34(Type@1000 : Integer);
    VAR
      ObjectMgt@1001 : Codeunit 11102046;
      SourceControl@1002 : Codeunit 11102050;
      TranslationMgt@1003 : Codeunit 11102051;
      oFile@1004 : File;
    BEGIN
      A('');
      A('    BEGIN');
      A('    END.');
      A('  }');
      A('}');
      A('');

      ObjectTypeName(Type);
      TranslationMgt.AddCaptionsToCALLines(TmpCALHistoryLine, TranslationToolLineBuffer, ObjectBuffer);

      oFile.WRITEMODE(TRUE);
      oFile.TEXTMODE(TRUE);
      oFile.CREATE(FileName);
      SourceControl.AppendHistoryLinesToFile(oFile, TmpCALHistoryLine);
      oFile.CLOSE;

      ObjectMgt.SetErrorHandling(TRUE);
      ObjectMgt.ImportObject(FileName);

      ERASE(FileName);
    END;

    LOCAL PROCEDURE FileName@37() : Text[1024];
    VAR
      FileHandler@1000 : Codeunit 11102097;
    BEGIN
      EXIT(FileHandler.TempDirectory + 'createobject.txt');
    END;

    LOCAL PROCEDURE A@6(CALLine@1000 : Text[1024]);
    BEGIN
      TmpCALHistoryLine."Line No." += 1;
      TmpCALHistoryLine."Sub Line No." := 1;
      TmpCALHistoryLine.Code := CALLine;
      TmpCALHistoryLine.INSERT;
    END;

    LOCAL PROCEDURE O@48(Position@1000 : Integer;CALLine@1001 : Text[1024]);
    BEGIN
      TmpCALHistoryLine.Code := DELSTR(PADSTR(TmpCALHistoryLine.Code, 1024), Position) + CALLine;
      TmpCALHistoryLine.MODIFY;
    END;

    LOCAL PROCEDURE Capitalize@7(Text@1000 : Text[1024]) NewText : Text[1024];
    VAR
      i@1001 : Integer;
      MakeCapital@1002 : Boolean;
    BEGIN
      MakeCapital := TRUE;

      FOR i := 1 TO STRLEN(Text) DO
        IF ((Text[i] >= '0') AND (Text[i] <= '9')) OR
           ((Text[i] >= 'a') AND (Text[i] <= 'z')) OR
           ((Text[i] >= 'A') AND (Text[i] <= 'Z'))
        THEN BEGIN
          IF MakeCapital THEN
            NewText += UPPERCASE(FORMAT(Text[i]))
          ELSE
            NewText += LOWERCASE(FORMAT(Text[i]));
          MakeCapital := FALSE;
        END ELSE
          MakeCapital := TRUE;

      Text := NewText;
    END;

    LOCAL PROCEDURE BooleanSourceExpr@10(Value@1000 : Boolean) : Text[30];
    BEGIN
      IF Value THEN
        EXIT('TRUE')
      ELSE
        EXIT('FALSE');
    END;

    LOCAL PROCEDURE CloseLineCharacter@38(ExtraProperties@1000 : Boolean) : Text[30];
    BEGIN
      IF ExtraProperties THEN
        EXIT(';')
      ELSE
        EXIT(' }');
    END;

    LOCAL PROCEDURE FillBuffer@11(VAR TmpObject@1000 : Record 2000000001;VAR TmpField@1001 : Record 2000000041;VAR TmpTranslationToolLine@1002 : Record 11102068);
    VAR
      TmpLine@1003 : ARRAY [2] OF TEMPORARY Record 11102068;
    BEGIN
      ObjectBuffer.DELETEALL;
      IF TmpObject.FINDSET THEN
        REPEAT
          ObjectBuffer := TmpObject;
          ObjectBuffer.INSERT;
        UNTIL TmpObject.NEXT = 0;

      FieldBuffer.DELETEALL;
      IF TmpField.FINDSET THEN
        REPEAT
          FieldBuffer := TmpField;
          FieldBuffer.INSERT;
        UNTIL TmpField.NEXT = 0;

      GetDefaultCaptions(TmpLine);
      OverwriteChangedCaptions(TmpLine, TmpTranslationToolLine);

      TranslationToolLineBuffer.DELETEALL;
      IF TmpLine[1].FINDSET THEN
        REPEAT
          TranslationToolLineBuffer := TmpLine[1];
          TranslationToolLineBuffer.INSERT;
        UNTIL TmpLine[1].NEXT = 0;
    END;

    LOCAL PROCEDURE ObjectTypeName@26(Type@1000 : Integer) : Text[30];
    BEGIN
      IF ObjectBuffer.FINDSET THEN
        REPEAT
          IF ObjectBuffer."DBM Table No." = Type THEN
            EXIT(FORMAT(ObjectBuffer.Type));
        UNTIL ObjectBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE ObjectNo@16(Type@1000 : Integer) : Integer;
    BEGIN
      IF ObjectBuffer.FINDSET THEN
        REPEAT
          IF ObjectBuffer."DBM Table No." = Type THEN
            EXIT(ObjectBuffer.ID);
        UNTIL ObjectBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE ObjectName2@18(Type@1000 : Integer) : Text[1024];
    BEGIN
      IF ObjectBuffer.FINDSET THEN
        REPEAT
          IF ObjectBuffer."DBM Table No." = Type THEN
            EXIT(ObjectBuffer.Name);
        UNTIL ObjectBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE FldNo@17(Type@1000 : Integer) : Integer;
    BEGIN
      IF FieldBuffer.FINDSET THEN
        REPEAT
          IF FieldBuffer.Type = Type THEN
            EXIT(FieldBuffer."No.");
        UNTIL FieldBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE FldName@25(Type@1000 : Integer) : Text[30];
    BEGIN
      IF FieldBuffer.FINDSET THEN
        REPEAT
          IF FieldBuffer.Type = Type THEN
            EXIT(FieldBuffer.FieldName);
        UNTIL FieldBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE TableNoField@44(Type@1000 : Integer) : Integer;
    BEGIN
      CASE Type OF

        FieldType::"Primary 1",
        FieldType::"Name 1",
        FieldType::Search,
        FieldType::"No. Series" :
          EXIT(ObjectNo(ObjectType2::Table));

        FieldType::"Primary 2",
        FieldType::"Line No.",
        FieldType::"Name 2" :
          EXIT(ObjectNo(ObjectType2::"Sub Table"));

      END;
    END;

    LOCAL PROCEDURE NosSeriesTableNo@45() : Integer;
    BEGIN
      IF FieldBuffer.FINDSET THEN
        REPEAT
          IF FieldBuffer.Type = FieldType::"No. Series" THEN
            EXIT(FieldBuffer.RelationTableNo);
        UNTIL FieldBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE NosSeriesTableName@42() : Text[1024];
    VAR
      Object@1000 : Record 2000000001;
    BEGIN
      IF FieldBuffer.FINDSET THEN
        REPEAT
          IF FieldBuffer.Type = FieldType::"No. Series" THEN BEGIN
            Object.GET(Object.Type::Table, '', FieldBuffer.RelationTableNo);
            EXIT(Capitalize(Object.Name));
          END;
        UNTIL FieldBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE NosSeriesFieldName@43() : Text[1024];
    BEGIN
      IF FieldBuffer.FINDSET THEN
        REPEAT
          IF FieldBuffer.Type = FieldType::"No. Series" THEN
            EXIT('Field' + FORMAT(FieldBuffer.RelationFieldNo));
        UNTIL FieldBuffer.NEXT = 0;
    END;

    PROCEDURE Translations@36(VAR TmpObject@1000 : TEMPORARY Record 2000000001;VAR TmpField@1001 : TEMPORARY Record 2000000041;VAR TmpChangedCaption@1002 : TEMPORARY Record 11102068);
    BEGIN
      FillBuffer(TmpObject, TmpField, TmpChangedCaption);
      TranslationToolLineBuffer.SETCURRENTKEY("Object Type", "Object No.", "Caption Entry No.");
      IF TranslationToolLineBuffer.FINDFIRST THEN
        ;

      PAGE.RUNMODAL(PAGE::"OM - Update Captions", TranslationToolLineBuffer);

      TmpChangedCaption.RESET;
      TmpChangedCaption.DELETEALL;

      TranslationToolLineBuffer.RESET;
      TranslationToolLineBuffer.SETRANGE(Changed, TRUE);
      IF TranslationToolLineBuffer.FINDSET THEN
        REPEAT
          TmpChangedCaption := TranslationToolLineBuffer;
          TmpChangedCaption.INSERT;
        UNTIL TranslationToolLineBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE GetDefaultCaptions@40(VAR TmpLine@1000 : ARRAY [2] OF TEMPORARY Record 11102068);
    VAR
      TranslationMgt@1001 : Codeunit 11102051;
      ObjectIdentifier@1002 : Text[30];
      i@1003 : Integer;
      j@1004 : Integer;
      ctFieldCaption@1005 : TextConst 'DEU=%1%2-F%3-P8629-A1033-L999:%4;ENU=%1%2-F%3-P8629-A1033-L999:%4;ESP=%1%2-F%3-P8629-A1033-L999:%4;FRA=%1%2-F%3-P8629-A1033-L999:%4;NLD=%1%2-F%3-P8629-A1033-L999:%4;DEA=%1%2-F%3-P8629-A1033-L999:%4';
      ctFieldName@1006 : TextConst 'DEU=%1%2-F%3-P2818-L30:%4;ENU=%1%2-F%3-P2818-L30:%4;ESP=%1%2-F%3-P2818-L30:%4;FRA=%1%2-F%3-P2818-L30:%4;NLD=%1%2-F%3-P2818-L30:%4;DEA=%1%2-F%3-P2818-L30:%4';
      ctObjectCaption@1007 : TextConst 'DEU=%1%2-P8629-A1033-L999:%3;ENU=%1%2-P8629-A1033-L999:%3;ESP=%1%2-P8629-A1033-L999:%3;FRA=%1%2-P8629-A1033-L999:%3;NLD=%1%2-P8629-A1033-L999:%3;DEA=%1%2-P8629-A1033-L999:%3';
      ctObjectName@1008 : TextConst 'DEU=%1%2-P2818-L30:%3;ENU=%1%2-P2818-L30:%3;ESP=%1%2-P2818-L30:%3;FRA=%1%2-P2818-L30:%3;NLD=%1%2-P2818-L30:%3;DEA=%1%2-P2818-L30:%3';
    BEGIN
      FOR i := 1 TO 8 DO
        IF ObjectNo(i) <> 0 THEN BEGIN

          CASE ObjectTypeName(i) OF
            'Table' : ObjectIdentifier := 'T';
            'Form' : ObjectIdentifier := 'F';
            'Page' : ObjectIdentifier := 'N';
          END;
          AddCaption(TmpLine, STRSUBSTNO(ctObjectName, ObjectIdentifier, ObjectNo(i), ObjectName2(i)), i);
          AddCaption(TmpLine, STRSUBSTNO(ctObjectCaption, ObjectIdentifier, ObjectNo(i), ObjectName2(i)), i);

          IF ObjectTypeName(i) = 'Table' THEN
            FOR j := 1 TO 10 DO
              IF FldNo(j) <> 0 THEN
                IF TableNoField(j) = ObjectNo(i) THEN BEGIN
                  AddCaption(TmpLine, STRSUBSTNO(ctFieldName, ObjectIdentifier, ObjectNo(i), FldNo(j), FldName(j)), 100 + j);
                  AddCaption(TmpLine, STRSUBSTNO(ctFieldCaption, ObjectIdentifier, ObjectNo(i), FldNo(j), FldName(j)), 100 + j);
                END;
          IF i = ObjectType2::"Card Page" THEN
            AddCaption(TmpLine, 'N' + FORMAT(ObjectNo(i)) + '-C2-P8629-A1033-L999:General', 206);

        END;

      TranslationMgt.AddMandatoryLanguages(TmpLine);
      IF TmpLine[1].FINDSET THEN
        REPEAT
          IF (TmpLine[1]."Language Id" <> 1033) AND TmpLine[1]."Missing Caption" AND
             (TmpLine[1].TotalCalculatedCaption <> '')
          THEN BEGIN
            TmpLine[1].ValidateCaption(TmpLine[1].TotalCalculatedCaption);
            TmpLine[1].Changed := FALSE;
            TmpLine[1].MODIFY;
          END;
        UNTIL TmpLine[1].NEXT = 0;
    END;

    LOCAL PROCEDURE AddCaption@39(VAR TmpTranslationToolLine@1000 : ARRAY [2] OF TEMPORARY Record 11102068;TranslationFileLine@1001 : Text[1024];Id@1002 : Integer);
    BEGIN
      CLEAR(TmpTranslationToolLine[1]);
      TmpTranslationToolLine[1].ValidateTranslationFileLine(TranslationFileLine, TmpTranslationToolLine[2]);
      IF TmpTranslationToolLine[1]."Entry No." = 0 THEN BEGIN
        TmpTranslationToolLine[1]."Entry No." := Id;
        TmpTranslationToolLine[1]."Caption Entry No." := Id;
        TmpTranslationToolLine[1].Comment := 'Create Table Wizard';
        TmpTranslationToolLine[1].INSERT;
      END ELSE
        TmpTranslationToolLine[1].MODIFY;
    END;

    LOCAL PROCEDURE OverwriteChangedCaptions@41(VAR TmpTranslationToolLine@1000 : ARRAY [2] OF TEMPORARY Record 11102068;VAR TmpChangedCaptions@1001 : Record 11102068);
    BEGIN
      IF TmpChangedCaptions.FINDSET THEN
        REPEAT
          TmpTranslationToolLine[1].SETRANGE("Caption Entry No.", TmpChangedCaptions."Caption Entry No.");
          TmpTranslationToolLine[1].SETRANGE("Language Id", TmpChangedCaptions."Language Id");
          IF TmpTranslationToolLine[1].FINDFIRST THEN BEGIN
            TmpTranslationToolLine[1].ValidateCaption(TmpChangedCaptions.TotalCaption);
            TmpTranslationToolLine[1].MODIFY;
          END;
          IF TmpChangedCaptions."Name Changed" THEN BEGIN
            TmpTranslationToolLine[1].VALIDATE(Name, TmpChangedCaptions.Name);
            TmpTranslationToolLine[1].MODIFY;
          END;

          TmpTranslationToolLine[1].RESET;
        UNTIL TmpChangedCaptions.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

