OBJECT Codeunit 9062670 Dynamics JSON Mgt
{
  OBJECT-PROPERTIES
  {
    Date=20/02/17;
    Time=[ 1:39:48 PM];
    Modified=Yes;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnRun=VAR
            SH@1000000000 : Record 36;
            RecRef@1000000001 : RecordRef;
          BEGIN
          END;

  }
  CODE
  {
    VAR
      StringBuilder@1002 : DotNet "'mscorlib'.System.Text.StringBuilder";
      StringWriter@1004 : DotNet "'mscorlib'.System.IO.StringWriter";
      StringReader@1003 : DotNet "'mscorlib'.System.IO.StringReader";
      JsonTextWriter@1006 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonTextWriter";
      JsonTextReader@1001 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonTextReader";

    LOCAL PROCEDURE Initialize@15();
    VAR
      Formatting@1000 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Formatting";
    BEGIN
      StringBuilder := StringBuilder.StringBuilder;
      StringWriter := StringWriter.StringWriter(StringBuilder);
      JsonTextWriter := JsonTextWriter.JsonTextWriter(StringWriter);
      JsonTextWriter.Formatting := Formatting.Indented;
    END;

    LOCAL PROCEDURE "--- Write ---"@1000000004();
    BEGIN
    END;

    PROCEDURE StartJSon@1();
    BEGIN
      IF ISNULL(StringBuilder) THEN
        Initialize;
      JsonTextWriter.WriteStartObject;
    END;

    PROCEDURE StartJSonArray@14();
    BEGIN
      IF ISNULL(StringBuilder) THEN
        Initialize;
      JsonTextWriter.WriteStartArray;
    END;

    PROCEDURE AddJSonBranch@6(BranchName@1001 : Text);
    BEGIN
      JsonTextWriter.WritePropertyName(BranchName);
      JsonTextWriter.WriteStartObject;
    END;

    PROCEDURE AddToJSon@4(VariableName@1001 : Text;Variable@1002 : Variant);
    BEGIN
      JsonTextWriter.WritePropertyName(VariableName);
      JsonTextWriter.WriteValue(FORMAT(Variable,0,9));
    END;

    PROCEDURE WritePropertyName@1000000001(PropertyName@1000000000 : Text);
    BEGIN
      JsonTextWriter.WritePropertyName(PropertyName);
    END;

    PROCEDURE WriteValue@1000000000(Value@1000000000 : Variant);
    VAR
      DecimalValue@1000000001 : Decimal;
    BEGIN
      IF (Value.ISDECIMAL) THEN
        WriteDecimalValue(Value)
      ELSE IF (Value.ISINTEGER) THEN
        WriteIntValue(Value)
      ELSE IF (Value.ISBOOLEAN) THEN
        WriteBooleanValue(Value)
      ELSE IF (Value.ISDATE) THEN
        WriteDateValue(Value)
      ELSE IF (Value.ISTIME) THEN
        WriteTimeValue(Value)
      ELSE IF (Value.ISDATETIME) THEN
        WriteDateTimeValue(Value)
      ELSE
        WriteTextValue(FORMAT(Value, 0, 9));
    END;

    PROCEDURE WriteTextValue@1000000005(Value@1000000000 : Text);
    VAR
      DecimalValue@1000000001 : Decimal;
    BEGIN
      JsonTextWriter.WriteValue(Value);
    END;

    PROCEDURE WriteDecimalValue@1000000006(Value@1000000000 : Decimal);
    BEGIN
      JsonTextWriter.WriteValue(Value);
    END;

    PROCEDURE WriteIntValue@1000000007(Value@1000000000 : Integer);
    BEGIN
      JsonTextWriter.WriteValue(Value);
    END;

    PROCEDURE WriteBooleanValue@1000000008(Value@1000000000 : Boolean);
    BEGIN
      JsonTextWriter.WriteValue(Value);
    END;

    PROCEDURE WriteDateValue@1000000009(Value@1000000000 : Date);
    BEGIN
      JsonTextWriter.WriteValue(Value);
    END;

    PROCEDURE WriteTimeValue@1000000011(Value@1000000000 : Time);
    BEGIN
      JsonTextWriter.WriteValue(Value);
    END;

    PROCEDURE WriteDateTimeValue@1000000010(Value@1000000000 : DateTime);
    BEGIN
      JsonTextWriter.WriteValue(Value);
    END;

    PROCEDURE WriteRawValue@1000000002(TextValue@1000000000 : Text);
    BEGIN
      JsonTextWriter.WriteRawValue(TextValue);
    END;

    PROCEDURE WriteRaw@1000000012(TextValue@1000000000 : Text);
    BEGIN
      JsonTextWriter.WriteRaw(TextValue);
    END;

    PROCEDURE EndJSonBranch@7();
    BEGIN
      JsonTextWriter.WriteEndObject;
    END;

    PROCEDURE EndJSonArray@19();
    BEGIN
      JsonTextWriter.WriteEndArray;
    END;

    PROCEDURE EndJSon@3();
    BEGIN
      JsonTextWriter.WriteEndObject;
    END;

    LOCAL PROCEDURE "--- Read Json ---"@1000000003();
    BEGIN
    END;

    PROCEDURE GetJSon@20() JSon : Text;
    BEGIN
      JSon := StringBuilder.ToString;
      Initialize;
    END;

    PROCEDURE ReadJSon@5(VAR String@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";VAR TempPostingExchField@1002 : TEMPORARY Record 1221);
    VAR
      JsonToken@1001 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonToken";
      PrefixArray@1006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      PrefixString@1005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      PropertyName@1008 : Text;
      ColumnNo@1003 : Integer;
      InArray@1007 : ARRAY [250] OF Boolean;
    BEGIN
      PrefixArray := PrefixArray.CreateInstance(GETDOTNETTYPE(String),250);
      StringReader := StringReader.StringReader(String);
      JsonTextReader := JsonTextReader.JsonTextReader(StringReader);
      WHILE JsonTextReader.Read DO
        CASE TRUE OF
          JsonTextReader.TokenType.CompareTo(JsonToken.StartObject) = 0 :
            ;
          JsonTextReader.TokenType.CompareTo(JsonToken.StartArray) = 0 :
            BEGIN
              InArray[JsonTextReader.Depth + 1] := TRUE;
              ColumnNo := 0;
            END;
          JsonTextReader.TokenType.CompareTo(JsonToken.StartConstructor) = 0 :
            ;
          JsonTextReader.TokenType.CompareTo(JsonToken.PropertyName) = 0 :
            BEGIN
              PrefixArray.SetValue(JsonTextReader.Value,JsonTextReader.Depth - 1);
              IF JsonTextReader.Depth > 1 THEN BEGIN
                PrefixString := PrefixString.Join('.',PrefixArray,0,JsonTextReader.Depth - 1);
                IF PrefixString.Length > 0 THEN
                  PropertyName := PrefixString.ToString + '.' + FORMAT(JsonTextReader.Value,0,9)
                ELSE
                  PropertyName := FORMAT(JsonTextReader.Value,0,9);
              END ELSE
                PropertyName := FORMAT(JsonTextReader.Value,0,9);
            END;
          JsonTextReader.TokenType.CompareTo(JsonToken.String) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Integer) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Float) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Boolean) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Date) = 0 ,
          JsonTextReader.TokenType.CompareTo(JsonToken.Bytes) = 0 :
            BEGIN
              TempPostingExchField."Data Exch. No." := JsonTextReader.Depth;
              TempPostingExchField."Line No." := JsonTextReader.LineNumber;
              TempPostingExchField."Column No." := ColumnNo;
              TempPostingExchField."Node ID" := PropertyName;
              //DOC LF OP9031 -
              //TempPostingExchField.Value := FORMAT(JsonTextReader.Value,0,9);
              TempPostingExchField.Value := COPYSTR(FORMAT(JsonTextReader.Value,0,9),1,250);
              //DOC LF OP9031 +
              TempPostingExchField."Data Exch. Line Def Code" := JsonTextReader.TokenType.ToString;
              TempPostingExchField.INSERT;
            END;
          JsonTextReader.TokenType.CompareTo(JsonToken.EndConstructor) = 0 :
            ;
          JsonTextReader.TokenType.CompareTo(JsonToken.EndArray) = 0 :
            InArray[JsonTextReader.Depth + 1] := FALSE;
          JsonTextReader.TokenType.CompareTo(JsonToken.EndObject) = 0 :
            IF JsonTextReader.Depth > 0 THEN
              IF InArray[JsonTextReader.Depth] THEN ColumnNo += 1;
        END;
    END;

    PROCEDURE ReadFirstJSonValue@10000200(VAR String@10000200 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";ParameterName@10000201 : Text) ParameterValue : Text;
    VAR
      JsonToken@10000203 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonToken";
      PropertyName@10000202 : Text;
    BEGIN
      StringReader := StringReader.StringReader(String);
      JsonTextReader := JsonTextReader.JsonTextReader(StringReader);
      WHILE JsonTextReader.Read DO
        CASE TRUE OF
          JsonTextReader.TokenType.CompareTo(JsonToken.PropertyName) = 0 :
            PropertyName := FORMAT(JsonTextReader.Value,0,9);
          (PropertyName = ParameterName) AND NOT ISNULL(JsonTextReader.Value)  :
            BEGIN
              ParameterValue := FORMAT(JsonTextReader.Value,0,9);
              EXIT;
            END;
        END;
    END;

    BEGIN
    {
      //DOC NA2016.12 BM ??/??/2016 - Created
      //DOC NA2016.15 AZ 23/02/2016 - New output functions added to export types different that string
      //DOC LF OP9031 -
    }
    END.
  }
}

