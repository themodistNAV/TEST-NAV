OBJECT Codeunit 9087000 nSemble Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=21/09/16;
    Time=[ 6:43:48 PM];
    Version List=NS2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Convert@1000000003 : Codeunit 9062683;
      Record@1000000004 : Variant;
      RecRef@1000000000 : RecordRef;
      FldRef@1000000002 : FieldRef;
      RecordModified@1000000001 : Boolean;

    LOCAL PROCEDURE "--- Record Update ---"@1000000000();
    BEGIN
    END;

    PROCEDURE SetRecord@1000000001(pRecord@1000000000 : Variant);
    BEGIN
      //DOC NS2016.16 - Setting record
      //  -> pRecord: The record

      Record := pRecord;
      RecRef.GETTABLE(pRecord);
      RecordModified := FALSE;
    END;

    PROCEDURE ValidateRecordField@1000000007(pFieldId@1000000000 : Integer;pNewFieldValue@1000000001 : Variant) : Boolean;
    BEGIN
      //DOC NS2016.16 - Validating record field
      //  -> pFieldId: Field Id
      //  -> pNewFieldValue: New field value
      //  <- TRUE = Modified, FALSE = Not

      EXIT(ModifyRecordFieldInternal(pFieldId, pNewFieldValue, FALSE, TRUE));
    END;

    PROCEDURE ModifyRecordField@1000000002(pFieldId@1000000000 : Integer;pNewFieldValue@1000000001 : Variant) : Boolean;
    BEGIN
      //DOC NS2016.16 - Modifying record field (without validation)
      //  -> pFieldId: Field Id
      //  -> pNewFieldValue: New field value
      //  <- TRUE = Modified, FALSE = Not

      EXIT(ModifyRecordFieldInternal(pFieldId, pNewFieldValue, FALSE, FALSE));
    END;

    PROCEDURE ForceValidateRecordField@1000000009(pFieldId@1000000000 : Integer;pNewFieldValue@1000000001 : Variant) : Boolean;
    BEGIN
      //DOC NS2016.16 - Force-validating record field
      //  -> pFieldId: Field Id
      //  -> pNewFieldValue: New field value
      //  <- TRUE = Modified, FALSE = Not

      EXIT(ModifyRecordFieldInternal(pFieldId, pNewFieldValue, TRUE, TRUE));
    END;

    PROCEDURE ForceModifyRecordField@1000000008(pFieldId@1000000000 : Integer;pNewFieldValue@1000000001 : Variant) : Boolean;
    BEGIN
      //DOC NS2016.16 - Force-modifying record field (without validation)
      //  -> pFieldId: Field Id
      //  -> pNewFieldValue: New field value
      //  <- TRUE = Modified, FALSE = Not

      EXIT(ModifyRecordFieldInternal(pFieldId, pNewFieldValue, TRUE, FALSE));
    END;

    LOCAL PROCEDURE ModifyRecordFieldInternal@1000000004(pFieldId@1000000000 : Integer;pNewFieldValue@1000000001 : Variant;pForce@1000000005 : Boolean;pWithValidation@1000000002 : Boolean) : Boolean;
    VAR
      lCurrentFieldValue@1000000003 : Variant;
      lValuesDifferent@1000000004 : Boolean;
    BEGIN
      //DOC NS2016.16 - Modifying record field (internal version)
      //  -> pFieldId: Field Id
      //  -> pNewFieldValue: New field value
      //  -> pForce: Force flag
      //  -> pWithValidation: Validation flag
      //  <- TRUE = Modified, FALSE = Not

      FldRef := RecRef.FIELD(pFieldId);
      IF (pForce) THEN
        lValuesDifferent := TRUE
      ELSE
      BEGIN
        lCurrentFieldValue := FldRef.VALUE();
        lValuesDifferent := ( NOT (Convert.AreVariantsEqual(pNewFieldValue, lCurrentFieldValue)));
      END;
      IF (lValuesDifferent) THEN
      BEGIN
        IF (pWithValidation) THEN
          FldRef.VALIDATE(pNewFieldValue)
        ELSE
          FldRef.VALUE := pNewFieldValue;
        RecordModified := TRUE;
      END;
      EXIT(lValuesDifferent);
    END;

    PROCEDURE GetRecord@1000000003(VAR pRecord@1000000000 : Variant) : Boolean;
    BEGIN
      //DOC NS2016.16 - Getting record
      //  <> pRecord: Target record
      //  <- TRUE = Modified, FALSE = Not

      RecRef.SETTABLE(Record);
      pRecord := Record;
      EXIT(RecordModified);
    END;

    LOCAL PROCEDURE "--- General ---"@1000000005();
    BEGIN
    END;

    PROCEDURE ItemEntriesExist@1000000006(pItem@1000000001 : Record 27;pOnlyLedger@1000000000 : Boolean) : Boolean;
    VAR
      lItemLedgerEntry@1000000002 : Record 32;
      lPurchaseLine@1000000004 : Record 39;
      lSalesLine@1000000005 : Record 37;
      lTransferLine@1000000006 : Record 5741;
      lConsignmentLine@1000000007 : Record 9062448;
      lEntriesExist@1000000003 : Boolean;
    BEGIN
      //DOC NS2016.16 - Returning if item entries exist
      //  -> pItem: The item to check
      //  -> pOnlyLedger: TRUE = Check only ledger, FALSE = Check everything

      lEntriesExist := FALSE;

      IF ( NOT (lEntriesExist)) THEN
      BEGIN
        lItemLedgerEntry.RESET();
        lItemLedgerEntry.SETCURRENTKEY("Item No.");
        lItemLedgerEntry.SETRANGE("Item No.", pItem."No.");
        lEntriesExist := ( NOT (lItemLedgerEntry.ISEMPTY));
      END;

      IF ( NOT (pOnlyLedger)) THEN
      BEGIN
        IF ( NOT (lEntriesExist)) THEN
        BEGIN
          lPurchaseLine.RESET();
          lPurchaseLine.SETCURRENTKEY(Type, "No.");
          lPurchaseLine.SETRANGE(Type, lPurchaseLine.Type::Item);
          lPurchaseLine.SETRANGE("No.", pItem."No.");
          lEntriesExist := ( NOT (lPurchaseLine.ISEMPTY));
        END;

        IF ( NOT (lEntriesExist)) THEN
        BEGIN
          lSalesLine.RESET();
          lSalesLine.SETCURRENTKEY(Type, "No.");
          lSalesLine.SETRANGE(Type, lSalesLine.Type::Item);
          lSalesLine.SETRANGE("No.", pItem."No.");
          lEntriesExist := ( NOT (lSalesLine.ISEMPTY));
        END;

        IF ( NOT (lEntriesExist)) THEN
        BEGIN
          lTransferLine.RESET();
          lTransferLine.SETCURRENTKEY("Item No.");
          lTransferLine.SETRANGE("Item No.", pItem."No.");
          lEntriesExist := ( NOT (lTransferLine.ISEMPTY));
        END;

        IF ( NOT (lEntriesExist)) THEN
        BEGIN
          lConsignmentLine.RESET();
          lConsignmentLine.SETCURRENTKEY("Item No.");
          lConsignmentLine.SETRANGE("Item No.", pItem."No.");
          lEntriesExist := ( NOT (lConsignmentLine.ISEMPTY));
        END;
      END;

      EXIT(lEntriesExist);
    END;

    BEGIN
    {
      //DOC NS2016.16 JH 06/09/2016 - Created
    }
    END.
  }
}

