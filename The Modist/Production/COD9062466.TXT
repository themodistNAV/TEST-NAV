OBJECT Codeunit 9062466 Warehouse Printout Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=23/09/15;
    Time=[ 1:48:03 PM];
    Version List=NH2016.4;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      mWarehousePrintoutHeader@1000000004 : TEMPORARY Record 9062325;
      mWarehousePrintoutLine@1000000005 : TEMPORARY Record 9062326;
      mDocumentPrintoutToolkit@1000000010 : Codeunit 9062447;
      mHeaderTableId@1000000013 : Integer;
      mLinetableId@1000000014 : Integer;
      mType@1000000000 : ' ,,Item';

    LOCAL PROCEDURE "--- Setting Document ---"@1000000052();
    BEGIN
    END;

    PROCEDURE SetWarehouseShipmentHeader@1000000060(pWarehouseShipmentHeader@1000000000 : Record 7320);
    BEGIN
      //DOC NH2015.4 - Setting warehouse shipment header
      //  -> pWarehouseShipmentHeader: The header

      mWarehousePrintoutHeader.SetWarehouseShipmentHeader(pWarehouseShipmentHeader);
    END;

    PROCEDURE SetPostedWarehouseShipmentHeader@1000000000(pPostedWhseShipmentHeader@1000000000 : Record 7322);
    BEGIN
      //DOC NH2015.4 - Setting posted warehouse shipment header
      //  -> pPostedWhseShipmentHeader: The header

      mWarehousePrintoutHeader.SetPostedWarehouseShipmentHeader(pPostedWhseShipmentHeader);
    END;

    PROCEDURE SetWarehouseReceiptHeader@1000000063(pWarehouseReceiptHeader@1000000000 : Record 7316);
    BEGIN
      //DOC NH2015.4 - Setting warehouse receipt header
      //  -> pWarehouseReceiptHeader: The header

      mWarehousePrintoutHeader.SetWarehouseReceiptHeader(pWarehouseReceiptHeader);
    END;

    PROCEDURE SetPostedWarehouseReceiptHeader@1000000001(pPostedWhseReceiptHeader@1000000000 : Record 7318);
    BEGIN
      //DOC NH2015.4 - Setting posted warehouse receipt header
      //  -> pPostedWhseReceiptHeader: The header

      mWarehousePrintoutHeader.SetPostedWarehouseReceiptHeader(pPostedWhseReceiptHeader);
    END;

    PROCEDURE SetWarehouseActivityHeader@1000000026(pWarehouseActivityHeader@1000000000 : Record 5766);
    BEGIN
      //DOC NH2015.4 - Setting warehouse activity header
      //  -> pWarehouseActivityHeader: The header

      mWarehousePrintoutHeader.SetWarehouseActivityHeader(pWarehouseActivityHeader);
    END;

    PROCEDURE SetRegisteredWhseActivityHdr@1000000015(pRegisteredWhseActivityHdr@1000000000 : Record 5772);
    BEGIN
      //DOC NH2015.4 - Setting registered warehouse activity header
      //  -> pRegisteredWhseActivityHdr: The header

      mWarehousePrintoutHeader.SetRegisteredWhseActivityHdr(pRegisteredWhseActivityHdr);
    END;

    LOCAL PROCEDURE "--- Setting Line ---"@1000000029();
    BEGIN
    END;

    PROCEDURE SetWarehouseShipmentLine@1000000046(pWarehouseShipmentLine@1000000000 : Record 7321);
    BEGIN
      //DOC NH2015.4 - Setting warehouse shipment line
      //  -> pWarehouseShipmentLine: The line

      mWarehousePrintoutLine.SetWarehouseShipmentLine(pWarehouseShipmentLine);
    END;

    PROCEDURE SetPostedWarehouseShipmentLine@1000000004(pPostedWhseShipmentLine@1000000000 : Record 7323);
    BEGIN
      //DOC NH2015.4 - Setting posted warehouse shipment line
      //  -> pPostedWhseShipmentLine: The line

      mWarehousePrintoutLine.SetPostedWarehouseShipmentLine(pPostedWhseShipmentLine);
    END;

    PROCEDURE SetWarehouseReceiptLine@1000000038(pWarehouseReceiptLine@1000000000 : Record 7317);
    BEGIN
      //DOC NH2015.4 - Setting warehouse receipt line
      //  -> pWarehouseReceiptLine: The line

      mWarehousePrintoutLine.SetWarehouseReceiptLine(pWarehouseReceiptLine);
    END;

    PROCEDURE SetPostedWarehouseReceiptLine@1000000009(pPostedWhseReceiptLine@1000000000 : Record 7319);
    BEGIN
      //DOC NH2015.4 - Setting posted warehouse receipt line
      //  -> pPostedWhseReceiptLine: The line

      mWarehousePrintoutLine.SetPostedWarehouseReceiptLine(pPostedWhseReceiptLine);
    END;

    PROCEDURE SetWarehouseActivityLine@1000000028(pWarehouseActivityLine@1000000000 : Record 5767);
    BEGIN
      //DOC NH2015.4 - Setting warehouse activity line
      //  -> pWarehouseActivityHeader: The line

      mWarehousePrintoutLine.SetWarehouseActivityLine(pWarehouseActivityLine);
    END;

    PROCEDURE SetRegisteredWhseActivityLine@1000000027(pRegisteredWhseActivityLine@1000000000 : Record 5773);
    BEGIN
      //DOC NH2015.4 - Setting registered warehouse activity line
      //  -> pRegisteredWhseActivityLine: The line

      mWarehousePrintoutLine.SetRegisteredWhseActivityLine(pRegisteredWhseActivityLine);
    END;

    LOCAL PROCEDURE "--- Getting Line ---"@1000000021();
    BEGIN
    END;

    PROCEDURE GetWarehouseShipmentLine@1000000011(VAR pWarehouseShipmentLine@1000000000 : Record 7321);
    BEGIN
      //DOC NH2015.4 - Getting warehouse shipment line
      //  <> pWarehouseShipmentLine: Target line

      mWarehousePrintoutLine.GetWarehouseShipmentLine(pWarehouseShipmentLine);
    END;

    PROCEDURE GetPostedWarehouseShipmentLine@1000000013(VAR pPostedWhseShipmentLine@1000000000 : Record 7323);
    BEGIN
      //DOC NH2015.4 - Getting posted warehouse shipment line
      //  <> pPostedWhseShipmentLine: Target line

      mWarehousePrintoutLine.GetPostedWarehouseShipmentLine(pPostedWhseShipmentLine);
    END;

    PROCEDURE GetWarehouseReceiptLine@1000000008(VAR pWarehouseReceiptLine@1000000000 : Record 7317);
    BEGIN
      //DOC NH2015.4 - Getting warehouse receipt line
      //  <> pWarehouseReceiptLine: Target line

      mWarehousePrintoutLine.GetWarehouseReceiptLine(pWarehouseReceiptLine);
    END;

    PROCEDURE GetPostedWarehouseReceiptLine@1000000014(VAR pPostedWhseReceiptLine@1000000000 : Record 7319);
    BEGIN
      //DOC NH2015.4 - Getting posted warehouse receipt line
      //  <> pPostedWhseReceiptLine: Target line

      mWarehousePrintoutLine.GetPostedWarehouseReceiptLine(pPostedWhseReceiptLine);
    END;

    PROCEDURE GetWarehouseActivityLine@1000000031(VAR pWarehouseActivityLine@1000000000 : Record 5767);
    BEGIN
      //DOC NH2015.4 - Getting warehouse activity line
      //  <> pWarehouseActivityHeader: Target line

      mWarehousePrintoutLine.GetWarehouseActivityLine(pWarehouseActivityLine);
    END;

    PROCEDURE GetRegisteredWhseActivityLine@1000000040(VAR pRegisteredWhseActivityLine@1000000000 : Record 5773);
    BEGIN
      //DOC NH2015.4 - Getting registered warehouse activity line
      //  -> pRegisteredWhseActivityLine: Target line

      mWarehousePrintoutLine.GetRegisteredWhseActivityLine(pRegisteredWhseActivityLine);
    END;

    PROCEDURE "--- System-Wide ---"@1000000005();
    BEGIN
    END;

    PROCEDURE CompanyShortAddress@1000000003(VAR pCompanyShortAddress@1000000000 : ARRAY [2] OF Text[250]);
    BEGIN
      //DOC TMPM1.04 - Creating company short address
      //  <> pCompanyShortAddress: Target array

      mDocumentPrintoutToolkit.CompanyShortAddress(pCompanyShortAddress);
    END;

    PROCEDURE ReportImages@1000000049(VAR pImage@1000000000 : Record 99008535;pAlternative@1000000002 : Boolean);
    BEGIN
      //DOC TMPM1.04 - Returning report images
      //  <> pImage: Target image
      //  -> pAlternative: Flag to load alternative images

      mDocumentPrintoutToolkit.ReportImages(pImage, pAlternative);
    END;

    PROCEDURE "--- General Information ---"@1000000017();
    BEGIN
    END;

    PROCEDURE LocationAddress@1000000020(VAR pAddress@1000000000 : ARRAY [8] OF Text[90]);
    VAR
      lLocation@1000000001 : Record 14;
    BEGIN
      //DOC NH2015.4 - Returning location address
      //  <> pAddress: Target address array (like in "Format Address" codeunit)

      IF (lLocation.GET(mWarehousePrintoutHeader."Location Code")) THEN
        mDocumentPrintoutToolkit.LocationAddress(lLocation, pAddress)
      ELSE
        CLEAR(pAddress);
    END;

    PROCEDURE ContactInformation@1000000006(VAR pContact@1000000000 : Record 5050);
    VAR
      lLocation@1000000002 : Record 14;
      lLocationContact@1000000001 : Record 5050;
    BEGIN
      //DOC NH2015.4 - Returning contact information
      //  <> pContact: Target contact record

      IF (lLocation.GET(mWarehousePrintoutHeader."Location Code")) THEN
        mDocumentPrintoutToolkit.LocationToContact(lLocation, lLocationContact);

      mDocumentPrintoutToolkit.ContactInformation('', '', lLocationContact, pContact);
    END;

    LOCAL PROCEDURE "--- Texts ---"@1000000018();
    BEGIN
    END;

    PROCEDURE ShipmentMethodText@1000000024() : Text;
    BEGIN
      //DOC TMPM1.04 - Returning shipment method text
      //  <- The text

      EXIT(mDocumentPrintoutToolkit.ShipmentMethodText(mWarehousePrintoutHeader."Shipment Method Code"));
    END;

    PROCEDURE ShippingAgentText@1000000032() : Text;
    BEGIN
      //DOC TMPM1.04 - Returning shipping agent text
      //  <- The text

      EXIT(mDocumentPrintoutToolkit.ShippingAgentText(mWarehousePrintoutHeader."Shipping Agent Code"));
    END;

    PROCEDURE ShippingAgentServiceText@1000000034() : Text;
    VAR
      eText@1000000004 : TextConst 'ENU=%1 - %2;ENG=%1 - %2';
    BEGIN
      //DOC TMPM1.04 - Returning shipping agent service text
      //  <- The text

      EXIT(mDocumentPrintoutToolkit.ShippingAgentServiceText(mWarehousePrintoutHeader."Shipping Agent Code",
        mWarehousePrintoutHeader."Shipping Agent Service Code"));
    END;

    PROCEDURE AssignedUserText@1000000022() : Text;
    BEGIN
      //DOC NH2015.4 - Returning assigned user text
      //  <- The text

      EXIT(mDocumentPrintoutToolkit.UserText(mWarehousePrintoutHeader."Assigned User ID"));
    END;

    PROCEDURE "--- Copy Tools ---"@1000000012();
    BEGIN
    END;

    PROCEDURE FilterCopy@1000000016(pCopies@1000000000 : Integer;VAR pCopy@1000000001 : Record 2000000026);
    BEGIN
      //DOC TMPM1.00 - Filtering copies recordset (Integer)
      //  -> pCopies: Number of copies
      //  <> pCopy: Copies recordset (Integer) to filter

      mDocumentPrintoutToolkit.FilterCopy(pCopies, pCopy);
    END;

    PROCEDURE NextCopy@1000000019(pCopy@1000000000 : Record 2000000026;VAR pCopyText@1000000001 : Text[10]);
    BEGIN
      //DOC TMPM1.00 - Next copy
      //  -> pCopy: Copy record (Integer)
      //  <> pCopyText: Target copy text

      mDocumentPrintoutToolkit.NextCopy(pCopy, pCopyText);
    END;

    PROCEDURE "--- Line Tools ---"@1000000002();
    BEGIN
    END;

    PROCEDURE ClearLineIndex@1000000007();
    BEGIN
      //DOC TMPM1.00 - Clearing line index

      mDocumentPrintoutToolkit.ClearLineIndex();
    END;

    PROCEDURE NextLineIndex@1000000033(VAR pLineIndex@1000000002 : Integer;VAR pLineIndexText@1000000001 : Text[10]);
    BEGIN
      //DOC TMPM1.00 - Processing line index
      //  <> pLineIndex: Target line index
      //  <> pLineIndexText: Target line index text

      mDocumentPrintoutToolkit.NextLineIndex(mType::Item, pLineIndex, pLineIndexText);
    END;

    PROCEDURE LineDescription@1000000010() : Text;
    BEGIN
      //DOC NH2015.4 - Returning line description
      //  <- The description

      EXIT(mDocumentPrintoutToolkit.LineDescription(mWarehousePrintoutLine.Description, mWarehousePrintoutLine."Description 2"));
    END;

    PROCEDURE LineInternalInformation@1000000039(pShowInternalInformation@1000000001 : Boolean);
    BEGIN
      //DOC NH2015.2 - Amending sales line internal information
      //  -> pShowInternalInformation: Show internal information flag

      mType := mType::Item;
      mDocumentPrintoutToolkit.LineInternalInformation(pShowInternalInformation, mType, mWarehousePrintoutLine."Item No.");
    END;

    LOCAL PROCEDURE "--- Warehouse Activity ---"@1000000023();
    BEGIN
    END;

    PROCEDURE CollectWarehouseActivityLines@1000000030(pActivityType@1000000000 : Integer;pActivityNo@1000000001 : Code[20];pSumUpLines@1000000002 : Boolean);
    VAR
      lWarehouseActivityLine@1000000003 : Record 5767;
      lWarehousePrintoutLine@1000000004 : Record 9062326;
    BEGIN
      //DOC NH2015.4 - Collecting warehouse activity lines
      //  -> pActivityType: Activity type
      //  -> pActivityNo: Activity no.
      //  -> pSumUpLines: Flag to sum up lines

      ClearLineBuffer();

      lWarehouseActivityLine.RESET();
      lWarehouseActivityLine.SETRANGE("Activity Type", pActivityType);
      lWarehouseActivityLine.SETRANGE("No.", pActivityNo);
      IF (lWarehouseActivityLine.FINDSET()) THEN
      REPEAT
        lWarehousePrintoutLine.SetWarehouseActivityLine(lWarehouseActivityLine);
        AddToLineBuffer(lWarehousePrintoutLine, pSumUpLines);
      UNTIL (lWarehouseActivityLine.NEXT() = 0);
    END;

    LOCAL PROCEDURE ClearLineBuffer@1000000037();
    BEGIN
      //DOC NH2015.4 - Clearing lines buffer

      mWarehousePrintoutLine.RESET();
      mWarehousePrintoutLine.DELETEALL();
    END;

    LOCAL PROCEDURE AddToLineBuffer@1000000041(pWarehousePrintoutLine@1000000000 : Record 9062326;pSumUpLines@1000000001 : Boolean);
    BEGIN
      //DOC NH2015.4 - Adding to lines buffer
      //  -> pWarehousePrintoutLine: The line to add
      //  -> pSumUpLines: Flag to sum up lines

      IF (pSumUpLines) THEN
      BEGIN
        mWarehousePrintoutLine.RESET();
        mWarehousePrintoutLine.SETCURRENTKEY("Activity Type", "No.", "Bin Code", "Breakbulk No.", "Action Type");
        mWarehousePrintoutLine.SETRANGE("Activity Type", pWarehousePrintoutLine."Activity Type");
        mWarehousePrintoutLine.SETRANGE("No.", pWarehousePrintoutLine."No.");
        mWarehousePrintoutLine.SETRANGE("Action Type", pWarehousePrintoutLine."Action Type");
        mWarehousePrintoutLine.SETRANGE("Bin Code", pWarehousePrintoutLine."Bin Code");
        mWarehousePrintoutLine.SETRANGE("Item No.", pWarehousePrintoutLine."Item No.");
        mWarehousePrintoutLine.SETRANGE("Variant Code", pWarehousePrintoutLine."Variant Code");
        mWarehousePrintoutLine.SETRANGE("Unit of Measure Code", pWarehousePrintoutLine."Unit of Measure Code");
        mWarehousePrintoutLine.SETRANGE("Due Date", pWarehousePrintoutLine."Due Date");
        IF (mWarehousePrintoutLine.FINDFIRST()) THEN
        BEGIN
          mWarehousePrintoutLine."Qty. (Base)" += pWarehousePrintoutLine."Qty. (Base)";
          mWarehousePrintoutLine."Qty. to Handle" += pWarehousePrintoutLine."Qty. to Handle";
          mWarehousePrintoutLine."Source No." := '';
          mWarehousePrintoutLine.MODIFY();
        END
        ELSE
        BEGIN
          mWarehousePrintoutLine := pWarehousePrintoutLine;
          mWarehousePrintoutLine.INSERT();
        END;
      END
      ELSE
      BEGIN
        mWarehousePrintoutLine := pWarehousePrintoutLine;
        mWarehousePrintoutLine.INSERT();
      END;
    END;

    PROCEDURE ResetLineBuffer@1000000045() : Boolean;
    BEGIN
      //DOC NH2015.4 - Resetting lines buffer
      //  <- TRUE = There is something in the buffer, FALSE = Not

      mWarehousePrintoutLine.RESET();
      EXIT ( NOT (mWarehousePrintoutLine.ISEMPTY));
    END;

    PROCEDURE NextLineBuffer@1000000047(pNumber@1000000000 : Integer) : Boolean;
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NH2015.4 - Moving to a next line buffer
      //  -> pNumber: Recordset (Integer) number
      //  <- TRUE = Next line buffer found, FALSE = Not

      IF (pNumber = 1) THEN
        lResult := mWarehousePrintoutLine.FINDSET()
      ELSE
        lResult := (mWarehousePrintoutLine.NEXT() <> 0);

      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Formatting ---"@1000000042();
    BEGIN
    END;

    PROCEDURE FormatDate@1000000036(pDate@1000000000 : Date) : Text;
    BEGIN
      //DOC NH2015.4 - Formatting date
      //  -> pDate: Date to format
      //  <- Formatted date

      EXIT(mDocumentPrintoutToolkit.FormatDate(pDate));
    END;

    PROCEDURE FormatTime@1000000035(pTime@1000000000 : Time) : Text;
    BEGIN
      //DOC NH2015.4 - Formatting time
      //  -> pTime: Time to format
      //  <- Formatted time

      EXIT(mDocumentPrintoutToolkit.FormatTime(pTime));
    END;

    PROCEDURE FormatDateTime@1000000025(pDateTime@1000000000 : DateTime) : Text;
    BEGIN
      //DOC NH2015.4 - Formatting datetime
      //  -> pDateTime: Datetime to format
      //  <- Formatted datetime

      EXIT(mDocumentPrintoutToolkit.FormatDateTime(pDateTime));
    END;

    BEGIN
    {
      //DOC NH2015.1 JH 27/05/2014 - Created
      //DOC NH2015.4 JH 07/12/2014 - Purchase documents support added
      //DOC NH2016.4 JH 23/09/2015 - Upgraded to 2016
    }
    END.
  }
}

