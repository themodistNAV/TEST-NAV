OBJECT Table 9086962 nF. Permission Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20/10/16;
    Time=[ 3:51:08 PM];
    Version List=NF2016.17;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=[ENU=nForcement Permission Buffer;
               ENG=nForcement Permission Buffer];
  }
  FIELDS
  {
    { 1   ;   ;Object Type         ;Option        ;OnValidate=VAR
                                                                lIsTable@1000000000 : Boolean;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Object Type;
                                                              ENG=Object Type];
                                                   OptionCaptionML=[ENU=" ,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System";
                                                                    ENG=" ,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System"];
                                                   OptionString=[ ,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System] }
    { 2   ;   ;Object ID           ;Integer       ;TableRelation=IF (Object Type=CONST(Table)) AllObj."Object ID" WHERE (Object Type=CONST(Table))
                                                                 ELSE IF (Object Type=CONST(Report)) AllObj."Object ID" WHERE (Object Type=CONST(Report))
                                                                 ELSE IF (Object Type=CONST(Codeunit)) AllObj."Object ID" WHERE (Object Type=CONST(Codeunit))
                                                                 ELSE IF (Object Type=CONST(XMLport)) AllObj."Object ID" WHERE (Object Type=CONST(XMLport))
                                                                 ELSE IF (Object Type=CONST(MenuSuite)) AllObj."Object ID" WHERE (Object Type=CONST(MenuSuite))
                                                                 ELSE IF (Object Type=CONST(Page)) AllObj."Object ID" WHERE (Object Type=CONST(Page))
                                                                 ELSE IF (Object Type=CONST(Query)) AllObj."Object ID" WHERE (Object Type=CONST(Query))
                                                                 ELSE IF (Object Type=CONST(System)) AllObj."Object ID" WHERE (Object Type=CONST(System));
                                                   CaptionML=[ENU=Object ID;
                                                              ENG=Object ID] }
    { 10  ;   ;Give / Take Read    ;Option        ;CaptionML=[ENU=Give / Take Read;
                                                              ENG=Give / Take Read];
                                                   OptionCaptionML=[ENU=" ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect";
                                                                    ENG=" ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect"];
                                                   OptionString=[ ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect] }
    { 11  ;   ;Give / Take Insert  ;Option        ;CaptionML=[ENU=Give / Take Insert;
                                                              ENG=Give / Take Insert];
                                                   OptionCaptionML=[ENU=" ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect";
                                                                    ENG=" ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect"];
                                                   OptionString=[ ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect] }
    { 12  ;   ;Give / Take Modify  ;Option        ;CaptionML=[ENU=Give / Take Modify;
                                                              ENG=Give / Take Modify];
                                                   OptionCaptionML=[ENU=" ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect";
                                                                    ENG=" ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect"];
                                                   OptionString=[ ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect] }
    { 13  ;   ;Give / Take Delete  ;Option        ;CaptionML=[ENU=Give / Take Delete;
                                                              ENG=Give / Take Delete];
                                                   OptionCaptionML=[ENU=" ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect";
                                                                    ENG=" ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect"];
                                                   OptionString=[ ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect] }
    { 14  ;   ;Give / Take Execute ;Option        ;CaptionML=[ENU=Give / Take Execute;
                                                              ENG=Give / Take Execute];
                                                   OptionCaptionML=[ENU=" ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect";
                                                                    ENG=" ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect"];
                                                   OptionString=[ ,Give (Everything),Give,Give (Forced),Give (Filtered),,,,,,,Take Away,Take Away (Forced),Take Away (Provisional),Incorrect] }
    { 20  ;   ;Record Filter View  ;Text250       ;CaptionML=[ENU=Record Filter View;
                                                              ENG=Record Filter View] }
    { 21  ;   ;Record Filter View 2;Text250       ;CaptionML=[ENU=Record Filter View 2;
                                                              ENG=Record Filter View 2] }
    { 22  ;   ;Record Filter View 3;Text250       ;CaptionML=[ENU=Record Filter View 3;
                                                              ENG=Record Filter View 3] }
    { 23  ;   ;Record Filter View 4;Text250       ;CaptionML=[ENU=Record Filter View 4;
                                                              ENG=Record Filter View 4] }
    { 24  ;   ;Record Filter View 5;Text250       ;CaptionML=[ENU=Record Filter View 5;
                                                              ENG=Record Filter View 5] }
    { 30  ;   ;Permission Type     ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Permission Type;
                                                              ENG=Permission Type];
                                                   OptionCaptionML=[ENU=" ,Read,Insert,Modify,Delete,Execute";
                                                                    ENG=" ,Read,Insert,Modify,Delete,Execute"];
                                                   OptionString=[ ,Read,Insert,Modify,Delete,Execute] }
  }
  KEYS
  {
    {    ;Object Type,Object ID                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE HasReadPermission@1000000000() : Boolean;
    BEGIN
      ///<summary>Returning if the buffer has read permission</summary>
      ///<returns>The answer</returns>

      EXIT(HasPermission(Rec."Give / Take Read"));
    END;

    PROCEDURE HasInsertPermission@1000000007() : Boolean;
    BEGIN
      ///<summary>Returning if the buffer has insert permission</summary>
      ///<returns>The answer</returns>

      EXIT(HasPermission(Rec."Give / Take Insert"));
    END;

    PROCEDURE HasModifyPermission@1000000006() : Boolean;
    BEGIN
      ///<summary>Returning if the buffer has modify permission</summary>
      ///<returns>The answer</returns>

      EXIT(HasPermission(Rec."Give / Take Modify"));
    END;

    PROCEDURE HasDeletePermission@1000000005() : Boolean;
    BEGIN
      ///<summary>Returning if the buffer has delete permission</summary>
      ///<returns>The answer</returns>

      EXIT(HasPermission(Rec."Give / Take Delete"));
    END;

    PROCEDURE HasExecutePermission@1000000004() : Boolean;
    BEGIN
      ///<summary>Returning if the buffer has execute permission</summary>
      ///<returns>The answer</returns>

      EXIT(HasPermission(Rec."Give / Take Execute"));
    END;

    LOCAL PROCEDURE HasPermission@1000000001(pGiveTake@1000000000 : Option) : Boolean;
    BEGIN
      ///<summary>Answering if the buffer has given permission</summary>
      ///<param name="pGiveTake">Give take</param>
      ///<returns>The answer</returns>

      EXIT(pGiveTake IN [Rec."Give / Take Read"::Give, Rec."Give / Take Read"::"Give (Everything)", Rec."Give / Take Read"::"Give (Forced)"]);
    END;

    PROCEDURE GetRecordFilterView@1000000011() : Text;
    BEGIN
      ///<summary>Returning record filter view</summary>
      ///<returns>The record filter view</returns>

      EXIT(Rec."Record Filter View" + Rec."Record Filter View 2" + Rec."Record Filter View 3" + Rec."Record Filter View 4" + Rec."Record Filter View 5");
    END;

    PROCEDURE SetRecordFilterView@1000000010(pRecordFilterView@1000000000 : Text);
    BEGIN
      ///<summary>Setting record filter view</summary>
      ///<param name="pRecordFilterView">The filter view</param>

      Rec."Record Filter View" := COPYSTR(pRecordFilterView, 1, 250);
      Rec."Record Filter View 2" := COPYSTR(pRecordFilterView, 251, 250);
      Rec."Record Filter View 3" := COPYSTR(pRecordFilterView, 501, 250);
      Rec."Record Filter View 4" := COPYSTR(pRecordFilterView, 751, 250);
      Rec."Record Filter View 5" := COPYSTR(pRecordFilterView, 1001, 24);
    END;

    BEGIN
    {
      ///<summary>Table used only as in-memory buffer for maitaining nForcement permissions</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-07-14">Created</change>
    }
    END.
  }
}

