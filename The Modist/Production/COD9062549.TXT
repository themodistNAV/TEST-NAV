OBJECT Codeunit 9062549 Quick Report Export
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      QuickReportHeader@1000000002 : Record 9062697;
      QuickReportField@1000000013 : Record 9062698;
      QuickReportData@1000000003 : TEMPORARY Record 9062699;
      QuickReportDataRecordRef@1000000015 : RecordRef;
      QuickReportDataFieldRefs@1000000014 : ARRAY [20] OF FieldRef;
      QuickReportDataFields@1000000016 : ARRAY [20] OF Record 9062698;
      QuickReportDataFieldMaxCount@1000000018 : Integer;
      QuickReportDataFieldCount@1000000017 : Integer;
      QuickReportDataFieldAttributes@1000000027 : ARRAY [20] OF Text;
      SystemBehaviour@1000000034 : Record 9062230;
      EnhancedPermissionsMgt@1000000039 : Codeunit 9062277;
      FileSystem@1000000005 : Codeunit 9062264;
      ObjectFieldToolkit@1000000025 : Codeunit 9062343;
      String@1000000010 : Codeunit 9062236;
      TNPUtils@1000000000 : Codeunit 9062229;
      TNPToolkit@1000000001 : Codeunit 9062230;
      XmlToolkit@1000000026 : Codeunit 9062641;
      QuickReportPrintout@1000000006 : Report 9062326;
      FileExtension@1000000022 : Text;
      ServerFilePath@1000000004 : Text;
      tExportQuickReport@1000000009 : TextConst 'ENU=Export Quick Report;ENG=Export Quick Report';
      tExportFilterHTML@1000000008 : TextConst 'ENU=HTML Files (*.HTML)|*.html;ENG=HTML Files (*.HTML)|*.html';
      tUnknownExportFormat@1000000007 : TextConst 'ENU=Unknown export format: %1.;ENG=Unknown export format: %1.';
      ClientFileName@1000000021 : Text;
      FileFilter@1000000020 : Text;
      CsvFormatCode@1000000011 : Code[20];
      Interaction@1000000012 : Boolean;
      EndOfLine@1000000019 : Text[2];
      FieldBufferTableId@1000000023 : Integer;
      FieldBuffer@1000000024 : Record 9062730;
      Grouping@1000000028 : Boolean;
      XmlFullContent@1000000031 : Boolean;
      XmlElementsFormat@1000000030 : Boolean;
      XmlAskForOptions@1000000029 : Boolean;
      tTimeFormat@1000000032 : TextConst 'ENU=<Hours24>:<Minutes,2>:<Seconds,2>;ENG=<Hours24>:<Minutes,2>:<Seconds,2>';
      tHtmlResourceSysB@1000000033 : TextConst 'ENU=QR_HTML_RESOURCE;ENG=QR_HTML_RESOURCE';
      tHtmlResourceCode@1000000035 : TextConst 'ENU=QUICK REPORT;ENG=QUICK REPORT';
      Text@1000000036 : BigText;
      NewLine@1000000037 : Text;
      ExportTarget@1000000038 : Option;

    LOCAL PROCEDURE "--- General ---"@1000000006();
    BEGIN
    END;

    PROCEDURE ExportTo@1000000001(pQuickReportHeader@1000000001 : Record 9062697;pExportFormat@1000000000 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to specified format (with user interaction)
      //  -> pQuickReportHeader: The quick report header
      //  -> pExportFormat: Export format
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportToFileInternal(pQuickReportHeader, pExportFormat, ''));
    END;

    PROCEDURE ExportToFile@1000000029(pQuickReportHeader@1000000001 : Record 9062697;pExportFormat@1000000000 : Integer;pFilePath@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to specified format and specified file
      //  -> pQuickReportHeader: The quick report header
      //  -> pExportFormat: Export format
      //  -> pFilePath: The file path
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportToFileInternal(pQuickReportHeader, pExportFormat, pFilePath));
    END;

    PROCEDURE ExportDataTo@1000000035(VAR pQuickReportData@1000000000 : Record 9062699;pExportFormat@1000000001 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to specified format (with user interaction)
      //  <> pQuickReportData: The data
      //  -> pExportFormat: Export format
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportDataToFileInternal(pQuickReportData, pExportFormat, ''));
    END;

    PROCEDURE ExportDataToFile@1000000030(VAR pQuickReportData@1000000000 : Record 9062699;pExportFormat@1000000001 : Integer;pFilePath@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to specified format and specified file
      //  <> pQuickReportData: The data
      //  -> pExportFormat: Export format
      //  -> pFilePath: The file path
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportDataToFileInternal(pQuickReportData, pExportFormat, pFilePath));
    END;

    LOCAL PROCEDURE "--- Internal ---"@1000000021();
    BEGIN
    END;

    LOCAL PROCEDURE ExportToFileInternal@1000000023(pQuickReportHeader@1000000001 : Record 9062697;pExportFormat@1000000000 : Integer;pFilePath@1000000003 : Text) : Boolean;
    VAR
      lQuickReportData@1000000002 : TEMPORARY Record 9062699;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to specified format
      //  -> pQuickReportHeader: The quick report header
      //  -> pExportFormat: Export format
      //  -> pFilePath: Target file path
      //  <- TRUE = Exported, FALSE = Not

      EnhancedPermissionsMgt.CheckQuickReportExecutePermission(pQuickReportHeader, USERID());
      GetData(pQuickReportHeader, lQuickReportData);
      EXIT(ExportDataToFileInternal(lQuickReportData, pExportFormat, pFilePath));
    END;

    LOCAL PROCEDURE ExportDataToFileInternal@1000000022(VAR pQuickReportData@1000000000 : Record 9062699;pExportFormat@1000000001 : Integer;pFilePath@1000000002 : Text) : Boolean;
    VAR
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report data to specified format
      //  <> pQuickReportData: The data
      //  -> pExportFormat: Export format
      //  -> pFilePath: Target file path
      //  <- TRUE = Exported, FALSE = Not

      Interaction := (pFilePath = '');

      //DOC NA2016.15 >>
      IF (pQuickReportData.ISTEMPORARY) THEN
        QuickReportData.COPY(pQuickReportData, TRUE)
      ELSE BEGIN
        QuickReportData.RESET();
        QuickReportData.DELETEALL();
        IF (pQuickReportData.FINDSET()) THEN BEGIN
          REPEAT
            QuickReportData.TRANSFERFIELDS(pQuickReportData);
            QuickReportData.INSERT();
          UNTIL (pQuickReportData.NEXT() = 0);
        END;
      END;
      //DOC NA2016.15 <<

      GetHeader(QuickReportData, QuickReportHeader);
      EnhancedPermissionsMgt.CheckQuickReportExecutePermission(QuickReportHeader, USERID());

      IF (Interaction) THEN
      BEGIN
        FileExtension := ExportFileExtension(pExportFormat);
        ServerFilePath := ExportServerFilePath(FileExtension);
      END
      ELSE
        ServerFilePath := pFilePath;

      CLEAR(lResult);
      CASE (pExportFormat) OF
        QuickReportHeader."Export Format"::XML:
          lResult := ExportToXmlFileInternal();
        QuickReportHeader."Export Format"::Excel:
          lResult := ExportToExcelFileInternal();
        QuickReportHeader."Export Format"::PDF:
          lResult := ExportToPdfFileInternal();
        QuickReportHeader."Export Format"::Word:
          lResult := ExportToWordFileInternal();
        QuickReportHeader."Export Format"::HTML:
          lResult := ExportToHtmlFileInternal();
        QuickReportHeader."Export Format"::CSV:
          lResult := ExportToCsvFileInternal();
      END;

      IF ((lResult) AND (Interaction)) THEN
      BEGIN
        ClientFileName := ExportClientFileName(FileExtension);
        IF (FileFilter = '') THEN
          FileFilter := ExportFileFilter(pExportFormat);
        FileSystem.DownloadWithInteraction(TRUE, ServerFilePath, ClientFileName, '', FileFilter);
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE ExportToTextInternal@1000000095(pQuickReportHeader@1000000001 : Record 9062697;pExportFormat@1000000000 : Integer;VAR pText@1000000003 : BigText) : Boolean;
    VAR
      lQuickReportData@1000000002 : TEMPORARY Record 9062699;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to specified format text
      //  -> pQuickReportHeader: The quick report header
      //  -> pExportFormat: Export format
      //  <> pText: Target text
      //  <- TRUE = Exported, FALSE = Not

      EnhancedPermissionsMgt.CheckQuickReportExecutePermission(pQuickReportHeader, USERID());
      GetData(pQuickReportHeader, lQuickReportData);
      EXIT(ExportDataToTextInternal(lQuickReportData, pExportFormat, pText));
    END;

    LOCAL PROCEDURE ExportDataToTextInternal@1000000094(VAR pQuickReportData@1000000000 : Record 9062699;pExportFormat@1000000001 : Integer;VAR pText@1000000004 : BigText) : Boolean;
    VAR
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report data to specified format text
      //  <> pQuickReportData: The data
      //  -> pExportFormat: Export format
      //  <> pText: Target text
      //  <- TRUE = Exported, FALSE = Not

      QuickReportData.COPY(pQuickReportData, TRUE);
      GetHeader(QuickReportData, QuickReportHeader);
      EnhancedPermissionsMgt.CheckQuickReportExecutePermission(QuickReportHeader, USERID());

      CLEAR(lResult);
      CASE (pExportFormat) OF
        QuickReportHeader."Export Format"::XML:
          lResult := ExportToXmlTextInternal(pText);
        QuickReportHeader."Export Format"::HTML:
          lResult := ExportToHtmlTextInternal(pText);
        QuickReportHeader."Export Format"::CSV:
          lResult := ExportToCsvTextInternal(pText);
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- XML ---"@1000000003();
    BEGIN
    END;

    PROCEDURE ExportToXml@1000000038(pQuickReportHeader@1000000001 : Record 9062697;pFullContent@1000000002 : Boolean;pElementsFormat@1000000000 : Boolean) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to XML (with user interaction)
      //  -> pQuickReportHeader: The quick report header
      //  -> pFullContent: Flag to generate full content
      //  -> pElementsFormat: Flag to use "elements" format
      //  <- TRUE = Exported, FALSE = Not

      XmlFullContent := pFullContent;
      XmlElementsFormat := pElementsFormat;
      XmlAskForOptions := TRUE;
      EXIT(ExportToFileInternal(pQuickReportHeader, QuickReportHeader."Export Format"::XML, ''));
    END;

    PROCEDURE ExportToXmlFile@1000000036(pQuickReportHeader@1000000001 : Record 9062697;pFullContent@1000000003 : Boolean;pElementsFormat@1000000000 : Boolean;pFilePath@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to specified XML file
      //  -> pQuickReportHeader: The quick report header
      //  -> pFullContent: Flag to generate full content
      //  -> pElementsFormat: Flag to use "elements" format
      //  -> pFilePath: The file path
      //  <- TRUE = Exported, FALSE = Not

      XmlFullContent := pFullContent;
      XmlElementsFormat := pElementsFormat;
      XmlAskForOptions := TRUE;
      EXIT(ExportToFileInternal(pQuickReportHeader, QuickReportHeader."Export Format"::XML, pFilePath));
    END;

    PROCEDURE ExportToXmlText@1000000111(pQuickReportHeader@1000000001 : Record 9062697;pFullContent@1000000003 : Boolean;pElementsFormat@1000000000 : Boolean;VAR pText@1000000002 : BigText) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to specified XML text
      //  -> pQuickReportHeader: The quick report header
      //  -> pFullContent: Flag to generate full content
      //  -> pElementsFormat: Flag to use "elements" format
      //  <> pText: Target text
      //  <- TRUE = Exported, FALSE = Not

      XmlFullContent := pFullContent;
      XmlElementsFormat := pElementsFormat;
      XmlAskForOptions := TRUE;
      EXIT(ExportToTextInternal(pQuickReportHeader, QuickReportHeader."Export Format"::XML, pText));
    END;

    PROCEDURE ExportDataToXml@1000000034(VAR pQuickReportData@1000000000 : Record 9062699;pFullContent@1000000002 : Boolean;pElementsFormat@1000000001 : Boolean) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to XML (with user interaction)
      //  <> pQuickReportData: The data
      //  -> pFullContent: Flag to generate full content
      //  -> pElementsFormat: Flag to use "elements" format
      //  <- TRUE = Exported, FALSE = Not

      XmlFullContent := pFullContent;
      XmlElementsFormat := pElementsFormat;
      XmlAskForOptions := TRUE;
      EXIT(ExportDataToFileInternal(pQuickReportData, QuickReportHeader."Export Format"::XML, ''));
    END;

    PROCEDURE ExportDataToXmlFile@1000000033(VAR pQuickReportData@1000000000 : Record 9062699;pFilePath@1000000002 : Text;pFullContent@1000000003 : Boolean;pElementsFormat@1000000001 : Boolean) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to specified XML file
      //  <> pQuickReportData: The data
      //  -> pFilePath: The file path
      //  -> pFullContent: Flag to generate full content
      //  -> pElementsFormat: Flag to use "elements" format
      //  <- TRUE = Exported, FALSE = Not

      XmlFullContent := pFullContent;
      XmlElementsFormat := pElementsFormat;
      XmlAskForOptions := FALSE;
      EXIT(ExportDataToFileInternal(pQuickReportData, QuickReportHeader."Export Format"::XML, pFilePath));
    END;

    PROCEDURE ExportDataToXmlText@1000000113(VAR pQuickReportData@1000000000 : Record 9062699;pFullContent@1000000003 : Boolean;pElementsFormat@1000000001 : Boolean;VAR pText@1000000004 : BigText) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to specified XML text
      //  <> pQuickReportData: The data
      //  -> pFullContent: Flag to generate full content
      //  -> pElementsFormat: Flag to use "elements" format
      //  <> pText: Target text
      //  <- TRUE = Exported, FALSE = Not

      XmlFullContent := pFullContent;
      XmlElementsFormat := pElementsFormat;
      XmlAskForOptions := FALSE;
      EXIT(ExportDataToTextInternal(pQuickReportData, QuickReportHeader."Export Format"::XML, pText));
    END;

    LOCAL PROCEDURE ExportToXmlFileInternal@1000000004() : Boolean;
    VAR
      lXmlDocument@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      //DOC NA2016.14 - Exporting quick report to XML file (internal)
      //  <- Result (TRUE = Proceed with export, FALSE = Don't bother)

      IF ( NOT (ExportToXmlDocument(lXmlDocument, XmlFullContent, XmlElementsFormat, XmlAskForOptions))) THEN
        EXIT(FALSE);

      lXmlDocument.Save(ServerFilePath);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ExportToXmlTextInternal@1000000105(VAR pText@1000000001 : BigText) : Boolean;
    VAR
      lXmlDocument@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      //DOC NA2016.14 - Exporting quick report to XML text (internal)
      //  <> pText: Target text
      //  <- Result (TRUE = Proceed with export, FALSE = Don't bother)

      IF ( NOT (ExportToXmlDocument(lXmlDocument, XmlFullContent, XmlElementsFormat, XmlAskForOptions))) THEN
        EXIT(FALSE);

      CLEAR(pText);
      pText.ADDTEXT(lXmlDocument.OuterXml());

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ExportToXmlDocument@1000000069(VAR pXmlDocument@1000000003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";pFullContent@1000000007 : Boolean;pElementsFormat@1000000006 : Boolean;pAskForOptions@1000000005 : Boolean) : Boolean;
    VAR
      lQuickReportXmlOptions@1000000000 : Report 9062346;
      lXmlReportElement@1000000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      lXmlDataElement@1000000002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      lXmlCompanyInformationElement@1000000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      //DOC NA2016.14 - Exporting quick report to XML document
      //  <> pXmlDocument: Target XML document
      //  -> pFullContent: Flag to generate full content
      //  -> pElementsFormat: Flag to use "elements" format
      //  -> pAskForOptions: Flag to ask for options
      //  <- TRUE = Exported, FALSE = Cancelled

      IF (pAskForOptions) THEN
      BEGIN
        lQuickReportXmlOptions.Initialise(pFullContent, pElementsFormat);
        lQuickReportXmlOptions.RUNMODAL();
        IF ( NOT (lQuickReportXmlOptions.GetOk())) THEN
          EXIT(FALSE);
        pFullContent := lQuickReportXmlOptions.GetFullContent();
        pElementsFormat := lQuickReportXmlOptions.GetElementsFormat();
      END;

      XmlFullContent := pFullContent;
      XmlElementsFormat := pElementsFormat;

      InitialiseDataRefs();
      InitialiseXmlDocument(pXmlDocument,lXmlReportElement, lXmlDataElement, lXmlCompanyInformationElement);
      AddReportHeaderToXml(pXmlDocument, lXmlReportElement);
      AddReportFieldsToXml(pXmlDocument, lXmlReportElement);
      AddReportFilterToXml(pXmlDocument, lXmlReportElement);
      REPEAT
        QuickReportDataRecordRef.GETTABLE(QuickReportData);
        AddDataToXml(pXmlDocument, lXmlDataElement);
      UNTIL (QuickReportData.NEXT() = 0);
      AddCompanyInformationToXml(pXmlDocument, lXmlCompanyInformationElement);
      FinaliseDataRefs();

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InitialiseXmlDocument@1000000057(VAR pXmlDocument@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR pXmlReportElement@1000000002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";VAR pXmlDataElement@1000000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";VAR pXmlCompanyInformationElement@1000000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      lXmlRootElement@1000000003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      lFieldIndex@1000000004 : Integer;
    BEGIN
      //DOC NA2016.14 - Initialising XML document
      //  <> pXmlDocument: The document
      //  <> pXmlReportElement: Target "Report" element
      //  <> pXmlDataElement: Target "Data" element
      //  <> pXmlCompanyInformationElement: Target "Company Information" element

      pXmlDocument := pXmlDocument.XmlDocument();
      pXmlDocument.CreateXmlDeclaration('1.0', 'UTF-8', '');
      AddXmlElement(pXmlDocument, pXmlDocument, 'QuickReport', lXmlRootElement);
      AddXmlElement(pXmlDocument, lXmlRootElement, 'Report', pXmlReportElement);
      AddXmlElement(pXmlDocument, lXmlRootElement, 'Data', pXmlDataElement);
      IF (XmlFullContent) THEN
        AddXmlElement(pXmlDocument, lXmlRootElement, 'CompanyInformation', pXmlCompanyInformationElement);

      FOR lFieldIndex := 1 TO QuickReportDataFieldCount DO
        QuickReportDataFieldAttributes[lFieldIndex] := XmlToolkit.ToAttributeName(QuickReportDataFields[lFieldIndex].Caption);
    END;

    LOCAL PROCEDURE AddReportHeaderToXml@1000000066(VAR pXmlDocument@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR pXmlReportElement@1000000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      lRecordRef@1000000002 : RecordRef;
    BEGIN
      //DOC NA2016.14 - Exporting report header to XML
      //  <> pXmlDocument: XML document
      //  <> pXmlReportElement: "Report" element

      InitialiseFieldBuffer(DATABASE::"Quick Report Header");
      AddToFieldBuffer(QuickReportHeader.FIELDNO(Code));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("Copied From"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO(Name));
      AddToFieldBuffer(QuickReportHeader.FIELDNO(Description));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("User ID"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("Data From"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("Data From Name"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("Table ID"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("Table Name"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("Criteria Description"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("NAV Query ID"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("NAV Query Name"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("SQL Query Code"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("SQL Query Description"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("Report Table ID"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("Report Table Name"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("Report Table Key 1 ID"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("Report Table Key 1 Name"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("Report Table Key 2 ID"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("Report Table Key 2 Name"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("Report Table Key 3 ID"));
      AddToFieldBuffer(QuickReportHeader.FIELDNO("Report Table Key 3 Name"));

      lRecordRef.OPEN(DATABASE::"Quick Report Header");
      lRecordRef.GETTABLE(QuickReportHeader);
      AddFieldsAsXmlAttributes(pXmlDocument, pXmlReportElement, lRecordRef);
      lRecordRef.CLOSE();
    END;

    LOCAL PROCEDURE AddReportFieldsToXml@1000000061(VAR pXmlDocument@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR pXmlReportElement@1000000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      lXmlFieldsElement@1000000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      lXmlFieldElement@1000000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      lXmlFieldXmlNameElement@1000000007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      lRecordRef@1000000002 : RecordRef;
      lFieldIndex@1000000003 : Integer;
      lXmlName@1000000008 : Text;
    BEGIN
      //DOC NA2016.14 - Adding report fields to XML
      //  <> pXmlDocument: XML document
      //  <> pXmlReportElement: "Report" element

      AddXmlElement(pXmlDocument, pXmlReportElement, 'Fields', lXmlFieldsElement);

      InitialiseFieldBuffer(DATABASE::"Quick Report Field");
      AddToFieldBuffer(QuickReportField.FIELDNO("Field From"));
      AddToFieldBuffer(QuickReportField.FIELDNO("Field Type"));
      AddToFieldBuffer(QuickReportField.FIELDNO("Field ID"));
      AddToFieldBuffer(QuickReportField.FIELDNO("Field Name"));
      AddToFieldBuffer(QuickReportField.FIELDNO("Quick Report Data Type"));
      AddToFieldBuffer(QuickReportField.FIELDNO("Data Type Conversion"));
      AddToFieldBuffer(QuickReportField.FIELDNO("Field Length"));
      AddToFieldBuffer(QuickReportField.FIELDNO(FlowField));
      AddToFieldBuffer(QuickReportField.FIELDNO(Caption));
      AddToFieldBuffer(QuickReportField.FIELDNO(Blocked));
      AddToFieldBuffer(QuickReportField.FIELDNO(Sequence));
      AddToFieldBuffer(QuickReportField.FIELDNO(Grouping));
      AddToFieldBuffer(QuickReportField.FIELDNO(Sorting));
      AddToFieldBuffer(QuickReportField.FIELDNO(Index));
      AddToFieldBuffer(QuickReportField.FIELDNO("Data Field ID"));
      AddToFieldBuffer(QuickReportField.FIELDNO("Data Field ID (Compact)"));
      AddToFieldBuffer(QuickReportField.FIELDNO(Editable));
      AddToFieldBuffer(QuickReportField.FIELDNO("Field Filter Description"));

      lRecordRef.OPEN(DATABASE::"Quick Report Field");
      FOR lFieldIndex := 1 TO QuickReportDataFieldCount DO
      BEGIN
        QuickReportField := QuickReportDataFields[lFieldIndex];
        lXmlName := XmlToolkit.ToElementName(QuickReportField.Caption);
        lRecordRef.GETTABLE(QuickReportField);
        AddXmlElement(pXmlDocument, lXmlFieldsElement, 'Field', lXmlFieldElement);
        AddXmlAttribute(pXmlDocument, lXmlFieldElement, 'XmlName', lXmlName);
        AddFieldsAsXmlAttributes(pXmlDocument, lXmlFieldElement, lRecordRef);
      END;
      lRecordRef.CLOSE();
    END;

    LOCAL PROCEDURE AddReportFilterToXml@1000000087(VAR pXmlDocument@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR pXmlReportElement@1000000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      lXmlFilterElement@1000000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      eDataFilter@1000000002 : TextConst 'ENU=Data Filter;ENG=Data Filter';
      eUser@1000000003 : TextConst 'ENU=User;ENG=User';
      eWorkdate@1000000005 : TextConst 'ENU=Workdate;ENG=Workdate';
    BEGIN
      //DOC NA2016.14 - Adding report filter to XML
      //  <> pXmlDocument: XML document
      //  <> pXmlReportElement: "Report" element

      IF ( NOT (XmlFullContent)) THEN
        EXIT;

      QuickReportHeader.CALCFIELDS("Criteria Description");

      AddXmlElement(pXmlDocument, pXmlReportElement, 'Filter', lXmlFilterElement);
      AddXmlAttribute(pXmlDocument, lXmlFilterElement, 'DataFromCaption', QuickReportHeader.FIELDCAPTION("Data From"));
      AddXmlAttribute(pXmlDocument, lXmlFilterElement, 'DataFrom', QuickReportHeader.GetDataFromText());
      AddXmlAttribute(pXmlDocument, lXmlFilterElement, 'DataFilterCaption', eDataFilter);
      AddXmlAttribute(pXmlDocument, lXmlFilterElement, 'DataFilter', QuickReportHeader."Criteria Description");
      AddXmlAttribute(pXmlDocument, lXmlFilterElement, 'UserCaption', eUser);
      AddXmlAttribute(pXmlDocument, lXmlFilterElement, 'User', USERID());
      AddXmlAttribute(pXmlDocument, lXmlFilterElement, 'WorkdateCaption', eWorkdate);
      AddXmlAttribute(pXmlDocument, lXmlFilterElement, 'Workdate', FORMAT(WORKDATE(), 0, 1));
      AddXmlAttribute(pXmlDocument, lXmlFilterElement, 'CurrentDateTime', FORMAT(CURRENTDATETIME, 0, 9));
      AddXmlAttribute(pXmlDocument, lXmlFilterElement, 'CurrentDateTimeText', FORMAT(DT2DATE(CURRENTDATETIME), 0, 1) + ' ' + FORMAT(DT2TIME(CURRENTDATETIME), 0, tTimeFormat));
    END;

    LOCAL PROCEDURE AddDataToXml@1000000065(VAR pXmlDocument@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR pXmlDataElement@1000000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      lXmlDataRowElement@1000000002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      lFieldIndex@1000000003 : Integer;
      lName@1000000004 : Text;
      lValue@1000000005 : Text;
    BEGIN
      //DOC NA2016.14 - Adding data to XML
      //  <> pXmlDocument: XML document
      //  <> pXmlDataElement: "Data" element

      AddXmlElement(pXmlDocument, pXmlDataElement, 'DataRow', lXmlDataRowElement);
      FOR lFieldIndex := 1 TO QuickReportDataFieldCount DO
      BEGIN
        lName := QuickReportDataFieldAttributes[lFieldIndex];
        lValue := FORMAT(QuickReportDataFieldRefs[lFieldIndex].VALUE(), 0, 1);
        AddXmlAttribute(pXmlDocument, lXmlDataRowElement, lName, lValue)
      END;
    END;

    LOCAL PROCEDURE AddCompanyInformationToXml@1000000055(VAR pXmlDocument@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR pXmlCompanyInformationElement@1000000002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      lCompanyInformation@1000000003 : Record 79;
      lDocumentPrintoutToolkit@1000000005 : Codeunit 9062447;
      lRecordRef@1000000004 : RecordRef;
      lShortAddressName@1000000009 : Text;
      lShortAddress@1000000006 : ARRAY [2] OF Text;
      lShortAddressIndex@1000000008 : Integer;
    BEGIN
      //DOC NA2016.14 - Adding company information to XML
      //  <> pXmlDocument: The XML document
      //  <> pXmlCompanyInformationElement: Parent element

      IF ( NOT (XmlFullContent)) THEN
        EXIT;

      InitialiseFieldBuffer(DATABASE::"Company Information");
      AddToFieldBuffer(lCompanyInformation.FIELDNO(Name));
      AddToFieldBuffer(lCompanyInformation.FIELDNO("Name 2"));
      AddToFieldBuffer(lCompanyInformation.FIELDNO(Address));
      AddToFieldBuffer(lCompanyInformation.FIELDNO("Address 2"));
      AddToFieldBuffer(lCompanyInformation.FIELDNO(City));
      AddToFieldBuffer(lCompanyInformation.FIELDNO(County));
      AddToFieldBuffer(lCompanyInformation.FIELDNO("Post Code"));
      AddToFieldBuffer(lCompanyInformation.FIELDNO("Country/Region Code"));
      AddToFieldBuffer(lCompanyInformation.FIELDNO("Phone No."));
      AddToFieldBuffer(lCompanyInformation.FIELDNO("Phone No. 2"));
      AddToFieldBuffer(lCompanyInformation.FIELDNO("Fax No."));
      AddToFieldBuffer(lCompanyInformation.FIELDNO("E-Mail"));
      AddToFieldBuffer(lCompanyInformation.FIELDNO("Home Page"));
      AddToFieldBuffer(lCompanyInformation.FIELDNO("Bank Name"));
      AddToFieldBuffer(lCompanyInformation.FIELDNO("Bank Branch No."));
      AddToFieldBuffer(lCompanyInformation.FIELDNO("Bank Account No."));
      AddToFieldBuffer(lCompanyInformation.FIELDNO("VAT Registration No."));
      AddToFieldBuffer(lCompanyInformation.FIELDNO(IBAN));
      AddToFieldBuffer(lCompanyInformation.FIELDNO("SWIFT Code"));

      lDocumentPrintoutToolkit.CompanyShortAddress(lShortAddress);
      FOR lShortAddressIndex := 1 TO ARRAYLEN(lShortAddress) DO
      BEGIN
        lShortAddressName := 'ShortAddress' + FORMAT(lShortAddressIndex);
        AddXmlAttribute(pXmlDocument, pXmlCompanyInformationElement, lShortAddressName, lShortAddress[lShortAddressIndex]);
      END;

      lCompanyInformation.GET();
      lRecordRef.OPEN(DATABASE::"Company Information");
      lRecordRef.GETTABLE(lCompanyInformation);
      AddFieldsAsXmlAttributes(pXmlDocument, pXmlCompanyInformationElement, lRecordRef);
      lRecordRef.CLOSE();
    END;

    LOCAL PROCEDURE AddXmlElement@1000000068(VAR pXmlDocument@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR pXmlParentNode@1000000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";pElementName@1000000002 : Text;VAR pXmlElement@1000000003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    BEGIN
      //DOC NA2016.14 - Adding XML element
      //  <> pXmlDocument: XML document
      //  <> pXmlParentNode: Parent node
      //  -> pElementName: Element name
      //  <> pXmlElement: Target element

      pXmlElement := pXmlDocument.CreateElement(pElementName);
      pXmlParentNode.AppendChild(pXmlElement);
    END;

    LOCAL PROCEDURE AddXmlAttribute@1000000092(VAR pXmlDocument@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR pXmlElement@1000000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@1000000002 : Text;pAttributeValue@1000000003 : Text);
    VAR
      lXmlElement@1000000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      //DOC NA2016.14 - Adding XML attribute (which can be an element if settings say so)
      //  <> pXmlDocument: XML document
      //  <> pXmlElement: Element to add attribute to
      //  -> pAttributeName: Attribute name
      //  -> pAttributeValue: Attribute value

      IF (XmlElementsFormat) THEN
      BEGIN
        lXmlElement := pXmlDocument.CreateElement(pAttributeName);
        lXmlElement.InnerText := pAttributeValue;
        pXmlElement.AppendChild(lXmlElement);
      END
      ELSE
        pXmlElement.SetAttribute(pAttributeName, pAttributeValue);
    END;

    LOCAL PROCEDURE AddFieldsAsXmlAttributes@1000000067(VAR pXmlDocument@1000000002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR pXmlElement@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";VAR pRecordRef@1000000001 : RecordRef);
    VAR
      XmlToolkit@1000000006 : Codeunit 9062641;
      lFieldRef@1000000004 : FieldRef;
      lName@1000000007 : Text;
    BEGIN
      //DOC NA2016.14 - Adding fields as XML attributes to XML element
      //  <> pXmlDocument: XML document
      //  <> pXmlElement: The element to add attributes to
      //  <> pRecordRef: Record reference

      FieldBuffer.RESET();
      IF (FieldBuffer.FINDSET()) THEN
      REPEAT
        lFieldRef := pRecordRef.FIELD(FieldBuffer.ID);
        IF (XmlElementsFormat) THEN
          lName := XmlToolkit.ToElementName(lFieldRef.NAME())
        ELSE
          lName := XmlToolkit.ToAttributeName(lFieldRef.NAME());
        AddXmlAttribute(pXmlDocument, pXmlElement, lName, FORMAT(lFieldRef.VALUE(), 0, 1));
      UNTIL (FieldBuffer.NEXT() = 0);
    END;

    LOCAL PROCEDURE "--- Excel ---"@1000000016();
    BEGIN
    END;

    PROCEDURE ExportToExcel@1000000044(pQuickReportHeader@1000000001 : Record 9062697) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to Excel (with user interaction)
      //  -> pQuickReportHeader: The quick report header
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportToFileInternal(pQuickReportHeader, QuickReportHeader."Export Format"::Excel, ''));
    END;

    PROCEDURE ExportToExcelFile@1000000043(pQuickReportHeader@1000000001 : Record 9062697;pFilePath@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to specified Excel file
      //  -> pQuickReportHeader: The quick report header
      //  -> pFilePath: The file path
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportToFileInternal(pQuickReportHeader, QuickReportHeader."Export Format"::Excel, pFilePath));
    END;

    PROCEDURE ExportDataToExcel@1000000042(VAR pQuickReportData@1000000000 : Record 9062699) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to Excel (with user interaction)
      //  <> pQuickReportData: The data
      //  -> pExportFormat: Export format
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportDataToFileInternal(pQuickReportData, QuickReportHeader."Export Format"::Excel, ''));
    END;

    PROCEDURE ExportDataToExcelFile@1000000041(VAR pQuickReportData@1000000000 : Record 9062699;pFilePath@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to specified Excel file
      //  <> pQuickReportData: The data
      //  -> pFilePath: The file path
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportDataToFileInternal(pQuickReportData, QuickReportHeader."Export Format"::Excel, pFilePath));
    END;

    LOCAL PROCEDURE ExportToExcelFileInternal@1000000012() : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting quick report to Excel (internal)
      //  <- Result (TRUE = Proceed with export, FALSE = Don't bother)

      CLEAR(QuickReportPrintout);
      QuickReportPrintout.Initialise(QuickReportHeader, QuickReportData);
      QuickReportPrintout.SAVEASEXCEL(ServerFilePath);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "--- PDF ---"@1000000018();
    BEGIN
    END;

    PROCEDURE ExportToPdf@1000000028(pQuickReportHeader@1000000001 : Record 9062697) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to PDF (with user interaction)
      //  -> pQuickReportHeader: The quick report header
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportToFileInternal(pQuickReportHeader, QuickReportHeader."Export Format"::PDF, ''));
    END;

    PROCEDURE ExportToPdfFile@1000000027(pQuickReportHeader@1000000001 : Record 9062697;pFilePath@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to specified PDF file
      //  -> pQuickReportHeader: The quick report header
      //  -> pFilePath: The file path
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportToFileInternal(pQuickReportHeader, QuickReportHeader."Export Format"::PDF, pFilePath));
    END;

    PROCEDURE ExportDataToPdf@1000000026(VAR pQuickReportData@1000000000 : Record 9062699) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to PDF (with user interaction)
      //  <> pQuickReportData: The data
      //  -> pExportFormat: Export format
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportDataToFileInternal(pQuickReportData, QuickReportHeader."Export Format"::PDF, ''));
    END;

    PROCEDURE ExportDataToPdfFile@1000000025(VAR pQuickReportData@1000000000 : Record 9062699;pFilePath@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to specified PDF file
      //  <> pQuickReportData: The data
      //  -> pFilePath: The file path
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportDataToFileInternal(pQuickReportData, QuickReportHeader."Export Format"::PDF, pFilePath));
    END;

    LOCAL PROCEDURE ExportToPdfFileInternal@1000000008() : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting quick report to PDF (internal)
      //  <- Result (TRUE = Proceed with export, FALSE = Don't bother)

      CLEAR(QuickReportPrintout);
      QuickReportPrintout.Initialise(QuickReportHeader, QuickReportData);
      QuickReportPrintout.SAVEASPDF(ServerFilePath);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "--- Word ---"@1000000017();
    BEGIN
    END;

    PROCEDURE ExportToWord@1000000032(pQuickReportHeader@1000000001 : Record 9062697) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to Word (with user interaction)
      //  -> pQuickReportHeader: The quick report header
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportToFileInternal(pQuickReportHeader, QuickReportHeader."Export Format"::Word, ''));
    END;

    PROCEDURE ExportToWordFile@1000000031(pQuickReportHeader@1000000001 : Record 9062697;pFilePath@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to specified Word file
      //  -> pQuickReportHeader: The quick report header
      //  -> pFilePath: The file path
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportToFileInternal(pQuickReportHeader, QuickReportHeader."Export Format"::Word, pFilePath));
    END;

    PROCEDURE ExportDataToWord@1000000020(VAR pQuickReportData@1000000000 : Record 9062699) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to Word (with user interaction)
      //  <> pQuickReportData: The data
      //  -> pExportFormat: Export format
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportDataToFileInternal(pQuickReportData, QuickReportHeader."Export Format"::Word, ''));
    END;

    PROCEDURE ExportDataToWordFile@1000000013(VAR pQuickReportData@1000000000 : Record 9062699;pFilePath@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to specified Word file
      //  <> pQuickReportData: The data
      //  -> pFilePath: The file path
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportDataToFileInternal(pQuickReportData, QuickReportHeader."Export Format"::Word, pFilePath));
    END;

    LOCAL PROCEDURE ExportToWordFileInternal@1000000010() : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting quick report to Word (internal)
      //  <- Result (TRUE = Proceed with export, FALSE = Don't bother)

      CLEAR(QuickReportPrintout);
      QuickReportPrintout.Initialise(QuickReportHeader, QuickReportData);
      QuickReportPrintout.SAVEASWORD(ServerFilePath);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "--- HTML ---"@1000000019();
    BEGIN
    END;

    PROCEDURE ExportToHtml@1000000048(pQuickReportHeader@1000000001 : Record 9062697) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to HTML (with user interaction)
      //  -> pQuickReportHeader: The quick report header
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportToFileInternal(pQuickReportHeader, QuickReportHeader."Export Format"::HTML, ''));
    END;

    PROCEDURE ExportToHtmlFile@1000000047(pQuickReportHeader@1000000001 : Record 9062697;pFilePath@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to specified HTML file
      //  -> pQuickReportHeader: The quick report header
      //  -> pFilePath: The file path
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportToFileInternal(pQuickReportHeader, QuickReportHeader."Export Format"::HTML, pFilePath));
    END;

    PROCEDURE ExportToHtmlText@1000000078(pQuickReportHeader@1000000001 : Record 9062697;VAR pText@1000000000 : BigText) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to specified HTML content
      //  -> pQuickReportHeader: The quick report header
      //  <- The content

      EXIT(ExportToTextInternal(pQuickReportHeader, QuickReportHeader."Export Format"::HTML, pText));
    END;

    PROCEDURE ExportDataToHtml@1000000046(VAR pQuickReportData@1000000000 : Record 9062699) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to HTML (with user interaction)
      //  <> pQuickReportData: The data
      //  -> pExportFormat: Export format
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportDataToFileInternal(pQuickReportData, QuickReportHeader."Export Format"::HTML, ''));
    END;

    PROCEDURE ExportDataToHtmlFile@1000000045(VAR pQuickReportData@1000000000 : Record 9062699;pFilePath@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to specified HTML file
      //  <> pQuickReportData: The data
      //  -> pFilePath: The file path
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportDataToFileInternal(pQuickReportData, QuickReportHeader."Export Format"::HTML, pFilePath));
    END;

    PROCEDURE ExportDataToHtmlText@1000000115(VAR pQuickReportData@1000000001 : Record 9062699;VAR pText@1000000000 : BigText) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to specified HTML text
      //  <> pQuickReportData: The data
      //  <> pText: Target text
      //  <- TRUE = Exported, FALSE = Not

      EXIT(ExportDataToTextInternal(pQuickReportData, QuickReportHeader."Export Format"::HTML, pText));
    END;

    LOCAL PROCEDURE ExportToHtmlFileInternal@1000000000() : Boolean;
    VAR
      lText@1000000005 : BigText;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to HTML file (internal version)
      //  <- Result (TRUE = Proceed with export, FALSE = Don't bother)

      IF (ExportToHtmlTextInternal(lText)) THEN
        WriteBigTextToFile(lText);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ExportToHtmlTextInternal@1000000108(VAR pText@1000000002 : BigText) : Boolean;
    VAR
      lRazorTemplateEngineMgt@1000000003 : Codeunit 9062584;
      lXmlDocument@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      lHtmlResourceCode@1000000001 : Code[50];
      lText@1000000005 : Text;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to HTML text (internal version)
      //  <> pText: Target text
      //  <- Result (TRUE = Proceed with export, FALSE = Don't bother)

      ExportToXmlDocument(lXmlDocument, TRUE, TRUE, FALSE);

      lHtmlResourceCode := VerifyHtmlResource();

      lRazorTemplateEngineMgt.Initialize();
      lRazorTemplateEngineMgt.CompileTemplate(lHtmlResourceCode, '');
      lRazorTemplateEngineMgt.SetXmlTextData(lXmlDocument.OuterXml);
      lText := lRazorTemplateEngineMgt.RunTemplate(lHtmlResourceCode, '');

      CLEAR(pText);
      pText.ADDTEXT(lText);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE VerifyHtmlResource@1000000080() : Code[60];
    VAR
      lHtmlResource@1000000001 : Record 9062792;
      lHtmlResourceCode@1000000000 : Code[60];
      lHtmlTemplateStream@1000000002 : OutStream;
    BEGIN
      //DOC NA2016.14 - Verifying HTML resource and returning its code
      //  <- The code

      lHtmlResourceCode := SystemBehaviour.GetText(tHtmlResourceSysB);
      IF (lHtmlResourceCode = '') THEN
      BEGIN
        lHtmlResourceCode := tHtmlResourceCode;
        SystemBehaviour.SetUserText(tHtmlResourceSysB, '', lHtmlResourceCode, TRUE);
      END;

      IF ( NOT (lHtmlResource.GET(lHtmlResourceCode))) THEN
      BEGIN
        InitText();
        ToText('<!doctype html>');
        ToText('<html>');
        ToText('  <head>');
        ToText('    <meta charset="utf-8">');
        ToText('    <style>');
        ToText('      body { margin: 10px; padding: 0px; }');
        ToText('      div { margin: 0px; padding: 0px }');
        ToText('      #LogoContainer { width: 0%; float: left; overflow: hidden; }');
        ToText('      #TitleContainer { width: 90%; float: left; overflow: hidden; }');
        ToText('      #FilterContainer { margin-bottom: 10px; }');
        ToText('      #DataContainer { margin-bottom: 10px; }');
        ToText('      #FooterCompanyInformationContainer { width: 70%; float: left; overflow: hidden; }');
        ToText('      #FooterLogoContainer { width: 20%; float: right; overflow: hidden; }');
        ToText('      p, h1, h2 { font-family: segoe ui, segoe, calibri, arial, sans serif, serif; margin: 0px; padding: 0px; }');
        ToText('      h1 { font-size: x-large; padding: 5px 0px 10px 0px; }');
        ToText('      h2 { font-size: medium; padding: 5px 0px 30px 0px; }');
        ToText('      table { border-spacing: 0px; border-collapse: collapse; }');
        ToText('      table.Data { border: 1px solid #0f6fc6; }');
        ToText('      th { background-color: #0f6fc6; border: 1px solid #0f6fc6; padding: 3px 5px 3px 5px; }');
        ToText('      td { border-color: #0f6fc6; border-style: solid; border-width: 0px 1px 0px 1px; padding: 3px 5px 3px 5px; }');
        ToText('      th.Filter { width: 10%; border-width: 1px; text-align: left; }');
        ToText('      td.FilterWide { width: 30%; border-width: 0px 1px 0px 1px; }');
        ToText('      td.FilterNarrow { width: 20%; border-width: 0px 1px 0px 1px; }');
        ToText('      td.FilterSpace { width: 5%; border-top: 0px; border-bottom: 0px; }');
        ToText('      td.First { border-top: 1px solid #0f6fc6; }');
        ToText('      td.Last { border-bottom: 1px solid #0f6fc6; }');
        ToText('      p.DataHeader { color: white; }');
        ToText('      p.DataNumeric { text-align: right; }');
        ToText('      p.CompanyInformation { font-size: small; }');
        ToText('      hr { background-color: lightgrey; }');
        ToText('    </style>');
        ToText('  </head>');
        ToText('  <body>');
        ToText('    <div id="LogoContainer">');
        ToText('    </div>');
        ToText('    <div id="TitleContainer">');
        ToText('      <h1>@Model.QuickReport.Report.Name</h1>');
        ToText('      <h2>@Model.QuickReport.Report.Filter.CurrentDateTimeText</h2>');
        ToText('    </div>');
        ToText('    <div id="FilterContainer">');
        ToText('      <table>');
        ToText('        <tr>');
        ToText('          <th class="Filter"><p class="DataHeader">@Model.QuickReport.Report.Filter.DataFromCaption</p></th>');
        ToText('          <td class="FilterWide First"><p>@Model.QuickReport.Report.Filter.DataFrom</p></td>');
        ToText('          <td class="FilterSpace"></td>');
        ToText('          <th class="Filter"><p class="DataHeader">@Model.QuickReport.Report.Filter.UserCaption</p></th>');
        ToText('          <td class="FilterNarrow First"><p>@Model.QuickReport.Report.Filter.User</p></td>');
        ToText('        </tr>');
        ToText('        <tr>');
        ToText('          <th class="Filter"><p class="DataHeader">@Model.QuickReport.Report.Filter.DataFilterCaption</p></th>');
        ToText('          <td class="FilterWide Last"><p>@Model.QuickReport.Report.Filter.DataFilter</p></td>');
        ToText('          <td class="FilterSpace"></td>');
        ToText('          <th class="Filter"><p class="DataHeader">@Model.QuickReport.Report.Filter.WorkdateCaption</p></th>');
        ToText('          <td class="FilterNarrow Last"><p>@Model.QuickReport.Report.Filter.Workdate</p></td>');
        ToText('        </tr>');
        ToText('      </table>');
        ToText('    </div>');
        ToText('    <div id="DataContainer">');
        ToText('      <table class="Data">');
        ToText('        <tr>');
        ToText('          @foreach (var Field in @Model.QuickReport.Report.Fields.Field)');
        ToText('            {<th class="Data"><p class="DataHeader">@Field.Caption</p></th>}');
        ToText('        </tr>');
        ToText('        @foreach(var Data in @Model.QuickReport.Data.DataRow) {');
        ToText('        <tr>');
        ToText('          @foreach (var Field in @Model.QuickReport.Report.Fields.Field)');
        ToText('            {var DataDictionary = ((System.Collections.Generic.IDictionary<string, object>)Data);');
        ToText('             var DataClass = (Field.QuickReportDataType == "Decimal" ? "DataNumeric" : "");');
        ToText('            <td class="Data"><p class="@DataClass">@DataDictionary[Field.XmlName]</p></td>}');
        ToText('        </tr>}');
        ToText('      </table>');
        ToText('    </div>');
        ToText('    <hr />');
        ToText('    <div id="FooterCompanyInformationContainer">');
        ToText('      <p class="CompanyInformation">@Model.QuickReport.CompanyInformation.ShortAddress1</p>');
        ToText('      <p class="CompanyInformation">@Model.QuickReport.CompanyInformation.ShortAddress2</p>');
        ToText('    </div>');
        ToText('    <div id="FooterLogoContainer">');
        ToText('    </div>');
        ToText('  </body>');
        ToText('</html>');

        CLEAR(lHtmlResource);
        lHtmlResource.INIT();
        lHtmlResource.VALIDATE(Code, lHtmlResourceCode);
        lHtmlResource.VALIDATE(Description, String.ToTitleCase(lHtmlResource.Code));
        lHtmlResource.VALIDATE(Type, lHtmlResource.Type::"Razor Html Template");
        lHtmlResource."HTML Template".CREATEOUTSTREAM(lHtmlTemplateStream);
        Text.WRITE(lHtmlTemplateStream);
        lHtmlResource.INSERT(TRUE);

        COMMIT;
      END;

      EXIT(lHtmlResourceCode);
    END;

    LOCAL PROCEDURE "--- CSV ---"@1000000015();
    BEGIN
    END;

    PROCEDURE ExportToCsv@1000000051(pQuickReportHeader@1000000001 : Record 9062697;pCsvFormatCode@1000000000 : Code[20]) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to CSV (with user interaction)
      //  -> pQuickReportHeader: The quick report header
      //  -> pCsvFormatCode: CSV format code
      //  <- TRUE = Exported, FALSE = Not

      CsvFormatCode := pCsvFormatCode;
      EXIT(ExportToFileInternal(pQuickReportHeader, QuickReportHeader."Export Format"::CSV, ''));
    END;

    PROCEDURE ExportToCsvFile@1000000050(pQuickReportHeader@1000000001 : Record 9062697;pCsvFormatCode@1000000000 : Code[20];pFilePath@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to specified CSV file
      //  -> pQuickReportHeader: The quick report header
      //  -> pCsvFormatCode: CSV format code
      //  -> pFilePath: The file path
      //  <- TRUE = Exported, FALSE = Not

      CsvFormatCode := pCsvFormatCode;
      EXIT(ExportToFileInternal(pQuickReportHeader, QuickReportHeader."Export Format"::CSV, pFilePath));
    END;

    PROCEDURE ExportToCsvText@1000000116(pQuickReportHeader@1000000003 : Record 9062697;pCsvFormatCode@1000000001 : Code[20];VAR pText@1000000000 : BigText) : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting given quick report to specified CSV text
      //  -> pQuickReportHeader: The quick report header
      //  -> pCsvFormatCode: CSV format code
      //  <> pText: Target text
      //  <- TRUE = Exported, FALSE = Not

      CsvFormatCode := pCsvFormatCode;
      EXIT(ExportToTextInternal(pQuickReportHeader, QuickReportHeader."Export Format"::CSV, pText));
    END;

    PROCEDURE ExportDataToCsv@1000000049(VAR pQuickReportData@1000000000 : Record 9062699;pCsvFormatCode@1000000001 : Code[20]) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to CSV (with user interaction)
      //  <> pQuickReportData: The data
      //  -> pExportFormat: Export format
      //  -> pCsvFormatCode: CSV format code
      //  <- TRUE = Exported, FALSE = Not

      CsvFormatCode := pCsvFormatCode;
      EXIT(ExportDataToFileInternal(pQuickReportData, QuickReportHeader."Export Format"::CSV, ''));
    END;

    PROCEDURE ExportDataToCsvFile@1000000039(VAR pQuickReportData@1000000000 : Record 9062699;pCsvFormatCode@1000000001 : Code[20];pFilePath@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to specified CSV file
      //  <> pQuickReportData: The data
      //  -> pCsvFormatCode: CSV format code
      //  -> pFilePath: The file path
      //  <- TRUE = Exported, FALSE = Not

      CsvFormatCode := pCsvFormatCode;
      EXIT(ExportDataToFileInternal(pQuickReportData, QuickReportHeader."Export Format"::CSV, pFilePath));
    END;

    PROCEDURE ExportDataToCsvText@1000000117(VAR pQuickReportData@1000000002 : Record 9062699;pCsvFormatCode@1000000001 : Code[20];VAR pText@1000000000 : BigText) : Boolean;
    BEGIN
      //DOC NA2016.12 - Exporting given quick report data to specified CSV file
      //  <> pQuickReportData: The data
      //  -> pCsvFormatCode: CSV format code
      //  <> pText: Target text
      //  <- TRUE = Exported, FALSE = Not

      CsvFormatCode := pCsvFormatCode;
      EXIT(ExportDataToTextInternal(pQuickReportData, QuickReportHeader."Export Format"::CSV, pText));
    END;

    LOCAL PROCEDURE ExportToCsvFileInternal@1000000014() : Boolean;
    VAR
      lText@1000000003 : BigText;
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.14 - Exporting quick report to CSV file (internal version)
      //  <- Result (TRUE = Proceed with export, FALSE = Don't bother)

      lResult := ExportToCsvTextInternal(lText);
      IF (lResult) THEN
        WriteBigTextToFile(lText);
      EXIT(lResult);
    END;

    LOCAL PROCEDURE ExportToCsvTextInternal@1000000109(VAR pText@1000000003 : BigText) : Boolean;
    VAR
      lCsvFormat@1000000001 : Record 9062701;
    BEGIN
      //DOC NA2016.14 - Exporting quick report to CSV text (internal version)
      //  <> pText: Target text
      //  <- Result (TRUE = Proceed with export, FALSE = Don't bother)

      IF ( NOT (EstablishCsvFormat(lCsvFormat))) THEN
        EXIT(FALSE);

      IF (QuickReportData.FINDSET()) THEN
      BEGIN
        CLEAR(pText);
        InitialiseEndOfLine();
        InitialiseDataRefs();
        IF (lCsvFormat."Add Field Headers") THEN
          AddCsvHeaders(pText, lCsvFormat);
        REPEAT
          QuickReportDataRecordRef.GETTABLE(QuickReportData);
          AddCsvLine(pText, lCsvFormat);
        UNTIL (QuickReportData.NEXT() = 0);
        FinaliseDataRefs();
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE EstablishCsvFormat@1000000056(VAR pCsvFormat@1000000001 : Record 9062701) : Boolean;
    VAR
      lCsvFormat@1000000002 : Record 9062701;
      lCsvFormatManagement@1000000000 : Codeunit 9062552;
      lResult@1000000003 : Boolean;
      eGenericFileFilter@1000000004 : TextConst 'ENU=%1 Files (*.%2)|All Files (*.*);ENG=%1 Files (*.%2)|All Files (*.*)';
    BEGIN
      //DOC NA2016.14 - Trying to agree CSV format with user
      //  <> pCsvFormat: Target CSV format
      //  <- TRUE = Confirmed, FALSE = Cancelled

      CLEAR(lResult);

      IF (Interaction) THEN
      BEGIN
        IF (CsvFormatCode <> '') THEN
          IF ( NOT (lCsvFormat.GET(CsvFormatCode))) THEN
            CLEAR(lCsvFormat);
        lResult := lCsvFormatManagement.SelectCsvFormat(lCsvFormat);
      END
      ELSE
      BEGIN
        lCsvFormat.RESET();
        lCsvFormat.SETRANGE(Default, TRUE);
        IF ( NOT (lCsvFormat.FINDFIRST())) THEN
        BEGIN
          lCsvFormat.SETRANGE(Default);
          IF ( NOT (lCsvFormat.FINDFIRST())) THEN
            lCsvFormatManagement.DefaultCsvFormat(lCsvFormat);
        END;
        lResult := TRUE;
      END;

      IF (lResult) THEN
      BEGIN
        lCsvFormat."File Extension" := LOWERCASE(DELCHR(lCsvFormat."File Extension", '<>', ' '));
        IF (lCsvFormat."File Extension" <> FileExtension) THEN
        BEGIN
          FileExtension := lCsvFormat."File Extension";
          IF (lCsvFormat."File Filter" <> '') THEN
            FileFilter := lCsvFormat."File Filter"
          ELSE
            FileFilter := STRSUBSTNO(eGenericFileFilter, UPPERCASE(FileExtension), FileExtension);
        END;
        lCsvFormat.TESTFIELD("Field Separator");
        pCsvFormat := lCsvFormat;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE AddCsvHeaders@1000000058(VAR pCsvContent@1000000000 : BigText;pCsvFormat@1000000002 : Record 9062701);
    VAR
      lFieldIndex@1000000001 : Integer;
    BEGIN
      //DOC NA2016.14 - Exporting CSV headers
      //  <> pCsvContent: The file content
      //  -> pCsvFormat: CSV format

      FOR lFieldIndex := 1 TO QuickReportDataFieldCount DO
      BEGIN
        IF (lFieldIndex > 1) THEN
          pCsvContent.ADDTEXT(pCsvFormat."Field Separator");
        pCsvContent.ADDTEXT(pCsvFormat."Field Delimiter");
        pCsvContent.ADDTEXT(QuickReportDataFields[lFieldIndex].Caption);
        pCsvContent.ADDTEXT(pCsvFormat."Field Delimiter");
      END;
      pCsvContent.ADDTEXT(EndOfLine);
    END;

    LOCAL PROCEDURE AddCsvLine@1000000059(VAR pCsvContent@1000000000 : BigText;pCsvFormat@1000000001 : Record 9062701);
    VAR
      lFieldIndex@1000000002 : Integer;
    BEGIN
      //DOC NA2016.14 - Exporting CSV line
      //  <> pCsvContent: The file content
      //  -> pCsvFormat: CSV format

      FOR lFieldIndex := 1 TO QuickReportDataFieldCount DO
      BEGIN
        IF (lFieldIndex > 1) THEN
          pCsvContent.ADDTEXT(pCsvFormat."Field Separator");
        pCsvContent.ADDTEXT(pCsvFormat."Field Delimiter");
        pCsvContent.ADDTEXT(FORMAT(QuickReportDataFieldRefs[lFieldIndex].VALUE, 0, 1));
        pCsvContent.ADDTEXT(pCsvFormat."Field Delimiter");
      END;
      pCsvContent.ADDTEXT(EndOfLine);
    END;

    LOCAL PROCEDURE "--- Data References ---"@1000000052();
    BEGIN
    END;

    LOCAL PROCEDURE InitialiseDataRefs@1000000053();
    VAR
      lQuickReportField@1000000001 : Record 9062698;
      eNoFields@1000000000 : TextConst 'ENU=The quick report doesn''t have any fields defined.;ENG=The quick report doesn''t have any fields defined.';
    BEGIN
      //DOC NA2016.14 - Initialising data references

      QuickReportDataRecordRef.OPEN(DATABASE::"Quick Report Data");

      QuickReportDataFieldMaxCount := 20;
      CLEAR(QuickReportDataFieldCount);

      lQuickReportField.RESET();
      lQuickReportField.SETCURRENTKEY("Quick Report Code", Sequence, ID);
      lQuickReportField.SETRANGE("Quick Report Code", QuickReportHeader.Code);
      lQuickReportField.SETFILTER("Field From", '>0');
      lQuickReportField.SETRANGE(Blocked, FALSE);
      lQuickReportField.SETRANGE(Grouping, lQuickReportField.Grouping::"Group By");
      Grouping := ( NOT (lQuickReportField.ISEMPTY()));
      IF (Grouping) THEN
        lQuickReportField.SETFILTER(Grouping, '<>%1', lQuickReportField.Grouping::" ")
      ELSE
        lQuickReportField.SETRANGE(Grouping);
      IF (lQuickReportField.FINDSET(TRUE)) THEN
      REPEAT
        lQuickReportField.TESTFIELD("Data Field ID");
        QuickReportDataFieldCount += 1;
        QuickReportDataFields[QuickReportDataFieldCount] := lQuickReportField;
        QuickReportDataFieldRefs[QuickReportDataFieldCount] := QuickReportDataRecordRef.FIELD(lQuickReportField."Data Field ID");
      UNTIL ((lQuickReportField.NEXT() = 0) OR (QuickReportDataFieldCount >= QuickReportDataFieldMaxCount));

      IF (QuickReportDataFieldCount = 0) THEN
        ERROR(eNoFields);
    END;

    LOCAL PROCEDURE FinaliseDataRefs@1000000054();
    BEGIN
      //DOC NA2016.14 - Finalising data references

      QuickReportDataRecordRef.CLOSE();
    END;

    LOCAL PROCEDURE "--- Field Buffer ---"@1000000074();
    BEGIN
    END;

    LOCAL PROCEDURE InitialiseFieldBuffer@1000000075(pTableId@1000000000 : Integer);
    BEGIN
      //DOC NA2016.14 - Initialising field buffer
      //  -> pTableId: Table ID

      FieldBufferTableId := pTableId;
      FieldBuffer.RESET();
      FieldBuffer.DELETEALL();
    END;

    LOCAL PROCEDURE AddToFieldBuffer@1000000077(pFieldId@1000000000 : Integer);
    VAR
      lFieldRef@1000000001 : FieldRef;
      lFieldName@1000000002 : Text;
    BEGIN
      //DOC NA2016.14 - Adding to field buffer
      //  -> pFieldId: Field ID

      IF (FieldBuffer.GET(pFieldId)) THEN
        EXIT;

      lFieldName := ObjectFieldToolkit.GetFieldName(FieldBufferTableId, pFieldId);
      IF (lFieldName = '') THEN
        lFieldName := 'Field' + FORMAT(pFieldId, 0, 1);

      lFieldName := XmlToolkit.ToAttributeName(lFieldName);

      FieldBuffer.ID := pFieldId;
      FieldBuffer.Name := lFieldName;
      FieldBuffer.INSERT();
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000002();
    BEGIN
    END;

    LOCAL PROCEDURE GetData@1000000011(VAR pQuickReportHeader@1000000000 : Record 9062697;VAR pQuickReportData@1000000003 : Record 9062699);
    VAR
      lQuickReportEngine@1000000001 : Codeunit 9062539;
      lQuickReportCode@1000000002 : Code[60];
    BEGIN
      //DOC NA2016.12 - Getting quick report data (using header)
      //  <> pQuickReportHeader: The quick report header to get data for
      //  <> pQuickReportData: Quick report data

      lQuickReportCode := lQuickReportEngine.GenerateQuickReportData(pQuickReportHeader.Code, pQuickReportData);

      pQuickReportHeader.GET(lQuickReportCode);
      pQuickReportHeader.SETRECFILTER();
    END;

    LOCAL PROCEDURE GetHeader@1000000037(VAR pQuickReportData@1000000000 : Record 9062699;VAR pQuickReportHeader@1000000002 : Record 9062697);
    VAR
      eNoData@1000000001 : TextConst 'ENU=The current quick report does not have data.;ENG=The current quick report does not have data.';
    BEGIN
      //DOC NA2016.12 - Getting quick report header (using data)
      //  <> pQuickReportData: The data
      //  <> pQuickReportHeader: Target quick report header

      IF (pQuickReportData.FINDFIRST()) THEN
        pQuickReportHeader.GET(pQuickReportData."Quick Report Code")
      ELSE
        ERROR(eNoData);
    END;

    LOCAL PROCEDURE ExportFileExtension@1000000009(pExportFormat@1000000000 : Integer) : Text;
    VAR
      lFileExtension@1000000002 : Text;
    BEGIN
      //DOC NA2016.12 - Returning export file extension
      //  -> pExportFormat: Export format
      //  <- Export file extension

      QuickReportHeader."Export Format" := pExportFormat;
      CASE (QuickReportHeader."Export Format") OF
        QuickReportHeader."Export Format"::XML: lFileExtension := 'xml';
        QuickReportHeader."Export Format"::Excel: lFileExtension := 'xlsx';
        QuickReportHeader."Export Format"::PDF: lFileExtension := 'pdf';
        QuickReportHeader."Export Format"::Word: lFileExtension := 'doc';
        QuickReportHeader."Export Format"::HTML: lFileExtension := 'html';
        QuickReportHeader."Export Format"::CSV: lFileExtension := 'csv';
        ELSE ERROR(tUnknownExportFormat, FORMAT(QuickReportHeader."Export Format"));
      END;

      EXIT(lFileExtension);
    END;

    LOCAL PROCEDURE ExportClientFileName@1000000007(pFileExtension@1000000004 : Text) : Text;
    VAR
      lQuickReportHeader@1000000000 : Record 9062697;
      lQuickReportName@1000000003 : Text;
      lFileName@1000000001 : Text;
    BEGIN
      //DOC NA2016.12 - Returning export file name
      //  -> pFileExtension: File extension
      //  <- Export file name

      lQuickReportName := '';
      IF (QuickReportHeader."Temporary") THEN
      BEGIN
        IF (lQuickReportHeader.GET(QuickReportHeader."Copied From")) THEN
          lQuickReportName := lQuickReportHeader.Name;
        IF (lQuickReportName = '') THEN
          lQuickReportName := QuickReportHeader."Copied From";
      END;
      IF (lQuickReportName = '') THEN
        lQuickReportName := QuickReportHeader.Name;
      IF (lQuickReportName = '') THEN
        lQuickReportName := QuickReportHeader.Code;

      lFileName := String.Trim(FileSystem.ToFileName(lQuickReportName)) + '.' + pFileExtension;

      EXIT(lFileName);
    END;

    LOCAL PROCEDURE ExportServerFilePath@1000000040(pFileExtension@1000000000 : Text) : Text;
    VAR
      lEnablementUserManagement@1000000003 : Codeunit 9062255;
      lShortUserId@1000000002 : Text;
    BEGIN
      //DOC NA2016.12 - Returning export file path
      //  -> pFileExtension: File extension
      //  <- File path

      EXIT(FileSystem.GetTempPathForExtension(FALSE, pFileExtension));
    END;

    LOCAL PROCEDURE ExportFileFilter@1000000005(pExportFormat@1000000000 : Integer) : Text;
    VAR
      lFileFilter@1000000001 : Text;
      eXmlFileFilter@1000000002 : TextConst 'ENU=XML Files (*.xml)|*.xml;ENG=XML Files (*.xml)|*.xml';
      eExcelFileFilter@1000000003 : TextConst 'ENU=Excel Spreadsheets (*.xls*)|*.xls*;ENG=Excel Spreadsheets (*.xls*)|*.xls*';
      ePdfFileFilter@1000000004 : TextConst 'ENU=PDF Documents (*.pdf)|*.pdf;ENG=PDF Documents (*.pdf)|*.pdf';
      eWordFileFilter@1000000005 : TextConst 'ENU=Word Documents (*.doc*)|*.doc*;ENG=Word Documents (*.doc*)|*.doc*';
      eHtmlFileFilter@1000000006 : TextConst 'ENU=HTML Files (*.htm*)|*.htm*;ENG=HTML Files (*.htm*)|*.htm*';
      eCsvFileFilter@1000000007 : TextConst 'ENU=CSV Files (*.csv*)|*.csv*|Text Files (*.txt)|*.txt;ENG=CSV Files (*.csv*)|*.csv*|Text Files (*.txt)|*.txt';
    BEGIN
      //DOC NA2016.12 - Returning export file name
      //  -> pExportFormat: Export format
      //  <- Export file name

      QuickReportHeader."Export Format" := pExportFormat;
      CASE (QuickReportHeader."Export Format") OF
        QuickReportHeader."Export Format"::XML: lFileFilter := MakeFileFilter(eXmlFileFilter);
        QuickReportHeader."Export Format"::Excel: lFileFilter := MakeFileFilter(eExcelFileFilter);
        QuickReportHeader."Export Format"::PDF: lFileFilter := MakeFileFilter(ePdfFileFilter);
        QuickReportHeader."Export Format"::Word: lFileFilter := MakeFileFilter(eWordFileFilter);
        QuickReportHeader."Export Format"::HTML: lFileFilter := MakeFileFilter(eHtmlFileFilter);
        QuickReportHeader."Export Format"::CSV: lFileFilter := MakeFileFilter(eCsvFileFilter);
        ELSE ERROR(tUnknownExportFormat, FORMAT(QuickReportHeader."Export Format"));
      END;

      EXIT(lFileFilter);
    END;

    LOCAL PROCEDURE MakeFileFilter@1000000024(pFileFilter@1000000000 : Text) : Text;
    VAR
      eAllFilesFilter@1000000001 : TextConst 'ENU=All Files (*.*)|*.*;ENG=All Files (*.*)|*.*';
    BEGIN
      //DOC NA2016.12 - Making file filter with given filter and "All Files" filter
      //  -> pFileFilter: Given filter
      //  <- Whole filter

      EXIT(pFileFilter + '|' + eAllFilesFilter);
    END;

    LOCAL PROCEDURE InitialiseEndOfLine@1000000076();
    BEGIN
      //DOC NA2016.14 - Initialising end of line string

      EndOfLine := '  ';
      EndOfLine[1] := 13;
      EndOfLine[2] := 10;
    END;

    LOCAL PROCEDURE WriteBigTextToFile@1000000062(VAR pFileContent@1000000003 : BigText);
    VAR
      lFile@1000000002 : File;
      lOutStream@1000000001 : OutStream;
    BEGIN
      //DOC NA2016.14 - Writing bigtext to text file
      //  <> pFileContent: The file content (bigtext)

      FileSystem.DeleteFileIfExists(FALSE, ServerFilePath);
      lFile.CREATE(ServerFilePath);
      lFile.CREATEOUTSTREAM(lOutStream);
      pFileContent.WRITE(lOutStream);
      lFile.CLOSE();
    END;

    LOCAL PROCEDURE InitText@1000000071();
    BEGIN
      //DOC NA2016.14 - Initialising text

      CLEAR(Text);
      NewLine := '  ';
      NewLine[1] := 13;
      NewLine[2] := 10;
    END;

    LOCAL PROCEDURE ToText@1000000064(pTextFragment@1000000000 : Text);
    BEGIN
      //DOC NA2016.14 - Adding to text
      //  -> pTextFragment: Text fragment

      Text.ADDTEXT(pTextFragment + NewLine);
    END;

    BEGIN
    {
      //DOC NA2015.7  PC 05/06/2015 - Created
      //DOC NA2016.7  JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.14 JH 21/02/2016 - Simplified data types, all exports implemented
      //DOC NA2016.15 AZ 13/04/2016 - Support for exporting data from the database added
      //DOC NA2016.15 JH 05/05/2016 - Enhanced permissions
    }
    END.
  }
}

