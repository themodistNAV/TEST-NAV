OBJECT Codeunit 11102103 OM - Compare Fields Management
{
  OBJECT-PROPERTIES
  {
    Date=19/11/15;
    Time=12:00:00 PM;
    Version List=OMA10.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE AddTables@1(VAR LeftIsCurrentDatabase@1000 : Boolean;VAR LeftDatabaseCode@1001 : Code[20];VAR RightDatabaseCode@1002 : Code[20];VAR TmpHistoryStatus@1003 : ARRAY [2] OF TEMPORARY Record 2000000001);
    VAR
      TmpObject@1004 : TEMPORARY Record 2000000001;
      AddCompareFieldsObj@1005 : Report 11102051;
      Progressbar@1006 : Codeunit 11102044;
      ctAddingTables@1007 : TextConst 'DEU=Adding tables...;ENU=Adding tables...;ESP=Adding tables...;FRA=Adding tables...;NLD=Tabellen toevoegen...;DEA=Adding tables...';
    BEGIN
      AddCompareFieldsObj.RUNMODAL;
      AddCompareFieldsObj.GetObjects(TmpObject);

      IF TmpObject.FINDSET THEN BEGIN

        Progressbar.Open(ctAddingTables, 0);
        Progressbar.BarSize := TmpObject.COUNT;

        REPEAT
          Progressbar.AddToBar(1);
          AddTableLeft(TmpObject.ID, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus);
          AddTableRight(TmpObject.ID, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus);
        UNTIL TmpObject.NEXT = 0;

        Progressbar.Close;

      END;
    END;

    PROCEDURE Refresh@2(VAR TmpObject@1000 : TEMPORARY Record 2000000001;VAR LeftIsCurrentDatabase@1001 : Boolean;VAR LeftDatabaseCode@1002 : Code[20];VAR RightDatabaseCode@1003 : Code[20];VAR TmpHistoryStatus@1004 : ARRAY [2] OF TEMPORARY Record 2000000001);
    VAR
      Progressbar@1005 : Codeunit 11102044;
      ctRefreshing@1006 : TextConst 'DEU=Refreshing...;ENU=Refreshing...;ESP=Refreshing...;FRA=Refreshing...;NLD=Vernieuwen...;DEA=Refreshing...';
    BEGIN
      Progressbar.Open(ctRefreshing, 0);
      Progressbar.BarSize := TmpObject.COUNT * 2;

      DeleteLeftTables(TmpHistoryStatus[1]);
      IF TmpObject.FINDSET THEN
        REPEAT
          Progressbar.AddToBar(1);
          AddTableLeft(TmpObject.ID, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus);
        UNTIL TmpObject.NEXT = 0;

      DeleteRightTables(TmpHistoryStatus[2]);
      IF TmpObject.FINDSET THEN
        REPEAT
          Progressbar.AddToBar(1);
          AddTableRight(TmpObject.ID, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus);
        UNTIL TmpObject.NEXT = 0;

      Progressbar.Close;
    END;

    PROCEDURE RefreshLeft@3(VAR TmpObject@1000 : TEMPORARY Record 2000000001;VAR LeftIsCurrentDatabase@1001 : Boolean;VAR LeftDatabaseCode@1002 : Code[20];VAR RightDatabaseCode@1003 : Code[20];VAR TmpHistoryStatus@1004 : ARRAY [2] OF TEMPORARY Record 2000000001);
    VAR
      Progressbar@1005 : Codeunit 11102044;
      ctRefreshing@1006 : TextConst 'DEU=Refreshing...;ENU=Refreshing...;ESP=Refreshing...;FRA=Refreshing...;NLD=Vernieuwen...;DEA=Refreshing...';
    BEGIN
      DeleteLeftTables(TmpHistoryStatus[1]);
      IF TmpObject.FINDSET THEN BEGIN

        Progressbar.Open(ctRefreshing, 0);
        Progressbar.BarSize := TmpObject.COUNT;

        REPEAT
          Progressbar.AddToBar(1);
          AddTableLeft(TmpObject.ID, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus);
        UNTIL TmpObject.NEXT = 0;

        Progressbar.Close;
      END;
    END;

    PROCEDURE RefreshRight@4(VAR TmpObject@1000 : TEMPORARY Record 2000000001;VAR LeftIsCurrentDatabase@1001 : Boolean;VAR LeftDatabaseCode@1002 : Code[20];VAR RightDatabaseCode@1003 : Code[20];VAR TmpHistoryStatus@1004 : ARRAY [2] OF TEMPORARY Record 2000000001);
    VAR
      Progressbar@1005 : Codeunit 11102044;
      ctRefreshing@1006 : TextConst 'DEU=Refreshing...;ENU=Refreshing...;ESP=Refreshing...;FRA=Refreshing...;NLD=Vernieuwen...;DEA=Refreshing...';
    BEGIN
      DeleteRightTables(TmpHistoryStatus[2]);

      IF TmpObject.FINDSET THEN BEGIN

        Progressbar.Open(ctRefreshing, 0);
        Progressbar.BarSize := TmpObject.COUNT;

        REPEAT
          Progressbar.AddToBar(1);
          AddTableRight(TmpObject.ID, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus);
        UNTIL TmpObject.NEXT = 0;

        Progressbar.Close;
      END;
    END;

    LOCAL PROCEDURE GetFieldsCurrentDb@5(VAR TableNo@1000 : Integer;VAR TmpFieldCompareLine@1001 : TEMPORARY Record 11102067);
    VAR
      Fld@1002 : Record 2000000041;
    BEGIN
      Fld.SETRANGE(TableNo, TableNo);
      IF Fld.FINDSET THEN
        REPEAT
          TmpFieldCompareLine.FillLeftFromField(Fld);
          TmpFieldCompareLine.INSERT;
        UNTIL Fld.NEXT = 0;
    END;

    LOCAL PROCEDURE AddTableLeft@6(VAR TableNo@1000 : Integer;VAR LeftIsCurrentDatabase@1001 : Boolean;VAR LeftDatabaseCode@1002 : Code[20];VAR RightDatabaseCode@1003 : Code[20];VAR TmpHistoryStatus@1004 : ARRAY [2] OF TEMPORARY Record 2000000001);
    VAR
      TmpFieldCompareLine@1005 : TEMPORARY Record 11102067;
      NAVDatabase@1006 : Record 11102099;
      Progressbar@1007 : Codeunit 11102044;
      DatabaseMgt@1008 : Codeunit 11102083;
    BEGIN
      IF LeftIsCurrentDatabase THEN
        GetFieldsCurrentDb(TableNo, TmpFieldCompareLine)
      ELSE
        IF LeftDatabaseCode <> '' THEN BEGIN
          NAVDatabase.GET(LeftDatabaseCode);
          DatabaseMgt.GetFieldDefinitions(NAVDatabase, TableNo, TmpFieldCompareLine);
          UpdateHistoryStatus(NAVDatabase, TableNo, TmpHistoryStatus[1]);
        END;

      AddFieldsLeft(
        TmpFieldCompareLine, FALSE, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus, Progressbar, 0, 0);
    END;

    LOCAL PROCEDURE AddFieldsLeft@7(VAR TmpFieldCompareLine@1000 : TEMPORARY Record 11102067;CheckOtherSide@1001 : Boolean;VAR LeftIsCurrentDatabase@1002 : Boolean;VAR LeftDatabaseCode@1003 : Code[20];VAR RightDatabaseCode@1004 : Code[20];VAR TmpHistoryStatus@1005 : ARRAY [2] OF TEMPORARY Record 2000000001;VAR Progressbar@1006 : Codeunit 11102044;ProgressbarFrom@1007 : Integer;ProgressbarTill@1008 : Integer);
    VAR
      FieldCompareLine@1009 : Record 11102067;
      NewLine@1010 : Boolean;
      NewTable@1011 : Boolean;
    BEGIN
      IF ProgressbarTill <> 0 THEN BEGIN
        Progressbar.BarSize := TmpFieldCompareLine.COUNT;
        Progressbar.UseRange(ProgressbarFrom, ProgressbarTill);
      END;

      IF TmpFieldCompareLine.FINDSET THEN
        REPEAT

          IF ProgressbarTill <> 0 THEN
            Progressbar.AddToBar(1);

          NewLine := NOT FieldCompareLine.GET(TmpFieldCompareLine."Table No.", TmpFieldCompareLine."No.");

          IF NewLine THEN BEGIN
            FieldCompareLine.INIT;
            FieldCompareLine."Table No." := TmpFieldCompareLine."Table No.";
            FieldCompareLine."Table Name" := TmpFieldCompareLine."Table Name";
            NewTable := ProcessTableName(FieldCompareLine."Table No.", FieldCompareLine."Table Name");
            FieldCompareLine."No." := TmpFieldCompareLine."No.";
          END;

          FieldCompareLine.FillLeftFromCompareLine(TmpFieldCompareLine);
          FieldCompareLine.VALIDATE("Type Name");
          IF NewLine THEN BEGIN
            FieldCompareLine.INSERT;
            IF CheckOtherSide AND NewTable THEN
              AddTableRight(
                TmpFieldCompareLine."Table No.", LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus);

          END ELSE
            FieldCompareLine.MODIFY;

        UNTIL TmpFieldCompareLine.NEXT = 0;
    END;

    PROCEDURE DeleteLeftTables@8(VAR TmpHistoryStatus@1000 : TEMPORARY Record 2000000001);
    VAR
      FieldCompareLine@1001 : Record 11102067;
    BEGIN
      TmpHistoryStatus.DELETEALL;

      WITH FieldCompareLine DO
        IF FINDSET THEN
          REPEAT
            DeleteLeftTable(FieldCompareLine);
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteLeftTable@9(VAR FieldCompareLine@1000 : Record 11102067);
    BEGIN
      WITH FieldCompareLine DO
        IF "New Name" = '' THEN
          DELETE
        ELSE BEGIN
          ClearLeft;
          MODIFY;
        END;
    END;

    LOCAL PROCEDURE AddTableRight@10(VAR TableNo@1000 : Integer;VAR LeftIsCurrentDatabase@1001 : Boolean;VAR LeftDatabaseCode@1002 : Code[20];VAR RightDatabaseCode@1003 : Code[20];VAR TmpHistoryStatus@1004 : ARRAY [2] OF TEMPORARY Record 2000000001);
    VAR
      TmpFieldCompareLine@1005 : TEMPORARY Record 11102067;
      NAVDatabase@1006 : Record 11102099;
      Progressbar@1007 : Codeunit 11102044;
      DatabaseMgt@1008 : Codeunit 11102083;
    BEGIN
      IF RightDatabaseCode <> '' THEN BEGIN
        NAVDatabase.GET(RightDatabaseCode);
        DatabaseMgt.GetFieldDefinitions(NAVDatabase, TableNo, TmpFieldCompareLine);
        UpdateHistoryStatus(NAVDatabase, TableNo, TmpHistoryStatus[2]);
      END;

      AddFieldsRight(
        TmpFieldCompareLine, FALSE, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus, Progressbar, 0, 0);
    END;

    LOCAL PROCEDURE AddFieldsRight@11(VAR TmpFieldCompareLine@1000 : TEMPORARY Record 11102067;CheckOtherSide@1001 : Boolean;VAR LeftIsCurrentDatabase@1002 : Boolean;VAR LeftDatabaseCode@1003 : Code[20];VAR RightDatabaseCode@1004 : Code[20];VAR TmpHistoryStatus@1005 : ARRAY [2] OF TEMPORARY Record 2000000001;VAR Progressbar@1006 : Codeunit 11102044;ProgressbarFrom@1007 : Integer;ProgressbarTill@1008 : Integer);
    VAR
      FieldCompareLine@1009 : Record 11102067;
      NewLine@1010 : Boolean;
      NewTable@1011 : Boolean;
    BEGIN
      IF ProgressbarTill <> 0 THEN BEGIN
        Progressbar.BarSize := TmpFieldCompareLine.COUNT;
        Progressbar.UseRange(ProgressbarFrom, ProgressbarTill);
      END;

      IF TmpFieldCompareLine.FINDSET THEN
        REPEAT

          IF ProgressbarTill <> 0 THEN
            Progressbar.AddToBar(1);

          NewLine := NOT FieldCompareLine.GET(TmpFieldCompareLine."Table No.", TmpFieldCompareLine."No.");

          IF NewLine THEN BEGIN
            FieldCompareLine.INIT;

            FieldCompareLine."Table No." := TmpFieldCompareLine."Table No.";
            FieldCompareLine."Table Name" := TmpFieldCompareLine."Table Name";
            NewTable := ProcessTableName(FieldCompareLine."Table No.", FieldCompareLine."Table Name");
            FieldCompareLine."No." := TmpFieldCompareLine."No.";
          END;

          FieldCompareLine.FillRightFromCompareLine(TmpFieldCompareLine);
          FieldCompareLine.SetDifferent;

          IF NewLine THEN BEGIN
            FieldCompareLine.INSERT;
            IF CheckOtherSide AND NewTable THEN
              AddTableLeft(
                TmpFieldCompareLine."Table No.", LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus);

          END ELSE
            FieldCompareLine.MODIFY;

        UNTIL TmpFieldCompareLine.NEXT = 0;
    END;

    PROCEDURE DeleteRightTables@12(VAR TmpHistoryStatus@1000 : TEMPORARY Record 2000000001);
    VAR
      FieldCompareLine@1001 : Record 11102067;
    BEGIN
      TmpHistoryStatus.DELETEALL;

      WITH FieldCompareLine DO
        IF FINDSET THEN
          REPEAT
            IF Name = '' THEN
              DELETE
            ELSE BEGIN
              ClearRight;
              MODIFY;
            END;
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE ProcessTableName@13(TableNo@1000 : Integer;VAR TableName2@1001 : Text) : Boolean;
    VAR
      FieldCompareLine@1002 : Record 11102067;
      AllObj@1003 : Record 2000000038;
    BEGIN
      FieldCompareLine.SETRANGE("Table No.", TableNo);
      IF FieldCompareLine.FINDFIRST THEN BEGIN
        TableName2 := FieldCompareLine."Table Name";
        EXIT;
      END;

      IF AllObj.GET(AllObj."Object Type"::Table, TableNo) THEN
        TableName2 := AllObj."Object Name";

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateFile@14(FileName@1000 : Text;VAR FieldCompareLine@1001 : Record 11102067);
    VAR
      ImExportMgt@1002 : Codeunit 11102043;
      oFile@1003 : File;
      OutStr@1004 : OutStream;
    BEGIN
      oFile.WRITEMODE(TRUE);
      oFile.CREATE(FileName);
      oFile.CREATEOUTSTREAM(OutStr);
      ImExportMgt.FillOutstreamFld(OutStr, FieldCompareLine);
      oFile.CLOSE;
    END;

    PROCEDURE EmptyFields@15(VAR FieldCompareLine@1000 : Record 11102067);
    VAR
      TableInformation@1001 : Record 2000000028;
      Fld@1002 : Record 2000000041;
      ActionMgt@1003 : Codeunit 11102038;
      Progressbar@1004 : Codeunit 11102044;
      EmptyRecRef@1005 : RecordRef;
      RecRef@1006 : RecordRef;
      EmptyFldRef@1007 : FieldRef;
      FldRef@1008 : FieldRef;
      FieldCounter@1009 : Integer;
      NoOfFields@1010 : Integer;
      ctEmptyingFields@1011 : TextConst 'DEU=Emptying fields...;ENU=Emptying fields...;ESP=Emptying fields...;FRA=Emptying fields...;NLD=Velden leegmaken...;DEA=Emptying fields...';
    BEGIN
      Progressbar.Open(ctEmptyingFields, 0);

      NoOfFields := FieldCompareLine.COUNT;

      IF FieldCompareLine.FINDSET THEN
        REPEAT
          FieldCounter += 1;
          IF Fld.GET(FieldCompareLine."Table No.", FieldCompareLine."No.") THEN
            IF Fld.Class = Fld.Class::Normal THEN BEGIN

              EmptyRecRef.OPEN(FieldCompareLine."Table No.");
              EmptyFldRef := EmptyRecRef.FIELD(FieldCompareLine."No.");

              TableInformation.SETRANGE("Table No.", FieldCompareLine."Table No.");
              IF TableInformation.FINDSET THEN
                REPEAT

                  RecRef.OPEN(FieldCompareLine."Table No.", FALSE, TableInformation."Company Name");
                  FldRef := RecRef.FIELD(FieldCompareLine."No.");
                  ActionMgt.SetNotEmptyFilter(FldRef, Fld);

                  Progressbar.BarSize := RecRef.COUNT;
                  Progressbar.UseRange(100 / NoOfFields * (FieldCounter - 1), 100 / NoOfFields * FieldCounter);
                  IF RecRef.FINDSET THEN
                    REPEAT
                      Progressbar.AddToBar(1);

                      FldRef := RecRef.FIELD(FieldCompareLine."No.");
                      FldRef.VALUE := EmptyFldRef.VALUE;
                      RecRef.MODIFY;
                    UNTIL RecRef.NEXT = 0;
                  RecRef.CLOSE;
                UNTIL TableInformation.NEXT = 0;
              EmptyRecRef.CLOSE;
            END;
        UNTIL FieldCompareLine.NEXT = 0;

      Progressbar.Close;
    END;

    PROCEDURE DeleteFields@16(VAR FieldCompareLine@1000 : Record 11102067);
    VAR
      Fld@1001 : Record 2000000041;
    BEGIN
      IF FieldCompareLine.FINDSET THEN
        REPEAT
          IF Fld.GET(FieldCompareLine."Table No.", FieldCompareLine."No.") THEN
            Fld.DELETE;
          DeleteLeftTable(FieldCompareLine);
        UNTIL FieldCompareLine.NEXT = 0;
    END;

    PROCEDURE AddToRenumberTool@17(VAR FieldCompareLine@1000 : Record 11102067);
    VAR
      FieldToRenumber@1001 : Record 11102074;
    BEGIN
      IF FieldCompareLine.FINDSET THEN
        REPEAT
          IF NOT FieldToRenumber.GET(FieldCompareLine."Table No.", FieldCompareLine."No.") THEN BEGIN
            FieldToRenumber."Table No." := FieldCompareLine."Table No.";
            FieldToRenumber.VALIDATE("Field No.", FieldCompareLine."No.");
            FieldToRenumber.INSERT;
          END;
        UNTIL FieldCompareLine.NEXT = 0;
    END;

    PROCEDURE ShowChangesInDirectory@18(VAR FieldCompareLine@1000 : Record 11102067);
    VAR
      TmpFieldCompareLine@1001 : TEMPORARY Record 11102067;
      TmpObject@1002 : TEMPORARY Record 2000000001;
      Progressbar@1003 : Codeunit 11102044;
      SourceControl@1004 : Codeunit 11102050;
      FileHandler@1005 : Codeunit 11102097;
      FileNameMgt@1006 : Codeunit 11102107;
      ClientDirectory@1007 : Text;
      FileName@1008 : Text;
      LeftServerDirectory@1009 : Text;
      RightServerDirectory@1010 : Text;
      ServerDirectory@1011 : Text;
      ctExportingObjects@1012 : TextConst 'DEU=Exporting objects...;ENU=Exporting objects...;ESP=Exporting objects...;FRA=Exporting objects...;NLD=Objecten exporteren...;DEA=Exporting objects...';
    BEGIN
      GetSelectedObjects(FieldCompareLine, TmpObject);

      ServerDirectory := FileHandler.CreateServerDirectory;

      LeftServerDirectory := ServerDirectory + 'leftfields\';
      RightServerDirectory := ServerDirectory + 'rightfields\';

      FileHandler.CheckCreateServerDirectory(LeftServerDirectory);
      FileHandler.CheckCreateServerDirectory(RightServerDirectory);

      Progressbar.Open(ctExportingObjects, 1);
      Progressbar.BarSize := TmpObject.COUNT;

      IF TmpObject.FINDSET THEN
        REPEAT
          Progressbar.AddToBar(1);
          Progressbar.Text1Object := TmpObject;

          FileName := FileNameMgt.ObjectFileName(TmpObject, 'fld');

          FieldCompareLine.FILTERGROUP(10);
          FieldCompareLine.SETRANGE("Table No.", TmpObject.ID);
          FieldCompareLine.SETFILTER(Name, '<>%1', '');
          IF NOT FieldCompareLine.ISEMPTY THEN
            CreateFile(LeftServerDirectory + FileName, FieldCompareLine);
          FieldCompareLine.SETRANGE(Name);

          FieldCompareLine.SETFILTER("New Name", '<>%1', '');
          IF FieldCompareLine.FINDSET THEN
            REPEAT
              TmpFieldCompareLine.FillLeftFromRightCompareLine(FieldCompareLine);
              TmpFieldCompareLine.INSERT;
            UNTIL FieldCompareLine.NEXT = 0;
          FieldCompareLine.SETRANGE("New Name");
          FieldCompareLine.SETRANGE("Table No.");
          FieldCompareLine.FILTERGROUP(0);

          IF NOT TmpFieldCompareLine.ISEMPTY THEN
            CreateFile(RightServerDirectory + FileName, TmpFieldCompareLine);
          TmpFieldCompareLine.DELETEALL;

        UNTIL TmpObject.NEXT = 0;

      Progressbar.Close;

      ClientDirectory := FileHandler.DownloadDirectoryToClient(ServerDirectory, '');

      SourceControl.StartCompareToolDirectory(ClientDirectory + 'leftfields\', ClientDirectory + 'rightfields\');
    END;

    PROCEDURE ShowChangesOneFile@19(VAR FieldCompareLine@1000 : Record 11102067);
    VAR
      TmpFieldCompareLine@1001 : TEMPORARY Record 11102067;
      Progressbar@1002 : Codeunit 11102044;
      SourceControl@1003 : Codeunit 11102050;
      FileHandler@1004 : Codeunit 11102097;
      LeftClientFileName@1005 : Text;
      LeftServerFileName@1006 : Text;
      RightClientFileName@1007 : Text;
      RightServerFileName@1008 : Text;
      ServerDirectoryName@1009 : Text;
      ctExportingObjects@1010 : TextConst 'DEU=Exporting objects...;ENU=Exporting objects...;ESP=Exporting objects...;FRA=Exporting objects...;NLD=Objecten exporteren...;DEA=Exporting objects...';
    BEGIN
      ServerDirectoryName := FileHandler.TempDirectory;

      LeftServerFileName := ServerDirectoryName + 'left.txt';
      RightServerFileName := ServerDirectoryName + 'right.txt';

      FileHandler.DeleteServerFile(LeftServerFileName);
      FileHandler.DeleteServerFile(RightServerFileName);

      Progressbar.Open(ctExportingObjects, 0);
      Progressbar.BarSize := 2;

      Progressbar.AddToBar(1);

      FieldCompareLine.FILTERGROUP(10);
      FieldCompareLine.SETFILTER(Name, '<>%1', '');

      CreateFile(LeftServerFileName, FieldCompareLine);
      FieldCompareLine.SETRANGE(Name);

      Progressbar.AddToBar(1);

      FieldCompareLine.SETFILTER("New Name", '<>%1', '');
      IF FieldCompareLine.FINDSET THEN
        REPEAT
          TmpFieldCompareLine.FillLeftFromRightCompareLine(FieldCompareLine);
          TmpFieldCompareLine.INSERT;
        UNTIL FieldCompareLine.NEXT = 0;
      FieldCompareLine.SETRANGE("New Name");

      CreateFile(RightServerFileName, TmpFieldCompareLine);

      FieldCompareLine.FILTERGROUP(0);

      TmpFieldCompareLine.DELETEALL;

      Progressbar.Close;

      LeftClientFileName := FileHandler.DownloadToClient(LeftServerFileName, '', '');
      RightClientFileName := FileHandler.DownloadToClient(RightServerFileName, '', '');

      SourceControl.StartCompareToolFile(LeftClientFileName, RightClientFileName);
    END;

    PROCEDURE ExportLeft@20(VAR FieldCompareLine@1000 : Record 11102067);
    VAR
      CommonDialog@1001 : Codeunit 11102059;
      FileHandler@1002 : Codeunit 11102097;
      ClientFileName@1003 : Text[1024];
      ServerFileName@1004 : Text;
      ctDefaultFileName@1005 : TextConst 'DEU=fields.fld;ENU=fields.fld;ESP=fields.fld;FRA=fields.fld;NLD=fields.fld;DEA=fields.fld';
    BEGIN
      CommonDialog.AddKnownExtension('fld');
      IF NOT CommonDialog.SaveFile(ClientFileName, ServerFileName, ctDefaultFileName) THEN
        EXIT;

      FieldCompareLine.FILTERGROUP(10);
      FieldCompareLine.SETFILTER(Name, '<>%1', '');
      CreateFile(ServerFileName, FieldCompareLine);

      FileHandler.DownloadToClient(ServerFileName, ClientFileName, ctDefaultFileName);

      FieldCompareLine.SETRANGE(Name);
      FieldCompareLine.FILTERGROUP(0);
    END;

    PROCEDURE ExportLeftSplit@21(VAR FieldCompareLine@1000 : Record 11102067);
    VAR
      TmpObject@1001 : TEMPORARY Record 2000000001;
      Progressbar@1002 : Codeunit 11102044;
      CommonDialog@1003 : Codeunit 11102059;
      FileHandler@1004 : Codeunit 11102097;
      FileNameMgt@1005 : Codeunit 11102107;
      ClientFileName@1006 : Text[1024];
      ClientPathToExport@1007 : Text;
      FileName@1008 : Text[1024];
      ServerFileName@1009 : Text[1024];
      ctExportingObjects@1010 : TextConst 'DEU=Exporting objects...;ENU=Exporting objects...;ESP=Exporting objects...;FRA=Exporting objects...;NLD=Objecten exporteren...;DEA=Exporting objects...';
    BEGIN
      GetSelectedObjects(FieldCompareLine, TmpObject);

      CommonDialog.SelectDirectory(ClientPathToExport);
      IF ClientPathToExport = '' THEN
        EXIT;

      Progressbar.Open(ctExportingObjects, 1);
      Progressbar.BarSize := TmpObject.COUNT;

      IF TmpObject.FINDSET THEN
        REPEAT
          Progressbar.AddToBar(1);
          Progressbar.Text1Object := TmpObject;

          FileName := FileNameMgt.ObjectFileName(TmpObject, 'fld');
          ClientFileName := ClientPathToExport + FileName;
          ServerFileName := FileHandler.CreateServerFileName(ClientFileName, FileName);

          FieldCompareLine.FILTERGROUP(10);
          FieldCompareLine.SETRANGE("Table No.", TmpObject.ID);
          FieldCompareLine.SETFILTER(Name, '<>%1', '');

          IF NOT FieldCompareLine.ISEMPTY THEN BEGIN
            CreateFile(ServerFileName, FieldCompareLine);
            FileHandler.DownloadToClient(ServerFileName, ClientFileName, FileName);
          END;
          FieldCompareLine.SETRANGE("Table No.");
          FieldCompareLine.SETRANGE(Name);
          FieldCompareLine.FILTERGROUP(0);

        UNTIL TmpObject.NEXT = 0;

      Progressbar.Close;
    END;

    PROCEDURE ExportRight@22(VAR FieldCompareLine@1000 : Record 11102067);
    VAR
      TmpFieldCompareLine@1001 : TEMPORARY Record 11102067;
      CommonDialog@1002 : Codeunit 11102059;
      FileHandler@1003 : Codeunit 11102097;
      ClientFileName@1004 : Text[1024];
      ServerFileName@1005 : Text;
      ctDefaultFileName@1006 : TextConst 'DEU=fields.fld;ENU=fields.fld;ESP=fields.fld;FRA=fields.fld;NLD=fields.fld;DEA=fields.fld';
    BEGIN
      CommonDialog.AddKnownExtension('fld');
      IF NOT CommonDialog.SaveFile(ClientFileName, ServerFileName, ctDefaultFileName) THEN
        EXIT;

      FieldCompareLine.FILTERGROUP(10);
      FieldCompareLine.SETFILTER("New Name", '<>%1', '');
      IF FieldCompareLine.FINDSET THEN
        REPEAT
          TmpFieldCompareLine.FillLeftFromRightCompareLine(FieldCompareLine);
          TmpFieldCompareLine.INSERT;
        UNTIL FieldCompareLine.NEXT = 0;
      FieldCompareLine.SETRANGE("New Name");
      FieldCompareLine.FILTERGROUP(0);

      CreateFile(ServerFileName, FieldCompareLine);

      FileHandler.DownloadToClient(ServerFileName, ClientFileName, ctDefaultFileName);
    END;

    PROCEDURE ExportRighSplit@23(VAR FieldCompareLine@1000 : Record 11102067);
    VAR
      TmpFieldCompareLine@1001 : TEMPORARY Record 11102067;
      TmpObject@1002 : TEMPORARY Record 2000000001;
      Progressbar@1003 : Codeunit 11102044;
      CommonDialog@1004 : Codeunit 11102059;
      FileHandler@1005 : Codeunit 11102097;
      FileNameMgt@1006 : Codeunit 11102107;
      ClientFileName@1007 : Text[1024];
      ClientPathToExport@1008 : Text;
      FileName@1009 : Text[1024];
      ServerFileName@1010 : Text[1024];
      ctExportingObjects@1011 : TextConst 'DEU=Exporting objects...;ENU=Exporting objects...;ESP=Exporting objects...;FRA=Exporting objects...;NLD=Objecten exporteren...;DEA=Exporting objects...';
    BEGIN
      GetSelectedObjects(FieldCompareLine, TmpObject);

      CommonDialog.SelectDirectory(ClientPathToExport);
      IF ClientPathToExport = '' THEN
        EXIT;

      Progressbar.Open(ctExportingObjects, 1);
      Progressbar.BarSize := TmpObject.COUNT;

      IF TmpObject.FINDSET THEN
        REPEAT
          Progressbar.AddToBar(1);
          Progressbar.Text1Object := TmpObject;

          FileName := FileNameMgt.ObjectFileName(TmpObject, 'fld');
          ClientFileName := ClientPathToExport + FileName;
          ServerFileName := FileHandler.CreateServerFileName(ClientFileName, FileName);

          TmpFieldCompareLine.DELETEALL;

          FieldCompareLine.FILTERGROUP(10);
          FieldCompareLine.SETRANGE("Table No.", TmpObject.ID);
          FieldCompareLine.SETFILTER("New Name", '<>%1', '');
          IF FieldCompareLine.FINDSET THEN
            REPEAT
              TmpFieldCompareLine.FillLeftFromRightCompareLine(FieldCompareLine);
              TmpFieldCompareLine.INSERT;
            UNTIL FieldCompareLine.NEXT = 0;
          FieldCompareLine.SETRANGE("Table No.");
          FieldCompareLine.SETRANGE("New Name");
          FieldCompareLine.FILTERGROUP(0);

          IF NOT TmpFieldCompareLine.ISEMPTY THEN BEGIN
            CreateFile(ServerFileName, TmpFieldCompareLine);
            FileHandler.DownloadToClient(ServerFileName, ClientFileName, FileName);
          END;

        UNTIL TmpObject.NEXT = 0;

      FieldCompareLine.FILTERGROUP(0);

      Progressbar.Close;
    END;

    PROCEDURE ImportLeft@24(VAR LeftIsCurrentDatabase@1000 : Boolean;VAR LeftDatabaseCode@1001 : Code[20];VAR RightDatabaseCode@1002 : Code[20];VAR TmpHistoryStatus@1003 : ARRAY [2] OF TEMPORARY Record 2000000001) : Boolean;
    VAR
      CommonDialog@1004 : Codeunit 11102059;
      ClientFileName@1005 : Text;
      ServerFileName@1006 : Text;
    BEGIN
      CommonDialog.AddKnownExtension('fld');
      IF NOT CommonDialog.OpenFile(ClientFileName, ServerFileName) THEN
        EXIT;

      ImportFile(ServerFileName, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus);
      EXIT(TRUE);
    END;

    PROCEDURE ImportLeftSplit@25(VAR LeftIsCurrentDatabase@1000 : Boolean;VAR LeftDatabaseCode@1001 : Code[20];VAR RightDatabaseCode@1002 : Code[20];VAR TmpHistoryStatus@1003 : ARRAY [2] OF TEMPORARY Record 2000000001) : Boolean;
    VAR
      CommonDialog@1004 : Codeunit 11102059;
      ClientDirectoryName@1005 : Text[1024];
    BEGIN
      CommonDialog.SelectDirectory(ClientDirectoryName);

      IF ClientDirectoryName = '' THEN
        EXIT;

      ImportDirectory(ClientDirectoryName, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus);
      EXIT(TRUE);
    END;

    PROCEDURE ImportRight@26(VAR LeftIsCurrentDatabase@1000 : Boolean;VAR LeftDatabaseCode@1001 : Code[20];VAR RightDatabaseCode@1002 : Code[20];VAR TmpHistoryStatus@1003 : ARRAY [2] OF TEMPORARY Record 2000000001) : Boolean;
    VAR
      TmpFieldCompareLine@1004 : TEMPORARY Record 11102067;
      ImExportMgt@1005 : Codeunit 11102043;
      Progressbar@1006 : Codeunit 11102044;
      CommonDialog@1007 : Codeunit 11102059;
      ClientFileName@1008 : Text;
      ServerFileName@1009 : Text;
      ctImporting@1010 : TextConst 'DEU=Importing fields field...;ENU=Importing fields field...;ESP=Importing fields field...;FRA=Importing fields field...;NLD=Veldenbestand importeren...;DEA=Importing fields field...';
    BEGIN
      CommonDialog.AddKnownExtension('fld');
      IF NOT CommonDialog.OpenFile(ClientFileName, ServerFileName) THEN
        EXIT;

      Progressbar.Open(ctImporting, 0);
      ImExportMgt.ImportFldFromFile(ServerFileName, TmpFieldCompareLine, Progressbar, 0, 60);
      AddFieldsRight(
        TmpFieldCompareLine, TRUE, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus, Progressbar, 60, 100);
      Progressbar.Close;

      EXIT(TRUE);
    END;

    PROCEDURE ImportRightSplit@27(VAR LeftIsCurrentDatabase@1000 : Boolean;VAR LeftDatabaseCode@1001 : Code[20];VAR RightDatabaseCode@1002 : Code[20];VAR TmpHistoryStatus@1003 : ARRAY [2] OF TEMPORARY Record 2000000001) : Boolean;
    VAR
      TmpFieldCompareLine@1004 : TEMPORARY Record 11102067;
      ImExportMgt@1005 : Codeunit 11102043;
      Progressbar@1006 : Codeunit 11102044;
      CommonDialog@1007 : Codeunit 11102059;
      ClientDirectoryName@1008 : Text[1024];
    BEGIN
      CommonDialog.SelectDirectory(ClientDirectoryName);
      IF ClientDirectoryName = '' THEN
        EXIT;

      ImExportMgt.GetFieldsFromDirectory(ClientDirectoryName, TmpFieldCompareLine);
      AddFieldsRight(
        TmpFieldCompareLine, TRUE, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus, Progressbar, 0, 0);

      EXIT(TRUE);
    END;

    PROCEDURE ImportFile@28(ServerFileName@1000 : Text;VAR LeftIsCurrentDatabase@1001 : Boolean;VAR LeftDatabaseCode@1002 : Code[20];VAR RightDatabaseCode@1003 : Code[20];VAR TmpHistoryStatus@1004 : ARRAY [2] OF TEMPORARY Record 2000000001);
    VAR
      TmpFieldCompareLine@1005 : TEMPORARY Record 11102067;
      ImExportMgt@1006 : Codeunit 11102043;
      Progressbar@1007 : Codeunit 11102044;
      ctImporting@1008 : TextConst 'DEU=Importing fields field...;ENU=Importing fields field...;ESP=Importing fields field...;FRA=Importing fields field...;NLD=Veldenbestand importeren...;DEA=Importing fields field...';
    BEGIN
      Progressbar.Open(ctImporting, 0);

      ImExportMgt.ImportFldFromFile(ServerFileName, TmpFieldCompareLine, Progressbar, 0, 60);
      AddFieldsLeft(TmpFieldCompareLine, TRUE, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus, Progressbar, 60, 100);

      Progressbar.Close;
    END;

    PROCEDURE ImportDirectory@29(DirectoryName@1000 : Text;VAR LeftIsCurrentDatabase@1001 : Boolean;VAR LeftDatabaseCode@1002 : Code[20];VAR RightDatabaseCode@1003 : Code[20];VAR TmpHistoryStatus@1004 : ARRAY [2] OF TEMPORARY Record 2000000001);
    VAR
      TmpFieldCompareLine@1005 : TEMPORARY Record 11102067;
      ImExportMgt@1006 : Codeunit 11102043;
      Progressbar@1007 : Codeunit 11102044;
    BEGIN
      ImExportMgt.GetFieldsFromDirectory(DirectoryName, TmpFieldCompareLine);
      AddFieldsLeft(TmpFieldCompareLine, TRUE, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus, Progressbar, 0, 0);
    END;

    PROCEDURE MarkObjectsLeft@30(VAR FieldCompareLine@1000 : Record 11102067;VAR LeftIsCurrentDatabase@1001 : Boolean;VAR LeftDatabaseCode@1002 : Code[20]);
    VAR
      NAVDatabase@1003 : Record 11102099;
      Object@1004 : Record 2000000001;
      TmpObject@1005 : TEMPORARY Record 2000000001;
      VersionControl@1006 : Codeunit 11102040;
      DatabaseMgt@1007 : Codeunit 11102083;
      DummyVersionList@1008 : Text;
    BEGIN
      GetSelectedObjects(FieldCompareLine, TmpObject);

      IF LeftIsCurrentDatabase THEN BEGIN
        VersionControl.CheckMarkLock;

        IF TmpObject.FINDSET THEN
          REPEAT
            IF Object.GET(TmpObject.Type::Table, '', TmpObject.ID) THEN
              VersionControl.MarkObject(Object, TRUE);
          UNTIL TmpObject.NEXT = 0;

      END ELSE BEGIN

        NAVDatabase.GET(LeftDatabaseCode);
        IF TmpObject.FINDSET THEN
          REPEAT
            DatabaseMgt.MarkObject(NAVDatabase, TmpObject.Type, TmpObject.ID, DummyVersionList);
          UNTIL TmpObject.NEXT = 0;

      END;
    END;

    PROCEDURE RemoveMarksLeft@31(VAR FieldCompareLine@1000 : Record 11102067;VAR LeftIsCurrentDatabase@1001 : Boolean;VAR LeftDatabaseCode@1002 : Code[20]);
    VAR
      NAVDatabase@1003 : Record 11102099;
      Object@1004 : Record 2000000001;
      TmpObject@1005 : TEMPORARY Record 2000000001;
      VersionControl@1006 : Codeunit 11102040;
      DatabaseMgt@1007 : Codeunit 11102083;
      DummyVersionList@1008 : Text;
    BEGIN
      GetSelectedObjects(FieldCompareLine, TmpObject);

      IF LeftIsCurrentDatabase THEN BEGIN

        IF TmpObject.FINDSET THEN
          REPEAT
            IF Object.GET(TmpObject.Type::Table, '', TmpObject.ID) THEN
              VersionControl.RemoveObjectMark(Object);
          UNTIL TmpObject.NEXT = 0;
        VersionControl.RemoveMarkLock(TRUE);

      END ELSE BEGIN

        NAVDatabase.GET(LeftDatabaseCode);
        IF TmpObject.FINDSET THEN
          REPEAT
            DatabaseMgt.RemoveMarkObject(NAVDatabase, TmpObject.Type, TmpObject.ID, DummyVersionList);
          UNTIL TmpObject.NEXT = 0;

      END;
    END;

    PROCEDURE RemoveAllMarksLeft@32(VAR LeftIsCurrentDatabase@1000 : Boolean;VAR LeftDatabaseCode@1001 : Code[20]);
    VAR
      NAVDatabase@1002 : Record 11102099;
      VersionControl@1003 : Codeunit 11102040;
      DatabaseMgt@1004 : Codeunit 11102083;
    BEGIN
      IF LeftIsCurrentDatabase THEN
        VersionControl.RemoveObjectMarks(FALSE)
      ELSE BEGIN
        NAVDatabase.GET(LeftDatabaseCode);
        DatabaseMgt.RemoveAllMarks(NAVDatabase);
      END;
    END;

    PROCEDURE MarkObjectsRight@33(VAR FieldCompareLine@1000 : Record 11102067;VAR RightDatabaseCode@1001 : Code[20]);
    VAR
      NAVDatabase@1002 : Record 11102099;
      TmpObject@1003 : TEMPORARY Record 2000000001;
      DatabaseMgt@1004 : Codeunit 11102083;
      DummyVersionList@1005 : Text;
    BEGIN
      GetSelectedObjects(FieldCompareLine, TmpObject);

      NAVDatabase.GET(RightDatabaseCode);
      IF TmpObject.FINDSET THEN
        REPEAT
          DatabaseMgt.MarkObject(NAVDatabase, TmpObject.Type, TmpObject.ID, DummyVersionList);
        UNTIL TmpObject.NEXT = 0;
    END;

    PROCEDURE RemoveMarksRight@34(VAR FieldCompareLine@1000 : Record 11102067;VAR RightDatabaseCode@1001 : Code[20]);
    VAR
      NAVDatabase@1002 : Record 11102099;
      TmpObject@1003 : TEMPORARY Record 2000000001;
      DatabaseMgt@1004 : Codeunit 11102083;
      DummyVersionList@1005 : Text;
    BEGIN
      GetSelectedObjects(FieldCompareLine, TmpObject);

      NAVDatabase.GET(RightDatabaseCode);
      IF TmpObject.FINDSET THEN
        REPEAT
          DatabaseMgt.RemoveMarkObject(NAVDatabase, TmpObject.Type, TmpObject.ID, DummyVersionList);
        UNTIL TmpObject.NEXT = 0;
    END;

    PROCEDURE RemoveAllMarksRight@35(VAR RightDatabaseCode@1000 : Code[20]);
    VAR
      NAVDatabase@1001 : Record 11102099;
      DatabaseMgt@1002 : Codeunit 11102083;
    BEGIN
      NAVDatabase.GET(RightDatabaseCode);
      DatabaseMgt.RemoveAllMarks(NAVDatabase);
    END;

    PROCEDURE AddTablesWithDifferences@36(VAR LeftIsCurrentDatabase@1000 : Boolean;VAR LeftDatabaseCode@1001 : Code[20];VAR RightDatabaseCode@1002 : Code[20];VAR TmpHistoryStatus@1003 : ARRAY [2] OF TEMPORARY Record 2000000001;VAR Progressbar@1004 : Codeunit 11102044);
    VAR
      NAVDatabase@1005 : Record 11102099;
      Object@1006 : Record 2000000001;
      TmpDifferentObject@1007 : TEMPORARY Record 2000000001;
      TmpObject@1008 : TEMPORARY Record 2000000001;
      VersionControl@1009 : Codeunit 11102040;
      SourceControl@1010 : Codeunit 11102050;
      DatabaseMgt@1011 : Codeunit 11102083;
      NewObjectDateTime@1012 : DateTime;
      ObjectDateTime@1013 : DateTime;
      IsDifferent@1014 : Boolean;
    BEGIN
      NAVDatabase.GET(RightDatabaseCode);
      DatabaseMgt.GetObjectProperties(NAVDatabase, TmpObject, Progressbar, 0, 30);

      TmpObject.SETRANGE(Type, TmpObject.Type::Table);
      Progressbar.BarSize := TmpObject.COUNT;
      Progressbar.UseRange(30, 35);
      IF TmpObject.FINDSET THEN
        REPEAT
          Progressbar.AddToBar(1);

          IsDifferent := NOT Object.GET(TmpObject.Type, '', TmpObject.ID);

          ObjectDateTime := SourceControl.CreateDateTime2(Object.Date, Object.Time);
          NewObjectDateTime := SourceControl.CreateDateTime2(TmpObject.Date, TmpObject.Time);

          IF (Object.Name <> TmpObject.Name) OR
             (ABS(ObjectDateTime - NewObjectDateTime) > 1000) OR
             (VersionControl.CleanUpVersionList(Object."Version List") <> VersionControl.CleanUpVersionList(TmpObject."Version List"))
          THEN
            IsDifferent := TRUE;

          IF IsDifferent THEN BEGIN
            TmpDifferentObject := TmpObject;
            TmpDifferentObject.INSERT;
          END;

          IF NOT TmpHistoryStatus[2].GET(TmpObject.Type, '', TmpObject.ID) THEN BEGIN
            TmpHistoryStatus[2].Type := TmpObject.Type;
            TmpHistoryStatus[2].ID := TmpObject.ID;
            TmpHistoryStatus[2]."DBM Table No." := TmpObject."DBM Table No.";
            TmpHistoryStatus[2].INSERT;
          END ELSE BEGIN
            TmpHistoryStatus[2]."DBM Table No." := TmpObject."DBM Table No.";
            TmpHistoryStatus[2].MODIFY;
          END;

        UNTIL TmpObject.NEXT = 0;

      Object.SETRANGE(Type, Object.Type::Table);
      Progressbar.BarSize := TmpObject.COUNT;
      Progressbar.UseRange(35, 40);
      IF Object.FINDSET THEN
        REPEAT
          IF NOT TmpObject.GET(Object.Type, '', Object.ID) THEN BEGIN
            TmpDifferentObject := Object;
            TmpDifferentObject.INSERT;
          END;
        UNTIL Object.NEXT = 0;

      Progressbar.BarSize := TmpDifferentObject.COUNT;
      Progressbar.UseRange(40, 95);
      IF TmpDifferentObject.FINDSET THEN
        REPEAT
          Progressbar.AddToBar(1);
          AddTableLeft(TmpDifferentObject.ID, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus);
          AddTableRight(TmpDifferentObject.ID, LeftIsCurrentDatabase, LeftDatabaseCode, RightDatabaseCode, TmpHistoryStatus);
        UNTIL TmpDifferentObject.NEXT = 0;
    END;

    LOCAL PROCEDURE GetSelectedObjects@37(VAR FieldCompareLine@1000 : Record 11102067;VAR TmpObject@1001 : TEMPORARY Record 2000000001);
    BEGIN
      FieldCompareLine.FILTERGROUP(10);
      IF FieldCompareLine.FINDFIRST THEN
        REPEAT
          IF NOT TmpObject.GET(TmpObject.Type::Table, '', FieldCompareLine."Table No.") THEN BEGIN
            TmpObject.Type := TmpObject.Type::Table;
            TmpObject.ID := FieldCompareLine."Table No.";
            TmpObject.Name := COPYSTR(FieldCompareLine."Table Name", 1, MAXSTRLEN(TmpObject.Name));
            TmpObject.INSERT;
          END;
          FieldCompareLine.SETFILTER("Table No.", '>%1', FieldCompareLine."Table No.");
        UNTIL FieldCompareLine.NEXT = 0;

      FieldCompareLine.SETRANGE("Table No.");
      FieldCompareLine.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE UpdateHistoryStatus@38(VAR NAVDatabase@1000 : Record 11102099;VAR TableNo@1001 : Integer;VAR TmpHistoryStatus@1002 : TEMPORARY Record 2000000001);
    VAR
      DatabaseMgt@1003 : Codeunit 11102083;
    BEGIN
      IF NOT TmpHistoryStatus.GET(TmpHistoryStatus.Type::Table, '', TableNo) THEN BEGIN
        TmpHistoryStatus.Type := TmpHistoryStatus.Type::Table;
        TmpHistoryStatus.ID := TableNo;
        TmpHistoryStatus."DBM Table No." := DatabaseMgt.GetObjectOutdated(NAVDatabase, TmpHistoryStatus.Type::Table, TableNo);
        TmpHistoryStatus.INSERT;
      END;
    END;

    BEGIN
    END.
  }
}

