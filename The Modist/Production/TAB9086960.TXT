OBJECT Table 9086960 nF. Permission Group
{
  OBJECT-PROPERTIES
  {
    Date=30/10/16;
    Time=11:29:02 AM;
    Version List=NF2016.17;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               Rec.TESTFIELD(Name);
               IF ((Rec.Sequence = 0) AND ( NOT (Rec."Give Everything"))) THEN
                 Rec.VALIDATE(Sequence, NewSequence());
               NfRecordAuditToolkit.UpdateCreated(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               NfRecordAuditToolkit.UpdateModified(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               NfPermissionGroup.RESET();
               NfPermissionGroup.SETCURRENTKEY("Parent ID");
               NfPermissionGroup.SETRANGE("Parent ID", Rec.ID);
               NfPermissionGroup.DELETEALL(TRUE);

               NfPermission.RESET();
               NfPermission.SETCURRENTKEY("nF. Permission Group ID");
               NfPermission.SETRANGE("nF. Permission Group ID", Rec.ID);
               NfPermission.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=nForcement Permission Group;
               ENG=nForcement Permission Group];
    LookupPageID=Page9086967;
    DrillDownPageID=Page9086967;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 11  ;   ;Name                ;Text100       ;CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 12  ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 20  ;   ;Sequence            ;Integer       ;OnValidate=BEGIN
                                                                Rec.VALIDATE(Hash, NfTreeToolkit.IntegerToHash(Rec.Sequence));
                                                              END;

                                                   CaptionML=[ENU=Sequence;
                                                              ENG=Sequence] }
    { 21  ;   ;Hash                ;Text6         ;OnValidate=BEGIN
                                                                IF (Rec."Parent ID" <> 0) THEN
                                                                BEGIN
                                                                  Rec.CALCFIELDS("Parent Full Hash");
                                                                  Rec.VALIDATE("Full Hash", Rec."Parent Full Hash" + Rec.Hash);
                                                                END
                                                                ELSE
                                                                  Rec.VALIDATE("Full Hash", Rec.Hash);
                                                              END;

                                                   CaptionML=[ENU=Hash;
                                                              ENG=Hash] }
    { 22  ;   ;Full Hash           ;Text250       ;OnValidate=BEGIN
                                                                UpdateChildGroups(Rec.FIELDNO("Full Hash"));
                                                                UpdatePermissions(Rec.FIELDNO("Full Hash"));
                                                              END;

                                                   CaptionML=[ENU=Full Hash;
                                                              ENG=Full Hash] }
    { 23  ;   ;Parent ID           ;Integer       ;TableRelation="nF. Permission Group";
                                                   OnValidate=BEGIN
                                                                IF (Rec."Parent ID" <> xRec."Parent ID") THEN
                                                                BEGIN
                                                                  IF (Rec."Parent ID" <> 0) THEN
                                                                  BEGIN
                                                                    NfPermissionGroup.GET(Rec."Parent ID");
                                                                    Rec.VALIDATE(Indentation, NfPermissionGroup.Indentation + 1);
                                                                    Rec.VALIDATE("Full Hash", NfPermissionGroup."Full Hash" + Rec.Hash);
                                                                  END
                                                                  ELSE
                                                                  BEGIN
                                                                    Rec.VALIDATE(Indentation, 0);
                                                                    Rec.VALIDATE("Full Hash", Rec.Hash);
                                                                  END;
                                                                  Rec.VALIDATE(Sequence, NewSequence());
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Parent ID;
                                                              ENG=Parent ID] }
    { 24  ;   ;Parent Full Hash    ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("nF. Permission Group"."Full Hash" WHERE (ID=FIELD(Parent ID)));
                                                   CaptionML=[ENU=Parent Full Hash;
                                                              ENG=Parent Full Hash];
                                                   Editable=No }
    { 25  ;   ;Indentation         ;Integer       ;OnValidate=BEGIN
                                                                UpdateChildGroups(Rec.FIELDNO(Indentation));
                                                              END;

                                                   CaptionML=[ENU=Indentation;
                                                              ENG=Indentation] }
    { 30  ;   ;Type                ;Option        ;InitValue=Take Away;
                                                   OnValidate=VAR
                                                                eDefaultGroupAlwaysGive@1000000000 : TextConst 'ENU=Default group must be of type "%1".;ENG=Default group must be of type "%1".';
                                                              BEGIN
                                                                IF (Rec.Type <> xRec.Type) THEN
                                                                  IF ((Rec."Give Everything") AND (Rec.Type <> Rec.Type::Give)) THEN
                                                                    ERROR(eDefaultGroupAlwaysGive, FORMAT(Rec.Type::Give));
                                                                UpdateChildGroups(Rec.FIELDNO(Type));
                                                                UpdatePermissions(Rec.FIELDNO(Type));
                                                              END;

                                                   OnLookup=BEGIN
                                                              UpdateChildGroups(Rec.FIELDNO(Force));
                                                              UpdatePermissions(Rec.FIELDNO(Force));
                                                            END;

                                                   CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=" ,Give,Take Away";
                                                                    ENG=" ,Give,Take Away"];
                                                   OptionString=[ ,Give,Take Away] }
    { 31  ;   ;Force               ;Boolean       ;OnValidate=BEGIN
                                                                UpdateChildGroups(Rec.FIELDNO(Force));
                                                              END;

                                                   CaptionML=[ENU=Force;
                                                              ENG=Force] }
    { 40  ;   ;Give Everything     ;Boolean       ;OnValidate=BEGIN
                                                                UpdatePermissions(Rec.FIELDNO("Give Everything"));
                                                              END;

                                                   CaptionML=[ENU=Give Everything;
                                                              ENG=Give Everything] }
    { 50  ;   ;MenuSuite Control GUID;GUID        ;CaptionML=[ENU=MenuSuite Control GUID;
                                                              ENG=MenuSuite Control GUID] }
    { 60  ;   ;Permissions         ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("nF. Permission" WHERE (nF. Permission Group ID=FIELD(ID)));
                                                   CaptionML=[ENU=Permissions;
                                                              ENG=Permissions];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 70  ;   ;Hidden              ;Boolean       ;OnValidate=BEGIN
                                                                UpdateChildGroups(Rec.FIELDNO(Hidden));
                                                              END;

                                                   CaptionML=[ENU=Hidden;
                                                              ENG=Hidden] }
    { 80  ;   ;Object Type Filter  ;Option        ;FieldClass=FlowFilter;
                                                   OnValidate=VAR
                                                                lIsTable@1000000000 : Boolean;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Object Type Filter;
                                                              ENG=Object Type Filter];
                                                   OptionCaptionML=[ENU=" ,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System";
                                                                    ENG=" ,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System"];
                                                   OptionString=[ ,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System] }
    { 81  ;   ;Object ID Filter    ;Integer       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Object ID Filter;
                                                              ENG=Object ID Filter] }
    { 82  ;   ;Has Permission      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("nF. Permission" WHERE (nF. Permission Group ID=FIELD(ID),
                                                                                             Object Type=FIELD(FILTER(Object Type Filter)),
                                                                                             Object ID=FIELD(FILTER(Object ID Filter))));
                                                   CaptionML=[ENU=Has Permission;
                                                              ENG=Has Permission];
                                                   Editable=No }
    { 90  ;   ;System Activity     ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=System Activity;
                                                              ENG=System Activity] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              NfRecordAuditToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              NfRecordAuditToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;ID                                       }
    {    ;Name                                    ;Clustered=Yes }
    {    ;Full Hash                                }
    {    ;Give Everything                          }
    {    ;MenuSuite Control GUID                   }
    {    ;Give Everything,Hidden,Full Hash         }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NfPermissionGroup@1000000002 : Record 9086960;
      NfPermissionGroupMember@1000000005 : Record 9086961;
      NfPermission@1000000003 : Record 9086958;
      NfIif@1000000000 : Codeunit 9086975;
      NfRecordAuditToolkit@1000000001 : Codeunit 9086951;
      NfTreeToolkit@1000000004 : Codeunit 9086978;

    PROCEDURE InitRecord@1000000004();
    BEGIN
      ///<summary>Initialising new record</summary>

      Rec.VALIDATE(Sequence, NewSequence());
    END;

    PROCEDURE NewSequence@1000000003() : Integer;
    VAR
      lNfPermissionGroup@1000000000 : Record 9086960;
    BEGIN
      ///<summary>Returning new sequence</summary>
      ///<returns>The sequence</returns>

      lNfPermissionGroup.RESET();
      lNfPermissionGroup.SETCURRENTKEY("Parent ID", Sequence);
      lNfPermissionGroup.SETRANGE("Parent ID", Rec."Parent ID");
      IF (lNfPermissionGroup.FINDLAST()) THEN
        EXIT(lNfPermissionGroup.Sequence + 1)
      ELSE
        EXIT(1);
    END;

    LOCAL PROCEDURE UpdateChildGroups@1000000005(pFieldId@1000000000 : Integer);
    BEGIN
      ///<summary>Updating child groups</summary>
      ///<param name="pFieldId">Field ID (the update was called from)</param>

      IF (Rec.ID = 0) THEN
        EXIT;

      NfPermissionGroup.RESET();
      NfPermissionGroup.SETCURRENTKEY("Parent ID");
      NfPermissionGroup.SETRANGE("Parent ID", Rec.ID);
      IF (NfPermissionGroup.FINDSET(TRUE)) THEN
      REPEAT
        CASE (pFieldId) OF
          Rec.FIELDNO("Full Hash"):
            NfPermissionGroup.VALIDATE("Full Hash", Rec."Full Hash" + NfPermissionGroup.Hash);
          Rec.FIELDNO(Indentation):
            NfPermissionGroup.VALIDATE(Indentation, Rec.Indentation + 1);
          Rec.FIELDNO(Type):
            NfPermissionGroup.VALIDATE(Type, Rec.Type);
          Rec.FIELDNO(Force):
            NfPermissionGroup.VALIDATE(Force, Rec.Force);
          Rec.FIELDNO(Hidden):
            NfPermissionGroup.VALIDATE(Hidden, Rec.Hidden);
        END;
        NfPermissionGroup.MODIFY(TRUE);
      UNTIL (NfPermissionGroup.NEXT() = 0);
    END;

    LOCAL PROCEDURE UpdatePermissions@1000000000(pFieldId@1000000000 : Integer);
    BEGIN
      ///<summary>Updating permissions</summary>
      ///<param name="pFieldId">Field ID (the update was called from)</param>

      NfPermission.RESET();
      NfPermission.SETCURRENTKEY("nF. Permission Group ID");
      NfPermission.SETRANGE("nF. Permission Group ID", Rec.ID);
      IF (NfPermission.FINDSET(TRUE)) THEN
      REPEAT
        CASE (pFieldId) OF
          Rec.FIELDNO(Type):
            NfPermission.VALIDATE(Type, Rec.Type);
          Rec.FIELDNO(Force):
            NfPermission.VALIDATE(Force, Rec.Force);
          Rec.FIELDNO("Give Everything"):
            NfPermission.VALIDATE("Give Everything Group", Rec."Give Everything");
          Rec.FIELDNO("Full Hash"):
            NfPermission.VALIDATE("Permission Group Full Hash", Rec."Full Hash");
        END;
        NfPermission.MODIFY(TRUE);
      UNTIL (NfPermission.NEXT() = 0);
    END;

    PROCEDURE GetStyle@1000000002() : Text;
    BEGIN
      ///<summary>Returning style</summary>
      ///<returns>The style</returns>

      IF (Rec."Give Everything") THEN
        EXIT('Favorable')
      ELSE IF (Rec.Hidden) THEN
        EXIT('Subordinate')
      ELSE
        CASE (Rec.Type) OF
          Rec.Type::Give: EXIT(NfIif.Text(Rec.Force, 'Strong', 'Standard'));
          Rec.Type::"Take Away": EXIT(NfIif.Text(Rec.Force, 'StrongAccent', 'StandardAccent'));
          ELSE EXIT('Subordinate');
        END;
    END;

    PROCEDURE MarkUsersAsPending@1000000001();
    BEGIN
      ///<summary>Marking users as pending</summary>

      IF (GetSystemActivity()) THEN
        EXIT;

      NfPermissionGroupMember.RESET();
      NfPermissionGroupMember.SETRANGE("nF. Permisison Group ID", Rec.ID);
      IF (NfPermissionGroupMember.FINDSET()) THEN
      REPEAT
        NfPermissionGroupMember.MarkUsersAsPending();
      UNTIL (NfPermissionGroupMember.NEXT() = 0);
    END;

    PROCEDURE GetSystemActivity@1000000008() : Boolean;
    BEGIN
      ///<summary>Returning if system activity is enabled</summary>
      ///<returns>The answer</returns>

      Rec.FILTERGROUP(2);
      IF (Rec.GETFILTER("System Activity") <> '') THEN
        EXIT(Rec.GETRANGEMIN("System Activity"))
      ELSE
        EXIT(FALSE);
      Rec.FILTERGROUP(0);
    END;

    PROCEDURE SetSystemActivity@1000000007(pSystemActivity@1000000000 : Boolean);
    BEGIN
      ///<summary>Enabling / disabling system activity</summary>
      ///<param name="pSystemActivity">The flag</param>

      Rec.FILTERGROUP(2);
      IF (pSystemActivity) THEN
        Rec.SETRANGE("System Activity", TRUE)
      ELSE
        Rec.SETRANGE("System Activity");
      Rec.FILTERGROUP(0);
    END;

    BEGIN
    {
      ///<summary>nForcement permission group</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-04-24">Created</change>
    }
    END.
  }
}

