OBJECT Page 9815 Std. Password Dialog
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Set Password;
               ENG=Set Password];
    PageType=StandardDialog;
    OnInit=BEGIN
             ValidatePassword := TRUE;
             RequiresPasswordConfirmation := TRUE;
           END;

    OnOpenPage=BEGIN
                 ValidPassword := FALSE;
               END;

    OnQueryClosePage=BEGIN
                       ValidPassword := FALSE;
                       IF CloseAction = ACTION::OK THEN BEGIN
                         IF RequiresPasswordConfirmation AND (SetPassword <> ConfirmPassword) THEN
                           ERROR(PasswordMismatchErr);
                         IF EnableBlankPasswordState AND (SetPassword = '') THEN BEGIN
                           IF NOT CONFIRM(ConfirmBlankPasswordQst) THEN
                             ERROR(PasswordTooSimpleErr);
                         END ELSE BEGIN
                           IF ValidatePassword AND NOT IdentityManagement.ValidatePasswordStrength(SetPassword) THEN
                             ERROR(PasswordTooSimpleErr);
                         END;
                         ValidPassword := TRUE;
                       END
                     END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Field     ;
                Name=SetPassword;
                ExtendedDatatype=Masked;
                CaptionML=[ENU=Password;
                           ENG=Password];
                SourceExpr=SetPassword;
                OnValidate=BEGIN
                             IF ValidatePassword AND NOT IdentityManagement.ValidatePasswordStrength(SetPassword) THEN
                               ERROR(PasswordTooSimpleErr);
                           END;
                            }

    { 3   ;1   ;Field     ;
                Name=ConfirmPassword;
                ExtendedDatatype=Masked;
                CaptionML=[ENU=Confirm Password;
                           ENG=Confirm Password];
                SourceExpr=ConfirmPassword;
                Visible=RequiresPasswordConfirmation;
                OnValidate=BEGIN
                             IF RequiresPasswordConfirmation AND (SetPassword <> ConfirmPassword) THEN
                               ERROR(PasswordMismatchErr);
                           END;
                            }

  }
  CODE
  {
    VAR
      PasswordMismatchErr@1003 : TextConst 'ENU=The specified passwords are not the same.;ENG=The specified passwords are not the same.';
      PasswordTooSimpleErr@1004 : TextConst 'ENU=The specified password does not meet the requirements. It must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number.;ENG=The specified password does not meet the requirements. It must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number.';
      PasswordNotValidatedErr@1007 : TextConst 'ENU=The password did not validate correctly, or it was not accepted.;ENG=The password did not validate correctly, or it was not accepted.';
      ConfirmBlankPasswordQst@1008 : TextConst 'ENU=Do you want to exit the dialog box with an empty password?;ENG=Do you want to exit the dialogue box with an empty password?';
      IdentityManagement@1002 : Codeunit 9801;
      SetPassword@1000 : Text[250] INDATASET;
      ConfirmPassword@1001 : Text[250] INDATASET;
      ValidPassword@1005 : Boolean;
      EnableBlankPasswordState@1006 : Boolean;
      ValidatePassword@1009 : Boolean;
      GetPasswordCaptionTxt@1010 : TextConst 'ENU=Enter Password;ENG=Enter Password';
      RequiresPasswordConfirmation@1011 : Boolean;

    PROCEDURE GetPasswordValue@1() : Text;
    BEGIN
      IF ValidPassword = TRUE THEN
        EXIT(SetPassword);

      ERROR(PasswordNotValidatedErr);
    END;

    PROCEDURE EnableBlankPassword@2(enable@1000 : Boolean);
    BEGIN
      EnableBlankPasswordState := enable;
    END;

    PROCEDURE EnableGetPasswordMode@3(NewValidatePassword@1000 : Boolean);
    BEGIN
      ValidatePassword := NewValidatePassword;
      CurrPage.CAPTION := GetPasswordCaptionTxt;
    END;

    PROCEDURE DisablePasswordConfirmation@5();
    BEGIN
      RequiresPasswordConfirmation := FALSE;
    END;

    BEGIN
    END.
  }
}

