OBJECT Codeunit 9062320 Panel Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=24/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            TestPanel();
          END;

  }
  CODE
  {
    VAR
      Panel@1000000000 : Record 9062363;
      PanelLink@1000000005 : Record 9062364;
      SystemBehaviour@1000000006 : Record 9062230;
      TileGroup@1000000002 : Record 9062366;
      Tile@1000000001 : Record 9062367;
      IdNameSearch@1000000003 : Codeunit 9062353;
      tEmpty@1000000004 : TextConst 'ENU=Empty "%1";ENG=Empty "%1"';
      String@1000000010 : Codeunit 9062236;
      TnpToolkit@1000000009 : Codeunit 9062230;
      ForegroundColourCode@1000000007 : Code[20];
      BackgroundColourCode@1000000008 : Code[20];

    PROCEDURE "--- Property Fields ---"@1000000039();
    BEGIN
    END;

    PROCEDURE PropertyFieldsFilter@1000000040(pTableId@1000000000 : Integer) : Code[1024];
    VAR
      lTile@1000000006 : Record 9062367;
      lObjectFieldLookups@1000000003 : Codeunit 9062343;
    BEGIN
      //DOC NA2015.1 - Returning property fields filter
      //  -> pTableId: Table ID
      //  <- The filter

      CASE (pTableId) OF
        DATABASE::Tile:
          BEGIN
            lObjectFieldLookups.AddToFieldIdFilter(lTile.FIELDNO("Tile Group ID"));
            lObjectFieldLookups.AddToFieldIdFilter(lTile.FIELDNO(Text));
            lObjectFieldLookups.AddToFieldIdFilter(lTile.FIELDNO("Show Text"));
            lObjectFieldLookups.AddToFieldIdFilter(lTile.FIELDNO(Info));
            lObjectFieldLookups.AddToFieldIdFilter(lTile.FIELDNO("Show Info"));
            lObjectFieldLookups.AddToFieldIdFilter(lTile.FIELDNO(Size));
            lObjectFieldLookups.AddToFieldIdFilter(lTile.FIELDNO("Background Colour Code"));
            lObjectFieldLookups.AddToFieldIdFilter(lTile.FIELDNO(Image));
          END;
        ELSE
          lObjectFieldLookups.SetNullFieldIdFilter();
      END;

      EXIT(lObjectFieldLookups.GetFieldIdFilter());
    END;

    PROCEDURE "--- Tools ---"@1000000017();
    BEGIN
    END;

    PROCEDURE CodeToControlName@1000000022(pTableId@1000000004 : Integer;pCode@1000000000 : Code[20]) : Text[100];
    BEGIN
      //DOC NA2015.1 - Converting code to control name
      //  -> pTableId: Table ID
      //  -> pCode: Code
      //  <- The name

      EXIT(CodeIdIdToControlName(pTableId, pCode, 0, 0));
    END;

    PROCEDURE CodeIdToControlName@1000000032(pTableId@1000000004 : Integer;pCode@1000000000 : Code[20];pId@1000000001 : Integer) : Text[100];
    BEGIN
      //DOC NA2015.1 - Converting code and ID to control name
      //  -> pTableId: Table ID
      //  -> pCode: Code
      //  -> pId: ID
      //  <- The name

      EXIT(CodeIdIdToControlName(pTableId, pCode, pId, 0));
    END;

    PROCEDURE CodeIdIdToControlName@1000000033(pTableId@1000000004 : Integer;pCode@1000000000 : Code[20];pId@1000000001 : Integer;pId2@1000000002 : Integer) : Text[100];
    VAR
      lControlName@1000000003 : Text[50];
      lIndex@1000000005 : Integer;
      lChar@1000000006 : Text[1];
    BEGIN
      //DOC NA2015.1 - Converting code and two IDs to control name
      //  -> pTableId: Table ID
      //  -> pCode: Code
      //  -> pId: ID
      //  -> pId2: ID 2
      //  <- The name

      lControlName := TableIdToControlName(pTableId) + '_';

      FOR lIndex := 1 TO STRLEN(pCode) DO
      BEGIN
        lChar := COPYSTR(pCode, lIndex, 1);
        IF ((lChar >= '0') AND (lChar <= 'Z')) THEN
          lControlName := lControlName + lChar
        ELSE
          lControlName := lControlName + '_';
      END;

      IF (pId <> 0) THEN
        lControlName := lControlName + '_' + FORMAT(pId);
      IF (pId2 <> 0) THEN
        lControlName := lControlName + '_' + FORMAT(pId2);

      EXIT(lControlName);
    END;

    LOCAL PROCEDURE TableIdToControlName@1000000026(pTableId@1000000000 : Integer) : Text[50];
    VAR
      lObjectFieldToolkit@1000000001 : Codeunit 9062343;
      lTableName@1000000002 : Text[50];
      lControlName@1000000004 : Text[50];
      lChar@1000000003 : Text[1];
      lCharIndex@1000000005 : Integer;
    BEGIN
      //DOC NA2015.1 - Converting table ID to control name
      //  -> pTableId: Table ID
      //  <- Control name (part of)

      lTableName := lObjectFieldToolkit.GetTableName(pTableId);
      lTableName := DELCHR(UPPERCASE(lTableName), '=', ' ');

      FOR lCharIndex := 1 TO STRLEN(lTableName) DO
      BEGIN
        lChar := COPYSTR(lTableName, lCharIndex, 1);
        IF (((lChar >= '0') AND (lChar <= '9')) OR ((lChar >= 'A') AND (lChar <= 'Z')) OR
            ((lChar >= 'a') AND (lChar <= 'z'))) THEN
          lControlName := lControlName + lChar;
      END;

      EXIT(lControlName);
    END;

    PROCEDURE "--- Tile Group Validation / Lookup ---"@1000000030();
    BEGIN
    END;

    PROCEDURE TileGroupText@1000000031(pPanelCode@1000000000 : Code[20];plTileGroupId@1000000002 : Integer) : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning tile group text
      //  -> pPanelCode: Panel code
      //  -> plTileGroupId: Tile group ID
      //  <- The text

      IF ( NOT (TileGroup.GET(pPanelCode, plTileGroupId))) THEN
        CLEAR(TileGroup);

      EXIT(TileGroup.Text);
    END;

    PROCEDURE ValidateTileGroupId@1000000009(pPanelCode@1000000001 : Code[20];pTileGroupId@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Validating tile group ID
      //  -> pPanelCode: Panel code
      //  -> pTileGroupId: Tile group ID

      IF (pTileGroupId <> 0) THEN
      BEGIN
        IF (pPanelCode = '') THEN
          ERROR(tEmpty, TileGroup.FIELDCAPTION("Panel Code"));
        TileGroup.GET(pPanelCode, pTileGroupId);
      END;
    END;

    PROCEDURE ValidateTileGroupText@1000000008(pPanelCode@1000000012 : Code[20];VAR pTileGroupId@1000000010 : Integer;VAR pTileGroupText@1000000009 : Text[250]) : Boolean;
    VAR
      eUnknownGroup@1000000008 : TextConst 'ENU=Unknown group: "%1" for pane "%2" control "%3";ENG=Unknown group: "%1" for pane "%2" control "%3"';
    BEGIN
      //DOC NA2015.1 - Validating tile group text
      //  -> pPanelCode: Panel code
      //  <> pTileGroupId: Target tile group ID
      //  <> pTileGroupText: Tile group text

      IF ((pTileGroupText <> '') AND (pPanelCode = '')) THEN
        ERROR(tEmpty, TileGroup.FIELDCAPTION("Panel Code"));

      TileGroup.RESET();
      TileGroup.SETRANGE("Panel Code", pPanelCode);

      IdNameSearch.SearchInteger(DATABASE::"Tile Group", TileGroup.GETVIEW(FALSE), TileGroup.FIELDNO(ID), TileGroup.FIELDNO(Text),
        pTileGroupId, pTileGroupText, TRUE);
    END;

    PROCEDURE TileGroupLookup@1000000003(pPanelCode@1000000007 : Code[20];VAR pTileGroupId@1000000002 : Integer) : Boolean;
    VAR
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NA2015.1 - Lookup for tile group
      //  -> pPanelCode: Panel code
      //  <> pTileGroupId: Source / target tile group ID
      //  <- Lookup result

      lResult := FALSE;

      TileGroup.RESET();
      TileGroup.FILTERGROUP(2);
      TileGroup.SETRANGE("Panel Code", pPanelCode);
      IF (TileGroup.GET(pPanelCode, pTileGroupId)) THEN;
      TileGroup.FILTERGROUP(0);

      IF (PAGE.RUNMODAL(0, TileGroup) = ACTION::LookupOK) THEN
      BEGIN
        pTileGroupId := TileGroup.ID;
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE "--- Tile Validation / Lookup ---"@1000000000();
    BEGIN
    END;

    PROCEDURE TileText@1000000034(pPanelCode@1000000000 : Code[20];pTileId@1000000002 : Integer) : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning tile text
      //  -> pPanelCode: Panel code
      //  -> pTileId: Tile ID
      //  <- The text

      IF ( NOT (Tile.GET(pPanelCode, pTileId))) THEN
        CLEAR(Tile);

      EXIT(Tile.Text);
    END;

    PROCEDURE ValidateTileId@1000000016(pPanelCode@1000000002 : Code[20];pTileId@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Validating tile ID
      //  -> pPanelCode: Panel code
      //  -> pTileId: Tile ID

      IF (pTileId <> 0) THEN
      BEGIN
        IF (pPanelCode = '') THEN
          ERROR(tEmpty, Tile.FIELDCAPTION("Panel Code"));
        Tile.GET(pPanelCode, pTileId);
      END;
    END;

    PROCEDURE ValidateTileText@1000000027(pPanelCode@1000000000 : Code[20];pTileId@1000000002 : Integer;VAR pTileText@1000000003 : Text[250]);
    BEGIN
      //DOC NA2015.1 - Validating tile text
      //  -> pPanelCode: Panel code
      //  <> pTileId: Tile ID
      //  <> pTileText: Tile text

      IF ((pPanelCode = '') AND (pTileText <> '')) THEN
        ERROR(tEmpty, Tile.FIELDCAPTION("Panel Code"));

      Tile.RESET();
      Tile.SETRANGE("Panel Code", pPanelCode);

      IdNameSearch.SearchInteger(DATABASE::Tile, Tile.GETVIEW(FALSE), Tile.FIELDNO(ID), Tile.FIELDNO(Text),
        pTileId, pTileText, TRUE);
    END;

    PROCEDURE TileLookup@1000000021(pPanelCode@1000000000 : Code[20];VAR pTileId@1000000003 : Integer) : Boolean;
    VAR
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2015.1 - Lookup for tile
      //  -> pPanelCode: Panel code
      //  <> pTileId: Tile ID
      //  <- Lookup result

      lResult := FALSE;

      Tile.RESET();
      Tile.FILTERGROUP(2);
      Tile.SETRANGE("Panel Code", pPanelCode);
      IF (Tile.GET(pPanelCode, pTileId)) THEN;
      Tile.FILTERGROUP(0);

      IF (PAGE.RUNMODAL(0, Tile) = ACTION::LookupOK) THEN
      BEGIN
        pTileId := Tile.ID;
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE "--- Panel Link Validation / Lookup ---"@1000000047();
    BEGIN
    END;

    PROCEDURE PanelLinkText@1000000046(pPanelCode@1000000000 : Code[20];pPanelLinkId@1000000002 : Integer) : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning tile panel link text
      //  -> pPanelCode: Panel code
      //  -> pPanelLinkId: Panel link ID
      //  <- The text

      IF ( NOT (PanelLink.GET(pPanelCode, pPanelLinkId))) THEN
        CLEAR(PanelLink);

      EXIT(PanelLink.Text);
    END;

    PROCEDURE ValidatePanelLinkId@1000000045(pPanelCode@1000000002 : Code[20];pPanelLinkId@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Validating tile panel link ID
      //  -> pPanelCode: Panel code
      //  -> pPanelLinkId: Panel link ID

      IF (pPanelLinkId <> 0) THEN
      BEGIN
        IF (pPanelCode = '') THEN
          ERROR(tEmpty, PanelLink.FIELDCAPTION("Panel Code"));
        PanelLink.GET(pPanelCode, pPanelLinkId);
      END;
    END;

    PROCEDURE ValidatePanelLinkText@1000000043(pPanelCode@1000000000 : Code[20];pPanelLinkId@1000000002 : Integer;VAR pPanelLinkText@1000000003 : Text[250]);
    BEGIN
      //DOC NA2015.1 - Validating tile panel link text
      //  -> pPanelCode: Panel code
      //  <> pPanelLinkId: Panel link ID
      //  <> pPanelLinkText: Panel link text

      IF ((pPanelCode = '') AND (pPanelLinkText <> '')) THEN
        ERROR(tEmpty, PanelLink.FIELDCAPTION("Panel Code"));

      PanelLink.RESET();
      PanelLink.SETRANGE("Panel Code", pPanelCode);

      IdNameSearch.SearchInteger(DATABASE::"Panel Link", PanelLink.GETVIEW(FALSE), PanelLink.FIELDNO(ID), PanelLink.FIELDNO(Text),
        pPanelLinkId, pPanelLinkText, TRUE);
    END;

    PROCEDURE PanelLinkLookup@1000000042(pPanelCode@1000000000 : Code[20];VAR pPanelLinkId@1000000003 : Integer) : Boolean;
    VAR
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2015.1 - Lookup for tile panel link
      //  -> pPanelCode: Panel code
      //  <> pPanelLinkId: Panel link ID
      //  <- Lookup result

      lResult := FALSE;

      PanelLink.RESET();
      PanelLink.FILTERGROUP(2);
      PanelLink.SETRANGE("Panel Code", pPanelCode);
      IF (PanelLink.GET(pPanelCode, pPanelLinkId)) THEN;
      PanelLink.FILTERGROUP(0);

      IF (PAGE.RUNMODAL(0, PanelLink) = ACTION::LookupOK) THEN
      BEGIN
        pPanelLinkId := PanelLink.ID;
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE "--- Enhanced Field Validation / Lookup ---"@1000000015();
    BEGIN
    END;

    PROCEDURE ValidateEnhancedFieldNo@1000000025(pTableNo@1000000000 : Integer;pFieldNo@1000000001 : Integer;VAR pFieldName@1000000002 : Text[50];pRaiseError@1000000003 : Boolean) : Boolean;
    VAR
      lEnhancedFieldDefinition@1000000005 : Record 9062327;
      lResult@1000000004 : Boolean;
    BEGIN
      //DOC NA2015.1 - Validating enhanced field number
      //  -> pTableNo: Table number
      //  -> pFieldNo: Field number
      //  <> pFieldName: Target field name
      //  -> pRaiseError: TRUE = raise error if field not found, FALSE = only return result
      //  <- Validation result

      IF (pFieldNo <> 0) THEN
      BEGIN
        lEnhancedFieldDefinition.RESET();
        lEnhancedFieldDefinition.SETRANGE("Table No.", pTableNo);
        lEnhancedFieldDefinition.SETRANGE("Enhanced Field No.", pFieldNo);
        IF (pRaiseError) THEN
        BEGIN
          lEnhancedFieldDefinition.FINDFIRST();
          lResult := TRUE;
        END
        ELSE
          lResult := lEnhancedFieldDefinition.FINDFIRST();
        IF (lResult) THEN
          pFieldName := lEnhancedFieldDefinition.Name
        ELSE
          CLEAR(pFieldName);
      END
      ELSE
        CLEAR(pFieldName);

      EXIT(lResult);
    END;

    PROCEDURE ValidateEnhancedFieldName@1000000024(pTableNo@1000000004 : Integer;VAR pFieldNo@1000000003 : Integer;VAR pFieldName@1000000002 : Text[50];pRaiseError@1000000001 : Boolean) : Boolean;
    VAR
      lEnhancedFieldDefinition@1000000007 : Record 9062327;
      lFieldNo@1000000005 : Integer;
      lResult@1000000000 : Boolean;
      eUnknownField@1000000006 : TextConst 'ENU=Enhanced field "%1" doesn''t exist in table "%2";ENG=Enhanced field "%1" doesn''t exist in table "%2"';
    BEGIN
      //DOC NA2015.1 - Validating enhanced field name
      //  -> pTableNo: Table number
      //  <> pFieldNo: Target field number
      //  <> pFieldName: Target field name
      //  -> pRaiseError: TRUE = raise error if field not found, FALSE = only return result
      //  <- Validation result

      lResult := FALSE;

      IF (pFieldName <> '') THEN
      BEGIN
        lEnhancedFieldDefinition.RESET();
        lEnhancedFieldDefinition.SETRANGE("Table No.", pTableNo);
        IF ( NOT (lResult)) THEN
          IF (EVALUATE(lFieldNo, pFieldName)) THEN
          BEGIN
            lEnhancedFieldDefinition.SETRANGE("Enhanced Field No.", lFieldNo);
            lResult := lEnhancedFieldDefinition.FINDFIRST();
            lEnhancedFieldDefinition.SETRANGE("Enhanced Field No.");
          END;
        IF ( NOT (lResult)) THEN
        BEGIN
          lEnhancedFieldDefinition.SETRANGE(Name, pFieldName);
          lResult := lEnhancedFieldDefinition.FINDFIRST();
        END;
        IF ( NOT (lResult)) THEN
        BEGIN
          lEnhancedFieldDefinition.SETFILTER(Name, '@' + pFieldName);
          lResult := lEnhancedFieldDefinition.FINDFIRST();
        END;
        IF ( NOT (lResult)) THEN
        BEGIN
          lEnhancedFieldDefinition.SETFILTER(Name, '@' + pFieldName + '*');
          lResult := lEnhancedFieldDefinition.FINDFIRST();
        END;
        IF ( NOT (lResult)) THEN
        BEGIN
          lEnhancedFieldDefinition.SETFILTER(Name, '@*' + pFieldName + '*');
          lResult := lEnhancedFieldDefinition.FINDFIRST();
        END;
        IF (lResult) THEN
        BEGIN
          pFieldNo := lEnhancedFieldDefinition."Enhanced Field No.";
          pFieldName := lEnhancedFieldDefinition.Name;
        END
        ELSE
          IF (pRaiseError) THEN
            ERROR(eUnknownField, pFieldName, pTableNo);
      END
      ELSE
      BEGIN
        CLEAR(pFieldNo);
        CLEAR(pFieldName);
      END;

      EXIT(lResult);
    END;

    PROCEDURE EnhancedFieldLookupWithName@1000000023(pTableNo@1000000004 : Integer;VAR pFieldNo@1000000003 : Integer;VAR pFieldName@1000000002 : Text[50]) : Boolean;
    VAR
      lEnhancedFieldDefinition@1000000001 : Record 9062327;
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2015.1 - Performing enhanced field lookup with name
      //  -> pTableNo: Table number
      //  <> pFieldNo: Target field number
      //  <> pFieldName: Target field name
      //  <- Lookup result

      lResult := FALSE;

      lEnhancedFieldDefinition.RESET();
      lEnhancedFieldDefinition.FILTERGROUP(2);
      lEnhancedFieldDefinition.SETRANGE("Table No.", pTableNo);
      lEnhancedFieldDefinition.FILTERGROUP(0);
      IF (pFieldNo <> 0) THEN
        IF (lEnhancedFieldDefinition.GET(pTableNo, pFieldNo)) THEN;

      IF (PAGE.RUNMODAL(0, lEnhancedFieldDefinition) = ACTION::LookupOK) THEN
      BEGIN
        pFieldNo := lEnhancedFieldDefinition."Enhanced Field No.";
        pFieldName := lEnhancedFieldDefinition.Name;
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE EnhancedFieldLookup@1000000019(pTableNo@1000000002 : Integer;VAR pFieldNo@1000000001 : Integer) : Boolean;
    VAR
      lFieldName@1000000000 : Text[50];
    BEGIN
      //DOC NA2015.1 - Performing enhanced field lookup
      //  -> pTableNo: Table number
      //  <> pFieldNo: Target field number
      //  <- Lookup result

      EXIT(EnhancedFieldLookupWithName(pTableNo, pFieldNo, lFieldName));
    END;

    PROCEDURE "--- Single Items ---"@1000000020();
    BEGIN
    END;

    PROCEDURE SingleTileGroup@1000000041(pPanelCode@1000000000 : Code[20];VAR pTileGroupId@1000000003 : Integer) : Boolean;
    VAR
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2015.1 - Finding single tile group
      //  -> pPanelCode: Panel code
      //  <> pTileGroupId: Target tile group ID
      //  <- TRUE = Single tile group found, FALSE = Not

      lResult := FALSE;

      IF ((pPanelCode <> '') AND (pTileGroupId = 0)) THEN
      BEGIN
        TileGroup.RESET();
        TileGroup.SETRANGE("Panel Code", pPanelCode);
        IF (TileGroup.COUNT = 1) THEN
        BEGIN
          TileGroup.FINDFIRST();
          pTileGroupId := TileGroup.ID;
          lResult := TRUE;
        END;
      END;

      EXIT(lResult);
    END;

    PROCEDURE SingleTile@1000000044(pPanelCode@1000000000 : Code[20];pTileGroupId@1000000001 : Integer;VAR pTileId@1000000003 : Integer) : Boolean;
    VAR
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2015.1 - Finding single tile
      //  -> pPanelCode: Panel code
      //  -> pTileGroupId: Tile group ID (can be empty)
      //  <> pTileId: Tile ID
      //  <- TRUE = Single tile found, FALSE = Not

      lResult := FALSE;

      IF ((pPanelCode <> '') AND (pTileId = 0)) THEN
      BEGIN
        Tile.RESET();
        Tile.SETRANGE("Panel Code", pPanelCode);
        IF (pTileGroupId <> 0) THEN
          Tile.SETRANGE("Tile Group ID", pTileGroupId);
        IF (Tile.COUNT = 1) THEN
        BEGIN
          Tile.FINDFIRST();
          pTileId := Tile.ID;
          lResult := TRUE;
        END;
      END;

      EXIT(lResult);
    END;

    PROCEDURE SingleTilePanelLink@1000000035(pPanelCode@1000000000 : Code[20];VAR pPanelLinkId@1000000003 : Integer) : Boolean;
    VAR
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2015.1 - Finding single tile panel link
      //  -> pPanelCode: Panel code
      //  <> pPanelLinkId: Panel link ID
      //  <- TRUE = Single tile panel link found, FALSE = Not

      lResult := FALSE;

      IF ((pPanelCode <> '') AND (pPanelLinkId = 0)) THEN
      BEGIN
        PanelLink.RESET();
        PanelLink.SETRANGE("Panel Code", pPanelCode);
        IF (PanelLink.COUNT = 1) THEN
        BEGIN
          PanelLink.FINDFIRST();
          pPanelLinkId := PanelLink.ID;
          lResult := TRUE;
        END;
      END;

      EXIT(lResult);
    END;

    PROCEDURE "--- Miscellaneous ---"@1000000036();
    BEGIN
    END;

    PROCEDURE PanelTable@1000000037(pTableId@1000000000 : Integer) : Boolean;
    BEGIN
      //DOC NA2015.1 - Returning TRUE if the table ID is one of tile panel tables
      //  -> pTableId: Table ID
      //  <- The result

      EXIT(pTableId IN [DATABASE::Panel, DATABASE::"Tile Group", DATABASE::Tile, DATABASE::"Tile Frame", DATABASE::"Panel Event",
        DATABASE::"Panel Data", DATABASE::"Panel Property", DATABASE::"Panel Property Field", DATABASE::"Panel Property Value"]);
    END;

    LOCAL PROCEDURE "--- System Colour ---"@1000000055();
    BEGIN
    END;

    PROCEDURE GetForegroundColourCode@1000000057(pColourCode@1000000000 : Code[20]) : Code[20];
    BEGIN
      //DOC NA2015.4 - Returning foreground colour code
      //  -> pColourCode: Colour code
      //  <- Colour code replaced by default colour if empty

      IF (pColourCode = '') THEN
      BEGIN
        IF (ForegroundColourCode = '') THEN
          ForegroundColourCode := SystemBehaviour.GetText(PanelDefaultFgrColourSysB());
        IF (ForegroundColourCode = '') THEN
          ForegroundColourCode := 'WHITE';
        pColourCode := ForegroundColourCode;
      END;

      EXIT(pColourCode);
    END;

    PROCEDURE GetBackgroundColourCode@1000000056(pColourCode@1000000000 : Code[20]) : Code[20];
    BEGIN
      //DOC NA2015.4 - Returning background colour code
      //  -> pColourCode: Colour code
      //  <- Colour code replaced by default colour if empty

      IF (pColourCode = '') THEN
      BEGIN
        IF (BackgroundColourCode = '') THEN
          BackgroundColourCode := SystemBehaviour.GetText(PanelDefaultBgrColourSysB());
        IF (BackgroundColourCode = '') THEN
          BackgroundColourCode := 'BLACK';
        pColourCode := BackgroundColourCode;
      END;

      EXIT(pColourCode);
    END;

    PROCEDURE "--- DotNet ---"@1000000001();
    BEGIN
    END;

    PROCEDURE SystemColourString@1000000006(pValue@1000000000 : Code[20]) : Text[50];
    VAR
      lSystemColour@1000000001 : Record 9062336;
    BEGIN
      //DOC NA2015.1 - Returning system colour string
      //  -> pValue: The value
      //  <- The string

      EXIT(lSystemColour.ColourName(pValue));
    END;

    PROCEDURE ForegroundColourString@1000000063(pValue@1000000000 : Code[20]) : Text[50];
    VAR
      lSystemColour@1000000001 : Record 9062336;
    BEGIN
      //DOC NA2015.4 - Returning system colour string
      //  -> pValue: The value
      //  <- The string

      EXIT(SystemColourString(GetForegroundColourCode(pValue)));
    END;

    PROCEDURE BackgroundColourString@1000000064(pValue@1000000000 : Code[20]) : Text[50];
    VAR
      lSystemColour@1000000001 : Record 9062336;
    BEGIN
      //DOC NA2015.4 - Returning system colour string
      //  -> pValue: The value
      //  <- The string

      EXIT(SystemColourString(GetBackgroundColourCode(pValue)));
    END;

    PROCEDURE FontStyleString@1000000007(pValue@1000000000 : Integer) : Text[50];
    BEGIN
      //DOC NA2015.1 - Returning font style string
      //  -> pValue: The value
      //  <- The string

      CASE (pValue) OF
        Panel."Text Font Style"::Bold:
          EXIT('Bold');
        Panel."Text Font Style"::Italic:
          EXIT('Italic');
        Panel."Text Font Style"::Underline:
          EXIT('Underline');
        Panel."Text Font Style"::"Bold + Italic":
          EXIT('Bold,Italic');
        Panel."Text Font Style"::"Bold + Underline":
          EXIT('Bold,Underline');
        Panel."Text Font Style"::"Italic + Underline":
          EXIT('Italic,Underline');
        Panel."Text Font Style"::"Bold + Italic + Underline":
          EXIT('Bold,Italic,Underline');
        ELSE
          EXIT('');
      END;
    END;

    PROCEDURE AlignmentString@1000000005(pValue@1000000000 : Integer) : Text[50];
    BEGIN
      //DOC NA2015.1 - Returning alignment string
      //  -> pValue: The value
      //  <- The string

      CASE (pValue) OF
        Panel."Tile Text Alignment"::"Top Left":
          EXIT('Left,Top');
        Panel."Tile Text Alignment"::"Top Center":
          EXIT('Center,Top');
        Panel."Tile Text Alignment"::"Top Right":
          EXIT('Right,Top');
        Panel."Tile Text Alignment"::"Middle Left":
          EXIT('Left,Middle');
        Panel."Tile Text Alignment"::"Middle Center":
          EXIT('Center,Middle');
        Panel."Tile Text Alignment"::"Middle Right":
          EXIT('Right,Middle');
        Panel."Tile Text Alignment"::"Bottom Left":
          EXIT('Left,Bottom');
        Panel."Tile Text Alignment"::"Bottom Center":
          EXIT('Center,Bottom');
        Panel."Tile Text Alignment"::"Bottom Right":
          EXIT('Right,Bottom');
        ELSE
          EXIT('');
      END;
    END;

    PROCEDURE TileAnimationTypeString@1000000028(pValue@1000000000 : Integer) : Text[50];
    BEGIN
      //DOC NA2015.1 - Returning tile animation type string
      //  -> pValue: The value
      //  <- The string

      CASE (pValue) OF
        Panel."Tile Animation Type"::Default:
          EXIT('Default');
        Panel."Tile Animation Type"::Fade:
          EXIT('Fade');
        Panel."Tile Animation Type"::"Random Segmented Fade":
          EXIT('Random Segmented Fade');
        Panel."Tile Animation Type"::"Scroll Down":
          EXIT('Scroll Down');
        Panel."Tile Animation Type"::"Scroll Left":
          EXIT('Scroll Left');
        Panel."Tile Animation Type"::"Scroll Right":
          EXIT('Scroll Right');
        Panel."Tile Animation Type"::"Scroll Top":
          EXIT('Scroll Top');
        Panel."Tile Animation Type"::"Segmented Fade":
          EXIT('Segmented Fade');
        ELSE
          EXIT('');
      END;
    END;

    PROCEDURE TileSizeString@1000000029(pValue@1000000000 : Integer) : Text[50];
    BEGIN
      //DOC NA2015.1 - Returning tile size string
      //  -> pValue: The value
      //  <- The string

      CASE (pValue) OF
        Tile.Size::Large:
          EXIT('Large');
        Tile.Size::Medium:
          EXIT('Medium');
        Tile.Size::Small:
          EXIT('Small');
        Tile.Size::Wide:
          EXIT('Wide');
        ELSE
          EXIT('');
      END;
    END;

    PROCEDURE "--- Diagnostics ---"@1000000002();
    BEGIN
    END;

    LOCAL PROCEDURE TestPanel@1000000004();
    VAR
      lPanel@1000000000 : Record 9062363;
    BEGIN
      //DOC NA2015.1 - Testing tile panel

      SystemBehaviour.TestText(PanelTestCodeSysB());

      lPanel.RESET();
      lPanel.SETRANGE(Code, PanelTestCodeSysB());

      PAGE.RUN(PAGE::Panel, lPanel);
    END;

    PROCEDURE SavePanelToFile@1000000018(pPanelObj@1000000002 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.Panel");
    VAR
      lPanelSerialiserObj@1000000001 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.PanelSerialiser";
      lPath@1000000000 : Text;
      ePath@1000000003 : TextConst 'ENU=%1\%2_%3.bin;ENG=%1\%2_%3.bin';
    BEGIN
      //DOC NA2015.1 - Serialising panel to a file
      //  -> pPanelObj: Panel object

      IF ( NOT (SystemBehaviour.GetBoolean(PanelDiagnosticsSysB()))) THEN
        EXIT;

      IF (ISNULL(pPanelObj)) THEN
        EXIT;

      lPath := SystemBehaviour.GetText(PanelDiagnosticsPathSysB());
      IF (lPath = '') THEN
        EXIT;

      lPath := STRSUBSTNO(ePath, lPath, pPanelObj.ControlName, FORMAT(CURRENTDATETIME(), 0, '<Year4><Month,2><Day,2><Hours24><Minutes,2><Seconds,2>'));

      lPanelSerialiserObj.Serialise(pPanelObj, lPath);
    END;

    PROCEDURE "--- Palette ---"@1000000050();
    BEGIN
    END;

    PROCEDURE ApplyPaletteSelected@1000000052(pPanel@1000000000 : Record 9062363) : Boolean;
    VAR
      lApplyPaletteToPanel@1000000001 : Report 9062302;
      ePaletteApplied@1000000002 : TextConst 'ENU=Palette "%1" has been applied.;ENG=Palette "%1" has been applied.';
      lPanelCode@1000000003 : Code[20];
      lTileGroupId@1000000004 : Integer;
      lPaletteCode@1000000005 : Code[20];
      lColourOrder@1000000006 : Integer;
    BEGIN
      //DOC NA2015.4 - Applyging selected palette to a panel
      //  -> pPanel: The panel
      //  <- TRUE = Palette applied, FALSE = Not

      lApplyPaletteToPanel.SetPanelCode(pPanel.Code);
      lApplyPaletteToPanel.RUNMODAL();
      IF ( NOT (lApplyPaletteToPanel.OK)) THEN
        EXIT(FALSE);

      lPanelCode := lApplyPaletteToPanel.GetPanelCode();
      lTileGroupId := lApplyPaletteToPanel.GetTileGroupId();
      lPaletteCode := lApplyPaletteToPanel.GetPaletteCode();
      lColourOrder := lApplyPaletteToPanel.GetColourOrder();

      ApplyPalette(lPanelCode, lTileGroupId, lPaletteCode, lColourOrder);

      MESSAGE(ePaletteApplied, lPaletteCode);

      EXIT(TRUE);
    END;

    PROCEDURE ApplyPalette@1000000054(pPanelCode@1000000000 : Code[20];pTileGroupId@1000000005 : Integer;pPaletteCode@1000000001 : Code[20];pColourOrder@1000000002 : Integer);
    VAR
      lPanel@9062229 : Record 9062363;
      lTile@1000000004 : Record 9062367;
      lSystemPaletteManagement@1000000003 : Codeunit 9062399;
      ePanelCodeEmpty@1000000006 : TextConst 'ENU="Panel code is empty; cannot apply palette.";ENG="Panel code is empty; cannot apply palette."';
      ePaletteCodeEmpty@1000000007 : TextConst 'ENU="Palette code is empty; cannot apply palette.";ENG="Palette code is empty; cannot apply palette."';
      lColourCode@1000000008 : Code[20];
    BEGIN
      //DOC NA2016.10 - Applyging palette to a panel
      //  -> pPanelCode: The panel code
      //  -> pTileGroupId: Tile group ID (ignored if 0)
      //  -> pPaletteCode: Palette code
      //  -> pColourOrder: Colour order

      IF (pPanelCode = '') THEN
        ERROR(ePanelCodeEmpty);
      IF (pPaletteCode = '') THEN
        ERROR(ePaletteCodeEmpty);

      lSystemPaletteManagement.StartColouring(pPaletteCode, pColourOrder);

      lTile.RESET();
      IF (pTileGroupId <> 0) THEN
        lTile.SETCURRENTKEY("Panel Code", "Tile Group ID", Sequence)
      ELSE
        lTile.SETCURRENTKEY("Panel Code", Sequence);
      lTile.SETRANGE("Panel Code", pPanelCode);
      IF (pTileGroupId <> 0) THEN
        lTile.SETRANGE("Tile Group ID", pTileGroupId);
      IF (lTile.FINDSET(TRUE)) THEN
      REPEAT
        lColourCode := lSystemPaletteManagement.NextColour();
        lTile.VALIDATE("Background Colour Code", lColourCode);
        lTile.MODIFY(TRUE);
      UNTIL (lTile.NEXT() = 0);

      lPanel.GET(pPanelCode);
      lPanel.VALIDATE("System Palette Code", pPaletteCode);
      lPanel.VALIDATE("System Palette Colour Order", pColourOrder);
      lPanel.MODIFY(TRUE);
    END;

    PROCEDURE "--- System Behaviour ---"@1000000048();
    BEGIN
    END;

    PROCEDURE VerifySystemBehaviour@1000000038();
    BEGIN
      //DOC NA2015.1 - Verifying all system behaviour entries are there

      SystemBehaviour.GetText(PanelTestCodeSysB());
      SystemBehaviour.GetBoolean(PanelDiagnosticsSysB());
      SystemBehaviour.GetText(PanelDiagnosticsPathSysB());
    END;

    PROCEDURE PanelTestCodeSysB@1000000049() : Code[20];
    BEGIN
      EXIT('TEST_PANEL_CODE');
    END;

    PROCEDURE PanelDiagnosticsSysB@1000000051() : Code[20];
    BEGIN
      EXIT('DEBUG_PANELS');
    END;

    PROCEDURE PanelDiagnosticsPathSysB@1000000053() : Code[20];
    BEGIN
      EXIT('PANELS_DEBUG_PATH');
    END;

    PROCEDURE PanelDefaultFgrColourSysB@1000000058() : Code[20];
    BEGIN
      EXIT('PANEL_DEF_FGR_COLOUR');
    END;

    PROCEDURE PanelDefaultBgrColourSysB@1000000059() : Code[20];
    BEGIN
      EXIT('PANEL_DEF_BGR_COLOUR');
    END;

    LOCAL PROCEDURE "--- Parameters ---"@1000000061();
    BEGIN
    END;

    PROCEDURE ApplyPanelParameters@1000000060(pPanel@1000000000 : Record 9062363;pTableFilter@1000000001 : Text) : Text;
    VAR
      lParameterIndex@1000000002 : Integer;
      lParameterValue@1000000003 : Text;
      eParameter@1000000004 : TextConst 'ENU=[Parameter %1];ENG=[Parameter %1]';
    BEGIN
      //DOC NA2015.8 - Applying panel parameters
      //  -> pPanel: Panel (with parameters)
      //  -> pTableFilter: Table filter (to apply parameters to)
      //  <- Table filters with parameters applied

      FOR lParameterIndex := 1 TO 6 DO
      BEGIN
        CASE (lParameterIndex) OF
          1: lParameterValue := pPanel."Parameter 1";
          2: lParameterValue := pPanel."Parameter 2";
          3: lParameterValue := pPanel."Parameter 3";
          4: lParameterValue := pPanel."Parameter 4";
          5: lParameterValue := pPanel."Parameter 5";
          6: lParameterValue := pPanel."Parameter 6";
        END;
        pTableFilter := String.ReplaceAll(pTableFilter, STRSUBSTNO(eParameter, lParameterIndex), lParameterValue);
      END;

      EXIT(pTableFilter);
    END;

    PROCEDURE "--- Panel Specific Actions ---"@9062229();
    BEGIN
    END;

    PROCEDURE AddBackLink@9062230(pPanel@9062229 : Record 9062363;pInteraction@9062230 : Boolean) : Boolean;
    VAR
      eConfirmation@9062231 : TextConst 'ENU=Do you want to add BACK link to panel "%1"?;ENG=Do you want to add BACK link to panel "%1"?';
      lPanelLink@9062232 : Record 9062364;
      lPanelEvent@9062233 : Record 9062369;
      lLinkAlreadyThere@9062234 : Boolean;
      eText@9062236 : TextConst 'ENU=BACK;ENG=BACK';
      eColourCode@9062235 : TextConst 'ENU=DARK MAGENTA;ENG=DARK MAGENTA';
    BEGIN
      //DOC NA2016.10 - Adding "BACK" link (if it is not there)
      //  -> pPanel: Panel to add the link to
      //  -> pInteraction: Interaction flag
      //  <- TRUE = Added, FALSE = Cancelled or panel link already there

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE, pPanel.Code))) THEN
          EXIT(FALSE);

      lLinkAlreadyThere := FALSE;
      lPanelLink.RESET();
      lPanelLink.SETRANGE("Panel Code", pPanel.Code);
      IF (lPanelLink.FINDSET()) THEN
      REPEAT
        lPanelEvent.RESET();
        lPanelEvent.SETRANGE("Parent Table ID", DATABASE::"Panel Link");
        lPanelEvent.SETRANGE("Parent Code", lPanelLink."Panel Code");
        lPanelEvent.SETRANGE("Parent ID", lPanelLink.ID);
        lPanelEvent.SETRANGE(Type, lPanelEvent.Type::Click);
        lPanelEvent.SETRANGE("Action Type", lPanelEvent."Action Type"::Back);
        lLinkAlreadyThere := ( NOT (lPanelEvent.ISEMPTY()));
      UNTIL ((lPanelLink.NEXT() = 0) OR (lLinkAlreadyThere));

      IF (lLinkAlreadyThere) THEN
        EXIT(FALSE);

      AddLink(pPanel, eText, eColourCode, lPanelEvent."Action Type"::Back, '', lPanelLink);
      lPanelLink.VALIDATE(Sequence, 0);
      lPanelLink.MODIFY(TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE AddOpenPanelLink@9062234(pPanel@9062230 : Record 9062363) : Boolean;
    VAR
      lPanel@9062236 : Record 9062363;
      lPanelEvent@9062238 : Record 9062369;
      lPanelLink@9062239 : Record 9062364;
      lAddOpenPanelLink@9062229 : Report 9062331;
      lPanelCode@9062231 : Code[20];
      lText@9062232 : Text;
      eEmptyPanelCode@9062233 : TextConst 'ENU="Panel code is empty; a new link has to point to a panel. Please correct your information.";ENG="Panel code is empty; a new link has to point to a panel. Please correct your information."';
      lInteraction@9062234 : Boolean;
      lConfirmed@9062235 : Boolean;
      eColourCode@9062237 : TextConst 'ENU=BLUE;ENG=BLUE';
    BEGIN
      //DOC NA2016.10 - Adding "OPEN PANEL" link
      //  -> pPanel: Panel to add the link to
      //  <- TRUE = Added, FALSE = Cancelled

      lInteraction := TRUE;
      lConfirmed := FALSE;
      WHILE (lInteraction) DO
      BEGIN
        CLEAR(lAddOpenPanelLink);
        lAddOpenPanelLink.SetPanelCode(lPanelCode);
        lAddOpenPanelLink.SetText(lText);
        lAddOpenPanelLink.RUNMODAL();
        IF (lAddOpenPanelLink.GetOk()) THEN
        BEGIN
          lPanelCode := lAddOpenPanelLink.GetPanelCode();
          lText := lAddOpenPanelLink.GetText();
          IF (lPanelCode <> '') THEN
          BEGIN
            IF (lText = '') THEN
            BEGIN
              IF ( NOT (lPanel.GET(lPanelCode))) THEN
                CLEAR(lPanel);
              lText := lPanel.Description;
            END;
            IF (lText = '') THEN
              lText := lPanel.Code;
            lInteraction := FALSE;
            lConfirmed := TRUE;
          END
          ELSE
            MESSAGE(eEmptyPanelCode);
        END
        ELSE
        BEGIN
          lInteraction := FALSE;
          lConfirmed := FALSE;
        END;
      END;

      IF ( NOT (lConfirmed)) THEN
        EXIT(FALSE);

      AddLink(pPanel, lText, eColourCode, lPanelEvent."Action Type"::"Open Panel", lPanelCode, lPanelLink);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddLink@9062235(pPanel@9062230 : Record 9062363;pText@9062234 : Text;pColourCode@9062233 : Code[20];pActionType@9062235 : Integer;pPanelCode@9062237 : Code[20];VAR pPanelLink@9062236 : Record 9062364);
    VAR
      lPanelLink@9062231 : Record 9062364;
      lPanelEvent@9062229 : Record 9062369;
      lSystemColour@9062232 : Record 9062336;
    BEGIN
      //DOC NA2016.10 - Adding a link (internal version)
      //  -> pPanel: Panel to add the link to
      //  -> pText: Text
      //  -> pColourCode: Colour code
      //  -> pActionType: Action type
      //  -> pPanelCode: Panel code (used only for Action = "Open Panel")
      //  <> pPanelLink: Target panel link

      IF ( NOT (lSystemColour.GET(pColourCode))) THEN
        CLEAR(lSystemColour);

      CLEAR(lPanelLink);
      lPanelLink.INIT();
      lPanelLink.VALIDATE("Panel Code", pPanel.Code);
      lPanelLink.VALIDATE(Text, COPYSTR(pText, 1, MAXSTRLEN(lPanelLink.Text)));
      IF (lSystemColour.Code <> '') THEN
        lPanelLink.VALIDATE("Colour Code", lSystemColour.Code);
      lPanelLink.VALIDATE("Font Style", lPanelLink."Font Style"::Bold);
      lPanelLink.INSERT(TRUE);

      CLEAR(lPanelEvent);
      lPanelEvent.INIT();
      lPanelEvent.VALIDATE("Parent Table ID", DATABASE::"Panel Link");
      lPanelEvent.VALIDATE("Parent Code", lPanelLink."Panel Code");
      lPanelEvent.VALIDATE("Parent ID", lPanelLink.ID);
      lPanelEvent.VALIDATE(Type, lPanelEvent.Type::Click);
      lPanelEvent.VALIDATE("Action Type", pActionType);
      lPanelEvent.VALIDATE("Panel Code", pPanelCode);
      lPanelEvent.INSERT(TRUE);

      pPanelLink := lPanelLink;
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 27/04/2013 - Created
      //DOC NA2015.1  JH 19/07/2013 - Tiles
      //DOC NA2015.1  JH 23/09/2013 - Amendments
      //DOC NA2015.1  JH 25/02/2014 - Amendments
      //DOC NA2015.1  JH 15/04/2014 - Panels 3
      //DOC NA2015.3  JH 15/08/2014 - Fixes, amendments
      //DOC NA2015.4  JH 10/11/2014 - Upgraded to 2015
      //DOC NA2015.4  JH 28/12/2014 - System behaviours renamed
      //DOC NA2015.8  JH 26/06/2015 - New tiles version
      //DOC NA2016.10 JH 27/08/2015 - Upgraded to 2016
      //DOC NA2016.11 JH 06/11/2015 - "Action" renamed to "Action Type"
      //DOC NA2016.12 JH 04/01/2016 - New panels
      //DOC NA2016.12 JH 28/01/2016 - New string codeunit used
      //DOC NA2016.16 JH 19/05/2016 - CfMD amendments (new .NET library)
    }
    END.
  }
}

