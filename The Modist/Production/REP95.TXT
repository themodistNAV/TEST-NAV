OBJECT Report 95 Date Compress VAT Entries
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    Permissions=TableData 17=rimd,
                TableData 45=rimd,
                TableData 87=rimd,
                TableData 253=rimd,
                TableData 254=rimd;
    CaptionML=[ENU=Date Compress VAT Entries;
               ENG=Date Compress VAT Entries];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  VATEntryFilter := COPYSTR("VAT Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

  }
  DATASET
  {
    { 7612;    ;DataItem;                    ;
               DataItemTable=Table254;
               DataItemTableView=SORTING(Type,Closed);
               OnPreDataItem=BEGIN
                               IF NOT
                                  CONFIRM(
                                    Text000 +
                                    Text002,FALSE)
                               THEN
                                 CurrReport.BREAK;

                               IF EntrdDateComprReg."Ending Date" = 0D THEN
                                 ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                               Window.OPEN(
                                 Text004 +
                                 Text005 +
                                 Text006 +
                                 Text007 +
                                 Text008 +
                                 Text009 +
                                 Text010 +
                                 Text011 +
                                 Text012);

                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Compress VAT Entries");

                               GLEntry.LOCKTABLE;
                               NewVATEntry.LOCKTABLE;
                               GLReg.LOCKTABLE;
                               DateComprReg.LOCKTABLE;

                               IF GLEntry.FINDLAST THEN;
                               LastGLEntryNo := GLEntry."Entry No.";
                               NextTransactionNo := GLEntry."Transaction No.";
                               IF NewVATEntry.FINDLAST THEN;
                               LastVATEntryNo := NewVATEntry."Entry No.";
                               SETRANGE("Entry No.",0,LastVATEntryNo);
                               SETRANGE("Posting Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");

                               InitRegisters;
                             END;

               OnAfterGetRecord=BEGIN
                                  VATEntry2 := "VAT Entry";
                                  WITH VATEntry2 DO BEGIN
                                    IF NOT
                                       SETCURRENTKEY(
                                         Type,Closed,"VAT Bus. Posting Group","VAT Prod. Posting Group","Posting Date")
                                    THEN
                                      SETCURRENTKEY(
                                        Type,Closed,"Tax Jurisdiction Code","Use Tax","Posting Date");
                                    COPYFILTERS("VAT Entry");
                                    SETRANGE(Type,Type);
                                    SETRANGE(Closed,Closed);
                                    SETRANGE("VAT Bus. Posting Group","VAT Bus. Posting Group");
                                    SETRANGE("VAT Prod. Posting Group","VAT Prod. Posting Group");
                                    SETRANGE("Tax Jurisdiction Code","Tax Jurisdiction Code");
                                    SETRANGE("Use Tax","Use Tax");
                                    SETFILTER("Posting Date",DateComprMgt.GetDateFilter("Posting Date",EntrdDateComprReg,TRUE));
                                    SETRANGE("Document Type","Document Type");

                                    LastVATEntryNo := LastVATEntryNo + 1;

                                    NewVATEntry.INIT;
                                    NewVATEntry."Entry No." := LastVATEntryNo;
                                    NewVATEntry.Type := Type;
                                    NewVATEntry.Closed := Closed;
                                    NewVATEntry."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
                                    NewVATEntry."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
                                    NewVATEntry."Tax Jurisdiction Code" := "Tax Jurisdiction Code";
                                    NewVATEntry."Use Tax" := "Use Tax";
                                    NewVATEntry."Posting Date" := GETRANGEMIN("Posting Date");
                                    NewVATEntry."Document Type" := "Document Type";
                                    NewVATEntry."Source Code" := SourceCodeSetup."Compress VAT Entries";
                                    NewVATEntry."User ID" := USERID;
                                    NewVATEntry."Transaction No." := NextTransactionNo;
                                    Window.UPDATE(1,NewVATEntry.Type);
                                    Window.UPDATE(2,NewVATEntry."VAT Bus. Posting Group");
                                    Window.UPDATE(3,NewVATEntry."VAT Prod. Posting Group");
                                    Window.UPDATE(4,NewVATEntry."Tax Jurisdiction Code");
                                    Window.UPDATE(5,NewVATEntry."Use Tax");
                                    Window.UPDATE(6,NewVATEntry."Posting Date");
                                    DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
                                    Window.UPDATE(7,DateComprReg."No. of New Records");

                                    IF RetainNo(FIELDNO("Document No.")) THEN BEGIN
                                      SETRANGE("Document No.","Document No.");
                                      NewVATEntry."Document No." := "Document No.";
                                    END;
                                    IF RetainNo(FIELDNO("Bill-to/Pay-to No.")) THEN BEGIN
                                      SETRANGE("Bill-to/Pay-to No.","Bill-to/Pay-to No.");
                                      NewVATEntry."Bill-to/Pay-to No." := "Bill-to/Pay-to No.";
                                    END;
                                    IF RetainNo(FIELDNO("EU 3-Party Trade")) THEN BEGIN
                                      SETRANGE("EU 3-Party Trade","EU 3-Party Trade");
                                      NewVATEntry."EU 3-Party Trade" := "EU 3-Party Trade";
                                    END;
                                    IF RetainNo(FIELDNO("Country/Region Code")) THEN BEGIN
                                      SETRANGE("Country/Region Code","Country/Region Code");
                                      NewVATEntry."Country/Region Code" := "Country/Region Code";
                                    END;
                                    IF RetainNo(FIELDNO("Internal Ref. No.")) THEN BEGIN
                                      SETRANGE("Internal Ref. No.","Internal Ref. No.");
                                      NewVATEntry."Internal Ref. No." := "Internal Ref. No.";
                                    END;
                                    IF Base >= 0 THEN
                                      SETFILTER(Base,'>=0')
                                    ELSE
                                      SETFILTER(Base,'<0');
                                    REPEAT
                                      NewVATEntry.Base := NewVATEntry.Base + Base;
                                      NewVATEntry.Amount := NewVATEntry.Amount + Amount;
                                      NewVATEntry."Unrealized Amount" := NewVATEntry."Unrealized Amount" + "Unrealized Amount";
                                      NewVATEntry."Unrealized Base" := NewVATEntry."Unrealized Base" + "Unrealized Base";
                                      NewVATEntry."Additional-Currency Base" :=
                                        NewVATEntry."Additional-Currency Base" + "Additional-Currency Base";
                                      NewVATEntry."Additional-Currency Amount" :=
                                        NewVATEntry."Additional-Currency Amount" + "Additional-Currency Amount";
                                      NewVATEntry."Add.-Currency Unrealized Amt." :=
                                        NewVATEntry."Add.-Currency Unrealized Amt." + "Add.-Currency Unrealized Amt.";
                                      NewVATEntry."Add.-Currency Unrealized Base" :=
                                        NewVATEntry."Add.-Currency Unrealized Base" + "Add.-Currency Unrealized Base";
                                      NewVATEntry."Remaining Unrealized Amount" :=
                                        NewVATEntry."Remaining Unrealized Amount" + "Remaining Unrealized Amount";
                                      NewVATEntry."Remaining Unrealized Base" :=
                                        NewVATEntry."Remaining Unrealized Base" + "Remaining Unrealized Base";
                                      DELETE;
                                      GLEntryVATEntryLink.SETRANGE("VAT Entry No.","Entry No.");
                                      IF GLEntryVATEntryLink.FINDSET THEN
                                        REPEAT
                                          GLEntryVATEntryLink2 := GLEntryVATEntryLink;
                                          GLEntryVATEntryLink2.DELETE;
                                          GLEntryVATEntryLink2."VAT Entry No." := NewVATEntry."Entry No.";
                                          IF GLEntryVATEntryLink2.INSERT THEN;
                                        UNTIL GLEntryVATEntryLink.NEXT = 0;
                                      DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
                                      Window.UPDATE(8,DateComprReg."No. Records Deleted");
                                    UNTIL NEXT = 0;
                                    NewVATEntry.INSERT;
                                  END;

                                  IF DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 THEN BEGIN
                                    NoOfDeleted := DateComprReg."No. Records Deleted";
                                    InsertRegisters(GLReg,DateComprReg);
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF DateComprReg."No. Records Deleted" > NoOfDeleted THEN
                                  InsertRegisters(GLReg,DateComprReg);
                              END;

               ReqFilterFields=Type,VAT Bus. Posting Group,VAT Prod. Posting Group,Tax Jurisdiction Code,Use Tax,Closed }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF EntrdDateComprReg."Ending Date" = 0D THEN
                     EntrdDateComprReg."Ending Date" := TODAY;

                   WITH "VAT Entry" DO BEGIN
                     InsertField(FIELDNO("Document No."),FIELDCAPTION("Document No."));
                     InsertField(FIELDNO("Bill-to/Pay-to No."),FIELDCAPTION("Bill-to/Pay-to No."));
                     InsertField(FIELDNO("EU 3-Party Trade"),FIELDCAPTION("EU 3-Party Trade"));
                     InsertField(FIELDNO("Country/Region Code"),FIELDCAPTION("Country/Region Code"));
                     InsertField(FIELDNO("Internal Ref. No."),FIELDCAPTION("Internal Ref. No."));
                   END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Starting Date;
                             ENG=Starting Date];
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  CaptionML=[ENU=Ending Date;
                             ENG=Ending Date];
                  SourceExpr=EntrdDateComprReg."Ending Date" }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Period Length;
                             ENG=Period Length];
                  OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Period;
                                   ENG=Day,Week,Month,Quarter,Year,Period];
                  SourceExpr=EntrdDateComprReg."Period Length" }

      { 1907651001;2;Group  ;
                  CaptionML=[ENU=Retain Field Contents;
                             ENG=Retain Field Contents] }

      { 4   ;3   ;Field     ;
                  CaptionML=[ENU=Document No.;
                             ENG=Document No.];
                  SourceExpr=Retain[1] }

      { 5   ;3   ;Field     ;
                  CaptionML=[ENU=Bill-to/Pay-to No.;
                             ENG=Bill-to/Pay-to No.];
                  SourceExpr=Retain[2] }

      { 6   ;3   ;Field     ;
                  CaptionML=[ENU=EU 3-Party Trade;
                             ENG=EU 3-Party Trade];
                  SourceExpr=Retain[3] }

      { 7   ;3   ;Field     ;
                  CaptionML=[ENU=Country/Region Code;
                             ENG=Country/Region Code];
                  SourceExpr=Retain[4] }

      { 8   ;3   ;Field     ;
                  CaptionML=[ENU=Internal Ref. No.;
                             ENG=Internal Ref. No.];
                  SourceExpr=Retain[5] }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\;ENG=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\';
      Text002@1002 : TextConst 'ENU=Do you want to date compress the entries?;ENG=Do you want to date compress the entries?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.;ENG=%1 must be specified.';
      Text004@1004 : TextConst 'ENU=Date compressing VAT entries...\\;ENG=Date compressing VAT entries...\\';
      Text005@1005 : TextConst 'ENU=Type                     #1##########\;ENG=Type                     #1##########\';
      Text006@1006 : TextConst 'ENU=VAT Bus. Posting Group   #2##########\;ENG=VAT Bus. Posting Group   #2##########\';
      Text007@1007 : TextConst 'ENU=VAT Prod. Posting Group  #3##########\;ENG=VAT Prod. Posting Group  #3##########\';
      Text008@1008 : TextConst 'ENU=Tax Jurisdiction         #4##########\;ENG=VAT Jurisdiction         #4##########\';
      Text009@1009 : TextConst 'ENU=Use Tax                  #5##########\;ENG=Use VAT                  #5##########\';
      Text010@1010 : TextConst 'ENU=Date                     #6######\\;ENG=Date                     #6######\\';
      Text011@1011 : TextConst 'ENU=No. of new entries       #7######\;ENG=No. of new entries       #7######\';
      Text012@1012 : TextConst 'ENU=No. of entries deleted   #8######;ENG=No. of entries deleted   #8######';
      SourceCodeSetup@1013 : Record 242;
      EntrdDateComprReg@1014 : Record 87;
      DateComprReg@1015 : Record 87;
      GLReg@1016 : Record 45;
      NewVATEntry@1017 : Record 254;
      VATEntry2@1018 : Record 254;
      GLEntry@1019 : Record 17;
      GLEntryVATEntryLink@1033 : Record 253;
      GLEntryVATEntryLink2@1034 : Record 253;
      DateComprMgt@1020 : Codeunit 356;
      Window@1021 : Dialog;
      VATEntryFilter@1022 : Text[250];
      NoOfFields@1023 : Integer;
      Retain@1024 : ARRAY [10] OF Boolean;
      FieldNumber@1025 : ARRAY [10] OF Integer;
      FieldNameArray@1026 : ARRAY [10] OF Text[100];
      LastGLEntryNo@1027 : Integer;
      LastVATEntryNo@1028 : Integer;
      NextTransactionNo@1029 : Integer;
      NoOfDeleted@1030 : Integer;
      GLRegExists@1031 : Boolean;
      i@1032 : Integer;

    LOCAL PROCEDURE InitRegisters@4();
    BEGIN
      IF GLReg.FIND('+') THEN;
      GLReg.INIT;
      GLReg."No." := GLReg."No." + 1;
      GLReg."Creation Date" := TODAY;
      GLReg."Source Code" := SourceCodeSetup."Compress VAT Entries";
      GLReg."User ID" := USERID;
      GLReg."From Entry No." := LastGLEntryNo + 1;
      GLReg."From VAT Entry No." := LastVATEntryNo + 1;

      IF DateComprReg.FIND('+') THEN;
      DateComprReg.INIT;
      DateComprReg."No." := DateComprReg."No." + 1;
      DateComprReg."Table ID" := DATABASE::"VAT Entry";
      DateComprReg."Creation Date" := TODAY;
      DateComprReg."Starting Date" := EntrdDateComprReg."Starting Date";
      DateComprReg."Ending Date" := EntrdDateComprReg."Ending Date";
      DateComprReg."Period Length" := EntrdDateComprReg."Period Length";
      FOR i := 1 TO NoOfFields DO
        IF Retain[i] THEN
          DateComprReg."Retain Field Contents" :=
            COPYSTR(
              DateComprReg."Retain Field Contents" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Field Contents"));
      DateComprReg."Retain Field Contents" := COPYSTR(DateComprReg."Retain Field Contents",2);
      DateComprReg.Filter := VATEntryFilter;
      DateComprReg."Register No." := GLReg."No.";
      DateComprReg."Source Code" := SourceCodeSetup."Compress VAT Entries";
      DateComprReg."User ID" := USERID;

      GLRegExists := FALSE;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(VAR GLReg@1000 : Record 45;VAR DateComprReg@1001 : Record 87);
    BEGIN
      GLEntry.INIT;
      LastGLEntryNo := LastGLEntryNo + 1;
      GLEntry."Entry No." := LastGLEntryNo;
      GLEntry."Posting Date" := TODAY;
      GLEntry."Source Code" := SourceCodeSetup."Compress VAT Entries";
      GLEntry."System-Created Entry" := TRUE;
      GLEntry."User ID" := USERID;
      GLEntry."Transaction No." := NextTransactionNo;
      GLEntry.INSERT;
      GLEntry.CONSISTENT(GLEntry.Amount = 0);
      GLReg."To Entry No." := GLEntry."Entry No.";
      GLReg."To VAT Entry No." := NewVATEntry."Entry No.";

      IF GLRegExists THEN BEGIN
        GLReg.MODIFY;
        DateComprReg.MODIFY;
      END ELSE BEGIN
        GLReg.INSERT;
        DateComprReg.INSERT;
        GLRegExists := TRUE;
      END;
      COMMIT;

      GLEntry.LOCKTABLE;
      NewVATEntry.LOCKTABLE;
      GLReg.LOCKTABLE;
      DateComprReg.LOCKTABLE;

      IF GLEntry.FINDLAST THEN;
      IF NewVATEntry.FINDLAST THEN;
      IF (LastGLEntryNo <> GLEntry."Entry No.") OR
         (LastVATEntryNo <> NewVATEntry."Entry No.")
      THEN BEGIN
        LastGLEntryNo := GLEntry."Entry No.";
        LastVATEntryNo := NewVATEntry."Entry No.";
        NextTransactionNo := GLEntry."Transaction No." + 1;
        InitRegisters;
      END;
    END;

    LOCAL PROCEDURE InsertField@2(Number@1000 : Integer;Name@1001 : Text[100]);
    BEGIN
      NoOfFields := NoOfFields + 1;
      FieldNumber[NoOfFields] := Number;
      FieldNameArray[NoOfFields] := Name;
    END;

    LOCAL PROCEDURE RetainNo@3(Number@1000 : Integer) : Boolean;
    BEGIN
      EXIT(Retain[Index(Number)]);
    END;

    LOCAL PROCEDURE Index@6(Number@1000 : Integer) : Integer;
    BEGIN
      FOR i := 1 TO NoOfFields DO
        IF Number = FieldNumber[i] THEN
          EXIT(i);
    END;

    LOCAL PROCEDURE InitializeParameter@10();
    BEGIN
      IF EntrdDateComprReg."Ending Date" = 0D THEN
        EntrdDateComprReg."Ending Date" := TODAY;

      WITH "VAT Entry" DO BEGIN
        InsertField(FIELDNO("Document No."),FIELDCAPTION("Document No."));
        InsertField(FIELDNO("Bill-to/Pay-to No."),FIELDCAPTION("Bill-to/Pay-to No."));
        InsertField(FIELDNO("EU 3-Party Trade"),FIELDCAPTION("EU 3-Party Trade"));
        InsertField(FIELDNO("Country/Region Code"),FIELDCAPTION("Country/Region Code"));
        InsertField(FIELDNO("Internal Ref. No."),FIELDCAPTION("Internal Ref. No."));
      END;
    END;

    PROCEDURE InitializeRequest@15(StartingDate@1007 : Date;EndingDate@1006 : Date;PeriodLength@1005 : Option;RetainDocumentNo@1003 : Boolean;RetainBilltoPaytoNo@1002 : Boolean;RetainEU3PartyTrade@1001 : Boolean;RetainCountryRegionCode@1000 : Boolean;RetainInternalRefNo@1008 : Boolean);
    BEGIN
      InitializeParameter;
      EntrdDateComprReg."Starting Date" := StartingDate;
      EntrdDateComprReg."Ending Date" := EndingDate;
      EntrdDateComprReg."Period Length" := PeriodLength;
      Retain[1] := RetainDocumentNo;
      Retain[2] := RetainBilltoPaytoNo;
      Retain[3] := RetainEU3PartyTrade;
      Retain[4] := RetainCountryRegionCode;
      Retain[5] := RetainInternalRefNo;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

