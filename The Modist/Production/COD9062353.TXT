OBJECT Codeunit 9062353 ID Name Search
{
  OBJECT-PROPERTIES
  {
    Date=27/08/15;
    Time=12:49:26 PM;
    Version List=NA2016.1;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      mObjectFieldToolkit@1000000003 : Codeunit 9062343;
      mRecordRef@1000000000 : RecordRef;
      mFieldRef@1000000001 : FieldRef;
      tNotFound@1000000002 : TextConst 'ENU=Can''t find "%1" with "%2" ''%3'';ENG=Can''t find "%1" with "%2" ''%3''';

    PROCEDURE SearchCode@1000000002(pTableId@1000000000 : Integer;pTableView@1000000001 : Text;pIdFieldId@1000000005 : Integer;pNameFieldId@1000000006 : Integer;VAR pId@1000000003 : Code[250];VAR pName@1000000004 : Text;pErrorIfNotFound@1000000008 : Boolean) : Boolean;
    VAR
      lId@1000000002 : Text[250];
      lResult@1000000007 : Boolean;
      lClearId@1000000009 : Boolean;
    BEGIN
      //DOC NA2015.1 - Searching with code ID
      //  -> pTableId: Table ID
      //  -> pTableView: Table view
      //  -> pIdFieldId: ID field ID
      //  -> pNameFieldId: Name field ID
      //  -> pErrorIfNotFound: If to raise an error if record not found
      //  <> pId: ID ('Code' type, amended if found)
      //  <> pName: Name to find (and amend if found)
      //  <- Search result

      lId := pId;
      lResult := SearchInternal(pTableId, pTableView, pIdFieldId, pNameFieldId, pErrorIfNotFound, lId, pName, lClearId);
      IF ( NOT (lClearId)) THEN
        pId := lId
      ELSE
        CLEAR(pId);

      EXIT(lResult);
    END;

    PROCEDURE SearchText@1000000013(pTableId@1000000000 : Integer;pTableView@1000000001 : Text;pIdFieldId@1000000005 : Integer;pNameFieldId@1000000006 : Integer;pErrorIfNotFound@1000000010 : Boolean;VAR pId@1000000003 : Text;VAR pName@1000000004 : Text) : Boolean;
    VAR
      lId@1000000002 : Text;
      lResult@1000000008 : Boolean;
      lClearId@1000000007 : Boolean;
    BEGIN
      //DOC NA2015.1 - Searching with text ID
      //  -> pTableId: Table ID
      //  -> pTableView: Table view
      //  -> pIdFieldId: ID field ID
      //  -> pNameFieldId: Name field ID
      //  -> pErrorIfNotFound: If to raise an error if record not found
      //  <> pId: ID ('Text' type, amended if found)
      //  <> pName: Name to find (and amend if found)
      //  <- Search result

      lId := pId;
      lResult := SearchInternal(pTableId, pTableView, pIdFieldId, pNameFieldId, pErrorIfNotFound, lId, pName, lClearId);
      IF ( NOT (lClearId)) THEN
        pId := lId
      ELSE
        CLEAR(pId);

      EXIT(lResult);
    END;

    PROCEDURE SearchInteger@1000000025(pTableId@1000000000 : Integer;pTableView@1000000001 : Text;pIdFieldId@1000000005 : Integer;pNameFieldId@1000000006 : Integer;VAR pId@1000000003 : Integer;VAR pName@1000000004 : Text;pErrorIfNotFound@1000000008 : Boolean) : Boolean;
    VAR
      lId@1000000002 : Text;
      lResult@1000000007 : Boolean;
      lClearId@1000000009 : Boolean;
    BEGIN
      //DOC NA2015.1 - Searching with integer ID
      //  -> pTableId: Table ID
      //  -> pTableView: Table view
      //  -> pIdFieldId: ID field ID
      //  -> pNameFieldId: Name field ID
      //  -> pErrorIfNotFound: If to raise an error if record not found
      //  <> pId: ID ('Code' type, amended if found)
      //  <> pName: Name to find (and amend if found)
      //  <- Search result

      lId := FORMAT(pId, 0, 1);
      lResult := SearchInternal(pTableId, pTableView, pIdFieldId, pNameFieldId, pErrorIfNotFound, lId, pName, lClearId);
      IF ( NOT (lClearId)) THEN
      BEGIN
        IF (EVALUATE(pId, lId)) THEN;
      END
      ELSE
        CLEAR(pId);

      EXIT(lResult);
    END;

    LOCAL PROCEDURE SearchInternal@1000000001(pTableId@1000000000 : Integer;pTableView@1000000001 : Text;pIdFieldId@1000000005 : Integer;pNameFieldId@1000000006 : Integer;pErrorIfNotFound@1000000010 : Boolean;VAR pId@1000000003 : Text;VAR pName@1000000004 : Text;VAR pClearId@1000000011 : Boolean) : Boolean;
    VAR
      lResult@1000000012 : Boolean;
      lFound@1000000002 : Boolean;
      lNameFilter@1000000007 : ARRAY [4] OF Text;
      lNameFilterLength@1000000009 : Integer;
      lNameFilterIndex@1000000008 : Integer;
    BEGIN
      //DOC NA2015.1 - Searching
      //  -> pTableId: Table ID
      //  -> pTableView: Table view
      //  -> pIdFieldId: ID field ID
      //  -> pNameFieldId: Name field ID
      //  -> pErrorIfNotFound: If to raise an error if record not found
      //  <> pId: ID ('Text' type, amended if found)
      //  <> pName: Name to find (and amend if found)
      //  <> pClearId: Flag to clear ID
      //  <- Search result

      lResult := FALSE;
      lFound := FALSE;
      pClearId := FALSE;

      IF (pName <> '') THEN
      BEGIN
        lNameFilter[1] := pName;
        lNameFilter[2] := '@' + pName;
        lNameFilter[3] := '@' + pName + '*';
        lNameFilter[4] := '@*' + pName + '*';

        lNameFilterLength := ARRAYLEN(lNameFilter);

        mRecordRef.OPEN(pTableId);
        mRecordRef.SETVIEW(pTableView);

        IF ( NOT (lFound)) THEN
        BEGIN
          mFieldRef := mRecordRef.FIELD(pNameFieldId);
          FOR lNameFilterIndex := 1 TO lNameFilterLength DO
          BEGIN
            mFieldRef.SETFILTER(lNameFilter[lNameFilterIndex]);
            lFound := mRecordRef.FINDFIRST();
            IF (lFound) THEN
              lNameFilterIndex := lNameFilterLength;
          END;
          mFieldRef.SETRANGE();
        END;

        IF ( NOT (lFound)) THEN
        BEGIN
          mFieldRef := mRecordRef.FIELD(pIdFieldId);
          mFieldRef.SETFILTER(pName);
          lFound := mRecordRef.FINDFIRST();
          mFieldRef.SETRANGE();
        END;

        IF (lFound) THEN
        BEGIN
          mFieldRef := mRecordRef.FIELD(pIdFieldId);
          pId := FORMAT(mFieldRef.VALUE);
          mFieldRef := mRecordRef.FIELD(pNameFieldId);
          pName := FORMAT(mFieldRef.VALUE);
        END;

        mRecordRef.CLOSE();

        IF (( NOT (lFound)) AND (pErrorIfNotFound)) THEN
          ERROR(tNotFound, mObjectFieldToolkit.GetTableName(pTableId), mObjectFieldToolkit.GetFieldName(pTableId, pNameFieldId), pName);

        lResult := lFound;
      END
      ELSE
      BEGIN
        pClearId := TRUE;
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    BEGIN
    {
      //DOC NA2015.1 JH 29/10/2013 - Created
      //DOC NA2016.1 JH 27/08/2015 - Upgraded to 2016
    }
    END.
  }
}

