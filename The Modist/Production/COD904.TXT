OBJECT Codeunit 904 Whse.-Assembly Release
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WhseRqst@1000 : Record 5765;
      WhsePickRqst@1001 : Record 7325;

    PROCEDURE Release@1(AssemblyHeader@1000 : Record 900);
    VAR
      AssemblyLine@1004 : Record 901;
      OldLocationCode@1006 : Code[10];
      First@1005 : Boolean;
    BEGIN
      WITH AssemblyHeader DO BEGIN
        FilterAssemblyLine(AssemblyLine,"Document Type","No.");
        IF AssemblyLine.FIND('-') THEN BEGIN
          First := TRUE;
          REPEAT
            IF First OR (AssemblyLine."Location Code" <> OldLocationCode) THEN
              CreateWhseRqst(AssemblyHeader,AssemblyLine);

            First := FALSE;
            OldLocationCode := AssemblyLine."Location Code";
          UNTIL AssemblyLine.NEXT = 0;
        END;

        WhseRqst.RESET;
        WhseRqst.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        WhseRqst.SETRANGE(Type,WhseRqst.Type);
        WhseRqst.SETRANGE("Source Type",DATABASE::"Assembly Line");
        WhseRqst.SETRANGE("Source Subtype","Document Type");
        WhseRqst.SETRANGE("Source No.","No.");
        WhseRqst.SETRANGE("Document Status",Status::Open);
        WhseRqst.DELETEALL(TRUE);
      END;
    END;

    PROCEDURE Reopen@2(AssemblyHeader@1000 : Record 900);
    BEGIN
      WITH AssemblyHeader DO BEGIN
        IF "Document Type" = "Document Type"::Order THEN
          WhseRqst.Type := WhseRqst.Type::Outbound;

        WhseRqst.RESET;
        WhseRqst.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        WhseRqst.SETRANGE(Type,WhseRqst.Type);
        WhseRqst.SETRANGE("Source Type",DATABASE::"Assembly Line");
        WhseRqst.SETRANGE("Source Subtype","Document Type");
        WhseRqst.SETRANGE("Source No.","No.");
        WhseRqst.SETRANGE("Document Status",Status::Released);
        WhseRqst.LOCKTABLE;
        IF WhseRqst.FINDSET THEN
          REPEAT
            WhseRqst."Document Status" := Status::Open;
            WhseRqst.MODIFY;
          UNTIL WhseRqst.NEXT = 0;

        WhsePickRqst.SETRANGE("Document Type",WhsePickRqst."Document Type"::Assembly);
        WhsePickRqst.SETRANGE("Document No.","No.");
        WhsePickRqst.SETRANGE(Status,Status::Released);
        IF WhsePickRqst.FIND('-') THEN
          REPEAT
            WhsePickRqst.Status := WhsePickRqst.Status::Open;
            WhsePickRqst.MODIFY;
          UNTIL WhsePickRqst.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateWhseRqst@3(VAR AssemblyHeader@1000 : Record 900;VAR AssemblyLine@1004 : Record 901);
    VAR
      AssemblyLine2@1001 : Record 901;
      Location@1003 : Record 14;
    BEGIN
      GetLocation(Location,AssemblyLine."Location Code");
      IF NOT Location."Require Pick" THEN
        EXIT;

      AssemblyLine2.COPY(AssemblyLine);
      AssemblyLine2.SETRANGE("Location Code",AssemblyLine."Location Code");
      AssemblyLine2.SETRANGE("Unit of Measure Code",'');
      IF AssemblyLine2.FINDFIRST THEN
        AssemblyLine2.TESTFIELD("Unit of Measure Code");

      IF Location."Require Shipment" THEN BEGIN
        WhsePickRqst.INIT;
        WhsePickRqst."Document Type" := WhsePickRqst."Document Type"::Assembly;
        WhsePickRqst."Document Subtype" := AssemblyLine."Document Type";
        WhsePickRqst."Document No." := AssemblyLine."Document No.";
        WhsePickRqst.Status := WhsePickRqst.Status::Released;
        WhsePickRqst."Location Code" := AssemblyLine."Location Code";
        WhsePickRqst."Completely Picked" := AssemblyHeader.CompletelyPicked;
        IF WhsePickRqst."Completely Picked" AND (NOT AssemblyLine.CompletelyPicked) THEN
          WhsePickRqst."Completely Picked" := FALSE;
        IF NOT WhsePickRqst.INSERT THEN
          WhsePickRqst.MODIFY;
      END ELSE BEGIN
        WhseRqst.INIT;
        CASE AssemblyHeader."Document Type" OF
          AssemblyHeader."Document Type"::Order:
            WhseRqst.Type := WhseRqst.Type::Outbound;
        END;
        WhseRqst."Source Document" := WhseRqst."Source Document"::"Assembly Consumption";
        WhseRqst."Source Type" := DATABASE::"Assembly Line";
        WhseRqst."Source Subtype" := AssemblyLine."Document Type";
        WhseRqst."Source No." := AssemblyLine."Document No.";
        WhseRqst."Document Status" := WhseRqst."Document Status"::Released;
        WhseRqst."Location Code" := AssemblyLine."Location Code";
        WhseRqst."Destination Type" := WhseRqst."Destination Type"::Item;
        WhseRqst."Destination No." := AssemblyHeader."Item No.";
        WhseRqst."Completely Handled" := AssemblyCompletelyHandled(AssemblyHeader,AssemblyLine."Location Code");
        IF NOT WhseRqst.INSERT THEN
          WhseRqst.MODIFY;
      END;
    END;

    LOCAL PROCEDURE GetLocation@7(VAR Location@1000 : Record 14;LocationCode@1001 : Code[10]);
    BEGIN
      IF LocationCode <> Location.Code THEN BEGIN
        IF LocationCode = '' THEN BEGIN
          Location.GetLocationSetup(LocationCode,Location);
          Location.Code := '';
        END ELSE
          Location.GET(LocationCode);
      END;
    END;

    LOCAL PROCEDURE FilterAssemblyLine@4(VAR AssemblyLine@1000 : Record 901;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      AssemblyLine.SETCURRENTKEY("Document Type","Document No.",Type,"Location Code");
      AssemblyLine.SETRANGE("Document Type",DocumentType);
      AssemblyLine.SETRANGE("Document No.",DocumentNo);
      AssemblyLine.SETRANGE(Type,AssemblyLine.Type::Item);
    END;

    LOCAL PROCEDURE AssemblyCompletelyHandled@9(AssemblyHeader@1000 : Record 900;LocationCode@1001 : Code[10]) : Boolean;
    VAR
      AssemblyLine@1002 : Record 901;
    BEGIN
      FilterAssemblyLine(AssemblyLine,AssemblyHeader."Document Type",AssemblyHeader."No.");
      AssemblyLine.SETRANGE("Location Code",LocationCode);
      AssemblyLine.SETFILTER("Remaining Quantity",'<>0');
      EXIT(NOT AssemblyLine.FIND('-'));
    END;

    PROCEDURE DeleteLine@5(AssemblyLine@1000 : Record 901);
    VAR
      AssemblyLine2@1001 : Record 901;
      Location@1003 : Record 14;
      KeepWhseRqst@1002 : Boolean;
    BEGIN
      WITH AssemblyLine DO BEGIN
        IF Type <> Type::Item THEN
          EXIT;
        KeepWhseRqst := FALSE;
        IF Location.GET("Location Code") THEN;
        FilterAssemblyLine(AssemblyLine2,"Document Type","Document No.");
        AssemblyLine2.SETFILTER("Line No.",'<>%1',"Line No.");
        AssemblyLine2.SETRANGE("Location Code","Location Code");
        AssemblyLine2.SETFILTER("Remaining Quantity",'<>0');
        IF AssemblyLine2.FIND('-') THEN
          // Other lines for same location exist in the order.
          REPEAT
            IF (NOT AssemblyLine2.CompletelyPicked) OR
               (NOT (Location."Require Pick" AND Location."Require Shipment"))
            THEN
              KeepWhseRqst := TRUE; // if lines are incompletely picked.
          UNTIL (AssemblyLine2.NEXT = 0) OR KeepWhseRqst;

        IF NOT KeepWhseRqst THEN BEGIN
          IF Location."Require Shipment" THEN
            DeleteWhsePickRqst(AssemblyLine,FALSE)
          ELSE
            DeleteWhseRqst(AssemblyLine,FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE DeleteWhsePickRqst@6(AssemblyLine@1000 : Record 901;DeleteAllWhsePickRqst@1003 : Boolean);
    BEGIN
      WITH AssemblyLine DO BEGIN
        WhsePickRqst.SETRANGE("Document Type",WhsePickRqst."Document Type"::Assembly);
        WhsePickRqst.SETRANGE("Document No.","Document No.");
        IF NOT DeleteAllWhsePickRqst THEN BEGIN
          WhsePickRqst.SETRANGE("Document Subtype","Document Type");
          WhsePickRqst.SETRANGE("Location Code","Location Code");
        END;
        WhsePickRqst.DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE DeleteWhseRqst@10(AssemblyLine@1000 : Record 901;DeleteAllWhseRqst@1003 : Boolean);
    VAR
      WhseRqst@1005 : Record 5765;
    BEGIN
      WITH AssemblyLine DO BEGIN
        IF NOT DeleteAllWhseRqst THEN
          CASE TRUE OF
            "Remaining Quantity" > 0:
              WhseRqst.SETRANGE(Type,WhseRqst.Type::Outbound);
            "Remaining Quantity" < 0:
              WhseRqst.SETRANGE(Type,WhseRqst.Type::Inbound);
            "Remaining Quantity" = 0:
              EXIT;
          END;
        WhseRqst.SETRANGE("Source Type",DATABASE::"Assembly Line");
        WhseRqst.SETRANGE("Source No.","Document No.");
        IF NOT DeleteAllWhseRqst THEN BEGIN
          WhseRqst.SETRANGE("Source Subtype","Document Type");
          WhseRqst.SETRANGE("Location Code","Location Code");
        END;
        WhseRqst.DELETEALL(TRUE);
      END;
    END;

    BEGIN
    END.
  }
}

