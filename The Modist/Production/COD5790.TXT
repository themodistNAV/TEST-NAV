OBJECT Codeunit 5790 Available to Promise
{
  OBJECT-PROPERTIES
  {
    Date=14/11/18;
    Time=[ 6:46:47 PM];
    Modified=Yes;
    Version List=NAVW19.00.00.43897,TM6000;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      OldRecordExists@1000 : Boolean;
      ReqShipDate@1006 : Date;

    PROCEDURE QtyAvailabletoPromise@1(VAR Item@1000 : Record 27;VAR GrossRequirement@1001 : Decimal;VAR ScheduledReceipt@1002 : Decimal;AvailabilityDate@1003 : Date;PeriodType@1004 : 'Day,Week,Month,Quarter,Year';LookaheadDateFormula@1005 : DateFormula) : Decimal;
    BEGIN
      ScheduledReceipt := CalcScheduledReceipt(Item);
      GrossRequirement := CalcGrossRequirement(Item);

      IF FORMAT(LookaheadDateFormula) <> '' THEN
        GrossRequirement :=
          GrossRequirement +
          CalculateLookahead(
            Item,PeriodType,
            AvailabilityDate + 1,
            AdjustedEndingDate(CALCDATE(LookaheadDateFormula,AvailabilityDate),PeriodType));

      EXIT(
        CalcAvailableInventory(Item) +
        (ScheduledReceipt - CalcReservedReceipt(Item)) -
        (GrossRequirement - CalcReservedRequirement(Item)));
    END;

    PROCEDURE CalcAvailableInventory@30(VAR Item@1000 : Record 27) : Decimal;
    BEGIN
      Item.CALCFIELDS(Inventory,"Reserved Qty. on Inventory");
      EXIT(Item.Inventory - Item."Reserved Qty. on Inventory");
    END;

    PROCEDURE CalcGrossRequirement@4(VAR Item@1000 : Record 27) : Decimal;
    BEGIN
      WITH Item DO BEGIN
        CALCFIELDS(
          "Scheduled Need (Qty.)",
          "Planning Issues (Qty.)",
          "Planning Transfer Ship. (Qty).",
          "Qty. on Sales Order",
          "Qty. on Service Order",
          "Qty. on Job Order",
          "Trans. Ord. Shipment (Qty.)",
          "Qty. on Asm. Component",
          "Qty. on Purch. Return",
          "Qty. on Internet Order"); //DOC TM6000 AW 11/05/2018

        EXIT(
          "Scheduled Need (Qty.)" +
          "Planning Issues (Qty.)" +
          "Planning Transfer Ship. (Qty)." +
          "Qty. on Sales Order" +
          "Qty. on Service Order" +
          "Qty. on Job Order" +
          "Trans. Ord. Shipment (Qty.)" +
          "Qty. on Asm. Component" +
          "Qty. on Purch. Return" +
          "Qty. on Internet Order"); //DOC TM6000 AW 11/05/2018
      END;
    END;

    PROCEDURE CalcReservedRequirement@12(VAR Item@1000 : Record 27) : Decimal;
    BEGIN
      WITH Item DO BEGIN
        CALCFIELDS(
          "Res. Qty. on Prod. Order Comp.",
          "Reserved Qty. on Sales Orders",
          "Res. Qty. on Service Orders",
          "Res. Qty. on Job Order",
          "Res. Qty. on Outbound Transfer",
          "Res. Qty. on  Asm. Comp.",
          "Res. Qty. on Purch. Returns");

        EXIT(
          "Res. Qty. on Prod. Order Comp." +
          "Reserved Qty. on Sales Orders" +
          "Res. Qty. on Service Orders" +
          "Res. Qty. on Job Order" +
          "Res. Qty. on Outbound Transfer" +
          "Res. Qty. on  Asm. Comp." +
          "Res. Qty. on Purch. Returns");
      END;
    END;

    PROCEDURE CalcScheduledReceipt@8(VAR Item@1000 : Record 27) : Decimal;
    BEGIN
      WITH Item DO BEGIN
        CALCFIELDS(
          "Scheduled Receipt (Qty.)",
          "Planned Order Receipt (Qty.)",
          "Planning Worksheet (Qty.)",
          "Purch. Req. Receipt (Qty.)",
          "Qty. on Purch. Order",
          "Trans. Ord. Receipt (Qty.)",
          "Qty. in Transit",
          "Qty. on Assembly Order",
          "Qty. on Sales Return");

        EXIT(
          "Scheduled Receipt (Qty.)" +
          "Planned Order Receipt (Qty.)" +
          "Purch. Req. Receipt (Qty.)" +
          "Qty. on Purch. Order" +
          "Trans. Ord. Receipt (Qty.)" +
          "Qty. in Transit" +
          "Qty. on Assembly Order" +
          "Planning Worksheet (Qty.)" +
          "Qty. on Sales Return");
      END;
    END;

    PROCEDURE CalcReservedReceipt@13(VAR Item@1000 : Record 27) : Decimal;
    BEGIN
      WITH Item DO BEGIN
        CALCFIELDS("Reserved Qty. on Prod. Order",
          "Res. Qty. on Req. Line",
          "Reserved Qty. on Purch. Orders",
          "Res. Qty. on Inbound Transfer",
          "Res. Qty. on Assembly Order",
          "Res. Qty. on Sales Returns");

        EXIT("Reserved Qty. on Prod. Order" +
          "Res. Qty. on Req. Line" +
          "Reserved Qty. on Purch. Orders" +
          "Res. Qty. on Inbound Transfer" +
          "Res. Qty. on Assembly Order" +
          "Res. Qty. on Sales Returns");
      END;
    END;

    PROCEDURE EarliestAvailabilityDate@5(VAR Item@1000 : Record 27;NeededQty@1001 : Decimal;StartDate@1002 : Date;ExcludeQty@1003 : Decimal;ExcludeOnDate@1004 : Date;VAR AvailableQty@1005 : Decimal;PeriodType@1006 : 'Day,Week,Month,Quarter,Year';LookaheadDateFormula@1007 : DateFormula) : Date;
    VAR
      Date@1008 : Record 2000000007;
      Item2@1009 : Record 27;
      AvailabilityAtDate@1021 : TEMPORARY Record 390;
      QtyIsAvailable@1011 : Boolean;
      ExactDateFound@1013 : Boolean;
      ScheduledReceipt@1014 : Decimal;
      GrossRequirement@1015 : Decimal;
      AvailableQtyPeriod@1016 : Decimal;
      AvailableDate@1017 : Date;
      PeriodStart@1018 : Date;
      PeriodEnd@1019 : Date;
    BEGIN
      AvailableQty := 0;
      IF FORMAT(LookaheadDateFormula) = '' THEN
        EXIT;

      Item.COPYFILTER("Date Filter",Item2."Date Filter");
      Item.SETRANGE("Date Filter",0D,AdjustedEndingDate(CALCDATE(LookaheadDateFormula,StartDate),PeriodType));
      CalculateAvailability(Item,AvailabilityAtDate);
      UpdateScheduledReceipt(AvailabilityAtDate,ExcludeOnDate,ExcludeQty);
      CalculateAvailabilityByPeriod(AvailabilityAtDate,PeriodType);

      Date.SETRANGE("Period Type",PeriodType);
      Date.SETRANGE("Period Start",0D,StartDate);
      IF Date.FINDLAST THEN BEGIN
        AvailabilityAtDate.SETRANGE("Period Start",0D,Date."Period Start");
        IF AvailabilityAtDate.FINDSET THEN
          REPEAT
            IF PeriodStart = 0D THEN
              PeriodStart := AvailabilityAtDate."Period Start";
            ScheduledReceipt += AvailabilityAtDate."Scheduled Receipt";
            GrossRequirement += AvailabilityAtDate."Gross Requirement";
          UNTIL AvailabilityAtDate.NEXT = 0;
        AvailableQty := Item.Inventory - Item."Reserved Qty. on Inventory" + ScheduledReceipt - GrossRequirement;
        IF AvailableQty >= NeededQty THEN BEGIN
          QtyIsAvailable := TRUE;
          AvailableDate := Date."Period End";
          PeriodEnd := Date."Period End";
        END ELSE
          PeriodStart := 0D;
      END;

      AvailabilityAtDate.SETRANGE("Period Start",StartDate + 1,CALCDATE(LookaheadDateFormula,StartDate));
      AvailabilityAtDate."Period Start" := 0D;
      WHILE AvailabilityAtDate.NEXT <> 0 DO BEGIN
        AvailableQtyPeriod := AvailabilityAtDate."Scheduled Receipt" - AvailabilityAtDate."Gross Requirement";
        IF AvailabilityAtDate."Scheduled Receipt" <= AvailabilityAtDate."Gross Requirement" THEN BEGIN
          AvailableQty := AvailableQty + AvailableQtyPeriod;
          AvailableDate := AvailabilityAtDate."Period End";
          IF AvailableQty < NeededQty THEN
            QtyIsAvailable := FALSE;
        END ELSE
          IF QtyIsAvailable THEN
            AvailabilityAtDate.FINDLAST
          ELSE BEGIN
            AvailableQty := AvailableQty + AvailableQtyPeriod;
            IF AvailableQty >= NeededQty THEN BEGIN
              QtyIsAvailable := TRUE;
              AvailableDate := AvailabilityAtDate."Period End";
              PeriodStart := AvailabilityAtDate."Period Start";
              PeriodEnd := AvailabilityAtDate."Period End";
              AvailabilityAtDate.FINDLAST;
            END;
          END;
      END;

      IF QtyIsAvailable THEN BEGIN
        IF PeriodType <> PeriodType::Day THEN BEGIN
          Item.SETRANGE("Date Filter",PeriodStart,PeriodEnd);
          CalculateAvailability(Item,AvailabilityAtDate);
          IF (ExcludeOnDate >= PeriodStart) AND (ExcludeOnDate <= PeriodEnd) THEN
            UpdateScheduledReceipt(AvailabilityAtDate,ExcludeOnDate,ExcludeQty);
        END;
        AvailabilityAtDate.SETRANGE("Period Start",PeriodStart,PeriodEnd);
        IF AvailabilityAtDate.FIND('+') THEN
          REPEAT
            IF (AvailableQty - AvailabilityAtDate."Scheduled Receipt") < NeededQty THEN BEGIN
              ExactDateFound := TRUE;
              AvailableDate := AvailabilityAtDate."Period Start";
            END ELSE
              AvailableQty := AvailableQty - AvailabilityAtDate."Scheduled Receipt";
          UNTIL (AvailabilityAtDate.NEXT(-1) = 0) OR ExactDateFound;
        IF NOT ExactDateFound THEN BEGIN
          AvailableDate := StartDate;
          IF AvailabilityAtDate.FIND THEN
            AvailableQty := AvailableQty + AvailabilityAtDate."Scheduled Receipt";
        END;
      END ELSE
        AvailableDate := 0D;

      Item2.COPYFILTER("Date Filter",Item."Date Filter");
      EXIT(AvailableDate);
    END;

    PROCEDURE CalculateLookahead@3(VAR Item@1000 : Record 27;PeriodType@1001 : 'Day,Week,Month,Quarter,Year';StartDate@1002 : Date;EndDate@1003 : Date) : Decimal;
    VAR
      Item2@1004 : Record 27;
      AvailabilityAtDate@1009 : TEMPORARY Record 390;
      LookaheadQty@1008 : Decimal;
      Stop@1005 : Boolean;
    BEGIN
      Item.COPYFILTER("Date Filter",Item2."Date Filter");
      Item.SETRANGE("Date Filter",StartDate,EndDate);
      CalculateAvailability(Item,AvailabilityAtDate);
      CalculateAvailabilityByPeriod(AvailabilityAtDate,PeriodType);
      AvailabilityAtDate.SETRANGE("Period Start",0D,StartDate - 1);
      IF AvailabilityAtDate.FINDSET THEN
        REPEAT
          LookaheadQty += AvailabilityAtDate."Gross Requirement" - AvailabilityAtDate."Scheduled Receipt";
        UNTIL AvailabilityAtDate.NEXT = 0;

      AvailabilityAtDate.SETRANGE("Period Start",StartDate,EndDate);
      IF AvailabilityAtDate.FINDSET THEN
        REPEAT
          IF AvailabilityAtDate."Gross Requirement" > AvailabilityAtDate."Scheduled Receipt" THEN
            LookaheadQty += AvailabilityAtDate."Gross Requirement" - AvailabilityAtDate."Scheduled Receipt"
          ELSE
            IF AvailabilityAtDate."Gross Requirement" < AvailabilityAtDate."Scheduled Receipt" THEN
              Stop := TRUE;
        UNTIL (AvailabilityAtDate.NEXT = 0) OR Stop;

      IF LookaheadQty < 0 THEN
        LookaheadQty := 0;

      Item2.COPYFILTER("Date Filter",Item."Date Filter");
      EXIT(LookaheadQty);
    END;

    PROCEDURE CalculateAvailability@6(VAR Item@1002 : Record 27;VAR AvailabilityAtDate@1000 : Record 390);
    VAR
      Item2@1006 : Record 27;
    BEGIN
      Item2.COPYFILTERS(Item);
      Item.SETRANGE("Bin Filter");
      Item.SETRANGE("Global Dimension 1 Filter");
      Item.SETRANGE("Global Dimension 2 Filter");

      Item.CALCFIELDS(Inventory,"Reserved Qty. on Inventory");

      AvailabilityAtDate.RESET;
      AvailabilityAtDate.DELETEALL;
      OldRecordExists := FALSE;

      UpdateSchedRcptAvail(AvailabilityAtDate,Item);
      UpdatePurchReqRcptAvail(AvailabilityAtDate,Item);
      UpdatePurchOrderAvail(AvailabilityAtDate,Item);
      UpdateTransOrderRcptAvail(AvailabilityAtDate,Item);
      UpdateSchedNeedAvail(AvailabilityAtDate,Item);
      UpdatePlanningIssuesAvail(AvailabilityAtDate,Item);
      UpdateSalesOrderAvail(AvailabilityAtDate,Item);
      UpdateServOrderAvail(AvailabilityAtDate,Item);
      UpdateJobOrderAvail(AvailabilityAtDate,Item);
      UpdateTransOrderShptAvail(AvailabilityAtDate,Item);
      UpdateAsmOrderAvail(AvailabilityAtDate,Item);
      UpdateAsmCompAvail(AvailabilityAtDate,Item);

      Item.COPYFILTERS(Item2);
    END;

    LOCAL PROCEDURE UpdateScheduledReceipt@17(VAR AvailabilityAtDate@1000 : Record 390;ReceiptDate@1002 : Date;ScheduledReceipt@1003 : Decimal);
    BEGIN
      UpdateAvailability(AvailabilityAtDate,ReceiptDate,ScheduledReceipt,0);
    END;

    LOCAL PROCEDURE UpdateGrossRequirement@16(VAR AvailabilityAtDate@1000 : Record 390;ShipmentDate@1002 : Date;GrossRequirement@1004 : Decimal);
    BEGIN
      UpdateAvailability(AvailabilityAtDate,ShipmentDate,0,GrossRequirement);
    END;

    LOCAL PROCEDURE UpdateAvailability@7(VAR AvailabilityAtDate@1000 : Record 390;Date@1002 : Date;ScheduledReceipt@1003 : Decimal;GrossRequirement@1004 : Decimal);
    VAR
      RecordExists@1005 : Boolean;
    BEGIN
      IF (ScheduledReceipt = 0) AND (GrossRequirement = 0) THEN
        EXIT;

      IF OldRecordExists AND (Date = AvailabilityAtDate."Period Start") THEN
        RecordExists := TRUE
      ELSE BEGIN
        AvailabilityAtDate."Period Start" := Date;
        IF AvailabilityAtDate.FIND THEN
          RecordExists := TRUE
        ELSE BEGIN
          AvailabilityAtDate.INIT;
          AvailabilityAtDate."Period End" := Date;
        END;
      END;

      AvailabilityAtDate."Scheduled Receipt" += ScheduledReceipt;
      AvailabilityAtDate."Gross Requirement" += GrossRequirement;

      IF RecordExists THEN
        AvailabilityAtDate.MODIFY
      ELSE
        AvailabilityAtDate.INSERT;

      OldRecordExists := TRUE;
    END;

    LOCAL PROCEDURE CalculateAvailabilityByPeriod@11(VAR AvailabilityAtDate@1000 : Record 390;PeriodType@1001 : 'Day,Week,Month,Quarter,Year');
    VAR
      AvailabilityInPeriod@1003 : Record 390;
      Date@1002 : Record 2000000007;
    BEGIN
      IF PeriodType = PeriodType::Day THEN
        EXIT;

      IF AvailabilityAtDate.FINDSET THEN
        REPEAT
          Date.SETRANGE("Period Type",PeriodType);
          Date."Period Type" := PeriodType;
          Date."Period Start" := AvailabilityAtDate."Period Start";
          IF Date.FIND('=<') THEN BEGIN
            AvailabilityAtDate.SETRANGE("Period Start",Date."Period Start",Date."Period End");
            AvailabilityInPeriod.INIT;
            AvailabilityInPeriod."Period Start" := Date."Period Start";
            AvailabilityInPeriod."Period End" := NORMALDATE(Date."Period End");
            REPEAT
              AvailabilityInPeriod."Scheduled Receipt" += AvailabilityAtDate."Scheduled Receipt";
              AvailabilityInPeriod."Gross Requirement" += AvailabilityAtDate."Gross Requirement";
              AvailabilityAtDate.DELETE;
            UNTIL AvailabilityAtDate.NEXT = 0;
            AvailabilityAtDate.SETRANGE("Period Start");
            AvailabilityAtDate := AvailabilityInPeriod;
            AvailabilityAtDate.INSERT;
          END;
        UNTIL AvailabilityAtDate.NEXT = 0;
    END;

    PROCEDURE AdjustedEndingDate@2(PeriodEnd@1000 : Date;PeriodType@1001 : 'Day,Week,Month,Quarter,Year') : Date;
    VAR
      Date@1002 : Record 2000000007;
    BEGIN
      IF PeriodType = PeriodType::Day THEN
        EXIT(PeriodEnd);

      Date.SETRANGE("Period Type",PeriodType);
      Date.SETRANGE("Period Start",0D,PeriodEnd);
      Date.FINDLAST;
      EXIT(NORMALDATE(Date."Period End"));
    END;

    PROCEDURE SetPromisingReqShipDate@9(OrderPromisingLine@1000 : Record 99000880);
    BEGIN
      ReqShipDate := OrderPromisingLine."Requested Shipment Date";
    END;

    LOCAL PROCEDURE CalcReqShipDate@10(SalesLine@1000 : Record 37) : Date;
    BEGIN
      IF SalesLine."Requested Delivery Date" = 0D THEN
        EXIT(SalesLine."Shipment Date");

      SalesLine."Planned Delivery Date" := SalesLine."Requested Delivery Date";
      IF FORMAT(SalesLine."Shipping Time") <> '' THEN
        SalesLine."Planned Shipment Date" := SalesLine.CalcPlannedDeliveryDate(SalesLine.FIELDNO("Planned Delivery Date"))
      ELSE
        SalesLine."Planned Shipment Date" := SalesLine.CalcPlannedShptDate(SalesLine.FIELDNO("Planned Delivery Date"));
      EXIT(SalesLine.CalcShipmentDate);
    END;

    LOCAL PROCEDURE UpdateSchedRcptAvail@14(VAR AvailabilityAtDate@1000 : Record 390;VAR Item@1001 : Record 27);
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      WITH ProdOrderLine DO
        IF FindLinesWithItemToPlan(Item,TRUE) THEN
          REPEAT
            CALCFIELDS("Reserved Qty. (Base)");
            UpdateScheduledReceipt(AvailabilityAtDate,"Due Date","Remaining Qty. (Base)" - "Reserved Qty. (Base)");
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE UpdatePurchReqRcptAvail@15(VAR AvailabilityAtDate@1001 : Record 390;VAR Item@1000 : Record 27);
    VAR
      ReqLine@1002 : Record 246;
    BEGIN
      WITH ReqLine DO BEGIN
        IF FindLinesWithItemToPlan(Item) THEN
          REPEAT
            CALCFIELDS("Reserved Qty. (Base)");
            UpdateScheduledReceipt(AvailabilityAtDate,"Due Date","Quantity (Base)" - "Reserved Qty. (Base)");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdatePurchOrderAvail@18(VAR AvailabilityAtDate@1001 : Record 390;VAR Item@1000 : Record 27);
    VAR
      PurchLine@1002 : Record 39;
    BEGIN
      WITH PurchLine DO BEGIN
        IF FindLinesWithItemToPlan(Item,"Document Type"::Order) THEN
          REPEAT
            CALCFIELDS("Reserved Qty. (Base)");
            UpdateScheduledReceipt(AvailabilityAtDate,"Expected Receipt Date","Outstanding Qty. (Base)" - "Reserved Qty. (Base)");
          UNTIL NEXT = 0;

        IF FindLinesWithItemToPlan(Item,"Document Type"::"Return Order") THEN
          REPEAT
            CALCFIELDS("Reserved Qty. (Base)");
            UpdateGrossRequirement(AvailabilityAtDate,"Expected Receipt Date","Outstanding Qty. (Base)" - "Reserved Qty. (Base)")
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateTransOrderRcptAvail@19(VAR AvailabilityAtDate@1001 : Record 390;VAR Item@1000 : Record 27);
    VAR
      TransLine@1002 : Record 5741;
    BEGIN
      WITH TransLine DO
        IF FindLinesWithItemToPlan(Item,TRUE,FALSE) THEN
          REPEAT
            CALCFIELDS("Reserved Qty. Inbnd. (Base)");
            UpdateScheduledReceipt(AvailabilityAtDate,"Receipt Date",
              "Outstanding Qty. (Base)" + "Qty. Shipped (Base)" - "Qty. Received (Base)" - "Reserved Qty. Inbnd. (Base)");
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateSchedNeedAvail@21(VAR AvailabilityAtDate@1001 : Record 390;VAR Item@1000 : Record 27);
    VAR
      ProdOrderComp@1002 : Record 5407;
    BEGIN
      WITH ProdOrderComp DO
        IF FindLinesWithItemToPlan(Item,TRUE) THEN
          REPEAT
            CALCFIELDS("Reserved Qty. (Base)");
            UpdateGrossRequirement(AvailabilityAtDate,"Due Date","Remaining Qty. (Base)" - "Reserved Qty. (Base)");
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE UpdatePlanningIssuesAvail@22(VAR AvailabilityAtDate@1001 : Record 390;VAR Item@1000 : Record 27);
    VAR
      PlanningComp@1002 : Record 99000829;
    BEGIN
      WITH PlanningComp DO
        IF FindLinesWithItemToPlan(Item) THEN
          REPEAT
            CALCFIELDS("Reserved Qty. (Base)");
            UpdateGrossRequirement(AvailabilityAtDate,"Due Date","Expected Quantity (Base)" - "Reserved Qty. (Base)");
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateSalesOrderAvail@23(VAR AvailabilityAtDate@1001 : Record 390;VAR Item@1000 : Record 27);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        IF FindLinesWithItemToPlan(Item,"Document Type"::Order) THEN
          REPEAT
            IF (ReqShipDate = 0D) OR (CalcReqShipDate(SalesLine) <= ReqShipDate) THEN BEGIN
              CALCFIELDS("Reserved Qty. (Base)");
              UpdateGrossRequirement(AvailabilityAtDate,"Shipment Date","Outstanding Qty. (Base)" - "Reserved Qty. (Base)")
            END
          UNTIL NEXT = 0;

        IF FindLinesWithItemToPlan(Item,"Document Type"::"Return Order") THEN
          REPEAT
            CALCFIELDS("Reserved Qty. (Base)");
            UpdateScheduledReceipt(AvailabilityAtDate,"Shipment Date","Outstanding Qty. (Base)" - "Reserved Qty. (Base)")
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateServOrderAvail@24(VAR AvailabilityAtDate@1001 : Record 390;VAR Item@1000 : Record 27);
    VAR
      ServLine@1002 : Record 5902;
    BEGIN
      WITH ServLine DO
        IF FindLinesWithItemToPlan(Item) THEN
          REPEAT
            CALCFIELDS("Reserved Qty. (Base)");
            UpdateGrossRequirement(AvailabilityAtDate,"Needed by Date","Outstanding Qty. (Base)" - "Reserved Qty. (Base)");
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateJobOrderAvail@26(VAR AvailabilityAtDate@1001 : Record 390;VAR Item@1000 : Record 27);
    VAR
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      WITH JobPlanningLine DO
        IF FindLinesWithItemToPlan(Item) THEN
          REPEAT
            CALCFIELDS("Reserved Qty. (Base)");
            UpdateGrossRequirement(AvailabilityAtDate,"Planning Date","Remaining Qty. (Base)" - "Reserved Qty. (Base)");
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateTransOrderShptAvail@25(VAR AvailabilityAtDate@1001 : Record 390;VAR Item@1000 : Record 27);
    VAR
      TransLine@1002 : Record 5741;
    BEGIN
      WITH TransLine DO
        IF FindLinesWithItemToPlan(Item,FALSE,FALSE) THEN
          REPEAT
            CALCFIELDS("Reserved Qty. Outbnd. (Base)");
            UpdateGrossRequirement(AvailabilityAtDate,"Shipment Date","Outstanding Qty. (Base)" - "Reserved Qty. Outbnd. (Base)");
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateAsmOrderAvail@28(VAR AvailabilityAtDate@1001 : Record 390;VAR Item@1000 : Record 27);
    VAR
      AsmHeader@1002 : Record 900;
    BEGIN
      WITH AsmHeader DO
        IF FindLinesWithItemToPlan(Item,"Document Type"::Order) THEN
          REPEAT
            CALCFIELDS("Reserved Qty. (Base)");
            UpdateScheduledReceipt(AvailabilityAtDate,"Due Date","Remaining Quantity (Base)" - "Reserved Qty. (Base)");
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateAsmCompAvail@29(VAR AvailabilityAtDate@1001 : Record 390;VAR Item@1000 : Record 27);
    VAR
      AsmLine@1002 : Record 901;
    BEGIN
      WITH AsmLine DO
        IF FindLinesWithItemToPlan(Item,"Document Type"::Order) THEN
          REPEAT
            CALCFIELDS("Reserved Qty. (Base)");
            UpdateGrossRequirement(AvailabilityAtDate,"Due Date","Remaining Quantity (Base)" - "Reserved Qty. (Base)");
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE "--TMFunctions--"@1170000009();
    BEGIN
    END;

    PROCEDURE QtyAvailabletoEcomm@1170000010(VAR Item@1000 : Record 27;VAR NetInventory@1170000001 : Decimal;VAR GrossRequirement@1001 : Decimal) : Decimal;
    BEGIN
      //DOC TM6000 AW 11/05/2018
      GrossRequirement := CalcGrossRequirement(Item);
      NetInventory := CalcAvailableInventory(Item);

      EXIT(
        NetInventory -
        (GrossRequirement - CalcReservedRequirement(Item)));
    END;

    BEGIN
    {
      //DOC TM6000 AW 11/05/2018 - WMS Integration - New function to get Net Inventory to EComm
      //DOC TM6000 AW 11/05/2018 - WMS Integration - Include "Qty. on Internet Order" in Gross Requirement Calculation
    }
    END.
  }
}

