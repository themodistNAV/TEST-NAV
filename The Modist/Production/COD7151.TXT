OBJECT Codeunit 7151 ItemAViewEntryToValueEntries
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ItemAnalysisView@1000 : Record 7152;
      GLSetup@1001 : Record 98;
      DimSetEntry@1002 : Record 480;

    PROCEDURE GetValueEntries@1(VAR ItemAnalysisViewEntry@1000 : Record 7154;VAR TempValueEntry@1001 : Record 5802);
    VAR
      ValueEntry@1002 : Record 5802;
      ItemAnalysisViewFilter@1004 : Record 7153;
      UpdateItemAnalysisView@1013 : Codeunit 7150;
      StartDate@1007 : Date;
      EndDate@1008 : Date;
      GlobalDimValue@1009 : Code[20];
    BEGIN
      ItemAnalysisView.GET(
        ItemAnalysisViewEntry."Analysis Area",
        ItemAnalysisViewEntry."Analysis View Code");

      IF ItemAnalysisView."Date Compression" = ItemAnalysisView."Date Compression"::None THEN BEGIN
        IF ValueEntry.GET(ItemAnalysisViewEntry."Entry No.") THEN BEGIN
          TempValueEntry := ValueEntry;
          TempValueEntry.INSERT;
        END;
        EXIT;
      END;

      GLSetup.GET;

      StartDate := ItemAnalysisViewEntry."Posting Date";
      EndDate := StartDate;

      WITH ItemAnalysisView DO
        IF StartDate < "Starting Date" THEN
          StartDate := 0D
        ELSE
          IF (ItemAnalysisViewEntry."Posting Date" = NORMALDATE(ItemAnalysisViewEntry."Posting Date")) AND
             NOT ("Date Compression" IN ["Date Compression"::None,"Date Compression"::Day])
          THEN
            CASE "Date Compression" OF
              "Date Compression"::Week:
                EndDate := ItemAnalysisViewEntry."Posting Date" + 6;
              "Date Compression"::Month:
                EndDate := CALCDATE('<+1M-1D>',ItemAnalysisViewEntry."Posting Date");
              "Date Compression"::Quarter:
                EndDate := CALCDATE('<+3M-1D>',ItemAnalysisViewEntry."Posting Date");
              "Date Compression"::Year:
                EndDate := CALCDATE('<+1Y-1D>',ItemAnalysisViewEntry."Posting Date");
            END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date");
        SETRANGE("Item No.",ItemAnalysisViewEntry."Item No.");
        SETRANGE("Posting Date",StartDate,EndDate);
        SETRANGE("Entry No.",0,ItemAnalysisView."Last Entry No.");

        IF GetGlobalDimValue(GLSetup."Global Dimension 1 Code",ItemAnalysisViewEntry,GlobalDimValue) THEN
          SETRANGE("Global Dimension 1 Code",GlobalDimValue)
        ELSE
          IF ItemAnalysisViewFilter.GET(
               ItemAnalysisView."Analysis Area",
               ItemAnalysisViewEntry."Analysis View Code",
               GLSetup."Global Dimension 1 Code")
          THEN
            SETFILTER("Global Dimension 1 Code",ItemAnalysisViewFilter."Dimension Value Filter");

        IF GetGlobalDimValue(GLSetup."Global Dimension 2 Code",ItemAnalysisViewEntry,GlobalDimValue) THEN
          SETRANGE("Global Dimension 2 Code",GlobalDimValue)
        ELSE
          IF ItemAnalysisViewFilter.GET(
               ItemAnalysisView."Analysis Area",
               ItemAnalysisViewEntry."Analysis View Code",
               GLSetup."Global Dimension 2 Code")
          THEN
            SETFILTER("Global Dimension 2 Code",ItemAnalysisViewFilter."Dimension Value Filter");

        IF FIND('-') THEN
          REPEAT
            IF DimEntryOK("Dimension Set ID",ItemAnalysisView."Dimension 1 Code",ItemAnalysisViewEntry."Dimension 1 Value Code") AND
               DimEntryOK("Dimension Set ID",ItemAnalysisView."Dimension 2 Code",ItemAnalysisViewEntry."Dimension 2 Value Code") AND
               DimEntryOK("Dimension Set ID",ItemAnalysisView."Dimension 3 Code",ItemAnalysisViewEntry."Dimension 3 Value Code") AND
               UpdateItemAnalysisView.DimSetIDInFilter("Dimension Set ID",ItemAnalysisView)
            THEN
              IF ((ItemAnalysisView."Analysis Area" = ItemAnalysisView."Analysis Area"::Sales) AND
                  ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Sale) AND
                  ("Entry Type" <> "Entry Type"::Revaluation)) OR
                 ((ItemAnalysisView."Analysis Area" = ItemAnalysisView."Analysis Area"::Purchase) AND
                  ("Item Ledger Entry Type" = "Item Ledger Entry Type"::Purchase)) OR
                 ((ItemAnalysisView."Analysis Area" = ItemAnalysisView."Analysis Area"::Inventory) AND
                  ("Item Ledger Entry Type" <> "Item Ledger Entry Type"::" "))
              THEN
                IF NOT TempValueEntry.GET("Entry No.") THEN BEGIN
                  TempValueEntry := ValueEntry;
                  TempValueEntry.INSERT;
                END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE DimEntryOK@10(DimSetID@1000 : Integer;Dim@1001 : Code[20];DimValue@1002 : Code[20]) : Boolean;
    BEGIN
      IF Dim = '' THEN
        EXIT(TRUE);

      IF DimSetEntry.GET(DimSetID,Dim) THEN
        EXIT(DimSetEntry."Dimension Value Code" = DimValue);

      EXIT(DimValue = '');
    END;

    LOCAL PROCEDURE GetGlobalDimValue@2(GlobalDim@1000 : Code[20];VAR ItemAnalysisViewEntry@1001 : Record 7154;VAR GlobalDimValue@1002 : Code[20]) : Boolean;
    VAR
      IsGlobalDim@1003 : Boolean;
    BEGIN
      CASE GlobalDim OF
        ItemAnalysisView."Dimension 1 Code":
          BEGIN
            IsGlobalDim := TRUE;
            GlobalDimValue := ItemAnalysisViewEntry."Dimension 1 Value Code";
          END;
        ItemAnalysisView."Dimension 2 Code":
          BEGIN
            IsGlobalDim := TRUE;
            GlobalDimValue := ItemAnalysisViewEntry."Dimension 2 Value Code";
          END;
        ItemAnalysisView."Dimension 3 Code":
          BEGIN
            IsGlobalDim := TRUE;
            GlobalDimValue := ItemAnalysisViewEntry."Dimension 3 Value Code";
          END;
      END;
      EXIT(IsGlobalDim);
    END;

    BEGIN
    END.
  }
}

