OBJECT Report 7132 Export Item Budget to Excel
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00,NAVGB9.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Export Item Budget to Excel;
               ENG=Export Item Budget to Excel];
    ProcessingOnly=Yes;
    UseRequestPage=No;
  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnAfterGetRecord=VAR
                                  Window@1000 : Dialog;
                                  RecNo@1001 : Integer;
                                  TotalRecNo@1002 : Integer;
                                  RowNo@1003 : Integer;
                                  ColumnNo@1004 : Integer;
                                BEGIN
                                  IF DoUpdateExistingWorksheet THEN BEGIN
                                    IF ServerFileName = '' THEN
                                      ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
                                    IF ServerFileName = '' THEN
                                      EXIT;
                                    SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
                                    IF SheetName = '' THEN
                                      EXIT;
                                  END;

                                  Window.OPEN(
                                    Text000 +
                                    '@1@@@@@@@@@@@@@@@@@@@@@\');

                                  TempExcelBuffer.DELETEALL;
                                  CLEAR(TempExcelBuffer);

                                  ItemBudgetName.GET(AnalysisArea,BudgetName);
                                  GLSetup.GET;

                                  IF DateFilter = '' THEN
                                    ERROR(STRSUBSTNO(Text010,Text003));

                                  IF FindLine('-') THEN
                                    REPEAT
                                      TotalRecNo := TotalRecNo + 1;
                                    UNTIL NextLine(1) = 0;

                                  RowNo := 1;
                                  EnterCell(RowNo,1,Text001,FALSE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                  EnterCell(RowNo,2,'',FALSE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);

                                  RowNo := RowNo + 1;
                                  EnterFilterInCell(RowNo,BudgetName,ItemBudgetName.TABLECAPTION);

                                  IF GlobalDim1Filter <> '' THEN BEGIN
                                    RowNo := RowNo + 1;
                                    Dim.GET(GLSetup."Global Dimension 1 Code");
                                    EnterFilterInCell(RowNo,GlobalDim1Filter,Dim."Filter Caption");
                                  END;

                                  IF GlobalDim2Filter <> '' THEN BEGIN
                                    RowNo := RowNo + 1;
                                    Dim.GET(GLSetup."Global Dimension 2 Code");
                                    EnterFilterInCell(RowNo,GlobalDim2Filter,Dim."Filter Caption");
                                  END;

                                  IF BudgetDim1Filter <> '' THEN BEGIN
                                    RowNo := RowNo + 1;
                                    Dim.GET(ItemBudgetName."Budget Dimension 1 Code");
                                    EnterFilterInCell(RowNo,BudgetDim1Filter,Dim."Filter Caption");
                                  END;

                                  IF BudgetDim2Filter <> '' THEN BEGIN
                                    RowNo := RowNo + 1;
                                    Dim.GET(ItemBudgetName."Budget Dimension 2 Code");
                                    EnterFilterInCell(RowNo,BudgetDim2Filter,Dim."Filter Caption");
                                  END;

                                  IF BudgetDim3Filter <> '' THEN BEGIN
                                    RowNo := RowNo + 1;
                                    Dim.GET(ItemBudgetName."Budget Dimension 3 Code");
                                    EnterFilterInCell(RowNo,BudgetDim3Filter,Dim."Filter Caption");
                                  END;

                                  IF ItemFilter <> '' THEN BEGIN
                                    RowNo := RowNo + 1;
                                    EnterFilterInCell(RowNo,ItemFilter,Text004);
                                  END;

                                  IF DateFilter <> '' THEN BEGIN
                                    RowNo := RowNo + 1;
                                    EnterFilterInCell(RowNo,DateFilter,Text003);
                                  END;

                                  IF SourceNoFilter <> '' THEN BEGIN
                                    RowNo := RowNo + 1;
                                    IF SourceTypeFilter = SourceTypeFilter::Customer THEN
                                      EnterFilterInCell(RowNo,SourceNoFilter,Text005)
                                    ELSE
                                      EnterFilterInCell(RowNo,SourceNoFilter,Text006);
                                  END;

                                  RowNo := RowNo + 2;
                                  EnterFilterInCell(RowNo,LineDimCode,Text008);

                                  RowNo := RowNo + 1;
                                  EnterFilterInCell(RowNo,ColumnDimCode,Text009);

                                  RowNo := RowNo + 1;
                                  CASE ValueType OF
                                    ValueType::"Sales Amount":
                                      ShowValueAsText := Text012;
                                    ValueType::"Cost Amount":
                                      IF AnalysisArea = AnalysisArea::Sales THEN
                                        ShowValueAsText := Text014
                                      ELSE
                                        ShowValueAsText := Text013;
                                    ValueType::Quantity:
                                      ShowValueAsText := Text015;
                                  END;
                                  EnterFilterInCell(RowNo,ShowValueAsText,Text011);

                                  RowNo := RowNo + 2;
                                  IF FindLine('-') THEN BEGIN
                                    IF FindColumn('-') THEN BEGIN
                                      ColumnNo := 1;
                                      EnterCell(RowNo,ColumnNo,Text007,FALSE,TRUE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      REPEAT
                                        ColumnNo := ColumnNo + 1;
                                        EnterCell(RowNo,ColumnNo,ColumnDimCodeBuffer.Code,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      UNTIL NextColumn(1) = 0;
                                    END;
                                    REPEAT
                                      RecNo := RecNo + 1;
                                      Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                      RowNo := RowNo + 1;
                                      ColumnNo := 1;
                                      EnterCell(
                                        RowNo,ColumnNo,LineDimCodeBuffer.Code,LineDimCodeBuffer."Show in Bold",FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      IF FindColumn('-') THEN
                                        REPEAT
                                          ColumnNo := ColumnNo + 1;
                                          ColumnValue :=
                                            ItemBudgetManagement.CalcAmount(
                                              ValueType,TRUE,
                                              ItemStatisticsBuffer,ItemBudgetName,
                                              ItemFilter,SourceTypeFilter,SourceNoFilter,DateFilter,
                                              GlobalDim1Filter,GlobalDim2Filter,BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter,
                                              LineDimOption,LineDimCodeBuffer,
                                              ColumnDimOption,ColumnDimCodeBuffer);
                                          EnterCell(
                                            RowNo,
                                            ColumnNo,
                                            MatrixMgt.FormatValue(ColumnValue,RoundingFactor,FALSE),
                                            LineDimCodeBuffer."Show in Bold",
                                            FALSE,
                                            FALSE,
                                            '',
                                            TempExcelBuffer."Cell Type"::Number)
                                        UNTIL NextColumn(1) = 0;
                                    UNTIL NextLine(1) = 0;
                                  END;
                                  Window.CLOSE;

                                  IF DoUpdateExistingWorksheet THEN BEGIN
                                    TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
                                    TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
                                    TempExcelBuffer.CloseBook;
                                    IF NOT TestMode THEN
                                      TempExcelBuffer.DownloadAndOpenExcel;
                                  END ELSE BEGIN
                                    TempExcelBuffer.CreateBook(ServerFileName,TempExcelBuffer.GetExcelReference(10));
                                    TempExcelBuffer.WriteSheet(
                                      PADSTR(STRSUBSTNO('%1 %2',ItemBudgetName.Name,ItemBudgetName.Description),30),
                                      COMPANYNAME,USERID);
                                    TempExcelBuffer.CloseBook;
                                    IF NOT TestMode THEN
                                      TempExcelBuffer.OpenExcel;
                                  END;
                                  IF NOT TestMode THEN
                                    TempExcelBuffer.GiveUserControl;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Analyzing Data...\\;ENG=Analysing Data...\\';
      Text001@1001 : TextConst 'ENU=Filters;ENG=Filters';
      Text002@1002 : TextConst 'ENU=Update Workbook;ENG=Update Workbook';
      ItemBudgetName@1018 : Record 7132;
      Dim@1022 : Record 348;
      LineDimCodeBuffer@1015 : Record 367;
      ColumnDimCodeBuffer@1040 : Record 367;
      ItemStatisticsBuffer@1041 : Record 5821;
      TempExcelBuffer@1006 : TEMPORARY Record 370;
      GLSetup@1013 : Record 98;
      ItemBudgetManagement@1007 : Codeunit 7130;
      MatrixMgt@1048 : Codeunit 9200;
      FileMgt@1049 : Codeunit 419;
      LineDimCode@1043 : Text[30];
      ColumnDimCode@1042 : Text[30];
      DateFilter@1036 : Text[30];
      InternalDateFilter@1003 : Text[30];
      ShowValueAsText@1047 : Text[30];
      ServerFileName@1050 : Text;
      SheetName@1010 : Text[250];
      BudgetName@1019 : Code[10];
      GlobalDim1Filter@1027 : Code[250];
      GlobalDim2Filter@1026 : Code[250];
      BudgetDim1Filter@1025 : Code[250];
      BudgetDim2Filter@1024 : Code[250];
      BudgetDim3Filter@1023 : Code[250];
      SourceNoFilter@1031 : Code[250];
      ItemFilter@1030 : Code[250];
      ColumnValue@1009 : Decimal;
      AnalysisArea@1020 : 'Sales,Purchase,Inventory';
      ValueType@1021 : 'Sales Amount,Cost Amount,Quantity';
      Text003@1028 : TextConst 'ENU=Date Filter;ENG=Date Filter';
      Text004@1029 : TextConst 'ENU=Item Filter;ENG=Item Filter';
      Text005@1033 : TextConst 'ENU=Customer Filter;ENG=Customer Filter';
      Text006@1034 : TextConst 'ENU=Vendor Filter;ENG=Vendor Filter';
      SourceTypeFilter@1032 : ' ,Customer,Vendor,Item';
      PeriodType@1037 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      LineDimOption@1039 : 'Item,Customer,Vendor,Period,Location,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3,Budget Dimension 4';
      ColumnDimOption@1038 : 'Item,Customer,Vendor,Period,Location,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3,Budget Dimension 4';
      RoundingFactor@1012 : 'None,1,1000,1000000';
      PeriodInitialized@1035 : Boolean;
      Text007@1004 : TextConst 'ENU=Table Data;ENG=Table Data';
      Text008@1044 : TextConst 'ENU=Show as Lines;ENG=Show as Lines';
      Text009@1045 : TextConst 'ENU=Show as Columns;ENG=Show as Columns';
      Text010@1005 : TextConst 'ENU=%1 must not be blank.;ENG=%1 must not be blank.';
      Text011@1008 : TextConst 'ENU=Show Value as;ENG=Show Value as';
      Text012@1014 : TextConst 'ENU=Sales Amount;ENG=Sales Amount';
      Text013@1016 : TextConst 'ENU=Cost Amount;ENG=Cost Amount';
      Text014@1017 : TextConst 'ENU=COGS Amount;ENG=COGS Amount';
      Text015@1046 : TextConst 'ENU=Quantity;ENG=Quantity';
      DoUpdateExistingWorksheet@1052 : Boolean;
      ExcelFileExtensionTok@1011 : TextConst '@@@={Locked};ENU=.xlsx;ENG=.xlsx';
      TestMode@1051 : Boolean;

    PROCEDURE SetOptions@3(NewAnalysisArea@1008 : Integer;NewBudgName@1007 : Code[10];NewValueType@1006 : Integer;NewGlobalDim1Filter@1005 : Code[250];NewGlobalDim2Filter@1004 : Code[250];NewBudgDim1Filter@1003 : Code[250];NewBudgDim2Filter@1002 : Code[250];NewBudgDim3Filter@1001 : Code[250];NewDateFilter@1000 : Text[30];NewSourceTypeFilter@1011 : Integer;NewSourceNoFilter@1010 : Code[250];NewItemFilter@1009 : Code[250];NewInternalDateFilter@1013 : Text[30];NewPeriodInitialized@1012 : Boolean;NewPeriodType@1014 : Integer;NewLineDimOption@1016 : Integer;NewColumnDimOption@1015 : Integer;NewLineDimCode@1018 : Text[30];NewColumnDimCode@1017 : Text[30];NewRoundingFactor@1019 : 'None,1,1000,1000000');
    BEGIN
      AnalysisArea := NewAnalysisArea;
      BudgetName := NewBudgName;
      ValueType := NewValueType;
      GlobalDim1Filter := NewGlobalDim1Filter;
      GlobalDim2Filter := NewGlobalDim2Filter;
      BudgetDim1Filter := NewBudgDim1Filter;
      BudgetDim2Filter := NewBudgDim2Filter;
      BudgetDim3Filter := NewBudgDim3Filter;
      DateFilter := NewDateFilter;
      ItemFilter := NewItemFilter;
      SourceTypeFilter := NewSourceTypeFilter;
      SourceNoFilter := NewSourceNoFilter;
      InternalDateFilter := NewInternalDateFilter;
      PeriodInitialized := NewPeriodInitialized;
      PeriodType := NewPeriodType;
      LineDimOption := NewLineDimOption;
      ColumnDimOption := NewColumnDimOption;
      LineDimCode := NewLineDimCode;
      ColumnDimCode := NewColumnDimCode;
      RoundingFactor := NewRoundingFactor;
    END;

    LOCAL PROCEDURE EnterFilterInCell@5(RowNo@1000 : Integer;Filter@1001 : Text[250];FieldName@1002 : Text[100]);
    BEGIN
      EnterCell(RowNo,1,FieldName,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,Filter,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := '';
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE FindLine@4(Which@1000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(
        ItemBudgetManagement.FindRec(
          ItemBudgetName,LineDimOption,LineDimCodeBuffer,Which,
          ItemFilter,SourceNoFilter,PeriodType,DateFilter,PeriodInitialized,InternalDateFilter,
          GlobalDim1Filter,GlobalDim2Filter,BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter));
    END;

    LOCAL PROCEDURE NextLine@8(Steps@1000 : Integer) : Integer;
    BEGIN
      EXIT(
        ItemBudgetManagement.NextRec(
          ItemBudgetName,LineDimOption,LineDimCodeBuffer,Steps,
          ItemFilter,SourceNoFilter,PeriodType,DateFilter,
          GlobalDim1Filter,GlobalDim2Filter,BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter));
    END;

    LOCAL PROCEDURE FindColumn@11(Which@1000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(
        ItemBudgetManagement.FindRec(
          ItemBudgetName,ColumnDimOption,ColumnDimCodeBuffer,Which,
          ItemFilter,SourceNoFilter,PeriodType,DateFilter,PeriodInitialized,InternalDateFilter,
          GlobalDim1Filter,GlobalDim2Filter,BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter));
    END;

    LOCAL PROCEDURE NextColumn@12(Steps@1000 : Integer) : Integer;
    BEGIN
      EXIT(
        ItemBudgetManagement.NextRec(
          ItemBudgetName,ColumnDimOption,ColumnDimCodeBuffer,Steps,
          ItemFilter,SourceNoFilter,PeriodType,DateFilter,
          GlobalDim1Filter,GlobalDim2Filter,BudgetDim1Filter,BudgetDim2Filter,BudgetDim3Filter));
    END;

    PROCEDURE SetUpdateExistingWorksheet@7(UpdateExistingWorksheet@1000 : Boolean);
    BEGIN
      DoUpdateExistingWorksheet := UpdateExistingWorksheet;
    END;

    PROCEDURE SetCalendarSource@1040000(VAR CalendarSource@1040001 : ' ,System,AccPeriod';PeriodType@1040000 : 'Day,Week,Month,Quarter,Year');
    BEGIN
      ItemBudgetManagement.SetCalendarSource(CalendarSource,PeriodType);
    END;

    PROCEDURE SetFileNameSilent@6(NewFileName@1000 : Text);
    BEGIN
      ServerFileName := NewFileName;
    END;

    PROCEDURE SetTestMode@1(NewTestMode@1000 : Boolean);
    BEGIN
      TestMode := NewTestMode;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

