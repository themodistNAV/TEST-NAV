OBJECT Codeunit 9062505 SFTP Integration
{
  OBJECT-PROPERTIES
  {
    Date=28/12/16;
    Time=[ 4:01:40 PM];
    Modified=Yes;
    Version List=NA2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SftpClient@1000000000 : DotNet "'TheNavPeople.SftpIntegration.9.0.1.1, Version=9.0.1.1, Culture=neutral, PublicKeyToken=null'.TheNavPeople.SftpIntegration.SftpClient";
      Timeout@1000000001 : Integer;
      BufferSize@1000000002 : Integer;

    LOCAL PROCEDURE "--- Properties ---"@1000000004();
    BEGIN
    END;

    PROCEDURE SetTimeout@1000000006(pTimeout@1000000000 : Integer);
    BEGIN
      //DOC NA2016.16 - Setting timeout
      //  -> pTimeout: The timeout

      Timeout := pTimeout;
    END;

    PROCEDURE GetTimeout@1000000011() : Integer;
    BEGIN
      //DOC NA2016.16 - Returning timeout
      //  <- The timeout

      EXIT(Timeout);
    END;

    PROCEDURE SetBufferSize@1000000018(pBufferSize@1000000000 : Integer);
    BEGIN
      //DOC NA2016.16 - Setting buffer size
      //  -> pBufferSize: The buffer size

      BufferSize := pBufferSize;
    END;

    PROCEDURE GetBufferSize@1000000019() : Integer;
    BEGIN
      //DOC NA2016.16 - Returning buffer size
      //  <- The buffer size

      EXIT(BufferSize);
    END;

    PROCEDURE "--- General Methods ---"@1000000014();
    BEGIN
    END;

    PROCEDURE Connect@1000000000(pServerAddress@1000000000 : Text;pServerPort@1000000001 : Integer;pLogin@1000000002 : Text;pPassword@1000000003 : Text);
    BEGIN
      //DOC NA2015.5 - Connecting to SFTP server
      //  -> pServerAddress: Server address (or IP)
      //  -> pServerPort: Server port number
      //  -> pLogin: Login (user name)
      //  -> pPassword: Password

      IF ( NOT (ISNULL(SftpClient))) THEN
        Disconnect();
      SftpClient := SftpClient.SftpClient();
      SftpClient.Timeout := Timeout;
      SftpClient.BufferSize := BufferSize;
      SftpClient.Connect(pServerAddress, pServerPort, pLogin, pPassword);
    END;

    PROCEDURE Disconnect@1000000001();
    BEGIN
      //DOC NA2015.5 - Disconnecting from SFTP server

      IF (ISNULL(SftpClient)) THEN
        EXIT;
      SftpClient.Disconnect();
      CLEAR(SftpClient);
    END;

    PROCEDURE Connected@1000000020() : Boolean;
    BEGIN
      EXIT(SftpClient.Connected);
    END;

    PROCEDURE "--- File Methods ---"@1000000015();
    BEGIN
    END;

    PROCEDURE UploadFile@1000000002(pLocalFilePath@1000000000 : Text;pRemoteFilePath@1000000001 : Text);
    BEGIN
      //DOC NA2015.5 - Uploading a file to SFTP server
      //  -> pLocalFilePath: Local file path (please, remember, on the middle-tier-server)
      //  -> pRemoteFilePath: Remote file path (on SFTP server)

      CheckConnected();
      SftpClient.UploadFile(pLocalFilePath, pRemoteFilePath);
    END;

    PROCEDURE DownloadFile@1000000003(pRemoteFilePath@1000000000 : Text;pLocalFilePath@1000000001 : Text);
    BEGIN
      //DOC NA2015.5 - Downloading a file from SFTP server
      //  -> pRemoteFilePath: Remote file path (on SFTP server)
      //  -> pLocalFilePath: Local file path (please, remember, on the middle-tier-server)

      CheckConnected();
      SftpClient.DownloadFile(pRemoteFilePath, pLocalFilePath);
    END;

    PROCEDURE DeleteFile@1000000005(pFilePath@1000000000 : Text);
    BEGIN
      //DOC NA2015.5 - Deleting a file
      //  -> pFilePath: File path

      CheckConnected();
      SftpClient.DeleteFile(pFilePath);
    END;

    PROCEDURE MoveFile@1000000010(pOldFilePath@1000000000 : Text;pNewFilePath@1000000001 : Text);
    BEGIN
      //DOC NA2015.5 - Moving a file
      //  -> pOldFilePath: Old file path
      //  -> pNewFilePath: New file path

      CheckConnected();
      SftpClient.MoveFile(pOldFilePath, pNewFilePath);
    END;

    PROCEDURE ListFiles@1000000013(pDirectoryPath@1000000000 : Text;VAR pBuffer@1000000001 : Record 9062730);
    VAR
      lSftpFiles@1000000003 : DotNet "'TheNavPeople.SftpIntegration.9.0.1.1, Version=9.0.1.1, Culture=neutral, PublicKeyToken=null'.TheNavPeople.SftpIntegration.SftpFiles";
      lBufferId@1000000002 : Integer;
    BEGIN
      //DOC NA2015.5 - Listing files
      //  -> pDirectoryPath: Directory path
      //  <> pBuffer: Target buffer

      lSftpFiles := SftpClient.ListFiles(pDirectoryPath);
      WHILE (lSftpFiles.MoveToNextFile()) DO
        AddToBuffer(lSftpFiles.File, pBuffer, lBufferId);
    END;

    PROCEDURE "--- Directory Methods ---"@1000000016();
    BEGIN
    END;

    PROCEDURE CreateDirectory@1000000007(pDirectoryPath@1000000000 : Text);
    BEGIN
      //DOC NA2015.5 - Creating a directory
      //  -> pDirectoryPath: Directory path

      CheckConnected();
      SftpClient.DeleteDirectory(pDirectoryPath);
    END;

    PROCEDURE DeleteDirectory@1000000009(pDirectoryPath@1000000000 : Text);
    BEGIN
      //DOC NA2015.5 - Deleting a directory
      //  -> pDirectoryPath: Directory path

      CheckConnected();
      SftpClient.CreateDirectory(pDirectoryPath);
    END;

    PROCEDURE ListDirectories@1000000012(pDirectoryPath@1000000003 : Text;VAR pBuffer@1000000002 : Record 9062730);
    VAR
      lSftpFiles@1000000001 : DotNet "'TheNavPeople.SftpIntegration.9.0.1.1, Version=9.0.1.1, Culture=neutral, PublicKeyToken=null'.TheNavPeople.SftpIntegration.SftpFiles";
      lBufferId@1000000000 : Integer;
    BEGIN
      //DOC NA2015.5 - Listing directories
      //  -> pDirectoryPath: Directory path
      //  <> pBuffer: Target buffer

      lSftpFiles := SftpClient.ListFiles(pDirectoryPath);
      WHILE (lSftpFiles.MoveToNextFile()) DO
        AddToBuffer(lSftpFiles.File, pBuffer, lBufferId);
    END;

    LOCAL PROCEDURE "--- Internal Methods ---"@1000000017();
    BEGIN
    END;

    LOCAL PROCEDURE CheckConnected@1000000008();
    VAR
      eNotConnected@1000000000 : TextConst 'ENU=Please, connect to SFTP server first before performing any activity.;ENG=Please, connect to SFTP server first before performing any activity.';
    BEGIN
      //DOC NA2015.5 - Checking if we are connected to SFTP server

      IF (ISNULL(SftpClient)) THEN
        ERROR(eNotConnected);
    END;

    LOCAL PROCEDURE AddToBuffer@1000000023(pItem@1000000002 : Text;VAR pBuffer@1000000000 : Record 9062730;VAR pBufferId@1000000001 : Integer);
    BEGIN
      //DOC NA2015.5 - Adding another position to buffer
      //  -> pItem: Item to add
      //  <> pBuffer: Buffer
      //  <> pBufferId: Buffer ID

      pBufferId += 1;

      pBuffer.INIT();
      pBuffer.ID := pBufferId;
      pBuffer.Name := pItem;
      pBuffer.Value := pItem;
      pBuffer.INSERT();
    END;

    LOCAL PROCEDURE "---Project Specific---"@1000000021();
    BEGIN
    END;

    PROCEDURE FileExists@1000000022(pDirectoryPath@1000000000 : Text;pFileName@1000000001 : Text) : Boolean;
    VAR
      lSftpFiles@1000000003 : DotNet "'TheNavPeople.SftpIntegration.9.0.1.1, Version=9.0.1.1, Culture=neutral, PublicKeyToken=null'.TheNavPeople.SftpIntegration.SftpFiles";
      found@1000000002 : Boolean;
    BEGIN
      //DOC OP9031 LF 28/12/2016 -
      //This function checks if a pFileName exists in the directory, pDirectoryPath
      found := FALSE;
      lSftpFiles := SftpClient.ListFiles(pDirectoryPath);
      WHILE (lSftpFiles.MoveToNextFile()) DO
        IF (pFileName = lSftpFiles.File) THEN
          found := TRUE;

      EXIT(found);
      //DOC OP9031 LF 28/12/2016 +
    END;

    BEGIN
    {
      //DOC NA2015.5  JH 13/03/2015 - Created
      //DOC NA2015.8  JH 13/07/2015 - Test function added
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.12 AZ 15/12/2015 - Test function removed
      //DOC NA2016.16 JH 19/05/2016 - CfMD amendments (new .NET library)
      //DOC NA2016.16 JH 02/06/2016 - Bugfixes
      //DOC OP9031 LF 28/12/2016 - Added function FileExists
    }
    END.
  }
}

