OBJECT Table 9062338 Planning Board Table
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Planning Board Code");
               Rec.TESTFIELD("Table Type");
               CheckModifyPermission();
               UpdateForegroundStyleTableId();
               UpdateBackgroundStyleTableId();
               UpdateBorderStyleTableId();
               UpdatePictureTableId();
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               CheckModifyPermission();
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               CheckModifyPermission();

               PlanningBoardTableLink.RESET();
               PlanningBoardTableLink.SETRANGE("Planning Board Code", Rec."Planning Board Code");
               PlanningBoardTableLink.DELETEALL(TRUE);

               PlanningBoardTableField.RESET();
               PlanningBoardTableField.SETRANGE("Planning Board Code", Rec."Planning Board Code");
               PlanningBoardTableField.SETRANGE("Planning Board Table Type", Rec."Table Type");
               PlanningBoardTableField.DELETEALL(TRUE);

               PlanningBoardTableRelation.RESET();
               PlanningBoardTableRelation.SETRANGE("Planning Board Code", Rec."Planning Board Code");
               PlanningBoardTableRelation.SETRANGE("Planning Board Table Type", Rec."Table Type");
               PlanningBoardTableRelation.DELETEALL(TRUE);

               PlanningBoardTableStyle.RESET();
               PlanningBoardTableStyle.SETRANGE("Planning Board Code", Rec."Planning Board Code");
               PlanningBoardTableStyle.SETRANGE("Planning Board Table Type", Rec."Table Type");
               PlanningBoardTableStyle.DELETEALL(TRUE);

               PlanningBoardMenuItem.RESET();
               PlanningBoardMenuItem.SETRANGE("Planning Board Code", Rec."Planning Board Code");
               PlanningBoardMenuItem.SETRANGE("Planning Board Table Type", Rec."Table Type");
               PlanningBoardMenuItem.DELETEALL(TRUE);

               CriteriaManagement.DeleteCriteria(Rec."Table Filter ID");
             END;

    OnRename=BEGIN
               CheckModifyPermission();
             END;

    CaptionML=[ENU=Planning Board Table;
               ENG=Planning Board Table];
  }
  FIELDS
  {
    { 1   ;   ;Planning Board Code ;Code20        ;TableRelation="Planning Board Header";
                                                   CaptionML=[ENU=Planning Board Code;
                                                              ENG=Planning Board Code] }
    { 2   ;   ;Table Type          ;Option        ;CaptionML=[ENU=Table Type;
                                                              ENG=Table Type];
                                                   OptionCaptionML=[ENU=" ,Resource,Entry";
                                                                    ENG=" ,Resource,Entry"];
                                                   OptionString=[ ,Resource,Entry] }
    { 10  ;   ;Table ID            ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Table ID" <> xRec."Table ID") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Table Key Index", 0);
                                                                  IF (Rec."Table Filter ID" <> 0) THEN
                                                                  BEGIN
                                                                    IF (Criteria.GET(Rec."Table Filter ID")) THEN
                                                                      Criteria.DELETE(TRUE);
                                                                    Rec.VALIDATE("Table Filter ID", 0);
                                                                  END;
                                                                  CASE (Rec."Table Type") OF
                                                                    Rec."Table Type"::Resource:
                                                                      Rec.VALIDATE("Date Time Fields", Rec."Date Time Fields"::" ");
                                                                    Rec."Table Type"::Entry:
                                                                      Rec.VALIDATE("Date Time Fields", Rec."Date Time Fields"::"Single Date");
                                                                  END;
                                                                  Rec.VALIDATE("Start Date Field ID", 0);
                                                                  Rec.VALIDATE("Start Time Field ID", 0);
                                                                  Rec.VALIDATE("End Date Field ID", 0);
                                                                  Rec.VALIDATE("End Time Field ID", 0);
                                                                  Rec.VALIDATE("Foreground Style Field ID", 0);
                                                                  Rec.VALIDATE("Background Style Field ID", 0);
                                                                  Rec.VALIDATE("Border Style Field ID", 0);
                                                                  UpdatePlanningBoardTableLinks();
                                                                  UpdatePlanningBoardTableFields();
                                                                  ProposeCaptionFieldId();
                                                                  UpdateForegroundStyleTableId();
                                                                  UpdateBackgroundStyleTableId();
                                                                  UpdateBorderStyleTableId();
                                                                  UpdatePictureTableId();
                                                                END;
                                                                Rec.CALCFIELDS("Table Caption");
                                                              END;

                                                   CaptionML=[ENU=Table ID;
                                                              ENG=Table ID] }
    { 11  ;   ;Table Caption       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Table),
                                                                                                                Object ID=FIELD(Table ID)));
                                                   CaptionML=[ENU=Table Caption;
                                                              ENG=Table Caption];
                                                   Editable=No }
    { 12  ;   ;Table Key Index     ;Integer       ;CaptionML=[ENU=Table Key Index;
                                                              ENG=Table Key Index] }
    { 20  ;   ;Table Filter ID     ;Integer       ;TableRelation=Criteria;
                                                   CaptionML=[ENU=Table Filter ID;
                                                              ENG=Table Filter ID] }
    { 21  ;   ;Table Filter        ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Criteria.Description WHERE (ID=FIELD(Table Filter ID)));
                                                   CaptionML=[ENU=Table Filter;
                                                              ENG=Table Filter];
                                                   Editable=No }
    { 30  ;   ;Caption Formula     ;Text100       ;CaptionML=[ENU=Caption Formula;
                                                              ENG=Caption Formula] }
    { 40  ;   ;Date Time Fields    ;Option        ;OnValidate=VAR
                                                                lResizingEnabled@1000000000 : Boolean;
                                                              BEGIN
                                                                IF (Rec."Date Time Fields" <> xRec."Date Time Fields") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Start Date Field ID", 0);
                                                                  Rec.VALIDATE("Start Time Field ID", 0);
                                                                  Rec.VALIDATE("End Date Field ID", 0);
                                                                  Rec.VALIDATE("End Time Field ID", 0);
                                                                  IF (PlanningBoardHeader.GET(Rec."Planning Board Code")) THEN
                                                                  BEGIN
                                                                    lResizingEnabled := ( NOT (Rec.IsDateTimeSingle()));
                                                                    IF (PlanningBoardHeader."Resizing Enabled" <> lResizingEnabled) THEN
                                                                    BEGIN
                                                                      PlanningBoardHeader."Resizing Enabled" := lResizingEnabled;
                                                                      PlanningBoardHeader.MODIFY(TRUE);
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Date Time Fields;
                                                              ENG=Date Time Fields];
                                                   OptionCaptionML=[ENU=" ,Dates,Dates and Times,DateTimes,DateTimes (Dates Only),Single Date,Single Date and Time,Single DateTime,Single DateTime (Date Only)";
                                                                    ENG=" ,Dates,Dates and Times,DateTimes,DateTimes (Dates Only),Single Date,Single Date and Time,Single DateTime,Single DateTime (Date Only)"];
                                                   OptionString=[ ,Dates,Dates and Times,DateTimes,DateTimes (Dates Only),Single Date,Single Date and Time,Single DateTime,Single DateTime (Date Only)] }
    { 41  ;   ;Start Date Field ID ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table ID));
                                                   OnValidate=VAR
                                                                lFieldType@9062229 : Integer;
                                                              BEGIN
                                                                IF (StartDateFieldIdValidation) THEN
                                                                  EXIT;
                                                                StartDateFieldIdValidation := TRUE;
                                                                IF (Rec."Start Date Field ID" <> xRec."Start Date Field ID") THEN
                                                                BEGIN
                                                                  IF (Rec."Start Date Field ID" <> 0) THEN
                                                                  BEGIN
                                                                    lFieldType := DetectDateFieldType(Rec.FIELDCAPTION("Start Date Field ID"));
                                                                    PlanningBoardDateTimeMgt.ValidateFieldId(Rec."Table ID", lFieldType, Rec."Start Date Field ID");
                                                                  END;
                                                                  CASE (Rec."Date Time Fields") OF
                                                                    Rec."Date Time Fields"::DateTimes:
                                                                      Rec.VALIDATE("Start Time Field ID", Rec."Start Date Field ID");
                                                                    Rec."Date Time Fields"::"Single Date",
                                                                    Rec."Date Time Fields"::"Single Date and Time":
                                                                      Rec.VALIDATE("End Date Field ID", Rec."Start Date Field ID");
                                                                    Rec."Date Time Fields"::"Single DateTime":
                                                                      BEGIN
                                                                        Rec.VALIDATE("Start Time Field ID", Rec."Start Date Field ID");
                                                                        Rec.VALIDATE("End Date Field ID", Rec."Start Date Field ID");
                                                                        Rec.VALIDATE("End Time Field ID", Rec."Start Date Field ID");
                                                                      END;
                                                                  END;
                                                                END;
                                                                Rec.CALCFIELDS("Start Date Field Caption");
                                                                StartDateFieldIdValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Start Date Field ID;
                                                              ENG=Start Date Field ID] }
    { 42  ;   ;Start Date Field Caption;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field."Field Caption" WHERE (TableNo=FIELD(Table ID),
                                                                                                   No.=FIELD(Start Date Field ID)));
                                                   CaptionML=[ENU=Start Date Field Caption;
                                                              ENG=Start Date Field Caption];
                                                   Editable=No }
    { 43  ;   ;Start Time Field ID ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table ID));
                                                   OnValidate=VAR
                                                                lFieldType@9062229 : Integer;
                                                              BEGIN
                                                                IF (StartTimeFieldIdValidation) THEN
                                                                  EXIT;
                                                                StartTimeFieldIdValidation := TRUE;
                                                                IF (Rec."Start Time Field ID" <> xRec."Start Time Field ID") THEN
                                                                BEGIN
                                                                  IF (Rec."Start Time Field ID" <> 0) THEN
                                                                  BEGIN
                                                                    lFieldType := DetectTimeFieldType(Rec.FIELDCAPTION("Start Time Field ID"));
                                                                    PlanningBoardDateTimeMgt.ValidateFieldId(Rec."Table ID", lFieldType, Rec."Start Time Field ID");
                                                                  END;
                                                                  CASE (Rec."Date Time Fields") OF
                                                                    Rec."Date Time Fields"::DateTimes:
                                                                      Rec.VALIDATE("Start Date Field ID", Rec."Start Time Field ID");
                                                                    Rec."Date Time Fields"::"Single Date and Time":
                                                                      Rec.VALIDATE("End Time Field ID", Rec."Start Time Field ID");
                                                                    Rec."Date Time Fields"::"Single DateTime":
                                                                      BEGIN
                                                                        Rec.VALIDATE("Start Date Field ID", Rec."Start Time Field ID");
                                                                        Rec.VALIDATE("End Date Field ID", Rec."Start Time Field ID");
                                                                        Rec.VALIDATE("End Time Field ID", Rec."Start Time Field ID");
                                                                      END;
                                                                  END;
                                                                END;
                                                                Rec.CALCFIELDS("Start Time Field Caption");
                                                                StartTimeFieldIdValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Start Time Field ID;
                                                              ENG=Start Time Field ID] }
    { 44  ;   ;Start Time Field Caption;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field."Field Caption" WHERE (TableNo=FIELD(Table ID),
                                                                                                   No.=FIELD(Start Time Field ID)));
                                                   CaptionML=[ENU=Start Time Field Caption;
                                                              ENG=Start Time Field Caption];
                                                   Editable=No }
    { 45  ;   ;End Date Field ID   ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table ID));
                                                   OnValidate=VAR
                                                                lFieldType@9062229 : Integer;
                                                              BEGIN
                                                                IF (EndDateFieldIdValidation) THEN
                                                                  EXIT;
                                                                EndDateFieldIdValidation := TRUE;
                                                                IF (Rec."End Date Field ID" <> xRec."End Date Field ID") THEN
                                                                BEGIN
                                                                  IF (Rec."End Date Field ID" <> 0) THEN
                                                                  BEGIN
                                                                    lFieldType := DetectDateFieldType(Rec.FIELDCAPTION("End Date Field ID"));
                                                                    PlanningBoardDateTimeMgt.ValidateFieldId(Rec."Table ID", lFieldType, Rec."End Date Field ID");
                                                                  END;
                                                                  CASE (Rec."Date Time Fields") OF
                                                                    Rec."Date Time Fields"::DateTimes:
                                                                      Rec.VALIDATE("End Time Field ID", Rec."End Date Field ID");
                                                                    Rec."Date Time Fields"::"Single Date",
                                                                    Rec."Date Time Fields"::"Single Date and Time":
                                                                      Rec.VALIDATE("Start Date Field ID", Rec."End Date Field ID");
                                                                    Rec."Date Time Fields"::"Single DateTime":
                                                                      BEGIN
                                                                        Rec.VALIDATE("Start Date Field ID", Rec."End Date Field ID");
                                                                        Rec.VALIDATE("Start Time Field ID", Rec."End Date Field ID");
                                                                        Rec.VALIDATE("End Time Field ID", Rec."End Date Field ID");
                                                                      END;
                                                                  END;
                                                                END;
                                                                Rec.CALCFIELDS("End Date Field Caption");
                                                                EndDateFieldIdValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=End Date Field ID;
                                                              ENG=End Date Field ID] }
    { 46  ;   ;End Date Field Caption;Text50      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field."Field Caption" WHERE (TableNo=FIELD(Table ID),
                                                                                                   No.=FIELD(End Date Field ID)));
                                                   CaptionML=[ENU=End Date Field Caption;
                                                              ENG=End Date Field Caption];
                                                   Editable=No }
    { 47  ;   ;End Time Field ID   ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table ID));
                                                   OnValidate=VAR
                                                                lFieldType@9062229 : Integer;
                                                              BEGIN
                                                                IF (EndTimeFieldIdValidation) THEN
                                                                  EXIT;
                                                                EndTimeFieldIdValidation := TRUE;
                                                                IF (Rec."End Time Field ID" <> xRec."End Time Field ID") THEN
                                                                BEGIN
                                                                  IF (Rec."End Time Field ID" <> 0) THEN
                                                                  BEGIN
                                                                    lFieldType := DetectTimeFieldType(Rec.FIELDCAPTION("End Time Field ID"));
                                                                    PlanningBoardDateTimeMgt.ValidateFieldId(Rec."Table ID", lFieldType, Rec."End Time Field ID");
                                                                  END;
                                                                  CASE (Rec."Date Time Fields") OF
                                                                    Rec."Date Time Fields"::DateTimes:
                                                                      Rec.VALIDATE("End Date Field ID", Rec."End Time Field ID");
                                                                    Rec."Date Time Fields"::"Single Date and Time":
                                                                      Rec.VALIDATE("Start Time Field ID", Rec."End Time Field ID");
                                                                    Rec."Date Time Fields"::"Single DateTime":
                                                                      BEGIN
                                                                        Rec.VALIDATE("End Date Field ID", Rec."End Time Field ID");
                                                                        Rec.VALIDATE("Start Date Field ID", Rec."End Time Field ID");
                                                                        Rec.VALIDATE("Start Time Field ID", Rec."End Time Field ID");
                                                                      END;
                                                                  END;
                                                                END;
                                                                Rec.CALCFIELDS("End Time Field Caption");
                                                                EndTimeFieldIdValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=End Time Field ID;
                                                              ENG=End Time Field ID] }
    { 48  ;   ;End Time Field Caption;Text50      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field."Field Caption" WHERE (TableNo=FIELD(Table ID),
                                                                                                   No.=FIELD(End Time Field ID)));
                                                   CaptionML=[ENU=End Time Field Caption;
                                                              ENG=End Time Field Caption];
                                                   Editable=No }
    { 50  ;   ;Foreground Style Relation ID;Integer;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Foreground Style Relation ID" <> xRec."Foreground Style Relation ID") THEN
                                                                  UpdateForegroundStyleTableId();
                                                              END;

                                                   CaptionML=[ENU=Foreground Style Relation ID;
                                                              ENG=Foreground Style Relation ID] }
    { 51  ;   ;Foreground Style Table ID;Integer  ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Foreground Style Table ID" <> xRec."Foreground Style Table ID") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Foreground Style Field Type", Rec."Foreground Style Field Type"::Field);
                                                                  Rec.VALIDATE("Foreground Style Field ID", 0);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Foreground Style Table ID;
                                                              ENG=Foreground Style Table ID] }
    { 52  ;   ;Foreground Style Table Caption;Text30;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Table),
                                                                                                                Object ID=FIELD(Foreground Style Table ID)));
                                                   CaptionML=[ENU=Foreground Style Table Caption;
                                                              ENG=Foreground Style Table Caption];
                                                   Editable=No }
    { 53  ;   ;Foreground Style Field Type;Option ;OnValidate=BEGIN
                                                                IF (Rec."Foreground Style Field Type" <> xRec."Foreground Style Field Type") THEN
                                                                  Rec.VALIDATE("Foreground Style Field ID", 0);
                                                              END;

                                                   CaptionML=[ENU=Foreground Style Field Type;
                                                              ENG=Foreground Style Field Type];
                                                   OptionCaptionML=[ENU=" ,Field,Enhanced Field";
                                                                    ENG=" ,Field,Enhanced Field"];
                                                   OptionString=[ ,Field,Enhanced Field] }
    { 54  ;   ;Foreground Style Field ID;Integer  ;OnValidate=BEGIN
                                                                ObjectFieldToolkit.ValidateFieldIdAdv(Rec."Foreground Style Table ID", Rec."Foreground Style Field Type", Rec."Foreground Style Field ID");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (ObjectFieldToolkit.FieldLookupAdv(Rec."Foreground Style Table ID", Rec."Foreground Style Field Type", Rec."Foreground Style Field ID")) THEN
                                                                Rec.VALIDATE("Foreground Style Field ID");
                                                            END;

                                                   CaptionML=[ENU=Foreground Style Field ID;
                                                              ENG=Foreground Style Field ID] }
    { 60  ;   ;Background Style Relation ID;Integer;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Background Style Relation ID" <> xRec."Background Style Relation ID") THEN
                                                                  UpdateBackgroundStyleTableId();
                                                              END;

                                                   CaptionML=[ENU=Background Style Relation ID;
                                                              ENG=Background Style Relation ID] }
    { 61  ;   ;Background Style Table ID;Integer  ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Background Style Table ID" <> xRec."Background Style Table ID") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Background Style Field Type", Rec."Background Style Field Type"::Field);
                                                                  Rec.VALIDATE("Background Style Field ID", 0);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Background Style Table ID;
                                                              ENG=Background Style Table ID] }
    { 62  ;   ;Background Style Table Caption;Text30;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Table),
                                                                                                                Object ID=FIELD(Background Style Table ID)));
                                                   CaptionML=[ENU=Background Style Table Caption;
                                                              ENG=Background Style Table Caption];
                                                   Editable=No }
    { 63  ;   ;Background Style Field Type;Option ;OnValidate=BEGIN
                                                                IF (Rec."Background Style Field Type" <> xRec."Background Style Field Type") THEN
                                                                  Rec.VALIDATE("Background Style Field ID", 0);
                                                              END;

                                                   CaptionML=[ENU=Background Style Field Type;
                                                              ENG=Background Style Field Type];
                                                   OptionCaptionML=[ENU=" ,Field,Enhanced Field";
                                                                    ENG=" ,Field,Enhanced Field"];
                                                   OptionString=[ ,Field,Enhanced Field] }
    { 64  ;   ;Background Style Field ID;Integer  ;OnValidate=BEGIN
                                                                ObjectFieldToolkit.ValidateFieldIdAdv(Rec."Background Style Table ID", Rec."Background Style Field Type", Rec."Background Style Field ID");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (ObjectFieldToolkit.FieldLookupAdv(Rec."Background Style Table ID", Rec."Background Style Field Type", Rec."Background Style Field ID")) THEN
                                                                Rec.VALIDATE("Background Style Field ID");
                                                            END;

                                                   CaptionML=[ENU=Background Style Field ID;
                                                              ENG=Background Style Field ID] }
    { 70  ;   ;Border Style Relation ID;Integer   ;OnValidate=BEGIN
                                                                IF (Rec."Border Style Relation ID" <> xRec."Border Style Relation ID") THEN
                                                                  UpdateBorderStyleTableId();
                                                              END;

                                                   CaptionML=[ENU=Border Style Relation ID;
                                                              ENG=Border Style Relation ID] }
    { 71  ;   ;Border Style Table ID;Integer      ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Border Style Table ID" <> xRec."Border Style Table ID") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Border Style Field Type", Rec."Border Style Field Type"::Field);
                                                                  Rec.VALIDATE("Border Style Field ID", 0);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Border Style Table ID;
                                                              ENG=Border Style Table ID] }
    { 72  ;   ;Border Style Table Caption;Text30  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Table),
                                                                                                                Object ID=FIELD(Border Style Table ID)));
                                                   CaptionML=[ENU=Border Style Table Caption;
                                                              ENG=Border Style Table Caption];
                                                   Editable=No }
    { 73  ;   ;Border Style Field Type;Option     ;OnValidate=BEGIN
                                                                IF (Rec."Border Style Field Type" <> xRec."Border Style Field Type") THEN
                                                                  Rec.VALIDATE("Border Style Field ID", 0);
                                                              END;

                                                   CaptionML=[ENU=Border Style Field Type;
                                                              ENG=Border Style Field Type];
                                                   OptionCaptionML=[ENU=" ,Field,Enhanced Field";
                                                                    ENG=" ,Field,Enhanced Field"];
                                                   OptionString=[ ,Field,Enhanced Field] }
    { 74  ;   ;Border Style Field ID;Integer      ;OnValidate=BEGIN
                                                                ObjectFieldToolkit.ValidateFieldIdAdv(Rec."Border Style Table ID", Rec."Border Style Field Type", Rec."Border Style Field ID");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (ObjectFieldToolkit.FieldLookupAdv(Rec."Border Style Table ID", Rec."Border Style Field Type", Rec."Border Style Field ID")) THEN
                                                                Rec.VALIDATE("Border Style Field ID");
                                                            END;

                                                   CaptionML=[ENU=Border Style Field ID;
                                                              ENG=Border Style Field ID] }
    { 80  ;   ;No. of Menu Items   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Planning Board Menu Item" WHERE (Planning Board Code=FIELD(Planning Board Code),
                                                                                                       Planning Board Table Type=FIELD(Table Type)));
                                                   CaptionML=[ENU=No. of Menu Items;
                                                              ENG=No. of Menu Items];
                                                   Editable=No }
    { 90  ;   ;Foreground Colour Code;Code20      ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Foreground Colour Code;
                                                              ENG=Foreground Colour Code] }
    { 91  ;   ;Foreground Font Size;Option        ;InitValue=Medium;
                                                   CaptionML=[ENU=Foreground Font Size;
                                                              ENG=Foreground Font Size];
                                                   OptionCaptionML=[ENU=" ,Very Small,Small,Medium,Large,Very Large";
                                                                    ENG=" ,Very Small,Small,Medium,Large,Very Large"];
                                                   OptionString=[ ,Very Small,Small,Medium,Large,Very Large] }
    { 92  ;   ;Foreground Font Style;Option       ;CaptionML=[ENU=Foreground Font Style;
                                                              ENG=Foreground Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline] }
    { 100 ;   ;Background Colour Code;Code20      ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Background Colour Code;
                                                              ENG=Background Colour Code] }
    { 110 ;   ;Border Colour Code  ;Code20        ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Border Colour Code;
                                                              ENG=Border Colour Code] }
    { 111 ;   ;Border Line Width   ;Option        ;InitValue=Medium;
                                                   CaptionML=[ENU=Border Line Width;
                                                              ENG=Border Line Width];
                                                   OptionCaptionML=[ENU=" ,Very Thin,Thin,Medium,Thick,Very Thick";
                                                                    ENG=" ,Very Thin,Thin,Medium,Thick,Very Thick"];
                                                   OptionString=[ ,Very Thin,Thin,Medium,Thick,Very Thick] }
    { 112 ;   ;Border Line Style   ;Option        ;InitValue=Solid;
                                                   CaptionML=[ENU=Border Line Style;
                                                              ENG=Border Line Style];
                                                   OptionCaptionML=[ENU=" ,None,Solid,Dashed,Dotted";
                                                                    ENG=" ,None,Solid,Dashed,Dotted"];
                                                   OptionString=[ ,None,Solid,Dashed,Dotted] }
    { 120 ;   ;Planning Board Status;Option       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Planning Board Header".Status WHERE (Code=FIELD(Planning Board Code)));
                                                   CaptionML=[ENU=Planning Board Status;
                                                              ENG=Planning Board Status];
                                                   OptionCaptionML=[ENU=" ,Open,Released";
                                                                    ENG=" ,Open,Released"];
                                                   OptionString=[ ,Open,Released];
                                                   Editable=No }
    { 130 ;   ;Picture Relation ID ;Integer       ;OnValidate=BEGIN
                                                                IF (Rec."Picture Relation ID" <> xRec."Picture Relation ID") THEN
                                                                  UpdatePictureTableId();
                                                              END;

                                                   CaptionML=[ENU=Picture Relation ID;
                                                              ENG=Picture Relation ID] }
    { 131 ;   ;Picture Table ID    ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Picture Table ID" <> xRec."Picture Table ID") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Picture Field Type", Rec."Picture Field Type"::Field);
                                                                  Rec.VALIDATE("Picture Field ID", 0);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Picture Table ID;
                                                              ENG=Picture Table ID] }
    { 132 ;   ;Picture Table Caption;Text30       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Table),
                                                                                                                Object ID=FIELD(Picture Table ID)));
                                                   CaptionML=[ENU=Picture Table Caption;
                                                              ENG=Picture Table Caption];
                                                   Editable=No }
    { 133 ;   ;Picture Field Type  ;Option        ;OnValidate=BEGIN
                                                                IF (Rec."Picture Field Type" <> xRec."Picture Field Type") THEN
                                                                  Rec.VALIDATE("Picture Field ID", 0);
                                                              END;

                                                   CaptionML=[ENU=Picture Field Type;
                                                              ENG=Picture Field Type];
                                                   OptionCaptionML=[ENU=" ,Field,Enhanced Field";
                                                                    ENG=" ,Field,Enhanced Field"];
                                                   OptionString=[ ,Field,Enhanced Field] }
    { 134 ;   ;Picture Field ID    ;Integer       ;OnValidate=BEGIN
                                                                ObjectFieldToolkit.ValidateFieldIdAdv(Rec."Picture Table ID", Rec."Picture Field Type", Rec."Picture Field ID");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (ObjectFieldToolkit.FieldLookupAdv(Rec."Picture Table ID", Rec."Picture Field Type", Rec."Picture Field ID")) THEN
                                                                Rec.VALIDATE("Picture Field ID");
                                                            END;

                                                   CaptionML=[ENU=Picture Field ID;
                                                              ENG=Picture Field ID] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Planning Board Code,Table Type          ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Criteria@9062230 : Record 9062626;
      PlanningBoardHeader@1000000004 : Record 9062337;
      PlanningBoardMenuItem@1000000001 : Record 9062343;
      PlanningBoardSetup@1000000003 : Record 9062335;
      PlanningBoardTableLink@9062231 : Record 9062339;
      PlanningBoardTableField@9062232 : Record 9062340;
      PlanningBoardTableRelation@9062242 : Record 9062341;
      PlanningBoardTableStyle@1000000000 : Record 9062342;
      CriteriaManagement@9062240 : Codeunit 9062462;
      KeyRefToolkit@9062241 : Codeunit 9062303;
      ObjectFieldToolkit@9062233 : Codeunit 9062343;
      PlanningBoardDateTimeMgt@9062234 : Codeunit 9062302;
      PlanningBoardRelationMgt@1000000006 : Codeunit 9062318;
      PlanningBoardToolkit@1000000002 : Codeunit 9062301;
      TnpToolkit@9062229 : Codeunit 9062230;
      tCantDetermineType@9062235 : TextConst 'ENU=Can''t determine type for "%1". Please set the "%2" first.;ENG=Can''t determine type for "%1". Please set the "%2" first.';
      StartDateFieldIdValidation@9062239 : Boolean;
      StartTimeFieldIdValidation@9062238 : Boolean;
      EndDateFieldIdValidation@9062237 : Boolean;
      EndTimeFieldIdValidation@9062236 : Boolean;
      tHasntBeenDefined@1000000005 : TextConst 'ENU=(Hasn''t Been Defined);ENG=(Hasn''t Been Defined)';
      tClickHereToDefine@1000000007 : TextConst 'ENU=(Click Here to Define);ENG=(Click Here to Define)';
      SystemActivity@1000000008 : Boolean;

    PROCEDURE "--- General ---"@9062229();
    BEGIN
    END;

    PROCEDURE SetSystemActivity@1000000038(pSystemActivity@1000000000 : Boolean);
    BEGIN
      //DOC NA2016.12 - Setting "System Activity" flag (certain UI-like activities are not fired)
      //  -> pSystemActivity: The flag

      SystemActivity := pSystemActivity;
    END;

    PROCEDURE InitialiseNewRecord@1000000008();
    BEGIN
      //DOC NA2016.12 - Initialising new record

      PlanningBoardSetup.VerifyAndGet();

      CASE (Rec."Table Type") OF
        Rec."Table Type"::Resource:
          BEGIN
            Rec.VALIDATE("Foreground Colour Code", PlanningBoardSetup."Res. Foreground Colour Code");
            Rec.VALIDATE("Foreground Font Size", PlanningBoardSetup."Res. Foreground Font Size");
            Rec.VALIDATE("Foreground Font Style", PlanningBoardSetup."Res. Foreground Font Style");
          END;
        Rec."Table Type"::Entry:
          BEGIN
            Rec.VALIDATE("Date Time Fields", Rec."Date Time Fields"::"Single Date");
            Rec.VALIDATE("Foreground Colour Code", PlanningBoardSetup."Entry Foreground Colour Code");
            Rec.VALIDATE("Foreground Font Size", PlanningBoardSetup."Entry Foreground Font Size");
            Rec.VALIDATE("Foreground Font Style", PlanningBoardSetup."Entry Foreground Font Style");
            Rec.VALIDATE("Background Colour Code", PlanningBoardSetup."Entry Background Colour Code");
            Rec.VALIDATE("Border Colour Code", PlanningBoardSetup."Entry Border Colour Code");
            Rec.VALIDATE("Border Line Style", PlanningBoardSetup."Entry Border Line Style");
            Rec.VALIDATE("Border Line Width", PlanningBoardSetup."Entry Border Line Width");
          END;
      END;
    END;

    PROCEDURE GetDescription@9062231() : Text;
    VAR
      eEmptyDescription@9062229 : TextConst 'ENU=(Click here to define table);ENG=(Click here to define table)';
    BEGIN
      //DOC NA2016.12 - Returning table description
      //  <- The description

      Rec.CALCFIELDS("Table Caption", "Table Filter");

      IF ((Rec."Table ID" <> 0) AND (Rec."Table Filter ID" <> 0)) THEN
        EXIT(STRSUBSTNO('%1: %2', Rec."Table Caption", Rec."Table Filter"))
      ELSE IF (Rec."Table ID" <> 0) THEN
        EXIT(Rec."Table Caption")
      ELSE
        EXIT(eEmptyDescription);
    END;

    LOCAL PROCEDURE UpdatePlanningBoardTableLinks@9062230();
    VAR
      lResourceTableId@1000000000 : Integer;
      lEntryTableId@1000000001 : Integer;
      lOppositeTableType@1000000002 : Integer;
      lOppositePlanningBoardTable@1000000003 : Record 9062338;
      lTableRelationsMetadata@1000000004 : Record 2000000141;
    BEGIN
      //DOC NA2016.12 - Updating planning board table links

      PlanningBoardTableLink.RESET();
      PlanningBoardTableLink.SETRANGE("Planning Board Code", Rec."Planning Board Code");
      PlanningBoardTableLink.DELETEALL(TRUE);

      IF (Rec."Table ID" <> 0) THEN
      BEGIN
        CASE (Rec."Table Type") OF
          Rec."Table Type"::Resource:
            BEGIN
              lResourceTableId := Rec."Table ID";
              lOppositeTableType := Rec."Table Type"::Entry;
            END;
          Rec."Table Type"::Entry:
            BEGIN
              lEntryTableId := Rec."Table ID";
              lOppositeTableType := Rec."Table Type"::Resource;
            END;
        END;

        lOppositePlanningBoardTable.GET(Rec."Planning Board Code", lOppositeTableType);
        CASE (lOppositePlanningBoardTable."Table Type") OF
          lOppositePlanningBoardTable."Table Type"::Resource:
            lResourceTableId := lOppositePlanningBoardTable."Table ID";
          lOppositePlanningBoardTable."Table Type"::Entry:
            lEntryTableId := lOppositePlanningBoardTable."Table ID";
        END;

        IF ((lResourceTableId <> 0) AND (lEntryTableId <> 0)) THEN
        BEGIN
          lTableRelationsMetadata.RESET();
          lTableRelationsMetadata.SETRANGE("Table ID", lEntryTableId);
          lTableRelationsMetadata.SETRANGE("Related Table ID", lResourceTableId);
          IF (lTableRelationsMetadata.FINDFIRST()) THEN
          BEGIN
            CLEAR(PlanningBoardTableLink);
            PlanningBoardTableLink.INIT();
            PlanningBoardTableLink.VALIDATE("Planning Board Code", Rec."Planning Board Code");
            PlanningBoardTableLink.InitialiseNewRecord();
            PlanningBoardTableLink.INSERT(TRUE);
            PlanningBoardTableLink.VALIDATE("Resource Table ID", lResourceTableId);
            PlanningBoardTableLink.VALIDATE("Resource Table Field ID", lTableRelationsMetadata."Related Field No.");
            PlanningBoardTableLink.VALIDATE("Entry Table ID", lEntryTableId);
            PlanningBoardTableLink.VALIDATE("Entry Table Field ID", lTableRelationsMetadata."Field No.");
            PlanningBoardTableLink.MODIFY(TRUE);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdatePlanningBoardTableFields@9062235();
    BEGIN
      //DOC NA2016.12 - Updating planning board table fields

      PlanningBoardTableField.RESET();
      PlanningBoardTableField.SETRANGE("Planning Board Code", Rec."Planning Board Code");
      PlanningBoardTableField.SETRANGE("Planning Board Table Type", Rec."Table Type");
      IF (PlanningBoardTableField.FINDSET(TRUE)) THEN
      REPEAT
        PlanningBoardTableField.VALIDATE("Table ID", Rec."Table ID");
        PlanningBoardTableField.MODIFY(TRUE);
      UNTIL (PlanningBoardTableField.NEXT() = 0);
    END;

    LOCAL PROCEDURE UpdatePlanningBoardTableRelations@9062254();
    BEGIN
      //DOC NA2016.12 - Updating planning board table relations

      PlanningBoardTableRelation.RESET();
      PlanningBoardTableRelation.SETRANGE("Planning Board Code", Rec."Planning Board Code");
      PlanningBoardTableRelation.SETRANGE("Planning Board Table Type", Rec."Table Type");
      IF (PlanningBoardTableRelation.FINDSET(TRUE)) THEN
      REPEAT
        PlanningBoardTableRelation.VALIDATE("Table ID", Rec."Table ID");
        PlanningBoardTableRelation.MODIFY(TRUE);
      UNTIL (PlanningBoardTableRelation.NEXT() = 0);
    END;

    LOCAL PROCEDURE CheckModifyPermission@1000000039();
    VAR
      lEnhancedPermissionsMgt@1000000000 : Codeunit 9062277;
    BEGIN
      //DOC NA2016.15 - Checking modify permission for the planning board

      IF ( NOT (PlanningBoardHeader.GET(Rec."Planning Board Code"))) THEN
        EXIT;
      lEnhancedPermissionsMgt.CheckPlanningBoardModifyPermission(PlanningBoardHeader, USERID());
    END;

    PROCEDURE "--- Tables ---"@9062248();
    BEGIN
    END;

    PROCEDURE ValidateTableText@1000000003(VAR pTableText@1000000000 : Text) : Boolean;
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2016.12 - Validating table text
      //  -> pTableText: The text
      //  <- TRUE = Table ID changed, refresh; FALSE = Don't bother

      lResult := FALSE;

      xRec."Table ID" := Rec."Table ID";
      ObjectFieldToolkit.ValidateTableName(Rec."Table ID", pTableText, FALSE);
      IF (Rec."Table ID" <> xRec."Table ID") THEN
      BEGIN
        Rec.VALIDATE("Table ID");
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE TableLookup@1000000004(pEditable@1000000001 : Boolean) : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.12 - Performing table lookup
      //  -> pEditable: Editable flag
      //  <- TRUE = Table ID changed, refresh; FALSE = Don't bother

      lResult := FALSE;

      IF ( NOT (pEditable)) THEN
        EXIT(lResult);

      xRec."Table ID" := Rec."Table ID";

      IF (ObjectFieldToolkit.TableLookup(Rec."Table ID")) THEN
        IF (Rec."Table ID" <> xRec."Table ID") THEN
        BEGIN
          Rec.VALIDATE("Table ID");
          lResult := TRUE;
        END;

      EXIT(lResult);
    END;

    PROCEDURE EditCriteria@9062252(pEditable@1000000000 : Boolean);
    VAR
      eTableEmpty@9062229 : TextConst 'ENU=You must choose table first.;ENG=You must choose table first.';
    BEGIN
      //DOC NA2016.12 - Editing table criteria
      //  -> pEditable: Editable flag

      IF ( NOT (pEditable)) THEN
        EXIT;

      IF (Rec."Table ID" = 0) THEN
        ERROR(eTableEmpty);

      CriteriaManagement.EditCriteriaAttached(Rec."Table Filter ID", Rec."Table ID", DATABASE::"Planning Board Table", Rec.GETPOSITION(FALSE),
        Rec.FIELDNO("Table Filter ID"), FALSE);
      Rec.CALCFIELDS("Table Filter");
    END;

    PROCEDURE CalculateTableKeyText@9062253(pEditable@1000000001 : Boolean) : Text;
    VAR
      lText@1000000000 : Text;
      eName@1000000002 : TextConst 'ENU=Table Key;ENG=Table Key';
    BEGIN
      //DOC NA2016.12 - Calculating table key text
      //  -> pEditable: Editable flag
      //  <- The text

      lText := KeyRefToolkit.CalculateKeyText(Rec."Table ID", Rec."Table Key Index");
      IF (lText = '') THEN
        lText := EditableNotEditableText(pEditable);
      EXIT(lText);
    END;

    PROCEDURE CalculateTableFilterText@1000000014(pEditable@1000000000 : Boolean) : Text;
    VAR
      lText@1000000001 : Text;
    BEGIN
      //DOC NA2016.12 - Calculating table filter text
      //  -> pEditable: Editable flag
      //  <- The text

      Rec.CALCFIELDS("Table Filter");
      lText := Rec."Table Filter";
      IF (lText = '') THEN
        lText := EditableNotEditableText(pEditable);
      EXIT(lText);
    END;

    PROCEDURE TableKeyLookup@9062255(pEditable@1000000000 : Boolean) : Boolean;
    VAR
      lResult@9062229 : Boolean;
    BEGIN
      //DOC NA2016.12 - Performing table key lookup
      //  -> pEditable: Editable flag
      //  <- Lookup result

      IF ( NOT (pEditable)) THEN
        EXIT(FALSE);

      xRec."Table Key Index" := Rec."Table Key Index";
      lResult := KeyRefToolkit.KeyLookup(Rec."Table ID", Rec."Table Key Index");
      IF ((pEditable) AND (lResult)) THEN
        Rec.VALIDATE("Table Key Index");

      EXIT(lResult);
    END;

    PROCEDURE "--- Captions ---"@9062245();
    BEGIN
    END;

    PROCEDURE CalculateCaptionText@9062250() : Text;
    VAR
      lCaptionText@9062233 : Text;
      lFieldCaptions@9062229 : ARRAY [16] OF Text;
    BEGIN
      //DOC NA2016.12 - Calculating caption text
      //  <- The text

      lCaptionText := '';

      PlanningBoardTableField.RESET();
      PlanningBoardTableField.SETRANGE("Planning Board Code", Rec."Planning Board Code");
      PlanningBoardTableField.SETRANGE("Planning Board Table Type", Rec."Table Type");
      PlanningBoardTableField.SETRANGE("Field Application", PlanningBoardTableField."Field Application"::Caption);

      IF ( NOT (DetectCaptionFormula())) THEN
      BEGIN
        IF (PlanningBoardTableField.FINDFIRST()) THEN
          lCaptionText := PlanningBoardTableField.GetFieldCaption();
      END
      ELSE
      BEGIN
        IF (PlanningBoardTableField.FINDSET()) THEN
        REPEAT
          IF (PlanningBoardTableField.Index > 0) THEN
            lFieldCaptions[PlanningBoardTableField.Index] := '[' + PlanningBoardTableField.GetFieldCaption() + ']';
        UNTIL (PlanningBoardTableField.NEXT() = 0);
        lCaptionText := STRSUBSTNO(Rec."Caption Formula", lFieldCaptions[1], lFieldCaptions[2], lFieldCaptions[3],
          lFieldCaptions[4], lFieldCaptions[5], lFieldCaptions[6], lFieldCaptions[7], lFieldCaptions[8],
          lFieldCaptions[9], lFieldCaptions[10], lFieldCaptions[11], lFieldCaptions[12], lFieldCaptions[13],
          lFieldCaptions[14], lFieldCaptions[15], lFieldCaptions[16]);
      END;

      EXIT(lCaptionText);
    END;

    LOCAL PROCEDURE DetectCaptionFormula@9062251() : Boolean;
    VAR
      lCaptionFormulaDetected@9062229 : Boolean;
    BEGIN
      //DOC NA2016.12 - Trying to detect whether caption is defined by formula and returning answer
      //  <- The answer

      lCaptionFormulaDetected := (Rec."Caption Formula" <> '');

      IF ( NOT (lCaptionFormulaDetected)) THEN
      BEGIN
        PlanningBoardTableField.RESET();
        PlanningBoardTableField.SETRANGE("Planning Board Code", Rec."Planning Board Code");
        PlanningBoardTableField.SETRANGE("Planning Board Table Type", Rec."Table Type");
        PlanningBoardTableField.SETRANGE("Field Application", PlanningBoardTableField."Field Application"::Caption);
        lCaptionFormulaDetected := (PlanningBoardTableField.COUNT() > 1);
      END;

      EXIT(lCaptionFormulaDetected);
    END;

    PROCEDURE ValidateCaptionText@9062260(VAR pText@9062229 : Text);
    VAR
      lFieldId@9062233 : Integer;
    BEGIN
      //DOC NA2016.12 - Validating entry caption text
      //  <> pText: The text

      IF (DetectCaptionFormula()) THEN
        CaptionLookup(TRUE, TRUE)
      ELSE
      BEGIN
        ObjectFieldToolkit.ValidateFieldName(Rec."Table ID", lFieldId, pText, FALSE);
        SetCaptionFieldId(lFieldId);
      END;
    END;

    PROCEDURE CaptionLookup@9062267(pForceFormula@9062234 : Boolean;pEditable@1000000000 : Boolean) : Boolean;
    VAR
      lPlanningBoardCaptionCard@1000000001 : Page 9062403;
      lFieldId@9062231 : Integer;
      lNewFieldId@9062232 : Integer;
      lResult@9062230 : Boolean;
      lFormulaLookup@9062235 : Boolean;
    BEGIN
      //DOC NA2016.12 - Lookup for caption of given table type
      //  -> pForceFormula: Flag to force formula editing
      //  -> pEditable: Editable flag
      //  <- Lookup result

      lFormulaLookup := pForceFormula;
      IF ( NOT (lFormulaLookup)) THEN
        lFormulaLookup := DetectCaptionFormula();

      IF (lFormulaLookup) THEN
      BEGIN
        PlanningBoardTableField.RESET();
        PlanningBoardTableField.SETRANGE("Planning Board Code", Rec."Planning Board Code");
        PlanningBoardTableField.SETRANGE("Planning Board Table Type", Rec."Table Type");
        PlanningBoardTableField.SETRANGE("Field Application", PlanningBoardTableField."Field Application"::Caption);
        lPlanningBoardCaptionCard.SETTABLEVIEW(PlanningBoardTableField);
        lPlanningBoardCaptionCard.EDITABLE(pEditable);
        lPlanningBoardCaptionCard.RUNMODAL();
        lResult := TRUE;
      END
      ELSE
        IF (pEditable) THEN
        BEGIN
          lFieldId := GetCaptionFieldId();
          lNewFieldId := lFieldId;
          lResult := ObjectFieldToolkit.FieldLookup(Rec."Table ID", lNewFieldId);
          IF ((lResult) AND (lNewFieldId <> lFieldId)) THEN
            SetCaptionFieldId(lNewFieldId);
        END;

      EXIT(lResult);
    END;

    PROCEDURE GetCaptionFieldId@9062285() : Integer;
    VAR
      lFieldId@9062230 : Integer;
    BEGIN
      //DOC NA2016.12 - Trying to find and returning caption field ID
      //  <- The field ID

      lFieldId := 0;

      PlanningBoardTableField.RESET();
      PlanningBoardTableField.SETRANGE("Planning Board Code", Rec."Planning Board Code");
      PlanningBoardTableField.SETRANGE("Planning Board Table Type", Rec."Table Type");
      PlanningBoardTableField.SETRANGE("Field Application", PlanningBoardTableField."Field Application"::Caption);
      IF (PlanningBoardTableField.FINDFIRST()) THEN
        lFieldId := PlanningBoardTableField."Field ID";

      EXIT(lFieldId);
    END;

    PROCEDURE SetCaptionFieldId@9062276(pFieldId@9062230 : Integer);
    VAR
      lPlanningBoardTableFieldFound@9062231 : Boolean;
    BEGIN
      //DOC NA2016.12 - Setting captionf field ID
      //  -> pFieldId: Field ID

      PlanningBoardTableField.RESET();
      PlanningBoardTableField.SETRANGE("Planning Board Code", Rec."Planning Board Code");
      PlanningBoardTableField.SETRANGE("Planning Board Table Type", Rec."Table Type");
      PlanningBoardTableField.SETRANGE("Field Application", PlanningBoardTableField."Field Application"::Caption);
      lPlanningBoardTableFieldFound := PlanningBoardTableField.FINDFIRST();

      IF (pFieldId <> 0) THEN
      BEGIN
        IF ( NOT (lPlanningBoardTableFieldFound)) THEN
        BEGIN
          CLEAR(PlanningBoardTableField);
          PlanningBoardTableField.VALIDATE("Planning Board Code", Rec."Planning Board Code");
          PlanningBoardTableField.VALIDATE("Planning Board Table Type", Rec."Table Type");
          PlanningBoardTableField.VALIDATE("Field Application", PlanningBoardTableField."Field Application"::Caption);
          PlanningBoardTableField.INSERT(TRUE);
        END;
        IF (PlanningBoardTableField."Field ID" <> pFieldId) THEN
        BEGIN
          IF (PlanningBoardTableField."Table ID" <> Rec."Table ID") THEN
            PlanningBoardTableField.VALIDATE("Table ID", Rec."Table ID");
          PlanningBoardTableField.VALIDATE("Field ID", pFieldId);
          PlanningBoardTableField.MODIFY(TRUE);
        END;
      END
      ELSE
        IF (lPlanningBoardTableFieldFound) THEN
          PlanningBoardTableField.DELETE(TRUE);
    END;

    PROCEDURE ProposeCaptionFieldId@9062247() : Boolean;
    VAR
      lField@9062234 : Record 2000000041;
      lResult@9062231 : Boolean;
      lFieldNames@9062232 : ARRAY [2] OF Text;
      lFieldIndex@9062233 : Integer;
    BEGIN
      //DOC NA2016.12 - Proposing caption field (if "Name" or "Description" has been detected)
      //  <- TRUE = Field found and proposed, FALSE = Not exactly

      lResult := FALSE;

      CLEAR(lFieldNames);
      lFieldNames[1] := 'Name';
      lFieldNames[2] := 'Description';

      FOR lFieldIndex := 1 TO ARRAYLEN(lFieldNames) DO
      BEGIN
        lField.RESET();
        lField.SETRANGE(TableNo, Rec."Table ID");
        lField.SETRANGE(FieldName, lFieldNames[lFieldIndex]);
        lResult := lField.FINDFIRST();
        IF (lResult) THEN
          lFieldIndex := ARRAYLEN(lFieldNames);
      END;

      IF (lResult) THEN
        SetCaptionFieldId(lField."No.");

      EXIT(lResult);
    END;

    PROCEDURE "--- Dates and Times ---"@9062232();
    BEGIN
    END;

    LOCAL PROCEDURE DetectDateFieldType@9062234(pFieldName@9062229 : Text) : Integer;
    BEGIN
      //DOC NA2016.12 - Returning type (data type) for entry date field
      //  -> pFieldName: Field name
      //  <- The type

      CASE (Rec."Date Time Fields") OF
        Rec."Date Time Fields"::Dates,
        Rec."Date Time Fields"::"Dates and Times",
        Rec."Date Time Fields"::"Single Date",
        Rec."Date Time Fields"::"Single Date and Time":
          EXIT(PlanningBoardDateTimeMgt.FieldDateType());
        Rec."Date Time Fields"::DateTimes,
        Rec."Date Time Fields"::"DateTimes (Dates Only)",
        Rec."Date Time Fields"::"Single DateTime",
        Rec."Date Time Fields"::"Single DateTime (Date Only)":
          EXIT(PlanningBoardDateTimeMgt.FieldDateTimeType());
        ELSE
          ERROR(tCantDetermineType, pFieldName, Rec.FIELDCAPTION("Date Time Fields"));
      END;
    END;

    LOCAL PROCEDURE DetectTimeFieldType@9062246(pFieldName@9062229 : Text) : Integer;
    VAR
      eOnlyDates@9062230 : TextConst 'ENU="Time field can''t be used when ""%1"" = ''%2''.";ENG="Time field can''t be used when ""%1"" = ''%2''."';
    BEGIN
      //DOC NA2016.12 - Returning type (data type) for entry time field
      //  -> pFieldName: Field name
      //  <- The type

      CASE (Rec."Date Time Fields") OF
        Rec."Date Time Fields"::Dates,
        Rec."Date Time Fields"::"DateTimes (Dates Only)",
        Rec."Date Time Fields"::"Single Date",
        Rec."Date Time Fields"::"Single DateTime (Date Only)":
          ERROR(eOnlyDates, Rec.FIELDCAPTION("Date Time Fields"), FORMAT(Rec."Date Time Fields"));
        Rec."Date Time Fields"::"Dates and Times",
        Rec."Date Time Fields"::"Single Date and Time":
          EXIT(PlanningBoardDateTimeMgt.FieldTimeType());
        Rec."Date Time Fields"::DateTimes,
        Rec."Date Time Fields"::"Single DateTime":
          EXIT(PlanningBoardDateTimeMgt.FieldDateTimeType());
        ELSE
          ERROR(tCantDetermineType, pFieldName, Rec.FIELDCAPTION("Date Time Fields"));
      END;
    END;

    PROCEDURE ValidateStartDateFieldText@9062236(VAR pText@9062229 : Text) : Boolean;
    VAR
      lResult@9062230 : Boolean;
    BEGIN
      //DOC NA2016.12 - Validating entry start date field text
      //  <> pText: The text
      //  <- TRUE = Field has changed, FALSE = Nope

      lResult := FALSE;

      xRec."Start Date Field ID" := Rec."Start Date Field ID";
      IF (ValidateDateTimeFieldText(pText, Rec."Start Date Field ID", Rec.FIELDCAPTION("Start Date Field ID"), TRUE)) THEN
      BEGIN
        Rec.VALIDATE("Start Date Field ID");
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE ValidateStartTimeFieldText@9062237(VAR pText@9062229 : Text) : Boolean;
    VAR
      lResult@9062230 : Boolean;
    BEGIN
      //DOC NA2016.12 - Validating entry start time field text
      //  <> pText: The text
      //  <- TRUE = Field has changed, FALSE = Nope

      lResult := FALSE;

      xRec."Start Time Field ID" := Rec."Start Time Field ID";
      IF (ValidateDateTimeFieldText(pText, Rec."Start Time Field ID", Rec.FIELDCAPTION("Start Time Field ID"), FALSE)) THEN
      BEGIN
        Rec.VALIDATE("Start Time Field ID");
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE ValidateEndDateFieldText@9062239(VAR pText@9062229 : Text) : Boolean;
    VAR
      lResult@9062230 : Boolean;
    BEGIN
      //DOC NA2016.12 - Validating entry end date field text
      //  <> pText: The text
      //  <- TRUE = Field has changed, FALSE = Nope

      lResult := FALSE;

      xRec."End Date Field ID" := Rec."End Date Field ID";
      IF (ValidateDateTimeFieldText(pText, Rec."End Date Field ID", Rec.FIELDCAPTION("End Date Field ID"), TRUE)) THEN
      BEGIN
        Rec.VALIDATE("End Date Field ID");
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE ValidateEndTimeFieldText@9062238(VAR pText@9062229 : Text) : Boolean;
    VAR
      lResult@9062231 : Boolean;
    BEGIN
      //DOC NA2016.12 - Validating entry end time field text
      //  <> pText: The text
      //  <- TRUE = Field has changed, FALSE = Nope

      lResult := FALSE;

      xRec."End Time Field ID" := Rec."End Time Field ID";
      IF (ValidateDateTimeFieldText(pText, Rec."End Time Field ID", Rec.FIELDCAPTION("End Time Field ID"), FALSE)) THEN
      BEGIN
        Rec.VALIDATE("End Time Field ID");
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE ValidateDateTimeFieldText@9062263(VAR pText@9062229 : Text;VAR pFieldValue@9062232 : Integer;pFieldCaption@9062230 : Text;pDateField@9062231 : Boolean) : Boolean;
    VAR
      lFieldType@9062233 : Integer;
      lPreviousFieldValue@9062234 : Integer;
    BEGIN
      //DOC NA2016.12 - Validate date / time field text
      //  <> pText: The text
      //  -> pFieldValue: Field value
      //  -> pFieldCaption: Field caption
      //  -> pDateField: TRUE = date field, FALSE = time field
      //  <- TRUE = Field has changed, FALSE = Nope

      IF (pDateField) THEN
        lFieldType := DetectDateFieldType(pFieldCaption)
      ELSE
        lFieldType := DetectTimeFieldType(pFieldCaption);
      lPreviousFieldValue := pFieldValue;
      PlanningBoardDateTimeMgt.ValidateFieldName(Rec."Table ID", lFieldType, pFieldValue, pText);
      EXIT(pFieldValue <> lPreviousFieldValue);
    END;

    PROCEDURE StartDateFieldLookup@9062241(pEditable@1000000000 : Boolean) : Boolean;
    VAR
      lFieldType@9062229 : Integer;
      lResult@9062230 : Boolean;
    BEGIN
      //DOC NA2016.12 - Lookup for entry start date field
      //  -> pEditable: Editable flag
      //  <- Lookup result

      lResult := FALSE;

      IF ( NOT (pEditable)) THEN
        EXIT(lResult);

      xRec."Start Date Field ID" := Rec."Start Date Field ID";
      lFieldType := DetectDateFieldType(Rec.FIELDCAPTION("Start Date Field ID"));
      IF (PlanningBoardDateTimeMgt.FieldLookup(Rec."Table ID", lFieldType, Rec."Start Date Field ID")) THEN
        IF (Rec."Start Date Field ID" <> xRec."Start Date Field ID") THEN
        BEGIN
          Rec.VALIDATE("Start Date Field ID");
          lResult := TRUE;
        END;

      EXIT(lResult);
    END;

    PROCEDURE StartTimeFieldLookup@9062242(pEditable@1000000000 : Boolean) : Boolean;
    VAR
      lFieldType@9062229 : Integer;
      lResult@9062230 : Boolean;
    BEGIN
      //DOC NA2016.12 - Lookup for entry start time field
      //  -> pEditable: Editable flag
      //  <- Lookup result

      lResult := FALSE;

      IF ( NOT (pEditable)) THEN
        EXIT(lResult);

      xRec."Start Time Field ID" := Rec."Start Time Field ID";
      lFieldType := DetectTimeFieldType(Rec.FIELDCAPTION("Start Time Field ID"));
      IF (PlanningBoardDateTimeMgt.FieldLookup(Rec."Table ID", lFieldType, Rec."Start Time Field ID")) THEN
        IF (Rec."Start Time Field ID" <> xRec."Start Time Field ID") THEN
        BEGIN
          Rec.VALIDATE("Start Time Field ID");
          lResult := TRUE;
        END;
      EXIT(lResult);
    END;

    PROCEDURE EndDateFieldLookup@9062243(pEditable@1000000000 : Boolean) : Boolean;
    VAR
      lFieldType@9062230 : Integer;
      lResult@9062229 : Boolean;
    BEGIN
      //DOC NA2016.12 - Lookup for entry end date field
      //  -> pEditable: Editable flag
      //  <- Lookup result

      lResult := FALSE;

      IF ( NOT (pEditable)) THEN
        EXIT(lResult);

      lFieldType := DetectDateFieldType(Rec.FIELDCAPTION("End Date Field ID"));
      IF (PlanningBoardDateTimeMgt.FieldLookup(Rec."Table ID", lFieldType, Rec."End Date Field ID")) THEN
        IF (Rec."End Date Field ID" <> xRec."End Date Field ID") THEN
        BEGIN
          Rec.VALIDATE("End Date Field ID");
          lResult := TRUE;
        END;
      EXIT(lResult);
    END;

    PROCEDURE EndTimeFieldLookup@9062244(pEditable@1000000000 : Boolean) : Boolean;
    VAR
      lFieldType@9062230 : Integer;
      lResult@9062229 : Boolean;
    BEGIN
      //DOC NA2016.12 - Lookup for entry end time field
      //  -> pEditable: Editable flag
      //  <- Lookup result

      lResult := FALSE;

      IF ( NOT (pEditable)) THEN
        EXIT(lResult);

      lFieldType := DetectTimeFieldType(Rec.FIELDCAPTION("End Time Field ID"));
      IF (PlanningBoardDateTimeMgt.FieldLookup(Rec."Table ID", lFieldType, Rec."End Time Field ID")) THEN
        IF (Rec."End Time Field ID" <> xRec."End Time Field ID") THEN
        BEGIN
          Rec.VALIDATE("End Time Field ID");
          lResult := TRUE;
        END;
      EXIT(lResult);
    END;

    PROCEDURE AreDateFieldsEnabled@9062240() : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning whether entry date fields are enabled
      //  <- Response

      EXIT(Rec."Date Time Fields" <> Rec."Date Time Fields"::" ");
    END;

    PROCEDURE AreTimeFieldsEnabled@9062233() : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning whether entry time fields are enabled
      //  <- Response

      EXIT( NOT (Rec."Date Time Fields" IN [Rec."Date Time Fields"::" ", Rec."Date Time Fields"::Dates,
        Rec."Date Time Fields"::"DateTimes (Dates Only)", Rec."Date Time Fields"::"Single Date",
        Rec."Date Time Fields"::"Single DateTime (Date Only)"]));
    END;

    PROCEDURE IsDateTimeSingle@1000000009() : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning if any of "Single..." dates / times has been selected
      //  <- Response

      EXIT(Rec."Date Time Fields" IN [Rec."Date Time Fields"::"Single Date", Rec."Date Time Fields"::"Single Date and Time",
        Rec."Date Time Fields"::"Single DateTime", Rec."Date Time Fields"::"Single DateTime (Date Only)"]);
    END;

    PROCEDURE "--- Foreground Style ---"@1000000000();
    BEGIN
    END;

    LOCAL PROCEDURE UpdateForegroundStyleTableId@1000000018();
    BEGIN
      //DOC NA2016.12 - Updating foreground colour table ID

      IF (SystemActivity) THEN
        EXIT;

      PlanningBoardRelationMgt.SetPlanningBoardTable(Rec);
      PlanningBoardRelationMgt.ValidateRelationId(Rec."Planning Board Code", Rec."Table Type", Rec."Foreground Style Relation ID",
        Rec."Foreground Style Table ID");
      PlanningBoardRelationMgt.ClearPlanningBoardTable();
      Rec.VALIDATE("Foreground Style Table ID");
    END;

    PROCEDURE ForegroundStyleSourceLookup@1000000030() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.12 - Performing lookup for foreground style source
      //  <- Lookup result

      xRec."Foreground Style Relation ID" := Rec."Foreground Style Relation ID";
      lResult := PlanningBoardRelationMgt.RelationLookup(Rec."Planning Board Code", Rec."Table Type", Rec."Foreground Style Relation ID");
      IF (lResult) THEN
        Rec.VALIDATE("Foreground Style Relation ID");
      EXIT(lResult);
    END;

    PROCEDURE GetForegroundStyleSourceText@1000000028() : Text;
    BEGIN
      //DOC NA2016.12 - Returning foreground style source text
      //  <- The text

      EXIT(PlanningBoardRelationMgt.RelationDescription(Rec."Planning Board Code", Rec."Table Type", Rec."Foreground Style Relation ID"));
    END;

    PROCEDURE GetForegroundStyleFieldCaption@1000000017() : Text;
    BEGIN
      //DOC NA2016.12 - Returning foreground style field caption
      //  <- The caption

      EXIT(ObjectFieldToolkit.GetFieldNameAdv(Rec."Foreground Style Table ID", Rec."Foreground Style Field Type", Rec."Foreground Style Field ID"));
    END;

    PROCEDURE ValidateForegroundStyleFieldText@1000000001(pText@1000000000 : Text) : Boolean;
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2016.12 - Validating foreground style field text
      //  <> pText: The text
      //  <- TRUE = Field has changed, FALSE = Nope

      lResult := FALSE;

      xRec."Foreground Style Field ID" := Rec."Foreground Style Field ID";
      ObjectFieldToolkit.ValidateFieldName(Rec."Foreground Style Table ID", Rec."Foreground Style Field ID", pText, FALSE);
      IF (Rec."Foreground Style Field ID" <> xRec."Foreground Style Field ID") THEN
      BEGIN
        Rec.VALIDATE("Foreground Style Field ID");
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE ForegroundStyleFieldLookup@1000000002() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.12 - Performing foreground style field lookup
      //  <- TRUE = Field has changed, FALSE = Nope

      lResult := FALSE;

      xRec."Foreground Style Field ID" := Rec."Foreground Style Field ID";
      IF (ObjectFieldToolkit.FieldLookup(Rec."Foreground Style Table ID", Rec."Foreground Style Field ID")) THEN
        IF (Rec."Foreground Style Field ID" <> xRec."Foreground Style Field ID") THEN
        BEGIN
          Rec.VALIDATE("Foreground Style Field ID");
          lResult := TRUE;
        END;

      EXIT(lResult);
    END;

    PROCEDURE "--- Background Style ---"@1000000026();
    BEGIN
    END;

    LOCAL PROCEDURE UpdateBackgroundStyleTableId@1000000019();
    BEGIN
      //DOC NA2016.12 - Updating background colour table ID

      IF (SystemActivity) THEN
        EXIT;

      PlanningBoardRelationMgt.SetPlanningBoardTable(Rec);
      PlanningBoardRelationMgt.ValidateRelationId(Rec."Planning Board Code", Rec."Table Type", Rec."Background Style Relation ID",
        Rec."Background Style Table ID");
      PlanningBoardRelationMgt.ClearPlanningBoardTable();
      Rec.VALIDATE("Background Style Table ID");
    END;

    PROCEDURE BackgroundStyleSourceLookup@1000000031() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.12 - Performing lookup for background style source
      //  <- Lookup result

      xRec."Background Style Relation ID" := Rec."Background Style Relation ID";
      lResult := PlanningBoardRelationMgt.RelationLookup(Rec."Planning Board Code", Rec."Table Type", Rec."Background Style Relation ID");
      IF (lResult) THEN
        Rec.VALIDATE("Background Style Relation ID");
      EXIT(lResult);
    END;

    PROCEDURE GetBackgroundStyleSourceText@1000000034() : Text;
    BEGIN
      //DOC NA2016.12 - Returning background style source text
      //  <- The text

      EXIT(PlanningBoardRelationMgt.RelationDescription(Rec."Planning Board Code", Rec."Table Type", Rec."Background Style Relation ID"));
    END;

    PROCEDURE GetBackgroundStyleFieldCaption@1000000023() : Text;
    BEGIN
      //DOC NA2016.12 - Returning backround style field caption
      //  <- The caption

      EXIT(ObjectFieldToolkit.GetFieldNameAdv(Rec."Background Style Table ID", Rec."Background Style Field Type", Rec."Background Style Field ID"));
    END;

    PROCEDURE ValidateBackgroundStyleFieldText@1000000011(pText@1000000000 : Text) : Boolean;
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2016.12 - Validating background style field text
      //  <> pText: The text
      //  <- TRUE = Field has changed, FALSE = Nope

      lResult := FALSE;

      xRec."Background Style Field ID" := Rec."Background Style Field ID";
      ObjectFieldToolkit.ValidateFieldName(Rec."Background Style Table ID", Rec."Background Style Field ID", pText, FALSE);
      IF (Rec."Background Style Field ID" <> xRec."Background Style Field ID") THEN
      BEGIN
        Rec.VALIDATE("Background Style Field ID");
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE BackgroundStyleFieldLookup@1000000010() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.12 - Performing background style field lookup
      //  <- TRUE = Field has changed, FALSE = Nope

      lResult := FALSE;

      xRec."Background Style Field ID" := Rec."Background Style Field ID";
      IF (ObjectFieldToolkit.FieldLookup(Rec."Background Style Table ID", Rec."Background Style Field ID")) THEN
        IF (Rec."Background Style Field ID" <> xRec."Background Style Field ID") THEN
        BEGIN
          Rec.VALIDATE("Background Style Field ID");
          lResult := TRUE;
        END;

      EXIT(lResult);
    END;

    PROCEDURE "--- Border Style ---"@1000000027();
    BEGIN
    END;

    LOCAL PROCEDURE UpdateBorderStyleTableId@1000000020();
    BEGIN
      //DOC NA2016.12 - Updating border colour table ID

      IF (SystemActivity) THEN
        EXIT;

      PlanningBoardRelationMgt.SetPlanningBoardTable(Rec);
      PlanningBoardRelationMgt.ValidateRelationId(Rec."Planning Board Code", Rec."Table Type", Rec."Border Style Relation ID",
        Rec."Border Style Table ID");
      PlanningBoardRelationMgt.ClearPlanningBoardTable();
      Rec.VALIDATE("Border Style Table ID");
    END;

    PROCEDURE BorderStyleSourceLookup@1000000032() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.12 - Performing lookup for border style source
      //  <- Lookup result

      xRec."Border Style Relation ID" := Rec."Border Style Relation ID";
      lResult := PlanningBoardRelationMgt.RelationLookup(Rec."Planning Board Code", Rec."Table Type", Rec."Border Style Relation ID");
      IF (lResult) THEN
        Rec.VALIDATE("Border Style Relation ID");
      EXIT(lResult);
    END;

    PROCEDURE GetBorderStyleSourceText@1000000035() : Text;
    BEGIN
      //DOC NA2016.12 - Returning border style source text
      //  <- The text

      EXIT(PlanningBoardRelationMgt.RelationDescription(Rec."Planning Board Code", Rec."Table Type", Rec."Border Style Relation ID"));
    END;

    PROCEDURE GetBorderStyleFieldCaption@1000000024() : Text;
    BEGIN
      //DOC NA2016.12 - Returning border style field caption
      //  <- The caption

      EXIT(ObjectFieldToolkit.GetFieldNameAdv(Rec."Border Style Table ID", Rec."Border Style Field Type", Rec."Border Style Field ID"));
    END;

    PROCEDURE ValidateBorderStyleFieldText@1000000013(pText@1000000000 : Text) : Boolean;
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2016.12 - Validating border style field text
      //  <> pText: The text
      //  <- TRUE = Field has changed, FALSE = Nope

      lResult := FALSE;

      xRec."Border Style Field ID" := Rec."Border Style Field ID";
      ObjectFieldToolkit.ValidateFieldName(Rec."Border Style Table ID", Rec."Border Style Field ID", pText, FALSE);
      IF (Rec."Border Style Field ID" <> xRec."Border Style Field ID") THEN
      BEGIN
        Rec.VALIDATE("Border Style Field ID");
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE BorderStyleFieldLookup@1000000012() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.12 - Performing border style field lookup
      //  <- TRUE = Field has changed, FALSE = Nope

      lResult := FALSE;

      xRec."Border Style Field ID" := Rec."Border Style Field ID";
      IF (ObjectFieldToolkit.FieldLookup(Rec."Border Style Table ID", Rec."Border Style Field ID")) THEN
        IF (Rec."Border Style Field ID" <> xRec."Border Style Field ID") THEN
        BEGIN
          Rec.VALIDATE("Border Style Field ID");
          lResult := TRUE;
        END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Picture ---"@1000000022();
    BEGIN
    END;

    LOCAL PROCEDURE UpdatePictureTableId@1000000021();
    BEGIN
      //DOC NA2016.12 - Updating border colour table ID

      IF (SystemActivity) THEN
        EXIT;

      PlanningBoardRelationMgt.SetPlanningBoardTable(Rec);
      PlanningBoardRelationMgt.ValidateRelationId(Rec."Planning Board Code", Rec."Table Type", Rec."Picture Relation ID",
        Rec."Picture Table ID");
      PlanningBoardRelationMgt.ClearPlanningBoardTable();
      Rec.VALIDATE("Picture Table ID");
    END;

    PROCEDURE PictureSourceLookup@1000000033() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.12 - Performing lookup for picture source
      //  <- Lookup result

      xRec."Picture Relation ID" := Rec."Picture Relation ID";
      lResult := PlanningBoardRelationMgt.RelationLookup(Rec."Planning Board Code", Rec."Table Type", Rec."Picture Relation ID");
      IF (lResult) THEN
        Rec.VALIDATE("Picture Relation ID");
      EXIT(lResult);
    END;

    PROCEDURE GetPictureSourceText@1000000036() : Text;
    BEGIN
      //DOC NA2016.12 - Returning picture source text
      //  <- The text

      EXIT(PlanningBoardRelationMgt.RelationDescription(Rec."Planning Board Code", Rec."Table Type", Rec."Picture Relation ID"));
    END;

    PROCEDURE GetPictureFieldCaption@1000000025() : Text;
    BEGIN
      //DOC NA2016.12 - Returning picture style field caption
      //  <- The caption

      EXIT(ObjectFieldToolkit.GetFieldNameAdv(Rec."Picture Table ID", Rec."Picture Field Type", Rec."Picture Field ID"));
    END;

    PROCEDURE ValidatePictureFieldText@1000000037(pText@1000000000 : Text) : Boolean;
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2016.12 - Validating picture field text
      //  <> pText: The text
      //  <- TRUE = Field has changed, FALSE = Nope

      lResult := FALSE;

      xRec."Picture Field ID" := Rec."Picture Field ID";
      ObjectFieldToolkit.ValidateFieldName(Rec."Picture Table ID", Rec."Picture Field ID", pText, FALSE);
      IF (Rec."Picture Field ID" <> xRec."Picture Field ID") THEN
      BEGIN
        Rec.VALIDATE("Picture Field ID");
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE PictureFieldLookup@1000000029() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.12 - Performing picture field lookup
      //  <- TRUE = Field has changed, FALSE = Nope

      lResult := FALSE;

      xRec."Picture Field ID" := Rec."Picture Field ID";
      IF (ObjectFieldToolkit.FieldLookup(Rec."Picture Table ID", Rec."Picture Field ID")) THEN
        IF (Rec."Picture Field ID" <> xRec."Picture Field ID") THEN
        BEGIN
          Rec.VALIDATE("Picture Field ID");
          lResult := TRUE;
        END;

      EXIT(lResult);
    END;

    PROCEDURE "--- Menu Items ---"@1000000007();
    BEGIN
    END;

    PROCEDURE GetMenuItemsText@1000000006() : Text;
    VAR
      lText@1000000000 : Text;
      eName@1000000001 : TextConst 'ENU=menu item;ENG=menu item';
    BEGIN
      //DOC NA2016.12 - Returning menu items text
      //  <- The text

      Rec.CALCFIELDS("No. of Menu Items");
      EXIT(PlanningBoardToolkit.IntegerText(eName, Rec."No. of Menu Items"));
    END;

    PROCEDURE EditMenuItems@1000000005(pEditable@1000000000 : Boolean);
    VAR
      lPlanningBoardMenuItems@1000000001 : Page 9062407;
    BEGIN
      //DOC NA2016.12 - Editing menu items
      //  -> pEditable: Editable flag

      PlanningBoardMenuItem.RESET();
      PlanningBoardMenuItem.FILTERGROUP(2);
      PlanningBoardMenuItem.SETRANGE("Planning Board Code", Rec."Planning Board Code");
      PlanningBoardMenuItem.SETRANGE("Planning Board Table Type", Rec."Table Type");
      PlanningBoardMenuItem.FILTERGROUP(0);

      lPlanningBoardMenuItems.SETTABLEVIEW(PlanningBoardMenuItem);
      lPlanningBoardMenuItems.EDITABLE(pEditable);
      lPlanningBoardMenuItems.RUNMODAL();
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000015();
    BEGIN
    END;

    LOCAL PROCEDURE EditableNotEditableText@1000000016(pEditable@1000000000 : Boolean) : Text;
    BEGIN
      //DOC NA2016.12 - Returning editable / not editable text
      //  -> pEditable: Editable flag
      //  <- The text

      EXIT(TnpToolkit.IIFText(pEditable, tClickHereToDefine, tHasntBeenDefined));
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 27/09/2015 - Created
      //DOC NA2016.15 JH 05/05/2016 - Enhanced permissions
    }
    END.
  }
}

