OBJECT Table 1275 Doc. Exch. Service Setup
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 1261=rimd;
    OnInsert=BEGIN
               TESTFIELD("Primary Key",'');
             END;

    OnDelete=BEGIN
               DeletePassword("Consumer Secret");
               DeletePassword("Consumer Key");
               DeletePassword(Token);
               DeletePassword("Token Secret");
               DeletePassword("Doc. Exch. Tenant ID");
             END;

    CaptionML=[ENU=Doc. Exch. Service Setup;
               ENG=Doc. Exch. Service Setup];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              ENG=Primary Key] }
    { 4   ;   ;Signup URL          ;Text250       ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Signup URL;
                                                              ENG=Signup URL] }
    { 5   ;   ;Service URL         ;Text250       ;OnValidate=VAR
                                                                WebRequestHelper@1000 : Codeunit 1299;
                                                              BEGIN
                                                                IF "Service URL" <> '' THEN
                                                                  WebRequestHelper.IsSecureHttpUrl("Service URL");
                                                              END;

                                                   CaptionML=[ENU=Service URL;
                                                              ENG=Service URL] }
    { 6   ;   ;Login URL           ;Text250       ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Login URL;
                                                              ENG=Login URL] }
    { 7   ;   ;Consumer Key        ;GUID          ;TableRelation="Service Password".Key;
                                                   CaptionML=[ENU=Consumer Key;
                                                              ENG=Consumer Key] }
    { 8   ;   ;Consumer Secret     ;GUID          ;CaptionML=[ENU=Consumer Secret;
                                                              ENG=Consumer Secret];
                                                   Editable=No }
    { 9   ;   ;Token               ;GUID          ;CaptionML=[ENU=Token;
                                                              ENG=Token];
                                                   Editable=No }
    { 10  ;   ;Token Secret        ;GUID          ;CaptionML=[ENU=Token Secret;
                                                              ENG=Token Secret];
                                                   Editable=No }
    { 11  ;   ;Doc. Exch. Tenant ID;GUID          ;CaptionML=[ENU=Doc. Exch. Tenant ID;
                                                              ENG=Doc. Exch. Tenant ID];
                                                   Editable=No }
    { 12  ;   ;User Agent          ;Text30        ;CaptionML=[ENU=User Agent;
                                                              ENG=User Agent];
                                                   NotBlank=Yes }
    { 20  ;   ;Enabled             ;Boolean       ;OnValidate=BEGIN
                                                                IF Enabled THEN BEGIN
                                                                  ScheduleJobQueueEntries;
                                                                  IF CONFIRM(JobQEntriesCreatedQst) THEN
                                                                    ShowJobQueueEntry;
                                                                END ELSE
                                                                  CancelJobQueueEntries;
                                                              END;

                                                   CaptionML=[ENU=Enabled;
                                                              ENG=Enabled] }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EncryptionIsNotActivatedQst@1000 : TextConst 'ENU=Data encryption is not activated. It is recommended that you encrypt data. \Do you want to open the Data Encryption Management window?;ENG=Data encryption is not activated. It is recommended that you encrypt data. \Do you want to open the Data Encryption Management window?';
      JobQEntriesCreatedQst@1003 : TextConst 'ENU=A job queue entry for exchanging documents has been created.\\Do you want to open the Job Queue Entries window?;ENG=A job queue entry for exchanging documents has been created.\\Do you want to open the Job Queue Entries window?';
      DocExchServiceMgt@1002 : Codeunit 1410;

    PROCEDURE SavePassword@1(VAR PasswordKey@1001 : GUID;PasswordText@1000 : Text);
    VAR
      ServicePassword@1002 : Record 1261;
    BEGIN
      PasswordText := DELCHR(PasswordText,'=',' ');

      IF ISNULLGUID(PasswordKey) OR NOT ServicePassword.GET(PasswordKey) THEN BEGIN
        ServicePassword.SavePassword(PasswordText);
        ServicePassword.INSERT(TRUE);
        PasswordKey := ServicePassword.Key;
        MODIFY;
      END ELSE BEGIN
        ServicePassword.SavePassword(PasswordText);
        ServicePassword.MODIFY;
      END;
      COMMIT;

      IF PasswordText <> '' THEN
        CheckEncryption;
    END;

    PROCEDURE GetPassword@2(PasswordKey@1001 : GUID) : Text;
    VAR
      ServicePassword@1000 : Record 1261;
    BEGIN
      ServicePassword.GET(PasswordKey);
      EXIT(ServicePassword.GetPassword);
    END;

    LOCAL PROCEDURE DeletePassword@4(PasswordKey@1000 : GUID);
    VAR
      ServicePassword@1001 : Record 1261;
    BEGIN
      IF ServicePassword.GET(PasswordKey) THEN
        ServicePassword.DELETE;
    END;

    PROCEDURE HasPassword@3(PasswordKey@1001 : GUID) : Boolean;
    VAR
      ServicePassword@1000 : Record 1261;
    BEGIN
      IF NOT ServicePassword.GET(PasswordKey) THEN
        EXIT(FALSE);

      EXIT(ServicePassword.GetPassword <> '');
    END;

    PROCEDURE SetURLsToDefault@5();
    BEGIN
      DocExchServiceMgt.SetURLsToDefault(Rec);
    END;

    LOCAL PROCEDURE CheckEncryption@6();
    BEGIN
      IF NOT ENCRYPTIONENABLED THEN
        IF CONFIRM(EncryptionIsNotActivatedQst) THEN
          PAGE.RUN(PAGE::"Data Encryption Management");
    END;

    PROCEDURE CheckConnection@7();
    BEGIN
      DocExchServiceMgt.CheckConnection;
    END;

    LOCAL PROCEDURE ScheduleJobQueueEntries@10();
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      JobQueueEntry.ScheduleRecurrentJobQueueEntry(JobQueueEntry."Object Type to Run"::Codeunit,
        CODEUNIT::"Doc. Exch. Serv.- Doc. Status");
      JobQueueEntry.ScheduleRecurrentJobQueueEntry(JobQueueEntry."Object Type to Run"::Codeunit,
        CODEUNIT::"Doc. Exch. Serv. - Recv. Docs.");
    END;

    LOCAL PROCEDURE CancelJobQueueEntries@11();
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      CancelJobQueueEntry(JobQueueEntry."Object Type to Run"::Codeunit,
        CODEUNIT::"Doc. Exch. Serv.- Doc. Status");
      CancelJobQueueEntry(JobQueueEntry."Object Type to Run"::Codeunit,
        CODEUNIT::"Doc. Exch. Serv. - Recv. Docs.");
    END;

    LOCAL PROCEDURE CancelJobQueueEntry@16(ObjType@1001 : Option;ObjID@1002 : Integer);
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      IF JobQueueEntry.FindJobQueueEntry(ObjType,ObjID) THEN
        JobQueueEntry.Cancel;
    END;

    PROCEDURE ShowJobQueueEntry@8();
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETFILTER("Object ID to Run",'%1|%2',
        CODEUNIT::"Doc. Exch. Serv.- Doc. Status",
        CODEUNIT::"Doc. Exch. Serv. - Recv. Docs.");
      IF JobQueueEntry.FINDFIRST THEN
        PAGE.RUN(PAGE::"Job Queue Entries",JobQueueEntry);
    END;

    BEGIN
    END.
  }
}

