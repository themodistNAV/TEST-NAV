OBJECT Report 299 Delete Invoiced Sales Orders
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Delete Invoiced Sales Orders;
               ENG=Delete Invoiced Sales Orders];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 6640;    ;DataItem;                    ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.)
                                 WHERE(Document Type=CONST(Order));
               ReqFilterHeadingML=[ENU=Sales Order;
                                   ENG=Sales Order];
               OnPreDataItem=BEGIN
                               Window.OPEN(Text000);
                             END;

               OnAfterGetRecord=VAR
                                  ATOLink@1001 : Record 904;
                                  ReserveSalesLine@1000 : Codeunit 99000832;
                                  ApprovalsMgmt@1002 : Codeunit 1535;
                                BEGIN
                                  Window.UPDATE(1,"No.");

                                  AllLinesDeleted := TRUE;
                                  ItemChargeAssgntSales.RESET;
                                  ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
                                  ItemChargeAssgntSales.SETRANGE("Document No.","No.");
                                  SalesOrderLine.RESET;
                                  SalesOrderLine.SETRANGE("Document Type","Document Type");
                                  SalesOrderLine.SETRANGE("Document No.","No.");
                                  SalesOrderLine.SETFILTER("Quantity Invoiced",'<>0');
                                  IF SalesOrderLine.FIND('-') THEN BEGIN
                                    SalesOrderLine.SETRANGE("Quantity Invoiced");
                                    SalesOrderLine.SETFILTER("Outstanding Quantity",'<>0');
                                    IF NOT SalesOrderLine.FIND('-') THEN BEGIN
                                      SalesOrderLine.SETRANGE("Outstanding Quantity");
                                      SalesOrderLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
                                      IF NOT SalesOrderLine.FIND('-') THEN BEGIN
                                        SalesOrderLine.LOCKTABLE;
                                        IF NOT SalesOrderLine.FIND('-') THEN BEGIN
                                          SalesOrderLine.SETRANGE("Qty. Shipped Not Invoiced");
                                          IF SalesOrderLine.FIND('-') THEN
                                            REPEAT
                                              SalesOrderLine.CALCFIELDS("Qty. Assigned");
                                              IF ((SalesOrderLine."Qty. Assigned" = SalesOrderLine."Quantity Invoiced") AND
                                                  (SalesOrderLine."Qty. Assigned" <> 0)) OR
                                                 (SalesOrderLine.Type <> SalesOrderLine.Type::"Charge (Item)")
                                              THEN BEGIN
                                                IF SalesOrderLine.Type = SalesOrderLine.Type::"Charge (Item)" THEN BEGIN
                                                  ItemChargeAssgntSales.SETRANGE("Document Line No.",SalesOrderLine."Line No.");
                                                  ItemChargeAssgntSales.DELETEALL;
                                                END;
                                                IF SalesOrderLine.Type = SalesOrderLine.Type::Item THEN
                                                  ATOLink.DeleteAsmFromSalesLine(SalesOrderLine);
                                                IF SalesOrderLine.HASLINKS THEN
                                                  SalesOrderLine.DELETELINKS;
                                                SalesOrderLine.DELETE;
                                              END ELSE
                                                AllLinesDeleted := FALSE;
                                              UpdateAssPurchOrder;
                                            UNTIL SalesOrderLine.NEXT = 0;

                                          IF AllLinesDeleted THEN BEGIN
                                            SalesPost.DeleteHeader(
                                              "Sales Header",SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,
                                              PrepmtSalesInvHeader,PrepmtSalesCrMemoHeader);

                                            ReserveSalesLine.DeleteInvoiceSpecFromHeader("Sales Header");

                                            SalesCommentLine.SETRANGE("Document Type","Document Type");
                                            SalesCommentLine.SETRANGE("No.","No.");
                                            SalesCommentLine.DELETEALL;

                                            WhseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
                                            WhseRequest.SETRANGE("Source Subtype","Document Type");
                                            WhseRequest.SETRANGE("Source No.","No.");
                                            WhseRequest.DELETEALL(TRUE);

                                            ApprovalsMgmt.DeleteApprovalEntry(DATABASE::"Sales Header","Document Type","No.");

                                            IF HASLINKS THEN
                                              DELETELINKS;
                                            DELETE;
                                          END;
                                          COMMIT;
                                        END;
                                      END;
                                    END;
                                  END;
                                END;

               ReqFilterFields=No.,Sell-to Customer No.,Bill-to Customer No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Processing sales orders #1##########;ENG=Processing sales orders #1##########';
      SalesOrderLine@1001 : Record 37;
      SalesShptHeader@1009 : Record 110;
      SalesInvHeader@1010 : Record 112;
      SalesCrMemoHeader@1011 : Record 114;
      ReturnRcptHeader@1012 : Record 6660;
      PrepmtSalesInvHeader@1013 : Record 112;
      PrepmtSalesCrMemoHeader@1014 : Record 114;
      SalesCommentLine@1002 : Record 44;
      ItemChargeAssgntSales@1007 : Record 5809;
      WhseRequest@1008 : Record 5765;
      SalesPost@1005 : Codeunit 80;
      Window@1004 : Dialog;
      AllLinesDeleted@1006 : Boolean;

    LOCAL PROCEDURE UpdateAssPurchOrder@1001();
    VAR
      PurchLine@1001 : Record 39;
    BEGIN
      IF NOT SalesOrderLine."Special Order" THEN
        EXIT;
      WITH PurchLine DO BEGIN
        RESET;
        SETRANGE("Special Order Sales No.",SalesOrderLine."Document No.");
        SETRANGE("Special Order Sales Line No.",SalesOrderLine."Line No.");
        SETRANGE("Purchasing Code",SalesOrderLine."Purchasing Code");
        IF FINDFIRST THEN BEGIN
          "Special Order Sales No." := '';
          "Special Order Sales Line No." := 0;
          MODIFY;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

