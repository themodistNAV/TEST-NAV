OBJECT Codeunit 5777 Whse. Validate Source Line
{
  OBJECT-PROPERTIES
  {
    Date=29/01/16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.44974;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="must not be changed when a %1 for this %2 exists: ";ENG="must not be changed when a %1 for this %2 exists: "';
      Text001@1002 : TextConst 'ENU=The %1 cannot be deleted when a related %2 exists.;ENG=The %1 cannot be deleted when a related %2 exists.';
      Text002@1004 : TextConst 'ENU=You cannot post consumption for order no. %1 because a quantity of %2 remains to be picked.;ENG=You cannot post consumption for order no. %1 because a quantity of %2 remains to be picked.';
      WhseActivLine@1003 : Record 5767;
      TableCaptionValue@1001 : Text[100];

    PROCEDURE SalesLineVerifyChange@1(VAR NewSalesLine@1000 : Record 37;VAR OldSalesLine@1001 : Record 37);
    BEGIN
      WITH NewSalesLine DO
        IF WhseLinesExist(
             DATABASE::"Sales Line",
             "Document Type",
             "Document No.",
             "Line No.",
             0,
             Quantity)
        THEN BEGIN
          IF Type <> OldSalesLine.Type THEN
            FIELDERROR(
              Type,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "No." <> OldSalesLine."No." THEN
            FIELDERROR(
              "No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Variant Code" <> OldSalesLine."Variant Code" THEN
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Location Code" <> OldSalesLine."Location Code" THEN
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Unit of Measure Code" <> OldSalesLine."Unit of Measure Code" THEN
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Drop Shipment" <> OldSalesLine."Drop Shipment" THEN
            FIELDERROR(
              "Drop Shipment",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Purchase Order No." <> OldSalesLine."Purchase Order No." THEN
            FIELDERROR(
              "Purchase Order No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Purch. Order Line No." <> OldSalesLine."Purch. Order Line No." THEN
            FIELDERROR(
              "Purch. Order Line No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Job No." <> OldSalesLine."Job No." THEN
            FIELDERROR(
              "Job No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF Quantity <> OldSalesLine.Quantity THEN
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Qty. to Ship" <> OldSalesLine."Qty. to Ship" THEN
            FIELDERROR(
              "Qty. to Ship",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Qty. to Assemble to Order" <> OldSalesLine."Qty. to Assemble to Order" THEN
            FIELDERROR(
              "Qty. to Assemble to Order",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));
        END;
    END;

    PROCEDURE SalesLineDelete@2(VAR SalesLine@1000 : Record 37);
    BEGIN
      IF WhseLinesExist(
           DATABASE::"Sales Line",
           SalesLine."Document Type",
           SalesLine."Document No.",
           SalesLine."Line No.",
           0,
           SalesLine.Quantity)
      THEN
        ERROR(
          Text001,
          SalesLine.TABLECAPTION,
          TableCaptionValue);
    END;

    PROCEDURE ServiceLineVerifyChange@15(VAR NewServiceLine@1000 : Record 5902;VAR OldServiceLine@1001 : Record 5902);
    VAR
      NewRecRef@1002 : RecordRef;
      OldRecRef@1003 : RecordRef;
    BEGIN
      IF NOT WhseLinesExist(
           DATABASE::"Service Line",NewServiceLine."Document Type",NewServiceLine."Document No.",NewServiceLine."Line No.",0,
           NewServiceLine.Quantity)
      THEN
        EXIT;
      NewRecRef.GETTABLE(NewServiceLine);
      OldRecRef.GETTABLE(OldServiceLine);
      WITH NewServiceLine DO BEGIN
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Type));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Location Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
      END;
    END;

    PROCEDURE ServiceLineDelete@16(VAR ServiceLine@1000 : Record 5902);
    BEGIN
      IF WhseLinesExist(
           DATABASE::"Service Line",
           ServiceLine."Document Type",
           ServiceLine."Document No.",
           ServiceLine."Line No.",
           0,
           ServiceLine.Quantity)
      THEN
        ERROR(
          Text001,
          ServiceLine.TABLECAPTION,
          TableCaptionValue);
    END;

    LOCAL PROCEDURE VerifyFieldNotChanged@17(NewRecRef@1000 : RecordRef;OldRecRef@1001 : RecordRef;FieldNumber@1002 : Integer);
    VAR
      NewFieldRef@1004 : FieldRef;
      OldFieldRef@1003 : FieldRef;
    BEGIN
      NewFieldRef := NewRecRef.FIELD(FieldNumber);
      OldFieldRef := OldRecRef.FIELD(FieldNumber);
      IF FORMAT(OldFieldRef.VALUE) <> FORMAT(NewFieldRef.VALUE) THEN
        NewFieldRef.FIELDERROR(STRSUBSTNO(Text000,TableCaptionValue,NewRecRef.CAPTION));
    END;

    PROCEDURE PurchaseLineVerifyChange@3(VAR NewPurchLine@1000 : Record 39;VAR OldPurchLine@1001 : Record 39);
    BEGIN
      WITH NewPurchLine DO
        IF WhseLinesExist(
             DATABASE::"Purchase Line",
             "Document Type",
             "Document No.",
             "Line No.",
             0,
             Quantity)
        THEN BEGIN
          IF Type <> OldPurchLine.Type THEN
            FIELDERROR(
              Type,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "No." <> OldPurchLine."No." THEN
            FIELDERROR(
              "No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Variant Code" <> OldPurchLine."Variant Code" THEN
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Location Code" <> OldPurchLine."Location Code" THEN
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Unit of Measure Code" <> OldPurchLine."Unit of Measure Code" THEN
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Drop Shipment" <> OldPurchLine."Drop Shipment" THEN
            FIELDERROR(
              "Drop Shipment",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Sales Order No." <> OldPurchLine."Sales Order No." THEN
            FIELDERROR(
              "Sales Order No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Sales Order Line No." <> OldPurchLine."Sales Order Line No." THEN
            FIELDERROR(
              "Sales Order Line No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Special Order" <> OldPurchLine."Special Order" THEN
            FIELDERROR(
              "Special Order",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Special Order Sales No." <> OldPurchLine."Special Order Sales No." THEN
            FIELDERROR(
              "Special Order Sales No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Special Order Sales Line No." <> OldPurchLine."Special Order Sales Line No." THEN
            FIELDERROR(
              "Special Order Sales Line No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Job No." <> OldPurchLine."Job No." THEN
            FIELDERROR(
              "Job No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF Quantity <> OldPurchLine.Quantity THEN
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Qty. to Receive" <> OldPurchLine."Qty. to Receive" THEN
            FIELDERROR(
              "Qty. to Receive",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));
        END;
    END;

    PROCEDURE PurchaseLineDelete@4(VAR PurchLine@1000 : Record 39);
    BEGIN
      IF WhseLinesExist(
           DATABASE::"Purchase Line",
           PurchLine."Document Type",
           PurchLine."Document No.",
           PurchLine."Line No.",
           0,
           PurchLine.Quantity)
      THEN
        ERROR(
          Text001,
          PurchLine.TABLECAPTION,
          TableCaptionValue);
    END;

    PROCEDURE TransLineVerifyChange@5(VAR NewTransLine@1000 : Record 5741;VAR OldTransLine@1001 : Record 5741);
    BEGIN
      WITH NewTransLine DO BEGIN
        IF WhseLinesExist(DATABASE::"Transfer Line",0,"Document No.","Line No.",0,Quantity) THEN BEGIN
          TransLineCommonVerification(NewTransLine,OldTransLine);
          IF "Qty. to Ship" <> OldTransLine."Qty. to Ship" THEN
            FIELDERROR(
              "Qty. to Ship",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));
        END;

        IF WhseLinesExist(DATABASE::"Transfer Line",1,"Document No.","Line No.",0,Quantity) THEN BEGIN
          TransLineCommonVerification(NewTransLine,OldTransLine);
          IF "Qty. to Receive" <> OldTransLine."Qty. to Receive" THEN
            FIELDERROR(
              "Qty. to Receive",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));
        END;
      END;
    END;

    LOCAL PROCEDURE TransLineCommonVerification@19(VAR NewTransLine@1001 : Record 5741;VAR OldTransLine@1000 : Record 5741);
    BEGIN
      WITH NewTransLine DO BEGIN
        IF "Item No." <> OldTransLine."Item No." THEN
          FIELDERROR(
            "Item No.",
            STRSUBSTNO(Text000,
              TableCaptionValue,
              TABLECAPTION));

        IF "Variant Code" <> OldTransLine."Variant Code" THEN
          FIELDERROR(
            "Variant Code",
            STRSUBSTNO(Text000,
              TableCaptionValue,
              TABLECAPTION));

        IF "Unit of Measure Code" <> OldTransLine."Unit of Measure Code" THEN
          FIELDERROR(
            "Unit of Measure Code",
            STRSUBSTNO(Text000,
              TableCaptionValue,
              TABLECAPTION));

        IF Quantity <> OldTransLine.Quantity THEN
          FIELDERROR(
            Quantity,
            STRSUBSTNO(Text000,
              TableCaptionValue,
              TABLECAPTION));
      END;
    END;

    PROCEDURE TransLineDelete@10(VAR NewTransLine@1000 : Record 5741);
    BEGIN
      WITH NewTransLine DO BEGIN
        IF WhseLinesExist(DATABASE::"Transfer Line",0,"Document No.","Line No.",0,Quantity) THEN
          ERROR(
            Text001,
            TABLECAPTION,
            TableCaptionValue);
        IF WhseLinesExist(DATABASE::"Transfer Line",1,"Document No.","Line No.",0,Quantity) THEN
          ERROR(
            Text001,
            TABLECAPTION,
            TableCaptionValue);
      END;
    END;

    PROCEDURE WhseLinesExist@6(SourceType@1000 : Integer;SourceSubType@1001 : Option;SourceNo@1002 : Code[20];SourceLineNo@1003 : Integer;SourceSublineNo@1004 : Integer;SourceQty@1007 : Decimal) : Boolean;
    VAR
      WhseRcptLine@1006 : Record 7317;
      WhseShptLine@1005 : Record 7321;
    BEGIN
      IF ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 1) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 5) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 1) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 5) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Transfer Line") AND (SourceSubType = 1))
      THEN BEGIN
        WhseRcptLine.SETCURRENTKEY(
          "Source Type","Source Subtype","Source No.","Source Line No.");
        WhseRcptLine.SETRANGE("Source Type",SourceType);
        WhseRcptLine.SETRANGE("Source Subtype",SourceSubType);
        WhseRcptLine.SETRANGE("Source No.",SourceNo);
        WhseRcptLine.SETRANGE("Source Line No.",SourceLineNo);
        IF NOT WhseRcptLine.ISEMPTY THEN BEGIN
          TableCaptionValue := WhseRcptLine.TABLECAPTION;
          EXIT(TRUE);
        END;
      END;

      IF ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 1) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 5) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 1) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 5) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Transfer Line") AND (SourceSubType = 0)) OR
         ((SourceType = DATABASE::"Service Line") AND (SourceSubType = 1))
      THEN BEGIN
        WhseShptLine.SETCURRENTKEY(
          "Source Type","Source Subtype","Source No.","Source Line No.");
        WhseShptLine.SETRANGE("Source Type",SourceType);
        WhseShptLine.SETRANGE("Source Subtype",SourceSubType);
        WhseShptLine.SETRANGE("Source No.",SourceNo);
        WhseShptLine.SETRANGE("Source Line No.",SourceLineNo);
        IF NOT WhseShptLine.ISEMPTY THEN BEGIN
          TableCaptionValue := WhseShptLine.TABLECAPTION;
          EXIT(TRUE);
        END;
      END;

      WhseActivLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
      WhseActivLine.SETRANGE("Source Type",SourceType);
      WhseActivLine.SETRANGE("Source Subtype",SourceSubType);
      WhseActivLine.SETRANGE("Source No.",SourceNo);
      WhseActivLine.SETRANGE("Source Line No.",SourceLineNo);
      WhseActivLine.SETRANGE("Source Subline No.",SourceSublineNo);
      IF NOT WhseActivLine.ISEMPTY THEN BEGIN
        TableCaptionValue := WhseActivLine.TABLECAPTION;
        EXIT(TRUE);
      END;

      TableCaptionValue := '';
      EXIT(FALSE);
    END;

    PROCEDURE ProdComponentVerifyChange@9(VAR NewProdOrderComp@1000 : Record 5407;VAR OldProdOrderComp@1001 : Record 5407);
    BEGIN
      WITH NewProdOrderComp DO
        IF WhseLinesExist(
             DATABASE::"Prod. Order Component",
             Status,
             "Prod. Order No.",
             "Prod. Order Line No.",
             "Line No.",
             Quantity)
        THEN BEGIN
          IF Status <> OldProdOrderComp.Status THEN
            FIELDERROR(
              Status,
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Prod. Order No." <> OldProdOrderComp."Prod. Order No." THEN
            FIELDERROR(
              "Prod. Order No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Prod. Order Line No." <> OldProdOrderComp."Prod. Order Line No." THEN
            FIELDERROR(
              "Prod. Order Line No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Line No." <> OldProdOrderComp."Line No." THEN
            FIELDERROR(
              "Line No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Item No." <> OldProdOrderComp."Item No." THEN
            FIELDERROR(
              "Item No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Variant Code" <> OldProdOrderComp."Variant Code" THEN
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Location Code" <> OldProdOrderComp."Location Code" THEN
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Unit of Measure Code" <> OldProdOrderComp."Unit of Measure Code" THEN
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Due Date" <> OldProdOrderComp."Due Date" THEN
            FIELDERROR(
              "Due Date",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF Quantity <> OldProdOrderComp.Quantity THEN
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Quantity per" <> OldProdOrderComp."Quantity per" THEN
            FIELDERROR(
              "Quantity per",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Expected Quantity" <> OldProdOrderComp."Expected Quantity" THEN
            FIELDERROR(
              "Expected Quantity",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));
        END;
    END;

    PROCEDURE ProdComponentDelete@7(VAR ProdOrderComp@1000 : Record 5407);
    BEGIN
      IF WhseLinesExist(
           DATABASE::"Prod. Order Component",
           ProdOrderComp.Status,
           ProdOrderComp."Prod. Order No.",
           ProdOrderComp."Prod. Order Line No.",
           ProdOrderComp."Line No.",
           ProdOrderComp.Quantity)
      THEN
        ERROR(
          Text001,
          ProdOrderComp.TABLECAPTION,
          TableCaptionValue);
    END;

    PROCEDURE ItemLineVerifyChange@11(VAR NewItemJnlLine@1000 : Record 83;VAR OldItemJnlLine@1001 : Record 83);
    VAR
      AssemblyLine@1006 : Record 901;
      ProdOrderComp@1003 : Record 5407;
      Location@1005 : Record 14;
      LinesExist@1002 : Boolean;
      QtyChecked@1004 : Boolean;
      QtyRemainingToBePicked@1007 : Decimal;
    BEGIN
      WITH NewItemJnlLine DO BEGIN
        CASE "Entry Type" OF
          "Entry Type"::"Assembly Consumption":
            BEGIN
              TESTFIELD("Order Type","Order Type"::Assembly);
              IF Location.GET("Location Code") AND Location."Require Pick" AND Location."Require Shipment" THEN
                IF AssemblyLine.GET(AssemblyLine."Document Type"::Order,"Order No.","Order Line No.") AND
                   (Quantity >= 0)
                THEN BEGIN
                  QtyRemainingToBePicked := Quantity - AssemblyLine.CalcQtyPickedNotConsumed;
                  IF QtyRemainingToBePicked > 0 THEN
                    ERROR(Text002,"Order No.",QtyRemainingToBePicked);
                  QtyChecked := TRUE;
                END;

              LinesExist := FALSE;
            END;
          "Entry Type"::Consumption:
            BEGIN
              TESTFIELD("Order Type","Order Type"::Production);
              IF Location.GET("Location Code") AND Location."Require Pick" AND Location."Require Shipment" THEN
                IF ProdOrderComp.GET(
                     ProdOrderComp.Status::Released,
                     "Order No.","Order Line No.","Prod. Order Comp. Line No.") AND
                   (ProdOrderComp."Flushing Method" = ProdOrderComp."Flushing Method"::Manual) AND
                   (Quantity >= 0)
                THEN BEGIN
                  QtyRemainingToBePicked :=
                    Quantity - CalcNextLevelProdOutput(ProdOrderComp) -
                    ProdOrderComp."Qty. Picked" + ProdOrderComp."Expected Quantity" - ProdOrderComp."Remaining Quantity";
                  IF QtyRemainingToBePicked > 0 THEN
                    ERROR(Text002,"Order No.",QtyRemainingToBePicked);
                  QtyChecked := TRUE;
                END;

              LinesExist :=
                WhseLinesExist(
                  DATABASE::"Prod. Order Component",
                  3,
                  "Order No.",
                  "Order Line No.",
                  "Prod. Order Comp. Line No.",
                  Quantity);
            END;
          "Entry Type"::Output:
            BEGIN
              TESTFIELD("Order Type","Order Type"::Production);
              LinesExist :=
                WhseLinesExist(
                  DATABASE::"Prod. Order Line",
                  3,
                  "Order No.",
                  "Order Line No.",
                  0,
                  Quantity);
            END;
          ELSE
            LinesExist := FALSE;
        END;

        IF LinesExist THEN BEGIN
          IF ("Item No." <> OldItemJnlLine."Item No.") AND
             (OldItemJnlLine."Item No." <> '')
          THEN
            FIELDERROR(
              "Item No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF ("Variant Code" <> OldItemJnlLine."Variant Code") AND
             (OldItemJnlLine."Variant Code" <> '')
          THEN
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF ("Location Code" <> OldItemJnlLine."Location Code") AND
             (OldItemJnlLine."Location Code" <> '')
          THEN
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF ("Unit of Measure Code" <> OldItemJnlLine."Unit of Measure Code") AND
             (OldItemJnlLine."Unit of Measure Code" <> '')
          THEN
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF (Quantity <> OldItemJnlLine.Quantity) AND
             (OldItemJnlLine.Quantity <> 0) AND
             NOT QtyChecked
          THEN
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));
        END;
      END;
    END;

    PROCEDURE ProdOrderLineVerifyChange@12(VAR NewProdOrderLine@1000 : Record 5406;VAR OldProdOrderLine@1001 : Record 5406);
    BEGIN
      WITH NewProdOrderLine DO
        IF WhseLinesExist(
             DATABASE::"Prod. Order Line",
             Status,
             "Prod. Order No.",
             "Line No.",
             0,
             Quantity)
        THEN BEGIN
          IF Status <> OldProdOrderLine.Status THEN
            FIELDERROR(
              Status,
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF "Prod. Order No." <> OldProdOrderLine."Prod. Order No." THEN
            FIELDERROR(
              "Prod. Order No.",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF "Line No." <> OldProdOrderLine."Line No." THEN
            FIELDERROR(
              "Line No.",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF "Item No." <> OldProdOrderLine."Item No." THEN
            FIELDERROR(
              "Item No.",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF "Variant Code" <> OldProdOrderLine."Variant Code" THEN
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF "Location Code" <> OldProdOrderLine."Location Code" THEN
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF "Unit of Measure Code" <> OldProdOrderLine."Unit of Measure Code" THEN
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF "Due Date" <> OldProdOrderLine."Due Date" THEN
            FIELDERROR(
              "Due Date",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF Quantity <> OldProdOrderLine.Quantity THEN
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));
        END;
    END;

    PROCEDURE ProdOrderLineDelete@8(VAR ProdOrderLine@1000 : Record 5406);
    BEGIN
      WITH ProdOrderLine DO
        IF WhseLinesExist(
             DATABASE::"Prod. Order Line",
             Status,
             "Prod. Order No.",
             "Line No.",
             0,
             Quantity)
        THEN
          ERROR(
            Text001,
            TABLECAPTION,
            TableCaptionValue);
    END;

    PROCEDURE AssemblyLineVerifyChange@14(VAR NewAssemblyLine@1000 : Record 901;VAR OldAssemblyLine@1001 : Record 901);
    VAR
      Location@1002 : Record 14;
    BEGIN
      IF OldAssemblyLine.Type <> OldAssemblyLine.Type::Item THEN
        EXIT;

      WITH NewAssemblyLine DO
        IF WhseLinesExist(
             DATABASE::"Assembly Line",
             "Document Type",
             "Document No.",
             "Line No.",
             0,
             Quantity)
        THEN BEGIN
          IF "Document Type" <> OldAssemblyLine."Document Type" THEN
            FIELDERROR(
              "Document Type",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Document No." <> OldAssemblyLine."Document No." THEN
            FIELDERROR(
              "Document No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Line No." <> OldAssemblyLine."Line No." THEN
            FIELDERROR(
              "Line No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "No." <> OldAssemblyLine."No." THEN
            FIELDERROR(
              "No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Variant Code" <> OldAssemblyLine."Variant Code" THEN
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Location Code" <> OldAssemblyLine."Location Code" THEN
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Unit of Measure Code" <> OldAssemblyLine."Unit of Measure Code" THEN
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Due Date" <> OldAssemblyLine."Due Date" THEN
            FIELDERROR(
              "Due Date",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF Quantity <> OldAssemblyLine.Quantity THEN
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Quantity per" <> OldAssemblyLine."Quantity per" THEN
            FIELDERROR(
              "Quantity per",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF Location.GET("Location Code") AND NOT Location."Require Shipment" THEN
            IF "Quantity to Consume" <> OldAssemblyLine."Quantity to Consume" THEN
              FIELDERROR(
                "Quantity to Consume",
                STRSUBSTNO(Text000,
                  WhseActivLine.TABLECAPTION,
                  TABLECAPTION));
        END;
    END;

    PROCEDURE AssemblyLineDelete@13(VAR AssemblyLine@1000 : Record 901);
    BEGIN
      IF AssemblyLine.Type <> AssemblyLine.Type::Item THEN
        EXIT;

      IF WhseLinesExist(
           DATABASE::"Assembly Line",
           AssemblyLine."Document Type",
           AssemblyLine."Document No.",
           AssemblyLine."Line No.",
           0,
           AssemblyLine.Quantity)
      THEN
        ERROR(
          Text001,
          AssemblyLine.TABLECAPTION,
          TableCaptionValue);
    END;

    PROCEDURE CalcNextLevelProdOutput@18(ProdOrderComp@1000 : Record 5407) : Decimal;
    VAR
      Item@1001 : Record 27;
      WhseEntry@1002 : Record 7312;
      ProdOrderLine@1003 : Record 5406;
      OutputBase@1004 : Decimal;
    BEGIN
      Item.GET(ProdOrderComp."Item No.");
      IF Item."Replenishment System" = Item."Replenishment System"::Purchase THEN
        EXIT(0);

      ProdOrderLine.SETRANGE(Status,ProdOrderComp.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderComp."Prod. Order No.");
      ProdOrderLine.SETRANGE("Item No.",ProdOrderComp."Item No.");
      ProdOrderLine.SETRANGE("Planning Level Code",ProdOrderComp."Planning Level Code");

      IF ProdOrderLine.FINDFIRST THEN BEGIN
        WhseEntry.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        WhseEntry.SETRANGE("Source Type",DATABASE::"Item Journal Line");
        WhseEntry.SETRANGE("Source Subtype",5); // Output Journal
        WhseEntry.SETRANGE("Source No.",ProdOrderLine."Prod. Order No.");
        WhseEntry.SETRANGE("Source Line No.",ProdOrderLine."Line No.");
        WhseEntry.SETRANGE("Reference No.",ProdOrderLine."Prod. Order No.");
        WhseEntry.SETRANGE("Item No.",ProdOrderLine."Item No.");

        IF WhseEntry.FINDSET THEN
          REPEAT
            OutputBase += WhseEntry.Quantity;
          UNTIL WhseEntry.NEXT = 0;
      END;

      EXIT(OutputBase);
    END;

    BEGIN
    END.
  }
}

