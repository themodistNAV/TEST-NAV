OBJECT Codeunit 9062356 Panel Page Management
{
  OBJECT-PROPERTIES
  {
    Date=24/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Panel@1000000012 : Record 9062363;
      PanelEventArgs@1000000017 : Record 9062370;
      PanelTimestampTmp@1000000005 : TEMPORARY Record 9062489;
      PanelResponse@1000000015 : Codeunit 9062322;
      PanelTimestampToolkit@1000000013 : Codeunit 9062385;
      PanelToolkit@1000000004 : Codeunit 9062320;
      SmartFilterManagement@1000000002 : Codeunit 9062231;
      TnpToolkit@1000000006 : Codeunit 9062230;
      FileSystem@1000000019 : Codeunit 9062264;
      PanelCreated@1000000001 : Boolean;
      PanelCreatedDateTime@1000000011 : DateTime;
      PanelSequence@1000000000 : Integer;
      SettingsRetrieved@1000000016 : Boolean;
      WebPanelsInWin@1000000014 : Boolean;
      PanelEventArgsSet@1000000018 : Boolean;
      ControlType@9062229 : Integer;

    PROCEDURE "--- General ---"@1000000017();
    BEGIN
    END;

    PROCEDURE InitialisePage@1000000027(VAR pUseDesktopControl@1000000004 : Boolean;VAR pUseWebControl@9062229 : Boolean;VAR pBlob@1000000001 : Record 99008535;pWebControl@1000000000 : DotNet "'TheNavPeople.HtmlPanels.9.0.0.0, Version=9.0.0.0, Culture=neutral, PublicKeyToken=01497f3fa397f2cf'.TheNavPeople.HtmlPanels.IModernUIHtmlPanelControl";VAR pPageCaption@1000000002 : Text[1024]);
    VAR
      lControlType@9062230 : Integer;
    BEGIN
      //DOC NA2016.10 - Initialising panel page
      //  <> pUseDesktopControl: Target desktop control flag
      //  <> pUseWebControl: Target web control flag
      //  <> pBlob: Target BLOB (for Windows client)
      //  -> pWebControl: Web control (for web client)
      //  <> pPageCaption: Target page caption

      PanelToolkit.VerifySystemBehaviour();

      lControlType := DetectControlType();
      pUseDesktopControl := (lControlType = Panel."Control Type"::Desktop);
      pUseWebControl := (lControlType = Panel."Control Type"::Web);
      pPageCaption := BuildPageCaption();

      CLEAR(pBlob);
      CLEAR(PanelSequence);

      CASE (ControlType) OF
        Panel."Control Type"::Desktop:
          DesktopInitialise(pBlob);
        Panel."Control Type"::Web:
          WebInitialise(pWebControl);
      END;
    END;

    PROCEDURE InitialiseStdPage@9062237(VAR pStdPanelBuffer@9062229 : ARRAY [20] OF Record 9062740;VAR pPageCaption@9062230 : Text[1024]);
    BEGIN
      //DOC NA2016.10 - Initialising standard panel page
      //  <> pStdPanelBuffer: Standard panel buffer
      //  <> pPageCaption: Target page caption

      PanelToolkit.VerifySystemBehaviour();

      pPageCaption := BuildPageCaption();

      CLEAR(PanelSequence);

      StdInitialise(pStdPanelBuffer);
    END;

    PROCEDURE UpdatePageForPanel@1000000030(VAR pPanel@1000000000 : Record 9062363;VAR pBlob@1000000003 : Record 99008535;pWebControl@1000000002 : DotNet "'TheNavPeople.HtmlPanels.9.0.0.0, Version=9.0.0.0, Culture=neutral, PublicKeyToken=01497f3fa397f2cf'.TheNavPeople.HtmlPanels.IModernUIHtmlPanelControl";pUpdateType@1000000001 : Integer);
    BEGIN
      //DOC NA2016.10 - Updating page for panel
      //  <> pPanel: The panel
      //  <> pBlob: Target BLOB (for Windows client)
      //  -> pWebControl: Web control (for web client)
      //  -> pUpdateType: Update type (see Panel."Update Type" field for option list)

      CLEAR(PanelEventArgs);
      CLEAR(PanelEventArgsSet);

      IF ( NOT (RetrieveFiltersFromPanel(pPanel))) THEN
        EXIT;

      UpdatePage(pPanel, pBlob, pWebControl, pUpdateType);
    END;

    PROCEDURE UpdatePageForPanelSelection@1000000034(VAR pPanelSelection@1000000000 : Record 9062371;VAR pPanel@1000000004 : Record 9062363;VAR pBlob@1000000003 : Record 99008535;pWebControl@1000000002 : DotNet "'TheNavPeople.HtmlPanels.9.0.0.0, Version=9.0.0.0, Culture=neutral, PublicKeyToken=01497f3fa397f2cf'.TheNavPeople.HtmlPanels.IModernUIHtmlPanelControl";pUpdateType@1000000001 : Integer);
    BEGIN
      //DOC NA2016.10 - Updating page for panel selection
      //  <> pPanelSelection: The panel selection
      //  <> pPanel: The panel
      //  <> pBlob: Target BLOB (for Windows client)
      //  -> pWebControl: Web control (for web client)
      //  -> pUpdateType: Update type (see Panel."Update Type" field for option list)

      CLEAR(PanelEventArgs);
      CLEAR(PanelEventArgsSet);

      IF ( NOT (RetrieveFiltersFromPanelSelection(pPanelSelection, pPanel))) THEN
        EXIT;

      UpdatePage(pPanel, pBlob, pWebControl, pUpdateType);
    END;

    LOCAL PROCEDURE UpdateStdPageForPanel@9062232(VAR pPanel@9062232 : Record 9062363;VAR pStdPanelBuffer@9062229 : ARRAY [20] OF Record 9062740);
    BEGIN
      //DOC NA2016.10 - Updating standard page for panel
      //  <> pPanel: The panel
      //  <> pStdPanelBuffer: Standard panel buffer
    END;

    PROCEDURE UpdateStdPageForPanelSelection@9062241(VAR pPanelSelection@9062230 : Record 9062371;VAR pPanel@9062229 : Record 9062363;VAR pStdPanelBuffer@9062232 : ARRAY [20] OF Record 9062740);
    BEGIN
      //DOC NA2016.10 - Updating standard page for panel selection
      //  <> pPanelSelection: The panel selection
      //  <> pPanel: The panel
      //  <> pStdPanelBuffer: Standard panel buffer

      CLEAR(PanelEventArgs);
      CLEAR(PanelEventArgsSet);

      IF ( NOT (RetrieveFiltersFromPanelSelection(pPanelSelection, pPanel))) THEN
        EXIT;

      UpdateStdPage(pPanel, pStdPanelBuffer);
    END;

    PROCEDURE EditPanel@1000000008();
    BEGIN
      //DOC NA2015.1 - Editing the current panel

      IF (Panel.Code = '') THEN
        EXIT;

      PAGE.RUN(PAGE::"Panel Card", Panel);
    END;

    LOCAL PROCEDURE "--- Internal ---"@1000000028();
    BEGIN
    END;

    LOCAL PROCEDURE UpdatePage@1000000007(VAR pPanel@1000000001 : Record 9062363;VAR pBlob@1000000003 : Record 99008535;pWebControl@1000000002 : DotNet "'TheNavPeople.HtmlPanels.9.0.0.0, Version=9.0.0.0, Culture=neutral, PublicKeyToken=01497f3fa397f2cf'.TheNavPeople.HtmlPanels.IModernUIHtmlPanelControl";pUpdateType@1000000000 : Integer);
    BEGIN
      //DOC NA2016.10 - Updating page
      //  <> pPanel: The panel
      //  <> pBlob: Target BLOB (for Windows client)
      //  -> pWebControl: Web control (for web client)
      //  -> pUpdateType: Update type (see Panel."Update Type" field for option list)

      IF (pPanel.Code = Panel.Code) THEN
        EXIT;

      Panel := pPanel;

      CASE (ControlType) OF
        Panel."Control Type"::Desktop:
          DesktopUpdate(pBlob, pUpdateType);
        Panel."Control Type"::Web:
          WebUpdate(pWebControl, pUpdateType);
      END;

      pPanel := Panel;
    END;

    LOCAL PROCEDURE UpdateStdPage@9062244(VAR pPanel@9062232 : Record 9062363;VAR pStdPanelBuffer@9062229 : ARRAY [20] OF Record 9062740);
    BEGIN
      //DOC NA2016.10 - Updating standard page
      //  <> pPanel: The panel
      //  <> pStdPanelBuffer: Standard panel buffer

      IF (pPanel.Code = Panel.Code) THEN
        EXIT;

      Panel := pPanel;

      StdUpdate(pStdPanelBuffer);

      pPanel := Panel;
    END;

    LOCAL PROCEDURE WebPanelsInWindowsClient@1000000020() : Boolean;
    BEGIN
      //DOC NA2015.4 - Returning if web panels should be used for windows client
      //  <- Answer

      GetSettings();
      EXIT(WebPanelsInWin);
    END;

    LOCAL PROCEDURE RetrieveFiltersFromPanel@1000000031(VAR pPanel@1000000000 : Record 9062363) : Boolean;
    VAR
      lPanelCode@1000000001 : Code[20];
      lFilterGroup@1000000002 : Integer;
    BEGIN
      //DOC NA2015.8 - Retrieving filters from panel
      //  <> pPanel: The recordset
      //  <- TRUE = Necessary filters found, FALSE = Not

      IF (pPanel.Code <> '') THEN
        lPanelCode := pPanel.Code;

      FOR lFilterGroup := 6 DOWNTO 0 DO
      BEGIN
        pPanel.FILTERGROUP(lFilterGroup);
        IF (lPanelCode = '') THEN
          IF (pPanel.GETFILTER(Code) <> '') THEN
            lPanelCode := pPanel.GETRANGEMIN(Code);
        IF (pPanel.GETFILTER("Parameter 1 Filter") <> '') THEN
          PanelEventArgs."Parameter 1" := pPanel.GETRANGEMIN("Parameter 1 Filter");
        IF (pPanel.GETFILTER("Parameter 2 Filter") <> '') THEN
          PanelEventArgs."Parameter 2" := pPanel.GETRANGEMIN("Parameter 2 Filter");
        IF (pPanel.GETFILTER("Parameter 3 Filter") <> '') THEN
          PanelEventArgs."Parameter 3" := pPanel.GETRANGEMIN("Parameter 3 Filter");
        IF (pPanel.GETFILTER("Parameter 4 Filter") <> '') THEN
          PanelEventArgs."Parameter 4" := pPanel.GETRANGEMIN("Parameter 4 Filter");
        IF (pPanel.GETFILTER("Parameter 5 Filter") <> '') THEN
          PanelEventArgs."Parameter 5" := pPanel.GETRANGEMIN("Parameter 5 Filter");
        IF (pPanel.GETFILTER("Parameter 6 Filter") <> '') THEN
          PanelEventArgs."Parameter 6" := pPanel.GETRANGEMIN("Parameter 6 Filter");
      END;
      pPanel.FILTERGROUP(0);

      IF ((lPanelCode <> '') AND (lPanelCode <> pPanel.Code)) THEN
        pPanel.GET(lPanelCode);

      PanelEventArgsSet := ((PanelEventArgsSet) OR (PanelEventArgs."Parameter 1" <> '') OR (PanelEventArgs."Parameter 2" <> '') OR
         (PanelEventArgs."Parameter 3" <> '') OR (PanelEventArgs."Parameter 4" <> '') OR (PanelEventArgs."Parameter 5" <> '') OR
         (PanelEventArgs."Parameter 6" <> ''));

      EXIT(pPanel.Code <> '');
    END;

    LOCAL PROCEDURE RetrieveFiltersFromPanelSelection@1000000019(VAR pPanelSelection@1000000004 : Record 9062371;VAR pPanel@1000000001 : Record 9062363) : Boolean;
    VAR
      lPanelSelection@1000000007 : Record 9062371;
      lPanelEventArgs@1000000002 : Record 9062370;
      lPanelEventArgsSet@1000000008 : Boolean;
      lPanelCode@1000000000 : Code[20];
      lPageId@1000000005 : Integer;
      lPanelIndex@1000000006 : Integer;
      lFilterGroup@1000000003 : Integer;
    BEGIN
      //DOC NA2016.10 - Retrieving panel code filter from "Panel Selection" record
      //  <> pPanelSelection: The record
      //  <> pPanel: Target panel
      //  <- TRUE = Necessary filters found, FALSE = Not

      lPanelCode := Panel.Code;
      IF (pPanel.Code <> '') THEN
      BEGIN
        lPanelEventArgs.CopyParametersFromPanel(pPanel);
        lPanelEventArgsSet := TRUE;
      END;

      IF (lPanelCode = '') THEN
      BEGIN
        CLEAR(lPageId);
        CLEAR(lPanelIndex);

        FOR lFilterGroup := 6 DOWNTO 0 DO
        BEGIN
          pPanelSelection.FILTERGROUP(lFilterGroup);
          IF (pPanelSelection.GETFILTER("Page ID") <> '') THEN
            lPageId := pPanelSelection.GETRANGEMIN("Page ID");
          IF (pPanelSelection.GETFILTER("Panel Index") <> '') THEN
            lPanelIndex := pPanelSelection.GETRANGEMIN("Panel Index");
          IF (pPanelSelection.GETFILTER("Panel Code") <> '') THEN
            lPanelCode := pPanelSelection.GETRANGEMIN("Panel Code");
        END;
        pPanelSelection.FILTERGROUP(0);

        IF ((lPanelCode = '') AND (lPageId <> 0) AND (lPanelIndex <> 0)) THEN
        BEGIN
          lPanelSelection.RESET();
          lPanelSelection.SETRANGE("Page ID", lPageId);
          lPanelSelection.SETRANGE("User ID", USERID());
          IF (lPanelSelection.FINDFIRST()) THEN
            lPanelCode := lPanelSelection.GetPanelCode(lPanelIndex);
        END;
      END;

      IF (lPanelCode <> '') THEN
      BEGIN
        pPanel.GET(lPanelCode);
        IF (lPanelEventArgsSet) THEN
          pPanel.CopyParametersFromPanelEventArgs(lPanelEventArgs);
      END;

      EXIT(pPanel.Code <> '');
    END;

    LOCAL PROCEDURE DetectControlType@1000000024() : Integer;
    VAR
      lActiveSession@9062230 : Record 2000000110;
      lClientType@9062229 : Integer;
    BEGIN
      //DOC NA2016.10 - Detecting control type
      //  <- Control type

      ControlType := Panel."Control Type"::" ";

      lClientType := TnpToolkit.GetClientType();
      IF (lClientType = lActiveSession."Client Type"::"Windows Client") THEN
        IF (WebPanelsInWindowsClient()) THEN
          lClientType := lActiveSession."Client Type"::"Web Client";

      CASE (lClientType) OF
        lActiveSession."Client Type"::"Windows Client" :
        //lActiveSession."Client Type"::Desktop:
          ControlType := Panel."Control Type"::Desktop;
        ELSE
          ControlType := Panel."Control Type"::Web;
      END;

      EXIT(ControlType);
    END;

    LOCAL PROCEDURE AddPanelToHistory@1000000002() : Boolean;
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2015.8 - Adding the current panel to history
      //  <- TRUE: Panel added, FALSE: Panel already in history

      lResult := FALSE;

      IF ( NOT (PanelTimestampTmp.GET(Panel.Code))) THEN
      BEGIN
        PanelSequence += 1;
        PanelTimestampTmp.INIT();
        PanelTimestampTmp.VALIDATE("Panel Code", Panel.Code);
        PanelTimestampTmp.VALIDATE(Sequence, PanelSequence);
        PanelTimestampTmp.INSERT(TRUE);
        lResult := TRUE;
      END;

      PanelTimestampTmp.VALIDATE("Date Time", PanelTimestampToolkit.Get(Panel.Code));
      PanelTimestampTmp.CopyParametersFromPanel(Panel);
      PanelTimestampTmp.MODIFY(TRUE);

      EXIT(lResult);
    END;

    LOCAL PROCEDURE IsPanelsHistoryEmpty@1000000004(pPanelCode@1000000000 : Code[20]) : Boolean;
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2016.14 - Returning if panels history is empty
      //  -> pPanelCode: The current panel code (to be excluded from this test);
      //  <- The response

      PanelTimestampTmp.RESET();
      PanelTimestampTmp.SETFILTER("Panel Code", '<>%1', pPanelCode);
      lResult := PanelTimestampTmp.ISEMPTY();
      PanelTimestampTmp.RESET();
      EXIT(lResult);
    END;

    LOCAL PROCEDURE RemovePanelFromHistory@1000000006() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2015.8 - Removing panel from history
      //  <- TRUE: Panel removed, FALSE: Only one panel left in history

      lResult := FALSE;
      PanelTimestampTmp.RESET();
      IF (PanelTimestampTmp.COUNT > 1) THEN
      BEGIN
        PanelSequence -= 1;
        PanelTimestampTmp.SETCURRENTKEY(Sequence);
        PanelTimestampTmp.FINDLAST();
        PanelTimestampTmp.DELETE();
        PanelTimestampTmp.SETCURRENTKEY(Sequence);
        PanelTimestampTmp.FINDLAST();
        Panel.GET(PanelTimestampTmp."Panel Code");
        Panel.CopyParametersFromPanelTimestamp(PanelTimestampTmp);
        IF ((Panel."Parameter 1" <> '') OR (Panel."Parameter 2" <> '') OR (Panel."Parameter 3" <> '') OR (Panel."Parameter 4" <> '') OR
            (Panel."Parameter 5" <> '') OR (Panel."Parameter 6" <> '')) THEN
        BEGIN
          PanelEventArgs.CopyParametersFromPanelTimestamp(PanelTimestampTmp);
          PanelEventArgsSet := TRUE;
        END;
        lResult := TRUE;
      END;
      EXIT(lResult);
    END;

    LOCAL PROCEDURE BuildPageCaption@1000000021() : Text;
    VAR
      lPanel@1000000000 : Record 9062363;
      lPanelPageCaption@1000000001 : Text;
    BEGIN
      //DOC NA2015.4 - Building and returning panel page caption
      //  <- The caption

      lPanelPageCaption := Panel.PageCaption();

      IF (lPanelPageCaption = '') THEN
        lPanelPageCaption := Panel.Code;

      EXIT(lPanelPageCaption);
    END;

    LOCAL PROCEDURE HandlePanelEvent@1000000023(VAR pPanel@1000000000 : Record 9062363;VAR pPageCaption@1000000006 : Text[1024]) : Boolean;
    VAR
      lPanelEventArgs@1000000007 : Record 9062370;
    BEGIN
      //DOC NA2015.9 - Handling panel event
      //  <> pPanel: Panel
      //  <> pPageCaption: Target page caption
      //  <- TRUE: Refresh page, FALSE: Don't do anything

      IF (PanelResponse.RUN()) THEN
      BEGIN
        PanelResponse.GetPanelEventArgs(lPanelEventArgs);

        CASE (lPanelEventArgs."Action Type") OF
          lPanelEventArgs."Action Type"::"Open Panel":
            BEGIN
              IF (Panel.GET(lPanelEventArgs."Panel Code")) THEN
              BEGIN
                Panel.CopyParametersFromPanelEventArgs(lPanelEventArgs);
                IF (AddPanelToHistory()) THEN
                BEGIN
                  PanelEventArgs := lPanelEventArgs;
                  PanelEventArgsSet := TRUE;
                  lPanelEventArgs."Refresh Interface" := TRUE;
                END;
              END;
            END;
          lPanelEventArgs."Action Type"::Back:
            IF (RemovePanelFromHistory()) THEN
              lPanelEventArgs."Refresh Interface" := TRUE;
        END;

        IF ( NOT (lPanelEventArgs."Refresh Interface")) THEN
          lPanelEventArgs."Refresh Interface" := PanelTimestampChanged(Panel.Code);
      END
      ELSE
        MESSAGE(GETLASTERRORTEXT());

      pPageCaption := BuildPageCaption();

      EXIT(lPanelEventArgs."Refresh Interface");
    END;

    LOCAL PROCEDURE "--- Desktop-Specific ---"@1000000032();
    BEGIN
    END;

    LOCAL PROCEDURE DesktopInitialise@1000000035(VAR pBlob@1000000000 : Record 99008535);
    BEGIN
      //DOC NA2016.10 - Initialising panel for desktop control
      //  <> pBlob: Target BLOB

      IF (pBlob.ISEMPTY) THEN
        pBlob.INSERT();
    END;

    LOCAL PROCEDURE DesktopUpdate@1000000001(VAR pPanelBlob@1000000001 : Record 99008535;pUpdateType@1000000000 : Integer);
    VAR
      lPanelRequest@1000000002 : Codeunit 9062321;
      lFilePath@1000000003 : Text;
      lUpdateType@1000000004 : Integer;
    BEGIN
      //DOC NA2016.10 - Updating panel for desktop control
      //  <> pBlob: Target BLOB
      //  -> pUpdateType: Update mode (see Panel.Update field)

      lUpdateType := pUpdateType;

      IF (lUpdateType = Panel."Update Type"::" ") THEN
        IF ((PanelCreated) AND (Panel.Code <> '')) THEN
          IF (Panel."Auto Refresh Every" > 0) THEN
            IF (PanelCreatedDateTime <> 0DT) THEN
            BEGIN
              IF (CURRENTDATETIME() - PanelCreatedDateTime >= Panel."Auto Refresh Every" * 1000) THEN
              BEGIN
                PanelCreated := FALSE;
                lUpdateType := Panel."Update Type"::Properties;
              END;
            END
            ELSE
            BEGIN
              PanelCreated := FALSE;
              lUpdateType := Panel."Update Type"::Properties;
            END;

      IF (PanelCreated) THEN
      BEGIN
        PanelCreated := ( NOT (PanelTimestampChanged(Panel.Code)));
        IF ( NOT (PanelCreated)) THEN
          lUpdateType := Panel."Update Type"::Full;
      END;

      IF (PanelCreated) THEN
        EXIT;

      IF (PanelEventArgsSet) THEN
      BEGIN
        lPanelRequest.SetPanelEventArgs(PanelEventArgs);
        Panel.CopyParametersFromPanelEventArgs(PanelEventArgs);
      END
      ELSE
        IF ((Panel."Parameter 1" <> '') OR (Panel."Parameter 2" <> '') OR (Panel."Parameter 3" <> '') OR
            (Panel."Parameter 4" <> '') OR (Panel."Parameter 5" <> '') OR (Panel."Parameter 6" <> '')) THEN
        BEGIN
          PanelEventArgs.CopyParametersFromPanel(Panel);
          lPanelRequest.SetPanelEventArgs(PanelEventArgs);
        END;
      lPanelRequest.SetExcludeBack(IsPanelsHistoryEmpty(Panel.Code));
      lPanelRequest.BuildPanelWin(Panel.Code, lUpdateType, pPanelBlob);
      pPanelBlob.MODIFY();
      pPanelBlob.CALCFIELDS(Blob);

      PanelCreated  := TRUE;
      PanelCreatedDateTime := CURRENTDATETIME();

      AddPanelToHistory();
    END;

    PROCEDURE DesktopOnClick@1000000013(VAR pPanel@1000000003 : Record 9062363;pEventArgs@1000000002 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.PanelEventArgs";VAR pBlob@1000000001 : Record 99008535;VAR pPageCaption@1000000000 : Text[1024]) : Boolean;
    BEGIN
      //DOC NA2016.10 - Handling "Click" event (for desktop control)
      //  <> pPanel: Target panel
      //  -> pEventArgs: Event arguments
      //  <> pBlob: Target panel BLOB record
      //  <> pPageCaption: Target page caption
      //  <- TRUE: Refresh page, FALSE: Don't do anything

      EXIT(DesktopHandlePanelEvent(pPanel, pEventArgs, pBlob, pPageCaption));
    END;

    PROCEDURE DesktopOnTileDrag@1000000014(VAR pPanel@1000000003 : Record 9062363;pEventArgs@1000000002 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.PanelEventArgs";VAR pBlob@1000000001 : Record 99008535;VAR pPageCaption@1000000000 : Text[1024]) : Boolean;
    BEGIN
      //DOC NA2016.10 - Handling "Tile Drag" event (for desktop control)
      //  <> pPanel: Target panel
      //  -> pEventArgs: Event arguments
      //  <> pBlob: Target panel BLOB record
      //  <> pPageCaption: Target page caption
      //  <- TRUE: Refresh page, FALSE: Don't do anything

      EXIT(DesktopHandlePanelEvent(pPanel, pEventArgs, pBlob, pPageCaption));
    END;

    PROCEDURE DesktopOnMenuClick@1000000016(VAR pPanel@1000000003 : Record 9062363;pEventArgs@1000000002 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.PanelEventArgs";VAR pBlob@1000000001 : Record 99008535;VAR pPageCaption@1000000000 : Text[1024]) : Boolean;
    BEGIN
      //DOC NA2016.10 - Handling "Menu Click" event (for desktop control)
      //  <> pPanel: Target panel
      //  -> pEventArgs: Event arguments
      //  <> pBlob: Target panel BLOB record
      //  <> pPageCaption: Target page caption
      //  <- TRUE: Refresh page, FALSE: Don't do anything

      EXIT(DesktopHandlePanelEvent(pPanel, pEventArgs, pBlob, pPageCaption));
    END;

    LOCAL PROCEDURE DesktopHandlePanelEvent@1000000000(VAR pPanel@1000000002 : Record 9062363;pEventArgs@1000000000 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.PanelEventArgs";VAR pBlob@1000000004 : Record 99008535;VAR pPageCaption@1000000006 : Text[1024]) : Boolean;
    VAR
      lRefreshInterface@1000000001 : Boolean;
    BEGIN
      //DOC NA2016.10 - Handling panel event (for desktop control)
      //  <> pPanel: Target panel
      //  -> pEventArgs: Event arguments
      //  <> pBlob: Target panel BLOB
      //  <> pPageCaption: Target page caption
      //  <- TRUE: Refresh page, FALSE: Don't do anything

      Panel := pPanel;

      CLEAR(PanelResponse);
      PanelResponse.InitialiseWin(Panel.Code, pEventArgs);
      lRefreshInterface := HandlePanelEvent(Panel, pPageCaption);

      IF (lRefreshInterface) THEN
      BEGIN
        PanelCreated := FALSE;
        DesktopUpdate(pBlob, Panel."Update Type"::Full);
      END;

      pPanel := Panel;

      EXIT(lRefreshInterface);
    END;

    LOCAL PROCEDURE "--- Web-Specific ---"@1000000033();
    BEGIN
    END;

    LOCAL PROCEDURE WebInitialise@9062239(pWebControl@9062229 : DotNet "'TheNavPeople.HtmlPanels.9.0.0.0, Version=9.0.0.0, Culture=neutral, PublicKeyToken=01497f3fa397f2cf'.TheNavPeople.HtmlPanels.IModernUIHtmlPanelControl");
    BEGIN
      //DOC NA2016.10 - Initialising panel for web control
      //  -> pWebControl: The web control
    END;

    LOCAL PROCEDURE WebUpdate@9062242(pWebControl@9062230 : DotNet "'TheNavPeople.HtmlPanels.9.0.0.0, Version=9.0.0.0, Culture=neutral, PublicKeyToken=01497f3fa397f2cf'.TheNavPeople.HtmlPanels.IModernUIHtmlPanelControl";pUpdateType@9062229 : Integer);
    BEGIN
      //DOC NA2016.10 - Updating panel for web control
      //  -> pWebControl: The web control
      //  -> pUpdateType: Update type (see Panel."Update Type" field for option list)

      AddPanelToHistory();
    END;

    PROCEDURE WebOnControlAddInReady@1000000012(pWebControl@1000000000 : DotNet "'TheNavPeople.HtmlPanels.9.0.0.0, Version=9.0.0.0, Culture=neutral, PublicKeyToken=01497f3fa397f2cf'.TheNavPeople.HtmlPanels.IModernUIHtmlPanelControl");
    VAR
      lPanel@1000000003 : Record 9062363;
      PanelExport@1000000005 : XMLport 9062277;
      TempBlob@1000000006 : TEMPORARY Record 99008535;
      InputStr@1000000009 : InStream;
      OutputStr@1000000010 : OutStream;
      PanelContent@1000000008 : BigText;
    BEGIN
      //DOC NA2015.4 - Handling "Control Add-in Ready" event (for web control)
      //  -> pWebControl: Web control

      WebBuildTiles(pWebControl);
    END;

    PROCEDURE WebOnControlEvent@1000000005(VAR pPanel@1000000007 : Record 9062363;pWebControl@1000000006 : DotNet "'TheNavPeople.HtmlPanels.9.0.0.0, Version=9.0.0.0, Culture=neutral, PublicKeyToken=01497f3fa397f2cf'.TheNavPeople.HtmlPanels.IModernUIHtmlPanelControl";source@1000000004 : Text;name@1000000005 : Text;parameters@1000000000 : Text) : Boolean;
    VAR
      refreshPanel@1000000003 : Boolean;
      pageCaption@1000000001 : Text;
    BEGIN
      //DOC NA2015.9 - Handling "Control event" (for web control)
      //  <> pPanel: Panel
      //  -> pWebControl: Web control
      //  -> source: Source of the event
      //  -> name: Name of the function to call
      //  -> parameters: Parameters of the function
      //  <- TRUE: Refresh page, FALSE: Don't do anything

      Panel := pPanel;

      CLEAR(PanelResponse);
      PanelResponse.InitialiseWeb(Panel.Code, source, name, parameters);
      refreshPanel := HandlePanelEvent(Panel, pageCaption);

      IF (refreshPanel) THEN
        WebBuildTiles(pWebControl);

      pPanel := Panel;

      EXIT(refreshPanel);
    END;

    LOCAL PROCEDURE WebDrillDownField@1000000010(Parameter@1000000000 : Text);
    VAR
      PanelProperty@1000000005 : Record 9062433;
      lTile@1000000007 : Record 9062367;
      RunWithRecordRef@1000000004 : Codeunit 9062239;
      TnpUtils@1000000003 : Codeunit 9062229;
      DataTableView@1000000002 : Text[1024];
      Found@1000000001 : Boolean;
      TileId@1000000006 : Integer;
    BEGIN
      //DOC NA2015.4 - Performing a drill-down on a field (for web control)
      //  -> Parameter: Parameter

      IF (EVALUATE(TileId, Parameter)) THEN BEGIN
        PanelProperty.RESET();
        PanelProperty.SETRANGE("Parent Table ID", DATABASE::Tile);
        PanelProperty.SETRANGE("Parent Code", Panel.Code);
        PanelProperty.SETRANGE("Parent ID", TileId);
        PanelProperty.SETRANGE("Property Table ID", DATABASE::Tile);
        PanelProperty.SETRANGE("Property ID", lTile.FIELDNO(Info));
        IF (PanelProperty.FINDFIRST()) THEN BEGIN
          DataTableView := SmartFilterManagement.ApplySmartFilters(PanelProperty."Table Filter");
          RunWithRecordRef.RunPageForTableView(PanelProperty."Table ID", DataTableView, PanelProperty."Page ID", PanelProperty."Run Page Modally");
        END;
      END;
    END;

    LOCAL PROCEDURE WebBuildTiles@1000000011(pWebControl@1000000000 : DotNet "'TheNavPeople.HtmlPanels.9.0.0.0, Version=9.0.0.0, Culture=neutral, PublicKeyToken=01497f3fa397f2cf'.TheNavPeople.HtmlPanels.IModernUIHtmlPanelControl");
    VAR
      lPanel@1000000003 : Record 9062363;
      PanelExport@1000000005 : XMLport 9062277;
      ExportWebPanel@1000000001 : XMLport 9062331;
      PanelRequest@1000000004 : Codeunit 9062321;
      BuildPanel@1000000002 : Codeunit 9062324;
      TempBlob@1000000006 : TEMPORARY Record 99008535;
      InputStr@1000000009 : InStream;
      OutputStr@1000000010 : OutStream;
      PanelContent@1000000008 : BigText;
      UseNewXmlPort@1000000007 : Boolean;
      FilePath@1000000011 : Text;
    BEGIN
      //DOC NA2015.4 - Building web tiles
      //  -> pWebControl: Web control

      UseNewXmlPort := TRUE;

      TempBlob.Blob.CREATEOUTSTREAM(OutputStr);

      IF (Panel.Code <> '') THEN BEGIN
        IF (UseNewXmlPort) THEN
        BEGIN
          PanelRequest.SetPanelEventArgs(PanelEventArgs);
          PanelRequest.SetExcludeBack(IsPanelsHistoryEmpty(Panel.Code));
          PanelRequest.BuildPanelToCU(Panel.Code, BuildPanel);
          ExportWebPanel.SetBuildPanel(BuildPanel);
          ExportWebPanel.SETDESTINATION(OutputStr);
          ExportWebPanel.EXPORT();
        END
        ELSE
        BEGIN
          lPanel.GET(Panel.Code);
          lPanel.SETRECFILTER();
          PanelExport.SETTABLEVIEW(lPanel);
          PanelExport.SETDESTINATION(OutputStr);
          PanelExport.EXPORT();
        END;

        TempBlob.Blob.CREATEINSTREAM(InputStr);
        PanelContent.READ(InputStr);

        pWebControl.SetData(PanelContent);
      END;
    END;

    LOCAL PROCEDURE "--- Standard-Specific ---"@9062229();
    BEGIN
    END;

    LOCAL PROCEDURE StdInitialise@9062235(VAR pStdPanelBuffer@9062229 : ARRAY [20] OF Record 9062740);
    BEGIN
      //DOC NA2016.10 - Initialisation (for standard panel)
      //  <> pStdPanelBuffer: Target standard panel buffer

      StdBuildTiles(pStdPanelBuffer);
    END;

    LOCAL PROCEDURE StdUpdate@9062238(VAR pStdPanelBuffer@9062229 : ARRAY [20] OF Record 9062740);
    BEGIN
      //DOC NA2016.10 - Update (for standard panel)
      //  <> pStdPanelBuffer: Target standard panel buffer

      StdBuildTiles(pStdPanelBuffer);
    END;

    LOCAL PROCEDURE StdBuildTiles@9062240(VAR pStdPanelBuffer@9062231 : ARRAY [20] OF Record 9062740);
    VAR
      lSystemColour@9062234 : Record 9062336;
      lTileTmp@9062233 : TEMPORARY Record 9062367;
      lTileCount@9062232 : Integer;
      lBuildPanel@9062229 : Codeunit 9062324;
      lPanelRequest@9062230 : Codeunit 9062321;
    BEGIN
      //DOC NA2016.10 - Building tiles (for standard panel)
      //  <> pStdPanelBuffer: Target standard panel buffer

      CLEAR(pStdPanelBuffer);

      lPanelRequest.SetExcludeBack(IsPanelsHistoryEmpty(Panel.Code));
      lPanelRequest.BuildPanelToCU(Panel.Code, lBuildPanel);
      lBuildPanel.GetTiles(lTileTmp);

      lTileCount := 0;
      lTileTmp.RESET();
      IF (lTileTmp.FINDSET()) THEN
      REPEAT
        lTileCount += 1;

        pStdPanelBuffer[lTileCount]."Panel Code" := lTileTmp."Panel Code";
        pStdPanelBuffer[lTileCount]."Tile ID" := lTileTmp.ID;
        pStdPanelBuffer[lTileCount]."Tile Integer Visible" := TRUE;
        pStdPanelBuffer[lTileCount]."Tile Decimal Visible" := FALSE;

        IF (lTileTmp."Show Text") THEN
          pStdPanelBuffer[lTileCount]."Tile Caption" := lTileTmp.Text;

        IF (lTileTmp."Show Info") THEN
          IF (EVALUATE(pStdPanelBuffer[lTileCount]."Tile Decimal Value", lTileTmp.Info)) THEN;

        pStdPanelBuffer[lTileCount]."Tile Integer Value" := ROUND(pStdPanelBuffer[lTileCount]."Tile Decimal Value", 1);

        IF ( NOT (lSystemColour.GET(lTileTmp."Background Colour Code"))) THEN
          CLEAR(lSystemColour);
        pStdPanelBuffer[lTileCount]."Tile Style" := FORMAT(lSystemColour."Control Style");

      UNTIL ((lTileTmp.NEXT() = 0) OR (lTileCount >= ARRAYLEN(pStdPanelBuffer)));
    END;

    PROCEDURE StdDrillDownField@9062231(Panel@9062229 : Record 9062363;Parameter@1000000000 : Text);
    VAR
      PanelProperty@1000000005 : Record 9062433;
      Tile@9062230 : Record 9062367;
      RunWithRecordRef@1000000004 : Codeunit 9062239;
      TnpUtils@1000000003 : Codeunit 9062229;
      DataTableView@1000000002 : Text[1024];
      Found@1000000001 : Boolean;
      TileId@1000000006 : Integer;
    BEGIN
      IF (EVALUATE(TileId, Parameter)) THEN BEGIN
        PanelProperty.RESET();
        PanelProperty.SETRANGE("Parent Table ID", DATABASE::Tile);
        PanelProperty.SETRANGE("Parent Code", Panel.Code);
        PanelProperty.SETRANGE("Parent ID", TileId);
        PanelProperty.SETRANGE("Property Table ID", DATABASE::Tile);
        PanelProperty.SETRANGE("Property ID", Tile.FIELDNO(Info));
        IF (PanelProperty.FINDFIRST()) THEN BEGIN
          DataTableView := SmartFilterManagement.ApplySmartFilters(PanelProperty."Table Filter");
          RunWithRecordRef.RunPageForTableView(PanelProperty."Table ID", DataTableView, PanelProperty."Page ID", PanelProperty."Run Page Modally");
        END;
      END;
    END;

    PROCEDURE StdProcessPanelEvent@1000000003(Panel@9062229 : Record 9062363;source@1000000004 : Text;name@1000000005 : Text;parameters@1000000000 : Text;VAR StdPanelBuffer@9062230 : ARRAY [20] OF Record 9062740) : Boolean;
    VAR
      lCurrentPanelCode@1000000001 : Code[20];
      refreshPanel@1000000003 : Boolean;
      lResult@9062231 : Boolean;
    BEGIN
      lResult := FALSE;
      IF (parameters <> '') THEN BEGIN
        IF (Panel.Code = '') THEN
        BEGIN
          UpdateStdPageForPanel(Panel, StdPanelBuffer);
          lResult := TRUE;
        END;
        lCurrentPanelCode := Panel.Code;
        CLEAR(PanelResponse);
        refreshPanel := PanelResponse.HandleWeb(Panel.Code, source, name, parameters);
        IF (Panel.Code = '') THEN
          refreshPanel := TRUE;
        IF (refreshPanel) THEN
        BEGIN
          UpdateStdPageForPanel(Panel, StdPanelBuffer);
          lResult := TRUE;
        END;
      END;
      EXIT(lResult);
    END;

    PROCEDURE StdDrillDownTile@9062230(pPanel@9062229 : Record 9062363;pTileId@1000000000 : Integer);
    BEGIN
      CLEAR(PanelResponse);
      PanelResponse.HandleWeb(pPanel.Code, '', 'tile', FORMAT(pTileId));
    END;

    PROCEDURE "--- Tools ---"@1000000018();
    BEGIN
    END;

    LOCAL PROCEDURE PanelTimestampChanged@1000000015(pPanelCode@1000000000 : Code[20]) : Boolean;
    VAR
      lResult@1000000001 : Boolean;
      lPanelDateTime@1000000002 : DateTime;
    BEGIN
      //DOC NA2015.1 - Returning TRUE if panel timestamp changed
      //  -> pPanelCode: Panel code
      //  <- TRUE = Panel timestamp changed compared to saved history, FALSE = Not

      lResult := FALSE;

      IF (PanelTimestampTmp.GET(Panel.Code)) THEN
        IF (PanelTimestampTmp."Date Time" <> 0DT) THEN
        BEGIN
          lPanelDateTime := PanelTimestampToolkit.Get(Panel.Code);
          IF (lPanelDateTime <> 0DT) THEN
            lResult := (lPanelDateTime <> PanelTimestampTmp."Date Time");
        END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE GetSettings@1000000026() : Boolean;
    VAR
      lSystemBehaviour@1000000000 : Record 9062230;
    BEGIN
      //DOC NA2015.4 - Getting settings from "System Behaviour"

      IF (SettingsRetrieved) THEN
        EXIT;

      WebPanelsInWin := lSystemBehaviour.GetBoolean('WEB_PANELS_IN_WIN');

      SettingsRetrieved := TRUE;
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 02/12/2013 - Created
      //DOC NA2015.1  JH 21/02/2014 - Amendments
      //DOC NA2015.1  JH 14/03/2014 - Amendments
      //DOC NA2015.1  JH 23/04/2014 - Panels 3
      //DOC NA2015.4  JH 10/11/2014 - Upgraded to 2015
      //DOC NA2015.8  JH 26/06/2015 - Tile lists
      //DOC NA2015.9  JH 13/08/2015 - Fixes
      //DOC NA2016.10 JH 11/09/2015 - Upgraded to 2016
      //DOC NA2016.12 JH 04/01/2016 - New panels
      //DOC NA2016.12 JH 28/01/2016 - Smart filters
      //DOC NA2016.12 JH 03/02/2016 - Panel history sequence bug sorted
      //DOC NA2016.14 JH 18/02/2016 - Removing "BACK" if no panels in history
      //DOC NA2016.16 JH 19/05/2016 - CfMD amendments (new .NET library)
      //DOC NA2016.16 AZ 24/05/2016 - CfMD amendments
    }
    END.
  }
}

