OBJECT Codeunit 9062297 Accounting Period Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=02/02/16;
    Time=12:00:00 PM;
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AccountingPeriod@1000000000 : Record 10560;
      TnpToolkit@1000000002 : Codeunit 9062230;
      PreviousNext@1000000001 : ' ,Previous,Next';

    LOCAL PROCEDURE "--- Search in the Past / Future ---"@1000000011();
    BEGIN
    END;

    PROCEDURE FindPreviousPeriod@1000000000(pAccountingPeriod@1000000000 : Record 10560;VAR pAccountingPeriodFound@1000000001 : Record 10560) : Boolean;
    BEGIN
      //DOC NA2016.12 - Finding previous accounting period to the given one
      //  -> pAccountingPeriod: Accounting period to start with
      //  <> pAccountingPeriodFound: Target accounting period
      //  <- Result

      EXIT(FindPrecedingSucceedingPeriod(pAccountingPeriod, -1, pAccountingPeriodFound));
    END;

    PROCEDURE FindNextPeriod@1000000001(pAccountingPeriod@1000000001 : Record 10560;VAR pAccountingPeriodFound@1000000000 : Record 10560) : Boolean;
    BEGIN
      //DOC NA2016.12 - Finding next accounting period to the given one
      //  -> pAccountingPeriod: Accounting period to start with
      //  <> pAccountingPeriodFound: Target accounting period
      //  <- Result

      EXIT(FindPrecedingSucceedingPeriod(pAccountingPeriod, 1, pAccountingPeriodFound));
    END;

    PROCEDURE FindPrecedingPeriod@1000000022(pAccountingPeriod@1000000002 : Record 10560;pShift@1000000001 : Integer;VAR pAccountingPeriodFound@1000000000 : Record 10560) : Boolean;
    BEGIN
      //DOC NA2016.12 - Finding preceding period
      //  -> pAccountingPeriod: Accouting period to start with
      //  -> pShift: Shift (number of periods)
      //  <> pAccountingPeriodFound: Target accounting period
      //  <- Result

      EXIT(FindPrecedingSucceedingPeriod(pAccountingPeriod, -pShift, pAccountingPeriodFound));
    END;

    PROCEDURE FindSucceedingPeriod@1000000016(pAccountingPeriod@1000000002 : Record 10560;pShift@1000000001 : Integer;VAR pAccountingPeriodFound@1000000000 : Record 10560) : Boolean;
    BEGIN
      //DOC NA2016.12 - Finding preceding period
      //  -> pAccountingPeriod: Accouting period to start with
      //  -> pShift: Shift (number of periods)
      //  <> pAccountingPeriodFound: Target accounting period
      //  <- Result

      EXIT(FindPrecedingSucceedingPeriod(pAccountingPeriod, pShift, pAccountingPeriodFound));
    END;

    LOCAL PROCEDURE FindPrecedingSucceedingPeriod@1000000017(pAccountingPeriod@1000000002 : Record 10560;pShift@1000000001 : Integer;VAR pAccountingPeriodFound@1000000000 : Record 10560) : Boolean;
    VAR
      lAccountingPeriod@1000000006 : Record 10560;
      lDateFormula@1000000003 : Text;
      lDateShifted@1000000005 : Date;
      lResult@1000000004 : Boolean;
    BEGIN
      //DOC NA2016.12 - Finding preceding period
      //  -> pAccountingPeriod: Accouting period to start with
      //  -> pShift: Shift (number of periods)
      //  <> pAccountingPeriodFound: Target accounting period
      //  <- Result

      pAccountingPeriod.TESTFIELD("Period Type");
      pAccountingPeriod.TESTFIELD("Period Start");

      IF (pShift <> 0) THEN
      BEGIN
        lDateFormula := STRSUBSTNO('<%1%2>', FORMAT(pShift, 0, 2), PeriodTypeToDateFormulaOperator(pAccountingPeriod."Period Type"));
        lDateShifted := CALCDATE(lDateFormula, pAccountingPeriod."Period Start");
        lAccountingPeriod.RESET();
        lAccountingPeriod.SETRANGE("Period Type", pAccountingPeriod."Period Type");
        lAccountingPeriod.SETFILTER("Period Start", '<=%1', lDateShifted);
        lAccountingPeriod.SETFILTER("Period End", '>=%1', lDateShifted);
        lResult := lAccountingPeriod.FINDFIRST();
        IF (lResult) THEN
          pAccountingPeriodFound := lAccountingPeriod;
      END
      ELSE
      BEGIN
        pAccountingPeriodFound := pAccountingPeriod;
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Search by Date ---"@1000000013();
    BEGIN
    END;

    PROCEDURE FindMonthPeriodNoForDate@1000000007(pDate@1000000000 : Date;VAR pNo@1000000001 : Integer) : Boolean;
    VAR
      lAccountingPeriod@1000000003 : Record 10560;
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning month accounting period no. for given date
      //  -> pDate: The date
      //  <> pNo: Target accouting period no.
      //  <- TRUE = Accounting period found and returned, FALSE = Accounting period can't be found

      lResult := FindMonthPeriodForDate(pDate, lAccountingPeriod);
      IF (lResult) THEN
        pNo := lAccountingPeriod."Period No.";
      EXIT(lResult);
    END;

    PROCEDURE FindMonthPeriodStartForDate@1000000015(pDate@1000000000 : Date;VAR pPeriodStart@1000000001 : Date) : Boolean;
    VAR
      lPeriodEnd@1000000002 : Date;
    BEGIN
      //DOC NA2016.12 - Returning month accounting period start for given date
      //  -> pDate: The date
      //  <> pPeriodStart: Target accouting period start
      //  <- TRUE = Accounting period found and returned, FALSE = Accounting period can't be found

      EXIT(FindMonthPeriodRangeForDate(pDate, pPeriodStart, lPeriodEnd));
    END;

    PROCEDURE FindMonthPeriodEndForDate@1000000014(pDate@1000000000 : Date;VAR pPeriodEnd@1000000004 : Date) : Boolean;
    VAR
      lPeriodStart@1000000001 : Date;
    BEGIN
      //DOC NA2016.12 - Returning month accounting period end for given date
      //  -> pDate: The date
      //  <> pPeriodEnd: Target accounting period end
      //  <- TRUE = Accounting period found and returned, FALSE = Accounting period can't be found

      EXIT(FindMonthPeriodRangeForDate(pDate, lPeriodStart, pPeriodEnd));
    END;

    PROCEDURE FindMonthPeriodRangeForDate@1000000009(pDate@1000000000 : Date;VAR pPeriodStart@1000000001 : Date;VAR pPeriodEnd@1000000004 : Date) : Boolean;
    VAR
      lAccountingPeriod@1000000003 : Record 10560;
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning month accounting period range for given date
      //  -> pDate: The date
      //  <> pPeriodStart: Target accouting period start
      //  <> pPeriodEnd: Target accounting period end
      //  <- TRUE = Accounting period found and returned, FALSE = Accounting period can't be found

      lResult := FindMonthPeriodForDate(pDate, lAccountingPeriod);
      IF (lResult) THEN
      BEGIN
        pPeriodStart := lAccountingPeriod."Period Start";
        pPeriodEnd := lAccountingPeriod."Period End";
      END;
      EXIT(lResult);
    END;

    PROCEDURE FindMonthPeriodFilterForDate@1000000012(pDate@1000000000 : Date;VAR pFilter@1000000001 : Text) : Boolean;
    VAR
      lAccountingPeriod@1000000003 : Record 10560;
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning month accounting period filter for given date
      //  -> pDate: The date
      //  <> pFilter: Target filter
      //  <- TRUE = Accounting period found and returned, FALSE = Accounting period can't be found

      lResult := FindMonthPeriodForDate(pDate, lAccountingPeriod);
      IF (lResult) THEN
        pFilter := STRSUBSTNO('%1..%2', lAccountingPeriod."Period Start", lAccountingPeriod."Period End");
      EXIT(lResult);
    END;

    PROCEDURE FindMonthPeriodForDate@1000000002(pDate@1000000000 : Date;VAR pAccountingPeriod@1000000001 : Record 10560) : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning month accounting period for given date
      //  -> pDate: The date
      //  <> pAccountingPeriod: Target accouting period record
      //  <- Result

      EXIT(FindPeriodForDate(pDate, AccountingPeriod."Period Type"::Month, pAccountingPeriod));
    END;

    PROCEDURE FindPeriodForDate@1000000004(pDate@1000000000 : Date;pPeriodType@1000000002 : Integer;VAR pAccountingPeriod@1000000001 : Record 10560) : Boolean;
    VAR
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning accounting period for given date
      //  -> pDate: The date
      //  -> pPeriodType: Period type
      //  <> pAccountingPeriod: Target accouting period record
      //  <- Result

      AccountingPeriod.RESET();
      AccountingPeriod.SETRANGE("Period Type", pPeriodType);
      AccountingPeriod.SETFILTER("Period Start", '<=%1', pDate);
      AccountingPeriod.SETFILTER("Period End", '>=%1', pDate);
      lResult := AccountingPeriod.FINDFIRST();
      IF (lResult) THEN
        pAccountingPeriod := AccountingPeriod;
      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Search by Period No. ---"@1000000003();
    BEGIN
    END;

    PROCEDURE FindMonthPeriodNoInAYear@1000000005(pAccountingPeriod@1000000000 : Record 10560;pNo@1000000001 : Integer;VAR pAccountingPeriodFound@1000000004 : Record 10560) : Boolean;
    VAR
      lYearAccountingPeriod@1000000002 : Record 10560;
      lMonthAccountingPeriod@1000000003 : Record 10560;
      lResult@1000000005 : Boolean;
    BEGIN
      //DOC NA2016.12 - Finding month period with given no. in a year
      //  -> pAccountingPeriod: Accounting period to start with
      //  -> pNo: No.
      //  <> pAccountingPeriodFound: Target accounting period
      //  <- Result

      lResult := FALSE;

      pAccountingPeriod.TESTFIELD("Period Type", pAccountingPeriod."Period Type"::Month);

      lYearAccountingPeriod.RESET();
      lYearAccountingPeriod.SETRANGE("Period Type", lYearAccountingPeriod."Period Type"::Year);
      lYearAccountingPeriod.SETFILTER("Period Start", '<=%1', pAccountingPeriod."Period Start");
      lYearAccountingPeriod.SETFILTER("Period End", '>=%1', pAccountingPeriod."Period End");
      IF (lYearAccountingPeriod.FINDFIRST()) THEN
      BEGIN
        lMonthAccountingPeriod.RESET();
        lMonthAccountingPeriod.SETRANGE("Period Type", lMonthAccountingPeriod."Period Type"::Month);
        lMonthAccountingPeriod.SETFILTER("Period Start", '>=%1', lYearAccountingPeriod."Period Start");
        lMonthAccountingPeriod.SETFILTER("Period End", '<=%1', lYearAccountingPeriod."Period End");
        lMonthAccountingPeriod.SETRANGE("Period No.", pNo);
        lResult := lMonthAccountingPeriod.FINDFIRST();
        IF (lResult) THEN
          pAccountingPeriodFound := lMonthAccountingPeriod;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000006();
    BEGIN
    END;

    LOCAL PROCEDURE PeriodTypeToDateFormulaOperator@1000000018(pPeriodType@1000000000 : Integer) : Code[1];
    VAR
      lOperator@1000000001 : Code[1];
      eDay@1000000002 : TextConst 'ENU=D;ENG=D';
      eWeek@1000000003 : TextConst 'ENU=W;ENG=W';
      eMonth@1000000004 : TextConst 'ENU=M;ENG=M';
      eQuarter@1000000005 : TextConst 'ENU=Q;ENG=Q';
      eYear@1000000006 : TextConst 'ENU=Y;ENG=Y';
    BEGIN
      //DOC NA2016.12 - Converting period type to date formula operator
      //  -> pPeriodType: Period type
      //  <- The operator

      CASE (pPeriodType) OF
        AccountingPeriod."Period Type"::Day: lOperator := eDay;
        AccountingPeriod."Period Type"::Week: lOperator := eWeek;
        AccountingPeriod."Period Type"::Month: lOperator := eMonth;
        AccountingPeriod."Period Type"::Quarter: lOperator := eQuarter;
        AccountingPeriod."Period Type"::Year: lOperator := eYear;
      END;

      EXIT(lOperator);
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 29/01/2016 - Created
    }
    END.
  }
}

