OBJECT Table 9062367 Tile
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Panel Code");
               CheckModifyPermission();
               IF (Rec.ID = 0) THEN
                 Rec.ID := NewId();
               UpdateControlName();
               UpdateBackgroundColour();
               PanelTimestampToolkit.Add(Rec."Panel Code");
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               CheckModifyPermission();
               PanelTimestampToolkit.Add(Rec."Panel Code");
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               CheckModifyPermission();

               TileFrame.RESET();
               TileFrame.SETRANGE("Panel Code", Rec."Panel Code");
               TileFrame.SETRANGE("Tile ID", Rec.ID);
               TileFrame.DELETEALL(TRUE);

               PanelEvent.RESET();
               PanelEvent.SETRANGE("Parent Table ID", DATABASE::Tile);
               PanelEvent.SETRANGE("Parent Code", Rec."Panel Code");
               PanelEvent.SETRANGE("Parent ID", Rec.ID);
               PanelEvent.DELETEALL(TRUE);

               PanelProperty.RESET();
               PanelProperty.SETRANGE("Parent Table ID", DATABASE::Tile);
               PanelProperty.SETRANGE("Parent Code", Rec."Panel Code");
               PanelProperty.SETRANGE("Parent ID", Rec.ID);
               PanelProperty.DELETEALL(TRUE);

               PanelTimestampToolkit.Add(Rec."Panel Code");
             END;

    OnRename=BEGIN
               CheckModifyPermission();
             END;

    CaptionML=[ENU=Tile;
               ENG=Tile];
    LookupPageID=Page9062454;
    DrillDownPageID=Page9062454;
  }
  FIELDS
  {
    { 1   ;   ;Panel Code          ;Code20        ;TableRelation=Panel;
                                                   OnValidate=BEGIN
                                                                UpdateControlName();
                                                              END;

                                                   CaptionML=[ENU=Panel Code;
                                                              ENG=Panel Code] }
    { 3   ;   ;ID                  ;Integer       ;OnValidate=BEGIN
                                                                UpdateControlName();
                                                              END;

                                                   CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 4   ;   ;Tile Group ID       ;Integer       ;TableRelation="Tile Group".ID WHERE (Panel Code=FIELD(Panel Code));
                                                   OnValidate=BEGIN
                                                                Rec.CALCFIELDS("Tile Group Text");
                                                              END;

                                                   CaptionML=[ENU=Tile Group ID;
                                                              ENG=Tile Group ID] }
    { 5   ;   ;Tile Group Text     ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Tile Group".Text WHERE (Panel Code=FIELD(Panel Code),
                                                                                               ID=FIELD(Tile Group ID)));
                                                   CaptionML=[ENU=Tile Group Text;
                                                              ENG=Tile Group Text];
                                                   Editable=No }
    { 6   ;   ;Text                ;Text250       ;CaptionML=[ENU=Text;
                                                              ENG=Text] }
    { 7   ;   ;Show Text           ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Show Text;
                                                              ENG=Show Text] }
    { 8   ;   ;Info                ;Text250       ;CaptionML=[ENU=Info;
                                                              ENG=Info] }
    { 9   ;   ;Show Info           ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Show Info;
                                                              ENG=Show Info] }
    { 10  ;   ;Size                ;Option        ;CaptionML=[ENU=Size;
                                                              ENG=Size];
                                                   OptionCaptionML=[ENU=" ,Large,Medium,Small,Wide";
                                                                    ENG=" ,Large,Medium,Small,Wide"];
                                                   OptionString=[ ,Large,Medium,Small,Wide] }
    { 11  ;   ;Background Colour Code;Code20      ;TableRelation="System Colour";
                                                   OnValidate=BEGIN
                                                                IF (Rec."Background Colour Code" <> xRec."Background Colour Code") THEN
                                                                  UpdateBackgroundColourBitmap();
                                                              END;

                                                   CaptionML=[ENU=Background Colour Code;
                                                              ENG=Background Colour Code] }
    { 12  ;   ;Image               ;BLOB          ;CaptionML=[ENU=Image;
                                                              ENG=Image];
                                                   SubType=Bitmap }
    { 13  ;   ;Control Name        ;Text100       ;CaptionML=[ENU=Control Name;
                                                              ENG=Control Name] }
    { 14  ;   ;Background Colour Bitmap;BLOB      ;CaptionML=[ENU=Background Colour Bitmap;
                                                              ENG=Background Colour Bitmap];
                                                   SubType=Bitmap }
    { 15  ;   ;Panel Description   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Panel.Description WHERE (Code=FIELD(Panel Code)));
                                                   CaptionML=[ENU=Panel Description;
                                                              ENG=Panel Description];
                                                   Editable=No }
    { 16  ;   ;Sequence            ;Integer       ;CaptionML=[ENU=Sequence;
                                                              ENG=Sequence];
                                                   MinValue=0 }
    { 17  ;   ;Events              ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Panel Event" WHERE (Parent Table ID=CONST(9062367),
                                                                                          Parent Code=FIELD(Panel Code),
                                                                                          Parent ID=FIELD(ID)));
                                                   CaptionML=[ENU=Events;
                                                              ENG=Events];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 18  ;   ;Properties          ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Panel Property" WHERE (Parent Table ID=CONST(9062367),
                                                                                             Parent Code=FIELD(Panel Code),
                                                                                             Parent ID=FIELD(ID)));
                                                   CaptionML=[ENU=Properties;
                                                              ENG=Properties];
                                                   Editable=No }
    { 19  ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ENG=Blocked] }
    { 20  ;   ;Target Table ID     ;Integer       ;CaptionML=[ENU=Target Table ID;
                                                              ENG=Target Table ID] }
    { 21  ;   ;Target Position     ;Text250       ;CaptionML=[ENU=Target Position;
                                                              ENG=Target Position] }
    { 22  ;   ;Background Colour Name;Text50      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("System Colour".Name WHERE (Code=FIELD(Background Colour Code)));
                                                   TableRelation="System Colour";
                                                   CaptionML=[ENU=Background Colour Name;
                                                              ENG=Background Colour Name];
                                                   Editable=No }
    { 24  ;   ;Tile Group Name     ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Tile Group"."Control Name" WHERE (Panel Code=FIELD(Panel Code),
                                                                                                         ID=FIELD(Tile Group ID)));
                                                   CaptionML=[ENU=Tile Group Name;
                                                              ENG=Tile Group Name];
                                                   Editable=No }
    { 25  ;No ;Bitmap              ;BLOB          ;CaptionML=[ENU=Bitmap;
                                                              ENG=Bitmap] }
    { 26  ;No ;Bitmap with Background;BLOB        ;CaptionML=[ENU=Bitmap with Background;
                                                              ENG=Bitmap with Background] }
    { 40  ;   ;Event Description   ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Panel Event".Description WHERE (Parent Table ID=CONST(9062367),
                                                                                                       Parent Code=FIELD(Panel Code),
                                                                                                       Parent ID=FIELD(ID),
                                                                                                       Type=FIELD(FILTER(Event Type Filter))));
                                                   CaptionML=[ENU=Event Description;
                                                              ENG=Event Description];
                                                   Editable=No }
    { 41  ;   ;Event Type Filter   ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Event Type Filter;
                                                              ENG=Event Type Filter];
                                                   OptionCaptionML=[ENU=" ,Click";
                                                                    ENG=" ,Click"];
                                                   OptionString=[ ,Click] }
    { 42  ;   ;Event Exists        ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Panel Event" WHERE (Parent Table ID=CONST(9062367),
                                                                                          Parent Code=FIELD(Panel Code),
                                                                                          Parent ID=FIELD(ID),
                                                                                          Type=FIELD(Event Type Filter)));
                                                   CaptionML=[ENU=Event Exists;
                                                              ENG=Event Exists];
                                                   Editable=No }
    { 50  ;   ;Property Description;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Panel Property".Description WHERE (Parent Table ID=CONST(9062367),
                                                                                                          Parent Code=FIELD(Panel Code),
                                                                                                          Parent ID=FIELD(ID),
                                                                                                          Property ID=FIELD(Property ID Filter)));
                                                   CaptionML=[ENU=Property Description;
                                                              ENG=Property Description];
                                                   Editable=No }
    { 51  ;   ;Property ID Filter  ;Integer       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Property ID Filter;
                                                              ENG=Property ID Filter] }
    { 70  ;   ;Text Font Size      ;Integer       ;CaptionML=[ENU=Text Font Size;
                                                              ENG=Text Font Size];
                                                   MinValue=0 }
    { 71  ;   ;Text Font Style     ;Option        ;CaptionML=[ENU=Text Font Style;
                                                              ENG=Text Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline] }
    { 72  ;   ;Text Colour Code    ;Code20        ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Text Colour Code;
                                                              ENG=Text Colour Code] }
    { 80  ;   ;Info Font Size      ;Integer       ;CaptionML=[ENU=Info Font Size;
                                                              ENG=Info Font Size];
                                                   MinValue=0 }
    { 81  ;   ;Info Font Style     ;Option        ;CaptionML=[ENU=Info Font Style;
                                                              ENG=Info Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline] }
    { 82  ;   ;Info Colour Code    ;Code20        ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Info Colour Code;
                                                              ENG=Info Colour Code] }
    { 90  ;   ;Parameter 1         ;Text50        ;CaptionML=[ENU=Parameter 1;
                                                              ENG=Parameter 1] }
    { 91  ;   ;Parameter 2         ;Text50        ;CaptionML=[ENU=Parameter 2;
                                                              ENG=Parameter 2] }
    { 92  ;   ;Parameter 3         ;Text50        ;CaptionML=[ENU=Parameter 3;
                                                              ENG=Parameter 3] }
    { 93  ;   ;Parameter 4         ;Text50        ;CaptionML=[ENU=Parameter 4;
                                                              ENG=Parameter 4] }
    { 94  ;   ;Parameter 5         ;Text50        ;CaptionML=[ENU=Parameter 5;
                                                              ENG=Parameter 5] }
    { 95  ;   ;Parameter 6         ;Text50        ;CaptionML=[ENU=Parameter 6;
                                                              ENG=Parameter 6] }
    { 100 ;   ;Panel Data ID       ;Integer       ;CaptionML=[ENU=Panel Data ID;
                                                              ENG=Panel Data ID] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Panel Code,ID                           ;Clustered=Yes }
    {    ;Panel Code,Sequence,ID                   }
    {    ;Panel Code,Tile Group ID,Sequence,ID     }
    {    ;Panel Code,Tile Group ID,ID              }
    {    ;Panel Code,Control Name                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Panel@9062229 : Record 9062363;
      TileFrame@1000000001 : Record 9062368;
      PanelEvent@1000000005 : Record 9062369;
      PanelProperty@1000000003 : Record 9062433;
      PanelPersonalisation@1000000006 : Record 9062372;
      SystemColour@1000000004 : Record 9062336;
      BlobToolkit@1000000010 : Codeunit 9062242;
      CopyPanel@1000000011 : Codeunit 9062352;
      EnhancedPermissionsMgt@1000000017 : Codeunit 9062277;
      ObjectFieldToolkit@1000000008 : Codeunit 9062343;
      PanelEventManagement@1000000015 : Codeunit 9062323;
      PanelPropertyManagement@1000000014 : Codeunit 9062355;
      PanelTimestampToolkit@1000000016 : Codeunit 9062385;
      PanelToolkit@1000000000 : Codeunit 9062320;
      TnpToolkit@1000000002 : Codeunit 9062230;
      tFromTo@1000000013 : TextConst 'ENU=From the Current %1,To the Current %1;ENG=From the Current %1,To the Current %1';
      tEmptyProperty@1000000007 : TextConst 'ENU=(Click here to define dynamic %1);ENG=(Click here to define dynamic %1)';
      tEmptyEvent@1000000009 : TextConst 'ENU=(Click here to define what happens on tile %1);ENG=(Click here to define what happens on tile %1)';

    PROCEDURE "--- Initialisation ---"@1000000003();
    BEGIN
    END;

    PROCEDURE NewId@1000000015() : Integer;
    VAR
      lTile@1000000000 : Record 9062367;
    BEGIN
      //DOC NA2015.1 - Returning new ID
      //  <- The ID

      Rec.TESTFIELD("Panel Code");

      lTile.RESET();
      lTile.SETRANGE("Panel Code", Rec."Panel Code");
      IF (lTile.FINDLAST()) THEN
        EXIT(lTile.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE NewIdFor@1000000019(pPanelCode@1000000001 : Code[20]) : Integer;
    BEGIN
      //DOC NA2015.1 - Returning new ID for given panel code and panel control ID (using Rec)
      //  -> pPanelCode: Panel code
      //  <- The ID

      Rec.RESET();
      Rec.SETRANGE("Panel Code", pPanelCode);
      IF (Rec.FINDLAST()) THEN
        EXIT(Rec.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE NewSequence@1000000000() : Integer;
    VAR
      llTile@1000000000 : Record 9062367;
    BEGIN
      //DOC NA2015.1 - Returning new sequence
      //  <- The sequence

      llTile.RESET();
      llTile.SETCURRENTKEY("Panel Code", Sequence);
      llTile.SETRANGE("Panel Code", Rec."Panel Code");
      IF (llTile.FINDLAST()) THEN
        EXIT(llTile.Sequence + 10)
      ELSE
        EXIT(10);
    END;

    PROCEDURE "--- General ---"@1000000004();
    BEGIN
    END;

    PROCEDURE ProcessRename@1000000038(pFromPanelCode@1000000000 : Code[20];pFromId@1000000002 : Integer;pToPanelCode@1000000001 : Code[20];pToId@1000000003 : Integer);
    VAR
      lFromPanelEvent@1000000004 : Record 9062369;
      lToPanelEvent@1000000005 : Record 9062369;
      lFromPanelProperty@1000000006 : Record 9062433;
      lToPanelProperty@1000000007 : Record 9062433;
      lFromPanelPersonalisation@1000000009 : Record 9062372;
      lToPanelPersonalisation@1000000008 : Record 9062372;
    BEGIN
      //DOC NA2015.2 - Processing rename (tables with non-standard relations)
      //  -> pFromPanelCode: From panel code
      //  -> pFromId: From ID
      //  -> pToPanelCode: To panel code
      //  -> pToId: To ID

      IF ((pFromPanelCode = pToPanelCode) AND (pFromId = pToId)) THEN
        EXIT;

      TileFrame.RESET();
      TileFrame.SETRANGE("Panel Code", pFromPanelCode);
      TileFrame.SETRANGE("Tile ID", pFromId);
      IF (TileFrame.FINDSET()) THEN
      REPEAT
        TileFrame.ProcessRename(pFromPanelCode, pFromId, TileFrame.ID, pToPanelCode, pToId, TileFrame.ID);
      UNTIL (TileFrame.NEXT() = 0);

      lFromPanelEvent.RESET();
      lFromPanelEvent.SETRANGE("Parent Table ID", DATABASE::Tile);
      lFromPanelEvent.SETRANGE("Parent Code", pFromPanelCode);
      lFromPanelEvent.SETRANGE("Parent ID", pFromId);
      IF (lFromPanelEvent.FINDSET()) THEN
      BEGIN
        REPEAT
          lToPanelEvent := lFromPanelEvent;
          lToPanelEvent."Parent Code" := pToPanelCode;
          lToPanelEvent."Parent ID" := pToId;
          lToPanelEvent.INSERT(TRUE);
        UNTIL (lFromPanelEvent.NEXT() = 0);
        lFromPanelEvent.DELETEALL(TRUE);
      END;

      lFromPanelProperty.RESET();
      lFromPanelProperty.SETRANGE("Parent Table ID", DATABASE::Tile);
      lFromPanelProperty.SETRANGE("Parent Code", Rec."Panel Code");
      lFromPanelProperty.SETRANGE("Parent ID", Rec.ID);
      IF (lFromPanelProperty.FINDSET()) THEN
      BEGIN
        REPEAT
          lFromPanelProperty.ProcessRename(lFromPanelProperty."Parent Table ID", pFromPanelCode, pFromId, lFromPanelProperty."Parent ID 2", lFromPanelProperty.ID,
            lFromPanelProperty."Parent Table ID", pToPanelCode, pToId, lFromPanelProperty."Parent ID 2", lFromPanelProperty.ID);
          lToPanelProperty := lFromPanelProperty;
          lToPanelProperty."Parent Code" := pToPanelCode;
          lToPanelProperty."Parent ID" := pToId;
          lToPanelProperty.INSERT();
        UNTIL (lFromPanelProperty.NEXT() = 0);
        lFromPanelProperty.DELETEALL();
      END;

      lFromPanelPersonalisation.RESET();
      lFromPanelPersonalisation.SETRANGE("Parent Table ID", DATABASE::"Tile Group");
      lFromPanelPersonalisation.SETRANGE("Parent Code", Rec."Panel Code");
      lFromPanelPersonalisation.SETRANGE("Parent ID", Rec.ID);
      IF (lFromPanelPersonalisation.FINDSET()) THEN
      BEGIN
        REPEAT
          lToPanelPersonalisation := lFromPanelPersonalisation;
          lToPanelPersonalisation."Parent Code" := pToPanelCode;
          lToPanelPersonalisation."Parent ID" := pToId;
          lToPanelPersonalisation.INSERT(TRUE);
        UNTIL (lFromPanelPersonalisation.NEXT() = 0);
        lFromPanelPersonalisation.DELETEALL(TRUE);
      END;

      UpdateControlName();
    END;

    PROCEDURE UpdateControlName@1000000013();
    VAR
      eName@1000000000 : TextConst 'ENU=Control_%1_%2;ENG=Control_%1_%2';
    BEGIN
      //DOC NA2015.1 - Updating control name

      Rec."Control Name" := PanelToolkit.CodeIdToControlName(DATABASE::Tile, Rec."Panel Code", Rec.ID);
    END;

    PROCEDURE LoadImageFromLibrary@1000000047() : Boolean;
    VAR
      lSystemImage@1000000001 : Record 9062240;
      lSystemImageManagement@1000000000 : Codeunit 9062244;
      lImageSelection@1000000003 : Integer;
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2015.1 - Loading image from library
      //  <- Result

      lResult := FALSE;

      IF (lSystemImageManagement.LoadImageFromLibrary(lSystemImage, lImageSelection)) THEN
      BEGIN
        CASE (lImageSelection) OF
          lSystemImage."Image Selection"::Image:
            Rec.VALIDATE(Image, lSystemImage.Image);
          lSystemImage."Image Selection"::"Alternative Image":
            Rec.VALIDATE(Image, lSystemImage."Alternative Image");
        END;
        Rec.MODIFY(TRUE);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE CopyTo@1000000044();
    BEGIN
      //DOC NA2015.8 - Copying panel (or a part of it)

      CLEAR(CopyPanel);
      CopyPanel.CopySelected(DATABASE::Tile, Rec."Panel Code", Rec.ID, 0);
    END;

    PROCEDURE PageCaption@1000000039() : Text[250];
    VAR
      eCaption@1000000000 : TextConst 'ENU=%1 - %2;ENG=%1 - %2';
    BEGIN
      //DOC NA2015.1 - Returning page caption
      //  <- The caption

      Rec.CALCFIELDS("Panel Description");
      EXIT(STRSUBSTNO(eCaption, Rec."Panel Description", Rec.Text));
    END;

    PROCEDURE MoveTo@1000000026(pDirection@1000000001 : Integer) : Boolean;
    VAR
      lTile@1000000000 : Record 9062367;
      lFound@1000000004 : Boolean;
      lResult@1000000002 : Boolean;
      lSequence@1000000003 : Integer;
    BEGIN
      //DOC NA2015.8 - Moving tile up / down on a list of tiles (sorted by sequence)
      //  -> pDirection: -1 = Up, 1 = Down, the rest ignored
      //  <- TRUE = Moved, FALSE = Not moved

      IF ( NOT (pDirection IN [-1, 1])) THEN
        EXIT(FALSE);

      lTile.RESET();
      lTile.SETCURRENTKEY("Panel Code", Sequence);
      lTile.SETRANGE("Panel Code", Rec."Panel Code");
      IF (pDirection < 0) THEN
      BEGIN
        lTile.SETFILTER(Sequence, '<%1', Rec.Sequence);
        lFound := lTile.FINDLAST();
      END
      ELSE
      BEGIN
        lTile.SETFILTER(Sequence, '>%1', Rec.Sequence);
        lFound := lTile.FINDFIRST();
      END;
      IF (lFound) THEN
      BEGIN
        lSequence := lTile.Sequence;
        lTile.Sequence := Rec.Sequence;
        lTile.MODIFY(TRUE);
        Rec.Sequence := lSequence;
        Rec.MODIFY(TRUE);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE UpdateBackgroundColour@9062229();
    VAR
      lTile@9062231 : Record 9062367;
      lSystemPaletteManagement@9062229 : Codeunit 9062399;
      lColourCode@9062232 : Code[20];
      lNewColourCode@9062230 : Code[20];
    BEGIN
      //DOC NA2016.10 - Updating background colour

      IF ( NOT (Panel.GET(Rec."Panel Code"))) THEN
        EXIT;
      IF ((Panel."System Palette Code" = '') OR (Panel."System Palette Colour Order" = Panel."System Palette Colour Order"::" ")) THEN
        EXIT;

      lTile.RESET();
      lTile.SETCURRENTKEY("Panel Code", Sequence);
      lTile.SETRANGE("Panel Code", Rec."Panel Code");
      IF (lTile.FINDLAST()) THEN
        lColourCode := lTile."Background Colour Code";

      lNewColourCode := lSystemPaletteManagement.NewColour(Panel."System Palette Code", Panel."System Palette Colour Order", lColourCode);

      IF (lNewColourCode <> '') THEN
        Rec.VALIDATE("Background Colour Code", lNewColourCode);
    END;

    PROCEDURE UpdateBackgroundColourBitmap@1000000037();
    BEGIN
      //DOC NA2015.4 - Updating background colour bitmap

      IF (Rec."Background Colour Code" <> '') THEN
      BEGIN
        SystemColour.GET(Rec."Background Colour Code");
        SystemColour.CALCFIELDS(Bitmap);
        Rec."Background Colour Bitmap" := SystemColour.Bitmap;
      END
      ELSE
        CLEAR(Rec."Background Colour Bitmap");
    END;

    PROCEDURE CopyParametersFromPanel@1000000040(pPanel@1000000000 : Record 9062363);
    BEGIN
      //DOC NA2015.8 - Copying parameters from the given panel
      //  -> pPanel: The panel

      Rec."Parameter 1" := pPanel."Parameter 1";
      Rec."Parameter 2" := pPanel."Parameter 2";
      Rec."Parameter 3" := pPanel."Parameter 3";
      Rec."Parameter 4" := pPanel."Parameter 4";
      Rec."Parameter 5" := pPanel."Parameter 5";
      Rec."Parameter 6" := pPanel."Parameter 6";
    END;

    LOCAL PROCEDURE CheckModifyPermission@1000000041();
    BEGIN
      //DOC NA2016.15 - Checking modify permission (given to the panel)

      IF ( NOT (Panel.GET(Rec."Panel Code"))) THEN
        EXIT;
      EnhancedPermissionsMgt.CheckPanelModifyPermission(Panel, USERID());
    END;

    PROCEDURE "--- Personalisation ---"@1000000025();
    BEGIN
    END;

    PROCEDURE GetBlocked@1000000011() : Boolean;
    BEGIN
      //DOC NA2015.1 - Returning if the tile is blocked (including personalisation)
      //  <- The flag

      IF (PanelPersonalisation.GET(USERID, DATABASE::Tile, Rec."Panel Code", Rec.ID)) THEN
        EXIT(PanelPersonalisation.Blocked)
      ELSE
        EXIT(Rec.Blocked);
    END;

    PROCEDURE SetBlocked@1000000010(pBlocked@1000000000 : Boolean);
    BEGIN
      //DOC NA2015.1 - Setting personalised blocked flag of the tile
      //  -> pBlocked: The flag

      IF (PanelPersonalisation.GET(USERID, DATABASE::Tile, Rec."Panel Code", Rec.ID)) THEN
      BEGIN
        IF (PanelPersonalisation.Blocked <> pBlocked) THEN
        BEGIN
          PanelPersonalisation.VALIDATE(Blocked, pBlocked);
          PanelPersonalisation.MODIFY();
        END;
      END
      ELSE
      BEGIN
        InitialisePersonalisation(PanelPersonalisation);
        PanelPersonalisation.VALIDATE(Blocked, pBlocked);
        PanelPersonalisation.INSERT(TRUE);
      END;
    END;

    PROCEDURE GetSequence@1000000020() : Integer;
    BEGIN
      //DOC NA2015.1 - Returning sequence including paresonalisation
      //  <- The sequence

      IF (PanelPersonalisation.GET(USERID, DATABASE::Tile, Rec."Panel Code", Rec.ID)) THEN
        EXIT(PanelPersonalisation.Sequence)
      ELSE
        EXIT(Rec.Sequence);
    END;

    PROCEDURE SetSequence@1000000027(pSequence@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Setting panel tile sequence
      //  -> pSequence: The sequence

      IF (PanelPersonalisation.GET(USERID, DATABASE::Tile, Rec."Panel Code", Rec.ID)) THEN
      BEGIN
        IF (PanelPersonalisation.Sequence <> pSequence) THEN
        BEGIN
          PanelPersonalisation.VALIDATE(Sequence, pSequence);
          PanelPersonalisation.MODIFY();
        END;
      END
      ELSE
      BEGIN
        InitialisePersonalisation(PanelPersonalisation);
        PanelPersonalisation.VALIDATE(Sequence, pSequence);
        PanelPersonalisation.INSERT(TRUE);
      END;
    END;

    PROCEDURE GetTileGroupId@1000000023() : Integer;
    BEGIN
      //DOC NA2015.1 - Returning panel tile group id
      //  <- The ID

      IF (PanelPersonalisation.GET(USERID, DATABASE::Tile, Rec."Panel Code", Rec.ID)) THEN
        IF (PanelPersonalisation."Panel Tile Group ID" <> 0) THEN
          EXIT(PanelPersonalisation."Panel Tile Group ID");
      EXIT(Rec."Tile Group ID");
    END;

    PROCEDURE SetTileGroupId@1000000024(pPanelTileGroupId@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Setting panel tile group id
      //  -> pPanelTileGroupId: The ID

      IF (PanelPersonalisation.GET(USERID, DATABASE::Tile, Rec."Panel Code", Rec.ID)) THEN
      BEGIN
        IF (PanelPersonalisation."Panel Tile Group ID" <> pPanelTileGroupId) THEN
        BEGIN
          PanelPersonalisation.VALIDATE("Panel Tile Group ID", pPanelTileGroupId);
          PanelPersonalisation.MODIFY();
        END;
      END
      ELSE
      BEGIN
        InitialisePersonalisation(PanelPersonalisation);
        PanelPersonalisation.VALIDATE("Panel Tile Group ID", pPanelTileGroupId);
        PanelPersonalisation.INSERT(TRUE);
      END;
    END;

    PROCEDURE FilterPersonalisation@1000000016(VAR pPanelPersonalisation@1000000000 : Record 9062372);
    BEGIN
      //DOC NA2015.1 - Filtering personalisation recordset
      //  <> pPanelPersonalisation: The record

      pPanelPersonalisation.RESET();
      pPanelPersonalisation.SETRANGE("User ID", USERID);
      pPanelPersonalisation.SETRANGE("Parent Table ID", DATABASE::Tile);
      pPanelPersonalisation.SETRANGE("Parent Code", Rec."Panel Code");
      pPanelPersonalisation.SETRANGE("Parent ID", Rec.ID);
    END;

    PROCEDURE InitialisePersonalisation@1000000014(VAR pPanelPersonalisation@1000000000 : Record 9062372);
    BEGIN
      //DOC NA2015.1 - Initialising personalisation record
      //  <> pPanelPersonalisation: The record

      pPanelPersonalisation.INIT();
      pPanelPersonalisation.VALIDATE("User ID", USERID);
      pPanelPersonalisation.VALIDATE("Parent Table ID", DATABASE::Tile);
      pPanelPersonalisation.VALIDATE("Parent Code", Rec."Panel Code");
      pPanelPersonalisation.VALIDATE("Parent ID", Rec.ID);
    END;

    PROCEDURE RemovePersonalisation@1000000028();
    VAR
      lPanelPersonalisation@1000000000 : Record 9062372;
    BEGIN
      //DOC NA2015.1 - Removing personalisation

      FilterPersonalisation(lPanelPersonalisation);
      lPanelPersonalisation.DELETEALL(TRUE);
    END;

    PROCEDURE "--- Lookups ---"@1000000002();
    BEGIN
    END;

    PROCEDURE ValidateTileGroupText@1000000017(pTileGroupText@1000000000 : Text[100]);
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2015.1 - Validating tile group text
      //  -> pTileGroupText: The text

      IF (PanelToolkit.ValidateTileGroupText(Rec."Panel Code", Rec."Tile Group ID", pTileGroupText)) THEN
        Rec.VALIDATE("Tile Group ID");
    END;

    PROCEDURE TileGroupLookup@1000000018();
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2015.1 - Performing lookup for tile group

      IF (PanelToolkit.TileGroupLookup(Rec."Panel Code", Rec."Tile Group ID")) THEN
        Rec.VALIDATE("Tile Group ID");
    END;

    PROCEDURE "--- Properties ---"@1000000029();
    BEGIN
    END;

    PROCEDURE PropertiesInformation@1000000022() : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning properties information
      //  <- The information

      Rec.CALCFIELDS(Properties);
      EXIT(PanelPropertyManagement.PropertiesInformation(Rec.Properties));
    END;

    PROCEDURE PropertyInformation@1000000005(pFieldId@1000000000 : Integer) : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning property information
      //  -> pFieldId: Field ID
      //  <- The information

      Rec.SETRANGE("Property ID Filter", pFieldId);
      Rec.CALCFIELDS("Property Description");
      IF (Rec."Property Description" <> '') THEN
        EXIT(Rec."Property Description")
      ELSE
        EXIT(STRSUBSTNO(tEmptyProperty, ObjectFieldToolkit.GetFieldName(DATABASE::Tile, pFieldId)));
    END;

    PROCEDURE TextPropertyInformation@1000000007() : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning text property information
      //  <- The information

      EXIT(PropertyInformation(Rec.FIELDNO(Text)));
    END;

    PROCEDURE InfoPropertyInformation@1000000008() : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning info property information
      //  <- The information

      EXIT(PropertyInformation(Rec.FIELDNO(Info)));
    END;

    PROCEDURE BackgroundColourPropertyInformation@1000000030() : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning background colour property information
      //  <- The information

      EXIT(PropertyInformation(Rec.FIELDNO("Background Colour Code")));
    END;

    PROCEDURE "--- Events ---"@1000000052();
    BEGIN
    END;

    PROCEDURE EventsInformation@1000000021() : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning events information
      //  <- The information

      Rec.CALCFIELDS(Events);
      EXIT(PanelEventManagement.EventsInformation(Rec.Events));
    END;

    PROCEDURE ClickEventInformation@1000000051() : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning click event information
      //  <- The information

      EXIT(EventInformation(Rec."Event Type Filter"::Click));
    END;

    PROCEDURE EventInformation@1000000050(pEventType@1000000000 : Integer) : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning event information
      //  -> pEventType: Event type
      //  <- The information

      Rec.SETRANGE("Event Type Filter", pEventType);
      Rec.CALCFIELDS("Event Description");
      IF (Rec."Event Description" <> '') THEN
        EXIT(Rec."Event Description")
      ELSE
      BEGIN
        Rec."Event Type Filter" := pEventType;
        EXIT(STRSUBSTNO(tEmptyEvent, FORMAT(Rec."Event Type Filter")));
      END;
    END;

    PROCEDURE "--- Related Information ---"@1000000035();
    BEGIN
    END;

    PROCEDURE ShowEvents@1000000006();
    BEGIN
      //DOC NA2015.1 - Showing events

      PanelEventManagement.ShowEvents(DATABASE::Tile, Rec."Panel Code", Rec.ID);
    END;

    PROCEDURE ShowEvent@1000000001(pEventType@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Showing an event
      //  -> pEventType: Event type

      PanelEventManagement.ShowEvent(DATABASE::Tile, Rec."Panel Code", Rec.ID, pEventType);
    END;

    PROCEDURE ShowFrames@1000000031();
    VAR
      lTileFrame@1000000000 : Record 9062368;
    BEGIN
      //DOC NA2015.1 - Showing frames

      ShowFramesFor(lTileFrame);
    END;

    PROCEDURE ShowFramesFor@1000000036(pTileFrame@1000000000 : Record 9062368);
    BEGIN
      //DOC NA2015.1 - Showing frames (focusing on the specified frame)
      //  -> pTileFrame: The frame to focus on

      Rec.TESTFIELD("Panel Code");
      Rec.TESTFIELD(ID);

      TileFrame.RESET();
      TileFrame.FILTERGROUP(2);
      TileFrame.SETRANGE("Panel Code", Rec."Panel Code");
      TileFrame.SETRANGE("Tile ID", Rec.ID);
      TileFrame.FILTERGROUP(0);
      IF (pTileFrame.ID <> 0) THEN
        IF (TileFrame.GET(Rec."Panel Code", Rec.ID, pTileFrame.ID)) THEN;

      PAGE.RUN(0, TileFrame);
    END;

    PROCEDURE ShowProperties@1000000012();
    BEGIN
      //DOC NA2015.1 - Showing properties

      PanelPropertyManagement.ShowProperties(DATABASE::Tile, Rec."Panel Code", Rec.ID, 0);
    END;

    PROCEDURE ShowProperty@1000000009(pPropertyId@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Showing property
      //  -> pPropertyId: Property ID

      PanelPropertyManagement.ShowProperty(DATABASE::Tile, Rec."Panel Code", Rec.ID, 0, DATABASE::Tile, pPropertyId, TRUE);
    END;

    PROCEDURE ShowTextProperty@1000000033();
    BEGIN
      //DOC NA2015.1 - Showing text property

      ShowProperty(Rec.FIELDNO(Text));
    END;

    PROCEDURE ShowInfoProperty@1000000034();
    BEGIN
      //DOC NA2015.1 - Showing info property

      ShowProperty(Rec.FIELDNO(Info));
    END;

    PROCEDURE ShowBackgroundColourProperty@1000000032();
    BEGIN
      //DOC NA2015.1 - Showing background colour property

      ShowProperty(Rec.FIELDNO("Background Colour Code"));
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 17/07/2013 - Created
      //DOC NA2015.1  JH 14/04/2014 - Panels 3
      //DOC NA2015.5  JH 14/03/2015 - "Bitmap", "Bitmap with Background" added (for backward-compatibility with 2009)
      //DOC NA2015.8  JH 26/06/2015 - Tile lists resurrected
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.15 JH 05/05/2016 - Enhanced permissions
    }
    END.
  }
}

