OBJECT Codeunit 9086971 nF. String
{
  OBJECT-PROPERTIES
  {
    Date=27/10/16;
    Time=[ 1:58:26 PM];
    Version List=NF2016.17;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE LeftTrim@1000000001(pString@1000000000 : Text) : Text;
    BEGIN
      ///<summary>Trimming string from left</summary>
      ///<param name="pString">The string</param>
      ///<returns>Trimmed string</returns>

      EXIT(DELCHR(pString, '<', ' '));
    END;

    PROCEDURE RightTrim@1000000003(pString@1000000000 : Text) : Text;
    BEGIN
      ///<summary>Trimming string from right</summary>
      ///<param name="pString">The string</param>
      ///<returns>Trimmed string</returns>

      EXIT(DELCHR(pString, '>', ' '));
    END;

    PROCEDURE Trim@1000000000(pString@1000000000 : Text) : Text;
    BEGIN
      ///<summary>Trimming string</summary>
      ///<param name="pString">The string</param>
      ///<returns>Trimmed string</returns>

      EXIT(DELCHR(pString, '<>', ' '));
    END;

    PROCEDURE ToSentenceCase@1000000033(pString@1000000000 : Text) : Text;
    BEGIN
      ///<summary>Converting string to sentence case (first character uppercase)</summary>
      ///<param name="pString">String</param>
      ///<returns>Sentence-case string</returns>

      IF (pString <> '') THEN
        EXIT(UPPERCASE(COPYSTR(pString, 1, 1)) + LOWERCASE(COPYSTR(pString, 2, STRLEN(pString) - 1)))
      ELSE
        EXIT('');
    END;

    PROCEDURE ToTitleCase@1000000123(pString@1000000000 : Text) : Text;
    VAR
      lLen@1000000001 : Integer;
      lIndex@1000000002 : Integer;
      lString@1000000003 : Text;
      lStringCharacter@1000000005 : Text[1];
      lWordStarted@1000000004 : Boolean;
    BEGIN
      ///<summary>Converting string to title case (first character uppercase of each word) for passed string</summary>
      ///<param name="pString">String</param>
      ///<returns>Sentence-case string</returns>

      lLen := STRLEN(pString);
      lWordStarted := FALSE;

      FOR lIndex := 1 TO lLen DO
      BEGIN
        lStringCharacter := COPYSTR(pString, lIndex, 1);
        IF (lWordStarted) THEN
          lString := lString + LOWERCASE(lStringCharacter)
        ELSE
          lString := lString + UPPERCASE(lStringCharacter);
        lWordStarted :=
        (
          ((lStringCharacter >= '0') AND (lStringCharacter <= '9')) OR
          ((lStringCharacter >= 'a') AND (lStringCharacter <= 'z')) OR
          ((lStringCharacter >= 'A') AND (lStringCharacter <= 'Z'))
        );
      END;

      EXIT(lString);
    END;

    PROCEDURE Replace@1190000035(pString@1190000012 : Text;pFind@1190000013 : Text;pReplace@1190000014 : Text) : Text;
    VAR
      lPos@1190000015 : Integer;
    BEGIN
      ///<summary>Replacing part of a string with another string</summary>
      ///<param name="pString">String to search</param>
      ///<param name="pFind">String to find</param>
      ///<param name="pReplace">Replacement</param>
      ///<returns>Replaced string</returns>

      lPos := STRPOS(pString, pFind);
      IF (lPos > 0) THEN
        pString := COPYSTR(pString, 1, lPos - 1) + pReplace + COPYSTR(pString, lPos + STRLEN(pFind));

      EXIT(pString);
    END;

    PROCEDURE ReplaceAll@1000000006(pString@1000000005 : Text;pFind@1000000004 : Text;pReplace@1000000003 : Text) : Text;
    VAR
      lString@1000000006 : Text;
      lReplacing@1000000007 : Boolean;
      lCurrentPos@1000000000 : Integer;
      lPos@1000000001 : Integer;
      lLen@1000000002 : Integer;
    BEGIN
      ///<summary>Replacing all parts of a string with another string</summary>
      ///<param name="pString">String to search</param>
      ///<param name="pFind">String to find</param>
      ///<param name="pReplace">Replacement</param>
      ///<returns>Replaced string</returns>

      lLen := STRLEN(pString);
      IF (lLen > 0) THEN
      BEGIN
        lReplacing := TRUE;
        lCurrentPos := 1;
        WHILE (lReplacing) DO
        BEGIN
          lPos := STRPOS(COPYSTR(pString, lCurrentPos, lLen), pFind);
          IF (lPos > 0) THEN
          BEGIN
            lString := lString + COPYSTR(pString, lCurrentPos, lPos - 1) + pReplace;
            lCurrentPos += lPos + STRLEN(pFind) - 1;
          END
          ELSE
            lReplacing := FALSE;
        END;
      END;

      IF (lCurrentPos < lLen) THEN
        lString := lString + COPYSTR(pString, lCurrentPos, lLen);

      EXIT(lString);
    END;

    PROCEDURE LastPosition@1190000036(pString@1190000009 : Text;pSearch@1190000010 : Text) : Integer;
    VAR
      lSearchLength@1190000011 : Integer;
      lPosition@1190000012 : Integer;
      lFound@1190000013 : Boolean;
    BEGIN
      ///<summary>Returning last position of substring within a string</summary>
      ///<param name="pString">String to test</param>
      ///<param name="pSearch">String to search</param>
      ///<returns>Position (>0) or 0 if not found</returns>

      IF ((pString = '') OR (pSearch = '') OR (STRLEN(pString) < STRLEN(pSearch))) THEN
        EXIT(0);

      lSearchLength := STRLEN(pSearch);
      lPosition := (STRLEN(pString) - lSearchLength + 1);
      WHILE ((lPosition > 0) AND ( NOT (lFound))) DO
      BEGIN
        lFound := (COPYSTR(pString, lPosition, lSearchLength) = pSearch);
        IF ( NOT (lFound)) THEN
          lPosition -= 1;
      END;

      EXIT(lPosition);
    END;

    PROCEDURE Concatenate@1190000026(pString1@1190000010 : Text;pString2@1190000011 : Text;pSeparator@1190000012 : Text) : Text;
    VAR
      lString@1190000009 : Text;
      lSeparatorLength@1190000013 : Integer;
      lSeparatorFound@1190000014 : Boolean;
    BEGIN
      //DOC NA2015.3 - Concatenating strings</summary>
      ///<param name="pString1">String 1</param>
      ///<param name="pString2">String 2</param>
      ///<param name="pSeparator">Separator (used only if both strings are not empty)</param>
      ///<returns>Concatenated string</returns>

      lString := pString1;

      IF ((pString1 <> '') AND (pString2 <> '')) THEN
        IF (pSeparator <> '') THEN
        BEGIN
          lSeparatorLength := STRLEN(pSeparator);
          lSeparatorFound := FALSE;
          IF ( NOT (lSeparatorFound)) THEN
            IF (STRLEN(pString1) >= lSeparatorLength) THEN
              lSeparatorFound := (COPYSTR(pString1, STRLEN(pString1) - lSeparatorLength + 1, lSeparatorLength) = pSeparator);
          IF ( NOT (lSeparatorFound)) THEN
            IF (STRLEN(pString2) >= lSeparatorLength) THEN
              lSeparatorFound := (COPYSTR(pString2, 1, lSeparatorLength) = pSeparator);
          IF ( NOT (lSeparatorFound)) THEN
            lString := lString + pSeparator;
        END;

      lString := lString + pString2;

      EXIT(lString);
    END;

    PROCEDURE Split@1190000027(pString@1190000012 : Text;pSeparator@1190000013 : Text;VAR pStringBuffer@1190000014 : Record 823);
    VAR
      lString@1190000015 : Text;
      lStringPart@1190000017 : Text;
      lIndex@1190000016 : Integer;
      lLineNo@1190000018 : Integer;
    BEGIN
      ///<summary>Splitting string</summary>
      ///<param name="pString">String to split</param>
      ///<param name="pSeparator">Separator</param>
      ///<param name="pStringBuffer">Target buffer</param>

      SplitAdvanced(pString, pSeparator, FALSE, FALSE, pStringBuffer);
    END;

    PROCEDURE SplitAdvanced@1000000007(pString@1190000012 : Text;pSeparator@1190000013 : Text;pIgnoreEmptyLines@1190000019 : Boolean;pZeroBasedNumbering@1190000020 : Boolean;VAR pStringBuffer@1190000014 : Record 823);
    VAR
      lString@1190000015 : Text;
      lStringPart@1190000017 : Text;
      lIndex@1190000016 : Integer;
      lLineNo@1190000018 : Integer;
    BEGIN
      ///<summary>Splitting string (advanced version)</summary>
      ///<param name="pString">String to split</param>
      ///<param name="pSeparator">Separator</param>
      ///<param name="pIgnoreEmptyLines">Ignoring empty lines</param>
      ///<param name="pZeroBasedNumbering">TRUE: Lines Numbered from 0, FALSE: Lines numbered from 1</param>
      ///<param name="pStringBuffer">Target buffer

      lString := pString;

      IF (pZeroBasedNumbering) THEN
        lLineNo := 0
      ELSE
        lLineNo := 1;

      WHILE (lString <> '') DO
      BEGIN
        lIndex := STRPOS(lString, pSeparator);
        IF (lIndex <> 0) THEN
        BEGIN
          lStringPart := COPYSTR(lString, 1, lIndex - 1);
          lString := COPYSTR(lString, lIndex + STRLEN(pSeparator), STRLEN(lString) - (lIndex + STRLEN(pSeparator)) + 1);
        END
        ELSE
        BEGIN
          lStringPart := lString;
          lString := '';
        END;
        IF ((lStringPart <> '') OR ( NOT (pIgnoreEmptyLines))) THEN
        BEGIN
          pStringBuffer.ID := lLineNo;
          pStringBuffer.Name := COPYSTR(lStringPart, 1, MAXSTRLEN(pStringBuffer.Name));
          pStringBuffer.Value := pStringBuffer.Name;
          pStringBuffer.INSERT();
          lLineNo += 1;
        END;
      END;
    END;

    PROCEDURE SplitPreservingWords@1190000032(pString@1190000010 : Text;pPartLength@1190000009 : Integer;VAR pStringBuffer@1000000000 : TEMPORARY Record 823);
    VAR
      lString@1190000012 : Text;
      lStringPart@1190000013 : Text;
      lPosition@1190000014 : Integer;
      lId@1190000015 : Integer;
    BEGIN
      ///<summary>Splitting string preserving words</summary>
      ///<param name="pString">String to split</param>
      ///<param name="pPartLength">Length of parts</param>
      ///<param name="pStringBuffer">Target buffer

      IF ((pString = '') OR (pPartLength <= 0)) THEN
        EXIT;

      lString := pString;
      lId := 0;

      IF (STRLEN(lString) > pPartLength) THEN
      BEGIN
        WHILE (lString <> '') DO
        BEGIN
          lStringPart := COPYSTR(lString, 1, pPartLength);
          lPosition := LastPosition(lStringPart, ' ');
          IF (lPosition = 0) THEN
            lPosition := STRLEN(lStringPart) + 1;
          lId += 1;
          pStringBuffer.ID := lId;
          pStringBuffer.Name := COPYSTR(lStringPart, 1, lPosition - 1);
          pStringBuffer.Value := pStringBuffer.Name;
          pStringBuffer.INSERT();
          lString := COPYSTR(lString, lPosition + 1, STRLEN(lString));
        END
      END
      ELSE
      BEGIN
        lId += 1;
        pStringBuffer.ID := lId;
        pStringBuffer.Name := lString;
        pStringBuffer.Value := pStringBuffer.Name;
        pStringBuffer.INSERT();
      END;
    END;

    PROCEDURE SplitToArray@1000000124(pString@1000000000 : Text;pSeparators@1000000008 : Code[250];VAR pParts@1000000001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      lString@1000000006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      lParts@1000000005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      lSeparators@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      lSeparatorsLength@1000000009 : Integer;
      lSeparatorIndex@1000000011 : Integer;
      lSeparatorCharacter@1000000007 : Char;
      lType@1000000003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      lCharType@1000000002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Char";
      eNoSeparators@1000000010 : TextConst 'ENU=Please pass a string with separators to "SplitToArray" function (each character is another separator).;ENG=Please pass a string with separators to "SplitToArray" function (each character is another separator).';
    BEGIN
      ///<summary>Splitting string and returning a .NET array</summary>
      ///<param name="pString">String to split</param>
      ///<param name="pSeparators">String with separators (each character is treated as a separator)</param>
      ///<param name="pParts">Target array

      lString := lString.Copy(pString);
      lSeparatorsLength := STRLEN(pSeparators);
      IF (lSeparatorsLength = 0) THEN
        ERROR(eNoSeparators);
      lSeparators := lSeparators.CreateInstance(GETDOTNETTYPE(lCharType), lSeparatorsLength);
      FOR lSeparatorIndex := 1 TO lSeparatorsLength DO
      BEGIN
        lSeparatorCharacter := pSeparators[lSeparatorIndex];
        lSeparators.SetValue(lSeparatorCharacter, lSeparatorIndex - 1);
      END;
      pParts := lString.Split(lSeparators);
    END;

    PROCEDURE CountWords@1000000070(pString@1000000000 : Text;pSeparator@1000000001 : Text) : Integer;
    VAR
      lStringBuffer@1000000002 : TEMPORARY Record 823;
    BEGIN
      ///<summary>Counting words in string</summary>
      ///<param name="pString">String</param>
      ///<param name="pSeparator">Separator</param>
      ///<returns>Number of words</returns>

      SplitAdvanced(pString, pSeparator, TRUE, FALSE, lStringBuffer);
      EXIT(lStringBuffer.COUNT());
    END;

    PROCEDURE IsCharAlpha@1000000005(pChar@1000000000 : Char) : Boolean;
    BEGIN
      ///<summary>Returning if character is alpha</summary>
      ///<param name="pChar">The character</param>
      ///<returns>Response</returns>

      EXIT (((pChar >= 'A') AND (pChar <= 'Z')) OR ((pChar >= 'a') AND (pChar <= 'z')));
    END;

    PROCEDURE IsCharNumeric@1000000004(pChar@1000000000 : Char) : Boolean;
    BEGIN
      ///<summary>Returning if character is numeric</summary>
      ///<param name="pChar">The character</param>
      ///<returns>Response</returns>

      EXIT ((pChar >= '0') AND (pChar <= '9'));
    END;

    PROCEDURE IsCharAlphaNumeric@1000000056(pChar@1000000000 : Char) : Boolean;
    BEGIN
      ///<summary>Returning if character is alphanumeric</summary>
      ///<param name="pChar">The character</param>
      ///<returns>Response</returns>

      EXIT((IsCharAlpha(pChar)) OR (IsCharNumeric(pChar)));
    END;

    PROCEDURE IsCharAlphaNumericOrSpace@1000000002(pChar@1000000000 : Char) : Boolean;
    BEGIN
      ///<summary>Returning if character is alphanumeric or space</summary>
      ///<param name="pChar">The character</param>
      ///<returns>Response</returns>

      EXIT((IsCharAlpha(pChar)) OR (IsCharNumeric(pChar)) OR (pChar = ' '));
    END;

    PROCEDURE CountCharacters@1000000008(pString@1000000000 : Text;pCharacter@1000000001 : Char) : Integer;
    VAR
      i@1000000002 : Integer;
      count@1000000003 : Integer;
    BEGIN
      ///<summary>Count no. of characters in a string</summary>
      ///<param name="pString">Text</param>
      ///<param name="pChar: The character</param>
      ///<returns>No of characters</returns>

      IF (pString = '') THEN
        EXIT(0);

      count := 0;
      FOR i:=1 TO STRLEN(pString) DO
        IF (pString[i] = pCharacter) THEN
          count += 1;

      EXIT(count);
    END;

    PROCEDURE CountOptions@1000000009(pString@1000000000 : Text) : Integer;
    BEGIN
      ///<summary>Count no. of options in a string</summary>
      ///<param name="pString">Text</param>
      ///<returns>No of options</returns>

      IF (pString = '') THEN
        EXIT(0);
      EXIT(CountCharacters(pString, ',') + 1);
    END;

    PROCEDURE CodeToName@1000000120(pCode@1000000001 : Code[50];VAR pName@1000000002 : Text[50]) : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      ///<summary>Converting code to name</summary>
      ///<param name="pCode">The code</param>
      ///<param name="pName">The target name</param>
      ///<returns>TRUE = Converted, FALSE = Not</returns>

      lResult := FALSE;
      IF ((pCode <> '') AND (pName = '')) THEN
      BEGIN
        pName := ToTitleCase(pCode);
        lResult := TRUE;
      END;
      EXIT(lResult);
    END;

    BEGIN
    {
      ///<summary>String manipulation library</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-10-2510">Created</change>
    }
    END.
  }
}

