OBJECT Codeunit 50066 Web Service handler V1.0
{
  OBJECT-PROPERTIES
  {
    Date=20/11/18;
    Time=12:57:29 PM;
    Modified=Yes;
    Version List=TM3027;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE InitializeWebRequest@1000000002(VAR XMLWriterP@1170000002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlWriter";VAR ReqBodyOutStreamP@1170000003 : OutStream);
    VAR
      EncodingL@1170000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      XMLWriterSettingsL@1170000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlWriterSettings";
      TempBlobL@1170000005 : TEMPORARY Record 99008535;
    BEGIN
      CLEAR(XMLWriterP);
      CLEAR(XMLWriterSettingsL);
      CLEAR(ReqBodyOutStreamP);

      TempBlobL.RESET;
      TempBlobL.DELETEALL;
      TempBlobL.INIT;
      TempBlobL.Blob.CREATEOUTSTREAM(ReqBodyOutStreamP);

      XMLWriterSettingsL := XMLWriterSettingsL.XmlWriterSettings;
      XMLWriterSettingsL.Encoding := EncodingL.UTF8;
      XMLWriterSettingsL.Indent := TRUE;

      XMLWriterP := XMLWriterP.Create(ReqBodyOutStreamP, XMLWriterSettingsL);
    END;

    PROCEDURE FinalizeWebRequest@1000000009(VAR XMLWriterP@1170000003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlWriter";VAR ReqBodyOutStreamP@1170000001 : OutStream;ProcessingCodeunitP@1170000005 : BigInteger;ParentEntryNoP@1170000006 : BigInteger;ApiCodeP@1170000007 : Code[20]) : BigInteger;
    VAR
      XmlRequestL@1170000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      MsgHdrDirectionL@1170000002 : 'Incoming Request,Incoming Response,Outgoing Request,Outgoing Response';
      StatusL@1170000004 : 'To be Processed,Failed,Processed,Closed Manually,Skip Processing';
    BEGIN
      XMLWriterP.Close;
      XMLWriterP.Dispose;
      XmlRequestL := XmlRequestL.XmlDocument;
      XmlRequestL.Load(ReqBodyOutStreamP);
      EXIT(InsertMessageHeader(MsgHdrDirectionL::"Outgoing Request", StatusL::Processed, ProcessingCodeunitP, XmlRequestL, 0, ParentEntryNoP, ApiCodeP)); // insert message header
    END;

    PROCEDURE PostSoapCall@1170000001(UrlP@1170000010 : Text;SoapActionP@1170000009 : Text;XmlRequestP@1170000007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR ResponseTextL@1170000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String") : Boolean;
    VAR
      HttpClientL@1170000006 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      UriL@1170000004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      HttpStringContentL@1170000003 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.StringContent";
      EncodingL@1170000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      HttpResponseMessageL@1170000001 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      ServicePointManagerL@1170000008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.ServicePointManager";
      SecurityProtocolTypeL@1170000005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.SecurityProtocolType";
    BEGIN
      ServicePointManagerL.SecurityProtocol := SecurityProtocolTypeL.Tls12;
      HttpClientL := HttpClientL.HttpClient();
      HttpClientL.BaseAddress := UriL.Uri(UrlP);
      HttpClientL.DefaultRequestHeaders.Add('SOAPAction', SoapActionP);
      HttpStringContentL := HttpStringContentL.StringContent(XmlRequestP.InnerXml, EncodingL.UTF8,'text/xml');
      HttpResponseMessageL := HttpClientL.PostAsync(UrlP, HttpStringContentL).Result;
      ResponseTextL := HttpResponseMessageL.Content.ReadAsStringAsync().Result;
      EXIT(HttpResponseMessageL.IsSuccessStatusCode);
    END;

    PROCEDURE InsertMessageHeader@1170000003(MsgHdrDirectionP@1170000003 : 'Incoming Request,Incoming Response,Outgoing Request,Outgoing Response';StatusP@1170000005 : 'To be Processed,Failed,Processed,Closed Manually,Skip Processing';ProcessingCodeunitNoP@1000000000 : BigInteger;XmlDocP@1000000003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";LastEntryNoP@1170000000 : BigInteger;ParentEntryNoP@1170000002 : BigInteger;ApiCodeP@1170000004 : Code[20]) EntryNoR : BigInteger;
    VAR
      MessageHeaderL@1170000001 : Record 50023;
      C_EmptyCheck@1000000001 : TextConst 'ENU=XML document is missing. Contact administrator.';
      ReqBodyOutStreamL@1000000002 : OutStream;
    BEGIN
      MessageHeaderL.INIT;
      MessageHeaderL."Entry No." := 0;
      MessageHeaderL.Direction := MsgHdrDirectionP;
      MessageHeaderL."Entry Date" := TODAY;
      MessageHeaderL."Entry Time" := TIME;
      MessageHeaderL."Processed by UserID" := USERID;
      MessageHeaderL.Status := StatusP;
      MessageHeaderL."API Code" := ApiCodeP;
      MessageHeaderL."Processing Codeunit No" := ProcessingCodeunitNoP;
      IF MessageHeaderL.Status <> MessageHeaderL.Status::"Skip Processing" THEN
        MessageHeaderL.TESTFIELD("Processing Codeunit No");
      IF MessageHeaderL.Direction IN [MessageHeaderL.Direction::"Incoming Response", MessageHeaderL.Direction::"Outgoing Response"] THEN BEGIN
        MessageHeaderL."Reply to Entry No." := LastEntryNoP;
      END ELSE BEGIN
        MessageHeaderL."Processed Date" := TODAY;
        MessageHeaderL."Processed Time" := TIME;
      END;
      MessageHeaderL."XML Document".CREATEOUTSTREAM(ReqBodyOutStreamL);
      XmlDocP.Save(ReqBodyOutStreamL);
      IF NOT MessageHeaderL."XML Document".HASVALUE THEN
        ERROR(C_EmptyCheck);
      MessageHeaderL."Parent Entry No." := ParentEntryNoP;
      MessageHeaderL.INSERT;
      EXIT(MessageHeaderL."Entry No.");
    END;

    PROCEDURE InsertErrorMessage@1000000000(EntryNoP@1000000002 : BigInteger;FaultCodeP@1000000003 : Code[20];FaultDesriptionP@1000000004 : Text;XMLDocInP@1000000005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      ErrorMessageL@1000000000 : Record 50024;
      ErrorMessage2L@1000000001 : Record 50024;
      ReqBodyOutStreamL@1000000006 : OutStream;
    BEGIN
      ErrorMessageL.INIT;
      ErrorMessage2L.SETRANGE("Entry No.", EntryNoP);
      IF ErrorMessage2L.FINDLAST THEN;
      ErrorMessageL."Entry No." := EntryNoP;
      ErrorMessageL."Line No." := 1 + ErrorMessage2L."Line No.";
      ErrorMessageL."Fault Code" := FaultCodeP;
      IF FaultDesriptionP > '' THEN BEGIN
        ErrorMessageL."Fault Description 1" := COPYSTR(FaultDesriptionP, 1, 250);
        ErrorMessageL."Fault Description 2" := COPYSTR(FaultDesriptionP, 251, 250);
        ErrorMessageL."Fault Description 3" := COPYSTR(FaultDesriptionP, 501, 250);
      END;
      ErrorMessageL."XML Document".CREATEOUTSTREAM(ReqBodyOutStreamL);
      XMLDocInP.Save(ReqBodyOutStreamL);
      ErrorMessageL."Entry Date" := TODAY;
      ErrorMessageL."Entry Time" := TIME;
      ErrorMessageL.INSERT;
    END;

    PROCEDURE ModifyMessageHeader@1170000015(LastEntryNoP@1170000001 : Integer;ApiSequenceP@1170000002 : Integer;StatusP@1170000003 : 'To be Processed,Failed,Processed,Closed Manually,Skip Processing';FreeText1P@1170000004 : Text;FreeText2P@1170000005 : Text);
    VAR
      MessageHeaderL@1170000000 : Record 50023;
    BEGIN
      MessageHeaderL.GET(LastEntryNoP);
      MessageHeaderL.Status := StatusP;
      MessageHeaderL."API Sequence" := ApiSequenceP;
      IF FreeText1P > '' THEN
        MessageHeaderL."Free Text 1" := FreeText1P;
      IF FreeText2P > '' THEN
        MessageHeaderL."Free Text 2" := FreeText2P;
      MessageHeaderL.MODIFY;
    END;

    PROCEDURE WebResponseErrorHandling@1170000000(ResponseTextP@1170000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";ApiSequenceP@1170000006 : Integer;EntryNoP@1170000004 : BigInteger) : Boolean;
    VAR
      XMLDOMManagementL@1170000003 : Codeunit 6224;
      XmlResponseL@1170000002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLBodyL@1170000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      StatusL@1170000005 : 'To be Processed,Failed,Processed,Closed Manually,Skip Processing';
    BEGIN
      XmlResponseL := XmlResponseL.XmlDocument();
      XmlResponseL.LoadXml(ResponseTextP.ToString);
      RemoveNamespace(XmlResponseL, XmlResponseL);
      CASE TRUE OF
        XMLDOMManagementL.FindNode(XmlResponseL, '//Fault/faultcode', XMLBodyL):
          BEGIN
            InsertErrorMessage(EntryNoP, XMLDOMManagementL.FindNodeText(XmlResponseL, '//Fault/faultcode'),
                                                  XMLDOMManagementL.FindNodeText(XmlResponseL, '//Fault/faultstring'), XmlResponseL);
            ModifyMessageHeader(EntryNoP, ApiSequenceP, StatusL::"To be Processed", '', '');
            EXIT(TRUE);
          END;
        XMLDOMManagementL.FindNode(XmlResponseL, '//Fault/Code', XMLBodyL):
          BEGIN
            InsertErrorMessage(EntryNoP, XMLDOMManagementL.FindNodeText(XmlResponseL, '//Fault/Code/Value'),
                                                  XMLDOMManagementL.FindNodeText(XmlResponseL, '//Fault/Reason/Text'), XmlResponseL);
            ModifyMessageHeader(EntryNoP, ApiSequenceP, StatusL::"To be Processed", '', '');
            EXIT(TRUE);
          END;
      END;
    END;

    PROCEDURE RemoveNamespace@1000000032(XMLDocInP@1000000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLDocOutP@1000000001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      XMLStyleSheetL@1000000005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XslTransformL@1000000004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.Xsl.XslTransform";
      WriterL@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StringWriter";
      NullXsltArgumentListL@1000000002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.Xsl.XsltArgumentList";
    BEGIN
      XslTransformL := XslTransformL.XslTransform;
      XMLStyleSheetL := XMLStyleSheetL.XmlDocument;
      XMLStyleSheetL.InnerXml(
        '<?xml version="1.0" encoding="UTF-8"?>' +
        '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">' +
        '<xsl:output method="xml" encoding="UTF-8" />' +
        '<xsl:template match="/">' +
        '<xsl:copy>' +
        '<xsl:apply-templates />' +
        '</xsl:copy>' +
        '</xsl:template>' +
        '<xsl:template match="*">' +
        '<xsl:element name="{local-name()}">' +
        '<xsl:apply-templates select="@* | node()" />' +
        '</xsl:element>' +
        '</xsl:template>' +
        '<xsl:template match="@*">' +
        '<xsl:attribute name="{local-name()}"><xsl:value-of select="."/></xsl:attribute>' +
        '</xsl:template>' +
        '<xsl:template match="text() | processing-instruction() | comment()">' +
        '<xsl:copy />' +
        '</xsl:template>' +
        '</xsl:stylesheet>'
        );

      XslTransformL.Load(XMLStyleSheetL);
      WriterL := WriterL.StringWriter();
      XslTransformL.Transform(XMLDocInP, NullXsltArgumentListL, WriterL);
      XMLDocOutP := XMLDocOutP.XmlDocument;
      XMLDocOutP.InnerXml(WriterL.ToString());
    END;

    BEGIN
    {
      //DOC TM3027 ST 18/10/18 - Farfetch Item creation
    }
    END.
  }
}

