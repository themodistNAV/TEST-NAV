OBJECT Codeunit 9062232 Universal Variables
{
  OBJECT-PROPERTIES
  {
    Date=26/08/15;
    Time=[ 1:52:24 PM];
    Version List=NA2016.10;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UniversalVariable@1000000015 : Record 9062538;
      UniversalVariableTmp@1000000014 : TEMPORARY Record 9062538;
      SingleUse@1000000017 : Boolean;
      LinkTableId@1000000007 : Integer;
      LinkTableName@1000000000 : Text;
      LinkPosition@1000000008 : Text;
      LinkPositionDescription@1000000011 : Text;
      TnpUtils@1000000009 : Codeunit 9062229;
      SysB@1000000012 : Record 9062230;
      mType@1000000013 : 'Text,Decimal,Boolean';
      tIncorrectType@1000000016 : TextConst 'ENU=Universal variable "%1" was registered with type "%2" while "%3" is requested getting its value back.;ENG=Universal variable "%1" was registered with type "%2" while "%3" is requested getting its value back.';

    LOCAL PROCEDURE "--- Properties ---"@1000000043();
    BEGIN
    END;

    PROCEDURE GetSingleUse@1000000045() : Boolean;
    BEGIN
      //DOC NA2016.10 - Getting "Single Use" flag
      //  <- The flag

      EXIT(SingleUse);
    END;

    PROCEDURE SetSingleUse@1000000044(pSingleUse@1000000000 : Boolean);
    BEGIN
      //DOC NA2016.10 - Setting "Single Use" flag
      //  -> pSingleUse: The flag

      SingleUse := pSingleUse;
    END;

    LOCAL PROCEDURE "--- Getting ---"@1000000024();
    BEGIN
    END;

    PROCEDURE GetBooleanVar@1000000007(pCode@1000000000 : Code[20]) : Boolean;
    BEGIN
      //DOC NA2016.10 - Returning boolean variable
      //  -> pCode: The variable code
      //  <- The variable value

      FindVar(pCode, UniversalVariable.Type::Boolean);
      EXIT(UniversalVariableTmp."Boolean Value");
    END;

    PROCEDURE GetIntegerVar@1000000002(pCode@1000000000 : Code[20]) : Integer;
    BEGIN
      //DOC NA2016.10 - Returning integer variable
      //  -> pCode: The variable code
      //  <- The variable value

      FindVar(pCode, UniversalVariable.Type::Integer);
      EXIT(UniversalVariableTmp."Integer Value");
    END;

    PROCEDURE GetDecimalVar@1000000006(pCode@1000000000 : Code[20]) : Decimal;
    BEGIN
      //DOC NA2016.10 - Returning decimal variable
      //  -> pCode: The variable code
      //  <- The variable value

      FindVar(pCode, UniversalVariable.Type::Decimal);
      EXIT(UniversalVariableTmp."Decimal Value");
    END;

    PROCEDURE GetCodeVar@1000000001(pCode@1000000000 : Code[20]) : Code[1024];
    VAR
      i@1000000001 : Integer;
      found@1000000002 : Boolean;
      TxtVariableNotText@1000000003 : TextConst 'ENU=Variable "%1" is of type "%2" not text;ENG=Variable "%1" is of type "%2" not text';
    BEGIN
      //DOC NA2016.10 - Returning code variable
      //  -> pCode: The variable code
      //  <- The variable value

      FindVar(pCode, UniversalVariable.Type::Code);
      EXIT(UniversalVariableTmp.GetTextValue());
    END;

    PROCEDURE GetTextVar@1000000003(pCode@1000000000 : Code[20]) : Text;
    VAR
      i@1000000001 : Integer;
      found@1000000002 : Boolean;
      TxtVariableNotText@1000000003 : TextConst 'ENU=Variable "%1" is of type "%2" not text;ENG=Variable "%1" is of type "%2" not text';
    BEGIN
      //DOC NA2016.10 - Returning text variable
      //  -> pCode: The variable code
      //  <- The variable value

      FindVar(pCode, UniversalVariable.Type::Text);
      EXIT(UniversalVariableTmp.GetTextValue());
    END;

    PROCEDURE GetDateVar@1000000032(pCode@1000000000 : Code[20]) : Date;
    BEGIN
      //DOC NA2016.10 - Returning date variable
      //  -> pCode: The variable code
      //  <- The variable value

      FindVar(pCode, UniversalVariable.Type::Date);
      EXIT(UniversalVariableTmp."Date Value");
    END;

    PROCEDURE GetTimeVar@1000000031(pCode@1000000000 : Code[20]) : Time;
    BEGIN
      //DOC NA2016.10 - Returning time variable
      //  -> pCode: The variable code
      //  <- The variable value

      FindVar(pCode, UniversalVariable.Type::Time);
      EXIT(UniversalVariableTmp."Time Value");
    END;

    PROCEDURE GetDateTimeVar@1000000030(pCode@1000000000 : Code[20]) : DateTime;
    BEGIN
      //DOC NA2016.10 - Returning datetime variable
      //  -> pCode: The variable code
      //  <- The variable value

      FindVar(pCode, UniversalVariable.Type::DateTime);
      EXIT(UniversalVariableTmp."DateTime Value");
    END;

    PROCEDURE GetDateFormulaVar@1000000029(pCode@1000000000 : Code[20];VAR pValue@1000000001 : DateFormula);
    BEGIN
      //DOC NA2016.10 - Returning date formula variable
      //  -> pCode: The variable code
      //  <> pValue: The variable value

      FindVar(pCode, UniversalVariable.Type::"Date Formula");
      pValue := UniversalVariableTmp."Date Formula Value";
    END;

    PROCEDURE GetDurationVar@1000000028(pCode@1000000000 : Code[20]) : Duration;
    BEGIN
      //DOC NA2016.10 - Returning duration variable
      //  -> pCode: The variable code
      //  <- The variable value

      FindVar(pCode, UniversalVariable.Type::Duration);
      EXIT(UniversalVariableTmp."Duration Value");
    END;

    PROCEDURE GetGuidVar@1000000026(pCode@1000000000 : Code[20]) : GUID;
    BEGIN
      //DOC NA2016.10 - Returning GUID variable
      //  -> pCode: The variable code
      //  <- The variable value

      FindVar(pCode, UniversalVariable.Type::GUID);
      EXIT(UniversalVariableTmp."GUID Value");
    END;

    PROCEDURE GetBlobVar@1000000033(pCode@1000000000 : Code[20];VAR pValue@1000000001 : Record 99008535);
    BEGIN
      //DOC NA2016.10 - Returning decimal variable
      //  -> pCode: The variable code
      //  <> pValue: The variable value

      FindVar(pCode, UniversalVariable.Type::Decimal);
      UniversalVariableTmp.CALCFIELDS("BLOB Value");
      pValue.Blob := UniversalVariableTmp."BLOB Value";
    END;

    LOCAL PROCEDURE "--- Setting ---"@1000000019();
    BEGIN
    END;

    PROCEDURE SetBooleanVar@1000000017(pCode@1000000000 : Code[20];pValue@1000000001 : Boolean);
    BEGIN
      //DOC NA2016.10 - Setting boolean variable (full version)
      //  -> pCode: Variable code
      //  -> pValue: Variable value

      FindOrCreateVar(pCode, UniversalVariable.Type::Boolean);
      UniversalVariableTmp.VALIDATE("Boolean Value", pValue);
      UniversalVariableTmp.MODIFY(TRUE);
    END;

    PROCEDURE SetIntegerVar@1000000013(pCode@1000000000 : Code[20];pValue@1000000001 : Integer);
    BEGIN
      //DOC NA2016.10 - Setting integer variable (full version)
      //  -> pCode: Variable code
      //  -> pValue: Variable value

      FindOrCreateVar(pCode, UniversalVariable.Type::Integer);
      UniversalVariableTmp.VALIDATE("Integer Value", pValue);
      UniversalVariableTmp.MODIFY(TRUE);
    END;

    PROCEDURE SetDecimalVar@1000000011(pCode@1000000000 : Code[20];pValue@1000000001 : Decimal);
    BEGIN
      //DOC NA2016.10 - Setting decimal variable (full version)
      //  -> pCode: Variable code
      //  -> pValue: Variable value

      FindOrCreateVar(pCode, UniversalVariable.Type::Decimal);
      UniversalVariableTmp.VALIDATE("Decimal Value", pValue);
      UniversalVariableTmp.MODIFY(TRUE);
    END;

    PROCEDURE SetCodeVar@1000000012(pCode@1000000000 : Code[20];pValue@1000000001 : Code[1024]);
    BEGIN
      //DOC NA2016.10 - Setting code variable (full version)
      //  -> pCode: Variable code
      //  -> pValue: Variable value

      FindOrCreateVar(pCode, UniversalVariable.Type::Code);
      UniversalVariableTmp.SetTextValue(pValue);
      UniversalVariableTmp.MODIFY(TRUE);
    END;

    PROCEDURE SetTextVar@1000000014(pCode@1000000000 : Code[20];pValue@1000000001 : Text);
    BEGIN
      //DOC NA2016.10 - Setting text variable (full version)
      //  -> pCode: Variable code
      //  -> pValue: Variable value

      FindOrCreateVar(pCode, UniversalVariable.Type::Text);
      UniversalVariableTmp.SetTextValue(pValue);
      UniversalVariableTmp.MODIFY(TRUE);
    END;

    PROCEDURE SetDateVar@1000000022(pCode@1000000000 : Code[20];pValue@1000000001 : Date);
    BEGIN
      //DOC NA2016.10 - Setting date variable (full version)
      //  -> pCode: Variable code
      //  -> pValue: Variable value

      FindOrCreateVar(pCode, UniversalVariable.Type::Date);
      UniversalVariableTmp.VALIDATE("Date Value", pValue);
      UniversalVariableTmp.MODIFY(TRUE);
    END;

    PROCEDURE SetTimeVar@1000000021(pCode@1000000000 : Code[20];pValue@1000000001 : Time);
    BEGIN
      //DOC NA2016.10 - Setting time variable (full version)
      //  -> pCode: Variable code
      //  -> pValue: Variable value

      FindOrCreateVar(pCode, UniversalVariable.Type::Time);
      UniversalVariableTmp.VALIDATE("Time Value", pValue);
      UniversalVariableTmp.MODIFY(TRUE);
    END;

    PROCEDURE SetDateTimeVar@1000000020(pCode@1000000000 : Code[20];pValue@1000000001 : DateTime);
    BEGIN
      //DOC NA2016.10 - Setting datetime variable (full version)
      //  -> pCode: Variable code
      //  -> pValue: Variable value

      FindOrCreateVar(pCode, UniversalVariable.Type::DateTime);
      UniversalVariableTmp.VALIDATE("DateTime Value", pValue);
      UniversalVariableTmp.MODIFY(TRUE);
    END;

    PROCEDURE SetDateFormulaVar@1000000018(pCode@1000000000 : Code[20];pValue@1000000001 : DateFormula);
    BEGIN
      //DOC NA2016.10 - Setting date formula variable (full version)
      //  -> pCode: Variable code
      //  -> pValue: Variable value

      FindOrCreateVar(pCode, UniversalVariable.Type::"Date Formula");
      UniversalVariableTmp.VALIDATE("Date Formula Value", pValue);
      UniversalVariableTmp.MODIFY(TRUE);
    END;

    PROCEDURE SetDurationVar@1000000016(pCode@1000000000 : Code[20];pValue@1000000001 : Duration);
    BEGIN
      //DOC NA2016.10 - Setting duration variable (full version)
      //  -> pCode: Variable code
      //  -> pValue: Variable value

      FindOrCreateVar(pCode, UniversalVariable.Type::Duration);
      UniversalVariableTmp.VALIDATE("Duration Value", pValue);
      UniversalVariableTmp.MODIFY(TRUE);
    END;

    PROCEDURE SetGuidVar@1000000015(pCode@1000000000 : Code[20];pValue@1000000001 : GUID);
    BEGIN
      //DOC NA2016.10 - Setting GUID variable (full version)
      //  -> pCode: Variable code
      //  -> pValue: Variable value

      FindOrCreateVar(pCode, UniversalVariable.Type::GUID);
      UniversalVariableTmp.VALIDATE("GUID Value", pValue);
      UniversalVariableTmp.MODIFY(TRUE);
    END;

    PROCEDURE SetBlobVar@1000000023(pCode@1000000000 : Code[20];VAR pValue@1000000001 : Record 99008535);
    BEGIN
      //DOC NA2016.10 - Setting BLOB variable (full version)
      //  -> pCode: Variable code
      //  <> pValue: Variable value

      FindOrCreateVar(pCode, UniversalVariable.Type::BLOB);
      UniversalVariableTmp.VALIDATE("BLOB Value", pValue.Blob);
      UniversalVariableTmp.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE "--- Links ---"@1000000027();
    BEGIN
    END;

    PROCEDURE GetLink@1000000005(VAR pLinkTableId@1000000000 : Integer;VAR pLinkPosition@1000000001 : Text) OK : Boolean;
    BEGIN
      //DOC NA2016.10 - Returning saved link
      //  <> pLinkTableId: Target link table ID
      //  <> pLinkPosition: Target link position
      //  <- TRUE = Saved link found, FALSE = Not

      pLinkTableId := LinkTableId;
      pLinkPosition := LinkPosition;

      EXIT((LinkTableId <> 0) AND (LinkPosition <> ''));
    END;

    PROCEDURE GetLinkAsText@1000000008(VAR pLinkTableName@1000000000 : Text;VAR pLinkPositionDescription@1000000001 : Text) OK : Boolean;
    BEGIN
      //DOC NA2016.10 - Returning saved link as text
      //  <> pLinkTableName: Target link table name
      //  <> pLinkPositionDescription: Target link position description
      //  <- TRUE = Saved link found, FALSE = Not

      pLinkTableName := LinkTableName;
      pLinkPositionDescription := LinkPositionDescription;

      EXIT((LinkTableId <> 0) AND (LinkPosition <> ''));
    END;

    PROCEDURE SetLink@1000000000(pLinkTableId@1000000000 : Integer;pLinkPosition@1000000001 : Text);
    VAR
      lRecordRef@1000000003 : RecordRef;
      lFieldRef@1000000002 : FieldRef;
      lFieldId@1000000004 : Integer;
      lFieldIndex@1000000005 : Integer;
    BEGIN
      //DOC NA2016.10 - Setting link
      //  -> pLinkTableId: Link table ID
      //  -> pLinkPosition: Link position

      LinkTableId := pLinkTableId;
      LinkTableName := '';
      LinkPosition := pLinkPosition;
      LinkPositionDescription := '';

      IF ((LinkTableId <> 0) AND (LinkPosition = '')) THEN
      BEGIN
        lRecordRef.OPEN(LinkTableId);
        LinkTableName := lRecordRef.NAME;

        lRecordRef.SETPOSITION(LinkPosition);
        lRecordRef.SETRECFILTER();
        IF (lRecordRef.FINDFIRST()) THEN
        BEGIN
          lFieldIndex := 1;
          REPEAT
            lFieldId := TnpUtils.GetPrimaryKeyFieldID(LinkTableId, LinkPosition, lFieldIndex);
            IF (lFieldId <> 0) THEN
            BEGIN
              IF (LinkPositionDescription <> '') THEN
                LinkPositionDescription := LinkPositionDescription + ' ';
              LinkPositionDescription := LinkPositionDescription + TnpUtils.GetPrimaryKey(LinkTableId, LinkPosition, lFieldIndex);
            END;
            lFieldIndex += 1;
          UNTIL (lFieldId = 0);
        END;
      END;
    END;

    LOCAL PROCEDURE "--- Internal ---"@1000000009();
    BEGIN
    END;

    LOCAL PROCEDURE FindVar@1000000025(pCode@1000000000 : Code[20];pType@1000000001 : Integer);
    BEGIN
      //DOC NA2016.10 - Trying to find universal variable with given code and type
      //  -> pCode: Variable code
      //  -> pType: Variable type

      IF (UniversalVariableTmp.GET(pCode)) THEN
      BEGIN
        IF (UniversalVariableTmp.Type <> pType) THEN
        BEGIN
          UniversalVariable.Type := pType;
          ERROR(tIncorrectType, pCode, FORMAT(UniversalVariable.Type), FORMAT(UniversalVariableTmp.Type));
        END;
      END
      ELSE
        CLEAR(UniversalVariableTmp);
    END;

    LOCAL PROCEDURE FindOrCreateVar@1000000010(pCode@1000000000 : Code[20];pType@1000000002 : Integer);
    VAR
      lModify@1000000004 : Boolean;
    BEGIN
      //DOC NA2016.10 - Trying to find universal variable; if found - verifying type; if not - creating
      //  -> pCode: Variable code
      //  -> pType: Variable type

      IF ( NOT (UniversalVariableTmp.GET(pCode))) THEN
      BEGIN
        CLEAR(UniversalVariableTmp);
        UniversalVariableTmp.INIT();
        UniversalVariableTmp.VALIDATE(Code, pCode);
        UniversalVariableTmp.VALIDATE(Type, pType);
        UniversalVariableTmp.VALIDATE("Single Use", SingleUse);
        UniversalVariableTmp.INSERT(TRUE);
      END
      ELSE
      BEGIN
        lModify := FALSE;
        IF (UniversalVariableTmp.Type <> pType) THEN
        BEGIN
          UniversalVariableTmp.VALIDATE(Type, pType);
          lModify := TRUE;
        END;
        IF (UniversalVariableTmp."Single Use" <> SingleUse) THEN
        BEGIN
          UniversalVariableTmp.VALIDATE("Single Use", SingleUse);
          lModify := TRUE;
        END;
        IF (lModify) THEN
          UniversalVariableTmp.MODIFY(TRUE);
      END;
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 10/08/2012 - Migrated to 2013
      //DOC NA2015.1  PC 16/11/2012 - Significant changes made to codeunit to support "Single Use" variables
      //DOC NA2015.1  PC 13/12/2012 - Added "Link_" functions
      //DOC NA2015.1  PC 30/01/2013 - Renamed to Universal Variables
      //DOC NA2015.2  JH 26/05/2014 - Type retrieval functions added
      //DOC NA2015.4  JH 28/12/2014 - System behaviours renamed
      //DOC NA2016.10 JH 26/08/2015 - Rewritten for 2016; integrated with old "Mobile NAV Universal Variable" functionality
    }
    END.
  }
}

