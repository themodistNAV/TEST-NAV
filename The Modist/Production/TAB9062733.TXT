OBJECT Table 9062733 AutoNAV Task Queue
{
  OBJECT-PROPERTIES
  {
    Date=07/12/17;
    Time=[ 9:45:00 PM];
    Modified=Yes;
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF (Rec.Sequence = 0) THEN
                 Rec.Sequence := NewSequence();
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    CaptionML=[ENU=AutoNAV Task Queue;
               ENG=AutoNAV Task Queue];
    LookupPageID=Page9062327;
    DrillDownPageID=Page9062327;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;OnValidate=BEGIN
                                                                TnpToolkit.CodeToName(Rec.Code, Rec.Description);
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              ENG=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 4   ;   ;Server Instance ID  ;Integer       ;CaptionML=[ENU=Server Instance ID;
                                                              ENG=Server Instance ID] }
    { 5   ;   ;Session ID          ;Integer       ;CaptionML=[ENU=Session ID;
                                                              ENG=Session ID] }
    { 6   ;   ;Last Heartbeat      ;DateTime      ;CaptionML=[ENU=Last Heartbeat;
                                                              ENG=Last Heartbeat];
                                                   Editable=No }
    { 7   ;   ;Started             ;Boolean       ;CaptionML=[ENU=Started;
                                                              ENG=Started];
                                                   Editable=No }
    { 8   ;   ;Start Automatically From NAS;Boolean;
                                                   CaptionML=[ENU=Start Automatically From NAS;
                                                              ENG=Start Automatically From NAS] }
    { 9   ;   ;Start on This NAS Computer;Text250 ;OnLookup=BEGIN
                                                              LookUpServerInstance(TRUE);
                                                            END;

                                                   CaptionML=[ENU=Start on This NAS Computer;
                                                              ENG=Start on This NAS Computer] }
    { 10  ;   ;Start on This NAS Instance;Text250 ;CaptionML=[ENU=Start on This NAS Instance;
                                                              ENG=Start on This NAS Instance] }
    { 11  ;   ;Running as User ID  ;Text132       ;TableRelation=User."User Name";
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Running as User ID;
                                                              ENG=Running as User ID];
                                                   Editable=No }
    { 12  ;   ;Running on Server Computer;Text250 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Server Instance"."Server Computer Name" WHERE (Server Instance ID=FIELD(Server Instance ID)));
                                                   CaptionML=[ENU=Running on Server Computer;
                                                              ENG=Running on Server Computer];
                                                   Editable=No }
    { 13  ;   ;Running on Server Instance;Text250 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Server Instance"."Server Instance Name" WHERE (Server Instance ID=FIELD(Server Instance ID)));
                                                   CaptionML=[ENU=Running on Server Instance;
                                                              ENG=Running on Server Instance];
                                                   Editable=No }
    { 14  ;   ;Sequence            ;Integer       ;CaptionML=[ENU=Sequence;
                                                              ENG=Sequence] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Sequence,Code                            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      TnpToolkit@1000000000 : Codeunit 9062230;
      Text001@1000000001 : TextConst 'ENU=This queue has been set up to start from NAS. The queue will start automatically when the NAS service is started.;ENG=This queue has been set up to start from NAS. The queue will start automatically when the NAS service is started.';

    PROCEDURE StartQueueFromUI@9(CompanyName@1000 : Text[30]) : Integer;
    BEGIN
      IF "Start Automatically From NAS" THEN BEGIN
        MESSAGE(Text001);
        EXIT;
      END;
      EXIT(StartQueue(CompanyName));
    END;

    PROCEDURE StartQueue@2(CompanyName@1000 : Text[30]) : Integer;
    VAR
      ServerInstance@1001 : Record 2000000112;
    BEGIN
      IF NOT GET(Code) THEN
        EXIT;
      IF QueueIsRunning THEN
        EXIT;

      IF "Start Automatically From NAS" AND (("Start on This NAS Computer" <> '') OR ("Start on This NAS Instance" <> '')) THEN BEGIN
        ServerInstance.GET(SERVICEINSTANCEID);
        IF ("Start on This NAS Computer" <> '') AND
           (LOWERCASE(ServerInstance."Server Computer Name") <> LOWERCASE("Start on This NAS Computer")) OR
           ("Start on This NAS Instance" <> '') AND
           (LOWERCASE(ServerInstance."Server Instance Name") <> LOWERCASE("Start on This NAS Instance"))
        THEN
          EXIT;
      END;

      LOCKTABLE;
      GET(Code);
      Started := TRUE;
      "Server Instance ID" := SERVICEINSTANCEID;
      "Running as User ID" := COPYSTR(USERID,1,MAXSTRLEN("Running as User ID"));
      STARTSESSION("Session ID",CODEUNIT::"AutoNAV Task Queue Dispatcher",CompanyName);
      MODIFY;
      COMMIT;
      EXIT("Session ID");
    END;

    PROCEDURE StopQueue@5();
    BEGIN
      LOCKTABLE;
      IF NOT GET(Code) THEN
        EXIT;
      Started := FALSE;  // Signal to background session (Job Queue Dispatcher).
      ResetServiceValues;
      MODIFY;
      COMMIT;
    END;

    PROCEDURE QueueIsRunning@1() : Boolean;
    VAR
      ActiveSession@1001 : Record 2000000110;
      SessionEvent@1000 : Record 2000000111;
      LastSessionEvent@1002 : Record 2000000111;
    BEGIN
      IF "Session ID" = 0 THEN
        EXIT(FALSE);

      // Note that records in the Active Session table recycle the Session ID whenever the Service
      // is restarted (ie. IDs increment from 1 again). In cases where restarting the Service
      // will not spawn sessions in the same sequence, the following code block may positively identify
      // the wrong session.
      ActiveSession.SETRANGE("Server Instance ID","Server Instance ID");
      ActiveSession.SETRANGE("Session ID","Session ID");
      ActiveSession.SETRANGE("Client Type",ActiveSession."Client Type"::Background);
      IF NOT ActiveSession.FINDFIRST THEN
        EXIT(FALSE);

      SessionEvent.SETRANGE("Server Instance ID","Server Instance ID");
      SessionEvent.SETRANGE("Session ID","Session ID");
      SessionEvent.SETRANGE("Client Type",SessionEvent."Client Type"::Background);
      SessionEvent.SETFILTER("Event Datetime",'>=%1',ActiveSession."Login Datetime");
      IF SessionEvent.ISEMPTY THEN
        EXIT(FALSE);

      IF SessionEvent.FINDSET THEN
        REPEAT
          IF SessionEvent."Event Datetime" > LastSessionEvent."Event Datetime" THEN
            LastSessionEvent := SessionEvent;
        UNTIL SessionEvent.NEXT = 0;

      // This assumes that the last Session Events are not Logon or Start. Note that in special cases such as when
      // a Service remains offline, the Active Session record is assumed dead and removed after 5mins,
      // but no Session Event records are added to the table (with Event Type 4).
      EXIT(LastSessionEvent."Event Type" IN [LastSessionEvent."Event Type"::Logon,LastSessionEvent."Event Type"::Start]);
    END;

    PROCEDURE UpdateHeartbeat@3();
    BEGIN
      LOCKTABLE;
      IF GET(Code) THEN BEGIN
        "Last Heartbeat" := CURRENTDATETIME;
        MODIFY;
      END;
    END;

    PROCEDURE ResetServiceValues@4();
    BEGIN
      "Server Instance ID" := 0;
      "Session ID" := 0;
      "Running as User ID" := '';
      "Last Heartbeat" := 0DT;
    END;

    LOCAL PROCEDURE LookUpServerInstance@6(OnlyServer@1002 : Boolean);
    VAR
      ServerInstance@1000 : Record 2000000112;
      ServerInstanceList@1001 : Page 676;
    BEGIN
      IF "Start on This NAS Computer" <> '' THEN
        ServerInstance.SETRANGE("Server Computer Name","Start on This NAS Computer");
      IF "Start on This NAS Instance" <> '' THEN
        ServerInstance.SETRANGE("Server Instance Name","Start on This NAS Instance");
      IF ServerInstance.FINDFIRST THEN;
      ServerInstanceList.SETRECORD(ServerInstance);
      ServerInstance.RESET;
      ServerInstanceList.LOOKUPMODE := TRUE;
      IF ServerInstanceList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ServerInstanceList.GETRECORD(ServerInstance);
        "Start on This NAS Computer" := ServerInstance."Server Computer Name";
        IF NOT OnlyServer THEN
          "Start on This NAS Instance" := ServerInstance."Server Instance Name";
      END;
    END;

    PROCEDURE SaveEditedRecord@8();
    VAR
      AutoNavTaskQueue@1000 : Record 9062733;
    BEGIN
      AutoNavTaskQueue := Rec;
      LOCKTABLE;
      GET(Code);
      Description := AutoNavTaskQueue.Description;
      "Start Automatically From NAS" := AutoNavTaskQueue."Start Automatically From NAS";
      "Start on This NAS Computer" := AutoNavTaskQueue."Start on This NAS Computer";
      "Start on This NAS Instance" := AutoNavTaskQueue."Start on This NAS Instance";
      MODIFY;
    END;

    PROCEDURE CleanupStatusForAll@7();
    VAR
      AutoNavTaskQueue@1000 : Record 9062733;
    BEGIN
      IF AutoNavTaskQueue.FINDSET THEN
        REPEAT
          IF AutoNavTaskQueue.Started THEN
            IF NOT AutoNavTaskQueue.QueueIsRunning THEN BEGIN
              AutoNavTaskQueue.ResetServiceValues;
              AutoNavTaskQueue.Started := FALSE;
              AutoNavTaskQueue.MODIFY;
            END;
        UNTIL AutoNavTaskQueue.NEXT = 0;
    END;

    LOCAL PROCEDURE NewSequence@1000000000() : Integer;
    VAR
      AutoNavTaskQueue@1000000000 : Record 9062733;
    BEGIN
      AutoNavTaskQueue.RESET();
      AutoNavTaskQueue.SETCURRENTKEY(Sequence);
      IF (AutoNavTaskQueue.FINDLAST()) THEN
        EXIT(AutoNavTaskQueue.Sequence + 10)
      ELSE
        EXIT(10);
    END;

    BEGIN
    {
      //DOC NA2016.10 JH 01/09/2015 - Created (based on job queues)
      //DOC NA2016.12 JH 17/12/2015 - Bugfixes
    }
    END.
  }
}

