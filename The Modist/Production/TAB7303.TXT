OBJECT Table 7303 Bin Type
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckCombination(0);
             END;

    OnModify=BEGIN
               CheckCombination(0);
             END;

    OnDelete=VAR
               Zone@1000 : Record 7300;
               Bin@1001 : Record 7354;
               BinContent@1002 : Record 7302;
             BEGIN
               Zone.SETRANGE("Bin Type Code",Code);
               IF Zone.FINDFIRST THEN
                 ERROR(
                   Text000,
                   TABLECAPTION,Zone.TABLECAPTION,Zone."Location Code",Zone.Code);

               Bin.SETCURRENTKEY("Bin Type Code");
               Bin.SETRANGE("Bin Type Code",Code);
               IF Bin.FINDFIRST THEN
                 ERROR(
                   Text001,
                   TABLECAPTION,Bin.TABLECAPTION,Bin."Location Code",Bin."Zone Code",Bin.Code);

               BinContent.SETCURRENTKEY("Bin Type Code");
               BinContent.SETRANGE("Bin Type Code",Code);
               IF BinContent.FINDFIRST THEN
                 ERROR(
                   Text001,
                   TABLECAPTION,BinContent.TABLECAPTION,BinContent."Location Code",
                   BinContent."Zone Code",BinContent."Bin Code");
             END;

    CaptionML=[ENU=Bin Type;
               ENG=Bin Type];
    LookupPageID=Page7307;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              ENG=Code];
                                                   NotBlank=Yes }
    { 5   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 10  ;   ;Receive             ;Boolean       ;OnValidate=BEGIN
                                                                CheckCombination(CurrFieldNo);
                                                              END;

                                                   CaptionML=[ENU=Receive;
                                                              ENG=Receive] }
    { 11  ;   ;Ship                ;Boolean       ;OnValidate=BEGIN
                                                                CheckCombination(CurrFieldNo);
                                                              END;

                                                   CaptionML=[ENU=Ship;
                                                              ENG=Ship] }
    { 12  ;   ;Put Away            ;Boolean       ;OnValidate=BEGIN
                                                                CheckCombination(CurrFieldNo);
                                                              END;

                                                   CaptionML=[ENU=Put Away;
                                                              ENG=Put Away] }
    { 13  ;   ;Pick                ;Boolean       ;OnValidate=BEGIN
                                                                CheckCombination(CurrFieldNo);
                                                              END;

                                                   CaptionML=[ENU=Pick;
                                                              ENG=Pick] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete the %1 because there is %2 %3 %4 with this %1.;ENG=You cannot delete the %1 because there is %2 %3 %4 with this %1.';
      Text001@1001 : TextConst 'ENU=You cannot delete the %1 because there is %2 %3 %4 %5 with this %1.;ENG=You cannot delete the %1 because there is %2 %3 %4 %5 with this %1.';
      Text002@1002 : TextConst 'ENU=This combination already exists for %1 %2.;ENG=This combination already exists for %1 %2.';
      Text003@1003 : TextConst 'ENU=The %1 filter expression is too long.\Please use less Bin Types or shorter %1 Codes.;ENG=The %1 filter expression is too long.\Please use less Bin Types or shorter %1 Codes.';

    LOCAL PROCEDURE CheckCombination@2(CalledByFieldNo@1000 : Integer);
    VAR
      BinType@1001 : Record 7303;
    BEGIN
      CASE CalledByFieldNo OF
        0:
          BEGIN
            BinType.SETFILTER(Code,'<>%1',Code);
            BinType.SETRANGE(Receive,Receive);
            BinType.SETRANGE(Ship,Ship);
            BinType.SETRANGE("Put Away","Put Away");
            BinType.SETRANGE(Pick,Pick);
            IF BinType.FINDFIRST THEN
              ERROR(Text002,TABLECAPTION,BinType.Code);
          END;
        FIELDNO(Receive):
          BEGIN
            TESTFIELD("Put Away",FALSE);
            TESTFIELD(Pick,FALSE);
            TESTFIELD(Ship,FALSE);
          END;
        FIELDNO(Ship):
          BEGIN
            TESTFIELD(Receive,FALSE);
            TESTFIELD("Put Away",FALSE);
            TESTFIELD(Pick,FALSE);
          END;
        FIELDNO("Put Away"):
          BEGIN
            TESTFIELD(Receive,FALSE);
            TESTFIELD(Ship,FALSE);
          END;
        FIELDNO(Pick):
          BEGIN
            TESTFIELD(Receive,FALSE);
            TESTFIELD(Ship,FALSE);
          END;
      END;
    END;

    PROCEDURE CreateBinTypeFilter@13(VAR BinTypeFilter@1000 : Text[250];Type@1001 : 'Receive,Ship,Put-away,Pick');
    VAR
      BinType@1002 : Record 7303;
    BEGIN
      BinTypeFilter := '';
      CASE Type OF
        Type::Receive:
          BinType.SETRANGE(Receive,TRUE);
        Type::Ship:
          BinType.SETRANGE(Ship,TRUE);
        Type::"Put-away":
          BinType.SETRANGE("Put Away",TRUE);
        Type::Pick:
          BinType.SETRANGE(Pick,TRUE);
      END;
      IF BinType.FIND('-') THEN
        REPEAT
          IF STRLEN(BinTypeFilter) + STRLEN(BinType.Code) + 1 <=
             MAXSTRLEN(BinTypeFilter)
          THEN BEGIN
            IF BinTypeFilter = '' THEN
              BinTypeFilter := BinType.Code
            ELSE
              BinTypeFilter := BinTypeFilter + '|' + BinType.Code;
          END ELSE
            ERROR(Text003,BinType.TABLECAPTION);
        UNTIL BinType.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

