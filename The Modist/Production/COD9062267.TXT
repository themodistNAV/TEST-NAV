OBJECT Codeunit 9062267 File Attachment Management
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            Code();
          END;

  }
  CODE
  {
    VAR
      RBAutoMgt@1000 : Codeunit 419;
      _ClientTempPath@1001 : Text[250];
      SNText001@1102633000 : TextConst 'ENU=Overwrite existing Attachment?;ENG=Overwrite existing Attachment?;ENC=Overwrite existing Attachment?';
      SNText002@1102633001 : TextConst 'ENU=No Attachment!;ENG=No Attachment!;ENC=No Attachment!';
      SNText003@1102633002 : TextConst 'ENU=Mergesource;ENG=Mergesource;ENC=Mergesource';
      SNText004@1102633003 : TextConst 'ENU=''.HTML'';ENG=''.HTML'';ENC=''.HTML''';
      SNText005@1102633004 : TextConst 'ENU=Could not Create Merge File;ENG=Could not Create Merge File;ENC=Could not Create Merge File';
      Text001@1102633010 : TextConst 'ENU=File %1 not found.;ENG=File %1 not found.;ENC=File %1 not found.';
      Text002@1102633009 : TextConst 'ENU=File %1 already exists.;ENG=File %1 already exists.;ENC=File %1 already exists.';
      Text003@1102633006 : TextConst 'ENU=Unable to create %1: %2;ENG=Unable to create %1: %2;ENC=Unable to create %1: %2';
      TextWSH@1102633008 : TextConst 'ENU=Windows Scripting Host;ENG=Windows Scripting Host;ENC=Windows Scripting Host';
      TextFSO@1102633007 : TextConst 'ENU=FileSystemObject;ENG=FileSystemObject;ENC=FileSystemObject';
      TNLUtils@1000000000 : Codeunit 9062229;
      mFileSystem@1000000001 : Codeunit 9062264;
      tEditWordNotImplemented@1000000002 : TextConst 'ENU=Word editing hasn''t been implemented yet;ENG=Word editing hasn''t been implemented yet';

    PROCEDURE "--- Main ---"@1000000006();
    BEGIN
    END;

    PROCEDURE Code@1000000008();
    VAR
      FAQ@1000000000 : Record 9062270;
      FAQEntry@1000000001 : Record 9062271;
    BEGIN
      IF FAQ.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          IF TNLUtils.IsMyAutoNAVTask('FAQ_REFRESHENTRIES') THEN
            FAQ.RefreshQueueEntries;

          IF TNLUtils.IsMyAutoNAVTask('FAQ_AUTOPROCESS') THEN BEGIN
            IF FAQ."Process Automatically" THEN BEGIN
              FAQEntry.SETRANGE("Queue Code",FAQ.Code);
              IF FAQEntry.FINDSET THEN BEGIN
                REPEAT
                  FAQEntry.AutoProcessEntry(FALSE);
                UNTIL FAQEntry.NEXT = 0;
              END;
            END;
          END;
        UNTIL FAQ.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ImportFile@1(pFileAttachment@1000 : Record 9062272);
    VAR
      BLOBRef@1102633000 : Record 99008535;
      FileName@1001 : Text[250];
    BEGIN
      pFileAttachment.CALCFIELDS(Attachment);
      IF pFileAttachment.Attachment.HASVALUE THEN BEGIN
        IF NOT CONFIRM(SNText001) THEN
          EXIT;
      END;

      FileName := RBAutoMgt.BLOBImport(BLOBRef, '');
      IF FileName <> '' THEN BEGIN
         pFileAttachment.FileName := mFileSystem.GetFileName(FALSE, FileName);
         pFileAttachment.Attachment := BLOBRef.Blob;
         pFileAttachment.MODIFY();
      END;
    END;

    LOCAL PROCEDURE ExportFile@2(pFileAttachment@1000 : Record 9062272;Prompt@1102633000 : Boolean) FileName : Text[250];
    VAR
      BLOBRef@1002 : Record 99008535;
      ClientTempPath@9062229 : Text;
    BEGIN
      pFileAttachment.CALCFIELDS(Attachment);
      IF NOT pFileAttachment.Attachment.HASVALUE THEN BEGIN
        MESSAGE(SNText002);
        EXIT;
      END;

      BLOBRef.Blob := pFileAttachment.Attachment;
      FileName := RBAutoMgt.BLOBExport(BLOBRef, pFileAttachment.FileName, Prompt);
      IF FileName<>'' THEN BEGIN
        ClientTempPath := mFileSystem.GetTempPath(TRUE);
        IF UPPERCASE(COPYSTR(FileName,1,STRLEN(ClientTempPath))) <> UPPERCASE(ClientTempPath) THEN BEGIN
          FileName := '';
        END;
      END;
    END;

    PROCEDURE "--- Misc ---"@1102633001();
    BEGIN
    END;

    PROCEDURE RecordRename@1000000001(RecRef@1000000001 : RecordRef;xRecRef@1000000000 : RecordRef);
    VAR
      FAttach@1000000002 : Record 9062272;
      xPrimKeyFieldID1@1000000003 : Integer;
      xPrimKeyFieldID2@1000000004 : Integer;
      xPrimKeyFieldID3@1000000005 : Integer;
      PrimKeyFieldID1@1000000008 : Integer;
      PrimKeyFieldID2@1000000007 : Integer;
      PrimKeyFieldID3@1000000006 : Integer;
      PrimKeyValue1@1000000009 : Text[250];
      PrimKeyValue2@1000000010 : Text[250];
      PrimKeyValue3@1000000011 : Text[250];
    BEGIN
      FAttach.SETRANGE("Table ID",xRecRef.NUMBER);

      xPrimKeyFieldID1 := TNLUtils.GetPrimaryKeyFieldID(xRecRef.NUMBER,xRecRef.GETPOSITION,1);
      IF xPrimKeyFieldID1 > 0 THEN BEGIN
        PrimKeyValue1 := TNLUtils.GetPrimaryKey(xRecRef.NUMBER,xRecRef.GETPOSITION,1);
        IF (STRLEN(PrimKeyValue1) > MAXSTRLEN(FAttach."Primary Key Value 1")) THEN
          EXIT;
        FAttach.SETRANGE("Primary Key FieldID 1",xPrimKeyFieldID1);
        FAttach.SETRANGE("Primary Key Value 1",PrimKeyValue1);
      END;

      xPrimKeyFieldID2 := TNLUtils.GetPrimaryKeyFieldID(xRecRef.NUMBER,xRecRef.GETPOSITION,2);
      IF xPrimKeyFieldID2 > 0 THEN BEGIN
        PrimKeyValue2 := TNLUtils.GetPrimaryKey(xRecRef.NUMBER,xRecRef.GETPOSITION,2);
        IF (STRLEN(PrimKeyValue2) > MAXSTRLEN(FAttach."Primary Key Value 2")) THEN
          EXIT;
        FAttach.SETRANGE("Primary Key FieldID 2",xPrimKeyFieldID2);
        FAttach.SETRANGE("Primary Key Value 2",PrimKeyValue2);
      END;

      xPrimKeyFieldID3 := TNLUtils.GetPrimaryKeyFieldID(xRecRef.NUMBER,xRecRef.GETPOSITION,3);
      IF xPrimKeyFieldID3 > 0 THEN BEGIN
        PrimKeyValue3 := TNLUtils.GetPrimaryKey(xRecRef.NUMBER,xRecRef.GETPOSITION,3);
        IF (STRLEN(PrimKeyValue3) > MAXSTRLEN(FAttach."Primary Key Value 3")) THEN
          EXIT;
        FAttach.SETRANGE("Primary Key FieldID 3",xPrimKeyFieldID3);
        FAttach.SETRANGE("Primary Key Value 3",PrimKeyValue3);
      END;

      PrimKeyFieldID1 := TNLUtils.GetPrimaryKeyFieldID(RecRef.NUMBER,RecRef.GETPOSITION,1);
      IF PrimKeyFieldID1 > 0 THEN
        PrimKeyValue1 := FORMAT(TNLUtils.GetPrimaryKey(RecRef.NUMBER,RecRef.GETPOSITION,1));

      PrimKeyFieldID2 := TNLUtils.GetPrimaryKeyFieldID(RecRef.NUMBER,RecRef.GETPOSITION,2);
      IF PrimKeyFieldID2 > 0 THEN
        PrimKeyValue2 := FORMAT(TNLUtils.GetPrimaryKey(RecRef.NUMBER,RecRef.GETPOSITION,2));

      PrimKeyFieldID3 := TNLUtils.GetPrimaryKeyFieldID(RecRef.NUMBER,RecRef.GETPOSITION,3);
      IF PrimKeyFieldID3 > 0 THEN
        PrimKeyValue3 := FORMAT(TNLUtils.GetPrimaryKey(RecRef.NUMBER,RecRef.GETPOSITION,3));

      IF FAttach.FINDSET THEN BEGIN
        REPEAT
          FAttach.VALIDATE("Table ID",RecRef.NUMBER);
          IF PrimKeyFieldID1 > 0 THEN BEGIN
            IF (STRLEN(PrimKeyValue1) > MAXSTRLEN(FAttach."Primary Key Value 1")) THEN
              EXIT;
            FAttach.VALIDATE("Primary Key FieldID 1",PrimKeyFieldID1);
            FAttach.VALIDATE("Primary Key Value 1",PrimKeyValue1);
          END;
          IF PrimKeyFieldID2 > 0 THEN BEGIN
            IF (STRLEN(PrimKeyValue2) > MAXSTRLEN(FAttach."Primary Key Value 2")) THEN
              EXIT;
            FAttach.VALIDATE("Primary Key FieldID 2",PrimKeyFieldID2);
            FAttach.VALIDATE("Primary Key Value 2",PrimKeyValue2);
          END;
          IF PrimKeyFieldID3 > 0 THEN BEGIN
            IF (STRLEN(PrimKeyValue3) > MAXSTRLEN(FAttach."Primary Key Value 3")) THEN
              EXIT;
            FAttach.VALIDATE("Primary Key FieldID 3",PrimKeyFieldID3);
            FAttach.VALIDATE("Primary Key Value 3",PrimKeyValue3);
          END;
          FAttach.MODIFY(TRUE);
        UNTIL FAttach.NEXT = 0;
      END;
    END;

    PROCEDURE RecordDelete@1000000003(RecRef@1000000001 : RecordRef);
    VAR
      FAttach@1000000002 : Record 9062272;
      PrimKeyFieldID1@1000000008 : Integer;
      PrimKeyFieldID2@1000000007 : Integer;
      PrimKeyFieldID3@1000000006 : Integer;
      PrimKeyValue1@1000000009 : Text[250];
      PrimKeyValue2@1000000010 : Text[250];
      PrimKeyValue3@1000000011 : Text[250];
    BEGIN
      FAttach.SETRANGE("Table ID",RecRef.NUMBER);

      IF (STRLEN(RecRef.GETPOSITION) > 250) THEN EXIT;

      PrimKeyFieldID1 := TNLUtils.GetPrimaryKeyFieldID(RecRef.NUMBER,RecRef.GETPOSITION,1);
      IF PrimKeyFieldID1 > 0 THEN BEGIN
        FAttach.SETRANGE("Primary Key FieldID 1",PrimKeyFieldID1);
        FAttach.SETRANGE("Primary Key Value 1",COPYSTR(TNLUtils.GetPrimaryKey(RecRef.NUMBER,RecRef.GETPOSITION,1),
          1,MAXSTRLEN(FAttach."Primary Key Value 1")));
      END;

      PrimKeyFieldID2 := TNLUtils.GetPrimaryKeyFieldID(RecRef.NUMBER,RecRef.GETPOSITION,2);
      IF PrimKeyFieldID2 > 0 THEN BEGIN
        FAttach.SETRANGE("Primary Key FieldID 2",PrimKeyFieldID2);
        FAttach.SETRANGE("Primary Key Value 2",COPYSTR(TNLUtils.GetPrimaryKey(RecRef.NUMBER,RecRef.GETPOSITION,2),
          1,MAXSTRLEN(FAttach."Primary Key Value 2")));
      END;

      PrimKeyFieldID3 := TNLUtils.GetPrimaryKeyFieldID(RecRef.NUMBER,RecRef.GETPOSITION,3);
      IF PrimKeyFieldID3 > 0 THEN BEGIN
        FAttach.SETRANGE("Primary Key FieldID 3",PrimKeyFieldID3);
        FAttach.SETRANGE("Primary Key Value 3",COPYSTR(TNLUtils.GetPrimaryKey(RecRef.NUMBER,RecRef.GETPOSITION,3),
          1,MAXSTRLEN(FAttach."Primary Key Value 3")));
      END;

      IF FAttach.FINDSET THEN FAttach.DELETEALL(TRUE);
    END;

    PROCEDURE TransferToRecordRecRef@1000000011(ToRecRef@1000000001 : RecordRef;FromRecRef@1000000000 : RecordRef;CopyOnly@1000000012 : Boolean;AttachmentTypeFilter@1000000014 : Text[1024]);
    VAR
      FAttach@1000000002 : Record 9062272;
      DestFAttach@1000000013 : Record 9062272;
      xPrimKeyFieldID1@1000000003 : Integer;
      xPrimKeyFieldID2@1000000004 : Integer;
      xPrimKeyFieldID3@1000000005 : Integer;
      PrimKeyFieldID1@1000000008 : Integer;
      PrimKeyFieldID2@1000000007 : Integer;
      PrimKeyFieldID3@1000000006 : Integer;
      PrimKeyValue1@1000000009 : Text[250];
      PrimKeyValue2@1000000010 : Text[250];
      PrimKeyValue3@1000000011 : Text[250];
    BEGIN
      FAttach.SETRANGE("Table ID",FromRecRef.NUMBER);

      xPrimKeyFieldID1 := TNLUtils.GetPrimaryKeyFieldID(FromRecRef.NUMBER,FromRecRef.GETPOSITION,1);
      IF xPrimKeyFieldID1 > 0 THEN BEGIN
        FAttach.SETRANGE("Primary Key Value 1",TNLUtils.GetPrimaryKey(FromRecRef.NUMBER,FromRecRef.GETPOSITION,1));
      END;

      xPrimKeyFieldID2 := TNLUtils.GetPrimaryKeyFieldID(FromRecRef.NUMBER,FromRecRef.GETPOSITION,2);
      IF xPrimKeyFieldID2 > 0 THEN BEGIN
        FAttach.SETRANGE("Primary Key Value 2",TNLUtils.GetPrimaryKey(FromRecRef.NUMBER,FromRecRef.GETPOSITION,2));
      END;

      xPrimKeyFieldID3 := TNLUtils.GetPrimaryKeyFieldID(FromRecRef.NUMBER,FromRecRef.GETPOSITION,3);
      IF xPrimKeyFieldID3 > 0 THEN BEGIN
        FAttach.SETRANGE("Primary Key Value 3",TNLUtils.GetPrimaryKey(FromRecRef.NUMBER,FromRecRef.GETPOSITION,3));
      END;

      PrimKeyFieldID1 := TNLUtils.GetPrimaryKeyFieldID(ToRecRef.NUMBER,ToRecRef.GETPOSITION,1);
      IF PrimKeyFieldID1 > 0 THEN
        PrimKeyValue1 := FORMAT(TNLUtils.GetPrimaryKey(ToRecRef.NUMBER,ToRecRef.GETPOSITION,1));

      PrimKeyFieldID2 := TNLUtils.GetPrimaryKeyFieldID(ToRecRef.NUMBER,ToRecRef.GETPOSITION,2);
      IF PrimKeyFieldID2 > 0 THEN
        PrimKeyValue2 := FORMAT(TNLUtils.GetPrimaryKey(ToRecRef.NUMBER,ToRecRef.GETPOSITION,2));

      PrimKeyFieldID3 := TNLUtils.GetPrimaryKeyFieldID(ToRecRef.NUMBER,ToRecRef.GETPOSITION,3);
      IF PrimKeyFieldID3 > 0 THEN
        PrimKeyValue3 := FORMAT(TNLUtils.GetPrimaryKey(ToRecRef.NUMBER,ToRecRef.GETPOSITION,3));

      FAttach.SETFILTER(Type,AttachmentTypeFilter);

      IF FAttach.FINDSET THEN BEGIN
        REPEAT
          IF CopyOnly THEN BEGIN
            DestFAttach.INIT;
            FAttach.CALCFIELDS(Attachment);
            DestFAttach.TRANSFERFIELDS(FAttach,TRUE);
            DestFAttach."No." := '';
            DestFAttach.INSERT(TRUE);
          END ELSE BEGIN
            DestFAttach.GET(FAttach."No.");
          END;

          DestFAttach.VALIDATE("Table ID",ToRecRef.NUMBER);
          IF PrimKeyFieldID1 > 0 THEN BEGIN
            DestFAttach.VALIDATE("Primary Key FieldID 1",PrimKeyFieldID1);
            DestFAttach.VALIDATE("Primary Key Value 1",PrimKeyValue1);
          END ELSE BEGIN
            DestFAttach.VALIDATE("Primary Key FieldID 1",0);
            DestFAttach.VALIDATE("Primary Key Value 1",'');
          END;
          IF PrimKeyFieldID2 > 0 THEN BEGIN
            DestFAttach.VALIDATE("Primary Key FieldID 2",PrimKeyFieldID2);
            DestFAttach.VALIDATE("Primary Key Value 2",PrimKeyValue2);
          END ELSE BEGIN
            DestFAttach.VALIDATE("Primary Key FieldID 2",0);
            DestFAttach.VALIDATE("Primary Key Value 2",'');
          END;
          IF PrimKeyFieldID3 > 0 THEN BEGIN
            DestFAttach.VALIDATE("Primary Key FieldID 3",PrimKeyFieldID3);
            DestFAttach.VALIDATE("Primary Key Value 3",PrimKeyValue3);
          END ELSE BEGIN
            DestFAttach.VALIDATE("Primary Key FieldID 3",0);
            DestFAttach.VALIDATE("Primary Key Value 3",'');
          END;
          DestFAttach.MODIFY(TRUE);
        UNTIL FAttach.NEXT = 0;
      END;
    END;

    PROCEDURE MoveToRecordRecRef@1000000004(ToRecRef@1000000001 : RecordRef;FromRecRef@1000000000 : RecordRef);
    VAR
      FAttach@1000000002 : Record 9062272;
      xPrimKeyFieldID1@1000000003 : Integer;
      xPrimKeyFieldID2@1000000004 : Integer;
      xPrimKeyFieldID3@1000000005 : Integer;
      PrimKeyFieldID1@1000000008 : Integer;
      PrimKeyFieldID2@1000000007 : Integer;
      PrimKeyFieldID3@1000000006 : Integer;
      PrimKeyValue1@1000000009 : Text[250];
      PrimKeyValue2@1000000010 : Text[250];
      PrimKeyValue3@1000000011 : Text[250];
    BEGIN
      TransferToRecordRecRef(ToRecRef,FromRecRef,FALSE,'*');
    END;

    PROCEDURE MoveToRecord@1000000005(ToTableID@1000000002 : Integer;ToPosition@1000000003 : Text[250];FromTableID@1000000001 : Integer;FromPosition@1000000000 : Text[250]);
    VAR
      FromRecRef@1000000004 : RecordRef;
      ToRecRef@1000000005 : RecordRef;
    BEGIN
      FromRecRef.OPEN(FromTableID);
      FromRecRef.SETPOSITION(FromPosition);
      ToRecRef.OPEN(ToTableID);
      ToRecRef.SETPOSITION(ToPosition);
      MoveToRecordRecRef(ToRecRef,FromRecRef);
    END;

    PROCEDURE CopyToRecord@1000000010(ToTableID@1000000002 : Integer;ToPosition@1000000003 : Text[250];FromTableID@1000000001 : Integer;FromPosition@1000000000 : Text[250]);
    VAR
      FromRecRef@1000000004 : RecordRef;
      ToRecRef@1000000005 : RecordRef;
    BEGIN
      FromRecRef.OPEN(FromTableID);
      FromRecRef.SETPOSITION(FromPosition);
      ToRecRef.OPEN(ToTableID);
      ToRecRef.SETPOSITION(ToPosition);
      TransferToRecordRecRef(ToRecRef,FromRecRef,TRUE,'*');
    END;

    PROCEDURE "-- UI --"@1000000007();
    BEGIN
    END;

    PROCEDURE TransferAttachmentsBetweenRecords@1000000009(SourceTableNo@1000000000 : Integer;SourcePosition@1000000001 : Text[1024];DestTableNo@1000000002 : Integer;DestPosition@1000000003 : Text[1024];CopyOnly@1000000006 : Boolean;ChooseFromList@1000000007 : Boolean;AttachmentTypeFilter@1000000013 : Text[1024]);
    VAR
      FAttach@1000000004 : Record 9062272;
      FAttachList@1000000005 : Page 9062313;
      SourcePKField@1000000008 : ARRAY [3] OF Integer;
      SourcePKValue@1000000011 : ARRAY [3] OF Text[250];
      DestPKField@1000000014 : ARRAY [3] OF Integer;
      DestPKValue@1000000017 : ARRAY [3] OF Text[250];
      i@1000000009 : Integer;
      SourceRecRef@1000000010 : RecordRef;
      DestRecRef@1000000012 : RecordRef;
    BEGIN
      FAttach.SETRANGE("CopyOnly Mode",CopyOnly);

      IF ChooseFromList THEN BEGIN
        i := 1;
        REPEAT
          SourcePKField[i] := TNLUtils.GetPrimaryKeyFieldID(SourceTableNo,SourcePosition,i);
          SourcePKValue[i] := TNLUtils.GetPrimaryKey(SourceTableNo,SourcePosition,i);
          DestPKField[i] := TNLUtils.GetPrimaryKeyFieldID(DestTableNo,DestPosition,i);
          DestPKValue[i] := TNLUtils.GetPrimaryKey(DestTableNo,DestPosition,i);

          i += 1;
        UNTIL i >= 3;

        FAttach.SETRANGE("Table ID",SourceTableNo);
        IF SourcePKField[1] <> 0 THEN BEGIN
          FAttach.SETRANGE("Primary Key FieldID 1",SourcePKField[1]);
          FAttach.SETRANGE("Primary Key Value 1",SourcePKValue[1]);
        END;

        IF SourcePKField[2] <> 0 THEN BEGIN
          FAttach.SETRANGE("Primary Key FieldID 2",SourcePKField[2]);
          FAttach.SETRANGE("Primary Key Value 2",SourcePKValue[2]);
        END;

        IF SourcePKField[3] <> 0 THEN BEGIN
          FAttach.SETRANGE("Primary Key FieldID 3",SourcePKField[3]);
          FAttach.SETRANGE("Primary Key Value 3",SourcePKValue[3]);
        END;

        FAttach.SETRANGE("Move to Table ID",DestTableNo);
        IF DestPKField[1] <> 0 THEN BEGIN
          FAttach.SETRANGE("Move to PK Field ID 1",DestPKField[1]);
          FAttach.SETRANGE("Move to PK Value 1",DestPKValue[1]);
        END;

        IF DestPKField[2] <> 0 THEN BEGIN
          FAttach.SETRANGE("Move to PK Field ID 2",DestPKField[2]);
          FAttach.SETRANGE("Move to PK Value 2",DestPKValue[2]);
        END;

        IF DestPKField[3] <> 0 THEN BEGIN
          FAttach.SETRANGE("Move to PK Field ID 3",DestPKField[3]);
          FAttach.SETRANGE("Move to PK Value 3",DestPKValue[3]);
        END;

        FAttachList.SETTABLEVIEW(FAttach);
        FAttachList.RUN;
      END ELSE BEGIN
        SourceRecRef.OPEN(SourceTableNo);
        SourceRecRef.SETPOSITION(SourcePosition);
        SourceRecRef.GET(SourceRecRef.RECORDID);

        DestRecRef.OPEN(DestTableNo);
        DestRecRef.SETPOSITION(DestPosition);
        DestRecRef.GET(DestRecRef.RECORDID);
        TransferToRecordRecRef(DestRecRef,SourceRecRef,CopyOnly,AttachmentTypeFilter);
      END;
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 10/08/2012 - Migrated to 2013
      //DOC NA2015.3  JH 01/10/2014 - Fixes in "RecordDelete"
      //DOC NA2015.4  PC 24/10/2014 - NAV on Demand modifications
      //DOC NA2016.4  JH 26/08/2015 - Upgraded to 2016
      //DOC NA2015.9  PC 30/09/2015 - Bug fix when Transfer Between Records that have different no. Primary Keys
      //DOC NA2016.10 AZ 15/09/2015 - Duplicate functions removed
      //DOC NA2016.11 PC 12/11/2015 - Removed commented out Message functions
      //DOC NA2016.12 AP 11/01/2016 - Don't delete records if the POSITIONTEXT > 250
      //DOC NA2016.12 JH 02/02/2016 - Bugfixes in renaming records (for PK fields being too long)
      //DOC NA2016.15 JH 18/04/2016 - CfMD amendments
    }
    END.
  }
}

