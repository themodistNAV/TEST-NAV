OBJECT Codeunit 9021799 WS: File Mgmt
{
  OBJECT-PROPERTIES
  {
    Date=13/07/16;
    Time=[ 1:51:21 PM];
    Version List=EC2016.6;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=A %1 record was inserted for %2 with %3 set as ''%4''.  Please change as required.;ENG=A %1 record was inserted for %2 with %3 set as ''%4''.  Please change as required.';
      Text002@1000000001 : TextConst 'ENU=A %1 record already exists for %2.  No changes made.;ENG=A %1 record already exists for %2.  No changes made.';

    PROCEDURE CreateSetupData@1000000002(LabelCode@1000000000 : Code[10];FolderPath@1000000003 : Text[150]);
    VAR
      CustSpecParam@1000000001 : Record 9021606;
      ParamId@1000000002 : Code[20];
      TxtL001@1000000004 : TextConst 'ENU=WS: FileMgmt codeunit;ENG=WS: FileMgmt codeunit';
    BEGIN
      ParamId:='PDF-REPORT-UNC-PATH';
      IF (NOT CustSpecParam.GET(ParamId,LabelCode,0)) THEN BEGIN
        CustSpecParam.INIT;
        CustSpecParam."Unique Identifier":=ParamId;
        CustSpecParam."Entry Code":=LabelCode;
        CustSpecParam."Entry Integer":=0;
        CustSpecParam."Where Used":=TxtL001;
        CustSpecParam."Maximum Length":=150;
        CustSpecParam.TextVar:=FolderPath;
        CustSpecParam.INSERT;
        MESSAGE(Text001,CustSpecParam.TABLECAPTION,ParamId,CustSpecParam.FIELDCAPTION("Unique Identifier"),FolderPath);
      END ELSE BEGIN
        MESSAGE(Text002,CustSpecParam.TABLECAPTION,CustSpecParam.FIELDCAPTION("Unique Identifier"));
      END;
    END;

    PROCEDURE SaveReportAsPdf@1000000003(LabelCode@1000000006 : Code[10];ReportId@1000000000 : Integer;CustomerNo@1000000001 : Code[20];VAR FileName@1000000002 : Text[100]) FilePath : Text[250];
    VAR
      customerRec@1000000003 : Record 18;
      custFragment@1000000005 : Text[50];
      custSpecParam@1000000004 : Record 9021606;
      TxtL001@1000000007 : TextConst 'ENU=for Customer %1;ENG=for Customer %1';
      TxtL002@1000000008 : TextConst 'ENU=Customer Detailed Aging Report (%1)%2.pdf;ENG=Customer Detailed Aging Report (%1)%2.pdf';
      TxtL003@1000000009 : TextConst 'ENU=Customer - Top 10 List Report (%1).pdf;ENG=Customer - Top 10 List Report (%1).pdf';
    BEGIN
      custSpecParam.GET('PDF-REPORT-UNC-PATH',LabelCode,0);
      FilePath := custSpecParam.TextVar;

      IF CustomerNo <> '' THEN BEGIN
        custFragment := ' ' + STRSUBSTNO(TxtL001, CustomerNo);
        customerRec.SETRANGE("No.",CustomerNo);
        customerRec.FIND('-');
        customerRec.SETRECFILTER;
      END;

      CASE ReportId OF
        106:
          BEGIN
            FileName:=STRSUBSTNO(TxtL002,ReportId,custFragment);
            FilePath+=FileName;
            IF (NOT REPORT.SAVEASPDF(ReportId, FilePath, customerRec)) THEN
              FilePath:='';
          END;
        111:
          BEGIN
            FileName:=STRSUBSTNO(TxtL003,ReportId);
            FilePath+=FileName;
            IF (NOT REPORT.SAVEASPDF(ReportId,FilePath)) THEN
              FilePath:='';
          END
        ELSE
          FilePath:='';
      END;
      EXIT(FilePath);
    END;

    PROCEDURE OpenDoc@1000000001(LabelCode@1000000024 : Code[10];ReportId@1000000000 : Integer;CustomerId@1000000001 : Code[20];VAR ResponseXml@1000000002 : BigText);
    VAR
      bytes@1000000018 : DotNet "'mscorlib'.System.Array";
      convert@1000000019 : DotNet "'mscorlib'.System.Convert";
      f@1000000022 : DotNet "'mscorlib'.System.IO.File";
      fileMode@1000000021 : DotNet "'mscorlib'.System.IO.FileMode";
      fileName@1000000004 : Text[250];
      filePath@1000000003 : Text[250];
      fileVar@1000000015 : File;
      fStream@1000000023 : DotNet "'mscorlib'.System.IO.FileStream";
      hasError@1000000020 : Boolean;
      inStrm@1000000017 : InStream;
      memStream@1000000016 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      "___ XML STUFF ___"@1000000014 : Integer;
      errorText@1000000013 : Text[250];
      msgText@1000000012 : Text[250];
      outputXml@1000000011 : BigText;
      xmlDoc@1000000010 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      xmlErrorNode@1000000009 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlMsgNode@1000000008 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlNode@1000000007 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlRootNode@1000000006 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      xmlTextNode@1000000005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TxtL001@1000000025 : TextConst 'ENU=Something went wrong trying to save the report.;ENG=Something went wrong trying to save the report.';
      TxtL002@1000000026 : TextConst 'ENU=Something doesn''''t look right - the file contents retrieved are empty!;ENG=Something doesn''''t look right - the file contents retrieved are empty!';
      TxtL003@1000000027 : TextConst 'ENU=File ''''%1'''' does not exist so could not be opened.;ENG=File ''''%1'''' does not exist so could not be opened.';
    BEGIN

      //prep the xml output doc...
      xmlDoc:=xmlDoc.XmlDocument();

      //add the root node...
      xmlRootNode:=xmlDoc.CreateNode('element','response','');
      xmlDoc.AppendChild(xmlRootNode);

      //add an error node (always present but only populated with a value if there's an error...
      xmlErrorNode:=xmlDoc.CreateNode('element','error','');
      xmlRootNode.AppendChild(xmlErrorNode);
      errorText:='';

      //add an error node (always present but only populated with a value if there's an error...
      xmlMsgNode:=xmlDoc.CreateNode('element','message','');
      xmlRootNode.AppendChild(xmlMsgNode);
      msgText:='';

      filePath:=SaveReportAsPdf(LabelCode,ReportId,CustomerId,fileName);
      IF (filePath='') THEN BEGIN
        hasError:=TRUE;
        errorText:=TxtL001;
      END;

      //prep xml for return data...
      xmlNode:=xmlDoc.CreateNode('element','fileName','');
      xmlMsgNode.AppendChild(xmlNode);
      xmlTextNode:=xmlDoc.CreateTextNode(fileName);
      xmlNode.AppendChild(xmlTextNode);

      xmlNode:=xmlDoc.CreateNode('element','fileBytes','');
      xmlMsgNode.AppendChild(xmlNode);

      IF (NOT hasError) THEN BEGIN
        //check the file was created...
        IF (f.Exists(filePath)) THEN BEGIN

          //open the file...
          fileMode:=3;
          fStream:=f.Open(filePath,fileMode);
          memStream:=memStream.MemoryStream();
          memStream.SetLength(fStream.Length);
          fStream.Read(memStream.GetBuffer(), 0, fStream.Length);

          //add the file bytes to the outbound xml...
          xmlTextNode:=xmlDoc.CreateTextNode(convert.ToBase64String(memStream.GetBuffer()));
          xmlNode.AppendChild(xmlTextNode);

          //close off & clean up...
          fStream.Close();
          fStream.Dispose();
          memStream.Close();
          memStream.Dispose();

          //check we have something else error!
          IF xmlTextNode.Value='' THEN BEGIN
            errorText:=TxtL002;
            hasError:=TRUE;
          END;

        END ELSE BEGIN
          hasError:=TRUE;
          errorText:=STRSUBSTNO(TxtL003,filePath);
        END;
      END;

      //add any error text collected along the way...
      xmlTextNode:=xmlDoc.CreateTextNode(errorText);
      xmlErrorNode.AppendChild(xmlTextNode);

      //add any message text collected along the way...
      xmlTextNode:=xmlDoc.CreateTextNode(msgText);
      xmlMsgNode.AppendChild(xmlTextNode);

      //MESSAGE(xmlDoc.InnerXml);

      //stuff the xml into the output...
      ResponseXml.ADDTEXT(xmlDoc.InnerXml);
    END;

    BEGIN
    {
      //DOC EC2009.2    MQ 01/01/2012 - NAV web service POC for TD quote approval & Derm My Docs for NAV2013 based on various research:
      //DOC EC2009.2    MQ 01/01/2012 -   http://blogs.msdn.com/b/freddyk/archive/2008/11/23/search-in-nav-2009-part-1-out-of-3.aspx
      //DOC EC2009.2    MQ 01/01/2012 -   http://gotcal.com/index.php/2010/11/send-dynamics-nav-rtc-reports-and-documents-as-pdf/
      //DOC EC2015.5.04 MQ 24/07/2015 - GW150724 Modified
      //DOC EC2016.6    JH 05/10/2016 - ECom 2016
    }
    END.
  }
}

