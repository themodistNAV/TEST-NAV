OBJECT Codeunit 11102072 OM - Repository SVN
{
  OBJECT-PROPERTIES
  {
    Date=01/10/13;
    Time=12:00:00 PM;
    Version List=OMA9.01;
  }
  PROPERTIES
  {
    OnRun=VAR
            TmpFileRec@1000 : TEMPORARY Record 11102094;
            ctConnectionFailed@1001 : TextConst 'DEU=The repository token cannot be found.;ENU=The repository token cannot be found.;ESP=The repository token cannot be found.;FRA=The repository token cannot be found.;NLD=Het repository token kan niet worden gevonden.;DEA=The repository token cannot be found.';
            ctTokenInvalid@1002 : TextConst 'DEU=The token is invalid.;ENU=The token is invalid.;ESP=The token is invalid.;FRA=The token is invalid.;NLD=Het token is niet geldig.;DEA=The token is invalid.';
          BEGIN
            LastTokenNo := -1;

            FillFileRec(TmpFileRec, '');

            TmpFileRec.SETFILTER(Name, 'TOKEN*');
            IF NOT TmpFileRec.FINDFIRST THEN
              ERROR(ctConnectionFailed);

            IF TmpFileRec.FINDFIRST THEN
              IF NOT EVALUATE(LastTokenNo, COPYSTR(TmpFileRec.Name, 7)) THEN
                ERROR(ctTokenInvalid);
          END;

  }
  CODE
  {
    VAR
      RepositoryPath@1000 : Text;
      LastTokenNo@1001 : Integer;

    PROCEDURE CheckCreateDirectory@1(DirectoryName@1000 : Text);
    VAR
      Mgt@1001 : Codeunit 11102035;
      StringVector@1002 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{561AEF3B-A0EB-46A4-8EA7-C08E8B7452D9}:Unknown Automation Server.Unknown Class";
      StringVector2@1003 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{561AEF3B-A0EB-46A4-8EA7-C08E8B7452D9}:Unknown Automation Server.Unknown Class";
      SVNClient@1004 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{0F1CAF29-DAC1-4F03-A72C-AF859C5CEB19}:Unknown Automation Server.Unknown Class";
      FullPath@1005 : Text;
      SubFolders@1006 : ARRAY [100] OF Text[120];
      i@1007 : Integer;
      j@1008 : Integer;
      FolderPresent@1009 : Boolean;
    BEGIN
      OpenDatabase(SVNClient);

      Mgt.Split(DirectoryName, '\', SubFolders);

      IF ISCLEAR(StringVector) THEN
        CREATE(StringVector, FALSE, TRUE);

      StringVector := SVNClient.List(DELCHR(RepositoryPath, '>', '/'), '', '', FALSE);

      FOR i := 1 TO ARRAYLEN(SubFolders) DO
        IF SubFolders[i] <> '' THEN BEGIN
          FolderPresent := FALSE;

          FOR j := 1 TO StringVector.Count DO
            IF DELCHR(StringVector.Item(j), '>', '/') = SubFolders[i] THEN
              FolderPresent := TRUE;

          IF NOT FolderPresent THEN BEGIN

            IF ISCLEAR(StringVector2) THEN
              CREATE(StringVector2, FALSE, TRUE);

            StringVector2.Add(RepositoryPath + FullPath + SubFolders[i]);

            SVNClient.MkDir(StringVector2);
            CLEAR(StringVector2);

          END;

          CLEAR(StringVector);
          CREATE(StringVector, FALSE, TRUE);
          StringVector := SVNClient.List(RepositoryPath + FullPath + SubFolders[i], '', '', FALSE);

          FullPath += SubFolders[i] + '/';

        END ELSE
          i := 100;

      CLEAR(StringVector);

      CloseDatabase(SVNClient);
    END;

    PROCEDURE FileExists@2(Path@1000 : Text;FileName@1001 : Text) ExitValue : Boolean;
    VAR
      StringVector@1002 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{561AEF3B-A0EB-46A4-8EA7-C08E8B7452D9}:Unknown Automation Server.Unknown Class";
      SVNClient@1003 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{0F1CAF29-DAC1-4F03-A72C-AF859C5CEB19}:Unknown Automation Server.Unknown Class";
      i@1004 : Integer;
    BEGIN
      OpenDatabase(SVNClient);

      IF ISCLEAR(StringVector) THEN
        CREATE(StringVector, FALSE, TRUE);

      Path := MakeSVNPath(RepositoryPath + Path, FALSE);
      StringVector := SVNClient.List(Path, '', '', FALSE);

      FOR i := 1 TO StringVector.Count DO
        IF StringVector.Item(i) = FileName THEN BEGIN
          ExitValue := TRUE;
          i := 99999;
        END;

      CLEAR(StringVector);

      CloseDatabase(SVNClient);
    END;

    PROCEDURE FileOpen@3(VAR oFile@1000 : File;Path@1001 : Text;FileName@1002 : Text);
    VAR
      FileHandler@1003 : Codeunit 11102097;
      StringVectorDes@1004 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{561AEF3B-A0EB-46A4-8EA7-C08E8B7452D9}:Unknown Automation Server.Unknown Class";
      StringVectorSrc@1005 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{561AEF3B-A0EB-46A4-8EA7-C08E8B7452D9}:Unknown Automation Server.Unknown Class";
      SVNClient@1006 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{0F1CAF29-DAC1-4F03-A72C-AF859C5CEB19}:Unknown Automation Server.Unknown Class";
      LocalPathFileName@1007 : Text;
    BEGIN
      OpenDatabase(SVNClient);

      IF ISCLEAR(StringVectorSrc) THEN
        CREATE(StringVectorSrc, FALSE, TRUE);

      IF ISCLEAR(StringVectorDes) THEN
        CREATE(StringVectorDes, FALSE, TRUE);

      Path := MakeSVNPath(Path, TRUE);

      FileName := ReplaceSpecialCharacters(FileName);

      StringVectorSrc.Add(RepositoryPath + Path + FileName);

      LocalPathFileName := FileHandler.TempDirectory + 'repository.tmp';
      IF EXISTS(LocalPathFileName) THEN
        ERASE(LocalPathFileName);
      StringVectorDes.Add(LocalPathFileName);

      SVNClient.ExportFiles(StringVectorSrc, StringVectorDes, '', '', TRUE);

      CLEAR(StringVectorSrc);
      CLEAR(StringVectorDes);

      oFile.OPEN(LocalPathFileName);

      CloseDatabase(SVNClient);
    END;

    PROCEDURE FileSave@4(FromFileName@1000 : Text;ToPath@1001 : Text;ToFileName@1002 : Text);
    VAR
      StringVectorDes@1003 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{561AEF3B-A0EB-46A4-8EA7-C08E8B7452D9}:Unknown Automation Server.Unknown Class";
      StringVectorSrc@1004 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{561AEF3B-A0EB-46A4-8EA7-C08E8B7452D9}:Unknown Automation Server.Unknown Class";
      SVNClient@1005 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{0F1CAF29-DAC1-4F03-A72C-AF859C5CEB19}:Unknown Automation Server.Unknown Class";
    BEGIN
      OpenDatabase(SVNClient);

      IF ISCLEAR(StringVectorSrc) THEN
        CREATE(StringVectorSrc, FALSE, TRUE);

      IF ISCLEAR(StringVectorDes) THEN
        CREATE(StringVectorDes, FALSE, TRUE);

      ToPath := MakeSVNPath(ToPath, TRUE);

      StringVectorSrc.Add(FromFileName);
      StringVectorDes.Add(RepositoryPath + ToPath + ToFileName);

      IF FileExists(ToPath, ToFileName) THEN
        SVNClient.Delete(StringVectorDes);

      SVNClient.ImportFiles(StringVectorSrc, StringVectorDes);

      CLEAR(StringVectorSrc);
      CLEAR(StringVectorDes);

      CloseDatabase(SVNClient);

      ERASE(FromFileName);
    END;

    PROCEDURE FileErase@5(Path@1000 : Text;FileName@1001 : Text);
    VAR
      StringVector@1002 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{561AEF3B-A0EB-46A4-8EA7-C08E8B7452D9}:Unknown Automation Server.Unknown Class";
      SVNClient@1003 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{0F1CAF29-DAC1-4F03-A72C-AF859C5CEB19}:Unknown Automation Server.Unknown Class";
    BEGIN
      OpenDatabase(SVNClient);

      IF ISCLEAR(StringVector) THEN
        CREATE(StringVector, FALSE, TRUE);

      Path := MakeSVNPath(Path, TRUE);

      StringVector.Add(RepositoryPath + Path + FileName);
      SVNClient.Delete(StringVector);

      CLEAR(StringVector);

      CloseDatabase(SVNClient);
    END;

    PROCEDURE FileRename@6(FromPath@1000 : Text;FromFileName@1001 : Text;ToPath@1002 : Text;ToFileName@1003 : Text);
    VAR
      StringVectorDes@1004 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{561AEF3B-A0EB-46A4-8EA7-C08E8B7452D9}:Unknown Automation Server.Unknown Class";
      StringVectorSrc@1005 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{561AEF3B-A0EB-46A4-8EA7-C08E8B7452D9}:Unknown Automation Server.Unknown Class";
      SVNClient@1006 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{0F1CAF29-DAC1-4F03-A72C-AF859C5CEB19}:Unknown Automation Server.Unknown Class";
    BEGIN
      OpenDatabase(SVNClient);

      IF ISCLEAR(StringVectorSrc) THEN
        CREATE(StringVectorSrc, FALSE, TRUE);

      IF ISCLEAR(StringVectorDes) THEN
        CREATE(StringVectorDes, FALSE, TRUE);

      FromPath := MakeSVNPath(FromPath, TRUE);
      ToPath := MakeSVNPath(ToPath, TRUE);

      StringVectorSrc.Add(RepositoryPath + FromPath + FromFileName);
      StringVectorDes.Add(RepositoryPath + ToPath + ToFileName);

      SVNClient.Move(StringVectorSrc, StringVectorDes);

      CLEAR(StringVectorSrc);
      CLEAR(StringVectorDes);

      CloseDatabase(SVNClient);
    END;

    PROCEDURE FileLock@7(Path@1000 : Text;FileName@1001 : Text);
    VAR
      StringVector@1002 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{561AEF3B-A0EB-46A4-8EA7-C08E8B7452D9}:Unknown Automation Server.Unknown Class";
      SVNClient@1003 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{0F1CAF29-DAC1-4F03-A72C-AF859C5CEB19}:Unknown Automation Server.Unknown Class";
    BEGIN
      EXIT;

      OpenDatabase(SVNClient);

      IF ISCLEAR(StringVector) THEN
        CREATE(StringVector, FALSE, TRUE);

      Path := MakeSVNPath(Path, TRUE);
      StringVector.Add(RepositoryPath + Path + FileName);
      SVNClient.LockFiles(StringVector);

      CLEAR(StringVector);

      CloseDatabase(SVNClient);
    END;

    PROCEDURE FileUnlock@8(Path@1000 : Text;FileName@1001 : Text);
    VAR
      StringVector@1002 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{561AEF3B-A0EB-46A4-8EA7-C08E8B7452D9}:Unknown Automation Server.Unknown Class";
      SVNClient@1003 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{0F1CAF29-DAC1-4F03-A72C-AF859C5CEB19}:Unknown Automation Server.Unknown Class";
    BEGIN
      EXIT;

      OpenDatabase(SVNClient);

      IF ISCLEAR(StringVector) THEN
        CREATE(StringVector, FALSE, TRUE);

      Path := MakeSVNPath(Path, TRUE);

      StringVector.Add(RepositoryPath + Path + FileName);
      SVNClient.UnLockFiles(StringVector);

      CLEAR(StringVector);

      CloseDatabase(SVNClient);
    END;

    PROCEDURE FileIsLocked@9(Path@1000 : Text;FileName@1001 : Text) ExitValue : Boolean;
    BEGIN
      ExitValue := FALSE;
    END;

    PROCEDURE FileLockedBy@10(Path@1000 : Text;FileName@1001 : Text;VAR LockedBy@1002 : Text;VAR LockDate@1003 : Date;VAR LockTime@1004 : Time);
    BEGIN
    END;

    PROCEDURE FillFileRec@11(VAR TmpFileRec@1000 : TEMPORARY Record 11102094;Path@1001 : Text);
    VAR
      StringVector@1002 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{561AEF3B-A0EB-46A4-8EA7-C08E8B7452D9}:Unknown Automation Server.Unknown Class";
      SVNClient@1003 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{0F1CAF29-DAC1-4F03-A72C-AF859C5CEB19}:Unknown Automation Server.Unknown Class";
      FileName@1004 : Text;
      i@1005 : Integer;
    BEGIN
      TmpFileRec.RESET;
      TmpFileRec.DELETEALL;

      OpenDatabase(SVNClient);

      IF ISCLEAR(StringVector) THEN
        CREATE(StringVector, FALSE, TRUE);

      Path := MakeSVNPath(RepositoryPath + Path, FALSE);
      StringVector := SVNClient.List(Path, '', '', FALSE);

      FOR i := 1 TO StringVector.Count DO BEGIN
        FileName := StringVector.Item(i);
        TmpFileRec."Is a File" := FileName[STRLEN(FileName)] <> '\';
        TmpFileRec.Name := FileName;
        TmpFileRec.INSERT;
      END;

      CLEAR(StringVector);

      CloseDatabase(SVNClient);
    END;

    PROCEDURE GetLastTokenNo@12() : Integer;
    BEGIN
      EXIT(LastTokenNo);
    END;

    LOCAL PROCEDURE OpenDatabase@13(VAR SVNClient@1000 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{0F1CAF29-DAC1-4F03-A72C-AF859C5CEB19}:Unknown Automation Server.Unknown Class");
    VAR
      RepositorySetup@1001 : Record 11102085;
    BEGIN
      IF ISCLEAR(SVNClient) THEN
        CREATE(SVNClient, FALSE, TRUE);

      RepositorySetup.GET;
      RepositorySetup.TESTFIELD("Repository Path");

      RepositoryPath := RepositorySetup."Repository Path";
      RepositoryPath := MakeSVNPath(RepositoryPath, TRUE);

      IF RepositorySetup.Username <> '' THEN
        SVNClient.SetOption(2, RepositorySetup.Username);

      IF RepositorySetup.Password <> '' THEN
        SVNClient.SetOption(3, RepositorySetup.Password);

      SVNClient.InitClient;
    END;

    LOCAL PROCEDURE CloseDatabase@14(VAR SVNClient@1000 : Automation "{26BAD3D0-C2C4-4723-9175-840366CF37E7} 1.3:{0F1CAF29-DAC1-4F03-A72C-AF859C5CEB19}:Unknown Automation Server.Unknown Class");
    BEGIN
      CLEAR(SVNClient);
    END;

    LOCAL PROCEDURE ReplaceSpecialCharacters@15(FileName@1000 : Text) ExitValue : Text;
    VAR
      i@1001 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(FileName) DO
        CASE FileName[i] OF
          ' ' :
            ExitValue += '%20';
          ELSE
            ExitValue += FORMAT(FileName[i]);
        END;
    END;

    LOCAL PROCEDURE MakeSVNPath@16(Path@1000 : Text;WithSlash@1001 : Boolean) ExitValue : Text;
    BEGIN
      ExitValue := CONVERTSTR(Path, '\', '/');

      IF WithSlash THEN BEGIN
        IF ExitValue <> '' THEN
          IF ExitValue[STRLEN(ExitValue)] <> '/' THEN
            ExitValue += '/';
      END ELSE
        ExitValue := DELCHR(ExitValue, '>', '/');
    END;

    BEGIN
    {
      Name: PushOk COM bindings for Subversion 1.6.6
      GUID: 26BAD3D0-C2C4-4723-9175-840366CF37E7
      Version: 1.3
      TypeLibFile: C:\Program Files\Pushok Software\SVN Proxy\svn\svncom.dll
    }
    END.
  }
}

