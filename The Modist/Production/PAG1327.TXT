OBJECT Page 1327 Mini Adjust Inventory
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Adjust Inventory;
               ENG=Adjust Inventory];
    SourceTable=Table27;
    PageType=StandardDialog;
    OnQueryClosePage=BEGIN
                       IF CloseAction IN [ACTION::OK,ACTION::LookupOK] THEN
                         PostToItemLedger;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           NewInventory := Inventory
                         END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=[ENU=General;
                           ENG=General];
                GroupType=Group }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the unit in which the item is held on inventory. The base unit of measure also serves as the conversion basis for alternate units of measure.;
                           ENG=Specifies the unit in which the item is held on inventory. The base unit of measure also serves as the conversion basis for alternate units of measure.];
                SourceExpr="Base Unit of Measure";
                Editable=FALSE }

    { 12  ;2   ;Field     ;
                CaptionML=[ENU=Current Inventory;
                           ENG=Current Inventory];
                ToolTipML=[ENU=Specifies how many units, such as pieces, boxes, or cans, of the item are on inventory.;
                           ENG=Specifies how many units, such as pieces, boxes, or cans, of the item are on inventory.];
                SourceExpr=Inventory }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=New Inventory;
                           ENG=New Inventory];
                ToolTipML=[ENU=Specifies the inventory quantity that will be recorded for the item when you choose the OK button. By default, the value in the Current Inventory field is inserted.;
                           ENG=Specifies the inventory quantity that will be recorded for the item when you choose the OK button. By default, the value in the Current Inventory field is inserted.];
                DecimalPlaces=0:5;
                SourceExpr=NewInventory }

  }
  CODE
  {
    VAR
      CantFindTemplateOrBatchErr@1001 : TextConst 'ENU=Unable to find the correct Item Journal template or batch to post this change. Use the Item Journal instead.;ENG=Unable to find the correct Item Journal template or batch to post this change. Use the Item Journal instead.';
      SimpleInvJnlNameTxt@1000 : TextConst '@@@=The default name of the item journal;ENU=DEFAULT;ENG=DEFAULT';
      ItemJnlMgt@1003 : Codeunit 240;
      NewInventory@1002 : Decimal;

    LOCAL PROCEDURE PostToItemLedger@2();
    VAR
      ItemJnlLine@1001 : Record 83;
      Completed@1000 : Boolean;
    BEGIN
      IF Inventory = NewInventory THEN
        EXIT;

      ItemJnlLine.INIT;
      ItemJnlLine.VALIDATE("Journal Template Name",SelectItemTemplate);
      ItemJnlLine.VALIDATE("Journal Batch Name",CreateItemBatch(ItemJnlLine."Journal Template Name"));
      ItemJnlLine.VALIDATE("Posting Date",TODAY);
      ItemJnlLine."Document No." := "No.";

      IF Inventory < NewInventory THEN
        ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::"Positive Adjmt.")
      ELSE
        ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::"Negative Adjmt.");

      ItemJnlLine.VALIDATE("Item No.","No.");
      ItemJnlLine.VALIDATE(Description,Description);
      ItemJnlLine.VALIDATE(Quantity,ABS(NewInventory - Inventory));
      ItemJnlLine.INSERT(TRUE);
      COMMIT;

      Completed := CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch",ItemJnlLine);

      DeleteItemBatch(ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");

      IF NOT Completed THEN
        MESSAGE(GETLASTERRORTEXT);
    END;

    LOCAL PROCEDURE SelectItemTemplate@3() : Code[10];
    VAR
      ItemJnlTemplate@1002 : Record 82;
      ItemJnlLine@1170000001 : Record 83;
      JnlSelected@1000 : Boolean;
    BEGIN
      ItemJnlMgt.TemplateSelection(PAGE::"Item Journal",0,FALSE,ItemJnlLine,JnlSelected);

      ItemJnlTemplate.SETRANGE("Page ID",PAGE::"Item Journal");
      ItemJnlTemplate.SETRANGE(Recurring,FALSE);
      ItemJnlTemplate.SETRANGE(Type,ItemJnlTemplate.Type::Item);
      IF NOT ItemJnlTemplate.FINDFIRST THEN
        ERROR(CantFindTemplateOrBatchErr);

      EXIT(ItemJnlTemplate.Name);
    END;

    LOCAL PROCEDURE CreateItemBatch@4(TemplateName@1001 : Code[10]) : Code[10];
    VAR
      ItemJnlBatch@1002 : Record 233;
    BEGIN
      ItemJnlBatch.INIT;
      ItemJnlBatch."Journal Template Name" := TemplateName;
      ItemJnlBatch.Name := CreateBatchName;
      ItemJnlBatch.Description := SimpleInvJnlNameTxt;
      ItemJnlBatch.INSERT;

      EXIT(ItemJnlBatch.Name);
    END;

    LOCAL PROCEDURE DeleteItemBatch@8(TemplateName@1001 : Code[10];BatchName@1000 : Code[10]);
    VAR
      ItemJnlBatch@1002 : Record 233;
    BEGIN
      IF ItemJnlBatch.GET(TemplateName,BatchName) THEN
        ItemJnlBatch.DELETE(TRUE);
    END;

    LOCAL PROCEDURE CreateBatchName@5() : Code[10];
    VAR
      GuidStr@1213 : Text;
      BatchName@1423 : Text;
    BEGIN
      GuidStr := FORMAT(CREATEGUID);
      // Remove numbers to avoid batch name change by INCSTR in codeunit 23
      BatchName := CONVERTSTR(GuidStr,'1234567890-','GHIJKLMNOPQ');
      EXIT(COPYSTR(BatchName,2,10));
    END;

    BEGIN
    END.
  }
}

