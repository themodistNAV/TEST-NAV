OBJECT Report 96 Copy G/L Budget
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00,NAVGB8.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Copy G/L Budget;
               ENG=Copy G/L Budget];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   IF AmountAdjustFactor = 0 THEN
                     AmountAdjustFactor := 1;

                   IF ToDateCompression = ToDateCompression::None THEN
                     ToDateCompression := ToDateCompression::Day;
                 END;

    OnPreReport=VAR
                  SelectedDim@1000 : Record 369;
                  GLSetup@1001 : Record 98;
                  GLBudgetName@1002 : Record 95;
                  Continue@1003 : Boolean;
                BEGIN
                  IF NOT NoMessage THEN
                    DimSelectionBuf.CompareDimText(3,REPORT::"Copy G/L Budget",'',ColumnDim,Text001);

                  IF (FromSource = FromSource::"G/L Budget Entry") AND (FromGLBudgetName = '') THEN
                    ERROR(STRSUBSTNO(Text002));

                  IF (FromSource = FromSource::"G/L Entry") AND (FromDate = '') THEN
                    ERROR(STRSUBSTNO(Text003));

                  IF ToGLBudgetName = '' THEN
                    ERROR(STRSUBSTNO(Text004));

                  Continue := TRUE;
                  GLBudgetName.SETRANGE(Name,ToGLBudgetName);
                  IF NOT GLBudgetName.FINDFIRST THEN BEGIN
                    IF NOT NoMessage THEN
                      IF NOT CONFIRM(
                           Text005,FALSE,ToGLBudgetName)
                      THEN
                        Continue := FALSE;
                    IF Continue THEN BEGIN
                      GLBudgetName.INIT;
                      GLBudgetName.Name := ToGLBudgetName;
                      GLBudgetName.INSERT;
                      COMMIT;
                    END;
                  END ELSE BEGIN
                    BudgetDim1Code := GLBudgetName."Budget Dimension 1 Code";
                    BudgetDim2Code := GLBudgetName."Budget Dimension 2 Code";
                    BudgetDim3Code := GLBudgetName."Budget Dimension 3 Code";
                    BudgetDim4Code := GLBudgetName."Budget Dimension 4 Code";
                  END;

                  IF (NOT NoMessage) AND Continue THEN
                    IF NOT CONFIRM(
                         Text006,FALSE)
                    THEN
                      Continue := FALSE;

                  IF Continue THEN BEGIN
                    SelectedDim.GetSelectedDim(USERID,3,REPORT::"Copy G/L Budget",'',TempSelectedDim);
                    IF TempSelectedDim.FIND('-') THEN
                      REPEAT
                        TempSelectedDim.Level := 0;
                        IF TempSelectedDim."Dimension Value Filter" <> '' THEN
                          IF FilterIncludesBlanks(TempSelectedDim."Dimension Value Filter") THEN
                            TempSelectedDim.Level := 1;
                        TempSelectedDim.MODIFY;
                      UNTIL TempSelectedDim.NEXT = 0;

                    ToGLBudgetEntry.LOCKTABLE;
                    IF ToGLBudgetEntry.FINDLAST THEN
                      GLBudgetEntryNo := ToGLBudgetEntry."Entry No." + 1
                    ELSE
                      GLBudgetEntryNo := 1;

                    GLSetup.GET;
                    GlobalDim1Code := GLSetup."Global Dimension 1 Code";
                    GlobalDim2Code := GLSetup."Global Dimension 2 Code";
                  END ELSE
                    CurrReport.QUIT;
                END;

    OnPostReport=VAR
                   FromGLBudgetEntry@1000 : Record 96;
                   FromGLEntry@1002 : Record 17;
                 BEGIN
                   WindowUpdateDateTime := CURRENTDATETIME;
                   Window.OPEN(Text007 + Text008 + Text009);

                   CASE FromSource OF
                     FromSource::"G/L Entry":
                       WITH FromGLEntry DO BEGIN
                         SETCURRENTKEY("G/L Account No.","Posting Date");
                         IF FromGLAccountNo <> '' THEN
                           SETFILTER("G/L Account No.",FromGLAccountNo);
                         SETFILTER("Posting Date",FromDate);
                         IF FIND('-') THEN BEGIN
                           REPEAT
                             ProcessRecord(
                               "G/L Account No.","Business Unit Code","Posting Date",Description,
                               "Dimension Set ID",Amount);
                           UNTIL NEXT = 0;
                         END;
                       END;
                     FromSource::"G/L Budget Entry":
                       WITH FromGLBudgetEntry DO BEGIN
                         SETCURRENTKEY("Budget Name","G/L Account No.",Description,Date);
                         SETRANGE("Budget Name",FromGLBudgetName);
                         IF FromGLAccountNo <> '' THEN
                           SETFILTER("G/L Account No.",FromGLAccountNo);
                         IF FromDate <> '' THEN
                           SETFILTER(Date,FromDate);
                         IF FIND('-') THEN BEGIN
                           REPEAT
                             ProcessRecord(
                               "G/L Account No.","Business Unit Code",Date,Description,
                               "Dimension Set ID",Amount);
                           UNTIL NEXT = 0;
                         END;
                       END;
                   END;
                   InsertGLBudgetEntry;
                   Window.CLOSE;

                   IF NOT NoMessage THEN
                     MESSAGE(Text010);
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   PeriodFormMgt.SetCalendarSource(CalendarSource);
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 12  ;2   ;Group     ;
                  CaptionML=[ENU=Copy from;
                             ENG=Copy from] }

      { 15  ;3   ;Field     ;
                  Name=Source;
                  CaptionML=[ENU=Source;
                             ENG=Source];
                  OptionCaptionML=[ENU=G/L Entry,G/L Budget Entry;
                                   ENG=G/L Entry,G/L Budget Entry];
                  SourceExpr=FromSource;
                  OnValidate=BEGIN
                               IF FromSource = FromSource::"G/L Entry" THEN
                                 FromGLBudgetName := '';
                             END;
                              }

      { 24  ;3   ;Field     ;
                  CaptionML=[ENU=Budget Name;
                             ENG=Budget Name];
                  SourceExpr=FromGLBudgetName;
                  TableRelation="G/L Budget Name";
                  OnValidate=BEGIN
                               IF (FromGLBudgetName <> '') AND (FromSource = FromSource::"G/L Entry") THEN
                                 FromSource := FromSource::"G/L Budget Entry";
                             END;
                              }

      { 22  ;3   ;Field     ;
                  Name=GLAccountNo;
                  CaptionML=[ENU=G/L Account No.;
                             ENG=G/L Account No.];
                  SourceExpr=FromGLAccountNo;
                  TableRelation="G/L Account" }

      { 9   ;3   ;Field     ;
                  Name=Date;
                  CaptionML=[ENU=Date;
                             ENG=Date];
                  SourceExpr=FromDate;
                  OnValidate=VAR
                               GLAcc@1001 : Record 15;
                               ApplicationManagement@1002 : Codeunit 1;
                             BEGIN
                               IF ApplicationManagement.MakeDateFilter(FromDate) = 0 THEN;
                               GLAcc.SETFILTER("Date Filter",FromDate);
                               FromDate := GLAcc.GETFILTER("Date Filter");
                             END;
                              }

      { 26  ;3   ;Field     ;
                  CaptionML=[ENU=Closing Entries;
                             ENG=Closing Entries];
                  OptionCaptionML=[ENU=Include,Exclude;
                                   ENG=Include,Exclude];
                  SourceExpr=FromClosingEntryFilter }

      { 1   ;3   ;Field     ;
                  CaptionML=[ENU=Dimensions;
                             ENG=Dimensions];
                  SourceExpr=ColumnDim;
                  Editable=FALSE;
                  OnAssistEdit=VAR
                                 DimSelectionBuf@1001 : Record 368;
                               BEGIN
                                 DimSelectionBuf.SetDimSelectionChange(3,REPORT::"Copy G/L Budget",ColumnDim);
                               END;
                                }

      { 11  ;2   ;Group     ;
                  CaptionML=[ENU=Copy to;
                             ENG=Copy to] }

      { 7   ;3   ;Field     ;
                  Name=BudgetName;
                  CaptionML=[ENU=Budget Name;
                             ENG=Budget Name];
                  SourceExpr=ToGLBudgetName;
                  TableRelation="G/L Budget Name" }

      { 5   ;3   ;Field     ;
                  CaptionML=[ENU=G/L Account No.;
                             ENG=G/L Account No.];
                  SourceExpr=ToGLAccountNo;
                  TableRelation="G/L Account";
                  OnValidate=BEGIN
                               ToGLAccountNoOnAfterValidate;
                             END;
                              }

      { 13  ;2   ;Group     ;
                  CaptionML=[ENU=Apply;
                             ENG=Apply] }

      { 18  ;3   ;Field     ;
                  CaptionML=[ENU=Adjustment Factor;
                             ENG=Adjustment Factor];
                  DecimalPlaces=0:5;
                  NotBlank=Yes;
                  SourceExpr=AmountAdjustFactor;
                  MinValue=0 }

      { 14  ;3   ;Field     ;
                  CaptionML=[ENU=Rounding Method;
                             ENG=Rounding Method];
                  SourceExpr=RoundingMethod.Code;
                  TableRelation="Rounding Method" }

      { 20  ;3   ;Field     ;
                  CaptionML=[ENU=Date Change Formula;
                             ENG=Date Change Formula];
                  OptionCaptionML=ENG=None,Day,Week,Month,Quarter,Year,Period;
                  SourceExpr=DateAdjustExpression }

      { 3   ;3   ;Field     ;
                  CaptionML=[ENU=Date Compression;
                             ENG=Date Compression];
                  OptionCaptionML=[ENU=None,Day,Week,Month,Quarter,Year;
                                   ENG=None,Day,Week,Month,Quarter,Year];
                  SourceExpr=ToDateCompression }

      { 1040001;2;Field     ;
                  CaptionML=[ENU=Calendar Source;
                             ENG=Calendar Source];
                  OptionCaptionML=[ENU=,System,Acc. Period;
                                   ENG=,System,Acc. Period];
                  SourceExpr=CalendarSource }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=Dimensions;ENG=Dimensions';
      Text002@1001 : TextConst 'ENU=You must specify a budget name to copy from.;ENG=You must specify a budget name to copy from.';
      Text003@1002 : TextConst 'ENU=You must specify a date interval to copy from.;ENG=You must specify a date interval to copy from.';
      Text004@1003 : TextConst 'ENU=You must specify a budget name to copy to.;ENG=You must specify a budget name to copy to.';
      Text005@1004 : TextConst 'ENU=Do you want to create G/L Budget Name %1?;ENG=Do you want to create G/L Budget Name %1?';
      Text006@1005 : TextConst 'ENU=Do you want to start the copy?;ENG=Do you want to start the copy?';
      Text007@1006 : TextConst 'ENU=Copying budget...\\;ENG=Copying budget...\\';
      Text008@1007 : TextConst 'ENU=G/L Account No. #1####################\;ENG=G/L Account No. #1####################\';
      Text009@1008 : TextConst 'ENU=Posting Date    #2######;ENG=Posting Date    #2######';
      Text010@1009 : TextConst 'ENU=Budget has been successfully copied.;ENG=Budget has been successfully copied.';
      Text011@1075 : TextConst 'ENU=You can define only one G/L Account.;ENG=You can define only one G/L Account.';
      ToGLBudgetEntry@1010 : Record 96;
      TempGLBudgetEntry@1012 : TEMPORARY Record 96;
      TempSelectedDim@1015 : TEMPORARY Record 369;
      TempDimEntryBuffer@1044 : TEMPORARY Record 373;
      DimSetEntry@1045 : Record 480;
      TempDimSetEntry@1051 : TEMPORARY Record 480;
      RoundingMethod@1018 : Record 42;
      DimSelectionBuf@1019 : Record 368;
      Calendar@1040003 : Record 2000000007;
      DimMgt@1020 : Codeunit 408;
      PeriodFormMgt@1040005 : Codeunit 359;
      Window@1013 : Dialog;
      FromDate@1021 : Text[30];
      FromSource@1022 : 'G/L Entry,G/L Budget Entry';
      FromGLBudgetName@1023 : Code[10];
      FromGLAccountNo@1024 : Code[250];
      FromClosingEntryFilter@1025 : 'Include,Exclude';
      ToGLBudgetName@1026 : Code[10];
      ToGLAccountNo@1027 : Code[20];
      ToBUCode@1028 : Code[10];
      ToDateCompression@1029 : 'None,Day,Week,Month,Quarter,Year';
      ColumnDim@1030 : Text[250];
      AmountAdjustFactor@1031 : Decimal;
      DateAdjustExpression@1032 : DateFormula;
      GLBudgetEntryNo@1033 : Integer;
      GlobalDim1Code@1034 : Code[20];
      GlobalDim2Code@1035 : Code[20];
      BudgetDim1Code@1036 : Code[20];
      BudgetDim2Code@1037 : Code[20];
      BudgetDim3Code@1038 : Code[20];
      BudgetDim4Code@1039 : Code[20];
      NoMessage@1040 : Boolean;
      CalendarSource@1040001 : ' ,System,AccPeriod';
      DateFormula@1040000 : DateFormula;
      OldGLAccountNo@1053 : Code[20];
      OldPostingDate@1052 : Date;
      OldPostingDescription@1011 : Text[50];
      OldBUCode@1050 : Code[10];
      WindowUpdateDateTime@1048 : DateTime;

    LOCAL PROCEDURE ProcessRecord@3(GLAccNo@1000 : Code[20];BUCode@1001 : Code[10];PostingDate@1002 : Date;PostingDescription@1003 : Text[50];DimSetID@1004 : Integer;Amount@1007 : Decimal);
    VAR
      NewDate@1008 : Date;
      NewDimSetID@1006 : Integer;
    BEGIN
      IF CURRENTDATETIME - WindowUpdateDateTime >= 750 THEN BEGIN
        Window.UPDATE(1,GLAccNo);
        Window.UPDATE(2,PostingDate);
        WindowUpdateDateTime := CURRENTDATETIME;
      END;
      NewDate := CalculatePeriodStart(PostingDate);
      IF (FromClosingEntryFilter = FromClosingEntryFilter::Exclude) AND (NewDate = CLOSINGDATE(NewDate)) THEN
        EXIT;

      IF (FromSource = FromSource::"G/L Entry") AND
         (ToDateCompression <> ToDateCompression::None)
      THEN
        PostingDescription := '';

      IF OldGLAccountNo = '' THEN BEGIN
        OldGLAccountNo := GLAccNo;
        OldPostingDate := NewDate;
        OldBUCode := BUCode;
        OldPostingDescription := PostingDescription;
      END;

      IF (GLAccNo <> OldGLAccountNo) OR
         (NewDate <> OldPostingDate) OR
         (BUCode <> OldBUCode) OR
         (PostingDescription <> OldPostingDescription) OR
         (ToDateCompression = ToDateCompression::None)
      THEN BEGIN
        OldGLAccountNo := GLAccNo;
        OldPostingDate := NewDate;
        OldBUCode := BUCode;
        OldPostingDescription := PostingDescription;
        InsertGLBudgetEntry;
      END;

      NewDimSetID := DimSetID;
      IF NOT IncludeFromEntry(NewDimSetID) THEN
        EXIT;

      UpdateTempGLBudgetEntry(GLAccNo,NewDate,Amount,PostingDescription,BUCode,NewDimSetID);
    END;

    LOCAL PROCEDURE UpdateTempGLBudgetEntry@6(GLAccNo@1000 : Code[20];PostingDate@1001 : Date;Amount@1002 : Decimal;Description@1003 : Text[50];BUCode@1004 : Code[10];DimSetID@1007 : Integer);
    BEGIN
      TempGLBudgetEntry.SETRANGE("G/L Account No.",GLAccNo);
      TempGLBudgetEntry.SETRANGE(Date,PostingDate);
      TempGLBudgetEntry.SETRANGE(Description,Description);
      TempGLBudgetEntry.SETRANGE("Business Unit Code",BUCode);
      TempGLBudgetEntry.SETRANGE("Dimension Set ID",DimSetID);

      IF TempGLBudgetEntry.FINDFIRST THEN BEGIN
        TempGLBudgetEntry.Amount := TempGLBudgetEntry.Amount + Amount;
        TempGLBudgetEntry.MODIFY;
        TempGLBudgetEntry.RESET;
      END ELSE BEGIN
        TempGLBudgetEntry.RESET;
        IF TempGLBudgetEntry.FINDLAST THEN
          TempGLBudgetEntry."Entry No." := TempGLBudgetEntry."Entry No." + 1
        ELSE
          TempGLBudgetEntry."Entry No." := 1;
        TempGLBudgetEntry."Dimension Set ID" := DimSetID;
        TempGLBudgetEntry."G/L Account No." := GLAccNo;
        TempGLBudgetEntry.Date := PostingDate;
        TempGLBudgetEntry.Amount := Amount;
        TempGLBudgetEntry.Description := Description;
        TempGLBudgetEntry."Business Unit Code" := BUCode;
        TempGLBudgetEntry.INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertGLBudgetEntry@2();
    VAR
      Sign@1000 : Decimal;
    BEGIN
      IF TempGLBudgetEntry.FIND('-') THEN BEGIN
        REPEAT
          IF TempGLBudgetEntry.Amount <> 0 THEN BEGIN
            ToGLBudgetEntry := TempGLBudgetEntry;
            ToGLBudgetEntry."Entry No." := GLBudgetEntryNo;
            GLBudgetEntryNo := GLBudgetEntryNo + 1;
            ToGLBudgetEntry."Budget Name" := ToGLBudgetName;
            IF ToGLAccountNo <> '' THEN
              ToGLBudgetEntry."G/L Account No." := ToGLAccountNo;
            IF ToBUCode <> '' THEN
              ToGLBudgetEntry."Business Unit Code" := ToBUCode;
            ToGLBudgetEntry."User ID" := USERID;
            ToGLBudgetEntry."Last Date Modified" := TODAY;
            ToGLBudgetEntry.Date := TempGLBudgetEntry.Date;
            ToGLBudgetEntry.Amount := ROUND(TempGLBudgetEntry.Amount * AmountAdjustFactor);
            IF RoundingMethod.Code <> '' THEN BEGIN
              IF ToGLBudgetEntry.Amount >= 0 THEN
                Sign := 1
              ELSE
                Sign := -1;
              RoundingMethod."Minimum Amount" := ABS(ToGLBudgetEntry.Amount);
              IF RoundingMethod.FIND('=<') THEN BEGIN
                ToGLBudgetEntry.Amount :=
                  ToGLBudgetEntry.Amount + Sign * RoundingMethod."Amount Added Before";
                IF RoundingMethod.Precision > 0 THEN
                  ToGLBudgetEntry.Amount :=
                    Sign *
                    ROUND(
                      ABS(
                        ToGLBudgetEntry.Amount),RoundingMethod.Precision,COPYSTR('=><',
                        RoundingMethod.Type + 1,1));
                ToGLBudgetEntry.Amount :=
                  ToGLBudgetEntry.Amount + Sign * RoundingMethod."Amount Added After";
              END;
            END;
            DimSetEntry.RESET;
            DimSetEntry.SETRANGE("Dimension Set ID",TempGLBudgetEntry."Dimension Set ID");
            IF DimSetEntry.FIND('-') THEN BEGIN
              REPEAT
                IF DimSetEntry."Dimension Code" = GlobalDim1Code THEN
                  ToGLBudgetEntry."Global Dimension 1 Code" := DimSetEntry."Dimension Value Code";
                IF DimSetEntry."Dimension Code" = GlobalDim2Code THEN
                  ToGLBudgetEntry."Global Dimension 2 Code" := DimSetEntry."Dimension Value Code";
                IF DimSetEntry."Dimension Code" = BudgetDim1Code THEN
                  ToGLBudgetEntry."Budget Dimension 1 Code" := DimSetEntry."Dimension Value Code";
                IF DimSetEntry."Dimension Code" = BudgetDim2Code THEN
                  ToGLBudgetEntry."Budget Dimension 2 Code" := DimSetEntry."Dimension Value Code";
                IF DimSetEntry."Dimension Code" = BudgetDim3Code THEN
                  ToGLBudgetEntry."Budget Dimension 3 Code" := DimSetEntry."Dimension Value Code";
                IF DimSetEntry."Dimension Code" = BudgetDim4Code THEN
                  ToGLBudgetEntry."Budget Dimension 4 Code" := DimSetEntry."Dimension Value Code";
              UNTIL DimSetEntry.NEXT = 0;
            END;
            ToGLBudgetEntry.INSERT;
          END;
        UNTIL TempGLBudgetEntry.NEXT = 0;
      END;
      TempGLBudgetEntry.RESET;
      TempGLBudgetEntry.DELETEALL;
    END;

    PROCEDURE Initialize@1(FromSource2@1000 : Option;FromGLBudgetName2@1001 : Code[10];FromGLAccountNo2@1002 : Code[250];FromDate2@1003 : Text[30];ToGlBudgetName2@1004 : Code[10];ToGLAccountNo2@1005 : Code[20];ToBUCode2@1006 : Code[10];AmountAdjustFactor2@1007 : Decimal;RoundingMethod2@1008 : Code[10];DateAdjustExpression2@1009 : DateFormula;NoMessage2@1010 : Boolean);
    BEGIN
      FromSource := FromSource2;
      FromGLBudgetName := FromGLBudgetName2;
      FromGLAccountNo := FromGLAccountNo2;
      FromDate := FromDate2;
      ToGLBudgetName := ToGlBudgetName2;
      ToGLAccountNo := ToGLAccountNo2;
      ToBUCode := ToBUCode2;
      AmountAdjustFactor := AmountAdjustFactor2;
      RoundingMethod.Code := RoundingMethod2;
      DateAdjustExpression := DateAdjustExpression2;
      NoMessage := NoMessage2;
    END;

    LOCAL PROCEDURE CalculatePeriodStart@4(PostingDate@1000 : Date) : Date;
    BEGIN
      PeriodFormMgt.SetCalendarSource(CalendarSource);
      IF FORMAT(DateAdjustExpression) <> '' THEN BEGIN
        IF PostingDate = CLOSINGDATE(PostingDate) THEN BEGIN
          PostingDate := NORMALDATE(PostingDate);
          PeriodFormMgt.CalcDate2(DateAdjustExpression,PostingDate,Calendar);
          PostingDate := CLOSINGDATE(PostingDate);
        END ELSE
          PeriodFormMgt.CalcDate2(DateAdjustExpression,PostingDate,Calendar);
      END;
      IF PostingDate = CLOSINGDATE(PostingDate) THEN
        EXIT(PostingDate);

      CASE ToDateCompression OF
        ToDateCompression::Week:
          BEGIN
            EVALUATE(DateFormula,'<-CW>');
            PeriodFormMgt.CalcDate2(DateFormula,PostingDate,Calendar);
          END;
        ToDateCompression::Month:
          BEGIN
            EVALUATE(DateFormula,'<-CM>');
            PeriodFormMgt.CalcDate2(DateFormula,PostingDate,Calendar);
          END;
        ToDateCompression::Quarter:
          BEGIN
            EVALUATE(DateFormula,'<-CQ>');
            PeriodFormMgt.CalcDate2(DateFormula,PostingDate,Calendar);
          END;
        ToDateCompression::Year:
          BEGIN
            EVALUATE(DateFormula,'<-CY>');
            PeriodFormMgt.CalcDate2(DateFormula,PostingDate,Calendar);
          END;
      END;
      EXIT(PostingDate);
    END;

    LOCAL PROCEDURE FilterIncludesBlanks@17(TheFilter@1000 : Code[250]) : Boolean;
    VAR
      TempDimBuf2@1001 : TEMPORARY Record 360;
    BEGIN
      WITH TempDimBuf2 DO BEGIN
        DELETEALL; // Necessary because of C/SIDE error
        INIT;
        INSERT;
        SETFILTER("Dimension Code",TheFilter);
        EXIT(FINDFIRST);
      END;
    END;

    LOCAL PROCEDURE IncludeFromEntry@5(VAR DimSetID@1000 : Integer) : Boolean;
    VAR
      IncludeEntry@1001 : Boolean;
    BEGIN
      IF TempDimEntryBuffer.GET(DimSetID) THEN BEGIN
        DimSetID := TempDimEntryBuffer."Dimension Entry No.";
        EXIT(TRUE);
      END;
      TempDimEntryBuffer."No." := DimSetID;

      IncludeEntry := TRUE;
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      TempDimSetEntry.RESET;
      TempDimSetEntry.DELETEALL;
      IF TempSelectedDim.FIND('-') THEN
        REPEAT
          DimSetEntry.INIT;
          DimSetEntry.SETRANGE("Dimension Code",TempSelectedDim."Dimension Code");
          IF TempSelectedDim."Dimension Value Filter" <> '' THEN
            DimSetEntry.SETFILTER("Dimension Value Code",TempSelectedDim."Dimension Value Filter");
          IF DimSetEntry.FINDFIRST THEN BEGIN
            TempDimSetEntry := DimSetEntry;
            TempDimSetEntry."Dimension Set ID" := 0;
            IF TempSelectedDim."New Dimension Value Code" <> '' THEN
              TempDimSetEntry.VALIDATE("Dimension Value Code",TempSelectedDim."New Dimension Value Code");
            TempDimSetEntry.INSERT(TRUE);
          END ELSE BEGIN
            IF TempSelectedDim."Dimension Value Filter" <> '' THEN
              IF TempSelectedDim.Level = 1 THEN BEGIN
                DimSetEntry.SETRANGE("Dimension Value Code");
                IncludeEntry := NOT DimSetEntry.FINDFIRST;
              END ELSE
                IncludeEntry := FALSE;
            IF IncludeEntry AND (TempSelectedDim."New Dimension Value Code" <> '') THEN BEGIN
              TempDimSetEntry."Dimension Set ID" := 0;
              TempDimSetEntry."Dimension Code" := COPYSTR(TempSelectedDim."Dimension Code",1,20);
              TempDimSetEntry.VALIDATE("Dimension Value Code",TempSelectedDim."New Dimension Value Code");
              TempDimSetEntry.INSERT(TRUE);
            END;
          END;
          DimSetEntry.SETRANGE("Dimension Code");
          DimSetEntry.SETRANGE("Dimension Value Code");
        UNTIL (TempSelectedDim.NEXT = 0) OR NOT IncludeEntry;
      IF IncludeEntry THEN BEGIN
        DimSetID := DimMgt.GetDimensionSetID(TempDimSetEntry);
        TempDimEntryBuffer."Dimension Entry No." := DimSetID;
        TempDimEntryBuffer.INSERT;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE InitializeRequest@7(FromSource2@1000 : Option;FromGLBudgetName2@1001 : Code[10];FromGLAccountNo2@1002 : Code[250];FromDate2@1003 : Text[30];FromClosingEntryFilter2@1011 : Option;DimensionText@1006 : Text[250];ToGlBudgetName2@1004 : Code[10];ToGLAccountNo2@1005 : Code[20];AmountAdjustFactor2@1007 : Decimal;RoundingMethod2@1008 : Code[10];DateAdjustExpression2@1009 : DateFormula;ToDateCompression2@1010 : Option);
    BEGIN
      FromSource := FromSource2;
      FromGLBudgetName := FromGLBudgetName2;
      FromGLAccountNo := FromGLAccountNo2;
      FromDate := FromDate2;
      FromClosingEntryFilter := FromClosingEntryFilter2;
      ColumnDim := DimensionText;
      ToGLBudgetName := ToGlBudgetName2;
      ToGLAccountNo := ToGLAccountNo2;
      AmountAdjustFactor := AmountAdjustFactor2;
      RoundingMethod.Code := RoundingMethod2;
      DateAdjustExpression := DateAdjustExpression2;
      ToDateCompression := ToDateCompression2;
    END;

    LOCAL PROCEDURE ToGLAccountNoOnAfterValidate@1130();
    VAR
      GLAccount@1110 : Record 15;
    BEGIN
      IF ToGLAccountNo <> '' THEN BEGIN
        GLAccount.GET(ToGLAccountNo);
        MESSAGE(Text011)
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

