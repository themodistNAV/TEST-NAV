OBJECT Codeunit 11102062 OM - Check TransferFields Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=19/11/15;
    Time=12:00:00 PM;
    Version List=OMA10.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE Recalculate@1(VAR CheckTransferfieldsObj@1000 : Record 11102083);
    VAR
      CheckTransferfieldsFld@1001 : Record 11102084;
      TmpCheckTransferfieldsFld@1002 : TEMPORARY Record 11102084;
      TmpKnownBooleans@1003 : TEMPORARY Record 11102084;
    BEGIN
      WITH CheckTransferfieldsObj DO BEGIN

        ParkKnownBooleans(CheckTransferfieldsObj, CheckTransferfieldsFld, TmpKnownBooleans);

        GetFields("From Table No.", "To Table No.", TmpCheckTransferfieldsFld);

        CheckTransferfieldsFld.SETRANGE("From Table No.", "From Table No.");
        CheckTransferfieldsFld.SETRANGE("To Table No.", "To Table No.");
        CheckTransferfieldsFld.DELETEALL;

        IF TmpCheckTransferfieldsFld.FINDSET THEN
          REPEAT
            CheckTransferfieldsFld := TmpCheckTransferfieldsFld;
            CheckTransferfieldsFld.INSERT;
          UNTIL TmpCheckTransferfieldsFld.NEXT = 0;

        RestoreKnownBooleans(TmpKnownBooleans, CheckTransferfieldsFld);

      END;
    END;

    PROCEDURE GetFields@4(FromTableNo@1000 : Integer;ToTableNo@1001 : Integer;VAR TmpCheckTransferfieldsFld@1002 : TEMPORARY Record 11102084);
    VAR
      Field@1003 : Record 2000000041;
      TableMgt@1004 : Codeunit 11102053;
      ContainsFlowField@1005 : Boolean;
      ContainsNormalField@1006 : Boolean;
    BEGIN
      WITH TmpCheckTransferfieldsFld DO BEGIN
        Field.SETRANGE(TableNo, FromTableNo);
        Field.SETRANGE(Enabled, TRUE);
        IF Field.FINDSET THEN
          REPEAT
            INIT;
            "From Table No." := FromTableNo;
            "To Table No." := ToTableNo;
            "Field No." := Field."No.";
            "From Field Name" := Field.FieldName;
            "From Field Type" := Field."Type Name";
            "From Field Class" := Field.Class + 1;
            INSERT;
          UNTIL Field.NEXT = 0;

        Field.SETRANGE(TableNo, ToTableNo);
        Field.SETRANGE(Enabled, TRUE);
        IF Field.FINDSET THEN
          REPEAT
            IF NOT GET(FromTableNo, ToTableNo, Field."No.") THEN BEGIN
              INIT;
              "From Table No." := FromTableNo;
              "To Table No." := ToTableNo;
              "Field No." := Field."No.";
              INSERT;
            END;
            "To Field Name" := Field.FieldName;
            "To Field Type" := Field."Type Name";
            "To Field Class" := Field.Class + 1;
            MODIFY;
          UNTIL Field.NEXT = 0;

        IF FINDSET THEN
          REPEAT

            Warning := "To Field Name" <> "From Field Name";
            "Is Error" := FALSE;

            ContainsNormalField :=
              ("From Field Class" = "From Field Class"::Normal) OR
              ("To Field Class" = "To Field Class"::Normal);

            ContainsFlowField :=
              ("From Field Class" <> "From Field Class"::Normal) OR
              ("To Field Class" <> "To Field Class"::Normal);

            IF ("To Field Type" <> "From Field Type") AND ("From Field Type" <> '') AND ("To Field Type" <> '') THEN BEGIN
              Warning := TRUE;
              IF ContainsNormalField AND NOT ContainsFlowField AND NOT TableMgt.IsPrimaryKeyField("To Table No.", "Field No.") THEN
                "Is Error" := CanCauseError("From Field Type", "To Field Type");
            END;

            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE Fields@2(VAR CheckTransferfieldsObj@1000 : Record 11102083);
    VAR
      CheckTransferfieldsFld@1001 : Record 11102084;
      CheckTransferfieldsFlds@1002 : Page 11102120;
    BEGIN
      WITH CheckTransferfieldsObj DO BEGIN
        CheckTransferfieldsFld.SETRANGE("From Table No.", "From Table No.");
        CheckTransferfieldsFld.SETRANGE("To Table No.", "To Table No.");
        COPYFILTER("Field No. Filter", CheckTransferfieldsFld."Field No.");

        IF CheckTransferfieldsFld.FINDFIRST THEN
          CheckTransferfieldsFlds.SETRECORD(CheckTransferfieldsFld);

        CheckTransferfieldsFlds.SETTABLEVIEW(CheckTransferfieldsFld);
        CheckTransferfieldsFlds.RUN;
      END;
    END;

    PROCEDURE ReadWhereUsed@3();
    VAR
      WhereUsedObjectLine@1000 : Record 11102058;
      WhereUsedObjectLine2@1001 : Record 11102058;
      WhereUsedCrossTable@1002 : Record 11102061;
      WhereUsedCrossTable2@1003 : Record 11102061;
      CheckTransferfieldsObj@1004 : Record 11102083;
      Object@1005 : Record 2000000001;
      Progressbar@1006 : Codeunit 11102044;
      ctReadingWhereUsed@1007 : TextConst 'DEU=Reading Where Used...;ENU=Reading Where Used...;ESP=Reading Where Used...;FRA=Reading Where Used...;NLD=Waar-gebruikt lezen...;DEA=Reading Where Used...';
    BEGIN
      Progressbar.Open(ctReadingWhereUsed, 0);

      WhereUsedObjectLine.SETCURRENTKEY("Object Type", "Object No.", Type, Id);
      WhereUsedObjectLine.SETRANGE("Object Type", WhereUsedObjectLine."Object Type"::Table);
      WhereUsedObjectLine.SETRANGE(Type, WhereUsedObjectLine.Type::Trigger);
      WhereUsedObjectLine.SETRANGE(Id, 7);

      Progressbar.BarSize := WhereUsedObjectLine.COUNT;

      IF WhereUsedObjectLine.FINDSET THEN
        REPEAT
          Progressbar.AddToBar(1);

          WhereUsedCrossTable.SETCURRENTKEY("Object Entry No.");
          WhereUsedCrossTable.SETRANGE("Object Entry No.", WhereUsedObjectLine."Entry No.");
          IF WhereUsedCrossTable.FINDSET THEN
            REPEAT
              WhereUsedCrossTable2.SETCURRENTKEY("In Entry No.");
              WhereUsedCrossTable2.SETRANGE("In Entry No.", WhereUsedCrossTable."In Entry No.");
              WhereUsedCrossTable2.SETRANGE("C/AL Code Line No.", WhereUsedCrossTable."C/AL Code Line No.");
              WhereUsedCrossTable2.SETFILTER("Entry No.", '<%1', WhereUsedCrossTable."Entry No.");
              IF WhereUsedCrossTable2.FINDSET THEN
                REPEAT
                  IF WhereUsedObjectLine2.GET(WhereUsedCrossTable2."Object Entry No.") THEN
                    IF (WhereUsedObjectLine2.Type = WhereUsedObjectLine2.Type::Trigger) AND
                       (WhereUsedObjectLine2.Id = 7)
                    THEN
                      IF WhereUsedObjectLine."Object No." <> WhereUsedObjectLine2."Object No." THEN
                        IF Object.GET(Object.Type::Table, '', WhereUsedObjectLine."Object No.") AND
                           Object.GET(Object.Type::Table, '', WhereUsedObjectLine2."Object No.")
                        THEN
                          IF NOT CheckTransferfieldsObj.GET(WhereUsedObjectLine."Object No.", WhereUsedObjectLine2."Object No.")
                          THEN BEGIN
                            CheckTransferfieldsObj."From Table No." := WhereUsedObjectLine."Object No.";
                            CheckTransferfieldsObj."To Table No." := WhereUsedObjectLine2."Object No.";
                            CheckTransferfieldsObj.INSERT;
                          END;
                UNTIL WhereUsedCrossTable2.NEXT = 0;
            UNTIL WhereUsedCrossTable.NEXT = 0;
        UNTIL WhereUsedObjectLine.NEXT = 0;

      Progressbar.Close;
    END;

    LOCAL PROCEDURE ParkKnownBooleans@5(VAR CheckTransferfieldsObj@1000 : Record 11102083;VAR CheckTransferfieldsFld@1001 : Record 11102084;VAR KnownBooleans@1002 : TEMPORARY Record 11102084);
    BEGIN
      CheckTransferfieldsFld.SETRANGE("From Table No.", CheckTransferfieldsObj."From Table No.");
      CheckTransferfieldsFld.SETRANGE("To Table No.", CheckTransferfieldsObj."To Table No.");
      CheckTransferfieldsFld.SETRANGE(Known, TRUE);
      IF CheckTransferfieldsFld.FINDSET THEN
        REPEAT
          KnownBooleans := CheckTransferfieldsFld;
          KnownBooleans.INSERT;
        UNTIL CheckTransferfieldsFld.NEXT = 0;
      CheckTransferfieldsFld.RESET;
    END;

    LOCAL PROCEDURE RestoreKnownBooleans@6(VAR KnownBooleans@1000 : TEMPORARY Record 11102084;VAR CheckTransferfieldsFld@1001 : Record 11102084);
    BEGIN
      IF KnownBooleans.FINDSET THEN
        REPEAT
          CheckTransferfieldsFld := KnownBooleans;
          IF CheckTransferfieldsFld.FIND('=') THEN BEGIN
            CheckTransferfieldsFld.Known := TRUE;
            CheckTransferfieldsFld.MODIFY;
          END;
        UNTIL KnownBooleans.NEXT = 0;
    END;

    LOCAL PROCEDURE CanCauseError@8(VAR FromTypeName@1000 : Text;VAR ToTypeName@1001 : Text) : Boolean;
    VAR
      FromType@1002 : Text;
      ToType@1003 : Text;
      FromLength@1004 : Integer;
      ToLength@1005 : Integer;
    BEGIN
      IF FromTypeName = ToTypeName THEN
        EXIT;

      SplitTypeName(FromTypeName, FromType, FromLength);
      SplitTypeName(ToTypeName, ToType, ToLength);

      IF FromType <> ToType THEN
        EXIT(TRUE);

      IF ToLength < FromLength THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE SplitTypeName@10(VAR TypeName@1000 : Text;VAR Type@1001 : Text;VAR Length@1002 : Integer);
    VAR
      LengthString@1003 : Text;
      i@1004 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(TypeName) DO
        IF TypeName[i] IN ['0'..'9'] THEN
          LengthString := LengthString + FORMAT(TypeName[i])
        ELSE
          Type := Type + FORMAT(TypeName[i]);

      IF EVALUATE(Length, LengthString) THEN
        ;
    END;

    BEGIN
    END.
  }
}

