OBJECT Codeunit 10 Type Helper
{
  OBJECT-PROPERTIES
  {
    Date=29/01/16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.44974;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      UnsupportedTypeErr@1000 : TextConst 'ENU=The Type is not supported by the Evaluate function.;ENG=The Type is not supported by the Evaluate function.';

    PROCEDURE Evaluate@3(VAR Variable@1000 : Variant;String@1001 : Text;Format@1002 : Text;CultureName@1003 : Text) : Boolean;
    BEGIN
      // Variable is return type containing the string value
      // String is input to evaluate
      // Format is in format "MM/dd/yyyy" only supported on date, search MSDN for more details ("CultureInfo.Name Property")
      // CultureName is in format "en-US", search MSDN for more details ("Custom Date and Time Format Strings")
      CASE TRUE OF
        Variable.ISDATE:
          EXIT(TryEvaluateDate(String,Format,CultureName,Variable));
        Variable.ISDECIMAL:
          EXIT(TryEvaluateDecimal(String,CultureName,Variable));
        ELSE
          ERROR(UnsupportedTypeErr);
      END;
    END;

    LOCAL PROCEDURE TryEvaluateDate@12(DateText@1000 : Text;Format@1001 : Text;CultureName@1004 : Text;VAR EvaluatedDate@1006 : Date) : Boolean;
    VAR
      CultureInfo@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DotNetDateTime@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      DateTimeStyles@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.DateTimeStyles";
      XMLConvert@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlConvert";
    BEGIN
      IF (Format = '') AND (CultureName = '') THEN
        DotNetDateTime := XMLConvert.ToDateTimeOffset(DateText).DateTime
      ELSE BEGIN
        DotNetDateTime := DotNetDateTime.DateTime(0);
        CultureInfo := CultureInfo.GetCultureInfo(CultureName);
        CASE Format OF
          '':
            IF NOT DotNetDateTime.TryParse(DateText,CultureInfo,DateTimeStyles.None,DotNetDateTime) THEN
              EXIT(FALSE);
          ELSE
            IF NOT DotNetDateTime.TryParseExact(DateText,Format,CultureInfo,DateTimeStyles.None,DotNetDateTime) THEN
              EXIT(FALSE);
        END;
      END;

      EvaluatedDate := DMY2DATE(DotNetDateTime.Day,DotNetDateTime.Month,DotNetDateTime.Year);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE TryEvaluateDecimal@13(DecimalText@1000 : Text;CultureName@1001 : Text;VAR EvaluatedDecimal@1006 : Decimal) : Boolean;
    VAR
      CultureInfo@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DotNetDecimal@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Decimal";
      NumberStyles@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.NumberStyles";
    BEGIN
      EvaluatedDecimal := 0;
      IF DotNetDecimal.TryParse(DecimalText,NumberStyles.Number,CultureInfo.GetCultureInfo(CultureName),EvaluatedDecimal) THEN
        EXIT(TRUE);
      EXIT(FALSE)
    END;

    PROCEDURE FormatDate@25(DateToFormat@1000 : Date;LanguageId@1003 : Integer) : Text;
    VAR
      CultureInfo@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DateTimeFormatInfo@1007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.DateTimeFormatInfo";
      DotNetDateTime@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
    BEGIN
      CultureInfo := CultureInfo.GetCultureInfo(LanguageId);
      DateTimeFormatInfo := CultureInfo.DateTimeFormat;
      DotNetDateTime := DotNetDateTime.DateTime(DATE2DMY(DateToFormat,3),DATE2DMY(DateToFormat,2),DATE2DMY(DateToFormat,1));
      EXIT(DotNetDateTime.ToString('d',DateTimeFormatInfo));
    END;

    PROCEDURE LanguageIDToCultureName@4(LanguageID@1001 : Integer) : Text;
    VAR
      CultureInfo@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      CultureInfo := CultureInfo.GetCultureInfo(LanguageID);
      EXIT(CultureInfo.Name);
    END;

    PROCEDURE GetOptionNo@20(Value@1007 : Text;OptionString@1006 : Text) : Integer;
    VAR
      OptionNo@1001 : Integer;
      OptionsQty@1000 : Integer;
    BEGIN
      Value := UPPERCASE(Value);
      OptionString := UPPERCASE(OptionString);

      IF (Value = '') AND (STRPOS(OptionString,' ') = 1) THEN
        EXIT(0);
      IF (Value <> '') AND (STRPOS(OptionString,Value) = 0) THEN
        EXIT(-1);

      OptionsQty := GetNumberOfOptions(OptionString);
      IF OptionsQty > 0 THEN BEGIN
        FOR OptionNo := 0 TO OptionsQty - 1 DO BEGIN
          IF OptionsAreEqual(Value,COPYSTR(OptionString,1,STRPOS(OptionString,',') - 1)) THEN
            EXIT(OptionNo);
          OptionString := DELSTR(OptionString,1,STRPOS(OptionString,','));
        END;
        OptionNo += 1;
      END;

      IF OptionsAreEqual(Value,OptionString) THEN
        EXIT(OptionNo);

      EXIT(-1);
    END;

    PROCEDURE GetNumberOfOptions@11(OptionString@1000 : Text) : Integer;
    BEGIN
      EXIT(STRLEN(OptionString) - STRLEN(DELCHR(OptionString,'=',',')));
    END;

    LOCAL PROCEDURE OptionsAreEqual@18(Value@1000 : Text;CurrentOption@1001 : Text) : Boolean;
    BEGIN
      EXIT((Value = CurrentOption) OR ((Value = '') AND (DELCHR(CurrentOption,'=',' ') = '')));
    END;

    PROCEDURE GetFieldLength@1(TableNo@1000 : Integer;FieldNo@1001 : Integer) : Integer;
    VAR
      Field@1002 : Record 2000000041;
    BEGIN
      IF Field.GET(TableNo,FieldNo) THEN
        EXIT(Field.Len);

      EXIT(0);
    END;

    PROCEDURE Equals@2(ThisRecRef@1000 : RecordRef;OtherRecRef@1003 : RecordRef;SkipBlob@1006 : Boolean) : Boolean;
    VAR
      Field@1004 : Record 2000000041;
      Key@1005 : Record 2000000063;
      OtherFieldRef@1002 : FieldRef;
      ThisFieldRef@1001 : FieldRef;
    BEGIN
      IF ThisRecRef.NUMBER <> OtherRecRef.NUMBER THEN
        EXIT(FALSE);

      IF ThisRecRef.KEYCOUNT = ThisRecRef.FIELDCOUNT THEN
        EXIT(FALSE);

      Field.SETRANGE(TableNo,ThisRecRef.NUMBER);
      Field.FINDSET;

      REPEAT
        IF NOT Key.GET(ThisRecRef.NUMBER,Field."No.") THEN BEGIN
          ThisFieldRef := ThisRecRef.FIELD(Field."No.");
          OtherFieldRef := OtherRecRef.FIELD(Field."No.");

          CASE Field.Type OF
            Field.Type::BLOB,Field.Type::Binary:
              IF NOT SkipBlob THEN
                IF ReadBlob(ThisFieldRef) <> ReadBlob(OtherFieldRef) THEN
                  EXIT(FALSE);
            ELSE
              IF ThisFieldRef.VALUE <> OtherFieldRef.VALUE THEN
                EXIT(FALSE);
          END;
        END;
      UNTIL Field.NEXT = 0;

      EXIT(TRUE);
    END;

    PROCEDURE ReadBlob@7(VAR BlobFieldRef@1000 : FieldRef) Content : Text;
    VAR
      TempBlob@1001 : Record 99008535;
      InStream@1002 : InStream;
    BEGIN
      BlobFieldRef.CALCFIELD;

      TempBlob.INIT;
      TempBlob.Blob := BlobFieldRef.VALUE;

      TempBlob.Blob.CREATEINSTREAM(InStream);
      InStream.READ(Content);
    END;

    PROCEDURE ReadTextBlob@14(VAR BlobFieldRef@1000 : FieldRef;LineSeparator@1002 : Text) : Text;
    BEGIN
      EXIT(ReadTextBlobWithEncoding(BlobFieldRef,LineSeparator,TEXTENCODING::MSDos));
    END;

    PROCEDURE WriteTextToBlobIfChanged@15(VAR BlobFieldRef@1000 : FieldRef;NewContent@1003 : Text;Encoding@1007 : TextEncoding) : Boolean;
    VAR
      TempBlob@1004 : TEMPORARY Record 99008535;
      OutStream@1002 : OutStream;
      OldContent@1005 : Text;
    BEGIN
      // Returns TRUE if the value was changed, FALSE if the old value was identical and no change was needed
      OldContent := ReadTextBlobWithTextEncoding(BlobFieldRef,Encoding);
      IF NewContent = OldContent THEN
        EXIT(FALSE);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStream,Encoding);
      OutStream.WRITETEXT(NewContent);
      TempBlob.INSERT;

      BlobFieldRef.VALUE := TempBlob.Blob;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ReadTextBlobWithEncoding@8(VAR BlobFieldRef@1000 : FieldRef;LineSeparator@1003 : Text;Encoding@1002 : TextEncoding) : Text;
    VAR
      TempBlob@1001 : Record 99008535;
    BEGIN
      BlobFieldRef.CALCFIELD;

      TempBlob.INIT;
      TempBlob.Blob := BlobFieldRef.VALUE;

      EXIT(TempBlob.ReadAsText(LineSeparator,Encoding));
    END;

    PROCEDURE IsMatch@6(Input@1000 : Text;RegExExpression@1003 : Text) : Boolean;
    VAR
      Regex@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      AlphanumericRegEx@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
    BEGIN
      AlphanumericRegEx := Regex.Regex(RegExExpression);
      EXIT(AlphanumericRegEx.IsMatch(Input));
    END;

    PROCEDURE IsAlphanumeric@9(Input@1000 : Text) : Boolean;
    BEGIN
      EXIT(IsMatch(Input,'^[a-zA-Z0-9]*$'));
    END;

    PROCEDURE ReadTextBlobWithTextEncoding@17(VAR BlobFieldRef@1002 : FieldRef;Encoding@1000 : TextEncoding) BlobContent : Text;
    VAR
      TempBlob@1001 : Record 99008535;
      InStream@1003 : InStream;
    BEGIN
      TempBlob.INIT;
      BlobFieldRef.CALCFIELD;
      TempBlob.Blob := BlobFieldRef.VALUE;
      TempBlob.Blob.CREATEINSTREAM(InStream,Encoding);
      IF InStream.READ(BlobContent) = 0 THEN;
    END;

    BEGIN
    END.
  }
}

