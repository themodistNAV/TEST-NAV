OBJECT Table 9021629 Page Item
{
  OBJECT-PROPERTIES
  {
    Date=13/07/16;
    Time=[ 1:50:02 PM];
    Version List=EC2016.6;
  }
  PROPERTIES
  {
    OnInsert=VAR
               ItemRec@1040000 : Record 27;
               PageLinkGroupGuid@1000000000 : Integer;
               PageLink@1000000001 : Text[100];
             BEGIN
               ePageRec1.GET("Label Code","Page GroupGuid");
               IF (ePageRec1.Verified = FALSE) AND (ePageRec1."System Entry" = FALSE) THEN
                 ERROR(Text001,"Label Code",ePageRec1."Menu Name");

               PageItemRec1.RESET;
               PageItemRec1.SETCURRENTKEY("Entry No.");
               IF PageItemRec1.FINDLAST THEN
                 "Entry No." := PageItemRec1."Entry No." + 1
               ELSE
                 "Entry No." := 1;

               IF (Type = Type::Item) OR
                  (Type = Type::"Promo Item") THEN
                 GetAttributeEntryNo;

               LabelRec.GET("Label Code");

               CASE Type OF
                 Type::Content:
                   BEGIN
                     PageItemContent.GET("Label Code","No.");
                     PageItemContentType.GET("Label Code",PageItemContent."Page Item Type Code");
                     IF PageItemContentType."Page Item Links To Parent Page" THEN
                        PageLinkGroupGuid:="Page GroupGuid"
                     ELSE
                        PageLinkGroupGuid := PageItemContentType."Page Item Link Guid";
                     IF PageLinkGroupGuid <> 0 THEN BEGIN
                       PageLink := LabelRec."Website Page Address" + '?GroupGuid=' + FORMAT(PageLinkGroupGuid);
                       LabelAttValueRec.CreateAttributesIfNotExist('TEMPLATE',PageLink,"No.","Label Code",
                                                                   'CONTENT');
                     END;
                   END;
                 Type::Item:
                   BEGIN
                     IF LabelRec."Page Item Links To Parent Page" THEN
                       PageLinkGroupGuid:="Page GroupGuid"
                     ELSE
                       PageLinkGroupGuid:=LabelRec."Page Item Link Guid (Item)";
                     IF PageLinkGroupGuid=0 THEN
                       ERROR(Text010,"Label Code");
                     PageLink := LabelRec."Website Page Address" + '?GroupGuid=' + FORMAT(PageLinkGroupGuid);
                     LabelAttValueRec.CreateAttributesIfNotExist('TEMPLATE',PageLink,"No.","Label Code",
                                                                 'PRODUCT');
                     IF "Label Code" = 'SKS' THEN BEGIN
                       InternetSetup.GET;
                     END;
                     //DOC EC2013.4.60 -
                     {
                     //DOC EC2013.4.00 -
                     IF "Label Code" = 'BONZER' THEN BEGIN
                     //Customer Relationship Type,Customer Relationship No.,Item Relationship Type,Item Relationship No.
                       IF NOT CustItemAvail.GET(CustItemAvail."Customer Relationship Type"::"Web Role",'B2C',
                          CustItemAvail."Item Relationship Type"::"Item No.","No.") THEN BEGIN
                         CustItemAvail.INIT;
                         CustItemAvail."Customer Relationship Type" :=
                                  CustItemAvail."Customer Relationship Type"::"Web Role";
                         CustItemAvail."Customer Relationship No." := 'B2C';
                         CustItemAvail."Item Relationship Type" :=
                                  CustItemAvail."Item Relationship Type"::"Item No.";
                         CustItemAvail."Item Relationship No." := "No.";
                         CustItemAvail."Buy Button State" := LabelRec."Default B2C Buy Button State";
                         CustItemAvail.INSERT;
                       END;
                       IF NOT CustItemAvail.GET(CustItemAvail."Customer Relationship Type"::"Web Role",'B2B',
                          CustItemAvail."Item Relationship Type"::"Item No.","No.") THEN BEGIN
                         CustItemAvail.INIT;
                         CustItemAvail."Customer Relationship Type" :=
                                  CustItemAvail."Customer Relationship Type"::"Web Role";
                         CustItemAvail."Customer Relationship No." := 'B2B';
                         CustItemAvail."Item Relationship Type" :=
                                  CustItemAvail."Item Relationship Type"::"Item No.";
                         CustItemAvail."Item Relationship No." := "No.";
                         CustItemAvail."Buy Button State" := LabelRec."Default B2B Buy Button State";
                         CustItemAvail.INSERT;
                       END;
                     END;
                     //DOC EC2013.4.00 +
                     }
                     //Customer Relationship Type,Customer Relationship No.,Item Relationship Type,Item Relationship No.
                     IF LabelRec."Default B2C Buy Button State" <>
                                 LabelRec."Default B2C Buy Button State"::"Do Not Auto Add" THEN BEGIN
                       IF NOT CustItemAvail.GET(CustItemAvail."Customer Relationship Type"::"Web Role",'B2C',
                          CustItemAvail."Item Relationship Type"::"Item No.","No.") THEN BEGIN
                         CustItemAvail.INIT;
                         CustItemAvail."Customer Relationship Type" :=
                                  CustItemAvail."Customer Relationship Type"::"Web Role";
                         CustItemAvail."Customer Relationship No." := 'B2C';
                         CustItemAvail."Item Relationship Type" :=
                                  CustItemAvail."Item Relationship Type"::"Item No.";
                         CustItemAvail."Item Relationship No." := "No.";
                         CustItemAvail."Buy Button State" := LabelRec."Default B2C Buy Button State" - 1;
                         CustItemAvail.INSERT;
                       END;
                     END;
                     IF  LabelRec."Default B2B Buy Button State" <>
                                  LabelRec."Default B2B Buy Button State"::"Do Not Auto Add" THEN BEGIN
                       IF NOT CustItemAvail.GET(CustItemAvail."Customer Relationship Type"::"Web Role",'B2B',
                          CustItemAvail."Item Relationship Type"::"Item No.","No.") THEN BEGIN
                         CustItemAvail.INIT;
                         CustItemAvail."Customer Relationship Type" :=
                                  CustItemAvail."Customer Relationship Type"::"Web Role";
                         CustItemAvail."Customer Relationship No." := 'B2B';
                         CustItemAvail."Item Relationship Type" :=
                                  CustItemAvail."Item Relationship Type"::"Item No.";
                         CustItemAvail."Item Relationship No." := "No.";
                         CustItemAvail."Buy Button State" := LabelRec."Default B2B Buy Button State" - 1;
                         CustItemAvail.INSERT;
                       END;
                     END;
                     //DOC EC2013.4.60 +
                     //DOC EC2013.4.63 -
                     IF LabelRec."AutoPop PageItems to Cat. Page" THEN BEGIN
                       LabelRec.TESTFIELD("Catalogue Page Guid");
                       IF "Page GroupGuid" <> LabelRec."Catalogue Page Guid" THEN BEGIN
                         BuildCatCU.CreateCatBuildData("Label Code",
                                    LabelRec."Catalogue Page Guid","No.",0,'');
                         ePageRec1.GET("Label Code",LabelRec."Catalogue Page Guid");
                         IF ePageRec1."Page Item Sort Code" = '' THEN BEGIN
                           BuildCatCU.ApplyOrder("Label Code",
                                        LabelRec."Catalogue Page Guid",TRUE,TRUE,FALSE);
                           //this is the default of Put Promos at Top, score by Alphabetical and
                           //do not score lowest first.
                           BuildCatCU.TransferBuildDataToPageItems("Label Code",LabelRec."Catalogue Page Guid");
                         END ELSE BEGIN
                           PageItemSort.GET("Label Code",ePageRec1."Page Item Sort Code");
                           IF NOT PageItemSort."Do Not Maintain Catalogue Data" THEN BEGIN
                             BuildCatCU.CalcScore("Label Code",LabelRec."Catalogue Page Guid");
                             BuildCatCU.TransferBuildDataToPageItems("Label Code",
                                        LabelRec."Catalogue Page Guid");
                           END;
                         END;
                         //MQ 04/06/2014 - GW140604 - need to find last Entry No. again as auto pop catalogue page
                         //will have taken the last number cos this record will not have yet been inserted.
                         PageItemRec1.RESET;
                         PageItemRec1.SETCURRENTKEY("Entry No.");
                         IF PageItemRec1.FINDLAST THEN
                           "Entry No." := PageItemRec1."Entry No." + 1
                         ELSE
                           "Entry No." := 1;
                         //MQ 04/06/2014 - GW140604 +
                       END;
                     END;
                     //DOC EC2013.4.63 +
                     //DOC EC2015.5.01 -
                     IF "Label Code" IN ['DERM', 'DERMUK2015'] THEN BEGIN  //DOC EC2015.5.02 add DERMUK2015
                       InternetSetup.GET;
                     END;
                     //DOC EC2015.5.01 +
                     //DOC EC2015.5.03 -
                     TESTFIELD("No.");
                     LabelAttribute.RESET;
                     LabelAttribute.SETCURRENTKEY("Label Code","Attribute Type","Attribute Owner Reference");
                     LabelAttribute.SETRANGE("Label Code","Label Code");
                     LabelAttribute.SETRANGE("Attribute Type",'PRODUCT');
                     LabelAttribute.SETRANGE("Attribute Owner Reference","No.");
                     IF LabelAttribute.FINDSET THEN
                       REPEAT
                         LabelAttribute.VALIDATE("Do Not Extract",FALSE);
                         LabelAttribute.MODIFY;
                       UNTIL LabelAttribute.NEXT = 0;
                     //DOC EC2015.5.03 +
                   END;
                 Type::"Promo Item":
                   BEGIN
                     IF "Label Code" <> 'SKS' THEN BEGIN
                       IF (LabelRec."Page Item Links To Parent Page" = FALSE) AND
                         (LabelRec."Page Item Link Guid (Item)" <> 0) THEN BEGIN
                         PageLink := LabelRec."Website Page Address" + '?GroupGuid=' +
                                     FORMAT(LabelRec."Page Item Link Guid (Item)");
                         LabelAttValueRec.CreateAttributesIfNotExist('TEMPLATE',PageLink,"No.","Label Code",
                                                                     'PRODUCT');
                       END;
                     END;
                     //DOC EC2015.5.01 -
                     IF "Label Code" IN ['DERM', 'DERMUK2015'] THEN BEGIN //DOC EC2015.5.02 add DERMUK2015
                       InternetSetup.GET;
                     END;
                     //DOC EC2015.5.01 +
                     //DOC EC2015.5.03 -
                     TESTFIELD("No.");
                     LabelAttribute.RESET;
                     LabelAttribute.SETCURRENTKEY("Label Code","Attribute Type","Attribute Owner Reference");
                     LabelAttribute.SETRANGE("Label Code","Label Code");
                     LabelAttribute.SETRANGE("Attribute Type",'PRODUCT');
                     LabelAttribute.SETRANGE("Attribute Owner Reference","No.");
                     IF LabelAttribute.FINDSET THEN
                       REPEAT
                         LabelAttribute.VALIDATE("Do Not Extract",FALSE);
                         LabelAttribute.MODIFY;
                       UNTIL LabelAttribute.NEXT = 0;
                     //DOC EC2015.5.03 +
                   END;
               END; //end of CASE

               "DateTime Created":=CURRENTDATETIME;
               SetModifiedDateTime();
             END;

    OnModify=BEGIN
               SetModifiedDateTime();
             END;

    OnDelete=BEGIN
               IF Type = Type::Item THEN BEGIN
                 //DOC EC2013.4.63 -
                 LabelRec.GET("Label Code");
                 IF LabelRec."AutoPop PageItems to Cat. Page" THEN BEGIN
                   LabelRec.TESTFIELD("Catalogue Page Guid");
                   IF "Page GroupGuid" <> LabelRec."Catalogue Page Guid" THEN BEGIN
                     PageItemRec1.RESET;
                     PageItemRec1.SETRANGE("Label Code","Label Code");
                     PageItemRec1.SETFILTER("Page GroupGuid",'<>%1&<>%2',"Page GroupGuid",
                                            LabelRec."Catalogue Page Guid");
                     PageItemRec1.SETRANGE(Type,PageItemRec1.Type::Item);
                     PageItemRec1.SETRANGE("No.","No.");
                     IF NOT PageItemRec1.FINDFIRST THEN BEGIN
                       IF PageItemRec2.GET("Label Code",LabelRec."Catalogue Page Guid",
                                        PageItemRec2.Type::Item,"No.") THEN
                         PageItemRec2.DELETE(TRUE);
                       BuildCatCU.DeleteCatBuildData("Label Code",
                            LabelRec."Catalogue Page Guid","No.",FALSE);
                     END;
                   END;
                 END;
                 //DOC EC2013.4.63 +
                 PageItemRec1.RESET;
                 PageItemRec1.SETRANGE("Label Code","Label Code");
                 PageItemRec1.SETFILTER("Page GroupGuid",'<>%1',"Page GroupGuid");
                 PageItemRec1.SETRANGE(Type,PageItemRec1.Type::Item);
                 PageItemRec1.SETRANGE("No.","No.");
                 IF NOT PageItemRec1.FINDFIRST THEN BEGIN
                   ErrorMsg := '';
                   ErrorMsg := ItemTableTriggerCode.CallBlockedCheckInPromos("No.");
                   IF ErrorMsg <> '' THEN
                     ERROR('%1',ErrorMsg);
                 END;
                 BuildCatCU.DeleteCatBuildData("Label Code",
                          "Page GroupGuid","No.",FALSE);
               END;

               WebAttValue.RESET;
               WebAttValue.SETRANGE("Label Code","Label Code");
               WebAttValue.SETRANGE("Table ID",9021629);
               WebAttValue.SETRANGE("Key Field Integer 1","Entry No.");
               WebAttValue.DELETEALL;

               IF Type IN [Type::Item,Type::"Promo Item"] THEN BEGIN
                 InternetSetup.GET;
                 //DOC EC2015.5.03 -
                 Item.GET("No.");
                 Item.CALCFIELDS("No. of Web Pages");
                 IF Item."No. of Web Pages" < 2 THEN BEGIN
                   LabelAttribute.RESET;
                   LabelAttribute.SETCURRENTKEY("Label Code","Attribute Type","Attribute Owner Reference");
                   LabelAttribute.SETRANGE("Label Code","Label Code");
                   LabelAttribute.SETRANGE("Attribute Type",'PRODUCT');
                   LabelAttribute.SETRANGE("Attribute Owner Reference","No.");
                   IF LabelAttribute.FINDSET THEN
                     REPEAT
                       LabelAttribute.VALIDATE("Do Not Extract",TRUE);
                       LabelAttribute.MODIFY;
                     UNTIL LabelAttribute.NEXT = 0;
                 END;
                 //DOC EC2015.5.03 +
               END;
             END;

    OnRename=BEGIN
               ERROR(Text003);
             END;

    CaptionML=[ENU=Page Item;
               ENG=Page Item];
    LookupPageID=Page9021642;
    DrillDownPageID=Page9021642;
  }
  FIELDS
  {
    { 1   ;   ;Label Code          ;Code10        ;TableRelation=Label;
                                                   CaptionML=[ENU=Label Code;
                                                              ENG=Label Code] }
    { 2   ;   ;Page GroupGuid      ;Integer       ;TableRelation=ePage."Page GUID" WHERE (Label Code=FIELD(Label Code));
                                                   CaptionML=[ENU=Page GroupGuid;
                                                              ENG=Page GroupGuid];
                                                   NotBlank=Yes }
    { 3   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN
                                                                  "No." := '';
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=Item,Promo Item,Content;
                                                                    ENG=Item,Promo Item,Content];
                                                   OptionString=Item,Promo Item,Content }
    { 4   ;   ;Page Item Type Code ;Code10        ;CaptionML=[ENU=Page Item Type Code;
                                                              ENG=Page Item Type Code];
                                                   Description=GW 120803 no longer needed. Kept for backward compatibility until everyone has V3 }
    { 5   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Promo Item)) Item
                                                                 ELSE IF (Type=CONST(Content)) "Page Item Content".No. WHERE (Label Code=FIELD(Label Code));
                                                   CaptionML=[ENU=No.;
                                                              ENG=No.];
                                                   NotBlank=Yes }
    { 8   ;   ;Label Description   ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Label.Description WHERE (Code=FIELD(Label Code)));
                                                   CaptionML=[ENU=Label Description;
                                                              ENG=Label Description];
                                                   Editable=No }
    { 9   ;   ;Group Description   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(ePage."Menu Name" WHERE (Label Code=FIELD(Label Code),
                                                                                               Page GUID=FIELD(Page GroupGuid)));
                                                   CaptionML=[ENU=Group Description;
                                                              ENG=Group Description];
                                                   Description=flowfield MQ 03/09/2013 - GW130903 changed from T30 to T50;
                                                   Editable=No }
    { 10  ;   ;Item Description    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item.Description WHERE (No.=FIELD(No.)));
                                                   CaptionML=[ENU=Item Description;
                                                              ENG=Item Description];
                                                   Editable=No }
    { 12  ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ENG=Entry No.];
                                                   Description=GW add 110124 }
    { 18  ;   ;Main Image Entry No.;Integer       ;CaptionML=[ENU=Main Image Entry No.;
                                                              ENG=Main Image Entry No.] }
    { 19  ;   ;Thumbnail Image Entry No.;Integer  ;CaptionML=[ENU=Thumbnail Image Entry No.;
                                                              ENG=Thumbnail Image Entry No.] }
    { 20  ;   ;Large Image Entry No.;Integer      ;CaptionML=[ENU=Large Image Entry No.;
                                                              ENG=Large Image Entry No.] }
    { 22  ;   ;Link File Entry No. ;Integer       ;CaptionML=[ENU=Link File Entry No.;
                                                              ENG=Link File Entry No.] }
    { 23  ;   ;Item Web Name Entry No.;Integer    ;CaptionML=[ENU=Item Web Name Entry No.;
                                                              ENG=Item Web Name Entry No.];
                                                   Description=NAME }
    { 24  ;   ;Item Web Description Entry No.;Integer;
                                                   CaptionML=[ENU=Item Web Description Entry No.;
                                                              ENG=Item Web Description Entry No.];
                                                   Description=DESCRIPTION }
    { 25  ;   ;Item Meta-Desc. Entry No.;Integer  ;CaptionML=[ENU=Item Meta-Desc. Entry No.;
                                                              ENG=Item Meta-Desc. Entry No.];
                                                   Description=META-DESCRIPTION }
    { 26  ;   ;Item Web Desc. 2 Entry No.;Integer ;CaptionML=[ENU=Item Web Desc. 2 Entry No.;
                                                              ENG=Item Web Desc. 2 Entry No.];
                                                   Description=DESCRIPTION2 }
    { 27  ;   ;Item Web Title Entry No.;Integer   ;CaptionML=[ENU=Item Web Title Entry No.;
                                                              ENG=Item Web Title Entry No.];
                                                   Description=DESCRIPTION3 }
    { 29  ;   ;Item Keywords Entry No.;Integer    ;CaptionML=[ENU=Item Keywords Entry No.;
                                                              ENG=Item Keywords Entry No.];
                                                   Description=META-KEYWORDS }
    { 30  ;   ;Item Meta-Title Entry No.;Integer  ;CaptionML=[ENU=Item Meta-Title Entry No.;
                                                              ENG=Item Meta-Title Entry No.];
                                                   Description=META-TITLE }
    { 40  ;   ;No. of Web Attribute Values;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Web Attribute Value" WHERE (Table ID=CONST(9021629),
                                                                                                  Label Code=FIELD(Label Code),
                                                                                                  Key Field Integer 1=FIELD(Entry No.)));
                                                   CaptionML=[ENU=No. of Web Attribute Values;
                                                              ENG=No. of Web Attribute Values] }
    { 50  ;   ;Inserted by Auto Process;Boolean   ;CaptionML=[ENU=Inserted by Auto Process;
                                                              ENG=Inserted by Auto Process] }
    { 100 ;   ;Order               ;Integer       ;CaptionML=[ENU=Order;
                                                              ENG=Order] }
    { 101 ;   ;New Order           ;Integer       ;CaptionML=[ENU=New Order;
                                                              ENG=New Order] }
    { 120 ;   ;DateTime Created    ;DateTime      ;CaptionML=[ENU=DateTime Created;
                                                              ENG=DateTime Created] }
    { 121 ;   ;DateTime Last Modified;DateTime    ;CaptionML=[ENU=DateTime Last Modified;
                                                              ENG=DateTime Last Modified] }
  }
  KEYS
  {
    {    ;Label Code,Page GroupGuid,Type,No.      ;Clustered=Yes }
    {    ;Label Code,Page GroupGuid,Type,Order     }
    {    ;Label Code,Type,No.                      }
    {    ;Type,No.                                 }
    {    ;Entry No.                                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      InternetSetup@1000000013 : Record 9021609;
      LabelRec@1040010 : Record 9021618;
      ePageRec1@1000000000 : Record 9021628;
      Text001@1000000003 : TextConst 'ENU=Before you add items, please first verify the Configuration (Label %1, Name %2) . (1);ENG=Before you add items, please first verify the Configuration (Label %1, Name %2) . (1)';
      PageItemRec1@1000000004 : Record 9021629;
      PageItemRec2@1000000005 : Record 9021629;
      LabelAttribute@1000000008 : Record 9021623;
      LabelAttValueRec@1040001 : Record 9021624;
      WebAttValue@1000000009 : Record 9021702;
      PageItemContent@1190000006 : Record 9021636;
      PageItemContentType@1190000007 : Record 9021632;
      CustItemAvail@1000000002 : Record 9021707;
      PageItemSort@1000000014 : Record 9021600;
      Item@1000000016 : Record 27;
      OrderNo@1000000006 : Integer;
      Text002@1040000 : TextConst 'ENU=Label needs verifying.  Therefore, it is impossible to give a correct hierarchy. (2);ENG=Label needs verifying.  Therefore, it is impossible to give a correct hierarchy. (2)';
      MainImageEntryNo@1040002 : Integer;
      ThumbnailEntryNo@1040003 : Integer;
      Text003@1040004 : TextConst 'ENU=You can not change this.  Create a new entry and delete the old one. (3);ENG=You can not change this.  Create a new entry and delete the old one. (3)';
      Text004@1040006 : TextConst 'ENU=Can not find the Language Code on opening form.  Please consult Brand Villages. (4);ENG=Can not find the Language Code on opening form.  Please consult Brand Villages. (4)';
      Text010@1000000007 : TextConst 'ENU="""Page Item Links to Parent Page"" is ''No'' in Label ''%1'', but ""Page Item Link Guid (Item)"" is not specified.  No ''TEMPLATE'' attribute can be created.";ENG="""Page Item Links to Parent Page"" is ''No'' in Label ''%1'', but ""Page Item Link Guid (Item)"" is not specified.  No ''TEMPLATE'' attribute can be created."';
      Text011@1190000005 : TextConst 'ENU=The %1 must not be 0 on ePage %2, Item %3.;ENG=The %1 must not be 0 on ePage %2, Item %3.';
      BuildCatCU@1000000010 : Codeunit 9021602;
      ItemTableTriggerCode@1000000012 : Codeunit 9021670;
      ErrorMsg@1000000001 : Text[1000];

    PROCEDURE Reorder@1000000000(LabelCode@1000000000 : Code[10];ConfigID@1000000003 : Integer);
    VAR
      i1@1000000001 : Integer;
      i2@1000000002 : Integer;
    BEGIN
      PageItemRec1.RESET;
      PageItemRec1.SETRANGE("Label Code",LabelCode);
      PageItemRec1.SETRANGE("Page GroupGuid",ConfigID);
      PageItemRec1.SETCURRENTKEY("Label Code","Page GroupGuid",Type,Order);

      i1 := 0;
      IF PageItemRec1.FIND('-') THEN
      REPEAT
        IF i1 = 0 THEN BEGIN
          i1 := 2;
          i2 := 2;
          PageItemRec2 := PageItemRec1;
          PageItemRec2."New Order" := 2;
        END ELSE BEGIN
          PageItemRec2 := PageItemRec1;
          i2 := i2 + 2;
          PageItemRec2."New Order" := i2;
        END;
        PageItemRec2.MODIFY;
      UNTIL PageItemRec1.NEXT = 0;

      PageItemRec1.RESET;
      PageItemRec1.SETRANGE("Label Code",LabelCode);
      PageItemRec1.SETRANGE("Page GroupGuid",ConfigID);
      IF PageItemRec1.FIND('-') THEN
      REPEAT
        PageItemRec2 := PageItemRec1;
        PageItemRec2.Order := PageItemRec2."New Order";
        PageItemRec2.MODIFY;
      UNTIL PageItemRec1.NEXT = 0;
    END;

    PROCEDURE MoveUp@1000000001(VAR LocalRec@1000000000 : Record 9021629);
    BEGIN
      IF LocalRec.Order = 2 THEN
      EXIT;

      PageItemRec1.RESET;
      PageItemRec1.GET(LocalRec."Label Code",LocalRec."Page GroupGuid",
                          LocalRec.Type,LocalRec."No.");
      OrderNo := PageItemRec1.Order;

      PageItemRec1.RESET;
      PageItemRec1.SETRANGE("Label Code",LocalRec."Label Code");
      PageItemRec1.SETRANGE("Page GroupGuid",LocalRec."Page GroupGuid");
      PageItemRec1.SETRANGE(Type,LocalRec.Type);
      PageItemRec1.SETFILTER(Order,'%1',OrderNo - 2);
      PageItemRec1.SETCURRENTKEY("Label Code","Page GroupGuid",Type,Order);
      IF PageItemRec1.FIND('-') THEN BEGIN
        PageItemRec2 := PageItemRec1;
        PageItemRec2.Order := OrderNo;
        PageItemRec2.MODIFY;
        LocalRec.Order := OrderNo - 2;
      END;
    END;

    PROCEDURE MoveDown@1000000002(VAR LocalRec@1000000000 : Record 9021629);
    BEGIN
      PageItemRec1.GET(LocalRec."Label Code",LocalRec."Page GroupGuid",
                          LocalRec.Type,LocalRec."No.");
      PageItemRec1.RESET;
      OrderNo := PageItemRec1.Order;

      PageItemRec1.RESET;
      PageItemRec1.SETRANGE("Label Code",LocalRec."Label Code");
      PageItemRec1.SETRANGE("Page GroupGuid",LocalRec."Page GroupGuid");
      PageItemRec1.SETRANGE(Type,LocalRec.Type);
      PageItemRec1.SETFILTER(Order,'%1',OrderNo + 2);
      PageItemRec1.SETCURRENTKEY("Label Code","Page GroupGuid",Type,Order);
      IF PageItemRec1.FIND('-') THEN BEGIN
        PageItemRec2 := PageItemRec1;
        PageItemRec2.Order := OrderNo;
        PageItemRec2.MODIFY;
        LocalRec.Order := OrderNo + 2;
      END;
    END;

    PROCEDURE BuildHierarchyName@1040000(LabelBH@1040000 : Code[10];LinkedConfigID@1040001 : Integer) HierarchyName : Text[1000];
    VAR
      LabelRecBH@1040003 : Record 9021618;
      ConfigEntryRecBH1@1040002 : Record 9021628;
      LocalLevel@1040005 : Integer;
      LocalGroupGuID@1040006 : Integer;
    BEGIN
      LabelRecBH.GET(LabelBH);
      IF NOT LabelRecBH."Configuration OK" THEN BEGIN
        HierarchyName := Text002;
        EXIT;
      END;
      ConfigEntryRecBH1.GET(LabelBH,LinkedConfigID);
      HierarchyName := ConfigEntryRecBH1."Menu Name";
      LocalLevel := ConfigEntryRecBH1.Level;
      LocalGroupGuID := ConfigEntryRecBH1.ParentGuID;
      IF LocalLevel > 0 THEN
      REPEAT
       ConfigEntryRecBH1.GET(LabelBH,LocalGroupGuID);
        HierarchyName := ConfigEntryRecBH1."Menu Name" + ' > ' + HierarchyName;
        LocalLevel := ConfigEntryRecBH1.Level;
        LocalGroupGuID := ConfigEntryRecBH1.ParentGuID;
      UNTIL LocalLevel = 0;
    END;

    PROCEDURE GetAttributeEntryNo@1040001();
    BEGIN
      "Main Image Entry No." := LabelAttValueRec.CreateAttributesIfNotExist
                                          ('IMAGE-PRIMARY','',"No.","Label Code",
                                          'PRODUCT');
      "Thumbnail Image Entry No." := LabelAttValueRec.CreateAttributesIfNotExist
                                          ('IMAGE-THUMBNAIL','',"No.","Label Code",
                                          'PRODUCT');
      "Large Image Entry No." := LabelAttValueRec.CreateAttributesIfNotExist
                                          ('IMAGE-LARGE','',"No.","Label Code",
                                          'PRODUCT');
      "Link File Entry No." := LabelAttValueRec.CreateAttributesIfNotExist
                                          ('ATTACHMENT','',"No.","Label Code",
                                          'PRODUCT');
    END;

    PROCEDURE GetMainImageName@1040002(LanguageCode@1040000 : Code[10]) MainImage : Text[250];
    BEGIN
      IF "Main Image Entry No." <> 0 THEN BEGIN
        IF LabelAttValueRec.GET("Label Code","Main Image Entry No.",LanguageCode) THEN
          MainImage := LabelAttValueRec.Value
        ELSE
          MainImage := '';
      END;
    END;

    PROCEDURE GetThumbnailImageName@1040003(LanguageCode@1040000 : Code[10]) ThumbnailImage : Text[250];
    BEGIN
      IF "Thumbnail Image Entry No." <> 0 THEN BEGIN
        IF LabelAttValueRec.GET("Label Code","Thumbnail Image Entry No.",LanguageCode) THEN
          ThumbnailImage := LabelAttValueRec.Value
        ELSE
          ThumbnailImage := '';
      END;
    END;

    PROCEDURE GetLargeImageName@1040005(LanguageCode@1040000 : Code[10]) LargeImage : Text[250];
    BEGIN
      IF "Large Image Entry No." <> 0 THEN BEGIN
        IF LabelAttValueRec.GET("Label Code","Large Image Entry No.",LanguageCode) THEN
          LargeImage := LabelAttValueRec.Value
        ELSE
          LargeImage := '';
      END;
    END;

    PROCEDURE GetLinkFileName@1040006(LanguageCode@1040000 : Code[10]) LinkFile : Text[250];
    BEGIN
      IF "Link File Entry No." <> 0 THEN BEGIN
        IF LabelAttValueRec.GET("Label Code","Link File Entry No.",LanguageCode) THEN
          LinkFile := LabelAttValueRec.Value
        ELSE
          LinkFile := '';
      END;
    END;

    PROCEDURE SetModifiedDateTime@1000000003();
    VAR
      Page@1000000000 : Record 9021628;
    BEGIN
      "DateTime Last Modified":=CURRENTDATETIME;
      IF Page.GET("Label Code","Page GroupGuid") THEN BEGIN
        Page.VALIDATE("DateTime Last Modified",CURRENTDATETIME);
        Page.MODIFY;
      END;
    END;

    PROCEDURE InsertLabelAtts@1040009(EntryNo@1040000 : Integer;Type@1040001 : Code[20];LangCode@1040003 : Code[10];ValueToInsert@1040002 : Text[250]);
    BEGIN
      LabelAttValueRec.GET("Label Code",EntryNo,LangCode);
      LabelAttValueRec.Value := ValueToInsert;
      LabelAttValueRec.MODIFY;
    END;

    PROCEDURE FindImages@1190000005();
    VAR
      FilePath@1190000014 : Text[250];
      FileName@1190000013 : Text[150];
      FullFileName@1190000012 : Text[250];
      ImageContentFolder@1190000011 : Text[100];
    BEGIN
      IF Type = Type::Content THEN
        EXIT;
      IF "No." = '' THEN
        EXIT;

      IF  "Main Image Entry No." = 0 THEN
        ERROR(Text011,'Main Image Entry No.',"Page GroupGuid","No.");
      IF  "Thumbnail Image Entry No." = 0 THEN
        ERROR(Text011,'Thumbnail Image Entry No.',"Page GroupGuid","No.");
      IF  "Large Image Entry No." = 0 THEN
        ERROR(Text011,'Large Image Entry No.',"Page GroupGuid","No.");

      LabelRec.GET("Label Code");
      ImageContentFolder := LabelRec."Web Content Folder" + LabelRec."Product Image Subfolder";
      FilePath := ImageContentFolder;
      //Main Image
      IF LabelRec."Main Image File Ending" <> '' THEN BEGIN
        FileName := LabelRec."Main Image Prefix" + "No." + LabelRec."Main Image Postfix" +
                    LabelRec."Main Image File Ending";
        IF LabelRec."Use Item No. in Image Path" THEN
          FileName := "No." + '\' + FileName;
        FullFileName := FilePath + FileName;
        IF NOT LabelAttribute.GET("Main Image Entry No.") THEN BEGIN
          LabelAttribute.INIT;
          LabelAttribute."Entry No." := "Main Image Entry No.";
          LabelAttribute."Label Code" := "Label Code";
          LabelAttribute."Attribute Type" := 'PRODUCT';
          LabelAttribute."Attribute Owner Reference" := "No.";
          LabelAttribute."Type Code" := 'IMAGE-PRIMARY';
          LabelAttribute.INSERT;
        END;
        IF EXISTS(FullFileName) THEN BEGIN
          LabelAttValueRec.CreateAttributesIfNotExist('IMAGE-PRIMARY',FileName,"No.",
                           "Label Code",'PRODUCT');
        END;
      END;
      //Thumbnail Image
      IF LabelRec."Thumbnail Image File Ending" <> '' THEN BEGIN
        FileName := LabelRec."Thumbnail Image Prefix" + "No." + LabelRec."Thumbnail Image Postfix" +
                    LabelRec."Thumbnail Image File Ending";
        IF LabelRec."Use Item No. in Image Path" THEN
          FileName := "No." + '\' + FileName;
        FullFileName := FilePath + FileName;
        IF NOT LabelAttribute.GET("Thumbnail Image Entry No.") THEN BEGIN
          LabelAttribute.INIT;
          LabelAttribute."Entry No." := "Thumbnail Image Entry No.";
          LabelAttribute."Label Code" := "Label Code";
          LabelAttribute."Attribute Type" := 'PRODUCT';
          LabelAttribute."Attribute Owner Reference" := "No.";
          LabelAttribute."Type Code" := 'IMAGE-THUMBNAIL';
          LabelAttribute.INSERT;
        END;
        IF EXISTS(FullFileName) THEN
          LabelAttValueRec.CreateAttributesIfNotExist('IMAGE-THUMBNAIL',FileName,"No.","Label Code",
                                                      'PRODUCT');
      END;
      //Large Image
      IF LabelRec."Large Image File Ending" <> '' THEN BEGIN
        FileName := LabelRec."Large Image Prefix" + "No." + LabelRec."Large Image Postfix" +
                    LabelRec."Large Image File Ending";
        IF LabelRec."Use Item No. in Image Path" THEN
          FileName := "No." + '\' + FileName;
        FullFileName := FilePath + FileName;
        IF NOT LabelAttribute.GET("Large Image Entry No.") THEN BEGIN
          LabelAttribute.INIT;
          LabelAttribute."Entry No." := "Large Image Entry No.";
          LabelAttribute."Label Code" := "Label Code";
          LabelAttribute."Attribute Type" := 'PRODUCT';
          LabelAttribute."Attribute Owner Reference" := "No.";
          LabelAttribute."Type Code" := 'IMAGE-LARGE';
          LabelAttribute.INSERT;
        END;
        IF EXISTS(FullFileName) THEN
          LabelAttValueRec.CreateAttributesIfNotExist('IMAGE-LARGE',FileName,"No.","Label Code",
                                                      'PRODUCT');
      END;
      //Other Image
      IF LabelRec."Other Image File Ending" <> '' THEN BEGIN
        FileName := LabelRec."Other Image Prefix" + "No." + LabelRec."Other Image Postfix" +
                    LabelRec."Other Image File Ending";
        IF LabelRec."Use Item No. in Image Path" THEN
          FileName := "No." + '\' + FileName;
        FullFileName := FilePath + FileName;
        IF EXISTS(FullFileName) THEN
         LabelAttValueRec.CreateAttributesIfNotExist('IMAGE-OTHER',FileName,"No.","Label Code",
                                                     'PRODUCT');
      END;
    END;

    BEGIN
    {
      //DOC EC2013.4.00 MQ 24/11/2013 - GW131124 Add code in OnInsert for BONZER
      //DOC EC2013.4.60 MQ 17/04/2014 - GW140417 Enhance code in OnInsert - instead of BONZER, now general
      //DOC EC2013.4.63 MQ 23/05/2014 - GW140523 Functionality to handle LabelRec."All Products Page" in OnInsert and OnDelete
      //DOC EC2013.4.63 MQ 04/06/2014 - GW140604 Enhanced OnInsert
      //DOC EC2015.5.01 MQ 23/12/2014 - GW141223 Enhanced for control of DERM Promotion Groups
      //DOC EC2015.5.02 MQ 16/04/2015 - GW150416 Add support for DERMUK2015 x 3
      //DOC EC2015.5.03 MQ 02/06/2015 - GW150602 Update "Do Not Extract" on Label Attribute and removed MQ comments sub EC2013.4.00
      //DOC EC2016.6    JH 05/10/2016 - ECom 2016
    }
    END.
  }
}

