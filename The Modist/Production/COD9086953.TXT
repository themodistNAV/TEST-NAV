OBJECT Codeunit 9086953 nF. Checklist Management
{
  OBJECT-PROPERTIES
  {
    Date=22/12/16;
    Time=12:00:00 PM;
    Version List=NF2016.17.11;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NfChecklistItem@1000000002 : Record 9086951;
      NfSetup@1000000005 : Record 9086950;
      NfLog@1000000003 : Record 9086967;
      NfIif@1000000007 : Codeunit 9086975;
      NfManagement@1000000000 : Codeunit 9086950;
      TextType@1000000001 : ' ,UpToDateS,UpToDateP,None';
      tLogActivity@1000000004 : TextConst 'ENU=Checklist;ENG=Checklist';
      tLogStatusUpdatedMessage@1000000006 : TextConst 'ENU="""%1"" has been updated.";ENG="""%1"" has been updated."';

    LOCAL PROCEDURE "--- General ---"@1000000019();
    BEGIN
    END;

    PROCEDURE CreateOrUpdate@1000000003();
    BEGIN
      ///<summary>Creating or updating checklist items</summary>

      CreateOrUpdateProfile();
      CreateOrUpdateJobQueue();
      CreateOrUpdateUsers();
      CreateOrUpdateGiveEverythingPermissionGroup();
      CreateOrUpdatePermissions();
      CreateOrUpdateUsersPermissions();
      CreateOrUpdateLogErrors();
    END;

    PROCEDURE UpdateStatus@1000000025(VAR pNfChecklistItem@1000000000 : Record 9086951) : Boolean;
    VAR
      lUpdated@1000000001 : Boolean;
      eUnknownChecklistType@1000000002 : TextConst 'ENU=Unknown checklist type: "%1".;ENG=Unknown checklist type: "%1".';
    BEGIN
      ///<summary>Updating specified checklist item status</summary>
      ///<param name="pNfChecklistItem">Checklist item to update</param>
      ///<returns>TRUE = Updated, FALSE = Cancelled</returns>

      NfChecklistItem := pNfChecklistItem;

      CASE (pNfChecklistItem.Type) OF
        pNfChecklistItem.Type::Profile:
          lUpdated := UpdateProfileStatus();
        pNfChecklistItem.Type::"Job Queue":
          lUpdated := UpdateJobQueueStatus();
        pNfChecklistItem.Type::Users:
          lUpdated := UpdateUsersStatus();
        pNfChecklistItem.Type::"Give Everything Permission Group":
          lUpdated := UpdateGiveEverythingPermissionGroupStatus();
        pNfChecklistItem.Type::Permissions:
          lUpdated := UpdatePermissionsStatus();
        pNfChecklistItem.Type::"Users Permissions":
          lUpdated := UpdateUsersPermissionsStatus();
        pNfChecklistItem.Type::"Log Errors or Warnings":
          lUpdated := UpdateLogErrorsStatus();
        ELSE
          ERROR(eUnknownChecklistType, pNfChecklistItem.Type);
      END;

      IF (lUpdated) THEN
      BEGIN
        NfChecklistItem.VALIDATE("Updated By", USERID());
        NfChecklistItem.VALIDATE("Updated Date Time", CURRENTDATETIME());
        NfChecklistItem.MODIFY(TRUE);
        NfLog.AddSuccessActivity(tLogActivity, STRSUBSTNO(tLogStatusUpdatedMessage, NfChecklistItem.Type), FALSE);
        pNfChecklistItem := NfChecklistItem;
      END;

      EXIT(lUpdated);
    END;

    LOCAL PROCEDURE "--- Profile ---"@1000000021();
    BEGIN
    END;

    LOCAL PROCEDURE CreateOrUpdateProfile@1000000020();
    VAR
      eHelp@1000000003 : TextConst 'ENU=Profile points to nForcement role centre and can be assigned to users being nForcement administrators.;ENG=Profile points to nForcement role centre and can be assigned to users being nForcement administrators.';
    BEGIN
      ///<summary>Creating or updating profile (checklist item)</summary>

      CreateChecklistItem(NfChecklistItem.Type::Profile);
      ModifyChecklistItem(NfManagement.ProfileExists(), TextType::UpToDateS, eHelp);
    END;

    LOCAL PROCEDURE UpdateProfileStatus@1000000017() : Boolean;
    BEGIN
      ///<summary>Updating users (checklist item) status</summary>
      ///<returns>TRUE = Updated, FALSe = Cancelled</returns>

      IF ( NOT (Confirmation(FALSE))) THEN
        EXIT(FALSE);

      NfManagement.CreateProfile();
      CreateOrUpdateProfile();

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "--- Job Queue ---"@1000000016();
    BEGIN
    END;

    LOCAL PROCEDURE CreateOrUpdateJobQueue@1000000011();
    VAR
      eHelp@1000000003 : TextConst 'ENU=nForcement module should have all Dynamics NAV users defined as its users. Users not maintaned by nForcement should be marked as "Hidden".;ENG=nForcement module should have all Dynamics NAV users defined as its users. Users not maintaned by nForcement should be marked as "Hidden".';
    BEGIN
      ///<summary>Creating or updating users (checklist item)</summary>

      CreateChecklistItem(NfChecklistItem.Type::"Job Queue");
      ModifyChecklistItem(NfManagement.JobQueueExists(), TextType::UpToDateS, eHelp);
    END;

    LOCAL PROCEDURE UpdateJobQueueStatus@1000000010() : Boolean;
    BEGIN
      ///<summary>Updating users (checklist item) status</summary>
      ///<returns>TRUE = Updated, FALSe = Cancelled</returns>

      IF ( NOT (Confirmation(FALSE))) THEN
        EXIT(FALSE);

      NfManagement.CreateJobQueue();
      CreateOrUpdateJobQueue();

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "--- Users ---"@1000000005();
    BEGIN
    END;

    LOCAL PROCEDURE CreateOrUpdateUsers@1000000006();
    VAR
      lUser@1000000000 : Record 2000000120;
      lNfUser@1000000001 : Record 9086953;
      eHelp@1000000003 : TextConst 'ENU=nForcement module should have all Dynamics NAV users defined as its users. Users not maintaned by nForcement should be marked as "Hidden".;ENG=nForcement module should have all Dynamics NAV users defined as its users. Users not maintaned by nForcement should be marked as "Hidden".';
    BEGIN
      ///<summary>Creating or updating users (checklist item)</summary>

      CreateChecklistItem(NfChecklistItem.Type::Users);

      lUser.RESET();
      lUser.SETRANGE(State, lUser.State::Enabled);
      lNfUser.RESET();
      lNfUser.SETRANGE(Disabled, FALSE);

      ModifyChecklistItem(lUser.COUNT() = lNfUser.COUNT(), TextType::UpToDateP, eHelp);
    END;

    LOCAL PROCEDURE UpdateUsersStatus@1000000012() : Boolean;
    VAR
      lNfUserManagement@1000000003 : Codeunit 9086955;
    BEGIN
      ///<summary>Updating users (checklist item) status</summary>
      ///<returns>TRUE = Updated, FALSe = Cancelled</returns>

      IF ( NOT (Confirmation(TRUE))) THEN
        EXIT(FALSE);

      lNfUserManagement.UpdateUsers(TRUE);
      CreateOrUpdateUsers();

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "--- Give Everything Permission Group ---"@1000000000();
    BEGIN
    END;

    LOCAL PROCEDURE CreateOrUpdateGiveEverythingPermissionGroup@1000000007();
    VAR
      lNfPermissionGroup@1000000000 : Record 9086960;
      eHelp@1000000001 : TextConst 'ENU="""Give Everything"" permission group contains all Dynamics NAV objects. It is a starting point of modelling permissions for every nForcement user - it gives every user permission to every object. Permissions can be then taken away to objects users shouldn''t have access to.";ENG="""Give Everything"" permission group contains all Dynamics NAV objects. It is a starting point of modelling permissions for every nForcement user - it gives every user permission to every object. Permissions can be then taken away to objects users shouldn''t have access to."';
    BEGIN
      ///<summary>Creating or updating "give everything" permission group (checklist item)</summary>

      CreateChecklistItem(NfChecklistItem.Type::"Give Everything Permission Group");

      lNfPermissionGroup.RESET();
      lNfPermissionGroup.SETRANGE("Give Everything", TRUE);

      ModifyChecklistItem( NOT (lNfPermissionGroup.ISEMPTY()), TextType::UpToDateS, eHelp);
    END;

    LOCAL PROCEDURE UpdateGiveEverythingPermissionGroupStatus@1000000013() : Boolean;
    VAR
      eName@1000000001 : TextConst 'ENU=Default permission group;ENG=Default permission group';
      lNfPermissionManagement@1000000002 : Codeunit 9086960;
    BEGIN
      ///<summary>Updating "give everything" permission group (checklist item) status</summary>
      ///<returns>TRUE = Updated, FALSe = Cancelled</returns>

      IF ( NOT (Confirmation(FALSE))) THEN
        EXIT(FALSE);

      lNfPermissionManagement.UpdateGiveEverythingGroup(TRUE);
      CreateOrUpdateGiveEverythingPermissionGroup();

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "--- Permissions ---"@1000000001();
    BEGIN
    END;

    LOCAL PROCEDURE CreateOrUpdatePermissions@1000000008();
    VAR
      lNfPermissionGroup@1000000003 : Record 9086960;
      lNfMenuSuiteManagement@1000000000 : Codeunit 9086954;
      eHelp@1000000001 : TextConst 'ENU=nForcement permissions are extracted from menus (Dynamics NAV MenuSuite). Their tree-like structure can match exactly what users see in menus or it can be simplified.;ENG=nForcement permissions are extracted from menus (Dynamics NAV MenuSuite). Their tree-like structure can match exactly what users see in menus or it can be simplified.';
      lStatus@1000000002 : Boolean;
    BEGIN
      ///<summary>Creating or updating permissions (checklist item)</summary>

      CreateChecklistItem(NfChecklistItem.Type::Permissions);

      lNfPermissionGroup.RESET();
      lNfPermissionGroup.SETRANGE("Give Everything", FALSE);
      lStatus := ( NOT (lNfPermissionGroup.ISEMPTY()));

      IF (lStatus) THEN
        lStatus := ( NOT (lNfMenuSuiteManagement.MenuSuitesNeedProcessing()));

      ModifyChecklistItem(lStatus, TextType::UpToDateP, eHelp);
    END;

    LOCAL PROCEDURE UpdatePermissionsStatus@1000000014() : Boolean;
    VAR
      eName@1000000001 : TextConst 'ENU=Permissions;ENG=Permissions';
      lNfUpdatePermfromMenuS@1000000000 : Report 9086953;
      lResult@1000000002 : Boolean;
    BEGIN
      ///<summary>Updating permissions (checklist item) status</summary>
      ///<returns>TRUE = Updated, FALSe = Cancelled</returns>

      lResult := FALSE;

      IF ( NOT (Confirmation(TRUE))) THEN
        EXIT(lResult);

      lNfUpdatePermfromMenuS.SetForce(TRUE);
      lNfUpdatePermfromMenuS.RUNMODAL();
      IF (lNfUpdatePermfromMenuS.GetReportResult()) THEN
      BEGIN
        CreateOrUpdatePermissions();
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Users Permissions ---"@1000000002();
    BEGIN
    END;

    LOCAL PROCEDURE CreateOrUpdateUsersPermissions@1000000009();
    VAR
      lNfUser@1000000000 : Record 9086953;
      eHelp@1000000001 : TextConst 'ENU=User permissions have to be translated from nForcement data to standard Dynamics NAV structures. Every nForcement user will have its own (standard NAV) permission set (or multiple permission sets for multiple companies) assigned and all permissions calculated by nForcement logic assigned to it (them).;ENG=User permissions have to be translated from nForcement data to standard Dynamics NAV structures. Every nForcement user will have its own (standard NAV) permission set (or multiple permission sets for multiple companies) assigned and all permissions calculated by nForcement logic assigned to it (them).';
      lStatus@1000000002 : Boolean;
    BEGIN
      ///<summary>Creating or updating users' permissions (checklist item)</summary>

      CreateChecklistItem(NfChecklistItem.Type::"Users Permissions");

      lNfUser.RESET();
      lStatus := ( NOT (lNfUser.ISEMPTY()));

      IF (lStatus) THEN
      BEGIN
        lNfUser.SETRANGE(Pending, TRUE);
        lStatus := lNfUser.ISEMPTY();
      END;

      ModifyChecklistItem(lStatus, TextType::UpToDateP, eHelp);
    END;

    LOCAL PROCEDURE UpdateUsersPermissionsStatus@1000000015() : Boolean;
    VAR
      eName@1000000001 : TextConst 'ENU=User permissions;ENG=User permissions';
      lNfUpdateUsersPermissions@1000000000 : Codeunit 9086957;
    BEGIN
      ///<summary>Updating users' permissions (checklist item) status</summary>
      ///<returns>TRUE = Updated, FALSe = Cancelled</returns>

      IF ( NOT (Confirmation(TRUE))) THEN
        EXIT(FALSE);

      lNfUpdateUsersPermissions.UpdateAll(FALSE);
      CreateOrUpdateUsersPermissions();

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "--- Log Errors ---"@1000000035();
    BEGIN
    END;

    LOCAL PROCEDURE CreateOrUpdateLogErrors@1000000034();
    VAR
      eHelp@1000000001 : TextConst 'ENU=Log errors and warnings stay in the system forever as history. Entries with result different than success (errors or warnings) are reported by checklist and in role centre. For them to stop being reported (after fixing the issue or declaring it irrelevant), administrators have to confirm them.;ENG=Log errors and warnings stay in the system forever as history. Entries with result different than success (errors or warnings) are reported by checklist and in role centre. For them to stop being reported (after fixing the issue or declaring it irrelevant), administrators have to confirm them.';
    BEGIN
      ///<summary>Creating or updating log errors (checklist item)</summary>

      CreateChecklistItem(NfChecklistItem.Type::"Log Errors or Warnings");

      NfLog.RESET();
      NfLog.SETCURRENTKEY(Result);
      NfLog.SETFILTER(Result, '%1|%2', NfLog.Result::Error, NfLog.Result::Warning);
      NfLog.SETRANGE(Confirmed, FALSE);

      ModifyChecklistItem(NfLog.ISEMPTY(), TextType::None, eHelp);
    END;

    LOCAL PROCEDURE UpdateLogErrorsStatus@1000000033() : Boolean;
    VAR
      eName@1000000001 : TextConst 'ENU=User permissions;ENG=User permissions';
    BEGIN
      ///<summary>Updating log errors (checklist item) status</summary>
      ///<returns>TRUE = Updated, FALSe = Cancelled</returns>

      NfLog.RESET();
      NfLog.SETRANGE("Entry Type", NfLog."Entry Type"::Activity);
      NfLog.SETFILTER(Result, '%1|%2', NfLog.Result::Error, NfLog.Result::Warning);
      PAGE.RUNMODAL(PAGE::"nF. Log Overview", NfLog);

      CreateOrUpdateLogErrors();

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000030();
    BEGIN
    END;

    LOCAL PROCEDURE CreateChecklistItem@1000000018(pType@1000000001 : Option);
    BEGIN
      ///<summary>Updating checklist item (creating if it doesn't exist)</summary>
      ///<param name="pType">Type to create</param>

      IF ( NOT (NfChecklistItem.GET(pType))) THEN
      BEGIN
        NfChecklistItem.INIT();
        NfChecklistItem.Type := pType;
        NfChecklistItem.INSERT();
      END;
    END;

    LOCAL PROCEDURE ModifyChecklistItem@1000000039(pStatus@1000000000 : Boolean;pTextType@1000000001 : Option;pHelp@1000000003 : Text);
    VAR
      lText@1000000002 : Text;
      eUpToDateSTrue@1000000006 : TextConst 'ENU=Up to Date;ENG=Up to Date';
      eUpToDateSFalse@1000000005 : TextConst 'ENU=Needs Updating;ENG=Needs Updating';
      eUpToDatePTrue@1000000008 : TextConst 'ENU=Up to Date;ENG=Up to Date';
      eUpToDatePFalse@1000000007 : TextConst 'ENU=Need Updating;ENG=Need Updating';
      eNoneTrue@1000000009 : TextConst 'ENU=None;ENG=None';
      eNoneFalse@1000000010 : TextConst 'ENU=Detected;ENG=Detected';
    BEGIN
      ///<summary>Setting checklist item</summary>
      ///<param name="pStatus">Status</param>
      ///<param name="pTextType">Text type</param>
      ///<param name="pHelp">Help</param>
      ///<param name="pNfChecklistItem">Target item</param>

      CASE (pTextType) OF
        TextType::UpToDateS: lText := NfIif.Text(pStatus, eUpToDateSTrue, eUpToDateSFalse);
        TextType::UpToDateP: lText := NfIif.Text(pStatus, eUpToDatePTrue, eUpToDatePFalse);
        TextType::None: lText := NfIif.Text(pStatus, eNoneTrue, eNoneFalse);
      END;

      NfChecklistItem.Status := pStatus;
      NfChecklistItem.Text := lText;
      NfChecklistItem.Style := NfIif.Text(NfChecklistItem.Status, 'Favorable', 'Unfavorable');
      NfChecklistItem.SetHelp(pHelp);
      NfChecklistItem.MODIFY();
    END;

    LOCAL PROCEDURE Confirmation@1000000031(pPlural@1000000000 : Boolean) : Boolean;
    VAR
      lConfirmationText@1000000002 : Text;
      eTrueText1P@1000000005 : TextConst 'ENU=%1 have been updated already.;ENG=%1 have been updated already.';
      eTrueText1S@1000000006 : TextConst 'ENU=%1 has been updated already.;ENG=%1 has been updated already.';
      eTrueText2@1000000004 : TextConst 'ENU=Do you still want to run the update?;ENG=Do you still want to run the update?';
      eFalseText@1000000003 : TextConst 'ENU=Do you want to update %1?;ENG=Do you want to update %1?';
    BEGIN
      ///<summary>Performing confirmation for updating specified checklist item</summary>
      ///<param name="pPlural">TRUE = Plural form, FALSE = Singular form</param>
      ///<returns>Confirmation result</returns>

      IF (NfChecklistItem.Status) THEN
      BEGIN
        lConfirmationText := NfIif.Text(pPlural, eTrueText1P, eTrueText1S);
        lConfirmationText := STRSUBSTNO(lConfirmationText, FORMAT(NfChecklistItem.Type));
        lConfirmationText := lConfirmationText + ' ' + eTrueText2;
      END
      ELSE
        lConfirmationText := STRSUBSTNO(eFalseText, LOWERCASE(FORMAT(NfChecklistItem.Type)));

      EXIT(CONFIRM(lConfirmationText, ( NOT (NfChecklistItem.Status))));
    END;

    BEGIN
    {
      ///<summary>Managing nForcement checklists logic</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-06-27">Created</change>
      ///<change version="NF2016.17.11" initials="JH" date="2016-11-03">Give everything group renamed to "Give Everything"</change>
    }
    END.
  }
}

