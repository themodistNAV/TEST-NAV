OBJECT Report 198 Date Compress Customer Ledger
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 17=rimd,
                TableData 21=rimd,
                TableData 45=rimd,
                TableData 87=rimd,
                TableData 300=rimd,
                TableData 355=imd,
                TableData 379=rimd;
    CaptionML=[ENU=Date Compress Customer Ledger;
               ENG=Date Compress Customer Ledger];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  DimSelectionBuf.CompareDimText(
                    3,REPORT::"Date Compress Customer Ledger",'',RetainDimText,Text010);
                  CustLedgEntryFilter := COPYSTR("Cust. Ledger Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

  }
  DATASET
  {
    { 8503;    ;DataItem;                    ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Customer No.,Posting Date)
                                 WHERE(Open=CONST(No));
               OnPreDataItem=VAR
                               GLSetup@1000 : Record 98;
                             BEGIN
                               IF NOT
                                  CONFIRM(Text000,FALSE)
                               THEN
                                 CurrReport.BREAK;

                               IF EntrdDateComprReg."Ending Date" = 0D THEN
                                 ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                               Window.OPEN(
                                 Text004 +
                                 Text005 +
                                 Text006 +
                                 Text007 +
                                 Text008);

                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Compress Cust. Ledger");

                               SelectedDim.GetSelectedDim(
                                 USERID,3,REPORT::"Date Compress Customer Ledger",'',TempSelectedDim);
                               GLSetup.GET;
                               Retain[4] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress Customer Ledger",'',GLSetup."Global Dimension 1 Code");
                               Retain[5] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress Customer Ledger",'',GLSetup."Global Dimension 2 Code");

                               GLEntry.LOCKTABLE;
                               ReminderEntry.LOCKTABLE;
                               NewDtldCustLedgEntry.LOCKTABLE;
                               NewCustLedgEntry.LOCKTABLE;
                               GLReg.LOCKTABLE;
                               DateComprReg.LOCKTABLE;

                               IF GLEntry.FINDLAST THEN;
                               LastEntryNo := GLEntry."Entry No.";
                               NextTransactionNo := GLEntry."Transaction No." + 1;
                               IF NewDtldCustLedgEntry.FINDLAST THEN;
                               LastDtldEntryNo := NewDtldCustLedgEntry."Entry No.";
                               SETRANGE("Entry No.",0,LastEntryNo);
                               SETRANGE("Posting Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");

                               InitRegisters;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NOT CompressDetails("Cust. Ledger Entry") THEN
                                    CurrReport.SKIP;
                                  ReminderEntry.SETCURRENTKEY("Customer Entry No.");
                                  CustLedgEntry2 := "Cust. Ledger Entry";
                                  WITH CustLedgEntry2 DO BEGIN
                                    SETCURRENTKEY("Customer No.","Posting Date");
                                    COPYFILTERS("Cust. Ledger Entry");
                                    SETRANGE("Customer No.","Customer No.");
                                    SETFILTER("Posting Date",DateComprMgt.GetDateFilter("Posting Date",EntrdDateComprReg,TRUE));
                                    SETRANGE("Customer Posting Group","Customer Posting Group");
                                    SETRANGE("Currency Code","Currency Code");
                                    SETRANGE("Document Type","Document Type");

                                    IF RetainNo(FIELDNO("Document No.")) THEN
                                      SETRANGE("Document No.","Document No.");
                                    IF RetainNo(FIELDNO("Sell-to Customer No.")) THEN
                                      SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
                                    IF RetainNo(FIELDNO("Salesperson Code")) THEN
                                      SETRANGE("Salesperson Code","Salesperson Code");
                                    IF RetainNo(FIELDNO("Global Dimension 1 Code")) THEN
                                      SETRANGE("Global Dimension 1 Code","Global Dimension 1 Code");
                                    IF RetainNo(FIELDNO("Global Dimension 2 Code")) THEN
                                      SETRANGE("Global Dimension 2 Code","Global Dimension 2 Code");
                                    CALCFIELDS(Amount);
                                    IF Amount >= 0 THEN
                                      SummarizePositive := TRUE
                                    ELSE
                                      SummarizePositive := FALSE;

                                    InitNewEntry(NewCustLedgEntry);

                                    DimBufMgt.CollectDimEntryNo(
                                      TempSelectedDim,"Dimension Set ID","Entry No.",
                                      0,FALSE,DimEntryNo);
                                    ComprDimEntryNo := DimEntryNo;
                                    SummarizeEntry(NewCustLedgEntry,CustLedgEntry2);

                                    WHILE NEXT <> 0 DO BEGIN
                                      CALCFIELDS(Amount);
                                      IF ((Amount >= 0) AND SummarizePositive) OR
                                         ((Amount < 0) AND (NOT SummarizePositive))
                                      THEN
                                        IF CompressDetails(CustLedgEntry2) THEN BEGIN
                                          DimBufMgt.CollectDimEntryNo(
                                            TempSelectedDim,"Dimension Set ID","Entry No.",
                                            ComprDimEntryNo,TRUE,DimEntryNo);
                                          IF DimEntryNo = ComprDimEntryNo THEN
                                            SummarizeEntry(NewCustLedgEntry,CustLedgEntry2);
                                        END;
                                    END;

                                    InsertNewEntry(NewCustLedgEntry,ComprDimEntryNo);

                                    ComprCollectedEntries;
                                  END;

                                  IF DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 THEN BEGIN
                                    NoOfDeleted := DateComprReg."No. Records Deleted";
                                    InsertRegisters(GLReg,DateComprReg);
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF DateComprReg."No. Records Deleted" > NoOfDeleted THEN
                                  InsertRegisters(GLReg,DateComprReg);
                              END;

               ReqFilterFields=Customer No.,Customer Posting Group,Currency Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   InitializeParameter;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Starting Date;
                             ENG=Starting Date];
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  CaptionML=[ENU=Ending Date;
                             ENG=Ending Date];
                  SourceExpr=EntrdDateComprReg."Ending Date" }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Period Length;
                             ENG=Period Length];
                  OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Period;
                                   ENG=Day,Week,Month,Quarter,Year,Period];
                  SourceExpr=EntrdDateComprReg."Period Length" }

      { 4   ;2   ;Field     ;
                  CaptionML=[ENU=Posting Description;
                             ENG=Posting Description];
                  SourceExpr=EntrdCustLedgEntry.Description }

      { 25  ;2   ;Group     ;
                  CaptionML=[ENU=Retain Field Contents;
                             ENG=Retain Field Contents] }

      { 5   ;3   ;Field     ;
                  CaptionML=[ENU=Document No.;
                             ENG=Document No.];
                  SourceExpr=Retain[1] }

      { 6   ;3   ;Field     ;
                  CaptionML=[ENU=Sell-to Customer No.;
                             ENG=Sell-to Customer No.];
                  SourceExpr=Retain[2] }

      { 7   ;3   ;Field     ;
                  CaptionML=[ENU=Salesperson Code;
                             ENG=Salesperson Code];
                  SourceExpr=Retain[3] }

      { 9   ;2   ;Field     ;
                  CaptionML=[ENU=Retain Dimensions;
                             ENG=Retain Dimensions];
                  SourceExpr=RetainDimText;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Date Compress Customer Ledger",RetainDimText);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\Do you want to date compress the entries?;ENG=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\Do you want to date compress the entries?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.;ENG=%1 must be specified.';
      Text004@1004 : TextConst 'ENU=Date compressing customer ledger entries...\\;ENG=Date compressing customer ledger entries...\\';
      Text005@1005 : TextConst 'ENU=Customer No.         #1##########\;ENG=Customer No.         #1##########\';
      Text006@1006 : TextConst 'ENU=Date                 #2######\\;ENG=Date                 #2######\\';
      Text007@1007 : TextConst 'ENU=No. of new entries   #3######\;ENG=No. of new entries   #3######\';
      Text008@1008 : TextConst 'ENU=No. of entries del.  #4######;ENG=No. of entries del.  #4######';
      Text009@1009 : TextConst 'ENU=Date Compressed;ENG=Date Compressed';
      Text010@1010 : TextConst 'ENU=Retain Dimensions;ENG=Retain Dimensions';
      SourceCodeSetup@1011 : Record 242;
      DateComprReg@1012 : Record 87;
      EntrdDateComprReg@1013 : Record 87;
      GLReg@1014 : Record 45;
      EntrdCustLedgEntry@1015 : Record 21;
      NewCustLedgEntry@1016 : Record 21;
      CustLedgEntry2@1017 : Record 21;
      NewDtldCustLedgEntry@1018 : Record 379;
      DtldCustLedgEntryBuffer@1019 : TEMPORARY Record 379;
      GLEntry@1020 : Record 17;
      ReminderEntry@1021 : Record 300;
      SelectedDim@1022 : Record 369;
      TempSelectedDim@1023 : TEMPORARY Record 369;
      DimSelectionBuf@1024 : Record 368;
      DateComprMgt@1025 : Codeunit 356;
      DimBufMgt@1026 : Codeunit 411;
      DimMgt@1027 : Codeunit 408;
      Window@1028 : Dialog;
      CustLedgEntryFilter@1029 : Text[250];
      NoOfFields@1030 : Integer;
      Retain@1031 : ARRAY [10] OF Boolean;
      FieldNumber@1032 : ARRAY [10] OF Integer;
      FieldNameArray@1033 : ARRAY [10] OF Text[100];
      LastEntryNo@1034 : Integer;
      NextTransactionNo@1035 : Integer;
      NoOfDeleted@1036 : Integer;
      LastDtldEntryNo@1037 : Integer;
      LastTmpDtldEntryNo@1038 : Integer;
      GLRegExists@1039 : Boolean;
      i@1040 : Integer;
      ComprDimEntryNo@1041 : Integer;
      DimEntryNo@1042 : Integer;
      RetainDimText@1043 : Text[250];
      SummarizePositive@1044 : Boolean;

    LOCAL PROCEDURE InitRegisters@4();
    BEGIN
      IF GLReg.FIND('+') THEN;
      GLReg.INIT;
      GLReg."No." := GLReg."No." + 1;
      GLReg."Creation Date" := TODAY;
      GLReg."Source Code" := SourceCodeSetup."Compress Cust. Ledger";
      GLReg."User ID" := USERID;
      GLReg."From Entry No." := LastEntryNo + 1;

      IF DateComprReg.FIND('+') THEN;
      DateComprReg.INIT;
      DateComprReg."No." := DateComprReg."No." + 1;
      DateComprReg."Table ID" := DATABASE::"Cust. Ledger Entry";
      DateComprReg."Creation Date" := TODAY;
      DateComprReg."Starting Date" := EntrdDateComprReg."Starting Date";
      DateComprReg."Ending Date" := EntrdDateComprReg."Ending Date";
      DateComprReg."Period Length" := EntrdDateComprReg."Period Length";
      FOR i := 1 TO NoOfFields DO
        IF Retain[i] THEN
          DateComprReg."Retain Field Contents" :=
            COPYSTR(
              DateComprReg."Retain Field Contents" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Field Contents"));
      DateComprReg."Retain Field Contents" := COPYSTR(DateComprReg."Retain Field Contents",2);
      DateComprReg.Filter := CustLedgEntryFilter;
      DateComprReg."Register No." := GLReg."No.";
      DateComprReg."Source Code" := SourceCodeSetup."Compress Cust. Ledger";
      DateComprReg."User ID" := USERID;

      GLRegExists := FALSE;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(VAR GLReg@1000 : Record 45;VAR DateComprReg@1001 : Record 87);
    BEGIN
      GLEntry.INIT;
      LastEntryNo := LastEntryNo + 1;
      GLEntry."Entry No." := LastEntryNo;
      GLEntry."Posting Date" := TODAY;
      GLEntry.Description := EntrdCustLedgEntry.Description;
      GLEntry."Source Code" := SourceCodeSetup."Compress Cust. Ledger";
      GLEntry."System-Created Entry" := TRUE;
      GLEntry."User ID" := USERID;
      GLEntry."Transaction No." := NextTransactionNo;
      GLEntry.INSERT;
      GLEntry.CONSISTENT(GLEntry.Amount = 0);
      GLReg."To Entry No." := GLEntry."Entry No.";

      IF GLRegExists THEN BEGIN
        GLReg.MODIFY;
        DateComprReg.MODIFY;
      END ELSE BEGIN
        GLReg.INSERT;
        DateComprReg.INSERT;
        GLRegExists := TRUE;
      END;
      COMMIT;

      GLEntry.LOCKTABLE;
      ReminderEntry.LOCKTABLE;
      NewDtldCustLedgEntry.LOCKTABLE;
      NewCustLedgEntry.LOCKTABLE;
      GLReg.LOCKTABLE;
      DateComprReg.LOCKTABLE;

      IF GLEntry.FINDLAST THEN;
      IF NewCustLedgEntry.FIND('+') THEN;
      IF (LastEntryNo <> GLEntry."Entry No.") OR
         (LastEntryNo <> NewCustLedgEntry."Entry No." + 1)
      THEN BEGIN
        LastEntryNo := GLEntry."Entry No.";
        NextTransactionNo := GLEntry."Transaction No." + 1;
        InitRegisters;
      END;
      IF NewDtldCustLedgEntry.FINDLAST THEN;
      LastDtldEntryNo := NewDtldCustLedgEntry."Entry No.";
    END;

    LOCAL PROCEDURE InsertField@2(Number@1000 : Integer;Name@1001 : Text[100]);
    BEGIN
      NoOfFields := NoOfFields + 1;
      FieldNumber[NoOfFields] := Number;
      FieldNameArray[NoOfFields] := Name;
    END;

    LOCAL PROCEDURE RetainNo@3(Number@1000 : Integer) : Boolean;
    BEGIN
      EXIT(Retain[Index(Number)]);
    END;

    LOCAL PROCEDURE Index@6(Number@1000 : Integer) : Integer;
    BEGIN
      FOR i := 1 TO NoOfFields DO
        IF Number = FieldNumber[i] THEN
          EXIT(i);
    END;

    LOCAL PROCEDURE SummarizeEntry@5(VAR NewCustLedgEntry@1000 : Record 21;CustLedgEntry@1001 : Record 21);
    VAR
      DtldCustLedgEntry@1003 : Record 379;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        NewCustLedgEntry."Sales (LCY)" := NewCustLedgEntry."Sales (LCY)" + "Sales (LCY)";
        NewCustLedgEntry."Profit (LCY)" := NewCustLedgEntry."Profit (LCY)" + "Profit (LCY)";
        NewCustLedgEntry."Inv. Discount (LCY)" := NewCustLedgEntry."Inv. Discount (LCY)" + "Inv. Discount (LCY)";
        NewCustLedgEntry."Original Pmt. Disc. Possible" :=
          NewCustLedgEntry."Original Pmt. Disc. Possible" + "Original Pmt. Disc. Possible";
        NewCustLedgEntry."Remaining Pmt. Disc. Possible" :=
          NewCustLedgEntry."Remaining Pmt. Disc. Possible" + "Remaining Pmt. Disc. Possible";
        NewCustLedgEntry."Closed by Amount (LCY)" :=
          NewCustLedgEntry."Closed by Amount (LCY)" + "Closed by Amount (LCY)";

        DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.");
        DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.","Entry No.");
        IF DtldCustLedgEntry.FIND('-') THEN BEGIN
          REPEAT
            SummarizeDtldEntry(DtldCustLedgEntry,NewCustLedgEntry);
          UNTIL DtldCustLedgEntry.NEXT = 0;
          DtldCustLedgEntry.DELETEALL;
        END;

        ReminderEntry.SETRANGE("Customer Entry No.","Entry No.");
        ReminderEntry.DELETEALL;
        DELETE;
        DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
        Window.UPDATE(4,DateComprReg."No. Records Deleted");
      END;
    END;

    LOCAL PROCEDURE ComprCollectedEntries@12();
    VAR
      CustLedgEntry@1000 : Record 21;
      OldDimEntryNo@1001 : Integer;
      Found@1002 : Boolean;
      CustLedgEntryNo@1003 : Integer;
    BEGIN
      OldDimEntryNo := 0;
      IF DimBufMgt.FindFirstDimEntryNo(DimEntryNo,CustLedgEntryNo) THEN BEGIN
        InitNewEntry(NewCustLedgEntry);
        REPEAT
          CustLedgEntry.GET(CustLedgEntryNo);
          SummarizeEntry(NewCustLedgEntry,CustLedgEntry);
          OldDimEntryNo := DimEntryNo;
          Found := DimBufMgt.NextDimEntryNo(DimEntryNo,CustLedgEntryNo);
          IF (OldDimEntryNo <> DimEntryNo) OR NOT Found THEN BEGIN
            InsertNewEntry(NewCustLedgEntry,OldDimEntryNo);
            IF Found THEN
              InitNewEntry(NewCustLedgEntry);
          END;
          OldDimEntryNo := DimEntryNo;
        UNTIL NOT Found;
      END;
      DimBufMgt.DeleteAllDimEntryNo;
    END;

    PROCEDURE InitNewEntry@7(VAR NewCustLedgEntry@1000 : Record 21);
    BEGIN
      LastEntryNo := LastEntryNo + 1;

      WITH CustLedgEntry2 DO BEGIN
        NewCustLedgEntry.INIT;
        NewCustLedgEntry."Entry No." := LastEntryNo;
        NewCustLedgEntry."Customer No." := "Customer No.";
        NewCustLedgEntry."Posting Date" := GETRANGEMIN("Posting Date");
        NewCustLedgEntry.Description := EntrdCustLedgEntry.Description;
        NewCustLedgEntry."Customer Posting Group" := "Customer Posting Group";
        NewCustLedgEntry."Currency Code" := "Currency Code";
        NewCustLedgEntry."Document Type" := "Document Type";
        NewCustLedgEntry."Source Code" := SourceCodeSetup."Compress Cust. Ledger";
        NewCustLedgEntry."User ID" := USERID;
        NewCustLedgEntry."Transaction No." := NextTransactionNo;

        IF RetainNo(FIELDNO("Document No.")) THEN
          NewCustLedgEntry."Document No." := "Document No.";
        IF RetainNo(FIELDNO("Sell-to Customer No.")) THEN
          NewCustLedgEntry."Sell-to Customer No." := "Sell-to Customer No.";
        IF RetainNo(FIELDNO("Salesperson Code")) THEN
          NewCustLedgEntry."Salesperson Code" := "Salesperson Code";
        IF RetainNo(FIELDNO("Global Dimension 1 Code")) THEN
          NewCustLedgEntry."Global Dimension 1 Code" := "Global Dimension 1 Code";
        IF RetainNo(FIELDNO("Global Dimension 2 Code")) THEN
          NewCustLedgEntry."Global Dimension 2 Code" := "Global Dimension 2 Code";

        Window.UPDATE(1,NewCustLedgEntry."Customer No.");
        Window.UPDATE(2,NewCustLedgEntry."Posting Date");
        DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
        Window.UPDATE(3,DateComprReg."No. of New Records");
      END;
    END;

    LOCAL PROCEDURE InsertNewEntry@23(VAR NewCustLedgEntry@1000 : Record 21;DimEntryNo@1001 : Integer);
    VAR
      TempDimBuf@1002 : TEMPORARY Record 360;
      TempDimSetEntry@1005 : TEMPORARY Record 480;
      DimVal@1004 : Record 349;
    BEGIN
      TempDimBuf.DELETEALL;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
      IF TempDimBuf.FINDSET THEN
        REPEAT
          DimVal.GET(TempDimBuf."Dimension Code",TempDimBuf."Dimension Value Code");
          TempDimSetEntry."Dimension Code" := TempDimBuf."Dimension Code";
          TempDimSetEntry."Dimension Value Code" := TempDimBuf."Dimension Value Code";
          TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
          TempDimSetEntry.INSERT;
        UNTIL TempDimBuf.NEXT = 0;
      NewCustLedgEntry."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      NewCustLedgEntry.INSERT;
      InsertDtldEntries;
    END;

    LOCAL PROCEDURE CompressDetails@8(CustLedgEntry@1000 : Record 21) : Boolean;
    VAR
      DtldCustLedgEntry@1001 : Record 379;
    BEGIN
      DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type","Posting Date");
      DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
      IF EntrdDateComprReg."Starting Date" <> 0D THEN BEGIN
        DtldCustLedgEntry.SETFILTER(
          "Posting Date",
          STRSUBSTNO(
            '..%1|%2..',
            CALCDATE('<-1D>',EntrdDateComprReg."Starting Date"),
            CALCDATE('<+1D>',EntrdDateComprReg."Ending Date")));
      END ELSE
        DtldCustLedgEntry.SETFILTER(
          "Posting Date",
          STRSUBSTNO(
            '%1..',
            CALCDATE('<+1D>',EntrdDateComprReg."Ending Date")));

      EXIT(NOT DtldCustLedgEntry.FINDLAST);
    END;

    LOCAL PROCEDURE SummarizeDtldEntry@9(VAR DtldCustLedgEntry@1000 : Record 379;VAR NewCustLedgEntry@1001 : Record 21);
    VAR
      NewEntry@1003 : Boolean;
      PostingDate@1004 : Date;
    BEGIN
      DtldCustLedgEntryBuffer.SETFILTER(
        "Posting Date",
        DateComprMgt.GetDateFilter(DtldCustLedgEntry."Posting Date",EntrdDateComprReg,TRUE));
      PostingDate := DtldCustLedgEntryBuffer.GETRANGEMIN("Posting Date");
      DtldCustLedgEntryBuffer.SETRANGE("Posting Date",PostingDate);
      DtldCustLedgEntryBuffer.SETRANGE("Entry Type",DtldCustLedgEntry."Entry Type");
      IF RetainNo("Cust. Ledger Entry".FIELDNO("Document No.")) THEN
        DtldCustLedgEntryBuffer.SETRANGE("Document No.","Cust. Ledger Entry"."Document No.");
      IF RetainNo("Cust. Ledger Entry".FIELDNO("Sell-to Customer No.")) THEN
        DtldCustLedgEntryBuffer.SETRANGE("Customer No.","Cust. Ledger Entry"."Sell-to Customer No.");
      IF RetainNo("Cust. Ledger Entry".FIELDNO("Global Dimension 1 Code")) THEN
        DtldCustLedgEntryBuffer.SETRANGE("Initial Entry Global Dim. 1","Cust. Ledger Entry"."Global Dimension 1 Code");
      IF RetainNo("Cust. Ledger Entry".FIELDNO("Global Dimension 2 Code")) THEN
        DtldCustLedgEntryBuffer.SETRANGE("Initial Entry Global Dim. 2","Cust. Ledger Entry"."Global Dimension 2 Code");

      IF NOT DtldCustLedgEntryBuffer.FIND('-') THEN BEGIN
        DtldCustLedgEntryBuffer.RESET;
        CLEAR(DtldCustLedgEntryBuffer);

        LastTmpDtldEntryNo := LastTmpDtldEntryNo + 1;
        DtldCustLedgEntryBuffer."Entry No." := LastTmpDtldEntryNo;
        DtldCustLedgEntryBuffer."Posting Date" := PostingDate;
        DtldCustLedgEntryBuffer."Document Type" := NewCustLedgEntry."Document Type";
        DtldCustLedgEntryBuffer."Initial Document Type" := NewCustLedgEntry."Document Type";
        DtldCustLedgEntryBuffer."Document No." := NewCustLedgEntry."Document No.";
        DtldCustLedgEntryBuffer."Entry Type" := DtldCustLedgEntry."Entry Type";
        DtldCustLedgEntryBuffer."Cust. Ledger Entry No." := NewCustLedgEntry."Entry No.";
        DtldCustLedgEntryBuffer."Customer No." := NewCustLedgEntry."Customer No.";
        DtldCustLedgEntryBuffer."Currency Code" := NewCustLedgEntry."Currency Code";
        DtldCustLedgEntryBuffer."User ID" := NewCustLedgEntry."User ID";
        DtldCustLedgEntryBuffer."Source Code" := NewCustLedgEntry."Source Code";
        DtldCustLedgEntryBuffer."Transaction No." := NewCustLedgEntry."Transaction No.";
        DtldCustLedgEntryBuffer."Journal Batch Name" := NewCustLedgEntry."Journal Batch Name";
        DtldCustLedgEntryBuffer."Reason Code" := NewCustLedgEntry."Reason Code";
        DtldCustLedgEntryBuffer."Initial Entry Due Date" := NewCustLedgEntry."Due Date";
        DtldCustLedgEntryBuffer."Initial Entry Global Dim. 1" := NewCustLedgEntry."Global Dimension 1 Code";
        DtldCustLedgEntryBuffer."Initial Entry Global Dim. 2" := NewCustLedgEntry."Global Dimension 2 Code";

        NewEntry := TRUE;
      END;

      DtldCustLedgEntryBuffer.Amount :=
        DtldCustLedgEntryBuffer.Amount + DtldCustLedgEntry.Amount;
      DtldCustLedgEntryBuffer."Amount (LCY)" :=
        DtldCustLedgEntryBuffer."Amount (LCY)" + DtldCustLedgEntry."Amount (LCY)";
      DtldCustLedgEntryBuffer."Debit Amount" :=
        DtldCustLedgEntryBuffer."Debit Amount" + DtldCustLedgEntry."Debit Amount";
      DtldCustLedgEntryBuffer."Credit Amount" :=
        DtldCustLedgEntryBuffer."Credit Amount" + DtldCustLedgEntry."Credit Amount";
      DtldCustLedgEntryBuffer."Debit Amount (LCY)" :=
        DtldCustLedgEntryBuffer."Debit Amount (LCY)" + DtldCustLedgEntry."Debit Amount (LCY)";
      DtldCustLedgEntryBuffer."Credit Amount (LCY)" :=
        DtldCustLedgEntryBuffer."Credit Amount (LCY)" + DtldCustLedgEntry."Credit Amount (LCY)";

      IF NewEntry THEN
        DtldCustLedgEntryBuffer.INSERT
      ELSE
        DtldCustLedgEntryBuffer.MODIFY;
    END;

    LOCAL PROCEDURE InsertDtldEntries@20();
    BEGIN
      DtldCustLedgEntryBuffer.RESET;
      IF DtldCustLedgEntryBuffer.FIND('-') THEN
        REPEAT
          IF ((DtldCustLedgEntryBuffer.Amount <> 0) OR
              (DtldCustLedgEntryBuffer."Amount (LCY)" <> 0) OR
              (DtldCustLedgEntryBuffer."Debit Amount" <> 0) OR
              (DtldCustLedgEntryBuffer."Credit Amount" <> 0) OR
              (DtldCustLedgEntryBuffer."Debit Amount (LCY)" <> 0) OR
              (DtldCustLedgEntryBuffer."Credit Amount (LCY)" <> 0))
          THEN BEGIN
            LastDtldEntryNo := LastDtldEntryNo + 1;

            NewDtldCustLedgEntry := DtldCustLedgEntryBuffer;
            NewDtldCustLedgEntry."Entry No." := LastDtldEntryNo;
            NewDtldCustLedgEntry.INSERT(TRUE);
          END;
        UNTIL DtldCustLedgEntryBuffer.NEXT = 0;
      DtldCustLedgEntryBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE InitializeParameter@10();
    BEGIN
      IF EntrdDateComprReg."Ending Date" = 0D THEN
        EntrdDateComprReg."Ending Date" := TODAY;
      IF EntrdCustLedgEntry.Description = '' THEN
        EntrdCustLedgEntry.Description := Text009;

      WITH "Cust. Ledger Entry" DO BEGIN
        InsertField(FIELDNO("Document No."),FIELDCAPTION("Document No."));
        InsertField(FIELDNO("Sell-to Customer No."),FIELDCAPTION("Sell-to Customer No."));
        InsertField(FIELDNO("Salesperson Code"),FIELDCAPTION("Salesperson Code"));
        InsertField(FIELDNO("Global Dimension 1 Code"),FIELDCAPTION("Global Dimension 1 Code"));
        InsertField(FIELDNO("Global Dimension 2 Code"),FIELDCAPTION("Global Dimension 2 Code"));
      END;

      RetainDimText := DimSelectionBuf.GetDimSelectionText(3,REPORT::"Date Compress Customer Ledger",'');
    END;

    PROCEDURE InitializeRequest@15(StartingDate@1007 : Date;EndingDate@1006 : Date;PeriodLength@1005 : Option;Description@1004 : Text[50];RetainDocumentNo@1003 : Boolean;RetainSelltoCustomerNo@1002 : Boolean;RetainSalespersonCode@1001 : Boolean;RetainDimensionText@1000 : Text[250]);
    BEGIN
      InitializeParameter;
      EntrdDateComprReg."Starting Date" := StartingDate;
      EntrdDateComprReg."Ending Date" := EndingDate;
      EntrdDateComprReg."Period Length" := PeriodLength;
      EntrdCustLedgEntry.Description := Description;
      Retain[1] := RetainDocumentNo;
      Retain[2] := RetainSelltoCustomerNo;
      Retain[3] := RetainSalespersonCode;
      RetainDimText := RetainDimensionText;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

