OBJECT Table 9062844 Enhanced Rapid Start Setup
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NH2016.15;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Enhanced Rapid Start Setup;
               ENG=Enhanced Rapid Start Setup];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              ENG=Primary Key] }
    { 2   ;   ;Default Costing Method;Option      ;CaptionML=[ENU=Default Costing Method;
                                                              ENG=Default Costing Method];
                                                   OptionCaptionML=[ENU=FIFO,LIFO,Specific,Average,Standard;
                                                                    ENG=FIFO,LIFO,Specific,Average,Standard];
                                                   OptionString=FIFO,LIFO,Specific,Average,Standard }
    { 3   ;   ;Initial Config. Quest. Tmpl.;Code20;TableRelation="Questionnaire Template";
                                                   CaptionML=[ENU=Initial Config. Quest. Tmpl.;
                                                              ENG=Initial Config. Quest. Tmpl.] }
    { 10  ;   ;Import Template Type;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Import Template Type;
                                                              ENG=Import Template Type];
                                                   OptionCaptionML=[ENU=" ,Simple Fields,All Fields";
                                                                    ENG=" ,Simple Fields,All Fields"];
                                                   OptionString=[ ,Simple Fields,All Fields] }
    { 11  ;   ;Enh. Fields Transfer Result;Option ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Enh. Fields Transfer Result;
                                                              ENG=Enh. Fields Transfer Result];
                                                   OptionCaptionML=[ENU=" ,No Fields,Normal Fields,Enhanced Fields,Normal and Enhanced Fields";
                                                                    ENG=" ,No Fields,Normal Fields,Enhanced Fields,Normal and Enhanced Fields"];
                                                   OptionString=[ ,No Fields,Normal Fields,Enhanced Fields,Normal and Enhanced Fields] }
    { 12  ;   ;Check Result        ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Check Result;
                                                              ENG=Check Result];
                                                   OptionCaptionML=[ENU=" ,OK,Warnings,Errors";
                                                                    ENG=" ,OK,Warnings,Errors"];
                                                   OptionString=[ ,OK,Warnings,Errors] }
    { 20  ;   ;Def. Vendor Posting Group;Code10   ;TableRelation="Vendor Posting Group";
                                                   CaptionML=[ENU=Default Vendor Posting Group;
                                                              ENG=Default Vendor Posting Group] }
    { 21  ;   ;Vend. Domestic Gen. Bus. P. G.;Code10;
                                                   TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Vendor Domestic General Business Posting Group;
                                                              ENG=Vendor Domestic General Business Posting Group] }
    { 22  ;   ;Vendor EU Gen Bus P Grp;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Vendor EU General Business Posting Group;
                                                              ENG=Vendor EU General Business Posting Group] }
    { 23  ;   ;Vendor Overseas Gen Bus P Grp;Code10;
                                                   TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Vendor Overseas General Business Posting Group;
                                                              ENG=Vendor Overseas General Business Posting Group] }
    { 29  ;   ;Def. Vendor VAT Bus. P. G.;Code10  ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=Default Vendor VAT Business Posting Group;
                                                              ENG=Default Vendor VAT Business Posting Group] }
    { 30  ;   ;Def. Customer Posting Group;Code10 ;TableRelation="Customer Posting Group";
                                                   CaptionML=[ENU=Default Customer Posting Group;
                                                              ENG=Default Customer Posting Group] }
    { 31  ;   ;Cust. Domestic Gen. Bus. P. G.;Code10;
                                                   TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Customer Domestic General Business Posting Group;
                                                              ENG=Customer Domestic General Business Posting Group] }
    { 32  ;   ;Cust. EU Gen. Bus. P. G.;Code10    ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Customer EU General Business Posting Group;
                                                              ENG=Customer EU General Business Posting Group] }
    { 33  ;   ;Cust. Overseas Gen. Bus. P. G.;Code10;
                                                   TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Customer Overseas General Business Posting Group;
                                                              ENG=Customer Overseas General Business Posting Group] }
    { 39  ;   ;Def. Cust. VAT Bus. P. G.;Code10   ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=Default Customer VAT Business Posting Group;
                                                              ENG=Default Customer VAT Business Posting Group] }
    { 40  ;   ;Item Journal Template Name;Code10  ;TableRelation="Item Journal Template" WHERE (Type=CONST(Item),
                                                                                                Recurring=CONST(No));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Item Journal Template Name" <> xRec."Item Journal Template Name") THEN
                                                                  Rec.VALIDATE("Item Journal Batch Name", '');
                                                              END;

                                                   CaptionML=[ENU=Item Journal Template Name;
                                                              ENG=Item Journal Template Name] }
    { 41  ;   ;Item Journal Batch Name;Code10     ;TableRelation="Item Journal Batch".Name WHERE (Journal Template Name=FIELD(Item Journal Template Name));
                                                   CaptionML=[ENU=Item Journal Batch Name;
                                                              ENG=Item Journal Batch Name] }
    { 42  ;   ;Whse. Journal Template Name;Code10 ;TableRelation="Warehouse Journal Template" WHERE (Type=CONST(Item));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Whse. Journal Template Name" <> xRec."Whse. Journal Template Name") THEN
                                                                  Rec.VALIDATE("Whse. Journal Batch Name", '');
                                                              END;

                                                   CaptionML=[ENU=Warehouse Journal Template Name;
                                                              ENG=Warehouse Journal Template Name] }
    { 43  ;   ;Whse. Journal Batch Name;Code10    ;TableRelation="Warehouse Journal Batch".Name WHERE (Journal Template Name=FIELD(Whse. Journal Template Name));
                                                   CaptionML=[ENU=Warehouse Journal Batch Name;
                                                              ENG=Warehouse Journal Batch Name] }
    { 50  ;   ;Customer Jnl. Template Name;Code10 ;TableRelation="Gen. Journal Template" WHERE (Type=CONST(Sales),
                                                                                                Recurring=CONST(No));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Customer Jnl. Template Name" <> xRec."Customer Jnl. Template Name") THEN
                                                                  Rec.VALIDATE("Customer Jnl. Batch Name", '');
                                                              END;

                                                   CaptionML=[ENU=Customer Jnl. Template Name;
                                                              ENG=Customer Jnl. Template Name] }
    { 51  ;   ;Customer Jnl. Batch Name;Code10    ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Customer Jnl. Template Name));
                                                   CaptionML=[ENU=Customer Jnl. Batch Name;
                                                              ENG=Customer Jnl. Batch Name] }
    { 52  ;   ;Vendor Jnl. Template Name;Code10   ;TableRelation="Gen. Journal Template" WHERE (Type=CONST(Purchases),
                                                                                                Recurring=CONST(No));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Vendor Jnl. Template Name" <> xRec."Vendor Jnl. Template Name") THEN
                                                                  Rec.VALIDATE("Vendor Jnl. Batch Name", '');
                                                              END;

                                                   CaptionML=[ENU=Vendor Jnl. Template Name;
                                                              ENG=Vendor Jnl. Template Name] }
    { 53  ;   ;Vendor Jnl. Batch Name;Code10      ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Vendor Jnl. Template Name));
                                                   CaptionML=[ENU=Vendor Jnl. Batch Name;
                                                              ENG=Vendor Jnl. Batch Name] }
    { 60  ;   ;Def. Gen. Prod. Posting Group;Code10;
                                                   TableRelation="Gen. Product Posting Group";
                                                   OnValidate=VAR
                                                                lGenProductPostingGroup@1000000000 : Record 251;
                                                              BEGIN
                                                                IF (lGenProductPostingGroup.GET(Rec."Def. Gen. Prod. Posting Group")) THEN
                                                                  Rec.VALIDATE("Def. VAT Prod. Posting Group", lGenProductPostingGroup."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Default General Product Posting Group;
                                                              ENG=Default General Product Posting Group] }
    { 61  ;   ;Def. VAT Prod. Posting Group;Code10;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=Default VAT Product Posting Group;
                                                              ENG=Default VAT Product Posting Group] }
    { 62  ;   ;Def. Inventory Posting Group;Code10;TableRelation="Inventory Posting Group";
                                                   CaptionML=[ENU=Default Inventory Posting Group;
                                                              ENG=Default Inventory Posting Group] }
    { 70  ;   ;Def. Unit of Measure Code;Code10   ;TableRelation="Unit of Measure";
                                                   CaptionML=[ENU=Default Unit of Measure Code;
                                                              ENG=Default Unit of Measure Code] }
    { 80  ;   ;Customer Import Nos.;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Customer Import Nos.;
                                                              ENG=Customer Import Nos.] }
    { 81  ;   ;Vendor Import Nos.  ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Vendor Import Nos.;
                                                              ENG=Vendor Import Nos.] }
    { 82  ;   ;Item Import Nos.    ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Item Import Nos.;
                                                              ENG=Item Import Nos.] }
    { 83  ;   ;Stock Import Nos.   ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Stock Import Nos.;
                                                              ENG=Stock Import Nos.] }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      tInitialConfigQuestTmpl@1000000000 : TextConst 'ENU=TEMPLATE;ENG=TEMPLATE';

    PROCEDURE VerifyAndGet@1000000000();
    VAR
      lCustomerPostingGroup@1000000001 : Record 92;
      lVendorPostingGroup@1000000002 : Record 93;
      lGenJournalTemplate@1000000003 : Record 80;
      lGenProductPostingGroup@1000000004 : Record 251;
      lVatProductPostingGroup@1000000005 : Record 324;
      lInventoryPostingGroup@1000000006 : Record 94;
      lUnitOfMeasure@1000000007 : Record 204;
      lModify@1000000000 : Boolean;
      eCustomerImportCode@1000000020 : TextConst 'ENU=CUST IMP;ENG=CUST IMP';
      eCustomerImportDescription@1000000019 : TextConst 'ENU=Customer Import;ENG=Customer Import';
      eCustomerImportStartingNo@1000000018 : TextConst 'ENU=CUIM000001;ENG=CUIM000001';
      eVendorImportCode@1000000017 : TextConst 'ENU=VEND IMP;ENG=VEND IMP';
      eVendorImportDescription@1000000016 : TextConst 'ENU=Vendor Import;ENG=Vendor Import';
      eVendorImportStartingNo@1000000015 : TextConst 'ENU=VEIM000001;ENG=VEIM000001';
      eItemImportCode@1000000014 : TextConst 'ENU=ITEM IMP;ENG=ITEM IMP';
      eItemImportDescription@1000000013 : TextConst 'ENU=Item Import;ENG=Item Import';
      eItemImportStartingNo@1000000012 : TextConst 'ENU=ITIM000001;ENG=ITIM000001';
      eTableNotSupported@1000000011 : TextConst 'ENU=Table "%1" is not supported by import engine.;ENG=Table "%1" is not supported by import engine.';
      eStockImportCode@1000000010 : TextConst 'ENU=VEND IMP;ENG=VEND IMP';
      eStockImportDescription@1000000009 : TextConst 'ENU=Vendor Import;ENG=Vendor Import';
      eStockImportStartingNo@1000000008 : TextConst 'ENU=VEIM000001;ENG=VEIM000001';
    BEGIN
      //DOC NA2016.14 - Verifying if the setup is there and getting it

      Rec.RESET();
      IF ( NOT (Rec.GET())) THEN
      BEGIN
        Rec.INIT();
        Rec.INSERT(TRUE);
      END;

      IF (Rec."Initial Config. Quest. Tmpl." = '') THEN
      BEGIN
        Rec.VALIDATE("Initial Config. Quest. Tmpl.", tInitialConfigQuestTmpl);
        lModify := TRUE;
      END;

      IF (Rec."Def. Customer Posting Group" = '') THEN
        IF (lCustomerPostingGroup.COUNT() = 1) THEN
        BEGIN
          lCustomerPostingGroup.FINDFIRST();
          Rec.VALIDATE("Def. Customer Posting Group", lCustomerPostingGroup.Code);
          lModify := TRUE;
        END;

      IF (Rec."Def. Vendor Posting Group" = '') THEN
        IF (lVendorPostingGroup.COUNT() = 1) THEN
        BEGIN
          lVendorPostingGroup.FINDFIRST();
          Rec.VALIDATE("Def. Vendor Posting Group", lVendorPostingGroup.Code);
          lModify := TRUE;
        END;

      FindItemJournal(lModify);
      FindWarehouseJournal(lModify);
      FindGeneralJournal(lGenJournalTemplate.Type::Sales, Rec."Customer Jnl. Template Name", Rec."Customer Jnl. Batch Name", lModify);
      FindGeneralJournal(lGenJournalTemplate.Type::Purchases, Rec."Vendor Jnl. Template Name", Rec."Vendor Jnl. Batch Name", lModify);

      IF (Rec."Def. Gen. Prod. Posting Group" = '') THEN
        IF (lGenProductPostingGroup.COUNT() = 1) THEN
        BEGIN
          lGenProductPostingGroup.FINDFIRST();
          Rec.VALIDATE("Def. Gen. Prod. Posting Group", lGenProductPostingGroup.Code);
          lModify := TRUE;
        END;

      IF (Rec."Def. VAT Prod. Posting Group" = '') THEN
        IF (lVatProductPostingGroup.COUNT() = 1) THEN
        BEGIN
          lVatProductPostingGroup.FINDFIRST();
          Rec.VALIDATE("Def. VAT Prod. Posting Group", lVatProductPostingGroup.Code);
          lModify := TRUE;
        END;

      IF (Rec."Def. Inventory Posting Group" = '') THEN
        IF (lInventoryPostingGroup.COUNT() = 1) THEN
        BEGIN
          lInventoryPostingGroup.FINDFIRST();
          Rec.VALIDATE("Def. Inventory Posting Group", lInventoryPostingGroup.Code);
          lModify := TRUE;
        END;

      IF (Rec."Def. Unit of Measure Code" = '') THEN
        IF (lUnitOfMeasure.COUNT() = 1) THEN
        BEGIN
          lUnitOfMeasure.FINDFIRST();
          Rec.VALIDATE("Def. Unit of Measure Code", lUnitOfMeasure.Code);
          lModify := TRUE;
        END;

      VerifyNoSeries(Rec."Customer Import Nos.", eCustomerImportCode, eCustomerImportDescription, eCustomerImportStartingNo, lModify);
      VerifyNoSeries(Rec."Vendor Import Nos.", eVendorImportCode, eVendorImportDescription, eVendorImportStartingNo, lModify);
      VerifyNoSeries(Rec."Item Import Nos.", eItemImportCode, eItemImportDescription, eItemImportStartingNo, lModify);
      VerifyNoSeries(Rec."Stock Import Nos.", eStockImportCode, eStockImportDescription, eStockImportStartingNo, lModify);

      IF (lModify) THEN
        Rec.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindItemJournal@1000000001(VAR pModify@1000000000 : Boolean) : Boolean;
    VAR
      lItemJournalTemplate@1000000002 : Record 82;
      lItemJournalBatch@1000000001 : Record 233;
    BEGIN
      //DOC NH2016.14 - Trying to find item journal template and batch
      //  <> pModify: Flag to modify record

      IF (Rec."Item Journal Template Name" = '') THEN
      BEGIN
        lItemJournalTemplate.RESET();
        lItemJournalTemplate.SETRANGE(Type, lItemJournalTemplate.Type::Item);
        lItemJournalTemplate.SETRANGE(Recurring, FALSE);
        IF (lItemJournalTemplate.COUNT() = 1) THEN
        BEGIN
          lItemJournalTemplate.FINDFIRST();
          Rec.VALIDATE("Item Journal Template Name", lItemJournalTemplate.Name);
          pModify := TRUE;
        END;
      END;

      IF (Rec."Item Journal Batch Name" = '') THEN
        IF (Rec."Item Journal Template Name" <> '') THEN
        BEGIN
          lItemJournalBatch.RESET();
          lItemJournalBatch.SETRANGE("Journal Template Name", Rec."Item Journal Template Name");
          IF (lItemJournalBatch.COUNT() = 1) THEN
          BEGIN
            lItemJournalBatch.FINDFIRST();
            Rec.VALIDATE("Item Journal Batch Name", lItemJournalBatch.Name);
            pModify := TRUE;
          END;
        END;
    END;

    LOCAL PROCEDURE FindWarehouseJournal@1000000003(VAR pModify@1000000000 : Boolean);
    VAR
      lWarehouseJournalTemplate@1000000002 : Record 7309;
      lWarehouseJournalBatch@1000000001 : Record 7310;
    BEGIN
      //DOC NH2016.14 - Trying to find warehouse journal template and batch
      //  <> pModify: Flag to modify record

      IF (Rec."Whse. Journal Template Name" = '') THEN
      BEGIN
        lWarehouseJournalTemplate.RESET();
        lWarehouseJournalTemplate.SETRANGE(Type, lWarehouseJournalTemplate.Type::Item);
        IF (lWarehouseJournalTemplate.COUNT() = 1) THEN
        BEGIN
          lWarehouseJournalTemplate.FINDFIRST();
          Rec.VALIDATE("Whse. Journal Template Name", lWarehouseJournalTemplate.Name);
          pModify := TRUE;
        END;
      END;

      IF (Rec."Whse. Journal Batch Name" = '') THEN
        IF (Rec."Whse. Journal Template Name" <> '') THEN
        BEGIN
          lWarehouseJournalBatch.RESET();
          lWarehouseJournalBatch.SETRANGE("Journal Template Name", Rec."Whse. Journal Template Name");
          IF (lWarehouseJournalBatch.COUNT() = 1) THEN
          BEGIN
            lWarehouseJournalBatch.FINDFIRST();
            Rec.VALIDATE("Whse. Journal Batch Name", lWarehouseJournalBatch.Name);
            pModify := TRUE;
          END;
        END;
    END;

    LOCAL PROCEDURE FindGeneralJournal@1000000009(pJournalType@1000000005 : Integer;VAR pJournalTemplateName@1000000003 : Code[10];VAR pJournalBatchName@1000000004 : Code[10];VAR pModify@1000000000 : Boolean) : Boolean;
    VAR
      lGenJournalTemplate@1000000002 : Record 80;
      lGenJournalBatch@1000000001 : Record 232;
    BEGIN
      //DOC NH2016.14 - Trying to find general journal template and batch
      //  -> pJournalType: Journal type
      //  <> pJournalTemplateName: Target journal template name
      //  <> pJournalBatchName: Target journal batch name
      //  <> pModify: Flag to modify record

      IF (pJournalTemplateName = '') THEN
      BEGIN
        lGenJournalTemplate.RESET();
        lGenJournalTemplate.SETRANGE(Type, pJournalType);
        lGenJournalTemplate.SETRANGE(Recurring, FALSE);
        IF (lGenJournalTemplate.COUNT() = 1) THEN
        BEGIN
          lGenJournalTemplate.FINDFIRST();
          pJournalTemplateName := lGenJournalTemplate.Name;
          pModify := TRUE;
        END;
      END;

      IF (pJournalBatchName = '') THEN
        IF (pJournalTemplateName <> '') THEN
        BEGIN
          lGenJournalBatch.RESET();
          lGenJournalBatch.SETRANGE("Journal Template Name", pJournalTemplateName);
          IF (lGenJournalBatch.COUNT() = 1) THEN
          BEGIN
            lGenJournalBatch.FINDFIRST();
            pJournalBatchName := lGenJournalBatch.Name;
            pModify := TRUE;
          END;
        END;
    END;

    LOCAL PROCEDURE VerifyNoSeries@1000000004(VAR pNoSeriesCode@1000000000 : Code[10];pCode@1000000002 : Code[10];pDescription@1000000003 : Text;pStartingNo@1000000004 : Code[20];VAR pModify@1000000006 : Boolean);
    VAR
      lNoSeries@1000000005 : Record 308;
      lNoSeriesToolkit@1000000001 : Codeunit 9062598;
    BEGIN
      //DOC NH2016.14 - Verifying no. series
      //  <> pNoSeriesCode: Source / target no. series
      //  -> pCode: Code (if pNoSeriesCode is empty)
      //  -> pDescription: Description
      //  -> pStartingNo: Starting no.
      //  <> pModify: Flag to modify record

      IF (pNoSeriesCode = '') THEN
      BEGIN
        IF ( NOT (lNoSeries.GET(pCode))) THEN
          lNoSeriesToolkit.CreateNoSeriesAdv(pCode, pDescription, TRUE, FALSE, pStartingNo);
        pNoSeriesCode := pCode;
        pModify := TRUE;
      END;
    END;

    BEGIN
    {
      //DOC NH2016.14 JH 11/03/2016 - "Import Template Format" field added (FlowFilter)
      //DOC NH2016.14 JH 23/03/2016 - New fields, bugfixes
      //DOC NH2016.15 JH 06/05/2016 - CfMD amendments
    }
    END.
  }
}

