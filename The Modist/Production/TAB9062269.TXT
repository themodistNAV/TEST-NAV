OBJECT Table 9062269 File Storage Location
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    CaptionML=[ENU=File Storage Location;
               ENG=File Storage Location];
  }
  FIELDS
  {
    { 1   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=" ,Document Type,Table ID";
                                                                    ENG=" ,Document Type,Table ID"];
                                                   OptionString=[ ,Document Type,Table ID] }
    { 2   ;   ;User ID             ;Code50        ;TableRelation="User Setup"."User ID";
                                                   CaptionML=[ENU=User ID;
                                                              ENG=User ID] }
    { 10  ;   ;Table ID            ;Integer       ;CaptionML=[ENU=Table ID;
                                                              ENG=Table ID];
                                                   BlankZero=Yes }
    { 11  ;   ;Primary Key 1       ;Text50        ;CaptionML=[ENU=Primary Key 1;
                                                              ENG=Primary Key 1] }
    { 12  ;   ;Primary Key 2       ;Text50        ;CaptionML=[ENU=Primary Key 2;
                                                              ENG=Primary Key 2] }
    { 13  ;   ;Primary Key 3       ;Text50        ;CaptionML=[ENU=Primary Key 3;
                                                              ENG=Primary Key 3] }
    { 20  ;   ;Document Type Code  ;Code20        ;CaptionML=[ENU=Document Type Code;
                                                              ENG=Document Type Code] }
    { 50  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 100 ;   ;Storage Type        ;Option        ;CaptionML=[ENU=Storage Type;
                                                              ENG=Storage Type];
                                                   OptionCaptionML=[ENU=BLOB,FilePath;
                                                                    ENG=BLOB,FilePath];
                                                   OptionString=BLOB,FilePath }
    { 110 ;   ;Storage FilePath    ;Text250       ;CaptionML=[ENU=Storage FilePath;
                                                              ENG=Storage FilePath] }
  }
  KEYS
  {
    {    ;Type,User ID,Table ID,Primary Key 1,Document Type Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Logger@1000000000 : Record 9062280;
      FileSystem@1000000002 : Codeunit 9062264;

    PROCEDURE GetLocationText@1000000000() : Text[250];
    VAR
      eUsingStorageLocation@1000000000 : TextConst 'ENU=Using storage location: %1;ENG=Using storage location: %1';
    BEGIN
      Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(eUsingStorageLocation, Description), USERID);

      CASE "Storage Type" OF
        "Storage Type"::BLOB : EXIT('!BLOB');
        "Storage Type"::FilePath : EXIT("Storage FilePath");
      END;

      EXIT(FileSystem.GetTempPath(FALSE));
    END;

    PROCEDURE GetStorageLoc@1000000011(UserID@1000000005 : Code[20];DocumentType@1000000000 : Code[20];TableID@1000000001 : Integer;PrimaryKey1@1000000002 : Text[50]) : Text[250];
    VAR
      StorageLoc@1000000006 : Record 9062269;
      eLookingForStorageLocation@1000000003 : TextConst 'ENU=Looking for storage location based on: user: %1, document type: %2, table: %3, primary key %4;ENG=Looking for storage location based on: user: %1, document type: %2, table: %3, primary key %4';
      eDocTypeUserFound@1000000004 : TextConst 'ENU=Storage location "%1" found based on document type / user;ENG=Storage location "%1" found based on document type / user';
      eDocTypeBlankUserFound@1000000007 : TextConst 'ENU=Storage location "%1" found based on document type / blank user;ENG=Storage location "%1" found based on document type / blank user';
      eTablePrimaryKeyUserFound@1000000008 : TextConst 'ENU=Storage location "%1" found based on table / primary key / user;ENG=Storage location "%1" found based on table / primary key / user';
      eTablePrimaryKeyBlankUserFound@1000000009 : TextConst 'ENU=Storage location "%1" found based on table / primary key / blank user;ENG=Storage location "%1" found based on table / primary key / blank user';
      eTableBlankPrimaryKeyUserFound@1000000010 : TextConst 'ENU=Storage location "%1" found based on table / blank primary key / user;ENG=Storage location "%1" found based on table / blank primary key / user';
      eTableBlankPrimaryKeyBlankUserFound@1000000011 : TextConst 'ENU=Storage location "%1" found based on table / blank primary key / blank user;ENG=Storage location "%1" found based on table / blank primary key / blank user';
      eBlankDocTypeUserFound@1000000012 : TextConst 'ENU=Storage location "%1" found based on blank document type / user;ENG=Storage location "%1" found based on blank document type / user';
      eBlankDocTypeBlankUserFound@1000000013 : TextConst 'ENU=Storage location "%1" found based on blank document type / blank user;ENG=Storage location "%1" found based on blank document type / blank user';
      eCouldNotFind@1000000014 : TextConst 'ENU=Could not store file as no matching Storage Location entry was found;ENG=Could not store file as no matching Storage Location entry was found';
    BEGIN
      Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(eLookingForStorageLocation, UserID, DocumentType, TableID, PrimaryKey1), UserID);

      //Look for DocType First
      //For given user first
      StorageLoc.SETRANGE(Type,StorageLoc.Type::"Document Type");
      StorageLoc.SETRANGE("Document Type Code",DocumentType);
      StorageLoc.SETRANGE("User ID",UserID);
      IF StorageLoc.FINDSET THEN BEGIN
        Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(eDocTypeUserFound, StorageLoc.GetLocationText()), UserID);
        EXIT(StorageLoc.GetLocationText());
      END;

      StorageLoc.RESET;

      //For blank user
      StorageLoc.SETRANGE(Type,StorageLoc.Type::"Document Type");
      StorageLoc.SETRANGE("Document Type Code",DocumentType);
      StorageLoc.SETRANGE("User ID",' ');
      IF StorageLoc.FINDSET THEN BEGIN
        Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(eDocTypeBlankUserFound, StorageLoc.GetLocationText()), UserID);
        EXIT(StorageLoc.GetLocationText());
      END;

      StorageLoc.RESET;

      //Look for Table and Primary Key 1
      //For given user first
      StorageLoc.SETRANGE(Type,StorageLoc.Type::"Table ID");
      StorageLoc.SETRANGE("Table ID",TableID);
      IF PrimaryKey1 <> '' THEN StorageLoc.SETRANGE("Primary Key 1",PrimaryKey1);
      StorageLoc.SETRANGE("User ID",UserID);
      IF StorageLoc.FINDSET THEN BEGIN
        Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(eTablePrimaryKeyUserFound, StorageLoc.GetLocationText()), UserID);
        EXIT(StorageLoc.GetLocationText());
      END;

      StorageLoc.RESET;

      //For blank user
      StorageLoc.SETRANGE(Type,StorageLoc.Type::"Table ID");
      StorageLoc.SETRANGE("Table ID",TableID);
      IF PrimaryKey1 <> '' THEN StorageLoc.SETRANGE("Primary Key 1",PrimaryKey1);
      StorageLoc.SETRANGE("User ID",' ');
      IF StorageLoc.FINDSET THEN BEGIN
        Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(eTablePrimaryKeyBlankUserFound, StorageLoc.GetLocationText()), UserID);
        EXIT(StorageLoc.GetLocationText());
      END;

      StorageLoc.RESET;

      //Look for Table and Blank Primary Key 1
      //For given user first
      StorageLoc.SETRANGE(Type,StorageLoc.Type::"Table ID");
      StorageLoc.SETRANGE("Table ID",TableID);
      StorageLoc.SETRANGE("Primary Key 1",' ');
      StorageLoc.SETRANGE("User ID",UserID);
      IF StorageLoc.FINDSET THEN BEGIN
        Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(eTableBlankPrimaryKeyUserFound, StorageLoc.GetLocationText()), UserID);
        EXIT(StorageLoc.GetLocationText());
      END;

      StorageLoc.RESET;

      //For blank user
      StorageLoc.SETRANGE(Type,StorageLoc.Type::"Table ID");
      StorageLoc.SETRANGE("Table ID",TableID);
      StorageLoc.SETRANGE("Primary Key 1",' ');
      StorageLoc.SETRANGE("User ID",' ');
      IF StorageLoc.FINDSET THEN BEGIN
        Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(eTableBlankPrimaryKeyBlankUserFound, StorageLoc.GetLocationText()), UserID);
        EXIT(StorageLoc.GetLocationText());
      END;

      StorageLoc.RESET;

      //Look for BlankType
      //For given user first
      StorageLoc.SETRANGE(Type,StorageLoc.Type::" ");
      StorageLoc.SETRANGE("User ID",UserID);
      IF StorageLoc.FINDSET THEN BEGIN
        Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(eBlankDocTypeUserFound, StorageLoc.GetLocationText()), UserID);
        EXIT(StorageLoc.GetLocationText());
      END;

      StorageLoc.RESET;

      //For blank user
      StorageLoc.SETRANGE(Type,StorageLoc.Type::" ");
      StorageLoc.SETRANGE("User ID",' ');
      IF StorageLoc.FINDSET THEN BEGIN
        Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(eBlankDocTypeBlankUserFound, StorageLoc.GetLocationText()), UserID);
        EXIT(StorageLoc.GetLocationText());
      END;

      ERROR(eCouldNotFind);
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 02/09/2012 - Migrated to 2013
      //DOC NA2015.1  PC 24/02/2013 - Changed references to User to 50 char
      //DOC NA2016.10 JH 27/08/2015 - Upgraded to 2016
      //DOC NA2016.10 AZ 02/11/2015 - PrimaryKey1, PrimaryKey2 and PrimaryKey3 length changed to 50 characters
      //DOC NA2016.15 JH 15/04/2016 - CfMD amendments
    }
    END.
  }
}

