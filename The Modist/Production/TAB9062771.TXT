OBJECT Table 9062771 PS Script DVD Resource
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    CaptionML=[ENU=PS Script DVD Resource;
               ENG=PS Script DVD Resource];
  }
  FIELDS
  {
    { 10  ;   ;Script Code         ;Code20        ;TableRelation="PS Script Header";
                                                   CaptionML=[ENU=Script Code;
                                                              ENG=Script Code] }
    { 20  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
    { 30  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                Path := '';
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=File,Directory;
                                                                    ENG=File,Directory];
                                                   OptionString=File,Directory }
    { 40  ;   ;Path                ;Text250       ;CaptionML=[ENU=Path;
                                                              ENG=Path] }
  }
  KEYS
  {
    {    ;Script Code,Line No.                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      FileMgt@9062230 : Codeunit 419;
      AllFilesDescriptionTxt@9062234 : TextConst 'ENU=All Files (*.*)|*.*;ENG=All Files (*.*)|*.*';
      OnlyDVDResource@9062233 : TextConst 'ENU=Only NAV DVD Files Accepted;ENG=Only NAV DVD Files Accepted';
      DVDSourceDirectoryMissing@9062232 : TextConst 'ENU=NAV DVD Source Path missing in parameters list;ENG=NAV DVD Source Path missing in parameters list';
      DVDDestinationDirectoryMissing@9062231 : TextConst 'ENU=Server Temp UNC Path missing in parameter list;ENG=Server Temp UNC Path missing in parameter list';

    PROCEDURE CopyResources@9062229(ScriptCode@9062229 : Code[20];NAVDVDUNCPath@9062230 : Text;DestinationUNCPath@9062231 : Text);
    VAR
      PathHelper@9062232 : DotNet "'mscorlib'.System.IO.Path";
      SourceDirectoryInfo@9062233 : DotNet "'mscorlib'.System.IO.DirectoryInfo";
      DestinationDirectoryInfo@9062234 : DotNet "'mscorlib'.System.IO.DirectoryInfo";
    BEGIN
      SETRANGE("Script Code",ScriptCode);
      IF FINDSET THEN BEGIN
        IF NAVDVDUNCPath = '' THEN
          ERROR(DVDSourceDirectoryMissing);
        IF DestinationUNCPath = '' THEN
          ERROR(DVDDestinationDirectoryMissing);
        DestinationUNCPath := PathHelper.Combine(DestinationUNCPath,'NAVDVD');
        CreateDirectory(DestinationUNCPath);
        REPEAT
          CASE Type OF
            Type::File :
              BEGIN
                CreateDirectoryTree(DestinationUNCPath,PathHelper.GetDirectoryName(Path));
                CopyFile(PathHelper.Combine(NAVDVDUNCPath,Path),PathHelper.Combine(DestinationUNCPath,Path));
              END;
            Type::Directory :
              BEGIN
                CreateDirectoryTree(DestinationUNCPath,Path);
                SourceDirectoryInfo := SourceDirectoryInfo.DirectoryInfo(PathHelper.Combine(NAVDVDUNCPath,Path));
                DestinationDirectoryInfo := DestinationDirectoryInfo.DirectoryInfo(PathHelper.Combine(DestinationUNCPath,Path));
                CopyFilesRecursively(SourceDirectoryInfo,DestinationDirectoryInfo);
              END;
          END;
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE RemoveResources@9062230(DestinationUNCPath@9062229 : Text);
    VAR
      PathHelper@9062230 : DotNet "'mscorlib'.System.IO.Path";
      Directory@9062231 : DotNet "'mscorlib'.System.IO.Directory";
    BEGIN

      DestinationUNCPath := PathHelper.Combine(DestinationUNCPath,'NAVDVD');
      IF Directory.Exists(DestinationUNCPath) THEN
        RemoveDirectory(DestinationUNCPath);
    END;

    LOCAL PROCEDURE CopyFile@9062232(Source@9062229 : Text;Destination@9062230 : Text);
    VAR
      FileHelper@9062231 : DotNet "'mscorlib'.System.IO.File";
    BEGIN

      FileHelper.Copy(Source,Destination,TRUE);
    END;

    LOCAL PROCEDURE CopyFilesRecursively@9062233(SourceDirectoryInfo@9062229 : DotNet "'mscorlib'.System.IO.DirectoryInfo";DestinationDirectoryInfo@9062230 : DotNet "'mscorlib'.System.IO.DirectoryInfo");
    VAR
      DirectoryInfo@9062231 : DotNet "'mscorlib'.System.IO.DirectoryInfo";
      Directories@9062232 : DotNet "'mscorlib'.System.Array";
      FileInfo@9062233 : DotNet "'mscorlib'.System.IO.FileInfo";
      Files@9062234 : DotNet "'mscorlib'.System.Array";
      PathHelper@9062235 : DotNet "'mscorlib'.System.IO.Path";
      Loop@9062236 : Integer;
    BEGIN

      Directories := SourceDirectoryInfo.GetDirectories;
      FOR Loop := 1 TO Directories.Length DO BEGIN
        DirectoryInfo := Directories.GetValue(Loop - 1);
        CopyFilesRecursively(DirectoryInfo,DestinationDirectoryInfo.CreateSubdirectory(DirectoryInfo.Name));
      END;
      Files := SourceDirectoryInfo.GetFiles;
      FOR Loop := 1 TO Files.Length DO BEGIN
        FileInfo := Files.GetValue(Loop - 1);
        FileInfo.CopyTo(PathHelper.Combine(DestinationDirectoryInfo.FullName,FileInfo.Name),TRUE);
      END;
    END;

    LOCAL PROCEDURE RemoveDirectoryRecursively@9062234(SourceDirectoryInfo@9062229 : DotNet "'mscorlib'.System.IO.DirectoryInfo");
    VAR
      DirectoryInfo@9062235 : DotNet "'mscorlib'.System.IO.DirectoryInfo";
      Directories@9062234 : DotNet "'mscorlib'.System.Array";
      FileInfo@9062233 : DotNet "'mscorlib'.System.IO.FileInfo";
      Files@9062232 : DotNet "'mscorlib'.System.Array";
      PathHelper@9062231 : DotNet "'mscorlib'.System.IO.Path";
      Loop@9062230 : Integer;
    BEGIN

      Files := SourceDirectoryInfo.GetFiles;
      FOR Loop := 1 TO Files.Length DO BEGIN
        FileInfo := Files.GetValue(Loop - 1);
        FileInfo.Delete
      END;
      Directories := SourceDirectoryInfo.GetDirectories;
      FOR Loop := 1 TO Directories.Length DO BEGIN
        DirectoryInfo := Directories.GetValue(Loop - 1);
        RemoveDirectoryRecursively(DirectoryInfo);
        DirectoryInfo.Delete(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateDirectory@9062235(DirectoryPath@9062230 : Text);
    VAR
      DirectoryInfo@9062229 : DotNet "'mscorlib'.System.IO.DirectoryInfo";
    BEGIN

      DirectoryInfo := DirectoryInfo.DirectoryInfo(DirectoryPath);
      IF NOT DirectoryInfo.Exists THEN
        DirectoryInfo.Create;
    END;

    LOCAL PROCEDURE RemoveDirectory@9062237(DirectoryPath@9062230 : Text);
    VAR
      DirectoryInfo@9062229 : DotNet "'mscorlib'.System.IO.DirectoryInfo";
    BEGIN

      DirectoryInfo := DirectoryInfo.DirectoryInfo(DirectoryPath);
      RemoveDirectoryRecursively(DirectoryInfo);
      IF DirectoryInfo.Exists THEN
        DirectoryInfo.Delete(TRUE);
    END;

    LOCAL PROCEDURE CreateDirectoryTree@9062238(DestinationRoot@9062229 : Text;DestinationPath@9062230 : Text);
    VAR
      SplitChars@9062231 : DotNet "'mscorlib'.System.Array";
      SplitChar@9062232 : DotNet "'mscorlib'.System.Char";
      PathParts@9062233 : DotNet "'mscorlib'.System.Array";
      String@9062234 : DotNet "'mscorlib'.System.String";
      PathHelper@9062235 : DotNet "'mscorlib'.System.IO.Path";
      Loop@9062236 : Integer;
      BackSlash@9062237 : Char;
    BEGIN
    END;

    LOCAL PROCEDURE GetNAVDVDPath@9062239() NAVDVDPath : Text;
    VAR
      PSVariableStore@9062229 : Codeunit 9062634;
    BEGIN

      NAVDVDPath := PSVariableStore.GetTextVariable('NAVDVD');
      IF NAVDVDPath = '' THEN BEGIN
        PSVariableStore.SetVariable('NAVDVD',NAVDVDPath);
      END;
    END;

    LOCAL PROCEDURE PathValidate@9062240();
    BEGIN

      IF COPYSTR(Path,1,STRLEN(GetNAVDVDPath)) <> GetNAVDVDPath THEN
        ERROR(OnlyDVDResource);
      Path := COPYSTR(Path,STRLEN(GetNAVDVDPath) + 1);
    END;

    LOCAL PROCEDURE PathLookup@9062241(VAR NewPath@9062229 : Text) : Boolean;
    VAR
      PathHelper@9062230 : DotNet "'mscorlib'.System.IO.Path";
    BEGIN

      IF NewPath = '' THEN
        NewPath := GetNAVDVDPath
      ELSE
        NewPath := PathHelper.Combine(GetNAVDVDPath,NewPath);

      CASE Type OF
        Type::File :
          BEGIN
            NewPath := FileMgt.OpenFileDialog(TABLECAPTION,NewPath,AllFilesDescriptionTxt);
            EXIT(NewPath <> '');
          END;
        Type::Directory :
          BEGIN
            NewPath := FileMgt.BrowseForFolderDialog(TABLECAPTION,NewPath,FALSE);
            EXIT(NewPath <> '');
          END;
      END;
    END;

    BEGIN
    {
      //DOC NA2016.10 AP 29/10/2015 - Created
      //DOC NA2016.15 JH 06/05/2016 - CfMD amendments
    }
    END.
  }
}

