OBJECT Report 9062238 Create Demonstration Incidents
{
  OBJECT-PROPERTIES
  {
    Date=04/01/16;
    Time=12:56:28 PM;
    Version List=NH2016.14;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Create Demonstration Incidents;
               ENG=Create Demonstration Incidents];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   //DOC NA2016.12 JH 24/10/2015 - Created
                 END;

    OnPreReport=BEGIN
                  InitialiseInteraction();

                  CheckRequestData();
                  GenerateCompanyContactBuffer();
                  GenerateEmployeeContactBuffer();
                  GenerateDescriptionBuffer();
                  GenerateItemBuffer();
                  GenerateIncidentTypeBuffer();
                  GenerateIncidentSlaBuffer();
                  GenerateIncidentPriorityBuffer();
                  CreateIncidents();

                  FinaliseInteraction();
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               PersonMandatory := TRUE;
               CustomerMandatory := TRUE;
             END;

    }
    CONTROLS
    {
      { 9062230; ;Container ;
                  ContainerType=ContentArea }

      { 9062231;1;Field     ;
                  Name=NoOfIncidentsField;
                  CaptionML=[ENU=No. of Incidents;
                             ENG=No. of Incidents];
                  SourceExpr=NoOfIncidents;
                  MinValue=0;
                  MaxValue=10000 }

      { 9062232;1;Field     ;
                  Name=StartDateField;
                  CaptionML=[ENU=Start Date;
                             ENG=Start Date];
                  SourceExpr=StartDate }

      { 9062233;1;Field     ;
                  Name=EndDateField;
                  CaptionML=[ENU=End Date;
                             ENG=End Date];
                  SourceExpr=EndDate }

      { 1000000000;1;Field  ;
                  Name=PersonMandatoryField;
                  CaptionML=[ENU=Person Mandatory;
                             ENG=Person Mandatory];
                  SourceExpr=PersonMandatory }

      { 1000000001;1;Field  ;
                  Name=CustomerMandatoryField;
                  CaptionML=[ENU=Customer Mandatory;
                             ENG=Customer Mandatory];
                  SourceExpr=CustomerMandatory }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      CompanyContact@1000000004 : Record 5050;
      CompanyContactBuffer@1000000006 : TEMPORARY Record 9062730;
      CompanyContactBufferCount@1000000005 : Integer;
      PersonContact@1000000009 : Record 5050;
      Customer@1000000010 : Record 18;
      ContactBusinessRelation@1000000011 : Record 5054;
      EmployeeContact@1000000021 : Record 5050;
      EmployeeContactBuffer@1000000023 : TEMPORARY Record 9062730;
      EmployeeContactBufferCount@1000000022 : Integer;
      DescriptionBuffer@1000000003 : TEMPORARY Record 9062730;
      DescriptionBufferCount@1000000002 : Integer;
      Item@9062235 : Record 27;
      ItemBuffer@9062234 : TEMPORARY Record 9062730;
      ItemBufferCount@9062236 : Integer;
      Incident@1000000000 : Record 9062305;
      IncidentSla@1000000001 : Record 9062306;
      IncidentSlaBuffer@9062241 : TEMPORARY Record 9062730;
      IncidentSlaBufferCount@9062242 : Integer;
      IncidentType@1000000014 : Record 9062303;
      IncidentTypeBuffer@1000000013 : TEMPORARY Record 9062730;
      IncidentTypeBufferCount@1000000012 : Integer;
      IncidentPriority@1000000017 : Record 9062310;
      IncidentPriorityBuffer@1000000016 : TEMPORARY Record 9062730;
      IncidentPriorityBufferCount@1000000015 : Integer;
      IncidentStatus@1000000020 : Record 9062304;
      NoOfIncidents@9062230 : Integer;
      StartDate@9062231 : Date;
      EndDate@9062232 : Date;
      PersonMandatory@1000000008 : Boolean;
      CustomerMandatory@1000000007 : Boolean;
      DialogManagement@9062243 : Codeunit 9062249;

    LOCAL PROCEDURE CheckRequestData@9062233();
    VAR
      eEmpty@9062233 : TextConst 'ENU=Please provide "%1";ENG=Please provide "%1"';
      eNoOfIncidents@9062232 : TextConst 'ENU=No. of Incidents;ENG=No. of Incidents';
      eStartDate@9062231 : TextConst 'ENU=Start Date;ENG=Start Date';
      eEndDate@9062230 : TextConst 'ENU=End Date;ENG=End Date';
      lDateBuffer@9062234 : Date;
    BEGIN
      IF (NoOfIncidents = 0) THEN
        ERROR(eEmpty, eNoOfIncidents);
      IF (StartDate = 0D) THEN
        ERROR(eEmpty, eStartDate);
      IF (EndDate = 0D) THEN
        ERROR(eEmpty, eEndDate);

      IF (EndDate < StartDate) THEN
      BEGIN
        lDateBuffer := EndDate;
        EndDate := StartDate;
        StartDate := lDateBuffer;
      END;
    END;

    LOCAL PROCEDURE GenerateCompanyContactBuffer@1000000013();
    VAR
      lAddCompanyContact@1000000000 : Boolean;
    BEGIN
      CompanyContactBuffer.RESET();
      CompanyContactBuffer.DELETEALL();
      CompanyContactBufferCount := 0;

      CompanyContact.RESET();
      CompanyContact.SETRANGE(Type, CompanyContact.Type::Company);
      IF (CompanyContact.FINDSET()) THEN
      REPEAT
        lAddCompanyContact := TRUE;
        IF ((lAddCompanyContact) AND (PersonMandatory)) THEN
        BEGIN
          PersonContact.RESET();
          PersonContact.SETCURRENTKEY("Company No.");
          PersonContact.SETRANGE("Company No.", CompanyContact."No.");
          PersonContact.SETRANGE(Type, PersonContact.Type::Person);
          lAddCompanyContact := ( NOT (PersonContact.ISEMPTY()));
        END;
        IF ((lAddCompanyContact) AND (CustomerMandatory)) THEN
        BEGIN
          ContactBusinessRelation.RESET();
          ContactBusinessRelation.SETRANGE("Contact No.", CompanyContact."No.");
          ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
          ContactBusinessRelation.SETFILTER("No.", '<>''''');
          lAddCompanyContact := ( NOT (ContactBusinessRelation.ISEMPTY()));
        END;
        IF (lAddCompanyContact) THEN
        BEGIN
          CompanyContactBufferCount += 1;
          CompanyContactBuffer.INIT();
          CompanyContactBuffer.ID := CompanyContactBufferCount;
          CompanyContactBuffer.Value := CompanyContact."No.";
          CompanyContactBuffer.INSERT();
        END;
      UNTIL (CompanyContact.NEXT() = 0);
    END;

    LOCAL PROCEDURE GenerateEmployeeContactBuffer@1000000000();
    BEGIN
      EmployeeContactBuffer.RESET();
      EmployeeContactBuffer.DELETEALL();
      EmployeeContactBufferCount := 0;

      EmployeeContact.RESET();
      EmployeeContact.SETFILTER(Name, '<>''''');
      EmployeeContact.SETFILTER("E-Mail", '*thenavpeople*');
      IF (EmployeeContact.FINDSET()) THEN
      REPEAT
        EmployeeContactBufferCount += 1;
        EmployeeContactBuffer.INIT();
        EmployeeContactBuffer.ID := EmployeeContactBufferCount;
        EmployeeContactBuffer.Value := EmployeeContact."No.";
        EmployeeContactBuffer.INSERT();
      UNTIL (EmployeeContact.NEXT() = 0);
    END;

    LOCAL PROCEDURE GenerateDescriptionBuffer@1000000004();
    VAR
      eQuery@1000000000 : TextConst 'ENU=Query about %1;ENG=Query about %1';
      eBroken@1000000001 : TextConst 'ENU=%1 is broken;ENG=%1 is broken';
      eIncorrectSpecification@1000000002 : TextConst 'ENU=Incorrect specification of %1;ENG=Incorrect specification of %1';
      eIssue@1000000003 : TextConst 'ENU=Issue with %1;ENG=Issue with %1';
      eNotWorkingAsExpected@1000000004 : TextConst 'ENU=%1 isn''t working as expected;ENG=%1 isn''t working as expected';
      eUpgradeQuotationRequired@1000000005 : TextConst 'ENU=%1 upgrade quotation required;ENG=%1 upgrade quotation required';
    BEGIN
      DescriptionBuffer.RESET();
      DescriptionBuffer.DELETEALL();
      DescriptionBufferCount := 0;

      AddToDescriptionBuffer(eQuery);
      AddToDescriptionBuffer(eBroken);
      AddToDescriptionBuffer(eIncorrectSpecification);
      AddToDescriptionBuffer(eIssue);
      AddToDescriptionBuffer(eNotWorkingAsExpected);
      AddToDescriptionBuffer(eUpgradeQuotationRequired);
    END;

    LOCAL PROCEDURE AddToDescriptionBuffer@1000000007(pDescription@1000000000 : Text);
    BEGIN
      DescriptionBufferCount += 1;
      DescriptionBuffer.ID := DescriptionBufferCount;
      DescriptionBuffer.Value := pDescription;
      DescriptionBuffer.INSERT();
    END;

    LOCAL PROCEDURE GenerateItemBuffer@9062240();
    BEGIN
      ItemBuffer.RESET();
      ItemBuffer.DELETEALL();
      ItemBufferCount := 0;

      Item.RESET();
      IF (Item.FINDSET()) THEN
      REPEAT
        ItemBufferCount += 1;
        ItemBuffer.ID := ItemBufferCount;
        ItemBuffer.Name := Item.Description;
        ItemBuffer.Value := Item."No.";
        ItemBuffer.INSERT();
      UNTIL (Item.NEXT() = 0);
    END;

    LOCAL PROCEDURE GenerateIncidentTypeBuffer@1000000024();
    BEGIN
      IncidentTypeBuffer.RESET();
      IncidentTypeBuffer.DELETEALL();
      IncidentTypeBufferCount := 0;

      IncidentType.RESET();
      IF (IncidentType.FINDSET()) THEN
      REPEAT
        IncidentTypeBufferCount += 1;
        IncidentTypeBuffer.ID := IncidentTypeBufferCount;
        IncidentTypeBuffer.Value := IncidentType.Code;
        IncidentTypeBuffer.INSERT();
      UNTIL (IncidentType.NEXT() = 0);
    END;

    LOCAL PROCEDURE GenerateIncidentSlaBuffer@9062230();
    BEGIN
      IncidentSlaBuffer.RESET();
      IncidentSlaBuffer.DELETEALL();
      IncidentSlaBufferCount := 0;

      IncidentSla.RESET();
      IF (IncidentSla.FINDSET()) THEN
      REPEAT
        IncidentSlaBufferCount += 1;
        IncidentSlaBuffer.ID := IncidentSlaBufferCount;
        IncidentSlaBuffer.Value := IncidentSla.Code;
        IncidentSlaBuffer.INSERT();
      UNTIL (IncidentSla.NEXT() = 0);
    END;

    LOCAL PROCEDURE GenerateIncidentPriorityBuffer@1000000026();
    BEGIN
      IncidentPriorityBuffer.RESET();
      IncidentPriorityBuffer.DELETEALL();
      IncidentPriorityBufferCount := 0;

      IncidentPriority.RESET();
      IF (IncidentPriority.FINDSET()) THEN
      REPEAT
        IncidentPriorityBufferCount += 1;
        IncidentPriorityBuffer.ID := IncidentPriorityBufferCount;
        IncidentPriorityBuffer.Value := IncidentPriority.Code;
        IncidentPriorityBuffer.INSERT();
      UNTIL (IncidentPriority.NEXT() = 0);
    END;

    LOCAL PROCEDURE CreateIncidents@9062236();
    VAR
      lIndex@9062230 : Integer;
      lPeriodLength@9062232 : Integer;
      lDateOffset@9062231 : Integer;
      lTimeOffset@1000000000 : Integer;
      lCreatedByContactNo@1000000001 : Code[20];
      lOwnedByContactNo@1000000003 : Code[20];
      lAssignedToContactNo@1000000002 : Code[20];
    BEGIN
      RANDOMIZE;
      lPeriodLength := (EndDate - StartDate);
      FOR lIndex := 1 TO NoOfIncidents DO
      BEGIN
        DialogManagement.StepCounter(1);

        CompanyContactBuffer.GET(RANDOM(CompanyContactBufferCount));
        FindPerson();
        FindCustomer();
        EmployeeContactBuffer.GET(RANDOM(EmployeeContactBufferCount));
        lCreatedByContactNo := EmployeeContactBuffer.Value;
        EmployeeContactBuffer.GET(RANDOM(EmployeeContactBufferCount));
        lOwnedByContactNo := EmployeeContactBuffer.Value;
        EmployeeContactBuffer.GET(RANDOM(EmployeeContactBufferCount));
        lAssignedToContactNo := EmployeeContactBuffer.Value;
        DescriptionBuffer.GET(RANDOM(DescriptionBufferCount));
        ItemBuffer.GET(RANDOM(ItemBufferCount));
        IF (IncidentTypeBufferCount > 0) THEN
          IncidentTypeBuffer.GET(RANDOM(IncidentTypeBufferCount))
        ELSE
          CLEAR(IncidentTypeBuffer);
        IF ( NOT (IncidentType.GET(IncidentTypeBuffer.Value))) THEN
          CLEAR(IncidentType);
        IF (IncidentSlaBufferCount > 0) THEN
          IncidentSlaBuffer.GET(RANDOM(IncidentSlaBufferCount))
        ELSE
          CLEAR(IncidentSlaBuffer);
        IF (IncidentPriorityBufferCount > 0) THEN
          IncidentPriorityBuffer.GET(RANDOM(IncidentPriorityBufferCount))
        ELSE
          CLEAR(IncidentPriorityBuffer);
        FindIncidentStatus();

        lDateOffset := RANDOM(lPeriodLength);
        lTimeOffset := RANDOM(23) * 60 * 60 * 1000;

        CLEAR(Incident);
        Incident.INIT();
        Incident.INSERT(TRUE);
        Incident.VALIDATE("Incident Date", StartDate + lDateOffset);
        Incident.VALIDATE("Incident Time", 000000T + lTimeOffset);
        Incident.VALIDATE("Company Contact No.", CompanyContactBuffer.Value);
        Incident.VALIDATE("Person Contact No.", PersonContact."No.");
        Incident.VALIDATE("Customer No.", Customer."No.");
        Incident.VALIDATE(Description, STRSUBSTNO(DescriptionBuffer.Value, ItemBuffer.Value));
        Incident.VALIDATE(Type, IncidentTypeBuffer.Value);
        IF (IncidentType.SLA = '') THEN
          Incident.VALIDATE(SLA, IncidentSlaBuffer.Value);
        Incident.VALIDATE(Priority, IncidentPriorityBuffer.Value);
        Incident.VALIDATE(Status, IncidentStatus.Code);
        Incident.VALIDATE("Created By Contact No.", lCreatedByContactNo);
        Incident.VALIDATE("Owned By Contact No.", lOwnedByContactNo);
        Incident.VALIDATE("Assigned To Contact No.", lAssignedToContactNo);
        Incident.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE FindPerson@1000000010();
    VAR
      lCount@1000000000 : Integer;
      lTargetIndex@1000000001 : Integer;
      lIndex@1000000002 : Integer;
    BEGIN
      PersonContact.RESET();
      PersonContact.SETCURRENTKEY("Company No.");
      PersonContact.SETRANGE("Company No.", CompanyContactBuffer.Value);
      PersonContact.SETRANGE(Type, PersonContact.Type::Person);
      lCount := PersonContact.COUNT();
      IF (lCount > 0) THEN
      BEGIN
        lTargetIndex := RANDOM(lCount);
        PersonContact.FINDSET();
        FOR lIndex := 2 TO lTargetIndex DO
          PersonContact.NEXT();
      END
      ELSE
        CLEAR(PersonContact);
    END;

    LOCAL PROCEDURE FindCustomer@1000000011();
    BEGIN
      ContactBusinessRelation.RESET();
      ContactBusinessRelation.SETRANGE("Contact No.", CompanyContact."No.");
      ContactBusinessRelation.SETRANGE("Link to Table", ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETFILTER("No.", '<>''''');
      IF (ContactBusinessRelation.FINDFIRST()) THEN
      BEGIN
        IF ( NOT (Customer.GET(ContactBusinessRelation."No."))) THEN
          CLEAR(Customer);
      END
      ELSE
        CLEAR(Customer);
    END;

    LOCAL PROCEDURE FindIncidentStatus@1000000001();
    VAR
      lCount@1000000000 : Integer;
      lTargetIndex@1000000002 : Integer;
      lIndex@1000000001 : Integer;
    BEGIN
      IncidentStatus.RESET();
      IncidentStatus.SETRANGE(Type, IncidentTypeBuffer.Value);
      IncidentStatus.SETRANGE("Resolves Incident", FALSE);
      IncidentStatus.SETRANGE("Closes Incident", FALSE);
      lCount := IncidentStatus.COUNT();
      IF (lCount > 0) THEN
      BEGIN
        lTargetIndex := RANDOM(lCount);
        IncidentStatus.FINDSET();
        FOR lIndex := 2 TO lTargetIndex DO
          IncidentStatus.NEXT();
      END
      ELSE
        CLEAR(IncidentStatus);
    END;

    LOCAL PROCEDURE InitialiseInteraction@9062235();
    VAR
      eTitle@9062231 : TextConst 'ENU=Creating incidents...;ENG=Creating incidents...';
      eProgressCounter@9062230 : TextConst 'ENU=Progress;ENG=Progress';
    BEGIN
      DialogManagement.Add(eProgressCounter, 10, 1, 30, TRUE, TRUE);
      DialogManagement.Open(eTitle);
      DialogManagement.SetCounterCount(1, NoOfIncidents);
    END;

    LOCAL PROCEDURE FinaliseInteraction@9062237();
    BEGIN
      DialogManagement.Close();
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 27/12/2015 - Modified, new version
    }
    END.
  }
  RDLDATA
  {
  }
}

