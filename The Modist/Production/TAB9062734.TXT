OBJECT Table 9062734 AutoNAV Task
{
  OBJECT-PROPERTIES
  {
    Date=18/11/16;
    Time=[ 3:04:35 PM];
    Modified=Yes;
    Version List=NA2016.16.1;
  }
  PROPERTIES
  {
    DataCaptionFields=Object Type to Run,Object ID to Run,Object Caption to Run;
    OnInsert=BEGIN
               IF (Rec.Priority = 0) THEN
                 Rec.Priority := NewPriority();
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    CaptionML=[ENU=AutoNAV Task;
               ENG=AutoNAV Task];
    LookupPageID=Page9063091;
    DrillDownPageID=Page9063091;
  }
  FIELDS
  {
    { 1   ;   ;AutoNAV Task Queue Code;Code20     ;TableRelation="AutoNAV Task Queue";
                                                   CaptionML=[ENU=AutoNAV Task Queue Code;
                                                              ENG=AutoNAV Task Queue Code] }
    { 2   ;   ;ID                  ;GUID          ;CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 3   ;   ;XML                 ;BLOB          ;CaptionML=[ENU=XML;
                                                              ENG=XML] }
    { 4   ;   ;Last Ready State    ;DateTime      ;CaptionML=[ENU=Last Ready State;
                                                              ENG=Last Ready State];
                                                   Editable=No }
    { 5   ;   ;Expiration Date/Time;DateTime      ;CaptionML=[ENU=Expiration Date/Time;
                                                              ENG=Expiration Date/Time] }
    { 6   ;   ;Earliest Start Date/Time;DateTime  ;CaptionML=[ENU=Earliest Start Date/Time;
                                                              ENG=Earliest Start Date/Time] }
    { 7   ;   ;Object Type to Run  ;Option        ;InitValue=Codeunit;
                                                   CaptionML=[ENU=Object Type to Run;
                                                              ENG=Object Type to Run];
                                                   OptionCaptionML=[ENU=,,,Report,,Codeunit;
                                                                    ENG=,,,Report,,Codeunit];
                                                   OptionString=,,,Report,,Codeunit }
    { 8   ;   ;Object ID to Run    ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=FIELD(Object Type to Run));
                                                   OnValidate=VAR
                                                                Object@1000 : Record 2000000001;
                                                              BEGIN
                                                              END;

                                                   OnLookup=VAR
                                                              NewObjectID@1000 : Integer;
                                                            BEGIN
                                                            END;

                                                   CaptionML=[ENU=Object ID to Run;
                                                              ENG=Object ID to Run] }
    { 9   ;   ;Object Caption to Run;Text250      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=FIELD(Object Type to Run),
                                                                                                                Object ID=FIELD(Object ID to Run)));
                                                   CaptionML=[ENU=Object Caption to Run;
                                                              ENG=Object Caption to Run];
                                                   Editable=No }
    { 10  ;   ;Report Output Type  ;Option        ;OnValidate=VAR
                                                                ReportLayoutSelection@1000 : Record 9651;
                                                                InitServerPrinterTable@1001 : Codeunit 9655;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Report Output Type;
                                                              ENG=Report Output Type];
                                                   OptionCaptionML=[ENU=PDF,Word,Excel,Print,None (Processing only);
                                                                    ENG=PDF,Word,Excel,Print,None (Processing only)];
                                                   OptionString=PDF,Word,Excel,Print,None (Processing only) }
    { 11  ;   ;Maximum No. of Attempts to Run;Integer;
                                                   CaptionML=[ENU=Maximum No. of Attempts to Run;
                                                              ENG=Maximum No. of Attempts to Run] }
    { 13  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=Ready,In Process,Error,On Hold,Finished;
                                                                    ENG=Ready,In Process,Error,On Hold,Finished];
                                                   OptionString=Ready,In Process,Error,On Hold,Finished;
                                                   Editable=No }
    { 14  ;   ;Priority            ;Integer       ;InitValue=1000;
                                                   CaptionML=[ENU=Priority;
                                                              ENG=Priority] }
    { 15  ;   ;Record ID to Process;RecordID      ;CaptionML=[ENU=Record ID to Process;
                                                              ENG=Record ID to Process] }
    { 16  ;   ;Parameter String    ;Text250       ;CaptionML=[ENU=Parameter String;
                                                              ENG=Parameter String] }
    { 17  ;   ;Recurring Job       ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Recurring Job;
                                                              ENG=Recurring Job] }
    { 18  ;   ;No. of Minutes between Runs;Decimal;InitValue=1;
                                                   OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=No. of Minutes between Runs;
                                                              ENG=No. of Minutes between Runs] }
    { 19  ;   ;Run on Mondays      ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Mondays;
                                                              ENG=Run on Mondays] }
    { 20  ;   ;Run on Tuesdays     ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Tuesdays;
                                                              ENG=Run on Tuesdays] }
    { 21  ;   ;Run on Wednesdays   ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Wednesdays;
                                                              ENG=Run on Wednesdays] }
    { 22  ;   ;Run on Thursdays    ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Thursdays;
                                                              ENG=Run on Thursdays] }
    { 23  ;   ;Run on Fridays      ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Fridays;
                                                              ENG=Run on Fridays] }
    { 24  ;   ;Run on Saturdays    ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                SetRecurringField;
                                                              END;

                                                   CaptionML=[ENU=Run on Saturdays;
                                                              ENG=Run on Saturdays] }
    { 25  ;   ;Run on Sundays      ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Run on Sundays;
                                                              ENG=Run on Sundays] }
    { 26  ;   ;Starting Time       ;Time          ;InitValue=12:00:00 AM;
                                                   CaptionML=[ENU=Starting Time;
                                                              ENG=Starting Time] }
    { 27  ;   ;Ending Time         ;Time          ;InitValue=11:59:00 PM;
                                                   CaptionML=[ENU=Ending Time;
                                                              ENG=Ending Time] }
    { 28  ;   ;Reference Starting Time;DateTime   ;CaptionML=[ENU=Reference Starting Time;
                                                              ENG=Reference Starting Time];
                                                   Editable=No }
    { 30  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 32  ;   ;User Session ID     ;Integer       ;CaptionML=[ENU=User Session ID;
                                                              ENG=User Session ID] }
    { 34  ;   ;Error Message       ;Text250       ;CaptionML=[ENU=Error Message;
                                                              ENG=Error Message] }
    { 35  ;   ;Error Message 2     ;Text250       ;CaptionML=[ENU=Error Message 2;
                                                              ENG=Error Message 2] }
    { 36  ;   ;Error Message 3     ;Text250       ;CaptionML=[ENU=Error Message 3;
                                                              ENG=Error Message 3] }
    { 37  ;   ;Error Message 4     ;Text250       ;CaptionML=[ENU=Error Message 4;
                                                              ENG=Error Message 4] }
    { 40  ;   ;User Service Instance ID;Integer   ;CaptionML=[ENU=User Service Instance ID;
                                                              ENG=User Service Instance ID] }
    { 41  ;   ;User Session Started;DateTime      ;CaptionML=[ENU=User Session Started;
                                                              ENG=User Session Started];
                                                   Editable=No }
    { 42  ;   ;Timeout (sec.)      ;Integer       ;CaptionML=[ENU=Timeout (sec.);
                                                              ENG=Timeout (sec.)];
                                                   MinValue=0 }
    { 43  ;   ;Notify On Success   ;Boolean       ;CaptionML=[ENU=Notify On Success;
                                                              ENG=Notify On Success] }
    { 44  ;   ;User Language ID    ;Integer       ;CaptionML=[ENU=User Language ID;
                                                              ENG=User Language ID] }
    { 45  ;   ;Printer Name        ;Text250       ;OnValidate=VAR
                                                                InitServerPrinterTable@1000 : Codeunit 9655;
                                                              BEGIN
                                                              END;

                                                   OnLookup=VAR
                                                              Printer@1001 : Record 2000000039;
                                                              ServerPrinters@1000 : Page 683;
                                                            BEGIN
                                                            END;

                                                   CaptionML=[ENU=Printer Name;
                                                              ENG=Printer Name] }
    { 46  ;   ;Report Request Page Options;Boolean;CaptionML=[ENU=Report Request Page Options;
                                                              ENG=Report Request Page Options] }
    { 47  ;   ;Rerun Delay (sec.)  ;Integer       ;CaptionML=[ENU=Rerun Delay (sec.);
                                                              ENG=Rerun Delay (sec.)];
                                                   MinValue=0;
                                                   MaxValue=3600 }
    { 100 ;   ;No. of Failures for Error;Integer  ;CaptionML=[ENU=No. of Failures for Error;
                                                              ENG=No. of Failures for Error];
                                                   BlankZero=Yes }
    { 101 ;   ;No. of Failures     ;Integer       ;CaptionML=[ENU=No. of Failures;
                                                              ENG=No. of Failures];
                                                   BlankZero=Yes }
    { 102 ;   ;User to Notify on Error;Code50     ;TableRelation="User Setup"."User ID";
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User to Notify on Error;
                                                              ENG=User to Notify on Error] }
    { 103 ;   ;Delay Between Retries;Duration     ;CaptionML=[ENU=Delay Between Retries;
                                                              ENG=Delay Between Retries] }
    { 104 ;   ;Delay Between Resets;Duration      ;CaptionML=[ENU=Delay Between Resets;
                                                              ENG=Delay Between Resets] }
    { 200 ;   ;Maintained          ;Boolean       ;CaptionML=[ENU=Maintained;
                                                              ENG=Maintained] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;AutoNAV Task Queue Code,ID              ;Clustered=Yes }
    {    ;AutoNAV Task Queue Code,Priority,Last Ready State }
    {    ;AutoNAV Task Queue Code,Priority,Status,Expiration Date/Time,Earliest Start Date/Time }
    {    ;Maintained                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      AutoNavTaskLogEntry@1000000007 : Record 9062736;
      AutoNavTaskLogToolkit@1000000000 : Codeunit 9062602;
      TnpToolkit@9062229 : Codeunit 9062230;
      Text001@1000000006 : TextConst 'ENU=There is no error message.;ENG=There is no error message.';
      Text002@1000000005 : TextConst '@@@=%1 is a status value, such as Success or Error.;ENU=You cannot delete an entry that has status %1.;ENG=You cannot delete an entry that has status %1.';
      Text003@1000000004 : TextConst 'ENU=Scheduled for posting on %1.;ENG=Scheduled for posting on %1.';
      NoRecordErr@1000000003 : TextConst 'ENU=No record is associated with the AutoNAV Task.;ENG=No record is associated with the AutoNAV Task.';
      RequestPagesOptionsDeletedMsg@1000000002 : TextConst 'ENU=You have cleared the report parameters. Select the check box in the field to show the report request page again.;ENG=You have cleared the report parameters. Select the check box in the field to show the report request page again.';
      ExpiresBeforeStartErr@1000000001 : TextConst '@@@="%1 = Expiration Date, %2=Start date";ENU=%1 must be later than %2.;ENG=%1 must be later than %2.';
      ManualAction@1000000008 : Boolean;

    PROCEDURE GetErrorMessage@1() : Text;
    BEGIN
      EXIT("Error Message" + "Error Message 2" + "Error Message 3" + "Error Message 4");
    END;

    PROCEDURE SetErrorMessage@2(ErrorText@1000 : Text);
    BEGIN
      "Error Message 2" := '';
      "Error Message 3" := '';
      "Error Message 4" := '';
      "Error Message" := COPYSTR(ErrorText,1,250);
      IF STRLEN(ErrorText) > 250 THEN
        "Error Message 2" := COPYSTR(ErrorText,251,250);
      IF STRLEN(ErrorText) > 500 THEN
        "Error Message 3" := COPYSTR(ErrorText,501,250);
      IF STRLEN(ErrorText) > 750 THEN
        "Error Message 4" := COPYSTR(ErrorText,751,250);
    END;

    PROCEDURE ShowErrorMessage@8();
    VAR
      e@1000 : Text;
    BEGIN
      e := GetErrorMessage;
      IF e = '' THEN
        e := Text001;
      MESSAGE('%1',e);
    END;

    PROCEDURE SetError@7(ErrorText@1000 : Text);
    BEGIN
      LOCKTABLE;
      GET("AutoNAV Task Queue Code", ID);
      SetErrorMessage(ErrorText);
      ClearServiceValues;
      SetStatusValue(Status::Error);
      MODIFY;
    END;

    PROCEDURE SetStatus@3(NewStatus@1000 : Option);
    BEGIN
      LOCKTABLE;
      GET("AutoNAV Task Queue Code", ID);
      ClearServiceValues;
      SetStatusValue(NewStatus);
      MODIFY;
    END;

    PROCEDURE Cancel@4();
    BEGIN
      LOCKTABLE;
      IF GET("AutoNAV Task Queue Code", ID) THEN
        DELETE(TRUE);
    END;

    PROCEDURE Restart@5();
    BEGIN
      LOCKTABLE;
      GET("AutoNAV Task Queue Code", ID);
      SetStatusValue(Status::Ready);
      ClearServiceValues;
      MODIFY;
    END;

    LOCAL PROCEDURE SetDefaultValues@6();
    BEGIN
      IF ISNULLGUID(ID) THEN
        ID := CREATEGUID;
      IF "Last Ready State" = 0DT THEN
        "Last Ready State" := CURRENTDATETIME;
      "User Language ID" := GLOBALLANGUAGE;
    END;

    LOCAL PROCEDURE ClearServiceValues@9();
    BEGIN
      "User Session Started" := 0DT;
      "User Service Instance ID" := 0;
      "User Session ID" := 0;
    END;

    PROCEDURE CleanupAfterExecution@11();
    BEGIN
      IF "Recurring Job" THEN BEGIN
        IF Status <> Status::"On Hold" THEN
          SetStatusValue(Status::Ready);
        ClearServiceValues;
        MODIFY;
      END ELSE
        DELETE;
    END;

    PROCEDURE HandleExecutionError@12();
    VAR
      AutoNavTaskSendNotification@1000 : Codeunit 9062596;
    BEGIN
      SetStatusValue(Status::Error);
      MODIFY;
      COMMIT;
      IF AutoNavTaskSendNotification.RUN(Rec) THEN;
    END;

    PROCEDURE GetTimeout@10() : Integer;
    BEGIN
      IF "Timeout (sec.)" > 0 THEN
        EXIT("Timeout (sec.)");
      EXIT(1000000000);
    END;

    LOCAL PROCEDURE SetRecurringField@13();
    BEGIN
      "Recurring Job" :=
        "Run on Mondays" OR
        "Run on Tuesdays" OR "Run on Wednesdays" OR "Run on Thursdays" OR "Run on Fridays" OR "Run on Saturdays" OR "Run on Sundays";
    END;

    LOCAL PROCEDURE SetStatusValue@14(NewStatus@1000 : Option);
    VAR
      AutoNavTaskQueueDispatcher@1001 : Codeunit 9062591;
      eStatusChanged@1000000000 : TextConst 'ENU=Status has been set to "%1";ENG=Status has been set to "%1"';
    BEGIN
      IF (Status <> Status::Ready) AND (NewStatus = Status::Ready) THEN BEGIN
        "Last Ready State" := CURRENTDATETIME;
        "Earliest Start Date/Time" := AutoNavTaskQueueDispatcher.CalcInitialRunTime(Rec,CURRENTDATETIME);
      END;
      Status := NewStatus;
      IF (Status <> Status::Error) THEN
        SetErrorMessage('');
      Rec."No. of Failures" := 0;
      IF (ManualAction) THEN
        AutoNavTaskLogToolkit.AddEntryForTask(Rec, STRSUBSTNO(eStatusChanged, Rec.Status), AutoNavTaskLogEntry.Status::Information);
    END;

    PROCEDURE ShowStatusMsg@15(AutoNavTaskQueueCode@1000000000 : Code[10];AutoNavTaskId@1000 : GUID);
    VAR
      AutoNavTask@1001 : Record 9062734;
    BEGIN
      IF AutoNavTask.GET(AutoNavTaskQueueCode, AutoNavTaskId) THEN
        CASE AutoNavTask.Status OF
          AutoNavTask.Status::Error:
            MESSAGE(AutoNavTask.GetErrorMessage);
          AutoNavTask.Status::"In Process":
            MESSAGE(FORMAT(AutoNavTask.Status::"In Process"));
          ELSE
            MESSAGE(Text003,AutoNavTask."User Session Started");
        END;
    END;

    PROCEDURE LookupRecordToProcess@16();
    VAR
      RecRef@1002 : RecordRef;
      RecVariant@1001 : Variant;
    BEGIN
      IF ISNULLGUID(ID) THEN
        EXIT;
      IF FORMAT("Record ID to Process") = '' THEN
        ERROR(NoRecordErr);
      RecRef.GET("Record ID to Process");
      RecRef.SETRECFILTER;
      RecVariant := RecRef;
      PAGE.RUN(0,RecVariant);
    END;

    PROCEDURE LookupObjectID@19(VAR NewObjectID@1000 : Integer) : Boolean;
    VAR
      AllObjWithCaption@1002 : Record 2000000058;
      Objects@1001 : Page 358;
    BEGIN
      IF AllObjWithCaption.GET("Object Type to Run","Object ID to Run") THEN;
      AllObjWithCaption.FILTERGROUP(2);
      AllObjWithCaption.SETRANGE("Object Type","Object Type to Run");
      AllObjWithCaption.FILTERGROUP(0);
      Objects.SETRECORD(AllObjWithCaption);
      Objects.SETTABLEVIEW(AllObjWithCaption);
      Objects.LOOKUPMODE := TRUE;
      IF Objects.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Objects.GETRECORD(AllObjWithCaption);
        NewObjectID := AllObjWithCaption."Object ID";
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE LookupDateTime@26(InitDateTime@1000 : DateTime;EarliestDateTime@1001 : DateTime;LatestDateTime@1003 : DateTime) : DateTime;
    VAR
      DateTimeDialog@1004 : Page 684;
      NewDateTime@1002 : DateTime;
    BEGIN
      NewDateTime := InitDateTime;
      IF InitDateTime < EarliestDateTime THEN
        InitDateTime := EarliestDateTime;
      IF (LatestDateTime <> 0DT) AND (InitDateTime > LatestDateTime) THEN
        InitDateTime := LatestDateTime;

      DateTimeDialog.SetDateTime(ROUNDDATETIME(InitDateTime,1000));

      IF DateTimeDialog.RUNMODAL = ACTION::OK THEN
        NewDateTime := DateTimeDialog.GetDateTime;
      EXIT(NewDateTime);
    END;

    LOCAL PROCEDURE CheckStartAndExpirationDateTime@24();
    BEGIN
      IF ("Expiration Date/Time" <> 0DT) AND
         ("Earliest Start Date/Time" <> 0DT) AND
         ("Earliest Start Date/Time" >= "Expiration Date/Time")
      THEN
        ERROR(ExpiresBeforeStartErr,FIELDCAPTION("Expiration Date/Time"),FIELDCAPTION("Earliest Start Date/Time"));
    END;

    PROCEDURE GetReportParameters@17() : Text;
    VAR
      InStr@1000 : InStream;
      Params@1001 : Text;
    BEGIN
      TESTFIELD("Object Type to Run","Object Type to Run"::Report);
      TESTFIELD("Object ID to Run");

      CALCFIELDS(XML);
      IF XML.HASVALUE THEN BEGIN
        XML.CREATEINSTREAM(InStr,TEXTENCODING::UTF8);
        InStr.READ(Params);
      END;

      EXIT(Params);
    END;

    PROCEDURE SetReportParameters@20(Params@1002 : Text);
    VAR
      OutStr@1001 : OutStream;
    BEGIN
      TESTFIELD("Object Type to Run","Object Type to Run"::Report);
      TESTFIELD("Object ID to Run");
      CLEAR(XML);
      IF Params <> '' THEN BEGIN
        "Report Request Page Options" := TRUE;
        XML.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
        OutStr.WRITE(Params);
      END;
      MODIFY;
    END;

    PROCEDURE RunReportRequestPage@18();
    VAR
      Params@1000 : Text;
    BEGIN
      IF "Object Type to Run" <> "Object Type to Run"::Report THEN
        EXIT;
      IF "Object ID to Run" = 0 THEN
        EXIT;

      Params := REPORT.RUNREQUESTPAGE("Object ID to Run",GetReportParameters);

      IF Params <> '' THEN
        SetReportParameters(Params);
    END;

    PROCEDURE SessionExists@22() : Boolean;
    VAR
      ActiveSession@1001 : Record 2000000110;
      SessionEvent@1000 : Record 2000000111;
    BEGIN
      IF "User Session ID" = 0 THEN
        EXIT(FALSE);

      ActiveSession.SETRANGE("Server Instance ID","User Service Instance ID");
      ActiveSession.SETRANGE("Session ID","User Session ID");
      ActiveSession.SETRANGE("Client Type",ActiveSession."Client Type"::Background);
      IF NOT ActiveSession.FINDFIRST THEN
        EXIT(FALSE);

      SessionEvent.SETRANGE("Server Instance ID","User Service Instance ID");
      SessionEvent.SETRANGE("Session ID","User Session ID");
      SessionEvent.SETRANGE("Client Type",SessionEvent."Client Type"::Background);
      SessionEvent.SETFILTER("Event Datetime",'>=%1',ActiveSession."Login Datetime");
      SessionEvent.SETCURRENTKEY("Event Datetime");
      IF SessionEvent.ISEMPTY THEN
        EXIT(FALSE);

      IF SessionEvent.FINDLAST THEN
        EXIT(SessionEvent."Event Type" IN [SessionEvent."Event Type"::Logon,SessionEvent."Event Type"::Start]);
      EXIT(FALSE);
    END;

    PROCEDURE GetStartingDateTime@27(Date@1000 : DateTime) : DateTime;
    BEGIN
      IF "Reference Starting Time" = 0DT THEN
        VALIDATE("Starting Time");
      EXIT(CREATEDATETIME(DT2DATE(Date),DT2TIME("Reference Starting Time")));
    END;

    PROCEDURE GetEndingDateTime@30(Date@1000 : DateTime) : DateTime;
    BEGIN
      IF "Reference Starting Time" = 0DT THEN
        VALIDATE("Starting Time");
      IF "Ending Time" = 0T THEN
        EXIT(CREATEDATETIME(DT2DATE(Date),0T));
      IF "Starting Time" = 0T THEN
        EXIT(CREATEDATETIME(DT2DATE(Date),"Ending Time"));
      EXIT(CREATEDATETIME(DT2DATE(Date),DT2TIME(GetStartingDateTime(Date)) + ("Ending Time" - "Starting Time")));
    END;

    PROCEDURE FindAutoNavTask@23(ObjType@1002 : Option;ObjID@1001 : Integer) : Boolean;
    BEGIN
      RESET;
      SETRANGE("Object Type to Run",ObjType);
      SETRANGE("Object ID to Run",ObjID);
      EXIT(FINDFIRST);
    END;

    LOCAL PROCEDURE NewPriority@1000000001() : Integer;
    VAR
      AutoNavTask@1000000000 : Record 9062734;
    BEGIN
      AutoNavTask.RESET();
      AutoNavTask.SETCURRENTKEY("AutoNAV Task Queue Code", Priority);
      AutoNavTask.SETRANGE("AutoNAV Task Queue Code", Rec."AutoNAV Task Queue Code");
      IF (AutoNavTask.FINDLAST()) THEN
        EXIT(AutoNavTask.Priority + 10)
      ELSE
        EXIT(10);
    END;

    PROCEDURE GetStyle@9062229() : Text;
    BEGIN
      CASE (Rec.Status) OF
        Rec.Status::Ready:
          EXIT('Favorable');
        Rec.Status::"In Process",
        Rec.Status::Finished:
          EXIT('Ambiguous');
        Rec.Status::"On Hold":
          EXIT('Subordinate');
        ELSE
          EXIT('Unfavorable');
      END;
    END;

    PROCEDURE SetManualAction@1000000000(pManualAction@1000000000 : Boolean);
    BEGIN
      ManualAction := pManualAction;
    END;

    BEGIN
    {
      //DOC NA2016.10 JH 01/09/2015 - Created (based on job queues)
      //DOC NA2016.12 JH 17/12/2015 - Bugfixes
      //DOC NA2016.15 JH 06/05/2016 - CfMD amendments
      //DOC NA2016.16.1 PC 17/08/2016 - Change TableRelation of field "User to Notify on Error" to "User Setup"."User ID"
      //DOC NA2016.17 JH 31/10/2016 - "SetStatusValue" logic fixed
    }
    END.
  }
}

