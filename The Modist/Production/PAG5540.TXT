OBJECT Page 5540 Item Availability by Timeline
{
  OBJECT-PROPERTIES
  {
    Date=22/12/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.44365;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Item Availability by Timeline;
               ENG=Item Availability by Timeline];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table5541;
    DataCaptionExpr=PageCaption;
    SourceTableView=SORTING(Due Date)
                    ORDER(Ascending);
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             BlockCurrRecNotifications := FALSE;
             IgnoreChanges := FALSE;
             TemplateNameNewSupply := '';
             WorksheetNameNewSupply := '';
             State := State::" ";
           END;

    OnOpenPage=BEGIN
                 ItemSelected := Item."No." <> '';
               END;

    OnAfterGetRecord=BEGIN
                       Description := TimelineEventDescription;
                       ActionMsg := ActionMessage;
                     END;

    OnQueryClosePage=BEGIN
                       IF NOT (State = State::"Unsaved Changes") THEN
                         EXIT(TRUE);

                       EXIT(CONFIRM(Text003));
                     END;

    OnAfterGetCurrRecord=BEGIN
                           IF (NOT BlockCurrRecNotifications) AND (CurrReferenceNo <> "Reference No.") THEN BEGIN
                             CurrReferenceNo := "Reference No.";
                             CurrPage.Visualization.SelectTransaction("Reference No.");
                           END;
                         END;

    ActionList=ACTIONS
    {
      { 3       ;0   ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 21      ;1   ;Action    ;
                      Name=Delete;
                      ShortCutKey=Ctrl+Delete;
                      CaptionML=[ENU=Delete;
                                 ENG=Delete];
                      Promoted=Yes;
                      Image=Delete;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF NOT CONFIRM(Text009,TRUE) THEN
                                   EXIT;

                                 DeleteSelectedRecords;
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=<Reload>;
                      CaptionML=[ENU=Reload;
                                 ENG=Reload];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Refresh;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 InitAndCreateTimelineEvents;
                               END;
                                }
      { 7       ;1   ;Action    ;
                      Name=<TransferChanges>;
                      CaptionML=[ENU=Save Changes;
                                 ENG=Save Changes];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SuggestLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 TransferChangesToPlanningWksh;
                                 InitAndCreateTimelineEvents;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=Options;
                           ENG=Options];
                GroupType=Group }

    { 30  ;2   ;Field     ;
                Name=<ItemNo>;
                CaptionML=[ENU=Item No.;
                           ENG=Item No.];
                SourceExpr=ItemNo;
                TableRelation=Item;
                Importance=Promoted;
                OnValidate=VAR
                             ItemNo2@1001 : Code[20];
                           BEGIN
                             IF ItemNo <> Item."No." THEN BEGIN
                               ItemNo2 := ItemNo;
                               Item.RESET;
                               Item.GET(ItemNo);
                               IF LocationFilter <> '' THEN
                                 Item.SETFILTER("Location Filter",LocationFilter);
                               ItemSelected := TRUE;
                               InitAndCreateTimelineEvents;
                               VariantFilter := Item."Variant Filter";
                               ItemNo := ItemNo2;
                             END;
                           END;
                            }

    { 35  ;2   ;Field     ;
                Name=<VariantFilter>;
                CaptionML=[ENU=Variant Filter;
                           ENG=Variant Filter];
                SourceExpr=VariantFilter;
                Importance=Promoted;
                OnValidate=VAR
                             VariantFilter2@1001 : Code[250];
                           BEGIN
                             IF VariantFilter <> Item.GETFILTER("Variant Filter") THEN BEGIN
                               CalcItemAvailTimeline.FindVariantWithinFilter(ItemNo,VariantFilter);

                               VariantFilter2 := VariantFilter;
                               Item.SETRANGE("Variant Filter");
                               IF VariantFilter <> '' THEN
                                 Item.SETFILTER("Variant Filter",VariantFilter);
                               InitAndCreateTimelineEvents;
                               VariantFilter := VariantFilter2;
                             END;
                           END;

                OnLookup=VAR
                           ItemVariant@1001 : Record 5401;
                           ItemVariants@1000 : Page 5401;
                         BEGIN
                           ItemVariant.SETRANGE("Item No.",ItemNo);
                           ItemVariants.SETTABLEVIEW(ItemVariant);
                           ItemVariants.LOOKUPMODE := TRUE;
                           IF ItemVariants.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             ItemVariants.GETRECORD(ItemVariant);
                             Text := ItemVariant.Code;
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

    { 4   ;2   ;Field     ;
                Name=<LocationFilter>;
                CaptionML=[ENU=Location Filter;
                           ENG=Location Filter];
                SourceExpr=LocationFilter;
                Importance=Promoted;
                OnValidate=VAR
                             LocationFilter2@1001 : Code[250];
                           BEGIN
                             IF LocationFilter <> Item.GETFILTER("Location Filter") THEN BEGIN
                               CalcItemAvailTimeline.FindLocationWithinFilter(LocationFilter);

                               LocationFilter2 := LocationFilter;
                               Item.SETRANGE("Location Filter");
                               IF LocationFilter <> '' THEN
                                 Item.SETFILTER("Location Filter",LocationFilter);
                               InitAndCreateTimelineEvents;
                               LocationFilter := LocationFilter2;
                             END;
                           END;

                OnLookup=VAR
                           Location@1001 : Record 14;
                           LocationList@1000 : Page 15;
                         BEGIN
                           LocationList.SETTABLEVIEW(Location);
                           LocationList.LOOKUPMODE := TRUE;
                           IF LocationList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             LocationList.GETRECORD(Location);
                             Text := Location.Code;
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

    { 13  ;2   ;Field     ;
                Name=<LastUpdateTime>;
                CaptionML=[ENU=Last Updated;
                           ENG=Last Updated];
                SourceExpr=LastUpdateTime;
                Importance=Promoted;
                Editable=FALSE }

    { 9   ;2   ;Field     ;
                Name=<ForecastName>;
                CaptionML=[ENU=Forecast Name;
                           ENG=Forecast Name];
                SourceExpr=ForecastName;
                TableRelation="Production Forecast Name";
                Importance=Promoted;
                OnValidate=VAR
                             ForecastName2@1001 : Code[10];
                           BEGIN
                             ForecastName2 := ForecastName;
                             IF ForecastName <> '' THEN
                               IncludeBlanketOrders := TRUE;
                             InitAndCreateTimelineEvents;
                             ForecastName := ForecastName2;
                           END;
                            }

    { 16  ;2   ;Field     ;
                Name=<IncludeBlanketOrders>;
                CaptionML=[ENU=Include Blanket Sales Orders;
                           ENG=Include Blanket Sales Orders];
                SourceExpr=IncludeBlanketOrders;
                Importance=Promoted;
                OnValidate=VAR
                             IncludeBlanketOrders2@1001 : Boolean;
                           BEGIN
                             IncludeBlanketOrders2 := IncludeBlanketOrders;
                             InitAndCreateTimelineEvents;
                             IncludeBlanketOrders := IncludeBlanketOrders2;
                           END;
                            }

    { 8   ;1   ;Group     ;
                CaptionML=[ENU=Timeline;
                           ENG=Timeline];
                GroupType=Group }

    { 15  ;2   ;Field     ;
                Name=Visualization;
                Editable=FALSE;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.TimelineVisualization;PublicKeyToken=31bf3856ad364e35] }

    { 10  ;1   ;Group     ;
                Name=changeListGroup;
                CaptionML=[ENU=Event Changes;
                           ENG=Event Changes];
                GroupType=GridLayout }

    { 20  ;2   ;Group     ;
                Name=changeList;
                CaptionML=[ENU=Change List;
                           ENG=Change List];
                GroupType=Repeater }

    { 5   ;3   ;Field     ;
                Name=ActionMessage;
                CaptionML=[ENU=Action Message;
                           ENG=Action Message];
                OptionCaptionML=[ENU=" ,New,Change Qty.,Reschedule,Resched. & Chg. Qty.,Cancel";
                                 ENG=" ,New,Change Qty.,Reschedule,Resched. & Chg. Qty.,Cancel"];
                SourceExpr=ActionMsg;
                Editable=FALSE }

    { 2   ;3   ;Field     ;
                Name=Description;
                CaptionML=[ENU=Description;
                           ENG=Description];
                SourceExpr=Description;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ShowDocument("Reference No.");
                            END;
                             }

    { 17  ;3   ;Field     ;
                SourceExpr="Original Due Date" }

    { 14  ;3   ;Field     ;
                SourceExpr="Due Date";
                OnValidate=BEGIN
                             IF "Due Date" <> xRec."Due Date" THEN BEGIN
                               TESTFIELD("Due Date");
                               CurrPage.Visualization.RescheduleTransaction("Reference No.",CREATEDATETIME("Due Date",TempTimelineEvent.DefaultTime));
                               State := State::"Unsaved Changes";
                             END;
                           END;
                            }

    { 12  ;3   ;Field     ;
                SourceExpr="Original Quantity" }

    { 11  ;3   ;Field     ;
                SourceExpr=Quantity;
                OnValidate=BEGIN
                             IF Quantity <> xRec.Quantity THEN BEGIN
                               CurrPage.Visualization.ChangeTransactionQuantity("Reference No.",Quantity);
                               State := State::"Unsaved Changes";
                             END;
                           END;
                            }

    { 18  ;3   ;Field     ;
                SourceExpr="Reference No.";
                Visible=false }

  }
  CODE
  {
    VAR
      Item@1004 : Record 27;
      TempTimelineEvent@1015 : TEMPORARY Record 5540;
      CalcItemAvailTimeline@1023 : Codeunit 5540;
      ItemNo@1003 : Code[20];
      LocationFilter@1009 : Code[250];
      VariantFilter@1008 : Code[250];
      ForecastName@1005 : Code[10] INDATASET;
      TemplateNameNewSupply@1018 : Code[10];
      WorksheetNameNewSupply@1017 : Code[10];
      Description@1006 : Text[250];
      ActionMsg@1013 : ' ,New,Change Qty.,Reschedule,Resched. & Chg. Qty.,Cancel';
      State@1024 : ' ,Initialized,Unsaved Changes';
      LastUpdateTime@1016 : DateTime;
      IncludeBlanketOrders@1014 : Boolean INDATASET;
      Text001@1022 : TextConst 'ENU=The changes have been saved to the planning or requisition worksheet.;ENG=The changes have been saved to the planning or requisition worksheet.';
      CurrReferenceNo@1057 : Text[200];
      BlockCurrRecNotifications@1007 : Boolean;
      Text002@1012 : TextConst 'ENU=The changes have been saved to the planning or requisition worksheet.\\New supply is saved to worksheet Template Name %1, Batch Name %2, Location Code %3, and Variant Code %4.;ENG=The changes have been saved to the planning or requisition worksheet.\\New supply is saved to worksheet Template Name %1, Batch Name %2, Location Code %3, and Variant Code %4.';
      Text003@1019 : TextConst 'ENU=All unsaved changes will not be saved. Are you sure that you want to close the window?;ENG=All unsaved changes will not be saved. Are you sure that you want to close the window?';
      Text004@1020 : TextConst 'ENU=Show Projected Inventory;ENG=Show Projected Inventory';
      Text005@1021 : TextConst 'ENU=Include Planning Suggestions;ENG=Include Planning Suggestions';
      Text006@1000 : TextConst 'ENU=Workdate;ENG=Workdate';
      Text007@1001 : TextConst 'ENU=Today;ENG=Today';
      IgnoreChanges@1025 : Boolean;
      ItemSelected@1002 : Boolean INDATASET;
      Text008@1010 : TextConst 'ENU=New Supply %1;ENG=New Supply %1';
      Text009@1011 : TextConst 'ENU=Do you want to delete?;ENG=Do you want to delete?';

    PROCEDURE InitAndCreateTimelineEvents@14();
    BEGIN
      InitTimeline;
      CreateTimelineEvents;
      SetScenarioTitles;
      State := State::Initialized;
    END;

    LOCAL PROCEDURE InitTimeline@1();
    VAR
      timeSpan@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeSpan";
    BEGIN
      CurrPage.Visualization.RemoveSpecialDates;
      CurrPage.Visualization.AddSpecialDate(CREATEDATETIME(WORKDATE,TempTimelineEvent.DefaultTime),Text006);
      CurrPage.Visualization.AddSpecialDate(CREATEDATETIME(TODAY,TempTimelineEvent.DefaultTime),Text007);
      CurrPage.Visualization.TransactionPrecision := Decimals(Item."Rounding Precision");
      CurrPage.Visualization.TransactionUnitOfMeasure := Item."Base Unit of Measure";
      CurrPage.Visualization.InitialLevelDateMargin := timeSpan.FromDays(CalcItemAvailTimeline.InitialTimespanDays);
      CurrPage.Visualization.FinalLevelDateMargin := timeSpan.FromDays(CalcItemAvailTimeline.FinalTimespanDays);
    END;

    LOCAL PROCEDURE UpdateItemRequestFields@11(VAR Item@1000 : Record 27);
    BEGIN
      ItemNo := Item."No.";
      LocationFilter := '';
      IF Item.GETFILTER("Location Filter") <> '' THEN
        LocationFilter := Item.GETFILTER("Location Filter");
      VariantFilter := '';
      IF Item.GETFILTER("Variant Filter") <> '' THEN
        VariantFilter := Item.GETFILTER("Variant Filter");
    END;

    LOCAL PROCEDURE PageCaption@5() : Text[250];
    BEGIN
      EXIT(STRSUBSTNO('%1 %2',Item."No.",Item.Description));
    END;

    PROCEDURE SetItem@3(VAR NewItem@1000 : Record 27);
    BEGIN
      Item.COPY(NewItem);
      UpdateItemRequestFields(Item);
    END;

    PROCEDURE SetForecastName@2(NewForcastName@1000 : Code[10]);
    BEGIN
      ForecastName := NewForcastName;
    END;

    PROCEDURE SetWorksheet@8(NewTemplateName@1001 : Code[10];NewWorksheetName@1000 : Code[10]);
    BEGIN
      TemplateNameNewSupply := NewTemplateName;
      WorksheetNameNewSupply := NewWorksheetName;
    END;

    LOCAL PROCEDURE ExportDataToTimeline@19(VAR TimelineEvent@1003 : Record 5540);
    VAR
      transactionTable@1002 : DotNet "'Microsoft.Dynamics.Framework.UI.WinForms.DataVisualization.Timeline, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Framework.UI.WinForms.DataVisualization.TimelineVisualization.DataModel+TransactionDataTable";
      visualizationScenarios@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.TimelineVisualization, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.TimelineVisualization.VisualizationScenarios";
      WithForecast@1001 : Integer;
      WithForecastAndAdjustments@1004 : Integer;
    BEGIN
      TimelineEvent.TransferToTransactionTable(TimelineEvent,transactionTable);

      WithForecast := 2; // Enum value for CoreTransactionsWithForecast check box
      WithForecastAndAdjustments := 4; // Enum value for CoreTransactionsWithForecastAndAdjustments check box
      visualizationScenarios := WithForecast + WithForecastAndAdjustments; // Show the specified check boxes
      CurrPage.Visualization.SetTransactions(transactionTable,visualizationScenarios);
    END;

    LOCAL PROCEDURE ImportChangesFromTimeline@18();
    VAR
      changeTable@1003 : DotNet "'Microsoft.Dynamics.Framework.UI.WinForms.DataVisualization.Timeline, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Framework.UI.WinForms.DataVisualization.TimelineVisualization.DataModel+TransactionChangesDataTable";
    BEGIN
      BlockCurrRecNotifications := TRUE;

      changeTable := CurrPage.Visualization.GetTransactionChanges;
      TransferFromTransactionChangeTable(Rec,changeTable);
      SetCurrentChangeRec(CurrReferenceNo);

      BlockCurrRecNotifications := FALSE;
    END;

    LOCAL PROCEDURE CreateTimelineEvents@17();
    BEGIN
      RESET;
      DELETEALL;
      TempTimelineEvent.DELETEALL;
      Item.SETRANGE("Drop Shipment Filter",FALSE);
      CalcItemAvailTimeline.Initialize(Item,ForecastName,IncludeBlanketOrders,0D,TRUE);
      CalcItemAvailTimeline.CreateTimelineEvents(TempTimelineEvent);
      ExportDataToTimeline(TempTimelineEvent);
      LastUpdateTime := CURRENTDATETIME;
    END;

    LOCAL PROCEDURE DeleteSelectedRecords@10();
    VAR
      TempTimelineEventChange@1001 : TEMPORARY Record 5541;
    BEGIN
      TempTimelineEventChange.COPY(Rec,TRUE);
      CurrPage.SETSELECTIONFILTER(TempTimelineEventChange);
      IF TempTimelineEventChange.FINDSET THEN BEGIN
        IgnoreChanges := TRUE;
        REPEAT
          CurrPage.Visualization.DeleteTransaction(TempTimelineEventChange."Reference No.");
        UNTIL TempTimelineEventChange.NEXT = 0;
        ImportChangesFromTimeline;
        IgnoreChanges := FALSE;
        IF (State = State::"Unsaved Changes") AND (COUNT = 0) THEN
          State := State::Initialized;
      END;
    END;

    LOCAL PROCEDURE ShowDocument@4(RefNo@1001 : Text[255]);
    VAR
      ReferenceNo@1000 : Integer;
    BEGIN
      IF EVALUATE(ReferenceNo,RefNo) THEN BEGIN
        TempTimelineEvent.GET(ReferenceNo);
        CalcItemAvailTimeline.ShowDocument(TempTimelineEvent."Source Document ID");
      END;
    END;

    LOCAL PROCEDURE SetCurrentChangeRec@20(RefNo@1000 : Text[255]);
    BEGIN
      IF ISEMPTY OR (RefNo = '') THEN
        EXIT;

      SETRANGE("Reference No.",RefNo);
      IF FINDFIRST THEN BEGIN
        CurrPage.SETRECORD(Rec);
        CurrPage.UPDATE(FALSE);
      END;
      SETRANGE("Reference No.");
    END;

    LOCAL PROCEDURE TimelineEventDescription@12() : Text[250];
    VAR
      ReferenceNo@1000 : Integer;
    BEGIN
      IF NewSupply THEN
        EXIT(STRSUBSTNO(Text008,FORMAT("Due Date")));

      IF EVALUATE(ReferenceNo,"Reference No.") THEN
        IF TempTimelineEvent.GET(ReferenceNo) THEN
          EXIT(TempTimelineEvent.Description);

      EXIT("Reference No.");
    END;

    LOCAL PROCEDURE SetScenarioTitles@6();
    VAR
      visualizationScenarios@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.TimelineVisualization, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.TimelineVisualization.VisualizationScenarios";
    BEGIN
      CurrPage.Visualization.SetScenarioTitle(visualizationScenarios.CoreTransactionsWithForecast,Text004);
      CurrPage.Visualization.SetScenarioTitle(visualizationScenarios.CoreTransactionsWithForecastAndAdjustments,Text005);
    END;

    LOCAL PROCEDURE TransferChangesToPlanningWksh@7();
    VAR
      LocationCodeNewSupply@1002 : Code[10];
      VariantCodeNewSupply@1001 : Code[10];
      NewSupplyTransfer@1000 : Boolean;
    BEGIN
      NewSupplyTransfer :=
        CalcItemAvailTimeline.TransferChangesToPlanningWksh(
          Rec,ItemNo,LocationFilter,VariantFilter,TemplateNameNewSupply,WorksheetNameNewSupply);

      IF NOT NewSupplyTransfer THEN
        MESSAGE(Text001)
      ELSE BEGIN
        IF LocationCodeNewSupply = '' THEN
          LocationCodeNewSupply := CalcItemAvailTimeline.BlankValue;
        IF VariantCodeNewSupply = '' THEN
          VariantCodeNewSupply := CalcItemAvailTimeline.BlankValue;
        MESSAGE(Text002,TemplateNameNewSupply,WorksheetNameNewSupply,LocationCodeNewSupply,VariantCodeNewSupply)
      END;
    END;

    LOCAL PROCEDURE Decimals@29(Precision@1000 : Decimal) Decimals : Integer;
    BEGIN
      IF (Precision <= 0) OR (Precision > 1) THEN
        EXIT(DefaultPrecision);

      Decimals := 0;

      WHILE (Decimals <= MaxPrecision) AND (ROUND(Precision,1,'>') > Precision) DO BEGIN
        Decimals += 1;
        Precision *= 10;
      END;

      EXIT(Decimals);
    END;

    LOCAL PROCEDURE DefaultPrecision@35() : Integer;
    BEGIN
      EXIT(5);
    END;

    LOCAL PROCEDURE MaxPrecision@39() : Integer;
    BEGIN
      EXIT(5);
    END;

    EVENT Visualization@-5::TransactionActivated@30(refNo@1000 : Text);
    BEGIN
      ShowDocument(refNo);
    END;

    EVENT Visualization@-5::SelectedTransactionChanged@31(refNo@1000 : Text);
    BEGIN
      SetCurrentChangeRec(refNo);
    END;

    EVENT Visualization@-5::TransactionValueChanged@32(refNo@1000 : Text);
    BEGIN
      IF IgnoreChanges THEN
        EXIT;

      IF refNo <> '' THEN BEGIN // Specific Transaction Value Changed
        State := State::"Unsaved Changes";
        IF NewSupply THEN
          CurrReferenceNo := COPYSTR(refNo,1,MAXSTRLEN("Reference No."));
      END;

      ImportChangesFromTimeline;
    END;

    EVENT Visualization@-5::AddInReady@33();
    BEGIN
      IF ItemSelected THEN
        InitAndCreateTimelineEvents;
    END;

    BEGIN
    END.
  }
}

