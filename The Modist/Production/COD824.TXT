OBJECT Codeunit 824 DO Encryption Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      KeyNotFoundError@1001 : TextConst 'ENU=Encryption key was not found.;ENG=Encryption key was not found.';
      KeyFilePath@1000 : Text;
      DefaultKeyFileNameTok@1002 : TextConst '@@@={Locked};ENU=ProviderKey%1.key;ENG=ProviderKey%1.key';

    PROCEDURE Encrypt@1(Input@1000 : Text[1024]) : Text[1024];
    VAR
      Encrypter@1001 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider";
    BEGIN
      CreateEncrypter(Encrypter);
      IF NOT Encrypter.KeyExists THEN
        ERROR(KeyNotFoundError);
      EXIT(Encrypter.Encrypt(Input));
    END;

    PROCEDURE Decrypt@2(Input@1000 : Text[1024]) : Text[1024];
    VAR
      Decrypter@1001 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider";
    BEGIN
      CreateEncrypter(Decrypter);
      IF NOT Decrypter.KeyExists THEN
        ERROR(KeyNotFoundError);
      EXIT(Decrypter.Decrypt(Input));
    END;

    PROCEDURE Import@4(Filename@1001 : Text;PasswordText@1002 : Text);
    VAR
      Encrypter@1000 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider";
    BEGIN
      CreateEncrypter(Encrypter);
      Encrypter.ImportKey(Filename,PasswordText);
    END;

    PROCEDURE Export@5(Filename@1000 : Text;PasswordText@1002 : Text);
    VAR
      Encrypter@1001 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider";
    BEGIN
      CreateEncrypter(Encrypter);
      IF NOT Encrypter.KeyExists THEN
        ERROR(KeyNotFoundError);

      Encrypter.ExportKey(Filename,PasswordText);
    END;

    PROCEDURE HasKey@8() : Boolean;
    VAR
      Encrypter@1000 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider";
    BEGIN
      CreateEncrypter(Encrypter);
      EXIT(Encrypter.KeyExists);
    END;

    PROCEDURE CreateKey@6();
    VAR
      Encrypter@1000 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider";
    BEGIN
      CreateEncrypter(Encrypter);
      Encrypter.CreateKey;
    END;

    PROCEDURE DeleteKey@7();
    VAR
      Encrypter@1000 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider";
    BEGIN
      CreateEncrypter(Encrypter);
      Encrypter.DeleteKey;
    END;

    PROCEDURE SetKeyFilePath@12(NewKeyFilePath@1000 : Text);
    BEGIN
      KeyFilePath := NewKeyFilePath;
    END;

    LOCAL PROCEDURE CreateEncrypter@3(VAR Encrypter@1000 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.IEncryptionProvider");
    VAR
      NewProvider@1001 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Encryption.RSAMachineKeyProvider";
    BEGIN
      IF KeyFilePath <> '' THEN
        NewProvider := NewProvider.RSAMachineKeyProvider(KeyFilePath)
      ELSE
        IF TENANTID <> 'default' THEN
          NewProvider := NewProvider.RSAMachineKeyProvider(STRSUBSTNO(DefaultKeyFileNameTok,TENANTID))
        ELSE
          NewProvider := NewProvider.RSAMachineKeyProvider();
      Encrypter := NewProvider;
    END;

    BEGIN
    END.
  }
}

