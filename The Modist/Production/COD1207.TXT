OBJECT Codeunit 1207 Pmt Export Mgt Vend Ledg Entry
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExportAgainQst@1002 : TextConst 'ENU=One or more of the selected lines has already been exported. Do you want to export it again?;ENG=One or more of the selected lines has already been exported. Do you want to export it again?';
      ProgressMsg@1001 : TextConst 'ENU=Processing line no. #1######.;ENG=Processing line no. #1######.';
      PaymentExportMgt@1003 : Codeunit 1210;

    PROCEDURE ExportVendorPaymentFileYN@23(VAR VendorLedgerEntry@1000 : Record 25);
    BEGIN
      IF IsVendorLedgerEntryExported(VendorLedgerEntry) OR IsAppliedToVendorPaymentExported(VendorLedgerEntry) THEN
        IF NOT CONFIRM(ExportAgainQst) THEN
          EXIT;
      ExportVendorPaymentFile(VendorLedgerEntry);
    END;

    LOCAL PROCEDURE IsVendorLedgerEntryExported@26(VAR VendorLedgerEntry@1000 : Record 25) : Boolean;
    VAR
      VendorLedgerEntry2@1001 : Record 25;
    BEGIN
      // In case of selecting more than one line on the page.
      IF VendorLedgerEntry.MARKEDONLY THEN
        WITH VendorLedgerEntry2 DO BEGIN
          MARKEDONLY(TRUE);
          SETRANGE("Exported to Payment File",TRUE);
          EXIT(NOT ISEMPTY);
        END;

      // In case of selecting one line on the page or passing a variable directly.
      IF VendorLedgerEntry.HASFILTER THEN
        WITH VendorLedgerEntry2 DO BEGIN
          COPYFILTERS(VendorLedgerEntry);
          SETRANGE("Exported to Payment File",TRUE);
          EXIT(NOT ISEMPTY);
        END;

      // The case of a record not being passed via the user interface is not supported.
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsAppliedToVendorPaymentExported@32(VAR VendorLedgerEntry@1000 : Record 25) : Boolean;
    VAR
      AppliedToVendLedgerEntry@1002 : Record 25;
      ExportVendLedgerEntry@1001 : Record 25;
    BEGIN
      CASE TRUE OF
        VendorLedgerEntry.MARKEDONLY:
          ExportVendLedgerEntry.MARKEDONLY(TRUE);
        VendorLedgerEntry.HASFILTER:
          BEGIN
            ExportVendLedgerEntry.COPYFILTERS(VendorLedgerEntry);
            ExportVendLedgerEntry.FINDSET;
          END;
        ELSE
          ExportVendLedgerEntry.COPY(VendorLedgerEntry);
      END;

      AppliedToVendLedgerEntry.SETRANGE("Exported to Payment File",TRUE);
      REPEAT
        AppliedToVendLedgerEntry.SETRANGE("Closed by Entry No.",ExportVendLedgerEntry."Entry No.");
        IF NOT AppliedToVendLedgerEntry.ISEMPTY THEN
          EXIT(TRUE);
      UNTIL ExportVendLedgerEntry.NEXT = 0;

      EXIT(FALSE);
    END;

    PROCEDURE ExportVendorPaymentFile@115(VAR VendorLedgerEntry@1000 : Record 25);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Pmt. Export Vend. Ledger Check",VendorLedgerEntry);
      ExportVendLedgerEntry(VendorLedgerEntry);
      SetExportFlagOnVendorLedgerEntries(VendorLedgerEntry);
    END;

    PROCEDURE ExportVendLedgerEntry@17(VAR VendorLedgerEntry@1000 : Record 25);
    VAR
      VendorLedgerEntry2@1004 : Record 25;
      DataExch@1001 : Record 1220;
      Window@1003 : Dialog;
      LineNo@1002 : Integer;
    BEGIN
      VendorLedgerEntry2.COPY(VendorLedgerEntry);
      PaymentExportMgt.CreateDataExch(DataExch,VendorLedgerEntry2."Bal. Account No.");
      Window.OPEN(ProgressMsg);
      REPEAT
        LineNo += 1;
        Window.UPDATE(1,LineNo);
        CreateVendLedgerDataExchLine(DataExch."Entry No.",VendorLedgerEntry2,LineNo);
      UNTIL VendorLedgerEntry2.NEXT = 0;
      Window.CLOSE;
      PaymentExportMgt.ExportToFile(DataExch."Entry No.")
    END;

    LOCAL PROCEDURE CreateVendLedgerDataExchLine@18(DataExchEntryNo@1000 : Integer;VendorLedgerEntry@1001 : Record 25;LineNo@1002 : Integer);
    VAR
      PaymentExportData@1003 : Record 1226;
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        PreparePaymentExportDataVLE(PaymentExportData,VendorLedgerEntry,DataExchEntryNo,LineNo);
        PaymentExportMgt.CreatePaymentLines(PaymentExportData);
      END;
    END;

    PROCEDURE PreparePaymentExportDataVLE@13(VAR TempPaymentExportData@1000 : TEMPORARY Record 1226;VendorLedgerEntry@1001 : Record 25;DataExchEntryNo@1003 : Integer;LineNo@1007 : Integer);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      Vendor@1006 : Record 23;
      VendorBankAccount@1008 : Record 288;
      PaymentMethod@1009 : Record 289;
      BankAccount@1010 : Record 270;
      BankExportImportSetup@1004 : Record 1200;
    BEGIN
      GeneralLedgerSetup.GET;
      Vendor.GET(VendorLedgerEntry."Vendor No.");

      WITH TempPaymentExportData DO BEGIN
        BankAccount.GET(VendorLedgerEntry."Bal. Account No.");
        BankAccount.GetBankExportImportSetup(BankExportImportSetup);
        SetPreserveNonLatinCharacters(BankExportImportSetup."Preserve Non-Latin Characters");

        INIT;
        "Data Exch Entry No." := DataExchEntryNo;
        "Sender Bank Account Code" := VendorLedgerEntry."Bal. Account No.";

        IF VendorBankAccount.GET(VendorLedgerEntry."Vendor No.",VendorLedgerEntry."Recipient Bank Account") THEN BEGIN
          IF BankAccount."Country/Region Code" = VendorBankAccount."Country/Region Code" THEN BEGIN
            VendorLedgerEntry.CALCFIELDS("Amount (LCY)");
            Amount := VendorLedgerEntry."Amount (LCY)";
            "Currency Code" := GeneralLedgerSetup."LCY Code";
          END ELSE BEGIN
            VendorLedgerEntry.CALCFIELDS(Amount);
            Amount := VendorLedgerEntry.Amount;
            "Currency Code" := GeneralLedgerSetup.GetCurrencyCode(VendorLedgerEntry."Currency Code");
          END;

          "Recipient Bank Acc. No." :=
            COPYSTR(VendorBankAccount.GetBankAccountNo,1,MAXSTRLEN("Recipient Bank Acc. No."));
          "Recipient Reg. No." := VendorBankAccount."Bank Branch No.";
          "Recipient Acc. No." := VendorBankAccount."Bank Account No.";
          "Recipient Bank Country/Region" := VendorBankAccount."Country/Region Code";
          "Recipient Bank Name" := COPYSTR(VendorBankAccount.Name,1,35);
          "Recipient Bank Address" := COPYSTR(VendorBankAccount.Address,1,35);
          "Recipient Bank City" := COPYSTR(VendorBankAccount."Post Code" + VendorBankAccount.City,1,35);
          "Recipient Bank BIC" := VendorBankAccount."SWIFT Code";
        END ELSE
          IF VendorLedgerEntry."Creditor No." <> '' THEN BEGIN
            VendorLedgerEntry.CALCFIELDS("Amount (LCY)");
            Amount := VendorLedgerEntry."Amount (LCY)";
            "Currency Code" := GeneralLedgerSetup."LCY Code";
          END;

        "Recipient Name" := COPYSTR(Vendor.Name,1,35);
        "Recipient Address" := COPYSTR(Vendor.Address,1,35);
        "Recipient City" := COPYSTR(Vendor."Post Code" + ' ' + Vendor.City,1,35);
        "Transfer Date" := VendorLedgerEntry."Posting Date";
        "Message to Recipient 1" := COPYSTR(VendorLedgerEntry."Message to Recipient",1,35);
        "Message to Recipient 2" := COPYSTR(VendorLedgerEntry."Message to Recipient",36,70);
        "Document No." := VendorLedgerEntry."Document No.";
        "Applies-to Ext. Doc. No." := VendorLedgerEntry."Applies-to Ext. Doc. No.";
        "Short Advice" := VendorLedgerEntry."Applies-to Ext. Doc. No.";
        "Line No." := LineNo;
        "Payment Reference" := VendorLedgerEntry."Payment Reference";
        IF PaymentMethod.GET(VendorLedgerEntry."Payment Method Code") THEN
          "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
        "Recipient Creditor No." := VendorLedgerEntry."Creditor No.";
        INSERT(TRUE);
      END;
    END;

    PROCEDURE EnableExportToServerTempFile@27(SilentServerMode@1000 : Boolean;ServerFileExtension@1001 : Text[3]);
    BEGIN
      PaymentExportMgt.EnableExportToServerTempFile(SilentServerMode,ServerFileExtension);
    END;

    PROCEDURE GetServerTempFileName@29() : Text[1024];
    BEGIN
      EXIT(PaymentExportMgt.GetServerTempFileName);
    END;

    LOCAL PROCEDURE SetExportFlagOnVendorLedgerEntries@41(VAR VendorLedgerEntry@1000 : Record 25);
    VAR
      VendorLedgerEntry2@1001 : Record 25;
    BEGIN
      WITH VendorLedgerEntry2 DO BEGIN
        COPY(VendorLedgerEntry);
        REPEAT
          VALIDATE("Exported to Payment File",TRUE);
          CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendorLedgerEntry2);
        UNTIL NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

