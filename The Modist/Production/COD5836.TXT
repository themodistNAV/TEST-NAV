OBJECT Codeunit 5836 Cost Calculation Management
{
  OBJECT-PROPERTIES
  {
    Date=23/03/16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.45480;
  }
  PROPERTIES
  {
    Permissions=TableData 32=r,
                TableData 5802=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExpOvhdCost@1001 : Decimal;

    PROCEDURE ResourceCostPerUnit@44(No@1005 : Code[20];VAR DirUnitCost@1004 : Decimal;VAR IndirCostPct@1003 : Decimal;VAR OvhdRate@1002 : Decimal;VAR UnitCost@1001 : Decimal);
    VAR
      Resource@1000 : Record 156;
    BEGIN
      Resource.GET(No);
      DirUnitCost := Resource."Direct Unit Cost";
      OvhdRate := 0;
      IndirCostPct := Resource."Indirect Cost %";
      UnitCost := Resource."Unit Cost";
    END;

    PROCEDURE RoutingCostPerUnit@7(Type@1000 : 'Work Center,Machine Center, ';No@1001 : Code[20];VAR DirUnitCost@1002 : Decimal;VAR IndirCostPct@1003 : Decimal;VAR OvhdRate@1004 : Decimal;VAR UnitCost@1005 : Decimal;VAR UnitCostCalculation@1006 : 'Time,Unit');
    VAR
      WorkCenter@1007 : Record 99000754;
      MachineCenter@1008 : Record 99000758;
    BEGIN
      CASE Type OF
        Type::"Work Center":
          WorkCenter.GET(No);
        Type::"Machine Center":
          MachineCenter.GET(No);
      END;
      RoutingCostPerUnit2(Type,DirUnitCost,IndirCostPct,OvhdRate,UnitCost,UnitCostCalculation,WorkCenter,MachineCenter);
    END;

    PROCEDURE RoutingCostPerUnit2@20(Type@1000 : 'Work Center,Machine Center, ';VAR DirUnitCost@1002 : Decimal;VAR IndirCostPct@1003 : Decimal;VAR OvhdRate@1004 : Decimal;VAR UnitCost@1005 : Decimal;VAR UnitCostCalculation@1006 : 'Time,Unit';WorkCenter@1009 : Record 99000754;MachineCenter@1010 : Record 99000758);
    BEGIN
      UnitCostCalculation := UnitCostCalculation::Time;
      CASE Type OF
        Type::"Work Center":
          BEGIN
            UnitCostCalculation := WorkCenter."Unit Cost Calculation";
            IndirCostPct := WorkCenter."Indirect Cost %";
            OvhdRate := WorkCenter."Overhead Rate";
            IF WorkCenter."Specific Unit Cost" THEN BEGIN
              DirUnitCost := CalcDirUnitCost(UnitCost,OvhdRate,IndirCostPct);
            END ELSE BEGIN
              DirUnitCost := WorkCenter."Direct Unit Cost";
              UnitCost := WorkCenter."Unit Cost";
            END;
          END;
        Type::"Machine Center":
          BEGIN
            MachineCenter.TESTFIELD("Work Center No.");
            DirUnitCost := MachineCenter."Direct Unit Cost";
            OvhdRate := MachineCenter."Overhead Rate";
            IndirCostPct := MachineCenter."Indirect Cost %";
            UnitCost := MachineCenter."Unit Cost";
          END;
      END;
    END;

    PROCEDURE CalcShareOfTotalCapCost@8(ProdOrderLine@1000 : Record 5406;VAR ShareOfTotalCapCost@1002 : Decimal);
    VAR
      Qty@1001 : Decimal;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        SETCURRENTKEY(Status,"Prod. Order No.","Routing No.","Routing Reference No.");
        SETRANGE(Status,Status);
        SETRANGE("Prod. Order No.","Prod. Order No.");
        SETRANGE("Routing Reference No.","Routing Reference No.");
        SETRANGE("Routing No.","Routing No.");
        ShareOfTotalCapCost := 0;
        IF Status = Status::Finished THEN BEGIN
          Qty := "Finished Quantity";
          CALCSUMS("Finished Quantity");
          IF "Finished Quantity" <> 0 THEN
            ShareOfTotalCapCost := Qty / "Finished Quantity";
        END ELSE BEGIN
          Qty := Quantity;
          CALCSUMS(Quantity);
          IF Quantity <> 0 THEN
            ShareOfTotalCapCost := Qty / Quantity;
        END;
      END;
    END;

    PROCEDURE CalcProdOrderLineStdCost@16(ProdOrderLine@1000 : Record 5406;CurrencyFactor@1007 : Decimal;RndgPrec@1006 : Decimal;VAR StdMatCost@1005 : Decimal;VAR StdCapDirCost@1004 : Decimal;VAR StdSubDirCost@1008 : Decimal;VAR StdCapOvhdCost@1003 : Decimal;VAR StdMfgOvhdCost@1002 : Decimal);
    VAR
      Item@1001 : Record 27;
      InvtAdjmtEntryOrder@1010 : Record 5896;
      QtyBase@1009 : Decimal;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        IF InvtAdjmtEntryOrder.GET(InvtAdjmtEntryOrder."Order Type"::Production,"Prod. Order No.","Line No.") AND
           InvtAdjmtEntryOrder."Completely Invoiced"
        THEN BEGIN
          Item."Single-Level Material Cost" := InvtAdjmtEntryOrder."Single-Level Material Cost";
          Item."Single-Level Capacity Cost" := InvtAdjmtEntryOrder."Single-Level Capacity Cost";
          Item."Single-Level Subcontrd. Cost" := InvtAdjmtEntryOrder."Single-Level Subcontrd. Cost";
          Item."Single-Level Cap. Ovhd Cost" := InvtAdjmtEntryOrder."Single-Level Cap. Ovhd Cost";
          Item."Single-Level Mfg. Ovhd Cost" := InvtAdjmtEntryOrder."Single-Level Mfg. Ovhd Cost";
          QtyBase := "Finished Qty. (Base)";
        END ELSE BEGIN
          Item.GET("Item No.");
          QtyBase := "Quantity (Base)";
        END;

        StdMatCost := StdMatCost +
          ROUND(QtyBase * Item."Single-Level Material Cost" * CurrencyFactor,RndgPrec);
        StdCapDirCost := StdCapDirCost +
          ROUND(QtyBase * Item."Single-Level Capacity Cost" * CurrencyFactor,RndgPrec);
        StdSubDirCost := StdSubDirCost +
          ROUND(QtyBase * Item."Single-Level Subcontrd. Cost" * CurrencyFactor,RndgPrec);
        StdCapOvhdCost := StdCapOvhdCost +
          ROUND(QtyBase * Item."Single-Level Cap. Ovhd Cost" * CurrencyFactor,RndgPrec);
        StdMfgOvhdCost := StdMfgOvhdCost +
          ROUND(QtyBase * Item."Single-Level Mfg. Ovhd Cost" * CurrencyFactor,RndgPrec);
      END;
    END;

    PROCEDURE CalcProdOrderLineExpCost@15(ProdOrderLine@1001 : Record 5406;ShareOfTotalCapCost@1009 : Decimal;VAR ExpMatCost@1010 : Decimal;VAR ExpCapDirCost@1008 : Decimal;VAR ExpSubDirCost@1007 : Decimal;VAR ExpCapOvhdCost@1006 : Decimal;VAR ExpMfgOvhdCost@1002 : Decimal);
    VAR
      WorkCenter@1005 : Record 99000754;
      ProdOrderComp@1000 : Record 5407;
      ProdOrderRtngLine@1003 : Record 5409;
      ExpOperCost@1004 : Decimal;
      ExpMfgDirCost@1011 : Decimal;
      ExpCapDirCostRtng@1014 : Decimal;
      ExpSubDirCostRtng@1013 : Decimal;
      ExpCapOvhdCostRtng@1012 : Decimal;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No.","Prod. Order Line No.");
        ProdOrderComp.SETRANGE(Status,Status);
        ProdOrderComp.SETRANGE("Prod. Order No.","Prod. Order No.");
        ProdOrderComp.SETRANGE("Prod. Order Line No.","Line No.");
        IF ProdOrderComp.FIND('-') THEN
          REPEAT
            ExpMatCost := ExpMatCost + ProdOrderComp."Cost Amount";
          UNTIL ProdOrderComp.NEXT = 0;

        ProdOrderRtngLine.SETRANGE(Status,Status);
        ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
        ProdOrderRtngLine.SETRANGE("Routing No.","Routing No.");
        ProdOrderRtngLine.SETRANGE("Routing Reference No.","Routing Reference No.");
        IF ProdOrderRtngLine.FIND('-') THEN
          REPEAT
            ExpOperCost :=
              ProdOrderRtngLine."Expected Operation Cost Amt." -
              ProdOrderRtngLine."Expected Capacity Ovhd. Cost";

            IF ProdOrderRtngLine.Type = ProdOrderRtngLine.Type::"Work Center" THEN BEGIN
              IF NOT WorkCenter.GET(ProdOrderRtngLine."No.") THEN
                CLEAR(WorkCenter);
            END ELSE
              CLEAR(WorkCenter);

            IF WorkCenter."Subcontractor No." <> '' THEN
              ExpSubDirCostRtng := ExpSubDirCostRtng + ExpOperCost
            ELSE
              ExpCapDirCostRtng := ExpCapDirCostRtng + ExpOperCost;
            ExpCapOvhdCostRtng := ExpCapOvhdCostRtng + ProdOrderRtngLine."Expected Capacity Ovhd. Cost";
          UNTIL ProdOrderRtngLine.NEXT = 0;

        ExpCapDirCost := ExpCapDirCost + ROUND(ExpCapDirCostRtng * ShareOfTotalCapCost);
        ExpSubDirCost := ExpSubDirCost + ROUND(ExpSubDirCostRtng * ShareOfTotalCapCost);
        ExpCapOvhdCost := ExpCapOvhdCost + ROUND(ExpCapOvhdCostRtng * ShareOfTotalCapCost);
        ExpMfgDirCost := ExpMatCost + ExpCapDirCost + ExpSubDirCost + ExpCapOvhdCost;
        ExpOvhdCost := ExpOvhdCost + "Overhead Rate" * "Quantity (Base)";
        ExpMfgOvhdCost := ExpOvhdCost +
          ROUND(CalcOvhdCost(ExpMfgDirCost,"Indirect Cost %",0,0));
      END;
    END;

    PROCEDURE CalcProdOrderLineActCost@22(ProdOrderLine@1000 : Record 5406;VAR ActMatCost@1018 : Decimal;VAR ActCapDirCost@1007 : Decimal;VAR ActSubDirCost@1020 : Decimal;VAR ActCapOvhdCost@1008 : Decimal;VAR ActMfgOvhdCost@1010 : Decimal;VAR ActMatCostCostACY@1019 : Decimal;VAR ActCapDirCostACY@1016 : Decimal;VAR ActSubDirCostACY@1006 : Decimal;VAR ActCapOvhdCostACY@1015 : Decimal;VAR ActMfgOvhdCostACY@1013 : Decimal);
    VAR
      TempSourceInvtAdjmtEntryOrder@1027 : TEMPORARY Record 5896;
      CalcInvtAdjmtOrder@1026 : Codeunit 5896;
      OutputQty@1003 : Decimal;
    BEGIN
      IF ProdOrderLine.Status < ProdOrderLine.Status::Released THEN BEGIN
        ActMatCost := 0;
        ActCapDirCost := 0;
        ActSubDirCost := 0;
        ActCapOvhdCost := 0;
        ActMfgOvhdCost := 0;
        ActMatCostCostACY := 0;
        ActCapDirCostACY := 0;
        ActCapOvhdCostACY := 0;
        ActSubDirCostACY := 0;
        ActMfgOvhdCostACY := 0;
        EXIT;
      END;

      WITH TempSourceInvtAdjmtEntryOrder DO BEGIN
        SetProdOrderLine(ProdOrderLine);
        OutputQty := CalcInvtAdjmtOrder.CalcOutputQty(TempSourceInvtAdjmtEntryOrder,FALSE);
        CalcInvtAdjmtOrder.CalcActualUsageCosts(TempSourceInvtAdjmtEntryOrder,OutputQty,TempSourceInvtAdjmtEntryOrder);

        ActMatCost += "Single-Level Material Cost";
        ActCapDirCost += "Single-Level Capacity Cost";
        ActSubDirCost += "Single-Level Subcontrd. Cost";
        ActCapOvhdCost += "Single-Level Cap. Ovhd Cost";
        ActMfgOvhdCost += "Single-Level Mfg. Ovhd Cost";
        ActMatCostCostACY += "Single-Lvl Material Cost (ACY)";
        ActCapDirCostACY += "Single-Lvl Capacity Cost (ACY)";
        ActCapOvhdCostACY += "Single-Lvl Cap. Ovhd Cost(ACY)";
        ActSubDirCostACY += "Single-Lvl Subcontrd Cost(ACY)";
        ActMfgOvhdCostACY += "Single-Lvl Mfg. Ovhd Cost(ACY)";
      END;
    END;

    PROCEDURE CalcProdOrderExpCapNeed@17(ProdOrder@1001 : Record 5405;DrillDown@1002 : Boolean) : Decimal;
    VAR
      ProdOrderRtngLine@1003 : Record 5409;
      ProdOrderCapNeed@1000 : Record 5410;
      WorkCenter@1004 : Record 99000754;
      NeededTime@1005 : Decimal;
      ExpectedCapNeed@1006 : Decimal;
    BEGIN
      WITH ProdOrder DO
        IF Status <> Status::Finished THEN BEGIN
          ProdOrderCapNeed.SETRANGE(Status,Status);
          ProdOrderCapNeed.SETRANGE("Prod. Order No.","No.");
          ProdOrderCapNeed.SETFILTER(Type,GETFILTER("Capacity Type Filter"));
          ProdOrderCapNeed.SETFILTER("No.","Capacity No. Filter");
          ProdOrderCapNeed.SETFILTER("Work Center No.","Work Center Filter");
          ProdOrderCapNeed.SETFILTER(Date,GETFILTER("Date Filter"));
          ProdOrderCapNeed.SETRANGE("Requested Only",FALSE);
          IF ProdOrderCapNeed.FINDSET THEN BEGIN
            REPEAT
              IF ProdOrderCapNeed.Type = ProdOrderCapNeed.Type::"Work Center" THEN BEGIN
                IF NOT WorkCenter.GET(ProdOrderCapNeed."No.") THEN
                  CLEAR(WorkCenter);
              END ELSE
                CLEAR(WorkCenter);
              IF WorkCenter."Subcontractor No." = '' THEN BEGIN
                NeededTime += ProdOrderCapNeed."Needed Time (ms)";
                ProdOrderCapNeed.MARK(TRUE);
              END;
            UNTIL ProdOrderCapNeed.NEXT = 0;
            ProdOrderCapNeed.MARKEDONLY(TRUE);
          END;
          IF DrillDown THEN
            PAGE.RUN(0,ProdOrderCapNeed,ProdOrderCapNeed."Needed Time")
          ELSE
            EXIT(NeededTime);
        END ELSE BEGIN
          ProdOrderRtngLine.SETRANGE(Status,Status);
          ProdOrderRtngLine.SETRANGE("Prod. Order No.","No.");
          IF ProdOrderRtngLine.FINDSET THEN BEGIN
            REPEAT
              IF ProdOrderRtngLine.Type = ProdOrderRtngLine.Type::"Work Center" THEN BEGIN
                IF NOT WorkCenter.GET(ProdOrderRtngLine."No.") THEN
                  CLEAR(WorkCenter);
              END ELSE
                CLEAR(WorkCenter);
              IF WorkCenter."Subcontractor No." = '' THEN BEGIN
                ExpectedCapNeed += ProdOrderRtngLine."Expected Capacity Need";
                ProdOrderRtngLine.MARK(TRUE);
              END;
            UNTIL ProdOrderRtngLine.NEXT = 0;
            ProdOrderRtngLine.MARKEDONLY(TRUE);
          END;
          IF DrillDown THEN
            PAGE.RUN(0,ProdOrderRtngLine,ProdOrderRtngLine."Expected Capacity Need")
          ELSE
            EXIT(ExpectedCapNeed);
        END;
    END;

    PROCEDURE CalcProdOrderActTimeUsed@19(ProdOrder@1001 : Record 5405;DrillDown@1002 : Boolean) : Decimal;
    VAR
      CapLedgEntry@1003 : Record 5832;
      WorkCenter@1004 : Record 99000754;
      CalendarMgt@1005 : Codeunit 99000755;
      Qty@1000 : Decimal;
    BEGIN
      WITH CapLedgEntry DO BEGIN
        IF ProdOrder.Status < ProdOrder.Status::Released THEN
          EXIT(0);

        SETCURRENTKEY("Order Type","Order No.");
        SETRANGE("Order Type","Order Type"::Production);
        SETRANGE("Order No.",ProdOrder."No.");
        IF FINDSET THEN BEGIN
          REPEAT
            IF Type = Type::"Work Center" THEN BEGIN
              IF NOT WorkCenter.GET("No.") THEN
                CLEAR(WorkCenter);
            END ELSE
              CLEAR(WorkCenter);
            IF WorkCenter."Subcontractor No." = '' THEN BEGIN
              IF "Qty. per Cap. Unit of Measure" = 0 THEN
                GetCapacityUoM(CapLedgEntry);
              Qty +=
                ("Setup Time" + "Run Time") /
                "Qty. per Cap. Unit of Measure" *
                CalendarMgt.TimeFactor("Cap. Unit of Measure Code");
              MARK(TRUE);
            END;
          UNTIL NEXT = 0;
          MARKEDONLY(TRUE);
        END;

        IF DrillDown THEN
          PAGE.RUN(0,CapLedgEntry,Quantity)
        ELSE
          EXIT(Qty);
      END;
    END;

    LOCAL PROCEDURE GetCapacityUoM@43(VAR CapacityLedgerEntry@1000 : Record 5832);
    VAR
      WorkCenter@1001 : Record 99000754;
    BEGIN
      CapacityLedgerEntry."Qty. per Cap. Unit of Measure" := 1;
      IF WorkCenter.GET(CapacityLedgerEntry."Work Center No.") THEN
        CapacityLedgerEntry."Cap. Unit of Measure Code" := WorkCenter."Unit of Measure Code";
    END;

    PROCEDURE CalcOutputQtyBaseOnPurchOrder@6(ProdOrderLine@1000 : Record 5406;ProdOrderRtngLine@1001 : Record 5409) : Decimal;
    VAR
      PurchLine@1002 : Record 39;
      Item@1003 : Record 27;
      UOMMgt@1004 : Codeunit 5402;
      OutstandingBaseQty@1005 : Decimal;
    BEGIN
      WITH PurchLine DO BEGIN
        SETCURRENTKEY(
          "Document Type",Type,"Prod. Order No.","Prod. Order Line No.","Routing No.","Operation No.");
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE(Type,Type::Item);
        SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
        SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
        SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
        SETRANGE("Operation No.",ProdOrderRtngLine."Operation No.");
        IF FIND('-') THEN
          REPEAT
            IF Item."No." <> "No." THEN
              Item.GET("No.");
            OutstandingBaseQty :=
              OutstandingBaseQty +
              UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code") * "Outstanding Quantity";
          UNTIL NEXT = 0;
        EXIT(OutstandingBaseQty);
      END;
    END;

    PROCEDURE CalcActOutputQtyBase@5(ProdOrderLine@1000 : Record 5406;ProdOrderRtngLine@1001 : Record 5409) : Decimal;
    VAR
      CapLedgEntry@1002 : Record 5832;
    BEGIN
      WITH CapLedgEntry DO BEGIN
        IF ProdOrderLine.Status < ProdOrderLine.Status::Released THEN
          EXIT(0);

        SETCURRENTKEY(
          "Order Type","Order No.","Order Line No.","Routing No.","Routing Reference No.","Operation No.");
        SETRANGE("Order Type","Order Type"::Production);
        SETRANGE("Order No.",ProdOrderLine."Prod. Order No.");
        SETRANGE("Order Line No.",ProdOrderLine."Line No.");
        SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
        SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
        SETRANGE("Operation No.",ProdOrderRtngLine."Operation No.");
        CALCSUMS("Output Quantity");
        EXIT("Output Quantity");
      END;
    END;

    PROCEDURE CalcActOperOutputAndScrap@13(ProdOrderLine@1002 : Record 5406;ProdOrderRtngLine@1001 : Record 5409) OutputQtyBase : Decimal;
    VAR
      CapLedgEntry@1000 : Record 5832;
    BEGIN
      WITH CapLedgEntry DO BEGIN
        IF ProdOrderLine.Status < ProdOrderLine.Status::Released THEN
          EXIT(0);

        SETCURRENTKEY(
          "Order Type","Order No.","Order Line No.","Routing No.","Routing Reference No.","Operation No.","Last Output Line");
        SETRANGE("Order Type","Order Type"::Production);
        SETRANGE("Order No.",ProdOrderLine."Prod. Order No.");
        SETRANGE("Order Line No.",ProdOrderLine."Line No.");
        SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
        SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
        SETRANGE("Last Output Line",TRUE);
        IF FIND('-') THEN
          REPEAT
            OutputQtyBase += "Output Quantity" + "Scrap Quantity";
          UNTIL NEXT = 0;

        EXIT(OutputQtyBase);
      END;
    END;

    PROCEDURE CalcActNeededQtyBase@18(ProdOrderLine@1000 : Record 5406;ProdOrderComp@1001 : Record 5407;OutputQtyBase@1004 : Decimal) : Decimal;
    VAR
      CompQtyBasePerMfgQtyBase@1002 : Decimal;
    BEGIN
      CompQtyBasePerMfgQtyBase := ProdOrderComp."Quantity (Base)" / ProdOrderLine."Qty. per Unit of Measure";
      EXIT(CalcQtyAdjdForBOMScrap(OutputQtyBase * CompQtyBasePerMfgQtyBase,ProdOrderComp."Scrap %"));
    END;

    PROCEDURE CalcActTimeAndQtyBase@25(ProdOrderLine@1007 : Record 5406;OperationNo@1000 : Code[10];VAR ActRunTime@1004 : Decimal;VAR ActSetupTime@1003 : Decimal;VAR ActOutputQty@1002 : Decimal;VAR ActScrapQty@1001 : Decimal);
    VAR
      CapLedgEntry@1005 : Record 5832;
    BEGIN
      WITH CapLedgEntry DO BEGIN
        SETCURRENTKEY(
          "Order Type","Order No.","Order Line No.","Routing No.","Routing Reference No.",
          "Operation No.","Last Output Line");

        SETRANGE("Order Type","Order Type"::Production);
        SETRANGE("Order No.",ProdOrderLine."Prod. Order No.");
        SETRANGE("Order Line No.",ProdOrderLine."Line No.");
        SETRANGE("Routing No.",ProdOrderLine."Routing No.");
        SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
        SETRANGE("Operation No.",OperationNo);
        IF FIND('-') THEN
          REPEAT
            ActSetupTime += "Setup Time";
            ActRunTime += "Run Time";
            // Base Units
            ActOutputQty += "Output Quantity";
            ActScrapQty += "Scrap Quantity";
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcCompItemQtyBase@12(ProdBOMComponent@1000 : Record 99000772;CalculationDate@1008 : Date;MfgItemQtyBase@1001 : Decimal;RtngNo@1002 : Code[20];AdjdForRtngScrap@1003 : Boolean) : Decimal;
    VAR
      RtngLine@1004 : Record 99000764;
    BEGIN
      WITH ProdBOMComponent DO BEGIN
        IF AdjdForRtngScrap AND FindRountingLine(RtngLine,ProdBOMComponent,CalculationDate,RtngNo) THEN
          MfgItemQtyBase :=
            CalcQtyAdjdForRoutingScrap(
              MfgItemQtyBase,RtngLine."Scrap Factor % (Accumulated)",RtngLine."Fixed Scrap Qty. (Accum.)");

        EXIT(
          CalcQtyAdjdForBOMScrap(MfgItemQtyBase * Quantity * GetQtyPerUnitOfMeasure,"Scrap %"));
      END;
    END;

    PROCEDURE CalcCostTime@3(MfgItemQtyBase@1001 : Decimal;SetupTime@1002 : Decimal;SetupTimeUOMCode@1003 : Code[10];RunTime@1004 : Decimal;RunTimeUOMCode@1005 : Code[10];RtngLotSize@1006 : Decimal;ScrapFactorPctAccum@1007 : Decimal;FixedScrapQtyAccum@1008 : Decimal;WorkCenterNo@1009 : Code[20];UnitCostCalculation@1010 : 'Time,Unit';CostInclSetup@1011 : Boolean;ConcurrentCapacities@1014 : Decimal) CostTime@1000 : Decimal;
    VAR
      CalendarMgt@1012 : Codeunit 99000755;
      RunTimePer@1013 : Decimal;
    BEGIN
      IF ConcurrentCapacities = 0 THEN
        ConcurrentCapacities := 1;

      CASE UnitCostCalculation OF
        UnitCostCalculation::Time:
          BEGIN
            IF RtngLotSize = 0 THEN
              RtngLotSize := 1;
            RunTimePer := RunTime / RtngLotSize;
            CostTime :=
              CalcQtyAdjdForRoutingScrap(
                ROUND(
                  RunTimePer * MfgItemQtyBase * CalendarMgt.QtyperTimeUnitofMeasure(WorkCenterNo,RunTimeUOMCode),
                  0.00001),
                ScrapFactorPctAccum,
                ROUND(
                  RunTimePer * FixedScrapQtyAccum * CalendarMgt.QtyperTimeUnitofMeasure(WorkCenterNo,RunTimeUOMCode),
                  0.00001));
            IF CostInclSetup THEN
              CostTime :=
                CostTime +
                ROUND(
                  ConcurrentCapacities *
                  SetupTime * CalendarMgt.QtyperTimeUnitofMeasure(WorkCenterNo,SetupTimeUOMCode),
                  0.00001);
          END;
        UnitCostCalculation::Unit:
          CostTime := CalcQtyAdjdForRoutingScrap(MfgItemQtyBase,ScrapFactorPctAccum,FixedScrapQtyAccum);
      END;
    END;

    PROCEDURE CalcQtyAdjdForBOMScrap@4(Qty@1000 : Decimal;ScrapPct@1001 : Decimal) : Decimal;
    BEGIN
      EXIT(Qty * (1 + ScrapPct / 100));
    END;

    PROCEDURE CalcQtyAdjdForRoutingScrap@1(Qty@1000 : Decimal;ScrapFactorPctAccum@1001 : Decimal;FixedScrapQtyAccum@1002 : Decimal) : Decimal;
    BEGIN
      EXIT(Qty * (1 + ScrapFactorPctAccum) + FixedScrapQtyAccum);
    END;

    PROCEDURE CalcDirCost@11(Cost@1000 : Decimal;OvhdCost@1001 : Decimal;VarPurchCost@1002 : Decimal) : Decimal;
    BEGIN
      EXIT(Cost - OvhdCost - VarPurchCost);
    END;

    PROCEDURE CalcDirUnitCost@21(UnitCost@1000 : Decimal;OvhdRate@1001 : Decimal;IndirCostPct@1002 : Decimal) : Decimal;
    BEGIN
      EXIT((UnitCost - OvhdRate) / (1 + IndirCostPct / 100));
    END;

    PROCEDURE CalcOvhdCost@10(DirCost@1000 : Decimal;IndirCostPct@1001 : Decimal;OvhdRate@1002 : Decimal;QtyBase@1003 : Decimal) : Decimal;
    BEGIN
      EXIT(DirCost * IndirCostPct / 100 + OvhdRate * QtyBase);
    END;

    PROCEDURE CalcUnitCost@14(DirCost@1000 : Decimal;IndirCostPct@1001 : Decimal;OvhdRate@1002 : Decimal;RndgPrec@1003 : Decimal) : Decimal;
    BEGIN
      EXIT(ROUND(DirCost * (1 + IndirCostPct / 100) + OvhdRate,RndgPrec));
    END;

    PROCEDURE FindRountingLine@35(VAR RoutingLine@1001 : Record 99000764;ProdBOMLine@1000 : Record 99000772;CalculationDate@1002 : Date;RoutingNo@1003 : Code[20]) RecFound : Boolean;
    VAR
      VersionMgt@1004 : Codeunit 99000756;
    BEGIN
      IF RoutingNo = '' THEN
        EXIT(FALSE);

      RecFound := FALSE;
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.SETRANGE("Version Code",VersionMgt.GetRtngVersion(RoutingNo,CalculationDate,TRUE));
      IF NOT RoutingLine.ISEMPTY THEN BEGIN
        IF ProdBOMLine."Routing Link Code" <> '' THEN
          RoutingLine.SETRANGE("Routing Link Code",ProdBOMLine."Routing Link Code");
        RecFound := RoutingLine.FINDFIRST;
        IF NOT RecFound THEN BEGIN
          RoutingLine.SETRANGE("Routing Link Code");
          RecFound := RoutingLine.FINDFIRST;
        END;
      END;

      EXIT(RecFound);
    END;

    PROCEDURE GetRndgSetup@2(VAR GLSetup@1000 : Record 98;VAR Currency@1001 : Record 4;VAR RndgSetupRead@1002 : Boolean);
    BEGIN
      IF RndgSetupRead THEN
        EXIT;
      GLSetup.GET;
      GLSetup.TESTFIELD("Amount Rounding Precision");
      GLSetup.TESTFIELD("Unit-Amount Rounding Precision");
      IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
        Currency.GET(GLSetup."Additional Reporting Currency");
        Currency.TESTFIELD("Amount Rounding Precision");
        Currency.TESTFIELD("Unit-Amount Rounding Precision");
      END;
      RndgSetupRead := TRUE;
    END;

    PROCEDURE TransferCost@9(VAR Cost@1000 : Decimal;VAR UnitCost@1001 : Decimal;SrcCost@1002 : Decimal;Qty@1003 : Decimal;UnitAmtRndgPrec@1004 : Decimal);
    BEGIN
      Cost := SrcCost;
      IF Qty <> 0 THEN
        UnitCost := ROUND(Cost / Qty,UnitAmtRndgPrec);
    END;

    PROCEDURE SplitItemLedgerEntriesExist@24(VAR TempItemLedgEntry@1002 : TEMPORARY Record 32;QtyBase@1004 : Decimal;ItemLedgEntryNo@1000 : Integer) : Boolean;
    VAR
      ItemLedgEntry@1001 : Record 32;
      ItemLedgEntry2@1003 : Record 32;
    BEGIN
      IF ItemLedgEntryNo = 0 THEN
        EXIT(FALSE);
      TempItemLedgEntry.RESET;
      TempItemLedgEntry.DELETEALL;
      IF ItemLedgEntry.GET(ItemLedgEntryNo) AND (ItemLedgEntry.Quantity <> QtyBase) THEN
        IF ItemLedgEntry2.GET(ItemLedgEntry."Entry No." - 1) AND
           IsSameDocLineItemLedgEntry(ItemLedgEntry,ItemLedgEntry2,QtyBase)
        THEN BEGIN
          TempItemLedgEntry := ItemLedgEntry2;
          TempItemLedgEntry.INSERT;
          TempItemLedgEntry := ItemLedgEntry;
          TempItemLedgEntry.INSERT;
          EXIT(TRUE);
        END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsSameDocLineItemLedgEntry@46(ItemLedgEntry@1000 : Record 32;ItemLedgEntry2@1002 : Record 32;QtyBase@1003 : Decimal) : Boolean;
    BEGIN
      WITH ItemLedgEntry2 DO
        EXIT(
          ("Document Type" = ItemLedgEntry."Document Type") AND
          ("Document No." = ItemLedgEntry."Document No.") AND
          ("Document Line No." = ItemLedgEntry."Document Line No.") AND
          ("Posting Date" = ItemLedgEntry."Posting Date") AND
          ("Source Type" = ItemLedgEntry."Source Type") AND
          ("Source No." = ItemLedgEntry."Source No.") AND
          ("Entry Type" = ItemLedgEntry."Entry Type") AND
          ("Item No." = ItemLedgEntry."Item No.") AND
          ("Location Code" = ItemLedgEntry."Location Code") AND
          ("Variant Code" = ItemLedgEntry."Variant Code") AND
          (QtyBase = Quantity + ItemLedgEntry.Quantity) AND
          (Quantity = "Invoiced Quantity"));
    END;

    PROCEDURE CalcSalesLineCostLCY@32(SalesLine@1000 : Record 37;QtyType@1005 : 'General,Invoicing') TotalAdjCostLCY : Decimal;
    VAR
      PostedQtyBase@1001 : Decimal;
      RemQtyToCalcBase@1006 : Decimal;
    BEGIN
      CASE SalesLine."Document Type" OF
        SalesLine."Document Type"::Order,SalesLine."Document Type"::Invoice:
          IF ((SalesLine."Quantity Shipped" <> 0) OR (SalesLine."Shipment No." <> '')) AND
             ((QtyType = QtyType::General) OR (SalesLine."Qty. to Invoice" > SalesLine."Qty. to Ship"))
          THEN
            CalcSalesLineShptAdjCostLCY(SalesLine,QtyType,TotalAdjCostLCY,PostedQtyBase,RemQtyToCalcBase);
        SalesLine."Document Type"::"Return Order",SalesLine."Document Type"::"Credit Memo":
          IF ((SalesLine."Return Qty. Received" <> 0) OR (SalesLine."Return Receipt No." <> '')) AND
             ((QtyType = QtyType::General) OR (SalesLine."Qty. to Invoice" > SalesLine."Return Qty. to Receive"))
          THEN
            CalcSalesLineRcptAdjCostLCY(SalesLine,QtyType,TotalAdjCostLCY,PostedQtyBase,RemQtyToCalcBase);
      END;
    END;

    LOCAL PROCEDURE CalcSalesLineShptAdjCostLCY@34(SalesLine@1002 : Record 37;QtyType@1001 : 'General,Invoicing';VAR TotalAdjCostLCY@1000 : Decimal;VAR PostedQtyBase@1004 : Decimal;VAR RemQtyToCalcBase@1003 : Decimal);
    VAR
      SalesShptLine@1005 : Record 111;
      QtyShippedNotInvcdBase@1006 : Decimal;
      AdjCostLCY@1007 : Decimal;
    BEGIN
      WITH SalesShptLine DO BEGIN
        IF SalesLine."Shipment No." <> '' THEN BEGIN
          SETRANGE("Document No.",SalesLine."Shipment No.");
          SETRANGE("Line No.",SalesLine."Shipment Line No.");
        END ELSE BEGIN
          SETCURRENTKEY("Order No.","Order Line No.");
          SETRANGE("Order No.",SalesLine."Document No.");
          SETRANGE("Order Line No.",SalesLine."Line No.");
        END;
        SETRANGE(Correction,FALSE);
        IF QtyType = QtyType::Invoicing THEN BEGIN
          SETFILTER("Qty. Shipped Not Invoiced",'<>0');
          RemQtyToCalcBase := SalesLine."Qty. to Invoice (Base)" - SalesLine."Qty. to Ship (Base)";
        END ELSE
          RemQtyToCalcBase := SalesLine."Quantity (Base)";

        IF FINDSET THEN
          REPEAT
            IF "Qty. per Unit of Measure" = 0 THEN
              QtyShippedNotInvcdBase := "Qty. Shipped Not Invoiced"
            ELSE
              QtyShippedNotInvcdBase :=
                ROUND("Qty. Shipped Not Invoiced" * "Qty. per Unit of Measure",0.00001);

            AdjCostLCY := CalcSalesShptLineCostLCY(SalesShptLine,QtyType);

            CASE TRUE OF
              QtyType = QtyType::Invoicing:
                IF RemQtyToCalcBase > QtyShippedNotInvcdBase THEN BEGIN
                  TotalAdjCostLCY := TotalAdjCostLCY + AdjCostLCY;
                  RemQtyToCalcBase := RemQtyToCalcBase - QtyShippedNotInvcdBase;
                  PostedQtyBase := PostedQtyBase + QtyShippedNotInvcdBase;
                END ELSE BEGIN
                  PostedQtyBase := PostedQtyBase + RemQtyToCalcBase;
                  TotalAdjCostLCY :=
                    TotalAdjCostLCY + AdjCostLCY / QtyShippedNotInvcdBase * RemQtyToCalcBase;
                  RemQtyToCalcBase := 0;
                END;
              SalesLine."Shipment No." <> '':
                BEGIN
                  PostedQtyBase := PostedQtyBase + QtyShippedNotInvcdBase;
                  TotalAdjCostLCY :=
                    TotalAdjCostLCY + AdjCostLCY / "Quantity (Base)" * RemQtyToCalcBase;
                  RemQtyToCalcBase := 0;
                END;
              ELSE BEGIN
                PostedQtyBase := PostedQtyBase + "Quantity (Base)";
                TotalAdjCostLCY := TotalAdjCostLCY + AdjCostLCY;
              END;
            END;
          UNTIL (NEXT = 0) OR (RemQtyToCalcBase = 0);
      END;
    END;

    LOCAL PROCEDURE CalcSalesLineRcptAdjCostLCY@37(SalesLine@1002 : Record 37;QtyType@1001 : 'General,Invoicing';VAR TotalAdjCostLCY@1000 : Decimal;VAR PostedQtyBase@1004 : Decimal;VAR RemQtyToCalcBase@1003 : Decimal);
    VAR
      ReturnRcptLine@1005 : Record 6661;
      RtrnQtyRcvdNotInvcdBase@1006 : Decimal;
      AdjCostLCY@1007 : Decimal;
    BEGIN
      WITH ReturnRcptLine DO BEGIN
        IF SalesLine."Return Receipt No." <> '' THEN BEGIN
          SETRANGE("Document No.",SalesLine."Return Receipt No.");
          SETRANGE("Line No.",SalesLine."Return Receipt Line No.");
        END ELSE BEGIN
          SETCURRENTKEY("Return Order No.","Return Order Line No.");
          SETRANGE("Return Order No.",SalesLine."Document No.");
          SETRANGE("Return Order Line No.",SalesLine."Line No.");
        END;
        SETRANGE(Correction,FALSE);
        IF QtyType = QtyType::Invoicing THEN BEGIN
          SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');
          RemQtyToCalcBase :=
            SalesLine."Qty. to Invoice (Base)" - SalesLine."Return Qty. to Receive (Base)";
        END ELSE
          RemQtyToCalcBase := SalesLine."Quantity (Base)";

        IF FINDSET THEN
          REPEAT
            IF "Qty. per Unit of Measure" = 0 THEN
              RtrnQtyRcvdNotInvcdBase := "Return Qty. Rcd. Not Invd."
            ELSE
              RtrnQtyRcvdNotInvcdBase :=
                ROUND("Return Qty. Rcd. Not Invd." * "Qty. per Unit of Measure",0.00001);

            AdjCostLCY := CalcReturnRcptLineCostLCY(ReturnRcptLine,QtyType);

            CASE TRUE OF
              QtyType = QtyType::Invoicing:
                IF RemQtyToCalcBase > RtrnQtyRcvdNotInvcdBase THEN BEGIN
                  TotalAdjCostLCY := TotalAdjCostLCY + AdjCostLCY;
                  RemQtyToCalcBase := RemQtyToCalcBase - RtrnQtyRcvdNotInvcdBase;
                  PostedQtyBase := PostedQtyBase + RtrnQtyRcvdNotInvcdBase;
                END ELSE BEGIN
                  PostedQtyBase := PostedQtyBase + RemQtyToCalcBase;
                  TotalAdjCostLCY :=
                    TotalAdjCostLCY + AdjCostLCY / RtrnQtyRcvdNotInvcdBase * RemQtyToCalcBase;
                  RemQtyToCalcBase := 0;
                END;
              SalesLine."Return Receipt No." <> '':
                BEGIN
                  PostedQtyBase := PostedQtyBase + RtrnQtyRcvdNotInvcdBase;
                  TotalAdjCostLCY :=
                    TotalAdjCostLCY + AdjCostLCY / "Quantity (Base)" * RemQtyToCalcBase;
                  RemQtyToCalcBase := 0;
                END;
              ELSE BEGIN
                PostedQtyBase := PostedQtyBase + "Quantity (Base)";
                TotalAdjCostLCY := TotalAdjCostLCY + AdjCostLCY;
              END;
            END;
          UNTIL (NEXT = 0) OR (RemQtyToCalcBase = 0);
      END;
    END;

    LOCAL PROCEDURE CalcSalesShptLineCostLCY@31(SalesShptLine@1000 : Record 111;QtyType@1003 : 'General,Invoicing,Shipping') AdjCostLCY : Decimal;
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      WITH SalesShptLine DO BEGIN
        IF (Quantity = 0) OR (Type = Type::"Charge (Item)") THEN
          EXIT(0);

        IF Type = Type::Item THEN BEGIN
          FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
          IF ItemLedgEntry.ISEMPTY THEN
            EXIT(0);
          AdjCostLCY := CalcPostedDocLineCostLCY(ItemLedgEntry,QtyType);
        END ELSE BEGIN
          IF QtyType = QtyType::Invoicing THEN
            AdjCostLCY := -"Qty. Shipped Not Invoiced" * "Unit Cost (LCY)"
          ELSE
            AdjCostLCY := -Quantity * "Unit Cost (LCY)";
        END;
      END;
    END;

    LOCAL PROCEDURE CalcReturnRcptLineCostLCY@33(ReturnRcptLine@1000 : Record 6661;QtyType@1003 : 'General,Invoicing,Shipping') AdjCostLCY : Decimal;
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      WITH ReturnRcptLine DO BEGIN
        IF (Quantity = 0) OR (Type = Type::"Charge (Item)") THEN
          EXIT(0);

        IF Type = Type::Item THEN BEGIN
          FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
          IF ItemLedgEntry.ISEMPTY THEN
            EXIT(0);
          AdjCostLCY := CalcPostedDocLineCostLCY(ItemLedgEntry,QtyType);
        END ELSE BEGIN
          IF QtyType = QtyType::Invoicing THEN
            AdjCostLCY := "Return Qty. Rcd. Not Invd." * "Unit Cost (LCY)"
          ELSE
            AdjCostLCY := Quantity * "Unit Cost (LCY)";
        END;
      END;
    END;

    LOCAL PROCEDURE CalcPostedDocLineCostLCY@36(VAR ItemLedgEntry@1000 : Record 32;QtyType@1002 : 'General,Invoicing,Shipping,Consuming') AdjCostLCY : Decimal;
    VAR
      ValueEntry@1003 : Record 5802;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        FINDSET;
        REPEAT
          IF (QtyType = QtyType::Invoicing) OR (QtyType = QtyType::Consuming) THEN BEGIN
            CALCFIELDS("Cost Amount (Expected)");
            AdjCostLCY := AdjCostLCY + "Cost Amount (Expected)";
          END ELSE BEGIN
            ValueEntry.SETCURRENTKEY("Item Ledger Entry No.");
            ValueEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
            IF ValueEntry.FINDSET THEN
              REPEAT
                IF (ValueEntry."Entry Type" <> ValueEntry."Entry Type"::Revaluation) AND
                   (ValueEntry."Item Charge No." = '')
                THEN
                  AdjCostLCY :=
                    AdjCostLCY + ValueEntry."Cost Amount (Expected)" + ValueEntry."Cost Amount (Actual)";
              UNTIL ValueEntry.NEXT = 0;
          END;
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcSalesInvLineCostLCY@23(SalesInvLine@1000 : Record 113) AdjCostLCY : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      WITH SalesInvLine DO BEGIN
        IF Quantity = 0 THEN
          EXIT(0);

        IF Type IN [Type::Item,Type::"Charge (Item)"] THEN BEGIN
          FilterPstdDocLineValueEntries(ValueEntry);
          AdjCostLCY := -SumValueEntriesCostAmt(ValueEntry);
        END ELSE
          AdjCostLCY := Quantity * "Unit Cost (LCY)";
      END;
    END;

    PROCEDURE CalcSalesCrMemoLineCostLCY@81(SalesCrMemoLine@1002 : Record 115) AdjCostLCY : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      WITH SalesCrMemoLine DO BEGIN
        IF Quantity = 0 THEN
          EXIT(0);

        IF Type IN [Type::Item,Type::"Charge (Item)"] THEN BEGIN
          FilterPstdDocLineValueEntries(ValueEntry);
          AdjCostLCY := SumValueEntriesCostAmt(ValueEntry);
        END ELSE
          AdjCostLCY := Quantity * "Unit Cost (LCY)";
      END;
    END;

    PROCEDURE CalcServCrMemoLineCostLCY@41(ServCrMemoLine@1002 : Record 5995) AdjCostLCY : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      WITH ServCrMemoLine DO BEGIN
        IF Quantity = 0 THEN
          EXIT(0);

        IF Type = Type::Item THEN BEGIN
          FilterPstdDocLineValueEntries(ValueEntry);
          AdjCostLCY := SumValueEntriesCostAmt(ValueEntry);
        END ELSE
          AdjCostLCY := Quantity * "Unit Cost (LCY)";
      END;
    END;

    PROCEDURE CalcCustLedgAdjmtCostLCY@28(CustLedgEntry@1000 : Record 21) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
          FIELDERROR("Document Type");

        ValueEntry.SETCURRENTKEY("Document No.");
        ValueEntry.SETRANGE("Document No.","Document No.");
        IF "Document Type" = "Document Type"::Invoice THEN
          ValueEntry.SETFILTER(
            "Document Type",
            '%1|%2',
            ValueEntry."Document Type"::"Sales Invoice",ValueEntry."Document Type"::"Service Invoice")
        ELSE
          ValueEntry.SETFILTER(
            "Document Type",
            '%1|%2',
            ValueEntry."Document Type"::"Sales Credit Memo",ValueEntry."Document Type"::"Service Credit Memo");
        ValueEntry.SETRANGE(Adjustment,TRUE);
        EXIT(SumValueEntriesCostAmt(ValueEntry));
      END;
    END;

    PROCEDURE CalcCustAdjmtCostLCY@27(VAR Customer@1000 : Record 18) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Source Type","Source No.");
        SETRANGE("Source Type","Source Type"::Customer);
        SETRANGE("Source No.",Customer."No.");
        SETFILTER("Posting Date",Customer.GETFILTER("Date Filter"));
        SETFILTER("Global Dimension 1 Code",Customer.GETFILTER("Global Dimension 1 Filter"));
        SETFILTER("Global Dimension 2 Code",Customer.GETFILTER("Global Dimension 2 Filter"));
        SETRANGE(Adjustment,TRUE);

        CALCSUMS("Cost Amount (Actual)");
        EXIT("Cost Amount (Actual)");
      END;
    END;

    PROCEDURE CalcCustLedgActualCostLCY@128(CustLedgEntry@1000 : Record 21) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
          FIELDERROR("Document Type");

        ValueEntry.SETCURRENTKEY("Document No.");
        ValueEntry.SETRANGE("Document No.","Document No.");
        IF "Document Type" = "Document Type"::Invoice THEN
          ValueEntry.SETFILTER(
            "Document Type",
            '%1|%2',
            ValueEntry."Document Type"::"Sales Invoice",ValueEntry."Document Type"::"Service Invoice")
        ELSE
          ValueEntry.SETFILTER(
            "Document Type",
            '%1|%2',
            ValueEntry."Document Type"::"Sales Credit Memo",ValueEntry."Document Type"::"Service Credit Memo");
        ValueEntry.SETFILTER("Entry Type",'<> %1',ValueEntry."Entry Type"::Revaluation);
        EXIT(SumValueEntriesCostAmt(ValueEntry));
      END;
    END;

    PROCEDURE CalcCustActualCostLCY@127(VAR Customer@1000 : Record 18) CostAmt : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
      ResLedgerEntry@1002 : Record 203;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETRANGE("Source Type","Source Type"::Customer);
        SETRANGE("Source No.",Customer."No.");
        SETFILTER("Posting Date",Customer.GETFILTER("Date Filter"));
        SETFILTER("Global Dimension 1 Code",Customer.GETFILTER("Global Dimension 1 Filter"));
        SETFILTER("Global Dimension 2 Code",Customer.GETFILTER("Global Dimension 2 Filter"));
        SETFILTER("Entry Type",'<> %1',"Entry Type"::Revaluation);
        CALCSUMS("Cost Amount (Actual)");
        CostAmt := "Cost Amount (Actual)";
      END;

      WITH ResLedgerEntry DO BEGIN
        SETRANGE("Source Type","Source Type"::Customer);
        SETRANGE("Source No.",Customer."No.");
        SETFILTER("Posting Date",Customer.GETFILTER("Date Filter"));
        SETFILTER("Global Dimension 1 Code",Customer.GETFILTER("Global Dimension 1 Filter"));
        SETFILTER("Global Dimension 2 Code",Customer.GETFILTER("Global Dimension 2 Filter"));
        CALCSUMS("Total Cost");
        CostAmt += "Total Cost";
      END;
    END;

    PROCEDURE NonInvtblCostAmt@29(VAR Customer@1001 : Record 18) : Decimal;
    VAR
      ValueEntry@1002 : Record 5802;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETRANGE("Source Type","Source Type"::Customer);
        SETRANGE("Source No.",Customer."No.");
        SETFILTER("Posting Date",Customer.GETFILTER("Date Filter"));
        SETFILTER("Global Dimension 1 Code",Customer.GETFILTER("Global Dimension 1 Filter"));
        SETFILTER("Global Dimension 2 Code",Customer.GETFILTER("Global Dimension 2 Filter"));
        CALCSUMS("Cost Amount (Non-Invtbl.)");
        EXIT("Cost Amount (Non-Invtbl.)");
      END;
    END;

    PROCEDURE SumValueEntriesCostAmt@30(VAR ValueEntry@1000 : Record 5802) CostAmt : Decimal;
    BEGIN
      WITH ValueEntry DO
        IF FINDSET THEN
          REPEAT
            CostAmt := CostAmt + "Cost Amount (Actual)";
          UNTIL NEXT = 0;
      EXIT(CostAmt);
    END;

    PROCEDURE GetDocType@26(TableNo@1000 : Integer) : Integer;
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      WITH ItemLedgEntry DO
        CASE TableNo OF
          DATABASE::"Purch. Rcpt. Header":
            EXIT("Document Type"::"Purchase Receipt");
          DATABASE::"Purch. Inv. Header":
            EXIT("Document Type"::"Purchase Invoice");
          DATABASE::"Purch. Cr. Memo Hdr.":
            EXIT("Document Type"::"Purchase Credit Memo");
          DATABASE::"Return Shipment Header":
            EXIT("Document Type"::"Purchase Return Shipment");
          DATABASE::"Sales Shipment Header":
            EXIT("Document Type"::"Sales Shipment");
          DATABASE::"Sales Invoice Header":
            EXIT("Document Type"::"Sales Invoice");
          DATABASE::"Sales Cr.Memo Header":
            EXIT("Document Type"::"Sales Credit Memo");
          DATABASE::"Return Receipt Header":
            EXIT("Document Type"::"Sales Return Receipt");
          DATABASE::"Transfer Shipment Header":
            EXIT("Document Type"::"Transfer Shipment");
          DATABASE::"Transfer Receipt Header":
            EXIT("Document Type"::"Transfer Receipt");
          DATABASE::"Posted Assembly Header":
            EXIT("Document Type"::"Posted Assembly");
        END;
    END;

    PROCEDURE CalcServLineCostLCY@39(ServLine@1000 : Record 5902;QtyType@1005 : 'General,Invoicing,Shipping,Consuming,ServLineItems,ServLineResources,ServLineCosts') TotalAdjCostLCY : Decimal;
    VAR
      PostedQtyBase@1001 : Decimal;
      RemQtyToCalcBase@1006 : Decimal;
    BEGIN
      CASE ServLine."Document Type" OF
        ServLine."Document Type"::Order,ServLine."Document Type"::Invoice:
          IF ((ServLine."Quantity Shipped" <> 0) OR (ServLine."Shipment No." <> '')) AND
             ((QtyType = QtyType::General) OR
              (QtyType = QtyType::ServLineItems) OR
              (QtyType = QtyType::ServLineResources) OR
              (QtyType = QtyType::ServLineCosts) OR
              (ServLine."Qty. to Invoice" > ServLine."Qty. to Ship") OR
              (ServLine."Qty. to Consume" > 0))
          THEN
            CalcServLineShptAdjCostLCY(ServLine,QtyType,TotalAdjCostLCY,PostedQtyBase,RemQtyToCalcBase);
      END;
    END;

    LOCAL PROCEDURE CalcServLineShptAdjCostLCY@38(ServLine@1002 : Record 5902;QtyType@1001 : 'General,Invoicing,Shipping,Consuming';VAR TotalAdjCostLCY@1000 : Decimal;VAR PostedQtyBase@1004 : Decimal;VAR RemQtyToCalcBase@1003 : Decimal);
    VAR
      ServShptLine@1005 : Record 5991;
      QtyShippedNotInvcdBase@1006 : Decimal;
      AdjCostLCY@1007 : Decimal;
    BEGIN
      WITH ServShptLine DO BEGIN
        IF ServLine."Shipment No." <> '' THEN BEGIN
          SETRANGE("Document No.",ServLine."Shipment No.");
          SETRANGE("Line No.",ServLine."Shipment Line No.");
        END ELSE BEGIN
          SETCURRENTKEY("Order No.","Order Line No.");
          SETRANGE("Order No.",ServLine."Document No.");
          SETRANGE("Order Line No.",ServLine."Line No.");
        END;
        SETRANGE(Correction,FALSE);
        IF QtyType = QtyType::Invoicing THEN BEGIN
          SETFILTER("Qty. Shipped Not Invoiced",'<>0');
          RemQtyToCalcBase := ServLine."Qty. to Invoice (Base)" - ServLine."Qty. to Ship (Base)";
        END ELSE
          IF (QtyType = QtyType::Consuming) AND (ServLine."Qty. to Consume" > 0) THEN
            RemQtyToCalcBase := ServLine."Qty. to Consume (Base)"
          ELSE
            RemQtyToCalcBase := ServLine."Quantity (Base)";

        IF FINDSET THEN
          REPEAT
            IF "Qty. per Unit of Measure" = 0 THEN
              QtyShippedNotInvcdBase := "Qty. Shipped Not Invoiced"
            ELSE
              QtyShippedNotInvcdBase :=
                ROUND("Qty. Shipped Not Invoiced" * "Qty. per Unit of Measure",0.00001);

            AdjCostLCY := CalcServShptLineCostLCY(ServShptLine,QtyType);

            CASE TRUE OF
              QtyType = QtyType::Invoicing,QtyType = QtyType::Consuming:
                IF RemQtyToCalcBase > QtyShippedNotInvcdBase THEN BEGIN
                  TotalAdjCostLCY := TotalAdjCostLCY + AdjCostLCY;
                  RemQtyToCalcBase := RemQtyToCalcBase - QtyShippedNotInvcdBase;
                  PostedQtyBase := PostedQtyBase + QtyShippedNotInvcdBase;
                END ELSE BEGIN
                  PostedQtyBase := PostedQtyBase + RemQtyToCalcBase;
                  TotalAdjCostLCY :=
                    TotalAdjCostLCY + AdjCostLCY / QtyShippedNotInvcdBase * RemQtyToCalcBase;
                  RemQtyToCalcBase := 0;
                END;
              ServLine."Shipment No." <> '':
                BEGIN
                  PostedQtyBase := PostedQtyBase + QtyShippedNotInvcdBase;
                  TotalAdjCostLCY :=
                    TotalAdjCostLCY + AdjCostLCY / "Quantity (Base)" * RemQtyToCalcBase;
                  RemQtyToCalcBase := 0;
                END;
              ELSE BEGIN
                PostedQtyBase := PostedQtyBase + "Quantity (Base)";
                TotalAdjCostLCY := TotalAdjCostLCY + AdjCostLCY;
              END;
            END;
          UNTIL (NEXT = 0) OR (RemQtyToCalcBase = 0);
      END;
    END;

    LOCAL PROCEDURE CalcServShptLineCostLCY@50(ServShptLine@1000 : Record 5991;QtyType@1003 : 'General,Invoicing,Shipping,Consuming') AdjCostLCY : Decimal;
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      WITH ServShptLine DO BEGIN
        IF Quantity = 0 THEN
          EXIT(0);

        IF Type = Type::Item THEN BEGIN
          FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
          IF ItemLedgEntry.ISEMPTY THEN
            EXIT(0);
          AdjCostLCY := CalcPostedDocLineCostLCY(ItemLedgEntry,QtyType);
        END ELSE BEGIN
          IF QtyType = QtyType::Invoicing THEN
            AdjCostLCY := -"Qty. Shipped Not Invoiced" * "Unit Cost (LCY)"
          ELSE
            AdjCostLCY := -Quantity * "Unit Cost (LCY)";
        END;
      END;
    END;

    PROCEDURE CalcServInvLineCostLCY@40(ServInvLine@1000 : Record 5993) AdjCostLCY : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      WITH ServInvLine DO BEGIN
        IF Quantity = 0 THEN
          EXIT(0);

        IF Type = Type::Item THEN BEGIN
          FilterPstdDocLineValueEntries(ValueEntry);
          AdjCostLCY := -SumValueEntriesCostAmt(ValueEntry);
        END ELSE
          AdjCostLCY := Quantity * "Unit Cost (LCY)";
      END;
    END;

    PROCEDURE AdjustForRevNegCon@42(VAR ActMatCost@1000 : Decimal;VAR ActMatCostCostACY@1001 : Decimal;VAR ItemLedgEntry@1002 : Record 32);
    VAR
      ValueEntry@1003 : Record 5802;
    BEGIN
      ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
      ItemLedgEntry.SETRANGE(Positive,TRUE);
      IF ItemLedgEntry.FINDSET THEN
        REPEAT
          ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
          ValueEntry.SETRANGE("Entry Type",ValueEntry."Entry Type"::Revaluation);
          IF ValueEntry.FINDSET THEN
            REPEAT
              ActMatCost += ValueEntry."Cost Amount (Actual)";
              ActMatCostCostACY += ValueEntry."Cost Amount (Actual) (ACY)";
            UNTIL ValueEntry.NEXT = 0;
        UNTIL ItemLedgEntry.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

