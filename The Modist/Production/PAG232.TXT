OBJECT Page 232 Apply Customer Entries
{
  OBJECT-PROPERTIES
  {
    Date=23/03/16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.45480;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Apply Customer Entries;
               ENG=Apply Customer Entries];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table21;
    DataCaptionFields=Customer No.;
    PageType=Worksheet;
    OnInit=BEGIN
             "Applies-to IDVisible" := TRUE;
           END;

    OnOpenPage=BEGIN
                 IF CalcType = CalcType::Direct THEN BEGIN
                   Cust.GET("Customer No.");
                   ApplnCurrencyCode := Cust."Currency Code";
                   FindApplyingEntry;
                 END;

                 "Applies-to IDVisible" := ApplnType <> ApplnType::"Applies-to Doc. No.";

                 GLSetup.GET;

                 IF ApplnType = ApplnType::"Applies-to Doc. No." THEN
                   CalcApplnAmount;
                 PostingDone := FALSE;
               END;

    OnAfterGetRecord=BEGIN
                       StyleTxt := SetStyle;
                     END;

    OnModifyRecord=BEGIN
                     CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",Rec);
                     IF "Applies-to ID" <> xRec."Applies-to ID" THEN
                       CalcApplnAmount;
                     EXIT(FALSE);
                   END;

    OnQueryClosePage=BEGIN
                       IF CloseAction = ACTION::LookupOK THEN
                         LookupOKOnPush;
                       IF ApplnType = ApplnType::"Applies-to Doc. No." THEN BEGIN
                         IF OK AND (ApplyingCustLedgEntry."Posting Date" < "Posting Date") THEN BEGIN
                           OK := FALSE;
                           ERROR(
                             EarlierPostingDateErr,ApplyingCustLedgEntry."Document Type",ApplyingCustLedgEntry."Document No.",
                             "Document Type","Document No.");
                         END;
                         IF OK THEN BEGIN
                           IF "Amount to Apply" = 0 THEN
                             "Amount to Apply" := "Remaining Amount";
                           CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",Rec);
                         END;
                       END;
                       IF (CalcType = CalcType::Direct) AND NOT OK AND NOT PostingDone THEN BEGIN
                         Rec := ApplyingCustLedgEntry;
                         "Applying Entry" := FALSE;
                         "Applies-to ID" := '';
                         "Amount to Apply" := 0;
                         CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",Rec);
                       END;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           IF ApplnType = ApplnType::"Applies-to Doc. No." THEN
                             CalcApplnAmount;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 37      ;1   ;ActionGroup;
                      CaptionML=[ENU=Ent&ry;
                                 ENG=Ent&ry];
                      Image=Entry }
      { 38      ;2   ;Action    ;
                      CaptionML=[ENU=Reminder/Fin. Charge Entries;
                                 ENG=Reminder/Fin. Charge Entries];
                      RunObject=Page 444;
                      RunPageView=SORTING(Customer Entry No.);
                      RunPageLink=Customer Entry No.=FIELD(Entry No.);
                      Image=Reminder }
      { 95      ;2   ;Action    ;
                      CaptionML=[ENU=Applied E&ntries;
                                 ENG=Applied E&ntries];
                      RunObject=Page 61;
                      RunPageOnRec=Yes;
                      Image=Approve }
      { 53      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 62      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Detailed &Ledger Entries;
                                 ENG=Detailed &Ledger Entries];
                      RunObject=Page 573;
                      RunPageView=SORTING(Cust. Ledger Entry No.,Posting Date);
                      RunPageLink=Cust. Ledger Entry No.=FIELD(Entry No.);
                      Image=View }
      { 30      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Application;
                                 ENG=&Application];
                      Image=Apply }
      { 32      ;2   ;Action    ;
                      Name=Set Applies-to ID;
                      ShortCutKey=Shift+F11;
                      CaptionML=[ENU=Set Applies-to ID;
                                 ENG=Set Applies-to ID];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SelectLineToApply;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF (CalcType = CalcType::GenJnlLine) AND (ApplnType = ApplnType::"Applies-to Doc. No.") THEN
                                   ERROR(CannotSetAppliesToIDErr);

                                 SetCustApplId;
                               END;
                                }
      { 34      ;2   ;Action    ;
                      Name=Post Application;
                      ShortCutKey=F9;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Post Application;
                                 ENG=Post Application];
                      Promoted=Yes;
                      Image=PostApplication;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PostDirectApplication(FALSE);
                               END;
                                }
      { 3       ;2   ;Action    ;
                      Name=Preview;
                      CaptionML=[ENU=Preview Posting;
                                 ENG=Preview Posting];
                      Image=ViewPostedOrder;
                      OnAction=BEGIN
                                 PostDirectApplication(TRUE);
                               END;
                                }
      { 87      ;2   ;Separator ;
                      CaptionML=[ENU=-;
                                 ENG=-] }
      { 88      ;2   ;Action    ;
                      CaptionML=[ENU=Show Only Selected Entries to Be Applied;
                                 ENG=Show Only Selected Entries to Be Applied];
                      Image=ShowSelected;
                      OnAction=BEGIN
                                 ShowAppliedEntries := NOT ShowAppliedEntries;
                                 IF ShowAppliedEntries THEN BEGIN
                                   IF CalcType = CalcType::GenJnlLine THEN
                                     SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID")
                                   ELSE BEGIN
                                     CustEntryApplID := USERID;
                                     IF CustEntryApplID = '' THEN
                                       CustEntryApplID := '***';
                                     SETRANGE("Applies-to ID",CustEntryApplID);
                                   END;
                                 END ELSE
                                   SETRANGE("Applies-to ID");
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 36      ;1   ;Action    ;
                      CaptionML=[ENU=&Navigate;
                                 ENG=&Navigate];
                      Promoted=Yes;
                      Image=Navigate;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Navigate.SetDoc("Posting Date","Document No.");
                                 Navigate.RUN;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 70  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 73  ;2   ;Field     ;
                CaptionML=[ENU=Posting Date;
                           ENG=Posting Date];
                SourceExpr=ApplyingCustLedgEntry."Posting Date";
                Editable=FALSE }

    { 75  ;2   ;Field     ;
                CaptionML=[ENU=Document Type;
                           ENG=Document Type];
                OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                 ENG=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                SourceExpr=ApplyingCustLedgEntry."Document Type";
                Editable=FALSE }

    { 77  ;2   ;Field     ;
                CaptionML=[ENU=Document No.;
                           ENG=Document No.];
                SourceExpr=ApplyingCustLedgEntry."Document No.";
                Editable=FALSE }

    { 71  ;2   ;Field     ;
                Name=ApplyingCustomerNo;
                CaptionML=[ENU=Customer No.;
                           ENG=Customer No.];
                SourceExpr=ApplyingCustLedgEntry."Customer No.";
                Editable=FALSE }

    { 85  ;2   ;Field     ;
                Name=ApplyingDescription;
                CaptionML=[ENU=Description;
                           ENG=Description];
                SourceExpr=ApplyingCustLedgEntry.Description;
                Editable=FALSE }

    { 79  ;2   ;Field     ;
                CaptionML=[ENU=Currency Code;
                           ENG=Currency Code];
                SourceExpr=ApplyingCustLedgEntry."Currency Code";
                Editable=FALSE }

    { 81  ;2   ;Field     ;
                CaptionML=[ENU=Amount;
                           ENG=Amount];
                SourceExpr=ApplyingCustLedgEntry.Amount;
                Editable=FALSE }

    { 83  ;2   ;Field     ;
                CaptionML=[ENU=Remaining Amount;
                           ENG=Remaining Amount];
                SourceExpr=ApplyingCustLedgEntry."Remaining Amount";
                Editable=FALSE }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 22  ;2   ;Field     ;
                SourceExpr="Applies-to ID";
                Visible="Applies-to IDVisible" }

    { 2   ;2   ;Field     ;
                SourceExpr="Posting Date";
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr="Document Type";
                Editable=FALSE;
                StyleExpr=StyleTxt }

    { 6   ;2   ;Field     ;
                SourceExpr="Document No.";
                Editable=FALSE;
                StyleExpr=StyleTxt }

    { 8   ;2   ;Field     ;
                SourceExpr="Customer No.";
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                SourceExpr=Description;
                Editable=FALSE }

    { 39  ;2   ;Field     ;
                SourceExpr="Currency Code" }

    { 60  ;2   ;Field     ;
                SourceExpr="Original Amount";
                Visible=FALSE;
                Editable=FALSE }

    { 12  ;2   ;Field     ;
                SourceExpr=Amount;
                Visible=FALSE;
                Editable=FALSE }

    { 14  ;2   ;Field     ;
                SourceExpr="Remaining Amount";
                Editable=FALSE }

    { 33  ;2   ;Field     ;
                CaptionML=[ENU=Appln. Remaining Amount;
                           ENG=Appln. Remaining Amount];
                SourceExpr=CalcApplnRemainingAmount("Remaining Amount");
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode }

    { 89  ;2   ;Field     ;
                SourceExpr="Amount to Apply";
                OnValidate=BEGIN
                             CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",Rec);

                             IF (xRec."Amount to Apply" = 0) OR ("Amount to Apply" = 0) AND
                                (ApplnType = ApplnType::"Applies-to ID")
                             THEN
                               SetCustApplId;
                             GET("Entry No.");
                             AmounttoApplyOnAfterValidate;
                           END;
                            }

    { 93  ;2   ;Field     ;
                CaptionML=[ENU=Appln. Amount to Apply;
                           ENG=Appln. Amount to Apply];
                SourceExpr=CalcApplnAmounttoApply("Amount to Apply");
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode }

    { 16  ;2   ;Field     ;
                SourceExpr="Due Date";
                StyleExpr=StyleTxt }

    { 18  ;2   ;Field     ;
                SourceExpr="Pmt. Discount Date";
                OnValidate=BEGIN
                             RecalcApplnAmount;
                           END;
                            }

    { 65  ;2   ;Field     ;
                SourceExpr="Pmt. Disc. Tolerance Date" }

    { 20  ;2   ;Field     ;
                SourceExpr="Original Pmt. Disc. Possible";
                Visible=FALSE }

    { 63  ;2   ;Field     ;
                SourceExpr="Remaining Pmt. Disc. Possible";
                OnValidate=BEGIN
                             RecalcApplnAmount;
                           END;
                            }

    { 51  ;2   ;Field     ;
                CaptionML=[ENU=Appln. Pmt. Disc. Possible;
                           ENG=Appln. Pmt. Disc. Possible];
                SourceExpr=CalcApplnRemainingAmount("Remaining Pmt. Disc. Possible");
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode }

    { 67  ;2   ;Field     ;
                SourceExpr="Max. Payment Tolerance" }

    { 24  ;2   ;Field     ;
                SourceExpr=Open;
                Editable=FALSE }

    { 26  ;2   ;Field     ;
                SourceExpr=Positive;
                Editable=FALSE }

    { 54  ;2   ;Field     ;
                SourceExpr="Global Dimension 1 Code" }

    { 56  ;2   ;Field     ;
                SourceExpr="Global Dimension 2 Code" }

    { 41  ;1   ;Group      }

    { 1903222401;2;Group  ;
                GroupType=FixedLayout }

    { 1901742001;3;Group  ;
                CaptionML=[ENU=Appln. Currency;
                           ENG=Appln. Currency] }

    { 48  ;4   ;Field     ;
                SourceExpr=ApplnCurrencyCode;
                TableRelation=Currency;
                Editable=FALSE }

    { 1903098801;3;Group  ;
                CaptionML=[ENU=Amount to Apply;
                           ENG=Amount to Apply] }

    { 44  ;4   ;Field     ;
                Name=AmountToApply;
                CaptionML=[ENU=Amount to Apply;
                           ENG=Amount to Apply];
                SourceExpr=AppliedAmount;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1902760701;3;Group  ;
                CaptionML=[ENU=Pmt. Disc. Amount;
                           ENG=Pmt. Disc. Amount] }

    { 91  ;4   ;Field     ;
                CaptionML=[ENU=Pmt. Disc. Amount;
                           ENG=Pmt. Disc. Amount];
                SourceExpr=-PmtDiscAmount;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1901741901;3;Group  ;
                CaptionML=[ENU=Rounding;
                           ENG=Rounding] }

    { 58  ;4   ;Field     ;
                CaptionML=[ENU=Rounding;
                           ENG=Rounding];
                SourceExpr=ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1900546301;3;Group  ;
                CaptionML=[ENU=Applied Amount;
                           ENG=Applied Amount] }

    { 97  ;4   ;Field     ;
                Name=AppliedAmount;
                CaptionML=[ENU=Applied Amount;
                           ENG=Applied Amount];
                SourceExpr=AppliedAmount + (-PmtDiscAmount) + ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1901991601;3;Group  ;
                CaptionML=[ENU=Available Amount;
                           ENG=Available Amount] }

    { 46  ;4   ;Field     ;
                CaptionML=[ENU=Available Amount;
                           ENG=Available Amount];
                SourceExpr=ApplyingAmount;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1900206001;3;Group  ;
                CaptionML=[ENU=Balance;
                           ENG=Balance] }

    { 42  ;4   ;Field     ;
                Name=ControlBalance;
                CaptionML=[ENU=Balance;
                           ENG=Balance];
                SourceExpr=AppliedAmount + (-PmtDiscAmount) + ApplyingAmount + ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1903096107;1;Part   ;
                SubPageLink=Entry No.=FIELD(Entry No.);
                PagePartID=Page9106;
                Visible=TRUE;
                PartType=Page }

  }
  CODE
  {
    VAR
      ApplyingCustLedgEntry@1035 : TEMPORARY Record 21;
      AppliedCustLedgEntry@1001 : Record 21;
      Currency@1002 : Record 4;
      CurrExchRate@1003 : Record 330;
      GenJnlLine@1004 : Record 81;
      GenJnlLine2@1005 : Record 81;
      SalesHeader@1006 : Record 36;
      ServHeader@1045 : Record 5900;
      Cust@1007 : Record 18;
      CustLedgEntry@1008 : Record 21;
      GLSetup@1009 : Record 98;
      TotalSalesLine@1010 : Record 37;
      TotalSalesLineLCY@1011 : Record 37;
      TotalServLine@1046 : Record 5902;
      TotalServLineLCY@1047 : Record 5902;
      CustEntrySetApplID@1013 : Codeunit 101;
      GenJnlApply@1014 : Codeunit 225;
      SalesPost@1015 : Codeunit 80;
      PaymentToleranceMgt@1048 : Codeunit 426;
      Navigate@1012 : Page 344;
      AppliedAmount@1017 : Decimal;
      ApplyingAmount@1018 : Decimal;
      PmtDiscAmount@1041 : Decimal;
      ApplnDate@1019 : Date;
      ApplnCurrencyCode@1020 : Code[10];
      ApplnRoundingPrecision@1021 : Decimal;
      ApplnRounding@1022 : Decimal;
      ApplnType@1023 : ' ,Applies-to Doc. No.,Applies-to ID';
      AmountRoundingPrecision@1024 : Decimal;
      VATAmount@1025 : Decimal;
      VATAmountText@1026 : Text[30];
      StyleTxt@1016 : Text;
      ProfitLCY@1027 : Decimal;
      ProfitPct@1028 : Decimal;
      CalcType@1029 : 'Direct,GenJnlLine,SalesHeader,ServHeader';
      CustEntryApplID@1031 : Code[50];
      ValidExchRate@1032 : Boolean;
      DifferentCurrenciesInAppln@1034 : Boolean;
      Text002@1037 : TextConst 'ENU=You must select an applying entry before you can post the application.;ENG=You must select an applying entry before you can post the application.';
      ShowAppliedEntries@1038 : Boolean;
      Text003@1039 : TextConst 'ENU=You must post the application from the window where you entered the applying entry.;ENG=You must post the application from the window where you entered the applying entry.';
      CannotSetAppliesToIDErr@1030 : TextConst 'ENU=You cannot set Applies-to ID while selecting Applies-to Doc. No.;ENG=You cannot set Applies-to ID while selecting Applies-to Doc. No.';
      OK@1043 : Boolean;
      EarlierPostingDateErr@1044 : TextConst 'ENU=You cannot apply and post an entry to an entry with an earlier posting date.\\Instead, post the document of type %1 with the number %2 and then apply it to the document of type %3 with the number %4.;ENG=You cannot apply and post an entry to an entry with an earlier posting date.\\Instead, post the document of type %1 with the number %2 and then apply it to the document of type %3 with the number %4.';
      PostingDone@1000 : Boolean;
      "Applies-to IDVisible"@19043506 : Boolean INDATASET;
      Text012@1036 : TextConst 'ENU=The application was successfully posted.;ENG=The application was successfully posted.';
      Text013@1033 : TextConst 'ENU=The %1 entered must not be before the %1 on the %2.;ENG=The %1 entered must not be before the %1 on the %2.';
      Text019@1040 : TextConst 'ENU=Post application process has been canceled.;ENG=Post application process has been cancelled.';

    PROCEDURE SetGenJnlLine@1(NewGenJnlLine@1000 : Record 81;ApplnTypeSelect@1001 : Integer);
    BEGIN
      GenJnlLine := NewGenJnlLine;

      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer THEN
        ApplyingAmount := GenJnlLine.Amount;
      IF GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Customer THEN
        ApplyingAmount := -GenJnlLine.Amount;
      ApplnDate := GenJnlLine."Posting Date";
      ApplnCurrencyCode := GenJnlLine."Currency Code";
      CalcType := CalcType::GenJnlLine;

      CASE ApplnTypeSelect OF
        GenJnlLine.FIELDNO("Applies-to Doc. No."):
          ApplnType := ApplnType::"Applies-to Doc. No.";
        GenJnlLine.FIELDNO("Applies-to ID"):
          ApplnType := ApplnType::"Applies-to ID";
      END;

      SetApplyingCustLedgEntry;
    END;

    PROCEDURE SetSales@2(NewSalesHeader@1000 : Record 36;VAR NewCustLedgEntry@1001 : Record 21;ApplnTypeSelect@1002 : Integer);
    VAR
      TotalAdjCostLCY@1003 : Decimal;
    BEGIN
      SalesHeader := NewSalesHeader;
      COPYFILTERS(NewCustLedgEntry);

      SalesPost.SumSalesLines(
        SalesHeader,0,TotalSalesLine,TotalSalesLineLCY,
        VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);

      CASE SalesHeader."Document Type" OF
        SalesHeader."Document Type"::"Return Order",
        SalesHeader."Document Type"::"Credit Memo":
          ApplyingAmount := -TotalSalesLine."Amount Including VAT"
        ELSE
          ApplyingAmount := TotalSalesLine."Amount Including VAT";
      END;

      ApplnDate := SalesHeader."Posting Date";
      ApplnCurrencyCode := SalesHeader."Currency Code";
      CalcType := CalcType::SalesHeader;

      CASE ApplnTypeSelect OF
        SalesHeader.FIELDNO("Applies-to Doc. No."):
          ApplnType := ApplnType::"Applies-to Doc. No.";
        SalesHeader.FIELDNO("Applies-to ID"):
          ApplnType := ApplnType::"Applies-to ID";
      END;

      SetApplyingCustLedgEntry;
    END;

    PROCEDURE SetService@8(NewServHeader@1000 : Record 5900;VAR NewCustLedgEntry@1001 : Record 21;ApplnTypeSelect@1002 : Integer);
    VAR
      ServAmountsMgt@1003 : Codeunit 5986;
      TotalAdjCostLCY@1004 : Decimal;
    BEGIN
      ServHeader := NewServHeader;
      COPYFILTERS(NewCustLedgEntry);

      ServAmountsMgt.SumServiceLines(
        ServHeader,0,TotalServLine,TotalServLineLCY,
        VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);

      CASE ServHeader."Document Type" OF
        ServHeader."Document Type"::"Credit Memo":
          ApplyingAmount := -TotalServLine."Amount Including VAT"
        ELSE
          ApplyingAmount := TotalServLine."Amount Including VAT";
      END;

      ApplnDate := ServHeader."Posting Date";
      ApplnCurrencyCode := ServHeader."Currency Code";
      CalcType := CalcType::ServHeader;

      CASE ApplnTypeSelect OF
        ServHeader.FIELDNO("Applies-to Doc. No."):
          ApplnType := ApplnType::"Applies-to Doc. No.";
        ServHeader.FIELDNO("Applies-to ID"):
          ApplnType := ApplnType::"Applies-to ID";
      END;

      SetApplyingCustLedgEntry;
    END;

    PROCEDURE SetCustLedgEntry@13(NewCustLedgEntry@1000 : Record 21);
    BEGIN
      Rec := NewCustLedgEntry;
    END;

    PROCEDURE SetApplyingCustLedgEntry@9();
    VAR
      Customer@1001 : Record 18;
      "CustEntry-Edit"@1000 : Codeunit 103;
    BEGIN
      CASE CalcType OF
        CalcType::SalesHeader:
          BEGIN
            ApplyingCustLedgEntry."Entry No." := 1;
            ApplyingCustLedgEntry."Posting Date" := SalesHeader."Posting Date";
            IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Return Order" THEN
              ApplyingCustLedgEntry."Document Type" := SalesHeader."Document Type"::"Credit Memo"
            ELSE
              ApplyingCustLedgEntry."Document Type" := SalesHeader."Document Type";
            ApplyingCustLedgEntry."Document No." := SalesHeader."No.";
            ApplyingCustLedgEntry."Customer No." := SalesHeader."Bill-to Customer No.";
            ApplyingCustLedgEntry.Description := SalesHeader."Posting Description";
            ApplyingCustLedgEntry."Currency Code" := SalesHeader."Currency Code";
            IF ApplyingCustLedgEntry."Document Type" = ApplyingCustLedgEntry."Document Type"::"Credit Memo" THEN  BEGIN
              ApplyingCustLedgEntry.Amount := -TotalSalesLine."Amount Including VAT";
              ApplyingCustLedgEntry."Remaining Amount" := -TotalSalesLine."Amount Including VAT";
            END ELSE BEGIN
              ApplyingCustLedgEntry.Amount := TotalSalesLine."Amount Including VAT";
              ApplyingCustLedgEntry."Remaining Amount" := TotalSalesLine."Amount Including VAT";
            END;
            CalcApplnAmount;
          END;
        CalcType::ServHeader:
          BEGIN
            ApplyingCustLedgEntry."Entry No." := 1;
            ApplyingCustLedgEntry."Posting Date" := ServHeader."Posting Date";
            ApplyingCustLedgEntry."Document Type" := ServHeader."Document Type";
            ApplyingCustLedgEntry."Document No." := ServHeader."No.";
            ApplyingCustLedgEntry."Customer No." := ServHeader."Bill-to Customer No.";
            ApplyingCustLedgEntry.Description := ServHeader."Posting Description";
            ApplyingCustLedgEntry."Currency Code" := ServHeader."Currency Code";
            IF ApplyingCustLedgEntry."Document Type" = ApplyingCustLedgEntry."Document Type"::"Credit Memo" THEN  BEGIN
              ApplyingCustLedgEntry.Amount := -TotalServLine."Amount Including VAT";
              ApplyingCustLedgEntry."Remaining Amount" := -TotalServLine."Amount Including VAT";
            END ELSE BEGIN
              ApplyingCustLedgEntry.Amount := TotalServLine."Amount Including VAT";
              ApplyingCustLedgEntry."Remaining Amount" := TotalServLine."Amount Including VAT";
            END;
            CalcApplnAmount;
          END;
        CalcType::Direct:
          BEGIN
            IF "Applying Entry" THEN BEGIN
              IF ApplyingCustLedgEntry."Entry No." <> 0 THEN
                CustLedgEntry := ApplyingCustLedgEntry;
              "CustEntry-Edit".RUN(Rec);
              IF "Applies-to ID" = '' THEN
                SetCustApplId;
              CALCFIELDS(Amount);
              ApplyingCustLedgEntry := Rec;
              IF CustLedgEntry."Entry No." <> 0 THEN BEGIN
                Rec := CustLedgEntry;
                "Applying Entry" := FALSE;
                SetCustApplId;
              END;
              SETFILTER("Entry No.",'<> %1',ApplyingCustLedgEntry."Entry No.");
              ApplyingAmount := ApplyingCustLedgEntry."Remaining Amount";
              ApplnDate := ApplyingCustLedgEntry."Posting Date";
              ApplnCurrencyCode := ApplyingCustLedgEntry."Currency Code";
            END;
            CalcApplnAmount;
          END;
        CalcType::GenJnlLine:
          BEGIN
            ApplyingCustLedgEntry."Entry No." := 1;
            ApplyingCustLedgEntry."Posting Date" := GenJnlLine."Posting Date";
            ApplyingCustLedgEntry."Document Type" := GenJnlLine."Document Type";
            ApplyingCustLedgEntry."Document No." := GenJnlLine."Document No.";
            IF GenJnlLine."Bal. Account Type" = GenJnlLine."Account Type"::Customer THEN BEGIN
              ApplyingCustLedgEntry."Customer No." := GenJnlLine."Bal. Account No.";
              Customer.GET(ApplyingCustLedgEntry."Customer No.");
              ApplyingCustLedgEntry.Description := Customer.Name;
            END ELSE BEGIN
              ApplyingCustLedgEntry."Customer No." := GenJnlLine."Account No.";
              ApplyingCustLedgEntry.Description := GenJnlLine.Description;
            END;
            ApplyingCustLedgEntry."Currency Code" := GenJnlLine."Currency Code";
            ApplyingCustLedgEntry.Amount := GenJnlLine.Amount;
            ApplyingCustLedgEntry."Remaining Amount" := GenJnlLine.Amount;
            CalcApplnAmount;
          END;
      END;
    END;

    PROCEDURE SetCustApplId@11();
    BEGIN
      IF (CalcType = CalcType::GenJnlLine) AND (ApplyingCustLedgEntry."Posting Date" < "Posting Date") THEN
        ERROR(
          EarlierPostingDateErr,ApplyingCustLedgEntry."Document Type",ApplyingCustLedgEntry."Document No.",
          "Document Type","Document No.");

      IF ApplyingCustLedgEntry."Entry No." <> 0 THEN
        GenJnlApply.CheckAgainstApplnCurrency(
          ApplnCurrencyCode,"Currency Code",GenJnlLine."Account Type"::Customer,TRUE);

      CustLedgEntry.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(CustLedgEntry);

      CustEntrySetApplID.SetApplId(CustLedgEntry,ApplyingCustLedgEntry,GetAppliesToID);

      CalcApplnAmount;
    END;

    LOCAL PROCEDURE GetAppliesToID@16() AppliesToID : Code[50];
    BEGIN
      CASE CalcType OF
        CalcType::GenJnlLine:
          AppliesToID := GenJnlLine."Applies-to ID";
        CalcType::SalesHeader:
          AppliesToID := SalesHeader."Applies-to ID";
        CalcType::ServHeader:
          AppliesToID := ServHeader."Applies-to ID";
      END;
    END;

    PROCEDURE CalcApplnAmount@4();
    VAR
      ExchAccGLJnlLine@1000 : Codeunit 366;
    BEGIN
      AppliedAmount := 0;
      PmtDiscAmount := 0;
      DifferentCurrenciesInAppln := FALSE;

      CASE CalcType OF
        CalcType::Direct:
          BEGIN
            FindAmountRounding;
            CustEntryApplID := USERID;
            IF CustEntryApplID = '' THEN
              CustEntryApplID := '***';

            CustLedgEntry := ApplyingCustLedgEntry;

            AppliedCustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
            AppliedCustLedgEntry.SETRANGE("Customer No.","Customer No.");
            AppliedCustLedgEntry.SETRANGE(Open,TRUE);
            AppliedCustLedgEntry.SETRANGE("Applies-to ID",CustEntryApplID);

            IF ApplyingCustLedgEntry."Entry No." <> 0 THEN BEGIN
              CustLedgEntry.CALCFIELDS("Remaining Amount");
              AppliedCustLedgEntry.SETFILTER("Entry No.",'<>%1',ApplyingCustLedgEntry."Entry No.");
            END;

            HandlChosenEntries(0,
              CustLedgEntry."Remaining Amount",
              CustLedgEntry."Currency Code",
              CustLedgEntry."Posting Date");
          END;
        CalcType::GenJnlLine:
          BEGIN
            FindAmountRounding;
            IF GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Customer THEN
              ExchAccGLJnlLine.RUN(GenJnlLine);

            CASE ApplnType OF
              ApplnType::"Applies-to Doc. No.":
                BEGIN
                  AppliedCustLedgEntry := Rec;
                  WITH AppliedCustLedgEntry DO BEGIN
                    CALCFIELDS("Remaining Amount");
                    IF "Currency Code" <> ApplnCurrencyCode THEN BEGIN
                      "Remaining Amount" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Amount");
                      "Remaining Pmt. Disc. Possible" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Pmt. Disc. Possible");
                      "Amount to Apply" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Amount to Apply");
                    END;

                    IF "Amount to Apply" <> 0 THEN
                      AppliedAmount := ROUND("Amount to Apply",AmountRoundingPrecision)
                    ELSE
                      AppliedAmount := ROUND("Remaining Amount",AmountRoundingPrecision);

                    IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(
                         GenJnlLine,AppliedCustLedgEntry,0,FALSE) AND
                       ((ABS(GenJnlLine.Amount) + ApplnRoundingPrecision >=
                         ABS(AppliedAmount - "Remaining Pmt. Disc. Possible")) OR
                        (GenJnlLine.Amount = 0))
                    THEN
                      PmtDiscAmount := "Remaining Pmt. Disc. Possible";

                    IF NOT DifferentCurrenciesInAppln THEN
                      DifferentCurrenciesInAppln := ApplnCurrencyCode <> "Currency Code";
                  END;
                  CheckRounding;
                END;
              ApplnType::"Applies-to ID":
                BEGIN
                  GenJnlLine2 := GenJnlLine;
                  AppliedCustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
                  AppliedCustLedgEntry.SETRANGE("Customer No.",GenJnlLine."Account No.");
                  AppliedCustLedgEntry.SETRANGE(Open,TRUE);
                  AppliedCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");

                  HandlChosenEntries(1,
                    GenJnlLine2.Amount,
                    GenJnlLine2."Currency Code",
                    GenJnlLine2."Posting Date");
                END;
            END;
          END;
        CalcType::SalesHeader,CalcType::ServHeader:
          BEGIN
            FindAmountRounding;

            CASE ApplnType OF
              ApplnType::"Applies-to Doc. No.":
                BEGIN
                  AppliedCustLedgEntry := Rec;
                  WITH AppliedCustLedgEntry DO BEGIN
                    CALCFIELDS("Remaining Amount");

                    IF "Currency Code" <> ApplnCurrencyCode THEN
                      "Remaining Amount" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Amount");

                    AppliedAmount := ROUND("Remaining Amount",AmountRoundingPrecision);

                    IF NOT DifferentCurrenciesInAppln THEN
                      DifferentCurrenciesInAppln := ApplnCurrencyCode <> "Currency Code";
                  END;
                  CheckRounding;
                END;
              ApplnType::"Applies-to ID":
                BEGIN
                  AppliedCustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
                  IF CalcType = CalcType::SalesHeader THEN
                    AppliedCustLedgEntry.SETRANGE("Customer No.",SalesHeader."Bill-to Customer No.")
                  ELSE
                    AppliedCustLedgEntry.SETRANGE("Customer No.",ServHeader."Bill-to Customer No.");
                  AppliedCustLedgEntry.SETRANGE(Open,TRUE);
                  AppliedCustLedgEntry.SETRANGE("Applies-to ID",GetAppliesToID);

                  HandlChosenEntries(2,
                    ApplyingAmount,
                    ApplnCurrencyCode,
                    ApplnDate);
                END;
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE CalcApplnRemainingAmount@6(Amount@1000 : Decimal) : Decimal;
    VAR
      ApplnRemainingAmount@1001 : Decimal;
    BEGIN
      ValidExchRate := TRUE;
      IF ApplnCurrencyCode = "Currency Code" THEN
        EXIT(Amount);

      IF ApplnDate = 0D THEN
        ApplnDate := "Posting Date";
      ApplnRemainingAmount :=
        CurrExchRate.ApplnExchangeAmtFCYToFCY(
          ApplnDate,"Currency Code",ApplnCurrencyCode,Amount,ValidExchRate);
      EXIT(ApplnRemainingAmount);
    END;

    LOCAL PROCEDURE CalcApplnAmounttoApply@10(AmounttoApply@1000 : Decimal) : Decimal;
    VAR
      ApplnAmounttoApply@1001 : Decimal;
    BEGIN
      ValidExchRate := TRUE;

      IF ApplnCurrencyCode = "Currency Code" THEN
        EXIT(AmounttoApply);

      IF ApplnDate = 0D THEN
        ApplnDate := "Posting Date";
      ApplnAmounttoApply :=
        CurrExchRate.ApplnExchangeAmtFCYToFCY(
          ApplnDate,"Currency Code",ApplnCurrencyCode,AmounttoApply,ValidExchRate);
      EXIT(ApplnAmounttoApply);
    END;

    LOCAL PROCEDURE FindAmountRounding@7();
    BEGIN
      IF ApplnCurrencyCode = '' THEN BEGIN
        Currency.INIT;
        Currency.Code := '';
        Currency.InitRoundingPrecision;
      END ELSE
        IF ApplnCurrencyCode <> Currency.Code THEN
          Currency.GET(ApplnCurrencyCode);

      AmountRoundingPrecision := Currency."Amount Rounding Precision";
    END;

    LOCAL PROCEDURE CheckRounding@3();
    BEGIN
      ApplnRounding := 0;

      CASE CalcType OF
        CalcType::SalesHeader,CalcType::ServHeader:
          EXIT;
        CalcType::GenJnlLine:
          IF (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Payment) AND
             (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Refund)
          THEN
            EXIT;
      END;

      IF ApplnCurrencyCode = '' THEN
        ApplnRoundingPrecision := GLSetup."Appln. Rounding Precision"
      ELSE BEGIN
        IF ApplnCurrencyCode <> "Currency Code" THEN
          Currency.GET(ApplnCurrencyCode);
        ApplnRoundingPrecision := Currency."Appln. Rounding Precision";
      END;

      IF (ABS((AppliedAmount - PmtDiscAmount) + ApplyingAmount) <= ApplnRoundingPrecision) AND DifferentCurrenciesInAppln THEN
        ApplnRounding := -((AppliedAmount - PmtDiscAmount) + ApplyingAmount);
    END;

    PROCEDURE GetCustLedgEntry@5(VAR CustLedgEntry@1000 : Record 21);
    BEGIN
      CustLedgEntry := Rec;
    END;

    LOCAL PROCEDURE FindApplyingEntry@12();
    BEGIN
      IF CalcType = CalcType::Direct THEN BEGIN
        CustEntryApplID := USERID;
        IF CustEntryApplID = '' THEN
          CustEntryApplID := '***';

        CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open);
        CustLedgEntry.SETRANGE("Customer No.","Customer No.");
        CustLedgEntry.SETRANGE("Applies-to ID",CustEntryApplID);
        CustLedgEntry.SETRANGE(Open,TRUE);
        CustLedgEntry.SETRANGE("Applying Entry",TRUE);
        IF CustLedgEntry.FINDFIRST THEN BEGIN
          CustLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
          ApplyingCustLedgEntry := CustLedgEntry;
          SETFILTER("Entry No.",'<>%1',CustLedgEntry."Entry No.");
          ApplyingAmount := CustLedgEntry."Remaining Amount";
          ApplnDate := CustLedgEntry."Posting Date";
          ApplnCurrencyCode := CustLedgEntry."Currency Code";
        END;
        CalcApplnAmount;
      END;
    END;

    LOCAL PROCEDURE HandlChosenEntries@14(Type@1000 : 'Direct,GenJnlLine,SalesHeader';CurrentAmount@1001 : Decimal;CurrencyCode@1002 : Code[10];"Posting Date"@1003 : Date);
    VAR
      AppliedCustLedgEntryTemp@1004 : TEMPORARY Record 21;
      PossiblePmtDisc@1007 : Decimal;
      OldPmtDisc@1008 : Decimal;
      CorrectionAmount@1009 : Decimal;
      CanUseDisc@1005 : Boolean;
      FromZeroGenJnl@1010 : Boolean;
    BEGIN
      IF AppliedCustLedgEntry.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          AppliedCustLedgEntryTemp := AppliedCustLedgEntry;
          AppliedCustLedgEntryTemp.INSERT;
        UNTIL AppliedCustLedgEntry.NEXT = 0;
      END ELSE
        EXIT;

      FromZeroGenJnl := (CurrentAmount = 0) AND (Type = Type::GenJnlLine);

      REPEAT
        IF NOT FromZeroGenJnl THEN
          AppliedCustLedgEntryTemp.SETRANGE(Positive,CurrentAmount < 0);
        IF AppliedCustLedgEntryTemp.FINDFIRST THEN BEGIN
          ExchangeAmountsOnLedgerEntry(Type,CurrencyCode,AppliedCustLedgEntryTemp,"Posting Date");

          CASE Type OF
            Type::Direct:
              CanUseDisc := PaymentToleranceMgt.CheckCalcPmtDiscCust(CustLedgEntry,AppliedCustLedgEntryTemp,0,FALSE,FALSE);
            Type::GenJnlLine:
              CanUseDisc := PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(GenJnlLine2,AppliedCustLedgEntryTemp,0,FALSE)
            ELSE
              CanUseDisc := FALSE;
          END;

          IF CanUseDisc AND
             (ABS(AppliedCustLedgEntryTemp."Amount to Apply") >= ABS(AppliedCustLedgEntryTemp."Remaining Amount" -
                AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible"))
          THEN BEGIN
            IF (ABS(CurrentAmount) > ABS(AppliedCustLedgEntryTemp."Remaining Amount" -
                  AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible"))
            THEN BEGIN
              PmtDiscAmount := PmtDiscAmount + AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
              CurrentAmount := CurrentAmount + AppliedCustLedgEntryTemp."Remaining Amount" -
                AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
            END ELSE
              IF (ABS(CurrentAmount) = ABS(AppliedCustLedgEntryTemp."Remaining Amount" -
                    AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible"))
              THEN BEGIN
                PmtDiscAmount := PmtDiscAmount + AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible" + PossiblePmtDisc;
                CurrentAmount := CurrentAmount + AppliedCustLedgEntryTemp."Remaining Amount" -
                  AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible" - PossiblePmtDisc;
                PossiblePmtDisc := 0;
                AppliedAmount := AppliedAmount + CorrectionAmount;
              END ELSE
                IF FromZeroGenJnl THEN BEGIN
                  PmtDiscAmount := PmtDiscAmount + AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                  CurrentAmount := CurrentAmount +
                    AppliedCustLedgEntryTemp."Remaining Amount" - AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                END ELSE BEGIN
                  IF (CurrentAmount + AppliedCustLedgEntryTemp."Remaining Amount" >= 0) <> (CurrentAmount >= 0) THEN BEGIN
                    PmtDiscAmount := PmtDiscAmount + PossiblePmtDisc;
                    AppliedAmount := AppliedAmount + CorrectionAmount;
                  END;
                  CurrentAmount := CurrentAmount + AppliedCustLedgEntryTemp."Remaining Amount" -
                    AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                  PossiblePmtDisc := AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                END;
          END ELSE BEGIN
            IF ((CurrentAmount - PossiblePmtDisc + AppliedCustLedgEntryTemp."Amount to Apply") * CurrentAmount) <= 0 THEN BEGIN
              PmtDiscAmount := PmtDiscAmount + PossiblePmtDisc;
              CurrentAmount := CurrentAmount - PossiblePmtDisc;
              PossiblePmtDisc := 0;
              AppliedAmount := AppliedAmount + CorrectionAmount;
            END;
            CurrentAmount := CurrentAmount + AppliedCustLedgEntryTemp."Amount to Apply";
          END;
        END ELSE BEGIN
          AppliedCustLedgEntryTemp.SETRANGE(Positive);
          AppliedCustLedgEntryTemp.FINDFIRST;
          ExchangeAmountsOnLedgerEntry(Type,CurrencyCode,AppliedCustLedgEntryTemp,"Posting Date");
        END;

        IF OldPmtDisc <> PmtDiscAmount THEN
          AppliedAmount := AppliedAmount + AppliedCustLedgEntryTemp."Remaining Amount"
        ELSE
          AppliedAmount := AppliedAmount + AppliedCustLedgEntryTemp."Amount to Apply";
        OldPmtDisc := PmtDiscAmount;

        IF PossiblePmtDisc <> 0 THEN
          CorrectionAmount := AppliedCustLedgEntryTemp."Remaining Amount" - AppliedCustLedgEntryTemp."Amount to Apply"
        ELSE
          CorrectionAmount := 0;

        IF NOT DifferentCurrenciesInAppln THEN
          DifferentCurrenciesInAppln := ApplnCurrencyCode <> AppliedCustLedgEntryTemp."Currency Code";

        AppliedCustLedgEntryTemp.DELETE;
        AppliedCustLedgEntryTemp.SETRANGE(Positive);

      UNTIL NOT AppliedCustLedgEntryTemp.FINDFIRST;
      PmtDiscAmount += PossiblePmtDisc;
      CheckRounding;
    END;

    LOCAL PROCEDURE AmounttoApplyOnAfterValidate@19038179();
    BEGIN
      IF ApplnType <> ApplnType::"Applies-to Doc. No." THEN BEGIN
        CalcApplnAmount;
        CurrPage.UPDATE(FALSE);
      END;
    END;

    LOCAL PROCEDURE RecalcApplnAmount@19051222();
    BEGIN
      CurrPage.UPDATE(TRUE);
      CalcApplnAmount;
    END;

    LOCAL PROCEDURE LookupOKOnPush@19031339();
    BEGIN
      OK := TRUE;
    END;

    LOCAL PROCEDURE PostDirectApplication@15(PreviewMode@1005 : Boolean);
    VAR
      CustEntryApplyPostedEntries@1000 : Codeunit 226;
      PostApplication@1002 : Page 579;
      ApplicationDate@1001 : Date;
      NewApplicationDate@1003 : Date;
      NewDocumentNo@1004 : Code[20];
    BEGIN
      IF CalcType = CalcType::Direct THEN BEGIN
        IF ApplyingCustLedgEntry."Entry No." <> 0 THEN BEGIN
          Rec := ApplyingCustLedgEntry;
          ApplicationDate := CustEntryApplyPostedEntries.GetApplicationDate(Rec);

          PostApplication.SetValues("Document No.",ApplicationDate);
          IF ACTION::OK = PostApplication.RUNMODAL THEN BEGIN
            PostApplication.GetValues(NewDocumentNo,NewApplicationDate);
            IF NewApplicationDate < ApplicationDate THEN
              ERROR(Text013,FIELDCAPTION("Posting Date"),TABLECAPTION);
          END ELSE
            ERROR(Text019);

          IF PreviewMode THEN
            CustEntryApplyPostedEntries.PreviewApply(Rec,NewDocumentNo,NewApplicationDate)
          ELSE
            CustEntryApplyPostedEntries.Apply(Rec,NewDocumentNo,NewApplicationDate);

          IF NOT PreviewMode THEN BEGIN
            MESSAGE(Text012);
            PostingDone := TRUE;
            CurrPage.CLOSE;
          END;
        END ELSE
          ERROR(Text002);
      END ELSE
        ERROR(Text003);
    END;

    LOCAL PROCEDURE ExchangeAmountsOnLedgerEntry@20(Type@1003 : 'Direct,GenJnlLine,SalesHeader';CurrencyCode@1000 : Code[10];VAR CalcCustLedgEntry@1001 : Record 21;PostingDate@1004 : Date);
    VAR
      CalculateCurrency@1002 : Boolean;
    BEGIN
      CalcCustLedgEntry.CALCFIELDS("Remaining Amount");

      IF Type = Type::Direct THEN
        CalculateCurrency := ApplyingCustLedgEntry."Entry No." <> 0
      ELSE
        CalculateCurrency := TRUE;

      IF (CurrencyCode <> CalcCustLedgEntry."Currency Code") AND CalculateCurrency THEN BEGIN
        CalcCustLedgEntry."Remaining Amount" :=
          CurrExchRate.ExchangeAmount(
            CalcCustLedgEntry."Remaining Amount",
            CalcCustLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
        CalcCustLedgEntry."Remaining Pmt. Disc. Possible" :=
          CurrExchRate.ExchangeAmount(
            CalcCustLedgEntry."Remaining Pmt. Disc. Possible",
            CalcCustLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
        CalcCustLedgEntry."Amount to Apply" :=
          CurrExchRate.ExchangeAmount(
            CalcCustLedgEntry."Amount to Apply",
            CalcCustLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
      END;
    END;

    BEGIN
    END.
  }
}

