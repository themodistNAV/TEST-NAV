OBJECT Codeunit 9062671 POS JSON Url Functions
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NH2016.15;
  }
  PROPERTIES
  {
    OnRun=VAR
            SH@1000000000 : Record 36;
            RecRef@1000000001 : RecordRef;
          BEGIN
            //TestFunction();
          END;

  }
  CODE
  {
    VAR
      DynamicsJSONMgt@1000000000 : Codeunit 9062670;
      TmpStr@1000000001 : Text;

    PROCEDURE CreateScannerUrl@1000000001(VAR RecRef@1000000000 : RecordRef;ScanAction@1000000010 : Code[10];Codeunit@1000000011 : Integer) : Text;
    VAR
      MyJson@1000000001 : Text;
      TextConverter@1000000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      SystemDotText@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoder";
      MemoryStream@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      BigText@1000000007 : BigText;
      Bytes@1000000005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      TextEncoding@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.ASCIIEncoding";
      MyBigStr@1000000008 : Text;
      ScannerSetup@1000000009 : Record 9062824;
    BEGIN
      ScannerSetup.GET;

      DynamicsJSONMgt.StartJSon;
      DynamicsJSONMgt.AddToJSon('username',ScannerSetup."Web Service User Name");
      DynamicsJSONMgt.AddToJSon('password',ScannerSetup."Web Serivce Password");
      DynamicsJSONMgt.AddToJSon('navscanpostingurl',ScannerSetup."Scanner Input Url");
      DynamicsJSONMgt.AddToJSon('positiontext',RecRef.GETPOSITION);
      DynamicsJSONMgt.AddToJSon('tableid',RecRef.NUMBER);
      DynamicsJSONMgt.AddToJSon('domain',ScannerSetup."Web Service Domain");
      DynamicsJSONMgt.AddToJSon('scanaction',ScanAction);
      DynamicsJSONMgt.AddToJSon('codeunit',Codeunit);
      DynamicsJSONMgt.AddToJSon('codeuniturl',ScannerSetup."Scanner Processing Url");
      DynamicsJSONMgt.AddToJSon('userid',USERID);
      DynamicsJSONMgt.EndJSon;

      MyJson := DynamicsJSONMgt.GetJSon;

      //Now convert it to base 64

      Bytes := Bytes;
      TextEncoding := TextEncoding.ASCIIEncoding;
      Bytes := TextEncoding.GetBytes(MyJson);
      MyBigStr := TextConverter.ToBase64String(Bytes);

      MyBigStr := 'tnpscanner://?' + MyBigStr;

      EXIT(MyBigStr);
    END;

    LOCAL PROCEDURE TestFunction@1000000003();
    VAR
      eTestText@1000000000 : TextConst 'ENU=this is a long piece of test text;ENG=this is a long piece of test text';
    BEGIN
      TmpStr := ConvertTextToBase64(eTestText);
      MESSAGE(TmpStr);
      TmpStr := ConvertBase64ToText(TmpStr);
      MESSAGE(TmpStr);
    END;

    LOCAL PROCEDURE ConvertTextToBase64@1000000000(TextIn@1000000000 : Text) : Text;
    VAR
      TextConverter@1000000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Bytes@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      TextEncoding@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.ASCIIEncoding";
      MyBigStr@1000000002 : Text;
    BEGIN
      //Take a string and conver to Base 64
      Bytes := Bytes;
      TextEncoding := TextEncoding.ASCIIEncoding;
      Bytes := TextEncoding.GetBytes(TextIn);
      MyBigStr := TextConverter.ToBase64String(Bytes);

      EXIT(MyBigStr);
    END;

    LOCAL PROCEDURE ConvertBase64ToText@1000000002(Bas64StrIn@1000000000 : Text) TextOut : Text;
    VAR
      TextConverter@1000000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      SystemDotText@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoder";
      MemoryStream@1000000005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      BigText@1000000004 : BigText;
      Bytes@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      TextEncoding@1000000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.ASCIIEncoding";
      MyBigStr@1000000001 : Text;
    BEGIN
      //Not yet implemented.
      Bytes := Bytes;
      TextConverter := TextConverter;
      Bytes := TextConverter.FromBase64String(Bas64StrIn);

      //convert bytes to text.
      TextEncoding := TextEncoding.ASCIIEncoding;
      TextOut := TextEncoding.GetString(Bytes);
    END;

    BEGIN
    {
      //This creates the url that is shown on the phone / tablet client that is used as a custom url scheme to fire the barcode scanning application on the ipad / phone etc.
      //DOC NH2016.12 BM 11/02/2016 - Created
      //DOC NH2016.15 JH 26/04/2016 - CfMD amendments
    }
    END.
  }
}

