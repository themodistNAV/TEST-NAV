OBJECT Table 9062337 Planning Board Header
{
  OBJECT-PROPERTIES
  {
    Date=26/07/16;
    Time=12:36:26 PM;
    Version List=NA2016.16.1;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD(Code);
               CreateTables();
               CreateEvents();
               CreateMenuItems();
               CreateTheme();
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               EnhancedPermissionsMgt.CheckPlanningBoardModifyPermission(Rec, USERID());
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               Rec.TESTFIELD(Status, Rec.Status::Open);
               EnhancedPermissionsMgt.CheckPlanningBoardModifyPermission(Rec, USERID());

               PlanningBoardTable.RESET();
               PlanningBoardTable.SETRANGE("Planning Board Code", Rec.Code);
               PlanningBoardTable.DELETEALL(TRUE);

               PlanningBoardTableLink.RESET();
               PlanningBoardTableLink.SETRANGE("Planning Board Code", Rec.Code);
               PlanningBoardTableLink.DELETEALL(TRUE);

               PlanningBoardMenuItem.RESET();
               PlanningBoardMenuItem.SETRANGE("Planning Board Code", Rec.Code);
               PlanningBoardMenuItem.SETRANGE("Planning Board Table Type", PlanningBoardMenuItem."Planning Board Table Type"::" ");
               PlanningBoardMenuItem.DELETEALL(TRUE);

               PlanningBoardEvent.RESET();
               PlanningBoardEvent.SETRANGE("Planning Board Code", Rec.Code);
               PlanningBoardEvent.DELETEALL(TRUE);

               PlanningBoardTheme.RESET();
               PlanningBoardTheme.SETRANGE("Planning Board Code", Rec.Code);
               PlanningBoardTheme.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               EnhancedPermissionsMgt.CheckPlanningBoardModifyPermission(Rec, USERID());
             END;

    CaptionML=[ENU=Planning Board Header;
               ENG=Planning Board Header];
    LookupPageID=Page9062400;
    DrillDownPageID=Page9062400;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;OnValidate=BEGIN
                                                                TnpToolkit.CodeToName(Rec.Code, Rec.Name);
                                                                Rec.VALIDATE(Name);
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              ENG=Code] }
    { 10  ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 11  ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 20  ;   ;Current Date Formula;DateFormula   ;CaptionML=[ENU=Current Date Formula;
                                                              ENG=Current Date Formula] }
    { 21  ;   ;Start Date Formula  ;DateFormula   ;InitValue=-1M-CM;
                                                   CaptionML=[ENU=Start Date Formula;
                                                              ENG=Start Date Formula] }
    { 22  ;   ;End Date Formula    ;DateFormula   ;InitValue=+2M+CM;
                                                   CaptionML=[ENU=End Date Formula;
                                                              ENG=End Date Formula] }
    { 23  ;   ;Previous / Next Week;Boolean       ;CaptionML=[ENU=Previous / Next Week;
                                                              ENG=Previous / Next Week] }
    { 24  ;   ;Previous / Next Month;Boolean      ;InitValue=Yes;
                                                   CaptionML=[ENU=Previous / Next Month;
                                                              ENG=Previous / Next Month] }
    { 25  ;   ;Previous / Next Quarter;Boolean    ;InitValue=Yes;
                                                   CaptionML=[ENU=Previous / Next Quarter;
                                                              ENG=Previous / Next Quarter] }
    { 26  ;   ;Previous / Next Year;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Previous / Next Year;
                                                              ENG=Previous / Next Year] }
    { 27  ;   ;Maximum Period Formula;DateFormula ;InitValue=+1Y;
                                                   CaptionML=[ENU=Maximum Period Formula;
                                                              ENG=Maximum Period Formula] }
    { 30  ;   ;No. of Menu Items   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Planning Board Menu Item" WHERE (Planning Board Code=FIELD(Code),
                                                                                                       Planning Board Table Type=CONST(" ")));
                                                   CaptionML=[ENU=No. of Menu Items;
                                                              ENG=No. of Menu Items];
                                                   Editable=No }
    { 40  ;   ;Action Handling Codeunit ID;Integer;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   OnValidate=BEGIN
                                                                Rec.CALCFIELDS("Action Handling Codeunit Name");
                                                              END;

                                                   CaptionML=[ENU=Action Handling Codeunit ID;
                                                              ENG=Action Handling Codeunit ID] }
    { 41  ;   ;Action Handling Codeunit Name;Text30;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Codeunit),
                                                                                                  Object ID=FIELD(Action Handling Codeunit ID)));
                                                   CaptionML=[ENU=Action Handling Codeunit Name;
                                                              ENG=Action Handling Codeunit Name];
                                                   Editable=No }
    { 50  ;   ;Use Foreground Style Cache;Boolean ;CaptionML=[ENU=Use Foreground Style Cache;
                                                              ENG=Use Foreground Style Cache] }
    { 51  ;   ;Use Background Style Cache;Boolean ;CaptionML=[ENU=Use Background Style Cache;
                                                              ENG=Use Background Style Cache] }
    { 52  ;   ;Use Border Style Cache;Boolean     ;CaptionML=[ENU=Use Border Style Cache;
                                                              ENG=Use Border Style Cache] }
    { 60  ;   ;Status              ;Option        ;InitValue=Open;
                                                   CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=" ,Open,Released";
                                                                    ENG=" ,Open,Released"];
                                                   OptionString=[ ,Open,Released] }
    { 71  ;   ;Cloning Enabled     ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Cloning Enabled;
                                                              ENG=Cloning Enabled] }
    { 72  ;   ;Dragging Enabled    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Dragging Enabled;
                                                              ENG=Dragging Enabled] }
    { 73  ;   ;Resource Changing Enabled;Boolean  ;CaptionML=[ENU=Resource Changing Enabled;
                                                              ENG=Resource Changing Enabled] }
    { 74  ;   ;Resizing Enabled    ;Boolean       ;OnValidate=VAR
                                                                eResizeImpossibleForSingle@1000000000 : TextConst 'ENU=Resizing is impossible if entry table "%1" is ''%2''.;ENG=Resizing is impossible if entry table "%1" is ''%2''.';
                                                              BEGIN
                                                                IF (Rec."Resizing Enabled") THEN
                                                                BEGIN
                                                                  PlanningBoardTable.GET(Rec.Code, PlanningBoardTable."Table Type"::Entry);
                                                                  IF (PlanningBoardTable.IsDateTimeSingle()) THEN
                                                                    ERROR(eResizeImpossibleForSingle, PlanningBoardTable.FIELDCAPTION("Date Time Fields"), PlanningBoardTable."Date Time Fields");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Resizing Enabled;
                                                              ENG=Resizing Enabled] }
    { 80  ;   ;HTML Template Code  ;Code50        ;TableRelation="Html Control Template";
                                                   OnValidate=BEGIN
                                                                IF (Rec."HTML Template Code" <> xRec."HTML Template Code") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("HTML Day View Code", '');
                                                                  Rec.VALIDATE("HTML Work Week View Code", '');
                                                                  Rec.VALIDATE("HTML Week View Code", '');
                                                                  Rec.VALIDATE("HTML Month View Code", '');
                                                                  Rec.VALIDATE("HTML Timeline View Code", '');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=HTML Template Code;
                                                              ENG=HTML Template Code] }
    { 90  ;   ;HTML Day View Code  ;Code50        ;TableRelation="Html Control View".Code WHERE (Template Code=FIELD(HTML Template Code));
                                                   CaptionML=[ENU=HTML Day View Code;
                                                              ENG=HTML Day View Code] }
    { 91  ;   ;HTML Work Week View Code;Code50    ;TableRelation="Html Control View".Code WHERE (Template Code=FIELD(HTML Template Code));
                                                   CaptionML=[ENU=HTML Work Week View Code;
                                                              ENG=HTML Work Week View Code] }
    { 92  ;   ;HTML Week View Code ;Code50        ;TableRelation="Html Control View".Code WHERE (Template Code=FIELD(HTML Template Code));
                                                   CaptionML=[ENU=HTML Week View Code;
                                                              ENG=HTML Week View Code] }
    { 93  ;   ;HTML Month View Code;Code50        ;TableRelation="Html Control View".Code WHERE (Template Code=FIELD(HTML Template Code));
                                                   CaptionML=[ENU=HTML Month View Code;
                                                              ENG=HTML Month View Code] }
    { 94  ;   ;HTML Timeline View Code;Code50     ;TableRelation="Html Control View".Code WHERE (Template Code=FIELD(HTML Template Code));
                                                   CaptionML=[ENU=HTML Timeline View Code;
                                                              ENG=HTML Timeline View Code] }
    { 100 ;   ;Non-Empty Resources ;Boolean       ;CaptionML=[ENU=Non-Empty Resources;
                                                              ENG=Non-Empty Resources] }
    { 101 ;   ;Non-Empty Resources Optional;Boolean;
                                                   CaptionML=[ENU=Non-Empty Resources Optional;
                                                              ENG=Non-Empty Resources Optional] }
    { 120 ;   ;Work Week View Full Week;Boolean   ;CaptionML=[ENU=Work Week View Full Week;
                                                              ENG=Work Week View Full Week] }
    { 130 ;   ;Start Time          ;Time          ;CaptionML=[ENU=Start Time;
                                                              ENG=Start Time] }
    { 131 ;   ;End Time            ;Time          ;CaptionML=[ENG=End Time;
                                                              ENB=End Time] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PlanningBoardEvent@1000000004 : Record 9062345;
      PlanningBoardMenuItem@1000000001 : Record 9062343;
      PlanningBoardSetup@1000000000 : Record 9062335;
      PlanningBoardTable@9062241 : Record 9062338;
      PlanningBoardTableLink@9062230 : Record 9062339;
      PlanningBoardTheme@1000000006 : Record 9062350;
      EnhancedPermissionsMgt@1000000007 : Codeunit 9062277;
      ObjectFieldToolkit@1000000003 : Codeunit 9062343;
      PlanningBoardToolkit@1000000002 : Codeunit 9062301;
      TnpToolkit@9062229 : Codeunit 9062230;
      tCantDetermineType@9062236 : TextConst 'ENU=Can''t determine type for "%1". Please set the "%2" first.;ENG=Can''t determine type for "%1". Please set the "%2" first.';
      SystemActivity@1000000005 : Boolean;

    PROCEDURE "--- General ---"@9062231();
    BEGIN
    END;

    PROCEDURE SetSystemActivity@1000000008(pSystemActivity@1000000000 : Boolean);
    BEGIN
      //DOC NA2016.12 - Setting "System Activity" flag (certain UI-like activities are not fired)
      //  -> pSystemActivity: The flag

      SystemActivity := pSystemActivity;
    END;

    PROCEDURE InitialiseNewRecord@9062229();
    BEGIN
      //DOC NA2016.12 - Initialising new record

      PlanningBoardSetup.VerifyAndGet();

      Rec.VALIDATE("Current Date Formula", PlanningBoardSetup."Current Date Formula");
      Rec.VALIDATE("Start Date Formula", PlanningBoardSetup."Start Date Formula");
      Rec.VALIDATE("End Date Formula", PlanningBoardSetup."End Date Formula");
      Rec.VALIDATE("Maximum Period Formula", PlanningBoardSetup."Maximum Period Formula");
      Rec.VALIDATE("Previous / Next Week", PlanningBoardSetup."Previous / Next Week");
      Rec.VALIDATE("Previous / Next Month", PlanningBoardSetup."Previous / Next Month");
      Rec.VALIDATE("Previous / Next Quarter", PlanningBoardSetup."Previous / Next Quarter");
      Rec.VALIDATE("Previous / Next Year", PlanningBoardSetup."Previous / Next Year");

      Rec.VALIDATE("Use Foreground Style Cache", PlanningBoardSetup."Use Foreground Style Cache");
      Rec.VALIDATE("Use Background Style Cache", PlanningBoardSetup."Use Background Style Cache");
      Rec.VALIDATE("Use Border Style Cache", PlanningBoardSetup."Use Border Style Cache");

      Rec.VALIDATE("HTML Template Code", PlanningBoardSetup."HTML Template Code");
      Rec.VALIDATE("HTML Day View Code", PlanningBoardSetup."HTML Day View Code");
      Rec.VALIDATE("HTML Work Week View Code", PlanningBoardSetup."HTML Work Week View Code");
      Rec.VALIDATE("HTML Week View Code", PlanningBoardSetup."HTML Week View Code");
      Rec.VALIDATE("HTML Month View Code", PlanningBoardSetup."HTML Month View Code");
      Rec.VALIDATE("HTML Timeline View Code", PlanningBoardSetup."HTML Timeline View Code");

      Rec.VALIDATE("Non-Empty Resources", PlanningBoardSetup."Non-Empty Resources");
      Rec.VALIDATE("Non-Empty Resources Optional", PlanningBoardSetup."Non-Empty Resources Optional");

      Rec.VALIDATE("Start Time", TnpToolkit.DefaultTime(PlanningBoardSetup."Start Time", 000000T));
      Rec.VALIDATE("End Time", TnpToolkit.DefaultTime(PlanningBoardSetup."End Time", 235959.5T));
    END;

    LOCAL PROCEDURE CreateTables@9062237();
    VAR
      lTableType@9062229 : Integer;
    BEGIN
      //DOC NA2016.12 - Creating tables for the planning board

      IF (SystemActivity) THEN
        EXIT;

      FOR lTableType := PlanningBoardTable."Table Type"::Resource TO PlanningBoardTable."Table Type"::Entry DO
        IF ( NOT (PlanningBoardTable.GET(Rec.Code, lTableType))) THEN
        BEGIN
          CLEAR(PlanningBoardTable);
          PlanningBoardTable.INIT();
          PlanningBoardTable."Planning Board Code" := Rec.Code;
          PlanningBoardTable.VALIDATE("Table Type", lTableType);
          PlanningBoardTable.InitialiseNewRecord();
          PlanningBoardTable.INSERT(TRUE);
        END;
    END;

    PROCEDURE Show@1000000013();
    VAR
      lPlanningBoardContext@1000000000 : TEMPORARY Record 9062349;
    BEGIN
      //DOC NA2016.12 - Showing the planning board

      lPlanningBoardContext.RESET();
      lPlanningBoardContext.SETRANGE("Planning Board Code", Rec.Code);
      PAGE.RUN(PAGE::"Planning Board", lPlanningBoardContext);
    END;

    PROCEDURE GetStyle@1000000014() : Text;
    BEGIN
      //DOC NA2016.12 - Returning style
      //  <- The style

      CASE (Rec.Status) OF
        Rec.Status::Released:
          EXIT('StrongAccent')
        ELSE
          EXIT('Standard');
      END;
    END;

    PROCEDURE "--- Navigation ---"@9062230();
    BEGIN
    END;

    PROCEDURE EditResourceTable@9062232();
    BEGIN
      //DOC NA2016.12 - Editing resource table

      EditTable(PlanningBoardTable."Table Type"::Resource);
    END;

    PROCEDURE EditEntryTable@9062233();
    BEGIN
      //DOC NA2016.12 - Editing entry table

      EditTable(PlanningBoardTable."Table Type"::Entry);
    END;

    LOCAL PROCEDURE EditTable@9062234(pTableType@9062229 : Integer);
    VAR
      lPlanningBoardTableCard@1000000000 : Page 9062402;
    BEGIN
      //DOC NA2016.12 - Editing a table
      //  -> pTableType: Table type

      PlanningBoardTable.RESET();
      PlanningBoardTable.GET(Rec.Code, pTableType);
      PlanningBoardTable.SETRECFILTER();

      lPlanningBoardTableCard.SETTABLEVIEW(PlanningBoardTable);
      lPlanningBoardTableCard.EDITABLE(Rec.Status = Rec.Status::Open);
      lPlanningBoardTableCard.RUNMODAL();
    END;

    PROCEDURE "--- Menu Items ---"@1000000000();
    BEGIN
    END;

    PROCEDURE GetMenuItemsText@1000000001() : Text;
    VAR
      lText@1000000000 : Text;
      eName@1000000001 : TextConst 'ENU=menu item;ENG=menu item';
    BEGIN
      //DOC NA2016.12 - Returning menu items text
      //  <- The text

      Rec.CALCFIELDS("No. of Menu Items");
      EXIT(PlanningBoardToolkit.IntegerText(eName, Rec."No. of Menu Items"));
    END;

    PROCEDURE EditMenuItems@1000000002(pEditable@1000000001 : Boolean);
    VAR
      lPlanningBoardMenuItems@1000000000 : Page 9062407;
    BEGIN
      //DOC NA2016.12 - Editing menu items
      //  -> pEditable: Editable flag

      PlanningBoardMenuItem.RESET();
      PlanningBoardMenuItem.FILTERGROUP(2);
      PlanningBoardMenuItem.SETRANGE("Planning Board Code", Rec.Code);
      PlanningBoardMenuItem.SETRANGE("Planning Board Table Type", PlanningBoardMenuItem."Planning Board Table Type"::" ");
      PlanningBoardMenuItem.FILTERGROUP(0);

      lPlanningBoardMenuItems.SETTABLEVIEW(PlanningBoardMenuItem);
      lPlanningBoardMenuItems.EDITABLE(pEditable);
      lPlanningBoardMenuItems.RUNMODAL();
    END;

    LOCAL PROCEDURE CreateMenuItems@1000000009();
    VAR
      lPlanningBoardMenuToolkit@1000000000 : Codeunit 9062306;
    BEGIN
      //DOC NA2016.12 - Creating menu items

      IF (SystemActivity) THEN
        EXIT;

      lPlanningBoardMenuToolkit.ProposeMenuItems(Rec);
    END;

    PROCEDURE "--- Events ---"@1000000006();
    BEGIN
    END;

    PROCEDURE ValidateEventHandlingCodeunitText@1000000004(pText@1000000000 : Text) : Boolean;
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2016.12 - Validating command handling codeunit text
      //  <> pText: The text
      //  <- TRUE = Codeunit changed, FALSE = Not

      lResult := TRUE;

      IF (Rec.Status = Rec.Status::Open) THEN
      BEGIN
        xRec."Action Handling Codeunit ID" := Rec."Action Handling Codeunit ID";
        ObjectFieldToolkit.ValidateCodeunitName(Rec."Action Handling Codeunit ID", pText, FALSE);
        IF (Rec."Action Handling Codeunit ID" <> xRec."Action Handling Codeunit ID") THEN
        BEGIN
          Rec.VALIDATE("Action Handling Codeunit ID");
          lResult := TRUE;
        END;
      END;

      EXIT(lResult);
    END;

    PROCEDURE EventHandlingCodeunitLookup@1000000005() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.12 - Performing event handling codeunit lookup
      //  <- TRUE = Codeunit changed, FALSE = Not

      lResult := TRUE;

      xRec."Action Handling Codeunit ID" := Rec."Action Handling Codeunit ID";
      IF (ObjectFieldToolkit.CodeunitLookup(Rec."Action Handling Codeunit ID")) THEN
        IF (Rec.Status = Rec.Status::Open) THEN
          IF (Rec."Action Handling Codeunit ID" <> xRec."Action Handling Codeunit ID") THEN
          BEGIN
            Rec.VALIDATE("Action Handling Codeunit ID");
            lResult := TRUE;
          END;

      EXIT(lResult);
    END;

    PROCEDURE EditEvents@1000000003();
    VAR
      lPlanningBoardEvents@1000000001 : Page 9062409;
    BEGIN
      //DOC NA2016.12 - Editing events

      CreateEvents();

      PlanningBoardEvent.RESET();
      PlanningBoardEvent.FILTERGROUP(2);
      PlanningBoardEvent.SETRANGE("Planning Board Code", Rec.Code);
      PlanningBoardEvent.FILTERGROUP(0);

      lPlanningBoardEvents.SETTABLEVIEW(PlanningBoardEvent);
      lPlanningBoardEvents.EDITABLE(Rec.Status = Rec.Status::Open);
      lPlanningBoardEvents.RUNMODAL();
    END;

    LOCAL PROCEDURE CreateEvents@1000000007();
    VAR
      lPlanningBoardCommandToolkit@1000000000 : Codeunit 9062305;
    BEGIN
      //DOC NA2016.12 - Creating events (if they are not there)

      IF (SystemActivity) THEN
        EXIT;

      lPlanningBoardCommandToolkit.VerifyEvents(Rec);
    END;

    LOCAL PROCEDURE "--- Theme ---"@1000000010();
    BEGIN
    END;

    LOCAL PROCEDURE CreateTheme@1000000011();
    VAR
      lPlanningBoardThemeToolkit@1000000000 : Codeunit 9062311;
    BEGIN
      //DOC NA2016.12 - Creating a theme

      IF (SystemActivity) THEN
        EXIT;

      lPlanningBoardThemeToolkit.CreateTheme(Rec);
    END;

    PROCEDURE EditTheme@1000000012();
    VAR
      lPlanningBoardThemeCard@1000000001 : Page 9062413;
    BEGIN
      //DOC NA2016.12 - Editing a theme

      PlanningBoardTheme.GET(Rec.Code);
      PlanningBoardTheme.FILTERGROUP(2);
      PlanningBoardTheme.SETRECFILTER();
      PlanningBoardTheme.FILTERGROUP(0);

      lPlanningBoardThemeCard.SETTABLEVIEW(PlanningBoardTheme);
      lPlanningBoardThemeCard.EDITABLE(Rec.Status = Rec.Status::Open);
      lPlanningBoardThemeCard.RUNMODAL();
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 23/09/2015 - Created
      //DOC NA2016.12 JH 27/01/2016 - HTML templates live
      //DOC NA2016.15 JH 05/05/2016 - Enhanced permissions
      //DOC NA2016.16.1 JH 26/07/2016 - "Work Week View Full Week" added, start / end time added
    }
    END.
  }
}

