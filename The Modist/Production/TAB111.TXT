OBJECT Table 111 Sales Shipment Line
{
  OBJECT-PROPERTIES
  {
    Date=17/12/18;
    Time=[ 1:45:47 PM];
    Modified=Yes;
    Version List=NAVW19.00.00.44365,NS2016.16,M0063,M0062,OP9031,TM0020,TM0033;
  }
  PROPERTIES
  {
    Permissions=TableData 32=r,
                TableData 5802=r;
    OnDelete=VAR
               ServItem@1000 : Record 5940;
               SalesDocLineComments@1001 : Record 44;
             BEGIN
               ServItem.RESET;
               ServItem.SETCURRENTKEY("Sales/Serv. Shpt. Document No.","Sales/Serv. Shpt. Line No.");
               ServItem.SETRANGE("Sales/Serv. Shpt. Document No.","Document No.");
               ServItem.SETRANGE("Sales/Serv. Shpt. Line No.","Line No.");
               ServItem.SETRANGE("Shipment Type",ServItem."Shipment Type"::Sales);
               IF ServItem.FIND('-') THEN
                 REPEAT
                   ServItem.VALIDATE("Sales/Serv. Shpt. Document No.",'');
                   ServItem.VALIDATE("Sales/Serv. Shpt. Line No.",0);
                   ServItem.MODIFY(TRUE);
                 UNTIL ServItem.NEXT = 0;

               SalesDocLineComments.SETRANGE("Document Type",SalesDocLineComments."Document Type"::Shipment);
               SalesDocLineComments.SETRANGE("No.","Document No.");
               SalesDocLineComments.SETRANGE("Document Line No.","Line No.");
               IF NOT SalesDocLineComments.ISEMPTY THEN
                 SalesDocLineComments.DELETEALL;

               PostedATOLink.DeleteAsmFromSalesShptLine(Rec);
             END;

    CaptionML=[ENU=Sales Shipment Line;
               ENG=Sales Shipment Line];
    LookupPageID=Page525;
    DrillDownPageID=Page525;
  }
  FIELDS
  {
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENG=Sell-to Customer No.];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Sales Shipment Header";
                                                   CaptionML=[ENU=Document No.;
                                                              ENG=Document No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
    { 5   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                                    ENG=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)"];
                                                   OptionString=[ ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code] }
    { 8   ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ENG=Posting Group];
                                                   Editable=No }
    { 10  ;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              ENG=Shipment Date] }
    { 11  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENG=Description 2] }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=[ENU=Unit of Measure;
                                                              ENG=Unit of Measure] }
    { 15  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ENG=Quantity];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;CaptionML=[ENU=Unit Price;
                                                              ENG=Unit Price];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;CaptionML=[ENU=Unit Cost (LCY);
                                                              ENG=Unit Cost (LCY)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ENG=VAT %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;CaptionML=[ENU=Line Discount %;
                                                              ENG=Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ENG=Allow Invoice Disc.] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENG=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENG=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENG=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENG=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENG=Appl.-to Item Entry] }
    { 39  ;   ;Item Shpt. Entry No.;Integer       ;CaptionML=[ENU=Item Shpt. Entry No.;
                                                              ENG=Item Shpt. Entry No.] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENG=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENG=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENG=Customer Price Group] }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job No.;
                                                              ENG=Job No.] }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   CaptionML=[ENU=Work Type Code;
                                                              ENG=Work Type Code] }
    { 58  ;   ;Qty. Shipped Not Invoiced;Decimal  ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Qty. Shipped Not Invoiced;
                                                              ENG=Qty. Shipped Not Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[ENU=Quantity Invoiced;
                                                              ENG=Quantity Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 65  ;   ;Order No.           ;Code20        ;CaptionML=[ENU=Order No.;
                                                              ENG=Order No.] }
    { 66  ;   ;Order Line No.      ;Integer       ;CaptionML=[ENU=Order Line No.;
                                                              ENG=Order Line No.] }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENG=Bill-to Customer No.];
                                                   Editable=No }
    { 71  ;   ;Purchase Order No.  ;Code20        ;CaptionML=[ENU=Purchase Order No.;
                                                              ENG=Purchase Order No.] }
    { 72  ;   ;Purch. Order Line No.;Integer      ;CaptionML=[ENU=Purch. Order Line No.;
                                                              ENG=Purch. Order Line No.] }
    { 73  ;   ;Drop Shipment       ;Boolean       ;AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Drop Shipment;
                                                              ENG=Drop Shipment] }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENG=Gen. Bus. Posting Group] }
    { 75  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENG=Gen. Prod. Posting Group] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENG=VAT Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENG=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Nature Code;
                                                              ENG=Transaction Nature Code] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENG=Transport Method] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Sales Shipment Line"."Line No." WHERE (Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ENG=Attached to Line No.] }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ENG=Exit Point] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENG=Area] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENG=Transaction Specification] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=VAT Area Code;
                                                              ENG=VAT Area Code] }
    { 86  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=VAT Liable;
                                                              ENG=VAT Liable] }
    { 87  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=VAT Group Code;
                                                              ENG=VAT Group Code] }
    { 89  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENG=VAT Bus. Posting Group] }
    { 90  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENG=VAT Prod. Posting Group] }
    { 91  ;   ;Currency Code       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Shipment Header"."Currency Code" WHERE (No.=FIELD(Document No.)));
                                                   CaptionML=[ENU=Currency Code;
                                                              ENG=Currency Code];
                                                   Editable=No }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order No.;
                                                              ENG=Blanket Order No.] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Sales Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                Document No.=FIELD(Blanket Order No.));
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Blanket Order Line No.;
                                                              ENG=Blanket Order Line No.] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ENG=VAT Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENG=Unit Cost];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 131 ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENG=Posting Date] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENG=Dimension Set ID];
                                                   Editable=No }
    { 826 ;   ;Authorized for Credit Card;Boolean ;CaptionML=[ENU=Authorised for Credit Card;
                                                              ENG=Authorised for Credit Card] }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=[ENU=Job Task No.;
                                                              ENG=Job Task No.];
                                                   Editable=No }
    { 1002;   ;Job Contract Entry No.;Integer     ;CaptionML=[ENU=Job Contract Entry No.;
                                                              ENG=Job Contract Entry No.];
                                                   Editable=No }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ENG=Variant Code] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                 Item Filter=FIELD(No.),
                                                                                 Variant Filter=FIELD(Variant Code));
                                                   CaptionML=[ENU=Bin Code;
                                                              ENG=Bin Code] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENG=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENG=Unit of Measure Code] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;CaptionML=[ENU=Quantity (Base);
                                                              ENG=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[ENU=Qty. Invoiced (Base);
                                                              ENG=Qty. Invoiced (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=[ENU=FA Posting Date;
                                                              ENG=FA Posting Date] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ENG=Depreciation Book Code] }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ENG=Depr. until FA Posting Date] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ENG=Duplicate in Depreciation Book] }
    { 5613;   ;Use Duplication List;Boolean       ;CaptionML=[ENU=Use Duplication List;
                                                              ENG=Use Duplication List] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Centre;
                                                              ENG=Responsibility Centre] }
    { 5705;   ;Cross-Reference No. ;Code20        ;AccessByPermission=TableData 5717=R;
                                                   CaptionML=[ENU=Cross-Reference No.;
                                                              ENG=Cross-Reference No.] }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Unit of Measure (Cross Ref.);
                                                              ENG=Unit of Measure (Cross Ref.)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[ENU=Cross-Reference Type;
                                                              ENG=Cross-Reference Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bar Code";
                                                                    ENG=" ,Customer,Vendor,Bar Code"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[ENU=Cross-Reference Type No.;
                                                              ENG=Cross-Reference Type No.] }
    { 5709;   ;Item Category Code  ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENG=Item Category Code] }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Nonstock;
                                                              ENG=Nonstock] }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=[ENU=Purchasing Code;
                                                              ENG=Purchasing Code] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENG=Product Group Code] }
    { 5790;   ;Requested Delivery Date;Date       ;AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Requested Delivery Date;
                                                              ENG=Requested Delivery Date];
                                                   Editable=No }
    { 5791;   ;Promised Delivery Date;Date        ;CaptionML=[ENU=Promised Delivery Date;
                                                              ENG=Promised Delivery Date];
                                                   Editable=No }
    { 5792;   ;Shipping Time       ;DateFormula   ;AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Time;
                                                              ENG=Shipping Time] }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ENG=Outbound Whse. Handling Time] }
    { 5794;   ;Planned Delivery Date;Date         ;CaptionML=[ENU=Planned Delivery Date;
                                                              ENG=Planned Delivery Date];
                                                   Editable=No }
    { 5795;   ;Planned Shipment Date;Date         ;CaptionML=[ENU=Planned Shipment Date;
                                                              ENG=Planned Shipment Date];
                                                   Editable=No }
    { 5811;   ;Appl.-from Item Entry;Integer      ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-from Item Entry;
                                                              ENG=Appl.-from Item Entry];
                                                   MinValue=0 }
    { 5812;   ;Item Charge Base Amount;Decimal    ;CaptionML=[ENU=Item Charge Base Amount;
                                                              ENG=Item Charge Base Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENG=Correction];
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=[ENU=Return Reason Code;
                                                              ENG=Return Reason Code] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ENG=Allow Line Disc.] }
    { 7002;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENG=Customer Disc. Group] }
    { 50002;  ;Parent Line No.     ;Integer       ;Description=OP9031 }
    { 50010;  ;Shipment ID         ;Code30        ;CaptionML=[ENU=Shipment ID;
                                                              ENG=Shipment ID];
                                                   Description=OP9031 }
    { 50015;  ;Duty Amount         ;Decimal       ;Description=OP9031;
                                                   Editable=No }
    { 50016;  ;Total Duty Amount   ;Decimal       ;Description=OP9031;
                                                   Editable=No }
    { 50020;  ;Line Status         ;Option        ;CaptionML=[ENU=Line Status;
                                                              ENG=Line Status];
                                                   OptionCaptionML=[ENU=" ,Processing,Picked,Shipped,Cancelled";
                                                                    ENG=" ,Processing,Picked,Shipped,Cancelled"];
                                                   OptionString=[ ,Processing,Picked,Shipped,Cancelled];
                                                   Description=OP9031 }
    { 50100;  ;Exchange Order      ;Boolean       ;Description=TM0020;
                                                   Editable=No }
    { 50101;  ;Origianl Order No.  ;Code20        ;Description=TM0020;
                                                   Editable=No }
    { 50710;  ;Campaign            ;Text50        ;Description=M0063 DD 26/10/16 }
    { 50720;  ;Coupon Code         ;Code30        ;Description=M0063 DD 26/10/16 }
    { 50730;  ;Gift                ;Boolean       ;Description=M0062 DD 27/10/16 }
    { 50740;  ;Gift Message        ;Text250       ;Description=M0062 DD 27/10/16 }
    { 50800;  ;Main Line No.       ;Integer        }
    { 50801;  ;Is Returnable       ;Boolean       ;Description=TM0033;
                                                   Editable=No }
    { 71000;  ;Intercompany        ;Boolean        }
    { 9087000;;Style No.           ;Code20        ;TableRelation=Style;
                                                   CaptionML=[ENU=Style No.;
                                                              ENG=Style No.];
                                                   Description=NS2015.1 }
    { 9087001;;Season Code         ;Code20        ;TableRelation=Season;
                                                   CaptionML=[ENU=Season Code;
                                                              ENG=Season Code];
                                                   Description=NS2015.1 }
    { 9087002;;Sub-Season Code     ;Code20        ;TableRelation=Sub-Season.Code WHERE (Season Code=FIELD(Season Code));
                                                   CaptionML=[ENU=Sub-Season Code;
                                                              ENG=Sub-Season Code];
                                                   Description=NS2015.1 }
    { 9087003;;Brand Code          ;Code20        ;TableRelation=Brand;
                                                   CaptionML=[ENU=Brand Code;
                                                              ENG=Brand Code];
                                                   Description=NS2015.1 }
    { 9087004;;Division Code       ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Division));
                                                   CaptionML=[ENU=Division Code;
                                                              ENG=Division Code];
                                                   Description=NS2015.1 }
    { 9087005;;Department Code     ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Department),
                                                                                              Division Code=FIELD(Division Code));
                                                   CaptionML=[ENU=Department Code;
                                                              ENG=Department Code];
                                                   Description=NS2015.1 }
    { 9087006;;Group Code          ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Group),
                                                                                              Division Code=FIELD(Division Code),
                                                                                              Department Code=FIELD(Department Code));
                                                   CaptionML=[ENU=Group Code;
                                                              ENG=Group Code];
                                                   Description=NS2015.1 }
    { 9087007;;Category Code       ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Category),
                                                                                              Division Code=FIELD(Division Code),
                                                                                              Department Code=FIELD(Department Code),
                                                                                              Group Code=FIELD(Group Code));
                                                   CaptionML=[ENU=Category Code;
                                                              ENG=Category Code];
                                                   Description=NS2015.1 }
    { 9087008;;Sub-Category Code   ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Category),
                                                                                              Division Code=FIELD(Division Code),
                                                                                              Department Code=FIELD(Department Code),
                                                                                              Group Code=FIELD(Group Code),
                                                                                              Category Code=FIELD(Category Code));
                                                   CaptionML=[ENU=Sub-Category Code;
                                                              ENG=Sub-Category Code];
                                                   Description=NS2015.1 }
    { 9087011;;Size Group Code     ;Code20        ;TableRelation="Size Group";
                                                   CaptionML=[ENU=Size Group Code;
                                                              ENG=Size Group Code];
                                                   Description=NS2015.1 }
    { 9087012;;Size Code           ;Code20        ;TableRelation=Size.Code WHERE (Size Group Code=FIELD(Size Group Code));
                                                   CaptionML=[ENU=Size Code;
                                                              ENG=Size Code];
                                                   Description=NS2015.1 }
    { 9087013;;Standard Size Group Code;Code20    ;TableRelation="Size Group";
                                                   CaptionML=[ENU=Standard Size Group Code;
                                                              ENG=Standard Size Group Code];
                                                   Description=NS2015.1 }
    { 9087014;;Standard Size Code  ;Code20        ;TableRelation=Size.Code WHERE (Size Group Code=FIELD(Standard Size Group Code));
                                                   CaptionML=[ENU=Standard Size Code;
                                                              ENG=Standard Size Code];
                                                   Description=NS2015.1 }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
    {    ;Order No.,Order Line No.                 }
    {    ;Blanket Order No.,Blanket Order Line No. }
    {    ;Item Shpt. Entry No.                     }
    {    ;Sell-to Customer No.                     }
    {    ;Bill-to Customer No.                     }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Document No.,Line No.,Sell-to Customer No.,Type,No.,Shipment Date }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Shipment No. %1:;ENG=Shipment No. %1:';
      Text001@1001 : TextConst 'ENU=The program cannot find this Sales line.;ENG=The program cannot find this Sales line.';
      Currency@1002 : Record 4;
      SalesShptHeader@1005 : Record 110;
      PostedATOLink@1006 : Record 914;
      DimMgt@1003 : Codeunit 408;
      CurrencyRead@1004 : Boolean;

    PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      IF "Document No." = SalesShptHeader."No." THEN
        EXIT(SalesShptHeader."Currency Code");
      IF SalesShptHeader.GET("Document No.") THEN
        EXIT(SalesShptHeader."Currency Code");
      EXIT('');
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
    END;

    PROCEDURE ShowItemTrackingLines@6500();
    VAR
      ItemTrackingDocMgt@1000 : Codeunit 6503;
    BEGIN
      ItemTrackingDocMgt.ShowItemTrackingForShptRcptLine(DATABASE::"Sales Shipment Line",0,"Document No.",'',0,"Line No.");
    END;

    PROCEDURE InsertInvLineFromShptLine@2(VAR SalesLine@1000 : Record 37);
    VAR
      SalesInvHeader@1011 : Record 36;
      SalesOrderHeader@1008 : Record 36;
      SalesOrderLine@1005 : Record 37;
      TempSalesLine@1002 : TEMPORARY Record 37;
      SalesSetup@1004 : Record 311;
      TransferOldExtLines@1007 : Codeunit 379;
      ItemTrackingMgt@1009 : Codeunit 6500;
      SalesCalcDiscount@1003 : Codeunit 60;
      ExtTextLine@1006 : Boolean;
      NextLineNo@1001 : Integer;
    BEGIN
      SETRANGE("Document No.","Document No.");

      TempSalesLine := SalesLine;
      IF SalesLine.FIND('+') THEN
        NextLineNo := SalesLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      IF SalesInvHeader."No." <> TempSalesLine."Document No." THEN
        SalesInvHeader.GET(TempSalesLine."Document Type",TempSalesLine."Document No.");

      IF SalesLine."Shipment No." <> "Document No." THEN BEGIN
        SalesLine.INIT;
        SalesLine."Line No." := NextLineNo;
        SalesLine."Document Type" := TempSalesLine."Document Type";
        SalesLine."Document No." := TempSalesLine."Document No.";
        SalesLine.Description := STRSUBSTNO(Text000,"Document No.");
        SalesLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;

      TransferOldExtLines.ClearLineNumbers;

      REPEAT
        ExtTextLine := (TransferOldExtLines.GetNewLineNumber("Attached to Line No.") <> 0);

        IF (Type <> Type::" ") AND SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Order No.","Order Line No.")
        THEN BEGIN
          IF (SalesOrderHeader."Document Type" <> SalesOrderLine."Document Type"::Order) OR
             (SalesOrderHeader."No." <> SalesOrderLine."Document No.")
          THEN
            SalesOrderHeader.GET(SalesOrderLine."Document Type"::Order,"Order No.");

          InitCurrency("Currency Code");

          IF SalesInvHeader."Prices Including VAT" THEN BEGIN
            IF NOT SalesOrderHeader."Prices Including VAT" THEN
              SalesOrderLine."Unit Price" :=
                ROUND(
                  SalesOrderLine."Unit Price" * (1 + SalesOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END ELSE BEGIN
            IF SalesOrderHeader."Prices Including VAT" THEN
              SalesOrderLine."Unit Price" :=
                ROUND(
                  SalesOrderLine."Unit Price" / (1 + SalesOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END;
        END ELSE BEGIN
          SalesOrderHeader.INIT;
          IF ExtTextLine OR (Type = Type::" ") THEN BEGIN
            SalesOrderLine.INIT;
            SalesOrderLine."Line No." := "Order Line No.";
            SalesOrderLine.Description := Description;
            SalesOrderLine."Description 2" := "Description 2";
          END ELSE
            ERROR(Text001);
        END;

        SalesLine := SalesOrderLine;
        SalesLine."Line No." := NextLineNo;
        SalesLine."Document Type" := TempSalesLine."Document Type";
        SalesLine."Document No." := TempSalesLine."Document No.";
        SalesLine."Variant Code" := "Variant Code";
        SalesLine."Location Code" := "Location Code";
        SalesLine."Quantity (Base)" := 0;
        SalesLine.Quantity := 0;
        SalesLine."Outstanding Qty. (Base)" := 0;
        SalesLine."Outstanding Quantity" := 0;
        SalesLine."Quantity Shipped" := 0;
        SalesLine."Qty. Shipped (Base)" := 0;
        SalesLine."Quantity Invoiced" := 0;
        SalesLine."Qty. Invoiced (Base)" := 0;
        SalesLine.Amount := 0;
        SalesLine."Amount Including VAT" := 0;
        SalesLine."Purchase Order No." := '';
        SalesLine."Purch. Order Line No." := 0;
        SalesLine."Drop Shipment" := "Drop Shipment";
        SalesLine."Special Order Purchase No." := '';
        SalesLine."Special Order Purch. Line No." := 0;
        SalesLine."Special Order" := FALSE;
        SalesLine."Shipment No." := "Document No.";
        SalesLine."Shipment Line No." := "Line No.";
        SalesLine."Appl.-to Item Entry" := 0;
        SalesLine."Appl.-from Item Entry" := 0;
        IF NOT ExtTextLine AND (SalesLine.Type <> 0) THEN BEGIN
          SalesLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced");
          SalesLine.VALIDATE("Unit Price",SalesOrderLine."Unit Price");
          SalesLine."Allow Line Disc." := SalesOrderLine."Allow Line Disc.";
          SalesLine."Allow Invoice Disc." := SalesOrderLine."Allow Invoice Disc.";
          SalesOrderLine."Line Discount Amount" :=
            ROUND(
              SalesOrderLine."Line Discount Amount" * SalesLine.Quantity / SalesOrderLine.Quantity,
              Currency."Amount Rounding Precision");
          IF SalesInvHeader."Prices Including VAT" THEN BEGIN
            IF NOT SalesOrderHeader."Prices Including VAT" THEN
              SalesOrderLine."Line Discount Amount" :=
                ROUND(
                  SalesOrderLine."Line Discount Amount" *
                  (1 + SalesOrderLine."VAT %" / 100),Currency."Amount Rounding Precision");
          END ELSE BEGIN
            IF SalesOrderHeader."Prices Including VAT" THEN
              SalesOrderLine."Line Discount Amount" :=
                ROUND(
                  SalesOrderLine."Line Discount Amount" /
                  (1 + SalesOrderLine."VAT %" / 100),Currency."Amount Rounding Precision");
          END;
          SalesLine.VALIDATE("Line Discount Amount",SalesOrderLine."Line Discount Amount");
          SalesLine."Line Discount %" := SalesOrderLine."Line Discount %";
          SalesLine.UpdatePrePaymentAmounts;
          IF SalesOrderLine.Quantity = 0 THEN
            SalesLine.VALIDATE("Inv. Discount Amount",0)
          ELSE
            SalesLine.VALIDATE(
              "Inv. Discount Amount",
              ROUND(
                SalesOrderLine."Inv. Discount Amount" * SalesLine.Quantity / SalesOrderLine.Quantity,
                Currency."Amount Rounding Precision"));
        END;

        SalesLine."Attached to Line No." :=
          TransferOldExtLines.TransferExtendedText(
            SalesOrderLine."Line No.",
            NextLineNo,
            "Attached to Line No.");
        SalesLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        SalesLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        SalesLine."Dimension Set ID" := "Dimension Set ID";
        SalesLine.INSERT;
        SalesSetup.GET;
        IF SalesSetup."Calc. Inv. Discount" THEN
          SalesCalcDiscount.CalculateInvoiceDiscountOnLine(SalesLine);

        ItemTrackingMgt.CopyHandledItemTrkgToInvLine(SalesOrderLine,SalesLine);

        NextLineNo := NextLineNo + 10000;
        IF "Attached to Line No." = 0 THEN
          SETRANGE("Attached to Line No.","Line No.");
      UNTIL (NEXT = 0) OR ("Attached to Line No." = 0);

      IF SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order,"Order No.") THEN BEGIN
        SalesOrderHeader."Get Shipment Used" := TRUE;
        SalesOrderHeader.MODIFY;
      END;
    END;

    LOCAL PROCEDURE GetSalesInvLines@4(VAR TempSalesInvLine@1000 : TEMPORARY Record 113);
    VAR
      SalesInvLine@1003 : Record 113;
      ItemLedgEntry@1002 : Record 32;
      ValueEntry@1001 : Record 5802;
    BEGIN
      TempSalesInvLine.RESET;
      TempSalesInvLine.DELETEALL;

      IF Type <> Type::Item THEN
        EXIT;

      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      ItemLedgEntry.SETFILTER("Invoiced Quantity",'<>0');
      IF ItemLedgEntry.FINDSET THEN BEGIN
        ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
        ValueEntry.SETRANGE("Entry Type",ValueEntry."Entry Type"::"Direct Cost");
        ValueEntry.SETFILTER("Invoiced Quantity",'<>0');
        REPEAT
          ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
          IF ValueEntry.FINDSET THEN
            REPEAT
              IF ValueEntry."Document Type" = ValueEntry."Document Type"::"Sales Invoice" THEN
                IF SalesInvLine.GET(ValueEntry."Document No.",ValueEntry."Document Line No.") THEN BEGIN
                  TempSalesInvLine.INIT;
                  TempSalesInvLine := SalesInvLine;
                  IF TempSalesInvLine.INSERT THEN;
                END;
            UNTIL ValueEntry.NEXT = 0;
        UNTIL ItemLedgEntry.NEXT = 0;
      END;
    END;

    PROCEDURE CalcShippedSaleNotReturned@3(VAR ShippedQtyNotReturned@1003 : Decimal;VAR RevUnitCostLCY@1005 : Decimal;ExactCostReverse@1006 : Boolean);
    VAR
      ItemLedgEntry@1000 : Record 32;
      TotalCostLCY@1007 : Decimal;
      TotalQtyBase@1002 : Decimal;
    BEGIN
      ShippedQtyNotReturned := 0;
      IF (Type <> Type::Item) OR (Quantity <= 0) THEN BEGIN
        RevUnitCostLCY := "Unit Cost (LCY)";
        EXIT;
      END;

      RevUnitCostLCY := 0;
      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      IF ItemLedgEntry.FINDSET THEN
        REPEAT
          ShippedQtyNotReturned := ShippedQtyNotReturned - ItemLedgEntry."Shipped Qty. Not Returned";
          IF ExactCostReverse THEN BEGIN
            ItemLedgEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)");
            TotalCostLCY :=
              TotalCostLCY + ItemLedgEntry."Cost Amount (Expected)" + ItemLedgEntry."Cost Amount (Actual)";
            TotalQtyBase := TotalQtyBase + ItemLedgEntry.Quantity;
          END;
        UNTIL ItemLedgEntry.NEXT = 0;

      IF ExactCostReverse AND (ShippedQtyNotReturned <> 0) AND (TotalQtyBase <> 0) THEN
        RevUnitCostLCY := ABS(TotalCostLCY / TotalQtyBase) * "Qty. per Unit of Measure"
      ELSE
        RevUnitCostLCY := "Unit Cost (LCY)";

      ShippedQtyNotReturned := CalcQty(ShippedQtyNotReturned);
    END;

    LOCAL PROCEDURE CalcQty@9(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      IF "Qty. per Unit of Measure" = 0 THEN
        EXIT(QtyBase);
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE FilterPstdDocLnItemLedgEntries@5(VAR ItemLedgEntry@1000 : Record 32);
    BEGIN
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Document No.");
      ItemLedgEntry.SETRANGE("Document No.","Document No.");
      ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Sales Shipment");
      ItemLedgEntry.SETRANGE("Document Line No.","Line No.");
    END;

    LOCAL PROCEDURE ShowItemLedgEntries@7();
    VAR
      ItemLedgEntry@1000 : Record 32;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
        PAGE.RUNMODAL(0,ItemLedgEntry);
      END;
    END;

    PROCEDURE ShowItemSalesInvLines@8();
    VAR
      TempSalesInvLine@1001 : TEMPORARY Record 113;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetSalesInvLines(TempSalesInvLine);
        PAGE.RUNMODAL(PAGE::"Posted Sales Invoice Lines",TempSalesInvLine);
      END;
    END;

    LOCAL PROCEDURE InitCurrency@6(CurrencyCode@1001 : Code[10]);
    BEGIN
      IF (Currency.Code = CurrencyCode) AND CurrencyRead THEN
        EXIT;

      IF CurrencyCode <> '' THEN
        Currency.GET(CurrencyCode)
      ELSE
        Currency.InitRoundingPrecision;
      CurrencyRead := TRUE;
    END;

    PROCEDURE ShowLineComments@10();
    VAR
      SalesDocLineComments@1000 : Record 44;
      SalesDocCommentSheet@1001 : Page 67;
    BEGIN
      SalesDocLineComments.SETRANGE("Document Type",SalesDocLineComments."Document Type"::Shipment);
      SalesDocLineComments.SETRANGE("No.","Document No.");
      SalesDocLineComments.SETRANGE("Document Line No.","Line No.");
      SalesDocCommentSheet.SETTABLEVIEW(SalesDocLineComments);
      SalesDocCommentSheet.RUNMODAL;
    END;

    PROCEDURE ShowAsmToOrder@11();
    BEGIN
      PostedATOLink.ShowPostedAsm(Rec);
    END;

    PROCEDURE AsmToShipmentExists@72(VAR PostedAsmHeader@1000 : Record 910) : Boolean;
    VAR
      PostedAssembleToOrderLink@1001 : Record 914;
    BEGIN
      IF NOT PostedAssembleToOrderLink.AsmExistsForPostedShipmentLine(Rec) THEN
        EXIT(FALSE);
      EXIT(PostedAsmHeader.GET(PostedAssembleToOrderLink."Assembly Document No."));
    END;

    PROCEDURE InitFromSalesLine@12(SalesShptHeader@1001 : Record 110;SalesLine@1002 : Record 37);
    BEGIN
      INIT;
      TRANSFERFIELDS(SalesLine);
      "Posting Date" := SalesShptHeader."Posting Date";
      "Document No." := SalesShptHeader."No.";
      Quantity := SalesLine."Qty. to Ship";
      "Quantity (Base)" := SalesLine."Qty. to Ship (Base)";
      IF ABS(SalesLine."Qty. to Invoice") > ABS(SalesLine."Qty. to Ship") THEN BEGIN
        "Quantity Invoiced" := SalesLine."Qty. to Ship";
        "Qty. Invoiced (Base)" := SalesLine."Qty. to Ship (Base)";
      END ELSE BEGIN
        "Quantity Invoiced" := SalesLine."Qty. to Invoice";
        "Qty. Invoiced (Base)" := SalesLine."Qty. to Invoice (Base)";
      END;
      "Qty. Shipped Not Invoiced" := Quantity - "Quantity Invoiced";
      IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN BEGIN
        "Order No." := SalesLine."Document No.";
        "Order Line No." := SalesLine."Line No.";
      END;
    END;

    BEGIN
    {
      //DOC NS2015.1 JH 23/01/2014 - nSemble fields
      //DOC NS2015.1 JH 21/03/2014 - New nSemble fields
      //DOC M0063 DD 26/10/16 - Added fields Campaign and "Coupon Code".
      //DOC M0062 DD 27/10/16 - Added fields Gift and "Gift Message".
      //DOC OP9031 LF 20/10/2016 - Added field,"Shipment ID"
      //DOC OP9031 LF 02/11/2016 - Added field "Line Status"
      //DOC OP9031 RK 04/01/16 - 'Duty Amount' and 'Total Duty Amount' fields to store duty amount imported from Demandware for line.
      //DOC TM0020 AW 10/09/17 - New Fields for Returns & Exchange Process
    }
    END.
  }
}

