OBJECT Codeunit 9062536 Quick Report Lookups
{
  OBJECT-PROPERTIES
  {
    Date=28/08/15;
    Time=12:01:13 PM;
    Version List=NA2016.7;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      mQuickReportField@1000000000 : Record 9062698;
      tEmpty@1000000001 : TextConst 'ENU=Empty %1.;ENG=Empty %1.';
      tQuickReportCode@1000000002 : TextConst 'ENU=quick report code;ENG=quick report code';
      mNameFilter@1000000005 : ARRAY [4] OF Text[50];
      mNameFilterIndex@1000000004 : Integer;
      mNameFound@1000000003 : Boolean;

    PROCEDURE "--- Quick Report Field ---"@1000000091();
    BEGIN
    END;

    PROCEDURE QuickReportFieldName@1000000094(pQuickReportCode@1000000001 : Code[60];pFieldId@1000000000 : Integer) : Text[50];
    BEGIN
      //DOC NA2015.7 - Returning quick report field name
      //  -> pQuickReportCode: Quick report code
      //  -> pFieldId: Field ID
      //  <- The name

      IF ( NOT (mQuickReportField.GET(pQuickReportCode, pFieldId))) THEN
        CLEAR(mQuickReportField);
      EXIT(mQuickReportField."Field Name");
    END;

    PROCEDURE ValidateQuickReportFieldId@1000000051(pQuickReportCode@1000000003 : Code[60];pTableId@1000000001 : Integer;pFieldId@1000000000 : Integer);
    VAR
      eUnknownField@1000000002 : TextConst 'ENU=Field %1 doesn''t exist in quick report "%2".;ENG=Field %1 doesn''t exist in quick report "%2".';
    BEGIN
      //DOC NA2015.7 - Validating quick report field ID
      //  -> pQuickReportCode: Quick report code
      //  -> pFieldId: Field ID

      IF ( NOT (TryToValidateQuickReportFieldId(pQuickReportCode, pFieldId))) THEN
        ERROR(eUnknownField, pFieldId, pQuickReportCode);
    END;

    PROCEDURE TryToValidateQuickReportFieldId@1000000106(pQuickReportCode@1000000002 : Code[60];pFieldId@1000000000 : Integer) : Boolean;
    BEGIN
      //DOC NA2015.7 - Trying to validate quick report field ID
      //  -> pQuickReportCode: Quick report code
      //  -> pFieldId: Field ID
      //  <- TRUE = Field found, FALSE = Field doesn't exist

      IF (pFieldId = 0) THEN
        EXIT;

      IF (pQuickReportCode = '') THEN
        ERROR(tEmpty, tQuickReportCode);

      mQuickReportField.RESET();
      mQuickReportField.SETRANGE("Quick Report Code", pQuickReportCode);
      mQuickReportField.SETRANGE(ID, pFieldId);
      EXIT(mQuickReportField.FINDFIRST());
    END;

    PROCEDURE ValidateQuickReportFieldName@1000000090(pQuickReportCode@1000000004 : Code[60];VAR pFieldId@1000000000 : Integer;VAR pFieldName@1000000002 : Text[50];pExactMatch@1000000003 : Boolean);
    VAR
      eUnknownField@1000000007 : TextConst 'ENU=Field "%1" doesn''t exist in quick report "%2";ENG=Field "%1" doesn''t exist in quick report "%2"';
    BEGIN
      //DOC NA2015.2 - Validating quick report field name
      //  -> pQuickReportCode: Quick report code
      //  <> pFieldId: Target field ID
      //  <> pFieldName: Source / target field name
      //  -> pExactMatch: Exact match flag (TRUE = Match field name exactly, FALSE = Match any part of field name)

      IF ( NOT (TryToValidateQuickReportFieldName(pQuickReportCode, pFieldId, pFieldName, pExactMatch))) THEN
        ERROR(eUnknownField, pFieldName, pQuickReportCode);
    END;

    PROCEDURE TryToValidateQuickReportFieldName@1000000047(pQuickReportCode@1000000005 : Code[60];VAR pFieldId@1000000000 : Integer;VAR pFieldName@1000000002 : Text[50];pExactMatch@1000000003 : Boolean) : Boolean;
    VAR
      lResult@1000000004 : Boolean;
    BEGIN
      //DOC NA2015.2 - Trying to validating quick report field name
      //  -> pQuickReportCode: Quick report code
      //  <> pFieldId: Target field ID
      //  <> pFieldName: Source / target field name
      //  -> pExactMatch: Exact match flag (TRUE = Match field name exactly, FALSE = Match any part of field name)
      //  <- TRUE = Field found (or field blank), FALSE = No such field

      IF (pFieldName <> '') THEN
      BEGIN
        IF (pQuickReportCode = '') THEN
          ERROR(tEmpty, tQuickReportCode);

        mQuickReportField.RESET();
        mQuickReportField.SETRANGE("Quick Report Code", pQuickReportCode);
        PrepareNameFilters(pFieldName, pExactMatch);
        WHILE (NextNameFilter()) DO
        BEGIN
          mQuickReportField.SETFILTER("Field Name", CurrentNameFilter());
          SetNameFound(mQuickReportField.FINDFIRST());
        END;
        IF ( NOT (NameFound())) THEN
          IF (EVALUATE(pFieldId, pFieldName)) THEN
          BEGIN
            mQuickReportField.SETRANGE("Field Name");
            mQuickReportField.SETRANGE(ID, pFieldId);
            SetNameFound(mQuickReportField.FINDFIRST());
          END;

        pFieldId := mQuickReportField.ID;
        pFieldName := mQuickReportField."Field Name";

        lResult := mNameFound;
      END
      ELSE
      BEGIN
        CLEAR(pFieldId);
        CLEAR(pFieldName);

        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE QuickReportFieldLookup@1000000052(pQuickReportCode@1000000003 : Code[60];VAR pFieldId@1000000001 : Integer) : Boolean;
    VAR
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2015.1 - Lookup for field
      //  -> pQuickReportCode: Quick report code
      //  <> pFieldId: Target field ID
      //  <- Lookup result

      lResult := FALSE;

      IF (pQuickReportCode = '') THEN
        ERROR(tEmpty, tQuickReportCode);

      mQuickReportField.RESET();
      mQuickReportField.FILTERGROUP(2);
      mQuickReportField.SETRANGE("Quick Report Code", pQuickReportCode);
      IF (pFieldId <> 0) THEN
      BEGIN
        mQuickReportField.SETRANGE(ID, pFieldId);
        IF (mQuickReportField.FINDFIRST()) THEN;
        mQuickReportField.SETRANGE(ID);
      END;
      mQuickReportField.FILTERGROUP(0);
      IF (PAGE.RUNMODAL(0, mQuickReportField) = ACTION::LookupOK) THEN
      BEGIN
        pFieldId := mQuickReportField.ID;
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE "--- Name Filtering ---"@1000000093();
    BEGIN
    END;

    PROCEDURE PrepareNameFilters@1000000087(pName@1000000000 : Text[50];pExactMatch@1000000001 : Boolean);
    BEGIN
      //DOC NA2015.2 - Preparing name filters
      //  -> pName: The name
      //  -> pExactMatch: Exact match flag (TRUE = Prepare filters for matching only entire name, FALSE = Prepare fitlers for matching any part of name)

      CLEAR(mNameFilter);
      mNameFilter[1] := pName;
      IF ( NOT (pExactMatch)) THEN
      BEGIN
        mNameFilter[2] := '@' + pName;
        mNameFilter[3] := '@' + pName + '*';
        mNameFilter[4] := '@*' + pName + '*';
      END;

      mNameFound := FALSE;
      mNameFilterIndex := 0;
    END;

    PROCEDURE NextNameFilter@1000000089() : Boolean;
    VAR
      lNextNameFilter@1000000000 : Boolean;
    BEGIN
      //DOC NA2015.2 - Going into next name filter
      //  <- TRUE: Next name filter found, FALSE: No next name filter or name found already

      IF (mNameFound) THEN
        lNextNameFilter := FALSE
      ELSE
        IF (mNameFilterIndex < ARRAYLEN(mNameFilter)) THEN
        BEGIN
          mNameFilterIndex += 1;
          lNextNameFilter := (mNameFilter[mNameFilterIndex] <> '');
        END
        ELSE
          lNextNameFilter := FALSE;

      EXIT(lNextNameFilter);
    END;

    PROCEDURE CurrentNameFilter@1000000097() : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning current name filter
      //  <- The filter

      EXIT(mNameFilter[mNameFilterIndex]);
    END;

    PROCEDURE SetNameFound@1000000098(pNameFound@1000000000 : Boolean);
    BEGIN
      //DOC NA2015.1 - Setting name found flag
      //  -> pNameFound: The flag

      mNameFound := pNameFound;
    END;

    PROCEDURE NameFound@1000000013() : Boolean;
    BEGIN
      //DOC NA2015.1 - Returning if name has been found
      //  <- The value

      EXIT(mNameFound);
    END;

    PROCEDURE CheckIfNameFound@1000000096(pErrorMessage@1000000000 : Text[1024]);
    BEGIN
      //DOC NA2015.1 - Checking if name found; if not - showing the error message
      //  -> pErrorMessage: The error message

      IF ( NOT (mNameFound)) THEN
        ERROR(pErrorMessage);
    END;

    BEGIN
    {
      //DOC NA2015.7 JH 28/05/2015 - Created
      //DOC NA2016.7 JH 28/08/2015 - Upgraded to 2016
    }
    END.
  }
}

