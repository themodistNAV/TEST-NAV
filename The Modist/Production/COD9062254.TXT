OBJECT Codeunit 9062254 System Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=01/06/16;
    Time=[ 3:04:32 PM];
    Version List=NA2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Object@1000000001 : Record 2000000001;
      CurrentSession@1000000000 : DotNet "'TheNavPeople.SystemToolkit.9.0.1.1, Version=9.0.1.1, Culture=neutral, PublicKeyToken=eac62e1326bea5aa'.TheNavPeople.SystemToolkit.Session";

    LOCAL PROCEDURE "--- Database Properties ---"@1000000004();
    BEGIN
    END;

    LOCAL PROCEDURE GetDatabaseServerName@1000000000() : Text;
    BEGIN
      //DOC NA2016.14 - Returning current database server name (with instance if it exists)
      //  <- The name

      EXIT(CurrentSession.DatabaseServerName);
    END;

    LOCAL PROCEDURE GetDatabaseServerNameWithoutInstance@1000000001() : Text;
    BEGIN
      //DOC NA2016.14 - Returning current database server name without instance
      //  <- The name

      EXIT(CurrentSession.DatabaseServerNameWithoutInstance);
    END;

    LOCAL PROCEDURE GetDatabaseServerInstance@1000000002() : Text;
    BEGIN
      //DOC NA2016.14 - Returning current database server instance (empty if it doesn't exist)
      //  <- The instance

      EXIT(CurrentSession.DatabaseServerInstance);
    END;

    LOCAL PROCEDURE GetDatabaseName@1000000003() : Text;
    BEGIN
      //DOC NA2016.14 - Returning current database name
      //  <- The name

      EXIT(CurrentSession.DatabaseName);
    END;

    LOCAL PROCEDURE "--- Ranges ---"@1000000013();
    BEGIN
    END;

    PROCEDURE GetEnhancedNavRange1From@1000000016() : Integer;
    BEGIN
      //DOC NF2016.DEV.JH - Returning enhanced NAV range 1 lower boundary
      //  <- The boundary

      EXIT(9062229);
    END;

    PROCEDURE GetEnhancedNavRange1To@1000000018() : Integer;
    BEGIN
      //DOC NF2016.DEV.JH - Returning enhanced NAV range 1 higher boundary
      //  <- The boundary

      EXIT(GetEnhancedNavRange1From() + 1000 - 1);
    END;

    PROCEDURE GetEnhancedNavRange2From@1000000017() : Integer;
    BEGIN
      //DOC NF2016.DEV.JH - Returning enhanced NAV range 2 lower boundary
      //  <- The boundary

      EXIT(9086429);
    END;

    PROCEDURE GetEnhancedNavRange2To@1000000019() : Integer;
    BEGIN
      //DOC NF2016.DEV.JH - Returning enhanced NAV range 2 higher boundary
      //  <- The boundary

      EXIT(GetEnhancedNavRange2From() + 1000 - 1);
    END;

    PROCEDURE GetEnhancedNavRangeFilter@1000000014() : Text;
    BEGIN
      //DOC NF2016.DEV.JH - Returning enhanced NAV range filter
      //  <- The filter

      EXIT(STRSUBSTNO('%1..%2|%3..%4', GetEnhancedNavRange1From(), GetEnhancedNavRange1To(),
        GetEnhancedNavRange2From(), GetEnhancedNavRange2To()));
    END;

    LOCAL PROCEDURE "--- Versions ---"@1000000005();
    BEGIN
    END;

    PROCEDURE GetEnablementVersion@1000000006() : Text;
    BEGIN
      //DOC NF2016.DEV.JH - Returning enablement version
      //  <- The version

      EXIT(GetVersion(GetEnhancedNavRangeFilter(), 'NA2016.*'));
    END;

    PROCEDURE GetEnhancedNavVersion@1000000009() : Text;
    BEGIN
      //DOC NF2016.DEV.JH - Returning enhanced NAV version
      //  <- The version

      EXIT(GetVersion(GetEnhancedNavRangeFilter(), 'NH2016.*'));
    END;

    PROCEDURE GetEnforcementVersion@1000000010() : Text;
    BEGIN
      //DOC NF2016.DEV.JH - Returning enforcement version
      //  <- The version

      EXIT(GetVersion(GetEnhancedNavRangeFilter(), 'NF2016.*'));
    END;

    LOCAL PROCEDURE GetVersion@1000000011(pObjectIdFilter@1000000001 : Text;pVersionListFilter@1000000000 : Text) : Text;
    VAR
      eUnknown@1000000002 : TextConst 'ENU=(UNKNOWN);ENG=(UNKNOWN)';
    BEGIN
      //DOC NF2016.DEV.JH - Returning version
      //  -> pObjectIdFilter: Object ID filter
      //  -> pVersionListFilter: Filter for the version
      //  <- The version

      Object.RESET();
      Object.SETCURRENTKEY(Date, Time);
      Object.SETFILTER(ID, pObjectIdFilter);
      Object.SETFILTER("Version List", pVersionListFilter);
      IF (Object.FINDLAST()) THEN
        EXIT(Object."Version List")
      ELSE
        EXIT(eUnknown);
    END;

    LOCAL PROCEDURE "--- Event Handlers ---"@1000000027();
    BEGIN
    END;

    [EventSubscriber(Codeunit,1,OnAfterGetApplicationVersion)]
    LOCAL PROCEDURE OnAfterGetApplicationVersion@1000000028(VAR AppVersion@1000000000 : Text[80]);
    VAR
      lAppVersion@1000000002 : Text;
      lAppVersionParts@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ObjectModel.Collection`1";
      lAppVersionPart@1000000003 : Text;
      eEnablement@1000000001 : TextConst 'ENU=Enablement %1;ENG=Enablement %1';
      eEnhancedNav@1000000004 : TextConst 'ENU=Enhanced NAV %1;ENG=Enhanced NAV %1';
      eEnforcement@1000000005 : TextConst 'ENU=Enforcement %1;ENG=Enforcement %1';
    BEGIN
      //DOC NF2016.DEV.JH - Codeunit 1 "OnAfterGetApplicationVersion" subscription
      //  <> AppVersion: The application version

      lAppVersion := AppVersion;

      lAppVersionParts := lAppVersionParts.Collection();
      lAppVersionParts.Add('; ' + STRSUBSTNO(eEnablement, GetEnablementVersion()));
      lAppVersionParts.Add('; ' + STRSUBSTNO(eEnhancedNav, GetEnhancedNavVersion()));
      lAppVersionParts.Add('; ' + STRSUBSTNO(eEnforcement, GetEnforcementVersion()));

      FOREACH lAppVersionPart IN lAppVersionParts DO
        IF (STRLEN(lAppVersion) + STRLEN(lAppVersionPart) <= MAXSTRLEN(AppVersion)) THEN
          lAppVersion := lAppVersion + lAppVersionPart;

      AppVersion := lAppVersion;
    END;

    BEGIN
    {
      //DOC NA2016.14 JH 26/02/2016 - Created
      //DOC NA2016.16 JH 19/05/2016 - CfMD amendments (new .NET library)
      //DOC NA2016.16 JH 31/05/2016 - New range & versioning functions
    }
    END.
  }
}

