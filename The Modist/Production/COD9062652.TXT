OBJECT Codeunit 9062652 Incident Management
{
  OBJECT-PROPERTIES
  {
    Date=10/11/15;
    Time=[ 5:44:40 PM];
    Version List=NH2016.11;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SystemBehaviour@9062230 : Record 9062230;
      tSysBGroupCode@9062231 : TextConst 'ENU=INCIDENTS;ENG=INCIDENTS';
      tSysBGroupDescription@9062232 : TextConst 'ENU=Incidents;ENG=Incidents';
      tSysBIncNoSeries@9062233 : TextConst 'ENU=INC_NO_SERIES;ENG=INC_NO_SERIES';
      tNoSeriesCode@9062235 : TextConst 'ENU=INCIDENTS;ENG=INCIDENTS';
      tNoSeriesDescription@9062234 : TextConst 'ENU=Incidents;ENG=Incidents';
      tNoSeriesStartingNo@9062236 : TextConst 'ENU=INC000001;ENG=INC000001';
      tSysBIncDefType@9062237 : TextConst 'ENU=INC_DEF_TYPE;ENG=INC_DEF_TYPE';
      SequenceToolkit@9062238 : Codeunit 9062519;

    LOCAL PROCEDURE "--- Setup ---"@9062230();
    BEGIN
    END;

    PROCEDURE GetIncidentNoSeries@9062231() : Code[20];
    VAR
      lNoSeriesToolkit@9062231 : Codeunit 9062598;
      lNoSeries@9062230 : Code[10];
    BEGIN
      //DOC NH2016.11 - Returning incident no. series
      //  <- The no. series

      VerifySystemBehaviourGroup();
      lNoSeries := COPYSTR(SystemBehaviour.GetTextAdv(tSysBIncNoSeries, tSysBGroupCode, DATABASE::"No. Series", 0), 1, MAXSTRLEN(lNoSeries));
      IF (lNoSeries = '') THEN
      BEGIN
        lNoSeries := tNoSeriesCode;
        lNoSeriesToolkit.CreateNoSeriesAdv(tNoSeriesCode, tNoSeriesDescription, TRUE, FALSE, tNoSeriesStartingNo);
      END;
      EXIT(lNoSeries);
    END;

    PROCEDURE GetIncidentDefaultType@9062232() : Code[20];
    BEGIN
      //DOC NH2016.11 - Returning incidend default type
      //  <- The type

      VerifySystemBehaviourGroup();
      EXIT(COPYSTR(SystemBehaviour.GetTextAdv(tSysBIncDefType, tSysBGroupCode, DATABASE::"Incident Type", 0), 1, 20));
    END;

    LOCAL PROCEDURE VerifySystemBehaviourGroup@9062236();
    VAR
      lSystemBehaviourGroup@9062230 : Record 9062485;
    BEGIN
      //DOC NH2016.11 - Verifying system behaviour group for incidents

      IF ( NOT (lSystemBehaviourGroup.GET(tSysBGroupCode))) THEN
      BEGIN
        CLEAR(lSystemBehaviourGroup);
        lSystemBehaviourGroup.INIT();
        lSystemBehaviourGroup.VALIDATE(Code, tSysBGroupCode);
        lSystemBehaviourGroup.VALIDATE(Description, tSysBGroupDescription);
        lSystemBehaviourGroup.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE "--- Editing Status ---"@9062237();
    BEGIN
    END;

    PROCEDURE ReleaseIncident@9062239(VAR pIncident@9062231 : Record 9062305;pInteraction@9062230 : Boolean);
    VAR
      eConfirmation@9062232 : TextConst 'ENU=Do you want to release incident "%1"?;ENG=Do you want to release incident "%1"?';
    BEGIN
      //DOC NH2016.11 - Releasing incident
      //  <> pIncident: The incident
      //  -> pInteraction: Interaction flag

      IF (pIncident."Amendment Mode" = pIncident."Amendment Mode"::Released) THEN
        EXIT;

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE, pIncident."No."))) THEN
          EXIT;

      pIncident.VALIDATE("Amendment Mode", pIncident."Amendment Mode"::Released);
      pIncident.MODIFY(TRUE);
    END;

    PROCEDURE ReopenIncidentForEditing@9062238(VAR pIncident@9062233 : Record 9062305;pInteraction@9062230 : Boolean);
    VAR
      eConfirmation@9062231 : TextConst 'ENU=Do you want to open incident "%1" for editing?;ENG=Do you want to open incident "%1" for editing?';
    BEGIN
      //DOC NH2016.11 - Reopening incident for editing
      //  <> pIncident: The incident
      //  -> pInteraction: Interaction flag

      IF (pIncident."Amendment Mode" = pIncident."Amendment Mode"::"Open for Amendment") THEN
        EXIT;

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE, pIncident."No."))) THEN
          EXIT;

      pIncident.VALIDATE("Amendment Mode", pIncident."Amendment Mode"::"Open for Amendment");
      pIncident.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE "--- Incident Status ---"@9062233();
    BEGIN
    END;

    PROCEDURE CloseIncident@9062234(VAR pIncident@9062230 : Record 9062305;pModify@9062236 : Boolean;pErrorIfClosed@9062232 : Boolean;pInteraction@9062231 : Boolean) : Boolean;
    VAR
      lResult@9062233 : Boolean;
      eConfirmation@9062234 : TextConst 'ENU=Do you want to close incident "%1"?;ENG=Do you want to close incident "%1"?';
      eAlreadyClosed@9062235 : TextConst 'ENU=Incident "%1" is already closed.;ENG=Incident "%1" is already closed.';
      eFinalMessage@9062237 : TextConst 'ENU=Incident "%1" has been closed.;ENG=Incident "%1" has been closed.';
    BEGIN
      //DOC NH2016.11 - Closing an incident
      //  <> pIncident: The incident
      //  -> pModify: Flag to modify the incident
      //  -> pErrorIfClosed: Flag to throw an error if already closed
      //  -> pInteraction: Interaction flag
      //  <- TRUE = Closed, FALSE = Cancelled

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE, pIncident."No."))) THEN
          EXIT(FALSE);

      IF ((pIncident.Closed) AND (pErrorIfClosed)) THEN
        ERROR(eAlreadyClosed, pIncident."No.");

      IF ( NOT (pIncident.Closed)) THEN
      BEGIN
        pIncident.VALIDATE(Closed, TRUE);
        IF (pModify) THEN
          pIncident.MODIFY(TRUE);
        MESSAGE(eFinalMessage, pIncident."No.");
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ResolveIncident@9062235(VAR pIncident@9062230 : Record 9062305;pModify@9062235 : Boolean;pErrorIfResolved@9062232 : Boolean;pInteraction@9062231 : Boolean) : Boolean;
    VAR
      eConfirmation@9062234 : TextConst 'ENU=Do you want to mark incident "%1" as resolved?;ENG=Do you want to mark incident "%1" as resolved?';
      eAlreadyResolved@9062233 : TextConst 'ENU=Incident "%1" is already marked as resolved.;ENG=Incident "%1" is already marked as resolved.';
      eFinalMessage@9062236 : TextConst 'ENU=Incident "%1" has been marked as resolved.;ENG=Incident "%1" has been marked as resolved.';
    BEGIN
      //DOC NH2016.11 - Resolving an incident
      //  <> pIncident: The incident
      //  -> pModify: Flag to modify the incident
      //  -> pErrorIfResolved: Flag to throw an error if already resolved
      //  -> pInteraction: Interaction flag
      //  <- TRUE = Resolved, FALSE = Cancelled

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE, pIncident."No."))) THEN
          EXIT(FALSE);

      IF ((pIncident.Resolved) AND (pErrorIfResolved)) THEN
        ERROR(eAlreadyResolved, pIncident."No.");

      IF ( NOT (pIncident.Resolved)) THEN
      BEGIN
        pIncident.VALIDATE(Resolved, TRUE);
        IF (pModify) THEN
          pIncident.MODIFY(TRUE);
        MESSAGE(eFinalMessage, pIncident."No.");
      END;

      EXIT(TRUE);
    END;

    BEGIN
    {
      //DOC NH2016.11 JH 10/11/2015 - Created
    }
    END.
  }
}

