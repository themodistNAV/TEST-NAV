OBJECT Page 9062574 P. Inv. Matching Batch Lines
{
  OBJECT-PROPERTIES
  {
    Date=14/07/16;
    Time=12:00:00 PM;
    Version List=NH2016.16;
  }
  PROPERTIES
  {
    CaptionML=[ENU=P. Inv. Matching Batch Lines;
               ENG=P. Inv. Matching Batch Lines];
    SourceTable=Table9062441;
    DelayedInsert=Yes;
    PageType=ListPart;
    AutoSplitKey=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Reports,Approvals;
                                ENG=New,Process,Reports,Approvals];
    OnAfterGetRecord=BEGIN
                       IsPosted := "Posting Status" = "Posting Status"::Posted;
                       IsNotPosted := NOT ("Posting Status" = "Posting Status"::Posted);
                       CASE "Match Status" OF
                         "Match Status"::"Waiting to Match" : ReadyToPost := 'Standard';
                         "Match Status"::"Outside Tolerance" : ReadyToPost := 'Attention';
                         ELSE ReadyToPost := 'StrongAccent';
                       END;
                       HasCredit := "Purch. Credit No." <> '';
                       SetMandatoryFields();
                     END;

    OnModifyRecord=BEGIN
                     SetMandatoryFields();
                     ShowInvoiceApproval     := ShowInvoiceApprovalButton();
                     ShowCreditMemoApproval  := ShowCreditMemoApprovalButton();
                   END;

    ActionList=ACTIONS
    {
      { 1000000012;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000013;1 ;Action    ;
                      CaptionML=[ENU=Show Invoice;
                                 ENG=Show Invoice];
                      Promoted=Yes;
                      Visible=IsNotPosted;
                      PromotedIsBig=Yes;
                      Image=Invoice;
                      PromotedCategory=Process;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 Action_OpenPurchaseInvoice();
                               END;
                                }
      { 1000000015;1 ;Action    ;
                      CaptionML=[ENU=Show Posted Invoice;
                                 ENG=Show Posted Invoice];
                      RunObject=Page 138;
                      RunPageLink=No.=FIELD(Invoice No.);
                      Promoted=Yes;
                      Visible=IsPosted;
                      PromotedIsBig=Yes;
                      Image=Invoice;
                      PromotedCategory=Process;
                      Scope=Repeater }
      { 1000000025;1 ;Action    ;
                      CaptionML=[ENU=Show Credit Memo;
                                 ENG=Show Credit Memo];
                      RunObject=Page 52;
                      RunPageLink=Document Type=CONST(Credit Memo),
                                  No.=FIELD(Purch. Credit No.);
                      Promoted=Yes;
                      Visible=HasCredit;
                      PromotedIsBig=Yes;
                      Image=CreditMemo;
                      PromotedCategory=Process;
                      Scope=Repeater }
      { 1000000021;1 ;Separator  }
      { 1000000029;1 ;Action    ;
                      Name=PrintBarcode;
                      ShortCutKey=Ctrl+B;
                      CaptionML=[ENU=Print Barcode;
                                 ENG=Print Barcode];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=BarCode;
                      PromotedCategory=Process;
                      Scope=Repeater;
                      OnAction=VAR
                                 BarcodeReport@1000000000 : Report 9062229;
                               BEGIN
                                 BarcodeReport.SetBarcode('PINV%' + "Alocated Invoice No.",'PINV ' + "Alocated Invoice No.", '0');
                                 REPORT.RUN(9062229,FALSE);
                               END;
                                }
      { 1000000022;1 ;Action    ;
                      Name=Reset Match Status;
                      CaptionML=[ENU=Reset Match Status;
                                 ENG=Reset Match Status];
                      Image=ResetStatus;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 "Match Status" := "Match Status"::"Waiting to Match";
                                 "Posting Status" := "Posting Status" :: " ";
                               END;
                                }
      { 1000000028;1 ;Action    ;
                      Name=Read Document;
                      CaptionML=[ENU=Read Document;
                                 ENG=Read Document];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=QuestionaireSetup;
                      PromotedCategory=Process;
                      Scope=Repeater;
                      OnAction=VAR
                                 OCR@1000000000 : Codeunit 9062426;
                                 FileAttachment@1000000001 : Record 9062272;
                               BEGIN
                                 FileAttachment.SETRANGE("Table ID",38);
                                 FileAttachment.SETRANGE("Primary Key Value 1",'2');
                                 FileAttachment.SETRANGE("Primary Key Value 2","Alocated Invoice No.");
                                 FileAttachment.SETRANGE(Extension,'txt');
                                 IF FileAttachment.FINDSET THEN BEGIN
                                   OCR.LoadSourceFile(FileAttachment."Stored FilePath");
                                   OCR.ProcessInvoice(Rec);
                                 END;
                               END;
                                }
      { 9062234 ;1   ;Action    ;
                      Name=Match Line;
                      CaptionML=[ENU=Match Line;
                                 ENG=Match Line];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ApplyEntries;
                      PromotedCategory=Process;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 MatchLine;
                               END;
                                }
      { 1000000010;1 ;Action    ;
                      Name=Create Invoice;
                      CaptionML=[ENU=Create Invoice;
                                 ENG=Create Invoice];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NewInvoice;
                      PromotedCategory=Process;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 Action_CreateInvoice();
                               END;
                                }
      { 1000000026;1 ;Action    ;
                      Name=Vendor Card;
                      ShortCutKey=Ctrl+S;
                      CaptionML=[ENU=Vendor Card;
                                 ENG=Vendor Card];
                      RunObject=Page 26;
                      RunPageLink=No.=FIELD(Vendor No. Filter);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Vendor;
                      PromotedCategory=Process;
                      Scope=Repeater }
      { 1000000049;1 ;Action    ;
                      Name=Vendor Template Card;
                      CaptionML=[ENU=Vendor Template Card;
                                 ENG=Vendor Template Card];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=VendorCode;
                      PromotedCategory=Process;
                      Scope=Repeater;
                      OnAction=VAR
                                 PInvMatchingVendorPage@1000000000 : Page 9062784;
                                 VendorInvTemplate@1000000001 : Record 9062578;
                               BEGIN
                                 VendorInvTemplate.SETRANGE("Template Type",VendorInvTemplate."Template Type"::Vendor);
                                 VendorInvTemplate.SETRANGE("Vendor No.","Vendor No. Filter");
                                 IF VendorInvTemplate.FINDSET(TRUE,TRUE) THEN
                                 BEGIN
                                 END ELSE
                                 BEGIN
                                   VendorInvTemplate.INIT;
                                   IF ("Vendor No. Filter" <> '') THEN VendorInvTemplate.VALIDATE("Vendor No.","Vendor No. Filter");
                                   VendorInvTemplate.INSERT(TRUE);
                                 END;
                                 COMMIT;
                                 PInvMatchingVendorPage.SETTABLEVIEW(VendorInvTemplate);
                                 PInvMatchingVendorPage.EDITABLE(TRUE);PInvMatchingVendorPage.RUNMODAL;

                                 PInvMatchingVendorPage.GETRECORD(VendorInvTemplate);
                                 VALIDATE("Vendor No. Filter",VendorInvTemplate."Vendor No.");
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 1000000031;1 ;Action    ;
                      Name=Send Invoice Approval Request;
                      CaptionML=[ENU=Send Approval Request;
                                 ENG=Send Approval Request];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SendApprovalRequest;
                      PromotedCategory=Category4;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 Action_SendApprovalRequest();
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;;Container;
                Name=vo;
                CaptionML=[ENU=vo;
                           ENG=vo];
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=Group;
                CaptionML=[ENU=Group;
                           ENG=Group];
                GroupType=Repeater }

    { 1000000002;2;Field  ;
                SourceExpr="Batch Code";
                Visible=FALSE;
                QuickEntry=FALSE }

    { 1000000003;2;Field  ;
                SourceExpr="Line No.";
                Visible=FALSE;
                QuickEntry=FALSE }

    { 1000000011;2;Field  ;
                SourceExpr="Vendor No. Filter";
                ShowMandatory=TRUE }

    { 1000000030;2;Field  ;
                SourceExpr="Match Status";
                StyleExpr=ReadyToPost;
                QuickEntry=FALSE }

    { 1000000004;2;Field  ;
                SourceExpr="Purch. Order No.";
                Style=Attention;
                StyleExpr="Invalid P.O";
                OnValidate=BEGIN
                             SetMandatoryFields();
                             CurrPage.UPDATE;
                           END;

                ShowMandatory=PurchOrderNoMandatory }

    { 1000000005;2;Field  ;
                SourceExpr="Vendor Del. Note. No.";
                Style=Attention;
                StyleExpr="Invalid Del. Note. No.";
                OnValidate=BEGIN
                             SetMandatoryFields();
                             CurrPage.UPDATE;
                           END;

                ShowMandatory=VendorDelNoteNoMandatory }

    { 1000000014;2;Field  ;
                SourceExpr="Document Date";
                ShowMandatory=TRUE }

    { 1000000050;2;Field  ;
                SourceExpr="Document Due Date";
                ShowMandatory=TRUE }

    { 1000000017;2;Field  ;
                SourceExpr="Vendor Invoice No.";
                ShowMandatory=TRUE }

    { 1000000006;2;Field  ;
                SourceExpr="Invoice Amount";
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

    { 1000000009;2;Field  ;
                SourceExpr="Vendor No.";
                Visible=FALSE;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;

                QuickEntry=FALSE }

    { 1000000008;2;Field  ;
                SourceExpr="Vendor Name";
                QuickEntry=FALSE }

    { 1000000038;2;Field  ;
                SourceExpr="Currency Code";
                QuickEntry=FALSE }

    { 1000000016;2;Field  ;
                SourceExpr="Unposted Invoice Amount";
                OnDrillDown=BEGIN
                              CurrPage.UPDATE;
                            END;

                QuickEntry=FALSE }

    { 1000000018;2;Field  ;
                SourceExpr="Amount % Tolerance";
                QuickEntry=FALSE }

    { 1000000027;2;Field  ;
                SourceExpr="Amount Tolerance";
                QuickEntry=FALSE }

    { 1000000019;2;Field  ;
                SourceExpr="Amount % Difference";
                Visible=FALSE;
                QuickEntry=FALSE }

    { 1000000007;2;Field  ;
                SourceExpr="Amount Difference";
                Visible=FALSE;
                QuickEntry=FALSE }

    { 1000000023;2;Field  ;
                SourceExpr="Next Action";
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;

                QuickEntry=FALSE }

    { 1000000024;2;Field  ;
                SourceExpr="Posting Status";
                QuickEntry=FALSE }

    { 1000000020;2;Field  ;
                SourceExpr="Invoice No.";
                Visible=FALSE;
                QuickEntry=FALSE }

    { 1000000042;2;Field  ;
                SourceExpr="Identified Document ID";
                Visible=FALSE;
                QuickEntry=FALSE }

    { 9062232;2;Field     ;
                SourceExpr="MISC Invoice";
                Visible=TRUE;
                OnValidate=BEGIN
                             SetMandatoryFields();
                           END;

                QuickEntry=FALSE }

    { 9062231;2;Field     ;
                Name=MISC G/L Account;
                CaptionML=[ENU=MISC G/L Account;
                           ENG=MISC G/L Account];
                SourceExpr="MISC G/L Account";
                TableRelation="G/L Account".No.;
                Visible=TRUE;
                LookupPageID=G/L Account List;
                DrillDownPageID=G/L Account List;
                OnValidate=BEGIN
                             SetMandatoryFields();
                           END;

                ShowMandatory=MISCGLAccountMandatory;
                QuickEntry=FALSE }

    { 9062233;2;Field     ;
                CaptionML=[ENU=Required Data;
                           ENG=Required Data];
                SourceExpr=Status }

    { 9062230;2;Field     ;
                SourceExpr="Incoming Document" }

    { 1000000047;1;Group  ;
                CaptionML=[ENU=Options;
                           ENG=Options];
                GroupType=Group }

    { 1000000048;2;Field  ;
                Name=ShowComplete;
                CaptionML=[ENU=Show Complete;
                           ENG=Show Complete];
                SourceExpr=ShowComplete;
                OnValidate=BEGIN
                             Rec.FILTERGROUP(2);
                             IF ShowIncomplete AND ShowComplete THEN
                               Rec.SETFILTER(Status,'%1|%2|%3', Rec.Status::Incomplete, Rec.Status::"Partial Complete", Rec.Status::Complete);
                             IF ShowIncomplete AND NOT ShowComplete THEN
                               Rec.SETFILTER(Status,'%1|%2', Rec.Status::Incomplete, Rec.Status::"Partial Complete");

                             IF NOT ShowIncomplete AND  ShowComplete THEN Rec.SETRANGE(Status, Rec.Status::Complete);

                             CurrPage.UPDATE;
                           END;
                            }

    { 1000000046;2;Field  ;
                Name=ShowIncomplete;
                CaptionML=[ENU=Show Incomplete;
                           ENG=Show Incomplete];
                SourceExpr=ShowIncomplete;
                OnValidate=BEGIN
                             Rec.FILTERGROUP(2);
                             IF ShowIncomplete AND ShowComplete THEN
                               Rec.SETFILTER(Status,'%1|%2|%3', Rec.Status::Incomplete, Rec.Status::"Partial Complete", Rec.Status::Complete);

                             IF ShowIncomplete AND NOT ShowComplete THEN
                               Rec.SETFILTER(Status,'%1|%2', Rec.Status::Incomplete, Rec.Status::"Partial Complete");

                             IF NOT ShowIncomplete AND  ShowComplete THEN Rec.SETRANGE(Status, Rec.Status::Complete);
                             CurrPage.UPDATE;
                           END;
                            }

  }
  CODE
  {
    VAR
      IsPosted@1000000000 : Boolean INDATASET;
      IsNotPosted@1000000001 : Boolean INDATASET;
      ReadyToPost@1000000002 : Text INDATASET;
      HasCredit@1000000003 : Boolean INDATASET;
      ShowComplete@1000000004 : Boolean;
      ShowIncomplete@1000000005 : Boolean;
      PurchOrderNoMandatory@1000000006 : Boolean;
      VendorDelNoteNoMandatory@1000000007 : Boolean;
      MISCGLAccountMandatory@1000000008 : Boolean;
      InvoiceWorkflow@1000000009 : Code[30];
      CreditMemoWorkflow@1000000010 : Code[30];
      ShowInvoiceApproval@1000000011 : Boolean;
      ShowCreditMemoApproval@1000000012 : Boolean;

    LOCAL PROCEDURE SetMandatoryFields@1000000001();
    BEGIN
      IF ("Purch. Order No." = '') AND ("Vendor Del. Note. No." = '') THEN BEGIN
        PurchOrderNoMandatory := TRUE;
        VendorDelNoteNoMandatory := TRUE;
      END ELSE BEGIN
        PurchOrderNoMandatory := FALSE;
        VendorDelNoteNoMandatory := FALSE;
      END;

      IF "MISC Invoice" OR ("MISC G/L Account" <> '') THEN
        MISCGLAccountMandatory := TRUE
      ELSE
        MISCGLAccountMandatory := FALSE;
    END;

    LOCAL PROCEDURE Action_CreateInvoice@1000000000();
    BEGIN
      CreateInvoice(NOT GUIALLOWED);
    END;

    LOCAL PROCEDURE Action_OpenPurchaseInvoice@1000000002();
    VAR
      PurchaseHeader@1000000000 : Record 38;
      PurchaseInvoiceMatching@1000000001 : Codeunit 9062349;
    BEGIN
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.SETRANGE("No.","Invoice No.");
      IF PAGE.RUNMODAL(PAGE::"Purchase Invoice",PurchaseHeader) = ACTION::LookupOK THEN BEGIN
          PurchaseInvoiceMatching.MatchLine(Rec,TRUE);
          CALCFIELDS("NAV Invoice Amount (LCY)") ;
          IF "NAV Invoice Amount (LCY)" <> "Invoice Amount When Matched" THEN
            VALIDATE(Adjusted,TRUE);
      END;
    END;

    LOCAL PROCEDURE Action_SendApprovalRequest@1000000004();
    VAR
      Workflow@1000000000 : Record 9062258;
      PageWorkflowConfirmation@1000000001 : Page 9062294;
      PurchaseHeader@1000000002 : Record 38;
    BEGIN
      IF "Match Status" <> "Match Status"::Matched THEN EXIT;
      Workflow.RESET();
      IF Workflow.GET("Approval Workflow") THEN BEGIN
        IF NOT Workflow.Enabled THEN EXIT;
        PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Invoice;
        Workflow.SETFILTER("No.","Approval Workflow");
        Workflow.SETFILTER("Primary Key 1 To Pass",FORMAT(PurchaseHeader."Document Type"));
        Workflow.SETFILTER("Primary Key 2 To Pass","Alocated Invoice No.");
        PageWorkflowConfirmation.SETTABLEVIEW(Workflow);
        PageWorkflowConfirmation.RUN;
        CurrPage.UPDATE;
      END;
    END;

    LOCAL PROCEDURE ShowInvoiceApprovalButton@1000000003() : Boolean;
    VAR
      SystemBehaviour@1000000000 : Record 9062230;
      WorkflowInterface@1000000001 : Codeunit 9062262;
    BEGIN
      IF ("Purch. Credit No." <> '') THEN EXIT(FALSE);
      InvoiceWorkflow     := UPPERCASE(SystemBehaviour.GetText('MISC_INV_APPW_CODE'));
      IF NOT AutoApproveInvoice AND WorkflowInterface.WorkflowIsEnabled(InvoiceWorkflow) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE ShowCreditMemoApprovalButton@1000000005() : Boolean;
    VAR
      SystemBehaviour@1000000000 : Record 9062230;
      WorkflowInterface@1000000001 : Codeunit 9062262;
    BEGIN
      IF NOT ("Purch. Credit No." <> '') THEN EXIT(FALSE);
      CreditMemoWorkflow  := UPPERCASE(SystemBehaviour.GetText('INV_APPR_WF'));
      IF NOT AutoApproveMISCInvoice AND WorkflowInterface.WorkflowIsEnabled(CreditMemoWorkflow) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    BEGIN
    {
      //DOC NH2015.8  AP 06/07/2015 - Removed VAT Fields
      //DOC NH2015.9  AP 28/07/2015 - Amendments
      //DOC NH2016.10 JH 29/10/2015 - Moved to NH
      //DOC NH2016.12 JH 04/01/2016 - New version
      //DOC NH2016.15 JH 25/04/2016 - CfMD amendments
      //DOC NH2016.16 AP 20/06/2016 - Enhancement
    }
    END.
  }
}

