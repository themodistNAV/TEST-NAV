OBJECT Report 7310 Calculate Bins
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Calculate Bins;
               ENG=Calculate Bins];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  BinCreateFilter.TESTFIELD(Code);
                  IF BinCreateFilter.GET(BinCreateFilter.Code) THEN;
                  BinCreateWkshLine.SETRANGE("Worksheet Template Name",CurrTemplateName);
                  BinCreateWkshLine.SETRANGE(Name,CurrWorksheetName);
                  BinCreateWkshLine.SETRANGE("Location Code",CurrLocationCode);
                  IF BinCreateWkshLine.FINDLAST THEN
                    LineNo := BinCreateWkshLine."Line No." + 10000
                  ELSE
                    LineNo := 10000;
                  BinCreateWkshLine.INIT;
                  WITH BinCreateWkshLine DO BEGIN
                    "Worksheet Template Name" := CurrTemplateName;
                    Name := CurrWorksheetName;
                    "Location Code" := CurrLocationCode;
                    Dedicated := BinCreateFilter.Dedicated;
                    "Zone Code" := BinCreateFilter."Zone Code";
                    Description := BinCreateFilter."Bin Description";
                    "Bin Type Code" := BinCreateFilter."Bin Type Code";
                    "Warehouse Class Code" := BinCreateFilter."Warehouse Class Code";
                    "Block Movement" := BinCreateFilter."Block Movement";
                    "Special Equipment Code" := BinCreateFilter."Special Equipment Code";
                    "Bin Ranking" := BinCreateFilter."Bin Ranking";
                    "Maximum Cubage" := BinCreateFilter."Maximum Cubage";
                    "Maximum Weight" := BinCreateFilter."Maximum Weight";
                  END;
                END;

  }
  DATASET
  {
    { 6034;    ;DataItem;Rack2               ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Rack := FromRack;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF INCSTR(Rack) = Rack THEN
                                    CurrReport.BREAK;
                                  IF Rack > ToRack THEN
                                    CurrReport.BREAK;
                                  IF STRLEN(Rack) > STRLEN(ToRack) THEN
                                    CurrReport.BREAK;

                                  IF (FromSection = '') AND (ToSection = '') THEN
                                    BinCreateWksh;
                                END;
                                 }

    { 6247;1   ;DataItem;Section2            ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Section := FromSection;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF INCSTR(Section) = Section THEN
                                    CurrReport.BREAK;
                                  IF Section > ToSection THEN
                                    CurrReport.BREAK;
                                  IF STRLEN(Section) > STRLEN(ToSection) THEN
                                    CurrReport.BREAK;

                                  IF (FromLevel = '') AND (ToLevel = '') THEN
                                    BinCreateWksh;
                                END;

               OnPostDataItem=BEGIN
                                Rack := INCSTR(Rack);
                              END;
                               }

    { 6891;2   ;DataItem;Level2              ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Level := FromLevel;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF INCSTR(Level) = Level THEN
                                    CurrReport.BREAK;
                                  IF Level > ToLevel THEN
                                    CurrReport.BREAK;
                                  IF STRLEN(Level) > STRLEN(ToLevel) THEN
                                    CurrReport.BREAK;

                                  BinCreateWksh;

                                  Level := INCSTR(Level);
                                END;

               OnPostDataItem=BEGIN
                                Section := INCSTR(Section);
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 29  ;2   ;Field     ;
                  Name=BinTemplateCode;
                  CaptionML=[ENU=Bin Template Code;
                             ENG=Bin Template Code];
                  SourceExpr=BinCreateFilter.Code;
                  OnValidate=BEGIN
                               IF  BinCreateFilter.Code <> '' THEN BEGIN
                                 BinCreateFilter.GET(BinCreateFilter.Code);
                                 BinCreateFilter.TESTFIELD("Location Code");
                               END ELSE BEGIN
                                 BinCreateFilter.Code := '';
                                 BinCreateFilter.Description := '';
                                 BinCreateFilter."Location Code" := '';
                                 BinCreateFilter."Zone Code" := '';
                               END;
                             END;

                  OnLookup=BEGIN
                             IF CurrLocationCode <> '' THEN BEGIN
                               BinCreateFilter.FILTERGROUP := 2;
                               BinCreateFilter.SETRANGE("Location Code",CurrLocationCode);
                               BinCreateFilter.FILTERGROUP := 0;
                             END;
                             CLEAR(BinTemplateForm);
                             BinTemplateForm.SETTABLEVIEW(BinCreateFilter);
                             BinTemplateForm.EDITABLE(FALSE);
                             BinTemplateForm.LOOKUPMODE(TRUE);
                             IF BinTemplateForm.RUNMODAL = ACTION::LookupOK THEN BEGIN
                               BinTemplateForm.GETRECORD(BinCreateFilter);
                               BinCreateFilter.VALIDATE(Code);
                               BinCreateFilter.TESTFIELD("Location Code");
                             END;
                           END;
                            }

      { 31  ;2   ;Field     ;
                  CaptionML=[ENU=Description;
                             ENG=Description];
                  SourceExpr=BinCreateFilter.Description }

      { 33  ;2   ;Field     ;
                  CaptionML=[ENU=Location Code;
                             ENG=Location Code];
                  SourceExpr=BinCreateFilter."Location Code";
                  Editable=FALSE }

      { 35  ;2   ;Field     ;
                  CaptionML=[ENU=Zone Code;
                             ENG=Zone Code];
                  SourceExpr=BinCreateFilter."Zone Code";
                  Editable=FALSE }

      { 6   ;2   ;Group     ;
                  CaptionML=[ENU=Rack;
                             ENG=Rack] }

      { 11  ;3   ;Field     ;
                  Name=RackFromNo;
                  CaptionML=[ENU=From No.;
                             ENG=From No.];
                  SourceExpr=FromRack;
                  OnValidate=BEGIN
                               IF (FromRack <> '') AND
                                  (ToRack <> '') AND
                                  (STRLEN(FromRack) <> STRLEN(ToRack))
                               THEN
                                 ERROR(Text004);
                             END;
                              }

      { 13  ;3   ;Field     ;
                  Name=RackToNo;
                  CaptionML=[ENU=To No.;
                             ENG=To No.];
                  SourceExpr=ToRack;
                  OnValidate=BEGIN
                               IF (FromRack <> '') AND
                                  (ToRack <> '') AND
                                  (STRLEN(FromRack) <> STRLEN(ToRack))
                               THEN
                                 ERROR(Text004);
                             END;
                              }

      { 15  ;2   ;Group     ;
                  CaptionML=[ENU=Section;
                             ENG=Section] }

      { 16  ;3   ;Field     ;
                  Name=SelectionFromNo;
                  CaptionML=[ENU=From No.;
                             ENG=From No.];
                  SourceExpr=FromSection;
                  OnValidate=BEGIN
                               IF (FromSection <> '') AND
                                  (ToSection <> '') AND
                                  (STRLEN(FromSection) <> STRLEN(ToSection))
                               THEN
                                 ERROR(Text004);
                             END;
                              }

      { 18  ;3   ;Field     ;
                  Name=SelectionToNo;
                  CaptionML=[ENU=To No.;
                             ENG=To No.];
                  SourceExpr=ToSection;
                  OnValidate=BEGIN
                               IF (FromSection <> '') AND
                                  (ToSection <> '') AND
                                  (STRLEN(FromSection) <> STRLEN(ToSection))
                               THEN
                                 ERROR(Text004);
                             END;
                              }

      { 20  ;2   ;Group     ;
                  CaptionML=[ENU=Level;
                             ENG=Level] }

      { 21  ;3   ;Field     ;
                  Name=LevelFromNo;
                  CaptionML=[ENU=From No.;
                             ENG=From No.];
                  SourceExpr=FromLevel;
                  OnValidate=BEGIN
                               IF (FromLevel <> '') AND
                                  (ToLevel <> '') AND
                                  (STRLEN(FromLevel) <> STRLEN(ToLevel))
                               THEN
                                 ERROR(Text004);
                             END;
                              }

      { 23  ;3   ;Field     ;
                  Name=LevelToNo;
                  CaptionML=[ENU=To No.;
                             ENG=To No.];
                  SourceExpr=ToLevel;
                  OnValidate=BEGIN
                               IF (FromLevel <> '') AND
                                  (ToLevel <> '') AND
                                  (STRLEN(FromLevel) <> STRLEN(ToLevel))
                               THEN
                                 ERROR(Text004);
                             END;
                              }

      { 25  ;2   ;Field     ;
                  Name=FieldSeparator;
                  CaptionML=[ENU=Field Separator;
                             ENG=Field Separator];
                  SourceExpr=FieldSeparator }

      { 27  ;2   ;Field     ;
                  CaptionML=[ENU=Check on Existing Bin;
                             ENG=Check on Existing Bin];
                  SourceExpr=CheckOnBin }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Bin@1027 : Record 7354;
      BinCreateFilter@1016 : Record 7335;
      BinCreateWkshLine@1013 : Record 7338;
      BinTemplateForm@1020 : Page 7367;
      CurrTemplateName@1011 : Code[10];
      CurrWorksheetName@1010 : Code[10];
      CurrLocationCode@1000 : Code[10];
      FromRack@1009 : Code[20];
      FromSection@1008 : Code[20];
      FromLevel@1007 : Code[20];
      ToRack@1006 : Code[20];
      ToSection@1005 : Code[20];
      ToLevel@1004 : Code[20];
      FieldSeparator@1003 : Code[1];
      Rack@1017 : Code[20];
      Section@1018 : Code[20];
      Level@1019 : Code[20];
      CheckOnBin@1026 : Boolean;
      Text000@1002 : TextConst 'ENU=The length of From Rack+From Section+From Level is greater than the maximum length of Bin Code (%1).;ENG=The length of From Rack+From Section+From Level is greater than the maximum length of Bin Code (%1).';
      LenFieldSeparator@1001 : Integer;
      LineNo@1014 : Integer;
      Text004@1012 : TextConst 'ENU=The length of the strings inserted in From No. and To No. must be identical.;ENG=The length of the strings inserted in From No. and To No. must be identical.';

    LOCAL PROCEDURE BinCreateWksh@1();
    BEGIN
      LenFieldSeparator := 0;
      IF FieldSeparator <> '' THEN
        LenFieldSeparator := 2;

      IF (STRLEN(Rack + Section + Level) + LenFieldSeparator) > MAXSTRLEN(BinCreateWkshLine."Bin Code") THEN
        ERROR(Text000,MAXSTRLEN(BinCreateWkshLine."Bin Code"));

      BinCreateWkshLine."Line No." := LineNo;
      BinCreateWkshLine."Bin Code" := Rack + FieldSeparator + Section + FieldSeparator + Level;
      IF NOT CheckOnBin THEN
        BinCreateWkshLine.INSERT(TRUE)
      ELSE BEGIN
        IF Bin.GET(BinCreateWkshLine."Location Code",BinCreateWkshLine."Bin Code") THEN
          EXIT
          ;
        BinCreateWkshLine.INSERT(TRUE);
      END;
      LineNo := LineNo + 10000;
    END;

    PROCEDURE SetTemplAndWorksheet@2(TemplateName@1001 : Code[10];WorksheetName@1000 : Code[10];LocationCode@1002 : Code[10]);
    BEGIN
      CurrTemplateName := TemplateName;
      CurrWorksheetName := WorksheetName;
      CurrLocationCode := LocationCode;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

