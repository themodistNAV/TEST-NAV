OBJECT Table 9062230 System Behaviour
{
  OBJECT-PROPERTIES
  {
    Date=14/07/16;
    Time=12:00:00 PM;
    Version List=NA2016.16;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD(Code);
               UpdateOption(Rec.FIELDNO("Answer (Decimal)"));
             END;

    CaptionML=[ENU=System Behaviour;
               ENG=System Behaviour];
    LookupPageID=Page9062230;
    DrillDownPageID=Page9062230;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              ENG=Code] }
    { 2   ;   ;User ID             ;Code50        ;TableRelation="User Setup";
                                                   CaptionML=[ENU=User ID;
                                                              ENG=User ID] }
    { 3   ;   ;Type                ;Code20        ;CaptionML=[ENU=Type;
                                                              ENG=Type] }
    { 4   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 5   ;   ;Group               ;Code20        ;TableRelation="System Behaviour Group".Code;
                                                   CaptionML=[ENU=Group;
                                                              ENG=Group] }
    { 10  ;   ;Description         ;Text200       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 12  ;   ;Where Used          ;Text200       ;CaptionML=[ENU=Where Used;
                                                              ENG=Where Used] }
    { 15  ;   ;Notes when Changing ;Text200       ;CaptionML=[ENU=Notes when Changing;
                                                              ENG=Notes when Changing] }
    { 17  ;   ;Setting Classification;Option      ;CaptionML=[ENU=Setting Classification;
                                                              ENG=Setting Classification];
                                                   OptionCaptionML=[ENU=TNP Only,Customer Changeable;
                                                                    ENG=TNP Only,Customer Changeable];
                                                   OptionString=TNP Only,Customer Changeable }
    { 18  ;   ;Behaviour Disabled  ;Boolean       ;CaptionML=[ENU=Behaviour Disabled;
                                                              ENG=Behaviour Disabled] }
    { 20  ;   ;Answer (Text)       ;Text250       ;OnValidate=BEGIN
                                                                Answer := "Answer (Text)";
                                                                UpdateOption(Rec.FIELDNO("Answer (Text)"));
                                                              END;

                                                   CaptionML=[ENU=Answer (Text);
                                                              ENG=Answer (Text)] }
    { 21  ;   ;Answer (Decimal)    ;Decimal       ;OnValidate=BEGIN
                                                                Answer := FORMAT("Answer (Decimal)", 0, 1);
                                                                UpdateOption(Rec.FIELDNO("Answer (Decimal)"));
                                                              END;

                                                   CaptionML=[ENU=Answer (Decimal);
                                                              ENG=Answer (Decimal)] }
    { 22  ;   ;Answer (Boolean)    ;Boolean       ;OnValidate=BEGIN
                                                                Answer := FORMAT("Answer (Boolean)", 0, 1);
                                                              END;

                                                   CaptionML=[ENU=Answer (Boolean);
                                                              ENG=Answer (Boolean)] }
    { 23  ;   ;Answer (Date)       ;Date          ;OnValidate=BEGIN
                                                                Answer := FORMAT("Answer (Date)", 0, 1);
                                                              END;

                                                   CaptionML=[ENU=Answer (Date);
                                                              ENG=Answer (Date)] }
    { 30  ;   ;Category            ;Option        ;CaptionML=[ENU=Category;
                                                              ENG=Category];
                                                   OptionCaptionML=[ENU=Not Defined,Other,Finance,Sales,Purchase,Inventory,CRM,Service Mgmnt,Manufacturing;
                                                                    ENG=Not Defined,Other,Finance,Sales,Purchase,Inventory,CRM,Service Mgmnt,Manufacturing];
                                                   OptionString=Not Defined,Other,Finance,Sales,Purchase,Inventory,CRM,Service Mgmnt,Manufacturing }
    { 31  ;   ;Setup Behaviour Required;Boolean   ;InitValue=Yes;
                                                   CaptionML=[ENU=Setup Behaviour Required;
                                                              ENG=Setup Behaviour Required] }
    { 40  ;   ;Answer              ;Text250       ;OnValidate=VAR
                                                                tmpAnswer@1000000004 : Text;
                                                                tmpBool@1000000000 : Boolean;
                                                                tmpDate@1000000001 : Date;
                                                                tmpDec@1000000002 : Decimal;
                                                                tmpInteger@1000000003 : Integer;
                                                              BEGIN
                                                                CASE "Answer Type" OF
                                                                  "Answer Type"::Text : VALIDATE("Answer (Text)",Answer);
                                                                  "Answer Type"::Boolean : BEGIN
                                                                    tmpAnswer := DELCHR(LOWERCASE(Rec.Answer), '<>', ' ');
                                                                    IF (tmpAnswer IN ['yes', 'true', '1', 'on']) THEN
                                                                      tmpBool := TRUE
                                                                    ELSE IF (tmpAnswer IN ['no', 'false', '0', 'off']) THEN
                                                                      tmpBool := FALSE
                                                                    ELSE
                                                                      EVALUATE(tmpBool, Answer);
                                                                    VALIDATE("Answer (Boolean)",tmpBool);
                                                                  END;
                                                                  "Answer Type"::Decimal : BEGIN
                                                                    EVALUATE(tmpDec,Answer);
                                                                    VALIDATE("Answer (Decimal)",tmpDec);
                                                                  END;
                                                                  "Answer Type"::Date : BEGIN
                                                                    EVALUATE(tmpDate,Answer);
                                                                    VALIDATE("Answer (Date)",tmpDate);
                                                                  END;
                                                                  "Answer Type"::Integer : BEGIN
                                                                    EVALUATE(tmpInteger,Answer);
                                                                    VALIDATE("Answer (Decimal)",tmpInteger);
                                                                  END;
                                                                  "Answer Type"::Option:
                                                                    SystemBehaviourManagement.ValidateOptionAnswer(Rec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Answer;
                                                              ENG=Answer];
                                                   Description=NA2015.1 }
    { 41  ;   ;Answer Type         ;Option        ;OnValidate=BEGIN
                                                                IF (Rec."Answer Type" <> xRec."Answer Type") THEN
                                                                BEGIN
                                                                  CLEAR(Rec."Answer (Text)");
                                                                  CLEAR(Rec."Answer (Boolean)");
                                                                  CLEAR(Rec."Answer (Decimal)");
                                                                  CLEAR(Rec."Answer (Date)");
                                                                  CLEAR(Rec.Answer);
                                                                  CASE (Rec."Answer Type") OF
                                                                    Rec."Answer Type"::Boolean:
                                                                      Rec.VALIDATE("Answer (Boolean)", FALSE);
                                                                    Rec."Answer Type"::Integer,
                                                                    Rec."Answer Type"::Option,
                                                                    Rec."Answer Type"::Decimal:
                                                                      Rec.VALIDATE("Answer (Decimal)", 0);
                                                                    Rec."Answer Type"::Date:
                                                                      Rec.VALIDATE("Answer (Date)", 0D);
                                                                    ELSE
                                                                      Rec.VALIDATE("Answer (Text)", '');
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Answer Type;
                                                              ENG=Answer Type];
                                                   OptionCaptionML=[ENU=Text,Decimal,Boolean,Date,Integer,Option;
                                                                    ENG=Text,Decimal,Boolean,Date,Integer,Option];
                                                   OptionString=Text,Decimal,Boolean,Date,Integer,Option;
                                                   Description=NA2015.1 }
    { 50  ;   ;Option List         ;Text250       ;CaptionML=[ENU=Option List;
                                                              ENG=Option List];
                                                   Description=NA2015.4 }
    { 51  ;   ;Relation Table ID   ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                Rec.CALCFIELDS("Relation Table Name");
                                                              END;

                                                   CaptionML=[ENU=Relation Table ID;
                                                              ENG=Relation Table ID];
                                                   Description=NA2015.4 }
    { 52  ;   ;Relation Table Name ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Relation Table ID)));
                                                   CaptionML=[ENU=Relation Table Name;
                                                              ENG=Relation Table Name];
                                                   Description=NA2015.4;
                                                   Editable=No }
    { 53  ;   ;Relation Page ID    ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Page));
                                                   OnValidate=BEGIN
                                                                Rec.CALCFIELDS("Relation Page Name");
                                                              END;

                                                   CaptionML=[ENU=Relation Page ID;
                                                              ENG=Relation Page ID];
                                                   Description=NA2015.4 }
    { 54  ;   ;Relation Page Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Page),
                                                                                                  Object ID=FIELD(Relation Page ID)));
                                                   CaptionML=[ENU=Relation Page Name;
                                                              ENG=Relation Page Name];
                                                   Description=NA2015.4;
                                                   Editable=No }
    { 60  ;   ;Special Function    ;Option        ;CaptionML=[ENU=Special Function;
                                                              ENG=Special Function];
                                                   OptionCaptionML=[ENU=" ,File,Folder";
                                                                    ENG=" ,File,Folder"];
                                                   OptionString=[ ,File,Folder];
                                                   Description=NA2015.4 }
    { 70  ;   ;Sequence            ;Integer       ;CaptionML=[ENU=Sequence;
                                                              ENG=Sequence];
                                                   Description=NA2015.4 }
  }
  KEYS
  {
    {    ;Code,User ID                            ;Clustered=Yes }
    {    ;Group,Sequence,Code                      }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Type,Name                           }
    { 2   ;Brick               ;Code,Type,Name                           }
  }
  CODE
  {
    VAR
      Logger@1000000000 : Record 9062280;
      tSetupMissing@1000000001 : TextConst 'ENU=Setup Missing;ENG=Setup Missing';
      SystemBehaviourManagement@1000000002 : Codeunit 9062339;
      FileSystem@1000000003 : Codeunit 9062264;
      String@1000000004 : Codeunit 9062236;
      TnpToolkit@9062230 : Codeunit 9062230;

    LOCAL PROCEDURE "--- General ---"@1000000023();
    BEGIN
    END;

    PROCEDURE GetName@1000000004() : Text[50];
    BEGIN
      IF ((DELCHR(Rec.Name, '<>', ' ') <> '') AND (Rec.Name <> tSetupMissing)) THEN
        EXIT(Rec.Name)
      ELSE
        EXIT(Rec.Code);
    END;

    PROCEDURE GetCaption@1000000008() : Text;
    BEGIN
      IF (DELCHR(Rec.Name, '<>', ' ') <> '') THEN
        EXIT(STRSUBSTNO('%1 (%2)', Rec.Name, Rec.Code))
      ELSE
        EXIT(Rec.Code);
    END;

    PROCEDURE SetupMissing@1000000003() : Text;
    BEGIN
      EXIT(tSetupMissing);
    END;

    LOCAL PROCEDURE "--- Get ---"@1000000024();
    BEGIN
    END;

    PROCEDURE GetText@1040005(pCode@1040000 : Code[20]) : Text[250];
    BEGIN
      //DOC NA2016.11 - Returning text value
      //  -> pCode: System behaviour code
      //  <- The value

      EXIT(GetTextAdv(pCode, '', 0, 0));
    END;

    PROCEDURE GetBoolean@1040004(pCode@9062230 : Code[20]) : Boolean;
    BEGIN
      //DOC NA2016.11 - Returning boolean value
      //  -> pCode: System behaviour code
      //  <- The value

      EXIT(GetBooleanAdv(pCode, ''));
    END;

    PROCEDURE GetInteger@1000000007(pCode@1000000000 : Code[20]) : Integer;
    BEGIN
      //DOC NA2016.11 - Returning integer value
      //  -> pCode: System behaviour code
      //  <- The value

      EXIT(GetIntegerAdv(pCode, '', 0, 0));
    END;

    PROCEDURE GetDecimal@1040008(pCode@9062230 : Code[20]) : Decimal;
    BEGIN
      //DOC NA2016.11 - Returning decimal value
      //  -> pCode: System behaviour code
      //  <- The value

      EXIT(GetDecimalAdv(pCode, ''));
    END;

    PROCEDURE GetDate@1000000006(pCode@9062230 : Code[20]) : Date;
    BEGIN
      //DOC NA2016.11 - Returning date value
      //  -> pCode: System behaviour code
      //  <- The value

      EXIT(GetDateAdv(pCode, ''));
    END;

    PROCEDURE GetOptionValue@1000000010(pCode@1000000000 : Code[20]) : Integer;
    BEGIN
      //DOC NA2016.11 - Returning option value (integer)
      //  -> pCode: System behaviour code
      //  <- The value

      EXIT(GetOptionValueAdv(pCode, '', ''));
    END;

    PROCEDURE GetOptionString@1000000011(pCode@1000000000 : Code[20]) : Text;
    BEGIN
      //DOC NA2016.11 - Returning option string
      //  -> pCode: System behaviour code
      //  <- The string

      EXIT(GetOptionStringAdv(pCode, '', ''));
    END;

    LOCAL PROCEDURE "--- Get (Advanced) ---"@9062248();
    BEGIN
    END;

    PROCEDURE GetTextAdv@9062247(pCode@1040000 : Code[20];pGroup@9062231 : Code[20];pRelationTableId@9062235 : Integer;pRelationPageId@9062234 : Integer) : Text[250];
    VAR
      lServerInstance@9062232 : Record 2000000112;
      lAnswer@9062230 : Text;
    BEGIN
      //DOC NA2016.11 - Returning text value (advanced version)
      //  -> pCode: System behaviour code
      //  -> pGroup: System behaviour group
      //  -> pRelationTableId: Relation table ID
      //  -> pRelationPageId: Relation page ID
      //  <- The value

      IF (GetRecordAdv(pCode, Rec."Answer Type"::Text, pGroup, pRelationTableId, pRelationPageId, '')) THEN
      BEGIN
        lServerInstance.GET(SERVICEINSTANCEID);
        lAnswer := Rec."Answer (Text)";
        lAnswer := String.ReplaceAll(lAnswer, '[SERVICEINSTANCEID]', FORMAT(SERVICEINSTANCEID, 0, 1));
        lAnswer := String.ReplaceAll(lAnswer, '[TENANTID]', TENANTID);
        lAnswer := String.ReplaceAll(lAnswer, '[COMPANYNAME]', COMPANYNAME);
        lAnswer := String.ReplaceAll(lAnswer, '[USERID]', USERID);
        lAnswer := String.ReplaceAll(lAnswer, '[SERVICEINSTANCENAME]', lServerInstance."Server Instance Name");
      END
      ELSE
        CLEAR(lAnswer);
      EXIT(lAnswer);
    END;

    PROCEDURE GetBooleanAdv@9062246(pCode@9062232 : Code[20];pGroup@9062231 : Code[20]) : Boolean;
    BEGIN
      //DOC NA2016.11 - Returning boolean value (advanced version)
      //  -> pCode: System behaviour code
      //  -> pGroup: System behaviour group
      //  <- The value

      IF (GetRecordAdv(pCode, Rec."Answer Type"::Boolean, pGroup, 0, 0, '')) THEN
        EXIT(Rec."Answer (Boolean)")
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE GetIntegerAdv@9062245(pCode@9062231 : Code[20];pGroup@9062230 : Code[20];pRelationTableId@9062234 : Integer;pRelationPageId@9062233 : Integer) : Integer;
    VAR
      lAnswer@9062232 : Decimal;
    BEGIN
      //DOC NA2016.11 - Returning integer (advanced version)
      //  -> pCode: System behaviour code
      //  -> pGroup: System behaviour group
      //  -> pRelationTableId: Relation table ID
      //  -> pRelationPageId: Relation page ID
      //  <- The value

      IF (GetRecordAdv(pCode, Rec."Answer Type"::Decimal, pGroup, pRelationTableId, pRelationPageId, '')) THEN
        EXIT(ROUND(Rec."Answer (Decimal)", 1))
      ELSE
        EXIT(0);
    END;

    PROCEDURE GetDecimalAdv@9062244(pCode@9062232 : Code[20];pGroup@9062231 : Code[20]) : Decimal;
    BEGIN
      //DOC NA2016.11 - Returning integer (advanced version)
      //  -> pCode: System behaviour code
      //  -> pGroup: System behaviour group
      //  <- The value

      IF (GetRecordAdv(pCode, Rec."Answer Type"::Decimal, pGroup, 0, 0, '')) THEN
        EXIT(Rec."Answer (Decimal)")
      ELSE
        EXIT(0);
    END;

    PROCEDURE GetDateAdv@9062243(pCode@9062232 : Code[20];pGroup@9062231 : Code[20]) : Date;
    BEGIN
      //DOC NA2016.11 - Returning integer (advanced version)
      //  -> pCode: System behaviour code
      //  -> pGroup: System behaviour group
      //  <- The value

      IF (GetRecordAdv(pCode, Rec."Answer Type"::Date, pGroup, 0, 0, '')) THEN
        EXIT(Rec."Answer (Date)")
      ELSE
        EXIT(0D);
    END;

    PROCEDURE GetOptionValueAdv@9062242(pCode@9062231 : Code[20];pGroup@9062230 : Code[20];pOptionList@9062232 : Text) : Integer;
    BEGIN
      //DOC NA2016.11 - Returning integer (advanced version)
      //  -> pCode: System behaviour code
      //  -> pGroup: System behaviour group
      //  -> pOptionList: Option list
      //  <- The value

      IF (GetRecordAdv(pCode, Rec."Answer Type"::Integer, pGroup, 0, 0, pOptionList)) THEN
        EXIT(ROUND(Rec."Answer (Decimal)", 1))
      ELSE
        EXIT(0);
    END;

    PROCEDURE GetOptionStringAdv@9062241(pCode@9062231 : Code[20];pGroup@9062230 : Code[20];pOptionList@9062232 : Text) : Text;
    BEGIN
      //DOC NA2016.11 - Returning option string (advanced version)
      //  -> pCode: System behaviour code
      //  -> pGroup: System behaviour group
      //  -> pOptionList: Option list
      //  <- The string

      IF (GetRecordAdv(pCode, Rec."Answer Type"::Text, pGroup, 0, 0, pOptionList)) THEN
        EXIT(Rec."Answer (Text)")
      ELSE
        EXIT('');
    END;

    LOCAL PROCEDURE "--- Test ---"@1000000027();
    BEGIN
    END;

    PROCEDURE TestText@1000000000(pCode@1000000000 : Code[20]);
    BEGIN
      //DOC NA2015.1 - Testing text value of system behaviour
      //  -> pCode: Behaviour code

      GetRecord(pCode, "Answer Type"::Text);
      Rec.TESTFIELD("Answer (Text)");
    END;

    PROCEDURE TestBoolean@1000000001(pCode@1000000000 : Code[20]);
    BEGIN
      //DOC NA2015.1 - Testing boolean value of system behaviour
      //  -> pCode: Behaviour code

      GetRecord(pCode, "Answer Type"::Boolean);
      Rec.TESTFIELD("Answer (Boolean)");
    END;

    PROCEDURE TestInteger@1000000009(pCode@1000000000 : Code[20]);
    BEGIN
      //DOC NA2015.1 - Testing integer value of system behaviour
      //  -> pCode: Behaviour code

      GetRecord(pCode, "Answer Type"::Integer);
      Rec.TESTFIELD("Answer (Decimal)");
    END;

    PROCEDURE TestDecimal@1000000002(pCode@1000000000 : Code[20]);
    VAR
      lSystemBehaviour@1000000001 : Record 9062230;
    BEGIN
      //DOC NA2015.1 - Testing decimal value of system behaviour
      //  -> pCode: Behaviour code

      GetRecord(pCode, "Answer Type"::Decimal);
      Rec.TESTFIELD("Answer (Decimal)");
    END;

    PROCEDURE TestDate@1000000005(pCode@1000000000 : Code[20]);
    BEGIN
      //DOC NA2015.1 - Testing date value of system behaviour
      //  -> pCode: Behaviour code

      GetRecord(pCode,"Answer Type"::Date);
      Rec.TESTFIELD("Answer (Date)");
    END;

    PROCEDURE TestOption@1000000028(pCode@1000000000 : Code[20]);
    BEGIN
      //DOC NA2015.1 - Testing option value of system behaviour
      //  -> pCode: Behaviour code

      GetRecord(pCode,"Answer Type"::Option);
      Rec.TESTFIELD("Answer (Decimal)");
    END;

    LOCAL PROCEDURE "--- Set ---"@1000000026();
    BEGIN
    END;

    PROCEDURE SetText@1000000029(pCode@1040000 : Code[20];pValue@1000000000 : Text[250];pModify@1000000001 : Boolean) : Boolean;
    BEGIN
      //DOC NA2015.4 - Setting text value
      //  -> pCode: Behaviour code
      //  -> pValue: The value
      //  -> pModify: Modify flag

      SetUserText(pCode, USERID, pValue, pModify);
    END;

    PROCEDURE SetBoolean@1000000018(pCode@1040000 : Code[20];pValue@1000000000 : Boolean;pModify@1000000001 : Boolean) : Boolean;
    BEGIN
      //DOC NA2015.4 - Setting boolean value
      //  -> pCode: Behaviour code
      //  -> pValue: The value
      //  -> pModify: Modify flag

      SetUserBoolean(pCode, USERID, pValue, pModify);
    END;

    PROCEDURE SetInteger@1000000017(pCode@1000000000 : Code[20];pValue@1000000001 : Integer;pModify@1000000002 : Boolean) : Integer;
    BEGIN
      //DOC NA2015.4 - Setting integer value
      //  -> pCode: Behaviour code
      //  -> pValue: The value
      //  -> pModify: Modify flag

      SetUserInteger(pCode, USERID, pValue, pModify);
    END;

    PROCEDURE SetDecimal@1000000016(pCode@1040000 : Code[20];pValue@1000000000 : Decimal;pModify@1000000001 : Boolean) : Decimal;
    BEGIN
      //DOC NA2015.4 - Setting decimal value
      //  -> pCode: Behaviour code
      //  -> pValue: The value
      //  -> pModify: Modify flag

      SetUserDecimal(pCode, USERID, pValue, pModify);
    END;

    PROCEDURE SetDate@1000000015(pCode@1040000 : Code[20];pValue@1000000000 : Date;pModify@1000000001 : Boolean) : Date;
    BEGIN
      //DOC NA2015.4 - Setting date value
      //  -> pCode: Behaviour code
      //  -> pValue: The value
      //  -> pModify: Modify flag

      SetUserDate(pCode, USERID, pValue, pModify);
    END;

    PROCEDURE SetOptionValue@1000000014(pCode@1000000000 : Code[20];pValue@1000000001 : Integer;pModify@1000000002 : Boolean) : Integer;
    BEGIN
      //DOC NA2015.4 - Setting option value
      //  -> pCode: Behaviour code
      //  -> pValue: The value
      //  -> pModify: Modify flag

      SetUserOptionValue(pCode, USERID, pValue, pModify);
    END;

    PROCEDURE SetOptionString@1000000013(pCode@1000000000 : Code[20];pValue@1000000001 : Text[250];pModify@1000000002 : Boolean) : Text;
    BEGIN
      //DOC NA2015.4 - Setting option string
      //  -> pCode: Behaviour code
      //  -> pValue: The string
      //  -> pModify: Modify flag

      SetUserOptionString(pCode, USERID, pValue, pModify);
    END;

    LOCAL PROCEDURE "--- Set User ---"@1000000033();
    BEGIN
    END;

    PROCEDURE SetUserText@1000000032(pCode@1040000 : Code[20];pUserId@1000000002 : Code[50];pValue@1000000000 : Text[250];pModify@1000000001 : Boolean) : Boolean;
    BEGIN
      //DOC NA2015.4 - Setting user-specific text value
      //  -> pCode: Behaviour code
      //  -> pUserId: User ID
      //  -> pValue: The value
      //  -> pModify: Modify flag

      GetUserRecord(pCode, pUserId, Rec."Answer Type"::Text, Rec);
      IF ( NOT (Rec."Behaviour Disabled")) THEN
      BEGIN
        Rec.VALIDATE("Answer (Text)", pValue);
        IF (pModify) THEN
          Rec.MODIFY(TRUE);
      END;
    END;

    PROCEDURE SetUserBoolean@1000000031(pCode@1040000 : Code[20];pUserId@1000000002 : Code[50];pValue@1000000000 : Boolean;pModify@1000000001 : Boolean) : Boolean;
    BEGIN
      //DOC NA2015.4 - Setting user-specific boolean value
      //  -> pCode: Behaviour code
      //  -> pUserId: User ID
      //  -> pValue: The value
      //  -> pModify: Modify flag

      GetUserRecord(pCode, pUserId, Rec."Answer Type"::Boolean, Rec);
      IF ( NOT (Rec."Behaviour Disabled")) THEN
      BEGIN
        Rec.VALIDATE("Answer (Boolean)", pValue);
        IF (pModify) THEN
          Rec.MODIFY(TRUE);
      END;
    END;

    PROCEDURE SetUserInteger@1000000030(pCode@1000000000 : Code[20];pUserId@1000000003 : Code[50];pValue@1000000001 : Integer;pModify@1000000002 : Boolean) : Integer;
    BEGIN
      //DOC NA2015.4 - Setting user-specific integer value
      //  -> pCode: Behaviour code
      //  -> pUserId: User ID
      //  -> pValue: The value
      //  -> pModify: Modify flag

      GetUserRecord(pCode, pUserId, Rec."Answer Type"::Decimal, Rec);
      IF ( NOT (Rec."Behaviour Disabled")) THEN
      BEGIN
        Rec.VALIDATE("Answer (Decimal)", pValue);
        IF (pModify) THEN
          Rec.MODIFY(TRUE);
      END;
    END;

    PROCEDURE SetUserDecimal@1000000022(pCode@1040000 : Code[20];pUserId@1000000002 : Code[50];pValue@1000000000 : Decimal;pModify@1000000001 : Boolean) : Decimal;
    BEGIN
      //DOC NA2015.4 - Setting user-specific decimal value
      //  -> pCode: Behaviour code
      //  -> pUserId: User ID
      //  -> pValue: The value
      //  -> pModify: Modify flag

      GetUserRecord(pCode, pUserId, Rec."Answer Type"::Decimal, Rec);
      IF ( NOT (Rec."Behaviour Disabled")) THEN
      BEGIN
        Rec.VALIDATE("Answer (Decimal)", pValue);
        IF (pModify) THEN
          Rec.MODIFY(TRUE);
      END;
    END;

    PROCEDURE SetUserDate@1000000021(pCode@1040000 : Code[20];pUserId@1000000002 : Code[50];pValue@1000000000 : Date;pModify@1000000001 : Boolean) : Date;
    BEGIN
      //DOC NA2015.4 - Setting user-specific date value
      //  -> pCode: Behaviour code
      //  -> pUserId: User ID
      //  -> pValue: The value
      //  -> pModify: Modify flag

      GetUserRecord(pCode, pUserId, Rec."Answer Type"::Decimal, Rec);
      IF ( NOT (Rec."Behaviour Disabled")) THEN
      BEGIN
        Rec.VALIDATE("Answer (Date)", pValue);
        IF (pModify) THEN
          Rec.MODIFY(TRUE);
      END;
    END;

    PROCEDURE SetUserOptionValue@1000000020(pCode@1000000000 : Code[20];pUserId@1000000003 : Code[50];pValue@1000000001 : Integer;pModify@1000000002 : Boolean) : Integer;
    BEGIN
      //DOC NA2015.4 - Setting user-specific option value
      //  -> pCode: Behaviour code
      //  -> pUserId: User ID
      //  -> pValue: The value
      //  -> pModify: Modify flag

      GetUserRecord(pCode, pUserId, Rec."Answer Type"::Option, Rec);
      IF ( NOT (Rec."Behaviour Disabled")) THEN
      BEGIN
        Rec.VALIDATE("Answer (Decimal)", pValue);
        IF (pModify) THEN
          Rec.MODIFY(TRUE);
      END;
    END;

    PROCEDURE SetUserOptionString@1000000019(pCode@1000000000 : Code[20];pUserId@1000000002 : Code[50];pValue@1000000001 : Text[250];pModify@1000000003 : Boolean) : Text;
    BEGIN
      //DOC NA2015.4 - Setting user-specific option string
      //  -> pCode: Behaviour code
      //  -> pUserId: User ID
      //  -> pValue: The string
      //  -> pModify: Modify flag

      GetUserRecord(pCode, pUserId, Rec."Answer Type"::Option, Rec);
      IF ( NOT (Rec."Behaviour Disabled")) THEN
      BEGIN
        Rec.VALIDATE("Answer (Text)", pValue);
        IF (pModify) THEN
          Rec.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000025();
    BEGIN
    END;

    LOCAL PROCEDURE GetRecord@1040002(pCode@1000000006 : Code[20];pAnswerType@1000000004 : Integer) : Boolean;
    VAR
      TxtSetupMissing@1000000000 : TextConst 'ENU=Setup Missing;ENG=Setup Missing';
      TxtCoudntFind@1000000001 : TextConst 'ENU=Couldn''t find %1 in "%2";ENG=Couldn''t find %1 in "%2"';
    BEGIN
      //DOC NA2015.4 - Getting (system behaviour) record
      //  -> pCode: Code
      //  -> pAnswerType: Answer type
      //  <- TRUE = System behaviour enabled, FALSE = System behaviour disabled

      EXIT(GetRecordAdv(pCode, pAnswerType, '', 0, 0, ''));
    END;

    LOCAL PROCEDURE GetRecordAdv@9062232(pCode@9062231 : Code[20];pAnswerType@9062230 : Integer;pGroup@9062232 : Code[20];pRelationTableId@9062236 : Integer;pRelationPageId@9062235 : Integer;pOptionList@9062234 : Text) : Boolean;
    VAR
      lRecordFound@9062233 : Boolean;
    BEGIN
      //DOC NA2015.4 - Getting (system behaviour) record
      //  -> pCode: Code
      //  -> pAnswerType: Answer type
      //  -> pGroup: Group
      //  <- TRUE = System behaviour enabled, FALSE = System behaviour disabled

      lRecordFound := GetOrCreateRecord(pCode, USERID, pAnswerType, pGroup, pRelationTableId, pRelationPageId, pOptionList, FALSE);
      IF ( NOT (lRecordFound)) THEN
        lRecordFound := GetOrCreateRecord(pCode, '', pAnswerType, pGroup, pRelationTableId, pRelationPageId, pOptionList, TRUE);
      EXIT( NOT (Rec."Behaviour Disabled"));
    END;

    LOCAL PROCEDURE GetUserRecord@1000000037(pCode@1000000006 : Code[20];pUserId@1000000005 : Code[50];pAnswerType@1000000004 : Integer;VAR pSystemBehaviour@1000000002 : Record 9062230) : Boolean;
    VAR
      TxtSetupMissing@1000000000 : TextConst 'ENU=Setup Missing;ENG=Setup Missing';
      TxtCoudntFind@1000000001 : TextConst 'ENU=Couldn''t find %1 in "%2";ENG=Couldn''t find %1 in "%2"';
    BEGIN
      //DOC NA2016.11 - Getting (system behaviour) user record
      //  -> pCode: Code
      //  -> pUserId: User ID
      //  -> pAnswerType: Answer type
      //  <- TRUE = System behaviour enabled, FALSE = System behaviour disabled

      EXIT(GetUserRecordAdv(pCode, pUserId, pAnswerType, '', 0, 0, ''));
    END;

    LOCAL PROCEDURE GetUserRecordAdv@9062231(pCode@9062232 : Code[20];pUserId@9062231 : Code[50];pAnswerType@9062230 : Integer;pGroup@9062233 : Code[20];pRelationTableId@9062236 : Integer;pRelationPageId@9062235 : Integer;pOptionList@9062234 : Text) : Boolean;
    BEGIN
      //DOC NA2016.11 - Getting (system behaviour) user record (advanced version)
      //  -> pCode: Code
      //  -> pUserId: User ID
      //  -> pAnswerType: Answer type
      //  -> pGroup: Group (system behaviour group)
      //  -> pRelationTableId: Relation table ID
      //  -> pRelationPageId: Relaiton page ID
      //  -> pOptionList: Option list
      //  <- TRUE = System behaviour enabled, FALSE = System behaviour disabled

      GetOrCreateRecord(pCode, pUserId, pAnswerType, pGroup, pRelationTableId, pRelationPageId, pOptionList, TRUE);
      EXIT( NOT (Rec."Behaviour Disabled"));
    END;

    LOCAL PROCEDURE GetOrCreateRecord@1000000038(pCode@1040000 : Code[20];pUserId@1000000003 : Code[50];pAnswerType@1000000002 : Integer;pGroup@9062230 : Code[20];pRelationTableId@9062231 : Integer;pRelationPageId@9062232 : Integer;pOptionList@9062233 : Text;pCreate@1000000005 : Boolean) : Boolean;
    VAR
      TxtSetupMissing@1000000000 : TextConst 'ENU=Setup Missing;ENG=Setup Missing';
      TxtCoudntFind@1000000001 : TextConst 'ENU=Couldn''t find %1 in "%2";ENG=Couldn''t find %1 in "%2"';
      lSystemBehaviour@1000000007 : Record 9062230;
      lResult@1000000006 : Boolean;
    BEGIN
      //DOC NA2015.4 - Getting (system behaviour) record - internal version
      //  -> pCode: Code
      //  -> pUserId: User ID
      //  -> pAnswerType: Answer type
      //  -> pGroup: Group (system behaviour group)
      //  -> pRelationTableId: Relation table ID
      //  -> pRelationPageId: Relaiton page ID
      //  -> pOptionList: Option list
      //  -> pCreate: Flag to create a new record if it doesn't exist
      //  <- TRUE: Record found (or created), FALSE: Record not there

      lResult := FALSE;

      IF (Rec.GET(pCode, pUserId)) THEN
        lResult := TRUE
      ELSE
        IF (pCreate) THEN
        BEGIN
          IF ((pUserId <> '') AND (lSystemBehaviour.GET(pCode, ''))) THEN
          BEGIN
            Rec.COPY(lSystemBehaviour);
            Rec."User ID" := pUserId;
            Rec.INSERT(TRUE);
          END
          ELSE
          BEGIN
            CLEAR(Rec);
            Rec.INIT();
            Rec.Code := pCode;
            Rec."User ID" := pUserId;
            Rec."Setup Behaviour Required" := TRUE;
            Rec.Name := TxtSetupMissing;
            Rec.Description := TxtSetupMissing;
            Rec."Answer Type" := pAnswerType;
            Rec.Group := pGroup;
            Rec."Relation Table ID" := pRelationTableId;
            Rec."Relation Page ID" := pRelationPageId;
            Rec."Option List" := pOptionList;
            Rec.INSERT(TRUE);
            Logger.Log('SYSB', Logger.Type::Warning, STRSUBSTNO(TxtCoudntFind, pCode, Rec.TABLECAPTION), USERID);
          END;
          lResult := TRUE;
        END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE UpdateOption@1000000012(pFieldNo@1000000000 : Integer);
    BEGIN
      //DOC NA2015.4 - Updating option in the current record
      //  -> pFieldNo: Field number which triggered the update

      IF (Rec."Answer Type" <> Rec."Answer Type"::Option) THEN
        EXIT;

      CASE (pFieldNo) OF
        Rec.FIELDNO("Answer (Decimal)"):
          Rec.Answer := FORMAT(Rec."Answer (Decimal)");
        Rec.FIELDNO("Answer (Text)"):
          Rec.Answer := Rec."Answer (Text)";
      END;

      SystemBehaviourManagement.ValidateOptionAnswer(Rec);
    END;

    LOCAL PROCEDURE "-- CheckAnswerIsValid --"@1000000034();
    BEGIN
    END;

    PROCEDURE IsAnswerValid@1000000036() IsValid : Boolean;
    BEGIN
      CASE "Answer Type" OF
        "Answer Type"::Text :
          BEGIN
            IF "Answer (Text)" = '' THEN EXIT(TRUE);
            CASE "Special Function" OF
              "Special Function"::" " : EXIT(TRUE);
              "Special Function"::Folder : EXIT(IsAnswerValid_Folder);
              "Special Function"::File : EXIT(IsAnswerValid_File);
            END;
          END;
        ELSE EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE IsAnswerValid_Folder@1000000047() IsValid : Boolean;
    BEGIN
      EXIT(FileSystem.FolderExists(FALSE,"Answer (Text)"));
    END;

    LOCAL PROCEDURE IsAnswerValid_File@1000000048() IsValid : Boolean;
    BEGIN
      EXIT(FileSystem.FileExists(FALSE,"Answer (Text)"));
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 10/08/2012 - Migrated to 2013
      //DOC NA2015.1  IH 16/01/2012 - Increased User ID to 50
      //DOC NA2015.1  PC 13/02/2013 - Added Name and Group fields
      //DOC NA2015.1  PC 03/02/2014 - Added "Sub Group"
      //DOC NA2015.4  JH 28/12/2014 - "Integer,Option" answer types added, "Option List" added, "Relation Table ID" added
      //DOC NA2016.10 JH 27/08/2015 - Upgraded to 2016
      //DOC NA2016.11 AP 05/11/2015 - Addedd [System Variables] to the text answer
      //DOC NA2016.11 JH 10/11/2015 - Advanced "Get*" functions
      //DOC NA2016.12 JH 28/01/2016 - New string codeunit
      //DOC NA2016.15 JH 06/05/2016 - CfMD amendments
      //DOC NA2016.16 JH 13/07/2016 - Fixes
    }
    END.
  }
}

