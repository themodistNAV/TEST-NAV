OBJECT Table 9087036 Store Allocation Line
{
  OBJECT-PROPERTIES
  {
    Date=23/09/16;
    Time=[ 9:29:49 AM];
    Version List=NS2016.16;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Store Allocation Code");
               IF (Rec."Line No." = 0) THEN
                 Rec."Line No." := NewLineNo();
             END;

    CaptionML=[ENU=Store Allocation Line;
               ENG=Store Allocation Line];
    LookupPageID=Page9087079;
    DrillDownPageID=Page9087079;
  }
  FIELDS
  {
    { 1   ;   ;Store Allocation Code;Code10       ;CaptionML=[ENU=Store Allocation Code;
                                                              ENG=Store Allocation Code] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
    { 10  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              ENG=Item No.] }
    { 11  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ENG=Variant Code] }
    { 20  ;   ;Location Code       ;Code20        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code] }
    { 30  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                eQtyAllocCantBeGreaterThenQty@1000000000 : TextConst 'ENU=Quantity allocated (%1) can''t be greater than quantity (%2) on %3 where %4.;ENG=Quantity allocated (%1) can''t be greater than quantity (%2) on %3 where %4.';
                                                                lQuantityAllocated@1000000001 : Decimal;
                                                              BEGIN
                                                                IF (Rec.Quantity > xRec.Quantity) THEN
                                                                BEGIN
                                                                  Rec.TESTFIELD("Transfer Order No.", '');

                                                                  BuyingSheetSummaryLine.RESET();
                                                                  BuyingSheetSummaryLine.SETCURRENTKEY("Store Allocation Code", "Item No.");
                                                                  BuyingSheetSummaryLine.SETRANGE("Store Allocation Code", Rec."Store Allocation Code");
                                                                  BuyingSheetSummaryLine.SETRANGE("Item No.", Rec."Item No.");
                                                                  IF (BuyingSheetSummaryLine.FINDFIRST()) THEN
                                                                  BEGIN
                                                                    BuyingSheetSummaryLine.CALCFIELDS("Quantity Allocated");
                                                                    lQuantityAllocated := BuyingSheetSummaryLine."Quantity Allocated" - xRec.Quantity + Rec.Quantity;
                                                                    IF (lQuantityAllocated > BuyingSheetSummaryLine.Quantity) THEN
                                                                      ERROR(eQtyAllocCantBeGreaterThenQty, lQuantityAllocated, BuyingSheetSummaryLine.Quantity, BuyingSheetSummaryLine.TABLECAPTION(),
                                                                        BuyingSheetSummaryLine.GETPOSITION(TRUE));
                                                                  END;

                                                                  BuyingSheetLine.RESET();
                                                                  BuyingSheetLine.SETCURRENTKEY("Store Allocation Code", "Item No.", "Variant Code");
                                                                  BuyingSheetLine.SETRANGE("Store Allocation Code", Rec."Store Allocation Code");
                                                                  BuyingSheetLine.SETRANGE("Item No.", Rec."Item No.");
                                                                  BuyingSheetLine.SETRANGE("Variant Code", Rec."Variant Code");
                                                                  IF (BuyingSheetLine.FINDFIRST()) THEN
                                                                  BEGIN
                                                                    BuyingSheetLine.CALCFIELDS("Quantity Allocated");
                                                                    lQuantityAllocated := BuyingSheetLine."Quantity Allocated" - xRec.Quantity + Rec.Quantity;
                                                                    IF (lQuantityAllocated > BuyingSheetLine.Quantity) THEN
                                                                      ERROR(eQtyAllocCantBeGreaterThenQty, lQuantityAllocated, BuyingSheetLine.Quantity, BuyingSheetLine.TABLECAPTION(),
                                                                        BuyingSheetLine.GETPOSITION(TRUE));
                                                                  END;

                                                                  PurchaseSummaryLine.RESET();
                                                                  PurchaseSummaryLine.SETCURRENTKEY("Store Allocation Code", Type, "No.");
                                                                  PurchaseSummaryLine.SETRANGE("Store Allocation Code", Rec."Store Allocation Code");
                                                                  PurchaseSummaryLine.SETRANGE(Type, PurchaseSummaryLine.Type::Item);
                                                                  PurchaseSummaryLine.SETRANGE("No.", Rec."Item No.");
                                                                  IF (PurchaseSummaryLine.FINDFIRST()) THEN
                                                                  BEGIN
                                                                    PurchaseSummaryLine.CALCFIELDS("Total Quantity", "Quantity Allocated");
                                                                    lQuantityAllocated := PurchaseSummaryLine."Quantity Allocated" - xRec.Quantity + Rec.Quantity;
                                                                    IF (lQuantityAllocated > PurchaseSummaryLine."Total Quantity") THEN
                                                                      ERROR(eQtyAllocCantBeGreaterThenQty, lQuantityAllocated, PurchaseSummaryLine."Total Quantity", PurchaseSummaryLine.TABLECAPTION(),
                                                                        PurchaseSummaryLine.GETPOSITION(TRUE));
                                                                  END;

                                                                  PurchaseLine.RESET();
                                                                  PurchaseLine.SETCURRENTKEY("Store Allocation Code", Type, "No.");
                                                                  PurchaseLine.SETRANGE("Store Allocation Code", Rec."Store Allocation Code");
                                                                  PurchaseLine.SETRANGE(Type, PurchaseLine.Type::Item);
                                                                  PurchaseLine.SETRANGE("No.", Rec."Item No.");
                                                                  PurchaseLine.SETRANGE("Variant Code", Rec."Variant Code");
                                                                  IF (PurchaseLine.FINDFIRST()) THEN
                                                                  BEGIN
                                                                    PurchaseLine.CALCFIELDS("Quantity Allocated");
                                                                    lQuantityAllocated := PurchaseLine."Quantity Allocated" - xRec.Quantity + Rec.Quantity;
                                                                    IF (lQuantityAllocated > PurchaseLine.Quantity) THEN
                                                                      ERROR(eQtyAllocCantBeGreaterThenQty, lQuantityAllocated, PurchaseLine.Quantity, PurchaseLine.TABLECAPTION(),
                                                                        PurchaseLine.GETPOSITION(TRUE));
                                                                  END;

                                                                  ConsignmentLine.RESET();
                                                                  ConsignmentLine.SETCURRENTKEY("Store Allocation Code", "Item No.");
                                                                  ConsignmentLine.SETRANGE("Store Allocation Code", Rec."Store Allocation Code");
                                                                  ConsignmentLine.SETRANGE("Item No.", Rec."Item No.");
                                                                  ConsignmentLine.SETRANGE("Variant Code", Rec."Variant Code");
                                                                  IF (ConsignmentLine.FINDFIRST()) THEN
                                                                  BEGIN
                                                                    ConsignmentLine.CALCFIELDS("Quantity Allocated");
                                                                    lQuantityAllocated := ConsignmentLine."Quantity Allocated" - xRec.Quantity + Rec.Quantity;
                                                                    IF (lQuantityAllocated > ConsignmentLine.Quantity) THEN
                                                                      ERROR(eQtyAllocCantBeGreaterThenQty, lQuantityAllocated, ConsignmentLine.Quantity, ConsignmentLine.TABLECAPTION(), ConsignmentLine.GETPOSITION(TRUE));
                                                                  END;

                                                                  SalesSummaryLine.RESET();
                                                                  SalesSummaryLine.SETCURRENTKEY("Store Allocation Code", Type, "No.");
                                                                  SalesSummaryLine.SETRANGE("Store Allocation Code", Rec."Store Allocation Code");
                                                                  SalesSummaryLine.SETRANGE(Type, SalesSummaryLine.Type::Item);
                                                                  SalesSummaryLine.SETRANGE("No.", Rec."Item No.");
                                                                  IF (SalesSummaryLine.FINDFIRST()) THEN
                                                                  BEGIN
                                                                    SalesSummaryLine.CALCFIELDS("Total Quantity", "Quantity Allocated");
                                                                    lQuantityAllocated := SalesSummaryLine."Quantity Allocated" - xRec.Quantity + Rec.Quantity;
                                                                    IF (lQuantityAllocated > SalesSummaryLine."Total Quantity") THEN
                                                                      ERROR(eQtyAllocCantBeGreaterThenQty, lQuantityAllocated, SalesSummaryLine."Total Quantity", SalesSummaryLine.TABLECAPTION(),
                                                                        SalesSummaryLine.GETPOSITION(TRUE));
                                                                  END;

                                                                  SalesLine.RESET();
                                                                  SalesLine.SETCURRENTKEY("Store Allocation Code", Type, "No.");
                                                                  SalesLine.SETRANGE("Store Allocation Code", Rec."Store Allocation Code");
                                                                  SalesLine.SETRANGE(Type, SalesLine.Type::Item);
                                                                  SalesLine.SETRANGE("No.", Rec."Item No.");
                                                                  SalesLine.SETRANGE("Variant Code", Rec."Variant Code");
                                                                  IF (SalesLine.FINDFIRST()) THEN
                                                                  BEGIN
                                                                    SalesLine.CALCFIELDS("Quantity Allocated");
                                                                    lQuantityAllocated := SalesLine."Quantity Allocated" - xRec.Quantity + Rec.Quantity;
                                                                    IF (lQuantityAllocated > SalesLine.Quantity) THEN
                                                                      ERROR(eQtyAllocCantBeGreaterThenQty, lQuantityAllocated, SalesLine.Quantity, SalesLine.TABLECAPTION(), SalesLine.GETPOSITION(TRUE));
                                                                  END;

                                                                  WarehouseReceiptLine.RESET();
                                                                  WarehouseReceiptLine.SETCURRENTKEY("Store Allocation Code", "Item No.");
                                                                  WarehouseReceiptLine.SETRANGE("Store Allocation Code", Rec."Store Allocation Code");
                                                                  WarehouseReceiptLine.SETRANGE("Item No.", Rec."Item No.");
                                                                  IF (WarehouseReceiptLine.FINDFIRST()) THEN
                                                                  BEGIN
                                                                    WarehouseReceiptLine.CALCFIELDS("Quantity Allocated");
                                                                    lQuantityAllocated := WarehouseReceiptLine."Quantity Allocated" - xRec.Quantity + Rec.Quantity;
                                                                    IF (lQuantityAllocated > WarehouseReceiptLine.Quantity) THEN
                                                                      ERROR(eQtyAllocCantBeGreaterThenQty, lQuantityAllocated, WarehouseReceiptLine.Quantity, WarehouseReceiptLine.TABLECAPTION(),
                                                                        WarehouseReceiptLine.GETPOSITION(TRUE));
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENG=Quantity];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 40  ;   ;Transfer Order No.  ;Code20        ;TableRelation="Transfer Header";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Transfer Order No.;
                                                              ENG=Transfer Order No.] }
  }
  KEYS
  {
    {    ;Store Allocation Code,Line No.          ;Clustered=Yes }
    {    ;Transfer Order No.                       }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PurchaseSummaryLine@1000000003 : Record 9087030;
      PurchaseLine@1000000001 : Record 39;
      BuyingSheetSummaryLine@1000000000 : Record 9087021;
      BuyingSheetLine@1000000002 : Record 9087022;
      SalesSummaryLine@1000000007 : Record 9087031;
      SalesLine@1000000005 : Record 37;
      WarehouseReceiptLine@1000000006 : Record 7317;
      ConsignmentLine@1000000004 : Record 9062448;

    PROCEDURE NewLineNo@1000000001() : Integer;
    VAR
      lStoreAllocationLine@1000000000 : Record 9087036;
    BEGIN
      Rec.TESTFIELD("Store Allocation Code");
      lStoreAllocationLine.RESET();
      lStoreAllocationLine.SETRANGE("Store Allocation Code", Rec."Store Allocation Code");
      IF (lStoreAllocationLine.FINDLAST()) THEN
        EXIT(lStoreAllocationLine."Line No." + 10000)
      ELSE
        EXIT(10000);
    END;

    PROCEDURE ShowTransferOrder@1000000000();
    VAR
      lTransferHeader@1000000000 : Record 5740;
    BEGIN
      IF (Rec."Transfer Order No." = '') THEN
        EXIT;
      IF ( NOT (lTransferHeader.GET(Rec."Transfer Order No."))) THEN
        EXIT;
      PAGE.RUN(PAGE::"Transfer Order", lTransferHeader);
    END;

    BEGIN
    {
      //DOC NS2015.1  JH 19/11/2013 - Created
      //DOC NS2015.1  JH 19/02/2014 - Amendments
      //DOC NS2015.6  JH 09/04/2015 - Name changed to "*Store*" (clash with order stock allocation)
      //DOC NS2016.16 JH 07/09/2016 - nSemble 2016
    }
    END.
  }
}

