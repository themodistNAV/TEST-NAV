OBJECT Codeunit 9086961 nF. Record Filter Management
{
  OBJECT-PROPERTIES
  {
    Date=23/10/16;
    Time=[ 4:45:44 PM];
    Version List=NF2016.17;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NfPermission@1000000007 : Record 9086958;
      NfPermissionRecordFilter@1000000000 : Record 9086959;
      tRecordFilterViewText@1000000003 : TextConst 'ENU=%1: %2;ENG=%1: %2';
      tRecordFilterViewSeparator@1000000002 : TextConst 'ENU=,;ENG=,';
      tRecordFilterViewField@1000000001 : TextConst 'ENU="%2=%3";ENG="%2=%3"';
      tRecordFilterText@1000000004 : TextConst 'ENU=%2;ENG=%2';
      tRecordFilterSeparator@1000000006 : TextConst 'ENU=", ";ENG=", "';
      tRecordFilterField@1000000005 : TextConst 'ENU="%2 = %3";ENG="%2 = %3"';
      NfSmartFilterManagement@1000000008 : Codeunit 9086968;

    PROCEDURE CheckPermissionObject@1000000002(pNfPermission@1000000000 : Record 9086958);
    VAR
      eIncorrectType@1000000003 : TextConst 'ENU=Permission record filters can be defined only for "Give" permissions.;ENG=Permission record filters can be defined only for "Give" permissions.';
      eIncorrectObjectType@1000000001 : TextConst 'ENU=Permission record filters can be defined only for tables.;ENG=Permission record filters can be defined only for tables.';
      eNoObjectId@1000000002 : TextConst 'ENU=Permission record filters can be defined only if table ID ("%1") is known.;ENG=Permission record filters can be defined only if table ID ("%1") is known.';
    BEGIN
      ///<summary>Checking permission object before editing record filters</summary>
      ///<param name="pNfPermission">The permission</param>

      IF (pNfPermission.Type <> pNfPermission.Type::Give) THEN
        ERROR(eIncorrectType);
      IF (pNfPermission."Object Type" <> pNfPermission."Object Type"::Table) THEN
        ERROR(eIncorrectObjectType);
      IF (pNfPermission."Object ID" = 0) THEN
        ERROR(eNoObjectId, pNfPermission.FIELDCAPTION("Object ID"));
    END;

    PROCEDURE CreateRecordFilter@1000000001(VAR pNfPermission@1000000001 : Record 9086958);
    VAR
      lNfPermissionRecordFilter@1000000000 : Record 9086959;
    BEGIN
      ///<summary>Creating record filter for given permission</summary>
      ///<param name="pNfPermission">nForcement permission</param>

      CreateRecordFilterForField(pNfPermission, lNfPermissionRecordFilter, FALSE);
    END;

    PROCEDURE CreateRecordFilterForField@1000000003(VAR pNfPermission@1000000001 : Record 9086958;pNfPermissionRecordFilter@1000000000 : Record 9086959;pDeleting@1000000002 : Boolean);
    VAR
      lRecordFilterView@1000000004 : Text;
      lRecordFilter@1000000003 : Text;
    BEGIN
      ///<summary>Creating record filter text for given field</summary>
      ///<param name="pNfPermission">nForcement permission</param>
      ///<param name="pNfPermissionRecordFilter">The filter</param>
      ///<param name="pDeleting">Deleting flag</param>

      NfPermission := pNfPermission;
      NfPermission.CALCFIELDS("Object Name");

      lRecordFilterView := '';
      lRecordFilter := '';

      IF (pNfPermission.ID <> 0) THEN
      BEGIN
        IF ((pNfPermissionRecordFilter.ID <> 0) AND ( NOT (pDeleting))) THEN
          AddToRecordFilter(pNfPermissionRecordFilter, lRecordFilterView, lRecordFilter);

        NfPermissionRecordFilter.RESET();
        NfPermissionRecordFilter.SETCURRENTKEY("nF. Permission ID");
        NfPermissionRecordFilter.SETRANGE("nF. Permission ID", pNfPermission.ID);
        IF (pNfPermissionRecordFilter.ID <> 0) THEN
          NfPermissionRecordFilter.SETFILTER(ID, '<>%1', pNfPermissionRecordFilter.ID);
        IF (NfPermissionRecordFilter.FINDSET()) THEN
        REPEAT
          AddToRecordFilter(NfPermissionRecordFilter, lRecordFilterView, lRecordFilter);
        UNTIL (NfPermissionRecordFilter.NEXT() = 0);

        IF (lRecordFilterView <> '') THEN
          lRecordFilterView := STRSUBSTNO(tRecordFilterViewText, NfPermission."Object Name", lRecordFilterView);
        IF (lRecordFilter <> '') THEN
          lRecordFilter := STRSUBSTNO(tRecordFilterText, NfPermission."Object Name", lRecordFilter);
      END;

      NfPermission.SetRecordFilterView(lRecordFilterView);
      NfPermission.SetRecordFilter(lRecordFilter);

      pNfPermission := NfPermission;
    END;

    LOCAL PROCEDURE AddToRecordFilter@1000000004(pNfPermissionRecordFilter@1000000001 : Record 9086959;VAR pRecordFilterView@1000000000 : Text;VAR pRecordFilter@1000000002 : Text);
    BEGIN
      ///<summary>Adding to filter text</summary>
      ///<param name="pNfPermissionRecordFilter">nF. permisison record filter</param>
      ///<param name="pRecordFilterView">Target record filter view</param>
      ///<param name="pRecordFilter">Target record filter</param>

      IF ((pNfPermissionRecordFilter."Table ID" = 0) OR (pNfPermissionRecordFilter."Field ID" = 0) OR
          (pNfPermissionRecordFilter.Filter = '')) THEN
        EXIT;

      pNfPermissionRecordFilter.CALCFIELDS("Field Name");

      IF (pRecordFilterView <> '') THEN
        pRecordFilterView := pRecordFilterView + tRecordFilterViewSeparator;
      pRecordFilterView := pRecordFilterView + STRSUBSTNO(tRecordFilterViewField, pNfPermissionRecordFilter."Field ID",
        pNfPermissionRecordFilter."Field Name", pNfPermissionRecordFilter.Filter);

      IF (pRecordFilter <> '') THEN
        pRecordFilter := pRecordFilter + tRecordFilterSeparator;
      pRecordFilter := pRecordFilter + STRSUBSTNO(tRecordFilterField, pNfPermissionRecordFilter."Field ID",
        pNfPermissionRecordFilter."Field Name", pNfPermissionRecordFilter.Filter);
    END;

    PROCEDURE EditRecordFilter@1000000000(VAR pNfPermission@1000000005 : Record 9086958;pEditable@1000000001 : Boolean) : Boolean;
    VAR
      lNfPermissionRecordFilter@1000000002 : Page 9086969;
      lResult@1000000000 : Boolean;
    BEGIN
      ///<summary>Editing filter</summary>
      ///<param name="pNfPermission">nForcement permission</param>
      ///<param name="pEditable">Editable flag</param>
      ///<returns>TRUE = Filter edited (amended), FALSE = Editing cancelled</returns>

      lResult := FALSE;

      CheckPermissionObject(pNfPermission);

      NfPermissionRecordFilter.RESET();
      NfPermissionRecordFilter.SETCURRENTKEY("nF. Permission ID");
      NfPermissionRecordFilter.FILTERGROUP(2);
      NfPermissionRecordFilter.SETRANGE("nF. Permission ID", pNfPermission.ID);
      NfPermissionRecordFilter.SETRANGE("Table ID", pNfPermission."Object ID");
      NfPermissionRecordFilter.FILTERGROUP(0);

      lNfPermissionRecordFilter.LOOKUPMODE(pEditable);
      lNfPermissionRecordFilter.SETTABLEVIEW(NfPermissionRecordFilter);
      lNfPermissionRecordFilter.EDITABLE(pEditable);
      IF (lNfPermissionRecordFilter.RUNMODAL() = ACTION::LookupOK) THEN
      BEGIN
        CreateRecordFilter(pNfPermission);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE ApplySmartFilters@1000000006(pNfUserId@1000000001 : Integer;pFilter@1000000000 : Text) : Text;
    BEGIN
      ///<summary>Applying smart filters to given filter</summary>
      ///<param name="pNfUserId">nForcement user ID</param>
      ///<param name="pFilter">The filter to apply smart filters to</param>
      ///<returns>Filter with smart filters applied</returns>

      EXIT(NfSmartFilterManagement.ApplySmartFilters(pNfUserId, pFilter));
    END;

    PROCEDURE SmartFiltersLookup@1000000005(VAR pNfPermissionRecordFilter@1000000000 : Record 9086959) : Boolean;
    VAR
      lSmartFilter@1000000001 : Text;
      lResult@1000000002 : Boolean;
    BEGIN
      ///<summary>Performing smart filters lookup</summary>
      ///<param name="pNfPermissionRecordFilter">Permission record filter to perform the lookup for</param>
      ///<returns>TRUE = Lookup executed and filter selected, FALSE = Cancelled</returns>

      lResult := NfSmartFilterManagement.SmartFilterLookup(lSmartFilter);
      IF (lResult) THEN
        pNfPermissionRecordFilter.Filter := pNfPermissionRecordFilter.Filter + lSmartFilter;
      EXIT(lResult);
    END;

    BEGIN
    {
      ///<summary>Whole logic around nForcement record filters</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-09-04">Created</change>
    }
    END.
  }
}

