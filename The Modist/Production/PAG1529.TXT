OBJECT Page 1529 Workflow Overview
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Workflow Overview;
               ENG=Workflow Overview];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table1504;
    DataCaptionFields=Workflow Code,Record ID;
    PageType=List;
    SourceTableTemporary=Yes;
    ShowFilter=No;
    OnAfterGetRecord=BEGIN
                       UpdatePageControls;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           UpdatePageControls;
                         END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                IndentationColumnName=Indent;
                IndentationControls=Description;
                GroupType=Repeater }

    { 10  ;2   ;Field     ;
                CaptionML=[ENU=Workflow Step;
                           ENG=Workflow Step];
                SourceExpr=Description;
                StyleExpr=StyleTxt }

    { 4   ;2   ;Field     ;
                SourceExpr=Status;
                StyleExpr=StyleTxt }

    { 7   ;2   ;Field     ;
                SourceExpr="Last Modified Date-Time" }

    { 8   ;2   ;Field     ;
                SourceExpr="Last Modified By User ID" }

    { 3   ;2   ;Field     ;
                Name=WorkflowRecord;
                CaptionML=[ENU=Record;
                           ENG=Record];
                SourceExpr=WorkflowRecord;
                Visible=FALSE }

  }
  CODE
  {
    VAR
      StyleTxt@1001 : Text;
      WorkflowRecord@1003 : Text;
      Indent@1002 : Integer;

    LOCAL PROCEDURE GetDescription@1() : Text;
    VAR
      WorkflowEvent@1000 : Record 1520;
      WorkflowStepArgument@1003 : Record 1523;
      WorkflowResponseHandling@1002 : Codeunit 1521;
    BEGIN
      CASE Type OF
        Type::"Event":
          BEGIN
            IF WorkflowEvent.GET("Function Name") THEN
              EXIT(WorkflowEvent.Description);
          END;
        Type::Response:
          BEGIN
            IF WorkflowStepArgument.GET(Argument) THEN
              EXIT(WorkflowResponseHandling.GetDescription(WorkflowStepArgument));
          END;
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE GetStyle@3() : Text;
    BEGIN
      CASE Status OF
        Status::Completed:
          EXIT('Favorable');
        Status::Active:
          EXIT('');
        ELSE
          EXIT('Subordinate');
      END;
    END;

    LOCAL PROCEDURE UpdatePageControls@4();
    BEGIN
      IF Type = Type::"Event" THEN
        Indent := 0
      ELSE
        Indent := 2;

      Description := COPYSTR(GetDescription,1,MAXSTRLEN(Description));
      StyleTxt := GetStyle;
      WorkflowRecord := FORMAT("Record ID",0,1);
    END;

    BEGIN
    END.
  }
}

