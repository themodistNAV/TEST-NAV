OBJECT Report 6030 Create Contract Invoices
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Create Contract Invoices;
               ENG=Create Contract Invoices];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   IF NOT SetOptionsCalled THEN
                     PostingDate := WORKDATE;
                   NoOfInvoices := 0;
                 END;

    OnPreReport=BEGIN
                  ServContractFilters := "Service Contract Header".GETFILTERS;
                END;

  }
  DATASET
  {
    { 9952;    ;DataItem;                    ;
               DataItemTable=Table5965;
               DataItemTableView=SORTING(Bill-to Customer No.,Contract Type,Combine Invoices,Next Invoice Date)
                                 WHERE(Contract Type=CONST(Contract),
                                       Status=CONST(Signed),
                                       Change Status=CONST(Locked));
               OnPreDataItem=BEGIN
                               IF CreateInvoices = CreateInvoices::"Print Only" THEN BEGIN
                                 CLEAR(ContractInvoicingTest);
                                 ContractInvoicingTest.InitVariables(PostingDate,InvoiceToDate);
                                 ContractInvoicingTest.SETTABLEVIEW("Service Contract Header");
                                 ContractInvoicingTest.RUNMODAL;
                                 CurrReport.BREAK;
                               END;

                               IF PostingDate = 0D THEN
                                 ERROR(Text000);

                               IF NOT HideDialog THEN
                                 IF PostingDate > WORKDATE THEN
                                   IF NOT CONFIRM(Text001) THEN
                                     ERROR(Text002);

                               IF InvoiceToDate = 0D THEN
                                 ERROR(Text003);

                               IF NOT HideDialog THEN
                                 IF InvoiceToDate > WORKDATE THEN
                                   IF NOT CONFIRM(Text004) THEN
                                     ERROR(Text002);

                               LastCustomer := '';
                               LastContractCombined := FALSE;
                               SETFILTER("Next Invoice Date",'<>%1&<=%2',0D,InvoiceToDate);
                               IF GETFILTER("Invoice Period") <> '' THEN
                                 SETFILTER("Invoice Period",GETFILTER("Invoice Period") + '&<>%1',"Invoice Period"::None)
                               ELSE
                                 SETFILTER("Invoice Period",'<>%1',"Invoice Period"::None);
                               ServContractMgt.CheckMultipleCurrenciesForCustomers("Service Contract Header");
                               Window.OPEN(
                                 Text005 +
                                 '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

                               CounterTotal := COUNT;
                               Counter1 := 0;
                               Counter2 := 0;
                               CounterBreak := ROUND(CounterTotal / 100,1,'>');
                               Currency.InitRoundingPrecision;
                             END;

               OnAfterGetRecord=BEGIN
                                  Counter1 := Counter1 + 1;
                                  Counter2 := Counter2 + 1;
                                  IF Counter2 >= CounterBreak THEN BEGIN
                                    Counter2 := 0;
                                    Window.UPDATE(1,ROUND(Counter1 / CounterTotal * 10000,1));
                                  END;
                                  CLEAR(ServContractMgt);
                                  ServContractMgt.InitCodeUnit;
                                  ServContractHeader := "Service Contract Header";
                                  WITH ServContractHeader DO BEGIN
                                    TESTFIELD("Serv. Contract Acc. Gr. Code");
                                    ServContractAccGr.GET("Serv. Contract Acc. Gr. Code");
                                    ServContractAccGr.TESTFIELD("Non-Prepaid Contract Acc.");
                                    IF Prepaid THEN
                                      ServContractAccGr.TESTFIELD("Prepaid Contract Acc.");
                                    Cust.GET("Customer No.");
                                    ResultDescription := '';
                                    ServContractMgt.GetNextInvoicePeriod(ServContractHeader,InvoiceFrom,InvoiceTo);
                                    ContractExist := CheckIfCombinationExists("Service Contract Header");
                                    IF "Amount per Period" > 0 THEN BEGIN
                                      IF NOT ServContractMgt.CheckIfServiceExist(ServContractHeader) THEN
                                        ResultDescription := Text006;
                                      IF ResultDescription = '' THEN BEGIN
                                        InvoicedAmount := ROUND(
                                            ServContractMgt.CalcContractAmount(ServContractHeader,InvoiceFrom,InvoiceTo),
                                            Currency."Amount Rounding Precision");
                                        IF InvoicedAmount = 0 THEN
                                          CurrReport.SKIP;
                                        IF NOT "Combine Invoices" OR (LastCustomer <> "Bill-to Customer No.") OR NOT LastContractCombined
                                        THEN BEGIN
                                          InvoiceNo := ServContractMgt.CreateServHeader(ServContractHeader,PostingDate,ContractExist);
                                          NoOfInvoices := NoOfInvoices + 1;
                                        END;
                                        ResultDescription := InvoiceNo;
                                        ServContractMgt.CreateAllServLines(InvoiceNo,ServContractHeader,InvoicedAmount);
                                        LastCustomer := "Bill-to Customer No.";
                                        LastContractCombined := "Combine Invoices";
                                      END;
                                    END ELSE
                                      IF "Annual Amount" = 0 THEN
                                        ResultDescription := STRSUBSTNO(Text009,FIELDCAPTION("Annual Amount"))
                                      ELSE
                                        ResultDescription := '';
                                  END;
                                  ServContractMgt.FinishCodeunit;
                                END;

               OnPostDataItem=BEGIN
                                IF NOT HideDialog THEN BEGIN
                                  IF CreateInvoices = CreateInvoices::"Create Invoices" THEN
                                    IF NoOfInvoices > 1 THEN
                                      MESSAGE(Text010,NoOfInvoices)
                                    ELSE
                                      MESSAGE(Text011,NoOfInvoices);
                                END;
                              END;

               ReqFilterFields=Bill-to Customer No.,Contract No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 3   ;2   ;Field     ;
                  Name=PostingDate;
                  CaptionML=[ENU=Posting Date;
                             ENG=Posting Date];
                  SourceExpr=PostingDate }

      { 2   ;2   ;Field     ;
                  Name=InvoiceToDate;
                  CaptionML=[ENU=Invoice to Date;
                             ENG=Invoice to Date];
                  SourceExpr=InvoiceToDate }

      { 5   ;2   ;Field     ;
                  Name=CreateInvoices;
                  CaptionML=[ENU=Action;
                             ENG=Action];
                  OptionCaptionML=[ENU=Create Invoices,Print Only;
                                   ENG=Create Invoices,Print Only];
                  SourceExpr=CreateInvoices }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You have not filled in the posting date.;ENG=You have not filled in the posting date.';
      Text001@1001 : TextConst 'ENU=The posting date is later than the work date.\\Confirm that this is the correct date.;ENG=The posting date is later than the work date.\\Confirm that this is the correct date.';
      Text002@1002 : TextConst 'ENU=The program has stopped the batch job at your request.;ENG=The program has stopped the batch job at your request.';
      Text003@1003 : TextConst 'ENU=You must fill in the Invoice-to Date field.;ENG=You must fill in the Invoice-to Date field.';
      Text004@1004 : TextConst 'ENU=The Invoice-to Date is later than the work date.\\Confirm that this is the correct date.;ENG=The Invoice-to Date is later than the work date.\\Confirm that this is the correct date.';
      Text005@1005 : TextConst 'ENU=Creating contract invoices...\\;ENG=Creating contract invoices...\\';
      Text006@1006 : TextConst 'ENU=Service Order is missing.;ENG=Service Order is missing.';
      Text009@1008 : TextConst 'ENU=%1 is missing.;ENG=%1 is missing.';
      Text010@1009 : TextConst 'ENU=%1 invoices were created.;ENG=%1 invoices were created.';
      Text011@1010 : TextConst 'ENU=%1 invoice was created.;ENG=%1 invoice was created.';
      Cust@1011 : Record 18;
      ServContractHeader@1015 : Record 5965;
      ServContractAccGr@1037 : Record 5973;
      Currency@1007 : Record 4;
      ServContractMgt@1016 : Codeunit 5940;
      ContractInvoicingTest@1033 : Report 5984;
      ServContractFilters@1017 : Text;
      Window@1018 : Dialog;
      InvoicedAmount@1019 : Decimal;
      NoOfInvoices@1020 : Integer;
      CounterTotal@1022 : Integer;
      Counter1@1023 : Integer;
      Counter2@1024 : Integer;
      CounterBreak@1025 : Integer;
      ResultDescription@1026 : Text[80];
      InvoiceNo@1027 : Code[20];
      LastCustomer@1028 : Code[20];
      InvoiceFrom@1029 : Date;
      InvoiceTo@1030 : Date;
      PostingDate@1031 : Date;
      InvoiceToDate@1032 : Date;
      LastContractCombined@1034 : Boolean;
      CreateInvoices@1035 : 'Create Invoices,Print Only';
      ContractExist@1036 : Boolean;
      HideDialog@1038 : Boolean;
      SetOptionsCalled@1039 : Boolean;

    LOCAL PROCEDURE CheckIfCombinationExists@1(FromServContract@1001 : Record 5965) : Boolean;
    VAR
      ServContract2@1000 : Record 5965;
    BEGIN
      ServContract2.SETCURRENTKEY("Customer No.","Bill-to Customer No.");
      ServContract2.SETFILTER("Contract No.",'<>%1',FromServContract."Contract No.");
      ServContract2.SETRANGE("Customer No.",FromServContract."Customer No.");
      ServContract2.SETRANGE("Bill-to Customer No.",FromServContract."Bill-to Customer No.");
      EXIT(ServContract2.FINDFIRST);
    END;

    PROCEDURE SetOptions@2(NewPostingDate@1000 : Date;NewInvoiceToDate@1001 : Date;NewCreateInvoices@1002 : 'Create Invoices,Print Only');
    BEGIN
      SetOptionsCalled := TRUE;
      PostingDate := NewPostingDate;
      InvoiceToDate := NewInvoiceToDate;
      CreateInvoices := NewCreateInvoices;
    END;

    PROCEDURE SetHideDialog@3(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

