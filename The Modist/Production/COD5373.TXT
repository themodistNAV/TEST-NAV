OBJECT Codeunit 5373 CRM Connection Status
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      StatusErrorTextMsg@1001 : TextConst 'ENU=Failed;ENG=Failed';
      StatusOKTextMsg@1000 : TextConst 'ENU=Connected;ENG=Connected';
      StatusDisabledTextMsg@1003 : TextConst 'ENU=Disabled;ENG=Disabled';

    PROCEDURE SetRec@5(VAR TempServiceConnectionStatus@1001 : TEMPORARY Record 5372;ShouldUpdateConnectionStatus@1002 : Boolean);
    VAR
      CRMConnectionSetup@1000 : Record 5330;
    BEGIN
      TempServiceConnectionStatus.DELETEALL;
      IF CRMConnectionSetup.FINDSET THEN
        REPEAT
          TempServiceConnectionStatus.INIT;
          TempServiceConnectionStatus.Code := CRMConnectionSetup."Primary Key";
          TempServiceConnectionStatus."Server Address" := CRMConnectionSetup."Server Address";
          IF CRMConnectionSetup."Is Enabled" THEN
            TempServiceConnectionStatus.Status := TempServiceConnectionStatus.Status::Connected
          ELSE
            TempServiceConnectionStatus.Status := TempServiceConnectionStatus.Status::Disabled;
          TempServiceConnectionStatus.INSERT;
          IF ShouldUpdateConnectionStatus THEN
            UpdateConnectionStatus(TempServiceConnectionStatus);
        UNTIL CRMConnectionSetup.NEXT = 0;
    END;

    PROCEDURE InitTimer@2(VAR Timer@1000 : DotNet "'Microsoft.Dynamics.Nav.Timer, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Timer");
    BEGIN
      IF ISNULL(Timer) THEN
        Timer := Timer.Timer;
      Timer.Interval := GetTimerInterval;
      Timer.Start;
    END;

    PROCEDURE UpdateConnectionStatus@10(VAR TempServiceConnectionStatus@1000 : TEMPORARY Record 5372);
    VAR
      CRMConnectionSetup@1001 : Record 5330;
      Error@1002 : Text;
    BEGIN
      WITH CRMConnectionSetup DO
        IF GET(TempServiceConnectionStatus.Code) THEN
          IF NOT "Is Enabled" THEN
            TempServiceConnectionStatus.Status := TempServiceConnectionStatus.Status::Disabled
          ELSE BEGIN
            IF NOT TestConnection THEN
              TempServiceConnectionStatus.Status := TempServiceConnectionStatus.Status::Connected
            ELSE BEGIN
              TempServiceConnectionStatus.Status := TempServiceConnectionStatus.Status::Error;
              Error := GETLASTERRORTEXT;
            END;

            TempServiceConnectionStatus.MODIFY;
            IF Error <> '' THEN
              AddError(Error,"Server Address")
          END;
    END;

    PROCEDURE SetStyleAndText@1(VAR StatusStyle@1000 : Text;VAR StatusText@1001 : Text;Status@1002 : 'Connected,Disabled,Error');
    BEGIN
      CASE Status OF
        Status::Connected:
          BEGIN
            StatusStyle := 'Favorable';
            StatusText := StatusOKTextMsg;
          END;
        Status::Error:
          BEGIN
            StatusStyle := 'Unfavorable';
            StatusText := StatusErrorTextMsg;
          END;
        Status::Disabled:
          BEGIN
            StatusStyle := 'Ambiguous';
            StatusText := StatusDisabledTextMsg;
          END;
      END;
    END;

    PROCEDURE GetStatusOKText@3() : Text;
    BEGIN
      EXIT(StatusOKTextMsg);
    END;

    PROCEDURE GetStatusFailureText@7() : Text;
    BEGIN
      EXIT(StatusErrorTextMsg);
    END;

    PROCEDURE GetStatusDisabledText@8() : Text;
    BEGIN
      EXIT(StatusDisabledTextMsg);
    END;

    PROCEDURE GetTimerInterval@4() : Integer;
    BEGIN
      EXIT(60000 * 5);
    END;

    LOCAL PROCEDURE AddError@6(ErrorMsg@1000 : Text;HostName@1002 : Text[250]);
    VAR
      ServiceConnectionError@1001 : Record 5371;
    BEGIN
      WITH ServiceConnectionError DO BEGIN
        IF NOT CanInsertRecord(ErrorMsg,HostName) THEN BEGIN
          "Last Occurrence" := CREATEDATETIME(TODAY,TIME);
          "Occurrence Count" := "Occurrence Count" + 1;
          MODIFY;
          EXIT;
        END;

        INIT;
        Code := CREATEGUID;
        "Server Address" := HostName;
        "First Occurrence" := CREATEDATETIME(TODAY,TIME);
        "Last Occurrence" := CREATEDATETIME(TODAY,TIME);
        Hash := CreateHash(ErrorMsg,HostName);
        "Occurrence Count" := 0;
        INSERT;
        SetError(ErrorMsg);
      END
    END;

    BEGIN
    END.
  }
}

