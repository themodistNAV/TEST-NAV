OBJECT Codeunit 5336 Integration Record Synch.
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            WasModified := FALSE;
            WasModified := TransferFields;
          END;

  }
  CODE
  {
    VAR
      TempParameterTempIntegrationFieldMapping@1001 : TEMPORARY Record 5337;
      OutlookSynchTypeConv@1000 : Codeunit 5302;
      ParameterSourceRecordRef@1003 : RecordRef;
      ParameterDestinationRecordRef@1002 : RecordRef;
      ParameterOnlyModified@1005 : Boolean;
      WasModified@1004 : Boolean;

    PROCEDURE SetFieldMapping@1(VAR TempIntegrationFieldMapping@1000 : TEMPORARY Record 5337);
    BEGIN
      IF TempParameterTempIntegrationFieldMapping.ISEMPTY THEN
        TempParameterTempIntegrationFieldMapping.RESET;
      TempParameterTempIntegrationFieldMapping.COPY(TempIntegrationFieldMapping,TRUE);
    END;

    PROCEDURE SetParameters@4(VAR SourceRecordRef@1002 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef;OnlyTransferModifiedFields@1003 : Boolean);
    BEGIN
      ParameterSourceRecordRef := SourceRecordRef;
      ParameterDestinationRecordRef := DestinationRecordRef;
      ParameterOnlyModified := OnlyTransferModifiedFields;
    END;

    PROCEDURE GetWasModified@8() : Boolean;
    BEGIN
      EXIT(WasModified);
    END;

    LOCAL PROCEDURE IsFieldModified@2(VAR SourceFieldRef@1000 : FieldRef;VAR DestinationFieldRef@1001 : FieldRef) : Boolean;
    BEGIN
      IF FORMAT(DestinationFieldRef.TYPE) = 'Code' THEN
        EXIT(FORMAT(DestinationFieldRef.VALUE) <> UPPERCASE(DELCHR(FORMAT(SourceFieldRef.VALUE),'<>')));

      IF DestinationFieldRef.LENGTH <> SourceFieldRef.LENGTH THEN BEGIN
        IF DestinationFieldRef.LENGTH < SourceFieldRef.LENGTH THEN
          EXIT(FORMAT(DestinationFieldRef.VALUE) <> COPYSTR(FORMAT(SourceFieldRef),1,DestinationFieldRef.LENGTH));
        EXIT(COPYSTR(FORMAT(DestinationFieldRef.VALUE),1,SourceFieldRef.LENGTH) <> FORMAT(SourceFieldRef));
      END;

      EXIT(FORMAT(DestinationFieldRef.VALUE) <> FORMAT(SourceFieldRef.VALUE));
    END;

    LOCAL PROCEDURE TransferFields@17() : Boolean;
    VAR
      AnyFieldWasModified@1007 : Boolean;
      CurrentFieldWasModified@1006 : Boolean;
    BEGIN
      AnyFieldWasModified := FALSE;

      TempParameterTempIntegrationFieldMapping.FINDSET;
      REPEAT
        CurrentFieldWasModified :=
          TransferField(
            TempParameterTempIntegrationFieldMapping."Source Field No.",
            TempParameterTempIntegrationFieldMapping."Destination Field No.",
            TempParameterTempIntegrationFieldMapping."Constant Value",
            TempParameterTempIntegrationFieldMapping."Validate Destination Field");

        AnyFieldWasModified := AnyFieldWasModified OR CurrentFieldWasModified;
      UNTIL TempParameterTempIntegrationFieldMapping.NEXT = 0;

      EXIT(AnyFieldWasModified);
    END;

    LOCAL PROCEDURE TransferField@11(SourceFieldNo@1004 : Integer;DestinationFieldNo@1005 : Integer;ConstantValue@1003 : Text;ValidateDestinationField@1007 : Boolean) : Boolean;
    VAR
      SourceFieldRef@1001 : FieldRef;
      DestinationFieldRef@1002 : FieldRef;
      ConstantOptionIndex@1000 : Integer;
      CurrentOptionIndex@1006 : Integer;
    BEGIN
      DestinationFieldRef := ParameterDestinationRecordRef.FIELD(DestinationFieldNo);
      IF SourceFieldNo < 1 THEN BEGIN
        IF FORMAT(DestinationFieldRef.TYPE) = 'Option' THEN BEGIN
          ConstantOptionIndex := OutlookSynchTypeConv.TextToOptionValue(ConstantValue,DestinationFieldRef.OPTIONCAPTION);
          CurrentOptionIndex :=
            OutlookSynchTypeConv.TextToOptionValue(FORMAT(DestinationFieldRef.VALUE),DestinationFieldRef.OPTIONCAPTION);
          IF CurrentOptionIndex = ConstantOptionIndex THEN
            EXIT(FALSE);
        END;

        IF FORMAT(DestinationFieldRef.VALUE) <> ConstantValue THEN BEGIN
          TransferFieldDataFromMappingConstantValue(ConstantValue,DestinationFieldRef);
          EXIT(TRUE)
        END;

        EXIT(FALSE);
      END;

      SourceFieldRef := ParameterSourceRecordRef.FIELD(SourceFieldNo);
      IF FORMAT(SourceFieldRef.CLASS,0,9) = 'FlowField' THEN
        SourceFieldRef.CALCFIELD;
      IF (NOT ParameterOnlyModified) OR IsFieldModified(SourceFieldRef,DestinationFieldRef) THEN BEGIN
        TransferFieldData(SourceFieldRef,DestinationFieldRef,ValidateDestinationField);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE TransferFieldData@6(VAR SourceFieldRef@1000 : FieldRef;VAR DestinationFieldRef@1001 : FieldRef;ValidateDestinationField@1002 : Boolean);
    BEGIN
      IF (SourceFieldRef.TYPE = DestinationFieldRef.TYPE) AND (DestinationFieldRef.LENGTH >= SourceFieldRef.LENGTH) THEN BEGIN
        IF ValidateDestinationField THEN
          DestinationFieldRef.VALIDATE(SourceFieldRef.VALUE)
        ELSE
          DestinationFieldRef.VALUE := SourceFieldRef.VALUE;
        EXIT;
      END;

      // Default to Outlook Synch. Type conversion.
      OutlookSynchTypeConv.EvaluateTextToFieldRef(FORMAT(SourceFieldRef.VALUE),DestinationFieldRef,ValidateDestinationField);
    END;

    LOCAL PROCEDURE TransferFieldDataFromMappingConstantValue@7(ConstantValue@1000 : Text;VAR DestinationFieldRef@1001 : FieldRef);
    BEGIN
      // Default to Outlook Synch. Type conversion
      OutlookSynchTypeConv.EvaluateTextToFieldRef(ConstantValue,DestinationFieldRef,TRUE);
    END;

    BEGIN
    END.
  }
}

