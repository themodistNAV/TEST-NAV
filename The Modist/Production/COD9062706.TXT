OBJECT Codeunit 9062706 Template Quest. Proc. Logic
{
  OBJECT-PROPERTIES
  {
    Date=12/05/16;
    Time=[ 2:23:49 PM];
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    TableNo=9062704;
    OnRun=BEGIN
            ProcessQuestionnaire(Rec);
          END;

  }
  CODE
  {
    VAR
      Questionnaire@1000000002 : Record 9062704;
      Convert@1000000000 : Codeunit 9062683;
      "--- Settings tables ---"@1000000001 : Integer;
      CompanyInformation@1000000003 : Record 79;
      EnablementSetup@1000000004 : Record 9062229;
      CompanyInf@1000000009 : Record 79;
      SMTPMailSetup@1000000005 : Record 409;
      cnfDeleteCountries@1000000006 : TextConst 'ENU=Do you want to delete all country codes?;ENG=Do you want to delete all country codes?';
      cnfDeleteCurrency@1000000007 : TextConst 'ENU="Do you want to delete all currency codes?  ";ENG="Do you want to delete all currency codes?  "';
      cnfDeleteBins@1000000010 : TextConst 'ENU=Do you want to delete all bins?;ENG=Do you want to delete all bins?';
      errCancel@1000000008 : TextConst 'ENU="Processing canceled ";ENG="Processing canceled "';
      EnhancedRapidStartSetup@1000000011 : Record 9062844;

    PROCEDURE ProcessQuestionnaire@1000000001(QuestInstance@1000000002 : Record 9062704);
    VAR
      Country@1000000007 : Record 9;
      Currency@1000000004 : Record 4;
      Bin@1000000009 : Record 7354;
      QuestLine@1000000001 : Record 9062705;
      AskNoraUser@1000000000 : Text;
      CostingMethod@1000000010 : Text;
      CompanyCountryCode@1000000003 : Code[50];
      DeleteCountries@1000000005 : Boolean;
      DeleteCurrency@1000000006 : Boolean;
      DeleteBin@1000000008 : Boolean;
      eCountryCode@1000000011 : TextConst 'ENU=Country Code;ENG=Country Code';
      eCurrencyCode@1000000012 : TextConst 'ENU=Currency Code;ENG=Currency Code';
      eDefaultBins@1000000013 : TextConst 'ENU=Default Bins;ENG=Default Bins';
      eDefaultnOra@1000000030 : TextConst 'ENU=Default nOra;ENG=Default nOra';
      eUrl@1000000029 : TextConst 'ENU=URL;ENG=URL';
      eEMailAddress@1000000028 : TextConst 'ENU=E-mail address;ENG=E-mail address';
      eEMailPassword@1000000027 : TextConst 'ENU=E-mail Password;ENG=E-mail Password';
      eSmtpServerAddress@1000000026 : TextConst 'ENU=SMTP server address;ENG=SMTP server address';
      eSmtpServerPort@1000000025 : TextConst 'ENU=SMTP server port;ENG=SMTP server port';
      eSmtpServerUser@1000000024 : TextConst 'ENU=SMTP server user;ENG=SMTP server user';
      eSmtpServerPassword@1000000023 : TextConst 'ENU=SMTP server password;ENG=SMTP server password';
      eCompanyName@1000000022 : TextConst 'ENU=Company Name;ENG=Company Name';
      eCostingMethod@1000000021 : TextConst 'ENU=Costing Method;ENG=Costing Method';
      eImapServer@1000000020 : TextConst 'ENU=IMAP server;ENG=IMAP server';
      eImapPort@1000000019 : TextConst 'ENU=IMAP port;ENG=IMAP port';
      eImapUsername@1000000018 : TextConst 'ENU=IMAP username;ENG=IMAP username';
      eImapPassword@1000000017 : TextConst 'ENU=IMAP password;ENG=IMAP password';
      eImapSsl@1000000016 : TextConst 'ENU=IMAP SSL;ENG=IMAP SSL';
      eVatRegNo@1000000046 : TextConst 'ENU=VAT Reg;ENG=VAT Reg';
      eAddress@1000000045 : TextConst 'ENU=Address;ENG=Address';
      eAddress2@1000000044 : TextConst 'ENU=Address 2;ENG=Address 2';
      ePostCode@1000000043 : TextConst 'ENU=Post Code;ENG=Post Code';
      eCity@1000000042 : TextConst 'ENU=City;ENG=City';
      eCountryRegionCode@1000000041 : TextConst 'ENU=Country / Region Code;ENG=Country / Region Code';
      eIndustrialClassification@1000000040 : TextConst 'ENU="Industrial Classification ";ENG="Industrial Classification "';
      ePhoneNo@1000000039 : TextConst 'ENU=Phone No.;ENG=Phone No.';
      eEmail@1000000038 : TextConst 'ENU=E-Mail;ENG=E-Mail';
      eHomePage@1000000037 : TextConst 'ENU=Home Page;ENG=Home Page';
      eBankName@1000000036 : TextConst 'ENU=Bank Name;ENG=Bank Name';
      eBankBranchNo@1000000035 : TextConst 'ENU=Bank Branch No.;ENG=Bank Branch No.';
      eBankAccountNo@1000000034 : TextConst 'ENU=Bank Account No.;ENG=Bank Account No.';
      ePaymentRoutingNo@1000000033 : TextConst 'ENU=Payment Routing No.;ENG=Payment Routing No.';
      eGiroNo@1000000032 : TextConst 'ENU=Giro No.;ENG=Giro No.';
      eSWIFTCode@1000000031 : TextConst 'ENU=SWIFT Code;ENG=SWIFT Code';
      eIBAN@1000000015 : TextConst 'ENU=IBAN;ENG=IBAN';
      eFaxNo@1000000014 : TextConst 'ENU=Fax No.;ENG=Fax No.';
    BEGIN
      Questionnaire := QuestInstance;

      //get settings
      DeleteCountries := NOT(GetBoolAnswer(eCountryCode));
      DeleteCurrency := NOT(GetBoolAnswer(eCurrencyCode));
      DeleteBin := NOT(GetBoolAnswer(eDefaultBins));

      //check settings
      IF (DeleteCountries) THEN
        IF (NOT(CONFIRM(cnfDeleteCountries))) THEN
          ERROR(errCancel);
      IF (DeleteCurrency) THEN
        IF (NOT(CONFIRM(cnfDeleteCurrency))) THEN
          ERROR(errCancel);
      IF (DeleteBin) THEN
        IF (NOT(CONFIRM(cnfDeleteBins))) THEN
          ERROR(errCancel);

      //delete data
      IF (DeleteCountries) THEN BEGIN
        Country.RESET();
        Country.DELETEALL();
      END;

      IF (DeleteCurrency) THEN BEGIN
        Currency.RESET();
        Currency.DELETEALL();
      END;

      IF (DeleteBin) THEN BEGIN
        Bin.RESET();
        Bin.DELETEALL(TRUE);
      END;

      //Enhanced Rapid Start Setup
      IF (NOT(EnhancedRapidStartSetup.GET())) THEN BEGIN
        EnhancedRapidStartSetup.INIT();
        EnhancedRapidStartSetup.INSERT();
      END;

      CostingMethod := GetTextAnswer(eCostingMethod);
      IF (CostingMethod <> '') THEN
        EVALUATE(EnhancedRapidStartSetup."Default Costing Method", CostingMethod);
      EnhancedRapidStartSetup.MODIFY();

      //Company Information
      CompanyCountryCode := GetTextAnswer(eCountryRegionCode);
      IF (CompanyCountryCode <> '') THEN BEGIN
        IF (NOT(Country.GET(CompanyCountryCode))) THEN BEGIN
          Country.INIT();
          Country.VALIDATE(Code, CompanyCountryCode);
          Country.VALIDATE(Name, CompanyCountryCode);
          Country.INSERT(TRUE);
        END;
      END;

      IF (NOT(CompanyInf.GET())) THEN BEGIN
        CompanyInf.INIT();
        CompanyInf.INSERT();
      END;
      CompanyInf.VALIDATE("VAT Registration No.", GetTextAnswer(eVatRegNo));
      CompanyInf.VALIDATE(Name, GetTextAnswer(eCompanyName));
      CompanyInf.VALIDATE(Address, GetTextAnswer(eAddress));
      CompanyInf.VALIDATE("Address 2", GetTextAnswer(eAddress2));
      CompanyInf.VALIDATE("Post Code", GetTextAnswer(ePostCode));
      CompanyInf.VALIDATE(City, GetTextAnswer(eCity));
      CompanyInf.VALIDATE("Country/Region Code", CompanyCountryCode);
      CompanyInf.VALIDATE("Industrial Classification", GetTextAnswer(eIndustrialClassification));
      CompanyInf.VALIDATE("Phone No.", GetTextAnswer(ePhoneNo));
      CompanyInf.VALIDATE("Fax No.", GetTextAnswer(eFaxNo));
      CompanyInf.VALIDATE("E-Mail", GetTextAnswer(eEmail));
      CompanyInf.VALIDATE("Home Page", GetTextAnswer(eHomePage));
      CompanyInf.VALIDATE("Bank Name", GetTextAnswer(eBankName));
      CompanyInf.VALIDATE("Bank Branch No.", GetTextAnswer(eBankBranchNo));
      CompanyInf.VALIDATE("Bank Account No.", GetTextAnswer(eBankAccountNo));
      CompanyInf.VALIDATE("Payment Routing No.", GetTextAnswer(ePaymentRoutingNo));
      CompanyInf.VALIDATE("Giro No.", GetTextAnswer(eGiroNo));
      CompanyInf.VALIDATE("SWIFT Code", GetTextAnswer(eSWIFTCode));
      CompanyInf.VALIDATE(IBAN, GetTextAnswer(eIBAN));
      CompanyInf.MODIFY();

      //Enablement Setup
      IF (NOT(EnablementSetup.GET())) THEN BEGIN
        EnablementSetup.INIT();
        EnablementSetup.INSERT();
      END;
      AskNoraUser := GetTextAnswer('Default nOra');
      //EnablementSetup.VALIDATE("Auto Response User ID", AskNoraUser);
      EnablementSetup."Auto Response User ID" := AskNoraUser;
      EnablementSetup.VALIDATE("Exchange URL", GetTextAnswer(eUrl));
      EnablementSetup.VALIDATE("Exchange Username", GetTextAnswer(eEMailAddress));
      EnablementSetup.VALIDATE("Exchange Password", GetTextAnswer(eEMailPassword));
      EnablementSetup.MODIFY();

      //SMTP Mail Setup
      IF (NOT(SMTPMailSetup.GET())) THEN BEGIN
        SMTPMailSetup.INIT();
        SMTPMailSetup.INSERT();
      END;
      SMTPMailSetup."SMTP Server" := GetTextAnswer(eSmtpServerAddress);
      SMTPMailSetup."SMTP Server Port" := GetIntAnswer(eSmtpServerPort);
      SMTPMailSetup."User ID" := GetTextAnswer(eSmtpServerUser);
      SMTPMailSetup.Password := GetTextAnswer(eSmtpServerPassword);
      SMTPMailSetup.MODIFY();

      //system behaviours
      ProcessSystemB(eImapServer, 'IMAP_SERVER_ADDRESS');
      ProcessSystemB(eImapPort, 'IMAP_SERVER_PORT');
      ProcessSystemB(eImapUsername, 'IMAP_USER_NAME');
      ProcessSystemB(eImapPassword, 'IMAP_PASSWORD');
      ProcessSystemB(eImapSsl, 'IMAP_USE_SSL');
    END;

    LOCAL PROCEDURE "--- Set Data ---"@1000000000();
    BEGIN
    END;

    LOCAL PROCEDURE ProcessSystemB@1000000006(QuestionName@1000000000 : Text;SystemBCode@1000000001 : Code[20]);
    VAR
      QuestLine@1000000004 : Record 9062705;
      SystemBehaviour@1000000002 : Record 9062230;
      VariantValue@1000000003 : Variant;
    BEGIN
      GetQuestion(QuestionName, QuestLine);
      IF (ValidAnswer(QuestLine)) THEN BEGIN
        QuestLine.GetAnswerValue(VariantValue);
        SystemBehaviour.SetText(SystemBCode, FORMAT(VariantValue), TRUE);
      END;
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000008();
    BEGIN
    END;

    LOCAL PROCEDURE GetQuestion@1000000009(QuestionName@1000000000 : Text;VAR QuestLine@1000000001 : Record 9062705);
    BEGIN
      QuestLine.RESET();
      QuestLine.SETRANGE("Questionnaire No.", Questionnaire."Questionnaire No.");
      QuestLine.SETRANGE("Question Name", QuestionName);
      QuestLine.FINDFIRST();
    END;

    LOCAL PROCEDURE GetField@1000000011(TableName@1000000000 : Text;FieldName@1000000001 : Text;VAR Field@1000000002 : Record 2000000041);
    BEGIN
      Field.RESET();
      Field.SETRANGE(TableName, TableName);
      Field.SETRANGE(FieldName, FieldName);
      Field.FINDFIRST();
    END;

    LOCAL PROCEDURE ValidAnswer@1000000014(VAR QuestLine@1000000000 : Record 9062705) : Boolean;
    BEGIN
      EXIT((QuestLine.Answered) AND (NOT(QuestLine.Skip)));
    END;

    LOCAL PROCEDURE "--- Answer Values ---"@1000000005();
    BEGIN
    END;

    LOCAL PROCEDURE GetAnswerValue@1000000007(QuestionName@1000000000 : Text;VAR VariantValue@1000000001 : Variant) : Boolean;
    VAR
      QuestLine@1000000002 : Record 9062705;
    BEGIN
      GetQuestion(QuestionName, QuestLine);
      IF (NOT(ValidAnswer(QuestLine))) THEN
        EXIT(FALSE);
      QuestLine.GetAnswerValue(VariantValue);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetTextAnswer@1000000013(QuestionName@1000000000 : Text) : Text;
    VAR
      QuestLine@1000000001 : Record 9062705;
      DefaultAnswer@1000000002 : Text;
    BEGIN
      GetQuestion(QuestionName, QuestLine);

      DefaultAnswer := '';
      IF ((QuestLine."Answer Type" = QuestLine."Answer Type"::Option) AND
        (QuestLine."Answer Option String" <> ''))
      THEN
        DefaultAnswer := SELECTSTR(1, QuestLine."Answer Option String");

      IF (ValidAnswer(QuestLine)) THEN
        IF (QuestLine.Answer <> '') THEN
          EXIT(QuestLine.Answer);

      EXIT(DefaultAnswer);
    END;

    LOCAL PROCEDURE GetIntAnswer@1000000004(QuestionName@1000000000 : Text) : Integer;
    VAR
      TextAnswer@1000000001 : Text;
      Value@1000000002 : Integer;
    BEGIN
      TextAnswer := GetTextAnswer(QuestionName);
      IF (TextAnswer <> '') THEN BEGIN
        EVALUATE(Value, TextAnswer);
        EXIT(Value);
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE GetBoolAnswer@1000000010(QuestionName@1000000000 : Text) : Boolean;
    VAR
      TextAnswer@1000000001 : Text;
      Value@1000000002 : Integer;
      eTrue@1000000003 : TextConst 'ENU=true;ENG=true';
      eYes@1000000004 : TextConst 'ENU=yes;ENG=yes';
    BEGIN
      TextAnswer := LOWERCASE(GetTextAnswer(QuestionName));
      EXIT(TextAnswer IN ['1', eTrue, eYes]);
    END;

    LOCAL PROCEDURE GetDateAnswer@1000000012(QuestionName@1000000000 : Text) : Date;
    VAR
      TextAnswer@1000000001 : Text;
      Value@1000000002 : Date;
    BEGIN
      TextAnswer := GetTextAnswer(QuestionName);
      IF (TextAnswer <> '') THEN BEGIN
        EVALUATE(Value, TextAnswer);
        EXIT(Value);
      END;
      EXIT(0D);
    END;

    BEGIN
    {
      //DOC NA2016.14 AZ/NM 09/03/2016 - Created to handle Template Questionnaire
      //DOC NA2016.15 JH    25/04/2016 - CfMD amendments
    }
    END.
  }
}

