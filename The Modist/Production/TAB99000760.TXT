OBJECT Table 99000760 Calendar Absence Entry
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               CalAbsenceMgt.RemoveAbsence(Rec);
             END;

    OnRename=BEGIN
               CalAbsenceMgt.RemoveAbsence(xRec);
               Updated := FALSE;
             END;

    CaptionML=[ENU=Calendar Absence Entry;
               ENG=Calendar Absence Entry];
    LookupPageID=Page99000772;
    DrillDownPageID=Page99000772;
  }
  FIELDS
  {
    { 1   ;   ;Capacity Type       ;Option        ;CaptionML=[ENU=Capacity Type;
                                                              ENG=Capacity Type];
                                                   OptionCaptionML=[ENU=Work Center,Machine Center;
                                                                    ENG=Work Centre,Machine Centre];
                                                   OptionString=Work Center,Machine Center;
                                                   Editable=No }
    { 2   ;   ;No.                 ;Code20        ;TableRelation=IF (Capacity Type=CONST(Work Center)) "Work Center"
                                                                 ELSE IF (Capacity Type=CONST(Machine Center)) "Machine Center";
                                                   OnValidate=BEGIN
                                                                IF "No." = '' THEN
                                                                  EXIT;

                                                                CASE "Capacity Type" OF
                                                                  "Capacity Type"::"Work Center":
                                                                    BEGIN
                                                                      Workcenter.GET("No.");
                                                                      Workcenter.TESTFIELD("Work Center Group Code");
                                                                      "Work Center No." := Workcenter."No.";
                                                                      "Work Center Group Code" := Workcenter."Work Center Group Code";
                                                                      Capacity := Workcenter.Capacity;
                                                                    END;
                                                                  "Capacity Type"::"Machine Center":
                                                                    BEGIN
                                                                      Machinecenter.GET("No.");
                                                                      Machinecenter.TESTFIELD("Work Center No.");
                                                                      Workcenter.GET(Machinecenter."Work Center No.");
                                                                      Workcenter.TESTFIELD("Work Center Group Code");
                                                                      "Work Center No." := Workcenter."No.";
                                                                      "Work Center Group Code" := Workcenter."Work Center Group Code";
                                                                      Capacity := Machinecenter.Capacity;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENG=No.];
                                                   NotBlank=Yes }
    { 4   ;   ;Date                ;Date          ;OnValidate=BEGIN
                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=[ENU=Date;
                                                              ENG=Date];
                                                   NotBlank=Yes }
    { 6   ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                IF ("Ending Time" = 0T) OR
                                                                   ("Ending Time" < "Starting Time" )
                                                                THEN
                                                                  VALIDATE("Ending Time","Starting Time")
                                                              END;

                                                   CaptionML=[ENU=Starting Time;
                                                              ENG=Starting Time] }
    { 7   ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                IF "Ending Time" < "Starting Time" THEN
                                                                  ERROR(Text000,FIELDCAPTION("Ending Time"),FIELDCAPTION("Starting Time"));

                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=[ENU=Ending Time;
                                                              ENG=Ending Time] }
    { 8   ;   ;Work Center No.     ;Code20        ;TableRelation="Work Center";
                                                   CaptionML=[ENU=Work Center No.;
                                                              ENG=Work Centre No.];
                                                   Editable=No }
    { 9   ;   ;Work Center Group Code;Code10      ;TableRelation="Work Center Group";
                                                   CaptionML=[ENU=Work Center Group Code;
                                                              ENG=Work Centre Group Code];
                                                   Editable=No }
    { 21  ;   ;Capacity            ;Decimal       ;OnValidate=BEGIN
                                                                IF Capacity <> xRec.Capacity THEN BEGIN
                                                                  CalAbsenceMgt.RemoveAbsence(xRec);
                                                                  Updated := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Capacity;
                                                              ENG=Capacity];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 24  ;   ;Starting Date-Time  ;DateTime      ;OnValidate=BEGIN
                                                                "Starting Time" := DT2TIME("Starting Date-Time");
                                                                Date := DT2DATE("Starting Date-Time");
                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=[ENU=Starting Date-Time;
                                                              ENG=Starting Date-Time] }
    { 25  ;   ;Ending Date-Time    ;DateTime      ;OnValidate=BEGIN
                                                                "Ending Time" := DT2TIME("Ending Date-Time");
                                                                Date := DT2DATE("Ending Date-Time");
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=[ENU=Ending Date-Time;
                                                              ENG=Ending Date-Time] }
    { 31  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 32  ;   ;Updated             ;Boolean       ;CaptionML=[ENU=Updated;
                                                              ENG=Updated];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Capacity Type,No.,Date,Starting Time,Ending Time;
                                                   Clustered=Yes }
    {    ;Work Center No.                          }
    {    ;Capacity Type,No.,Date,Starting Date-Time,Ending Date-Time }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 must be higher than %2.;ENG=%1 must be higher than %2.';
      Workcenter@1001 : Record 99000754;
      Machinecenter@1002 : Record 99000758;
      CalAbsenceMgt@1003 : Codeunit 99000759;

    PROCEDURE Caption@3() : Text[100];
    BEGIN
      IF "Capacity Type" = "Capacity Type"::"Machine Center" THEN BEGIN
        IF NOT Machinecenter.GET(GETFILTER("No.")) THEN
          EXIT('');
        EXIT(
          STRSUBSTNO('%1 %2',
            Machinecenter."No.",Machinecenter.Name));
      END;
      IF NOT Workcenter.GET(GETFILTER("No.")) THEN
        EXIT('');
      EXIT(
        STRSUBSTNO('%1 %2',
          Workcenter."No.",Workcenter.Name));
    END;

    LOCAL PROCEDURE UpdateDatetime@11();
    BEGIN
      "Starting Date-Time" := CREATEDATETIME(Date,"Starting Time");
      "Ending Date-Time" := CREATEDATETIME(Date,"Ending Time");
    END;

    BEGIN
    END.
  }
}

