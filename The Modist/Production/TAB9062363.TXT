OBJECT Table 9062363 Panel
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD(Code);
               ApplyDefaultTemplate(FALSE);
               UpdateControlName();
               PanelTimestampToolkit.Add(Rec.Code);
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               EnhancedPermissionsMgt.CheckPanelModifyPermission(Rec, USERID());
               PanelTimestampToolkit.Add(Rec.Code);
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               EnhancedPermissionsMgt.CheckPanelModifyPermission(Rec, USERID());

               TileGroup.RESET();
               TileGroup.SETRANGE("Panel Code", Rec.Code);
               TileGroup.DELETEALL(TRUE);

               Tile.RESET();
               Tile.SETRANGE("Panel Code", Rec.Code);
               Tile.DELETEALL(TRUE);

               PanelLink.RESET();
               PanelLink.SETRANGE("Panel Code", Rec.Code);
               PanelLink.DELETEALL(TRUE);

               PanelData.RESET();
               PanelData.SETRANGE("Panel Code", Rec.Code);
               PanelData.DELETEALL(TRUE);

               PanelTimestampToolkit.Remove(Rec.Code);
             END;

    OnRename=VAR
               eRenameDisabled@1000000000 : TextConst 'ENU=Rename has been disabled for "%1". Please, use "Change Code" button instead.;ENG=Rename has been disabled for "%1". Please, use "Change Code" button instead.';
             BEGIN
               EnhancedPermissionsMgt.CheckPanelModifyPermission(Rec, USERID());
               ProcessRename(xRec.Code, Rec.Code);
               PanelTimestampToolkit.Rename(xRec.Code, Rec.Code);
             END;

    CaptionML=[ENU=Panel;
               ENG=Panel];
    LookupPageID=Page9062447;
    DrillDownPageID=Page9062447;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;OnValidate=BEGIN
                                                                IF ((Rec.Description = '') OR (COPYSTR(UPPERCASE(Rec.Description), 1, MAXSTRLEN(Rec.Code)) = xRec.Code)) THEN
                                                                  Rec.VALIDATE(Description, String.ToTitleCase(Rec.Code));
                                                                UpdateControlName();
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              ENG=Code] }
    { 2   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                IF ((Rec.Caption = '') OR (Rec.Caption = xRec.Description)) THEN
                                                                  Rec.VALIDATE(Caption, Rec.Description);
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 3   ;   ;Preferred Width     ;Integer       ;OnValidate=BEGIN
                                                                IF (Rec."Minimum Width" = 0) THEN
                                                                  Rec."Minimum Width" := Rec."Preferred Width";
                                                                IF (Rec."Maximum Width" = 0) THEN
                                                                  Rec."Maximum Width" := Rec."Preferred Width";
                                                              END;

                                                   CaptionML=[ENU=Preferred Width;
                                                              ENG=Preferred Width];
                                                   MinValue=0 }
    { 4   ;   ;Preferred Height    ;Integer       ;OnValidate=BEGIN
                                                                IF (Rec."Minimum Height" = 0) THEN
                                                                  Rec."Minimum Height" := Rec."Preferred Height";
                                                                IF (Rec."Maximum Height" = 0) THEN
                                                                  Rec."Maximum Height" := Rec."Preferred Height";
                                                              END;

                                                   CaptionML=[ENU=Preferred Height;
                                                              ENG=Preferred Height];
                                                   MinValue=0 }
    { 5   ;   ;Caption             ;Text50        ;CaptionML=[ENU=Caption;
                                                              ENG=Caption] }
    { 6   ;   ;Update Caption      ;Boolean       ;CaptionML=[ENU=Update Caption;
                                                              ENG=Update Caption] }
    { 7   ;   ;Control Name        ;Text100       ;CaptionML=[ENU=Control Name;
                                                              ENG=Control Name] }
    { 11  ;   ;Minimum Width       ;Integer       ;CaptionML=[ENU=Minimum Width;
                                                              ENG=Minimum Width];
                                                   MinValue=0 }
    { 12  ;   ;Minimum Height      ;Integer       ;CaptionML=[ENU=Minimum Height;
                                                              ENG=Minimum Height];
                                                   MinValue=0 }
    { 13  ;   ;Maximum Width       ;Integer       ;CaptionML=[ENU=Maximum Width;
                                                              ENG=Maximum Width];
                                                   MinValue=0 }
    { 14  ;   ;Maximum Height      ;Integer       ;CaptionML=[ENU=Maximum Height;
                                                              ENG=Maximum Height];
                                                   MinValue=0 }
    { 15  ;   ;Panel Template Code ;Code20        ;TableRelation="Panel Template";
                                                   OnValidate=BEGIN
                                                                IF (Rec."Panel Template Code" <> xRec."Panel Template Code") THEN
                                                                  ApplyCurrentTemplate();
                                                              END;

                                                   CaptionML=[ENU=Panel Template Code;
                                                              ENG=Panel Template Code] }
    { 18  ;   ;Auto Refresh Every  ;Integer       ;InitValue=10000;
                                                   CaptionML=[ENU=Auto Refresh Every;
                                                              ENG=Auto Refresh Every];
                                                   MinValue=0 }
    { 19  ;   ;Use Cache           ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Use Cache;
                                                              ENG=Use Cache] }
    { 30  ;   ;Menu Code           ;Code20        ;TableRelation="Panel Menu";
                                                   CaptionML=[ENU=Menu Code;
                                                              ENG=Menu Code] }
    { 32  ;   ;Tile Menu Code      ;Code20        ;TableRelation="Panel Menu";
                                                   CaptionML=[ENU=Tile Menu Code;
                                                              ENG=Tile Menu Code] }
    { 33  ;   ;Link Menu Code      ;Code20        ;TableRelation="Panel Menu";
                                                   CaptionML=[ENU=Link Menu Code;
                                                              ENG=Link Menu Code] }
    { 40  ;   ;Refresh             ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Refresh;
                                                              ENG=Refresh];
                                                   OptionCaptionML=[ENU=" ,Full,Data Only";
                                                                    ENG=" ,Full,Data Only"];
                                                   OptionString=[ ,Full,Data Only] }
    { 90  ;   ;Copy Panel          ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Copy Panel;
                                                              ENG=Copy Panel];
                                                   OptionCaptionML=[ENU=" ,Copy Panel,Copy Tile Group,Copy Tile,Copy Panel Link";
                                                                    ENG=" ,Copy Panel,Copy Tile Group,Copy Tile,Copy Panel Link"];
                                                   OptionString=[ ,Copy Panel,Copy Tile Group,Copy Tile,Copy Panel Link] }
    { 100 ;   ;Update Type         ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Update Type;
                                                              ENG=Update Type];
                                                   OptionCaptionML=[ENU=" ,Properties,Full";
                                                                    ENG=" ,Properties,Full"];
                                                   OptionString=[ ,Properties,Full] }
    { 110 ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                ApplyDefaultTemplate(TRUE);
                                                                ProposeMenus(FALSE, FALSE);
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=" ,Tile Panel,Tile List";
                                                                    ENG=" ,Tile Panel,Tile List"];
                                                   OptionString=[ ,Tile Panel,Tile List] }
    { 120 ;   ;Text                ;Text100       ;CaptionML=[ENU=Text;
                                                              ENG=Text] }
    { 121 ;   ;Show Text           ;Boolean       ;CaptionML=[ENU=Show Text;
                                                              ENG=Show Text] }
    { 122 ;   ;Text Font Size      ;Integer       ;CaptionML=[ENU=Text Font Size;
                                                              ENG=Text Font Size];
                                                   MinValue=0 }
    { 123 ;   ;Text Font Style     ;Option        ;CaptionML=[ENU=Text Font Style;
                                                              ENG=Text Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline] }
    { 124 ;   ;Text Colour Code    ;Code20        ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Text Colour Code;
                                                              ENG=Text Colour Code] }
    { 130 ;   ;Margin              ;Code20        ;OnValidate=BEGIN
                                                                MarginToolkit.ValidateMargin(Rec.Margin);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (MarginToolkit.MarginLookup(Rec.Margin)) THEN
                                                                Rec.VALIDATE(Margin);
                                                            END;

                                                   CaptionML=[ENU=Margin;
                                                              ENG=Margin] }
    { 131 ;   ;Padding             ;Code20        ;OnValidate=BEGIN
                                                                MarginToolkit.ValidatePadding(Rec.Padding);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (MarginToolkit.MarginLookup(Rec.Padding)) THEN
                                                                Rec.VALIDATE(Padding);
                                                            END;

                                                   CaptionML=[ENU=Padding;
                                                              ENG=Padding] }
    { 140 ;   ;Space Between Groups;Integer       ;CaptionML=[ENU=Space Between Groups;
                                                              ENG=Space Between Groups];
                                                   MinValue=0 }
    { 141 ;   ;Show Group Headers  ;Boolean       ;CaptionML=[ENU=Show Group Headers;
                                                              ENG=Show Group Headers] }
    { 142 ;   ;Group Header Font Size;Integer     ;CaptionML=[ENU=Group Header Font Size;
                                                              ENG=Group Header Font Size];
                                                   MinValue=0 }
    { 143 ;   ;Group Header Font Style;Option     ;CaptionML=[ENU=Group Header Font Style;
                                                              ENG=Group Header Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline] }
    { 144 ;   ;Group Header Colour Code;Code20    ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Group Header Colour Code;
                                                              ENG=Group Header Colour Code] }
    { 150 ;   ;Tile Size           ;Integer       ;CaptionML=[ENU=Tile Size;
                                                              ENG=Tile Size];
                                                   MinValue=0 }
    { 151 ;   ;Tile Background Colour Code;Code20 ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Tile Background Colour Code;
                                                              ENG=Tile Background Colour Code] }
    { 152 ;   ;Tile Rows           ;Integer       ;CaptionML=[ENU=Tile Rows;
                                                              ENG=Tile Rows];
                                                   MinValue=0 }
    { 153 ;   ;Tile Padding        ;Code20        ;OnValidate=BEGIN
                                                                MarginToolkit.ValidatePadding(Rec."Tile Padding");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (MarginToolkit.MarginLookup(Rec."Tile Padding")) THEN
                                                                Rec.VALIDATE("Tile Padding");
                                                            END;

                                                   CaptionML=[ENU=Tile Padding;
                                                              ENG=Tile Padding] }
    { 154 ;   ;Space Between Tiles ;Integer       ;CaptionML=[ENU=Space Between Tiles;
                                                              ENG=Space Between Tiles];
                                                   MinValue=0 }
    { 160 ;   ;Tile Text Font Size ;Integer       ;CaptionML=[ENU=Tile Text Font Size;
                                                              ENG=Tile Text Font Size];
                                                   MinValue=0 }
    { 161 ;   ;Tile Text Font Style;Option        ;CaptionML=[ENU=Tile Text Font Style;
                                                              ENG=Tile Text Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline] }
    { 162 ;   ;Tile Text Colour Code;Code20       ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Tile Text Colour Code;
                                                              ENG=Tile Text Colour Code] }
    { 163 ;   ;Tile Text Alignment ;Option        ;CaptionML=[ENU=Tile Text Alignment;
                                                              ENG=Tile Text Alignment];
                                                   OptionCaptionML=[ENU=" ,Top Left,Top Center,Top Right,Middle Left,Middle Center,Middle Right,Bottom Left,Bottom Center,Bottom Right";
                                                                    ENG=" ,Top Left,Top Center,Top Right,Middle Left,Middle Center,Middle Right,Bottom Left,Bottom Center,Bottom Right"];
                                                   OptionString=[ ,Top Left,Top Center,Top Right,Middle Left,Middle Center,Middle Right,Bottom Left,Bottom Center,Bottom Right] }
    { 170 ;   ;Tile Info Font Size ;Integer       ;CaptionML=[ENU=Tile Info Font Size;
                                                              ENG=Tile Info Font Size];
                                                   MinValue=0 }
    { 171 ;   ;Tile Info Font Style;Option        ;CaptionML=[ENU=Tile Info Font Style;
                                                              ENG=Tile Info Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline] }
    { 172 ;   ;Tile Info Colour Code;Code20       ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Tile Info Colour Code;
                                                              ENG=Tile Info Colour Code] }
    { 173 ;   ;Tile Info Alignment ;Option        ;CaptionML=[ENU=Tile Info Alignment;
                                                              ENG=Tile Info Alignment];
                                                   OptionCaptionML=[ENU=" ,Top Left,Top Center,Top Right,Middle Left,Middle Center,Middle Right,Bottom Left,Bottom Center,Bottom Right";
                                                                    ENG=" ,Top Left,Top Center,Top Right,Middle Left,Middle Center,Middle Right,Bottom Left,Bottom Center,Bottom Right"];
                                                   OptionString=[ ,Top Left,Top Center,Top Right,Middle Left,Middle Center,Middle Right,Bottom Left,Bottom Center,Bottom Right] }
    { 180 ;   ;Large Tile Text Font Size;Integer  ;CaptionML=[ENU=Large Tile Text Font Size;
                                                              ENG=Large Tile Text Font Size];
                                                   MinValue=0 }
    { 181 ;   ;Large Tile Text Font Style;Option  ;CaptionML=[ENU=Large Tile Text Font Style;
                                                              ENG=Large Tile Text Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline] }
    { 182 ;   ;Large Tile Text Colour Code;Code20 ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Large Tile Text Colour Code;
                                                              ENG=Large Tile Text Colour Code] }
    { 190 ;   ;Large Tile Info Font Size;Integer  ;CaptionML=[ENU=Large Tile Info Font Size;
                                                              ENG=Large Tile Info Font Size];
                                                   MinValue=0 }
    { 191 ;   ;Large Tile Info Font Style;Option  ;CaptionML=[ENU=Large Tile Info Font Style;
                                                              ENG=Large Tile Info Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline] }
    { 192 ;   ;Large Tile Info Colour Code;Code20 ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Large Tile Info Colour Code;
                                                              ENG=Large Tile Info Colour Code] }
    { 200 ;   ;Small Tile Text Font Size;Integer  ;CaptionML=[ENU=Small Tile Text Font Size;
                                                              ENG=Small Tile Text Font Size];
                                                   MinValue=0 }
    { 201 ;   ;Small Tile Text Font Style;Option  ;CaptionML=[ENU=Small Tile Text Font Style;
                                                              ENG=Small Tile Text Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline] }
    { 202 ;   ;Small Tile Text Colour Code;Code20 ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Small Tile Text Colour Code;
                                                              ENG=Small Tile Text Colour Code] }
    { 210 ;   ;Small Tile Info Font Size;Integer  ;CaptionML=[ENU=Small Tile Info Font Size;
                                                              ENG=Small Tile Info Font Size];
                                                   MinValue=0 }
    { 211 ;   ;Small Tile Info Font Style;Option  ;CaptionML=[ENU=Small Tile Info Font Style;
                                                              ENG=Small Tile Info Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline] }
    { 212 ;   ;Small Tile Info Colour Code;Code20 ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Small Tile Info Colour Code;
                                                              ENG=Small Tile Info Colour Code] }
    { 220 ;   ;Animate Arrival     ;Boolean       ;CaptionML=[ENU=Animate Arrival;
                                                              ENG=Animate Arrival] }
    { 221 ;   ;Animate Tiles       ;Boolean       ;CaptionML=[ENU=Animate Tiles;
                                                              ENG=Animate Tiles] }
    { 222 ;   ;Tile Animation Type ;Option        ;CaptionML=[ENU=Tile Animation Type;
                                                              ENG=Tile Animation Type];
                                                   OptionCaptionML=[ENU=" ,Default,Fade,Random Segmented Fade,Scroll Down,Scroll Left,Scroll Right,Scroll Top,Segmented Fade";
                                                                    ENG=" ,Default,Fade,Random Segmented Fade,Scroll Down,Scroll Left,Scroll Right,Scroll Top,Segmented Fade"];
                                                   OptionString=[ ,Default,Fade,Random Segmented Fade,Scroll Down,Scroll Left,Scroll Right,Scroll Top,Segmented Fade] }
    { 223 ;   ;Tile Animation Min. Interval;Integer;
                                                   CaptionML=[ENU=Tile Animation Min. Interval;
                                                              ENG=Tile Animation Min. Interval];
                                                   MinValue=0 }
    { 224 ;   ;Tile Animation Max. Interval;Integer;
                                                   CaptionML=[ENU=Tile Animation Max. Interval;
                                                              ENG=Tile Animation Max. Interval];
                                                   MinValue=0 }
    { 230 ;   ;Show Links          ;Boolean       ;CaptionML=[ENU=Show Links;
                                                              ENG=Show Links] }
    { 231 ;   ;Links Width         ;Integer       ;CaptionML=[ENU=Links Width;
                                                              ENG=Links Width];
                                                   MinValue=0 }
    { 232 ;   ;Link Font Size      ;Integer       ;CaptionML=[ENU=Link Font Size;
                                                              ENG=Link Font Size];
                                                   MinValue=0 }
    { 233 ;   ;Link Font Style     ;Option        ;CaptionML=[ENU=Link Font Style;
                                                              ENG=Link Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Bold + Underline,Italic + Underline,Bold + Italic + Underline] }
    { 234 ;   ;Link Colour Code    ;Code20        ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Link Colour Code;
                                                              ENG=Link Colour Code] }
    { 235 ;   ;Link Margin         ;Code20        ;OnValidate=BEGIN
                                                                MarginToolkit.ValidateMargin(Rec."Link Margin");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (MarginToolkit.MarginLookup(Rec."Link Margin")) THEN
                                                                Rec.VALIDATE("Link Margin");
                                                            END;

                                                   CaptionML=[ENU=Link Margin;
                                                              ENG=Link Margin] }
    { 236 ;   ;Link Padding        ;Code20        ;OnValidate=BEGIN
                                                                MarginToolkit.ValidatePadding(Rec.Padding);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (MarginToolkit.MarginLookup(Rec."Link Padding")) THEN
                                                                Rec.VALIDATE("Link Padding");
                                                            END;

                                                   CaptionML=[ENU=Link Padding;
                                                              ENG=Link Padding] }
    { 250 ;   ;Parameter 1         ;Text50        ;CaptionML=[ENU=Parameter 1;
                                                              ENG=Parameter 1] }
    { 251 ;   ;Parameter 2         ;Text50        ;CaptionML=[ENU=Parameter 2;
                                                              ENG=Parameter 2] }
    { 252 ;   ;Parameter 3         ;Text50        ;CaptionML=[ENU=Parameter 3;
                                                              ENG=Parameter 3] }
    { 253 ;   ;Parameter 4         ;Text50        ;CaptionML=[ENU=Parameter 4;
                                                              ENG=Parameter 4] }
    { 254 ;   ;Parameter 5         ;Text50        ;CaptionML=[ENU=Parameter 5;
                                                              ENG=Parameter 5] }
    { 255 ;   ;Parameter 6         ;Text50        ;CaptionML=[ENU=Parameter 6;
                                                              ENG=Parameter 6] }
    { 260 ;   ;Parameter 1 Filter  ;Text50        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Parameter 1 Filter;
                                                              ENG=Parameter 1 Filter] }
    { 261 ;   ;Parameter 2 Filter  ;Text50        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Parameter 2 Filter;
                                                              ENG=Parameter 2 Filter] }
    { 262 ;   ;Parameter 3 Filter  ;Text50        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Parameter 3 Filter;
                                                              ENG=Parameter 3 Filter] }
    { 263 ;   ;Parameter 4 Filter  ;Text50        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Parameter 4 Filter;
                                                              ENG=Parameter 4 Filter] }
    { 264 ;   ;Parameter 5 Filter  ;Text50        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Parameter 5 Filter;
                                                              ENG=Parameter 5 Filter] }
    { 265 ;   ;Parameter 6 Filter  ;Text50        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Parameter 6 Filter;
                                                              ENG=Parameter 6 Filter] }
    { 300 ;   ;Control Type        ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Control Type;
                                                              ENG=Control Type];
                                                   OptionCaptionML=[ENU=" ,Desktop,Web";
                                                                    ENG=" ,Desktop,Web"];
                                                   OptionString=[ ,Desktop,Web] }
    { 310 ;   ;Panel Group Code    ;Code20        ;TableRelation="General Lookup".Code WHERE (Type=CONST(PANEL GROUP));
                                                   CaptionML=[ENU=Panel Group Code;
                                                              ENG=Panel Group Code] }
    { 320 ;   ;System Palette Code ;Code20        ;TableRelation="System Palette";
                                                   CaptionML=[ENU=System Palette Code;
                                                              ENG=System Palette Code] }
    { 321 ;   ;System Palette Colour Order;Option ;CaptionML=[ENU=System Palette Colour Order;
                                                              ENG=System Palette Colour Order];
                                                   OptionCaptionML=[ENU=" ,In Sequence,Reversed Sequence,Random,First,Last";
                                                                    ENG=" ,In Sequence,Reversed Sequence,Random,First,Last"];
                                                   OptionString=[ ,In Sequence,Reversed Sequence,Random,First,Last] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Type,Code                                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PanelData@1000000008 : Record 9062432;
      PanelLink@1000000006 : Record 9062364;
      TileGroup@1000000001 : Record 9062366;
      Tile@1000000000 : Record 9062367;
      CopyPanel@1000000005 : Codeunit 9062352;
      EnhancedPermissionsMgt@1000000011 : Codeunit 9062277;
      MarginToolkit@1000000007 : Codeunit 9062379;
      PanelTimestampToolkit@1000000003 : Codeunit 9062385;
      PanelToolkit@1000000002 : Codeunit 9062320;
      TnpToolkit@1000000004 : Codeunit 9062230;
      NoInteraction@1000000009 : Boolean;
      String@1000000010 : Codeunit 9062236;

    PROCEDURE "--- General ---"@1000000031();
    BEGIN
    END;

    PROCEDURE ProcessRename@1000000003(pFromCode@1000000000 : Code[20];pToCode@1000000001 : Code[20]);
    VAR
      lPanelCache@1000000002 : Record 9062488;
      lPanelTimestamp@1000000003 : Record 9062489;
    BEGIN
      //DOC NA2015.2 - Processing rename (tables with non-standard relations)
      //  -> pFromCode: From code
      //  -> pToCode: To code

      IF (pFromCode = pToCode) THEN
        EXIT;

      TileGroup.RESET();
      TileGroup.SETRANGE("Panel Code", pFromCode);
      IF (TileGroup.FINDSET()) THEN
      REPEAT
        TileGroup.ProcessRename(pFromCode, TileGroup.ID, pToCode, TileGroup.ID);
      UNTIL (TileGroup.NEXT() = 0);

      Tile.RESET();
      Tile.SETRANGE("Panel Code", pFromCode);
      IF (Tile.FINDSET()) THEN
      REPEAT
        Tile.ProcessRename(pFromCode, Tile.ID, pToCode, Tile.ID);
      UNTIL (Tile.NEXT() = 0);

      PanelLink.RESET();
      PanelLink.SETRANGE("Panel Code", Rec.Code);
      IF (PanelLink.FINDSET()) THEN
      REPEAT
        PanelLink.ProcessRename(pFromCode, PanelLink.ID, pToCode, PanelLink.ID);
      UNTIL (PanelLink.NEXT() = 0);

      PanelData.RESET();
      PanelData.SETRANGE("Panel Code", Rec.Code);
      IF (PanelData.FINDSET()) THEN
      REPEAT
        PanelData.ProcessRename(pFromCode, PanelLink.ID, pToCode, PanelLink.ID);
      UNTIL (PanelData.NEXT() = 0);

      lPanelCache.RESET();
      lPanelCache.SETRANGE("Panel Code", pFromCode);
      lPanelCache.DELETEALL(TRUE);

      lPanelTimestamp.RESET();
      lPanelTimestamp.SETRANGE("Panel Code", pFromCode);
      lPanelTimestamp.DELETEALL(TRUE);

      UpdateControlName();
    END;

    PROCEDURE UpdateControlName@1000000013();
    VAR
      eName@1000000000 : TextConst 'ENU=Control_%1_%2;ENG=Control_%1_%2';
    BEGIN
      //DOC NA2015.1 - Updating control name

      Rec."Control Name" := PanelToolkit.CodeToControlName(DATABASE::Panel, Rec.Code);
    END;

    PROCEDURE ProposeMenus@1000000039(pInteraction@1000000000 : Boolean;pModify@9062229 : Boolean) : Boolean;
    VAR
      eConfirmation@1000000001 : TextConst 'ENU=Do you want to propose menus for the panel?;ENG=Do you want to propose menus for the panel?';
      lPanelMenu@1000000005 : Record 9062446;
      lMenusProposed@1000000003 : Boolean;
      eFinalMessage@1000000002 : TextConst 'ENU=Menus have been proposed for the panel.;ENG=Menus have been proposed for the panel.';
    BEGIN
      //DOC NA2015.1 - Proposing menus
      //  -> pInteraction: Interaction flag
      //  -> pModify: Flag to modify the panel after successful proposal
      //  <- TRUE: Menus proposed, FALSE: Not

      pInteraction := ((pInteraction) AND ( NOT (NoInteraction)) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
          EXIT(FALSE);

      lMenusProposed := FALSE;

      IF (ProposeMenu(Rec."Menu Code", lPanelMenu."Menu Type"::Panel, lMenusProposed)) THEN
        Rec.VALIDATE("Menu Code");
      IF (ProposeMenu(Rec."Tile Menu Code", lPanelMenu."Menu Type"::Tile, lMenusProposed)) THEN
        Rec.VALIDATE("Tile Menu Code");
      IF (ProposeMenu(Rec."Link Menu Code", lPanelMenu."Menu Type"::"Panel Link", lMenusProposed)) THEN
        Rec.VALIDATE("Link Menu Code");

      IF (lMenusProposed) THEN
      BEGIN
        IF (pModify) THEN
          Rec.MODIFY(TRUE);
        IF (pInteraction) THEN
          MESSAGE(eFinalMessage);
      END;

      EXIT(lMenusProposed);
    END;

    LOCAL PROCEDURE ProposeMenu@1000000038(VAR pMenuCode@1000000004 : Code[20];pMenuType@1000000000 : Integer;VAR pMenusProposed@1000000003 : Boolean) : Boolean;
    VAR
      lPanelMenuManagement@1000000002 : Codeunit 9062354;
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2015.1 - Proposing one menu
      //  <> pMenuCode: Menu code (one of the fields from panel)
      //  -> pMenuType: Menu type (see "Panel Menu"."Menu Type" field for options)
      //  <> pMenusProposed: Target flag indicating menus have been proposed
      //  <- TRUE = This menu has been proposed, FALSE = Not

      lResult := FALSE;

      IF (pMenuCode = '') THEN
      BEGIN
        pMenuCode := lPanelMenuManagement.ProposeMenu(Rec.Type, pMenuType);
        pMenusProposed := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE RemovePersonalisation@1000000041(pTileGroups@1000000000 : Boolean;pTiles@1000000001 : Boolean);
    BEGIN
      //DOC NA2015.1 - Removing panel personalisation
      //  -> pTileGroups: Remove tile groups presonalisation
      //  -> pTileItems: Remove tile items presonalisation

      IF (pTileGroups) THEN
      BEGIN
        TileGroup.RESET();
        TileGroup.SETRANGE("Panel Code", Rec.Code);
        IF (TileGroup.FINDSET()) THEN
        REPEAT
          TileGroup.RemovePersonalisation(TRUE, FALSE);
        UNTIL (TileGroup.NEXT() = 0);
      END;

      IF (pTiles) THEN
      BEGIN
        Tile.RESET();
        Tile.SETRANGE("Panel Code", Rec.Code);
        IF (Tile.FINDSET()) THEN
        REPEAT
          Tile.RemovePersonalisation();
        UNTIL (Tile.NEXT() = 0);
      END;
    END;

    PROCEDURE CopyTo@1000000042();
    BEGIN
      //DOC NA2015.8 - Copying selected part of the panel

      CLEAR(CopyPanel);
      CopyPanel.CopySelected(DATABASE::Panel, Rec.Code, 0, 0);
    END;

    LOCAL PROCEDURE ApplyDefaultTemplate@1000000028(pInteraction@1000000001 : Boolean) : Boolean;
    VAR
      lPanelTemplate@1000000000 : Record 9062491;
      eConfirmation@1000000002 : TextConst 'ENU=Do you want to apply default tile panel template for type "%1"?;ENG=Do you want to apply default tile panel template for type "%1"?';
    BEGIN
      //DOC NA2015.1 - Applying default template
      //  -> pInteraction: Interaction flag
      //  <- TRUE = Template applied, FALSE = Not

      IF (Rec.Type = Rec.Type::" ") THEN
        EXIT(FALSE);

      lPanelTemplate.RESET();
      lPanelTemplate.SETCURRENTKEY("Panel Type", "Default for Panel Type");
      lPanelTemplate.SETRANGE("Panel Type", Rec.Type);
      lPanelTemplate.SETRANGE("Default for Panel Type", TRUE);
      IF ( NOT (lPanelTemplate.FINDFIRST())) THEN
        EXIT(FALSE);

      IF ((pInteraction) AND ( NOT (NoInteraction)) AND (GUIALLOWED())) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE, FORMAT(Rec.Type)))) THEN
          EXIT(FALSE);

      Rec.VALIDATE("Panel Template Code", lPanelTemplate.Code);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ApplyCurrentTemplate@1000000012();
    VAR
      lPanelTemplate@1000000000 : Record 9062491;
    BEGIN
      //DOC NA2015.1 - Applying the current (assigned to the panel) template

      ApplyTemplate(Rec."Panel Template Code", TRUE);
    END;

    PROCEDURE ApplyTemplate@1000000001(pTemplateCode@1000000000 : Code[20];pFull@1000000001 : Boolean);
    VAR
      lPanelTemplate@1000000002 : Record 9062491;
    BEGIN
      //DOC NA2015.1 - Applying external template
      //  -> pTemplateCode: Template code
      //  -> pFull: TRUE = Full update, FALSE = Partial update (used for bulk panel updates from templates)

      IF (pTemplateCode = '') THEN
        EXIT;

      lPanelTemplate.GET(pTemplateCode);

      Rec.VALIDATE("Preferred Width", lPanelTemplate."Preferred Width");
      Rec.VALIDATE("Preferred Height", lPanelTemplate."Preferred Height");
      Rec.VALIDATE("Minimum Width", lPanelTemplate."Minimum Width");
      Rec.VALIDATE("Minimum Height", lPanelTemplate."Minimum Height");
      Rec.VALIDATE("Maximum Width", lPanelTemplate."Maximum Width");
      Rec.VALIDATE("Maximum Height", lPanelTemplate."Maximum Height");
      Rec.VALIDATE(Margin, lPanelTemplate.Margin);
      Rec.VALIDATE(Padding, lPanelTemplate.Padding);

      IF (pFull) THEN
      BEGIN
        Rec.VALIDATE("Update Caption", lPanelTemplate."Update Caption");
        Rec.VALIDATE("Auto Refresh Every", lPanelTemplate."Auto Refresh Every");
        Rec.VALIDATE("Use Cache", lPanelTemplate."Use Cache");
        Rec.VALIDATE("Show Text", lPanelTemplate."Show Text");
        Rec.VALIDATE("Text Font Size", lPanelTemplate."Text Font Size");
        Rec.VALIDATE("Text Font Style", lPanelTemplate."Text Font Style");
        Rec.VALIDATE("Text Colour Code", lPanelTemplate."Text Colour Code");
        Rec.VALIDATE("Space Between Groups", lPanelTemplate."Space Between Groups");
        Rec.VALIDATE("Show Group Headers", lPanelTemplate."Show Group Headers");
        Rec.VALIDATE("Group Header Font Size", lPanelTemplate."Group Header Font Size");
        Rec.VALIDATE("Group Header Font Style", lPanelTemplate."Group Header Font Style");
        Rec.VALIDATE("Group Header Colour Code", lPanelTemplate."Group Header Colour Code");
        Rec.VALIDATE("Tile Size", lPanelTemplate."Tile Size");
        Rec.VALIDATE("Tile Background Colour Code", lPanelTemplate."Tile Background Colour Code");
        Rec.VALIDATE("Tile Rows", lPanelTemplate."Tile Rows");
        Rec.VALIDATE("Tile Padding", lPanelTemplate."Tile Padding");
        Rec.VALIDATE("Space Between Tiles", lPanelTemplate."Space Between Tiles");
        Rec.VALIDATE("Tile Text Font Size", lPanelTemplate."Tile Text Font Size");
        Rec.VALIDATE("Tile Text Font Style", lPanelTemplate."Tile Text Font Style");
        Rec.VALIDATE("Tile Text Colour Code", lPanelTemplate."Tile Text Colour Code");
        Rec.VALIDATE("Tile Text Alignment", lPanelTemplate."Tile Text Alignment");
        Rec.VALIDATE("Tile Info Font Size", lPanelTemplate."Tile Info Font Size");
        Rec.VALIDATE("Tile Info Font Style", lPanelTemplate."Tile Info Font Style");
        Rec.VALIDATE("Tile Info Colour Code", lPanelTemplate."Tile Info Colour Code");
        Rec.VALIDATE("Tile Info Alignment", lPanelTemplate."Tile Info Alignment");
        Rec.VALIDATE("Large Tile Text Font Size", lPanelTemplate."Large Tile Text Font Size");
        Rec.VALIDATE("Large Tile Text Font Style", lPanelTemplate."Large Tile Text Font Style");
        Rec.VALIDATE("Large Tile Text Colour Code", lPanelTemplate."Large Tile Text Colour Code");
        Rec.VALIDATE("Large Tile Info Font Size", lPanelTemplate."Large Tile Info Font Size");
        Rec.VALIDATE("Large Tile Info Font Style", lPanelTemplate."Large Tile Info Font Style");
        Rec.VALIDATE("Large Tile Info Colour Code", lPanelTemplate."Large Tile Info Colour Code");
        Rec.VALIDATE("Small Tile Text Font Size", lPanelTemplate."Small Tile Text Font Size");
        Rec.VALIDATE("Small Tile Text Font Style", lPanelTemplate."Small Tile Text Font Style");
        Rec.VALIDATE("Small Tile Text Colour Code", lPanelTemplate."Small Tile Text Colour Code");
        Rec.VALIDATE("Small Tile Info Font Size", lPanelTemplate."Small Tile Info Font Size");
        Rec.VALIDATE("Small Tile Info Font Style", lPanelTemplate."Small Tile Info Font Style");
        Rec.VALIDATE("Small Tile Info Colour Code", lPanelTemplate."Small Tile Info Colour Code");
        Rec.VALIDATE("Animate Arrival", lPanelTemplate."Animate Arrival");
        Rec.VALIDATE("Animate Tiles", lPanelTemplate."Animate Tiles");
        Rec.VALIDATE("Tile Animation Type", lPanelTemplate."Tile Animation Type");
        Rec.VALIDATE("Tile Animation Min. Interval", lPanelTemplate."Tile Animation Min. Interval");
        Rec.VALIDATE("Tile Animation Max. Interval", lPanelTemplate."Tile Animation Max. Interval");
        Rec.VALIDATE("Links Width", lPanelTemplate."Links Width");
        Rec.VALIDATE("Link Font Size", lPanelTemplate."Link Font Size");
        Rec.VALIDATE("Link Font Style", lPanelTemplate."Link Font Style");
        Rec.VALIDATE("Link Colour Code", lPanelTemplate."Link Colour Code");
        Rec.VALIDATE("Link Margin", lPanelTemplate."Link Margin");
        Rec.VALIDATE("Link Padding", lPanelTemplate."Link Padding");
      END;
    END;

    PROCEDURE SetNoInteraction@1000000004(pNoInteraction@1000000000 : Boolean);
    BEGIN
      //DOC NA2015.4 - Setting "No Interaction" flag
      //  -> pNoInteraction: The flag

      NoInteraction := pNoInteraction;
    END;

    PROCEDURE CopyParametersFromTile@1000000007(pTile@1000000000 : Record 9062367);
    BEGIN
      //DOC NA2015.8 - Copying parameters from the given tile
      //  -> pTile: The tile

      Rec."Parameter 1" := pTile."Parameter 1";
      Rec."Parameter 2" := pTile."Parameter 2";
      Rec."Parameter 3" := pTile."Parameter 3";
      Rec."Parameter 4" := pTile."Parameter 4";
      Rec."Parameter 5" := pTile."Parameter 5";
      Rec."Parameter 6" := pTile."Parameter 6";
    END;

    PROCEDURE CopyParametersFromPanelLink@1000000006(pPanelLink@1000000000 : Record 9062364);
    BEGIN
      //DOC NA2015.8 - Copying parameters from the given panel link
      //  -> pPanelLink: The panel link

      Rec."Parameter 1" := pPanelLink."Parameter 1";
      Rec."Parameter 2" := pPanelLink."Parameter 2";
      Rec."Parameter 3" := pPanelLink."Parameter 3";
      Rec."Parameter 4" := pPanelLink."Parameter 4";
      Rec."Parameter 5" := pPanelLink."Parameter 5";
      Rec."Parameter 6" := pPanelLink."Parameter 6";
    END;

    PROCEDURE CopyParametersFromPanelEventArgs@1000000008(pPanelEventArgs@1000000000 : Record 9062370);
    BEGIN
      //DOC NA2015.8 - Copying parameters from the given panel event args
      //  -> pPanelEventArgs: The panel event args

      Rec."Parameter 1" := pPanelEventArgs."Parameter 1";
      Rec."Parameter 2" := pPanelEventArgs."Parameter 2";
      Rec."Parameter 3" := pPanelEventArgs."Parameter 3";
      Rec."Parameter 4" := pPanelEventArgs."Parameter 4";
      Rec."Parameter 5" := pPanelEventArgs."Parameter 5";
      Rec."Parameter 6" := pPanelEventArgs."Parameter 6";
    END;

    PROCEDURE CopyParametersFromPanelTimestamp@1000000009(pPanelTimestamp@1000000000 : Record 9062489);
    BEGIN
      //DOC NA2015.8 - Copying parameters from the given panel timestamp
      //  -> pPanelTimestamp: The panel timestamp

      Rec."Parameter 1" := pPanelTimestamp."Parameter 1";
      Rec."Parameter 2" := pPanelTimestamp."Parameter 2";
      Rec."Parameter 3" := pPanelTimestamp."Parameter 3";
      Rec."Parameter 4" := pPanelTimestamp."Parameter 4";
      Rec."Parameter 5" := pPanelTimestamp."Parameter 5";
      Rec."Parameter 6" := pPanelTimestamp."Parameter 6";
    END;

    PROCEDURE "--- Information ---"@1000000021();
    BEGIN
    END;

    PROCEDURE PageCaption@1000000034() : Text[250];
    VAR
      eCaption@1000000000 : TextConst 'ENU=%1;ENG=%1';
      lCaption@1000000001 : Text;
    BEGIN
      //DOC NA2015.1 - Returning page caption
      //  <- The caption

      IF (Rec.Caption <> '') THEN
        lCaption := Rec.Caption
      ELSE IF (Rec.Description <> '') THEN
        lCaption := Rec.Description
      ELSE
        lCaption := Rec.Code;

      EXIT(STRSUBSTNO(eCaption, lCaption));
    END;

    PROCEDURE "--- Show ---"@1000000020();
    BEGIN
    END;

    PROCEDURE ShowPanel@1000000005();
    VAR
      lPanel@1000000000 : Record 9062363;
    BEGIN
      //DOC NA2015.4 - Showing the panel

      Rec.TESTFIELD(Code);
      lPanel := Rec;
      lPanel.SETRECFILTER();
      PAGE.RUN(PAGE::Panel, lPanel);
    END;

    PROCEDURE ShowTileGroups@1000000019();
    BEGIN
      //DOC NA2015.1 - Showing tile groups

      TileGroup.RESET();
      TileGroup.FILTERGROUP(2);
      TileGroup.SETRANGE("Panel Code", Rec.Code);
      TileGroup.FILTERGROUP(0);

      PAGE.RUN(0, TileGroup);
    END;

    PROCEDURE ShowTiles@1000000027();
    BEGIN
      //DOC NA2015.1 - Showing tiles

      Tile.RESET();
      Tile.FILTERGROUP(2);
      Tile.SETRANGE("Panel Code", Rec.Code);
      Tile.FILTERGROUP(0);

      PAGE.RUN(0, Tile);
    END;

    PROCEDURE ShowLinks@1000000040();
    VAR
      lPanelLink@1000000000 : Record 9062364;
    BEGIN
      //DOC NA2015.1 - Showing links

      ShowLinksFor(lPanelLink);
    END;

    PROCEDURE ShowLinksFor@1000000000(pPanelLink@1000000000 : Record 9062364);
    VAR
      lPanel@1000000001 : Record 9062363;
    BEGIN
      //DOC NA2015.1 - Showing links focusing on particular link
      //  -> pPanelLink: The link to focus on

      PanelLink.RESET();
      PanelLink.FILTERGROUP(2);
      PanelLink.SETRANGE("Panel Code", Rec.Code);
      PanelLink.FILTERGROUP(0);
      IF (pPanelLink.ID <> 0) THEN
        IF (PanelLink.GET(Rec.Code, pPanelLink.ID)) THEN;

      PAGE.RUN(0, PanelLink);
    END;

    PROCEDURE ShowTemplate@1000000002();
    VAR
      lPanelTemplate@1000000000 : Record 9062491;
    BEGIN
      //DOC NA2015.1 - Showing template (if present)

      Rec.TESTFIELD("Panel Template Code");
      lPanelTemplate.GET(Rec."Panel Template Code");
      PAGE.RUN(PAGE::"Panel Template Card", lPanelTemplate);
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 27/04/2013 - Created
      //DOC NA2015.1  JH 17/07/2013 - Tiles
      //DOC NA2015.1  JH 23/09/2013 - Auto refresh added
      //DOC NA2015.1  JH 21/02/2014 - Panel size added
      //DOC NA2015.1  JH 14/03/2014 - Fixes
      //DOC NA2015.1  JH 14/04/2014 - Panels 3
      //DOC NA2015.4  JH 30/01/2015 - "Show Panel" added
      //DOC NA2015.8  JH 30/06/2015 - Type changed, parameters introduced
      //DOC NA2015.8  JH 15/07/2015 - Panel control type field removed
      //DOC NA2015.9  JH 13/08/2015 - Parameter filters added
      //DOC NA2016.9  JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.10 JH 25/09/2015 - Panel groups added, control type added
      //DOC NA2016.12 JH 28/01/2016 - New string codeunit
      //DOC NA2016.15 JH 05/05/2016 - Enhanced permissions
    }
    END.
  }
}

