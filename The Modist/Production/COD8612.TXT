OBJECT Codeunit 8612 Config. Template Management
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1001 : TextConst 'ENU=The template %1 is in this hierarchy and contains the same field.;ENG=The template %1 is in this hierarchy and contains the same field.';
      Text001@1003 : TextConst '@@@="%1 = Table ID, %2 = Table caption";ENU=A number series has not been set up for table %1 %2. The instance could not be created.;ENG=A number series has not been set up for table %1 %2. The instance could not be created.';
      Text002@1000 : TextConst '@@@="%2 = Table ID, %3 = Table caption";ENU=The instance %1 already exists in table %2 %3.;ENG=The instance %1 already exists in table %2 %3.';
      Text003@1004 : TextConst 'ENU=The value for the key field %1 is not filled for the instance.;ENG=The value for the key field %1 is not filled for the instance.';
      UpdatingRelatedTable@1002 : Boolean;

    PROCEDURE UpdateFromTemplateSelection@4(VAR RecRef@1000 : RecordRef);
    VAR
      ConfigTemplateHeader@1001 : Record 8618;
    BEGIN
      ConfigTemplateHeader.SETRANGE("Table ID",RecRef.NUMBER);
      IF PAGE.RUNMODAL(PAGE::"Config. Template List",ConfigTemplateHeader,ConfigTemplateHeader.Code) = ACTION::LookupOK THEN
        UpdateRecord(ConfigTemplateHeader,RecRef);
    END;

    PROCEDURE UpdateRecord@1(ConfigTemplateHeader@1000 : Record 8618;VAR RecRef@1001 : RecordRef);
    BEGIN
      IF TestKeyFields(RecRef) THEN BEGIN
        InsertTemplate(RecRef,ConfigTemplateHeader);
      END ELSE BEGIN
        InsertRecordWithKeyFields(RecRef,ConfigTemplateHeader);
        IF TestKeyFields(RecRef) THEN
          InsertTemplate(RecRef,ConfigTemplateHeader)
        ELSE
          ERROR(STRSUBSTNO(Text001,RecRef.NUMBER,RecRef.CAPTION));
      END;
    END;

    LOCAL PROCEDURE InsertTemplate@3(VAR RecRef@1000 : RecordRef;ConfigTemplateHeader@1001 : Record 8618);
    VAR
      ConfigTemplateLine@1002 : Record 8619;
      ConfigTemplateHeader2@1004 : Record 8618;
      FieldRef@1003 : FieldRef;
      RecRef2@1005 : RecordRef;
    BEGIN
      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);
      IF ConfigTemplateLine.FINDSET THEN
        REPEAT
          CASE ConfigTemplateLine.Type OF
            ConfigTemplateLine.Type::Field:
              IF ConfigTemplateLine."Field ID" <> 0 THEN BEGIN
                FieldRef := RecRef.FIELD(ConfigTemplateLine."Field ID");
                ModifyRecordWithField(RecRef,FieldRef,ConfigTemplateLine."Default Value",ConfigTemplateLine."Language ID");
              END;
            ConfigTemplateLine.Type::Template:
              IF ConfigTemplateLine."Template Code" <> '' THEN
                IF ConfigTemplateHeader2.GET(ConfigTemplateLine."Template Code") THEN
                  IF ConfigTemplateHeader2."Table ID" = ConfigTemplateHeader."Table ID" THEN
                    InsertTemplate(RecRef,ConfigTemplateHeader2)
                  ELSE BEGIN
                    UpdatingRelatedTable := TRUE;
                    RecRef2.OPEN(ConfigTemplateHeader2."Table ID");
                    UpdateRecord(ConfigTemplateHeader2,RecRef2);
                    UpdatingRelatedTable := FALSE;
                  END;
          END;
        UNTIL ConfigTemplateLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ModifyRecordWithField@39(VAR RecRef@1004 : RecordRef;FieldRef@1005 : FieldRef;Value@1002 : Text[250];LanguageID@1001 : Integer);
    VAR
      ConfigValidateMgt@1000 : Codeunit 8617;
    BEGIN
      ConfigValidateMgt.ValidateFieldValue(RecRef,FieldRef,Value,FALSE,LanguageID);
      RecRef.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE TestKeyFields@2(VAR RecRef@1000 : RecordRef) : Boolean;
    VAR
      KeyRef@1003 : KeyRef;
      FieldRef@1002 : FieldRef;
      KeyFieldCount@1001 : Integer;
    BEGIN
      KeyRef := RecRef.KEYINDEX(1);
      FOR KeyFieldCount := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(KeyFieldCount);
        IF FORMAT(FieldRef.VALUE) = '' THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE TestHierarchy@6(ConfigTemplateLine@1001 : Record 8619);
    VAR
      TempConfigTemplateLine@1002 : TEMPORARY Record 8619;
    BEGIN
      GetHierarchicalLines(TempConfigTemplateLine,ConfigTemplateLine);
      WITH TempConfigTemplateLine DO BEGIN
        SETFILTER("Field ID",'>%1',0); // exclude config. lines not handled yet
        IF FINDSET THEN
          REPEAT
            SETRANGE("Field ID","Field ID");
            IF COUNT > 1 THEN
              ERROR(STRSUBSTNO(Text000,"Data Template Code"));
            DELETEALL;
            SETFILTER("Field ID",'>%1',0);
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetHierarchicalLines@24(VAR ConfigTemplateLineBuf@1000 : Record 8619;ConfigTemplateLine@1001 : Record 8619);
    VAR
      SubConfigTemplateLine@1002 : Record 8619;
      CurrConfigTemplateLine@1004 : Record 8619;
    BEGIN
      WITH CurrConfigTemplateLine DO BEGIN
        SETRANGE("Data Template Code",ConfigTemplateLine."Data Template Code");
        IF FINDSET THEN
          REPEAT
            // get current version of record because it's may not be in DB yet
            IF "Line No." = ConfigTemplateLine."Line No." THEN
              CurrConfigTemplateLine := ConfigTemplateLine;
            IF Type = Type::Field THEN BEGIN
              ConfigTemplateLineBuf := CurrConfigTemplateLine;
              IF NOT ConfigTemplateLineBuf.FIND THEN
                ConfigTemplateLineBuf.INSERT;
            END ELSE BEGIN
              SubConfigTemplateLine.INIT;
              SubConfigTemplateLine."Data Template Code" := "Template Code";
              GetHierarchicalLines(ConfigTemplateLineBuf,SubConfigTemplateLine);
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InsertRecordWithKeyFields@40(VAR RecRef@1000 : RecordRef;ConfigTemplateHeader@1002 : Record 8618);
    VAR
      ConfigTemplateLine@1001 : Record 8619;
      ConfigValidateMgt@1007 : Codeunit 8617;
      RecRef1@1006 : RecordRef;
      KeyRef@1003 : KeyRef;
      FieldRef@1004 : FieldRef;
      KeyFieldCount@1005 : Integer;
      MessageString@1008 : Text[250];
    BEGIN
      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);

      KeyRef := RecRef.KEYINDEX(1);
      FOR KeyFieldCount := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(KeyFieldCount);
        ConfigTemplateLine.SETRANGE("Field ID",FieldRef.NUMBER);
        IF ConfigTemplateLine.FINDFIRST THEN BEGIN
          ConfigValidateMgt.ValidateFieldValue(
            RecRef,FieldRef,ConfigTemplateLine."Default Value",FALSE,ConfigTemplateLine."Language ID");
        END ELSE
          IF KeyRef.FIELDCOUNT <> 1 THEN
            ERROR(STRSUBSTNO(Text003,FieldRef.NAME));
      END;

      RecRef1 := RecRef.DUPLICATE;

      IF RecRef1.FIND('=') THEN
        IF NOT UpdatingRelatedTable THEN BEGIN
          MessageString := MessageString + ' ' + FORMAT(FieldRef.VALUE);
          MessageString := DELCHR(MessageString,'<');
          ERROR(STRSUBSTNO(Text002,MessageString,RecRef.NUMBER,RecRef.CAPTION));
        END ELSE
          EXIT;

      RecRef.INSERT(TRUE);
    END;

    PROCEDURE SetUpdatingRelatedTable@5(NewUpdatingRelatedTable@1000 : Boolean);
    BEGIN
      UpdatingRelatedTable := NewUpdatingRelatedTable;
    END;

    PROCEDURE CreateConfigTemplateAndLines@10(VAR Code@1006 : Code[10];Description@1007 : Text[50];TableID@1008 : Integer;DefaultValuesFieldRefArray@1009 : ARRAY [100] OF FieldRef);
    VAR
      ConfigTemplateHeader@1001 : Record 8618;
      FieldRef@1004 : FieldRef;
      I@1002 : Integer;
    BEGIN
      ConfigTemplateHeader.INIT;

      IF Code = '' THEN
        Code := GetNextAvailableCode;

      ConfigTemplateHeader.Code := Code;
      ConfigTemplateHeader.Description := Description;
      ConfigTemplateHeader."Table ID" := TableID;
      ConfigTemplateHeader.INSERT(TRUE);

      FOR I := 1 TO ARRAYLEN(DefaultValuesFieldRefArray) DO BEGIN
        FieldRef := DefaultValuesFieldRefArray[I];
        InsertConfigTemplateLineFromField(Code,FieldRef,GetNextLineNo(Code),TableID);
      END;
    END;

    PROCEDURE UpdateConfigTemplateAndLines@9(Code@1008 : Code[10];Description@1007 : Text[50];TableID@1006 : Integer;DefaultValuesFieldRefArray@1005 : ARRAY [100] OF FieldRef);
    VAR
      ConfigTemplateHeader@1001 : Record 8618;
      ConfigTemplateLine@1003 : Record 8619;
      FieldRef@1004 : FieldRef;
      I@1002 : Integer;
      Value@1000 : Text[250];
    BEGIN
      ConfigTemplateHeader.GET(Code);
      ConfigTemplateHeader.Description := Description;
      ConfigTemplateHeader.MODIFY;

      FOR I := 1 TO ARRAYLEN(DefaultValuesFieldRefArray) DO BEGIN
        FieldRef := DefaultValuesFieldRefArray[I];
        ConfigTemplateLine.SETFILTER("Data Template Code",Code);
        ConfigTemplateLine.SETFILTER(Type,'=%1',ConfigTemplateLine.Type::Field);
        ConfigTemplateLine.SETFILTER("Field ID",'=%1',FieldRef.NUMBER);
        ConfigTemplateLine.SETFILTER("Table ID",'=%1',TableID);

        IF ConfigTemplateLine.FINDLAST THEN BEGIN
          Value := FORMAT(FieldRef.VALUE);
          IF Value <> ConfigTemplateLine."Default Value" THEN BEGIN
            ConfigTemplateLine."Default Value" := Value;
            ConfigTemplateLine."Language ID" := GLOBALLANGUAGE;
            ConfigTemplateLine.MODIFY(TRUE);
          END;
        END ELSE
          InsertConfigTemplateLineFromField(Code,FieldRef,GetNextLineNo(Code),TableID);
      END;
    END;

    PROCEDURE ApplyTemplateLinesWithoutValidation@8(ConfigTemplateHeader@1000 : Record 8618;VAR RecordRef@1002 : RecordRef);
    VAR
      ConfigTemplateLine@1001 : Record 8619;
      ConfigValidateMgt@1005 : Codeunit 8617;
      FieldRef@1004 : FieldRef;
    BEGIN
      ConfigTemplateLine.SETFILTER("Data Template Code",ConfigTemplateHeader.Code);

      IF ConfigTemplateLine.FINDSET THEN
        REPEAT
          IF ConfigTemplateLine.Type = ConfigTemplateLine.Type::Field THEN
            IF RecordRef.FIELDEXIST(ConfigTemplateLine."Field ID") THEN BEGIN
              FieldRef := RecordRef.FIELD(ConfigTemplateLine."Field ID");
              ConfigValidateMgt.ValidateFieldValue(
                RecordRef,FieldRef,ConfigTemplateLine."Default Value",TRUE,ConfigTemplateLine."Language ID");
              RecordRef.MODIFY(FALSE);
            END;
        UNTIL ConfigTemplateLine.NEXT = 0;
    END;

    PROCEDURE GetNextAvailableCode@14() : Code[10];
    VAR
      ConfigTemplateHeader@1001 : Record 8618;
      NextCode@1000 : Code[10];
    BEGIN
      NextCode := '0000000001';

      WHILE ConfigTemplateHeader.GET(NextCode) DO
        NextCode := INCSTR(NextCode);

      EXIT(NextCode);
    END;

    PROCEDURE AddRelatedTemplate@11(Code@1004 : Code[10];RelatedTemplateCode@1005 : Code[10]);
    VAR
      ConfigTemplateLine@1002 : Record 8619;
    BEGIN
      ConfigTemplateLine.SETRANGE("Data Template Code",Code);
      ConfigTemplateLine.SETRANGE(Type,ConfigTemplateLine.Type::"Related Template");
      ConfigTemplateLine.SETRANGE("Template Code",RelatedTemplateCode);

      IF ConfigTemplateLine.FINDFIRST THEN
        EXIT;

      CLEAR(ConfigTemplateLine);
      ConfigTemplateLine."Data Template Code" := Code;
      ConfigTemplateLine."Template Code" := RelatedTemplateCode;
      ConfigTemplateLine."Line No." := GetNextLineNo(Code);
      ConfigTemplateLine.Type := ConfigTemplateLine.Type::"Related Template";
      ConfigTemplateLine.INSERT(TRUE);
    END;

    PROCEDURE RemoveRelatedTemplate@13(Code@1004 : Code[10];RelatedTemplateCode@1005 : Code[10]);
    VAR
      ConfigTemplateLine@1002 : Record 8619;
    BEGIN
      ConfigTemplateLine.SETRANGE("Data Template Code",Code);
      ConfigTemplateLine.SETRANGE(Type,ConfigTemplateLine.Type::"Related Template");
      ConfigTemplateLine.SETRANGE("Template Code",RelatedTemplateCode);

      IF ConfigTemplateLine.FINDFIRST THEN
        ConfigTemplateLine.DELETE(TRUE);
    END;

    PROCEDURE DeleteRelatedTemplates@12(ConfigTemplateHeaderCode@1000 : Code[10];TableID@1001 : Integer);
    VAR
      ConfigTemplateLine@1002 : Record 8619;
      RelatedConfigTemplateHeader@1003 : Record 8618;
    BEGIN
      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeaderCode);
      ConfigTemplateLine.SETRANGE(Type,ConfigTemplateLine.Type::"Related Template");

      IF ConfigTemplateLine.FINDSET THEN
        REPEAT
          RelatedConfigTemplateHeader.GET(ConfigTemplateLine."Template Code");
          IF RelatedConfigTemplateHeader."Table ID" = TableID THEN BEGIN
            RelatedConfigTemplateHeader.DELETE(TRUE);
            ConfigTemplateLine.DELETE(TRUE);
          END;
        UNTIL ConfigTemplateLine.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertConfigTemplateLineFromField@16(ConfigTemplateHeaderCode@1001 : Code[10];FieldRef@1003 : FieldRef;NextLineNo@1002 : Integer;TableID@1004 : Integer);
    VAR
      ConfigTemplateLine@1000 : Record 8619;
    BEGIN
      ConfigTemplateLine.INIT;
      ConfigTemplateLine."Data Template Code" := ConfigTemplateHeaderCode;
      ConfigTemplateLine.Type := ConfigTemplateLine.Type::Field;
      ConfigTemplateLine."Line No." := NextLineNo;
      ConfigTemplateLine."Field ID" := FieldRef.NUMBER;
      ConfigTemplateLine."Table ID" := TableID;
      ConfigTemplateLine."Default Value" := FieldRef.VALUE;

      ConfigTemplateLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE GetNextLineNo@19(ConfigTemplateHeaderCode@1000 : Code[10]) : Integer;
    VAR
      ConfigTemplateLine@1001 : Record 8619;
    BEGIN
      ConfigTemplateLine.SETFILTER("Data Template Code",ConfigTemplateHeaderCode);

      IF ConfigTemplateLine.FINDLAST THEN
        EXIT(ConfigTemplateLine."Line No." + 10000);

      EXIT(10000);
    END;

    BEGIN
    END.
  }
}

