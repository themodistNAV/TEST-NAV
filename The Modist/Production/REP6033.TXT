OBJECT Report 6033 Get Prepaid Contract Entries
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Get Prepaid Contract Entries;
               ENG=Get Prepaid Contract Entries];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   ContractNo := '';
                 END;

    OnPreReport=BEGIN
                  IF ServHeader."No." = '' THEN
                    ERROR(Text000);
                  ServLine.RESET;
                  ServLine.SETRANGE("Document Type",ServHeader."Document Type");
                  ServLine.SETRANGE("Document No.",ServHeader."No.");
                  IF ServLine.FINDLAST THEN
                    NextLine := ServLine."Line No." + 10000
                  ELSE
                    NextLine := 10000;
                END;

  }
  DATASET
  {
    { 1141;    ;DataItem;                    ;
               DataItemTable=Table5907;
               DataItemTableView=SORTING(Service Contract No.,Entry No.,Entry Type,Type,Moved from Prepaid Acc.,Posting Date,Open,Prepaid)
                                 WHERE(Type=CONST(Service Contract),
                                       Entry Type=CONST(Sale),
                                       Moved from Prepaid Acc.=CONST(No),
                                       Open=CONST(No));
               OnAfterGetRecord=BEGIN
                                  IF "Customer No." = ServHeader."Customer No." THEN BEGIN
                                    IF (ContractNo = '') OR ((ContractNo <> '') AND (ContractNo <> "Service Contract No.")) THEN BEGIN
                                      ServLine.INIT;
                                      ServLine."Document Type" := ServHeader."Document Type";
                                      ServLine."Document No." := ServHeader."No.";
                                      ServLine."Line No." := NextLine;
                                      ServLine.Description := STRSUBSTNO('%1: %2',ServContract.TABLECAPTION,"Service Contract No.");
                                      ServLine."Customer No." := ServHeader."Customer No.";
                                      ServLine."Contract No." := "Service Contract No.";
                                      ServLine.INSERT;
                                      NextLine := NextLine + 10000;
                                      ContractNo := "Service Contract No."
                                    END;
                                    CLEAR(ServLine);
                                    ServLine.INIT;
                                    ServLine."Document Type" := ServHeader."Document Type";
                                    ServLine."Document No." := ServHeader."No.";
                                    ServLine."Line No." := NextLine;
                                    ServLine.INSERT(TRUE);
                                    ServLine.Type := ServLine.Type::"G/L Account";
                                    ServContractAccGr.GET("Serv. Contract Acc. Gr. Code");
                                    ServContractAccGr.TESTFIELD("Prepaid Contract Acc.");
                                    ServLine.VALIDATE("No.",ServContractAccGr."Prepaid Contract Acc.");
                                    ServLine.VALIDATE(Quantity,1);
                                    ServLine."Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
                                    ServLine."Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
                                    ServLine."Dimension Set ID" := "Dimension Set ID";
                                    IF ServHeader."Currency Code" <> '' THEN
                                      ServLine.VALIDATE("Unit Price",UnitAmountToFCY(-"Amount (LCY)"))
                                    ELSE
                                      ServLine.VALIDATE("Unit Price",-"Amount (LCY)");
                                    ServLine.VALIDATE("Unit Cost (LCY)","Unit Cost");
                                    ServLine.VALIDATE("Contract No.","Service Contract No.");
                                    ServLine.VALIDATE("Service Item No.","Service Item No. (Serviced)");
                                    ServLine.VALIDATE("Appl.-to Service Entry","Entry No.");
                                    ServLine.MODIFY;
                                    NextLine := NextLine + 10000;
                                  END;
                                END;

               ReqFilterFields=Service Contract No.,Posting Date }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ServHeader@1009 : Record 5900;
      ServContractAccGr@1007 : Record 5973;
      ServLine@1006 : Record 5902;
      Currency@1004 : Record 4;
      ServContract@1005 : Record 5965;
      NextLine@1003 : Integer;
      Text000@1010 : TextConst 'ENU=The batch job has not been initialized.;ENG=The batch job has not been initialised.';
      ContractNo@1002 : Code[20];

    PROCEDURE Initialize@1(ServHeader2@1000 : Record 5900);
    BEGIN
      ServHeader := ServHeader2;

      ServHeader.TESTFIELD("Document Type",ServHeader."Document Type"::"Credit Memo");
      ServHeader.TESTFIELD("No.");
      ServHeader.TESTFIELD("Customer No.");
      ServHeader.TESTFIELD("Bill-to Customer No.");
      GetCurrency;
    END;

    LOCAL PROCEDURE UnitAmountToFCY@8(FCAmount@1000 : Decimal) : Decimal;
    VAR
      CurrExchRate@1001 : Record 330;
    BEGIN
      Currency.TESTFIELD("Unit-Amount Rounding Precision");
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            ServHeader."Posting Date",ServHeader."Currency Code",
            FCAmount,ServHeader."Currency Factor"),
          Currency."Unit-Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE GetCurrency@17();
    BEGIN
      WITH ServHeader DO
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

