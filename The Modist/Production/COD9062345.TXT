OBJECT Codeunit 9062345 Panel Selection Management
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      mObjectFieldToolkit@1000000000 : Codeunit 9062343;

    PROCEDURE "--- Page Validation and Lookup ---"@1000000000();
    BEGIN
    END;

    PROCEDURE PageName@1000000004(pPageId@1000000000 : Integer) : Text[50];
    BEGIN
      //DOC NA2015.1 - Returning page name
      //  -> pPageId: Page ID
      //  <- Page name

      FilterPages();
      EXIT(mObjectFieldToolkit.GetPageName(pPageId));
    END;

    PROCEDURE ValidatePageId@1000000001(pPageId@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Validating page ID
      //  -> pPageId: Page ID

      FilterPages();
      mObjectFieldToolkit.ValidatePageId(pPageId)
    END;

    PROCEDURE ValidatePageName@1000000002(pPageId@1000000000 : Integer;pPageName@1000000001 : Text[50]);
    BEGIN
      //DOC NA2015.1 - Validating page name
      //  -> pPageId: Page ID
      //  <> pPageName: Page name

      FilterPages();
      mObjectFieldToolkit.ValidatePageName(pPageId, pPageName, FALSE);
    END;

    PROCEDURE PageLookup@1000000003(VAR pPageId@1000000000 : Integer) : Boolean;
    BEGIN
      //DOC NA2015.1 - Performing page lookup
      //  <> pPageId: Page ID
      //  <- Lookup result

      FilterPages();
      EXIT(mObjectFieldToolkit.PageLookup(pPageId));
    END;

    PROCEDURE DefaultPage@1000000006() : Integer;
    BEGIN
      //DOC NA2016.10 - Returning default page
      //  <- The page

      EXIT(PAGE::"Day in the Life RC (Panels)");
    END;

    LOCAL PROCEDURE FilterPages@1000000005();
    VAR
      lAllObj@1000000000 : Record 2000000038;
    BEGIN
      //DOC NA2016.10 - Filtering pages before using object / field toolkit

      CLEAR(mObjectFieldToolkit);

      lAllObj.RESET();
      lAllObj.SETRANGE("Object Type", lAllObj."Object Type"::Page);
      lAllObj.SETFILTER("Object Name", '* RC *|* RC');
      IF (lAllObj.FINDSET()) THEN
      REPEAT
        mObjectFieldToolkit.AddToObjectIdFilter(lAllObj."Object ID");
      UNTIL (lAllObj.NEXT() = 0);
    END;

    PROCEDURE "--- Previous / Next Page ---"@1000000018();
    BEGIN
    END;

    PROCEDURE PreviousPage@1000000009(VAR pPageId@1000000000 : Integer) : Boolean;
    VAR
      lAllObj@1000000002 : Record 2000000038;
      lFilter@1000000001 : Text;
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NA2015.4 - Skipping to previous page
      //  <> pPageId: Source / target page ID
      //  <- TRUE = Page changed, FALSE = Not

      EXIT(SkipToPage(pPageId, -1));
    END;

    PROCEDURE NextPage@1000000011(VAR pPageId@1000000000 : Integer) : Boolean;
    BEGIN
      //DOC NA2015.4 - Skipping to next page
      //  <> pPageId: Source / target page ID
      //  <- TRUE = Page changed, FALSE = Not

      EXIT(SkipToPage(pPageId, 1));
    END;

    LOCAL PROCEDURE SkipToPage@1000000017(VAR pPageId@1000000000 : Integer;pDirection@1000000004 : Integer) : Boolean;
    VAR
      lAllObj@1000000002 : Record 2000000038;
      lFilter@1000000001 : Text;
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NA2015.4 - Skipping to previous page
      //  <> pPageId: Source / target page ID
      //  -> pDirection: Direction (-1 = previous, 1 = next)
      //  <- TRUE = Page changed, FALSE = Not

      IF ( NOT (pDirection IN [-1, 1])) THEN
        EXIT(FALSE);

      FilterPages();
      lFilter := mObjectFieldToolkit.GetObjectIdFilter();

      lAllObj.RESET();
      lAllObj.SETRANGE("Object Type", lAllObj."Object Type"::Page);
      lAllObj.SETFILTER("Object ID", lFilter);
      IF (lAllObj.GET(lAllObj."Object Type"::Page, pPageId)) THEN;
      IF (lAllObj.NEXT(pDirection) <> 0) THEN
      BEGIN
        pPageId := lAllObj."Object ID";
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE "--- Copying ---"@1000000007();
    BEGIN
    END;

    PROCEDURE CopyToSelectedUsers@1000000008(pPanelSelection@1000000000 : Record 9062371) : Boolean;
    VAR
      lPanelSelection@1000000003 : Record 9062371;
      lNablementUser@1000000001 : Record 9062729;
      lNablementUserList@1000000004 : Page 9063087;
      lResult@1000000002 : Boolean;
      lNablementUserFilter@1000000005 : Text;
    BEGIN
      //DOC NA2015.2 - Copying panel selection to selected users
      //  -> pPanelSelection: Panel selection to copy
      //  <- TRUE = Copied, FALSE = Cancelled

      pPanelSelection.TESTFIELD("Page ID");
      pPanelSelection.TESTFIELD("User ID");

      lResult := FALSE;

      lNablementUser.RESET();
      lNablementUser.FILTERGROUP(2);
      lNablementUser.SETFILTER("User ID", '<>%1', pPanelSelection."User ID");
      lNablementUser.FILTERGROUP(0);
      CLEAR(lNablementUserList);
      lNablementUserList.SETTABLEVIEW(lNablementUser);
      lNablementUserList.LOOKUPMODE(TRUE);
      IF (lNablementUserList.RUNMODAL() = ACTION::LookupOK) THEN
      BEGIN
        lNablementUserFilter := lNablementUserList.GetSelectionFilter();
        lNablementUser.RESET();
        IF (lNablementUserFilter <> '') THEN
          lNablementUser.SETFILTER("User ID", lNablementUserFilter);
        IF (lNablementUser.FINDSET()) THEN
        REPEAT
          IF ( NOT (lPanelSelection.GET(pPanelSelection."Page ID", lNablementUser."User ID"))) THEN
          BEGIN
            CLEAR(lPanelSelection);
            lPanelSelection.INIT();
            lPanelSelection.VALIDATE("Page ID", pPanelSelection."Page ID");
            lPanelSelection.VALIDATE("User ID", lNablementUser."User ID");
            lPanelSelection.INSERT(TRUE);
          END;
          lPanelSelection.CopyPanelsFrom(pPanelSelection);
          lPanelSelection.MODIFY(TRUE);
        UNTIL (lNablementUser.NEXT() = 0);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE CopyFromUser@1000000010(VAR pPanelSelection@1000000000 : Record 9062371) : Boolean;
    VAR
      lPanelSelection@1000000003 : Record 9062371;
      lUser@1000000001 : Record 2000000120;
      lUserTmp@1000000002 : TEMPORARY Record 2000000120;
      eNoUsers@1000000004 : TextConst 'ENU=There are no panel setup entries for other users to copy from.;ENG=There are no panel setup entries for other users to copy from.';
      lResult@1000000005 : Boolean;
    BEGIN
      //DOC NA2015.2 - Copying panels from another user
      //  <> pPanelSelection: Source / destination panel setup
      //  <- TRUE = Copied, FALSE = Cancelled

      pPanelSelection.TESTFIELD("Page ID");
      pPanelSelection.TESTFIELD("User ID");

      lResult := FALSE;

      lPanelSelection.RESET();
      lPanelSelection.SETRANGE("Page ID", pPanelSelection."Page ID");
      lPanelSelection.SETFILTER("User ID", '<>%1', lPanelSelection."User ID");
      IF (lPanelSelection.FINDSET()) THEN
      REPEAT
        lUserTmp.RESET();
        lUserTmp.SETRANGE("User Name", lPanelSelection."User ID");
        IF (lUserTmp.ISEMPTY) THEN
        BEGIN
          lUser.RESET();
          lUser.SETRANGE("User Name", lPanelSelection."User ID");
          IF (lUser.FINDFIRST()) THEN
          BEGIN
            lUserTmp := lUser;
            lUserTmp.INSERT();
          END;
        END;
      UNTIL (lPanelSelection.NEXT() = 0);

      lUserTmp.RESET();
      IF (lUserTmp.ISEMPTY) THEN
        ERROR(eNoUsers);

      IF (PAGE.RUNMODAL(PAGE::Users, lUserTmp) = ACTION::LookupOK) THEN
      BEGIN
        lPanelSelection.GET(pPanelSelection."Page ID", lUserTmp."User Name");
        pPanelSelection.CopyPanelsFrom(lPanelSelection);
        pPanelSelection.MODIFY(TRUE);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 22/05/2014 - Created
      //DOC NA2015.1  JH 22/05/2014 - Specific pages
      //DOC NA2015.3  JH 24/07/2014 - Role centre for web tiles added
      //DOC NA2015.4  JH 04/01/2015 - Day in the Life role centre with standard tiles added
      //DOC NA2015.5  PC 05/03/2015 - Fixed bug in PanelSelection Get Statement in function CopyFromUser
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.15 JH 18/04/2016 - CfMD amendments
    }
    END.
  }
}

