OBJECT Codeunit 9062262 Enhanced Workflow Interface
{
  OBJECT-PROPERTIES
  {
    Date=11/05/16;
    Time=[ 2:56:02 PM];
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WFlowMgt@1000000000 : Codeunit 9062258;
      WFlowType@1000000001 : Record 9062258;
      Text0001@1000000002 : TextConst 'ENU=Group WFlow %1 does not exist;ENG=Group WFlow %1 does not exist';
      Text0002@1000000003 : TextConst 'ENU=WFlow Tyoe %1 does not exist;ENG=WFlow Tyoe %1 does not exist';
      WFlowSetup@1000000004 : Record 9062229;
      Logger@1000000005 : Record 9062280;
      TNLUtils@1000000006 : Codeunit 9062229;
      tWorkflowsDisabled@1000000007 : TextConst 'ENU=No workflow created as workflows are disabled in Workflow Setup table.;ENG=No workflow created as workflows are disabled in Workflow Setup table.';
      tUnknownWorkflow@1000000008 : TextConst 'ENU=Uknown workflow: "%1".;ENG=Uknown workflow: "%1".';
      tWorkflowTableIdZero@1000000009 : TextConst 'ENU=Workflow "%1" table ID is zero.;ENG=Workflow "%1" table ID is zero.';
      tUnknownWorkflowStatusChange@1000000010 : TextConst 'ENU=No workflow status change has been defined for workflow type "%1" from "%2" to "%3".;ENG=No workflow status change has been defined for workflow type "%1" from "%2" to "%3".';
      tUnknownGroupHeader@1000000011 : TextConst 'ENU=Could not send workflow as group workflow "%1" does not exist.;ENG=Could not send workflow as group workflow "%1" does not exist.';
      response_WFLOW_NOT_FOUND@1000000019 : TextConst 'ENU=The Workflow "%1" was not found and was therefore not triggered;ENG=The Workflow "%1" was not found and was therefore not triggered';
      response_ONE_WFLOW_ONLY@1000000012 : TextConst 'ENU=The Workflow "%1" was not triggered as another Workflow of the same Type for this record is currently Open.;ENG=The Workflow "%1" was not triggered as another Workflow of the same Type for this record is currently Open.';
      response_NOTIF_ONLY@1000000013 : TextConst 'ENU=The Workflow "%1" was triggered as Notification Only. No responses will be requested.;ENG=The Workflow "%1" was triggered as Notification Only. No responses will be requested.';
      response_NO_RECIPIENTS@1000000014 : TextConst 'ENU=No Recipients were found to send the Workflow "%1" to. The following Action was therefore taken:/;ENG=No Recipients were found to send the Workflow "%1" to. The following Action was therefore taken:/';
      response_DISABLED@1000000018 : TextConst 'ENU=The Workflow "%1" is Disabled. The following Action was therefore taken:/;ENG=The Workflow "%1" is Disabled. The following Action was therefore taken:/';
      response_WorkflowNotTriggered@1000000015 : TextConst 'ENU=The Workflow was not triggered;ENG=The Workflow was not triggered';
      response_ResponseUsed@1000000016 : TextConst 'ENU=The response "%1" was automatically used;ENG=The response "%1" was automatically used';
      response_OK@1000000017 : TextConst 'ENU=A Group Workflow of type "%1" was created;ENG=A Group Workflow of type "%1" was created';

    PROCEDURE New@1000000009("WFlow Type"@1000000007 : Code[20];Information@1000000004 : Text[250];"WFlow To"@1000000000 : Code[20];"Amount Parameter"@1000000002 : Decimal;"Routing Parameter"@1000000001 : Code[100];GetPositionText@1000000003 : Text[250]) Response : Code[20];
    VAR
      TNP001@1000000009 : TextConst 'ENU=TNP001;ENG=TNP001';
    BEGIN
      //Check whole workflow system is inactive

      WFlowSetup.GET;
      IF NOT WFlowSetup."Enable Workflows" THEN EXIT;


      Response := WFlowMgt.CreateGroupWFlow("WFlow To",
                                          TRUE,
                                          "WFlow Type",
                                           Information,
                                           GetPositionText,
                                           "Amount Parameter",
                                           "Routing Parameter",
                                           '',
                                           TRUE);
    END;

    PROCEDURE Simple@1000000004("WFlow Type"@1000000007 : Code[20];GetPositionText@1000000003 : Text[250]) Response : Code[20];
    VAR
      TNP001@1000000009 : TextConst 'ENU=TNP001;ENG=TNP001';
    BEGIN
      //Check whole workflow system is inactive

      WFlowSetup.GET;
      IF NOT WFlowSetup."Enable Workflows" THEN EXIT;


      Response := WFlowMgt.CreateGroupWFlow('',
                                          TRUE,
                                          "WFlow Type",
                                           '',
                                           GetPositionText,
                                           0,
                                           '',
                                           '',
                                           TRUE);
    END;

    PROCEDURE New_DontSend@1000000001("WFlow To"@1000000006 : Code[20];"WFlow Type"@1000000005 : Code[20];"Record Number"@1000000004 : Code[250];"Action Text"@1000000008 : Text[100];Information@1000000003 : Text[250];GetPositionText@1000000002 : Text[250];"Amount Parameter"@1000000001 : Decimal;"Routing Parameter"@1000000000 : Code[100];"Attachment Path"@1000000009 : Text[250]) Code : Code[20];
    VAR
      BlankGuid@1000000007 : Text[40];
      lResponse@1000000010 : Code[20];
    BEGIN

      lResponse := WFlowMgt.CreateGroupWFlow("WFlow To",TRUE,"WFlow Type",
                                Information, GetPositionText,"Amount Parameter","Routing Parameter",'',
                                FALSE);
      WFlowMgt.GetAutoNavLogEntry(Logger);
      EXIT(lResponse);
    END;

    PROCEDURE SendExisting@1000000000(GroupCode@1000000000 : Code[10]) Code : Code[20];
    VAR
      GroupHeader@1000000001 : Record 9062265;
    BEGIN
      WFlowSetup.GET;
      IF NOT WFlowSetup."Enable Workflows" THEN
        EXIT(Logger.LogError('WFLOWIN', Logger.Type::Error, tWorkflowsDisabled, '!WFLOW_DISABLED'));

      IF NOT GroupHeader.GET(GroupCode) THEN
        EXIT(Logger.LogError('WFLOWIN', Logger.Type::Error, STRSUBSTNO(tUnknownGroupHeader, GroupCode), '!NO_GRPHEAD_FOUND'));

      IF WFlowMgt.SendGroupWFlow(GroupHeader,1) = 0 THEN
        EXIT('')
      ELSE
        EXIT(GroupCode);
    END;

    PROCEDURE AddLinkToSend@1000000002(GroupCode@1000000000 : Code[10];FilePath@1000000002 : Text[250];KeepAfterSending@1000000003 : Boolean);
    VAR
      GroupHeader@1000000001 : Record 9062265;
      WFlowType@1000000004 : Record 9062258;
      RecRef@1000000005 : RecordRef;
      RecLink@1000000006 : Record 2000000068;
      LinkID@1000000007 : Integer;
    BEGIN
      IF NOT GroupHeader.GET(GroupCode) THEN ERROR(Text0001,GroupCode);
      IF NOT GroupHeader."Email Record Links as Attach." THEN BEGIN
        GroupHeader."Email Record Links as Attach." := TRUE;
        GroupHeader.MODIFY;
      END;

      IF NOT WFlowType.GET(GroupHeader."Workflow No.") THEN ERROR(Text0002,GroupHeader."Workflow No.");
      RecRef.OPEN(WFlowType."Table ID");
      RecRef.SETPOSITION(GroupHeader."Get Position Text");
      LinkID := RecRef.ADDLINK(FilePath);

      RecLink.GET(LinkID);

      RecLink.MODIFY;
    END;

    PROCEDURE SetEmailHTMLParam@1000000003(GroupCode@1000000000 : Code[10];ParamNo@1000000002 : Integer;NewValue@1000000003 : Text[50]) OK : Boolean;
    VAR
      GroupHeader@1000000001 : Record 9062265;
    BEGIN
      IF NOT GroupHeader.GET(GroupCode) THEN ERROR(Text0001);
      CASE ParamNo OF
        1 : GroupHeader."Email HTML Param 1" := NewValue;
        2 : GroupHeader."Email HTML Param 2" := NewValue;
        3 : GroupHeader."Email HTML Param 3" := NewValue;
        4 : GroupHeader."Email HTML Param 4" := NewValue;
        5 : GroupHeader."Email HTML Param 5" := NewValue;
      END;
      GroupHeader.MODIFY;
    END;

    PROCEDURE SetParams@1000000006(TableID@1000000000 : Integer;PageID@1000000001 : Integer;FormID@1000000002 : Integer);
    BEGIN
      WFlowMgt.PreSetParams(TableID,PageID,FormID);
    END;

    PROCEDURE GetAutoNavLogEntry@1000000039(VAR pAutoNavLogEntry@1000000000 : Record 9062280);
    BEGIN
      //DOC NA2015.1 - Returning AutoNAV Log Entry variable
      //  <> pAutoNavLogEntry: Target variable

      pAutoNavLogEntry := Logger;
    END;

    PROCEDURE CancelWorkflow@1000000008(Code@1000000007 : Code[20];GetPositionText@1000000005 : Text[250]);
    BEGIN
      WFlowMgt.SetSkipWorkflowResponseTable(TRUE);
      WFlowMgt.CancelWorkflow(Code, GetPositionText);
      WFlowMgt.SetSkipWorkflowResponseTable(FALSE);
    END;

    PROCEDURE CancelWorkflows@1000000017(TableID@1000000000 : Integer;PositionText@1000000001 : Text[250]);
    BEGIN
      WFlowMgt.CancelWorkflows(TableID,PositionText, '');
    END;

    PROCEDURE CancelWorkflowsAndSetStatus@1000000052(pTableId@1000000001 : Integer;pPosition@1000000000 : Text[250];pWorkflowNo@1000000002 : Code[20]);
    BEGIN
      //DOC NA2015.1 - Cancelling all workflows for the given table ID and position and clering status for the given workflow
      //  -> pTableId: The table ID
      //  -> pPosition: Position
      //  -> pWorkflowNo: Workflow number

      WFlowMgt.CancelWorkflowsAndSetStatus(pTableId, pPosition, pWorkflowNo);
    END;

    PROCEDURE WorkflowIsEnabled@1000000010(WorkflowNo@1000000000 : Code[20]) : Boolean;
    VAR
      nAblementSetup@1000000002 : Record 9062229;
      Workflow@1000000001 : Record 9062258;
    BEGIN
      //Check if Workflow System is enabled
      IF NOT nAblementSetup.GET THEN EXIT(FALSE);
      IF NOT nAblementSetup."Enable Workflows" THEN EXIT(FALSE);

      //Check if this workflow is enabled
      IF NOT Workflow.GET(WorkflowNo) THEN EXIT(FALSE);
      IF NOT Workflow.Enabled THEN EXIT(FALSE);

      //Otherwise exit TRUE
      EXIT(TRUE);
    END;

    PROCEDURE RecordIsApproved@1000000045(Status@1000000000 : Code[20];WorkflowNo@1000000001 : Code[20]) Approved : Boolean;
    VAR
      WorkflowResp@1000000004 : Record 9062259;
    BEGIN
      //DOC PC NA2015.1 290113

      IF NOT WorkflowIsEnabled(WorkflowNo) THEN EXIT(TRUE);

      //Check if the Status is Positive
      WorkflowResp.SETRANGE("Workflow No.",WorkflowNo);
      WorkflowResp.SETRANGE("Field Value",Status);
      WorkflowResp.SETRANGE("Response Type",WorkflowResp."Response Type"::Positive);
      EXIT(WorkflowResp.FINDFIRST);
    END;

    PROCEDURE RecordIsMissingApproval@1000000007(TableNo@1000000000 : Integer;PositionText@1000000001 : Text[1024]) : Boolean;
    BEGIN
      EXIT(WFlowMgt.RecordIsMissingApproval(TableNo,PositionText));
    END;

    PROCEDURE TranslateWorkflowResponseCode@1000000005(WorkflowCode@1000000000 : Code[20];ResponseCode@1000000001 : Code[20];VAR Translation@1000000004 : Text) WorkflowWasCreated : Boolean;
    VAR
      Workflow@1000000002 : Record 9062258;
      WorkflowResponse@1000000003 : Record 9062259;
    BEGIN
      //DOC PC NA2015.4 29/01/2015 >>
      IF NOT Workflow.GET(WorkflowCode) THEN BEGIN
        Translation := response_WFLOW_NOT_FOUND;
        EXIT(FALSE);
      END;

      CASE ResponseCode OF
        '!ONE_WFLOW_ONLY' :
          BEGIN
            Translation := STRSUBSTNO(response_ONE_WFLOW_ONLY,Workflow.Description);
            EXIT(FALSE);
          END;
        '!NOTIF_ONLY' :
          BEGIN
            Translation := STRSUBSTNO(response_NOTIF_ONLY,Workflow.Description);
            EXIT(TRUE);
          END;
        '!TYPE_DISABLED' :
          BEGIN
            Translation := STRSUBSTNO(response_DISABLED,Workflow.Description);
            CASE Workflow."OnErr: WFlow Disabled" OF
              Workflow."OnErr: WFlow Disabled"::"Do Nothing" :
                BEGIN
                  Translation += response_WorkflowNotTriggered;
                  EXIT(FALSE);
                END;
              Workflow."OnErr: WFlow Disabled"::"Use Response" :
                BEGIN
                  WorkflowResponse.GET(Workflow."No.",Workflow."OnErr: No Recipients Resp.");
                  Translation += STRSUBSTNO(response_ResponseUsed,WorkflowResponse."Response Description");
                  EXIT(TRUE);
                END;
              Workflow."OnErr: WFlow Disabled"::Error: BEGIN
                Translation := '';
                EXIT(FALSE);
              END;
            END;
          END;
        '!NO_RECIPIENTS' :
          BEGIN
            Translation := STRSUBSTNO(response_NO_RECIPIENTS,Workflow.Description);
            CASE Workflow."OnErr: No Recipients" OF
              Workflow."OnErr: No Recipients"::"Do Nothing" :
                BEGIN
                  Translation += response_WorkflowNotTriggered;
                  EXIT(FALSE);
                END;
              Workflow."OnErr: No Recipients"::"Use Response":
                BEGIN
                  WorkflowResponse.GET(Workflow."No.",Workflow."OnErr: No Recipients Resp.");
                  Translation += STRSUBSTNO(response_ResponseUsed,WorkflowResponse."Response Description");
                  EXIT(TRUE);
                END;
              Workflow."OnErr: No Recipients"::Error:
                BEGIN
                  Translation := '';
                  EXIT(FALSE);
                END;
            END;
          END;
        ELSE BEGIN
          Translation := STRSUBSTNO(response_OK,Workflow.Description);
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE OpenRelatedJetReport@1000000066(GroupWorkflowNo@1000000001 : Code[20]) OK : Boolean;
    VAR
      EnhancedGroupWorkflow@1000000000 : Record 9062265;
      JetBlobInStream@1000000002 : InStream;
      ToFilename@1000000003 : Text;
    BEGIN
      //DOC NA2016.15 PC 11/05/2016  >>>
      IF EnhancedGroupWorkflow.GET(GroupWorkflowNo) THEN BEGIN
        IF EnhancedGroupWorkflow."Jet Report Status" <> EnhancedGroupWorkflow."Jet Report Status"::Generated THEN
          EXIT;
        EnhancedGroupWorkflow.CALCFIELDS("Jet Report BLOB");
        IF EnhancedGroupWorkflow."Jet Report BLOB".HASVALUE THEN BEGIN
          EnhancedGroupWorkflow."Jet Report BLOB".CREATEINSTREAM(JetBlobInStream);
          ToFilename := EnhancedGroupWorkflow."Jet Report Filename";
          EXIT(DOWNLOADFROMSTREAM(JetBlobInStream,'','','',ToFilename));
        END ELSE
          EXIT(FALSE);
      END ELSE
        EXIT(FALSE);
      //DOC NA2016.15 PC 11/05/2016  <<<
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 10/08/2012 - Migrated to 2013
      //DOC NA2015.1  IH 25/01/2013 - Amendments
      //DOC NA2015.1  PC 31/01/2013 - Renamed to Workflow Interface
      //DOC NA2015.1  PC 31/01/2013 - Move "RecordIsApproved" Function from Workflow Management to here
      //DOC NA2015.1  PC 31/01/2013 - Added CancelWorkflows function as Wrapper to Workflow Management version
      //DOC NA2015.1  JH 11/07/2013 - Workflows improvements and bugfixes
      //DOC NA2015.4  PC 29/01/2015 - Added function "TranslateWorkflowResponseCode"
      //DOC NA2015.6  PC 05/04/2015 - Changed Routing Parameter length to 100
      //DOC NA2016.10 JH 26/08/2015 - Upgraded to 2016
      //DOC NA2016.15 JH 18/04/2016 - CfMD amendments
      //DOC NA2016.15 PC 11/05/2016 - Added function "OpenRelatedJetReport"
    }
    END.
  }
}

