OBJECT Codeunit 9062704 Vendor Import
{
  OBJECT-PROPERTIES
  {
    Date=24/05/16;
    Time=12:00:00 PM;
    Version List=NH2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EnhancedRapidStartSetup@1000000008 : Record 9062844;
      ImportErrorLine@1000000001 : Record 9062842;
      ImportLog@1000000012 : Record 9062843;
      Vendor@1000000006 : Record 23;
      VendorBankAccount@1000000011 : Record 288;
      VendorImportWorksheetHdr@1000000004 : Record 9062835;
      VendorImportWorksheetLine@1000000002 : Record 9062836;
      ImportToolkit@1000000000 : Codeunit 9062701;
      ImportErrorManagement@1000000003 : Codeunit 9062708;
      ImportValidation@1000000005 : Codeunit 9062707;
      tDialogTitle@1000000009 : TextConst 'ENU=Importing vendors...;ENG=Importing vendors...';
      tAlreadyExists@1000000007 : TextConst 'ENU=%1 already exists.;ENG=%1 already exists.';
      TnpToolkit@1000000010 : Codeunit 9062230;

    LOCAL PROCEDURE "--- General ---"@1000000025();
    BEGIN
    END;

    PROCEDURE CheckBatch@1000000024(VAR pVendorImportWorksheetHdr@1000000000 : Record 9062835;pInteraction@1000000001 : Boolean) : Boolean;
    VAR
      lResult@1000000002 : Integer;
      eFinalMessageIfSuccess@1000000003 : TextConst 'ENU=All lines have been checked and they are OK.;ENG=All lines have been checked and they are OK.';
      eFinalMessageIfErrors@1000000004 : TextConst 'ENU=Lines checking resulted with errorrs. Please examine the lines for details.;ENG=Lines checking resulted with errorrs. Please examine the lines for details.';
      lMessage@1000000005 : Text;
      eFinalMessageIfWarnings@1000000006 : TextConst 'ENU=Lines checking resulted with warnings. You can still process the lines, but you can examine the lines for details before.;ENG=Lines checking resulted with warnings. You can still process the lines, but you can examine the lines for details before.';
    BEGIN
      VendorImportWorksheetHdr := pVendorImportWorksheetHdr;

      pInteraction := ((pInteraction) AND (GUIALLOWED()));

      lResult := CheckBatchInternal();
      IF (pInteraction) THEN
      BEGIN
        CASE (lResult) OF
          EnhancedRapidStartSetup."Check Result"::Warnings: lMessage := eFinalMessageIfWarnings;
          EnhancedRapidStartSetup."Check Result"::Errors: lMessage := eFinalMessageIfErrors;
          ELSE lMessage := eFinalMessageIfSuccess;
        END;
        MESSAGE(lMessage);
      END;

      pVendorImportWorksheetHdr := VendorImportWorksheetHdr;

      EXIT(TRUE);
    END;

    PROCEDURE ProcessBatch@1000000023(VAR pVendorImportWorksheetHdr@1000000000 : Record 9062835;pInteraction@1000000001 : Boolean) : Boolean;
    VAR
      eConfirmation@1000000002 : TextConst 'ENU=Do you want to process the worksheet?;ENG=Do you want to process the worksheet?';
      eFinalMessageIfSuccess@1000000003 : TextConst 'ENU=Processing has been finished with success.;ENG=Processing has been finished with success.';
      eFinalMessageIfFailure@1000000004 : TextConst 'ENU=Processing has been finished with errors. Please examine the lines for details.;ENG=Processing has been finished with errors. Please examine the lines for details.';
      lResult@1000000005 : Boolean;
    BEGIN
      VendorImportWorksheetHdr := pVendorImportWorksheetHdr;

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
          EXIT(FALSE);

      lResult := ProcessBatchInternal();

      IF (pInteraction) THEN
        MESSAGE(TnpToolkit.IIFText(lResult, eFinalMessageIfSuccess, eFinalMessageIfFailure));

      pVendorImportWorksheetHdr := VendorImportWorksheetHdr;

      EXIT(TRUE);
    END;

    PROCEDURE DeleteAllVendors@1000000034(VAR pVendorImportWorksheetHdr@1000000002 : Record 9062835;pInteraction@1000000003 : Boolean) : Boolean;
    VAR
      Vendor@1000000000 : Record 23;
      Dlg@1000000001 : Dialog;
      eConfirmation@1000000006 : TextConst 'ENU=Do you want to delete all vendors?;ENG=Do you want to delete all vendors?';
      eConfirmation2@1000000005 : TextConst 'ENU=Are you absolutely SURE you want to delete all vendors?;ENG=Are you absolutely SURE you want to delete all vendors?';
      eFinalMessage@1000000004 : TextConst 'ENU=All vendors have been deleted.;ENG=All vendors have been deleted.';
    BEGIN
      VendorImportWorksheetHdr := pVendorImportWorksheetHdr;

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
      BEGIN
        IF ( NOT (CONFIRM(eConfirmation, FALSE))) THEN
          EXIT(FALSE);
        IF ( NOT (CONFIRM(eConfirmation2, FALSE))) THEN
          EXIT(FALSE);
      END;

      Vendor.RESET();
      Vendor.DELETEALL(TRUE);

      IF (pInteraction) THEN
        MESSAGE(eFinalMessage);

      pVendorImportWorksheetHdr := VendorImportWorksheetHdr;
      EXIT(TRUE);
    END;

    PROCEDURE UndoInserts@1000000042(VAR pVendorImportWorksheetHdr@1000000000 : Record 9062835;pInteraction@1000000001 : Boolean) : Boolean;
    VAR
      eConfirmation@1000000002 : TextConst 'ENU=Do you want to delete created records?;ENG=Do you want to delete created records?';
      eFinalMessage@1000000003 : TextConst 'ENU=All created records have been deleted.;ENG=All created records have been deleted.';
    BEGIN
      VendorImportWorksheetHdr := pVendorImportWorksheetHdr;

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF NOT CONFIRM(eConfirmation, FALSE) THEN
          EXIT;

      ImportLog.RESET();
      ImportLog.SETCURRENTKEY("Import Header Table ID", "Batch No");
      ImportLog.SETRANGE("Import Header Table ID", DATABASE::"Vendor Import Worksheet Hdr.");
      ImportLog.SETRANGE("Batch No", VendorImportWorksheetHdr."Batch No.");
      ImportToolkit.ReverseLogEntry(ImportLog);

      VendorImportWorksheetLine.RESET();
      VendorImportWorksheetLine.SETRANGE("Batch No.", VendorImportWorksheetHdr."Batch No.");
      VendorImportWorksheetLine.MODIFYALL(Status, VendorImportWorksheetLine.Status::Loaded, TRUE);
      VendorImportWorksheetHdr.GET(VendorImportWorksheetHdr."Batch No.");

      IF (pInteraction) THEN
        MESSAGE(eFinalMessage);

      pVendorImportWorksheetHdr := VendorImportWorksheetHdr;
    END;

    PROCEDURE CreateImportTemplate@1000000047();
    VAR
      lField@1000000000 : Record 2000000041;
    BEGIN
      VendorImportWorksheetLine.FilterSimpleFields(lField);
      ImportToolkit.CreateImportTemplateAdv(DATABASE::"Vendor Import Worksheet Line", DATABASE::"Vendor Import Worksheet Line", lField, TRUE);
    END;

    PROCEDURE ResetAllLines@1000000037(VAR pVendorImportWorksheetHdr@1000000000 : Record 9062835;pInteraction@1000000001 : Boolean) : Boolean;
    VAR
      eConfirmation@1000000002 : TextConst 'ENU=Do you want to reset status of all lines?;ENG=Do you want to reset status of all lines?';
    BEGIN
      VendorImportWorksheetHdr := pVendorImportWorksheetHdr;

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, FALSE))) THEN
          EXIT(FALSE);

      VendorImportWorksheetLine.RESET();
      VendorImportWorksheetLine.SETRANGE("Batch No.", VendorImportWorksheetHdr."Batch No.");
      IF (VendorImportWorksheetLine.FINDSET(TRUE)) THEN
      REPEAT
        VendorImportWorksheetLine.SetSystemActivity(TRUE);
        VendorImportWorksheetLine.VALIDATE(Status, VendorImportWorksheetLine.Status::Loaded);
        VendorImportWorksheetLine.MODIFY(TRUE);
        VendorImportWorksheetLine.SetSystemActivity(FALSE);
        ImportErrorManagement.DeleteErrorsAndWarnings(DATABASE::"Vendor Import Worksheet Line", VendorImportWorksheetLine.GETPOSITION(FALSE));
      UNTIL (VendorImportWorksheetLine.NEXT() = 0);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "--- Internal ---"@1000000026();
    BEGIN
    END;

    LOCAL PROCEDURE CheckBatchInternal@1000000009() : Integer;
    VAR
      lResult@1000000001 : Integer;
    BEGIN
      EnhancedRapidStartSetup.VerifyAndGet();
      ImportToolkit.InitaliseDialog(tDialogTitle);
      ImportToolkit.SetDialogCheckingActivity();

      VendorImportWorksheetLine.RESET;
      VendorImportWorksheetLine.SETRANGE("Batch No.", VendorImportWorksheetHdr."Batch No.");
      VendorImportWorksheetLine.SETFILTER(Status, '%1|%2|%3|%4', VendorImportWorksheetLine.Status::" ", VendorImportWorksheetLine.Status::Loaded,
        VendorImportWorksheetLine.Status::Warning, VendorImportWorksheetLine.Status::Error);
      ImportToolkit.SetDialogCount(VendorImportWorksheetLine.COUNT());
      IF VendorImportWorksheetLine.FINDSET THEN
      REPEAT
        ImportToolkit.SetDialogCurrent(VendorImportWorksheetLine."No.");
        CheckLine(lResult);
      UNTIL VendorImportWorksheetLine.NEXT=0;

      ImportToolkit.FinaliseDialog();

      EXIT(lResult);
    END;

    LOCAL PROCEDURE CheckLine@1000000003(VAR pResult@1000000003 : Integer);
    VAR
      lVendorImportWorksheetLine@1000000000 : Record 9062836;
      lStatus@1000000001 : Integer;
      lModify@1000000002 : Boolean;
    BEGIN
      ImportErrorManagement.DeleteErrorsAndWarnings(DATABASE::"Vendor Import Worksheet Line", VendorImportWorksheetLine."Postion Text");
      ImportValidation.SetRecord(DATABASE::"Vendor Import Worksheet Hdr.", VendorImportWorksheetLine, VendorImportWorksheetLine.FIELDNO("Batch No."),
        VendorImportWorksheetHdr."Configuration Template Code");

      ImportValidation.CheckIfFieldNotEmpty(VendorImportWorksheetLine.FIELDNO("No."), Vendor.FIELDNO("No."), FALSE);
      ImportValidation.CheckIfFieldNotEmpty(VendorImportWorksheetLine.FIELDNO(Name), Vendor.FIELDNO(Name), FALSE);

      CheckVendor();
      CheckVatRegistrationNo(lModify);
      CheckBankAccount();

      CheckGenBusPostingGroup(VendorImportWorksheetLine."Gen. Bus. Posting Group", lModify);
      CheckVatBusPostingGroup(VendorImportWorksheetLine."VAT Bus. Posting Group", lModify);
      CheckVendorPostingGroup(VendorImportWorksheetLine."Vendor Posting Group", lModify);
      CheckPaymentMethod(VendorImportWorksheetLine."Payment Method Code", lModify);
      CheckPaymentTerms(VendorImportWorksheetLine."Payment Terms Code", lModify);
      CheckSalespersonPurchaser(VendorImportWorksheetLine."Purchaser Code", lModify);
      CheckCountryRegion(VendorImportWorksheetLine."Country/Region Code", lModify);
      CheckCurrency(VendorImportWorksheetLine."Currency Code", lModify);
      CheckLanguage(VendorImportWorksheetLine."Language Code", lModify);
      CheckShipmentMethod(VendorImportWorksheetLine."Shipment Method Code", lModify);
      CheckShippingAgent(VendorImportWorksheetLine."Shipping Agent Code", lModify);

      ImportValidation.CheckDimensionValue(1, VendorImportWorksheetLine."Global Dimension 1 Code", VendorImportWorksheetHdr."Create Dimension Values");
      ImportValidation.CheckDimensionValue(2, VendorImportWorksheetLine."Global Dimension 2 Code", VendorImportWorksheetHdr."Create Dimension Values");
      ImportValidation.CheckDimensionValue(3, VendorImportWorksheetLine."Shortcut Dimension 3 Code", VendorImportWorksheetHdr."Create Dimension Values");
      ImportValidation.CheckDimensionValue(4, VendorImportWorksheetLine."Shortcut Dimension 4 Code", VendorImportWorksheetHdr."Create Dimension Values");
      ImportValidation.CheckDimensionValue(5, VendorImportWorksheetLine."Shortcut Dimension 5 Code", VendorImportWorksheetHdr."Create Dimension Values");
      ImportValidation.CheckDimensionValue(6, VendorImportWorksheetLine."Shortcut Dimension 6 Code", VendorImportWorksheetHdr."Create Dimension Values");
      ImportValidation.CheckDimensionValue(7, VendorImportWorksheetLine."Shortcut Dimension 7 Code", VendorImportWorksheetHdr."Create Dimension Values");
      ImportValidation.CheckDimensionValue(8, VendorImportWorksheetLine."Shortcut Dimension 8 Code", VendorImportWorksheetHdr."Create Dimension Values");

      ImportValidation.CheckWorkflows(DATABASE::Vendor);

      IF (lModify) THEN
        VendorImportWorksheetLine.MODIFY(TRUE);

      lVendorImportWorksheetLine.GET(VendorImportWorksheetLine."Batch No.", VendorImportWorksheetLine."No.");
      lVendorImportWorksheetLine.CALCFIELDS("No. of Errors", "No. of Warnings");
      IF (lVendorImportWorksheetLine."No. of Errors" > 0) THEN
        lStatus := lVendorImportWorksheetLine.Status::Error
      ELSE IF (lVendorImportWorksheetLine."No. of Warnings" > 0) THEN
        lStatus := lVendorImportWorksheetLine.Status::Warning
      ELSE
        lStatus := lVendorImportWorksheetLine.Status::Ready;
      lVendorImportWorksheetLine.SetSystemActivity(TRUE);
      lVendorImportWorksheetLine.VALIDATE(Status, lStatus);
      lVendorImportWorksheetLine.MODIFY(TRUE);
      lVendorImportWorksheetLine.SetSystemActivity(FALSE);

      CASE (lVendorImportWorksheetLine.Status) OF
        lVendorImportWorksheetLine.Status::Error:
          pResult := EnhancedRapidStartSetup."Check Result"::Errors;
        lVendorImportWorksheetLine.Status::Warning:
          IF (pResult <> EnhancedRapidStartSetup."Check Result"::Errors) THEN
            pResult := EnhancedRapidStartSetup."Check Result"::Warnings;
      END;
    END;

    LOCAL PROCEDURE ProcessBatchInternal@1000000000() : Boolean;
    VAR
      lVendorImportWorksheetLine@1000000003 : Record 9062836;
      lProcessingResult@1000000002 : Boolean;
      lStatus@1000000001 : Integer;
      lVendorInserted@1000000004 : Boolean;
      eErrorsDetected@1000000005 : TextConst 'ENU=Some lines checking resulted in errors. Please correct them before processing.;ENG=Some lines checking resulted in errors. Please correct them before processing.';
      lResult@1000000006 : Boolean;
      lErrorMessage@1000000007 : Text;
    BEGIN
      EnhancedRapidStartSetup.VerifyAndGet();

      VendorImportWorksheetLine.RESET;
      VendorImportWorksheetLine.SETRANGE("Batch No.", VendorImportWorksheetHdr."Batch No.");
      VendorImportWorksheetLine.SETFILTER(Status, '%1|%2|%3', VendorImportWorksheetLine.Status::" ", VendorImportWorksheetLine.Status::Loaded, VendorImportWorksheetLine.Status::Error);
      IF NOT VendorImportWorksheetLine.ISEMPTY THEN
      BEGIN
        CheckBatchInternal();
        COMMIT;
      END;

      VendorImportWorksheetLine.RESET();
      VendorImportWorksheetLine.SETRANGE("Batch No.", VendorImportWorksheetHdr."Batch No.");
      VendorImportWorksheetLine.SETRANGE(Status, VendorImportWorksheetLine.Status::Error);
      VendorImportWorksheetLine.SETFILTER("No. of Errors", '<>0');
      IF ( NOT (VendorImportWorksheetLine.ISEMPTY())) THEN
        ERROR(eErrorsDetected);

      ImportToolkit.InitaliseDialog(tDialogTitle);
      ImportToolkit.SetDialogProcessingActivity();

      lResult := TRUE;
      VendorImportWorksheetLine.RESET;
      VendorImportWorksheetLine.SETRANGE(VendorImportWorksheetLine."Batch No.", VendorImportWorksheetHdr."Batch No.");
      VendorImportWorksheetLine.SETFILTER(Status, '%1|%2', VendorImportWorksheetLine.Status::Ready, VendorImportWorksheetLine.Status::Warning);
      ImportToolkit.SetDialogCount(VendorImportWorksheetLine.COUNT());
      IF VendorImportWorksheetLine.FINDSET THEN BEGIN
        REPEAT
          ImportToolkit.SetDialogCurrent(VendorImportWorksheetLine."No.");
          ImportErrorManagement.DeleteErrors(DATABASE::"Vendor Import Worksheet Line", VendorImportWorksheetLine.GETPOSITION(FALSE));

          CLEARLASTERROR();
          lProcessingResult := ProcessLine(lVendorInserted);
          IF ( NOT (lProcessingResult)) THEN
          BEGIN
            lErrorMessage := GETLASTERRORTEXT();
            IF (lVendorInserted) THEN
              IF ( NOT (Vendor.DELETE(TRUE))) THEN
                lErrorMessage := lErrorMessage + '; ' + GETLASTERRORTEXT();
            CreateError(lErrorMessage);
            lResult := FALSE;
          END;

          lStatus := TnpToolkit.IIFInteger(lProcessingResult, lVendorImportWorksheetLine.Status::Processed, lVendorImportWorksheetLine.Status::Error);
          lVendorImportWorksheetLine.GET(VendorImportWorksheetLine."Batch No.", VendorImportWorksheetLine."No.");
          lVendorImportWorksheetLine.SetSystemActivity(TRUE);
          lVendorImportWorksheetLine.VALIDATE(Status, lStatus);
          lVendorImportWorksheetLine.MODIFY(TRUE);
          lVendorImportWorksheetLine.SetSystemActivity(FALSE);

          IF (lVendorImportWorksheetLine.Status = lVendorImportWorksheetLine.Status::Processed) THEN
            ImportErrorManagement.DeleteErrorsAndWarnings(DATABASE::"Vendor Import Worksheet Line", lVendorImportWorksheetLine.GETPOSITION(FALSE));
        UNTIL VendorImportWorksheetLine.NEXT=0;
      END;

      ImportToolkit.FinaliseDialog();
      EXIT(lResult);
    END;

    [TryFunction]
    LOCAL PROCEDURE ProcessLine@1000000001(VAR pVendorInserted@1000000000 : Boolean);
    BEGIN
      ImportValidation.SetRecord(DATABASE::"Vendor Import Worksheet Hdr.", VendorImportWorksheetLine, VendorImportWorksheetLine.FIELDNO("Batch No."),
        VendorImportWorksheetHdr."Configuration Template Code");

      UpdateVendor(pVendorInserted);
      UpdateVendorBankAccount();

      UpdateDefaultDimension(Vendor, 1, VendorImportWorksheetLine."Global Dimension 1 Code");
      UpdateDefaultDimension(Vendor, 2, VendorImportWorksheetLine."Global Dimension 2 Code");
      UpdateDefaultDimension(Vendor, 3, VendorImportWorksheetLine."Shortcut Dimension 3 Code");
      UpdateDefaultDimension(Vendor, 4, VendorImportWorksheetLine."Shortcut Dimension 4 Code");
      UpdateDefaultDimension(Vendor, 5, VendorImportWorksheetLine."Shortcut Dimension 5 Code");
      UpdateDefaultDimension(Vendor, 6, VendorImportWorksheetLine."Shortcut Dimension 6 Code");
      UpdateDefaultDimension(Vendor, 7, VendorImportWorksheetLine."Shortcut Dimension 7 Code");
      UpdateDefaultDimension(Vendor, 8, VendorImportWorksheetLine."Shortcut Dimension 8 Code");

      ImportToolkit.CreateLogEntry(Vendor,VendorImportWorksheetLine."Batch No.",DATABASE::"Vendor Import Worksheet Hdr.",VendorImportWorksheetLine);
    END;

    LOCAL PROCEDURE "--- Checking ---"@1000000017();
    BEGIN
    END;

    LOCAL PROCEDURE CheckVendor@1000000050();
    BEGIN
      IF Vendor.GET(VendorImportWorksheetLine."No.") THEN
        CreateWarning(STRSUBSTNO(tAlreadyExists, Vendor.TABLECAPTION));
    END;

    LOCAL PROCEDURE CheckBankAccount@1000000014();
    BEGIN
      IF ((VendorImportWorksheetLine."Bank Account Code" = '') AND (VendorImportWorksheetLine."Bank Name" = '') AND
          (VendorImportWorksheetLine."Bank Branch No." = '') AND (VendorImportWorksheetLine."Bank Account No." = '')) THEN
        EXIT;

      IF VendorBankAccount.GET(VendorImportWorksheetLine."No.", VendorImportWorksheetLine."Bank Account Code") THEN
        CreateWarning(STRSUBSTNO(tAlreadyExists, VendorBankAccount.TABLECAPTION));

      ImportValidation.CheckIfFieldNotEmpty(VendorImportWorksheetLine.FIELDNO("Bank Account Code"), VendorBankAccount.FIELDNO(Code), TRUE);
      ImportValidation.CheckIfFieldNotEmpty(VendorImportWorksheetLine.FIELDNO("Bank Name"), VendorBankAccount.FIELDNO(Name), TRUE);
      ImportValidation.CheckIfFieldNotEmpty(VendorImportWorksheetLine.FIELDNO("Bank Branch No."), VendorBankAccount.FIELDNO("Bank Branch No."), FALSE);
      ImportValidation.CheckIfFieldNotEmpty(VendorImportWorksheetLine.FIELDNO("Bank Account No."), VendorBankAccount.FIELDNO("Bank Account No."), FALSE);
      ImportValidation.CheckIfFieldNotEmpty(VendorImportWorksheetLine.FIELDNO("Bank Account IBAN"), VendorBankAccount.FIELDNO(IBAN), TRUE);
      ImportValidation.CheckIfFieldNotEmpty(VendorImportWorksheetLine.FIELDNO("Bank Account SWIFT Code"), VendorBankAccount.FIELDNO("SWIFT Code"), TRUE);
    END;

    LOCAL PROCEDURE CheckVatRegistrationNo@1000000036(VAR pModify@1000000005 : Boolean);
    VAR
      eVatRegNoUsedForMultiple@1000000004 : TextConst 'ENU=VAT Registration No. "%1" is used for multiple %2.;ENG=VAT Registration No. "%1" is used for multiple %2.';
      eImportLines@1000000003 : TextConst 'ENU=import lines;ENG=import lines';
      eVendors@1000000002 : TextConst 'ENU=vendors;ENG=vendors';
      lVatRegistrationNo@1000000000 : Text;
      lModify@1000000001 : Boolean;
    BEGIN
      lVatRegistrationNo := DELCHR(VendorImportWorksheetLine."VAT Registration No.", '<>', ' ');
      IF (VendorImportWorksheetLine."VAT Registration No." <> lVatRegistrationNo) THEN
      BEGIN
        VendorImportWorksheetLine."VAT Registration No." := lVatRegistrationNo;
        pModify := TRUE;
      END;
      IF (VendorImportWorksheetLine."VAT Registration No." = '') THEN
        EXIT;
      VendorImportWorksheetLine.SETFILTER("No. Filter", '<>%1', VendorImportWorksheetLine."No.");
      VendorImportWorksheetLine.CALCFIELDS("No. of Import VAT Reg. Nos.", "No. of Vendor VAT Reg. Nos.");
      IF (VendorImportWorksheetLine."No. of Import VAT Reg. Nos." > 0) THEN
        CreateError(STRSUBSTNO(eVatRegNoUsedForMultiple, VendorImportWorksheetLine."VAT Registration No.", eImportLines));
      IF (VendorImportWorksheetLine."No. of Vendor VAT Reg. Nos." > 0) THEN
        CreateError(STRSUBSTNO(eVatRegNoUsedForMultiple, VendorImportWorksheetLine."VAT Registration No.", eVendors));
      VendorImportWorksheetLine.SETRANGE("No. Filter");
    END;

    LOCAL PROCEDURE CheckGenBusPostingGroup@1000000040(VAR pCode@1000000001 : Code[10];VAR pModify@1000000000 : Boolean);
    VAR
      lDefaultCode@1000000002 : Code[10];
    BEGIN
      lDefaultCode := ImportToolkit.GetGenBusPostGrpFromCountry(VendorImportWorksheetLine."Country/Region Code");
      ImportValidation.CheckCodeFieldWithRelationAdv(pCode, lDefaultCode,
        TRUE, VendorImportWorksheetHdr."Create Gen. Bus. Post. Groups",
        VendorImportWorksheetLine.FIELDCAPTION("Gen. Bus. Posting Group"), Vendor.FIELDNO("Gen. Bus. Posting Group"),
        DATABASE::"Gen. Business Posting Group", ImportErrorLine.Type::Warning, pModify);
    END;

    LOCAL PROCEDURE CheckVatBusPostingGroup@1000000021(VAR pCode@1000000001 : Code[10];VAR pModify@1000000000 : Boolean);
    VAR
      VATBusinessPostingGroup@1000000005 : Record 323;
      Lvbpg@1000000004 : Code[10];
      ConfigTemplateLine@1000000003 : Record 8619;
      CustomerImportHeader@1000000002 : Record 9062837;
    BEGIN
      ImportValidation.CheckCodeFieldWithRelationAdv(pCode, EnhancedRapidStartSetup."Def. Vendor VAT Bus. P. G.",
        TRUE, VendorImportWorksheetHdr."Create VAT Bus. Post. Groups",
        VendorImportWorksheetLine.FIELDCAPTION("VAT Bus. Posting Group"), Vendor.FIELDNO("VAT Bus. Posting Group"),
        DATABASE::"VAT Business Posting Group", ImportErrorLine.Type::Warning, pModify);
    END;

    LOCAL PROCEDURE CheckVendorPostingGroup@1000000019(VAR pCode@1000000000 : Code[10];VAR pModify@1000000001 : Boolean);
    BEGIN
      ImportValidation.CheckCodeFieldWithRelationAdv(pCode, EnhancedRapidStartSetup."Def. Vendor Posting Group",
        TRUE, VendorImportWorksheetHdr."Create Vendor Posting Groups",
        VendorImportWorksheetLine.FIELDCAPTION("Vendor Posting Group"), Vendor.FIELDNO("Vendor Posting Group"),
        DATABASE::"Vendor Posting Group", ImportErrorLine.Type::Warning, pModify);
    END;

    LOCAL PROCEDURE CheckPaymentMethod@1000000052(VAR pCode@1000000001 : Code[10];VAR pModify@1000000000 : Boolean);
    BEGIN
      ImportValidation.CheckCodeFieldWithRelation(pCode, TRUE, VendorImportWorksheetHdr."Create Payment Methods",
        VendorImportWorksheetLine.FIELDCAPTION("Payment Method Code"), Vendor.FIELDNO("Payment Method Code"),
        DATABASE::"Payment Method", ImportErrorLine.Type::Warning, pModify);
    END;

    LOCAL PROCEDURE CheckPaymentTerms@1000000051(VAR pCode@1000000001 : Code[10];VAR pModify@1000000000 : Boolean);
    BEGIN
      ImportValidation.CheckCodeFieldWithRelation(pCode, TRUE, VendorImportWorksheetHdr."Create Payment Terms",
        VendorImportWorksheetLine.FIELDCAPTION("Payment Terms Code"), Vendor.FIELDNO("Payment Terms Code"),
        DATABASE::"Payment Terms", ImportErrorLine.Type::Warning, pModify);
    END;

    LOCAL PROCEDURE CheckSalespersonPurchaser@1000000010(VAR pCode@1000000001 : Code[10];VAR pModify@1000000000 : Boolean);
    BEGIN
      ImportValidation.CheckCodeFieldWithRelation(pCode, FALSE, VendorImportWorksheetHdr."Create Purchasers",
        VendorImportWorksheetLine.FIELDCAPTION("Purchaser Code"), Vendor.FIELDNO("Purchaser Code"),
        DATABASE::"Salesperson/Purchaser", ImportErrorLine.Type::" ", pModify);
    END;

    LOCAL PROCEDURE CheckShipmentMethod@1000000048(VAR pCode@1000000001 : Code[10];VAR pModify@1000000000 : Boolean);
    VAR
      lShipmentMethod@1000000004 : Code[10];
      ConfigTemplateLine@1000000003 : Record 8619;
      CustomerImportHeader@1000000002 : Record 9062837;
    BEGIN
      ImportValidation.CheckCodeFieldWithRelation(pCode, FALSE, VendorImportWorksheetHdr."Create Shipment Methods",
        VendorImportWorksheetLine.FIELDCAPTION("Shipment Method Code"), Vendor.FIELDNO("Shipment Method Code"),
        DATABASE::"Shipment Method", ImportErrorLine.Type::" ", pModify);
    END;

    LOCAL PROCEDURE CheckShippingAgent@1000000046(VAR pCode@1000000001 : Code[10];VAR pModify@1000000000 : Boolean);
    BEGIN
      ImportValidation.CheckCodeFieldWithRelation(pCode, FALSE, VendorImportWorksheetHdr."Create Shipping Agents",
        VendorImportWorksheetLine.FIELDCAPTION("Shipping Agent Code"), Vendor.FIELDNO("Shipping Agent Code"),
        DATABASE::"Shipping Agent", ImportErrorLine.Type::" ", pModify);
    END;

    LOCAL PROCEDURE CheckCountryRegion@1000000045(VAR pCode@1000000001 : Code[10];VAR pModify@1000000000 : Boolean);
    BEGIN
      ImportValidation.CheckCodeFieldWithRelation(pCode, FALSE, VendorImportWorksheetHdr."Create Countries/Regions",
        VendorImportWorksheetLine.FIELDCAPTION("Country/Region Code"), Vendor.FIELDNO("Country/Region Code"),
        DATABASE::"Country/Region", ImportErrorLine.Type::" ", pModify);
    END;

    LOCAL PROCEDURE CheckCurrency@1000000044(VAR pCode@1000000001 : Code[10];VAR pModify@1000000000 : Boolean);
    BEGIN
      ImportValidation.CheckCodeFieldWithRelation(pCode, FALSE, VendorImportWorksheetHdr."Create Currencies",
        VendorImportWorksheetLine.FIELDCAPTION("Currency Code"), Vendor.FIELDNO("Currency Code"),
        DATABASE::Currency, ImportErrorLine.Type::" ", pModify);
    END;

    LOCAL PROCEDURE CheckLanguage@1000000041(VAR pCode@1000000001 : Code[10];VAR pModify@1000000000 : Boolean);
    BEGIN
      ImportValidation.CheckCodeFieldWithRelation(pCode, FALSE, VendorImportWorksheetHdr."Create Languages",
        VendorImportWorksheetLine.FIELDCAPTION("Language Code"), Vendor.FIELDNO("Language Code"),
        DATABASE::Language, ImportErrorLine.Type::" ", pModify);
    END;

    LOCAL PROCEDURE "--- Updating ---"@1000000022();
    BEGIN
    END;

    LOCAL PROCEDURE UpdateVendor@1000000006(VAR pVendorInserted@1000000000 : Boolean);
    VAR
      lVendorVariant@1000000001 : Variant;
    BEGIN
      pVendorInserted := InsertVendor();

      Vendor.VALIDATE(Name, VendorImportWorksheetLine.Name);
      Vendor.VALIDATE("Name 2", VendorImportWorksheetLine."Name 2");
      Vendor.VALIDATE(Address, VendorImportWorksheetLine.Address);
      Vendor.VALIDATE("Address 2", VendorImportWorksheetLine."Address 2");
      Vendor.VALIDATE(City, VendorImportWorksheetLine.City);
      Vendor.VALIDATE(County, VendorImportWorksheetLine.County);
      Vendor.VALIDATE("Post Code", VendorImportWorksheetLine."Post Code");
      Vendor.VALIDATE("Country/Region Code", ProcessCountryRegion(VendorImportWorksheetLine."Country/Region Code"));
      Vendor.VALIDATE("Currency Code", ProcessCurrency(VendorImportWorksheetLine."Currency Code"));
      Vendor.VALIDATE("Language Code", ProcessLanguage(VendorImportWorksheetLine."Language Code"));
      Vendor.VALIDATE("Phone No.", VendorImportWorksheetLine."Phone No.");
      Vendor.VALIDATE("Fax No.", VendorImportWorksheetLine."Fax No.");
      Vendor.VALIDATE("E-Mail", VendorImportWorksheetLine."E-Mail");
      Vendor.VALIDATE("Home Page", VendorImportWorksheetLine."Home Page");
      Vendor.VALIDATE("Our Account No.", VendorImportWorksheetLine."Our Account No.");
      Vendor.VALIDATE("Prices Including VAT", VendorImportWorksheetLine."Prices Including VAT");
      Vendor.VALIDATE("Gen. Bus. Posting Group", ProcessGenBusPostingGroup(VendorImportWorksheetLine."Gen. Bus. Posting Group"));
      Vendor.VALIDATE("VAT Bus. Posting Group", ProcessVatBusPostingGroup(VendorImportWorksheetLine."VAT Bus. Posting Group"));
      Vendor.VALIDATE("Vendor Posting Group", ProcessVendorPostingGroup(VendorImportWorksheetLine."Vendor Posting Group"));
      Vendor.VALIDATE("Payment Method Code", ProcessPaymentMethod(VendorImportWorksheetLine."Payment Method Code"));
      Vendor.VALIDATE("Payment Terms Code", ProcessPaymentTerms(VendorImportWorksheetLine."Payment Terms Code"));
      Vendor.VALIDATE("Purchaser Code", ProcessSalespersonPurchaser(VendorImportWorksheetLine."Purchaser Code"));
      Vendor.VALIDATE("Shipment Method Code", ProcessShipmentMethod(VendorImportWorksheetLine."Shipment Method Code"));
      Vendor.VALIDATE("Shipping Agent Code", ProcessShippingAgent(VendorImportWorksheetLine."Shipping Agent Code"));
      Vendor.VALIDATE("Global Dimension 1 Code", ProcessDimensionValue(1, VendorImportWorksheetLine."Global Dimension 1 Code"));
      Vendor.VALIDATE("Global Dimension 2 Code", ProcessDimensionValue(2, VendorImportWorksheetLine."Global Dimension 2 Code"));
      Vendor.MODIFY(TRUE);

      lVendorVariant := Vendor;
      ImportToolkit.TransferEnhancedFields(VendorImportWorksheetLine, lVendorVariant);
      Vendor := lVendorVariant;
    END;

    LOCAL PROCEDURE InsertVendor@1000000029() : Boolean;
    VAR
      lRecordRef@1000000001 : RecordRef;
      lResult@1000000000 : Boolean;
    BEGIN
      lResult := FALSE;

      IF ( NOT (Vendor.GET(VendorImportWorksheetLine."No."))) THEN
      BEGIN
        CLEAR(Vendor);
        Vendor.INIT();
        Vendor.VALIDATE("No.", VendorImportWorksheetLine."No.");
        Vendor.INSERT(TRUE);
        lRecordRef.GETTABLE(Vendor);
        IF (ImportToolkit.ApplyConfigTemplate(VendorImportWorksheetHdr."Configuration Template Code", lRecordRef)) THEN
        BEGIN
          lRecordRef.SETTABLE(Vendor);
          Vendor.MODIFY(TRUE);
        END;
        CreateLogEntry(Vendor);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE UpdateVendorBankAccount@1000000007();
    VAR
      lVendorBankAccountInserted@1000000002 : Boolean;
      eAccountCode@1000000000 : TextConst 'ENU=BANKACC000;ENG=BANKACC000';
      lAccountCode@1000000001 : Code[10];
      lAccountCodeLoop@1000000003 : Boolean;
      lPreviousAccountCode@1000000004 : Code[10];
      eCantCreateAccountCode@1000000005 : TextConst 'ENU="Can''t create bank account code automatically; please provide it in ""%1"" field.";ENG="Can''t create bank account code automatically; please provide it in ""%1"" field."';
    BEGIN
      IF ((VendorImportWorksheetLine."Bank Account Code" = '') AND (VendorImportWorksheetLine."Bank Name" = '') AND
          (VendorImportWorksheetLine."Bank Branch No." = '') AND (VendorImportWorksheetLine."Bank Account No." = '')) THEN
        EXIT;

      IF (VendorImportWorksheetLine."Bank Account Code" = '') THEN
      BEGIN
        lAccountCode := eAccountCode;
        lAccountCodeLoop := TRUE;
        WHILE (lAccountCodeLoop) DO
        BEGIN
          lPreviousAccountCode := lAccountCode;
          lAccountCode := INCSTR(lAccountCode);
          IF (lAccountCode = lPreviousAccountCode) THEN
            ERROR(eCantCreateAccountCode, VendorImportWorksheetLine.FIELDCAPTION("Bank Account Code"));
          lAccountCodeLoop := VendorBankAccount.GET(VendorImportWorksheetLine."No.", lAccountCode);
        END;
        VendorImportWorksheetLine."Bank Account Code" := lAccountCode;
      END;

      lVendorBankAccountInserted := InsertVendorBankAccount();

      VendorBankAccount.VALIDATE(Name, VendorImportWorksheetLine."Bank Name");
      VendorBankAccount.VALIDATE("Name 2", VendorImportWorksheetLine."Bank Name 2");
      VendorBankAccount.VALIDATE(Address, VendorImportWorksheetLine."Bank Address");
      VendorBankAccount.VALIDATE("Address 2", VendorImportWorksheetLine."Bank Address 2");
      VendorBankAccount.VALIDATE(City, VendorImportWorksheetLine."Bank City");
      VendorBankAccount.VALIDATE(County, VendorImportWorksheetLine."Bank County");
      VendorBankAccount.VALIDATE("Post Code", VendorImportWorksheetLine."Bank Post Code");
      VendorBankAccount.VALIDATE("Country/Region Code", VendorImportWorksheetLine."Bank Country/Region Code");
      VendorBankAccount.VALIDATE(Contact, VendorImportWorksheetLine."Bank Contact");
      VendorBankAccount.VALIDATE("Phone No.", VendorImportWorksheetLine."Bank Phone No.");
      VendorBankAccount.VALIDATE("Fax No.", VendorImportWorksheetLine."Bank Fax No.");
      VendorBankAccount.VALIDATE("E-Mail", VendorImportWorksheetLine."Bank E-Mail");
      VendorBankAccount.VALIDATE("Home Page", VendorImportWorksheetLine."Bank Home Page");
      VendorBankAccount.VALIDATE("Currency Code", VendorImportWorksheetLine."Bank Account Currency Code");
      VendorBankAccount.VALIDATE("Language Code", VendorImportWorksheetLine."Bank Account Language Code");
      VendorBankAccount.VALIDATE("Bank Branch No.", VendorImportWorksheetLine."Bank Branch No.");
      VendorBankAccount.VALIDATE("Bank Account No.", VendorImportWorksheetLine."Bank Account No.");
      VendorBankAccount.VALIDATE(IBAN, VendorImportWorksheetLine."Bank Account IBAN");
      VendorBankAccount.VALIDATE("SWIFT Code", VendorImportWorksheetLine."Bank Account SWIFT Code");
      VendorBankAccount.VALIDATE("Bank Clearing Code", VendorImportWorksheetLine."Bank Account Clearing Code");
      VendorBankAccount.VALIDATE("Bank Clearing Standard", VendorImportWorksheetLine."Bank Account Clearing Standard");
      VendorBankAccount.VALIDATE("Reference No.", VendorImportWorksheetLine."Bank Account Reference No.");
      VendorBankAccount.VALIDATE("Transit No.", VendorImportWorksheetLine."Bank Account Transit No.");
      VendorBankAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InsertVendorBankAccount@1000000018() : Boolean;
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      lResult := FALSE;

      IF ( NOT (VendorBankAccount.GET(VendorImportWorksheetLine."No.", VendorImportWorksheetLine."Bank Account Code"))) THEN
      BEGIN
        CLEAR(VendorBankAccount);
        VendorBankAccount.INIT();
        VendorBankAccount.VALIDATE("Vendor No.", VendorImportWorksheetLine."No.");
        VendorBankAccount.VALIDATE(Code, VendorImportWorksheetLine."Bank Account Code");
        VendorBankAccount.INSERT(TRUE);
        CreateLogEntry(VendorBankAccount);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE UpdateDefaultDimension@1000000056(pVendor@1000000002 : Record 23;pDimensionNumber@1000000000 : Integer;pDimensionValueCode@1000000001 : Code[20]);
    BEGIN
      ImportValidation.UpdateDefaultDimension(DATABASE::Vendor, pVendor."No.", pDimensionNumber, pDimensionValueCode,
        VendorImportWorksheetHdr."Create Dimension Values");
    END;

    LOCAL PROCEDURE GetConfigValue@1000000015(TemplateCode@1000000001 : Code[20];FieldNo@1000000000 : Integer;VAR pVendorImportLines@1000000004 : Record 9062836) : Text;
    VAR
      ConfigTemplateLine@1000000003 : Record 8619;
      VendorImportHeader@1000000002 : Record 9062835;
    BEGIN
      IF VendorImportHeader.GET(pVendorImportLines."Batch No.") THEN BEGIN
        VendorImportHeader.GET(pVendorImportLines."Batch No.");
        ConfigTemplateLine.SETRANGE(ConfigTemplateLine."Data Template Code",VendorImportHeader."Configuration Template Code");
        ConfigTemplateLine.SETRANGE(ConfigTemplateLine."Field ID",FieldNo);
        IF ConfigTemplateLine.FINDFIRST THEN
          EXIT(ConfigTemplateLine."Default Value");
        END;

      EXIT('');
    END;

    LOCAL PROCEDURE "--- Processing ---"@1000000058();
    BEGIN
    END;

    LOCAL PROCEDURE ProcessGenBusPostingGroup@1000000057(pCode@1000000000 : Code[10]) : Code[10];
    VAR
      lGenBusinessPostingGroup@1000000001 : Record 250;
    BEGIN
      EXIT(ImportValidation.ProcessCodeFieldWithRelation(pCode, DATABASE::"Gen. Business Posting Group", lGenBusinessPostingGroup.FIELDNO(Description)));
    END;

    LOCAL PROCEDURE ProcessVatBusPostingGroup@1000000055(pCode@1000000000 : Code[10]) : Code[10];
    VAR
      lVavBusinessPostingGroup@1000000001 : Record 323;
    BEGIN
      EXIT(ImportValidation.ProcessCodeFieldWithRelation(pCode, DATABASE::"VAT Business Posting Group", lVavBusinessPostingGroup.FIELDNO(Description)));
    END;

    LOCAL PROCEDURE ProcessVendorPostingGroup@1000000054(pCode@1000000000 : Code[10]) : Code[10];
    VAR
      lVendorPostingGroup@1000000001 : Record 93;
    BEGIN
      EXIT(ImportValidation.ProcessCodeFieldWithRelation(pCode, DATABASE::"Vendor Posting Group", 0));
    END;

    LOCAL PROCEDURE ProcessPaymentMethod@1000000028(pCode@1000000001 : Code[10]) : Code[10];
    VAR
      lPaymentMethod@1000000000 : Record 289;
    BEGIN
      EXIT(ImportValidation.ProcessCodeFieldWithRelation(pCode, DATABASE::"Payment Method", lPaymentMethod.FIELDNO(Description)));
    END;

    LOCAL PROCEDURE ProcessPaymentTerms@1000000027(pCode@1000000000 : Code[10]) : Code[10];
    VAR
      lPaymentTerms@1000000001 : Record 3;
    BEGIN
      EXIT(ImportValidation.ProcessCodeFieldWithRelation(pCode, DATABASE::"Payment Terms", lPaymentTerms.FIELDNO(Description)));
    END;

    LOCAL PROCEDURE ProcessReminderTerms@1000000020(pCode@1000000000 : Code[10]) : Code[10];
    VAR
      lReminderTerms@1000000001 : Record 292;
    BEGIN
      EXIT(ImportValidation.ProcessCodeFieldWithRelation(pCode, DATABASE::"Reminder Terms", lReminderTerms.FIELDNO(Description)));
    END;

    LOCAL PROCEDURE ProcessTypeOfSupply@1000000013(pCode@1000000000 : Code[10]) : Code[10];
    VAR
      lTypeOfSupply@1000000001 : Record 10500;
    BEGIN
      EXIT(ImportValidation.ProcessCodeFieldWithRelation(pCode, DATABASE::"Type of Supply", lTypeOfSupply.FIELDNO(Description)));
    END;

    LOCAL PROCEDURE ProcessSalespersonPurchaser@1000000070(pCode@1000000000 : Code[10]) : Code[10];
    VAR
      lSalespersonPurchaser@1000000001 : Record 13;
    BEGIN
      EXIT(ImportValidation.ProcessCodeFieldWithRelation(pCode, DATABASE::"Salesperson/Purchaser", lSalespersonPurchaser.FIELDNO(Name)));
    END;

    LOCAL PROCEDURE ProcessShipmentMethod@1000000012(pCode@1000000001 : Code[10]) : Code[10];
    VAR
      lShipmentMethod@1000000000 : Record 10;
    BEGIN
      EXIT(ImportValidation.ProcessCodeFieldWithRelation(pCode, DATABASE::"Shipment Method", lShipmentMethod.FIELDNO(Description)));
    END;

    LOCAL PROCEDURE ProcessShippingAgent@1000000011(pCode@1000000000 : Code[10]) : Code[10];
    VAR
      lShippingAgent@1000000001 : Record 291;
    BEGIN
      EXIT(ImportValidation.ProcessCodeFieldWithRelation(pCode, DATABASE::"Shipping Agent", lShippingAgent.FIELDNO(Name)));
    END;

    LOCAL PROCEDURE ProcessCountryRegion@1000000008(pCode@1000000000 : Code[10]) : Code[10];
    VAR
      lCountryRegion@1000000004 : Record 9;
    BEGIN
      EXIT(ImportValidation.ProcessCodeFieldWithRelation(pCode, DATABASE::"Country/Region", lCountryRegion.FIELDNO(Name)));
    END;

    LOCAL PROCEDURE ProcessCurrency@1000000005(pCode@1000000000 : Code[10]) : Code[10];
    VAR
      lCurrency@1000000001 : Record 4;
    BEGIN
      EXIT(ImportValidation.ProcessCodeFieldWithRelation(pCode, DATABASE::Currency, lCurrency.FIELDNO(Description)));
    END;

    LOCAL PROCEDURE ProcessLanguage@1000000004(pCode@1000000000 : Code[10]) : Code[10];
    VAR
      lLanguage@1000000001 : Record 8;
    BEGIN
      EXIT(ImportValidation.ProcessCodeFieldWithRelation(pCode, DATABASE::Language, lLanguage.FIELDNO(Name)));
    END;

    LOCAL PROCEDURE ProcessDimensionValue@1000000016(pDimensionNumber@1000000001 : Integer;pDimensionValueCode@1000000000 : Code[20]) : Code[20];
    BEGIN
      EXIT(ImportValidation.ProcessDimensionValue(pDimensionNumber, pDimensionValueCode, VendorImportWorksheetHdr."Create Dimension Values"));
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000002();
    BEGIN
    END;

    LOCAL PROCEDURE CreateError@1000000043(pErrorMessage@1000000000 : Text);
    BEGIN
      //DOC NH2016.14 - Creating an error entry with specified error message
      //  -> pErrorMessage: The error message

      ImportErrorManagement.CreateError(DATABASE::"Vendor Import Worksheet Line", VendorImportWorksheetLine.GETPOSITION(FALSE), pErrorMessage);
    END;

    LOCAL PROCEDURE CreateWarning@1000000049(pErrorMessage@1000000000 : Text);
    BEGIN
      //DOC NH2016.14 - Creating a warning entry with specified error message
      //  -> pErrorMessage: The error message

      ImportErrorManagement.CreateWarning(DATABASE::"Vendor Import Worksheet Line", VendorImportWorksheetLine.GETPOSITION(FALSE), pErrorMessage);
    END;

    LOCAL PROCEDURE CreateLogEntry@1000000060(pRecord@1000000000 : Variant);
    VAR
      lRecordRef@1000000001 : RecordRef;
    BEGIN
      //DOC NH2016.14 - Creating log entry for specified record
      //  -> pRecord: The record

      lRecordRef.GETTABLE(pRecord);
      ImportToolkit.CreateLogEntry(lRecordRef, VendorImportWorksheetHdr."Batch No.", DATABASE::"Vendor Import Worksheet Hdr.", VendorImportWorksheetLine);
    END;

    BEGIN
    {
      //DOC NH2016.14 BM 07/03/2016 - Created
      //DOC NH2016.14 JH 23/03/2016 - Dimensions added
      //DOC NH2016.15 JH 09/05/2016 - CfMD amendments
      //DOC NH2016.16 JH 09/05/2016 - Bug fixes
    }
    END.
  }
}

