OBJECT Codeunit 11102052 OM - Project Management
{
  OBJECT-PROPERTIES
  {
    Date=19/11/15;
    Time=12:00:00 PM;
    Version List=OMA10.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ShowOverlappingObjects@1(VAR Transport@1000 : Record 11102043);
    VAR
      TmpProjectOverlappingObject@1001 : TEMPORARY Record 11102037;
    BEGIN
      GetOverlappingProjects(Transport, TmpProjectOverlappingObject);
      PAGE.RUN(PAGE::"OM - Overlapping Projects", TmpProjectOverlappingObject);
    END;

    PROCEDURE GetOverlappingProjects@2(VAR Transport@1000 : Record 11102043;VAR TmpProjectOverlappingObject@1001 : TEMPORARY Record 11102037);
    VAR
      Project@1002 : Record 11102036;
      ProjectObject@1003 : Record 11102037;
      TmpProjectObjInTransp@1004 : TEMPORARY Record 11102037;
      TmpProjectObjOutsideTransp@1005 : TEMPORARY Record 11102037;
      OverlapSorting@1006 : Integer;
      TmpOverlapSorting@1007 : Integer;
    BEGIN
      Project.SETCURRENTKEY("Transport No.");
      Project.SETRANGE("Transport No.", Transport."No.");
      IF Project.FINDSET THEN
        REPEAT
          ProjectObject.SETRANGE("Project No.", Project."No.");
          IF ProjectObject.FINDSET THEN
            REPEAT
              TmpProjectObjInTransp := ProjectObject;
              TmpProjectObjInTransp.INSERT;
            UNTIL ProjectObject.NEXT = 0;
        UNTIL Project.NEXT = 0;

      Project.SETCURRENTKEY("Transport No.");
      Project.SETFILTER("Transport No.", '<>%1', Transport."No.");
      Project.SETRANGE(Transported, FALSE);
      IF Project.FINDSET THEN
        REPEAT
          ProjectObject.SETRANGE("Project No.", Project."No.");
          IF ProjectObject.FINDSET THEN
            REPEAT
              TmpProjectObjOutsideTransp := ProjectObject;
              TmpProjectObjOutsideTransp.INSERT;
            UNTIL ProjectObject.NEXT = 0;
        UNTIL Project.NEXT = 0;

      Project.SETCURRENTKEY("Transport No.");
      Project.SETRANGE("Transport No.", '');
      Project.SETRANGE(Transported, TRUE);
      IF Project.FINDSET THEN
        REPEAT
          ProjectObject.SETRANGE("Project No.", Project."No.");
          IF ProjectObject.FINDSET THEN
            REPEAT
              TmpProjectObjOutsideTransp := ProjectObject;
              TmpProjectObjOutsideTransp.INSERT;
            UNTIL ProjectObject.NEXT = 0;
        UNTIL Project.NEXT = 0;

      IF TmpProjectObjInTransp.FINDSET THEN
        REPEAT

          TmpProjectOverlappingObject.SETCURRENTKEY("Object Type", "Object No.");
          TmpProjectOverlappingObject.SETRANGE("Object Type", TmpProjectObjInTransp."Object Type");
          TmpProjectOverlappingObject.SETRANGE("Object No.", TmpProjectObjInTransp."Object No.");
          TmpProjectOverlappingObject.SETFILTER("Transport No.", '<>%1', '');
          IF TmpProjectOverlappingObject.FINDFIRST THEN BEGIN
            TmpOverlapSorting := TmpProjectOverlappingObject."Overlap Sorting";
            TmpProjectOverlappingObject := TmpProjectObjInTransp;
            TmpProjectOverlappingObject."Transport No." := Transport."No.";
            TmpProjectOverlappingObject."Overlap Sorting" := TmpOverlapSorting;
            IF TmpProjectOverlappingObject.INSERT THEN
              ;
          END;
          TmpProjectOverlappingObject.RESET;

          TmpProjectOverlappingObject := TmpProjectObjInTransp;
          TmpProjectOverlappingObject."Transport No." := Transport."No.";

          TmpProjectObjOutsideTransp.SETCURRENTKEY("Object Type", "Object No.");
          TmpProjectObjOutsideTransp.SETRANGE("Object Type", TmpProjectObjInTransp."Object Type");
          TmpProjectObjOutsideTransp.SETRANGE("Object No.", TmpProjectObjInTransp."Object No.");
          IF TmpProjectObjOutsideTransp.FINDSET THEN BEGIN
            TmpProjectOverlappingObject := TmpProjectObjInTransp;
            TmpProjectOverlappingObject."Transport No." := Transport."No.";
            OverlapSorting += 1;
            TmpProjectOverlappingObject."Overlap Sorting" := OverlapSorting;
            IF TmpProjectOverlappingObject.INSERT THEN
              ;
            REPEAT
              TmpProjectOverlappingObject := TmpProjectObjOutsideTransp;
              TmpProjectOverlappingObject."Transport No." := '';
              OverlapSorting += 1;
              TmpProjectOverlappingObject."Overlap Sorting" := OverlapSorting;
              IF TmpProjectOverlappingObject.INSERT THEN
                ;
            UNTIL TmpProjectObjOutsideTransp.NEXT = 0;
          END;
        UNTIL TmpProjectObjInTransp.NEXT = 0;

      IF TmpProjectOverlappingObject.FINDFIRST THEN
        ;
    END;

    PROCEDURE ShowOverlappingObjectsProjects@3(VAR Project@1000 : Record 11102036);
    VAR
      TmpProjectOverlappingObject@1001 : TEMPORARY Record 11102037;
    BEGIN
      GetOverlappingObjectsProjects(Project, TmpProjectOverlappingObject);
      PAGE.RUNMODAL(PAGE::"OM - Overlapping Projects", TmpProjectOverlappingObject);
    END;

    LOCAL PROCEDURE GetOverlappingObjectsProjects@4(VAR Project@1000 : Record 11102036;VAR TmpProjectOverlappingObject@1001 : TEMPORARY Record 11102037);
    VAR
      Project2@1002 : Record 11102036;
      ProjectObject@1003 : Record 11102037;
      TmpProjectObjInTransp@1004 : TEMPORARY Record 11102037;
      TmpProjectObjOutsideTransp@1005 : TEMPORARY Record 11102037;
      OverlapSorting@1006 : Integer;
      TmpOverlapSorting@1007 : Integer;
    BEGIN
      IF Project.FINDSET THEN
        REPEAT
          ProjectObject.SETRANGE("Project No.", Project."No.");
          IF ProjectObject.FINDSET THEN
            REPEAT
              TmpProjectObjInTransp := ProjectObject;
              TmpProjectObjInTransp.INSERT;
            UNTIL ProjectObject.NEXT = 0;
        UNTIL Project.NEXT = 0;

      Project2.SETCURRENTKEY(Transported);
      Project2.SETRANGE(Transported, FALSE);
      IF Project2.FINDSET THEN
        REPEAT
          Project."No." := Project2."No.";
          IF NOT Project.FIND('=') THEN BEGIN
            ProjectObject.SETRANGE("Project No.", Project2."No.");
            IF ProjectObject.FINDSET THEN
              REPEAT
                TmpProjectObjOutsideTransp := ProjectObject;
                TmpProjectObjOutsideTransp.INSERT;
              UNTIL ProjectObject.NEXT = 0;
          END;
        UNTIL Project2.NEXT = 0;

      Project2.SETCURRENTKEY("Transport No.");
      Project2.SETRANGE("Transport No.", '');
      Project2.SETRANGE(Transported, TRUE);
      IF Project2.FINDSET THEN
        REPEAT
          Project."No." := Project2."No.";
          IF NOT Project.FIND('=') THEN BEGIN
            ProjectObject.SETRANGE("Project No.", Project2."No.");
            IF ProjectObject.FINDSET THEN
              REPEAT
                TmpProjectObjOutsideTransp := ProjectObject;
                TmpProjectObjOutsideTransp.INSERT;
              UNTIL ProjectObject.NEXT = 0;
          END;
        UNTIL Project2.NEXT = 0;

      IF TmpProjectObjInTransp.FINDSET THEN
        REPEAT

          TmpProjectOverlappingObject.SETCURRENTKEY("Object Type", "Object No.");
          TmpProjectOverlappingObject.SETRANGE("Object Type", TmpProjectObjInTransp."Object Type");
          TmpProjectOverlappingObject.SETRANGE("Object No.", TmpProjectObjInTransp."Object No.");
          TmpProjectOverlappingObject.SETFILTER("Transport No.", '<>%1', '');
          IF TmpProjectOverlappingObject.FINDFIRST THEN BEGIN
            TmpOverlapSorting := TmpProjectOverlappingObject."Overlap Sorting";
            TmpProjectOverlappingObject := TmpProjectObjInTransp;
            TmpProjectOverlappingObject."Transport No." := '-';
            TmpProjectOverlappingObject."Overlap Sorting" := TmpOverlapSorting;
            IF TmpProjectOverlappingObject.INSERT THEN
              ;
          END;
          TmpProjectOverlappingObject.RESET;

          TmpProjectObjOutsideTransp.SETCURRENTKEY("Object Type", "Object No.");
          TmpProjectObjOutsideTransp.SETRANGE("Object Type", TmpProjectObjInTransp."Object Type");
          TmpProjectObjOutsideTransp.SETRANGE("Object No.", TmpProjectObjInTransp."Object No.");
          IF TmpProjectObjOutsideTransp.FINDSET THEN BEGIN
            TmpProjectOverlappingObject := TmpProjectObjInTransp;
            TmpProjectOverlappingObject."Transport No." := '-';
            OverlapSorting += 1;
            TmpProjectOverlappingObject."Overlap Sorting" := OverlapSorting;
            IF TmpProjectOverlappingObject.INSERT THEN
              ;
            REPEAT
              TmpProjectOverlappingObject := TmpProjectObjOutsideTransp;
              TmpProjectOverlappingObject."Transport No." := '';
              OverlapSorting += 1;
              TmpProjectOverlappingObject."Overlap Sorting" := OverlapSorting;
              IF TmpProjectOverlappingObject.INSERT THEN
                ;
            UNTIL TmpProjectObjOutsideTransp.NEXT = 0;
          END;
        UNTIL TmpProjectObjInTransp.NEXT = 0;

      IF TmpProjectOverlappingObject.FINDFIRST THEN
        ;
    END;

    PROCEDURE ExportAsFob@5(VAR Project@1000 : Record 11102036);
    VAR
      TmpObject@1001 : TEMPORARY Record 2000000001;
      ObjectMgt@1002 : Codeunit 11102046;
      CommonDialog@1003 : Codeunit 11102059;
      FileHandler@1004 : Codeunit 11102097;
      ClientFileName@1005 : Text;
      DefaultFileName@1006 : Text;
      ServerFileName@1007 : Text;
      ctDefaultFilename@1008 : TextConst 'DEU=Project %1.fob;ENU=Project %1.fob;ESP=Project %1.fob;FRA=Project %1.fob;NLD=Project %1.fob;DEA=Project %1.fob';
    BEGIN
      Project.FINDSET;

      CommonDialog.AddKnownExtension('fob');
      DefaultFileName := STRSUBSTNO(ctDefaultFilename, Project."No.");
      ClientFileName := DefaultFileName;
      IF NOT CommonDialog.SaveFile(ClientFileName, ServerFileName, DefaultFileName) THEN
        EXIT;

      GetObjects(Project, TmpObject);

      ObjectMgt.ExportFob(TmpObject, ServerFileName);

      FileHandler.DownloadToClient(ServerFileName, ClientFileName, DefaultFileName);
    END;

    PROCEDURE ExportAsSplitFob@18(VAR Project@1000 : Record 11102036);
    VAR
      TmpObject@1001 : TEMPORARY Record 2000000001;
      ImExportMgt@1002 : Codeunit 11102043;
      Progressbar@1003 : Codeunit 11102044;
      CommonDialog@1004 : Codeunit 11102059;
      ClientPathToExport@1005 : Text;
      ctExportingObjects@1006 : TextConst 'DEU=Exporting objects...;ENU=Exporting objects...;ESP=Exporting objects...;FRA=Exporting objects...;NLD=Objecten exporteren...;DEA=Exporting objects...';
    BEGIN
      Project.FINDSET;

      CommonDialog.SelectDirectory(ClientPathToExport);
      IF ClientPathToExport = '' THEN
        EXIT;

      GetObjects(Project, TmpObject);

      Progressbar.Open(ctExportingObjects, 1);
      ImExportMgt.ExportSplitFobFiles(TmpObject, ClientPathToExport, Progressbar);
      Progressbar.Close;
    END;

    PROCEDURE ExportAsSplitFobBefore@12(VAR Project@1000 : Record 11102036);
    VAR
      TmpModification@1001 : TEMPORARY Record 11102042;
      TmpCALHistoryObject@1002 : TEMPORARY Record 11102052;
      ImExportMgt@1003 : Codeunit 11102043;
      Progressbar@1004 : Codeunit 11102044;
      CommonDialog@1005 : Codeunit 11102059;
      ClientPathToExport@1006 : Text;
      ctExportingObjects@1007 : TextConst 'DEU=Exporting objects...;ENU=Exporting objects...;ESP=Exporting objects...;FRA=Exporting objects...;NLD=Objecten exporteren...;DEA=Exporting objects...';
    BEGIN
      Project.FINDSET;

      CommonDialog.SelectDirectory(ClientPathToExport);
      IF ClientPathToExport = '' THEN
        EXIT;

      GetModificationsBefore(Project, TmpModification);
      GetHistoryObjectsBefore(TmpModification, TmpCALHistoryObject, FALSE);

      Progressbar.Open(ctExportingObjects, 1);
      ImExportMgt.ExportSplitHistoryFobFiles(TmpCALHistoryObject, ClientPathToExport, Progressbar);
      Progressbar.Close;
    END;

    PROCEDURE ExportAsSplitFobAfter@11(VAR Project@1000 : Record 11102036);
    VAR
      TmpModification@1001 : TEMPORARY Record 11102042;
      TmpCALHistoryObject@1002 : TEMPORARY Record 11102052;
      ImExportMgt@1003 : Codeunit 11102043;
      Progressbar@1004 : Codeunit 11102044;
      CommonDialog@1005 : Codeunit 11102059;
      ClientPathToExport@1006 : Text;
      ctExportingObjects@1007 : TextConst 'DEU=Exporting objects...;ENU=Exporting objects...;ESP=Exporting objects...;FRA=Exporting objects...;NLD=Objecten exporteren...;DEA=Exporting objects...';
    BEGIN
      Project.FINDSET;

      CommonDialog.SelectDirectory(ClientPathToExport);
      IF ClientPathToExport = '' THEN
        EXIT;

      GetModificationsAfter(Project, TmpModification);
      GetHistoryObjectsAfter(TmpModification, TmpCALHistoryObject, FALSE);

      Progressbar.Open(ctExportingObjects, 1);
      ImExportMgt.ExportSplitHistoryFobFiles(TmpCALHistoryObject, ClientPathToExport, Progressbar);
      Progressbar.Close;
    END;

    PROCEDURE ExportAsText@6(VAR Project@1000 : Record 11102036);
    VAR
      TmpObject@1001 : TEMPORARY Record 2000000001;
      ObjectMgt@1002 : Codeunit 11102046;
      CommonDialog@1003 : Codeunit 11102059;
      FileHandler@1004 : Codeunit 11102097;
      ClientFileName@1005 : Text;
      DefaultFileName@1006 : Text;
      ServerFileName@1007 : Text;
      ctDefaultFilename@1008 : TextConst 'DEU=Project %1.txt;ENU=Project %1.txt;ESP=Project %1.txt;FRA=Project %1.txt;NLD=Project %1.txt;DEA=Project %1.txt';
    BEGIN
      Project.FINDSET;

      CommonDialog.AddKnownExtension('txt-o');
      DefaultFileName := STRSUBSTNO(ctDefaultFilename, Project."No.");
      ClientFileName := DefaultFileName;
      IF NOT CommonDialog.SaveFile(ClientFileName, ServerFileName, DefaultFileName) THEN
        EXIT;

      GetObjects(Project, TmpObject);

      ObjectMgt.ExportRangeTxt(TmpObject, ServerFileName);

      FileHandler.DownloadToClient(ServerFileName, ClientFileName, DefaultFileName);
    END;

    PROCEDURE ExportAsTextBefore@15(VAR Project@1000 : Record 11102036);
    VAR
      TmpModification@1001 : TEMPORARY Record 11102042;
      TmpCALHistoryObject@1002 : TEMPORARY Record 11102052;
      ImExportMgt@1003 : Codeunit 11102043;
      CommonDialog@1004 : Codeunit 11102059;
      FileHandler@1005 : Codeunit 11102097;
      ClientFileName@1006 : Text;
      DefaultFileName@1007 : Text;
      ServerFileName@1008 : Text;
      ctDefaultFilename@1009 : TextConst 'DEU=Project %1.txt;ENU=Project %1.txt;ESP=Project %1.txt;FRA=Project %1.txt;NLD=Project %1.txt;DEA=Project %1.txt';
    BEGIN
      Project.FINDSET;

      CommonDialog.AddKnownExtension('txt-o');
      DefaultFileName := STRSUBSTNO(ctDefaultFilename, Project."No.");
      ClientFileName := DefaultFileName;
      IF NOT CommonDialog.SaveFile(ClientFileName, ServerFileName, DefaultFileName) THEN
        EXIT;

      GetModificationsBefore(Project, TmpModification);
      GetHistoryObjectsBefore(TmpModification, TmpCALHistoryObject, TRUE);
      ImExportMgt.ExportHistoryTextFile(TmpCALHistoryObject, ServerFileName);

      FileHandler.DownloadToClient(ServerFileName, ClientFileName, DefaultFileName);
    END;

    PROCEDURE ExportAsTextAfter@17(VAR Project@1000 : Record 11102036);
    VAR
      TmpModification@1001 : TEMPORARY Record 11102042;
      TmpCALHistoryObject@1002 : TEMPORARY Record 11102052;
      ImExportMgt@1003 : Codeunit 11102043;
      CommonDialog@1004 : Codeunit 11102059;
      FileHandler@1005 : Codeunit 11102097;
      ClientFileName@1006 : Text;
      DefaultFileName@1007 : Text;
      ServerFileName@1008 : Text;
      ctDefaultFilename@1009 : TextConst 'DEU=Project %1.txt;ENU=Project %1.txt;ESP=Project %1.txt;FRA=Project %1.txt;NLD=Project %1.txt;DEA=Project %1.txt';
    BEGIN
      Project.FINDSET;

      CommonDialog.AddKnownExtension('txt-o');
      DefaultFileName := STRSUBSTNO(ctDefaultFilename, Project."No.");
      ClientFileName := DefaultFileName;
      IF NOT CommonDialog.SaveFile(ClientFileName, ServerFileName, DefaultFileName) THEN
        EXIT;

      GetModificationsAfter(Project, TmpModification);
      GetHistoryObjectsAfter(TmpModification, TmpCALHistoryObject, TRUE);
      ImExportMgt.ExportHistoryTextFile(TmpCALHistoryObject, ServerFileName);

      FileHandler.DownloadToClient(ServerFileName, ClientFileName, DefaultFileName);
    END;

    PROCEDURE ExportAsSplitText@13(VAR Project@1000 : Record 11102036);
    VAR
      TmpObject@1001 : TEMPORARY Record 2000000001;
      ImExportMgt@1002 : Codeunit 11102043;
      Progressbar@1003 : Codeunit 11102044;
      CommonDialog@1004 : Codeunit 11102059;
      ClientPathToExport@1005 : Text;
      ctExportingObjects@1006 : TextConst 'DEU=Exporting objects...;ENU=Exporting objects...;ESP=Exporting objects...;FRA=Exporting objects...;NLD=Objecten exporteren...;DEA=Exporting objects...';
    BEGIN
      Project.FINDSET;

      CommonDialog.SelectDirectory(ClientPathToExport);
      IF ClientPathToExport = '' THEN
        EXIT;

      GetObjects(Project, TmpObject);

      Progressbar.Open(ctExportingObjects, 1);
      ImExportMgt.ExportSplitTextFiles(TmpObject, ClientPathToExport, Progressbar);
      Progressbar.Close;
    END;

    PROCEDURE ExportAsSplitTextBefore@20(VAR Project@1000 : Record 11102036);
    VAR
      TmpModification@1001 : TEMPORARY Record 11102042;
      TmpCALHistoryObject@1002 : TEMPORARY Record 11102052;
      ImExportMgt@1003 : Codeunit 11102043;
      Progressbar@1004 : Codeunit 11102044;
      CommonDialog@1005 : Codeunit 11102059;
      ClientPathToExport@1006 : Text;
      ctExportingObjects@1007 : TextConst 'DEU=Exporting objects...;ENU=Exporting objects...;ESP=Exporting objects...;FRA=Exporting objects...;NLD=Objecten exporteren...;DEA=Exporting objects...';
    BEGIN
      Project.FINDSET;

      CommonDialog.SelectDirectory(ClientPathToExport);
      IF ClientPathToExport = '' THEN
        EXIT;

      GetModificationsBefore(Project, TmpModification);
      GetHistoryObjectsBefore(TmpModification, TmpCALHistoryObject, TRUE);

      Progressbar.Open(ctExportingObjects, 1);
      ImExportMgt.ExportSplitHistoryTextFiles(TmpCALHistoryObject, ClientPathToExport, Progressbar);
      Progressbar.Close;
    END;

    PROCEDURE ExportAsSplitTextAfter@19(VAR Project@1000 : Record 11102036);
    VAR
      TmpModification@1001 : TEMPORARY Record 11102042;
      TmpCALHistoryObject@1002 : TEMPORARY Record 11102052;
      ImExportMgt@1003 : Codeunit 11102043;
      Progressbar@1004 : Codeunit 11102044;
      CommonDialog@1005 : Codeunit 11102059;
      ClientPathToExport@1006 : Text;
      ctExportingObjects@1007 : TextConst 'DEU=Exporting objects...;ENU=Exporting objects...;ESP=Exporting objects...;FRA=Exporting objects...;NLD=Objecten exporteren...;DEA=Exporting objects...';
    BEGIN
      Project.FINDSET;

      CommonDialog.SelectDirectory(ClientPathToExport);
      IF ClientPathToExport = '' THEN
        EXIT;

      GetModificationsAfter(Project, TmpModification);
      GetHistoryObjectsAfter(TmpModification, TmpCALHistoryObject, TRUE);

      Progressbar.Open(ctExportingObjects, 1);
      ImExportMgt.ExportSplitHistoryTextFiles(TmpCALHistoryObject, ClientPathToExport, Progressbar);
      Progressbar.Close;
    END;

    PROCEDURE ExportAsFab@7(VAR Project@1000 : Record 11102036);
    VAR
      TmpAction@1001 : TEMPORARY Record 11102048;
      TmpActionField@1002 : TEMPORARY Record 11102049;
      ActionMgt@1003 : Codeunit 11102038;
      Progressbar@1004 : Codeunit 11102044;
      CommonDialog@1005 : Codeunit 11102059;
      FileHandler@1006 : Codeunit 11102097;
      oFile@1007 : File;
      OutStr@1008 : OutStream;
      ClientFileName@1009 : Text;
      DefaultFileName@1010 : Text;
      ServerFileName@1011 : Text;
      ctDefaultFilename@1012 : TextConst 'DEU=Project %1.fab;ENU=Project %1.fab;ESP=Project %1.fab;FRA=Project %1.fab;NLD=Project %1.fab;DEA=Project %1.fab';
      ctExportingFab@1013 : TextConst 'DEU=Exporting FAB file...;ENU=Exporting FAB file...;ESP=Exporting FAB file...;FRA=Exporting FAB file...;NLD=FAB-bestand exporteren...;DEA=Exporting FAB file...';
    BEGIN
      Project.FINDSET;

      CommonDialog.AddKnownExtension('fab');
      DefaultFileName := STRSUBSTNO(ctDefaultFilename, Project."No.");
      ClientFileName := DefaultFileName;
      IF NOT CommonDialog.SaveFile(ClientFileName, ServerFileName, DefaultFileName) THEN
        EXIT;

      REPEAT
        AddProjectActions(TmpAction, Project."No.");
      UNTIL Project.NEXT = 0;

      IF EXISTS(ServerFileName) THEN
        ERASE(ServerFileName);

      oFile.CREATE(ServerFileName);
      oFile.CREATEOUTSTREAM(OutStr);

      Progressbar.Open(ctExportingFab, 1);
      ActionMgt.FillExportOutStream(TmpAction, TmpActionField, OutStr, Progressbar);
      Progressbar.Close;

      FileHandler.DownloadToClient(ServerFileName, ClientFileName, DefaultFileName);
    END;

    PROCEDURE AddProjectActions@8(VAR TmpAction@1000 : TEMPORARY Record 11102048;VAR ProjectNo@1001 : Code[20]);
    VAR
      Project@1002 : Record 11102036;
      ProjectObject@1003 : Record 11102037;
      DocumentLine@1004 : Record 11102046;
      ActionField@1005 : Record 11102049;
      ProjectPermissions@1006 : Record 11102050;
      TransportProjectHistory@1007 : Record 11102066;
      Test@1008 : Record 11102089;
      TestParameter@1009 : Record 11102090;
      Comment@1010 : Record 11102095;
      CommentLine@1011 : Record 11102096;
    BEGIN
      TmpAction.Type := TmpAction.Type::"Temporary";

      TmpAction."Line No." += 10000;
      TmpAction.VALIDATE("Action Type", TmpAction."Action Type"::"Transfer Data");
      TmpAction.VALIDATE("Object No.", DATABASE::"OM - Project");
      TmpAction.Evaluate1FieldFilter(Project.FIELDNO("No."), ProjectNo);
      TmpAction."DELETEALL;" := TRUE;
      TmpAction.INSERT;

      TmpAction."Line No." += 10000;
      TmpAction.VALIDATE("Action Type", TmpAction."Action Type"::"Transfer Data");
      TmpAction.VALIDATE("Object No.", DATABASE::"OM - Project Object");
      TmpAction.Evaluate1FieldFilter(ProjectObject.FIELDNO("Project No."), ProjectNo);
      TmpAction."DELETEALL;" := TRUE;
      TmpAction.INSERT;

      TmpAction."Line No." += 10000;
      TmpAction.VALIDATE("Action Type", TmpAction."Action Type"::"Transfer Data");
      TmpAction.VALIDATE("Object No.", DATABASE::"OM - Action");
      TmpAction.Evaluate2FieldsFilter(TmpAction.FIELDNO(Type), FORMAT(TmpAction.Type::Project), TmpAction.FIELDNO("No."), ProjectNo);
      TmpAction."DELETEALL;" := TRUE;
      TmpAction.INSERT;

      TmpAction."Line No." += 10000;
      TmpAction.VALIDATE("Action Type", TmpAction."Action Type"::"Transfer Data");
      TmpAction.VALIDATE("Object No.", DATABASE::"OM - Action Field");
      TmpAction.Evaluate2FieldsFilter(
        ActionField.FIELDNO(Type), FORMAT(ActionField.Type::Project),
        ActionField.FIELDNO("No."), ProjectNo);
      TmpAction."DELETEALL;" := TRUE;
      TmpAction.INSERT;

      TmpAction."Line No." += 10000;
      TmpAction.VALIDATE("Action Type", TmpAction."Action Type"::"Transfer Data");
      TmpAction.VALIDATE("Object No.", DATABASE::"OM - Document Line");
      TmpAction.Evaluate2FieldsFilter(
        DocumentLine.FIELDNO("Table Name"), FORMAT(DocumentLine."Table Name"::Project),
        DocumentLine.FIELDNO("No."), ProjectNo);
      TmpAction."DELETEALL;" := TRUE;
      TmpAction.INSERT;

      TmpAction."Line No." += 10000;
      TmpAction.VALIDATE("Action Type", TmpAction."Action Type"::"Transfer Data");
      TmpAction.VALIDATE("Object No.", DATABASE::"OM - Project Permissions");
      TmpAction."DELETEALL;" := TRUE;
      TmpAction.Evaluate1FieldFilter(ProjectPermissions.FIELDNO("Project No."), ProjectNo);
      TmpAction.INSERT;

      TmpAction."Line No." += 10000;
      TmpAction.VALIDATE("Action Type", TmpAction."Action Type"::"Transfer Data");
      TmpAction.VALIDATE("Object No.", DATABASE::"OM - Transport Project History");
      TmpAction.Evaluate1FieldFilter(TransportProjectHistory.FIELDNO("Project No."), ProjectNo);
      TmpAction."DELETEALL;" := TRUE;
      TmpAction.INSERT;

      TmpAction."Line No." += 10000;
      TmpAction.VALIDATE("Action Type", TmpAction."Action Type"::"Transfer Data");
      TmpAction.VALIDATE("Object No.", DATABASE::"OM - Test");
      TmpAction.Evaluate2FieldsFilter(Test.FIELDNO(Type), FORMAT(Test.Type::Project), Test.FIELDNO("No."), ProjectNo);
      TmpAction.INSERT;
      TmpAction."DELETEALL;" := TRUE;
      TmpAction."Key Index" := 1;

      TmpAction."Line No." += 10000;
      TmpAction.VALIDATE("Action Type", TmpAction."Action Type"::"Transfer Data");
      TmpAction.VALIDATE("Object No.", DATABASE::"OM - Test Parameter");
      TmpAction.Evaluate2FieldsFilter(
        TestParameter.FIELDNO("Test Type"), FORMAT(TestParameter."Test Type"::Project),
        TestParameter.FIELDNO("Test No."), ProjectNo);
      TmpAction."DELETEALL;" := TRUE;
      TmpAction.INSERT;

      TmpAction."Line No." += 10000;
      TmpAction.VALIDATE("Action Type", TmpAction."Action Type"::"Transfer Data");
      TmpAction.VALIDATE("Object No.", DATABASE::"OM - Comment");
      TmpAction."Key Index" := 2;
      TmpAction.Evaluate2FieldsFilter(
        Comment.FIELDNO("Table Name"), FORMAT(Comment."Table Name"::Project),
        Comment.FIELDNO("No."), ProjectNo);
      TmpAction."DELETEALL;" := TRUE;
      TmpAction.INSERT;
      TmpAction."Key Index" := 0;

      Comment.SETCURRENTKEY("Table Name", "No.");
      Comment.SETRANGE("Table Name", DocumentLine."Table Name"::Project);
      Comment.SETRANGE("No.", ProjectNo);
      IF Comment.FINDSET THEN
        REPEAT
          TmpAction."Line No." += 10000;
          TmpAction.VALIDATE("Action Type", TmpAction."Action Type"::"Transfer Data");
          TmpAction.VALIDATE("Object No.", DATABASE::"OM - Comment Line");
          TmpAction."DELETEALL;" := TRUE;
          TmpAction.Evaluate1FieldFilter(CommentLine.FIELDNO("Comment Entry No."), FORMAT(Comment."Entry No."));
          TmpAction.INSERT;
        UNTIL Comment.NEXT = 0;
    END;

    PROCEDURE GetObjects@9(VAR Project@1000 : Record 11102036;VAR TmpObject@1001 : TEMPORARY Record 2000000001);
    VAR
      ProjectObject@1002 : Record 11102037;
      Object@1003 : Record 2000000001;
    BEGIN
      IF Project.FINDSET THEN
        REPEAT
          ProjectObject.SETRANGE("Project No.", Project."No.");
          IF ProjectObject.FINDSET THEN
            REPEAT
              IF Object.GET(ProjectObject."Object Type", '', ProjectObject."Object No.") THEN
                IF NOT TmpObject.GET(ProjectObject."Object Type", '', ProjectObject."Object No.") THEN BEGIN
                  Object.CALCFIELDS("BLOB Reference");
                  TmpObject := Object;
                  TmpObject.INSERT;
                END;
            UNTIL ProjectObject.NEXT = 0;
        UNTIL Project.NEXT = 0;
    END;

    PROCEDURE GetModificationsBefore@14(VAR Project@1000 : Record 11102036;VAR TmpModification@1001 : TEMPORARY Record 11102042);
    VAR
      ProjectObject@1002 : Record 11102037;
      Modification@1003 : Record 11102042;
    BEGIN
      IF Project.FINDSET THEN
        REPEAT
          ProjectObject.SETRANGE("Project No.", Project."No.");
          IF ProjectObject.FINDSET THEN
            REPEAT
              Modification.SETCURRENTKEY("Assigned to Project No.", "Object Type", "Object No.", "Object Date", "Object Time");
              Modification.SETRANGE("Assigned to Project No.", Project."No.");
              Modification.SETRANGE("Object Type", ProjectObject."Object Type");
              Modification.SETRANGE("Object No.", ProjectObject."Object No.");
              IF Modification.FINDFIRST THEN
                AddToBufferBefore(Modification, TmpModification);

            UNTIL ProjectObject.NEXT = 0;
        UNTIL Project.NEXT = 0;
    END;

    LOCAL PROCEDURE AddToBufferBefore@16(VAR Modification@1000 : Record 11102042;VAR TmpModification@1001 : TEMPORARY Record 11102042);
    VAR
      SourceControl@1002 : Codeunit 11102050;
      ExistingFromDate@1003 : Date;
      FromDate@1004 : Date;
      ExistingFromTime@1005 : Time;
      FromTime@1006 : Time;
      AddTmpRecord@1007 : Boolean;
    BEGIN
      FromDate := Modification."Object Date";
      FromTime := Modification."Object Time";

      TmpModification.SETRANGE("Object Type", Modification."Object Type");
      TmpModification.SETRANGE("Object No.", Modification."Object No.");
      IF TmpModification.FINDFIRST THEN BEGIN
        ExistingFromDate := TmpModification."Object Date";
        ExistingFromTime := TmpModification."Object Time";
        IF SourceControl.CreateDateTime2(FromDate, FromTime) < SourceControl.CreateDateTime2(ExistingFromDate, ExistingFromTime) THEN BEGIN
          TmpModification.DELETE;
          AddTmpRecord := TRUE;
        END;
      END ELSE
        AddTmpRecord := TRUE;

      IF AddTmpRecord THEN BEGIN
        TmpModification := Modification;
        TmpModification.INSERT;
      END;

      TmpModification.RESET;
    END;

    PROCEDURE GetHistoryObjectsBefore@26(VAR TmpModification@1000 : TEMPORARY Record 11102042;VAR TmpCALHistoryObject@1001 : TEMPORARY Record 11102052;Code@1002 : Boolean);
    VAR
      CALHistoryObject@1003 : Record 11102052;
      ObjectTime@1004 : Time;
    BEGIN
      IF TmpModification.FINDSET THEN
        REPEAT

          CALHistoryObject.SETCURRENTKEY("Object Type", "Object No.", "Object Date", "Object Time");
          CALHistoryObject.SETRANGE("Object Type", TmpModification."Object Type");
          CALHistoryObject.SETRANGE("Object No.", TmpModification."Object No.");
          IF Code THEN
            CALHistoryObject.SETRANGE("C/AL Code Present", TRUE)
          ELSE
            CALHistoryObject.SETRANGE("BLOB Reference Present", TRUE);
          CALHistoryObject.SETRANGE("Object Date");
          CALHistoryObject.SETRANGE("Object Time");
          IF CALHistoryObject.FINDFIRST THEN BEGIN

            CALHistoryObject.SETFILTER("Object Date", '<%1', TmpModification."Object Date");
            CALHistoryObject.SETRANGE("Object Time");
            IF CALHistoryObject.FINDLAST THEN
              ;

            ObjectTime := TmpModification."Object Time" - 1000;
            IF ObjectTime > TmpModification."Object Time" THEN
              ObjectTime := 000000T;

            CALHistoryObject.SETRANGE("Object Date", TmpModification."Object Date");
            CALHistoryObject.SETFILTER("Object Time", '<=%1', ObjectTime);
            IF CALHistoryObject.FINDLAST THEN
              ;

            TmpCALHistoryObject := CALHistoryObject;
            TmpCALHistoryObject.INSERT;

          END;

        UNTIL TmpModification.NEXT = 0;
    END;

    PROCEDURE GetModificationsAfter@24(VAR Project@1000 : Record 11102036;VAR TmpModification@1001 : TEMPORARY Record 11102042);
    VAR
      ProjectObject@1002 : Record 11102037;
      Modification@1003 : Record 11102042;
    BEGIN
      IF Project.FINDSET THEN
        REPEAT
          ProjectObject.SETRANGE("Project No.", Project."No.");
          IF ProjectObject.FINDSET THEN
            REPEAT
              Modification.SETCURRENTKEY("Assigned to Project No.", "Object Type", "Object No.", "Object Date", "Object Time");
              Modification.SETRANGE("Assigned to Project No.", Project."No.");
              Modification.SETRANGE("Object Type", ProjectObject."Object Type");
              Modification.SETRANGE("Object No.", ProjectObject."Object No.");
              IF Modification.FINDLAST THEN
                AddToBufferAfter(Modification, TmpModification);

            UNTIL ProjectObject.NEXT = 0;
        UNTIL Project.NEXT = 0;
    END;

    LOCAL PROCEDURE AddToBufferAfter@22(VAR Modification@1000 : Record 11102042;VAR TmpModification@1001 : TEMPORARY Record 11102042);
    VAR
      SourceControl@1002 : Codeunit 11102050;
      ExistingFromDate@1003 : Date;
      FromDate@1004 : Date;
      ExistingFromTime@1005 : Time;
      FromTime@1006 : Time;
      AddTmpRecord@1007 : Boolean;
    BEGIN
      FromDate := Modification."Object Date";
      FromTime := Modification."Object Time";

      TmpModification.SETRANGE("Object Type", Modification."Object Type");
      TmpModification.SETRANGE("Object No.", Modification."Object No.");
      IF TmpModification.FINDFIRST THEN BEGIN
        ExistingFromDate := TmpModification."Object Date";
        ExistingFromTime := TmpModification."Object Time";
        IF SourceControl.CreateDateTime2(FromDate, FromTime) > SourceControl.CreateDateTime2(ExistingFromDate, ExistingFromTime) THEN BEGIN
          TmpModification.DELETE;
          AddTmpRecord := TRUE;
        END;
      END ELSE
        AddTmpRecord := TRUE;

      IF AddTmpRecord THEN BEGIN
        TmpModification := Modification;
        TmpModification.INSERT;
      END;

      TmpModification.RESET;
    END;

    PROCEDURE GetHistoryObjectsAfter@10(VAR TmpModification@1000 : TEMPORARY Record 11102042;VAR TmpCALHistoryObject@1001 : TEMPORARY Record 11102052;Code@1002 : Boolean);
    VAR
      CALHistoryObject@1003 : Record 11102052;
      ObjectTime@1004 : Time;
    BEGIN
      IF TmpModification.FINDSET THEN
        REPEAT

          CALHistoryObject.SETCURRENTKEY("Object Type", "Object No.", "Object Date", "Object Time");
          CALHistoryObject.SETRANGE("Object Type", TmpModification."Object Type");
          CALHistoryObject.SETRANGE("Object No.", TmpModification."Object No.");
          IF Code THEN
            CALHistoryObject.SETRANGE("C/AL Code Present", TRUE)
          ELSE
            CALHistoryObject.SETRANGE("BLOB Reference Present", TRUE);
          CALHistoryObject.SETRANGE("Object Date");
          CALHistoryObject.SETRANGE("Object Time");
          IF CALHistoryObject.FINDLAST THEN BEGIN

            CALHistoryObject.SETFILTER("Object Date", '>%1', TmpModification."Object Date");
            CALHistoryObject.SETRANGE("Object Time");

            IF CALHistoryObject.FINDFIRST THEN
              ;

            ObjectTime := TmpModification."Object Time" - 1000;
            IF ObjectTime > TmpModification."Object Time" THEN
              ObjectTime := 000000T;

            CALHistoryObject.SETRANGE("Object Date", TmpModification."Object Date");
            CALHistoryObject.SETFILTER("Object Time", '>=%1', ObjectTime);
            IF CALHistoryObject.FINDFIRST THEN
              ;

            TmpCALHistoryObject := CALHistoryObject;
            TmpCALHistoryObject.INSERT;

          END;

        UNTIL TmpModification.NEXT = 0;
    END;

    PROCEDURE SetNextStatus@23(VAR Project@1000 : Record 11102036);
    VAR
      Status@1001 : Record 11102039;
    BEGIN
      WITH Project DO
        IF FINDSET THEN BEGIN
          GetNextStatus(Status);
          IF SelectStatus(Status) THEN
            REPEAT
              SetStatus(Status);
            UNTIL NEXT = 0;
        END;
    END;

    PROCEDURE SetPreviousStatus@27(VAR Project@1000 : Record 11102036);
    VAR
      Status@1001 : Record 11102039;
    BEGIN
      WITH Project DO
        IF FINDSET THEN BEGIN
          GetPreviousStatus(Status);
          IF SelectStatus(Status) THEN
            REPEAT
              SetStatus(Status);
            UNTIL NEXT = 0;
        END;
    END;

    BEGIN
    END.
  }
}

