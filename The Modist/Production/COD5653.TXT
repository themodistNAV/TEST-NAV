OBJECT Codeunit 5653 Insurance Jnl.-Post Batch
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    TableNo=5635;
    Permissions=TableData 5634=imd;
    OnRun=BEGIN
            InsuranceJnlLine.COPY(Rec);
            Code;
            Rec := InsuranceJnlLine;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=cannot exceed %1 characters;ENG=cannot exceed %1 characters';
      Text001@1001 : TextConst 'ENU=Journal Batch Name    #1##########\\;ENG=Journal Batch Name    #1##########\\';
      Text002@1002 : TextConst 'ENU=Checking lines        #2######\;ENG=Checking lines        #2######\';
      Text003@1003 : TextConst 'ENU=Posting lines         #3###### @4@@@@@@@@@@@@@;ENG=Posting lines         #3###### @4@@@@@@@@@@@@@';
      Text004@1004 : TextConst 'ENU=A maximum of %1 posting number series can be used in each journal.;ENG=A maximum of %1 posting number series can be used in each journal.';
      InsuranceJnlLine@1005 : Record 5635;
      InsuranceJnlTempl@1006 : Record 5633;
      InsuranceJnlBatch@1007 : Record 5634;
      InsuranceReg@1008 : Record 5636;
      InsCoverageLedgEntry@1010 : Record 5629;
      InsuranceJnlLine2@1011 : Record 5635;
      InsuranceJnlLine3@1012 : Record 5635;
      NoSeries@1013 : TEMPORARY Record 308;
      FAJnlSetup@1014 : Record 5605;
      InsuranceJnlPostLine@1015 : Codeunit 5652;
      InsuranceJnlCheckLine@1016 : Codeunit 5651;
      NoSeriesMgt@1017 : Codeunit 396;
      NoSeriesMgt2@1018 : ARRAY [10] OF Codeunit 396;
      Window@1020 : Dialog;
      LineCount@1021 : Integer;
      StartLineNo@1022 : Integer;
      NoOfRecords@1023 : Integer;
      InsuranceRegNo@1024 : Integer;
      LastDocNo@1025 : Code[20];
      LastDocNo2@1026 : Code[20];
      LastPostedDocNo@1027 : Code[20];
      NoOfPostingNoSeries@1028 : Integer;
      PostingNoSeriesNo@1029 : Integer;

    LOCAL PROCEDURE Code@1();
    VAR
      UpdateAnalysisView@1002 : Codeunit 410;
    BEGIN
      WITH InsuranceJnlLine DO BEGIN
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        LOCKTABLE;

        InsuranceJnlTempl.GET("Journal Template Name");
        InsuranceJnlBatch.GET("Journal Template Name","Journal Batch Name");
        IF STRLEN(INCSTR(InsuranceJnlBatch.Name)) > MAXSTRLEN(InsuranceJnlBatch.Name) THEN
          InsuranceJnlBatch.FIELDERROR(
            Name,
            STRSUBSTNO(
              Text000,
              MAXSTRLEN(InsuranceJnlBatch.Name)));

        IF NOT FIND('=><') THEN BEGIN
          COMMIT;
          "Line No." := 0;
          EXIT;
        END;

        Window.OPEN(
          Text001 +
          Text002 +
          Text003);
        Window.UPDATE(1,"Journal Batch Name");

        // Check lines
        LineCount := 0;
        StartLineNo := "Line No.";
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(2,LineCount);
          InsuranceJnlCheckLine.RunCheck(InsuranceJnlLine);
          IF NEXT = 0 THEN
            FIND('-');
        UNTIL "Line No." = StartLineNo;
        NoOfRecords := LineCount;

        InsCoverageLedgEntry.LOCKTABLE;
        IF InsCoverageLedgEntry.FINDLAST THEN;
        InsuranceReg.LOCKTABLE;
        IF InsuranceReg.FINDLAST THEN
          InsuranceRegNo := InsuranceReg."No." + 1
        ELSE
          InsuranceRegNo := 1;

        // Post lines
        LineCount := 0;
        LastDocNo := '';
        LastDocNo2 := '';
        LastPostedDocNo := '';
        FIND('-');
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(3,LineCount);
          Window.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));
          IF NOT ("Insurance No." = '') AND
             (InsuranceJnlBatch."No. Series" <> '') AND
             ("Document No." <> LastDocNo2)
          THEN
            TESTFIELD("Document No.",NoSeriesMgt.GetNextNo(InsuranceJnlBatch."No. Series","Posting Date",FALSE));
          IF NOT ("Insurance No." = '') THEN
            LastDocNo2 := "Document No.";
          IF "Posting No. Series" = '' THEN
            "Posting No. Series" := InsuranceJnlBatch."No. Series"
          ELSE
            IF NOT ("Insurance No." = '') THEN
              IF "Document No." = LastDocNo THEN
                "Document No." := LastPostedDocNo
              ELSE BEGIN
                IF NOT NoSeries.GET("Posting No. Series") THEN BEGIN
                  NoOfPostingNoSeries := NoOfPostingNoSeries + 1;
                  IF NoOfPostingNoSeries > ARRAYLEN(NoSeriesMgt2) THEN
                    ERROR(
                      Text004,
                      ARRAYLEN(NoSeriesMgt2));
                  NoSeries.Code := "Posting No. Series";
                  NoSeries.Description := FORMAT(NoOfPostingNoSeries);
                  NoSeries.INSERT;
                END;
                LastDocNo := "Document No.";
                EVALUATE(PostingNoSeriesNo,NoSeries.Description);
                "Document No." := NoSeriesMgt2[PostingNoSeriesNo].GetNextNo("Posting No. Series","Posting Date",FALSE);
                LastPostedDocNo := "Document No.";
              END;
          InsuranceJnlPostLine.RunWithOutCheck(InsuranceJnlLine);
        UNTIL NEXT = 0;

        IF InsuranceReg.FINDLAST THEN;
        IF InsuranceReg."No." <> InsuranceRegNo THEN
          InsuranceRegNo := 0;

        INIT;
        "Line No." := InsuranceRegNo;

        // Update/delete lines
        IF InsuranceRegNo <> 0 THEN BEGIN
          InsuranceJnlLine2.COPYFILTERS(InsuranceJnlLine);
          InsuranceJnlLine2.SETFILTER("Insurance No.",'<>%1','');
          IF InsuranceJnlLine2.FINDLAST THEN; // Remember the last line
          InsuranceJnlLine3.COPY(InsuranceJnlLine);
          InsuranceJnlLine3.DELETEALL;
          InsuranceJnlLine3.RESET;
          InsuranceJnlLine3.SETRANGE("Journal Template Name","Journal Template Name");
          InsuranceJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
          IF NOT InsuranceJnlLine3.FINDLAST THEN
            IF INCSTR("Journal Batch Name") <> '' THEN BEGIN
              InsuranceJnlBatch.GET("Journal Template Name","Journal Batch Name");
              InsuranceJnlBatch.DELETE;
              FAJnlSetup.IncInsuranceJnlBatchName(InsuranceJnlBatch);
              InsuranceJnlBatch.Name := INCSTR("Journal Batch Name");
              IF InsuranceJnlBatch.INSERT THEN;
              "Journal Batch Name" := InsuranceJnlBatch.Name;
            END;

          InsuranceJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
          IF (InsuranceJnlBatch."No. Series" = '') AND NOT InsuranceJnlLine3.FINDLAST THEN BEGIN
            InsuranceJnlLine3.INIT;
            InsuranceJnlLine3."Journal Template Name" := "Journal Template Name";
            InsuranceJnlLine3."Journal Batch Name" := "Journal Batch Name";
            InsuranceJnlLine3."Line No." := 10000;
            InsuranceJnlLine3.INSERT;
            InsuranceJnlLine3.SetUpNewLine(InsuranceJnlLine2);
            InsuranceJnlLine3.MODIFY;
          END;
        END;
        IF InsuranceJnlBatch."No. Series" <> '' THEN
          NoSeriesMgt.SaveNoSeries;
        IF NoSeries.FIND('-') THEN
          REPEAT
            EVALUATE(PostingNoSeriesNo,NoSeries.Description);
            NoSeriesMgt2[PostingNoSeriesNo].SaveNoSeries;
          UNTIL NoSeries.NEXT = 0;

        COMMIT;
        CLEAR(InsuranceJnlCheckLine);
        CLEAR(InsuranceJnlPostLine);
      END;
      UpdateAnalysisView.UpdateAll(0,TRUE);
      COMMIT;
    END;

    BEGIN
    END.
  }
}

