OBJECT Codeunit 9062484 Migration Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=05/01/16;
    Time=11:33:20 AM;
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AllObj@1000000007 : Record 2000000038;
      AutoNavLogEntry@1000000006 : Record 9062280;
      CriteriaBuffer@1000000005 : TEMPORARY Record 9062629;
      Field@9062237 : Record 2000000041;
      ObjectFieldToolkit@1000000012 : Codeunit 9062343;
      UniversalVariables@1000000003 : Codeunit 9062232;
      FieldRefTools@9062232 : Codeunit 9062241;
      TnpToolkit@9062234 : Codeunit 9062230;
      AutoNavLogEntryNo@9062229 : Integer;
      XmlPortId@1000000001 : Integer;
      XmlPortName@1000000013 : Text;
      Direction@1000000002 : ' ,Export,Import';
      ErrorLevel@1000000000 : ' ,Errors,Confirmations,Warnings,Nothing';
      tAutoNavLogEntrySource@1000000009 : TextConst 'ENU=MIGRATION;ENG=MIGRATION';
      tMigrationSilentModeSysB@1000000004 : TextConst 'ENU=MIGR_SILENT_MODE;ENG=MIGR_SILENT_MODE';
      tCantBetFound@1000000008 : TextConst 'ENU=%1 can''t be found.;ENG=%1 can''t be found.';
      RecordTableId@1000000014 : Integer;
      RecordPosition@1000000010 : Text;
      RecordDescription@1000000011 : Text;
      RelationRecordDescription@9062238 : Text;
      RelationTableId@9062231 : Integer;
      RelationFields@9062230 : ARRAY [3] OF Record 9062231;
      tHasBeenCreated@9062240 : TextConst 'ENU=%1 has been created.;ENG=%1 has been created.';
      RelationFieldIndex@9062239 : Integer;
      DummyFieldValue@9062236 : Variant;

    PROCEDURE "--- General Functions ---"@1000000000();
    BEGIN
    END;

    PROCEDURE InitialiseParameters@1000000008(pXmlPortId@1000000000 : Integer;VAR pDirection@1000000003 : '0,1,2,3,4,5,6,7,8,9';VAR pErrorLevel@1000000004 : '0,1,2,3,4,5,6,7,8,9';VAR pErrorLevelEnabled@1000000002 : Boolean);
    BEGIN
      //DOC NA2015.4 - Initialising parameters
      //  -> pXmlPortId: XMLport ID
      //  <> pDirection: Direction (Export/Import)
      //  <> pErrorLevel: Error level
      //  <> pErrorLevelEnabled: Error level enabled flag

      XmlPortId := pXmlPortId;
      XmlPortName := ObjectFieldToolkit.GetXmlPortName(XmlPortId);
      Direction := Direction::Export;

      pDirection := Direction;
      UpdateErrorLevel(pErrorLevel, pErrorLevelEnabled);

      AutoNavLogEntryNo := 0;
    END;

    PROCEDURE UpdateParameters@1000000009(pDirection@1000000005 : '0,1,2,3,4,5,6,7,8,9';VAR pErrorLevel@1000000004 : '0,1,2,3,4,5,6,7,8,9';VAR pErrorLevelEnabled@1000000003 : Boolean) : Boolean;
    BEGIN
      //DOC NA2015.4 - Updating parameters
      //  -> pDirection: Direction (Export/Import)
      //  <> pErrorLevel: Error level
      //  <> pErrorLevelEnabled: Error level enabled flag
      //  <- Value for currXMLPort.IMPORTFILE(...); TRUE = Import, FALSE = Export

      Direction := pDirection;
      ErrorLevel := pErrorLevel;

      UpdateErrorLevel(pErrorLevel, pErrorLevelEnabled);

      EXIT(Direction = Direction::Import);
    END;

    LOCAL PROCEDURE UpdateErrorLevel@1000000016(VAR pErrorLevel@1000000001 : '0,1,2,3,4,5,6,7,8,9';VAR pErrorLevelEnabled@1000000000 : Boolean);
    BEGIN
      //DOC NA2015.4 - Updating error level parameters
      //  <> pErrorLevel: Error level
      //  <> pErrorLevelEnabled: Error level enabled flag

      CASE (Direction) OF
        Direction::Export:
          pErrorLevel := ErrorLevel::" ";
        Direction::Import:
          IF (pErrorLevel = ErrorLevel::" ") THEN
            pErrorLevel := ErrorLevel::Confirmations;
      END;

      pErrorLevelEnabled := (Direction = Direction::Import);
    END;

    PROCEDURE FinalMessage@1000000020();
    VAR
      eMessage@1000000000 : TextConst 'ENU="""%1"" finished successfully.";ENG="""%1"" finished successfully."';
    BEGIN
      //DOC NA2015.4 - Showing final message

      IF (GetSilentMode()) THEN
        EXIT;

      IF (HasLogMessages()) THEN
        ShowLogMessages()
      ELSE
        MESSAGE(eMessage, GetXmlPortName());
    END;

    PROCEDURE "--- System Behaviour ---"@1000000022();
    BEGIN
    END;

    PROCEDURE GetSilentMode@1000000023() : Boolean;
    BEGIN
      //DOC NA2015.8 - Getting silent mode flag (system behaviour)
      //  <- The flag

      EXIT(UniversalVariables.GetBooleanVar(tMigrationSilentModeSysB));
    END;

    PROCEDURE SetSilentMode@1000000024(pSilentMode@1000000000 : Boolean);
    BEGIN
      //DOC NA2015.8 - Setting silent mode flag (system behaviour)
      //  -> pSilentMode: The flag

      UniversalVariables.SetBooleanVar(tMigrationSilentModeSysB, pSilentMode);
    END;

    PROCEDURE "--- Header Functions ---"@1000000002();
    BEGIN
    END;

    PROCEDURE GetXmlPortId@1000000010() : Integer;
    BEGIN
      //DOC NA2015.4 - Returning XMLport ID
      //  <- The ID

      EXIT(XmlPortId);
    END;

    PROCEDURE GetXmlPortIdText@1000000017() : Text;
    BEGIN
      //DOC NA2015.4 - Returning XMLport ID text
      //  <- The ID text

      EXIT(FORMAT(XmlPortId, 0, 1));
    END;

    PROCEDURE GetXmlPortName@1000000021() : Text;
    VAR
      eUnknownXmlPort@1000000001 : TextConst 'ENU="Unknown XMLport - with ID = %1.";ENG="Unknown XMLport - with ID = %1."';
      lObject@1000000002 : Record 2000000001;
    BEGIN
      //DOC NA2015.4 - Returning XMLport name
      //  <- XMLport name or XMLport ID if the XMLport can't be found

      lObject.RESET();
      lObject.SETRANGE(Type, lObject.Type::XMLport);
      lObject.SETRANGE(ID, XmlPortId);
      IF (lObject.FINDFIRST()) THEN
        EXIT(lObject.Name)
      ELSE
        EXIT(FORMAT(lObject.ID, 0, 1));
    END;

    PROCEDURE GetXmlPortVersion@1000000003() : Text;
    VAR
      eUnknownXmlPort@1000000001 : TextConst 'ENU="Unknown XMLport - with ID = %1.";ENG="Unknown XMLport - with ID = %1."';
      lObject@1000000002 : Record 2000000001;
    BEGIN
      //DOC NA2015.4 - Returning XMLport version
      //  <- XMLport version or empty string if the XMLport can't be found

      lObject.RESET();
      lObject.SETRANGE(Type, lObject.Type::XMLport);
      lObject.SETRANGE(ID, XmlPortId);
      IF ( NOT (lObject.FINDFIRST())) THEN
        ErrorMessage(STRSUBSTNO(eUnknownXmlPort, XmlPortId));

      EXIT(lObject."Version List");
    END;

    PROCEDURE CheckXmlPortId@1000000006(pXmlPortIdFromFile@1000000001 : Text);
    VAR
      lXmlPortIdFromFile@1000000002 : Integer;
      eCannotRetrieveId@1000000003 : TextConst 'ENU="Cannot validate XMLport ID from the file you are importing. The flie has ID = ""%1"".";ENG="Cannot validate XMLport ID from the file you are importing. The flie has ID = ""%1""."';
      eIdsDontMatch@1000000004 : TextConst 'ENU=XMLport ID (%1) doesn''t match the one read from file you are importing (%2).;ENG=XMLport ID (%1) doesn''t match the one read from file you are importing (%2).';
    BEGIN
      //DOC NA2015.4 - Checking XMLport ID
      //  -> pXmlPortIdFromFile: XMLport ID (from file; as text)

      IF ( NOT (EVALUATE(lXmlPortIdFromFile, pXmlPortIdFromFile))) THEN
        ErrorMessage(STRSUBSTNO(eCannotRetrieveId, pXmlPortIdFromFile));

      IF (XmlPortId <> lXmlPortIdFromFile) THEN
        ErrorMessage(STRSUBSTNO(eIdsDontMatch, XmlPortId, lXmlPortIdFromFile));
    END;

    PROCEDURE CheckXmlPortVersion@1000000007(pXmlPortVersionFromFile@1000000001 : Text);
    VAR
      lXmlPortVersion@1000000000 : Text;
      eVersionsDontMatch@1000000003 : TextConst 'ENU=The XMLport version (%1) doesn''t match the one read from the file you are importing (%2).;ENG=The XMLport version (%1) doesn''t match the one read from the file you are importing (%2).';
    BEGIN
      //DOC NA2015.4 - Checking XMLport version
      //  -> pXmlPortVersionFromFile: XMLport version (from file)

      lXmlPortVersion := GetXmlPortVersion();

      IF (pXmlPortVersionFromFile <> lXmlPortVersion) THEN
        ErrorMessage(STRSUBSTNO(eVersionsDontMatch, lXmlPortVersion, pXmlPortVersionFromFile));
    END;

    PROCEDURE "--- Tool Functions ---"@1000000018();
    BEGIN
    END;

    LOCAL PROCEDURE ErrorMessage@1000000019(pMessage@1000000000 : Text);
    VAR
      eConfirmation@1000000001 : TextConst 'ENU=Do you want to continue?;ENG=Do you want to continue?';
      eImportStopped@1000000002 : TextConst 'ENU=Import has been stopped.;ENG=Import has been stopped.';
    BEGIN
      //DOC NA2016.11 - Raising error message (depending on "Error Level" parameter - have a look to the top of the codeunit)
      //  -> pMessage: The message

      CASE (ErrorLevel) OF
        ErrorLevel::Errors:
          ERROR(pMessage);
        ErrorLevel::Warnings:
          MESSAGE(pMessage);
        ErrorLevel::Nothing:
          ;
        ELSE
          IF ( NOT (GetSilentMode())) THEN
            IF ( NOT (CONFIRM(pMessage + ' ' + eConfirmation))) THEN
              ERROR(eImportStopped);
      END;
    END;

    PROCEDURE "--- Direction ---"@1000000014();
    BEGIN
    END;

    PROCEDURE Direction_Export@1000000012() : Integer;
    BEGIN
      //DOC NA2015.4 - Returning "Export" value of "Direction" parameter
      //  <- The value

      EXIT(Direction::Export);
    END;

    PROCEDURE Direction_Import@1000000013() : Integer;
    BEGIN
      //DOC NA2015.4 - Returning "Import" value of "Direction" parameter
      //  <- The value

      EXIT(Direction::Import);
    END;

    PROCEDURE "--- Error Level ---"@1000000015();
    BEGIN
    END;

    PROCEDURE ErrorLevel_Errors@1000000001() : Integer;
    BEGIN
      //DOC NA2015.4 - Returning "Errors" value of "Error Level" parameter
      //  <- The value

      EXIT(ErrorLevel::Errors);
    END;

    PROCEDURE ErrorLevel_Confirmations@1000000011() : Integer;
    BEGIN
      //DOC NA2015.4 - Returning "Confirmations" value of "Error Level" parameter
      //  <- The value

      EXIT(ErrorLevel::Confirmations);
    END;

    PROCEDURE ErrorLevel_Warnings@1000000004() : Integer;
    BEGIN
      //DOC NA2015.4 - Returning "Warnings" value of "Error Level" parameter
      //  <- The value

      EXIT(ErrorLevel::Warnings);
    END;

    PROCEDURE ErrorLevel_Nothing@1000000005() : Integer;
    BEGIN
      //DOC NA2015.4 - Returning "Nothing" value of "Error Level" parameter
      //  <- The value

      EXIT(ErrorLevel::Nothing);
    END;

    PROCEDURE "--- Relation Checking ---"@1000000040();
    BEGIN
    END;

    PROCEDURE SetRecord@1000000038(pTableId@1000000000 : Integer;pRecord@1000000001 : Variant);
    VAR
      lRecordRef@1000000002 : RecordRef;
      lKeyRef@1000000003 : KeyRef;
      lFieldRef@1000000004 : FieldRef;
      lFieldCount@1000000006 : Integer;
      lFieldIndex@1000000005 : Integer;
      lFieldValue@1000000009 : Text;
      lTableText@1000000008 : Text;
      lFieldText@1000000007 : Text;
    BEGIN
      //DOC NA2016.10 - Setting record
      //  -> pTableId: Table ID
      //  -> pRecord: The record

      lTableText := ObjectFieldToolkit.GetTableName(pTableId);
      lFieldText := '';
      lRecordRef.OPEN(pTableId);
      lRecordRef.GETTABLE(pRecord);
      RecordTableId := lRecordRef.NUMBER();
      RecordPosition := lRecordRef.GETPOSITION(FALSE);
      lKeyRef := lRecordRef.KEYINDEX(1);
      lFieldCount := lKeyRef.FIELDCOUNT();
      FOR lFieldIndex := 1 TO lFieldCount DO
      BEGIN
        lFieldRef := lKeyRef.FIELDINDEX(lFieldIndex);
        lFieldValue := FORMAT(lFieldRef.VALUE, 0, 1);
        IF (lFieldValue <> '') THEN
        BEGIN
          IF (lFieldText <> '') THEN
            lFieldText := lFieldText + ', ';
          lFieldText := lFieldText + lFieldValue;
        END;
      END;
      lRecordRef.CLOSE();

      IF (lFieldText <> '') THEN
        RecordDescription := STRSUBSTNO('%1 %2', lTableText, lFieldText)
      ELSE
        RecordDescription := lTableText;
    END;

    PROCEDURE CheckRelation_Int@9062284(pRelationTableId@9062229 : Integer;VAR pRelationFieldValue@9062231 : Integer;pInsertRelationRecord@9062235 : Boolean) : Boolean;
    VAR
      lResult@9062234 : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking relation (int version)
      //  -> pRelationTableId: Relation table ID
      //  <> pRelationFieldValue: Relation field value
      //  -> pInsertRelationRecord: TRUE = Insert relation record, FALSE = Clear field
      //  <- TRUE = Relation checked and OK, FALSE = Action taken to fix the relation

      lResult := CheckAndUpdateRelation(pRelationTableId, pRelationFieldValue, DummyFieldValue, DummyFieldValue, pInsertRelationRecord);
      IF ( NOT (lResult)) THEN
        CLEAR(pRelationFieldValue);
      EXIT(lResult);
    END;

    PROCEDURE CheckRelation_Code@9062235(pRelationTableId@9062235 : Integer;VAR pRelationFieldValue@9062230 : Code[250];pInsertRelationRecord@9062232 : Boolean) : Boolean;
    VAR
      lResult@9062234 : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking relation (code version)
      //  -> pRelationTableId: Relation table ID
      //  <> pRelationFieldValue: Relation field value
      //  -> pInsertRelationRecord: TRUE = Insert relation record, FALSE = Clear field
      //  <- TRUE = Relation checked and OK, FALSE = Action taken to fix the relation

      lResult := CheckAndUpdateRelation(pRelationTableId, pRelationFieldValue, DummyFieldValue, DummyFieldValue, pInsertRelationRecord);
      IF ( NOT (lResult)) THEN
        CLEAR(pRelationFieldValue);
      EXIT(lResult);
    END;

    PROCEDURE CheckRelation_Text@9062231(pRelationTableId@9062235 : Integer;VAR pRelationFieldValue@9062230 : Text;pInsertRelationRecord@9062232 : Boolean) : Boolean;
    VAR
      lResult@9062234 : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking relation (text version)
      //  -> pRelationTableId: Relation table ID
      //  <> pRelationFieldValue: Relation field value
      //  -> pInsertRelationRecord: TRUE = Insert relation record, FALSE = Clear field
      //  <- TRUE = Relation checked and OK, FALSE = Action taken to fix the relation

      lResult := CheckAndUpdateRelation(pRelationTableId, pRelationFieldValue, DummyFieldValue, DummyFieldValue, pInsertRelationRecord);
      IF ( NOT (lResult)) THEN
        CLEAR(pRelationFieldValue);
      EXIT(lResult);
    END;

    PROCEDURE CheckRelation_Guid@1000000029(pRelationTableId@9062235 : Integer;VAR pRelationFieldValue@9062230 : GUID;pInsertRelationRecord@9062232 : Boolean) : Boolean;
    VAR
      lResult@9062234 : Boolean;
    BEGIN
      //DOC NA2016.11 - Checking relation (GUID version)
      //  -> pRelationTableId: Relation table ID
      //  <> pRelationFieldValue: Relation field value
      //  -> pInsertRelationRecord: TRUE = Insert relation record, FALSE = Clear field
      //  <- TRUE = Relation checked and OK, FALSE = Action taken to fix the relation

      lResult := CheckAndUpdateRelation(pRelationTableId, pRelationFieldValue, DummyFieldValue, DummyFieldValue, pInsertRelationRecord);
      IF ( NOT (lResult)) THEN
        CLEAR(pRelationFieldValue);
      EXIT(lResult);
    END;

    PROCEDURE CheckRelation_IntInt@9062233(pRelationTableId@9062232 : Integer;VAR pRelationField1Value@9062230 : Integer;VAR pRelationField2Value@9062233 : Integer;pInsertRelationRecord@9062236 : Boolean) : Boolean;
    VAR
      lResult@9062234 : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking relation (int + int version)
      //  -> pRelationTableId: Relation table ID
      //  <> pRelationField1Value: Relation field 1 value
      //  <> pRelationField2Value: Relation field 2 value
      //  -> pInsertRelationRecord: TRUE = Insert relation record, FALSE = Clear field
      //  <- TRUE = Relation checked and OK, FALSE = Action taken to fix the relation

      lResult := CheckAndUpdateRelation(pRelationTableId, pRelationField1Value, pRelationField2Value, DummyFieldValue, pInsertRelationRecord);
      IF ( NOT (lResult)) THEN
      BEGIN
        CLEAR(pRelationField1Value);
        CLEAR(pRelationField2Value);
      END;
      EXIT(lResult);
    END;

    PROCEDURE CheckRelation_IntCode@9062232(pRelationTableId@9062237 : Integer;VAR pRelationField1Value@9062235 : Integer;VAR pRelationField2Value@9062230 : Code[250];pInsertRelationRecord@9062238 : Boolean) : Boolean;
    VAR
      lResult@9062234 : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking relation (int + code version)
      //  -> pRelationTableId: Relation table ID
      //  <> pRelationField1Value: Relation field 1 value
      //  <> pRelationField2Value: Relation field 2 value
      //  -> pInsertRelationRecord: TRUE = Insert relation record, FALSE = Clear field
      //  <- TRUE = Relation checked and OK, FALSE = Action taken to fix the relation

      lResult := CheckAndUpdateRelation(pRelationTableId, pRelationField1Value, pRelationField2Value, DummyFieldValue, pInsertRelationRecord);
      IF ( NOT (lResult)) THEN
      BEGIN
        CLEAR(pRelationField1Value);
        CLEAR(pRelationField2Value);
      END;
      EXIT(lResult);
    END;

    PROCEDURE CheckRelation_CodeCode@9062229(pRelationTableId@9062237 : Integer;VAR pRelationField1Value@9062235 : Code[250];VAR pRelationField2Value@9062230 : Code[250];pInsertRelationRecord@9062229 : Boolean) : Boolean;
    VAR
      lResult@9062234 : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking relation (code + code version)
      //  -> pRelationTableId: Relation table ID
      //  <> pRelationField1Value: Relation field 1 value
      //  <> pRelationField2Value: Relation field 2 value
      //  -> pInsertRelationRecord: TRUE = Insert relation record, FALSE = Clear field
      //  <- TRUE = Relation checked and OK, FALSE = Action taken to fix the relation

      lResult := CheckAndUpdateRelation(pRelationTableId, pRelationField1Value, pRelationField2Value, DummyFieldValue, pInsertRelationRecord);
      IF ( NOT (lResult)) THEN
      BEGIN
        CLEAR(pRelationField1Value);
        CLEAR(pRelationField2Value);
      END;
      EXIT(lResult);
    END;

    PROCEDURE CheckRelation_ConstInt@9062234(pRelationTableId@9062232 : Integer;pRelationField1Value@9062230 : Variant;VAR pRelationField2Value@9062233 : Integer;pInsertRelationRecord@9062236 : Boolean) : Boolean;
    VAR
      lResult@9062229 : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking relation (const + int version)
      //  -> pRelationTableId: Relation table ID
      //  -> pRelationField1Value: Relation field 1 value
      //  <> pRelationField2Value: Relation field 2 value
      //  -> pInsertRelationRecord: TRUE = Insert relation record, FALSE = Clear field
      //  <- TRUE = Relation checked and OK, FALSE = Action taken to fix the relation

      lResult := CheckAndUpdateRelation(pRelationTableId, pRelationField1Value, pRelationField2Value, DummyFieldValue, pInsertRelationRecord);
      IF ( NOT (lResult)) THEN
        CLEAR(pRelationField2Value);
      EXIT(lResult);
    END;

    PROCEDURE CheckRelation_ConstCode@9062236(pRelationTableId@9062237 : Integer;pRelationField1Value@9062235 : Variant;VAR pRelationField2Value@9062230 : Code[250];pInsertRelationRecord@9062238 : Boolean) : Boolean;
    VAR
      lResult@9062234 : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking relation (const + code version)
      //  -> pRelationTableId: Relation table ID
      //  -> pRelationField1Value: Relation field 1 value
      //  <> pRelationField2Value: Relation field 2 value
      //  -> pInsertRelationRecord: TRUE = Insert relation record, FALSE = Clear field
      //  <- TRUE = Relation checked and OK, FALSE = Action taken to fix the relation

      lResult := CheckAndUpdateRelation(pRelationTableId, pRelationField1Value, pRelationField2Value, DummyFieldValue, pInsertRelationRecord);
      IF ( NOT (lResult)) THEN
        CLEAR(pRelationField2Value);
      EXIT(lResult);
    END;

    PROCEDURE CheckRelation_ConstText@9062238(pRelationTableId@9062237 : Integer;pRelationField1Value@9062235 : Variant;VAR pRelationField2Value@9062230 : Text;pInsertRelationRecord@9062238 : Boolean) : Boolean;
    VAR
      lResult@9062234 : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking relation (const + text version)
      //  -> pRelationTableId: Relation table ID
      //  -> pRelationField1Value: Relation field 1 value
      //  <> pRelationField2Value: Relation field 2 value
      //  -> pInsertRelationRecord: TRUE = Insert relation record, FALSE = Clear field
      //  <- TRUE = Relation checked and OK, FALSE = Action taken to fix the relation

      lResult := CheckAndUpdateRelation(pRelationTableId, pRelationField1Value, pRelationField2Value, DummyFieldValue, pInsertRelationRecord);
      IF ( NOT (lResult)) THEN
        CLEAR(pRelationField2Value);
      EXIT(lResult);
    END;

    LOCAL PROCEDURE CheckAndUpdateRelation@9062230(pRelationTableId@9062236 : Integer;pRelationField1Value@9062234 : Variant;pRelationField2Value@9062232 : Variant;pRelationField3Value@9062230 : Variant;pInsertRelationRecord@9062240 : Boolean) : Boolean;
    VAR
      lLogType@9062238 : Integer;
      lLogDescriptionTemplate@9062231 : Text;
      lResult@9062229 : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking and updating relation
      //  -> pRelationTableId: Relation table ID
      //  -> pRelationField1Value: Relation field 1 value
      //  -> pRelationField2Value: Relation field 2 value
      //  -> pRelationField3Value: Relation field 3 value
      //  -> pInsertRelationRecord: TRUE = Insert relation record, FALSE = Clear field
      //  <- TRUE = Relation checked and OK or default action taken to fix the relation, FALSE = Specific fix action required

      lResult := FindRelationRecord(pRelationTableId, pRelationField1Value, pRelationField2Value, pRelationField3Value);
      IF ( NOT (lResult)) THEN
      BEGIN
        IF (pInsertRelationRecord) THEN
        BEGIN
          lLogType := AutoNavLogEntry.Type::Warning;
          lLogDescriptionTemplate := tHasBeenCreated;
        END
        ELSE
        BEGIN
          lLogType := AutoNavLogEntry.Type::Error;
          lLogDescriptionTemplate := tCantBetFound;
        END;
        AddToLog(lLogType, STRSUBSTNO(lLogDescriptionTemplate, RelationRecordDescription));
        IF (pInsertRelationRecord) THEN
          IF ( NOT (InsertRelationRecordCustom())) THEN
            InsertRelationRecord();
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE FindRelationRecord@9062237(pRelationTableId@9062229 : Integer;pRelationField1Value@9062234 : Variant;pRelationField2Value@9062232 : Variant;pRelationField3Value@9062230 : Variant) : Boolean;
    VAR
      lRelationFieldValues@9062231 : ARRAY [3] OF Variant;
      lRecordRef@9062233 : RecordRef;
      lKeyRef@9062235 : KeyRef;
      lFieldRef@9062236 : FieldRef;
      lFieldIndex@9062237 : Integer;
      eTooManyFieldsInPK@9062238 : TextConst 'ENU="Table ""%1"" (%2) has too many fields in its primary key; migration doesn''t support it.";ENG="Table ""%1"" (%2) has too many fields in its primary key; migration doesn''t support it."';
      lFieldsDescription@9062239 : Text;
      lFieldValuesNonEmpty@9062241 : Boolean;
      lFieldValueNonEmpty@9062242 : Boolean;
      lResult@9062240 : Boolean;
    BEGIN
      //DOC NA2016.10 - Settting relation record
      //  -> pRelationTableId: Relation table ID
      //  <> pRelationField1Value: Relation field 1 value
      //  <> pRelationField2Value: Relation field 2 value
      //  <> pRelationField3Value: Relation field 3 value
      //  <- TRUE = Relation record found, FALSE = Not

      RelationTableId := pRelationTableId;
      ClearRelationFields();
      AddRelationField(pRelationField1Value);
      AddRelationField(pRelationField2Value);
      AddRelationField(pRelationField3Value);

      RelationRecordDescription := ObjectFieldToolkit.GetTableName(RelationTableId);

      lFieldValuesNonEmpty := FALSE;

      lRecordRef.OPEN(RelationTableId);
      lKeyRef := lRecordRef.KEYINDEX(1);
      IF (lKeyRef.FIELDCOUNT > ARRAYLEN(RelationFields)) THEN
        ERROR(eTooManyFieldsInPK, RelationRecordDescription);
      FOR lFieldIndex := 1 TO lKeyRef.FIELDCOUNT DO
      BEGIN
        lFieldRef := lKeyRef.FIELDINDEX(lFieldIndex);
        RelationFields[lFieldIndex]."Field ID" := lFieldRef.NUMBER;
        FieldRefTools.TextToFieldRef(FORMAT(RelationFields[lFieldIndex]."Field Value", 0, 1), lFieldRef);
        lFieldValueNonEmpty := ( NOT (FieldRefTools.FieldRefValueIsEmpty(lFieldRef)));
        IF (lFieldValueNonEmpty) THEN
        BEGIN
          lFieldRef.SETRANGE(lFieldRef.VALUE);
          IF (lFieldsDescription <> '') THEN
            lFieldsDescription := lFieldsDescription + ', ';
          lFieldsDescription := lFieldsDescription + FORMAT(lFieldRef.VALUE, 0, 1);
          lFieldValuesNonEmpty := TRUE;
        END;
      END;

      IF (lFieldsDescription <> '') THEN
        RelationRecordDescription := RelationRecordDescription + ' ' + lFieldsDescription;

      IF (lFieldValuesNonEmpty) THEN
        lResult := ( NOT (lRecordRef.ISEMPTY()))
      ELSE
        lResult := TRUE;

      lRecordRef.CLOSE();

      EXIT(lResult);
    END;

    LOCAL PROCEDURE InsertRelationRecord@9062286();
    VAR
      lRecordRef@9062230 : RecordRef;
      lKeyRef@9062231 : KeyRef;
      lFieldRef@9062229 : FieldRef;
      lFieldIndex@9062232 : Integer;
    BEGIN
      //DOC NA2016.10 - Inserting relation record

      lRecordRef.OPEN(RelationTableId);
      FOR lFieldIndex := 1 TO ARRAYLEN(RelationFields) DO
      BEGIN
        lFieldRef := lRecordRef.FIELDINDEX(RelationFields[lFieldIndex]."Field ID");
        FieldRefTools.TextToFieldRef(RelationFields[lFieldIndex]."Field Value", lFieldRef);
        lFieldRef.VALIDATE();
      END;
      lRecordRef.INSERT();
      lRecordRef.CLOSE();
    END;

    LOCAL PROCEDURE InsertRelationRecordCustom@9062290() : Boolean;
    VAR
      lNoSeriesToolkit@9062231 : Codeunit 9062598;
      lResult@9062229 : Boolean;
    BEGIN
      //DOC NA2016.10 - Inserting relation record for custom records
      //  <- TRUE = Custom code executed, FALSE = No, fire generic code

      lResult := FALSE;

      CASE (RelationTableId) OF
        DATABASE::"No. Series":
          BEGIN
            lNoSeriesToolkit.CreateNoSeries(RelationFields[1]."Field Value", '');
            lResult := TRUE;
          END;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE ClearRelationFields@9062243();
    BEGIN
      //DOC NA2016.10 - Clearing relation fields

      CLEAR(RelationFields);
      CLEAR(RelationFieldIndex);
    END;

    LOCAL PROCEDURE AddRelationField@9062244(pRelationFieldValue@9062230 : Variant);
    BEGIN
      //DOC NA2016.10 - Adding relation field
      //  -> pRelationFieldValue: Relation field value

      RelationFieldIndex += 1;
      RelationFields[RelationFieldIndex]."Table ID" := RelationTableId;
      RelationFields[RelationFieldIndex]."Field Value" := FORMAT(pRelationFieldValue, 0, 1);
    END;

    PROCEDURE "--- Specific Relation Checking ---"@9062239();
    BEGIN
    END;

    PROCEDURE CheckObjectRelation@9062240(pObjectType@9062229 : Integer;VAR pObjectId@9062230 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking object relation
      //  -> pObjectType: Object type
      //  <> pObjectId: Source / target object ID
      //  <- TRUE = Relation checked and OK, FALSE = ID cleared

      EXIT(CheckRelation_ConstInt(DATABASE::AllObj, pObjectType, pObjectId, FALSE));
    END;

    PROCEDURE CheckTableRelation@9062246(VAR pTableId@9062229 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking table relation
      //  <> pTableId: Source / target table ID
      //  <- TRUE = Relation checked and OK, FALSE = ID cleared

      EXIT(CheckObjectRelation(AllObj."Object Type"::Table, pTableId));
    END;

    PROCEDURE CheckReportRelation@9062250(VAR pReportId@9062229 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking report relation
      //  <> pReportId: Source / target report ID
      //  <- TRUE = Relation checked and OK, FALSE = ID cleared

      EXIT(CheckObjectRelation(AllObj."Object Type"::Report, pReportId));
    END;

    PROCEDURE CheckCodeunitRelation@9062249(VAR pCodeunitId@9062229 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking codeunit relation
      //  <> pCodeunitId: Source / target codeunit ID
      //  <- TRUE = Relation checked and OK, FALSE = ID cleared

      EXIT(CheckObjectRelation(AllObj."Object Type"::Codeunit, pCodeunitId));
    END;

    PROCEDURE CheckXmlPortRelation@9062248(VAR pXmlPortId@9062229 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking XMLport relation
      //  <> pXmlPortId: Source / target XMLport ID
      //  <- TRUE = Relation checked and OK, FALSE = ID cleared

      EXIT(CheckObjectRelation(AllObj."Object Type"::XMLport, pXmlPortId));
    END;

    PROCEDURE CheckPageRelation@9062251(VAR pPageId@9062229 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking page relation
      //  <> pPageId: Source / target page ID
      //  <- TRUE = Relation checked and OK, FALSE = ID cleared

      EXIT(CheckObjectRelation(AllObj."Object Type"::Page, pPageId));
    END;

    PROCEDURE CheckQueryRelation@9062253(VAR pQueryId@9062229 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking query relation
      //  <> pQueryId: Source / target query ID
      //  <- TRUE = Relation checked and OK, FALSE = ID cleared

      EXIT(CheckObjectRelation(AllObj."Object Type"::Query, pQueryId));
    END;

    PROCEDURE CheckFieldRelation@9062257(pTableId@9062229 : Integer;VAR pFieldId@9062230 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking field relation
      //  -> pTableId: Table ID
      //  <> pFieldId: Source / target field ID
      //  <- TRUE = Relation checked and OK, FALSE = ID cleared

      EXIT(CheckRelation_ConstInt(DATABASE::Field, pTableId, pFieldId, FALSE));
    END;

    PROCEDURE CheckFieldRelationAdv@9062258(pTableId@9062230 : Integer;pFieldType@9062231 : Integer;VAR pFieldId@9062229 : Integer) : Boolean;
    VAR
      lTableField@9062232 : Record 9062231;
      lResult@9062233 : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking field relation (advanced)
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type (0 = Empty, 1 = Field, 2 = Enhanced Field)
      //  <> pFieldId: Source / target field ID
      //  <- TRUE = Relation checked and OK, FALSE = ID cleared

      lResult := FALSE;

      CASE (pFieldType) OF
        lTableField."Field Type"::Field:
          lResult := CheckFieldRelation(pTableId, pFieldId);
        lTableField."Field Type"::"Enhanced Field":
          lResult := CheckRelation_ConstInt(DATABASE::"Enhanced Field Definition", pTableId, pFieldId, FALSE);
        ELSE
          CLEAR(pFieldId);
      END;

      EXIT(lResult);
    END;

    PROCEDURE CheckFieldRelationOld@9062259(pTableId@9062230 : Integer;pFieldType@9062231 : Integer;VAR pFieldId@9062229 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.10 - Checking field relation (old)
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type (0 = Field, 1 = Enhanced Field)
      //  <> pFieldId: Source / target field ID
      //  <- TRUE = Relation checked and OK, FALSE = ID cleared

      EXIT(CheckFieldRelationAdv(pTableId, pFieldType - 1, pFieldId));
    END;

    PROCEDURE "--- Criteria Manipulation ---"@1000000027();
    BEGIN
    END;

    PROCEDURE VerifyCriteriaId@1000000028(VAR pCriteria@1000000000 : Record 9062626) : Boolean;
    VAR
      lCriteria@1000000001 : Record 9062626;
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2016.10 - Detecting if criteria exists already and - if yes - giving it a new ID
      //  <> pCriteria: The criteria
      //  <- TRUE = Criteria ID unique, no change necessary, FALSE = Criteria ID changed, update required

      lResult := TRUE;

      IF (lCriteria.GET(pCriteria.ID)) THEN
        IF ((lCriteria."Attached-to Table ID" <> pCriteria."Attached-to Table ID") OR
            (lCriteria."Attached-to Position" <> pCriteria."Attached-to Position")) THEN
        BEGIN
          lCriteria.RESET();
          IF (lCriteria.FINDLAST()) THEN
            pCriteria.ID := lCriteria.ID + 1
          ELSE
            pCriteria.ID := 1;
          lResult := FALSE;
        END;

      EXIT(lResult);
    END;

    PROCEDURE BeforeExportCriteria@1000000036(VAR pCriteria@1000000000 : Record 9062626);
    BEGIN
      //DOC NA2016.12 - Executed before criteria export
      //  <> pCriteria: The criteria
    END;

    PROCEDURE ExportCriteria@1000000034(pCriteriaId@1000000000 : Integer;VAR pCriteria@1000000003 : Record 9062626;VAR pCriteriaField@1000000004 : Record 9062627);
    VAR
      lCriteria@1000000001 : Record 9062626;
      lCriteriaField@1000000002 : Record 9062627;
    BEGIN
      //DOC NA2016.12 - Adding criteria to export buffers
      //  -> pCriteriaId: Criteria ID
      //  <> pCriteria: Target criteria buffer
      //  <> pCriteriaField: Target criteria field buffer

      IF (pCriteriaId = 0) THEN
        EXIT;
      IF (pCriteria.GET(pCriteriaId)) THEN
        EXIT;

      lCriteria.GET(pCriteriaId);
      pCriteria.TRANSFERFIELDS(lCriteria);
      pCriteria.INSERT();

      lCriteriaField.RESET();
      lCriteriaField.SETRANGE("Criteria ID", lCriteria.ID);
      IF (lCriteriaField.FINDSET()) THEN
      REPEAT
        pCriteriaField.TRANSFERFIELDS(lCriteriaField);
        pCriteriaField.INSERT();
      UNTIL (lCriteriaField.NEXT() = 0);
    END;

    PROCEDURE ClearCriteriaImportBuffers@1000000035();
    BEGIN
      //DOC NA2016.12 - Clearing criteria import buffers

      CriteriaBuffer.RESET();
      CriteriaBuffer.DELETEALL();
    END;

    PROCEDURE BeforeImportCriteria@1000000033(VAR pCriteria@1000000000 : Record 9062626);
    BEGIN
      //DOC NA2016.12 - Executed before criteria import
      //  <> pCriteria: The criteria

      pCriteria.SetSystemActivity(TRUE);
      SetRecord(DATABASE::Criteria, pCriteria);
      CheckTableRelation(pCriteria."Table ID");
      CheckTableRelation(pCriteria."Attached-to Table ID");
      CheckTableRelation(pCriteria."Filter Source Table Id");
    END;

    PROCEDURE BeforeImportCriteriaField@1000000041(VAR pCriteriaField@1000000000 : Record 9062627);
    BEGIN
      //DOC NA2016.12 - Executed before criteria field import
      //  <> pCriteria: The criteria

      pCriteriaField.SetSystemActivity(TRUE);
      SetRecord(DATABASE::"Criteria Field", pCriteriaField);
    END;

    PROCEDURE AddCriteriaToImportBuffer@1000000037(VAR pCriteriaId@1000000000 : Integer;pFieldId@1000000001 : Integer);
    BEGIN
      //DOC NA2016.12 - Adding criteria to import buffer
      //  <> pCriteriaId: Criteria ID (cleared after addition)
      //  -> pFieldId: Field ID

      IF (pCriteriaId <> 0) THEN
      BEGIN
        CriteriaBuffer.Add(pCriteriaId, RecordTableId, RecordPosition, pFieldId);
        pCriteriaId := 0;
      END;
    END;

    PROCEDURE ImportCriteria@1000000032(VAR pCriteria@1000000004 : Record 9062626;VAR pCriteriaField@1000000003 : Record 9062627);
    VAR
      lCriteria@1000000000 : Record 9062626;
      lCriteriaField@1000000001 : Record 9062627;
      lRecordRef@1000000002 : RecordRef;
      lFieldRef@1000000006 : FieldRef;
    BEGIN
      //DOC NA2016.12 - Importing criteria
      //  <> pCriteria: Criteria buffer
      //  <> pCriteriaField: Criteria field buffer

      CriteriaBuffer.RESET();
      IF (CriteriaBuffer.FINDSET()) THEN
      REPEAT
        IF (pCriteria.GET(CriteriaBuffer."Criteria ID")) THEN
        BEGIN
          lRecordRef.OPEN(CriteriaBuffer."Table ID");
          lRecordRef.SETPOSITION(CriteriaBuffer.Position);
          lRecordRef.SETRECFILTER();
          IF (lRecordRef.FINDFIRST()) THEN
          BEGIN
            lCriteria.SetSystemActivity(TRUE);
            lCriteria.TRANSFERFIELDS(pCriteria);
            lCriteria.ID := 0;
            lCriteria.INSERT(TRUE);
            lCriteria.SetSystemActivity(FALSE);

            pCriteriaField.RESET();
            pCriteriaField.SETRANGE("Criteria ID", pCriteria.ID);
            IF (pCriteriaField.FINDSET()) THEN
            REPEAT
              lCriteriaField.SetSystemActivity(TRUE);
              lCriteriaField.TRANSFERFIELDS(pCriteriaField);
              lCriteriaField.ID := 0;
              lCriteriaField."Criteria ID" := lCriteria.ID;
              lCriteriaField.INSERT(TRUE);
              lCriteriaField.SetSystemActivity(FALSE);
            UNTIL (pCriteriaField.NEXT() = 0);

            lFieldRef := lRecordRef.FIELD(CriteriaBuffer."Field ID");
            lFieldRef.VALUE(lCriteria.ID);
            lRecordRef.MODIFY();
          END;
          lRecordRef.CLOSE();
        END;
      UNTIL (CriteriaBuffer.NEXT() = 0);
    END;

    LOCAL PROCEDURE "--- Log Manipulation ---"@1000000031();
    BEGIN
    END;

    PROCEDURE AddToLog@1000000030(pType@1000000010 : Integer;pDescription@1000000000 : Text);
    VAR
      TxtErrorMsg@1000000012 : TextConst 'ENU=NAV Log Entry - ERROR;ENG=NAV Log Entry - ERROR';
    BEGIN
      //DOC NA2016.10 - Adding error to log
      //  -> pDescription: Log description to add

      CLEAR(AutoNavLogEntry);
      AutoNavLogEntry.INIT();
      AutoNavLogEntry.VALIDATE("DateTime Logged", CURRENTDATETIME);
      AutoNavLogEntry.VALIDATE(Source, tAutoNavLogEntrySource);
      AutoNavLogEntry.VALIDATE(Type, pType);
      AutoNavLogEntry.SetDescription(STRSUBSTNO('XMLport "%1"; %2: %3', XmlPortName, RecordDescription, pDescription));
      AutoNavLogEntry.VALIDATE("User ID", USERID());
      AutoNavLogEntry.INSERT(TRUE);

      IF (AutoNavLogEntryNo = 0) THEN
        AutoNavLogEntryNo := AutoNavLogEntry."Entry No.";
    END;

    PROCEDURE HasLogMessages@1000000026() : Boolean;
    BEGIN
      //DOC NA2016.10 - Returning if log messages have been collected
      //  <- Response

      EXIT(AutoNavLogEntryNo > 0);
    END;

    PROCEDURE ShowLogMessages@1000000025();
    BEGIN
      //DOC NA2016.10 - Showing log messages

      COMMIT;


      AutoNavLogEntry.RESET();

      AutoNavLogEntry.FILTERGROUP(2);
      AutoNavLogEntry.SETFILTER("Entry No.", '>=%1', AutoNavLogEntryNo);
      AutoNavLogEntry.SETRANGE(Source, tAutoNavLogEntrySource);
      AutoNavLogEntry.FILTERGROUP(0);

      PAGE.RUN(0, AutoNavLogEntry);
    END;

    BEGIN
    {
      //DOC NA2015.4  JH 02/02/2015 - Created
      //DOC NA2015.8  JH 27/07/2015 - Silent mode added
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.11 JH 27/11/2015 - Bugfixes
      //DOC NA2016.11 JH 02/12/2015 - GUID relation check added
      //DOC NA2016.12 JH 05/01/2016 - Criteria functions
    }
    END.
  }
}

