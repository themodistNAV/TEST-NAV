OBJECT Report 7318 Whse.-Shipment - Create Pick
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Whse.-Shipment - Create Pick;
               ENG=Whse.-Shipment - Create Pick];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CLEAR(CreatePick);
                  EverythingHandled := TRUE;
                END;

    OnPostReport=VAR
                   WhseActivHeader@1000 : Record 5766;
                   TempWhseItemTrkgLine@1001 : TEMPORARY Record 6550;
                   ItemTrackingMgt@1002 : Codeunit 6500;
                 BEGIN
                   CreatePick.CreateWhseDocument(FirstActivityNo,LastActivityNo,TRUE);

                   CreatePick.ReturnTempItemTrkgLines(TempWhseItemTrkgLine);
                   ItemTrackingMgt.UpdateWhseItemTrkgLines(TempWhseItemTrkgLine);

                   WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
                   WhseActivHeader.SETRANGE("No.",FirstActivityNo,LastActivityNo);
                   IF WhseActivHeader.FIND('-') THEN BEGIN
                     REPEAT
                       IF SortActivity > 0 THEN
                         WhseActivHeader.SortWhseDoc;
                     UNTIL WhseActivHeader.NEXT = 0;

                     IF PrintDoc THEN
                       REPORT.RUN(REPORT::"Picking List",FALSE,FALSE,WhseActivHeader);
                   END ELSE
                     ERROR(NothingToHandleErr);
                 END;

  }
  DATASET
  {
    { 6896;    ;DataItem;                    ;
               DataItemTable=Table7321;
               DataItemTableView=SORTING(No.,Line No.);
               OnPreDataItem=BEGIN
                               CreatePick.SetValues(
                                 AssignedID,1,SortActivity,1,0,0,FALSE,DoNotFillQtytoHandle,BreakbulkFilter,FALSE);

                               COPYFILTERS(WhseShptLine);
                               SETFILTER("Qty. (Base)",'>0');
                             END;

               OnAfterGetRecord=VAR
                                  QtyToPick@1002 : Decimal;
                                  QtyToPickBase@1001 : Decimal;
                                BEGIN
                                  IF Location."Directed Put-away and Pick" THEN
                                    CheckBin(0,0);

                                  WhseWkshLine.RESET;
                                  WhseWkshLine.SETCURRENTKEY(
                                    "Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
                                  WhseWkshLine.SETRANGE(
                                    "Whse. Document Type",WhseWkshLine."Whse. Document Type"::Shipment);
                                  WhseWkshLine.SETRANGE("Whse. Document No.",WhseShptHeader."No.");

                                  WhseWkshLine.SETRANGE("Whse. Document Line No.","Line No.");
                                  IF NOT WhseWkshLine.FINDFIRST THEN BEGIN
                                    TESTFIELD("Qty. per Unit of Measure");
                                    CALCFIELDS("Pick Qty. (Base)","Pick Qty.");
                                    QtyToPickBase := "Qty. (Base)" - ("Qty. Picked (Base)" + "Pick Qty. (Base)");
                                    QtyToPick := Quantity - ("Qty. Picked" + "Pick Qty.");
                                    IF QtyToPick > 0 THEN BEGIN
                                      IF "Destination Type" = "Destination Type"::Customer THEN BEGIN
                                        TESTFIELD("Destination No.");
                                        Cust.GET("Destination No.");
                                        Cust.CheckBlockedCustOnDocs(Cust,"Source Document",FALSE,FALSE);
                                      END;

                                      CreatePick.SetWhseShipment(
                                        "Warehouse Shipment Line",1,WhseShptHeader."Shipping Agent Code",
                                        WhseShptHeader."Shipping Agent Service Code",WhseShptHeader."Shipment Method Code");
                                      IF NOT "Assemble to Order" THEN BEGIN
                                        CreatePick.SetTempWhseItemTrkgLine(
                                          "No.",DATABASE::"Warehouse Shipment Line",
                                          '',0,"Line No.","Location Code");
                                        CreatePick.CreateTempLine(
                                          "Location Code","Item No.","Variant Code","Unit of Measure Code",
                                          '',"Bin Code","Qty. per Unit of Measure",QtyToPick,QtyToPickBase);
                                      END;
                                    END;
                                  END ELSE
                                    WhseWkshLineFound := TRUE;
                                END;

               OnPostDataItem=VAR
                                TempWhseItemTrkgLine@1000 : TEMPORARY Record 6550;
                                ItemTrackingMgt@1001 : Codeunit 6500;
                              BEGIN
                                CreatePick.ReturnTempItemTrkgLines(TempWhseItemTrkgLine);
                                IF TempWhseItemTrkgLine.FIND('-') THEN
                                  REPEAT
                                    ItemTrackingMgt.CalcWhseItemTrkgLine(TempWhseItemTrkgLine);
                                  UNTIL TempWhseItemTrkgLine.NEXT = 0;
                              END;
                               }

    { 3252;1   ;DataItem;                    ;
               DataItemTable=Table900;
               DataItemTableView=SORTING(Document Type,No.);
               OnPreDataItem=VAR
                               SalesLine@1000 : Record 37;
                             BEGIN
                               IF NOT "Warehouse Shipment Line"."Assemble to Order" THEN
                                 CurrReport.BREAK;

                               SalesLine.GET("Warehouse Shipment Line"."Source Subtype",
                                 "Warehouse Shipment Line"."Source No.",
                                 "Warehouse Shipment Line"."Source Line No.");
                               SalesLine.AsmToOrderExists("Assembly Header");
                               SETRANGE("Document Type","Document Type");
                               SETRANGE("No.","No.");
                             END;
                              }

    { 6911;2   ;DataItem;                    ;
               DataItemTable=Table901;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               OnPreDataItem=BEGIN
                               SETRANGE(Type,Type::Item);
                               SETFILTER("Remaining Quantity (Base)",'>0');

                               WhseWkshLine.SETCURRENTKEY(
                                 "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
                               WhseWkshLine.SETRANGE("Source Type",DATABASE::"Assembly Line");
                               WhseWkshLine.SETRANGE("Source Subtype","Assembly Header"."Document Type");
                               WhseWkshLine.SETRANGE("Source No.","Assembly Header"."No.");
                             END;

               OnAfterGetRecord=VAR
                                  WMSMgt@1001 : Codeunit 7302;
                                BEGIN
                                  WMSMgt.CheckInboundBlockedBin("Location Code","Bin Code","No.","Variant Code","Unit of Measure Code");

                                  WhseWkshLine.SETRANGE("Source Line No.","Line No.");
                                  IF NOT WhseWkshLine.FINDFIRST THEN
                                    CreatePick.CreateAssemblyPickLine("Assembly Line")
                                  ELSE
                                    WhseWkshLineFound := TRUE;
                                END;

               DataItemLink=Document Type=FIELD(Document Type),
                            Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   IF Location."Use ADCS" THEN
                     DoNotFillQtytoHandle := TRUE;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Assigned User ID;
                             ENG=Assigned User ID];
                  SourceExpr=AssignedID;
                  TableRelation="Warehouse Employee";
                  OnValidate=VAR
                               WhseEmployee@1000 : Record 7301;
                             BEGIN
                               IF AssignedID <> '' THEN
                                 WhseEmployee.GET(AssignedID,Location.Code);
                             END;

                  OnLookup=VAR
                             WhseEmployee@1001 : Record 7301;
                             LookupWhseEmployee@1000 : Page 7348;
                           BEGIN
                             WhseEmployee.SETCURRENTKEY("Location Code");
                             WhseEmployee.SETRANGE("Location Code",Location.Code);
                             LookupWhseEmployee.LOOKUPMODE(TRUE);
                             LookupWhseEmployee.SETTABLEVIEW(WhseEmployee);
                             IF LookupWhseEmployee.RUNMODAL = ACTION::LookupOK THEN BEGIN
                               LookupWhseEmployee.GETRECORD(WhseEmployee);
                               AssignedID := WhseEmployee."User ID";
                             END;
                           END;
                            }

      { 2   ;2   ;Field     ;
                  Name=SortingMethodForActivityLines;
                  CaptionML=[ENU=Sorting Method for Activity Lines;
                             ENG=Sorting Method for Activity Lines];
                  OptionCaptionML=[ENU=" ,Item,Document,Shelf or Bin,Due Date,Destination,Bin Ranking,Action Type";
                                   ENG=" ,Item,Document,Shelf or Bin,Due Date,Destination,Bin Ranking,Action Type"];
                  SourceExpr=SortActivity;
                  MultiLine=Yes }

      { 9   ;2   ;Field     ;
                  CaptionML=[ENU=Set Breakbulk Filter;
                             ENG=Set Breakbulk Filter];
                  SourceExpr=BreakbulkFilter }

      { 11  ;2   ;Field     ;
                  CaptionML=[ENU=Do Not Fill Qty. to Handle;
                             ENG=Do Not Fill Qty. to Handle];
                  SourceExpr=DoNotFillQtytoHandle }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Print Document;
                             ENG=Print Document];
                  SourceExpr=PrintDoc }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Location@1027 : Record 14;
      WhseShptHeader@1007 : Record 7320;
      WhseShptLine@1012 : Record 7321;
      WhseWkshLine@1019 : Record 7326;
      Cust@1006 : Record 18;
      CreatePick@1003 : Codeunit 7312;
      FirstActivityNo@1002 : Code[20];
      LastActivityNo@1001 : Code[20];
      AssignedID@1008 : Code[50];
      SortActivity@1005 : ' ,Item,Document,Shelf or Bin,Due Date,Destination,Bin Ranking,Action Type';
      PrintDoc@1004 : Boolean;
      EverythingHandled@1017 : Boolean;
      WhseWkshLineFound@1020 : Boolean;
      HideValidationDialog@1022 : Boolean;
      DoNotFillQtytoHandle@1014 : Boolean;
      BreakbulkFilter@1029 : Boolean;
      SingleActivCreatedMsg@1011 : TextConst '@@@="%1=WhseActivHeader.Type;%2=Whse. Activity No.;%3=Concatenates ExpiredItemMessageText";ENU=%1 activity no. %2 has been created.%3;ENG=%1 activity no. %2 has been created.%3';
      SingleActivAndWhseShptCreatedMsg@1021 : TextConst '@@@="%1=WhseActivHeader.Type;%2=Whse. Activity No.;%3=WhseActivHeader.Type;%4=Concatenates ExpiredItemMessageText";ENU=%1 activity no. %2 has been created.\For Warehouse Shipment lines that have existing Pick Worksheet lines, no %3 lines have been created.%4;ENG=%1 activity no. %2 has been created.\For Warehouse Shipment lines that have existing Pick Worksheet lines, no %3 lines have been created.%4';
      MultipleActivCreatedMsg@1010 : TextConst '@@@="%1=WhseActivHeader.Type;%2=First Whse. Activity No.;%3=Last Whse. Activity No.;%4=Concatenates ExpiredItemMessageText";ENU=%1 activities no. %2 to %3 have been created.%4;ENG=%1 activities no. %2 to %3 have been created.%4';
      MultipleActivAndWhseShptCreatedMsg@1024 : TextConst '@@@="%1=WhseActivHeader.Type;%2=First Whse. Activity No.;%3=Last Whse. Activity No.;%4=WhseActivHeader.Type;%5=Concatenates ExpiredItemMessageText";ENU=%1 activities no. %2 to %3 have been created.\For Warehouse Shipment lines that have existing Pick Worksheet lines, no %4 lines have been created.%5;ENG=%1 activities no. %2 to %3 have been created.\For Warehouse Shipment lines that have existing Pick Worksheet lines, no %4 lines have been created.%5';
      NothingToHandleErr@1023 : TextConst 'ENU=There is nothing to handle.;ENG=There is nothing to handle.';

    PROCEDURE SetWhseShipmentLine@1(VAR WhseShptLine2@1000 : Record 7321;WhseShptHeader2@1001 : Record 7320);
    BEGIN
      WhseShptLine.COPY(WhseShptLine2);
      WhseShptHeader := WhseShptHeader2;
      AssignedID := WhseShptHeader2."Assigned User ID";
      GetLocation(WhseShptLine."Location Code");
    END;

    PROCEDURE GetResultMessage@3() : Boolean;
    VAR
      WhseActivHeader@1000 : Record 5766;
      ExpiredItemMessageText@1001 : Text[100];
    BEGIN
      ExpiredItemMessageText := CreatePick.GetExpiredItemMessage;
      IF FirstActivityNo = '' THEN
        EXIT(FALSE);

      IF NOT HideValidationDialog THEN BEGIN
        WhseActivHeader.Type := WhseActivHeader.Type::Pick;
        IF WhseWkshLineFound THEN BEGIN
          IF FirstActivityNo = LastActivityNo THEN
            MESSAGE(
              STRSUBSTNO(
                SingleActivAndWhseShptCreatedMsg,FORMAT(WhseActivHeader.Type),FirstActivityNo,
                FORMAT(WhseActivHeader.Type),ExpiredItemMessageText))
          ELSE
            MESSAGE(
              STRSUBSTNO(
                MultipleActivAndWhseShptCreatedMsg,FORMAT(WhseActivHeader.Type),FirstActivityNo,LastActivityNo,
                FORMAT(WhseActivHeader.Type),ExpiredItemMessageText));
        END ELSE BEGIN
          IF FirstActivityNo = LastActivityNo THEN
            MESSAGE(
              STRSUBSTNO(SingleActivCreatedMsg,FORMAT(WhseActivHeader.Type),FirstActivityNo,ExpiredItemMessageText))
          ELSE
            MESSAGE(
              STRSUBSTNO(MultipleActivCreatedMsg,FORMAT(WhseActivHeader.Type),
                FirstActivityNo,LastActivityNo,ExpiredItemMessageText));
        END;
      END;
      EXIT(EverythingHandled);
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetLocation@7(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN BEGIN
        IF LocationCode = '' THEN
          CLEAR(Location)
        ELSE
          Location.GET(LocationCode);
      END;
    END;

    PROCEDURE Initialize@9(AssignedID2@1004 : Code[50];SortActivity2@1002 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking,Action Type';PrintDoc2@1001 : Boolean;DoNotFillQtytoHandle2@1000 : Boolean;BreakbulkFilter2@1003 : Boolean);
    BEGIN
      AssignedID := AssignedID2;
      SortActivity := SortActivity2;
      PrintDoc := PrintDoc2;
      DoNotFillQtytoHandle := DoNotFillQtytoHandle2;
      BreakbulkFilter := BreakbulkFilter2;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

