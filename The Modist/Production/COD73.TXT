OBJECT Codeunit 73 Purch.-Explode BOM
{
  OBJECT-PROPERTIES
  {
    Date=23/09/13;
    Time=12:00:00 PM;
    Version List=NAVW17.10;
  }
  PROPERTIES
  {
    TableNo=39;
    OnRun=BEGIN
            TESTFIELD(Type,Type::Item);
            TESTFIELD("Quantity Received",0);
            TESTFIELD("Return Qty. Shipped",0);
            TESTFIELD("Reserved Qty. (Base)",0);
            IF "Sales Order No." <> '' THEN
              ERROR(
                Text000,
                "Sales Order No.");

            PurchHeader.GET("Document Type","Document No.");
            PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
            FromBOMComp.SETRANGE("Parent Item No.","No.");
            NoOfBOMComp := FromBOMComp.COUNT;
            IF NoOfBOMComp = 0 THEN
              ERROR(
                Text001,
                "No.");

            Selection := STRMENU(Text005,2);
            IF Selection = 0 THEN
              EXIT;

            ToPurchLine := Rec;
            ToPurchLine.INIT;
            ToPurchLine.Description := Description;
            ToPurchLine."Description 2" := "Description 2";
            ToPurchLine.MODIFY;

            IF TransferExtendedText.PurchCheckIfAnyExtText(ToPurchLine,FALSE) THEN
              TransferExtendedText.InsertPurchExtText(ToPurchLine);

            ExplodeBOMCompLines(Rec);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The BOM cannot be exploded on the purchase lines because it is associated with sales order %1.;ENG=The BOM cannot be exploded on the purchase lines because it is associated with sales order %1.';
      Text001@1001 : TextConst 'ENU=Item %1 is not a BOM.;ENG=Item %1 is not a BOM.';
      Text003@1002 : TextConst 'ENU=There is not enough space to explode the BOM.;ENG=There is not enough space to explode the BOM.';
      Text004@1003 : TextConst 'ENU=You cannot purchase resources. Resource %1 was not transferred.;ENG=You cannot purchase resources. Resource %1 was not transferred.';
      Text005@1004 : TextConst 'ENU=&Copy dimensions from BOM,&Retrieve dimensions from components;ENG=&Copy dimensions from BOM,&Retrieve dimensions from components';
      ToPurchLine@1005 : Record 39;
      FromBOMComp@1006 : Record 90;
      PurchHeader@1007 : Record 38;
      ItemTranslation@1008 : Record 30;
      Item@1009 : Record 27;
      UOMMgt@1010 : Codeunit 5402;
      TransferExtendedText@1015 : Codeunit 378;
      LineSpacing@1011 : Integer;
      NextLineNo@1012 : Integer;
      NoOfBOMComp@1013 : Integer;
      Selection@1014 : Integer;

    LOCAL PROCEDURE ExplodeBOMCompLines@1(PurchLine@1000 : Record 39);
    VAR
      PreviousPurchLine@1001 : Record 39;
    BEGIN
      WITH PurchLine DO BEGIN
        ToPurchLine.RESET;
        ToPurchLine.SETRANGE("Document Type","Document Type");
        ToPurchLine.SETRANGE("Document No.","Document No.");
        ToPurchLine := PurchLine;
        IF ToPurchLine.FIND('>') THEN BEGIN
          LineSpacing := (ToPurchLine."Line No." - "Line No.") DIV (1 + NoOfBOMComp);
          IF LineSpacing = 0 THEN
            ERROR(Text003);
        END ELSE
          LineSpacing := 10000;

        FromBOMComp.FIND('-');
        NextLineNo := "Line No.";
        REPEAT
          ToPurchLine.INIT;
          NextLineNo := NextLineNo + LineSpacing;
          ToPurchLine."Line No." := NextLineNo;
          CASE FromBOMComp.Type OF
            FromBOMComp.Type::" ":
              ToPurchLine.Type := ToPurchLine.Type::" ";
            FromBOMComp.Type::Item:
              BEGIN
                Item.GET(FromBOMComp."No.");
                ToPurchLine.Type := ToPurchLine.Type::Item;
                ToPurchLine.VALIDATE("No.",FromBOMComp."No.");
                ToPurchLine.VALIDATE("Variant Code",FromBOMComp."Variant Code");
                ToPurchLine.VALIDATE("Unit of Measure Code",FromBOMComp."Unit of Measure Code");
                ToPurchLine."Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,ToPurchLine."Unit of Measure Code");
                ToPurchLine.VALIDATE(
                  Quantity,
                  ROUND(
                    "Quantity (Base)" * FromBOMComp."Quantity per" *
                    UOMMgt.GetQtyPerUnitOfMeasure(Item,ToPurchLine."Unit of Measure Code") /
                    ToPurchLine."Qty. per Unit of Measure",
                    0.00001));
              END;
            FromBOMComp.Type::Resource:
              ToPurchLine.Type := ToPurchLine.Type::"3"; // Resource
          END;

          IF (FromBOMComp.Type <> FromBOMComp.Type::" ") AND
             (PurchHeader."Expected Receipt Date" <> "Expected Receipt Date")
          THEN
            ToPurchLine.VALIDATE("Expected Receipt Date","Expected Receipt Date");

          IF PurchHeader."Language Code" = '' THEN
            ToPurchLine.Description := FromBOMComp.Description
          ELSE
            IF NOT ItemTranslation.GET(FromBOMComp."No.",FromBOMComp."Variant Code",PurchHeader."Language Code") THEN
              ToPurchLine.Description := FromBOMComp.Description;
          IF ToPurchLine.Type = ToPurchLine.Type::"3" THEN // Resource
            MESSAGE(
              Text004,
              FromBOMComp."No.")
          ELSE
            ToPurchLine.INSERT;

          IF Selection = 1 THEN BEGIN
            ToPurchLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
            ToPurchLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
            ToPurchLine."Dimension Set ID" := "Dimension Set ID";
            ToPurchLine.MODIFY;
          END;

          IF PreviousPurchLine."Document No." <> '' THEN
            IF TransferExtendedText.PurchCheckIfAnyExtText(PreviousPurchLine,FALSE) THEN
              TransferExtendedText.InsertPurchExtText(PreviousPurchLine);

          PreviousPurchLine := ToPurchLine;
        UNTIL FromBOMComp.NEXT = 0;

        IF TransferExtendedText.PurchCheckIfAnyExtText(ToPurchLine,FALSE) THEN
          TransferExtendedText.InsertPurchExtText(ToPurchLine);
      END;
    END;

    BEGIN
    END.
  }
}

