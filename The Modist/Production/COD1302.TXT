OBJECT Codeunit 1302 Mini Customer Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00,NAVGB9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NewCustQst@1001 : TextConst 'ENU=This customer is not registered. Do you want to create a new customer card for customer %1?;ENG=This customer is not registered. Do you want to create a new customer card for customer %1?';
      SelectCustErr@1000 : TextConst 'ENU=You must select an existing customer.;ENG=You must select an existing customer.';
      CustomerFieldType@1002 : 'SellTo,BillTo';
      ChangeCustomerAndUpdateLineQst@1004 : TextConst 'ENU=If you change the Customer, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\Do you want to change the Customer?;ENG=If you change the Customer, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\Do you want to change the Customer?';
      ChangeBillToCustomerAndUpdateLineQst@1006 : TextConst 'ENU=If you change the Bill-to Customer No., the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\Do you want to change the Bill-to Customer No.?;ENG=If you change the Bill-to Customer No., the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\Do you want to change the Bill-to Customer No.?';
      FiscalYearTotals@1003 : Boolean;

    PROCEDURE AvgDaysToPay@2(CustNo@1000 : Code[20]) : Decimal;
    VAR
      CustLedgEntry@1015 : Record 21;
      CustLedgEntry2@1014 : Record 21;
      AvgDaysToPay@1006 : Decimal;
      TotalDaysToPay@1005 : Decimal;
      TotalNoOfInv@1004 : Integer;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        AvgDaysToPay := 0;
        SETCURRENTKEY("Customer No.","Posting Date");
        SetFilterForPostedDocs(CustLedgEntry,CustNo,"Document Type"::Invoice);
        SETRANGE(Open,FALSE);

        IF FINDSET THEN
          REPEAT
            CASE TRUE OF
              "Closed at Date" > "Posting Date":
                UpdateDaysToPay("Closed at Date" - "Posting Date",TotalDaysToPay,TotalNoOfInv);
              "Closed by Entry No." <> 0:
                BEGIN
                  IF CustLedgEntry2.GET("Closed by Entry No.") THEN
                    UpdateDaysToPay(CustLedgEntry2."Posting Date" - "Posting Date",TotalDaysToPay,TotalNoOfInv);
                END;
              ELSE BEGIN
                CustLedgEntry2.SETCURRENTKEY("Closed by Entry No.");
                CustLedgEntry2.SETRANGE("Closed by Entry No.","Entry No.");
                IF CustLedgEntry2.FINDFIRST THEN
                  UpdateDaysToPay(CustLedgEntry2."Posting Date" - "Posting Date",TotalDaysToPay,TotalNoOfInv);
              END;
            END;
          UNTIL NEXT = 0;
      END;

      IF TotalNoOfInv <> 0 THEN
        AvgDaysToPay := TotalDaysToPay / TotalNoOfInv;

      EXIT(AvgDaysToPay);
    END;

    LOCAL PROCEDURE UpdateDaysToPay@3(NoOfDays@1000 : Integer;VAR TotalDaysToPay@1002 : Decimal;VAR TotalNoOfInv@1001 : Integer);
    BEGIN
      TotalDaysToPay += NoOfDays;
      TotalNoOfInv += 1;
    END;

    PROCEDURE CalculateStatistic@1(Customer@1022 : Record 18;VAR AdjmtCostLCY@1017 : Decimal;VAR AdjCustProfit@1015 : Decimal;VAR AdjProfitPct@1014 : Decimal;VAR CustInvDiscAmountLCY@1011 : Decimal;VAR CustPaymentsLCY@1004 : Decimal;VAR CustSalesLCY@1002 : Decimal;VAR CustProfit@1001 : Decimal);
    VAR
      CostCalcuMgt@1023 : Codeunit 5836;
    BEGIN
      WITH Customer DO BEGIN
        SETFILTER("Date Filter",GetCurrentYearFilter);

        CALCFIELDS("Sales (LCY)","Profit (LCY)","Inv. Discounts (LCY)","Payments (LCY)");

        // Costs (LCY):
        CustSalesLCY := "Sales (LCY)";
        CustProfit := "Profit (LCY)" + CostCalcuMgt.NonInvtblCostAmt(Customer);
        AdjmtCostLCY := CustSalesLCY - CustProfit + CostCalcuMgt.CalcCustActualCostLCY(Customer);
        AdjCustProfit := CustProfit + AdjmtCostLCY;

        // Profit %
        IF "Sales (LCY)" <> 0 THEN
          AdjProfitPct := ROUND(100 * AdjCustProfit / "Sales (LCY)",0.1)
        ELSE
          AdjProfitPct := 0;

        CustInvDiscAmountLCY := "Inv. Discounts (LCY)";

        CustPaymentsLCY := "Payments (LCY)";
      END;
    END;

    PROCEDURE CalcAmountsOnPostedInvoices@4(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      CustLedgEntry@1004 : Record 21;
    BEGIN
      EXIT(CalcAmountsOnPostedDocs(CustNo,RecCount,CustLedgEntry."Document Type"::Invoice));
    END;

    PROCEDURE CalcAmountsOnPostedCrMemos@5(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      CustLedgEntry@1004 : Record 21;
    BEGIN
      EXIT(CalcAmountsOnPostedDocs(CustNo,RecCount,CustLedgEntry."Document Type"::"Credit Memo"));
    END;

    PROCEDURE CalcAmountsOnOrders@33(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      SalesHeader@1004 : Record 36;
    BEGIN
      EXIT(CalculateAmountsOnUnpostedDocs(CustNo,RecCount,SalesHeader."Document Type"::Order));
    END;

    PROCEDURE CalcAmountsOnQuotes@34(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      SalesHeader@1004 : Record 36;
    BEGIN
      EXIT(CalculateAmountsOnUnpostedDocs(CustNo,RecCount,SalesHeader."Document Type"::Quote));
    END;

    LOCAL PROCEDURE CalcAmountsOnPostedDocs@22(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer;DocType@1001 : Integer) : Decimal;
    VAR
      CustLedgEntry@1004 : Record 21;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        SetFilterForPostedDocs(CustLedgEntry,CustNo,DocType);

        RecCount := COUNT;

        CALCSUMS("Sales (LCY)");
        EXIT("Sales (LCY)");
      END;
    END;

    PROCEDURE CalculateAmountsWithVATOnUnpostedDocuments@16(CustNo@1000 : Code[20]) : Decimal;
    VAR
      SalesLine@1002 : Record 37;
      Result@1001 : Decimal;
      DocumentType@1003 : Integer;
    BEGIN
      DocumentType := -1; // All supported Documents Type
      SetFilterForUnpostedLines(SalesLine,CustNo,DocumentType,TRUE);
      WITH SalesLine DO BEGIN
        IF FINDSET THEN
          REPEAT
            CASE "Document Type" OF
              "Document Type"::Invoice:
                Result += "Outstanding Amount (LCY)";
              "Document Type"::"Credit Memo":
                Result -= "Outstanding Amount (LCY)";
            END;
          UNTIL NEXT = 0;
      END;

      EXIT(Result);
    END;

    PROCEDURE CalculateAmountsOnUnpostedInvoices@8(CustNo@1001 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      EXIT(CalculateAmountsOnUnpostedDocs(CustNo,RecCount,SalesLine."Document Type"::Invoice));
    END;

    PROCEDURE CalculateAmountsOnUnpostedCrMemos@9(CustNo@1001 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      EXIT(CalculateAmountsOnUnpostedDocs(CustNo,RecCount,SalesLine."Document Type"::"Credit Memo"));
    END;

    LOCAL PROCEDURE CalculateAmountsOnUnpostedDocs@11(CustNo@1001 : Code[20];VAR RecCount@1000 : Integer;DocumentType@1003 : Integer) : Decimal;
    VAR
      SalesLine@1002 : Record 37;
      Result@1005 : Decimal;
      VAT@1006 : Decimal;
      OutstandingAmount@1007 : Decimal;
      OldDocumentNo@1008 : Code[20];
    BEGIN
      RecCount := 0;
      Result := 0;

      SetFilterForUnpostedLines(SalesLine,CustNo,DocumentType,FALSE);
      WITH SalesLine DO BEGIN
        IF FINDSET THEN
          REPEAT
            CASE "Document Type" OF
              "Document Type"::Invoice,
              "Document Type"::Order,
              "Document Type"::Quote:
                OutstandingAmount := "Outstanding Amount (LCY)";
              "Document Type"::"Credit Memo":
                OutstandingAmount := -"Outstanding Amount (LCY)";
            END;
            VAT := 100 + "VAT %";
            Result += OutstandingAmount * 100 / VAT;

            IF OldDocumentNo <> "Document No." THEN BEGIN
              OldDocumentNo := "Document No.";
              RecCount += 1;
            END;
          UNTIL NEXT = 0;
      END;

      EXIT(ROUND(Result));
    END;

    PROCEDURE DrillDownOnPostedInvoices@20(CustNo@1001 : Code[20]);
    VAR
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      WITH SalesInvoiceHeader DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);

        PAGE.RUN(PAGE::"Mini Posted Sales Invoices",SalesInvoiceHeader);
      END;
    END;

    PROCEDURE DrillDownOnPostedCrMemo@6(CustNo@1001 : Code[20]);
    VAR
      SalesCrMemoHeader@1000 : Record 114;
    BEGIN
      WITH SalesCrMemoHeader DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);

        PAGE.RUN(PAGE::"Mini Posted Sales Credit Memos",SalesCrMemoHeader);
      END;
    END;

    PROCEDURE DrillDownOnOrders@19(CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      WITH SalesHeader DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        SETRANGE("Document Type","Document Type"::Order);

        PAGE.RUN(PAGE::"Sales Order List",SalesHeader);
      END;
    END;

    PROCEDURE DrillDownOnQuotes@23(CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      WITH SalesHeader DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        SETRANGE("Document Type","Document Type"::Quote);

        PAGE.RUN(PAGE::"Mini Sales Quotes List",SalesHeader);
      END;
    END;

    PROCEDURE DrillDownMoneyOwedExpected@17(CustNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      SetFilterForUnpostedDocs(SalesHeader,CustNo,-1);
      PAGE.RUN(PAGE::"Mini Sales Credit Memos",SalesHeader)
    END;

    PROCEDURE DrillDownOnUnpostedInvoices@15(CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SetFilterForUnpostedDocs(SalesHeader,CustNo,SalesHeader."Document Type"::Invoice);
      PAGE.RUN(PAGE::"Mini Sales Invoice List",SalesHeader)
    END;

    PROCEDURE DrillDownOnUnpostedCrMemos@14(CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SetFilterForUnpostedDocs(SalesHeader,CustNo,SalesHeader."Document Type"::"Credit Memo");
      PAGE.RUN(PAGE::"Mini Sales Credit Memos",SalesHeader)
    END;

    LOCAL PROCEDURE SetFilterForUnpostedDocs@7(VAR SalesHeader@1003 : Record 36;CustNo@1002 : Code[20];DocumentType@1000 : Integer);
    BEGIN
      WITH SalesHeader DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);

        IF DocumentType = -1 THEN
          SETFILTER("Document Type",'%1|%2',"Document Type"::Invoice,"Document Type"::"Credit Memo")
        ELSE
          SETRANGE("Document Type",DocumentType);
      END;
    END;

    LOCAL PROCEDURE SetFilterForUnpostedLines@12(VAR SalesLine@1003 : Record 37;CustNo@1002 : Code[20];DocumentType@1000 : Integer;Posted@1001 : Boolean);
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        IF Posted THEN
          SETFILTER("Posting Date",GetCurrentYearFilter);

        IF DocumentType = -1 THEN
          SETFILTER("Document Type",'%1|%2',"Document Type"::Invoice,"Document Type"::"Credit Memo")
        ELSE
          SETRANGE("Document Type",DocumentType);
      END;
    END;

    LOCAL PROCEDURE SetFilterForPostedDocs@27(VAR CustLedgEntry@1002 : Record 21;CustNo@1001 : Code[20];DocumentType@1000 : Integer);
    BEGIN
      WITH CustLedgEntry DO BEGIN
        SETRANGE("Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);
        SETRANGE("Document Type",DocumentType);
      END;
    END;

    PROCEDURE GetCurrentYearFilter@10() : Text[30];
    VAR
      Calendar@1040001 : Record 2000000007;
      PeriodFormMgt@1040000 : Codeunit 359;
      PeriodType@1040002 : 'Day,Week,Month,Quarter,Year';
      CustDateFilter@1001 : Text[30];
      CustDateName@1000 : Text[30];
    BEGIN
      PeriodFormMgt.FindDate('',Calendar,PeriodType::Year);
      CustDateFilter := PeriodFormMgt.BuildDateFilter(Calendar);

      EXIT(CustDateFilter);
    END;

    PROCEDURE GetCustNoByName@56(CustomerName@1000 : Text[50]) : Code[20];
    VAR
      Customer@1001 : Record 18;
      CustomerNo@1002 : Code[20];
    BEGIN
      Customer.SETRANGE(Name,CustomerName);
      IF Customer.COUNT = 1 THEN BEGIN
        Customer.FINDFIRST;
        EXIT(Customer."No.");
      END;

      CLEAR(Customer);
      Customer.SETFILTER(Name,'''@*' + CustomerName + '*''');
      CASE Customer.COUNT OF
        0:
          BEGIN
            IF CONFIRM(NewCustQst,TRUE,CustomerName) THEN
              EXIT(CreateNewCustomer(CustomerName));
            ERROR(SelectCustErr);
          END;
        1:
          BEGIN
            Customer.FINDFIRST;
            EXIT(Customer."No.");
          END;
        ELSE BEGIN
          CustomerNo := PickCustomer(Customer);
          IF CustomerNo = '' THEN
            ERROR(SelectCustErr);
          EXIT(CustomerNo);
        END;
      END;
    END;

    LOCAL PROCEDURE CreateNewCustomer@59(CustomerName@1000 : Text[50]) : Code[20];
    VAR
      Customer@1005 : Record 18;
      MiniCustomerTemplate@1006 : Record 1300;
      MiniCustomerCard@1002 : Page 1300;
      NewCustomerCode@1007 : Code[20];
    BEGIN
      NewCustomerCode := MiniCustomerTemplate.NewCustomerFromTemplate;
      IF NewCustomerCode = '' THEN
        ERROR(SelectCustErr);

      Customer.GET(NewCustomerCode);
      Customer.Name := CustomerName;
      Customer.MODIFY(TRUE);
      COMMIT;
      MiniCustomerCard.SETRECORD(Customer);
      IF NOT (MiniCustomerCard.RUNMODAL = ACTION::OK) THEN
        ERROR(SelectCustErr);

      MiniCustomerCard.GETRECORD(Customer);

      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE PickCustomer@58(VAR Customer@1000 : Record 18) : Code[20];
    VAR
      MiniCustomerList@1001 : Page 1301;
    BEGIN
      MiniCustomerList.SETTABLEVIEW(Customer);
      MiniCustomerList.SETRECORD(Customer);
      MiniCustomerList.LOOKUPMODE := TRUE;
      IF MiniCustomerList.RUNMODAL = ACTION::LookupOK THEN
        MiniCustomerList.GETRECORD(Customer);

      EXIT(Customer."No.");
    END;

    PROCEDURE LookupSellToCustomer@13(VAR SalesHeader@1002 : Record 36;VAR OldSalesHeader@1003 : Record 36) : Boolean;
    BEGIN
      EXIT(LookupCustomer(SalesHeader,OldSalesHeader,CustomerFieldType::SellTo));
    END;

    PROCEDURE LookupBillToCustomer@61(VAR SalesHeader@1003 : Record 36;VAR OldSalesHeader@1002 : Record 36) : Boolean;
    BEGIN
      EXIT(LookupCustomer(SalesHeader,OldSalesHeader,CustomerFieldType::BillTo));
    END;

    PROCEDURE ValidateSellToCustomer@60(VAR SalesHeader@1003 : Record 36;VAR OldSalesHeader@1002 : Record 36) : Boolean;
    VAR
      NewCustomerNo@1001 : Code[20];
    BEGIN
      IF SalesHeader."Sell-to Customer Name" <> OldSalesHeader."Sell-to Customer Name" THEN BEGIN
        NewCustomerNo := GetCustNoByName(SalesHeader."Sell-to Customer Name");
        UpdateCustomer(SalesHeader,NewCustomerNo,CustomerFieldType::SellTo);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ValidateBillToCustomer@62(VAR SalesHeader@1003 : Record 36;VAR OldSalesHeader@1002 : Record 36) : Boolean;
    VAR
      NewCustomerNo@1000 : Code[20];
    BEGIN
      IF SalesHeader."Bill-to Name" <> OldSalesHeader."Bill-to Name" THEN BEGIN
        NewCustomerNo := GetCustNoByName(SalesHeader."Bill-to Name");
        UpdateCustomer(SalesHeader,NewCustomerNo,CustomerFieldType::BillTo);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE LookupCustomer@66(VAR SalesHeader@1000 : Record 36;VAR OldSalesHeader@1002 : Record 36;CustomerField@1003 : 'SellTo,BillTo') : Boolean;
    VAR
      Customer@1005 : Record 18;
      NewCustomerNo@1001 : Code[20];
      CurrCustomerNo@1006 : Code[20];
      OldCustomerNo@1007 : Code[20];
    BEGIN
      IF CustomerField = CustomerFieldType::SellTo THEN BEGIN
        CurrCustomerNo := SalesHeader."Sell-to Customer No.";
        OldCustomerNo := OldSalesHeader."Sell-to Customer No.";
      END ELSE BEGIN
        CurrCustomerNo := SalesHeader."Bill-to Customer No.";
        OldCustomerNo := OldSalesHeader."Bill-to Customer No.";
      END;

      IF CurrCustomerNo <> '' THEN
        Customer.GET(CurrCustomerNo);

      NewCustomerNo := PickCustomer(Customer);

      IF NewCustomerNo = '' THEN
        EXIT(FALSE);

      IF NewCustomerNo <> OldCustomerNo THEN BEGIN
        UpdateCustomer(SalesHeader,NewCustomerNo,CustomerField);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE UpdateCustomer@63(VAR SalesHeader@1003 : Record 36;NewCustomerNo@1001 : Code[20];CustomerField@1000 : 'SellTo,BillTo');
    VAR
      MiniSalesCalcDiscByType@1002 : Codeunit 1300;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF CustomerField = CustomerFieldType::SellTo THEN BEGIN
          IF ("No." = '') OR ("Document Date" = 0D) THEN
            InitRecord;
          SetHideValidationDialog(TRUE);
          IF NOT SalesLinesExist THEN BEGIN
            CheckCreditLimit(SalesHeader,GetBillToCustomer(NewCustomerNo));
            VALIDATE("Sell-to Customer No.",NewCustomerNo)
          END ELSE
            IF CONFIRM(ChangeCustomerAndUpdateLineQst,TRUE) THEN BEGIN
              CheckCreditLimit(SalesHeader,GetBillToCustomer(NewCustomerNo));
              VALIDATE("Sell-to Customer No.",NewCustomerNo)
            END ELSE BEGIN
              SetHideValidationDialog(FALSE);
              EXIT;
            END;
        END ELSE
          IF NOT SalesLinesExist THEN BEGIN
            CheckCreditLimit(SalesHeader,NewCustomerNo);
            VALIDATE("Bill-to Customer No.",NewCustomerNo)
          END ELSE
            IF CONFIRM(ChangeBillToCustomerAndUpdateLineQst,TRUE) THEN BEGIN
              CheckCreditLimit(SalesHeader,NewCustomerNo);
              VALIDATE("Bill-to Customer No.",NewCustomerNo)
            END ELSE BEGIN
              SetHideValidationDialog(FALSE);
              EXIT;
            END;
        SetHideValidationDialog(FALSE);
      END;
      MiniSalesCalcDiscByType.ApplyDefaultInvoiceDiscount(0,SalesHeader);
    END;

    LOCAL PROCEDURE CheckCreditLimit@18(SalesHeader@1000 : Record 36;BillToCustomerNo@1001 : Code[20]);
    VAR
      CustCheckCrLimit@1002 : Codeunit 312;
    BEGIN
      IF SalesHeader."No." = '' THEN
        EXIT;
      SalesHeader."Bill-to Customer No." := BillToCustomerNo;
      CustCheckCrLimit.SalesHeaderCheck(SalesHeader);
    END;

    LOCAL PROCEDURE GetBillToCustomer@21(SellToCustomerNo@1000 : Code[20]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      Customer.GET(SellToCustomerNo);
      IF Customer."Bill-to Customer No." <> '' THEN
        EXIT(Customer."Bill-to Customer No.");
      EXIT(SellToCustomerNo);
    END;

    PROCEDURE GetTotalSales@24(CustNo@1013 : Code[20]) : Decimal;
    VAR
      Totals@1006 : Decimal;
      AmountOnPostedInvoices@1007 : Decimal;
      AmountOnPostedCrMemos@1008 : Decimal;
      AmountOnOutstandingInvoices@1011 : Decimal;
      AmountOnOutstandingCrMemos@1012 : Decimal;
      NoPostedInvoices@1000 : Integer;
      NoPostedCrMemos@1001 : Integer;
      NoOutstandingInvoices@1002 : Integer;
      NoOutstandingCrMemos@1003 : Integer;
    BEGIN
      AmountOnPostedInvoices := CalcAmountsOnPostedInvoices(CustNo,NoPostedInvoices);
      AmountOnPostedCrMemos := CalcAmountsOnPostedCrMemos(CustNo,NoPostedCrMemos);

      AmountOnOutstandingInvoices := CalculateAmountsOnUnpostedInvoices(CustNo,NoOutstandingInvoices);
      AmountOnOutstandingCrMemos := CalculateAmountsOnUnpostedCrMemos(CustNo,NoOutstandingCrMemos);

      Totals := AmountOnPostedInvoices + AmountOnPostedCrMemos + AmountOnOutstandingInvoices + AmountOnOutstandingCrMemos;
      EXIT(Totals)
    END;

    PROCEDURE GetYTDSales@25(CustNo@1000 : Code[20]) : Decimal;
    VAR
      Totals@1001 : Decimal;
    BEGIN
      FiscalYearTotals := TRUE;
      Totals := GetTotalSales(CustNo);
      FiscalYearTotals := FALSE;
      EXIT(Totals);
    END;

    BEGIN
    END.
  }
}

