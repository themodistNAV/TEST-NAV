OBJECT Codeunit 7310 Whse.-Shipment Release
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1005 : TextConst 'ENU=There is nothing to release for %1 %2.;ENG=There is nothing to release for %1 %2.';
      Text001@1000 : TextConst 'ENU=You cannot reopen the shipment because warehouse worksheet lines exist that must first be handled or deleted.;ENG=You cannot reopen the shipment because warehouse worksheet lines exist that must first be handled or deleted.';
      Text002@1002 : TextConst 'ENU=You cannot reopen the shipment because warehouse activity lines exist that must first be handled or deleted.;ENG=You cannot reopen the shipment because warehouse activity lines exist that must first be handled or deleted.';

    PROCEDURE Release@1(VAR WhseShptHeader@1000 : Record 7320);
    VAR
      Location@1004 : Record 14;
      WhsePickRqst@1003 : Record 7325;
      WhseShptLine@1001 : Record 7321;
      ATOLink@1002 : Record 904;
      AsmLine@1005 : Record 901;
    BEGIN
      WITH WhseShptHeader DO BEGIN
        IF Status = Status::Released THEN
          EXIT;

        WhseShptLine.SETRANGE("No.","No.");
        WhseShptLine.SETFILTER(Quantity,'<>0');
        IF NOT WhseShptLine.FIND('-') THEN
          ERROR(Text000,TABLECAPTION,"No.");

        IF "Location Code" <> '' THEN
          Location.GET("Location Code");

        REPEAT
          WhseShptLine.TESTFIELD("Item No.");
          WhseShptLine.TESTFIELD("Unit of Measure Code");
          IF Location."Directed Put-away and Pick" THEN
            WhseShptLine.TESTFIELD("Zone Code");
          IF Location."Bin Mandatory" THEN BEGIN
            WhseShptLine.TESTFIELD("Bin Code");
            IF WhseShptLine."Assemble to Order" THEN BEGIN
              ATOLink.AsmExistsForWhseShptLine(WhseShptLine);
              AsmLine.SETCURRENTKEY("Document Type","Document No.",Type);
              AsmLine.SETRANGE("Document Type",ATOLink."Assembly Document Type");
              AsmLine.SETRANGE("Document No.",ATOLink."Assembly Document No.");
              AsmLine.SETRANGE(Type,AsmLine.Type::Item);
              IF AsmLine.FINDSET THEN
                REPEAT
                  IF AsmLine.CalcQtyToPickBase > 0 THEN
                    AsmLine.TESTFIELD("Bin Code");
                UNTIL AsmLine.NEXT = 0;
            END;
          END;
        UNTIL WhseShptLine.NEXT = 0;

        Status := Status::Released;
        MODIFY;

        CreateWhsePickRqst(WhseShptHeader);

        WhsePickRqst.SETRANGE("Document Type",WhsePickRqst."Document Type"::Shipment);
        WhsePickRqst.SETRANGE("Document No.","No.");
        WhsePickRqst.SETRANGE(Status,Status::Open);
        WhsePickRqst.DELETEALL(TRUE);

        COMMIT;
      END;
    END;

    PROCEDURE Reopen@2(WhseShptHeader@1000 : Record 7320);
    VAR
      WhsePickRqst@1001 : Record 7325;
      PickWkshLine@1002 : Record 7326;
      WhseActivLine@1003 : Record 5767;
    BEGIN
      WITH WhseShptHeader DO BEGIN
        IF Status = Status::Open THEN
          EXIT;

        PickWkshLine.SETCURRENTKEY("Whse. Document Type","Whse. Document No.");
        PickWkshLine.SETRANGE("Whse. Document Type",PickWkshLine."Whse. Document Type"::Shipment);
        PickWkshLine.SETRANGE("Whse. Document No.","No.");
        IF PickWkshLine.FINDFIRST THEN
          ERROR(Text001);

        WhseActivLine.SETCURRENTKEY("Whse. Document No.","Whse. Document Type","Activity Type");
        WhseActivLine.SETRANGE("Whse. Document No.","No.");
        WhseActivLine.SETRANGE("Whse. Document Type",WhseActivLine."Whse. Document Type"::Shipment);
        WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type"::Pick);
        IF WhseActivLine.FINDFIRST THEN
          ERROR(Text002);

        WhsePickRqst.SETRANGE("Document Type",WhsePickRqst."Document Type"::Shipment);
        WhsePickRqst.SETRANGE("Document No.","No.");
        WhsePickRqst.SETRANGE(Status,Status::Released);
        IF WhsePickRqst.FIND('-') THEN
          REPEAT
            WhsePickRqst.Status := WhsePickRqst.Status::Open;
            WhsePickRqst.MODIFY;
          UNTIL WhsePickRqst.NEXT = 0;

        Status := Status::Open;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateWhsePickRqst@3(VAR WhseShptHeader@1000 : Record 7320);
    VAR
      WhsePickRqst@1001 : Record 7325;
      Location@1002 : Record 14;
    BEGIN
      WITH WhseShptHeader DO
        IF Location.RequirePicking("Location Code") THEN BEGIN
          WhsePickRqst."Document Type" := WhsePickRqst."Document Type"::Shipment;
          WhsePickRqst."Document No." := "No.";
          WhsePickRqst.Status := Status;
          WhsePickRqst."Location Code" := "Location Code";
          WhsePickRqst."Zone Code" := "Zone Code";
          WhsePickRqst."Bin Code" := "Bin Code";
          CALCFIELDS("Completely Picked");
          WhsePickRqst."Completely Picked" := "Completely Picked";
          IF NOT WhsePickRqst.INSERT THEN
            WhsePickRqst.MODIFY;
        END;
    END;

    BEGIN
    END.
  }
}

