OBJECT Table 9062805 Enhanced View Column
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               EnhViewCell.RESET();
               EnhViewCell.SETCURRENTKEY("View Column Entry No.");
               EnhViewCell.SETRANGE("View Column Entry No.", "Entry No.");
               EnhViewCell.DELETEALL(TRUE);

               CriteriaMgt.DeleteCriteria("Criteria Id");
             END;

    CaptionML=[ENU=Enhanced View Column;
               ENG=Enhanced View Column];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Entry No.;
                                                              ENG=Entry No.] }
    { 2   ;   ;View Code           ;Code20        ;TableRelation="Enhanced View";
                                                   CaptionML=[ENU=View Code;
                                                              ENG=View Code] }
    { 3   ;   ;Index               ;Integer       ;CaptionML=[ENU=Index;
                                                              ENG=Index] }
    { 4   ;   ;Caption             ;Text250       ;CaptionML=[ENU=Caption;
                                                              ENG=Caption] }
    { 5   ;   ;Record Id           ;RecordID      ;CaptionML=[ENU=Record Id;
                                                              ENG=Record Id] }
    { 6   ;   ;Group By Text Value ;Text250       ;CaptionML=[ENU=Group By Text Value;
                                                              ENG=Group By Text Value] }
    { 7   ;   ;Criteria Id         ;Integer       ;TableRelation=Criteria;
                                                   CaptionML=[ENU=Criteria Id;
                                                              ENG=Criteria Id] }
    { 8   ;   ;Group By Value Type ;Option        ;CaptionML=[ENU=Group By Value Type;
                                                              ENG=Group By Value Type];
                                                   OptionCaptionML=[ENU=Text,Date,Time,DateTime,Decimal,Integer,Boolean;
                                                                    ENG=Text,Date,Time,DateTime,Decimal,Integer,Boolean];
                                                   OptionString=Text,Date,Time,DateTime,Decimal,Integer,Boolean }
    { 9   ;   ;Group By Date Value ;Date          ;CaptionML=[ENU=Group By Date Value;
                                                              ENG=Group By Date Value] }
    { 10  ;   ;Group By Time Value ;Time          ;CaptionML=[ENU=Group By Time Value;
                                                              ENG=Group By Time Value] }
    { 11  ;   ;Group By DateTime Value;DateTime   ;CaptionML=[ENU=Group By DateTime Value;
                                                              ENG=Group By DateTime Value] }
    { 12  ;   ;Group By Decimal Value;Decimal     ;CaptionML=[ENU=Group By Decimal Value;
                                                              ENG=Group By Decimal Value] }
    { 13  ;   ;Group By Integer Value;Integer     ;CaptionML=[ENU=Group By Integer Value;
                                                              ENG=Group By Integer Value] }
    { 14  ;   ;Group By Boolean Value;Boolean     ;CaptionML=[ENU=Group By Boolean Value;
                                                              ENG=Group By Boolean Value] }
    { 15  ;   ;Source Table No.    ;Integer       ;CaptionML=[ENU=Source Table No.;
                                                              ENG=Source Table No.] }
    { 20  ;   ;Cell Value Type     ;Option        ;CaptionML=[ENU=Cell Value Type;
                                                              ENG=Cell Value Type];
                                                   OptionCaptionML=[ENU=Text,Date,Time,DateTime,Decimal,Integer,Boolean;
                                                                    ENG=Text,Date,Time,DateTime,Decimal,Integer,Boolean];
                                                   OptionString=Text,Date,Time,DateTime,Decimal,Integer,Boolean }
    { 21  ;   ;Cell Text Value     ;Text250       ;CaptionML=[ENU=Cell Text Value;
                                                              ENG=Cell Text Value] }
    { 22  ;   ;Cell Date Value     ;Date          ;CaptionML=[ENU=Cell Date Value;
                                                              ENG=Cell Date Value] }
    { 23  ;   ;Cell Time Value     ;Time          ;CaptionML=[ENU=Cell Time Value;
                                                              ENG=Cell Time Value] }
    { 24  ;   ;Cell DateTime Value ;DateTime      ;CaptionML=[ENU=Cell DateTime Value;
                                                              ENG=Cell DateTime Value] }
    { 25  ;   ;Cell Decimal Value  ;Decimal       ;CaptionML=[ENU=Cell Decimal Value;
                                                              ENG=Cell Decimal Value] }
    { 26  ;   ;Cell Integer Value  ;Integer       ;CaptionML=[ENU=Cell Integer Value;
                                                              ENG=Cell Integer Value] }
    { 27  ;   ;Cell Boolean Value  ;Boolean       ;CaptionML=[ENU=Cell Boolean Value;
                                                              ENG=Cell Boolean Value] }
    { 80  ;   ;Aggregate Function  ;Option        ;CaptionML=[ENU=Aggregate Function;
                                                              ENG=Aggregate Function];
                                                   OptionCaptionML=[ENU=" ,Sum,Average,Min,Max,Count";
                                                                    ENG=" ,Sum,Average,Min,Max,Count"];
                                                   OptionString=[ ,Sum,Average,Min,Max,Count] }
    { 81  ;   ;Aggregate - Count   ;Integer       ;CaptionML=[ENU=Aggregate - Count;
                                                              ENG=Aggregate - Count] }
    { 82  ;   ;Aggregate - Sum     ;Decimal       ;CaptionML=[ENU=Aggregate - Sum;
                                                              ENG=Aggregate - Sum] }
    { 83  ;   ;Aggregate - Min     ;Decimal       ;CaptionML=[ENU=Aggregate - Min;
                                                              ENG=Aggregate - Min] }
    { 84  ;   ;Aggregate - Max     ;Decimal       ;CaptionML=[ENU=Aggregate - Max;
                                                              ENG=Aggregate - Max] }
    { 85  ;   ;Aggregate - Average ;Decimal       ;CaptionML=[ENU=Aggregate - Average;
                                                              ENG=Aggregate - Average] }
    { 86  ;   ;Aggregate - Value   ;Decimal       ;CaptionML=[ENU=Aggregate - Value;
                                                              ENG=Aggregate - Value] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;View Code,Index                          }
    {    ;View Code,Group By Text Value            }
    {    ;View Code,Group By Date Value            }
    {    ;View Code,Group By Time Value            }
    {    ;View Code,Group By DateTime Value        }
    {    ;View Code,Group By Decimal Value         }
    {    ;View Code,Group By Integer Value         }
    {    ;View Code,Group By Boolean Value         }
    {    ;View Code,Aggregate - Value              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      EnhViewCell@1000000000 : Record 9062806;
      CriteriaMgt@1000000001 : Codeunit 9062462;
      errFieldTypeNotSupported@1000000002 : TextConst 'ENU=%1 field type is not supported.;ENG=%1 field type is not supported.';

    PROCEDURE GetHtmlContainerId@1000000000() : Text;
    BEGIN
      EXIT('col_' + FORMAT("Entry No.", 0, 9));
    END;

    PROCEDURE GetHtmlContainerSelector@1000000001() : Text;
    BEGIN
      EXIT('#' + GetHtmlContainerId());
    END;

    PROCEDURE StoreGroupByFieldRefValue@1000000003(VAR Value@1000000000 : Variant);
    BEGIN
      SetVariantValue(Value, "Group By Value Type", "Group By Text Value", "Group By Date Value",
        "Group By Time Value", "Group By DateTime Value", "Group By Decimal Value", "Group By Integer Value",
        "Group By Boolean Value", Caption);
    END;

    PROCEDURE GetGroupByFieldRefValue@1000000004(VAR Value@1000000000 : Variant);
    BEGIN
      GetVariantValue(Value, "Group By Value Type", "Group By Text Value", "Group By Date Value",
        "Group By Time Value", "Group By DateTime Value", "Group By Decimal Value", "Group By Integer Value",
        "Group By Boolean Value");
    END;

    PROCEDURE SetGroupByValueType@1000000007(VAR Value@1000000000 : Variant);
    BEGIN
      "Group By Value Type" := VariantTypeToValueType(Value);
    END;

    PROCEDURE SetGroupByValueFilter@1000000002(VAR SrcColumn@1000000000 : Record 9062805);
    BEGIN
      CASE (SrcColumn."Group By Value Type") OF
        SrcColumn."Group By Value Type"::Text:
          BEGIN
            SETCURRENTKEY("View Code", "Group By Text Value");
            SETRANGE("Group By Text Value", SrcColumn."Group By Text Value");
          END;
        SrcColumn."Group By Value Type"::Date:
          BEGIN
            SETCURRENTKEY("View Code", "Group By Date Value");
            SETRANGE("Group By Date Value", SrcColumn."Group By Date Value");
          END;
        SrcColumn."Group By Value Type"::Time:
          BEGIN
            SETCURRENTKEY("View Code", "Group By Time Value");
            SETRANGE("Group By Time Value", SrcColumn."Group By Time Value");
          END;
        SrcColumn."Group By Value Type"::DateTime:
          BEGIN
            SETCURRENTKEY("View Code", "Group By DateTime Value");
            SETRANGE("Group By DateTime Value", SrcColumn."Group By DateTime Value");
          END;
        SrcColumn."Group By Value Type"::Decimal:
          BEGIN
            SETCURRENTKEY("View Code", "Group By Decimal Value");
            SETRANGE("Group By Decimal Value", SrcColumn."Group By Decimal Value");
          END;
        SrcColumn."Group By Value Type"::Integer:
          BEGIN
            SETCURRENTKEY("View Code", "Group By Integer Value");
            SETRANGE("Group By Integer Value", SrcColumn."Group By Integer Value");
          END;
        SrcColumn."Group By Value Type"::Boolean:
          BEGIN
            SETCURRENTKEY("View Code", "Group By Boolean Value");
            SETRANGE("Group By Boolean Value", SrcColumn."Group By Boolean Value");
          END;
      END;
    END;

    PROCEDURE StoreCellFieldRefValue@1000000006(VAR Value@1000000000 : Variant);
    VAR
      VariantVal@1000000001 : Variant;
      TextValue@1000000002 : Text;
    BEGIN
      SetVariantValue(Value, "Cell Value Type", "Cell Text Value", "Cell Date Value",
        "Cell Time Value", "Cell DateTime Value", "Cell Decimal Value", "Cell Integer Value",
        "Cell Boolean Value", TextValue);
    END;

    PROCEDURE GetCellFieldRefValue@1000000008(VAR Value@1000000000 : Variant);
    BEGIN
      GetVariantValue(Value, "Cell Value Type", "Cell Text Value", "Cell Date Value",
        "Cell Time Value", "Cell DateTime Value", "Cell Decimal Value", "Cell Integer Value",
        "Cell Boolean Value");
    END;

    PROCEDURE SetCellValueType@1000000005(VAR Value@1000000000 : Variant);
    BEGIN
      "Cell Value Type" := VariantTypeToValueType(Value);
    END;

    LOCAL PROCEDURE VariantToDate@1000000009(Value@1000000000 : Variant) : Date;
    VAR
      DateTimeValue@1000000002 : DateTime;
      DateValue@1000000001 : Date;
    BEGIN
      IF (Value.ISDATE) THEN
        EXIT(Value);
      IF (Value.ISDATETIME) THEN BEGIN
        DateTimeValue := Value;
        EXIT(DT2DATE(DateTimeValue));
      END;
      EXIT(0D);
    END;

    LOCAL PROCEDURE VariantToTime@1000000010(Value@1000000000 : Variant) : Time;
    VAR
      DateTimeValue@1000000001 : DateTime;
      TimeValue@1000000002 : Time;
    BEGIN
      IF (Value.ISTIME) THEN
        EXIT(Value);
      IF (Value.ISDATETIME) THEN BEGIN
        DateTimeValue := Value;
        EXIT(DT2TIME(DateTimeValue));
      END;
      EXIT(0T);
    END;

    LOCAL PROCEDURE VariantToDateTime@1000000011(Value@1000000000 : Variant) : DateTime;
    VAR
      Date@1000000001 : Date;
      Time@1000000002 : Time;
      DateTime@1000000003 : DateTime;
    BEGIN
      IF (Value.ISDATETIME) THEN
        EXIT(Value);

      Date := 0D;
      Time := 0T;
      IF (Value.ISDATE) THEN
        Date := Value;
      IF (Value.ISTIME) THEN
        Time := Value;

      EXIT(CREATEDATETIME(Date, Time));
    END;

    PROCEDURE VariantTypeToValueType@1000000012(Value@1000000000 : Variant) : Integer;
    BEGIN
      CASE (TRUE) OF
        Value.ISOPTION,
        Value.ISBIGINTEGER,
        Value.ISINTEGER:
          EXIT("Cell Value Type"::Integer);
        Value.ISBOOLEAN:
          EXIT("Cell Value Type"::Boolean);
        Value.ISCODE,
        Value.ISTEXT:
          EXIT("Cell Value Type"::Text);
        Value.ISDATE:
          EXIT("Cell Value Type"::Date);
        Value.ISDATETIME:
          EXIT("Cell Value Type"::DateTime);
        Value.ISDECIMAL:
          EXIT("Cell Value Type"::Decimal);
        Value.ISTIME:
          EXIT("Cell Value Type"::Time);
      ELSE
        EXIT("Cell Value Type"::Text);
      END;
    END;

    LOCAL PROCEDURE SetVariantValue@1000000015(Value@1000000000 : Variant;ValueType@1000000001 : Integer;VAR TextValue@1000000002 : Text;VAR DateValue@1000000003 : Date;VAR TimeValue@1000000004 : Time;VAR DateTimeValue@1000000005 : DateTime;VAR DecimalValue@1000000006 : Decimal;VAR IntegerValue@1000000007 : Integer;VAR BoolValue@1000000008 : Boolean;VAR CaptionText@1000000009 : Text);
    BEGIN
      CASE (ValueType) OF
        "Cell Value Type"::Date: DateValue := VariantToDate(Value);
        "Cell Value Type"::Time: TimeValue := VariantToTime(Value);
        "Cell Value Type"::DateTime: DateTimeValue := VariantToDateTime(Value);
        "Cell Value Type"::Decimal: DecimalValue := Value;
        "Cell Value Type"::Integer: IntegerValue := Value;
        "Cell Value Type"::Boolean: BoolValue := Value;
      END;
      TextValue := FORMAT(Value, 0, 9);
      CaptionText := FORMAT(Value);
    END;

    LOCAL PROCEDURE GetVariantValue@1000000016(VAR Value@1000000008 : Variant;ValueType@1000000007 : Integer;TextValue@1000000006 : Text;DateValue@1000000005 : Date;TimeValue@1000000004 : Time;DateTimeValue@1000000003 : DateTime;DecimalValue@1000000002 : Decimal;IntegerValue@1000000001 : Integer;BoolValue@1000000000 : Boolean);
    BEGIN
      CASE (ValueType) OF
        "Cell Value Type"::Text: Value := TextValue;
        "Cell Value Type"::Date: Value := DateValue;
        "Cell Value Type"::Time: Value := TimeValue;
        "Cell Value Type"::DateTime: Value := DateTimeValue;
        "Cell Value Type"::Decimal: Value := DecimalValue;
        "Cell Value Type"::Integer: Value := IntegerValue;
        "Cell Value Type"::Boolean: Value := BoolValue;
      END;
    END;

    LOCAL PROCEDURE "--- Aggregate ---"@1000000013();
    BEGIN
    END;

    PROCEDURE AddAggregateValue@1000000014(NewValue@1000000000 : Decimal);
    BEGIN
      IF ("Aggregate - Count" = 0) THEN BEGIN
        "Aggregate - Min" := NewValue;
        "Aggregate - Max" := NewValue;
      END ELSE BEGIN
        IF ("Aggregate - Min" > NewValue) THEN
          "Aggregate - Min" := NewValue;
        IF ("Aggregate - Max" < NewValue) THEN
          "Aggregate - Max" := NewValue;
      END;

      "Aggregate - Count" := "Aggregate - Count" + 1;
      "Aggregate - Sum" := "Aggregate - Sum" + NewValue;
      "Aggregate - Average" := "Aggregate - Sum" / "Aggregate - Count";

      CASE ("Aggregate Function") OF
        "Aggregate Function"::" ",
        "Aggregate Function"::Sum: "Aggregate - Value" := "Aggregate - Sum";
        "Aggregate Function"::Min: "Aggregate - Value" := "Aggregate - Min";
        "Aggregate Function"::Max: "Aggregate - Value" := "Aggregate - Max";
        "Aggregate Function"::Average: "Aggregate - Value" := "Aggregate - Average";
        "Aggregate Function"::Count: "Aggregate - Value" := "Aggregate - Count";
      END;
    END;

    BEGIN
    {
      //DOC NA2016.12 AZ 21/01/2016 - Created
      //DOC NA2016.14 AZ 26/02/2016 - Grid View added, bugfixes
      //DOC NA2016.15 AZ 12/04/2016 - Midifications and bugfixes, Quick Reports support added
      //DOC NA2016.15 JH 06/05/2016 - CfMD amendments
    }
    END.
  }
}

