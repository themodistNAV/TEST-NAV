OBJECT Codeunit 8616 Config. Management
{
  OBJECT-PROPERTIES
  {
    Date=23/10/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43402,NAVGB9.00.00.43402;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You must specify a company name.;ENG=You must specify a company name.';
      Text001@1001 : TextConst 'ENU=Do you want to copy the data from the %1 table in %2?;ENG=Do you want to copy the data from the %1 table in %2?';
      Text002@1002 : TextConst 'ENU=Data from the %1 table in %2 has been copied successfully.;ENG=Data from the %1 table in %2 has been copied successfully.';
      Text003@1003 : TextConst 'ENU=Do you want to copy the data from the selected tables in %1?;ENG=Do you want to copy the data from the selected tables in %1?';
      Text004@1026 : TextConst 'ENU=Data from the selected tables in %1 has been copied successfully.;ENG=Data from the selected tables in %1 has been copied successfully.';
      Text006@1006 : TextConst 'ENU=The base company must not be the same as the current company.;ENG=The base company must not be the same as the current company.';
      Text007@1007 : TextConst 'ENU=The %1 table in %2 already contains data.\\You must delete the data from the table before you can use this function.;ENG=The %1 table in %2 already contains data.\\You must delete the data from the table before you can use this function.';
      Text009@1009 : TextConst 'ENU=There is no data in the %1 table in %2.\\You must set up the table in %3 manually.;ENG=There is no data in the %1 table in %2.\\You must set up the table in %3 manually.';
      TempFieldRec@1004 : TEMPORARY Record 2000000041;
      ConfigProgressBar@1024 : Codeunit 8615;
      HideDialog@1035 : Boolean;
      Text023@1005 : TextConst 'ENU=Processing tables;ENG=Processing tables';

    PROCEDURE CopyDataDialog@3(NewCompanyName@1000 : Text[30];VAR ConfigLine@1001 : Record 8622);
    VAR
      ConfirmTableText@1002 : Text[250];
      MessageTableText@1004 : Text[250];
      SingleTable@1003 : Boolean;
    BEGIN
      WITH ConfigLine DO BEGIN
        IF NewCompanyName = '' THEN
          ERROR(Text000);
        IF NOT FINDFIRST THEN
          EXIT;
        SingleTable := NEXT = 0;
        IF SingleTable THEN BEGIN
          ConfirmTableText := STRSUBSTNO(Text001,Name,NewCompanyName);
          MessageTableText := STRSUBSTNO(Text002,Name,NewCompanyName);
        END ELSE BEGIN
          ConfirmTableText := STRSUBSTNO(Text003,NewCompanyName);
          MessageTableText := STRSUBSTNO(Text004,NewCompanyName);
        END;
        IF NOT CONFIRM(ConfirmTableText,SingleTable) THEN
          EXIT;
        IF FINDSET THEN
          REPEAT
            CopyData(ConfigLine);
          UNTIL NEXT = 0;
        COMMIT;
        MESSAGE(MessageTableText)
      END;
    END;

    LOCAL PROCEDURE CopyData@2(VAR ConfigLine@1000 : Record 8622);
    VAR
      BaseCompanyName@1001 : Text[30];
    BEGIN
      WITH ConfigLine DO BEGIN
        CheckBlocked;
        FILTERGROUP := 2;
        BaseCompanyName := GETRANGEMAX("Company Filter (Source Table)");
        FILTERGROUP := 0;
        IF BaseCompanyName = COMPANYNAME THEN
          ERROR(Text006);
        CALCFIELDS("No. of Records","No. of Records (Source Table)");
        IF "No. of Records" <> 0 THEN
          ERROR(
            Text007,
            Name,COMPANYNAME);
        IF "No. of Records (Source Table)" = 0 THEN
          ERROR(
            Text009,
            Name,BaseCompanyName,COMPANYNAME);
        TransferContents("Table ID",BaseCompanyName,TRUE);
      END;
    END;

    PROCEDURE TransferContents@6(TableID@1000 : Integer;NewCompanyName@1001 : Text[30];CopyTable@1002 : Boolean) : Boolean;
    BEGIN
      TempFieldRec.DELETEALL;
      IF CopyTable THEN
        MarkPostValidationData(DATABASE::Contact,5053);
      TransferContent(TableID,NewCompanyName,CopyTable);
      TempFieldRec.DELETEALL;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE TransferContent@4(TableNumber@1000 : Integer;NewCompanyName@1002 : Text[30];CopyTable@1001 : Boolean);
    VAR
      FieldRec@1007 : Record 2000000041;
      FromCompanyRecRef@1003 : RecordRef;
      ToCompanyRecRef@1004 : RecordRef;
      FromCompanyFieldRef@1005 : FieldRef;
      ToCompanyFieldRef@1006 : FieldRef;
    BEGIN
      IF NOT CopyTable THEN
        EXIT;
      FromCompanyRecRef.OPEN(TableNumber,FALSE,NewCompanyName);
      IF FromCompanyRecRef.ISEMPTY THEN BEGIN
        FromCompanyRecRef.CLOSE;
        EXIT;
      END;
      FromCompanyRecRef.FIND('-');
      ToCompanyRecRef.OPEN(TableNumber,FALSE,COMPANYNAME);
      FieldRec.SETRANGE(TableNo,TableNumber);
      REPEAT
        IF FieldRec.FINDSET THEN BEGIN
          ToCompanyRecRef.INIT;
          REPEAT
            IF NOT TempFieldRec.GET(TableNumber,FieldRec."No.") THEN BEGIN
              FromCompanyFieldRef := FromCompanyRecRef.FIELD(FieldRec."No.");
              ToCompanyFieldRef := ToCompanyRecRef.FIELD(FieldRec."No.");
              ToCompanyFieldRef.VALUE(FromCompanyFieldRef.VALUE);
            END;
          UNTIL FieldRec.NEXT = 0;
          ToCompanyRecRef.INSERT(TRUE);
        END;
      UNTIL FromCompanyRecRef.NEXT = 0;
      // Treatment of fields that require post-validation:
      TempFieldRec.SETRANGE(TableNo,TableNumber);
      IF TempFieldRec.FINDSET THEN BEGIN
        FromCompanyRecRef.FIND('-');
        REPEAT
          ToCompanyRecRef.SETPOSITION(FromCompanyRecRef.GETPOSITION);
          ToCompanyRecRef.FIND('=');
          TempFieldRec.FINDSET;
          REPEAT
            FromCompanyFieldRef := FromCompanyRecRef.FIELD(TempFieldRec."No.");
            ToCompanyFieldRef := ToCompanyRecRef.FIELD(TempFieldRec."No.");
            ToCompanyFieldRef.VALUE(FromCompanyFieldRef.VALUE);
          UNTIL TempFieldRec.NEXT = 0;
          ToCompanyRecRef.MODIFY(TRUE);
        UNTIL FromCompanyRecRef.NEXT = 0;
      END;

      FromCompanyRecRef.CLOSE;
      ToCompanyRecRef.CLOSE;
    END;

    LOCAL PROCEDURE MarkPostValidationData@10(TableNo@1000 : Integer;FieldNo@1001 : Integer);
    BEGIN
      TempFieldRec.INIT;
      TempFieldRec.TableNo := TableNo;
      TempFieldRec."No." := FieldNo;
      IF TempFieldRec.INSERT THEN;
    END;

    PROCEDURE FindPage@9(TableID@1000 : Integer) : Integer;
    BEGIN
      CASE TableID OF
        DATABASE::"Company Information":
          EXIT(PAGE::"Company Information");
        DATABASE::"Responsibility Center":
          EXIT(PAGE::"Responsibility Center List");
        DATABASE::"Accounting Period GB":
          EXIT(PAGE::"Accounting Periods");
        DATABASE::"General Ledger Setup":
          EXIT(PAGE::"General Ledger Setup");
        DATABASE::"No. Series":
          EXIT(PAGE::"No. Series");
        DATABASE::"No. Series Line":
          EXIT(PAGE::"No. Series Lines");
        DATABASE::"G/L Account":
          EXIT(PAGE::"Chart of Accounts");
        DATABASE::"Gen. Business Posting Group":
          EXIT(PAGE::"Gen. Business Posting Groups");
        DATABASE::"Gen. Product Posting Group":
          EXIT(PAGE::"Gen. Product Posting Groups");
        DATABASE::"General Posting Setup":
          EXIT(PAGE::"General Posting Setup");
        DATABASE::"VAT Business Posting Group":
          EXIT(PAGE::"VAT Business Posting Groups");
        DATABASE::"VAT Product Posting Group":
          EXIT(PAGE::"VAT Product Posting Groups");
        DATABASE::"VAT Posting Setup":
          EXIT(PAGE::"VAT Posting Setup");
        DATABASE::"Acc. Schedule Name":
          EXIT(PAGE::"Account Schedule Names");
        DATABASE::"Column Layout Name":
          EXIT(PAGE::"Column Layout Names");
        DATABASE::"G/L Budget Name":
          EXIT(PAGE::"G/L Budget Names");
        DATABASE::"VAT Statement Template":
          EXIT(PAGE::"VAT Statement Templates");
        DATABASE::"Tariff Number":
          EXIT(PAGE::"Tariff Numbers");
        DATABASE::"Transaction Type":
          EXIT(PAGE::"Transaction Types");
        DATABASE::"Transaction Specification":
          EXIT(PAGE::"Transaction Specifications");
        DATABASE::"Transport Method":
          EXIT(PAGE::"Transport Methods");
        DATABASE::"Entry/Exit Point":
          EXIT(PAGE::"Entry/Exit Points");
        DATABASE::Area:
          EXIT(PAGE::Areas);
        DATABASE::Territory:
          EXIT(PAGE::Territories);
        DATABASE::"Tax Jurisdiction":
          EXIT(PAGE::"Tax Jurisdictions");
        DATABASE::"Tax Group":
          EXIT(PAGE::"Tax Groups");
        DATABASE::"Tax Detail":
          EXIT(PAGE::"Tax Details");
        DATABASE::"Tax Area":
          EXIT(PAGE::"Tax Area");
        DATABASE::"Tax Area Line":
          EXIT(PAGE::"Tax Area Line");
        DATABASE::"Source Code":
          EXIT(PAGE::"Source Codes");
        DATABASE::"Reason Code":
          EXIT(PAGE::"Reason Codes");
        DATABASE::"Standard Text":
          EXIT(PAGE::"Standard Text Codes");
        DATABASE::"Business Unit":
          EXIT(PAGE::"Business Unit List");
        DATABASE::Dimension:
          EXIT(PAGE::Dimensions);
        DATABASE::"Default Dimension Priority":
          EXIT(PAGE::"Default Dimension Priorities");
        DATABASE::"Dimension Combination":
          EXIT(PAGE::"Dimension Combinations");
        DATABASE::"Analysis View":
          EXIT(PAGE::"Analysis View List");
        DATABASE::"Post Code":
          EXIT(PAGE::"Post Codes");
        DATABASE::"Country/Region":
          EXIT(PAGE::"Countries/Regions");
        DATABASE::Language:
          EXIT(PAGE::Languages);
        DATABASE::Currency:
          EXIT(PAGE::Currencies);
        DATABASE::"Bank Account":
          EXIT(PAGE::"Bank Account List");
        DATABASE::"Bank Account Posting Group":
          EXIT(PAGE::"Bank Account Posting Groups");
        DATABASE::"Change Log Setup (Table)":
          EXIT(PAGE::"Change Log Setup (Table) List");
        DATABASE::"Change Log Setup (Field)":
          EXIT(PAGE::"Change Log Setup (Field) List");
        DATABASE::"Sales & Receivables Setup":
          EXIT(PAGE::"Sales & Receivables Setup");
        DATABASE::Customer:
          EXIT(PAGE::"Customer List");
        DATABASE::"Customer Posting Group":
          EXIT(PAGE::"Customer Posting Groups");
        DATABASE::"Payment Terms":
          EXIT(PAGE::"Payment Terms");
        DATABASE::"Payment Method":
          EXIT(PAGE::"Payment Methods");
        DATABASE::"Reminder Terms":
          EXIT(PAGE::"Reminder Terms");
        DATABASE::"Reminder Level":
          EXIT(PAGE::"Reminder Levels");
        DATABASE::"Reminder Text":
          EXIT(PAGE::"Reminder Text");
        DATABASE::"Finance Charge Terms":
          EXIT(PAGE::"Finance Charge Terms");
        DATABASE::"Shipment Method":
          EXIT(PAGE::"Shipment Methods");
        DATABASE::"Shipping Agent":
          EXIT(PAGE::"Shipping Agents");
        DATABASE::"Shipping Agent Services":
          EXIT(PAGE::"Shipping Agent Services");
        DATABASE::"Customer Discount Group":
          EXIT(PAGE::"Customer Disc. Groups");
        DATABASE::"Salesperson/Purchaser":
          EXIT(PAGE::"Salespeople/Purchasers");
        DATABASE::"DO Payment Setup":
          EXIT(PAGE::"DO Payment Setup");
        DATABASE::"Marketing Setup":
          EXIT(PAGE::"Marketing Setup");
        DATABASE::"Duplicate Search String Setup":
          EXIT(PAGE::"Duplicate Search String Setup");
        DATABASE::Contact:
          EXIT(PAGE::"Contact List");
        DATABASE::"Business Relation":
          EXIT(PAGE::"Business Relations");
        DATABASE::"Mailing Group":
          EXIT(PAGE::"Mailing Groups");
        DATABASE::"Industry Group":
          EXIT(PAGE::"Industry Groups");
        DATABASE::"Web Source":
          EXIT(PAGE::"Web Sources");
        DATABASE::"Interaction Group":
          EXIT(PAGE::"Interaction Groups");
        DATABASE::"Interaction Template":
          EXIT(PAGE::"Interaction Templates");
        DATABASE::"Job Responsibility":
          EXIT(PAGE::"Job Responsibilities");
        DATABASE::"Organizational Level":
          EXIT(PAGE::"Organizational Levels");
        DATABASE::"Campaign Status":
          EXIT(PAGE::"Campaign Status");
        DATABASE::Activity:
          EXIT(PAGE::Activity);
        DATABASE::Team:
          EXIT(PAGE::Teams);
        DATABASE::"Profile Questionnaire Header":
          EXIT(PAGE::"Profile Questionnaires");
        DATABASE::"Sales Cycle":
          EXIT(PAGE::"Sales Cycles");
        DATABASE::"Close Opportunity Code":
          EXIT(PAGE::"Close Opportunity Codes");
        DATABASE::"Customer Template":
          EXIT(PAGE::"Customer Template List");
        DATABASE::"Service Mgt. Setup":
          EXIT(PAGE::"Service Mgt. Setup");
        DATABASE::"Service Item":
          EXIT(PAGE::"Service Item List");
        DATABASE::"Service Hour":
          EXIT(PAGE::"Default Service Hours");
        DATABASE::"Work-Hour Template":
          EXIT(PAGE::"Work-Hour Templates");
        DATABASE::"Resource Service Zone":
          EXIT(PAGE::"Resource Service Zones");
        DATABASE::Loaner:
          EXIT(PAGE::"Loaner List");
        DATABASE::"Skill Code":
          EXIT(PAGE::"Skill Codes");
        DATABASE::"Fault Reason Code":
          EXIT(PAGE::"Fault Reason Codes");
        DATABASE::"Service Cost":
          EXIT(PAGE::"Service Costs");
        DATABASE::"Service Zone":
          EXIT(PAGE::"Service Zones");
        DATABASE::"Service Order Type":
          EXIT(PAGE::"Service Order Types");
        DATABASE::"Service Item Group":
          EXIT(PAGE::"Service Item Groups");
        DATABASE::"Service Shelf":
          EXIT(PAGE::"Service Shelves");
        DATABASE::"Service Status Priority Setup":
          EXIT(PAGE::"Service Order Status Setup");
        DATABASE::"Repair Status":
          EXIT(PAGE::"Repair Status Setup");
        DATABASE::"Service Price Group":
          EXIT(PAGE::"Service Price Groups");
        DATABASE::"Serv. Price Group Setup":
          EXIT(PAGE::"Serv. Price Group Setup");
        DATABASE::"Service Price Adjustment Group":
          EXIT(PAGE::"Serv. Price Adjmt. Group");
        DATABASE::"Serv. Price Adjustment Detail":
          EXIT(PAGE::"Serv. Price Adjmt. Detail");
        DATABASE::"Resolution Code":
          EXIT(PAGE::"Resolution Codes");
        DATABASE::"Fault Area":
          EXIT(PAGE::"Fault Areas");
        DATABASE::"Symptom Code":
          EXIT(PAGE::"Symptom Codes");
        DATABASE::"Fault Code":
          EXIT(PAGE::"Fault Codes");
        DATABASE::"Fault/Resol. Cod. Relationship":
          EXIT(PAGE::"Fault/Resol. Cod. Relationship");
        DATABASE::"Contract Group":
          EXIT(PAGE::"Service Contract Groups");
        DATABASE::"Service Contract Template":
          EXIT(PAGE::"Service Contract Template");
        DATABASE::"Service Contract Account Group":
          EXIT(PAGE::"Serv. Contract Account Groups");
        DATABASE::"Troubleshooting Header":
          EXIT(PAGE::Troubleshooting);
        DATABASE::"Purchases & Payables Setup":
          EXIT(PAGE::"Purchases & Payables Setup");
        DATABASE::Vendor:
          EXIT(PAGE::"Vendor List");
        DATABASE::"Vendor Posting Group":
          EXIT(PAGE::"Vendor Posting Groups");
        DATABASE::Purchasing:
          EXIT(PAGE::"Purchasing Codes");
        DATABASE::"Inventory Setup":
          EXIT(PAGE::"Inventory Setup");
        DATABASE::"Nonstock Item Setup":
          EXIT(PAGE::"Nonstock Item Setup");
        DATABASE::"Item Tracking Code":
          EXIT(PAGE::"Item Tracking Codes");
        DATABASE::Item:
          EXIT(PAGE::"Item List");
        DATABASE::"Nonstock Item":
          EXIT(PAGE::"Nonstock Item List");
        DATABASE::"Inventory Posting Group":
          EXIT(PAGE::"Inventory Posting Groups");
        DATABASE::"Inventory Posting Setup":
          EXIT(PAGE::"Inventory Posting Setup");
        DATABASE::"Unit of Measure":
          EXIT(PAGE::"Units of Measure");
        DATABASE::"Customer Price Group":
          EXIT(PAGE::"Customer Price Groups");
        DATABASE::"Item Discount Group":
          EXIT(PAGE::"Item Disc. Groups");
        DATABASE::Manufacturer:
          EXIT(PAGE::Manufacturers);
        DATABASE::"Item Category":
          EXIT(PAGE::"Item Categories");
        DATABASE::"Rounding Method":
          EXIT(PAGE::"Rounding Methods");
        DATABASE::Location:
          EXIT(PAGE::"Location List");
        DATABASE::"Transfer Route":
          EXIT(PAGE::"Transfer Routes");
        DATABASE::"Stockkeeping Unit":
          EXIT(PAGE::"Stockkeeping Unit List");
        DATABASE::"Warehouse Setup":
          EXIT(PAGE::"Warehouse Setup");
        DATABASE::"Resources Setup":
          EXIT(PAGE::"Resources Setup");
        DATABASE::Resource:
          EXIT(PAGE::"Resource List");
        DATABASE::"Resource Group":
          EXIT(PAGE::"Resource Groups");
        DATABASE::"Work Type":
          EXIT(PAGE::"Work Types");
        DATABASE::"Jobs Setup":
          EXIT(PAGE::"Jobs Setup");
        DATABASE::"Job Posting Group":
          EXIT(PAGE::"Job Posting Groups");
        DATABASE::"FA Setup":
          EXIT(PAGE::"Fixed Asset Setup");
        DATABASE::"Fixed Asset":
          EXIT(PAGE::"Fixed Asset List");
        DATABASE::Insurance:
          EXIT(PAGE::"Insurance List");
        DATABASE::"FA Posting Group":
          EXIT(PAGE::"FA Posting Groups");
        DATABASE::"FA Journal Template":
          EXIT(PAGE::"FA Journal Templates");
        DATABASE::"FA Reclass. Journal Template":
          EXIT(PAGE::"FA Reclass. Journal Templates");
        DATABASE::"Insurance Journal Template":
          EXIT(PAGE::"Insurance Journal Templates");
        DATABASE::"Depreciation Book":
          EXIT(PAGE::"Depreciation Book List");
        DATABASE::"FA Class":
          EXIT(PAGE::"FA Classes");
        DATABASE::"FA Subclass":
          EXIT(PAGE::"FA Subclasses");
        DATABASE::"FA Location":
          EXIT(PAGE::"FA Locations");
        DATABASE::"Insurance Type":
          EXIT(PAGE::"Insurance Types");
        DATABASE::Maintenance:
          EXIT(PAGE::Maintenance);
        DATABASE::"Human Resources Setup":
          EXIT(PAGE::"Human Resources Setup");
        DATABASE::Employee:
          EXIT(PAGE::"Employee List");
        DATABASE::"Cause of Absence":
          EXIT(PAGE::"Causes of Absence");
        DATABASE::"Cause of Inactivity":
          EXIT(PAGE::"Causes of Inactivity");
        DATABASE::"Grounds for Termination":
          EXIT(PAGE::"Grounds for Termination");
        DATABASE::"Employment Contract":
          EXIT(PAGE::"Employment Contracts");
        DATABASE::Qualification:
          EXIT(PAGE::Qualifications);
        DATABASE::Relative:
          EXIT(PAGE::Relatives);
        DATABASE::"Misc. Article":
          EXIT(PAGE::"Misc. Article Information");
        DATABASE::Confidential:
          EXIT(PAGE::Confidential);
        DATABASE::"Employee Statistics Group":
          EXIT(PAGE::"Employee Statistics Groups");
        DATABASE::Union:
          EXIT(PAGE::Unions);
        DATABASE::"Manufacturing Setup":
          EXIT(PAGE::"Manufacturing Setup");
        DATABASE::Family:
          EXIT(PAGE::Family);
        DATABASE::"Production BOM Header":
          EXIT(PAGE::"Production BOM");
        DATABASE::"Capacity Unit of Measure":
          EXIT(PAGE::"Capacity Units of Measure");
        DATABASE::"Work Shift":
          EXIT(PAGE::"Work Shifts");
        DATABASE::"Shop Calendar":
          EXIT(PAGE::"Shop Calendars");
        DATABASE::"Work Center Group":
          EXIT(PAGE::"Work Center Groups");
        DATABASE::"Standard Task":
          EXIT(PAGE::"Standard Tasks");
        DATABASE::"Routing Link":
          EXIT(PAGE::"Routing Links");
        DATABASE::Stop:
          EXIT(PAGE::"Stop Codes");
        DATABASE::Scrap:
          EXIT(PAGE::"Scrap Codes");
        DATABASE::"Machine Center":
          EXIT(PAGE::"Machine Center List");
        DATABASE::"Work Center":
          EXIT(PAGE::"Work Center List");
        DATABASE::"Routing Header":
          EXIT(PAGE::Routing);
        DATABASE::"Cost Type":
          EXIT(PAGE::"Cost Type List");
        DATABASE::"Cost Journal Template":
          EXIT(PAGE::"Cost Journal Templates");
        DATABASE::"Cost Allocation Source":
          EXIT(PAGE::"Cost Allocation");
        DATABASE::"Cost Allocation Target":
          EXIT(PAGE::"Cost Allocation Target List");
        DATABASE::"Cost Accounting Setup":
          EXIT(PAGE::"Cost Accounting Setup");
        DATABASE::"Cost Budget Name":
          EXIT(PAGE::"Cost Budget Names");
        DATABASE::"Cost Center":
          EXIT(PAGE::"Chart of Cost Centers");
        DATABASE::"Cost Object":
          EXIT(PAGE::"Chart of Cost Objects");
        DATABASE::"Cash Flow Setup":
          EXIT(PAGE::"Cash Flow Setup");
        DATABASE::"Cash Flow Forecast":
          EXIT(PAGE::"Cash Flow Forecast List");
        DATABASE::"Cash Flow Account":
          EXIT(PAGE::"Chart of Cash Flow Accounts");
        DATABASE::"Cash Flow Manual Expense":
          EXIT(PAGE::"Cash Flow Manual Expenses");
        DATABASE::"Cash Flow Manual Revenue":
          EXIT(PAGE::"Cash Flow Manual Revenues");
        DATABASE::"IC Partner":
          EXIT(PAGE::"IC Partner List");
        DATABASE::"Base Calendar":
          EXIT(PAGE::"Base Calendar List");
        DATABASE::"Finance Charge Text":
          EXIT(PAGE::"Reminder Text");
        DATABASE::"Currency for Fin. Charge Terms":
          EXIT(PAGE::"Currencies for Fin. Chrg Terms");
        DATABASE::"Currency for Reminder Level":
          EXIT(PAGE::"Currencies for Reminder Level");
        DATABASE::"Currency Exchange Rate":
          EXIT(PAGE::"Currency Exchange Rates");
        DATABASE::"VAT Statement Name":
          EXIT(PAGE::"VAT Statement Names");
        DATABASE::"VAT Statement Line":
          EXIT(PAGE::"VAT Statement");
        DATABASE::"No. Series Relationship":
          EXIT(PAGE::"No. Series Relationships");
        DATABASE::"User Setup":
          EXIT(PAGE::"User Setup");
        DATABASE::"Gen. Journal Template":
          EXIT(PAGE::"General Journal Template List");
        DATABASE::"Gen. Journal Batch":
          EXIT(PAGE::"General Journal Batches");
        DATABASE::"Gen. Journal Line":
          EXIT(PAGE::"General Journal");
        DATABASE::"Item Journal Template":
          EXIT(PAGE::"Item Journal Template List");
        DATABASE::"Item Journal Batch":
          EXIT(PAGE::"Item Journal Batches");
        DATABASE::"Customer Bank Account":
          EXIT(PAGE::"Customer Bank Account List");
        DATABASE::"Vendor Bank Account":
          EXIT(PAGE::"Vendor Bank Account List");
        DATABASE::"Cust. Invoice Disc.":
          EXIT(PAGE::"Cust. Invoice Discounts");
        DATABASE::"Vendor Invoice Disc.":
          EXIT(PAGE::"Vend. Invoice Discounts");
        DATABASE::"Dimension Value":
          EXIT(PAGE::"Dimension Value List");
        DATABASE::"Dimension Value Combination":
          EXIT(PAGE::"Dimension Combinations");
        DATABASE::"Default Dimension":
          EXIT(PAGE::"Default Dimensions");
        DATABASE::"Dimension Translation":
          EXIT(PAGE::"Dimension Translations");
        DATABASE::"Dimension Set Entry":
          EXIT(PAGE::"Dimension Set Entries");
        DATABASE::"VAT Report Setup":
          EXIT(PAGE::"VAT Report Setup");
        DATABASE::"VAT Registration No. Format":
          EXIT(PAGE::"VAT Registration No. Formats");
        DATABASE::"G/L Entry":
          EXIT(PAGE::"General Ledger Entries");
        DATABASE::"Cust. Ledger Entry":
          EXIT(PAGE::"Customer Ledger Entries");
        DATABASE::"Vendor Ledger Entry":
          EXIT(PAGE::"Vendor Ledger Entries");
        DATABASE::"Item Ledger Entry":
          EXIT(PAGE::"Item Ledger Entries");
        DATABASE::"Sales Header":
          EXIT(PAGE::"Sales List");
        DATABASE::"Purchase Header":
          EXIT(PAGE::"Purchase List");
        DATABASE::"G/L Register":
          EXIT(PAGE::"G/L Registers");
        DATABASE::"Item Register":
          EXIT(PAGE::"Item Registers");
        DATABASE::"Item Journal Line":
          EXIT(PAGE::"Item Journal Lines");
        DATABASE::"Sales Shipment Header":
          EXIT(PAGE::"Posted Sales Shipments");
        DATABASE::"Sales Invoice Header":
          EXIT(PAGE::"Posted Sales Invoices");
        DATABASE::"Sales Cr.Memo Header":
          EXIT(PAGE::"Posted Sales Credit Memos");
        DATABASE::"Purch. Rcpt. Header":
          EXIT(PAGE::"Posted Purchase Receipts");
        DATABASE::"Purch. Inv. Header":
          EXIT(PAGE::"Posted Purchase Invoices");
        DATABASE::"Purch. Cr. Memo Hdr.":
          EXIT(PAGE::"Posted Purchase Credit Memos");
        DATABASE::"Sales Price":
          EXIT(PAGE::"Sales Prices");
        DATABASE::"Purchase Price":
          EXIT(PAGE::"Purchase Prices");
        DATABASE::"VAT Entry":
          EXIT(PAGE::"VAT Entries");
        DATABASE::"FA Ledger Entry":
          EXIT(PAGE::"FA Ledger Entries");
        DATABASE::"Value Entry":
          EXIT(PAGE::"Value Entries");
        DATABASE::"Source Code Setup":
          EXIT(PAGE::"Source Code Setup");
        ELSE
          EXIT(0);
      END;
    END;

    PROCEDURE GetConfigTables@36(VAR AllObj@1004 : Record 2000000038;IncludeWithDataOnly@1006 : Boolean;IncludeRelatedTables@1007 : Boolean;IncludeDimensionTables@1008 : Boolean;IncludeLicensedTablesOnly@1010 : Boolean;IncludeReferringTable@1012 : Boolean);
    VAR
      TempInt@1013 : TEMPORARY Record 2000000026;
      TableInfo@1000 : Record 2000000028;
      ConfigLine@1001 : Record 8622;
      Field@1011 : Record 2000000041;
      ConfigPackageMgt@1003 : Codeunit 8611;
      NextLineNo@1002 : Integer;
      NextVertNo@1005 : Integer;
      Include@1009 : Boolean;
    BEGIN
      IF NOT HideDialog THEN
        ConfigProgressBar.Init(AllObj.COUNT,1,Text023);

      TempInt.DELETEALL;

      NextLineNo := 10000;
      ConfigLine.RESET;
      IF ConfigLine.FINDLAST THEN
        NextLineNo := ConfigLine."Line No." + 10000;

      NextVertNo := 0;
      ConfigLine.SETCURRENTKEY("Vertical Sorting");
      IF ConfigLine.FINDLAST THEN
        NextVertNo := ConfigLine."Vertical Sorting" + 1;

      IF AllObj.FINDSET THEN
        REPEAT
          IF NOT HideDialog THEN
            ConfigProgressBar.Update(AllObj."Object Name");
          Include := TRUE;
          IF IncludeWithDataOnly THEN BEGIN
            Include := FALSE;
            TableInfo.SETRANGE("Company Name",COMPANYNAME);
            TableInfo.SETRANGE("Table No.",AllObj."Object ID");
            IF TableInfo.FINDFIRST THEN
              IF TableInfo."No. of Records" > 0 THEN
                Include := TRUE;
          END;
          IF Include THEN BEGIN
            IF IncludeReferringTable THEN
              InsertTempInt(TempInt,AllObj."Object ID",IncludeLicensedTablesOnly);
            IF IncludeRelatedTables THEN BEGIN
              ConfigPackageMgt.SetFieldFilter(Field,AllObj."Object ID",0);
              Field.SETFILTER(RelationTableNo,'<>%1&<>%2&..%3',0,AllObj."Object ID",99000999);
              IF Field.FINDSET THEN
                REPEAT
                  InsertTempInt(TempInt,Field.RelationTableNo,IncludeLicensedTablesOnly);
                UNTIL Field.NEXT = 0;
            END;
            IF IncludeDimensionTables THEN
              IF CheckDimTables(AllObj."Object ID") THEN BEGIN
                InsertDimTables(TempInt,IncludeLicensedTablesOnly);
                IncludeDimensionTables := FALSE;
              END;
          END;
        UNTIL AllObj.NEXT = 0;

      IF TempInt.FINDSET THEN
        REPEAT
          InsertConfigLine(TempInt.Number,NextLineNo,NextVertNo);
        UNTIL TempInt.NEXT = 0;

      IF NOT HideDialog THEN
        ConfigProgressBar.Close;
    END;

    LOCAL PROCEDURE InsertConfigLine@8(TableID@1000 : Integer;VAR NextLineNo@1001 : Integer;VAR NextVertNo@1002 : Integer);
    VAR
      ConfigLine@1003 : Record 8622;
    BEGIN
      ConfigLine.INIT;
      ConfigLine.VALIDATE("Line Type",ConfigLine."Line Type"::Table);
      ConfigLine.VALIDATE("Table ID",TableID);
      ConfigLine."Line No." := NextLineNo;
      NextLineNo := NextLineNo + 10000;
      ConfigLine."Vertical Sorting" := NextVertNo;
      NextVertNo := NextVertNo + 1;
      ConfigLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CheckDimTables@60(TableID@1005 : Integer) : Boolean;
    VAR
      Field@1000 : Record 2000000041;
    BEGIN
      Field.SETRANGE(TableNo,TableID);
      Field.SETRANGE(Class,Field.Class::Normal);
      IF Field.FINDSET THEN
        REPEAT
          IF IsDimSetIDField(Field.TableNo,Field."No.") THEN
            EXIT(TRUE);
        UNTIL Field.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertDimTables@12(VAR TempInt@1000 : Record 2000000026;IncludeLicensedTablesOnly@1001 : Boolean);
    BEGIN
      InsertTempInt(TempInt,DATABASE::Dimension,IncludeLicensedTablesOnly);
      InsertTempInt(TempInt,DATABASE::"Dimension Value",IncludeLicensedTablesOnly);
      InsertTempInt(TempInt,DATABASE::"Dimension Combination",IncludeLicensedTablesOnly);
      InsertTempInt(TempInt,DATABASE::"Dimension Value Combination",IncludeLicensedTablesOnly);
      InsertTempInt(TempInt,DATABASE::"Dimension Set Entry",IncludeLicensedTablesOnly);
      InsertTempInt(TempInt,DATABASE::"Dimension Set Tree Node",IncludeLicensedTablesOnly);
      InsertTempInt(TempInt,DATABASE::"Default Dimension",IncludeLicensedTablesOnly);
      InsertTempInt(TempInt,DATABASE::"Default Dimension Priority",IncludeLicensedTablesOnly);
    END;

    PROCEDURE IsDefaultDimTable@16(TableID@1000 : Integer) : Boolean;
    BEGIN
      CASE TableID OF
        DATABASE::"G/L Account",
        DATABASE::Customer,
        DATABASE::Vendor,
        DATABASE::Item,
        DATABASE::"Resource Group",
        DATABASE::Resource,
        DATABASE::Job,
        DATABASE::"Bank Account",
        DATABASE::Employee,
        DATABASE::"Fixed Asset",
        DATABASE::Insurance,
        DATABASE::"Responsibility Center",
        DATABASE::"Work Center",
        DATABASE::"Salesperson/Purchaser",
        DATABASE::Campaign,
        DATABASE::"Customer Template",
        DATABASE::"Cash Flow Manual Expense",
        DATABASE::"Cash Flow Manual Revenue":
          EXIT(TRUE);
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE IsDimSetIDTable@17(TableID@1000 : Integer) : Boolean;
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.OPEN(TableID);
      EXIT(RecRef.FIELDEXIST(DATABASE::"Dimension Set Entry"));
    END;

    LOCAL PROCEDURE IsDimSetIDField@11(TableID@1000 : Integer;FieldID@1001 : Integer) : Boolean;
    VAR
      ConfigValidateMgt@1002 : Codeunit 8617;
    BEGIN
      EXIT(
        (FieldID = DATABASE::"Dimension Set Entry") OR
        (ConfigValidateMgt.GetRelationTableID(TableID,FieldID) = DATABASE::"Dimension Value"));
    END;

    PROCEDURE IsSystemTable@15(TableID@1000 : Integer) : Boolean;
    BEGIN
      IF (TableID > 2000000000) AND NOT (TableID IN [DATABASE::"Permission Set",DATABASE::Permission]) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE AssignParentLineNos@13();
    VAR
      ConfigLine@1000 : Record 8622;
      LastAreaLineNo@1001 : Integer;
      LastGroupLineNo@1002 : Integer;
    BEGIN
      WITH ConfigLine DO BEGIN
        RESET;
        SETCURRENTKEY("Vertical Sorting");
        IF FINDSET THEN
          REPEAT
            CASE "Line Type" OF
              "Line Type"::Area:
                BEGIN
                  "Parent Line No." := 0;
                  LastAreaLineNo := "Line No.";
                  LastGroupLineNo := 0;
                END;
              "Line Type"::Group:
                BEGIN
                  "Parent Line No." := LastAreaLineNo;
                  LastGroupLineNo := "Line No.";
                END;
              "Line Type"::Table:
                BEGIN
                  IF LastGroupLineNo <> 0 THEN
                    "Parent Line No." := LastGroupLineNo
                  ELSE
                    "Parent Line No." := LastAreaLineNo;
                END;
            END;
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE MakeTableFilter@14(VAR ConfigLine@1000 : Record 8622;Export@1002 : Boolean) Filter : Text;
    VAR
      AddDimTables@1001 : Boolean;
    BEGIN
      Filter := '';
      IF ConfigLine.FINDSET THEN
        REPEAT
          ConfigLine.CheckBlocked;
          IF (ConfigLine."Table ID" > 0) AND (ConfigLine.Status <= ConfigLine.Status::"In Progress") THEN
            Filter += FORMAT(ConfigLine."Table ID") + '|';
          AddDimTables := AddDimTables OR ConfigLine."Dimensions as Columns";
        UNTIL ConfigLine.NEXT = 0;
      IF AddDimTables AND NOT Export THEN
        Filter += STRSUBSTNO('%1|%2|',DATABASE::"Dimension Value",DATABASE::"Default Dimension");
      IF Filter <> '' THEN
        Filter := COPYSTR(Filter,1,STRLEN(Filter) - 1);

      EXIT(Filter);
    END;

    PROCEDURE SetHideDialog@5(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    LOCAL PROCEDURE InsertTempInt@18(VAR TempInt@1000 : Record 2000000026;TableId@1001 : Integer;IncludeLicensedTablesOnly@1002 : Boolean);
    VAR
      ConfigLine@1003 : Record 8622;
    BEGIN
      TempInt.Number := TableId;

      ConfigLine.INIT;
      ConfigLine."Line Type" := ConfigLine."Line Type"::Table;
      ConfigLine."Table ID" := TableId;
      IF IncludeLicensedTablesOnly THEN BEGIN
        ConfigLine.CALCFIELDS("Licensed Table");
        IF ConfigLine."Licensed Table" THEN
          IF TempInt.INSERT THEN;
      END ELSE
        IF TempInt.INSERT THEN;
    END;

    PROCEDURE DimensionFieldID@20() : Integer;
    BEGIN
      EXIT(999999900);
    END;

    BEGIN
    END.
  }
}

