OBJECT Table 9062708 Questionnaire Logic Criteria
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Questionnaire Logic Criteria;
               ENG=Questionnaire Logic Criteria];
  }
  FIELDS
  {
    { 1   ;   ;Questionnaire Template Code;Code20 ;TableRelation=Questionnaire."Questionnaire Template Code";
                                                   CaptionML=[ENU=Questionnaire Template Code;
                                                              ENG=Questionnaire Template Code] }
    { 2   ;   ;Questionnaire No.   ;Integer       ;TableRelation=Questionnaire."Questionnaire No.";
                                                   CaptionML=[ENU=Questionnaire No.;
                                                              ENG=Questionnaire No.] }
    { 3   ;   ;Source Entry No.    ;Integer       ;TableRelation=IF (Line Type=FILTER(Before Question|After Question)) "Questionnaire Line"."Line No." WHERE (Questionnaire No.=FIELD(Questionnaire No.))
                                                                 ELSE IF (Line Type=CONST(Questionnaire Action)) "Questionnaire Action Header".Id WHERE (Questionnaire No.=FIELD(Questionnaire No.));
                                                   CaptionML=[ENU=Source Entry No.;
                                                              ENG=Source Entry No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
    { 5   ;   ;Line Type           ;Option        ;CaptionML=[ENU=Line Type;
                                                              ENG=Line Type];
                                                   OptionCaptionML=[ENU=Before Question,After Question,Questionnaire Action;
                                                                    ENG=Before Question,After Question,Questionnaire Action];
                                                   OptionString=Before Question,After Question,Questionnaire Action }
    { 6   ;   ;Action Before Question;Option      ;CaptionML=[ENU=Action Before Question;
                                                              ENG=Action Before Question];
                                                   OptionCaptionML=[ENU=Ask Question,Set Answer;
                                                                    ENG=Ask Question,Set Answer];
                                                   OptionString=Ask Question,Set Answer }
    { 7   ;   ;Action After Question;Option       ;CaptionML=[ENU=Action After Question;
                                                              ENG=Action After Question];
                                                   OptionCaptionML=[ENU=Go to Question,Set Answer,Restart Block;
                                                                    ENG=Go to Question,Set Answer,Restart Block];
                                                   OptionString=Go to Question,Set Answer,Restart Block }
    { 9   ;   ;Questionaire Line Sequence;Integer ;CaptionML=[ENU=Questionaire Line Sequence;
                                                              ENG=Questionaire Line Sequence] }
    { 10  ;   ;Reference Type      ;Option        ;CaptionML=[ENU=Reference Type;
                                                              ENG=Reference Type];
                                                   OptionCaptionML=[ENU=Answer to Previous Question;
                                                                    ENG=Answer to Previous Question];
                                                   OptionString=Answer to Previous Question }
    { 11  ;   ;Criteria            ;Option        ;CaptionML=[ENU=Criteria;
                                                              ENG=Criteria];
                                                   OptionCaptionML=[ENU="=,<,<=,>,>=,<>,Contains,Doesn't Contain,Any Answer Given,No Answer Given,Filter,Always";
                                                                    ENG="=,<,<=,>,>=,<>,Contains,Doesn't Contain,Any Answer Given,No Answer Given,Filter,Always"];
                                                   OptionString==,<,<=,>,>=,<>,Contains,Doesn't Contain,Any Answer Given,No Answer Given,Filter,Always }
    { 12  ;   ;Compare to Value    ;Text250       ;CaptionML=[ENU=Compare to Value;
                                                              ENG=Compare to Value] }
    { 13  ;   ;Date Value          ;Date          ;CaptionML=[ENU=Date Value;
                                                              ENG=Date Value] }
    { 14  ;   ;Time Value          ;Time          ;CaptionML=[ENU=Time Value;
                                                              ENG=Time Value] }
    { 15  ;   ;DateTime Value      ;DateTime      ;CaptionML=[ENU=DateTime Value;
                                                              ENG=DateTime Value] }
    { 16  ;   ;DateFormula Value   ;DateFormula   ;CaptionML=[ENU=DateFormula Value;
                                                              ENG=DateFormula Value] }
    { 17  ;   ;Decimal Value       ;Decimal       ;CaptionML=[ENU=Decimal Value;
                                                              ENG=Decimal Value] }
    { 18  ;   ;Boolean Value       ;Boolean       ;CaptionML=[ENU=Boolean Value;
                                                              ENG=Boolean Value] }
    { 19  ;   ;Integer Value       ;Integer       ;CaptionML=[ENU=Integer Value;
                                                              ENG=Integer Value] }
    { 20  ;   ;BigInteger Value    ;BigInteger    ;CaptionML=[ENU=BigInteger Value;
                                                              ENG=BigInteger Value] }
    { 21  ;   ;Duration Value      ;Duration      ;CaptionML=[ENU=Duration Value;
                                                              ENG=Duration Value] }
    { 22  ;   ;GUID Value          ;GUID          ;CaptionML=[ENU=GUID Value;
                                                              ENG=GUID Value] }
    { 24  ;   ;Value Type          ;Option        ;InitValue=Text;
                                                   CaptionML=[ENU=Value Type;
                                                              ENG=Value Type];
                                                   OptionCaptionML=[ENU=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime;
                                                                    ENG=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime];
                                                   OptionString=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime }
    { 25  ;   ;Value Source Table Id;Integer      ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   CaptionML=[ENU=Value Source Table Id;
                                                              ENG=Value Source Table Id] }
    { 26  ;   ;Value Source Field Id;Integer      ;TableRelation=Field.No. WHERE (TableNo=FIELD(Value Source Table Id));
                                                   OnValidate=VAR
                                                                ValueProcessing@1000000000 : Codeunit 9062475;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Value Source Field Id;
                                                              ENG=Value Source Field Id] }
    { 27  ;   ;Option String       ;Text250       ;CaptionML=[ENU=Option String;
                                                              ENG=Option String] }
    { 28  ;   ;Set Answer          ;Text250       ;CaptionML=[ENU=Set Answer;
                                                              ENG=Set Answer] }
    { 29  ;   ;Set Answer Date Value;Date         ;CaptionML=[ENU=Set Answer Date Value;
                                                              ENG=Set Answer Date Value] }
    { 30  ;   ;Set Answer Time Value;Time         ;CaptionML=[ENU=Set Answer Time Value;
                                                              ENG=Set Answer Time Value] }
    { 31  ;   ;Set Answer DateTime Value;DateTime ;CaptionML=[ENU=Set Answer DateTime Value;
                                                              ENG=Set Answer DateTime Value] }
    { 32  ;   ;Set Answer DateFormula Value;DateFormula;
                                                   CaptionML=[ENU=Set Answer DateFormula Value;
                                                              ENG=Set Answer DateFormula Value] }
    { 33  ;   ;Set Answer Decimal Value;Decimal   ;CaptionML=[ENU=Set Answer Decimal Value;
                                                              ENG=Set Answer Decimal Value] }
    { 34  ;   ;Set Answer Boolean Value;Boolean   ;CaptionML=[ENU=Set Answer Boolean Value;
                                                              ENG=Set Answer Boolean Value] }
    { 35  ;   ;Set Answer Integer Value;Integer   ;CaptionML=[ENU=Set Answer Integer Value;
                                                              ENG=Set Answer Integer Value] }
    { 36  ;   ;Set Answer BigInteger Value;BigInteger;
                                                   CaptionML=[ENU=Set Answer BigInteger Value;
                                                              ENG=Set Answer BigInteger Value] }
    { 37  ;   ;Set Answer Duration Value;Duration ;CaptionML=[ENU=Set Answer Duration Value;
                                                              ENG=Set Answer Duration Value] }
    { 38  ;   ;Set Answer GUID Value;GUID         ;CaptionML=[ENU=Set Answer GUID Value;
                                                              ENG=Set Answer GUID Value] }
    { 40  ;   ;Set Answer Value Type;Option       ;InitValue=Text;
                                                   CaptionML=[ENU=Set Answer Value Type;
                                                              ENG=Set Answer Value Type];
                                                   OptionCaptionML=[ENU=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime;
                                                                    ENG=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime];
                                                   OptionString=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime }
    { 41  ;   ;Set Answer Field Id ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Value Source Table Id));
                                                   CaptionML=[ENU=Set Answer Field Id;
                                                              ENG=Set Answer Field Id] }
    { 42  ;   ;Set Answer Source Type;Option      ;CaptionML=[ENU=Set Answer Source Type;
                                                              ENG=Set Answer Source Type];
                                                   OptionCaptionML=[ENU=Const,Record;
                                                                    ENG=Const,Record];
                                                   OptionString=Const,Record }
    { 50  ;   ;Result              ;Boolean       ;CaptionML=[ENU=Result;
                                                              ENG=Result] }
    { 51  ;   ;Processed           ;Boolean       ;CaptionML=[ENU=Processed;
                                                              ENG=Processed] }
    { 52  ;   ;Active              ;Boolean       ;CaptionML=[ENU=Active;
                                                              ENG=Active] }
    { 53  ;   ;Source First Block Entry No.;Integer;
                                                   CaptionML=[ENU=Source First Block Entry No.;
                                                              ENG=Source First Block Entry No.] }
    { 54  ;   ;Source Quest. Block No.;Integer    ;CaptionML=[ENU=Source Quest. Block No.;
                                                              ENG=Source Quest. Block No.] }
    { 55  ;   ;Source Quest. Block Inst. No.;Integer;
                                                   CaptionML=[ENU=Source Quest. Block Inst. No.;
                                                              ENG=Source Quest. Block Inst. No.] }
    { 56  ;   ;Related First Block Line No.;Integer;
                                                   CaptionML=[ENU=Related First Block Line No.;
                                                              ENG=Related First Block Line No.] }
    { 57  ;   ;Related Question Block No.;Integer ;CaptionML=[ENU=Related Question Block No.;
                                                              ENG=Related Question Block No.] }
    { 58  ;   ;Related Quest. Block Inst. No.;Integer;
                                                   CaptionML=[ENU=Related Quest. Block Inst. No.;
                                                              ENG=Related Quest. Block Inst. No.] }
    { 100 ;   ;Related Line No.    ;Integer       ;OnValidate=VAR
                                                                QuestionnaireLine@1000000000 : Record 9062703;
                                                              BEGIN
                                                              END;

                                                   OnLookup=VAR
                                                              LineNo@1000000000 : Integer;
                                                            BEGIN
                                                            END;

                                                   CaptionML=[ENU=Related Line No.;
                                                              ENG=Related Line No.] }
    { 101 ;   ;Related Line Description;Text250   ;OnValidate=VAR
                                                                LineNo@1000000000 : Integer;
                                                              BEGIN
                                                              END;

                                                   OnLookup=VAR
                                                              LineNo@1000000000 : Integer;
                                                            BEGIN
                                                            END;

                                                   CaptionML=[ENU=Related Line Description;
                                                              ENG=Related Line Description] }
  }
  KEYS
  {
    {    ;Questionnaire No.,Source Entry No.,Line No.;
                                                   Clustered=Yes }
    {    ;Questionnaire No.,Line Type,Source Entry No. }
    {    ;Questionnaire No.,Line Type,Related Line No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      LineToCheck@1000000000 : Record 9062705;

    PROCEDURE Process@1000000001();
    VAR
      TextBuffer@1000000002 : TEMPORARY Record 9062730;
      AnswerLine@1000000003 : Record 9062705;
      AnswerRecRef@1000000004 : RecordRef;
      AnswerFldRef@1000000005 : FieldRef;
      ValueProcessing@1000000000 : Codeunit 9062475;
      CompareResult@1000000001 : Integer;
      VariantValue@1000000006 : Variant;
    BEGIN
      GetLineToCheck();

      CompareResult := 0;
      IF (Criteria IN [Criteria::"=", Criteria::"<", Criteria::"<=", Criteria::">", Criteria::">=", Criteria::"<>"]) THEN BEGIN
        ValueProcessing.SetParameters("Value Type", "Value Source Table Id", "Value Source Field Id");
        CompareResult := ValueProcessing.CompareValue(
          LineToCheck.Answer, LineToCheck."Date Answer", LineToCheck."Time Answer", LineToCheck."DateTime Answer",
          LineToCheck."DateFormula Answer", LineToCheck."Decimal Answer", LineToCheck."Boolean Answer", LineToCheck."Integer Answer",
          LineToCheck."BigInteger Answer", LineToCheck."Duration Answer", LineToCheck."GUID Answer",
          "Compare to Value", "Date Value", "Time Value", "DateTime Value", "DateFormula Value",
          "Decimal Value", "Boolean Value", "Integer Value", "BigInteger Value", "Duration Value", "GUID Value");
      END;

      {
      MESSAGE(FORMAT("Value Type"));

      MESSAGE(STRSUBSTNO(
        '%1 - %12 \ %2 - %13 \ %3 - %14 \ %4 - %15 \ %5 - %16 \ %6 - %17 \ %7 - %18 \ %8 - %19 \ %9 - %20 \ %10 - %21 \ %11 - %22',
        LineToCheck.Answer, LineToCheck."Date Answer", LineToCheck."Time Answer", LineToCheck."DateTime Answer",
        LineToCheck."DateFormula Answer", LineToCheck."Decimal Answer", LineToCheck."Boolean Answer", LineToCheck."Integer Answer",
        LineToCheck."BigInteger Answer", LineToCheck."Duration Answer", LineToCheck."GUID Answer",
        "Compare to Value", "Date Value", "Time Value", "DateTime Value", "DateFormula Value",
        "Decimal Value", "Boolean Value", "Integer Value", "BigInteger Value", "Duration Value", "GUID Value"));
      }

      IF (LineToCheck.Answered) THEN BEGIN
        CASE (Criteria) OF
          Criteria::"=":
            Result := (CompareResult = 0);
          Criteria::"<":
            Result := (CompareResult < 0);
          Criteria::"<=":
            Result := (CompareResult <= 0);
          Criteria::">":
            Result := (CompareResult > 0);
          Criteria::">=":
            Result := (CompareResult >= 0);
          Criteria::"<>":
            Result := (CompareResult <> 0);
          Criteria::Contains:
            Result := (STRPOS(LineToCheck.Answer, "Compare to Value") >= 0);
          Criteria::"Doesn't Contain":
            Result := (STRPOS(LineToCheck.Answer, "Compare to Value") < 0);
          Criteria::"Any Answer Given":
            Result := (LineToCheck.Answered) AND (NOT(LineToCheck.Skip));
          Criteria::"No Answer Given":
            Result := NOT(LineToCheck.Answered);
          //DOC NA2015.9 >>
          Criteria::Filter:
            BEGIN
              TextBuffer.RESET();
              TextBuffer.DELETEALL();
              TextBuffer.ID := 1;
              TextBuffer.Value := LineToCheck.Answer;
              TextBuffer.INSERT();
              TextBuffer.SETFILTER(Value, "Compare to Value");
              Result := NOT(TextBuffer.ISEMPTY);
            END;
          Criteria::Always:
            Result := TRUE;
          //DOC NA2015.9 <<
        END;
        Processed := TRUE;
      END ELSE BEGIN
        CASE (Criteria) OF
          Criteria::"Any Answer Given":
            BEGIN
              Result := FALSE;
              Processed := TRUE;
            END;
          Criteria::"Any Answer Given":
            BEGIN
              Result := TRUE;
              Processed := TRUE;
            END;
          Criteria::Always:
            BEGIN
              Result := TRUE;
              Processed := TRUE;
            END;
          ELSE
            Result := FALSE;
            Processed := FALSE;
        END;
      END;

      //DOC NA2015.9 >>
      IF (Result) AND
        (
          (("Line Type" = "Line Type"::"Before Question") AND ("Action Before Question" = "Action Before Question"::"Set Answer")) OR
          (("Line Type" = "Line Type"::"After Question") AND ("Action After Question" = "Action After Question"::"Set Answer"))
        )
      THEN BEGIN
        CASE ("Line Type") OF
          "Line Type"::"Before Question":
            AnswerLine.GET("Questionnaire No.", "Source Entry No.");
          "Line Type"::"After Question":
            AnswerLine.GET("Questionnaire No.", "Related Line No.");
        END;

        CASE ("Set Answer Source Type") OF
          "Set Answer Source Type"::Const:
            BEGIN
              AnswerLine."Date Input" := "Set Answer Date Value";
              AnswerLine."Time Input" := "Set Answer Time Value";
              AnswerLine."DateTime Input" := "Set Answer DateTime Value";
              AnswerLine."DateFormula Input" := "Set Answer DateFormula Value";
              AnswerLine."Decimal Input" := "Set Answer Decimal Value";
              AnswerLine."Boolean Input" := "Set Answer Boolean Value";
              AnswerLine."Integer Input" := "Set Answer Integer Value";
              AnswerLine."BigInteger Input" := "Set Answer BigInteger Value";
              AnswerLine."Duration Input" := "Set Answer Duration Value";
              AnswerLine."GUID Input" := "Set Answer GUID Value";
              AnswerLine."Text Input" := "Set Answer";
            END;
          "Set Answer Source Type"::Record:
            BEGIN
              IF (LineToCheck.GetInputRecord(AnswerRecRef, FALSE)) THEN BEGIN
                AnswerFldRef := AnswerRecRef.FIELD("Set Answer Field Id");
                VariantValue := AnswerFldRef.VALUE;
                AnswerLine.SetValueFromVariant(VariantValue);
              END;

              AnswerRecRef.CLOSE();
            END;
        END;
        AnswerLine.Answered := TRUE;
        AnswerLine.MODIFY();

        //AnswerLine.VALIDATE("Text Input", "Set Answer");
        AnswerLine.ProcessInputData();

        AnswerLine.MODIFY();
      END;
      //DOC NA2015.9 <<
    END;

    PROCEDURE GetLineToCheck@1000000000();
    BEGIN
      CASE ("Line Type") OF
        "Line Type"::"Questionnaire Action",
        "Line Type"::"Before Question":
          IF (LineToCheck."Questionnaire No." <> "Questionnaire No.") OR
            (LineToCheck."Line No." <> "Related Line No.")
          THEN
            LineToCheck.GET("Questionnaire No.", "Related Line No.");
        "Line Type"::"After Question":
          IF (LineToCheck."Questionnaire No." <> "Questionnaire No.") OR
            (LineToCheck."Line No." <> "Source Entry No.")
          THEN
            LineToCheck.GET("Questionnaire No.", "Source Entry No.");
      END;
    END;

    PROCEDURE SetLineToCheck@1000000002(VAR QuestLine@1000000000 : Record 9062705);
    BEGIN
      LineToCheck.TRANSFERFIELDS(QuestLine);
    END;

    PROCEDURE ClearContent@1000000003();
    BEGIN
      Result := FALSE;
      Processed := FALSE;


      Active := TRUE;
      IF (Criteria = Criteria::Always) AND
        (
          (("Line Type" = "Line Type"::"Before Question") AND ("Action Before Question" = "Action Before Question"::"Ask Question")) OR
          (("Line Type" = "Line Type"::"After Question") AND ("Action After Question" = "Action After Question"::"Go to Question"))
        )
      THEN BEGIN
        Result := TRUE;
        Processed := TRUE;
      END;
    END;

    BEGIN
    {
      //DOC NA2015.7  AZ 05/06/2015 - Created
      //DOC NA2015.9  AZ 04/08/2015 - Filter criteria, set answer functionality
      //DOC NA2015.9  AZ 18/08/2015 - Question groups and loops
      //DOC NA2016.15 JH 06/05/2016 - CfMD amendments
    }
    END.
  }
}

