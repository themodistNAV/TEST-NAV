OBJECT Codeunit 9062302 Planning Board Date Time Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=24/09/15;
    Time=11:55:39 PM;
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Field@9062229 : Record 2000000041;
      ObjectFieldToolkit@9062230 : Codeunit 9062343;
      tEmpty@9062232 : TextConst 'ENU=Empty "%1";ENG=Empty "%1"';
      tTableId@9062231 : TextConst 'ENU=Table ID;ENG=Table ID';
      NameFound@9062234 : Boolean;
      NameFilter@9062233 : ARRAY [4] OF Text;
      NameFilterIndex@9062235 : Integer;

    PROCEDURE "--- Field Validation and Lookup ---"@1000000091();
    BEGIN
    END;

    PROCEDURE ValidateFieldId@1000000106(pTableId@1000000001 : Integer;pFieldType@9062231 : Integer;pFieldId@9062230 : Integer);
    VAR
      eUnknownField@9062229 : TextConst 'ENU=Field %1 doesn''t exist in table %2.;ENG=Field %1 doesn''t exist in table %2.';
    BEGIN
      //DOC NA2016.12 - Validating field ID
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type
      //  -> pFieldId: Field ID

      IF (pFieldId = 0) THEN
        EXIT;
      IF (pTableId = 0) THEN
        ERROR(tEmpty, tTableId);

      ApplyFieldFilter(pTableId, pFieldType);
      Field.SETRANGE("No.", pFieldId);
      IF (Field.ISEMPTY()) THEN
        ERROR(eUnknownField, pFieldId, ObjectFieldToolkit.GetTableName(pTableId));
    END;

    PROCEDURE ValidateFieldName@1000000047(pTableId@1000000001 : Integer;pFieldType@9062230 : Integer;VAR pFieldId@1000000000 : Integer;VAR pFieldName@1000000002 : Text);
    VAR
      eUnknownField@9062229 : TextConst 'ENU=Field "%1" doesn''t exist in table "%2";ENG=Field "%1" doesn''t exist in table "%2"';
    BEGIN
      //DOC NA2016.12 - Validating field name
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type
      //  <> pFieldId: Target field ID
      //  <> pFieldName: Source / target field name

      IF (pFieldName <> '') THEN
      BEGIN
        IF (pTableId = 0) THEN
          ERROR(tEmpty, tTableId);

        ApplyFieldFilter(pTableId, pFieldType);
        InitialiseNameSearch(pFieldName);
        WHILE (NextNameFilter()) DO
        BEGIN
          Field.SETFILTER(FieldName, CurrentNameFilter());
          NameFound := Field.FINDFIRST();
        END;
        IF ( NOT (NameFound)) THEN
          IF (EVALUATE(pFieldId, pFieldName)) THEN
          BEGIN
            Field.SETRANGE(FieldName);
            Field.SETRANGE("No.", pFieldId);
            NameFound := Field.FINDFIRST();
          END;

        IF ( NOT (NameFound)) THEN
          ERROR(eUnknownField, pFieldName, ObjectFieldToolkit.GetTableName(pTableId));

        pFieldId := Field."No.";
        pFieldName := Field.FieldName;
      END
      ELSE
      BEGIN
        CLEAR(pFieldId);
        CLEAR(pFieldName);
      END;
    END;

    PROCEDURE FieldLookup@1000000052(pTableId@1000000000 : Integer;pFieldType@9062229 : Integer;VAR pFieldId@1000000001 : Integer) : Boolean;
    VAR
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2016.12 - Lookup for field
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type
      //  <> pFieldId: Target field ID
      //  <- Lookup result

      lResult := FALSE;

      IF (pTableId = 0) THEN
        ERROR(tEmpty, tTableId);

      ApplyFieldFilter(pTableId, pFieldType);
      IF (pFieldId <> 0) THEN
      BEGIN
        Field.SETRANGE("No.", pFieldId);
        IF (Field.FINDFIRST()) THEN;
        Field.SETRANGE("No.");
      END;
      IF (PAGE.RUNMODAL(PAGE::Fields, Field) = ACTION::LookupOK) THEN
      BEGIN
        pFieldId := Field."No.";
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE ApplyFieldFilter@9062231(pTableId@9062230 : Integer;pFieldType@9062229 : Integer);
    BEGIN
      //DOC NA2016.12 - Applying a filter to "Field" global variable
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type

      Field.RESET();
      Field.FILTERGROUP(2);
      Field.SETRANGE(TableNo, pTableId);
      Field.SETRANGE(Type, pFieldType);
      Field.SETFILTER(Class, '<>%1', Field.Class::FlowFilter);
      Field.FILTERGROUP(0);
    END;

    PROCEDURE "--- Field Types ---"@9062229();
    BEGIN
    END;

    PROCEDURE FieldDateType@9062230() : Integer;
    BEGIN
      //DOC NA2016.12 - Returning field "Date" type
      //  <- The type

      EXIT(Field.Type::Date);
    END;

    PROCEDURE FieldTimeType@9062232() : Integer;
    BEGIN
      //DOC NA2016.12 - Returning field "Time" type
      //  <- The type

      EXIT(Field.Type::Time);
    END;

    PROCEDURE FieldDateTimeType@9062233() : Integer;
    BEGIN
      //DOC NA2016.12 - Returning field "DateTime" type
      //  <- The type

      EXIT(Field.Type::DateTime);
    END;

    PROCEDURE "--- Name Filtering ---"@1000000093();
    BEGIN
    END;

    LOCAL PROCEDURE InitialiseNameSearch@1000000087(pName@1000000000 : Text[50]);
    BEGIN
      //DOC NA2016.12 - Preparing name filters
      //  -> pName: The name

      NameFilter[1] := pName;
      NameFilter[2] := '@' + pName;
      NameFilter[3] := '@' + pName + '*';
      NameFilter[4] := '@*' + pName + '*';

      NameFound := FALSE;
      NameFilterIndex := 0;
    END;

    LOCAL PROCEDURE NextNameFilter@1000000089() : Boolean;
    VAR
      lNextNameFilter@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.12 - Going into next name filter
      //  <- TRUE: Next name filter found, FALSE: No next name filter or name found already

      IF (NameFound) THEN
        lNextNameFilter := FALSE
      ELSE
        IF (NameFilterIndex < ARRAYLEN(NameFilter)) THEN
        BEGIN
          NameFilterIndex += 1;
          lNextNameFilter := (NameFilter[NameFilterIndex] <> '');
        END
        ELSE
          lNextNameFilter := FALSE;

      EXIT(lNextNameFilter);
    END;

    PROCEDURE CurrentNameFilter@1000000097() : Text;
    BEGIN
      //DOC NA2016.12 - Returning current name filter
      //  <- The filter

      EXIT(NameFilter[NameFilterIndex]);
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 24/09/2015 - Created
    }
    END.
  }
}

