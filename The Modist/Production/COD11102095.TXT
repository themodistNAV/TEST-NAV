OBJECT Codeunit 11102095 OM - Update Properties
{
  OBJECT-PROPERTIES
  {
    Date=01/10/13;
    Time=12:00:00 PM;
    Version List=OMA9.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NewDate@1000 : Date;
      NewTime@1001 : Time;
      NewVersionNo@1002 : Text;
      VersionListId@1003 : Text;
      UpdateVersionAction@1004 : 'Add / Update,Remove';
      NewModified@1005 : Boolean;
      UpdateDateTime@1006 : Boolean;
      UpdateModified@1007 : Boolean;
      UpdateVersionList@1008 : Boolean;

    PROCEDURE SetUpdateVersionList@1(NewUpdateVersionList@1000 : Boolean;NewVersionListId@1001 : Text;NewUpdateVersionAction@1002 : 'Add / Update,Remove';NewNewVersionNo@1003 : Text);
    BEGIN
      UpdateVersionList := NewUpdateVersionList;
      VersionListId := NewVersionListId;
      UpdateVersionAction := NewUpdateVersionAction;
      NewVersionNo := NewNewVersionNo;
    END;

    PROCEDURE SetUpdateDateTime@2(NewUpdateDateTime@1000 : Boolean;NewNewDate@1001 : Date;NewNewTime@1002 : Time);
    BEGIN
      UpdateDateTime := NewUpdateDateTime;
      NewDate := NewNewDate;
      NewTime := NewNewTime;
    END;

    PROCEDURE SetUpdateModified@3(NewUpdateModified@1000 : Boolean;NewNewModified@1001 : Boolean);
    BEGIN
      UpdateModified := NewUpdateModified;
      NewModified := NewNewModified;
    END;

    PROCEDURE UpdateObjects@4(VAR TmpObject@1000 : TEMPORARY Record 2000000001;AssignModifications@1001 : Boolean);
    VAR
      Object@1002 : Record 2000000001;
      Mgt@1003 : Codeunit 11102035;
      ObjectMgt@1004 : Codeunit 11102046;
      ctNoVersionListNoEntered@1005 : TextConst 'DEU=No Version List No. entered.;ENU=No Version List No. entered.;ESP=No Version List No. entered.;FRA=No Version List No. entered.;NLD=Geen versielijstnr. opgegeven.;DEA=No Version List No. entered.';
    BEGIN
      IF UpdateVersionList AND (UpdateVersionAction = UpdateVersionAction::"Add / Update") AND (NewVersionNo = '') THEN
        ERROR(ctNoVersionListNoEntered);

      IF TmpObject.FINDSET THEN
        REPEAT

          Object.GET(TmpObject.Type, '', TmpObject.ID);
          UpdateObject(Object);

          IF NOT AssignModifications THEN
            Mgt.DisableTraceModification;

          ObjectMgt.UpdateObject(Object, FALSE);

          IF NOT AssignModifications THEN
            Mgt.EnableTraceModification;

        UNTIL TmpObject.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateObject@5(VAR Object@1000 : Record 2000000001);
    VAR
      VersionControl@1001 : Codeunit 11102040;
    BEGIN
      IF UpdateVersionList THEN
        CASE UpdateVersionAction OF

          UpdateVersionAction::"Add / Update" :
            BEGIN
              VersionControl.RemoveVersionListId(Object, VersionListId, '');
              VersionControl.AddVersionListId(Object, VersionListId, NewVersionNo);
            END;

          UpdateVersionAction::Remove :
            VersionControl.RemoveVersionListId(Object, VersionListId, NewVersionNo);
        END;

      IF UpdateDateTime THEN BEGIN
        IF NewDate <> 0D THEN
          Object.Date := NewDate;
        IF NewTime <> 0T THEN
          Object.Time := NewTime;
      END;

      IF UpdateModified THEN
        Object.Modified := NewModified;
    END;

    PROCEDURE UpdateFile@6(FileName@1000 : Text;RunType@1001 : 'Update,Add,Remove,Create OBP File';PropertiesFileName@1002 : Text;NewFileName@1003 : Text);
    VAR
      ImExportMgt@1004 : Codeunit 11102043;
      ctChoosePropertyToUpdate@1005 : TextConst 'DEU=Choose property to update.;ENU=Choose property to update.;ESP=Choose property to update.;FRA=Choose property to update.;NLD=Kies eigenschap op bij te werken.;DEA=Choose property to update.';
      ctFOBFile@1006 : TextConst 'DEU=A FOB File cannot be updated.;ENU=A FOB File cannot be updated.;ESP=A FOB File cannot be updated.;FRA=A FOB File cannot be updated.;NLD=Een FOB-bestand kan niet worden bijgewerkt.;DEA=A FOB File cannot be updated.';
      ctInvalidFile@1007 : TextConst 'DEU=Invalid file.;ENU=Invalid file.;ESP=Invalid file.;FRA=Invalid file.;NLD=Ongeldig bestand.;DEA=Invalid file.';
      ctNoVersionListNoEntered@1008 : TextConst 'DEU=No Version List No. entered.;ENU=No Version List No. entered.;ESP=No Version List No. entered.;FRA=No Version List No. entered.;NLD=Geen versielijstnr. opgegeven.;DEA=No Version List No. entered.';
    BEGIN
      CASE RunType OF

        RunType::Update :
          IF UpdateVersionList AND (UpdateVersionAction = UpdateVersionAction::"Add / Update") AND (NewVersionNo = '') THEN
            ERROR(ctNoVersionListNoEntered);

        RunType::Remove, RunType::Add :
          IF NOT UpdateVersionList AND NOT UpdateDateTime AND NOT UpdateModified THEN
            ERROR(ctChoosePropertyToUpdate);
      END;

      CASE TRUE OF
        ImExportMgt.IsObjectFile(FileName) :
          UpdateTextFile(FileName, RunType, PropertiesFileName, NewFileName);

        ImExportMgt.IsObpFile(FileName) :
          UpdateObpFile(FileName, RunType, PropertiesFileName, NewFileName);

        ImExportMgt.IsFobFile(FileName) :
          ERROR(ctFOBFile);

        ELSE
          ERROR(ctInvalidFile);
      END;
    END;

    LOCAL PROCEDURE UpdateTextFile@7(FileName@1000 : Text;RunType@1001 : 'Update,Add,Remove,Create OBP File';PropertiesFileName@1002 : Text;NewFileName@1003 : Text);
    VAR
      TmpCALHistoryObject@1004 : TEMPORARY Record 11102052;
      TmpCALHistoryObject2@1005 : TEMPORARY Record 11102052;
      TmpCALHistoryLine@1006 : TEMPORARY Record 11102053;
      TmpCALHistoryLine2@1007 : TEMPORARY Record 11102053;
      TmpObject@1008 : TEMPORARY Record 2000000001;
      ImExportMgt@1009 : Codeunit 11102043;
      Progressbar@1010 : Codeunit 11102044;
      SourceControl@1011 : Codeunit 11102050;
      oFile@1012 : File;
      OutStr@1013 : OutStream;
      ctCreatingOBPFile@1014 : TextConst 'DEU=Creating OBP file...;ENU=Creating OBP file...;ESP=Creating OBP file...;FRA=Creating OBP file...;NLD=OBP bestand aanmaken...;DEA=Creating OBP file...';
      ctInvalidFile@1015 : TextConst 'DEU=Invalid file.;ENU=Invalid file.;ESP=Invalid file.;FRA=Invalid file.;NLD=Ongeldig bestand.;DEA=Invalid file.';
      ctUpdatingProperties@1016 : TextConst 'DEU=Updating properties...;ENU=Updating properties...;ESP=Updating properties...;FRA=Updating properties...;NLD=Eigenschappen bijwerken...;DEA=Updating properties...';
    BEGIN
      IF RunType = RunType::"Create OBP File" THEN
        Progressbar.Open(ctCreatingOBPFile, 1)
      ELSE
        Progressbar.Open(ctUpdatingProperties, 1);

      Progressbar.BarSize := ImExportMgt.LengthOfFile(FileName);
      Progressbar.UseRange(0, 80);
      SourceControl.ImportTextFile2(FileName, 1, Progressbar, 0, TmpCALHistoryObject, TmpCALHistoryLine, TRUE);

      oFile.WRITEMODE(TRUE);
      oFile.TEXTMODE(TRUE);
      oFile.CREATE(NewFileName);

      CASE RunType OF
        RunType::Update :
          BEGIN
            UpdateCALHistoryObject(TmpCALHistoryObject);
            SetPropertiesHistoryObjects(TmpCALHistoryObject, TmpCALHistoryLine);
            SourceControl.AppendHistoryLinesToFile(oFile, TmpCALHistoryLine);
          END;

        RunType::Add :
          CASE TRUE OF
            ImExportMgt.IsObjectFile(PropertiesFileName) :
              BEGIN
                Progressbar.BarSize := ImExportMgt.LengthOfFile(PropertiesFileName);
                Progressbar.UseRange(80, 100);
                SourceControl.ImportTextFile2(PropertiesFileName, 1, Progressbar, 0, TmpCALHistoryObject2, TmpCALHistoryLine2, TRUE);
                MergePropertiesHistoryHistory(TmpCALHistoryObject, TmpCALHistoryObject2);
                SetPropertiesHistoryObjects(TmpCALHistoryObject, TmpCALHistoryLine);
                SourceControl.AppendHistoryLinesToFile(oFile, TmpCALHistoryLine);
              END;

            ImExportMgt.IsObpFile(PropertiesFileName) :
              BEGIN
                ImExportMgt.ImportObpFromFile(PropertiesFileName, TmpObject);
                MergePropertiesHistoryObject(TmpCALHistoryObject, TmpObject);
                SetPropertiesHistoryObjects(TmpCALHistoryObject, TmpCALHistoryLine);
                SourceControl.AppendHistoryLinesToFile(oFile, TmpCALHistoryLine);
              END;

            ELSE
              ERROR(ctInvalidFile);
          END;

        RunType::Remove :
          BEGIN
            RemovePropertiesHistoryObjects(TmpCALHistoryObject, TmpCALHistoryLine);
            SourceControl.AppendHistoryLinesToFile(oFile, TmpCALHistoryLine);
          END;

        RunType::"Create OBP File" :
          BEGIN
            CopyHistoryToObject(TmpCALHistoryObject, TmpObject);
            oFile.CREATEOUTSTREAM(OutStr);
            ImExportMgt.FillOutstreamObp(OutStr, TmpObject);
          END;

      END;

      Progressbar.Close;

      oFile.CLOSE;
    END;

    LOCAL PROCEDURE UpdateObpFile@8(FileName@1000 : Text;RunType@1001 : 'Update,Add,Remove,Create OBP File';PropertiesFileName@1002 : Text;NewFileName@1003 : Text);
    VAR
      TmpCALHistoryObject@1004 : TEMPORARY Record 11102052;
      TmpCALHistoryLine@1005 : TEMPORARY Record 11102053;
      TmpObject@1006 : TEMPORARY Record 2000000001;
      TmpObject2@1007 : TEMPORARY Record 2000000001;
      ImExportMgt@1008 : Codeunit 11102043;
      Progressbar@1009 : Codeunit 11102044;
      SourceControl@1010 : Codeunit 11102050;
      oFile@1011 : File;
      OutStr@1012 : OutStream;
      ctInvalidFile@1013 : TextConst 'DEU=Invalid file.;ENU=Invalid file.;ESP=Invalid file.;FRA=Invalid file.;NLD=Ongeldig bestand.;DEA=Invalid file.';
      ctUpdatingProperties@1014 : TextConst 'DEU=Updating properties...;ENU=Updating properties...;ESP=Updating properties...;FRA=Updating properties...;NLD=Eigenschappen bijwerken...;DEA=Updating properties...';
    BEGIN
      ImExportMgt.ImportObpFromFile(FileName, TmpObject);

      CASE RunType OF
        RunType::Update :
          IF TmpObject.FINDSET THEN
            REPEAT
              UpdateObject(TmpObject);
              TmpObject.MODIFY;
            UNTIL TmpObject.NEXT = 0;

        RunType::Add :
          CASE TRUE OF
            ImExportMgt.IsObjectFile(PropertiesFileName) :
              BEGIN
                Progressbar.Open(ctUpdatingProperties, 1);
                Progressbar.BarSize := ImExportMgt.LengthOfFile(PropertiesFileName);
                SourceControl.ImportTextFile2(PropertiesFileName, 1, Progressbar, 0, TmpCALHistoryObject, TmpCALHistoryLine, TRUE);
                MergePropertiesObjectHistory(TmpObject, TmpCALHistoryObject);
                Progressbar.Close;
              END;

            ImExportMgt.IsObpFile(PropertiesFileName) :
              BEGIN
                ImExportMgt.ImportObpFromFile(PropertiesFileName, TmpObject2);
                MergePropertiesObjectObject(TmpObject, TmpObject2);
              END;

            ELSE
              ERROR(ctInvalidFile);
          END;

        RunType::Remove :
          RemovePropertiesObjects(TmpObject);

      END;

      oFile.WRITEMODE(TRUE);
      oFile.TEXTMODE(TRUE);
      oFile.CREATE(NewFileName);
      oFile.CREATEOUTSTREAM(OutStr);
      ImExportMgt.FillOutstreamObp(OutStr, TmpObject);
      oFile.CLOSE;
    END;

    LOCAL PROCEDURE UpdateCALHistoryObject@9(VAR TmpCALHistoryObject@1000 : TEMPORARY Record 11102052);
    VAR
      Object@1001 : Record 2000000001;
    BEGIN
      WITH TmpCALHistoryObject DO
        IF FINDSET THEN
          REPEAT
            Object."Version List" := "Version List";
            Object.Date := "Object Date";
            Object.Time := "Object Time";
            Object.Modified := Modified;

            UpdateObject(Object);

            "Version List" := Object."Version List";
            "Object Date" := Object.Date;
            "Object Time" := Object.Time;
            Modified := Object.Modified;

            MODIFY;

          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE SetPropertiesHistoryObjects@10(VAR TmpCALHistoryObject@1000 : TEMPORARY Record 11102052;VAR TmpCALHistoryLine@1001 : TEMPORARY Record 11102053);
    BEGIN
      WITH TmpCALHistoryObject DO
        IF FINDSET THEN
          REPEAT
            TmpCALHistoryLine.SETRANGE("Entry No.", "Entry No.");
            SetPropertiesHistoryLines(TmpCALHistoryLine, "Version List", "Object Date", "Object Time", Modified);
          UNTIL NEXT = 0;

      TmpCALHistoryLine.SETRANGE("Entry No.");
    END;

    LOCAL PROCEDURE SetPropertiesHistoryLines@11(VAR TmpCALHistoryLine@1000 : TEMPORARY Record 11102053;NewVersionList@1001 : Text;NewDate@1002 : Date;NewTime@1003 : Time;NewModified@1004 : Boolean);
    VAR
      TimeString@1005 : Text;
      DateCALLineNo@1006 : Integer;
      ModifiedCALLineNo@1007 : Integer;
      TimeCALLineNo@1008 : Integer;
      VersionListCALLineNo@1009 : Integer;
    BEGIN
      GetLineNos(TmpCALHistoryLine, DateCALLineNo, TimeCALLineNo, ModifiedCALLineNo, VersionListCALLineNo);

      IF DateCALLineNo = 0 THEN BEGIN
        MakeRoom(TmpCALHistoryLine, 5);
        AddIfFilled(TimeCALLineNo);
        AddIfFilled(ModifiedCALLineNo);
        AddIfFilled(VersionListCALLineNo);
      END;
      WriteLine(TmpCALHistoryLine, 5, '    Date=' + FORMAT(NewDate) + ';');

      IF TimeCALLineNo = 0 THEN BEGIN
        MakeRoom(TmpCALHistoryLine, 6);
        AddIfFilled(ModifiedCALLineNo);
        AddIfFilled(VersionListCALLineNo);
      END;
      TimeString := FORMAT(NewTime);
      IF STRPOS(TimeString, ' ') > 0 THEN
        TimeString := '[' + TimeString + ']';
      WriteLine(TmpCALHistoryLine, 6, '    Time=' + TimeString + ';');

      IF ModifiedCALLineNo = 0 THEN BEGIN
        MakeRoom(TmpCALHistoryLine, 7);
        AddIfFilled(VersionListCALLineNo);
      END;

      IF NewModified THEN
        WriteLine(TmpCALHistoryLine, 7, '    Modified=Yes;')
      ELSE
        DeleteLine(TmpCALHistoryLine, 7);

      IF VersionListCALLineNo = 0 THEN
        MakeRoom(TmpCALHistoryLine, 8);
      WriteLine(TmpCALHistoryLine, 8, '    Version List=' + NewVersionList + ';');
    END;

    LOCAL PROCEDURE RemovePropertiesHistoryObjects@12(VAR TmpCALHistoryObject@1000 : TEMPORARY Record 11102052;VAR TmpCALHistoryLine@1001 : TEMPORARY Record 11102053);
    BEGIN
      WITH TmpCALHistoryObject DO
        IF FINDSET THEN
          REPEAT
            TmpCALHistoryLine.SETRANGE("Entry No.", "Entry No.");
            RemovePropertiesHistoryLines(TmpCALHistoryLine);
          UNTIL NEXT = 0;

      TmpCALHistoryLine.SETRANGE("Entry No.");
    END;

    LOCAL PROCEDURE RemovePropertiesHistoryLines@13(VAR TmpCALHistoryLine@1000 : TEMPORARY Record 11102053);
    VAR
      DateCALLineNo@1001 : Integer;
      ModifiedCALLineNo@1002 : Integer;
      TimeCALLineNo@1003 : Integer;
      VersionListCALLineNo@1004 : Integer;
    BEGIN
      GetLineNos(TmpCALHistoryLine, DateCALLineNo, TimeCALLineNo, ModifiedCALLineNo, VersionListCALLineNo);

      IF (DateCALLineNo <> 0) AND UpdateDateTime THEN
        DeleteLine(TmpCALHistoryLine, DateCALLineNo);

      IF (TimeCALLineNo <> 0) AND UpdateDateTime THEN
        DeleteLine(TmpCALHistoryLine, TimeCALLineNo);

      IF (ModifiedCALLineNo <> 0) AND UpdateModified THEN
        DeleteLine(TmpCALHistoryLine, ModifiedCALLineNo);

      IF (VersionListCALLineNo <> 0) AND UpdateVersionList THEN
        DeleteLine(TmpCALHistoryLine, VersionListCALLineNo);
    END;

    LOCAL PROCEDURE RemovePropertiesObjects@14(VAR TmpObject@1000 : TEMPORARY Record 2000000001);
    BEGIN
      WITH TmpObject DO
        IF FINDSET THEN
          REPEAT
            IF UpdateVersionList THEN
              "Version List" := '';

            IF UpdateDateTime THEN BEGIN
              Date := 0D;
              Time := 0T;
            END;

            IF UpdateModified THEN
              Modified := FALSE;

            MODIFY;

          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE MakeRoom@15(VAR TmpCALHistoryLine@1000 : Record 11102053;LineNoToInsert@1001 : Integer);
    BEGIN
      TmpCALHistoryLine.SETFILTER("Line No.", '>=%1', LineNoToInsert);
      IF TmpCALHistoryLine.FINDLAST THEN
        REPEAT
          TmpCALHistoryLine.DELETE;
          TmpCALHistoryLine."Line No." += 1;
          TmpCALHistoryLine.INSERT;
        UNTIL TmpCALHistoryLine.NEXT(-1) = 0;

      TmpCALHistoryLine.SETRANGE("Line No.");
    END;

    LOCAL PROCEDURE WriteLine@16(VAR TmpCALHistoryLine@1000 : Record 11102053;LineNo@1001 : Integer;Code@1002 : Text);
    BEGIN
      TmpCALHistoryLine.FINDFIRST;
      IF TmpCALHistoryLine.GET(TmpCALHistoryLine."Entry No.", LineNo, 1) THEN BEGIN
        TmpCALHistoryLine.Code := Code;
        TmpCALHistoryLine.MODIFY;
      END ELSE BEGIN
        TmpCALHistoryLine."Line No." := LineNo;
        TmpCALHistoryLine."Sub Line No." := 1;
        TmpCALHistoryLine.Code := Code;
        TmpCALHistoryLine.INSERT;
      END;
    END;

    LOCAL PROCEDURE DeleteLine@17(VAR TmpCALHistoryLine@1000 : Record 11102053;LineNo@1001 : Integer);
    BEGIN
      TmpCALHistoryLine.FINDFIRST;
      IF TmpCALHistoryLine.GET(TmpCALHistoryLine."Entry No.", LineNo, 1) THEN
        TmpCALHistoryLine.DELETE;
    END;

    LOCAL PROCEDURE AddIfFilled@18(VAR Value@1000 : Integer);
    BEGIN
      IF Value <> 0 THEN
        Value += 1;
    END;

    LOCAL PROCEDURE GetLineNos@19(VAR TmpCALHistoryLine@1000 : Record 11102053;VAR DateCALLineNo@1001 : Integer;VAR TimeCALLineNo@1002 : Integer;VAR ModifiedCALLineNo@1003 : Integer;VAR VersionListCALLineNo@1004 : Integer);
    BEGIN
      WITH TmpCALHistoryLine DO
        IF FINDSET THEN BEGIN
          NEXT(4);
          REPEAT
            CASE DELSTR(Code, 10) OF
              '    Date=' :
                DateCALLineNo := "Line No.";
              '    Time=' :
                TimeCALLineNo := "Line No.";
              '    Modif' :
                ModifiedCALLineNo := "Line No.";
              '    Versi' :
                VersionListCALLineNo := "Line No.";
            END;

          UNTIL (NEXT = 0) OR ("Line No." >= 9);
        END;
    END;

    LOCAL PROCEDURE MergePropertiesHistoryHistory@20(VAR TmpCALHistoryObject@1000 : TEMPORARY Record 11102052;VAR TmpCALHistoryObject2@1001 : TEMPORARY Record 11102052);
    BEGIN
      WITH TmpCALHistoryObject DO BEGIN

        IF TmpCALHistoryObject2.FINDSET THEN
          REPEAT
            SETCURRENTKEY("Object Type", "Object No.");
            SETRANGE("Object Type", TmpCALHistoryObject2."Object Type");
            SETRANGE("Object No.", TmpCALHistoryObject2."Object No.");
            IF FINDFIRST THEN BEGIN

              IF UpdateVersionList THEN
                "Version List" := TmpCALHistoryObject2."Version List";

              IF UpdateDateTime THEN BEGIN
                "Object Date" := TmpCALHistoryObject2."Object Date";
                "Object Time" := TmpCALHistoryObject2."Object Time";
              END;

              IF UpdateModified THEN
                Modified := TmpCALHistoryObject2.Modified;

              MODIFY;

            END;

          UNTIL TmpCALHistoryObject2.NEXT = 0;

        RESET;
      END;
    END;

    LOCAL PROCEDURE MergePropertiesHistoryObject@21(VAR TmpCALHistoryObject@1000 : TEMPORARY Record 11102052;VAR TmpObject@1001 : TEMPORARY Record 2000000001);
    BEGIN
      WITH TmpCALHistoryObject DO BEGIN

        IF TmpObject.FINDSET THEN
          REPEAT
            SETCURRENTKEY("Object Type", "Object No.");
            SETRANGE("Object Type", TmpObject.Type);
            SETRANGE("Object No.", TmpObject.ID);
            IF FINDFIRST THEN BEGIN

              IF UpdateVersionList THEN
                "Version List" := TmpObject."Version List";

              IF UpdateDateTime THEN BEGIN
                "Object Date" := TmpObject.Date;
                "Object Time" := TmpObject.Time;
              END;

              IF UpdateModified THEN
                Modified := TmpObject.Modified;

              MODIFY;

            END;

          UNTIL TmpObject.NEXT = 0;

        RESET;
      END;
    END;

    LOCAL PROCEDURE MergePropertiesObjectObject@22(VAR TmpObject@1000 : TEMPORARY Record 2000000001;VAR TmpObject2@1001 : TEMPORARY Record 2000000001);
    BEGIN
      WITH TmpObject DO
        IF TmpObject2.FINDSET THEN
          REPEAT

            IF GET(TmpObject2.Type, '', TmpObject2.ID) THEN BEGIN

              IF UpdateVersionList THEN
                "Version List" := TmpObject2."Version List";

              IF UpdateDateTime THEN BEGIN
                Date := TmpObject2.Date;
                Time := TmpObject2.Time;
              END;

              IF UpdateModified THEN
                Modified := TmpObject2.Modified;

              MODIFY;

            END;

          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE MergePropertiesObjectHistory@23(VAR TmpObject@1000 : TEMPORARY Record 2000000001;VAR TmpCALHistoryObject@1001 : TEMPORARY Record 11102052);
    BEGIN
      WITH TmpObject DO

        IF TmpCALHistoryObject.FINDSET THEN
          REPEAT

            IF GET(TmpCALHistoryObject."Object Type", '', TmpCALHistoryObject."Object No.") THEN BEGIN

              IF UpdateVersionList THEN
                "Version List" := TmpCALHistoryObject."Version List";

              IF UpdateDateTime THEN BEGIN
                Date := TmpCALHistoryObject."Object Date";
                Time := TmpCALHistoryObject."Object Time";
              END;

              IF UpdateModified THEN
                Modified := TmpCALHistoryObject.Modified;

              MODIFY;

            END;

          UNTIL TmpCALHistoryObject.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyHistoryToObject@24(VAR TmpCALHistoryObject@1000 : TEMPORARY Record 11102052;VAR TmpObject@1001 : TEMPORARY Record 2000000001);
    BEGIN
      IF TmpCALHistoryObject.FINDSET THEN
        REPEAT
          TmpCALHistoryObject.FillObjectFields(TmpObject);
          TmpObject.INSERT;
        UNTIL TmpCALHistoryObject.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

