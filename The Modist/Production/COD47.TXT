OBJECT Codeunit 47 StringConversionManagement
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE WindowsToASCII@1(InText@1000 : Text) : Text;
    VAR
      OutText@1003 : Text;
      i@1001 : Integer;
      Len@1005 : Integer;
    BEGIN
      OutText := InText;
      Len := STRLEN(InText);
      FOR i := 1 TO Len DO
        OutText[i] := WindowsToASCIIChar(InText[i]);
      EXIT(OutText);
    END;

    LOCAL PROCEDURE WindowsToASCIIChar@2(c@1000 : Integer) : Char;
    BEGIN
      // EPC217-08 conversion rules
      CASE c OF
        1..127:
          EXIT(WindowsToASCIICharEPC(c));
        128..255:
          EXIT(WindowsToASCIIChar8Bit(c));
        8364: // Euro sign
          EXIT('E');
        ELSE
          EXIT(WindowsToASCIIChar16Bit(c));
      END;
    END;

    LOCAL PROCEDURE WindowsToASCIIChar8Bit@4(c@1000 : Integer) : Char;
    BEGIN
      CASE c OF
        191:
          EXIT('?');
        192..198:
          EXIT('A');
        199:
          EXIT('C');
        200..203:
          EXIT('E');
        204..207:
          EXIT('I');
        208:
          EXIT('D');
        209:
          EXIT('N');
        210..214,216:
          EXIT('O');
        217..220:
          EXIT('U');
        221:
          EXIT('Y');
        222:
          EXIT('T');
        223:
          EXIT('s');
        224..230:
          EXIT('a');
        231:
          EXIT('c');
        232..235:
          EXIT('e');
        236..239:
          EXIT('i');
        240:
          EXIT('d');
        241:
          EXIT('n');
        242..246,248:
          EXIT('o');
        249..252:
          EXIT('u');
        253,255:
          EXIT('y');
        254:
          EXIT('t');
      END;
      EXIT('.');
    END;

    LOCAL PROCEDURE WindowsToASCIIChar16Bit@5(c@1000 : Integer) : Char;
    BEGIN
      CASE c OF
        256,258,260,902,913,1040,1066:
          EXIT('A');
        257,259,261,940,945,1072,1098:
          EXIT('a');
        1041:
          EXIT('B');
        1073:
          EXIT('b');
        262,264,266,268,935,1063:
          EXIT('C');
        263,265,267,269,967,1095:
          EXIT('c');
        270,272,916,1044:
          EXIT('D');
        271,273,948,1076:
          EXIT('d');
        274,276,278,280,282,904,917,1045:
          EXIT('E');
        275,277,279,281,283,941,949,1077:
          EXIT('e');
        934,1060:
          EXIT('F');
        966,1092:
          EXIT('f');
        284,286,288,290,915,1043:
          EXIT('G');
        285,287,289,291,947,1075:
          EXIT('g');
        292,294,1061:
          EXIT('H');
        293,295,1093:
          EXIT('h');
        296,298,300,302,304,306,905,906,919,921,938,1048:
          EXIT('I');
        297,299,301,303,305,307,912,942,943,951,953,970,1080:
          EXIT('i');
        308:
          EXIT('J');
        309:
          EXIT('j');
        310,922,1050:
          EXIT('K');
        311,954,1082:
          EXIT('k');
        313,315,317,319,321,923,1051:
          EXIT('L');
        314,316,318,320,322,955,1083:
          EXIT('l');
        924,1052:
          EXIT('M');
        956,1084:
          EXIT('m');
        323,325,327,925,1053:
          EXIT('N');
        324,326,328,957,1085:
          EXIT('n');
        336,338,908,911,927,937,1054:
          EXIT('O');
        337,339,959,969,972,974,1086:
          EXIT('o');
        928,936,1055:
          EXIT('P');
        960,968,1087:
          EXIT('p');
        340,342,344,929,1056:
          EXIT('R');
        341,343,345,961,1088:
          EXIT('r');
        346,348,350,352,536,931,1057,1064,1065:
          EXIT('S');
        347,349,351,353,537,962,963,1089,1096,1097:
          EXIT('s');
        354,356,358,538,920,932,1058,1062:
          EXIT('T');
        355,357,359,539,952,964,1090,1094:
          EXIT('t');
        360,362,364,366,368,370,1059:
          EXIT('U');
        361,363,365,367,369,371,1091:
          EXIT('u');
        914,1042:
          EXIT('V');
        946,1074:
          EXIT('v');
        372:
          EXIT('W');
        373:
          EXIT('w');
        926:
          EXIT('X');
        958:
          EXIT('x');
        374,376,910,933,939,1049,1068,1070,1071:
          EXIT('Y');
        375,944,965,971,973,1081,1100,1102,1103:
          EXIT('y');
        377,379,381,918,1046,1047:
          EXIT('Z');
        378,380,382,950,1078,1079:
          EXIT('z');
      END;
      EXIT('.');
    END;

    LOCAL PROCEDURE WindowsToASCIICharEPC@6(c@1000 : Integer) : Char;
    BEGIN
      CASE c OF
        33,35..37,42,61,64,94,127: // !,#,$,%,&,*,=,@,delete
          EXIT('.');
        34,39,60,62,96: // ",',<,>,`
          EXIT(' ');
        38: // AMPERSAND
          EXIT('+');
        59: // ;
          EXIT(',');
        91,123: // [,{
          EXIT('(');
        92,124: // \,|
          EXIT('/');
        93,125: // ],}
          EXIT(')');
        95,126: // _,~
          EXIT('-');
      END;
      EXIT(c);
    END;

    PROCEDURE GetPaddedString@24(StringToModify@1000 : Text[250];PadLength@1001 : Integer;PadCharacter@1002 : Text[1]) FinalString : Text[250];
    BEGIN
      IF PadLength < STRLEN(StringToModify) THEN
        EXIT(StringToModify);
      FinalString := PADSTR('',PadLength - STRLEN(StringToModify),PadCharacter) + StringToModify;

      EXIT(FinalString);
    END;

    PROCEDURE RemoveDecimalFromString@25(StringToModify@1002 : Text[250];PadLength@1001 : Integer;PadCharacter@1000 : Text[1]) FinalString : Text[250];
    VAR
      TempNumeric@1004 : Decimal;
      TempInteger@1005 : Integer;
    BEGIN
      IF PadLength < STRLEN(StringToModify) THEN
        EXIT(StringToModify);

      EVALUATE(TempNumeric,StringToModify);
      TempNumeric := TempNumeric * 100;
      TempInteger := TempNumeric;
      FinalString := GetPaddedString(FORMAT(TempInteger),PadLength,PadCharacter);
      EXIT(FinalString);
    END;

    BEGIN
    END.
  }
}

