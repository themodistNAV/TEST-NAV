OBJECT Table 1222 Data Exch. Def
{
  OBJECT-PROPERTIES
  {
    Date=08/12/16;
    Time=[ 4:50:34 PM];
    Modified=Yes;
    Version List=NAVW19.00,OP9031;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF Name = '' THEN
                 Name := Code;
             END;

    OnDelete=VAR
               DataExchLineDef@1000 : Record 1227;
             BEGIN
               DataExchLineDef.SETRANGE("Data Exch. Def Code",Code);
               DataExchLineDef.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Data Exch. Def;
               ENG=Data Exch. Def];
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              ENG=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text100       ;CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 3   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type = Type::"Positive Pay Export" THEN
                                                                  "File Type" := "File Type"::"Fixed Text";
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=Bank Statement Import,Payment Export,Payroll Import,Generic Import,Positive Pay Export;
                                                                    ENG=Bank Statement Import,Payment Export,Payroll Import,Generic Import,Positive Pay Export];
                                                   OptionString=Bank Statement Import,Payment Export,Payroll Import,Generic Import,Positive Pay Export }
    { 4   ;   ;Reading/Writing XMLport;Integer    ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(XMLport));
                                                   CaptionML=[ENU=Reading/Writing XMLport;
                                                              ENG=Reading/Writing XMLport] }
    { 5   ;   ;Header Lines        ;Integer       ;CaptionML=[ENU=Header Lines;
                                                              ENG=Header Lines] }
    { 8   ;   ;Header Tag          ;Text250       ;CaptionML=[ENU=Header Tag;
                                                              ENG=Header Tag] }
    { 9   ;   ;Footer Tag          ;Text250       ;CaptionML=[ENU=Footer Tag;
                                                              ENG=Footer Tag] }
    { 10  ;   ;Column Separator    ;Option        ;InitValue=Comma;
                                                   CaptionML=[ENU=Column Separator;
                                                              ENG=Column Separator];
                                                   OptionCaptionML=[ENU=,Tab,Semicolon,Comma,Space;
                                                                    ENG=,Tab,Semicolon,Comma,Space];
                                                   OptionString=,Tab,Semicolon,Comma,Space }
    { 11  ;   ;File Encoding       ;Option        ;InitValue=WINDOWS;
                                                   CaptionML=[ENU=File Encoding;
                                                              ENG=File Encoding];
                                                   OptionCaptionML=[ENU=MS-DOS,UTF-8,UTF-16,WINDOWS;
                                                                    ENG=MS-DOS,UTF-8,UTF-16,WINDOWS];
                                                   OptionString=MS-DOS,UTF-8,UTF-16,WINDOWS }
    { 13  ;   ;File Type           ;Option        ;CaptionML=[ENU=File Type;
                                                              ENG=File Type];
                                                   OptionCaptionML=[ENU=Xml,Variable Text,Fixed Text,Json;
                                                                    ENG=Xml,Variable Text,Fixed Text,Json];
                                                   OptionString=Xml,Variable Text,Fixed Text,Json }
    { 14  ;   ;Ext. Data Handling Codeunit;Integer;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Ext. Data Handling Codeunit;
                                                              ENG=Ext. Data Handling Codeunit] }
    { 15  ;   ;Reading/Writing Codeunit;Integer   ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Reading/Writing Codeunit;
                                                              ENG=Reading/Writing Codeunit] }
    { 16  ;   ;Validation Codeunit ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Validation Codeunit;
                                                              ENG=Validation Codeunit] }
    { 17  ;   ;Data Handling Codeunit;Integer     ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Data Handling Codeunit;
                                                              ENG=Data Handling Codeunit] }
    { 18  ;   ;User Feedback Codeunit;Integer     ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=User Feedback Codeunit;
                                                              ENG=User Feedback Codeunit] }
    { 50000;  ;Use Excel File      ;Boolean       ;Description=OP9031 }
    { 50001;  ;First Header Field Value;Text30    ;Description=OP9031 }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Type                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ColumnSeparatorMissingErr@1001 : TextConst 'ENU=Column separator is missing in the definition.;ENG=Column separator is missing in the definition.';
      XmlNoTemplateColumnsMsg@1002 : TextConst '@@@="%1=file type";ENU=There are no template columns for files of type %1.;ENG=There are no template columns for files of type %1.';
      PaymentExportNoTemplateColumnsMsg@1005 : TextConst 'ENU=There are no template columns for Payment Export definitions.;ENG=There are no template columns for Payment Export definitions.';
      OtherTypeNoTemplateColumnsMsg@1007 : TextConst 'ENU=There are no template columns for %1 definitions.;ENG=There are no template columns for %1 definitions.';

    PROCEDURE InsertRec@1(Code@1000 : Code[20];Name@1001 : Text[100];Type@1002 : Option;ProcessingXMLport@1003 : Integer;HeaderCount@1004 : Integer;HeaderTag@1005 : Text[250];FooterTag@1006 : Text[250]);
    BEGIN
      INIT;
      VALIDATE(Code,Code);
      VALIDATE(Name,Name);
      VALIDATE(Type,Type);
      VALIDATE("Reading/Writing XMLport",ProcessingXMLport);
      VALIDATE("Header Lines",HeaderCount);
      VALIDATE("Header Tag",HeaderTag);
      VALIDATE("Footer Tag",FooterTag);
      INSERT;
    END;

    PROCEDURE InsertRecForExport@4(Code@1000 : Code[20];Name@1001 : Text[100];ParamaterType@1002 : Option;ProcessingXMLport@1003 : Integer;FileType@1004 : Option);
    BEGIN
      INIT;
      VALIDATE(Code,Code);
      VALIDATE(Name,Name);
      "File Type" := FileType;
      Type := ParamaterType;
      VALIDATE("File Type",FileType);
      VALIDATE(Type,Type);

      VALIDATE("Reading/Writing XMLport",ProcessingXMLport);
      INSERT;
    END;

    PROCEDURE ColumnSeparatorChar@3() : Text;
    VAR
      SeparatorChar@1000 : Text;
    BEGIN
      CASE "Column Separator" OF
        "Column Separator"::Tab:
          BEGIN
            SeparatorChar[1] := 9;
            EXIT(SeparatorChar);
          END;
        "Column Separator"::Semicolon:
          EXIT(';');
        "Column Separator"::Comma:
          EXIT(',');
        "Column Separator"::Space:
          EXIT(' ');
        ELSE
          ERROR(ColumnSeparatorMissingErr)
      END
    END;

    PROCEDURE CheckEnableDisableIsNonXMLFileType@9() : Boolean;
    BEGIN
      EXIT(NOT ("File Type" IN ["File Type"::Xml,"File Type"::Json]))
    END;

    PROCEDURE CheckEnableDisableIsImportType@18() : Boolean;
    BEGIN
      IF Type IN [Type::"Payment Export",Type::"Positive Pay Export"] THEN
        EXIT(FALSE);
      EXIT(NOT ("File Type" IN ["File Type"::Xml,"File Type"::Json]))
    END;

    PROCEDURE CheckEnableDisableIsBankStatementImportType@15() : Boolean;
    BEGIN
      EXIT(Type = Type::"Bank Statement Import");
    END;

    PROCEDURE CheckEnableDisableDelimitedFileType@8() : Boolean;
    BEGIN
      EXIT("File Type" = "File Type"::"Variable Text");
    END;

    LOCAL PROCEDURE IsBankOrPayrollType@11() : Boolean;
    BEGIN
      EXIT(Type IN [Type::"Bank Statement Import",Type::"Payroll Import",Type::"Payment Export"]);
    END;

    LOCAL PROCEDURE IsXML@12() : Boolean;
    BEGIN
      EXIT("File Type" = "File Type"::Xml);
    END;

    LOCAL PROCEDURE IsJson@5() : Boolean;
    BEGIN
      EXIT("File Type" = "File Type"::Json);
    END;

    LOCAL PROCEDURE CheckCreateTemplateColumns@7(VAR ResultingMessage@1000 : Text) : Boolean;
    BEGIN
      IF IsXML OR IsJson THEN BEGIN
        ResultingMessage := STRSUBSTNO(XmlNoTemplateColumnsMsg,"File Type");
        EXIT(FALSE);
      END;

      CASE Type OF
        Type::"Bank Statement Import",
        Type::"Payroll Import":
          EXIT(TRUE);
        Type::"Payment Export":
          BEGIN
            ResultingMessage := PaymentExportNoTemplateColumnsMsg;
            EXIT(FALSE);
          END;
        ELSE BEGIN
          ResultingMessage := STRSUBSTNO(OtherTypeNoTemplateColumnsMsg,Type);
          EXIT(FALSE);
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE PositivePayUpdateCodeunits@2() : Boolean;
    BEGIN
      IF Type = Type::"Positive Pay Export" THEN BEGIN
        "Validation Codeunit" := CODEUNIT::"Exp. Validation Pos. Pay";
        "Reading/Writing Codeunit" := CODEUNIT::"Exp. Writing Pos. Pay";
        "Reading/Writing XMLport" := XMLPORT::"Export Generic Fixed Width";
        "Ext. Data Handling Codeunit" := CODEUNIT::"Exp. External Data Pos. Pay";
        "User Feedback Codeunit" := CODEUNIT::"Exp. User Feedback Pos. Pay";
      END ELSE BEGIN
        "Validation Codeunit" := 0;
        "Reading/Writing Codeunit" := 0;
        "Reading/Writing XMLport" := 0;
        "Ext. Data Handling Codeunit" := 0;
        "User Feedback Codeunit" := 0;
      END;
      EXIT(Type = Type::"Positive Pay Export");
    END;

    PROCEDURE ProcessDataExchange@6(VAR DataExch@1000 : Record 1220);
    VAR
      DataExchLineDef@1003 : Record 1227;
      DataExchMapping@1002 : Record 1224;
    BEGIN
      IF "Data Handling Codeunit" <> 0 THEN
        CODEUNIT.RUN("Data Handling Codeunit",DataExch);

      DataExchLineDef.SETRANGE("Data Exch. Def Code",Code);
      DataExchLineDef.SETRANGE("Parent Code",'');
      DataExchLineDef.FINDSET;

      REPEAT
        DataExchMapping.SETRANGE("Data Exch. Def Code",DataExch."Data Exch. Def Code");
        DataExchMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);
        DataExchMapping.FINDSET;

        REPEAT
          IF DataExchMapping."Pre-Mapping Codeunit" <> 0 THEN
            CODEUNIT.RUN(DataExchMapping."Pre-Mapping Codeunit",DataExch);

          IF DataExchMapping."Mapping Codeunit" <> 0 THEN
            CODEUNIT.RUN(DataExchMapping."Mapping Codeunit",DataExch);

          IF DataExchMapping."Post-Mapping Codeunit" <> 0 THEN
            CODEUNIT.RUN(DataExchMapping."Post-Mapping Codeunit",DataExch);
        UNTIL DataExchMapping.NEXT = 0;
      UNTIL DataExchLineDef.NEXT = 0;
    END;

    BEGIN
    {
      //DOC OP9031 RK 08/12/16 - Enable import from excel file.
    }
    END.
  }
}

