OBJECT Codeunit 1012 Job Jnl.-Post Line
{
  OBJECT-PROPERTIES
  {
    Date=23/10/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43402,NAVGB9.00.00.43402;
  }
  PROPERTIES
  {
    TableNo=210;
    Permissions=TableData 169=imd,
                TableData 241=imd,
                TableData 5802=rimd;
    OnRun=BEGIN
            GetGLSetup;
            RunWithCheck(Rec);
          END;

  }
  CODE
  {
    VAR
      Cust@1025 : Record 18;
      Job@1004 : Record 167;
      JobTask@1015 : Record 1001;
      JobLedgEntry@1002 : Record 169;
      JobJnlLine@1005 : Record 210;
      JobJnlLine2@1006 : Record 210;
      ResJnlLine@1007 : Record 207;
      ItemJnlLine@1008 : Record 83;
      JobReg@1009 : Record 241;
      GLSetup@1011 : Record 98;
      CurrExchRate@1012 : Record 330;
      Currency@1013 : Record 4;
      Location@1035 : Record 14;
      Item@1040000 : Record 27;
      JobJnlCheckLine@1016 : Codeunit 1011;
      ResJnlPostLine@1017 : Codeunit 212;
      ItemJnlPostLine@1018 : Codeunit 22;
      JobPostLine@1024 : Codeunit 1001;
      GLSetupRead@1023 : Boolean;
      NextEntryNo@1020 : Integer;
      GLEntryNo@1034 : Integer;
      Text000@1000 : TextConst 'ENU="The Job Planning Line No. field must have a value when reservation entries exist. Journal Template Name=%1, Job Journal Batch Name=%2, Line No.=%3. It cannot be zero or empty.";ENG="The Job Planning Line No. field must have a value when reservation entries exist. Journal Template Name=%1, Job Journal Batch Name=%2, Line No.=%3. It cannot be zero or empty."';

    LOCAL PROCEDURE GetJobReg@3(VAR NewJobReg@1000 : Record 241);
    BEGIN
      NewJobReg := JobReg;
    END;

    LOCAL PROCEDURE RunWithoutCheck@9(VAR JobJnlLine2@1000 : Record 210) : Integer;
    VAR
      JobLedgEntryNo@1002 : Integer;
    BEGIN
      JobJnlLine.COPY(JobJnlLine2);
      JobLedgEntryNo := Code(FALSE);
      JobJnlLine2 := JobJnlLine;
      EXIT(JobLedgEntryNo);
    END;

    PROCEDURE RunWithCheck@4(VAR JobJnlLine2@1000 : Record 210) : Integer;
    VAR
      JobLedgEntryNo@1002 : Integer;
    BEGIN
      JobJnlLine.COPY(JobJnlLine2);
      JobLedgEntryNo := Code(TRUE);
      JobJnlLine2 := JobJnlLine;
      EXIT(JobLedgEntryNo);
    END;

    LOCAL PROCEDURE Code@1(CheckLine@1002 : Boolean) : Integer;
    VAR
      ItemLedgEntry@1004 : Record 32;
      ResLedgEntry@1006 : Record 203;
      ValueEntry@1003 : Record 5802;
      JobLedgEntry2@1007 : Record 169;
      JobPlanningLine@1001 : Record 1003;
      TempTrackingSpecification@1012 : TEMPORARY Record 336;
      ItemJnlLine2@1013 : Record 83;
      JobJnlLineReserve@1014 : Codeunit 99000844;
      JobLedgEntryNo@1005 : Integer;
      SkipJobLedgerEntry@1009 : Boolean;
      TempRemainingQty@1000 : Decimal;
      RemainingAmount@1010 : Decimal;
      RemainingAmountLCY@1016 : Decimal;
      RemainingQtyToTrack@1015 : Decimal;
    BEGIN
      GetGLSetup;

      WITH JobJnlLine DO BEGIN
        IF EmptyLine THEN
          EXIT;

        IF CheckLine THEN
          JobJnlCheckLine.RunCheck(JobJnlLine);

        IF JobLedgEntry."Entry No." = 0 THEN BEGIN
          JobLedgEntry.LOCKTABLE;
          IF JobLedgEntry.FINDLAST THEN
            NextEntryNo := JobLedgEntry."Entry No.";
          NextEntryNo := NextEntryNo + 1;
        END;

        IF "Document Date" = 0D THEN
          "Document Date" := "Posting Date";

        IF JobReg."No." = 0 THEN BEGIN
          JobReg.LOCKTABLE;
          IF (NOT JobReg.FINDLAST) OR (JobReg."To Entry No." <> 0) THEN BEGIN
            JobReg.INIT;
            JobReg."No." := JobReg."No." + 1;
            JobReg."From Entry No." := NextEntryNo;
            JobReg."To Entry No." := NextEntryNo;
            JobReg."Creation Date" := TODAY;
            JobReg."Source Code" := "Source Code";
            JobReg."Journal Batch Name" := "Journal Batch Name";
            JobReg."User ID" := USERID;
            JobReg.INSERT;
          END;
        END;
        Job.GET("Job No.");
        Job.TestBlocked;
        Job.TESTFIELD("Bill-to Customer No.");
        Cust.GET(Job."Bill-to Customer No.");
        TESTFIELD("Currency Code",Job."Currency Code");
        JobTask.GET("Job No.","Job Task No.");
        JobTask.TESTFIELD("Job Task Type",JobTask."Job Task Type"::Posting);
        JobJnlLine2 := JobJnlLine;

        GetGLSetup;
        IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
          IF JobJnlLine2."Source Currency Code" <> GLSetup."Additional Reporting Currency" THEN BEGIN
            Currency.GET(GLSetup."Additional Reporting Currency");
            Currency.TESTFIELD("Amount Rounding Precision");
            JobJnlLine2."Source Currency Total Cost" :=
              ROUND(
                CurrExchRate.ExchangeAmtLCYToFCY(
                  JobJnlLine2."Posting Date",
                  GLSetup."Additional Reporting Currency",JobJnlLine2."Total Cost (LCY)",
                  CurrExchRate.ExchangeRate(
                    JobJnlLine2."Posting Date",GLSetup."Additional Reporting Currency")),
                Currency."Amount Rounding Precision");
            JobJnlLine2."Source Currency Total Price" :=
              ROUND(
                CurrExchRate.ExchangeAmtLCYToFCY(
                  JobJnlLine2."Posting Date",
                  GLSetup."Additional Reporting Currency",JobJnlLine2."Total Price (LCY)",
                  CurrExchRate.ExchangeRate(
                    JobJnlLine2."Posting Date",GLSetup."Additional Reporting Currency")),
                Currency."Amount Rounding Precision");
            JobJnlLine2."Source Currency Line Amount" :=
              ROUND(
                CurrExchRate.ExchangeAmtLCYToFCY(
                  JobJnlLine2."Posting Date",
                  GLSetup."Additional Reporting Currency",JobJnlLine2."Line Amount (LCY)",
                  CurrExchRate.ExchangeRate(
                    JobJnlLine2."Posting Date",GLSetup."Additional Reporting Currency")),
                Currency."Amount Rounding Precision");
          END;
        END ELSE BEGIN
          JobJnlLine2."Source Currency Total Cost" := 0;
          JobJnlLine2."Source Currency Total Price" := 0;
          JobJnlLine2."Source Currency Line Amount" := 0;
        END;

        IF JobJnlLine2."Entry Type" = JobJnlLine2."Entry Type"::Usage THEN BEGIN
          CASE Type OF
            Type::Resource:
              BEGIN
                InitResJnlLine;
                ResLedgEntry.LOCKTABLE;
                ResJnlPostLine.RunWithCheck(ResJnlLine);
                JobJnlLine2."Resource Group No." := ResJnlLine."Resource Group No.";
                JobLedgEntryNo := CreateJobLedgEntry(JobJnlLine2);
              END;
            Type::Item:
              BEGIN
                IF NOT "Job Posting Only" THEN BEGIN
                  InitItemJnlLine;
                  JobJnlLineReserve.TransJobJnlLineToItemJnlLine(JobJnlLine2,ItemJnlLine,ItemJnlLine."Quantity (Base)");

                  IF JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.") THEN
                    ItemJnlLine."Job Contract Entry No." := JobPlanningLine."Job Contract Entry No."
                  ELSE
                    IF JobPlanningReservationExists(JobJnlLine2."No.",JobJnlLine2."Job No.") THEN
                      ERROR(Text000,"Journal Template Name","Journal Batch Name","Line No.");

                  ItemLedgEntry.LOCKTABLE;
                  ItemJnlLine2 := ItemJnlLine;
                  ItemJnlPostLine.RunWithCheck(ItemJnlLine);
                  ItemJnlPostLine.CollectTrackingSpecification(TempTrackingSpecification);
                  PostWhseJnlLine(ItemJnlLine2,ItemJnlLine2.Quantity,ItemJnlLine2."Quantity (Base)",TempTrackingSpecification);
                END;

                IF GetJobConsumptionValueEntry(ValueEntry,JobJnlLine) THEN BEGIN
                  RemainingAmount := JobJnlLine2."Line Amount";
                  RemainingAmountLCY := JobJnlLine2."Line Amount (LCY)";
                  RemainingQtyToTrack := JobJnlLine2.Quantity;

                  REPEAT
                    SkipJobLedgerEntry := FALSE;
                    IF ItemLedgEntry.GET(ValueEntry."Item Ledger Entry No.") THEN BEGIN
                      JobLedgEntry2.SETRANGE("Ledger Entry Type",JobLedgEntry2."Ledger Entry Type"::Item);
                      JobLedgEntry2.SETRANGE("Ledger Entry No.",ItemLedgEntry."Entry No.");
                      // The following code is only to secure that JLEs created at receipt in version 6.0 or earlier,
                      // are not created again at point of invoice (6.0 SP1 and newer).
                      IF JobLedgEntry2.FINDFIRST AND (JobLedgEntry2.Quantity = -ItemLedgEntry.Quantity) THEN
                        SkipJobLedgerEntry := TRUE
                      ELSE BEGIN
                        JobJnlLine2."Serial No." := ItemLedgEntry."Serial No.";
                        JobJnlLine2."Lot No." := ItemLedgEntry."Lot No.";
                      END;
                    END;
                    IF NOT SkipJobLedgerEntry THEN BEGIN
                      TempRemainingQty := "Remaining Qty.";
                      JobJnlLine2.Quantity := -ValueEntry."Invoiced Quantity" / "Qty. per Unit of Measure";
                      JobJnlLine2."Quantity (Base)" := ROUND(JobJnlLine2.Quantity * "Qty. per Unit of Measure",0.00001);
                      IF "Currency Code" <> '' THEN
                        Currency.GET("Currency Code")
                      ELSE
                        Currency.InitRoundingPrecision;

                      UpdateJobJnlLineTotalAmounts(JobJnlLine2,Currency."Amount Rounding Precision");
                      UpdateJobJnlLineAmount(
                        JobJnlLine2,RemainingAmount,RemainingAmountLCY,RemainingQtyToTrack,Currency."Amount Rounding Precision");

                      JobJnlLine2.VALIDATE("Remaining Qty.",TempRemainingQty);
                      JobJnlLine2."Ledger Entry Type" := "Ledger Entry Type"::Item;
                      JobJnlLine2."Ledger Entry No." := ValueEntry."Item Ledger Entry No.";
                      JobLedgEntryNo := CreateJobLedgEntry(JobJnlLine2);
                      ValueEntry."Job Ledger Entry No." := JobLedgEntryNo;
                      ValueEntry.MODIFY(TRUE);
                    END;
                  UNTIL ValueEntry.NEXT = 0;
                END;
              END;
            Type::"G/L Account":
              JobLedgEntryNo := CreateJobLedgEntry(JobJnlLine2);
          END;
        END ELSE
          JobLedgEntryNo := CreateJobLedgEntry(JobJnlLine2);
      END;

      EXIT(JobLedgEntryNo);
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE CreateJobLedgEntry@2(JobJnlLine2@1003 : Record 210) : Integer;
    VAR
      ResLedgEntry@1002 : Record 203;
      JobPlanningLine@1000 : Record 1003;
      Job@1004 : Record 167;
      JobTransferLine@1005 : Codeunit 1004;
      JobLinkUsage@1001 : Codeunit 1026;
    BEGIN
      SetCurrency(JobJnlLine2);

      JobLedgEntry.INIT;
      JobTransferLine.FromJnlLineToLedgEntry(JobJnlLine2,JobLedgEntry);

      IF JobLedgEntry."Entry Type" = JobLedgEntry."Entry Type"::Sale THEN BEGIN
        JobLedgEntry.Quantity := -JobJnlLine2.Quantity;
        JobLedgEntry."Quantity (Base)" := -JobJnlLine2."Quantity (Base)";

        JobLedgEntry."Total Cost (LCY)" := -JobJnlLine2."Total Cost (LCY)";
        JobLedgEntry."Total Cost" := -JobJnlLine2."Total Cost";

        JobLedgEntry."Total Price (LCY)" := -JobJnlLine2."Total Price (LCY)";
        JobLedgEntry."Total Price" := -JobJnlLine2."Total Price";

        JobLedgEntry."Line Amount (LCY)" := -JobJnlLine2."Line Amount (LCY)";
        JobLedgEntry."Line Amount" := -JobJnlLine2."Line Amount";

        JobLedgEntry."Line Discount Amount (LCY)" := -JobJnlLine2."Line Discount Amount (LCY)";
        JobLedgEntry."Line Discount Amount" := -JobJnlLine2."Line Discount Amount";
      END ELSE BEGIN
        JobLedgEntry.Quantity := JobJnlLine2.Quantity;
        JobLedgEntry."Quantity (Base)" := JobJnlLine2."Quantity (Base)";

        JobLedgEntry."Total Cost (LCY)" := JobJnlLine2."Total Cost (LCY)";
        JobLedgEntry."Total Cost" := JobJnlLine2."Total Cost";

        JobLedgEntry."Total Price (LCY)" := JobJnlLine2."Total Price (LCY)";
        JobLedgEntry."Total Price" := JobJnlLine2."Total Price";

        JobLedgEntry."Line Amount (LCY)" := JobJnlLine2."Line Amount (LCY)";
        JobLedgEntry."Line Amount" := JobJnlLine2."Line Amount";

        JobLedgEntry."Line Discount Amount (LCY)" := JobJnlLine2."Line Discount Amount (LCY)";
        JobLedgEntry."Line Discount Amount" := JobJnlLine2."Line Discount Amount";
      END;

      JobLedgEntry."Additional-Currency Total Cost" := -JobLedgEntry."Additional-Currency Total Cost";
      JobLedgEntry."Add.-Currency Total Price" := -JobLedgEntry."Add.-Currency Total Price";
      JobLedgEntry."Add.-Currency Line Amount" := -JobLedgEntry."Add.-Currency Line Amount";

      JobLedgEntry."Entry No." := NextEntryNo;
      JobLedgEntry."No. Series" := JobJnlLine2."Posting No. Series";
      JobLedgEntry."Original Unit Cost (LCY)" := JobLedgEntry."Unit Cost (LCY)";
      JobLedgEntry."Original Total Cost (LCY)" := JobLedgEntry."Total Cost (LCY)";
      JobLedgEntry."Original Unit Cost" := JobLedgEntry."Unit Cost";
      JobLedgEntry."Original Total Cost" := JobLedgEntry."Total Cost";
      JobLedgEntry."Original Total Cost (ACY)" := JobLedgEntry."Additional-Currency Total Cost";
      JobLedgEntry."Dimension Set ID" := JobJnlLine2."Dimension Set ID";

      WITH JobJnlLine2 DO
        CASE Type OF
          Type::Resource:
            BEGIN
              IF "Entry Type" = "Entry Type"::Usage THEN BEGIN
                IF ResLedgEntry.FINDLAST THEN BEGIN
                  JobLedgEntry."Ledger Entry Type" := JobLedgEntry."Ledger Entry Type"::Resource;
                  JobLedgEntry."Ledger Entry No." := ResLedgEntry."Entry No.";
                END;
              END;
            END;
          Type::Item:
            BEGIN
              JobLedgEntry."Ledger Entry Type" := "Ledger Entry Type"::Item;
              JobLedgEntry."Ledger Entry No." := "Ledger Entry No.";
              JobLedgEntry."Serial No." := "Serial No.";
              JobLedgEntry."Lot No." := "Lot No.";
            END;
          Type::"G/L Account":
            BEGIN
              JobLedgEntry."Ledger Entry Type" := JobLedgEntry."Ledger Entry Type"::" ";
              IF GLEntryNo > 0 THEN BEGIN
                JobLedgEntry."Ledger Entry Type" := JobLedgEntry."Ledger Entry Type"::"G/L Account";
                JobLedgEntry."Ledger Entry No." := GLEntryNo;
              END;
            END;
        END;
      IF JobLedgEntry."Entry Type" = JobLedgEntry."Entry Type"::Sale THEN BEGIN
        JobLedgEntry."Serial No." := JobJnlLine2."Serial No.";
        JobLedgEntry."Lot No." := JobJnlLine2."Lot No.";
      END;

      JobLedgEntry.INSERT(TRUE);

      JobReg."To Entry No." := NextEntryNo;
      JobReg.MODIFY;

      IF JobLedgEntry."Entry Type" = JobLedgEntry."Entry Type"::Usage THEN BEGIN
        // Usage Link should be applied if it is enabled for the job,
        // if a Job Planning Line number is defined or if it is enabled for a Job Planning Line.
        Job.GET(JobLedgEntry."Job No.");
        IF Job."Apply Usage Link" OR
           (JobJnlLine2."Job Planning Line No." <> 0) OR
           JobLinkUsage.FindMatchingJobPlanningLine(JobPlanningLine,JobLedgEntry)
        THEN
          JobLinkUsage.ApplyUsage(JobLedgEntry,JobJnlLine2)
        ELSE
          JobPostLine.InsertPlLineFromLedgEntry(JobLedgEntry)
      END;

      NextEntryNo := NextEntryNo + 1;

      EXIT(JobLedgEntry."Entry No.");
    END;

    LOCAL PROCEDURE SetCurrency@23(JobJnlLine@1000 : Record 210);
    BEGIN
      IF JobJnlLine."Currency Code" = '' THEN BEGIN
        CLEAR(Currency);
        Currency.InitRoundingPrecision
      END ELSE BEGIN
        Currency.GET(JobJnlLine."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
        Currency.TESTFIELD("Unit-Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE PostWhseJnlLine@24(ItemJnlLine@1000 : Record 83;OriginalQuantity@1001 : Decimal;OriginalQuantityBase@1002 : Decimal;VAR TempTrackingSpecification@1003 : TEMPORARY Record 336);
    VAR
      WarehouseJournalLine@1004 : Record 7311;
      TempWarehouseJournalLine@1005 : TEMPORARY Record 7311;
      ItemTrackingManagement@1006 : Codeunit 6500;
      WMSManagement@1007 : Codeunit 7302;
      WhseJnlRegisterLine@1008 : Codeunit 7301;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF "Entry Type" IN ["Entry Type"::Consumption,"Entry Type"::Output] THEN
          EXIT;

        Quantity := OriginalQuantity;
        "Quantity (Base)" := OriginalQuantityBase;
        GetLocation("Location Code");
        IF Location."Bin Mandatory" THEN
          IF WMSManagement.CreateWhseJnlLine(ItemJnlLine,0,WarehouseJournalLine,FALSE) THEN BEGIN
            TempTrackingSpecification.MODIFYALL("Source Type",DATABASE::"Job Journal Line");
            ItemTrackingManagement.SplitWhseJnlLine(WarehouseJournalLine,TempWarehouseJournalLine,TempTrackingSpecification,FALSE);
            IF TempWarehouseJournalLine.FIND('-') THEN
              REPEAT
                WMSManagement.CheckWhseJnlLine(TempWarehouseJournalLine,1,0,FALSE);
                WhseJnlRegisterLine.RUN(TempWarehouseJournalLine);
              UNTIL TempWarehouseJournalLine.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE GetLocation@25(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE SetGLEntryNo@15(GLEntryNo2@1000 : Integer);
    BEGIN
      GLEntryNo := GLEntryNo2;
    END;

    LOCAL PROCEDURE InitResJnlLine@1040000();
    BEGIN
      WITH ResJnlLine DO BEGIN
        INIT;
        "Entry Type" := JobJnlLine2."Entry Type";
        "Document No." := JobJnlLine2."Document No.";
        "External Document No." := JobJnlLine2."External Document No.";
        "Posting Date" := JobJnlLine2."Posting Date";
        "Document Date" := JobJnlLine2."Document Date";
        "Resource No." := JobJnlLine2."No.";
        Description := JobJnlLine2.Description;
        "Work Type Code" := JobJnlLine2."Work Type Code";
        "Job No." := JobJnlLine2."Job No.";
        "Shortcut Dimension 1 Code" := JobJnlLine2."Shortcut Dimension 1 Code";
        "Shortcut Dimension 2 Code" := JobJnlLine2."Shortcut Dimension 2 Code";
        "Dimension Set ID" := JobJnlLine2."Dimension Set ID";
        "Unit of Measure Code" := JobJnlLine2."Unit of Measure Code";
        "Source Code" := JobJnlLine2."Source Code";
        "Gen. Bus. Posting Group" := JobJnlLine2."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := JobJnlLine2."Gen. Prod. Posting Group";
        "Posting No. Series" := JobJnlLine2."Posting No. Series";
        "Reason Code" := JobJnlLine2."Reason Code";
        "Resource Group No." := JobJnlLine2."Resource Group No.";
        "Recurring Method" := JobJnlLine2."Recurring Method";
        "Expiration Date" := JobJnlLine2."Expiration Date";
        "Recurring Frequency" := JobJnlLine2."Recurring Frequency";
        Quantity := JobJnlLine2.Quantity;
        "Qty. per Unit of Measure" := JobJnlLine2."Qty. per Unit of Measure";
        "Direct Unit Cost" := JobJnlLine2."Direct Unit Cost (LCY)";
        "Unit Cost" := JobJnlLine2."Unit Cost (LCY)";
        "Total Cost" := JobJnlLine2."Total Cost (LCY)";
        "Unit Price" := JobJnlLine2."Unit Price (LCY)";
        "Total Price" := JobJnlLine2."Line Amount (LCY)";
        "Time Sheet No." := JobJnlLine2."Time Sheet No.";
        "Time Sheet Line No." := JobJnlLine2."Time Sheet Line No.";
        "Time Sheet Date" := JobJnlLine2."Time Sheet Date";
      END;
    END;

    LOCAL PROCEDURE InitItemJnlLine@1040001();
    BEGIN
      WITH ItemJnlLine DO BEGIN
        INIT;
        "Line No." := "Line No.";
        "Item No." := JobJnlLine2."No.";
        Item.GET(JobJnlLine2."No.");
        "Inventory Posting Group" := Item."Inventory Posting Group";
        "Posting Date" := JobJnlLine2."Posting Date";
        "Document Date" := JobJnlLine2."Document Date";
        "Source Type" := "Source Type"::Customer;
        "Source No." := Job."Bill-to Customer No.";
        "Document No." := JobJnlLine2."Document No.";

        "External Document No." := JobJnlLine2."External Document No.";
        Description := JobJnlLine2.Description;
        "Location Code" := JobJnlLine2."Location Code";
        "Applies-to Entry" := JobJnlLine2."Applies-to Entry";
        "Applies-from Entry" := JobJnlLine2."Applies-from Entry";
        "Shortcut Dimension 1 Code" := JobJnlLine2."Shortcut Dimension 1 Code";
        "Shortcut Dimension 2 Code" := JobJnlLine2."Shortcut Dimension 2 Code";
        "Dimension Set ID" := JobJnlLine2."Dimension Set ID";
        "Country/Region Code" := JobJnlLine2."Country/Region Code";
        "Entry Type" := "Entry Type"::"Negative Adjmt.";
        "Source Code" := JobJnlLine2."Source Code";
        "Gen. Bus. Posting Group" := JobJnlLine2."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := JobJnlLine2."Gen. Prod. Posting Group";
        "Posting No. Series" := JobJnlLine2."Posting No. Series";
        "Variant Code" := JobJnlLine2."Variant Code";
        "Bin Code" := JobJnlLine2."Bin Code";
        "Unit of Measure Code" := JobJnlLine2."Unit of Measure Code";
        "Reason Code" := JobJnlLine2."Reason Code";

        "Transaction Type" := JobJnlLine2."Transaction Type";
        "Transport Method" := JobJnlLine2."Transport Method";
        "Entry/Exit Point" := JobJnlLine2."Entry/Exit Point";
        Area := JobJnlLine2.Area;
        "Transaction Specification" := JobJnlLine2."Transaction Specification";
        "Invoiced Quantity" := JobJnlLine2.Quantity;
        "Invoiced Qty. (Base)" := JobJnlLine2."Quantity (Base)";
        "Source Currency Code" := JobJnlLine2."Source Currency Code";
        "Shipment Method Code" := JobJnlLine2."Shipment Method Code";

        "Item Category Code" := Item."Item Category Code";
        "Product Group Code" := Item."Product Group Code";

        Quantity := JobJnlLine2.Quantity;
        "Quantity (Base)" := JobJnlLine2."Quantity (Base)";
        "Qty. per Unit of Measure" := JobJnlLine2."Qty. per Unit of Measure";
        "Unit Cost" := JobJnlLine2."Unit Cost (LCY)";
        "Unit Cost (ACY)" := JobJnlLine2."Unit Cost";
        Amount := JobJnlLine2."Total Cost (LCY)";
        "Amount (ACY)" := JobJnlLine2."Total Cost";
        "Value Entry Type" := "Value Entry Type"::"Direct Cost";

        "Job No." := JobJnlLine2."Job No.";
        "Job Task No." := JobJnlLine2."Job Task No.";
      END;
    END;

    LOCAL PROCEDURE UpdateJobJnlLineTotalAmounts@12(VAR JobJnlLineToUpdate@1000 : Record 210;AmtRoundingPrecision@1001 : Decimal);
    BEGIN
      WITH JobJnlLineToUpdate DO BEGIN
        "Total Cost" := ROUND("Unit Cost" * Quantity,AmtRoundingPrecision);
        "Total Cost (LCY)" := ROUND("Unit Cost (LCY)" * Quantity,AmtRoundingPrecision);
        "Total Price" := ROUND("Unit Price" * Quantity,AmtRoundingPrecision);
        "Total Price (LCY)" := ROUND("Unit Price (LCY)" * Quantity,AmtRoundingPrecision);
      END;
    END;

    LOCAL PROCEDURE UpdateJobJnlLineAmount@13(VAR JobJnlLineToUpdate@1001 : Record 210;VAR RemainingAmount@1002 : Decimal;VAR RemainingAmountLCY@1003 : Decimal;VAR RemainingQtyToTrack@1004 : Decimal;AmtRoundingPrecision@1000 : Decimal);
    BEGIN
      WITH JobJnlLineToUpdate DO BEGIN
        "Line Amount" := ROUND(RemainingAmount * Quantity / RemainingQtyToTrack,AmtRoundingPrecision);
        "Line Amount (LCY)" := ROUND(RemainingAmountLCY * Quantity / RemainingQtyToTrack,AmtRoundingPrecision);

        RemainingAmount -= "Line Amount";
        RemainingAmountLCY -= "Line Amount (LCY)";
        RemainingQtyToTrack -= Quantity;
      END;
    END;

    LOCAL PROCEDURE JobPlanningReservationExists@6(ItemNo@1001 : Code[20];JobNo@1002 : Code[20]) : Boolean;
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Source Type",DATABASE::"Job Planning Line");
        SETRANGE("Source Subtype",Job.Status::Order);
        SETRANGE("Source ID",JobNo);
        EXIT(NOT ISEMPTY);
      END;
    END;

    LOCAL PROCEDURE GetJobConsumptionValueEntry@8(VAR ValueEntry@1000 : Record 5802;JobJournalLine@1001 : Record 210) : Boolean;
    BEGIN
      WITH JobJournalLine DO BEGIN
        ValueEntry.SETCURRENTKEY("Job No.","Job Task No.","Document No.");
        ValueEntry.SETRANGE("Item No.","No.");
        ValueEntry.SETRANGE("Job No.","Job No.");
        ValueEntry.SETRANGE("Job Task No.","Job Task No.");
        ValueEntry.SETRANGE("Document No.","Document No.");
        ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::"Negative Adjmt.");
        ValueEntry.SETRANGE("Job Ledger Entry No.",0);
      END;
      EXIT(ValueEntry.FINDSET);
    END;

    BEGIN
    END.
  }
}

