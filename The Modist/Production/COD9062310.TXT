OBJECT Codeunit 9062310 Release Planning Board
{
  OBJECT-PROPERTIES
  {
    Date=28/12/15;
    Time=[ 4:53:09 PM];
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PlanningBoardHeader@1000000000 : Record 9062337;
      PlanningBoardTable@1000000001 : Record 9062338;
      PlanningBoardTableField@1000000005 : Record 9062340;
      PlanningBoardTableLink@1000000002 : Record 9062339;
      PlanningBoardTableRelation@1000000004 : Record 9062341;
      PlanningBoardDataManagement@1000000003 : Codeunit 9062307;

    LOCAL PROCEDURE "--- Constants ---"@1000000005();
    BEGIN
    END;

    PROCEDURE MaxNoOfTableLinks@1000000010() : Integer;
    BEGIN
      //DOC NA2016.12 - Returning maximal number of table links
      //  <- The number

      EXIT(10);
    END;

    PROCEDURE MaxNoOfCaptionFields@1000000008() : Integer;
    BEGIN
      //DOC NA2016.12 - Returning maximal number of caption fields
      //  <- The number

      EXIT(10);
    END;

    PROCEDURE MaxNoOfRelations@1000000006() : Integer;
    BEGIN
      //DOC NA2016.12 - Returning maximal number of relations
      //  <- The number

      EXIT(20);
    END;

    LOCAL PROCEDURE "--- General ---"@1000000003();
    BEGIN
    END;

    PROCEDURE Release@1000000001(VAR pPlanningBoardHeader@1000000000 : Record 9062337) : Boolean;
    BEGIN
      //DOC NA2016.12 - Releasing planning board
      //  <> pPlanningBoardHeader: The planning board
      //  <- TRUE = Released, FALSE = Already released before calling this function

      IF (pPlanningBoardHeader.Status = pPlanningBoardHeader.Status::Released) THEN
        EXIT(FALSE);

      PlanningBoardHeader := pPlanningBoardHeader;

      Check(pPlanningBoardHeader);

      pPlanningBoardHeader.VALIDATE(Status, pPlanningBoardHeader.Status::Released);
      pPlanningBoardHeader.MODIFY(TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE Reopen@1000000002(VAR pPlanningBoardHeader@1000000000 : Record 9062337) : Boolean;
    BEGIN
      //DOC NA2016.12 - Reopening planning board
      //  <> pPlanningBoardHeader: The planning board
      //  <- TRUE = Reopened, FALSE = Already open before calling this function

      IF (pPlanningBoardHeader.Status = pPlanningBoardHeader.Status::Open) THEN
        EXIT(FALSE);

      pPlanningBoardHeader.VALIDATE(Status, pPlanningBoardHeader.Status::Open);
      pPlanningBoardHeader.MODIFY(TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE Check@9062230(VAR pPlanningBoardHeader@1000000000 : Record 9062337);
    BEGIN
      //DOC NA2016.12 - Checking planning board
      //  <> pPlanningBoardHeader: The planning board

      PlanningBoardHeader := pPlanningBoardHeader;

      CheckHeader();
      CheckTable(PlanningBoardTable."Table Type"::Resource);
      CheckTable(PlanningBoardTable."Table Type"::Entry);
      CheckTableLinks();
    END;

    LOCAL PROCEDURE "--- Internal ---"@1000000004();
    BEGIN
    END;

    LOCAL PROCEDURE CheckHeader@1000000009();
    BEGIN
      //DOC NA2016.12 - Checking planning board header

      PlanningBoardHeader.TESTFIELD("Start Date Formula");
    END;

    LOCAL PROCEDURE CheckTable@1000000013(pTableType@1000000000 : Integer);
    BEGIN
      //DOC NA2016.12 - Checking planning board table

      PlanningBoardTable.GET(PlanningBoardHeader.Code, pTableType);
      PlanningBoardTable.TESTFIELD("Table ID");
      IF (pTableType = PlanningBoardTable."Table Type"::Entry) THEN
      BEGIN
        PlanningBoardTable.TESTFIELD("Date Time Fields");
        PlanningBoardTable.TESTFIELD("Start Date Field ID");
        PlanningBoardTable.TESTFIELD("End Date Field ID");
        IF (PlanningBoardTable."Date Time Fields" IN [PlanningBoardTable."Date Time Fields"::"Dates and Times",
            PlanningBoardTable."Date Time Fields"::DateTimes]) THEN
        BEGIN
          PlanningBoardTable.TESTFIELD("Start Time Field ID");
          PlanningBoardTable.TESTFIELD("End Time Field ID");
        END;
      END;
      IF (PlanningBoardTable."Foreground Style Field ID" <> 0) THEN
      BEGIN
        PlanningBoardTable.TESTFIELD("Foreground Style Table ID");
        PlanningBoardTable.TESTFIELD("Foreground Style Field Type");
      END;
      IF (pTableType = PlanningBoardTable."Table Type"::Resource) THEN
        IF (PlanningBoardTable."Picture Field ID" <> 0) THEN
        BEGIN
          PlanningBoardTable.TESTFIELD("Picture Table ID");
          PlanningBoardTable.TESTFIELD("Picture Field Type");
        END;
      IF (pTableType = PlanningBoardTable."Table Type"::Entry) THEN
      BEGIN
        IF (PlanningBoardTable."Background Style Field ID" <> 0) THEN
        BEGIN
          PlanningBoardTable.TESTFIELD("Background Style Table ID");
          PlanningBoardTable.TESTFIELD("Background Style Field Type");
        END;
        IF (PlanningBoardTable."Border Style Field ID" <> 0) THEN
        BEGIN
          PlanningBoardTable.TESTFIELD("Border Style Table ID");
          PlanningBoardTable.TESTFIELD("Border Style Field Type");
        END;
      END;

      CheckTableRelations();
      CheckTableFields();
    END;

    LOCAL PROCEDURE CheckTableLinks@1000000011();
    VAR
      lMaxNoOfTableLinks@1000000000 : Integer;
      eTooManyTableLinks@1000000001 : TextConst 'ENU="There are too many table links; maximum number is %1.";ENG="There are too many table links; maximum number is %1."';
    BEGIN
      //DOC NA2016.12 - Checking planning board table link

      PlanningBoardTableLink.RESET();
      PlanningBoardTableLink.SETRANGE("Planning Board Code", PlanningBoardHeader.Code);
      lMaxNoOfTableLinks := MaxNoOfTableLinks();
      IF (PlanningBoardTableLink.COUNT() > lMaxNoOfTableLinks) THEN
        ERROR(eTooManyTableLinks, lMaxNoOfTableLinks);
      PlanningBoardTableLink.FINDSET();
      REPEAT
        PlanningBoardTableLink.TESTFIELD("Resource Table ID");
        PlanningBoardTableLink.TESTFIELD("Resource Table Field ID");
        PlanningBoardTableLink.TESTFIELD("Entry Table ID");
        PlanningBoardTableLink.TESTFIELD("Entry Table Field ID");
      UNTIL (PlanningBoardTableLink.NEXT() = 0);
    END;

    LOCAL PROCEDURE CheckTableRelations@1000000015();
    VAR
      eTooManyRelations@1000000000 : TextConst 'ENU="There are too many relations defined for ""%1"" table; you can only define up to %2.";ENG="There are too many relations defined for ""%1"" table; you can only define up to %2."';
      lRecordName@1000000001 : Text;
      eTableRecordName@1000000002 : TextConst 'ENU=Planning Board %1 Table;ENG=Planning Board %1 Table';
      eTableFieldRecordName@1000000003 : TextConst 'ENU=Planning Board %1 Table %2 Field %3;ENG=Planning Board %1 Table %2 Field %3';
    BEGIN
      //DOC NA2016.12 - Checking table relations

      PlanningBoardTableRelation.RESET();
      PlanningBoardTableRelation.SETRANGE("Planning Board Code", PlanningBoardTable."Planning Board Code");
      PlanningBoardTableRelation.SETRANGE("Planning Board Table Type", PlanningBoardTable."Table Type");
      IF (PlanningBoardTableRelation.COUNT() > MaxNoOfRelations()) THEN
        ERROR(eTooManyRelations, FORMAT(PlanningBoardTable."Table Type"), MaxNoOfRelations());
      IF (PlanningBoardTableRelation.FINDSET()) THEN
      REPEAT
        PlanningBoardTableRelation.TESTFIELD("Related Table ID");
        PlanningBoardTableRelation.TESTFIELD("Relation Definition ID");
      UNTIL (PlanningBoardTableRelation.NEXT() = 0);

      lRecordName := STRSUBSTNO(eTableRecordName, FORMAT(PlanningBoardTable."Table Type"));
      CheckTableRelation(PlanningBoardTable."Foreground Style Relation ID", lRecordName, PlanningBoardTable.FIELDCAPTION("Foreground Style Relation ID"));
      CheckTableRelation(PlanningBoardTable."Background Style Relation ID", lRecordName, PlanningBoardTable.FIELDCAPTION("Background Style Relation ID"));
      CheckTableRelation(PlanningBoardTable."Border Style Relation ID", lRecordName, PlanningBoardTable.FIELDCAPTION("Border Style Relation ID"));
      CheckTableRelation(PlanningBoardTable."Picture Relation ID", lRecordName, PlanningBoardTable.FIELDCAPTION("Picture Relation ID"));

      PlanningBoardTableField.RESET();
      PlanningBoardTableField.SETRANGE("Planning Board Code", PlanningBoardTable."Planning Board Code");
      PlanningBoardTableField.SETRANGE("Planning Board Table Type", PlanningBoardTable."Table Type");
      PlanningBoardTableField.SETFILTER("Relation ID", '<>0');
      IF (PlanningBoardTableField.FINDSET()) THEN
      REPEAT
        lRecordName := STRSUBSTNO(eTableFieldRecordName, FORMAT(PlanningBoardTable."Table Type"), PlanningBoardTableField."Field Application",
          PlanningBoardTableField.ID);
        CheckTableRelation(PlanningBoardTableField."Relation ID", lRecordName, PlanningBoardTableField.FIELDCAPTION("Relation ID"));
      UNTIL (PlanningBoardTableField.NEXT() = 0);
    END;

    LOCAL PROCEDURE CheckTableRelation@1000000007(pRelationId@1000000000 : Integer;pRecordName@1000000003 : Text;pFieldName@1000000001 : Text);
    VAR
      eNoRelation@1000000002 : TextConst 'ENU="""%1"" ""%2"" references relation %3 which doesn''t exist.";ENG="""%1"" ""%2"" references relation %3 which doesn''t exist."';
    BEGIN
      //DOC NA2016.12 - Checking table relation
      //  -> pRelationId: Relation ID
      //  -> pRecordName: Record name
      //  -> pFieldName: Field name

      IF (pRelationId = 0) THEN
        EXIT;
      IF ( NOT (PlanningBoardTableRelation.GET(PlanningBoardTable."Planning Board Code", PlanningBoardTable."Table Type", pRelationId))) THEN
        ERROR(eNoRelation, pRecordName, pFieldName, pRelationId);
    END;

    LOCAL PROCEDURE CheckTableFields@1000000000();
    BEGIN
      //DOC NA2016.12 - Checking table fields

      PlanningBoardTableField.RESET();
      PlanningBoardTableField.SETRANGE("Planning Board Code", PlanningBoardTable."Planning Board Code");
      PlanningBoardTableField.SETRANGE("Planning Board Table Type", PlanningBoardTable."Table Type");
      IF (PlanningBoardTableField.FINDSET()) THEN
      REPEAT
        PlanningBoardTableField.TESTFIELD("Table ID");
        PlanningBoardTableField.TESTFIELD("Field Type");
        PlanningBoardTableField.TESTFIELD("Field ID");
        IF (PlanningBoardTableField."Lookup Table ID" <> 0) THEN
          PlanningBoardTableField.TESTFIELD("Lookup Field ID");
      UNTIL (PlanningBoardTableField.NEXT() = 0);
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 16/10/2015 - Created
    }
    END.
  }
}

