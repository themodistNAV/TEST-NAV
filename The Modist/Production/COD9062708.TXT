OBJECT Codeunit 9062708 Import Error Management
{
  OBJECT-PROPERTIES
  {
    Date=16/03/16;
    Time=12:00:00 PM;
    Version List=NH2016.14;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ImportErrorLine@1000000000 : Record 9062842;

    PROCEDURE HasErrors@1000000003(pTableId@1000000000 : Integer;pTablePosition@1000000001 : Text) : Boolean;
    BEGIN
      EXIT(HasErrorsInternal(pTableId, pTablePosition, ImportErrorLine.Type::Error));
    END;

    PROCEDURE HasWarnings@1000000007(pTableId@1000000000 : Integer;pTablePosition@1000000001 : Text) : Boolean;
    BEGIN
      EXIT(HasErrorsInternal(pTableId, pTablePosition, ImportErrorLine.Type::Warning));
    END;

    PROCEDURE HasErrorsOrWarnings@1000000006(pTableId@1000000000 : Integer;pTablePosition@1000000001 : Text) : Boolean;
    BEGIN
      EXIT(HasErrorsInternal(pTableId, pTablePosition, ImportErrorLine.Type::" "));
    END;

    LOCAL PROCEDURE HasErrorsInternal@1000000008(pTableId@1000000001 : Integer;pTablePosition@1000000000 : Text;pType@1000000002 : Integer) : Boolean;
    BEGIN
      FilterImportErrorLine(pTableId, pTablePosition, pType, FALSE);
      EXIT( NOT (ImportErrorLine.ISEMPTY()));
    END;

    PROCEDURE GetErrorMessage@1000000004(pTableId@1000000000 : Integer;pTablePosition@1000000001 : Text) : Text;
    BEGIN
      FindFirstError(pTableId, pTablePosition);
      EXIT(ImportErrorLine."Error Message");
    END;

    PROCEDURE GetFullErrorMessage@1000000005(pTableId@1000000000 : Integer;pTablePosition@1000000001 : Text) : Text;
    BEGIN
      FindFirstError(pTableId, pTablePosition);
      EXIT(ImportErrorLine.GetFullErrorMessage());
    END;

    LOCAL PROCEDURE FindFirstError@1000000009(pTableId@1000000000 : Integer;pTablePosition@1000000001 : Text);
    BEGIN
      FilterImportErrorLine(pTableId, pTablePosition, ImportErrorLine.Type::Error, FALSE);
      IF ( NOT (ImportErrorLine.FINDFIRST())) THEN
      BEGIN
        ImportErrorLine.SETRANGE(Type);
        IF ( NOT (ImportErrorLine.FINDFIRST())) THEN
          CLEAR(ImportErrorLine);
      END;
    END;

    PROCEDURE CreateError@1000000001(pTableId@1000000000 : Integer;pTablePosition@1000000001 : Text;pErrorMessage@1000000002 : Text);
    BEGIN
      CreateErrorOrWarning(pTableId, pTablePosition, ImportErrorLine.Type::Error, pErrorMessage);
    END;

    PROCEDURE CreateWarning@1000000012(pTableId@1000000000 : Integer;pTablePosition@1000000001 : Text;pErrorMessage@1000000002 : Text);
    BEGIN
      CreateErrorOrWarning(pTableId, pTablePosition, ImportErrorLine.Type::Warning, pErrorMessage);
    END;

    PROCEDURE CreateErrorOrWarning@1000000016(pTableId@1000000000 : Integer;pTablePosition@1000000001 : Text;pType@1000000003 : Integer;pErrorMessage@1000000002 : Text);
    VAR
      RecRef@1000000004 : RecordRef;
      FldRef@1000000005 : FieldRef;
      MyStr@1000000006 : Text;
    BEGIN

      RecRef.OPEN(pTableId);
      RecRef.SETPOSITION(pTablePosition);
      FldRef:=RecRef.FIELD(1);
      MyStr:= FldRef.VALUE;
      RecRef.CLOSE;

      CLEAR(ImportErrorLine);
      ImportErrorLine.INIT();
      ImportErrorLine.VALIDATE("Table ID", pTableId);
      ImportErrorLine.VALIDATE("Table Position", pTablePosition);
      ImportErrorLine.VALIDATE(Type, pType);
      ImportErrorLine.VALIDATE("Batch No",MyStr);
      ImportErrorLine.SetErrorMessage(pErrorMessage);
      ImportErrorLine.INSERT(TRUE);
    END;

    PROCEDURE DeleteErrors@1000000014(pTableId@1000000001 : Integer;pTablePosition@1000000000 : Text);
    BEGIN
      DeleteErrorsInternal(pTableId, pTablePosition, ImportErrorLine.Type::Error);
    END;

    PROCEDURE DeleteWarnings@1000000013(pTableId@1000000001 : Integer;pTablePosition@1000000000 : Text);
    BEGIN
      DeleteErrorsInternal(pTableId, pTablePosition, ImportErrorLine.Type::Warning);
    END;

    PROCEDURE DeleteErrorsAndWarnings@1000000002(pTableId@1000000001 : Integer;pTablePosition@1000000000 : Text);
    BEGIN
      DeleteErrorsInternal(pTableId, pTablePosition, ImportErrorLine.Type::" ");
    END;

    LOCAL PROCEDURE DeleteErrorsInternal@1000000010(pTableId@1000000001 : Integer;pTablePosition@1000000000 : Text;pType@1000000002 : Integer);
    BEGIN
      FilterImportErrorLine(pTableId, pTablePosition, pType, FALSE);
      ImportErrorLine.DELETEALL(TRUE);
    END;

    PROCEDURE ShowErrors@1000000000(pTableId@1000000001 : Integer;pTablePosition@1000000000 : Text;pModal@1000000002 : Boolean);
    BEGIN
      FilterImportErrorLine(pTableId, pTablePosition, ImportErrorLine.Type::" ", TRUE);
      IF (pModal) THEN
        PAGE.RUNMODAL(0, ImportErrorLine)
      ELSE
        PAGE.RUN(0, ImportErrorLine);
    END;

    LOCAL PROCEDURE FilterImportErrorLine@1000000015(pTableId@1000000002 : Integer;pTablePosition@1000000001 : Text;pType@1000000000 : Integer;pHideFilter@1000000003 : Boolean);
    BEGIN
      ImportErrorLine.RESET();
      IF (pHideFilter) THEN
        ImportErrorLine.FILTERGROUP(2);
      ImportErrorLine.SETCURRENTKEY("Table ID", "Table Position");
      ImportErrorLine.SETRANGE("Table ID", pTableId);
      ImportErrorLine.SETRANGE("Table Position", pTablePosition);
      IF (pType <> ImportErrorLine.Type::" ") THEN
        ImportErrorLine.SETRANGE(Type, pType);
      IF (pHideFilter) THEN
        ImportErrorLine.FILTERGROUP(0);
    END;

    BEGIN
    {
      //DOC NH2016.14 JH 07/03/2016 - Created
    }
    END.
  }
}

