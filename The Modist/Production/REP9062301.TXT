OBJECT Report 9062301 Migration XMLport Generator
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Migration XMLport Generator;
               ENG=Migration XMLport Generator];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   CLEAR(ClientFilePath);
                   CLEAR(VariableId);
                   CLEAR(StartXmlPortId);
                   XmlPortObjectDate := TODAY();
                   XmlPortObjectTime := TIME();
                   XmlPortObjectInitials := ToUserInitials(USERID);
                   LastId := 9062228;
                 END;

    OnPreReport=BEGIN
                  IF (StartXmlPortId = 0) THEN
                    ERROR(tEmptyStartXmlPortId);
                  IF (XmlPortObjectDate = 0D) THEN
                    XmlPortObjectDate := TODAY();
                  IF (XmlPortObjectTime = 0T) THEN
                    XmlPortObjectTime := TIME();
                  IF (XmlPortObjectInitials = '') THEN
                    XmlPortObjectInitials := ToUserInitials(USERID);

                  IF ((dTable.GETFILTER("Object Name") = '') AND (dTable.GETFILTER("Object ID") = '')) THEN
                    ERROR(tEmptyTableFilter);
                  IF (dTable.COUNT() > MaxNoOfTables()) THEN
                    ERROR(tTooManyTables, MaxNoOfTables());

                  IF (dTable.COUNT() > 0) THEN
                    EndXmlPortId := StartXmlPortId + dTable.COUNT()
                  ELSE
                    ERROR(tNoTablesWithinFilter);
                  CurrentXmlPortId := StartXmlPortId;

                  ClearLineBuffer();
                  OpenFile();
                END;

    OnPostReport=BEGIN
                   CloseFile();
                   ClearLineBuffer();
                   DownloadFile();
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;dTable            ;
               DataItemTable=Table2000000038;
               DataItemTableView=SORTING(Object Type,Object ID)
                                 WHERE(Object Type=CONST(Table));
               ReqFilterHeadingML=[ENU=Table;
                                   ENG=Table];
               OnPreDataItem=BEGIN
                               CLEAR(TableId);
                             END;

               OnAfterGetRecord=BEGIN
                                  AddObject(FALSE);

                                  IF (ClientFilePath = '') THEN
                                    ClientFilePath := ToPath(STRSUBSTNO(tOneObjectFileName, CurrentXmlPortId, XmlPortName))
                                  ELSE
                                    ClientFilePath := STRSUBSTNO(tMultipleObjectsFileName, FORMAT(StartXmlPortId, 0, 1), FORMAT(EndXmlPortId, 0, 1));

                                  CurrentXmlPortId += 1;
                                END;

               OnPostDataItem=BEGIN
                                AddObject(TRUE);
                              END;

               ReqFilterFields=Object ID,Object Name }

    { 1000000002;1;DataItem;dTableField      ;
               DataItemTable=Table2000000041;
               DataItemTableView=SORTING(TableNo,No.)
                                 WHERE(Class=CONST(Normal));
               OnAfterGetRecord=BEGIN
                                  IF (BlobBuffer.GET(dTableField."No.")) THEN
                                    CurrReport.SKIP();
                                  AddXmlPortObjectField();
                                END;

               DataItemLink=TableNo=FIELD(Object ID) }

    { 1000000003;1;DataItem;dTableBlobField  ;
               DataItemTable=Table2000000041;
               DataItemTableView=SORTING(TableNo,No.)
                                 WHERE(Class=CONST(Normal));
               OnAfterGetRecord=BEGIN
                                  IF ( NOT (BlobBuffer.GET(dTableBlobField."No."))) THEN
                                    CurrReport.SKIP();
                                  AddXmlPortObjectBlobField();
                                END;

               DataItemLink=TableNo=FIELD(Object ID) }

    { 1000000001;0;DataItem;dLine            ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnPreDataItem=BEGIN
                               LineBuffer.RESET();
                               dLine.SETRANGE(Number, 1, LineBuffer.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF (dLine.Number = 1) THEN
                                    LineBuffer.FINDSET()
                                  ELSE
                                    LineBuffer.NEXT();
                                  WriteToFile(LineBuffer.Value);
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1000000006;;Container;
                  Name=ContentAreaContainer;
                  CaptionML=[ENU=Content Area;
                             ENG=Content Area];
                  ContainerType=ContentArea }

      { 1000000005;1;Group  ;
                  Name=OptionsGroup;
                  CaptionML=ENU=Options;
                  GroupType=Group }

      { 1000000004;2;Field  ;
                  Name=StartXmlPortIdField;
                  CaptionML=[ENU=Start XMLport ID;
                             ENG=Start XMLport ID];
                  SourceExpr=StartXmlPortId }

      { 9062230;2;Field     ;
                  Name=NextFreeFromCustomerRangeField;
                  CaptionML=[ENU=Next Free From Customer Range;
                             ENG=Next Free From Customer Range];
                  SourceExpr=tNextFreeFromCustomerRange;
                  Editable=FALSE;
                  OnDrillDown=BEGIN
                                StartXmlPortId := PickNextFreeFromCustomerRange();
                              END;

                  ShowCaption=No }

      { 9062231;2;Field     ;
                  Name=NextFreeFromEnhNavRangeField;
                  CaptionML=[ENU=Next Free From Enhanced NAV Range;
                             ENG=Next Free From Enhanced NAV Range];
                  SourceExpr=tNextFreeFromEnhancedNavRange;
                  Editable=FALSE;
                  OnDrillDown=BEGIN
                                StartXmlPortId := PickNextFreeFromEnhancedNavRange();
                              END;

                  ShowCaption=No }

      { 1000000003;2;Field  ;
                  Name=VersionListField;
                  CaptionML=[ENU=Version List;
                             ENG=Version List];
                  SourceExpr=XmlPortObjectVersion }

      { 1000000002;2;Field  ;
                  Name=DateField;
                  CaptionML=ENU=Date;
                  SourceExpr=XmlPortObjectDate }

      { 1000000001;2;Field  ;
                  Name=TimeField;
                  CaptionML=ENU=Time;
                  SourceExpr=XmlPortObjectTime }

      { 1000000000;2;Field  ;
                  Name=InitialsField;
                  CaptionML=ENU=Initials;
                  SourceExpr=XmlPortObjectInitials }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      LineBuffer@1000000009 : TEMPORARY Record 9062730;
      BlobBuffer@1000000024 : TEMPORARY Record 9062730;
      PrimaryKeyBuffer@9062229 : TEMPORARY Record 9062730;
      ForeignKeyBuffer@9062230 : TEMPORARY Record 9062730;
      FileSystem@1000000010 : Codeunit 9062264;
      LanguageToolkit@9062231 : Codeunit 9062586;
      ObjectFieldToolkit@9062233 : Codeunit 9062343;
      ServerFile@1000000012 : File;
      ServerFilePath@1000000011 : Text;
      ClientFilePath@1000000013 : Text;
      StartXmlPortId@1000000008 : Integer;
      EndXmlPortId@1000000019 : Integer;
      CurrentXmlPortId@1000000020 : Integer;
      XmlPortObjectVersion@1000000007 : Text;
      XmlPortObjectDate@1000000006 : Date;
      XmlPortObjectTime@1000000005 : Time;
      XmlPortObjectInitials@1000000004 : Code[2];
      LineBufferId@1000000003 : Integer;
      TableId@1000000002 : Integer;
      TableVariableName@1000000001 : Text;
      tXmlPortName@1000000022 : TextConst 'ENU=Migrate %1;ENG=Migrate %1';
      tOneObjectFileName@1000000014 : TextConst 'ENU=XMLport %1 %2.txt;ENG=XMLport %1 %2.txt';
      tMultipleObjectsFileName@1000000015 : TextConst 'ENU=XMLports %1 - %2.txt;ENG=XMLports %1 - %2.txt';
      tEmptyStartXmlPortId@1000000016 : TextConst 'ENU=Please, provide "Start XMLport ID";ENG=Please, provide "Start XMLport ID"';
      XmlPortName@1000000000 : Text;
      XmlPortReqFilterFields@1000000023 : Text;
      VariableId@1000000017 : Integer;
      tEmptyTableFilter@1000000018 : TextConst 'ENU=Please, provide filtering for tables.;ENG=Please, provide filtering for tables.';
      tTooManyTables@1000000026 : TextConst 'ENU="You have specified too many tables; only %1 tables at a time are allowed.";ENG="You have specified too many tables; only %1 tables at a time are allowed."';
      tNoTablesWithinFilter@1000000021 : TextConst 'ENU=There are no tables within the filter you''ve provided.;ENG=There are no tables within the filter you''ve provided.';
      tDateFormat@1000000025 : TextConst 'ENU=<Day,2>/<Month,2>/<Year4>;ENG=<Day,2>/<Month,2>/<Year4>';
      tNextFreeFromCustomerRange@9062234 : TextConst 'ENU=Next Free From Customer Range;ENG=Next Free From Customer Range';
      tNextFreeFromEnhancedNavRange@9062235 : TextConst 'ENU=Next Free From Enhanced NAV Range;ENG=Next Free From Enhanced NAV Range';
      LastId@9062236 : Integer;

    LOCAL PROCEDURE "--- General Functions ---"@1000000024();
    BEGIN
    END;

    LOCAL PROCEDURE AddObject@1000000014(pFooterOnly@1000000000 : Boolean);
    BEGIN
      //DOC NA2015.4 - Adding another object
      //  -> pFooterOnly: TRUE = Add only footer of the recent object, FALSE = Add the whole object

      IF ( NOT (pFooterOnly)) THEN
      BEGIN
        CollectPrimaryKeyFields();
        CollectForeignKeyFields();
      END;

      IF (TableId <> 0) THEN
        AddXmlPortObjectFooter();

      IF ( NOT (pFooterOnly)) THEN
      BEGIN
        TableVariableName := ToVariableName(dTable."Object Name");
        XmlPortName := COPYSTR(STRSUBSTNO(tXmlPortName, LanguageToolkit.ToPlural(dTable."Object Name")), 1, 30);
        XmlPortReqFilterFields := BuildReqFilterFields();
        CollectBlobFields();
        AddXmlPortObjectHeader();
        TableId := dTable."Object ID";
      END;
    END;

    LOCAL PROCEDURE AddXmlPortObjectHeader@1000000009();
    BEGIN
      //DOC NA2015.4 - Adding XMLport header (for an object)

      AddLine2('OBJECT XMLport %1 %2', FORMAT(CurrentXmlPortId, 0, 1), XmlPortName);
      AddLine0('{');
      AddLine0('  OBJECT-PROPERTIES');
      AddLine0('  {');
      AddLine1('    Date=%1;', FORMAT(XmlPortObjectDate, 0, 1));
      AddLine1('    Time=%1;', FORMAT(XmlPortObjectTime, 0, '<Hours24>:<Minutes,2>'));
      AddLine1('    Version List=%1;', XmlPortObjectVersion);
      AddLine0('  }');
      AddLine0('  PROPERTIES');
      AddLine0('  {');
      AddLine1('    CaptionML=[ENU=%1;ENG=%1];', XmlPortName);
      AddLine0('    Encoding=UTF-8;');
      AddLine0('    Format/Evaluate=XML Format/Evaluate;');
      AddLine0('    OnInitXMLport=BEGIN');
      AddLine1('                    MigrationToolkit.InitialiseParameters(XMLPORT::"%1", Direction, ErrorLevel, ErrorLevelEnabled);', XmlPortName);
      AddLine0('                  END;');
      AddLine0('    OnPostXMLport=BEGIN');
      AddLine0('                    MigrationToolkit.FinalMessage();');
      AddLine0('                  END;');
      AddLine1('    FileName=%1.xml;', LanguageToolkit.ToPlural(dTable."Object Name"));
      AddLine0('  }');
      AddLine0('  ELEMENTS');
      AddLine0('  {');
      AddLine1('    { [%1];;Root;Element;Text;VariableName=dRoot;MaxOccurs=Once }', NewGuid());
      AddLine0('');
      AddLine1('    { [%1];1;Header;Element;Text;VariableName=dHeader;MaxOccurs=Once }', NewGuid());
      AddLine0('');
      AddLine1('    { [%1];2;XmlPortID;Attribute;Text;VariableName=dXmlPortId;', NewGuid());
      AddLine0('      Import::OnAfterAssignVariable=BEGIN');
      AddLine0('                                      MigrationToolkit.CheckXmlPortId(dXmlPortId);');
      AddLine0('                                    END;');
      AddLine0('      Export::OnBeforePassVariable=BEGIN');
      AddLine0('                                     dXmlPortId := MigrationToolkit.GetXmlPortIdText();');
      AddLine0('                                   END;');
      AddLine0('    }');
      AddLine1('    { [%1];2;XmlPortVersion;Attribute;Text;VariableName=dXmlPortVersion;', NewGuid());
      AddLine0('      Import::OnAfterAssignVariable=BEGIN');
      AddLine0('                                      MigrationToolkit.CheckXmlPortVersion(dXmlPortVersion);');
      AddLine0('                                    END;');
      AddLine0('      Export::OnBeforePassVariable=BEGIN');
      AddLine0('                                     dXmlPortVersion := MigrationToolkit.GetXmlPortVersion();');
      AddLine0('                                   END;');
      AddLine0('    }');
      AddLine1('    { [%1];1;Data;Element;Text;VariableName=dData;MaxOccurs=Once }', NewGuid());
      AddLine2('    { [%1];2;%2;Element;Text;VariableName=d%2 }', NewGuid(), LanguageToolkit.ToPlural(TableVariableName));
      AddLine4('    { [%1];3;%2;Element;Table;ReqFilterFields=%3;VariableName=d%2;SourceTable=Table%4;AutoUpdate=Yes;',
        NewGuid(), TableVariableName, XmlPortReqFilterFields, FORMAT(dTable."Object ID", 0, 1));
      AddLine0('    Import::OnAfterInitRecord=BEGIN');
      AddLine1('                                %1InitImport();', TableVariableName);
      AddLine0('                              END;');
      AddLine0('    Import::OnBeforeInsertRecord=BEGIN');
      AddLine1('                                   %1BeforeImport();', TableVariableName);
      AddLine0('                                 END;');
      AddLine0('    Import::OnBeforeModifyRecord=BEGIN');
      AddLine1('                                   %1BeforeImport();', TableVariableName);
      AddLine0('                                 END;');
      AddLine0('    Export::OnAfterGetRecord=BEGIN');
      AddLine1('                               %1BeforeExport();', TableVariableName);
      AddLine0('                             END;');
      AddLine0('    }');
      AddLine0('');
    END;

    LOCAL PROCEDURE AddXmlPortObjectField@1000000006();
    VAR
      lFieldValidate@9062229 : Boolean;
      lFieldLine@9062230 : Text;
    BEGIN
      //DOC NA2015.4 - Adding XMLport object field

      lFieldValidate := (dTableField.RelationTableNo = 0);
      lFieldLine := '{ [%1];4;%2;Attribute;Field;DataType=%3;SourceField=d%4::%5';
      IF ( NOT (lFieldValidate)) THEN
        lFieldLine += ';%6';
      lFieldLine += ' }';

      AddLine5('    { [%1];4;%2;Attribute;Field;DataType=%3;SourceField=d%4::%5 }',
        FORMAT(CREATEGUID(), 0, 1), ToVariableName(dTableField.FieldName), FORMAT(dTableField.Type, 0, 1), TableVariableName, dTableField.FieldName);
      AddLine0('');
    END;

    LOCAL PROCEDURE AddXmlPortObjectBlobField@1000000007();
    BEGIN
      //DOC NA2015.4 - Adding XMLport object field

      AddLine3('    { [%1];4;%2;Element;Text;DataType=Text;VariableName=d%3;TextType=BigText }',
        FORMAT(CREATEGUID(), 0, 1), ToVariableName(dTableBlobField.FieldName), TableVariableName + BlobBuffer.Value);
      AddLine0('');
    END;

    LOCAL PROCEDURE AddXmlPortObjectFooter@1000000010();
    VAR
      eOptions@1000000001 : TextConst 'ENU=Options;ENG=Options';
      eDirection@1000000002 : TextConst 'ENU=Direction;ENG=Direction';
      eErrorLevel@1000000003 : TextConst 'ENU=Error Level;ENG=Error Level';
      eCreated@1000000000 : TextConst 'ENU=Created;ENG=Created';
    BEGIN
      //DOC NA2015.4 - Adding XMLport footer (for an object)

      AddLine0('  }');
      AddLine0('  EVENTS');
      AddLine0('  {');
      AddLine0('  }');
      AddLine0('  REQUESTPAGE');
      AddLine0('  {');
      AddLine0('    PROPERTIES');
      AddLine0('    {');
      AddLine0('      OnOpenPage=BEGIN');
      AddLine0('                   currXMLport.IMPORTFILE(MigrationToolkit.UpdateParameters(Direction, ErrorLevel, ErrorLevelEnabled));');
      AddLine0('                 END;');
      AddLine0('    }');
      AddLine0('    CONTROLS');
      AddLine0('    {');
      AddLine0('      { 1000001000;;Container;');
      AddLine0('                  Name=ContentAreaContainer;');
      AddLine0('                  ContainerType=ContentArea }');
      AddLine0('      { 1000001001;1;Group  ;');
      AddLine0('                  Name=OptionsGroup;');
      AddLine1('                  CaptionML=[ENU=%1;ENG=%1];', eOptions);
      AddLine0('                  GroupType=Group }');
      AddLine0('      { 1000001002;2;Field  ;');
      AddLine0('                  Name=Direction;');
      AddLine1('                  CaptionML=[ENU=%1;ENG=%1];', eDirection);
      AddLine0('                  SourceExpr=Direction;');
      AddLine0('                  OnValidate=BEGIN');
      AddLine0('                               currXMLport.IMPORTFILE(MigrationToolkit.UpdateParameters(Direction, ErrorLevel, ErrorLevelEnabled));');
      AddLine0('                               RequestOptionsPage.UPDATE(FALSE);');
      AddLine0('                             END;');
      AddLine0('                              }');
      AddLine0('      { 1000001003;2;Field  ;');
      AddLine0('                  Name=ErrorLevelField;');
      AddLine1('                  CaptionML=[ENU=%1;ENG=%1];', eErrorLevel);
      AddLine0('                  SourceExpr=ErrorLevel;');
      AddLine0('                  Enabled=ErrorLevelEnabled }');
      AddLine0('    }');
      AddLine0('  }');
      AddLine0('  CODE');
      AddLine0('  {');
      AddLine0('    VAR');
      AddLine0('      Blob@1000000011 : Record 99008535;');
      AddLine0('      BlobToolkit@1000000010 : Codeunit 9062242;');
      AddLine0('      MigrationToolkit@1000000003 : Codeunit 9062484;');
      AddLine0('      XmlPortId@1000000008 : Integer;');
      AddLine0('      XmlPortVersion@1000000007 : Text;');
      AddLine0('      Direction@1000000006 : '' ,Export,Import'';');
      AddLine0('      ErrorLevel@1000000005 : '' ,Errors,Confirmations,Warnings,Nothing'';');
      AddLine0('      ErrorLevelEnabled@1000000004 : Boolean INDATASET;');
      AddLine0('');
      BuildInitImportTrigger();
      BuildBeforeImportTrigger();
      BuildBeforeExportTrigger();
      AddLine0('');
      AddLine0('    BEGIN');
      AddLine0('    {');
      AddLine4('      //DOC %1 %2 %3 - %4', XmlPortObjectVersion, XmlPortObjectInitials, FORMAT(XmlPortObjectDate, 0, tDateFormat), eCreated);
      AddLine0('    }');
      AddLine0('    END.');
      AddLine0('  }');
      AddLine0('}');
    END;

    LOCAL PROCEDURE "--- Line Buffer Functions ---"@1000000023();
    BEGIN
    END;

    LOCAL PROCEDURE AddLine0@1000000000(pText@1000000000 : Text);
    BEGIN
      //DOC NA2015.4 - Adding another line
      //  -> pText: Text to add

      LineBufferId += 1;
      CLEAR(LineBuffer);
      LineBuffer.ID := LineBufferId;
      LineBuffer.Value := COPYSTR(pText, 1, MAXSTRLEN(LineBuffer.Value));
      LineBuffer.INSERT();
    END;

    LOCAL PROCEDURE AddLine1@9062243(pText@9062231 : Text;pParameter@9062230 : Text);
    BEGIN
      //DOC NA2016.10 - Adding another line with 1 parameter
      //  -> pText: Text to add
      //  -> pParameter: The parameter

      AddLine0(STRSUBSTNO(pText, pParameter));
    END;

    LOCAL PROCEDURE AddLine2@9062248(pText@9062231 : Text;pParameter1@9062230 : Text;pParameter2@9062229 : Text);
    BEGIN
      //DOC NA2016.10 - Adding another line with 2 parameters
      //  -> pText: Text to add
      //  -> pParameter1: Parameter 1
      //  -> pParameter2: Parameter 2

      AddLine0(STRSUBSTNO(pText, pParameter1, pParameter2));
    END;

    LOCAL PROCEDURE AddLine3@9062249(pText@9062231 : Text;pParameter1@9062232 : Text;pParameter2@9062229 : Text;pParameter3@9062230 : Text);
    BEGIN
      //DOC NA2016.10 - Adding another line with 3 parameters
      //  -> pText: Text to add
      //  -> pParameter1: Parameter 1
      //  -> pParameter2: Parameter 2
      //  -> pParameter3: Parameter 3

      AddLine0(STRSUBSTNO(pText, pParameter1, pParameter2, pParameter3));
    END;

    LOCAL PROCEDURE AddLine4@9062265(pText@9062231 : Text;pParameter1@9062232 : Text;pParameter2@9062229 : Text;pParameter3@9062230 : Text;pParameter4@9062233 : Text);
    BEGIN
      //DOC NA2016.10 - Adding another line with 4 parameters
      //  -> pText: Text to add
      //  -> pParameter1: Parameter 1
      //  -> pParameter2: Parameter 2
      //  -> pParameter3: Parameter 3
      //  -> pParameter4: Parameter 4

      AddLine0(STRSUBSTNO(pText, pParameter1, pParameter2, pParameter3, pParameter4));
    END;

    LOCAL PROCEDURE AddLine5@9062271(pText@9062231 : Text;pParameter1@9062232 : Text;pParameter2@9062229 : Text;pParameter3@9062230 : Text;pParameter4@9062233 : Text;pParameter5@9062234 : Text);
    BEGIN
      //DOC NA2016.10 - Adding another line with 5 parameters
      //  -> pText: Text to add
      //  -> pParameter1: Parameter 1
      //  -> pParameter2: Parameter 2
      //  -> pParameter3: Parameter 3
      //  -> pParameter4: Parameter 4
      //  -> pParameter5: Parameter 5

      AddLine0(STRSUBSTNO(pText, pParameter1, pParameter2, pParameter3, pParameter4, pParameter5));
    END;

    LOCAL PROCEDURE ClearLineBuffer@1000000001();
    BEGIN
      //DOC NA2015.4 - Clearing line buffer

      LineBuffer.RESET();
      LineBuffer.DELETEALL();
    END;

    LOCAL PROCEDURE "--- File Functions ---"@1000000022();
    BEGIN
    END;

    LOCAL PROCEDURE OpenFile@1000000003();
    BEGIN
      //DOC NA2015.4 - Opening the final file (deleting if exists and then creating)

      ServerFilePath := FileSystem.GetTempPathForExtension(FALSE, 'txt');
      FileSystem.DeleteFileIfExists(FALSE, ServerFilePath);
      ServerFile.WRITEMODE(TRUE);
      ServerFile.TEXTMODE(TRUE);
      ServerFile.CREATE(ServerFilePath);
    END;

    LOCAL PROCEDURE WriteToFile@1000000005(pContent@1000000000 : Text);
    BEGIN
      //DOC NA2015.4 - Writing to the final file

      ServerFile.WRITE(pContent);
    END;

    LOCAL PROCEDURE CloseFile@1000000004();
    BEGIN
      //DOC NA2015.4 - Closing the newly create file

      ServerFile.CLOSE();
    END;

    LOCAL PROCEDURE DownloadFile@1000000013();
    VAR
      eFilter@1000000000 : TextConst 'ENU=Text Files (*.txt)|*.txt|All Files (*.*)|*.*;ENG=Text Files (*.txt)|*.txt|All Files (*.*)|*.*';
    BEGIN
      //DOC NA2015.4 - Downloading file created

      DOWNLOAD(ServerFilePath, '', '', eFilter, ClientFilePath);
      FileSystem.DeleteFileIfExists(FALSE, ServerFilePath);
    END;

    LOCAL PROCEDURE "--- Extra Logic ---"@1000000033();
    BEGIN
    END;

    LOCAL PROCEDURE CollectPrimaryKeyFields@9062229();
    VAR
      lRecordRef@9062229 : RecordRef;
      lKeyRef@9062230 : KeyRef;
      lField@9062233 : Record 2000000041;
      lFieldRef@9062231 : FieldRef;
      lFieldIndex@9062232 : Integer;
    BEGIN
      //DOC NA2016.10 - Collecting table primary key fields

      PrimaryKeyBuffer.RESET();
      PrimaryKeyBuffer.DELETEALL();

      lRecordRef.OPEN(dTable."Object ID");
      lKeyRef := lRecordRef.KEYINDEX(1);
      FOR lFieldIndex := 1 TO lKeyRef.FIELDCOUNT DO
      BEGIN
        lFieldRef := lKeyRef.FIELDINDEX(lFieldIndex);
        lField.GET(dTable."Object ID", lFieldRef.NUMBER);
        FieldToBuffer(lField, PrimaryKeyBuffer);
      END;
      lRecordRef.CLOSE();
    END;

    LOCAL PROCEDURE CollectForeignKeyFields@9062231();
    VAR
      lField@9062229 : Record 2000000041;
    BEGIN
      //DOC NA2016.10 - Collecting table foreign key fields

      ForeignKeyBuffer.RESET();
      ForeignKeyBuffer.DELETEALL();

      lField.RESET();
      lField.SETRANGE(TableNo, dTable."Object ID");
      lField.SETFILTER(RelationTableNo, '<>0');
      IF (lField.FINDSET()) THEN
      REPEAT
        IF ( NOT (PrimaryKeyBuffer.GET(lField."No."))) THEN
          FieldToBuffer(lField, ForeignKeyBuffer);
      UNTIL (lField.NEXT() = 0);
    END;

    LOCAL PROCEDURE BuildReqFilterFields@1000000019() : Text;
    VAR
      lRecordRef@1000000000 : RecordRef;
      lKeyRef@1000000001 : KeyRef;
      lFieldRef@1000000002 : FieldRef;
      lFieldIndex@1000000003 : Integer;
      lReqFilterFields@1000000004 : Text;
    BEGIN
      //DOC NS2015.4 - Building a string of request filter fields using the current object primary key
      //  <- The string

      lRecordRef.OPEN(dTable."Object ID");
      lKeyRef := lRecordRef.KEYINDEX(1);
      FOR lFieldIndex := 1 TO lKeyRef.FIELDCOUNT DO
      BEGIN
        lFieldRef := lKeyRef.FIELDINDEX(lFieldIndex);
        IF (lReqFilterFields <> '') THEN
          lReqFilterFields := lReqFilterFields + ',';
        lReqFilterFields := lReqFilterFields + 'Field' + FORMAT(lFieldRef.NUMBER, 0, 1);
      END;
      lRecordRef.CLOSE();

      EXIT(lReqFilterFields);
    END;

    LOCAL PROCEDURE CollectBlobFields@1000000036();
    VAR
      lField@1000000000 : Record 2000000041;
    BEGIN
      //DOC NS2015.4 - Collecting BLOBs field for the current table

      BlobBuffer.RESET();
      BlobBuffer.DELETEALL();

      lField.RESET();
      lField.SETRANGE(TableNo, dTable."Object ID");
      lField.SETRANGE(Type, lField.Type::BLOB);
      IF (lField.FINDSET()) THEN
      REPEAT
        FieldToBuffer(lField, BlobBuffer);
      UNTIL (lField.NEXT() = 0);
    END;

    LOCAL PROCEDURE BuildInitImportTrigger@1000000016();
    BEGIN
      //DOC NA2016.14 JH 17/02/2016 - Building init import trigger

      AddLine2('    LOCAL PROCEDURE %1InitImport@%2();', TableVariableName, NewId());
      AddLine0('    BEGIN');

      BlobBuffer.RESET();
      IF (BlobBuffer.FINDSET()) THEN
      REPEAT
        AddLine1('    CLEAR(d%1);', TableVariableName + BlobBuffer.Value);
      UNTIL (BlobBuffer.NEXT() = 0);

      AddLine0('    END;');
      AddLine0('');
    END;

    LOCAL PROCEDURE BuildBeforeImportTrigger@1000000034();
    VAR
      lField@9062229 : Record 2000000041;
      lRelationTableName@9062230 : Text;
      lTriggerHasCode@9062231 : Boolean;
    BEGIN
      //DOC NA2015.8 - Building before import trigger

      lTriggerHasCode := FALSE;

      AddLine2('    LOCAL PROCEDURE %1BeforeImport@%2();', TableVariableName, NewId());
      AddLine0('    BEGIN');

      ForeignKeyBuffer.RESET();
      IF (ForeignKeyBuffer.FINDSET()) THEN
      BEGIN
        AddLine2('      MigrationToolkit.SetRecord(DATABASE::"%1", d%2);', dTable."Object Name", TableVariableName);
        REPEAT
          IF ( NOT (lField.GET(dTable."Object ID", ForeignKeyBuffer.ID))) THEN
            CLEAR(lField);
          IF (lField.RelationTableNo <> 0) THEN
          BEGIN
            lRelationTableName := ObjectFieldToolkit.GetTableName(lField.RelationTableNo);
            AddLine3('      MigrationToolkit.CheckRelation_Unknown(DATABASE::"%1", d%2."%3", FALSE);', lRelationTableName,
              TableVariableName, ForeignKeyBuffer.Name);
          END;
        UNTIL (ForeignKeyBuffer.NEXT() = 0);
        lTriggerHasCode := TRUE;
      END;

      BlobBuffer.RESET();
      IF (BlobBuffer.FINDSET()) THEN
      BEGIN
        IF (lTriggerHasCode) THEN
          AddLine0('');
        REPEAT
          AddLine1('      BlobToolkit.FromBase64BigText(d%1, Blob);', TableVariableName + BlobBuffer.Value);
          AddLine2('      d%1."%2" := Blob.Blob;', TableVariableName, BlobBuffer.Name);
        UNTIL (BlobBuffer.NEXT() = 0);
      END;

      AddLine0('    END;');
      AddLine0('');
    END;

    LOCAL PROCEDURE BuildBeforeExportTrigger@1000000035();
    BEGIN
      //DOC NA2015.8 - Building BLOBs export lines
      //  -> pLeadingSpaces: Number of leading spaces to add

      AddLine2('    LOCAL PROCEDURE %1BeforeExport@%2();', TableVariableName, NewId());
      AddLine0('    BEGIN');

      BlobBuffer.RESET();
      IF (BlobBuffer.FINDSET()) THEN
      REPEAT
        AddLine2('    d%1.CALCFIELDS("%2");', TableVariableName, BlobBuffer.Name);
        AddLine2('    Blob.Blob := d%1."%2";', TableVariableName, BlobBuffer.Name);
        AddLine1('    BlobToolkit.ToBase64BigText(Blob, d%1);', TableVariableName + BlobBuffer.Value);
      UNTIL (BlobBuffer.NEXT() = 0);

      AddLine0('    END;');
      AddLine0('');
    END;

    LOCAL PROCEDURE "--- Request Form Functions ---"@9062230();
    BEGIN
    END;

    LOCAL PROCEDURE PickNextFreeFromCustomerRange@9062233() : Integer;
    BEGIN
      //DOC NA2016.10 - Picking next free XMLport ID from customer range
      //  <- The free ID

      EXIT(PickNextFree(50000, 99999));
    END;

    LOCAL PROCEDURE PickNextFreeFromEnhancedNavRange@9062234() : Integer;
    VAR
      lId@1000000000 : Integer;
    BEGIN
      //DOC NA2016.10 - Picking next free XMLport ID from Enhanced NAV range
      //  <- The free ID

      lId := PickNextFree(9062229, 9063228);
      IF (lId = 0) THEN
        lId := PickNextFree(9086429, 9087428);
      EXIT(lId);
    END;

    LOCAL PROCEDURE PickNextFree@9062235(pFromId@9062229 : Integer;pToId@9062230 : Integer) : Integer;
    VAR
      lAllObj@9062231 : Record 2000000038;
      lId@9062232 : Integer;
    BEGIN
      //DOC NA2016.10 - Picking next free XMLport ID from given range
      //  -> pFromId: Starting range
      //  -> pToId: Ending range
      //  <- The free ID

      lId := 0;

      lAllObj.RESET();
      lAllObj.SETRANGE("Object Type", lAllObj."Object Type"::XMLport);
      lAllObj.SETRANGE("Object ID", pFromId, pToId);
      IF (lAllObj.FINDLAST()) THEN
      BEGIN
        IF (lAllObj."Object ID" < pToId) THEN
          lId := lAllObj."Object ID" + 1;
      END
      ELSE
        lId := pFromId;

      EXIT(lId);
    END;

    LOCAL PROCEDURE "--- Tool Functions ---"@1000000021();
    BEGIN
    END;

    LOCAL PROCEDURE MaxNoOfTables@1000000008() : Integer;
    BEGIN
      //DOC NA2016.12 - Returning maximum number of tables the generator can process at one time
      //  <- The number

      EXIT(100);
    END;

    LOCAL PROCEDURE ToVariableName@1000000025(pString@1000000000 : Text) : Text;
    VAR
      lVariableName@1000000001 : Text;
      lIndex@1000000002 : Integer;
      lCharacter@1000000003 : Text[1];
    BEGIN
      //DOC NA2015.4 - Converting given string to variable name
      //  -> pString: The string
      //  <- Variable name

      FOR lIndex := 1 TO STRLEN(pString) DO
      BEGIN
        lCharacter := COPYSTR(pString, lIndex, 1);
        IF (((lCharacter >= 'A') AND (lCharacter <= 'Z')) OR
            ((lCharacter >= 'a') AND (lCharacter <= 'z')) OR
            ((lCharacter >= '0') AND (lCharacter <= '9'))) THEN
          lVariableName := lVariableName + lCharacter;
      END;

      IF (lVariableName = '') THEN
      BEGIN
        VariableId += 1;
        lVariableName := 'Var' + FORMAT(VariableId, 0, 1);
      END;

      EXIT(lVariableName);
    END;

    LOCAL PROCEDURE ToPath@1000000026(pString@1000000000 : Text) : Text;
    BEGIN
      //DOC NA2015.4 - Converting given string to path
      //  -> pString: The string
      //  <- Path

      EXIT(CONVERTSTR(pString, '\/*?', '____'));
    END;

    LOCAL PROCEDURE ToUserName@1000000028(pUserId@1000000000 : Code[50]) : Code[50];
    VAR
      lUserName@1000000002 : Code[50];
      lPosition@1000000001 : Integer;
    BEGIN
      //DOC NA2015.4 - Converting given user ID (domain \ name) to user name
      //  -> pUserId: The ID
      //  <- The name

      lPosition := STRPOS(pUserId, '\');
      IF ((lPosition > 0) AND (lPosition < STRLEN(pUserId))) THEN
        lUserName := COPYSTR(pUserId, lPosition + 1, STRLEN(pUserId) - lPosition)
      ELSE IF (lPosition = 0) THEN
        lUserName := pUserId
      ELSE
        lUserName := '';

      EXIT(lUserName);
    END;

    LOCAL PROCEDURE ToUserInitials@1000000002(pUserId@1000000000 : Code[50]) : Code[2];
    VAR
      lUserName@1000000001 : Code[50];
      lUserInitials@1000000002 : Code[2];
      lIndex@1000000003 : Integer;
      lCharacter@1000000004 : Code[1];
    BEGIN
      //DOC NA2015.4 - Converting given user ID (domain \ name) to user Initials
      //  -> pUserId: The ID
      //  <- The initials

      lUserName := ToUserName(pUserId);
      IF (lUserName <> '') THEN
      BEGIN
        lUserInitials := COPYSTR(lUserName, 1, 1);
        FOR lIndex := 1 TO STRLEN(lUserName) - 1 DO
        BEGIN
          lCharacter := COPYSTR(lUserName, lIndex, 1);
          IF ( NOT (((lCharacter >= 'A') AND (lCharacter <= 'Z')) OR
                    ((lCharacter >= 'a') AND (lCharacter <= 'z')))) THEN
          BEGIN
            lUserInitials := lUserInitials + COPYSTR(lUserName, lIndex + 1, 1);
            lIndex := STRLEN(lUserName);
          END;
        END;
        IF ((STRLEN(lUserInitials) < MAXSTRLEN(lUserInitials)) AND (STRLEN(lUserName) > 1)) THEN
          lUserInitials := lUserInitials + COPYSTR(lUserName, 2, 1);
      END;

      EXIT(lUserInitials);
    END;

    LOCAL PROCEDURE NewId@9062239() : Text;
    BEGIN
      //DOC NA2016.10 - Creating and returning (as text) a new ID
      //  <- The ID (text)

      LastId += 1;
      EXIT(FORMAT(LastId, 0, 1));
    END;

    LOCAL PROCEDURE NewGuid@1000000017() : Text;
    BEGIN
      //DOC NS2015.4 - Creating and returning (as text) a new GUID
      //  <- The GUID (text)

      EXIT(FORMAT(CREATEGUID(), 0, 1));
    END;

    LOCAL PROCEDURE FieldToBuffer@9062232(pField@9062229 : Record 2000000041;VAR pBuffer@9062230 : Record 9062730);
    BEGIN
      //DOC NA2016.10 - Inserting field information to given buffer
      //  -> pField: The field
      //  <> pNameValueBuffer: Target buffer

      CLEAR(pBuffer);
      pBuffer.ID := pField."No.";
      pBuffer.Name := pField.FieldName;
      pBuffer.Value := ToVariableName(pField.FieldName);
      pBuffer.INSERT();
    END;

    BEGIN
    {
      //DOC NA2015.4  JH 30/01/2015 - Created
      //DOC NA2015.5  JH 26/02/2015 - Fixes
      //DOC NA2015.8  JH 27/07/2015 - Proper BLOB handling
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.11 JH 06/11/2015 - Bugfixes
      //DOC NA2016.12 JH 04/01/2016 - Amendments, bugfixes
      //DOC NA2016.14 JH 17/02/2016 - BLOB processing fixed
      //DOC NA2016.15 JH 26/04/2016 - CfMD amendments
    }
    END.
  }
  RDLDATA
  {
  }
}

