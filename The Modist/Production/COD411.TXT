OBJECT Codeunit 411 Dimension Buffer Management
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempDimBuf@1000 : TEMPORARY Record 360;
      TempDimEntryBuf@1001 : TEMPORARY Record 373;
      NextDimBufNo@1004 : Integer;
      DimensionIDBuffer@1003 : TEMPORARY Record 353;

    PROCEDURE InsertDimensions@2(VAR DimBuf@1000 : Record 360) : Integer;
    VAR
      NewEntryNo@1001 : Integer;
    BEGIN
      IF DimBuf.FIND('-') THEN BEGIN
        TempDimBuf.RESET;
        IF TempDimBuf.FIND('+') THEN
          NewEntryNo := TempDimBuf."Entry No." + 1
        ELSE
          NewEntryNo := 1;
        InsertDimensionsUsingEntryNo(DimBuf,NewEntryNo);
        EXIT(NewEntryNo);
      END;
      EXIT(0);
    END;

    PROCEDURE InsertDimensionsUsingEntryNo@6(VAR DimBuf@1000 : Record 360;EntryNo@1001 : Integer);
    VAR
      DimCount@1002 : Integer;
    BEGIN
      DimCount := DimBuf.COUNT;
      IF DimBuf.FIND('-') THEN
        REPEAT
          TempDimBuf.INIT;
          TempDimBuf := DimBuf;
          TempDimBuf."Entry No." := EntryNo;
          TempDimBuf."No. Of Dimensions" := DimCount;
          TempDimBuf.INSERT;
        UNTIL DimBuf.NEXT = 0;
    END;

    PROCEDURE FindDimensions@3(VAR DimBuf@1000 : Record 360) : Integer;
    BEGIN
      EXIT(FindDimensionsKnownDimBufCount(DimBuf,DimBuf.COUNT));
    END;

    PROCEDURE FindDimensionsKnownDimBufCount@14(VAR DimBuf@1000 : Record 360;DimBufCount@1002 : Integer) : Integer;
    VAR
      Found@1003 : Boolean;
      EndOfDimBuf@1004 : Boolean;
      EndOfTempDimBuf@1005 : Boolean;
      PrevEntryNo@1001 : Integer;
    BEGIN
      IF NOT DimBuf.FIND('-') THEN
        EXIT(0);

      TempDimBuf.RESET;
      TempDimBuf.SETCURRENTKEY("No. Of Dimensions");
      TempDimBuf.SETRANGE("No. Of Dimensions",DimBufCount);
      TempDimBuf.SETRANGE("Table ID",DimBuf."Table ID");
      TempDimBuf.SETRANGE("Dimension Code",DimBuf."Dimension Code");
      TempDimBuf.SETRANGE("Dimension Value Code",DimBuf."Dimension Value Code");
      IF NOT TempDimBuf.FIND('-') THEN BEGIN
        TempDimBuf.RESET;
        EXIT(0);
      END;
      IF TempDimBuf."No. Of Dimensions" = 1 THEN BEGIN
        TempDimBuf.RESET;
        EXIT(TempDimBuf."Entry No.");
      END;

      DimBuf.NEXT;
      WHILE (NOT EndOfTempDimBuf) AND (NOT Found) DO BEGIN
        PrevEntryNo := TempDimBuf."Entry No.";
        EndOfDimBuf := FALSE;
        TempDimBuf.SETFILTER("Entry No.",'>=%1',TempDimBuf."Entry No.");
        REPEAT
          TempDimBuf.SETRANGE("Dimension Code",DimBuf."Dimension Code");
          TempDimBuf.SETRANGE("Dimension Value Code",DimBuf."Dimension Value Code");
          EndOfTempDimBuf := NOT TempDimBuf.FIND('-');
          IF NOT EndOfTempDimBuf THEN
            EndOfDimBuf := DimBuf.NEXT = 0;
        UNTIL EndOfTempDimBuf OR EndOfDimBuf OR (PrevEntryNo <> TempDimBuf."Entry No.");
        IF EndOfDimBuf AND (PrevEntryNo = TempDimBuf."Entry No.") THEN
          Found := TRUE
        ELSE
          DimBuf.FIND('-');
      END;
      TempDimBuf.RESET;
      IF Found THEN
        EXIT(TempDimBuf."Entry No.");

      EXIT(0);
    END;

    PROCEDURE GetDimensions@4(EntryNo@1000 : Integer;VAR DimBuf@1001 : Record 360) : Boolean;
    BEGIN
      TempDimBuf.SETRANGE("Entry No.",EntryNo);
      IF NOT TempDimBuf.FIND('-') THEN
        EXIT(FALSE);

      REPEAT
        DimBuf.INIT;
        DimBuf := TempDimBuf;
        DimBuf.INSERT;
      UNTIL TempDimBuf.NEXT = 0;
      EXIT(TRUE);
    END;

    PROCEDURE DeleteAllDimensions@5();
    BEGIN
      TempDimBuf.RESET;
      TempDimBuf.DELETEALL;
    END;

    PROCEDURE CollectDimEntryNo@1(VAR SelectedDim@1000 : Record 369;DimSetID@1001 : Integer;EntryNo@1002 : Integer;ForgetDimEntryNo@1003 : Integer;DoCollect@1004 : Boolean;VAR DimEntryNo@1005 : Integer);
    VAR
      TempDimBuf@1007 : TEMPORARY Record 360;
      DimSetEntry@1006 : Record 480;
    BEGIN
      IF SelectedDim.FIND('-') THEN BEGIN
        REPEAT
          IF DimSetEntry.GET(DimSetID,SelectedDim."Dimension Code") THEN BEGIN
            TempDimBuf."Dimension Code" := DimSetEntry."Dimension Code";
            TempDimBuf."Dimension Value Code" := DimSetEntry."Dimension Value Code";
            TempDimBuf.INSERT;
          END;
        UNTIL SelectedDim.NEXT = 0;
        DimEntryNo := FindDimensions(TempDimBuf);
        IF DimEntryNo = 0 THEN
          DimEntryNo := InsertDimensions(TempDimBuf);
      END ELSE
        DimEntryNo := 0;

      IF (DimEntryNo <> ForgetDimEntryNo) AND DoCollect THEN BEGIN
        TempDimEntryBuf."No." := EntryNo;
        TempDimEntryBuf."Dimension Entry No." := DimEntryNo;
        TempDimEntryBuf.INSERT;
      END;
    END;

    PROCEDURE FindFirstDimEntryNo@7(VAR DimEntryNo@1000 : Integer;VAR EntryNo@1001 : Integer) : Boolean;
    VAR
      Found@1002 : Boolean;
    BEGIN
      TempDimEntryBuf.SETCURRENTKEY("Dimension Entry No.");
      Found := TempDimEntryBuf.FIND('-');
      DimEntryNo := TempDimEntryBuf."Dimension Entry No.";
      EntryNo := TempDimEntryBuf."No.";
      EXIT(Found);
    END;

    PROCEDURE NextDimEntryNo@8(VAR DimEntryNo@1000 : Integer;VAR EntryNo@1001 : Integer) : Boolean;
    VAR
      Found@1002 : Boolean;
    BEGIN
      Found := TempDimEntryBuf.NEXT <> 0;
      DimEntryNo := TempDimEntryBuf."Dimension Entry No.";
      EntryNo := TempDimEntryBuf."No.";
      EXIT(Found);
    END;

    PROCEDURE DeleteAllDimEntryNo@9();
    BEGIN
      TempDimEntryBuf.DELETEALL;
    END;

    PROCEDURE GetDimensionId@13(VAR Dimbuf@1000 : Record 360) : Integer;
    VAR
      NewDimensionComb@1001 : Boolean;
    BEGIN
      IF NOT Dimbuf.FINDFIRST THEN
        EXIT(0);

      IF NextDimBufNo = 0 THEN
        NextDimBufNo := 1;

      NewDimensionComb := FALSE;
      DimensionIDBuffer.ID := 0;
      REPEAT
        IF NewDimensionComb THEN
          InsertDimIdBuf(Dimbuf)
        ELSE
          IF NOT DimensionIDBuffer.GET(DimensionIDBuffer.ID,Dimbuf."Dimension Code",Dimbuf."Dimension Value Code") THEN BEGIN
            NewDimensionComb := TRUE;
            InsertDimIdBuf(Dimbuf);
          END;
      UNTIL Dimbuf.NEXT = 0;

      EXIT(DimensionIDBuffer.ID);
    END;

    PROCEDURE RetrieveDimensions@12(DimId@1000 : Integer;VAR DimBuf@1001 : Record 360);
    BEGIN
      DimBuf.RESET;
      DimBuf.DELETEALL;

      IF DimId = 0 THEN
        EXIT;

      DimensionIDBuffer.SETCURRENTKEY(ID);
      DimensionIDBuffer.SETRANGE(ID,DimId);
      REPEAT
        DimensionIDBuffer.FINDFIRST;
        DimBuf.INIT;
        DimBuf."Entry No." := DimId;
        DimBuf."Dimension Code" := DimensionIDBuffer."Dimension Code";
        DimBuf."Dimension Value Code" := DimensionIDBuffer."Dimension Value";
        DimBuf.INSERT;
        DimensionIDBuffer.SETRANGE(ID,DimensionIDBuffer."Parent ID");
      UNTIL DimensionIDBuffer."Parent ID" = 0;
    END;

    LOCAL PROCEDURE InsertDimIdBuf@15(VAR DimBuf@1000 : Record 360);
    BEGIN
      DimensionIDBuffer."Parent ID" := DimensionIDBuffer.ID;
      DimensionIDBuffer."Dimension Code" := DimBuf."Dimension Code";
      DimensionIDBuffer."Dimension Value" := DimBuf."Dimension Value Code";
      DimensionIDBuffer.ID := NextDimBufNo;
      NextDimBufNo += 1;
      DimensionIDBuffer.INSERT;
    END;

    BEGIN
    END.
  }
}

