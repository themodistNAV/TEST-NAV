OBJECT Codeunit 5770 Whse.-Service Release
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WhseRqst@1004 : Record 5765;
      ServiceLine@1003 : Record 5902;
      Location@1002 : Record 14;
      OldLocationCode@1001 : Code[10];
      First@1000 : Boolean;

    PROCEDURE Release@1(ServiceHeader@1000 : Record 5900);
    VAR
      WhseType@1001 : 'Inbound,Outbound';
      OldWhseType@1002 : 'Inbound,Outbound';
    BEGIN
      WITH ServiceHeader DO BEGIN
        IF "Document Type" <> "Document Type"::Order THEN
          EXIT;
        WhseRqst."Source Document" := WhseRqst."Source Document"::"Service Order";

        ServiceLine.SETCURRENTKEY("Document Type","Document No.","Location Code");
        ServiceLine.SETRANGE("Document Type","Document Type");
        ServiceLine.SETRANGE("Document No.","No.");
        ServiceLine.SETRANGE(Type,ServiceLine.Type::Item);
        ServiceLine.SETRANGE("Job No.",'');
        IF ServiceLine.FINDSET THEN BEGIN
          First := TRUE;
          REPEAT
            IF ("Document Type" = "Document Type"::Order) AND (ServiceLine.Quantity >= 0) THEN
              WhseType := WhseType::Outbound
            ELSE
              WhseType := WhseType::Inbound;

            IF First OR (ServiceLine."Location Code" <> OldLocationCode) OR
               (WhseType <> OldWhseType)
            THEN
              CreateWhseRqst(ServiceHeader,WhseType);

            First := FALSE;
            OldLocationCode := ServiceLine."Location Code";
            OldWhseType := WhseType;
          UNTIL ServiceLine.NEXT = 0;
        END;
        SetWhseRqstFiltersByStatus(ServiceHeader,WhseRqst,"Release Status"::Open);
        WhseRqst.DELETEALL(TRUE);
      END;
    END;

    PROCEDURE Reopen@2(ServiceHeader@1000 : Record 5900);
    VAR
      WhseRqst@1001 : Record 5765;
    BEGIN
      WITH ServiceHeader DO BEGIN
        WhseRqst.Type := WhseRqst.Type::Outbound;
        SetWhseRqstFiltersByStatus(ServiceHeader,WhseRqst,"Release Status"::"Released to Ship");
        WhseRqst.LOCKTABLE;
        IF WhseRqst.FINDSET THEN
          REPEAT
            WhseRqst."Document Status" := "Release Status"::Open;
            WhseRqst.MODIFY;
          UNTIL WhseRqst.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateWhseRqst@3(VAR ServiceHeader@1000 : Record 5900;WhseType@1002 : 'Inbound,Outbound');
    VAR
      ServiceLine2@1001 : Record 5902;
    BEGIN
      IF ((WhseType = WhseType::Outbound) AND
          (Location.RequireShipment(ServiceLine."Location Code") OR
           Location.RequirePicking(ServiceLine."Location Code"))) OR
         ((WhseType = WhseType::Inbound) AND
          (Location.RequireReceive(ServiceLine."Location Code") OR
           Location.RequirePutaway(ServiceLine."Location Code")))
      THEN BEGIN
        ServiceLine2.COPY(ServiceLine);
        ServiceLine2.SETRANGE("Location Code",ServiceLine."Location Code");
        ServiceLine2.SETRANGE("Unit of Measure Code",'');
        IF ServiceLine2.FINDFIRST THEN
          ServiceLine2.TESTFIELD("Unit of Measure Code");

        WhseRqst.Type := WhseType;
        WhseRqst."Source Type" := DATABASE::"Service Line";
        WhseRqst."Source Subtype" := ServiceHeader."Document Type";
        WhseRqst."Source No." := ServiceHeader."No.";
        WhseRqst."Shipping Advice" := ServiceHeader."Shipping Advice";
        WhseRqst."Document Status" := ServiceHeader."Release Status"::"Released to Ship";
        WhseRqst."Location Code" := ServiceLine."Location Code";
        WhseRqst."Destination Type" := WhseRqst."Destination Type"::Customer;
        WhseRqst."Destination No." := ServiceHeader."Bill-to Customer No.";
        WhseRqst."External Document No." := '';
        WhseRqst."Shipment Date" := ServiceLine.GetShipmentDate;
        WhseRqst."Shipment Method Code" := ServiceHeader."Shipment Method Code";
        WhseRqst."Shipping Agent Code" := ServiceHeader."Shipping Agent Code";
        ServiceHeader.SETRANGE("Location Filter",ServiceLine."Location Code");
        ServiceHeader.CALCFIELDS("Completely Shipped");
        WhseRqst."Completely Handled" := ServiceHeader."Completely Shipped";
        IF NOT WhseRqst.INSERT THEN
          WhseRqst.MODIFY;
      END;
    END;

    LOCAL PROCEDURE SetWhseRqstFiltersByStatus@4(ServiceHeader@1002 : Record 5900;VAR WarehouseRequest@1001 : Record 5765;Status@1000 : 'Open,Released to Ship,,Pending Approval,Pending Prepayment');
    BEGIN
      WITH WarehouseRequest DO BEGIN
        RESET;
        SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        SETRANGE(Type,Type);
        SETRANGE("Source Type",DATABASE::"Service Line");
        SETRANGE("Source Subtype",ServiceHeader."Document Type");
        SETRANGE("Source No.",ServiceHeader."No.");
        SETRANGE("Document Status",Status);
      END;
    END;

    BEGIN
    END.
  }
}

