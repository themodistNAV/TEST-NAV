OBJECT Codeunit 9062317 Planning Board Style Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=28/01/16;
    Time=12:00:00 PM;
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PlanningBoardTable@9062230 : Record 9062338;
      String@1000000001 : Codeunit 9062236;

    LOCAL PROCEDURE "--- General ---"@1000000003();
    BEGIN
    END;

    PROCEDURE FilterLookup@9062231(VAR pPlanningBoardTableStyle@9062232 : Record 9062342) : Boolean;
    VAR
      lRecordRef@9062233 : RecordRef;
      lFieldRef@9062230 : FieldRef;
      lRunWithRecordRef@9062234 : Codeunit 9062239;
      lResult@9062231 : Boolean;
    BEGIN
      //DOC NA2016.12 - Performing filter lookup
      //  -> pPlanningBoardTableStyle: Planning board table style record
      //  <- Lookup result

      CLEAR(lResult);

      IF (OpenRelatedRecordRef(pPlanningBoardTableStyle, lRecordRef, lFieldRef)) THEN
      BEGIN
        IF (lRunWithRecordRef.RunListPage(lRecordRef, TRUE)) THEN
        BEGIN
          pPlanningBoardTableStyle.VALIDATE(Filter, FORMAT(lFieldRef.VALUE, 0, 1));
          lResult := TRUE;
        END;
        lRecordRef.CLOSE();
      END;

      EXIT(lResult);
    END;

    PROCEDURE CreateStylesForAllValues@9062232(pPlanningBoardTableStyle@9062230 : Record 9062342) : Boolean;
    VAR
      lResult@9062232 : Boolean;
    BEGIN
      //DOC NA2016.12 - Creating styles for all values
      //  -> pPlanningBoardTableStyle: Planning board table style record
      //  <- TRUE = Created, FALSE = Cancelled

      CLEAR(lResult);

      IF ( NOT (lResult)) THEN
        lResult := CreateValuesForRelatedRecord(pPlanningBoardTableStyle);
      IF ( NOT (lResult)) THEN
        lResult := CreateValuesForOption(pPlanningBoardTableStyle);
      IF ( NOT (lResult)) THEN
        lResult := CreateValuesForBoolean(pPlanningBoardTableStyle);

      EXIT(lResult);
    END;

    PROCEDURE ApplyPalette@9062233(pPlanningBoardTableStyle@9062230 : Record 9062342) : Boolean;
    VAR
      lPlanningBoardTableStyle@9062238 : Record 9062342;
      lApplySystemPalette@9062231 : Report 9062231;
      lSystemPalette@9062234 : Record 9062430;
      lPaletteCode@9062236 : Code[20];
      lColourOrder@9062235 : Integer;
      lResult@9062232 : Boolean;
      eCantFindPalette@9062237 : TextConst 'ENU=Can''t find system palette "%1".;ENG=Can''t find system palette "%1".';
      eConfirmation@9062233 : TextConst 'ENU=Do you want to apply "%1" palette to the styles?;ENG=Do you want to apply "%1" palette to the styles?';
      lSystemPaletteManagement@9062239 : Codeunit 9062399;
    BEGIN
      //DOC NA2016.12 - Applying palette to styles
      //  -> pPlanningBoardTableStyle: The style record
      //  <- TRUE = Applied, FALSE = Cancelled

      CLEAR(lResult);

      lApplySystemPalette.RUNMODAL();
      IF ( NOT (lApplySystemPalette.GetOk())) THEN
        EXIT(lResult);
      lPaletteCode := lApplySystemPalette.GetPaletteCode();
      lColourOrder := lApplySystemPalette.GetColourOrder();

      IF ( NOT (lSystemPalette.GET(lPaletteCode))) THEN
        ERROR(eCantFindPalette, lPaletteCode);

      IF ( NOT (CONFIRM(eConfirmation, TRUE, lSystemPalette.Code))) THEN
        EXIT(lResult);

      lSystemPaletteManagement.StartColouring(lPaletteCode, lColourOrder);

      lPlanningBoardTableStyle.RESET();
      lPlanningBoardTableStyle.SETCURRENTKEY("Planning Board Code", "Planning Board Table Type", "Style Application", Sequence);
      lPlanningBoardTableStyle.SETRANGE("Planning Board Code", pPlanningBoardTableStyle."Planning Board Code");
      lPlanningBoardTableStyle.SETRANGE("Planning Board Table Type", pPlanningBoardTableStyle."Planning Board Table Type");
      lPlanningBoardTableStyle.SETRANGE("Style Application", pPlanningBoardTableStyle."Style Application");
      IF (lPlanningBoardTableStyle.FINDSET(TRUE)) THEN
      BEGIN
        REPEAT
          lPlanningBoardTableStyle.VALIDATE("Colour Code", lSystemPaletteManagement.NextColour());
          lPlanningBoardTableStyle.MODIFY(TRUE);
        UNTIL (lPlanningBoardTableStyle.NEXT() = 0);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Related Record ---"@1000000004();
    BEGIN
    END;

    LOCAL PROCEDURE CreateValuesForRelatedRecord@1000000000(pPlanningBoardTableStyle@1000000002 : Record 9062342) : Boolean;
    VAR
      eTooManyRecords@1000000001 : TextConst 'ENU=There are too many values in "%1" table.;ENG=There are too many values in "%1" table.';
      eConfirmation@1000000000 : TextConst 'ENU=Do you want to add %1 styles for all "%1" table values?;ENG=Do you want to add %1 styles for all "%1" table values?';
      lPlanningBoardTableStyle@1000000006 : Record 9062342;
      lRecordRef@1000000005 : RecordRef;
      lFieldRef@1000000004 : FieldRef;
    BEGIN
      //DOC NA2016.12 - Creating values for related record
      //  -> pPlanningBoardTableStyle: Planning board table style record
      //  <- Result (TRUE = Created, FALSE = Cancelled or no relation found)

      IF ( NOT (OpenRelatedRecordRef(pPlanningBoardTableStyle, lRecordRef, lFieldRef))) THEN
        EXIT(FALSE);

      IF (lRecordRef.COUNT() > 1000) THEN
      BEGIN
        lRecordRef.CLOSE();
        ERROR(eTooManyRecords, lRecordRef.CAPTION)
      END
      ELSE IF ( NOT (CONFIRM(eConfirmation, TRUE, lRecordRef.CAPTION))) THEN
      BEGIN
        lRecordRef.CLOSE();
        EXIT(FALSE);
      END;

      IF (lRecordRef.FINDSET()) THEN
      REPEAT
        AddStyle(pPlanningBoardTableStyle, FORMAT(lFieldRef.VALUE, 0, 1));
      UNTIL (lRecordRef.NEXT() = 0);

      lRecordRef.CLOSE();

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE OpenRelatedRecordRef@9062230(pPlanningBoardTableStyle@9062236 : Record 9062342;VAR pRecordRef@9062237 : RecordRef;VAR pFieldRef@9062233 : FieldRef) : Boolean;
    VAR
      lTableId@9062231 : Integer;
      lFieldId@9062230 : Integer;
      lTableRelationMetadata@9062232 : Record 2000000141;
      lResult@9062234 : Boolean;
    BEGIN
      //DOC NA2016.12 - Opening record reference related to given style
      //  -> pPlanningBoardTableStyle: Planning board table style record
      //  <> pRecordRef: Target record reference
      //  <- TRUE = Relation found and applied, FALSE = No relation defined

      CLEAR(pRecordRef);
      CLEAR(lResult);

      IF ( NOT (GetStyleTableAndFieldIds(pPlanningBoardTableStyle, lTableId, lFieldId))) THEN
        EXIT(lResult);

      lTableRelationMetadata.RESET();
      lTableRelationMetadata.SETRANGE("Table ID", lTableId);
      lTableRelationMetadata.SETRANGE("Field No.", lFieldId);
      lTableRelationMetadata.SETFILTER("Related Table ID", '<>0');
      lTableRelationMetadata.SETFILTER("Related Field No.", '<>0');
      IF (lTableRelationMetadata.FINDFIRST()) THEN
      BEGIN
        pRecordRef.OPEN(lTableRelationMetadata."Related Table ID");
        IF (pRecordRef.FIELDEXIST(lTableRelationMetadata."Related Field No.")) THEN
        BEGIN
          pFieldRef := pRecordRef.FIELD(lTableRelationMetadata."Related Field No.");
          lResult := TRUE;
        END;
        IF ( NOT (lResult)) THEN
          pRecordRef.CLOSE();
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Option and Boolean ---"@1000000005();
    BEGIN
    END;

    LOCAL PROCEDURE CreateValuesForOption@1000000006(pPlanningBoardTableStyle@1000000000 : Record 9062342) : Boolean;
    VAR
      lField@1000000003 : Record 2000000041;
      lOptionValueBuffer@1000000001 : TEMPORARY Record 9062730;
    BEGIN
      //DOC NA2016.12 - Creating values for related record
      //  -> pPlanningBoardTableStyle: Planning board table style record
      //  <- Result (TRUE = Created, FALSE = Not an option)

      IF ( NOT (GetStyleField(pPlanningBoardTableStyle, lField))) THEN
        EXIT(FALSE);
      IF (lField.Type <> lField.Type::Option) THEN
        EXIT(FALSE);

      String.SplitAdvanced(lField.OptionString, ',', TRUE, TRUE, lOptionValueBuffer);
      lOptionValueBuffer.RESET();
      IF (lOptionValueBuffer.FINDSET()) THEN
      REPEAT
        AddStyle(pPlanningBoardTableStyle, lOptionValueBuffer.Value);
      UNTIL (lOptionValueBuffer.NEXT() = 0);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateValuesForBoolean@1000000007(pPlanningBoardTableStyle@1000000000 : Record 9062342) : Boolean;
    VAR
      lField@1000000001 : Record 2000000041;
    BEGIN
      //DOC NA2016.12 - Creating values for related record
      //  -> pPlanningBoardTableStyle: Planning board table style record
      //  <- Result (TRUE = Created, FALSE = Not a boolean)

      IF ( NOT (GetStyleField(pPlanningBoardTableStyle, lField))) THEN
        EXIT(FALSE);
      IF (lField.Type <> lField.Type::Boolean) THEN
        EXIT(FALSE);

      AddStyle(pPlanningBoardTableStyle, FORMAT(TRUE));
      AddStyle(pPlanningBoardTableStyle, FORMAT(FALSE));

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000009();
    BEGIN
    END;

    LOCAL PROCEDURE GetStyleTableAndFieldIds@1000000010(pPlanningBoardTableStyle@1000000000 : Record 9062342;VAR pTableId@1000000002 : Integer;VAR pFieldId@1000000003 : Integer) : Boolean;
    VAR
      lTableId@1000000001 : Integer;
    BEGIN
      //DOC NA2016.12 - Trying to find style table and field IDs
      //  -> pPlanningBoardTableStyle: The style
      //  <> pTableId: Target table ID
      //  <> pFieldId: Target field ID
      //  <- TRUE = Both found, FALSE = Table and / or field = 0

      CLEAR(pTableId);
      CLEAR(pFieldId);

      PlanningBoardTable.GET(pPlanningBoardTableStyle."Planning Board Code", pPlanningBoardTableStyle."Planning Board Table Type");
      CASE (pPlanningBoardTableStyle."Style Application") OF
        pPlanningBoardTableStyle."Style Application"::Foreground:
          BEGIN
            pTableId := PlanningBoardTable."Foreground Style Table ID";
            IF (PlanningBoardTable."Foreground Style Field Type" = PlanningBoardTable."Foreground Style Field Type"::Field) THEN
              pFieldId := PlanningBoardTable."Foreground Style Field ID";
          END;
        pPlanningBoardTableStyle."Style Application"::Background:
          BEGIN
            pTableId := PlanningBoardTable."Background Style Table ID";
            IF (PlanningBoardTable."Background Style Field Type" = PlanningBoardTable."Background Style Field Type"::Field) THEN
              pFieldId := PlanningBoardTable."Background Style Field ID";
          END;
        pPlanningBoardTableStyle."Style Application"::Border:
          BEGIN
            pTableId := PlanningBoardTable."Border Style Table ID";
            IF (PlanningBoardTable."Border Style Field Type" = PlanningBoardTable."Border Style Field Type"::Field) THEN
              pFieldId := PlanningBoardTable."Border Style Field ID";
          END;
      END;

      EXIT((pTableId <> 0) AND (pFieldId <> 0));
    END;

    LOCAL PROCEDURE GetStyleField@1000000016(pPlanningBoardTableStyle@1000000003 : Record 9062342;VAR pField@1000000000 : Record 2000000041) : Boolean;
    VAR
      lTableId@1000000002 : Integer;
      lFieldId@1000000001 : Integer;
    BEGIN
      //DOC NA2016.12 - Trying to find style field
      //  -> pPlanningBoardTableStyle: The style
      //  <> pField: Target field record
      //  <- Result

      IF ( NOT (GetStyleTableAndFieldIds(pPlanningBoardTableStyle, lTableId, lFieldId))) THEN
        EXIT(FALSE);
      EXIT(pField.GET(lTableId, lFieldId));
    END;

    LOCAL PROCEDURE AddStyle@1000000020(pPlanningBoardTableStyle@1000000001 : Record 9062342;pFilter@1000000002 : Text);
    VAR
      lPlanningBoardTableStyle@1000000000 : Record 9062342;
    BEGIN
      //DOC NA2016.12 - Adding a style
      //  -> pPlanningBoardTableStyle: The base style
      //  -> pFilter: Filter (text value)

      CLEAR(lPlanningBoardTableStyle);
      lPlanningBoardTableStyle.INIT();
      lPlanningBoardTableStyle.VALIDATE("Planning Board Code", pPlanningBoardTableStyle."Planning Board Code");
      lPlanningBoardTableStyle.VALIDATE("Planning Board Table Type", pPlanningBoardTableStyle."Planning Board Table Type");
      lPlanningBoardTableStyle.VALIDATE("Style Application", pPlanningBoardTableStyle."Style Application");
      lPlanningBoardTableStyle.VALIDATE(Filter, COPYSTR(pFilter, 1, MAXSTRLEN(lPlanningBoardTableStyle.Filter)));
      lPlanningBoardTableStyle.INSERT(TRUE);
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 21/11/2015 - Created
      //DOC NA2016.12 JH 28/01/2016 - New string codeunit used
    }
    END.
  }
}

