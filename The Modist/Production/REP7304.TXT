OBJECT Report 7304 Get Outbound Source Documents
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Get Outbound Source Documents;
               ENG=Get Outbound Source Documents];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  LineCreated := FALSE;
                END;

    OnPostReport=BEGIN
                   IF NOT HideDialog THEN
                     IF NOT LineCreated THEN
                       ERROR(Text000);

                   Completed := TRUE;
                 END;

  }
  DATASET
  {
    { 6879;    ;DataItem;                    ;
               DataItemTable=Table7325;
               DataItemTableView=SORTING(Document Type,Document Subtype,Document No.,Location Code)
                                 WHERE(Status=CONST(Released),
                                       Completely Picked=CONST(No));
               ReqFilterFields=Document Type,Document No. }

    { 5944;1   ;DataItem;                    ;
               DataItemTable=Table7320;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF "Whse. Pick Request"."Document Type" <>
                                  "Whse. Pick Request"."Document Type"::Shipment
                               THEN
                                 CurrReport.BREAK;
                             END;

               DataItemLink=No.=FIELD(Document No.) }

    { 6896;2   ;DataItem;                    ;
               DataItemTable=Table7321;
               DataItemTableView=SORTING(No.,Line No.);
               OnPreDataItem=BEGIN
                               SETFILTER("Qty. Outstanding",'>0');
                             END;

               OnAfterGetRecord=VAR
                                  ATOLink@1001 : Record 904;
                                  ATOAsmLine@1002 : Record 901;
                                BEGIN
                                  IF NOT "Assemble to Order" THEN BEGIN
                                    CALCFIELDS("Pick Qty.","Pick Qty. (Base)");
                                    IF "Qty. (Base)" > "Qty. Picked (Base)" + "Pick Qty. (Base)" THEN BEGIN
                                      IF "Destination Type" = "Destination Type"::Customer THEN BEGIN
                                        TESTFIELD("Destination No.");
                                        Cust.GET("Destination No.");
                                        Cust.CheckBlockedCustOnDocs(Cust,"Source Document",FALSE,FALSE);
                                      END;

                                      IF WhsePickWkshCreate.FromWhseShptLine(PickWkshTemplate,PickWkshName,"Warehouse Shipment Line") THEN
                                        LineCreated := TRUE;
                                    END;
                                  END ELSE
                                    IF ATOLink.AsmExistsForWhseShptLine("Warehouse Shipment Line") THEN BEGIN
                                      ATOAsmLine.SETRANGE("Document Type",ATOLink."Assembly Document Type");
                                      ATOAsmLine.SETRANGE("Document No.",ATOLink."Assembly Document No.");
                                      IF ATOAsmLine.FINDSET THEN
                                        REPEAT
                                          ProcessAsmLineFromWhseShpt(ATOAsmLine,"Warehouse Shipment Line");
                                        UNTIL ATOAsmLine.NEXT = 0;
                                    END;
                                END;

               DataItemLink=No.=FIELD(No.) }

    { 7564;1   ;DataItem;                    ;
               DataItemTable=Table7333;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF "Whse. Pick Request"."Document Type" <> "Whse. Pick Request"."Document Type"::"Internal Pick" THEN
                                 CurrReport.BREAK;
                             END;

               DataItemLink=No.=FIELD(Document No.) }

    { 3581;2   ;DataItem;                    ;
               DataItemTable=Table7334;
               DataItemTableView=SORTING(No.,Line No.);
               OnPreDataItem=BEGIN
                               SETFILTER("Qty. Outstanding",'>0');
                             END;

               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Pick Qty.","Pick Qty. (Base)");
                                  IF "Qty. (Base)" > "Qty. Picked (Base)" + "Pick Qty. (Base)" THEN BEGIN
                                    IF WhsePickWkshCreate.FromWhseInternalPickLine(
                                         PickWkshTemplate,PickWkshName,LocationCode,"Whse. Internal Pick Line")
                                    THEN
                                      LineCreated := TRUE;
                                  END;
                                END;

               DataItemLink=No.=FIELD(No.) }

    { 4824;1   ;DataItem;                    ;
               DataItemTable=Table5405;
               DataItemTableView=SORTING(Status,No.)
                                 WHERE(Status=CONST(Released));
               OnPreDataItem=BEGIN
                               IF "Whse. Pick Request"."Document Type" <> "Whse. Pick Request"."Document Type"::Production THEN
                                 CurrReport.BREAK;
                             END;

               DataItemLink=Status=FIELD(Document Subtype),
                            No.=FIELD(Document No.) }

    { 7771;2   ;DataItem;                    ;
               DataItemTable=Table5407;
               DataItemTableView=SORTING(Status,Prod. Order No.,Prod. Order Line No.,Line No.)
                                 WHERE(Flushing Method=FILTER(Manual|Pick + Forward|Pick + Backward),
                                       Planning Level Code=CONST(0));
               OnPreDataItem=BEGIN
                               SETRANGE("Location Code","Whse. Pick Request"."Location Code");
                             END;

               OnAfterGetRecord=VAR
                                  ToBinCode@1000 : Code[20];
                                BEGIN
                                  IF ("Flushing Method" = "Flushing Method"::"Pick + Forward") AND ("Routing Link Code" = '') THEN
                                    CurrReport.SKIP;

                                  GetLocation("Location Code");
                                  ToBinCode := "Bin Code";

                                  CALCFIELDS("Pick Qty.");
                                  IF "Expected Quantity" > "Qty. Picked" + "Pick Qty." THEN
                                    IF WhsePickWkshCreate.FromProdOrderCompLine(
                                         PickWkshTemplate,PickWkshName,Location.Code,
                                         ToBinCode,"Prod. Order Component")
                                    THEN
                                      LineCreated := TRUE;
                                END;

               DataItemLink=Status=FIELD(Status),
                            Prod. Order No.=FIELD(No.) }

    { 3252;1   ;DataItem;                    ;
               DataItemTable=Table900;
               DataItemTableView=SORTING(Document Type,No.)
                                 WHERE(Document Type=CONST(Order));
               OnPreDataItem=BEGIN
                               IF "Whse. Pick Request"."Document Type" <> "Whse. Pick Request"."Document Type"::Assembly THEN
                                 CurrReport.BREAK;
                             END;

               DataItemLink=Document Type=FIELD(Document Subtype),
                            No.=FIELD(Document No.) }

    { 6911;2   ;DataItem;                    ;
               DataItemTable=Table901;
               DataItemTableView=SORTING(Document Type,Document No.,Type,Location Code)
                                 WHERE(Type=CONST(Item));
               OnPreDataItem=BEGIN
                               SETRANGE("Location Code","Whse. Pick Request"."Location Code");
                             END;

               OnAfterGetRecord=BEGIN
                                  ProcessAsmLineFromAsmLine("Assembly Line");
                                END;

               DataItemLink=Document Type=FIELD(Document Type),
                            Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=There are no Warehouse Worksheet Lines created.;ENG=There are no Warehouse Worksheet Lines created.';
      Location@1002 : Record 14;
      Cust@1005 : Record 18;
      WhsePickWkshCreate@1006 : Codeunit 7311;
      PickWkshTemplate@1001 : Code[10];
      PickWkshName@1003 : Code[10];
      LocationCode@1004 : Code[10];
      Completed@1010 : Boolean;
      LineCreated@1012 : Boolean;
      HideDialog@1013 : Boolean;

    PROCEDURE SetHideDialog@6(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    PROCEDURE NotCancelled@4() : Boolean;
    BEGIN
      EXIT(Completed);
    END;

    PROCEDURE SetPickWkshName@2(PickWkshTemplate2@1002 : Code[10];PickWkshName2@1000 : Code[10];LocationCode2@1001 : Code[10]);
    BEGIN
      PickWkshTemplate := PickWkshTemplate2;
      PickWkshName := PickWkshName2;
      LocationCode := LocationCode2;
    END;

    LOCAL PROCEDURE GetLocation@1(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE IsPickToBeMadeForAsmLine@10(AsmLine@1000 : Record 901) : Boolean;
    BEGIN
      WITH AsmLine DO BEGIN
        GetLocation("Location Code");

        CALCFIELDS("Pick Qty.");
        IF Location."Require Shipment" THEN
          EXIT(Quantity > "Qty. Picked" + "Pick Qty.");

        EXIT("Quantity to Consume" > "Qty. Picked" + "Pick Qty.");
      END;
    END;

    LOCAL PROCEDURE ProcessAsmLineFromAsmLine@7(AsmLine@1000 : Record 901);
    BEGIN
      IF IsPickToBeMadeForAsmLine(AsmLine) THEN
        IF WhsePickWkshCreate.FromAssemblyLine(PickWkshTemplate,PickWkshName,AsmLine) THEN
          LineCreated := TRUE;
    END;

    LOCAL PROCEDURE ProcessAsmLineFromWhseShpt@5(AsmLine@1000 : Record 901;WhseShptLine@1002 : Record 7321);
    BEGIN
      IF IsPickToBeMadeForAsmLine(AsmLine) THEN
        IF WhsePickWkshCreate.FromAssemblyLineInATOWhseShpt(PickWkshTemplate,PickWkshName,AsmLine,WhseShptLine) THEN
          LineCreated := TRUE;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

