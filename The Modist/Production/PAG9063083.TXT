OBJECT Page 9063083 Enhanced Information FactBox
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Enhanced Information;
               ENG=Enhanced Information];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table9062727;
    PopulateAllFields=Yes;
    PageType=CardPart;
    OnOpenPage=BEGIN
                 InitColorStyles();
                 ClearNavigationStack();
                 ActivePanel := 'home';
                 PageMode := ("View Mode"::"Single Panel");
                 FileUploadVisible := NOT(HideFileUpload);
                 ThemeName := SystemBehaviour.GetText('ENHFBOXTHEME');
                 IF (ThemeName = '') THEN
                   ThemeName := 'navy';
               END;

    OnFindRecord=BEGIN
                   IF (FIND(Which)) THEN
                     EXIT(TRUE);
                   InitEntry(TRUE);
                   IF (FIND(Which)) THEN
                     EXIT(TRUE);
                   EXIT(FALSE);
                 END;

    OnAfterGetRecord=BEGIN
                       ProcessTemplate(TRUE);
                     END;

  }
  CONTROLS
  {
    { 1000000000;;Container;
                ContainerType=ContentArea }

    { 1000000011;1;Field  ;
                Name=HtmlPage;
                CaptionML=[ENU=HtmlPage;
                           ENG=HtmlPage];
                SourceExpr=Html;
                ControlAddIn=[TheNavPeople.ModernUI30Panel;PublicKeyToken=009db2693a65df93] }

    { 1000000002;1;Field  ;
                Name=FileUploadElement;
                CaptionML=[ENU=FileUploadElement;
                           ENG=FileUploadElement];
                SourceExpr=UploadedFile."Source File Name";
                Visible=FileUploadVisible;
                ControlAddIn=[TheNavPeople.HtmlPanelBlack;PublicKeyToken=01497f3fa397f2cf] }

  }
  CODE
  {
    VAR
      ThemeName@9062243 : Text;
      ObjectMetadata@1000000011 : Record 2000000071;
      SystemBehaviour@9062244 : Record 9062230;
      ActivePanel@1000000016 : Text;
      PKFilter@1000000017 : ARRAY [5] OF Text;
      HtmlBigText@1000000014 : BigText;
      Html@1000000006 : Text INDATASET;
      HtmlPageLoaded@1000000007 : Boolean INDATASET;
      mainPageIcon@1000000010 : TextConst 'ENU=mif-home;ENG=mif-home';
      attachmentPageIcon@1000000012 : TextConst 'ENU=mif-attachment;ENG=mif-attachment';
      enhFieldPageIcon@1000000013 : TextConst 'ENU=mif-widgets;ENG=mif-widgets';
      checklistPageIcon@1000000015 : TextConst 'ENU=mif-list;ENG=mif-list';
      checklistTemplatePageIcon@1000000000 : TextConst 'ENU=mif-event-available;ENG=mif-event-available';
      questPageIcon@1000000018 : TextConst 'ENU=mif-keyboard;ENG=mif-keyboard';
      questTemplatePageIcon@1000000019 : TextConst 'ENU=mif-stack;ENG=mif-stack';
      workflowPageIcon@1000000020 : TextConst 'ENU=mif-cogs;ENG=mif-cogs';
      tagsPageIcon@9062235 : TextConst 'ENU=mif-bookmark;ENG=mif-bookmark';
      workflowActivityPageIcon@1000000001 : TextConst 'ENU=mif-power;ENG=mif-power';
      templatesPageIcon@1000000004 : TextConst 'ENU=mif-magic-wand;ENG=mif-magic-wand';
      enhViewsPageIcon@1000000049 : TextConst 'ENU=mif-power;ENG=mif-power';
      enhViewIcon@1000000050 : TextConst 'ENU=mif-power;ENG=mif-power';
      askNoraPageIcon@1000000037 : TextConst 'ENU=mif-bubbles;ENG=mif-bubbles';
      workflowIcon@1000000008 : TextConst 'ENU=mif-cogs;ENG=mif-cogs';
      questTemplateIcon@1000000009 : TextConst 'ENU=mif-stack;ENG=mif-stack';
      newDocumentIcon@1000000021 : TextConst 'ENU=mif-file-empty;ENG=mif-file-empty';
      groupWorkflowIcon@9062231 : TextConst 'ENU=mif-power;ENG=mif-power';
      groupWorkflowPageIcon@9062232 : TextConst 'ENU=mif-power;ENG=mif-power';
      myGroupWorkflowIcon@9062233 : TextConst 'ENU=mif-checkmark;ENG=mif-checkmark';
      checklistTemplateIcon@1000000002 : TextConst 'ENU=mif-event-available;ENG=mif-event-available';
      settingsIcon@9062234 : TextConst 'ENU=mif-cog;ENG=mif-cog';
      newTagIcon@9062236 : TextConst 'ENU=mif-file-empty;ENG=mif-file-empty';
      tagRecordsIcon@9062241 : TextConst 'ENU=mif-tag;ENG=mif-tag';
      cnfCreateQuestionnaire@1000000022 : TextConst 'ENU=Do you want to create questionnaire from template ''%1''?;ENG=Do you want to create questionnaire from template ''%1''?';
      cnfCreateChecklist@1000000003 : TextConst 'ENU=Do you want to create checklist from template ''%1''?;ENG=Do you want to create checklist from template ''%1''?';
      NavigationStack@1000000005 : TEMPORARY Record 823;
      NavigationStackCount@1000000023 : Integer;
      PageMode@1000000024 : Integer;
      HttpUtility@1000000046 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
      PositionTextFilter@9062229 : Text;
      "--File Upload Variables--"@1000000031 : Integer;
      FileUploadVisible@1000000025 : Boolean;
      HideFileUpload@1000000026 : Boolean INDATASET;
      fileUploadField@1000000027 : Text INDATASET;
      cnfNewChecklist@9062230 : TextConst 'ENU=Do you want to create new checklist?;ENG=Do you want to create new checklist?';
      txtTagInfo@9062237 : TextConst 'ENU=%2 of %1;ENG=%2 of %1';
      txtEmptyChecklist@1000000048 : TextConst 'ENU=New Empty Checklist;ENG=New Empty Checklist';
      txtNewEnhView@1000000051 : TextConst 'ENU=New Enhanced View;ENG=New Enhanced View';
      "--File Const--"@1000000028 : TextConst 'ENU=--File Const--;ENG=--File Const--';
      errFilePartCommandError@1000000030 : TextConst 'ENU=Incorrect file upload command message ''%1'';ENG=Incorrect file upload command message ''%1''';
      errPartError@1000000029 : TextConst 'ENU=File part error;ENG=File part error';
      UploadedFile@1000000038 : TEMPORARY Record 9062630;
      convert@1000000036 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      byteArray@1000000035 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      dataStream@1000000034 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileStream";
      fileMode@1000000033 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileMode";
      fileOpened@1000000032 : Boolean;
      "--Ask Nora Variables--"@1000000039 : Integer;
      AskNoraField@1000000045 : Text;
      ResetConversation@1000000044 : Boolean;
      AskNoraInitialized@1000000043 : Boolean;
      DisableImages@1000000042 : Boolean;
      OpenLinks@1000000041 : Boolean;
      UseClientType@1000000040 : 'Rtc,Web,Tablet';
      txtDownloadFileTitle@1000000047 : TextConst 'ENU=Download File;ENG=Download File';
      ColorName@9062239 : ARRAY [10] OF Text;
      ColorNameCount@9062240 : Integer;

    LOCAL PROCEDURE InitEntry@9062229(UseAnotherSession@1000000000 : Boolean);
    VAR
      EnhInfEntry@9062229 : Record 9062727;
      EntryTableNo@9062230 : Integer;
      i@9062231 : Integer;
      NewSessionid@1000000001 : Integer;
    BEGIN
      EntryTableNo := 0;
      FOR i:=0 TO 20 DO BEGIN
        FILTERGROUP(i);
        IF (GETFILTER("Table No.") <> '') THEN BEGIN
          EntryTableNo := GETRANGEMIN("Table No.");
        END;
      END;
      FILTERGROUP(0);

      IF (EntryTableNo <> 0) THEN BEGIN
        IF (NOT(EnhInfEntry.GET(EntryTableNo))) THEN BEGIN
          EnhInfEntry.INIT();
          EnhInfEntry."Table No." := EntryTableNo;

          IF (UseAnotherSession) THEN BEGIN
            STARTSESSION(NewSessionid, CODEUNIT::"Enh. Inf. Entry Setup", CURRENTCOMPANY, EnhInfEntry);
            SLEEP(500);
          END ELSE
            EnhInfEntry.INSERT();
          CurrPage.UPDATE(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE ProcessTemplate@1000000001(DisableAnimations@9062230 : Boolean);
    VAR
      InfoEntry@1000000006 : Record 9062727;
      TempBlob@1000000003 : Record 99008535;
      TNPUtils@9062229 : Codeunit 9062229;
      BigTextData@1000000001 : BigText;
      OutStream@1000000002 : OutStream;
      InStream@1000000004 : InStream;
      DataText@1000000005 : Text;
      i@1000000007 : Integer;
      eTitle@1000000000 : TextConst 'ENU=Enhanced Information;ENG=Enhanced Information';
    BEGIN
      //DisableAnimations := TRUE;
      IF (HtmlPageLoaded) THEN BEGIN
        InfoEntry.RESET();
        InfoEntry.SETRANGE("Table No.", "Table No.");
        FOR i:=0 TO 64 DO BEGIN
          Rec.FILTERGROUP(i);
          IF (Rec.GETFILTER("Primary Key Value 1") <> '') THEN
            PKFilter[1] := Rec.GETFILTER("Primary Key Value 1");
          IF (Rec.GETFILTER("Primary Key Value 2") <> '') THEN
            PKFilter[2] := Rec.GETFILTER("Primary Key Value 2");
          IF (Rec.GETFILTER("Primary Key Value 3") <> '') THEN
            PKFilter[3] := Rec.GETFILTER("Primary Key Value 3");
          IF (Rec.GETFILTER("Primary Key Value 4") <> '') THEN
            PKFilter[4] := Rec.GETFILTER("Primary Key Value 4");
          IF (Rec.GETFILTER("Primary Key Value 5") <> '') THEN
            PKFilter[5] := Rec.GETFILTER("Primary Key Value 5");
          IF (Rec.GETFILTER("Position Text") <> '') THEN
            PositionTextFilter := Rec.GETFILTER("Position Text");
          IF (Rec.GETFILTER("View Mode") <> '') THEN
            PageMode := Rec.GETRANGEMIN("View Mode");
        END;
        Rec.FILTERGROUP(0);

        IF (PositionTextFilter = '') AND ("Table No." <> 0) THEN BEGIN
          PositionTextFilter := TNPUtils.GetPositionTextUsingPrimaryKeyValues("Table No.", PKFilter[1], PKFilter[2], PKFilter[3], PKFilter[4], PKFilter[5]);
          SETRANGE("Position Text", PositionTextFilter);
        END;

        CLEAR(HtmlBigText);

        IF ("Table No." = 0) THEN BEGIN

          OpenPanel(mainPageIcon, eTitle, '');
          OpenPanelContent();
          ClosePanel();

        END ELSE BEGIN

          CASE (PageMode) OF
            "View Mode"::Attachments: ActivePanel := 'attachments';
            "View Mode"::Checklists: ActivePanel := 'checklists';
            "View Mode"::Questionnaires: ActivePanel := 'questionnaires';
            "View Mode"::"Questionnaire Templates": ActivePanel := 'questTemplates';
            "View Mode"::Workflows: ActivePanel := 'workflows';
            "View Mode"::"Workflow Activities": ActivePanel := 'workflowActivities';
            "View Mode"::"Group Workflows": ActivePanel := 'groupWorkflows';
            "View Mode"::"Checklist Templates": ActivePanel := 'checklistTemplates';
            "View Mode"::Templates: ActivePanel := 'templates';
            "View Mode"::"Enhanced Fields": ActivePanel := 'enhancedFields';
            "View Mode"::nOra: ActivePanel := 'askNora';
            "View Mode"::Tags: ActivePanel := 'tags';
            "View Mode"::"Enhanced Views": ActivePanel := 'enhancedViews';
          END;

          IF (PageMode IN ["View Mode"::"Multiple Panels", "View Mode"::"Panel List 1", "View Mode"::"Panel List 2"]) THEN BEGIN
            BuildMulticolumnHtml();
          END ELSE BEGIN
            CASE (ActivePanel) OF
              'home': BuildMenuHtml();
              'attachments': BuildAttachmentsHtml();
              'enhancedFields': BuildEnhancedFieldsHtml();
              'checklists': BuildChecklistsHtml();
              'checklistTemplates': BuildChecklistTemplatesHtml();
              'questionnaires': BuildQuestionnairesHtml();
              'questTemplates': BuildQuestTemplatesHtml();
              'workflows': BuildWorkflowsHtml();
              'groupWorkflows': BuildGroupWorkflowsHtml();
              'workflowActivities': BuildWorkflowActivitiesHtml();
              'templates': BuildTemplatesHtml();
              'tags': BuildTagsHtml();
              'askNora': BuildAskNoraHtml();
              'enhancedViews': BuildEnhancedViews();
              ELSE
                BuildMenuHtml();
            END;
          END;

        END;

        HtmlBigText.GETSUBTEXT(Html, 1);
        //delete hints
        CurrPage.HtmlPage.RunScript('$(".hint").remove();');
        //set new content
        IF (DisableAnimations) THEN
          CurrPage.HtmlPage.RunCommand('update', 'controlAddIn', Html)
        ELSE
          CurrPage.HtmlPage.SetData(Html);
      END;
    END;

    LOCAL PROCEDURE AddInReady@1000000014();
    BEGIN
      //IF (NOT(HtmlPageLoaded)) THEN BEGIN
        PrepareScripts();
        HtmlPageLoaded := TRUE;
        ProcessTemplate(TRUE);
      //END;
    END;

    LOCAL PROCEDURE AddInEvent@1000000015(source@1000000000 : Text;name@1000000001 : Text;parameters@1000000002 : Text);
    BEGIN
      CASE (source) OF
        'menu': ProcessMainMenu(name, parameters);
        'attachment': ProcessAttachment(name, parameters);
        'checklist': ProcessCheckList(name, parameters);
        'checklistTemplate': ProcessChecklistTemplate(name, parameters);
        'quest': ProcessQuestionnaire(name, parameters);
        'questTemplate': ProcessQuestTemplate(name, parameters);
        'enhancedField': ProcessEnhancedField(name, parameters);
        'workflow': ProcessWorkflow(name, parameters);
        'groupWorkflow': ProcessGroupWorkflow(name, parameters);
        'workflowActivity': ProcessWorkflowActivity(name, parameters);
        'askNora': ProcessAskNora(name, parameters);
        'tags': ProcessTags(name, parameters);
        'enhancedView': ProcessEnhancedViews(name, parameters);
      END;
    END;

    LOCAL PROCEDURE ProcessMainMenu@1000000016(name@1000000000 : Text;parameters@1000000001 : Text);
    VAR
      EnhInfo@1000000002 : Record 9062727;
      DetailsPage@1000000003 : Page 9063083;
    BEGIN
      CASE (name) OF
        'show': SetActivePanel(parameters);
        'zoom': ZoomWindow();
        'setup':
          BEGIN
            PAGE.RUNMODAL(PAGE::"Enh. Information Setup Card", Rec);
            ProcessTemplate(TRUE);
          END;
      END;
    END;

    LOCAL PROCEDURE ProcessAttachment@1000000008(name@1000000000 : Text;parameters@1000000001 : Text);
    VAR
      FileAttachment@1000000002 : Record 9062272;
      FileAttachmentProcessing@9062229 : Codeunit 9062600;
    BEGIN
      CASE (name) OF
        'show':
          BEGIN
            FileAttachment.GET(parameters);
            FileAttachment.OpenFile();
          END;
        'download':
          BEGIN
            FileAttachment.GET(parameters);
            FileAttachment.DownloadToClient();
          END;
        'upload':
          BEGIN
            FilterFileAttachment(FileAttachment);
            FileAttachmentProcessing.GetFromClient(FileAttachment);
            ProcessTemplate(TRUE);
          END;
        'getExcel':
          BEGIN
            FilterFileAttachment(FileAttachment);
            FileAttachmentProcessing.GetFromExcel(FileAttachment);
            ProcessTemplate(TRUE);
          END;
        'getWord':
          BEGIN
            FilterFileAttachment(FileAttachment);
            FileAttachmentProcessing.GetFromWord(FileAttachment);
            ProcessTemplate(TRUE);
          END;
        'getOutlook':
          BEGIN
            FilterFileAttachment(FileAttachment);
            FileAttachmentProcessing.GetFromOutlook(FileAttachment);
            ProcessTemplate(TRUE);
          END;
        'importCurrentExcel':
          BEGIN
            FileAttachmentProcessing.ImportDataFromCurrExcelWbok();
            ProcessTemplate(TRUE);
          END;
        'importExcel':
          BEGIN
            FileAttachmentProcessing.ImportDataFromExcel();
            ProcessTemplate(TRUE);
          END;
        'delete':
          BEGIN
            FileAttachment.GET(parameters);
            FileAttachment.DeleteFile();
            ProcessTemplate(TRUE);
          END;
        'list':
          BEGIN
            FilterFileAttachment(FileAttachment);
            PAGE.RUN(0, FileAttachment);
          END;
      END;
    END;

    LOCAL PROCEDURE ProcessEnhancedField@1000000023(name@1000000001 : Text;parameters@1000000000 : Text);
    VAR
      EnhFieldDef@1000000006 : Record 9062327;
      EnhFieldValue@1000000003 : Record 9062328;
      EnhancedFieldMgt@1000000005 : Codeunit 9062298;
      FieldPositionText@1000000004 : Text;
      EnhFieldNo@1000000002 : Integer;
    BEGIN
      CASE (name) OF
        'show':
          BEGIN
            IF (EVALUATE(EnhFieldNo, parameters)) THEN BEGIN
              FieldPositionText := EnhancedFieldMgt.GetFieldForRecord_FromPrimKeys("Table No.", EnhFieldNo,
                PKFilter[1], PKFilter[2], PKFilter[3], PKFilter[4], PKFilter[5],
                EnhFieldValue, TRUE);
              EnhFieldDef.GET("Table No.", EnhFieldNo);
              EnhancedFieldMgt.GetFieldDrilldown(EnhFieldDef."Table No.", EnhFieldDef."Enhanced Field No.", FieldPositionText, TRUE);
            END;
          END;
        'vallist':
          BEGIN
            EnhFieldDef.RESET();
            EnhFieldDef.FILTERGROUP(4);
            EnhFieldDef.SETRANGE("Table No.", "Table No.");
            IF (PKFilter[1] <> '') THEN
              EnhFieldDef.SETRANGE("Primary Key Value 1 Filter", PKFilter[1]);
            IF (PKFilter[2] <> '') THEN
              EnhFieldDef.SETRANGE("Primary Key Value 2 Filter", PKFilter[2]);
            IF (PKFilter[3] <> '') THEN
              EnhFieldDef.SETRANGE("Primary Key Value 3 Filter", PKFilter[3]);
            IF (PKFilter[4] <> '') THEN
              EnhFieldDef.SETRANGE("Primary Key Value 4 Filter", PKFilter[4]);
            IF (PKFilter[5] <> '') THEN
              EnhFieldDef.SETRANGE("Primary Key Value 5 Filter", PKFilter[5]);
            EnhFieldDef.FILTERGROUP(0);
            PAGE.RUN(PAGE::"Enhanced Field Value ListPart", EnhFieldDef);
          END;
        'list':
          BEGIN
            EnhFieldDef.RESET();
            EnhFieldDef.SETRANGE("Table No.", "Table No.");
            EnhFieldDef.SETRANGE("Show On Factbox", TRUE);
            PAGE.RUN(PAGE::"Enhanced Field Definition List", EnhFieldDef);
          END;
      END;
    END;

    LOCAL PROCEDURE ProcessCheckList@1000000024(name@1000000001 : Text;parameters@1000000000 : Text);
    VAR
      ChecklistTemplate@1000000004 : Record 9062436;
      ChecklistTemplateBuffer@1000000005 : TEMPORARY Record 9062436;
      Checklist@1000000002 : Record 9062434;
      ChecklistLine@9062230 : Record 9062435;
      TNPUtils@9062229 : Codeunit 9062229;
      ChecklistPage@1000000003 : Page 9062566;
      Pos@9062231 : Integer;
      ChecklistCode@9062232 : Code[50];
      LineNoText@9062233 : Text;
      LineNo@9062234 : Integer;
    BEGIN
      CASE (name) OF
        'show':
          BEGIN
            Checklist.SETPOSITION(parameters);
            Checklist.FIND('=');
            Checklist.SETRECFILTER();
            ChecklistPage.SETTABLEVIEW(Checklist);
            ChecklistPage.SETRECORD(Checklist);
            ChecklistPage.RUN();
          END;
        'new':
          BEGIN

            //DOC NA2016.12 >>
            //ChecklistTemplate.RESET();
            //IF (ChecklistTemplate.FINDSET()) THEN BEGIN
            //  REPEAT
            //    ChecklistTemplateBuffer.TRANSFERFIELDS(ChecklistTemplate);
            //    ChecklistTemplateBuffer.INSERT();
            //  UNTIL (ChecklistTemplate.NEXT() = 0);
            //END;
            //IF (NOT(ChecklistTemplateBuffer.GET(''))) THEN BEGIN
            //  ChecklistTemplateBuffer.INIT();
            //  ChecklistTemplateBuffer."Checklist Type" := '';
            //  ChecklistTemplateBuffer.Description := txtEmptyChecklist;
            //  ChecklistTemplateBuffer.INSERT();
            //END;
            //IF (PAGE.RUNMODAL(0, ChecklistTemplateBuffer) IN [ACTION::OK, ACTION::LookupOK]) THEN BEGIN
            //DOC NA2016.12 <<
              Checklist.RESET();
              Checklist.INIT();
              FilterChecklist(Checklist);
              //Checklist."No." := '';
              //DOC NA2016.12 >>
              //Checklist.VALIDATE("Checklist Type", ChecklistTemplateBuffer."Checklist Type");
              //DOC NA2016.12 <<
              Checklist.VALIDATE("Related Table No.", "Table No.");
              Checklist.VALIDATE("Related Position Text", TNPUtils.GetPositionTextUsingPrimaryKeyValues("Table No.", PKFilter[1], PKFilter[2], PKFilter[3], PKFilter[4], PKFilter[5]));
              Checklist.INSERT(TRUE);
              PAGE.RUN(PAGE::"Checklist Card", Checklist);
            //DOC NA2016.12 >>
            //END;
            //DOC NA2016.12 <<
          END;
        'checked',
        'unchecked':
          BEGIN
            ChecklistLine.SETPOSITION(parameters);
            IF (ChecklistLine.FIND('=')) THEN BEGIN
              ChecklistLine.VALIDATE(Completed, (name = 'checked'));
              ChecklistLine.MODIFY();
            END;
          END;
        'list':
          BEGIN
            FilterChecklist(Checklist);
            PAGE.RUN(0, Checklist);
          END;
      END;
    END;

    LOCAL PROCEDURE ProcessChecklistTemplate@1000000018(name@1000000001 : Text;parameters@1000000000 : Text);
    VAR
      ChecklistTemplate@1000000002 : Record 9062436;
      Checklist@1000000003 : Record 9062434;
      ChecklistPage@1000000004 : Page 9062566;
    BEGIN
      CASE (name) OF
        'create':
          BEGIN
            ChecklistTemplate.GET(parameters);
            IF (CONFIRM(STRSUBSTNO(cnfCreateChecklist, ChecklistTemplate.Description))) THEN BEGIN
              ChecklistTemplate.SETRANGE("Table No. To Pass", "Table No.");
              IF (PKFilter[1] <> '') THEN
                ChecklistTemplate.SETRANGE("Primary Key 1 To Pass", PKFilter[1]);
              IF (PKFilter[2] <> '') THEN
                ChecklistTemplate.SETRANGE("Primary Key 2 To Pass", PKFilter[2]);
              IF (PKFilter[3] <> '') THEN
                ChecklistTemplate.SETRANGE("Primary Key 3 To Pass", PKFilter[3]);
              IF (PKFilter[4] <> '') THEN
                ChecklistTemplate.SETRANGE("Primary Key 4 To Pass", PKFilter[4]);
              IF (PKFilter[5] <> '') THEN
                ChecklistTemplate.SETRANGE("Primary Key 5 To Pass", PKFilter[5]);
              ChecklistTemplate.CreateNewChecklist(Checklist);
              ChecklistPage.SETRECORD(Checklist);
              ChecklistPage.RUN;
            END;
          END;
        'list':
          BEGIN
            FilterChecklistTemplate(ChecklistTemplate);
            PAGE.RUN(0, ChecklistTemplate);
          END;
      END;
    END;

    LOCAL PROCEDURE ProcessQuestionnaire@1000000025(name@1000000001 : Text;parameters@1000000000 : Text);
    VAR
      Questionnaire@1000000002 : Record 9062704;
    BEGIN
      CASE (name) OF
        'show':
          BEGIN
            IF (parameters <> '') THEN BEGIN
              Questionnaire.RESET();
              Questionnaire.SETFILTER("Questionnaire No.", parameters);
              IF (Questionnaire.FINDFIRST()) THEN BEGIN
                IF (Questionnaire.Status = Questionnaire.Status::Finished) THEN
                  PAGE.RUN(PAGE::"Questionnaire Card", Questionnaire)
                ELSE
                  HYPERLINK(Questionnaire.GetWebPageURL);
              END;
            END;
          END;
        'list':
          BEGIN
            FilterQuestionnaire(Questionnaire);
            PAGE.RUN(0, Questionnaire);
          END;
      END;
    END;

    LOCAL PROCEDURE ProcessQuestTemplate@1000000026(name@1000000001 : Text;parameters@1000000000 : Text);
    VAR
      QuestTemplate@1000000002 : Record 9062702;
      QuestInstance@1000000004 : Record 9062704;
      QuestMgt@1000000003 : Codeunit 9062540;
    BEGIN
      CASE (name) OF
        'create':
          BEGIN
            QuestTemplate.GET(parameters);
            IF (CONFIRM(STRSUBSTNO(cnfCreateQuestionnaire, QuestTemplate.Name))) THEN BEGIN
              QuestTemplate.SETRECFILTER();
              IF (PKFilter[1] <> '') THEN
                QuestTemplate.SETRANGE("Primary Key 1 To Pass", PKFilter[1]);
              IF (PKFilter[2] <> '') THEN
                QuestTemplate.SETRANGE("Primary Key 2 To Pass", PKFilter[2]);
              IF (PKFilter[3] <> '') THEN
                QuestTemplate.SETRANGE("Primary Key 3 To Pass", PKFilter[3]);
              IF (PKFilter[4] <> '') THEN
                QuestTemplate.SETRANGE("Primary Key 4 To Pass", PKFilter[4]);
              IF (PKFilter[5] <> '') THEN
                QuestTemplate.SETRANGE("Primary Key 5 To Pass", PKFilter[5]);
              QuestMgt.CreateInstanceOfQuestAndShow(QuestTemplate, QuestInstance);
            END;
          END;
        'list':
          BEGIN
            FilterQuestTemplate(QuestTemplate);
            PAGE.RUN(0, QuestTemplate);
          END;
      END;
    END;

    LOCAL PROCEDURE ProcessWorkflow@1000000027(name@1000000001 : Text;parameters@1000000000 : Text);
    VAR
      Workflow@1000000002 : Record 9062258;
    BEGIN
      CASE (name) OF
        'create':
          BEGIN
            Workflow.SETRANGE("No.", parameters);
            IF (PKFilter[1] <> '') THEN
              Workflow.SETRANGE("Primary Key 1 To Pass", PKFilter[1]);
            IF (PKFilter[2] <> '') THEN
              Workflow.SETRANGE("Primary Key 2 To Pass", PKFilter[2]);
            IF (PKFilter[3] <> '') THEN
              Workflow.SETRANGE("Primary Key 3 To Pass", PKFilter[3]);
            IF (PKFilter[4] <> '') THEN
              Workflow.SETRANGE("Primary Key 4 To Pass", PKFilter[4]);
            PAGE.RUNMODAL(PAGE::"Enhanced Workflow Confirmation", Workflow);
          END;
        'list':
          BEGIN
            FilterWorkflow(Workflow);
            PAGE.RUN(0, Workflow);
          END;
      END;
    END;

    LOCAL PROCEDURE ProcessGroupWorkflow@9062233(name@9062230 : Text;parameters@9062229 : Text);
    VAR
      GroupWorkflow@9062231 : Record 9062265;
      WorkflowActivity@9062232 : Record 9062266;
      UserSetup@9062233 : Record 9062729;
    BEGIN
      CASE (name) OF
        //'show':
        //  BEGIN
        //    GroupWorkflow.GET(parameters);
        //    GroupWorkflow.SETRECFILTER();
        //
        //  END;
        'show':
          BEGIN
            //try to show open workflow activity for current user
            IF (UserSetup.GET(USERID)) THEN BEGIN
              IF (UserSetup."Contact No." <> '') THEN BEGIN
                WorkflowActivity.RESET();
                WorkflowActivity.SETRANGE("Group Workflow No.", parameters);
                WorkflowActivity.SETRANGE("Contact No.", UserSetup."Contact No.");
                WorkflowActivity.SETRANGE(Status, WorkflowActivity.Status::Open);
                IF (WorkflowActivity.FINDFIRST()) THEN BEGIN
                  WorkflowActivity.SETRECFILTER();
                  PAGE.RUN(PAGE::"Enh. Workflow Activity Card", WorkflowActivity);
                  ProcessTemplate(TRUE);
                  EXIT;
                END;
              END;
            END;
            //workflow activity does not exist - show list of group workflows
            FilterGroupWorkflow(GroupWorkflow);
            PAGE.RUN(0, GroupWorkflow);
          END;
        'list':
          BEGIN
            FilterGroupWorkflow(GroupWorkflow);
            PAGE.RUN(0, GroupWorkflow);
          END;
      END;
    END;

    LOCAL PROCEDURE ProcessWorkflowActivity@1000000019(name@1000000001 : Text;parameters@1000000000 : Text);
    VAR
      WorkflowActivity@1000000002 : Record 9062266;
    BEGIN
      CASE (name) OF
        'show':
          BEGIN
            WorkflowActivity.GET(parameters);
            //WorkflowActivity.FIND('=');
            WorkflowActivity.SETRECFILTER();
            PAGE.RUNMODAL(PAGE::"Enh. Workflow Activity Card", WorkflowActivity);
            ProcessTemplate(TRUE);
          END;
        'list':
          BEGIN
            FilterWorkflowActivity(WorkflowActivity);
            PAGE.RUN(0, WorkflowActivity);
          END;
      END;
    END;

    LOCAL PROCEDURE ProcessAskNora@1000000057(name@1000000001 : Text;parameters@1000000000 : Text);
    BEGIN
      IF (name = 'message') THEN
        ProcessNoraMessage(parameters)
      ELSE IF (name = 'link') THEN
        ProcessNoraLink(parameters)
      ELSE IF (name = 'sourceurl') THEN
        DetectClient(parameters);
    END;

    LOCAL PROCEDURE ProcessTags@9062238(name@9062230 : Text;parameters@9062229 : Text);
    VAR
      Tag@9062231 : Record 9062492;
      TagsMgt@9062232 : Codeunit 9062389;
    BEGIN
      CASE (name) OF
        'new':
          BEGIN
            TagsMgt.SwitchTagWithUI("Table No.", PKFilter[1], PKFilter[2], PKFilter[3], PKFilter[4], PKFilter[5]);
            ProcessTemplate(TRUE);
          END;
        'checked',
        'unchecked':
          BEGIN
            Tag.SETPOSITION(parameters);
            IF (Tag.FIND('=')) THEN BEGIN
              Tag.TESTFIELD("Table No.", "Table No.");
              TagsMgt.SwitchTag(Tag, PKFilter[1], PKFilter[2], PKFilter[3], PKFilter[4], PKFilter[5]);// TagFilteredRecord(Tag);
              ProcessTemplate(TRUE);
            END;
          END;
        'list':
          BEGIN
            FilterTags(Tag);
            PAGE.RUN(PAGE::"Tag List", Tag);
          END;
        'drilldown': DrillDownTag(parameters);
        'tag':
          BEGIN
            CASE ("Table No.") OF
              DATABASE::Customer: OpenPage(PAGE::"Customer List (Enhanced)");
              DATABASE::Vendor: OpenPage(PAGE::"Vendor List (Enhanced)");
              DATABASE::Item: OpenPage(PAGE::"Item List (Enhanced)");
              DATABASE::Contact: OpenPage(PAGE::"Contact List (Enhanced)");
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE ProcessEnhancedViews@1000000059(name@1000000001 : Text;parameters@1000000000 : Text);
    VAR
      EnhView@1000000006 : Record 9062804;
      EnhViewMgt@1000000002 : Codeunit 9062679;
      ViewCode@1000000003 : Code[20];
    BEGIN
      CASE (name) OF
        'new':
           ShowEnhancedView(EnhViewMgt.CreateDefaultView('', "Table No.", 0, FALSE));
        'show':
          BEGIN
            IF (parameters <> '') THEN
              ShowEnhancedView(COPYSTR(parameters, 1, 20));
          END;
        'edit':
          BEGIN
            IF (EnhView.GET(parameters)) THEN
              PAGE.RUN(PAGE::"Enhanced View Def. Card", EnhView);
          END;
        'list':
          BEGIN
            EnhView.RESET();
            EnhView.SETRANGE("Source Table No.", "Table No.");
            PAGE.RUN(PAGE::"Enhanced View Def. List", EnhView);
          END;
      END;
    END;

    LOCAL PROCEDURE ShowEnhancedView@1000000064(ViewCode@1000000000 : Code[20]);
    VAR
      EnhView@1000000001 : Record 9062804;
    BEGIN
      IF (ViewCode <> '') THEN BEGIN
        IF (EnhView.GET(ViewCode)) THEN BEGIN
          EnhView.SETRECFILTER();
          PAGE.RUN(PAGE::"Enhanced View Card", EnhView);
        END;
      END;
    END;

    LOCAL PROCEDURE SetActivePanel@1000000007(newViewMode@1000000000 : Text);
    BEGIN
      ActivePanel := newViewMode;
      ProcessTemplate(FALSE);
    END;

    LOCAL PROCEDURE CheckPanelVisibility@9062232(ShowPanel@9062229 : Boolean;VAR GroupNo@9062230 : Integer;VAR ColumnNo@9062231 : Integer) : Boolean;
    BEGIN
      IF (NOT(ShowPanel)) THEN
        EXIT(FALSE);

      ColumnNo += 1;
      IF (ColumnNo > 4) THEN BEGIN
        GroupNo += 1;
        ColumnNo := 1;
      END;

      CASE (PageMode) OF
        "View Mode"::"Multiple Panels": EXIT(TRUE);
        "View Mode"::"Panel List 1": EXIT(GroupNo = 1);
        "View Mode"::"Panel List 2": EXIT(GroupNo = 2);
      END;
    END;

    LOCAL PROCEDURE BuildMulticolumnHtml@1000000036();
    VAR
      StartElement@1000000000 : Text;
      EndElement@1000000001 : Text;
      PanelGroup@9062229 : Integer;
      PanelIndex@9062230 : Integer;
    BEGIN
      IF (PageMode IN ["View Mode"::"Panel List 1", "View Mode"::"Panel List 2"]) THEN BEGIN
        HtmlBigText.ADDTEXT('<div style="overflow:auto;"><div style="display:table;width:100%;"><div style="display:table-row;">');
        StartElement := '<div style="display:table-cell;margin:5px;padding:5px;width:33%;">';
      END ELSE BEGIN
        HtmlBigText.ADDTEXT('<div style="overflow:auto;"><div style="display:table;"><div style="display:table-row;">');
        StartElement := '<div style="display:table-cell;margin:5px;padding:5px">';
      END;
      EndElement := '</div>';

      PanelGroup := 1;
      PanelIndex := 0;

      //Enhanced Fields and Attachments are displayed on separate FactBox

      //IF (CheckPanelVisibility(Rec."Show Attachments", PanelGroup, PanelIndex)) THEN BEGIN
      //  HtmlBigText.ADDTEXT(StartElement);
      //  BuildAttachmentsHtml();
      //  HtmlBigText.ADDTEXT(EndElement);
      //END;

      //IF (CheckPanelVisibility(Rec."Show Enhanced Fields", PanelGroup, PanelIndex)) THEN BEGIN
      //  HtmlBigText.ADDTEXT(StartElement);
      //  BuildEnhancedFieldsHtml();
      //  HtmlBigText.ADDTEXT(EndElement);
      //END;

      IF (CheckPanelVisibility(Rec."Show Workflows", PanelGroup, PanelIndex)) THEN BEGIN
        HtmlBigText.ADDTEXT(StartElement);
        BuildWorkflowsHtml();
        HtmlBigText.ADDTEXT(EndElement);
      END;

      IF (CheckPanelVisibility(Rec."Show Questionnaire Templates" OR Rec."Show Questionnaires", PanelGroup, PanelIndex)) THEN BEGIN
        HtmlBigText.ADDTEXT(StartElement);
        BuildQuestTemplatesHtml();
        HtmlBigText.ADDTEXT(EndElement);
      END;

      IF (CheckPanelVisibility(Rec."Show Checklist Templates" OR Rec."Show Checklists", PanelGroup, PanelIndex)) THEN BEGIN
        HtmlBigText.ADDTEXT(StartElement);
        BuildChecklistTemplatesHtml();
        HtmlBigText.ADDTEXT(EndElement);
      END;

      IF (CheckPanelVisibility(Rec."Show Group Workflows", PanelGroup, PanelIndex)) THEN BEGIN
        HtmlBigText.ADDTEXT(StartElement);
        //BuildWorkflowActivitiesHtml();
        BuildGroupWorkflowsHtml();
        HtmlBigText.ADDTEXT(EndElement);
      END;

      IF (CheckPanelVisibility(Rec."Show Questionnaires", PanelGroup, PanelIndex)) THEN BEGIN
        HtmlBigText.ADDTEXT(StartElement);
        BuildQuestionnairesHtml();
        HtmlBigText.ADDTEXT(EndElement);
      END;

      IF (CheckPanelVisibility(Rec."Show Checklists", PanelGroup, PanelIndex)) THEN BEGIN
        HtmlBigText.ADDTEXT(StartElement);
        BuildChecklistsHtml();
        HtmlBigText.ADDTEXT(EndElement);
      END;

      //DOC NA2016.14 >>
      IF (CheckPanelVisibility(Rec."Show Enhanced Views", PanelGroup, PanelIndex)) THEN BEGIN
        HtmlBigText.ADDTEXT(StartElement);
        BuildEnhancedViews();
        HtmlBigText.ADDTEXT(EndElement);
      END;
      //DOC NA2016.14 <<

      HtmlBigText.ADDTEXT('</div></div></div>');
    END;

    LOCAL PROCEDURE BuildMenuHtml@1000000002();
    VAR
      GroupWorkflow@9062230 : Record 9062265;
      WorkflowActivityLine@9062229 : Record 9062266;
      Tag@9062231 : Record 9062492;
      ChecklistHeader@1000000000 : Record 9062434;
      EnhViews@1000000001 : Record 9062804;
      NoOfTags@9062233 : Integer;
      NoOfSelectedTags@9062234 : Integer;
      TagInfo@9062232 : Text;
      eTitle@1000000002 : TextConst 'ENU=Enhanced Information;ENG=Enhanced Information';
      eOpenDetailsPage@1000000003 : TextConst 'ENU=Open Details Page;ENG=Open Details Page';
      eSettings@1000000004 : TextConst 'ENU=Settings;ENG=Settings';
      eAttachments@1000000005 : TextConst 'ENU=Attachments;ENG=Attachments';
      eEnhancedFields@1000000006 : TextConst 'ENU=Enhanced Fields;ENG=Enhanced Fields';
      eChecklistTemplates@1000000007 : TextConst 'ENU=Checklist Templates;ENG=Checklist Templates';
      eChecklists@1000000008 : TextConst 'ENU=Checklists;ENG=Checklists';
      eQuestionnaireTemplates@1000000009 : TextConst 'ENU=Questionnaire Templates;ENG=Questionnaire Templates';
      eQuestionnaires@1000000010 : TextConst 'ENU=Questionnaires;ENG=Questionnaires';
      eStartWorkflow@1000000011 : TextConst 'ENU=Start Workflow;ENG=Start Workflow';
      eRelatedWorkflows@1000000012 : TextConst 'ENU=Related Workflows;ENG=Related Workflows';
      eTags@1000000013 : TextConst 'ENU=Tags;ENG=Tags';
      eAskNora@1000000014 : TextConst 'ENU=Ask nOra;ENG=Ask nOra';
      eEnhancedViews@1000000015 : TextConst 'ENU=Enhanced Views;ENG=Enhanced Views';
    BEGIN
      OpenPanel(mainPageIcon, eTitle, '');
      BuildMenuItemHtml('mif-enlarge2', '', '', eOpenDetailsPage, 'menu', 'zoom', ActivePanel);
      BuildMenuItemHtml(settingsIcon, '', '', eSettings, 'menu', 'setup', ActivePanel);
      OpenPanelContent();

      HtmlBigText.ADDTEXT('<ul class="v-menu ' + ThemeName + '" style="width:100%; max-width: 100%; margin: 0; ">');

      IF ("Show Attachments") THEN BEGIN
        CALCFIELDS(Attachments);
        BuildMenuItemHtml(attachmentPageIcon, eAttachments, FORMAT(Attachments, 0, 9), '', 'menu', 'show', 'attachments');
      END;

      IF ("Show Enhanced Fields") THEN BEGIN
        CALCFIELDS("Enhanced Fields");
        BuildMenuItemHtml(enhFieldPageIcon, eEnhancedFields, FORMAT("Enhanced Fields", 0, 9), '', 'menu', 'show', 'enhancedFields');
      END;

      IF ("Show Checklist Templates") THEN BEGIN
        CALCFIELDS("Checklist Templates");
        BuildMenuItemHtml(checklistTemplatePageIcon, eChecklistTemplates, FORMAT("Checklist Templates", 0, 9), '', 'menu', 'show', 'checklistTemplates');
      END;

      IF ("Show Checklists") THEN BEGIN
        FilterChecklist(ChecklistHeader);
        BuildMenuItemHtml(checklistPageIcon, eChecklists, FORMAT(ChecklistHeader.COUNT, 0, 9), '', 'menu', 'show', 'checklists');
      END;

      IF ("Show Questionnaire Templates") THEN BEGIN
        CALCFIELDS("Questionnaire Templates");
        BuildMenuItemHtml(questTemplatePageIcon, eQuestionnaireTemplates, FORMAT("Questionnaire Templates", 0, 9), '', 'menu', 'show', 'questTemplates');
      END;

      IF ("Show Questionnaires") THEN BEGIN
        CALCFIELDS(Questionnaires);
        BuildMenuItemHtml(questPageIcon, eQuestionnaires, FORMAT(Questionnaires, 0, 9), '', 'menu', 'show', 'questionnaires');
      END;

      IF ("Show Workflows") THEN BEGIN
        //DOC NA2016.10 PC >>>
        //CALCFIELDS(Workflows);
        //BuildMenuItemHtml(workflowPageIcon, 'Workflows', FORMAT(Workflows, 0, 9), '', 'menu', 'show', 'workflows');
        BuildMenuItemHtml(workflowPageIcon, eStartWorkflow, FORMAT(CountWorkflows, 0, 9), '', 'menu', 'show', 'workflows');
        //DOC NA2016.10 PC <<<
      END;

      IF ("Show Group Workflows") THEN BEGIN

        //!!! TO-DO !!!
        //FilterWorkflowActivity(WorkflowActivityLine);
        //BuildMenuItemHtml(workflowActivityPageIcon, 'Workflow Activities', FORMAT(WorkflowActivityLine.COUNT, 0, 9), '', 'menu', 'show', 'workflowActivities');

        FilterGroupWorkflow(GroupWorkflow);
        BuildMenuItemHtml(groupWorkflowPageIcon, eRelatedWorkflows, FORMAT(GroupWorkflow.COUNT, 0, 9), '', 'menu', 'show', 'groupWorkflows');

      END;

      IF ("Show Tags") THEN BEGIN
        FilterTags(Tag);
        NoOfTags := Tag.COUNT;
        Tag.SETRANGE(Tagged, TRUE);
        NoOfSelectedTags := Tag.COUNT;
        TagInfo := STRSUBSTNO(txtTagInfo, NoOfTags, NoOfSelectedTags);
        BuildMenuItemHtml(tagsPageIcon, eTags, TagInfo, '', 'menu', 'show', 'tags');
      END;

      IF ("Show Ask nOra") THEN BEGIN
        BuildMenuItemHtml(askNoraPageIcon, eAskNora, '', '', 'menu', 'show', 'askNora');
      END;

      IF ("Show Enhanced Views") THEN BEGIN
        FilterEnhViews(EnhViews);
        BuildMenuItemHtml(enhViewsPageIcon, eEnhancedViews, FORMAT(EnhViews.COUNT, 0, 9), '', 'menu', 'show', 'enhancedViews');
      END;

      HtmlBigText.ADDTEXT('</ul></div></div>');
    END;

    LOCAL PROCEDURE BuildAttachmentsHtml@1000000004();
    VAR
      FileAttachment@1000000000 : Record 9062272;
      FileAttachment_Icon@1000000001 : Text;
      TNPToolkit@1000000002 : Codeunit 9062230;
      eAttachments@1000000003 : TextConst 'ENU=Attachments;ENG=Attachments';
      eOpenFileAttachmentsList@1000000004 : TextConst 'ENU=Open File Attachments List;ENG=Open File Attachments List';
      eUploadFile@1000000005 : TextConst 'ENU=Upload File;ENG=Upload File';
      eGetExcel@1000000006 : TextConst 'ENU=Get Excel;ENG=Get Excel';
      eGetWord@1000000007 : TextConst 'ENU=Get Word;ENG=Get Word';
      eGetEMail@1000000008 : TextConst 'ENU=Get E-Mail;ENG=Get E-Mail';
    BEGIN
      OpenPanel(attachmentPageIcon, eAttachments, 'home');
      BuildMenuItemHtml('mif-table', '', '', eOpenFileAttachmentsList, 'attachment', 'list', '');
      //BuildMenuItemHtml('mif-folder-open', '', '', 'Open', 'attachment', 'show', '');
      BuildMenuItemHtml('mif-upload', '', '', eUploadFile, 'attachment', 'upload', '');
      IF (TNPToolkit.ClientSideDotNetAvailable()) THEN BEGIN
        BuildMenuItemHtml('mif-file-excel', '', '', eGetExcel, 'attachment', 'getExcel', '');
        BuildMenuItemHtml('mif-file-word', '', '', eGetWord, 'attachment', 'getWord', '');
        BuildMenuItemHtml('mif-mail', '', '', eGetEMail, 'attachment', 'getOutlook', '');
      END;

      //BuildMenuItemGroupHeaderHtml('mif-apps');

      //BuildMenuItemHtml('mif-download', '', '', 'Download (Save As)', 'attachment', 'download', '');
      //BuildMenuItemSeparatorHtml();
      //BuildMenuItemHtml('mif-file-word', '', '', 'Get Word', 'attachment', 'getWord', '');
      //BuildMenuItemSeparatorHtml();
      //BuildMenuItemHtml('mif-file-excel', '', '', 'Import From Current Excel', 'attachment', 'importCurrentExcel', '');
      //BuildMenuItemHtml('mif-file-excel', '', '', 'Import From Excel File', 'attachment', 'importExcel', '');
      //BuildMenuItemSeparatorHtml();
      //BuildMenuItemHtml('mif-cross', '', '', 'Delete', 'attachment', 'delete', '');

      //BuildMenuItemGroupFooterHtml();

      OpenPanelContent();
      HtmlBigText.ADDTEXT('<ul class="v-menu  ' + ThemeName + '" style="width:100%; max-width: 100%; margin: 0; ">');

      FilterFileAttachment(FileAttachment);
      IF (FileAttachment.FINDSET()) THEN BEGIN
        REPEAT
          CASE (LOWERCASE(FileAttachment.Extension)) OF
            'pdf': FileAttachment_Icon := 'mif-file-pdf';
            'doc', 'docx', 'docm': FileAttachment_Icon := 'mif-file-word';
            'xls', 'xlsx', 'xlsm': FileAttachment_Icon := 'mif-file-excel';
            'ppt', 'pptx': FileAttachment_Icon := 'mif-file-powerpoint';
            'jpg', 'jpeg', 'tiff', 'gif', 'png', 'bmp': FileAttachment_Icon := 'mif-file-image';
            'rar', '7z': FileAttachment_Icon := 'mif-file-archive';
            'wav', 'mp3', 'wma': FileAttachment_Icon := 'mif-file-audio';
            'mpeg', 'mov', 'avi', 'mp4', 'mkv': FileAttachment_Icon := 'mif-file-movie';
            'c', 'cs', 'vb', 'js': FileAttachment_Icon := 'mif-file-code';
            'txt': FileAttachment_Icon := 'mif-file-text';
            'zip': FileAttachment_Icon := 'mif-file-zip';
            ELSE
              FileAttachment_Icon := 'mif-file-binary';
          END;

          BuildMenuItemHtml(FileAttachment_Icon, FileAttachment.Description, '', '', 'attachment', 'show', FileAttachment."No.");

        UNTIL (FileAttachment.NEXT() = 0);
      END;

      HtmlBigText.ADDTEXT('</ul>');

      ClosePanel();
    END;

    LOCAL PROCEDURE BuildEnhancedFieldsHtml@1000000005();
    VAR
      Fld@1000000001 : Record 9062327;
      EnhancedFieldValue@1000000000 : Record 9062328;
      EnhancedFieldMgt@1000000002 : Codeunit 9062298;
      FieldValue@1000000003 : Text;
      OnClick@1000000004 : Text;
      eTitle@1000000005 : TextConst 'ENU=Enhanced Fields;ENG=Enhanced Fields';
      eOpenEnhancedFieldsDefinitons@1000000006 : TextConst 'ENU=Open Enhanced Fields Definitons;ENG=Open Enhanced Fields Definitons';
    BEGIN
      OpenPanel(enhFieldPageIcon, eTitle, 'home');
      BuildMenuItemHtml('mif-table', '', '', eOpenEnhancedFieldsDefinitons, 'enhancedField', 'list', '');
      //!!! TO-DO !!!
      //Enable line below to display enhanced fields values editor page
      //BuildMenuItemHtml('mif-table', '', '', 'Open Enhanced Fields', 'enhancedField', 'vallist', '');

      OpenPanelContent();

      HtmlBigText.ADDTEXT('<table class="table striped hovered" style="margin: 0;padding: 0;">');

      Fld.RESET();
      Fld.SETRANGE("Table No.", "Table No.");
      Fld.SETRANGE("Show On Factbox", TRUE);
      IF (Fld.FINDSET()) THEN BEGIN
        REPEAT
          OnClick := BuildInvokeEvent('enhancedField', 'show', FORMAT(Fld."Enhanced Field No.", 0, 9));
          FieldValue := EnhancedFieldMgt.CalculateFieldValue(Fld."Table No.", Fld."Enhanced Field No.",
            EnhancedFieldMgt.GetFieldForRecord_FromPrimKeys("Table No.", Fld."Enhanced Field No.",
              PKFilter[1], PKFilter[2], PKFilter[3], PKFilter[4], PKFilter[5],
              EnhancedFieldValue, FALSE));

        HtmlBigText.ADDTEXT(STRSUBSTNO('<tr><td style="text-align: left" onclick="%3">%1</td><td style="text-align: right" onclick="%3">%2</td></tr>',
          EncodeHtmlText(Fld.Name), EncodeHtmlText(FieldValue), OnClick));

        UNTIL (Fld.NEXT() = 0);
      END;

      HtmlBigText.ADDTEXT('</table>');

      ClosePanel();
    END;

    LOCAL PROCEDURE BuildChecklistsHtml@1000000000();
    VAR
      Checklist@1000000000 : Record 9062434;
      ChecklistLine@9062229 : Record 9062435;
      OnClick@1000000001 : Text;
      controlName@9062230 : Text;
      checkedText@9062231 : Text;
      eTitle@1000000002 : TextConst 'ENU=Checklists;ENG=Checklists';
    BEGIN
      OpenPanel(checklistPageIcon, eTitle, 'home');
      BuildMenuItemHtml('mif-table', '', '', 'Open Checklists List', 'checklist', 'list', '');
      IF (PageMode <> "View Mode"::"Multiple Panels") THEN
        BuildMenuItemHtml(newDocumentIcon, '', '', 'New Checklist', 'checklist', 'new', '');
      OpenPanelContent();

      //!!!HtmlBigText.ADDTEXT('<table class="table striped hovered" style="font-size: 90%;margin:0;padding:0;">');
      //!!!HtmlBigText.ADDTEXT('<tr><th>Created</th><th>Description</th><th>Assigned to Contact No.</th><th>Status</th></tr>');

      HtmlBigText.ADDTEXT('<ul class="v-menu  ' + ThemeName + '" style="width:100%; max-width: 100%; margin: 0; display: block">');

      FilterChecklist(Checklist);
      IF (Checklist.FINDSET()) THEN BEGIN
        REPEAT

          //!!!HtmlBigText.ADDTEXT(STRSUBSTNO('<tr><td onclick="%5">%1</td><td onclick="%5">%2</td><td onclick="%5">%3</td><td onclick="%5">%4</td></tr>',
          //!!!  EncodeHtmlText(FORMAT(Checklist."Created DateTime")),
          //!!!  EncodeHtmlText(Checklist.Description),
          //!!!  EncodeHtmlText(Checklist."Assigned to Contact No"),
          //!!!  EncodeHtmlText(FORMAT(Checklist.Status)),
          //!!!  OnClick));

          //HtmlBigText.ADDTEXT('<li ><a href="#">' + Checklist.Description +  '</a></li>');

          BuildMenuItemHtml(checklistPageIcon, Checklist.Description, '', '', 'checklist', 'show', Checklist.GETPOSITION());

          ChecklistLine.RESET();
          ChecklistLine.SETRANGE("Checklist Type", Checklist."Checklist Type");
          ChecklistLine.SETRANGE("Checklist Code", Checklist.Code);
          IF (ChecklistLine.FINDSET()) THEN BEGIN
            REPEAT
              controlName := ChecklistLine.GETPOSITION(FALSE);
              checkedText := '';
              IF (ChecklistLine.Completed) THEN
                checkedText := 'checked';
              OnClick := STRSUBSTNO('javascript:if (this.checked) InvokeEvent(''checklist'', ''checked'', ''%1''); else InvokeEvent(''checklist'', ''unchecked'', ''%1'');', controlName);

              HtmlBigText.ADDTEXT('<li><a href="#">');
              HtmlBigText.ADDTEXT(
                STRSUBSTNO(
                  '<span style="margin: 0px 6px;"><input type="checkbox" %2 id="%1" name="%1" onchange="%3"></span>',
                  controlName, checkedText, OnClick));
              HtmlBigText.ADDTEXT('<span class="title" style="white-space: nowrap;"><label class="title" for="' + controlName + '">' + EncodeHtmlText(ChecklistLine.Description) + '</label></span>');
              HtmlBigText.ADDTEXT('</a></li>');

            UNTIL (ChecklistLine.NEXT() = 0);
          END;

        UNTIL (Checklist.NEXT() = 0);
      END;

      HtmlBigText.ADDTEXT('</ul>');

      ClosePanel();
    END;

    LOCAL PROCEDURE BuildChecklistTemplatesHtml@1000000022();
    VAR
      ChecklistTemplate@1000000000 : Record 9062436;
      eTitle@1000000001 : TextConst 'ENU=Checklist Templates;ENG=Checklist Templates';
      eOpenChecklistTemplatesList@1000000002 : TextConst 'ENU=Open Checklist Templates List;ENG=Open Checklist Templates List';
    BEGIN
      OpenPanel(checklistTemplatePageIcon, eTitle, 'home');
      BuildMenuItemHtml('mif-table', '', '', eOpenChecklistTemplatesList, 'checklistTemplate', 'list', '');
      OpenPanelContent();

      HtmlBigText.ADDTEXT('<ul class="v-menu  ' + ThemeName + '" style="width:100%; max-width: 100%; margin: 0; display: block">');

      BuildChecklistTemplItemsHtml(FALSE);
      HtmlBigText.ADDTEXT('</ul>');

      ClosePanel();
    END;

    LOCAL PROCEDURE BuildChecklistTemplItemsHtml@1000000045(AddMenuItemHeader@1000000001 : Boolean);
    VAR
      ChecklistTemplate@1000000000 : Record 9062436;
    BEGIN
      FilterChecklistTemplate(ChecklistTemplate);
      IF (ChecklistTemplate.FINDSET()) THEN BEGIN
        IF (AddMenuItemHeader) THEN
          HtmlBigText.ADDTEXT('<li class="menu-title">Checklist Templates</li>');
        REPEAT
          BuildMenuItemHtml(checklistTemplateIcon, ChecklistTemplate.Description, '', '', 'checklistTemplate', 'create', ChecklistTemplate."Checklist Type");
        UNTIL (ChecklistTemplate.NEXT() = 0);
      END;
    END;

    LOCAL PROCEDURE BuildQuestionnairesHtml@1000000003();
    VAR
      Quest@1000000000 : Record 9062704;
      QuestName@1000000001 : Text;
      OnClick@1000000002 : Text;
      eTitle@1000000003 : TextConst 'ENU=Questionnaires;ENG=Questionnaires';
      eOpenQuestionnaireList@1000000004 : TextConst 'ENU=Open Questionnaire List;ENG=Open Questionnaire List';
      eNewQuestionnaire@1000000005 : TextConst 'ENU=New Questionnaire;ENG=New Questionnaire';
    BEGIN
      OpenPanel(questPageIcon, eTitle, 'home');
      BuildMenuItemHtml('mif-table', '', '', eOpenQuestionnaireList, 'quest', 'list', '');
      IF (PageMode <> "View Mode"::"Multiple Panels") THEN
        BuildMenuItemHtml(newDocumentIcon, '', '', eNewQuestionnaire, 'menu', 'show', 'questTemplates');
      OpenPanelContent();

      HtmlBigText.ADDTEXT('<table class="table striped hovered bordered" style="font-size: 90%;margin:0;padding:0;">');
      HtmlBigText.ADDTEXT('<tr><th>Created</th><th>Name</th><th>Status</th></tr>');

      FilterQuestionnaire(Quest);
      IF (Quest.FINDSET()) THEN BEGIN
        REPEAT
          IF (Quest.Name <> '') THEN
            QuestName := Quest.Name
          ELSE IF (Quest.Description <> '') THEN
            QuestName := Quest.Description
          ELSE
            QuestName := Quest."Questionnaire Template Code";
          OnClick := BuildInvokeEvent('quest', 'show', FORMAT(Quest."Questionnaire No.", 0, 9));
          HtmlBigText.ADDTEXT(STRSUBSTNO('<tr><td onclick="%4">%1</td><td onclick="%4">%2</td><td onclick="%4">%3</td></tr>',
            EncodeHtmlText(FORMAT(Quest."Created Date Time")),
            EncodeHtmlText(QuestName),
            EncodeHtmlText(FORMAT(Quest.Status)),
            OnClick));
        UNTIL (Quest.NEXT() = 0);
      END;
      HtmlBigText.ADDTEXT('</table>');

      ClosePanel();
    END;

    LOCAL PROCEDURE BuildQuestTemplatesHtml@1000000009();
    VAR
      QuestTemplate@1000000000 : Record 9062702;
      eTitle@1000000001 : TextConst 'ENU=Questionnaire Templates;ENG=Questionnaire Templates';
      eOpenQuestionnaireTemplateList@1000000002 : TextConst 'ENU=Open Questionnaire Template List;ENG=Open Questionnaire Template List';
    BEGIN
      OpenPanel(questTemplatePageIcon, eTitle, 'home');
      BuildMenuItemHtml('mif-table', '', '', eOpenQuestionnaireTemplateList, 'questTemplate', 'list', '');
      OpenPanelContent();

      HtmlBigText.ADDTEXT('<ul class="v-menu  ' + ThemeName + '" style="width:100%; max-width: 100%; margin: 0; display: block">');
      BuildQuestTemplItemsHtml(FALSE);
      HtmlBigText.ADDTEXT('</ul>');

      ClosePanel();
    END;

    LOCAL PROCEDURE BuildQuestTemplItemsHtml@1000000046(AddMenuItemHeader@1000000001 : Boolean);
    VAR
      QuestTemplate@1000000000 : Record 9062702;
    BEGIN
      FilterQuestTemplate(QuestTemplate);
      IF (QuestTemplate.FINDSET()) THEN BEGIN
        IF (AddMenuItemHeader) THEN
          HtmlBigText.ADDTEXT('<li class="menu-title">Questionnaire Templates</li>');
        REPEAT
          BuildMenuItemHtml(questTemplateIcon, QuestTemplate.Name, '', '', 'questTemplate', 'create', QuestTemplate.Code);
        UNTIL (QuestTemplate.NEXT() = 0);
      END;
    END;

    LOCAL PROCEDURE BuildWorkflowsHtml@1000000011();
    VAR
      Workflow@1000000000 : Record 9062258;
      eTitle@1000000001 : TextConst 'ENU=Start Workflow;ENG=Start Workflow';
      eOpenWorkflowList@1000000002 : TextConst 'ENU=Open Workflow List;ENG=Open Workflow List';
    BEGIN
      OpenPanel(workflowPageIcon, eTitle, 'home');
      BuildMenuItemHtml('mif-table', '', '', eOpenWorkflowList, 'workflow', 'list', '');
      OpenPanelContent();

      HtmlBigText.ADDTEXT('<ul class="v-menu  ' + ThemeName + '" style="width:100%; max-width: 100%; margin: 0; display: block">');
      BuildWorkflowItemsHtml(FALSE);
      HtmlBigText.ADDTEXT('</ul>');

      ClosePanel();
    END;

    LOCAL PROCEDURE BuildWorkflowItemsHtml@1000000047(AddMenuItemHeader@1000000001 : Boolean);
    VAR
      Workflow@1000000000 : Record 9062258;
    BEGIN
      FilterWorkflow(Workflow);
      IF (Workflow.FINDSET()) THEN BEGIN
        IF (AddMenuItemHeader) THEN
          HtmlBigText.ADDTEXT('<li class="menu-title">Workflows</li>');
        REPEAT
          BuildMenuItemHtml(workflowIcon, Workflow.Description, '', '', 'workflow', 'create', Workflow."No.");
        UNTIL (Workflow.NEXT() = 0);
      END;
    END;

    LOCAL PROCEDURE BuildGroupWorkflowsHtml@9062234();
    VAR
      UserSetup@9062231 : Record 9062729;
      GroupWorkflow@9062229 : Record 9062265;
      WorkflowActivity@9062230 : Record 9062266;
      IconName@9062233 : Text;
      NoOfActivitiesText@9062234 : Text;
      NoOfActivities@9062232 : Integer;
      eTitle@1000000000 : TextConst 'ENU=Related Workflows;ENG=Related Workflows';
      eOpenRelatedWorkflowList@1000000001 : TextConst 'ENU=Open Related Workflow List;ENG=Open Related Workflow List';
    BEGIN
      OpenPanel(groupWorkflowPageIcon, eTitle, 'home');
      BuildMenuItemHtml('mif-table', '', '', eOpenRelatedWorkflowList, 'groupWorkflow', 'list', '');
      OpenPanelContent();

      HtmlBigText.ADDTEXT('<ul class="v-menu  ' + ThemeName + '" style="width:100%; max-width: 100%; margin: 0; display: block">');

      UserSetup.INIT();
      IF (UserSetup.GET(USERID)) THEN;

      FilterGroupWorkflow(GroupWorkflow);
      IF (GroupWorkflow.FINDSET()) THEN BEGIN
        REPEAT
          IF (UserSetup."Contact No." <> '') THEN BEGIN
            WorkflowActivity.RESET();
            WorkflowActivity.SETRANGE("Group Workflow No.", GroupWorkflow."No.");
            WorkflowActivity.SETRANGE("Contact No.", UserSetup."Contact No.");
            WorkflowActivity.SETRANGE(Status, WorkflowActivity.Status::Open);
            NoOfActivities := WorkflowActivity.COUNT;
          END ELSE
            NoOfActivities := 0;

          IF (NoOfActivities > 0) THEN BEGIN
            IconName := myGroupWorkflowIcon;
            NoOfActivitiesText := FORMAT(NoOfActivities, 0, 9);
          END ELSE BEGIN
            IconName := groupWorkflowIcon;
            NoOfActivitiesText := '';
          END;

          BuildMenuItemHtml(IconName,
            STRSUBSTNO('%1 %2', GroupWorkflow."Raised DateTime", GroupWorkflow."Workflow Description"),
            NoOfActivitiesText, '', 'groupWorkflow', 'show', GroupWorkflow."No.");
        UNTIL (GroupWorkflow.NEXT() = 0);
      END;

      HtmlBigText.ADDTEXT('</ul>');

      ClosePanel();
    END;

    LOCAL PROCEDURE BuildWorkflowActivitiesHtml@1000000029();
    VAR
      WorkflowActivity@1000000000 : Record 9062266;
      OnClick@1000000001 : Text;
      eTitle@1000000002 : TextConst 'ENU=Workflow Activities;ENG=Workflow Activities';
      eOpenWorkflowActivityList@1000000003 : TextConst 'ENU=Open Workflow Activity List;ENG=Open Workflow Activity List';
      eNewWorkflowActivity@1000000004 : TextConst 'ENU=New Workflow Activity;ENG=New Workflow Activity';
    BEGIN
      OpenPanel(workflowActivityPageIcon, eTitle, 'home');
      BuildMenuItemHtml('mif-table', '', '', eOpenWorkflowActivityList, 'workflowActivity', 'list', '');
      IF (PageMode <> "View Mode"::"Multiple Panels") THEN
        BuildMenuItemHtml(newDocumentIcon, '', '', eNewWorkflowActivity, 'menu', 'show', 'workflows');
      OpenPanelContent();

      HtmlBigText.ADDTEXT('<table class="table striped hovered bordered" style="font-size: 90%;margin:0;padding:0;">');
      HtmlBigText.ADDTEXT('<tr><th>Description</th><th>Information</th><th>Complete By Date</th></tr>');

      FilterWorkflowActivity(WorkflowActivity);
      IF (WorkflowActivity.FINDSET()) THEN BEGIN
        REPEAT
          OnClick :=  BuildInvokeEvent('workflowActivity', 'show', WorkflowActivity."GUID No.");
          HtmlBigText.ADDTEXT(STRSUBSTNO('<tr><td onclick="%4">%1</td><td onclick="%4">%2</td><td onclick="%4">%3</td></tr>',
            WorkflowActivity."Workflow Description",
            WorkflowActivity."Information Text",
            WorkflowActivity."Complete By DateTime",
            OnClick));
        UNTIL (WorkflowActivity.NEXT() = 0);
      END;
      HtmlBigText.ADDTEXT('</table>');

      ClosePanel();
    END;

    LOCAL PROCEDURE BuildTemplatesHtml@1000000037();
    VAR
      eTitle@1000000000 : TextConst 'ENU=Templates;ENG=Templates';
    BEGIN
      OpenPanel(templatesPageIcon, eTitle, 'home');
      //BuildMenuItemHtml('mif-table', '', '', 'Open Workflow List', 'workflow', 'list', '');
      OpenPanelContent();

      HtmlBigText.ADDTEXT('<ul class="v-menu  ' + ThemeName + '" style="width:100%; max-width: 100%; margin: 0; display: block">');
      BuildChecklistTemplItemsHtml(TRUE);
      BuildQuestTemplItemsHtml(TRUE);
      BuildWorkflowItemsHtml(TRUE);

      HtmlBigText.ADDTEXT('</ul>');

      ClosePanel();
    END;

    LOCAL PROCEDURE BuildAskNoraHtml@1000000058();
    VAR
      eTitle@1000000000 : TextConst 'ENU=Ask nOra;ENG=Ask nOra';
    BEGIN
      OpenPanel(askNoraPageIcon, eTitle, 'home');
      OpenPanelContent();

      //HtmlBigText.ADDTEXT('<div class="chat" id="chatArea" style="top:30px;">');
      //HtmlBigText.ADDTEXT( '<div class="msglist" id="msgList">');

      HtmlBigText.ADDTEXT('<div id="chatArea" style="padding:0;margin:0;width:100%;height:242px;">');
      HtmlBigText.ADDTEXT( '<div id="msgList" style="height:252px;overflow:auto;padding:0;margin:0;border: 1px solid #d0d0d0;">');
      HtmlBigText.ADDTEXT( '</div>');
      HtmlBigText.ADDTEXT('</div>');


      HtmlBigText.ADDTEXT('<div class="msginput" style="height:100px;min-height:100px;max-height:100px;">');
      HtmlBigText.ADDTEXT( '<div class="inpcontent">');
      HtmlBigText.ADDTEXT(  '<div class="msginputrow">');
      HtmlBigText.ADDTEXT(   '<div class="text">');
      HtmlBigText.ADDTEXT(    '<div style="height:1px;">&nbsp;</div>');
      //HtmlBigText.ADDTEXT(     '<input type="text" id="inputMsg" name="inputMsg" />');
      HtmlBigText.ADDTEXT(    '<textarea id="inputMsg" name="inputMsg" rows="1"></textarea>');
      HtmlBigText.ADDTEXT(   '</div>');
      //HtmlBigText.ADDTEXT(   '<div class="send">');
      HtmlBigText.ADDTEXT(   '<div style="padding:5px;margin:0;text-align:center;display:table-cell;width:80px;min-width:80px;max-width:80px;">');
      HtmlBigText.ADDTEXT(    '<div style="height:1px;">&nbsp;</div>');
      HtmlBigText.ADDTEXT(    '<button id="btnSend" name="btnSend" class="btn btn-send">Send</button>');
      HtmlBigText.ADDTEXT(   '</div>');
      HtmlBigText.ADDTEXT(  '</div>');
      HtmlBigText.ADDTEXT( '</div>');
      HtmlBigText.ADDTEXT('</div>');

      HtmlBigText.ADDTEXT('<div id="msgwait" class="noraworks"></div>');

      ClosePanel();

      //Build scripts
      HtmlBigText.ADDTEXT('<script>');

      HtmlBigText.ADDTEXT(' Nora_Initialize();');


      HtmlBigText.ADDTEXT('</script>');
    END;

    LOCAL PROCEDURE BuildTagsHtml@9062239();
    VAR
      Tag@9062232 : Record 9062492;
      TagIconClick@9062235 : Text;
      TagNameClick@9062236 : Text;
      TagInfoClick@9062231 : Text;
      controlName@9062230 : Text;
      checkedText@9062229 : Text;
      TagIcon@9062233 : Text;
      TagInfo@9062234 : Text;
      TagColor@9062238 : Text;
      FirstTag@9062239 : Boolean;
      PrevState@9062240 : Integer;
      eTitle@1000000000 : TextConst 'ENU=Tags;ENG=Tags';
      eOpenTagsList@1000000001 : TextConst 'ENU=Open Tags List;ENG=Open Tags List';
      eNewTag@1000000002 : TextConst 'ENU=New Tag;ENG=New Tag';
      eTagRecords@1000000003 : TextConst 'ENU=Tag Records;ENG=Tag Records';
    BEGIN
      OpenPanel(tagsPageIcon, eTitle, 'home');
      BuildMenuItemHtml('mif-table', '', '', eOpenTagsList, 'tags', 'list', '');
      BuildMenuItemHtml(newTagIcon, '', '', eNewTag, 'tags', 'new', '');
      IF ("Table No." IN [DATABASE::Customer, DATABASE::Vendor, DATABASE::Item, DATABASE::Contact]) THEN
        BuildMenuItemHtml(tagRecordsIcon, '', '', eTagRecords, 'tags', 'tag', '');
      OpenPanelContent();

      FilterTags(Tag);
      IF (Tag.FINDSET()) THEN BEGIN
        FirstTag := TRUE;
        PrevState := Tag.Visibility;
        REPEAT
          IF ((Tag.Visibility <> PrevState) OR (FirstTag)) THEN BEGIN
            IF (NOT(FirstTag)) THEN
              HtmlBigText.ADDTEXT('</ul>');
            //IF (Tag.Visibility = Tag.Visibility::Public) THEN
            //  TagColor := 'navy'
            //ELSE
            //  TagColor := 'red';
            //TagColor := 'orange';
            TagColor := ThemeName;

            HtmlBigText.ADDTEXT(
              '<ul class="v-menu ' + TagColor + '" style="width:100%; max-width: 100%; margin: 0; display: block">');
          END;

          Tag.CALCFIELDS(Tagged, "No. Entries");
          controlName := EncodeJSText(Tag.GETPOSITION(FALSE));
          checkedText := '';
          IF (Tag.Tagged) THEN
            checkedText := 'checked';

          //IconChangeCode := 'if (this.className == ''mif-star-full icon'') this.className = ''mif-star-empty icon''; else this.className = ''mif-star-full icon'';';

          TagIconClick := STRSUBSTNO('InvokeEvent(''tags'', ''checked'', ''%1'');', controlName);
          TagNameClick := STRSUBSTNO('InvokeEvent(''tags'', ''drilldown'', ''%1'');', controlName);
          TagInfoClick := TagNameClick;

          //checkmark
          IF (Tag.Tagged) THEN
            TagIcon := 'mif-star-full'
          ELSE
            TagIcon := 'mif-star-empty';
          TagInfo := FORMAT(Tag."No. Entries", 0, 9);

          HtmlBigText.ADDTEXT('<li><a href="#">');
          HtmlBigText.ADDTEXT(STRSUBSTNO(
            '<span class="%1 icon" onclick="%2"></span>',
            TagIcon,
            TagIconClick));

          IF (Tag.Visibility = Tag.Visibility::Public) THEN
            HtmlBigText.ADDTEXT(STRSUBSTNO(
              '<span class="title" style="white-space: nowrap;" onclick="%2"><strong>%1</strong></span>',
              EncodeHtmlText(Tag.Name),
              TagNameClick))
          ELSE
            HtmlBigText.ADDTEXT(STRSUBSTNO(
              '<span class="title" style="white-space: nowrap;" onclick="%2">%1</span>',
              EncodeHtmlText(Tag.Name),
              TagNameClick));

          HtmlBigText.ADDTEXT(STRSUBSTNO(
            '<span class="tag" style="margin-left: 10px" onclick="%2">%1</span>',
            EncodeHtmlText(TagInfo),
            TagInfoClick));
          HtmlBigText.ADDTEXT('</a>');
          HtmlBigText.ADDTEXT('</li>');

          FirstTag := FALSE;
        UNTIL (Tag.NEXT() = 0);
        HtmlBigText.ADDTEXT('</ul>');
      END;

      ClosePanel();
    END;

    LOCAL PROCEDURE BuildEnhancedViews@1000000074();
    VAR
      Workflow@1000000000 : Record 9062258;
      eTitle@1000000001 : TextConst 'ENU=Enhanced Views;ENG=Enhanced Views';
      eCreateNewView@1000000002 : TextConst 'ENU=Create New View;ENG=Create New View';
      eOpenEnhancedViewsList@1000000003 : TextConst 'ENU=Open Enhanced Views List;ENG=Open Enhanced Views List';
    BEGIN
      OpenPanel(enhViewsPageIcon, eTitle, 'home');
      BuildMenuItemHtml(newDocumentIcon, '', '', eCreateNewView, 'enhancedView', 'new', '');
      BuildMenuItemHtml('mif-table', '', '', eOpenEnhancedViewsList, 'enhancedView', 'list', '');
      OpenPanelContent();

      HtmlBigText.ADDTEXT('<ul class="v-menu  ' + ThemeName + '" style="width:100%; max-width: 100%; margin: 0; display: block">');
      BuildEnhancedViewItemsHtml(FALSE);
      HtmlBigText.ADDTEXT('</ul>');

      ClosePanel();
    END;

    LOCAL PROCEDURE BuildEnhancedViewItemsHtml@1000000075(AddMenuItemHeader@1000000001 : Boolean);
    VAR
      EnhView@1000000000 : Record 9062804;
    BEGIN
      FilterEnhViews(EnhView);

      IF (AddMenuItemHeader) THEN
        HtmlBigText.ADDTEXT('<li class="menu-title">Enhanced Views</li>');

      IF (EnhView.FINDSET()) THEN BEGIN
        REPEAT
          BuildMenuItemHtml(enhViewIcon, EnhView.Description, '', '', 'enhancedView', 'show', EnhView.Code);
        UNTIL (EnhView.NEXT() = 0);
      END ELSE BEGIN
        BuildMenuItemHtml(enhViewIcon, txtNewEnhView, '', '', 'enhancedView', 'new', '');
      END;
    END;

    LOCAL PROCEDURE OpenPanel@1000000012(Icon@1000000001 : Text;Title@1000000002 : Text;parentPanel@1000000000 : Text);
    VAR
      PanelStyle@1000000003 : Text;
    BEGIN
      //panel header

      IF (PageMode = "View Mode"::"Multiple Panels") THEN
        PanelStyle := 'display:block;width:350px;'
      ELSE
        PanelStyle := 'display:absolute;';

      //PanelStyle := PanelStyle + '-ms-transform: scale(0.8,0.8);-webkit-transform: scale(0.8,0.8);transform: scale(0.8,0.8)';
      HtmlBigText.ADDTEXT('<div class="panel" style="' + PanelStyle + '" ><div class="heading" style="font-size: 120%;white-space: nowrap;">');
      HtmlBigText.ADDTEXT('<span class="' + Icon + ' icon"></span>');
      HtmlBigText.ADDTEXT('<span class="title">' + EncodeHtmlText(Title) + '</span>');

      //panel content area
      HtmlBigText.ADDTEXT('</div><div class="content" style="padding:0;margin:0;overflow:hidden;">');

      //panel content toolbar
      HtmlBigText.ADDTEXT('<div>');
      HtmlBigText.ADDTEXT('<ul class="t-menu horizontal compact darcula" style="width:100%;">');

      IF (parentPanel = 'home') AND (PageMode <> "View Mode"::"Single Panel") THEN
        parentPanel := '';

      IF (parentPanel <> '') THEN
        BuildMenuItemHtml('mif-chevron-thin-left', '', '', 'Back', 'menu', 'show', parentPanel);

      //HtmlBigText.ADDTEXT('<li><a href="#"><span class="icon mif-arrow-left"></span></a></li>');
      //HtmlBigText.ADDTEXT('<li><a href="#"><span class="icon mif-file-empty"></span></a></li>');
      //HtmlBigText.ADDTEXT('<li><a href="#"><span class="icon mif-upload"></span></a></li>');
      //HtmlBigText.ADDTEXT('</ul>');
      //HtmlBigText.ADDTEXT('</div>');
    END;

    LOCAL PROCEDURE OpenPanelContent@1000000035();
    BEGIN
      //close panel content toolbar
      HtmlBigText.ADDTEXT('</ul>');
      HtmlBigText.ADDTEXT('</div>');
      //open panel content div
      HtmlBigText.ADDTEXT('<div style="width:100%;height:242px;overflow:auto;top:80px;bottom:0px;left:0px;right:0px;">');
    END;

    LOCAL PROCEDURE ClosePanel@1000000013();
    BEGIN
      HtmlBigText.ADDTEXT('</div></div></div>');
    END;

    LOCAL PROCEDURE OpenNavCall@1000000028(msgSource@1000000000 : Text;msgName@1000000001 : Text;msgParameters@1000000002 : Text);
    BEGIN
      HtmlBigText.ADDTEXT(STRSUBSTNO('<a href="javascript:InvokeEvent(''%1'', ''%2'', ''%3'');">', msgSource, msgName, msgParameters));
    END;

    LOCAL PROCEDURE CloseNavCall@1000000031();
    BEGIN
      HtmlBigText.ADDTEXT('</a>');
    END;

    LOCAL PROCEDURE BuildMenuItemHtml@1000000006(icon@1000000000 : Text;caption@1000000001 : Text;info@1000000002 : Text;hint@1000000006 : Text;msgSource@1000000003 : Text;msgName@1000000004 : Text;msgParameters@1000000005 : Text);
    BEGIN
      IF (hint <> '') THEN
        HtmlBigText.ADDTEXT(STRSUBSTNO('<li data-role="hint" data-hint="%1">', EncodeHtmlText(hint)))
      ELSE
        HtmlBigText.ADDTEXT('<li>');
      OpenNavCall(msgSource, msgName, msgParameters);
      HtmlBigText.ADDTEXT('<span class="' + icon + ' icon"></span>');
      IF (caption <> '') THEN
        HtmlBigText.ADDTEXT('<span class="title" style="white-space: nowrap;">' + EncodeHtmlText(caption) + '</span>');
      IF (info <> '') THEN
        HtmlBigText.ADDTEXT('<span class="tag" style="margin-left: 10px">' + EncodeHtmlText(info) + '</span>');
      CloseNavCall();
      HtmlBigText.ADDTEXT('</li>');
    END;

    LOCAL PROCEDURE BuildMenuItemSeparatorHtml@9062235();
    BEGIN
      HtmlBigText.ADDTEXT('<li class="divider"></li>');
    END;

    LOCAL PROCEDURE BuildMenuItemGroupHeaderHtml@9062230(groupIconName@9062229 : Text);
    BEGIN
      HtmlBigText.ADDTEXT('<li><a href="#" class="dropdown-toggle"><span class="icon ' + groupIconName + '"></span></a>');
      HtmlBigText.ADDTEXT('<ul class="t-menu compact" data-role="dropdown">');
    END;

    LOCAL PROCEDURE BuildMenuItemGroupFooterHtml@9062231();
    BEGIN
      HtmlBigText.ADDTEXT('</ul></li>');
    END;

    LOCAL PROCEDURE BuildInvokeEvent@1000000032(msgSource@1000000000 : Text;msgName@1000000001 : Text;msgParameters@1000000002 : Text) : Text;
    BEGIN
      EXIT(STRSUBSTNO('InvokeEvent(''%1'', ''%2'', ''%3'')', msgSource, msgName, msgParameters));
    END;

    LOCAL PROCEDURE FilterFileAttachment@1000000020(VAR FileAttachment@1000000000 : Record 9062272);
    BEGIN
      FileAttachment.RESET();
      FileAttachment.SETRANGE("Table ID", "Table No.");
      IF (PKFilter[1] <> '') THEN
        FileAttachment.SETRANGE("Primary Key Value 1", PKFilter[1]);
      IF (PKFilter[2] <> '') THEN
        FileAttachment.SETRANGE("Primary Key Value 2", PKFilter[2]);
      IF (PKFilter[3] <> '') THEN
        FileAttachment.SETRANGE("Primary Key Value 3", PKFilter[3]);
    END;

    LOCAL PROCEDURE FilterWorkflow@1000000021(VAR Workflow@1000000000 : Record 9062258);
    VAR
      WorkflowNoFilter@9062229 : Text;
      CriteriaManagement@9062230 : Codeunit 9062462;
      UseWorkflow@9062231 : Boolean;
      TNPUtils@9062232 : Codeunit 9062229;
    BEGIN
      Workflow.RESET();
      Workflow.SETRANGE("Table ID", "Table No.");
      Workflow.SETRANGE(Enabled, TRUE);
      Workflow.SETRANGE("Dont Show in Factbox",FALSE); //DOC NA2016.14 PC 04/03/2016

      //DOC NA2016.10 PC >>>
      IF Workflow.FINDSET THEN BEGIN
        REPEAT
          IF Workflow."Record Criteria ID" = 0 THEN
            UseWorkflow := TRUE
          ELSE
            UseWorkflow :=
              CriteriaManagement.RecordInFilter(
                Workflow."Record Criteria ID",
                "Table No.",
                TNPUtils.GetPositionTextUsingPrimaryKeyValues(
                  "Table No.",PKFilter[1],PKFilter[2],PKFilter[3],PKFilter[4],PKFilter[5]));

          IF UseWorkflow THEN
            IF WorkflowNoFilter = '' THEN
              WorkflowNoFilter := Workflow."No."
            ELSE
              WorkflowNoFilter += '|' + Workflow."No.";

        UNTIL Workflow.NEXT = 0;

        IF WorkflowNoFilter = '' THEN
          Workflow.SETRANGE("No.",WorkflowNoFilter)
        ELSE
          Workflow.SETFILTER("No.",WorkflowNoFilter);
      END;
      //DOC NA2016.10 PC <<<
    END;

    LOCAL PROCEDURE FilterGroupWorkflow@9062237(VAR GroupWorkflow@9062229 : Record 9062265);
    VAR
      TNPUtils@9062231 : Codeunit 9062229;
      PositionText@9062230 : Text;
    BEGIN
      IF ("Table No." <> 0) THEN
        PositionText := TNPUtils.GetPositionTextUsingPrimaryKeyValues("Table No.", PKFilter[1], PKFilter[2], PKFilter[3], PKFilter[4], PKFilter[5]);
      GroupWorkflow.RESET();
      GroupWorkflow.SETRANGE("Table ID", "Table No.");
      GroupWorkflow.SETRANGE(Status, GroupWorkflow.Status::Open);
      GroupWorkflow.SETRANGE("Get Position Text", PositionText);
    END;

    LOCAL PROCEDURE FilterQuestionnaire@1000000010(VAR Questionnaire@1000000000 : Record 9062704);
    BEGIN
      Questionnaire.RESET();
      Questionnaire.SETRANGE("Related Table No.", "Table No.");
      IF (PKFilter[1] <> '') THEN
        Questionnaire.SETRANGE("Related Record PK Value 1", PKFilter[1]);
      IF (PKFilter[2] <> '') THEN
        Questionnaire.SETRANGE("Related Record PK Value 2", PKFilter[2]);
      IF (PKFilter[3] <> '') THEN
        Questionnaire.SETRANGE("Related Record PK Value 3", PKFilter[3]);
      IF (PKFilter[4] <> '') THEN
        Questionnaire.SETRANGE("Related Record PK Value 4", PKFilter[4]);
      IF (PKFilter[5] <> '') THEN
        Questionnaire.SETRANGE("Related Record PK Value 5", PKFilter[5]);
    END;

    LOCAL PROCEDURE FilterQuestTemplate@1000000017(VAR QuestTemplate@1000000000 : Record 9062702);
    BEGIN
      QuestTemplate.RESET();
      QuestTemplate.SETRANGE("Related Table No.", "Table No.");
      QuestTemplate.SETRANGE(Status, QuestTemplate.Status::Released);
    END;

    LOCAL PROCEDURE FilterChecklist@1000000030(VAR Checklist@1000000000 : Record 9062434);
    VAR
      PositionText@1000000001 : Text;
      TNPUtils@1000000002 : Codeunit 9062229;
    BEGIN
      PositionText := TNPUtils.GetPositionTextUsingPrimaryKeyValues("Table No.", PKFilter[1], PKFilter[2], PKFilter[3], PKFilter[4], PKFilter[5]);
      Checklist.RESET();
      Checklist.SETRANGE("Related Table No.", "Table No.");
      Checklist.SETRANGE("Related Position Text", PositionText);
      Checklist.SETFILTER(Status,'<>%1',Checklist.Status::Complete); //DOC NA2016.10 PC
    END;

    LOCAL PROCEDURE FilterChecklistTemplate@1000000033(VAR ChecklistTemplate@1000000000 : Record 9062436);
    BEGIN
      ChecklistTemplate.RESET();
      ChecklistTemplate.SETRANGE("Related Table No.", "Table No.");
      ChecklistTemplate.SETRANGE("Table No. To Pass", "Table No.");
    END;

    LOCAL PROCEDURE FilterWorkflowActivity@1000000034(VAR WorkflowActivity@1000000000 : Record 9062266);
    VAR
      TNPUtils@9062230 : Codeunit 9062229;
      PositionText@9062229 : Text;
    BEGIN
      WorkflowActivity.RESET();
      WorkflowActivity.SETRANGE("Table Id", "Table No.");
      WorkflowActivity.SETRANGE(Status, WorkflowActivity.Status::Open);
      IF ("Table No." <> 0) THEN BEGIN
        PositionText := TNPUtils.GetPositionTextUsingPrimaryKeyValues("Table No.", PKFilter[1], PKFilter[2], PKFilter[3], PKFilter[4], PKFilter[5]);
        WorkflowActivity.SETRANGE("Get Position Text", PositionText);
      END;
      //IF (PKFilter[1] <> '') THEN
      //  WorkflowActivity.SETRANGE("Primary Code Field 1", PKFilter[1]);
      //IF (PKFilter[2] <> '') THEN
      //  WorkflowActivity.SETRANGE("Primary Code Field 2", PKFilter[2]);
      //IF (PKFilter[3] <> '') THEN
      //  WorkflowActivity.SETRANGE("Primary Code Field 3", PKFilter[3]);
      //IF (PKFilter[4] <> '') THEN
      //  WorkflowActivity.SETRANGE("Primary Code Field 4", PKFilter[4]);
    END;

    LOCAL PROCEDURE FilterTags@9062241(VAR Tag@9062229 : Record 9062492);
    BEGIN
      Tag.RESET();
      Tag.SETCURRENTKEY("Table No.", "User ID", Code);
      Tag.SETRANGE("Table No.", "Table No.");
      Tag.SETFILTER("User ID", '%1|%2', '', USERID);
      //IF ("Table No." <> 0) THEN BEGIN
      //  PositionText := TNPUtils.GetPositionTextUsingPrimaryKeyValues("Table No.", PKFilter[1], PKFilter[2], PKFilter[3], PKFilter[4], PKFilter[5]);
      //  Tag.SETRANGE("Get Position Text", PositionText);
      //END;
      IF (PKFilter[1] <> '') THEN
        Tag.SETRANGE("Primary Key 1 Filter", PKFilter[1]);
      IF (PKFilter[2] <> '') THEN
        Tag.SETRANGE("Primary Key 2 Filter", PKFilter[2]);
      IF (PKFilter[3] <> '') THEN
        Tag.SETRANGE("Primary Key 3 Filter", PKFilter[3]);
      IF (PKFilter[4] <> '') THEN
        Tag.SETRANGE("Primary Key 4 Filter", PKFilter[4]);
      IF (PKFilter[5] <> '') THEN
        Tag.SETRANGE("Primary Key 5 Filter", PKFilter[5]);
    END;

    LOCAL PROCEDURE FilterEnhViews@1000000076(VAR EnhView@1000000000 : Record 9062804);
    VAR
      WorkflowNoFilter@9062229 : Text;
      CriteriaManagement@9062230 : Codeunit 9062462;
      UseWorkflow@9062231 : Boolean;
      TNPUtils@9062232 : Codeunit 9062229;
    BEGIN
      EnhView.RESET();
      EnhView.SETRANGE("Source Table No.", "Table No.");
    END;

    LOCAL PROCEDURE ZoomWindow@1000000039();
    VAR
      EnhInfo@1000000000 : Record 9062727;
      DetailsPage@1000000001 : Page 9063084;
      Panel@1000000002 : Record 9062363;
      T@1000000003 : Record 18;
      p@1000000004 : Page 9063084;
    BEGIN
      EnhInfo.RESET();
      EnhInfo.SETRANGE("Table No.", "Table No.");
      IF (PKFilter[1] <> '') THEN
        EnhInfo.SETRANGE("Primary Key Value 1", PKFilter[1]);
      IF (PKFilter[2] <> '') THEN
        EnhInfo.SETRANGE("Primary Key Value 2", PKFilter[2]);
      IF (PKFilter[3] <> '') THEN
        EnhInfo.SETRANGE("Primary Key Value 3", PKFilter[3]);
      IF (PKFilter[4] <> '') THEN
        EnhInfo.SETRANGE("Primary Key Value 4", PKFilter[4]);
      IF (PKFilter[5] <> '') THEN
        EnhInfo.SETRANGE("Primary Key Value 5", PKFilter[5]);
      EnhInfo.GET("Table No.");
      EnhInfo.SETRECFILTER();

      CLEAR(DetailsPage);

      DetailsPage.SETTABLEVIEW(EnhInfo);
      DetailsPage.SETRECORD(EnhInfo);
      DetailsPage.RUN();
    END;

    LOCAL PROCEDURE ClearNavigationStack@1000000038();
    BEGIN
      NavigationStack.RESET();
      NavigationStack.DELETEALL();
      NavigationStackCount := 0;
    END;

    LOCAL PROCEDURE PushNavigationState@1000000041(state@1000000000 : Text);
    BEGIN
      NavigationStackCount += 1;
      NavigationStack.ID := NavigationStackCount;
      NavigationStack.Name := state;
      NavigationStack.Value := state;
      NavigationStack.INSERT();
    END;

    LOCAL PROCEDURE PopNavigationState@1000000042() : Text;
    VAR
      RetVal@1000000000 : Text;
    BEGIN
      IF (NavigationStack.FINDLAST()) THEN BEGIN
        RetVal := NavigationStack.Value;
        NavigationStack.DELETE();
        EXIT(RetVal);
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE GetPrevNavigationState@1000000043() : Text;
    BEGIN
      IF (NavigationStack.FINDLAST()) THEN
        EXIT(NavigationStack.Value);
      EXIT('');
    END;

    LOCAL PROCEDURE EmptyNavigationState@1000000044() : Boolean;
    BEGIN
      EXIT(NavigationStackCount = 0);
    END;

    PROCEDURE SetHideFileUpload@1000000040(NewValue@1000000000 : Boolean);
    BEGIN
      HideFileUpload := NewValue;
    END;

    LOCAL PROCEDURE CountWorkflows@9062236() : Integer;
    VAR
      Workflow@9062229 : Record 9062258;
    BEGIN
      //DOC NA2016.10 PC >>>
      FilterWorkflow(Workflow);
      EXIT(Workflow.COUNT);
      //DOC NA2016.10 PC <<<
    END;

    LOCAL PROCEDURE DrillDownTag@9062240(parameters@9062229 : Text);
    VAR
      Tag@9062230 : Record 9062492;
      TagsMgt@9062231 : Codeunit 9062389;
    BEGIN
      Tag.SETPOSITION(parameters);
      IF (Tag.FIND('=')) THEN
        TagsMgt.ShowTaggedEntries(Tag);
    END;

    LOCAL PROCEDURE OpenPage@9062247(PageNo@9062229 : Integer);
    BEGIN
      PAGE.RUN(PageNo);
    END;

    LOCAL PROCEDURE "--File Upload Functions--"@1000000048();
    BEGIN
    END;

    PROCEDURE File_ProcessEvent@1000000056(source@1000000002 : Text;name@1000000001 : Text;parameters@1000000000 : Text);
    VAR
      wholeFile@1000000003 : Boolean;
      fileStart@1000000004 : Boolean;
      fileEnd@1000000005 : Boolean;
      filePart@1000000006 : Boolean;
      lastFile@1000000010 : Boolean;
      messageText@1000000007 : Text;
      commaPos@1000000008 : Integer;
      clientFileName@1000000009 : Text;
      fileIndexText@1000000012 : Text;
      fileIndex@1000000011 : Integer;
    BEGIN
      IF (name = '') THEN
        EXIT;

      IF (name = 'cancel') THEN BEGIN
        File_UploadCancelled();
      END ELSE BEGIN
        wholeFile := TextStartsWith(name, 'file:');
        fileStart := TextStartsWith(name, 'fileStart:');
        fileEnd := TextStartsWith(name, 'fileEnd:');
        filePart := TextStartsWith(name, 'filePart:');

        IF (wholeFile OR fileStart OR fileEnd OR filePart) THEN BEGIN
          messageText := name;

          //get message type and fileIndex
          commaPos := STRPOS(messageText, ',');
          IF (commaPos = 0) THEN
            File_TransferError(STRSUBSTNO(errFilePartCommandError, name));

          //DOC NA2016.14.01 >>
          IF (fileStart OR wholeFile) THEN BEGIN
            fileIndexText := COPYSTR(COPYSTR(messageText, 1, commaPos - 1), STRPOS(messageText, ':') + 1);
            IF (EVALUATE(fileIndex, fileIndexText)) THEN BEGIN
              IF (fileIndex = 0) THEN BEGIN
                UploadedFile.RESET();
                UploadedFile.DELETEALL();
              END;
            END;
          END;
          //DOC NA2016.14.01 <<

          //get file position
          messageText := COPYSTR(messageText, commaPos + 1);
          commaPos := STRPOS(messageText, ',');
          IF (commaPos = 0) THEN
            File_TransferError(STRSUBSTNO(errFilePartCommandError, name));

          //last file?
          messageText := COPYSTR(messageText, commaPos + 1);
          commaPos := STRPOS(messageText, ',');
          IF (commaPos = 0) THEN
            File_TransferError(STRSUBSTNO(errFilePartCommandError, name));
          lastFile := (COPYSTR(messageText, 1, commaPos - 1) = 'last:1');

          //get file name
          messageText := COPYSTR(messageText, commaPos + 1);
          IF (NOT(TextStartsWith(messageText, 'name:'))) THEN
            File_TransferError(STRSUBSTNO(errFilePartCommandError, name));

          clientFileName := COPYSTR(messageText, STRLEN('name:') + 1);

          File_SaveFilePart(source, wholeFile OR fileStart, wholeFile OR fileEnd, clientFileName, parameters);

          File_UploadNextPart();

          IF (wholeFile OR fileEnd) AND (lastFile) THEN
            File_UploadFinished();
        END;
      END;
    END;

    PROCEDURE File_UploadNextPart@1000000055();
    BEGIN
      CurrPage.FileUploadElement.RunCommand('nextpart', '', '');
    END;

    PROCEDURE File_SaveFilePart@1000000054(source@1000000007 : Text;createNewFile@1000000002 : Boolean;closeFile@1000000003 : Boolean;clientFileName@1000000000 : Text;fileData@1000000001 : Text);
    VAR
      file@1000000006 : File;
      serverFileName@1000000005 : Text;
      binaryDataPos@1000000004 : Integer;
    BEGIN
      IF (createNewFile) THEN BEGIN
        file.CREATETEMPFILE();
        serverFileName := file.NAME;
        file.CLOSE();
        fileOpened := TRUE;

        UploadedFile.INIT();
        UploadedFile."Entry No." := UploadedFile.COUNT + 1;
        UploadedFile."Temp File Name" := serverFileName;
        UploadedFile."Source File Name" := COPYSTR(clientFileName, 1, MAXSTRLEN(UploadedFile."Source File Name"));
        UploadedFile.Command := source;
        UploadedFile.INSERT();
      END ELSE BEGIN
        IF (NOT(fileOpened)) THEN
          File_TransferError(errPartError);
        serverFileName := UploadedFile."Temp File Name";
      END;

      //fileName := 'C:\Projects\FileUploadCache\' + serverFileName;
      //fileName := 'C:\Projects\FileUploadCache\test.txt';

      binaryDataPos := STRPOS(fileData, ',');
      fileData := COPYSTR(fileData, binaryDataPos + 1);
      byteArray := convert.FromBase64String(fileData);
      dataStream := dataStream.FileStream(serverFileName, fileMode.Append);
      dataStream.Write(byteArray, 0, byteArray.Length);
      dataStream.Close();
      dataStream.Dispose();

      IF (closeFile) THEN
        fileOpened := FALSE;
    END;

    PROCEDURE File_CancelUpload@1000000053();
    BEGIN
      CurrPage.FileUploadElement.RunCommand('cancel', '', '');
    END;

    PROCEDURE File_UploadCancelled@1000000052();
    BEGIN
      UploadedFile.RESET();
      IF (UploadedFile.FINDSET()) THEN BEGIN
        REPEAT
          IF (EXISTS(UploadedFile."Temp File Name")) THEN
            ERASE(UploadedFile."Temp File Name");
        UNTIL (UploadedFile.NEXT() = 0);
      END;
      UploadedFile.DELETEALL();
    END;

    PROCEDURE File_UploadFinished@1000000051();
    VAR
      FileAttachment@1000000000 : Record 9062272;
      FileAttachmentProcessing@9062229 : Codeunit 9062600;
    BEGIN
      COMMIT;
      UploadedFile.RESET();

      UploadedFile.SETRANGE("Table No. To Pass", "Table No.");
      IF (PKFilter[1] <> '') THEN
        UploadedFile.SETRANGE("Primary Key 1 To Pass", PKFilter[1]);
      IF (PKFilter[2] <> '') THEN
        UploadedFile.SETRANGE("Primary Key 2 To Pass", PKFilter[2]);
      IF (PKFilter[3] <> '') THEN
        UploadedFile.SETRANGE("Primary Key 3 To Pass", PKFilter[3]);
      IF (PKFilter[4] <> '') THEN
        UploadedFile.SETRANGE("Primary Key 4 To Pass", PKFilter[4]);
      IF (PKFilter[5] <> '') THEN
        UploadedFile.SETRANGE("Primary Key 5 To Pass", PKFilter[5]);

      IF (UploadedFile.FINDSET()) THEN BEGIN
        REPEAT
          COMMIT;
          FilterFileAttachment(FileAttachment);
          FileAttachmentProcessing.GetFromServer(FileAttachment, UploadedFile."Temp File Name", UploadedFile."Source File Name", '', TRUE, TRUE);
          //CLEAR(ProcessFile);
          //IF (ProcessFile.RUN(UploadedFile)) THEN ;
          COMMIT;
          IF (EXISTS(UploadedFile."Temp File Name")) THEN
            ERASE(UploadedFile."Temp File Name");
        UNTIL (UploadedFile.NEXT() = 0);
      END;
      UploadedFile.DELETEALL();
      ProcessTemplate(TRUE);
    END;

    PROCEDURE File_TransferError@1000000050(errorMessageText@1000000000 : Text);
    BEGIN
      File_CancelUpload();
      File_UploadCancelled();
      ERROR(errorMessageText);
    END;

    PROCEDURE TextStartsWith@1000000049(string@1000000000 : Text;subString@1000000001 : Text) : Boolean;
    BEGIN
      EXIT(COPYSTR(string, 1, STRLEN(subString)) = subString);
    END;

    LOCAL PROCEDURE EncodeHtmlText@1000000174(text@1000000000 : Text) : Text;
    BEGIN
      EXIT(HttpUtility.HtmlEncode(text));
    END;

    LOCAL PROCEDURE EncodeJSText@9062244(text@9062229 : Text) : Text;
    VAR
      retVal@9062230 : Text;
      i@9062231 : Integer;
    BEGIN
      retVal := '';
      FOR i:=1 TO STRLEN(text) DO BEGIN
        CASE (text[i]) OF
          '\': retVal := retVal + '\\';
          '"': retVal := retVal + '\"';
        ELSE
          retVal := retVal + COPYSTR(text, i, 1);
        END;
      END;
      EXIT(retVal);
    END;

    LOCAL PROCEDURE InitColorStyles@9062243();
    BEGIN
      ColorNameCount := 0;
      AddColorStyle('red');
      AddColorStyle('darkula');
      AddColorStyle('pink');
      AddColorStyle('navy');
      AddColorStyle('green');
      AddColorStyle('orange');
    END;

    LOCAL PROCEDURE AddColorStyle@9062245(name@9062229 : Text);
    BEGIN
      ColorNameCount += 1;
      ColorName[ColorNameCount] := name;
    END;

    LOCAL PROCEDURE GetColorStyle@9062246(index@9062229 : Integer) : Text;
    BEGIN
      EXIT(ThemeName);
      //EXIT(ColorName[((index - 1) MOD ColorNameCount) + 1]);
    END;

    LOCAL PROCEDURE "--Scripts--"@1000000060();
    BEGIN
    END;

    LOCAL PROCEDURE PrepareScripts@1000000061();
    VAR
      SystemBehaviour@1000000002 : Record 9062230;
      Scripts@1000000000 : BigText;
      ScriptsText@1000000001 : Text;
      ServerUrl@1000000003 : Text;
      StyleSheet@1000000004 : Text;
      JavaScript@1000000005 : Text;
    BEGIN
      ServerUrl := SystemBehaviour.GetText('WEBCONTENTSERVER');
      IF (ServerUrl = '') THEN
        ServerUrl := 'https://content.navondemand.co.uk/';

      StyleSheet := '''<link href="' + ServerUrl + '%1" Rel="stylesheet" Type="text/css" />''';
      JavaScript := '''<script src="' + ServerUrl + '%1" type="text/javascript"></script>''';

      Scripts.ADDTEXT('$(''head'').append(');
      Scripts.ADDTEXT(STRSUBSTNO(StyleSheet, 'libraries/tnp.modernui30panel/StyleSheet/metro.min.css') + ' + ');
      Scripts.ADDTEXT(STRSUBSTNO(StyleSheet, 'libraries/tnp.modernui30panel/StyleSheet/metro-icons.css') + ' + ');
      Scripts.ADDTEXT(STRSUBSTNO(StyleSheet, 'libraries/tnp.modernui30panel/StyleSheet/metro-responsive.css') + ' + ');
      Scripts.ADDTEXT(STRSUBSTNO(StyleSheet, 'libraries/tnp.modernui30panel/StyleSheet/metro-schemes.min.css') + ' + ');
      Scripts.ADDTEXT(STRSUBSTNO(StyleSheet, 'libraries/tnp.modernui30panel/StyleSheet/tiles.css') + ' + ');
      Scripts.ADDTEXT(STRSUBSTNO(StyleSheet, 'libraries/tnp.modernui30panel/StyleSheet/jquery.contextMenu.css') + ' + ');
      Scripts.ADDTEXT(STRSUBSTNO(StyleSheet, 'libraries/tnp.modernui30panel/StyleSheet/nora.css') + ' + ');
      Scripts.ADDTEXT(STRSUBSTNO(JavaScript, 'libraries/tnp.modernui30panel/Script/jquery-ui.min.js') + ' + ');
      Scripts.ADDTEXT(STRSUBSTNO(JavaScript, 'libraries/tnp.modernui30panel/Script/metro.min.js') + ' + ');
      Scripts.ADDTEXT(STRSUBSTNO(JavaScript, 'libraries/tnp.modernui30panel/Script/askNora.js') + ' + ');
      Scripts.ADDTEXT(STRSUBSTNO(JavaScript, 'libraries/tnp.modernui30panel/Script/jquery.contextMenu.js'));
      Scripts.ADDTEXT(');');

      Scripts.GETSUBTEXT(ScriptsText, 1);

      CurrPage.HtmlPage.RunScript(ScriptsText);
    END;

    LOCAL PROCEDURE "--Ask Nora Functions--"@1000000062();
    BEGIN
    END;

    LOCAL PROCEDURE DetectClient@1000000072(sourceUrl@1000000000 : Text);
    BEGIN
      IF (STRPOS(sourceUrl, '/tablet.aspx') > 0) THEN
        UseClientType := UseClientType::Tablet;
    END;

    LOCAL PROCEDURE ProcessNoraLink@1000000071(link@1000000000 : Text);
    VAR
      conversationEntry@1000000001 : Record 9062511;
      sentence@1000000002 : Record 9062517;
      ANConversation@1000000006 : Record 9062522;
      AskNoraConvMgt@1000000005 : Codeunit 9062400;
      sentenceUrl@1000000004 : Text;
      remainingPart@1000000008 : Text;
      sentenceID@1000000003 : Integer;
      linkPos@1000000007 : Integer;
    BEGIN
      IF (NOT(EVALUATE(sentenceID, link))) THEN
        EXIT;

      IF (NOT(sentence.GET(sentenceID))) THEN
        EXIT;

      IF (NOT(ANConversation.GET(sentence."Conversation ID"))) THEN
        EXIT;

      IF (ANConversation."User ID" <> USERID) THEN
        EXIT;

      sentenceUrl := '';
      CASE (UseClientType) OF
        UseClientType::Rtc:
          IF (sentence."Related RTC URL" <> '') THEN BEGIN
            sentenceUrl := sentence."Related RTC URL";
            linkPos := STRPOS(sentenceUrl, '/runpage?');
            IF (linkPos > 0) THEN BEGIN
              sentenceUrl := 'DynamicsNAV:////' + COPYSTR(sentenceUrl, linkPos);
              //delete tenant
              linkPos := STRPOS(sentenceUrl, '&tenant=');
              IF (linkPos > 0) THEN BEGIN
                remainingPart := COPYSTR(sentenceUrl, linkPos + 1);
                sentenceUrl := COPYSTR(sentenceUrl, 1, linkPos - 1);
                //add parameter specified after tenant
                linkPos := STRPOS(remainingPart, '&');
                IF (linkPos > 0) THEN
                  sentenceUrl := sentenceUrl + COPYSTR(remainingPart, linkPos);

                IF (TENANTID <> '') THEN
                  sentenceUrl := sentenceUrl + '&tenant=' + TENANTID; //DOC NA2015.5 AP 16/03/2015

              END;
              //DOC NA2015.5 AP 16/03/2015>>>
              //IF (TENANTID <> '') THEN
              //  sentenceUrl := sentenceUrl + '&tenant=' + TENANTID;

            END;
          END;
        UseClientType::Tablet,
        UseClientType::Web:
          sentenceUrl := sentence."Related Web Client URL"
      END;

      IF ((sentenceUrl = '') AND (sentence."Related URL" <> '')) THEN
        sentenceUrl := sentence."Related URL";
      IF (sentenceUrl <> '') THEN
        HYPERLINK(sentenceUrl);
    END;

    LOCAL PROCEDURE ProcessNoraMessage@1000000070(messageText@1000000000 : Text);
    VAR
      ANConversation@1000000004 : Record 9062522;
      ConvID@1000000003 : Integer;
      CurrConvEntryNo@1000000002 : Integer;
      Conversation@1000000001 : Record 9062522;
      AskNoraConvMgt@1000000005 : Codeunit 9062400;
      outputMessageHtml@1000000006 : Text;
    BEGIN
      //message processing

      //prepare message
      AskNoraConvMgt.GetConversation(USERID,ANConversation);
      ConvID := ANConversation.ID;
      ANConversation.CALCFIELDS("Max. Entry No.");
      CurrConvEntryNo := ANConversation."Max. Entry No.";

      IF ResetConversation THEN BEGIN
        Conversation.GET(AskNoraConvMgt.GetConversation(USERID,Conversation));
        AskNoraConvMgt.ResetConversation(Conversation);
        ResetConversation := FALSE;
      END;

      //process message
      AskNoraConvMgt.AsknOra(messageText);
      COMMIT;

      //build HTML
      outputMessageHtml := BuildNoraMessageHtml(ConvID, CurrConvEntryNo, TRUE);

      //send messages to Ask nora control
      SendNoraMessage(outputMessageHtml);
    END;

    LOCAL PROCEDURE SendNoraMessage@1000000069(messageHtml@1000000000 : Text);
    BEGIN
      CurrPage.HtmlPage.RunCommand('noraMessage', '', messageHtml);
    END;

    LOCAL PROCEDURE ClearNoraMessages@1000000068();
    BEGIN
      CurrPage.HtmlPage.RunCommand('noraReset', '', '');
    END;

    LOCAL PROCEDURE BuildNoraMessageHtml@1000000067(ConvId@1000000001 : Integer;ConvEntryNo@1000000002 : Integer;OutgoingMessagesOnly@1000000003 : Boolean) : Text;
    VAR
      conversationEntry@1000000004 : Record 9062511;
      sentence@1000000005 : Record 9062517;
      InputStream@1000000010 : InStream;
      BlobText@1000000011 : BigText;
      HtmlBuilder@1000000000 : BigText;
      HtmlText@1000000007 : Text;
      sentenceText@1000000006 : Text;
      sentenceUrl@1000000012 : Text;
      messageClass@1000000009 : Text;
      spaceCount@1000000008 : Integer;
    BEGIN
      //build messages HTML

      CLEAR(HtmlBuilder);
      HtmlText := '';

      conversationEntry.SETRANGE("Conversation ID", ConvId);
      conversationEntry.SETFILTER("Entry ID",'>%1',ConvEntryNo);
      IF (OutgoingMessagesOnly) THEN
        conversationEntry.SETRANGE(Direction, conversationEntry.Direction::"nOra -> User");

      IF (conversationEntry.FINDSET()) THEN BEGIN
        REPEAT
          //message header
          HtmlBuilder.ADDTEXT('<div class="msg">');
          IF (NOT(DisableImages)) THEN BEGIN
            IF (conversationEntry.Direction = conversationEntry.Direction::"User -> nOra") THEN
              HtmlBuilder.ADDTEXT('<div class="msgimage"></div>')
            ELSE
              HtmlBuilder.ADDTEXT('<div class="msgimage"><img src="##NORAIMAGE##" /></div>');
          END;

          IF (conversationEntry.Direction = conversationEntry.Direction::"User -> nOra") THEN
            messageClass := 'rmsgc'
          ELSE
            messageClass := 'lmsgc';

          HtmlBuilder.ADDTEXT('<div class="msgcontent ' + messageClass + '"><div class="body">');

          //message content
          sentence.RESET();
          sentence.SETRANGE("Conversation ID", conversationEntry."Conversation ID");
          sentence.SETRANGE("Conv. Entry ID", conversationEntry."Entry ID");
          IF (sentence.FINDSET()) THEN BEGIN
            REPEAT
              sentenceUrl := '';
              CASE (UseClientType) OF
                UseClientType::Rtc:
                  BEGIN
                    IF ((sentence."Related RTC URL" <> '') OR (sentence."Related URL" <> '')) THEN
                      sentenceUrl := 'javascript:RunLink(''' + FORMAT(sentence."Sentence ID") + ''')';
                  END;

                //UseClientType::Tablet:
                //    IF ((sentence."Related Web Client URL" <> '') OR (sentence."Related URL" <> '')) THEN
                //      sentenceUrl := 'javascript:RunLink(''' + FORMAT(sentence."Sentence ID") + ''')';

                UseClientType::Tablet,
                UseClientType::Web:

                  BEGIN
                    IF (sentence."Related Web Client URL" <> '') THEN
                      sentenceUrl := sentence."Related Web Client URL"
                    ELSE IF (sentence."Related URL" <> '') THEN
                      sentenceUrl := sentence."Related URL";
                  END;
              END;

              //write sentence as link
              IF (sentenceUrl <> '') THEN BEGIN
                HtmlBuilder.ADDTEXT('<a href="' + sentenceUrl);
                IF (UseClientType <> UseClientType::Rtc) THEN BEGIN
                  HtmlBuilder.ADDTEXT('" target="_blank');
                END;
                HtmlBuilder.ADDTEXT('">');
              END;

              //format sentence text
              sentenceText := sentence."Line Part 1";
              sentenceText := EncodeHtmlText(sentenceText);
              IF (sentenceText = '') THEN
                sentenceText := '&nbsp;';
              spaceCount := CountSpaces(sentenceText);

              IF (sentence."List Entry No." <> 0) THEN
                sentenceText := FORMAT(sentence."List Entry No.") + '. ' + sentenceText;

              IF (spaceCount > 0) THEN BEGIN
                spaceCount := 10 * spaceCount;
                HtmlBuilder.ADDTEXT('<div style="margin-left:');
                HtmlBuilder.ADDTEXT(FORMAT(spaceCount));
                HtmlBuilder.ADDTEXT('px;">');
              END ELSE
                HtmlBuilder.ADDTEXT('<div>');
              HtmlBuilder.ADDTEXT(sentenceText);
              HtmlBuilder.ADDTEXT('</div>');

              IF (sentenceUrl <> '') THEN
                HtmlBuilder.ADDTEXT('</a>');

              //add html response to message
              IF (sentence."HTML BLOB".HASVALUE) THEN BEGIN
                sentence.CALCFIELDS("HTML BLOB");
                sentence."HTML BLOB".CREATEINSTREAM(InputStream);
                BlobText.READ(InputStream);
                HtmlBuilder.ADDTEXT('<div class="inlinehtml">');
                HtmlBuilder.ADDTEXT(BlobText);
                HtmlBuilder.ADDTEXT('</div>');
              END;

              //download file
              IF (sentence."File BLOB".HASVALUE) THEN BEGIN
                sentence.CALCFIELDS("File BLOB");
                sentence."File BLOB".CREATEINSTREAM(InputStream);
                DOWNLOADFROMSTREAM(InputStream, txtDownloadFileTitle, '', 'All Files (*.*)|*.*', sentence."File Name");
              END;

            UNTIL (sentence.NEXT() = 0);
          END;

          //message footer
          HtmlBuilder.ADDTEXT('</div></div>');
          IF (NOT(DisableImages)) THEN BEGIN
            IF (conversationEntry.Direction = conversationEntry.Direction::"User -> nOra") THEN
              HtmlBuilder.ADDTEXT('<div class="msgimage"><img src="##USERIMAGE##" /></div>')
            ELSE
              HtmlBuilder.ADDTEXT('<div class="msgimage"></div>');
          END;
          HtmlBuilder.ADDTEXT('</div>');
        UNTIL (conversationEntry.NEXT() = 0);
      END;

      HtmlBuilder.GETSUBTEXT(HtmlText, 1);

      EXIT(HtmlText);
    END;

    LOCAL PROCEDURE BuildNoraMessageText@1000000066(VAR HtmlBuilder@1000000000 : BigText;VAR conversationEntry@1000000001 : Record 9062505);
    BEGIN
    END;

    LOCAL PROCEDURE CountSpaces@1000000065(text@1000000000 : Text) : Integer;
    VAR
      spaceCount@1000000001 : Integer;
    BEGIN
      spaceCount := 0;
      WHILE (spaceCount < STRLEN(text)) DO BEGIN
        IF (text[spaceCount + 1] <> ' ') THEN
          EXIT(spaceCount);
        spaceCount += 1;
      END;
      EXIT(spaceCount);
    END;

    LOCAL PROCEDURE "--- Tests ---"@1000000073();
    BEGIN
    END;

    LOCAL PROCEDURE LogMessage@1000000078(messageText@1000000000 : Text);
    VAR
      f@1000000001 : File;
      o@1000000004 : OutStream;
      filename@1000000003 : Text;
      nl@1000000002 : Text;
    BEGIN
      filename := 'd:\temp\logfile.txt';
      nl := '  '; nl[1] := 13; nl[2] := 10;
      f.TEXTMODE := TRUE;
      IF (EXISTS(filename)) THEN BEGIN
        f.WRITEMODE := TRUE;
        f.OPEN(filename);
        f.SEEK(f.LEN);
      END ELSE BEGIN
        f.CREATE(filename);
      END;
      f.WRITE(messageText);
      f.WRITE(nl);
      f.CLOSE();
    END;

    EVENT FileUploadElement@-1000000002::ControlAddInReady@3();
    BEGIN
    END;

    EVENT FileUploadElement@-1000000002::ControlEvent@4(source@1000000002 : Text;name@1000000001 : Text;parameters@1000000000 : Text);
    BEGIN
      File_ProcessEvent(source, name, parameters);
    END;

    EVENT HtmlPage@-1000000011::ControlAddInReady@3();
    BEGIN
      AddInReady();
    END;

    EVENT HtmlPage@-1000000011::ControlEvent@4(source@1000000002 : Text;name@1000000001 : Text;parameters@1000000000 : Text);
    BEGIN
      AddInEvent(source, name, parameters);
    END;

    BEGIN
    {
      //DOC NA2015.10 AZ 09/09/2015 - HtmlEncoding added
      //DOC NA2016.10 AZ 09/09/2015 - Upgraded to 2016
      //DOC NA2016.10 PC 25/09/2015 - Changes to support Criteria on Workflow
      //DOC NA2016.10 AZ 02/11/2015 - Delay event handling in RTC for checklist processing (temporary Web Control Add-In issue bugfix)
      //DOC NA2016.12 AZ 02/12/2015 - Performance fixes
      //DOC NA2016.12 JH 27/12/2015 - Criteria references changed
      //DOC NA2016.14 PC 04/03/2016 - Added filter to Workflow HTML to not show Workflows flagged as "Don't show in factbox"
      //DOC NA2016.15 AZ 15/03/2016 - Enhanced Views Added
      //DOC NA2016.15 JH 25/04/2016 - CfMD amendments
    }
    END.
  }
}

