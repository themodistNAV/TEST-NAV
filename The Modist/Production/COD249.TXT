OBJECT Codeunit 249 VAT Registration Log Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 249=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ValidPathTxt@1002 : TextConst '@@@={Locked};ENU=descendant::vat:valid;ENG=descendant::vat:valid';
      NamePathTxt@1001 : TextConst '@@@={Locked};ENU=descendant::vat:name;ENG=descendant::vat:name';
      AddressPathTxt@1000 : TextConst '@@@={Locked};ENU=descendant::vat:address;ENG=descendant::vat:address';

    PROCEDURE LogCustomer@1(Customer@1000 : Record 18);
    VAR
      VATRegistrationLog@1001 : Record 249;
      CountryCode@1002 : Code[10];
    BEGIN
      CountryCode := GetCountryCode(Customer."Country/Region Code");
      IF NOT IsEUCountry(CountryCode) THEN
        EXIT;

      InsertVATRegistrationLog(
        Customer."VAT Registration No.",CountryCode,VATRegistrationLog."Account Type"::Customer,Customer."No.");
    END;

    PROCEDURE LogVendor@2(Vendor@1002 : Record 23);
    VAR
      VATRegistrationLog@1001 : Record 249;
      CountryCode@1000 : Code[10];
    BEGIN
      CountryCode := GetCountryCode(Vendor."Country/Region Code");
      IF NOT IsEUCountry(CountryCode) THEN
        EXIT;

      InsertVATRegistrationLog(
        Vendor."VAT Registration No.",CountryCode,VATRegistrationLog."Account Type"::Vendor,Vendor."No.");
    END;

    PROCEDURE LogContact@8(Contact@1000 : Record 5050);
    VAR
      VATRegistrationLog@1001 : Record 249;
      CountryCode@1002 : Code[10];
    BEGIN
      CountryCode := GetCountryCode(Contact."Country/Region Code");
      IF NOT IsEUCountry(CountryCode) THEN
        EXIT;

      InsertVATRegistrationLog(
        Contact."VAT Registration No.",CountryCode,VATRegistrationLog."Account Type"::Contact,Contact."No.");
    END;

    PROCEDURE LogVerification@3(VAR VATRegistrationLog@1000 : Record 249;XMLDoc@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Namespace@1003 : Text);
    VAR
      XMLDOMMgt@1002 : Codeunit 6224;
      FoundXmlNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF NOT XMLDOMMgt.FindNodeWithNamespace(XMLDoc.DocumentElement,ValidPathTxt,'vat',Namespace,FoundXmlNode) THEN
        EXIT;

      CASE LOWERCASE(FoundXmlNode.InnerText) OF
        'true':
          BEGIN
            VATRegistrationLog."Entry No." := 0;
            VATRegistrationLog.Status := VATRegistrationLog.Status::Valid;
            VATRegistrationLog."Verified Date" := CURRENTDATETIME;
            VATRegistrationLog."User ID" := USERID;

            XMLDOMMgt.FindNodeWithNamespace(XMLDoc.DocumentElement,NamePathTxt,'vat',Namespace,FoundXmlNode);
            VATRegistrationLog."Verified Name" :=
              COPYSTR(FoundXmlNode.InnerText,1,MAXSTRLEN(VATRegistrationLog."Verified Name"));
            XMLDOMMgt.FindNodeWithNamespace(XMLDoc.DocumentElement,AddressPathTxt,'vat',Namespace,FoundXmlNode);
            VATRegistrationLog."Verified Address" :=
              COPYSTR(FoundXmlNode.InnerText,1,MAXSTRLEN(VATRegistrationLog."Verified Address"));

            VATRegistrationLog.INSERT(TRUE);
          END;
        'false':
          BEGIN
            VATRegistrationLog."Entry No." := 0;
            VATRegistrationLog."Verified Date" := CURRENTDATETIME;
            VATRegistrationLog.Status := VATRegistrationLog.Status::Invalid;
            VATRegistrationLog."User ID" := USERID;
            VATRegistrationLog."Verified Name" := '';
            VATRegistrationLog."Verified Address" := '';

            VATRegistrationLog.INSERT(TRUE);
          END;
      END;
    END;

    LOCAL PROCEDURE LogUnloggedVATRegistrationNumbers@10();
    VAR
      Customer@1000 : Record 18;
      Vendor@1001 : Record 23;
      Contact@1002 : Record 5050;
      VATRegistrationLog@1003 : Record 249;
    BEGIN
      Customer.SETFILTER("VAT Registration No.",'<>%1','');
      IF Customer.FINDSET THEN
        REPEAT
          VATRegistrationLog.SETRANGE("VAT Registration No.",Customer."VAT Registration No.");
          IF VATRegistrationLog.ISEMPTY THEN
            LogCustomer(Customer);
        UNTIL Customer.NEXT = 0;

      Vendor.SETFILTER("VAT Registration No.",'<>%1','');
      IF Vendor.FINDSET THEN
        REPEAT
          VATRegistrationLog.SETRANGE("VAT Registration No.",Vendor."VAT Registration No.");
          IF VATRegistrationLog.ISEMPTY THEN
            LogVendor(Vendor);
        UNTIL Vendor.NEXT = 0;

      Contact.SETFILTER("VAT Registration No.",'<>%1','');
      IF Contact.FINDSET THEN
        REPEAT
          VATRegistrationLog.SETRANGE("VAT Registration No.",Contact."VAT Registration No.");
          IF VATRegistrationLog.ISEMPTY THEN
            LogContact(Contact);
        UNTIL Contact.NEXT = 0;

      COMMIT;
    END;

    LOCAL PROCEDURE InsertVATRegistrationLog@16(VATRegNo@1002 : Text[20];CountryCode@1000 : Code[10];AccountType@1001 : Option;AccountNo@1003 : Code[20]);
    VAR
      VATRegistrationLog@1004 : Record 249;
    BEGIN
      WITH VATRegistrationLog DO BEGIN
        INIT;
        "VAT Registration No." := VATRegNo;
        "Country/Region Code" := CountryCode;
        "Account Type" := AccountType;
        "Account No." := AccountNo;
        "User ID" := USERID;
        INSERT(TRUE);
      END;
    END;

    PROCEDURE DeleteCustomerLog@4(Customer@1000 : Record 18);
    VAR
      VATRegistrationLog@1001 : Record 249;
    BEGIN
      WITH VATRegistrationLog DO BEGIN
        SETRANGE("Account Type","Account Type"::Customer);
        SETRANGE("Account No.",Customer."No.");
        DELETEALL;
      END;
    END;

    PROCEDURE DeleteVendorLog@5(Vendor@1000 : Record 23);
    VAR
      VATRegistrationLog@1001 : Record 249;
    BEGIN
      WITH VATRegistrationLog DO BEGIN
        SETRANGE("Account Type","Account Type"::Vendor);
        SETRANGE("Account No.",Vendor."No.");
        DELETEALL;
      END;
    END;

    PROCEDURE DeleteContactLog@9(Contact@1000 : Record 5050);
    VAR
      VATRegistrationLog@1001 : Record 249;
    BEGIN
      WITH VATRegistrationLog DO BEGIN
        SETRANGE("Account Type","Account Type"::Contact);
        SETRANGE("Account No.",Contact."No.");
        DELETEALL;
      END;
    END;

    PROCEDURE AssistEditCustomerVATReg@7(Customer@1000 : Record 18);
    VAR
      VATRegistrationLog@1001 : Record 249;
    BEGIN
      WITH VATRegistrationLog DO BEGIN
        IF ISEMPTY THEN
          LogUnloggedVATRegistrationNumbers;
        SETRANGE("Account Type","Account Type"::Customer);
        SETRANGE("Account No.",Customer."No.");
        PAGE.RUNMODAL(PAGE::"VAT Registration Log",VATRegistrationLog);
      END;
    END;

    PROCEDURE AssistEditVendorVATReg@6(Vendor@1001 : Record 23);
    VAR
      VATRegistrationLog@1000 : Record 249;
    BEGIN
      WITH VATRegistrationLog DO BEGIN
        IF ISEMPTY THEN
          LogUnloggedVATRegistrationNumbers;
        SETRANGE("Account Type","Account Type"::Vendor);
        SETRANGE("Account No.",Vendor."No.");
        PAGE.RUNMODAL(PAGE::"VAT Registration Log",VATRegistrationLog);
      END;
    END;

    PROCEDURE AssistEditContactVATReg@11(Contact@1001 : Record 5050);
    VAR
      VATRegistrationLog@1000 : Record 249;
    BEGIN
      WITH VATRegistrationLog DO BEGIN
        IF ISEMPTY THEN
          LogUnloggedVATRegistrationNumbers;
        SETRANGE("Account Type","Account Type"::Contact);
        SETRANGE("Account No.",Contact."No.");
        PAGE.RUNMODAL(PAGE::"VAT Registration Log",VATRegistrationLog);
      END;
    END;

    LOCAL PROCEDURE IsEUCountry@12(CountryCode@1000 : Code[10]) : Boolean;
    VAR
      CountryRegion@1001 : Record 9;
    BEGIN
      IF CountryCode <> '' THEN
        IF CountryRegion.GET(CountryCode) THEN
          EXIT(CountryRegion."EU Country/Region Code" <> '');

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetCountryCode@13(CountryCode@1000 : Code[10]) : Code[10];
    VAR
      CompanyInformation@1001 : Record 79;
    BEGIN
      IF CountryCode <> '' THEN
        EXIT(CountryCode);

      CompanyInformation.GET;
      EXIT(CompanyInformation."Country/Region Code");
    END;

    BEGIN
    END.
  }
}

