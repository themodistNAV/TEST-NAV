OBJECT Codeunit 50002 Modist Events
{
  OBJECT-PROPERTIES
  {
    Date=17/12/18;
    Time=[ 5:00:12 PM];
    Modified=Yes;
    Version List=OP9031,TM0002,TM0020,TM0003,TM0200,TM0058,TM1011;
  }
  PROPERTIES
  {
    Permissions=TableData 120=rimd,
                TableData 121=rimd,
                TableData 454=rimd;
    OnRun=VAR
            SalesLine@1000000000 : Record 37;
            ReturnReceiptLine@1000000001 : Record 6661;
            lEmailItem@1000000002 : TEMPORARY Record 9500;
            MainLineNo@1000000003 : Integer;
            ItemLedgerEntry@1000000004 : Record 32;
            lLineNo@1000000005 : Integer;
            lPurchRcptLine@1000000006 : Record 121;
            lPurchRcptHeader@1000000007 : Record 120;
            lItemDistribution@1170000000 : Record 50026;
            lItemVariant@1170000001 : Record 5401;
            lItem@1170000002 : Record 27;
            lModistSetup@1170000003 : Record 50000;
          BEGIN
            // ReturnReceiptLine.RESET;
            // ReturnReceiptLine.FINDSET;
            // REPEAT
            //  SalesLine.SETRANGE("Document No.",ReturnReceiptLine."Return Order No.");
            //  IF SalesLine.FINDFIRST THEN BEGIN
            //    IF NOT SalesLine."Exahange Order" THEN BEGIN
            //      ReturnReceiptLine."Gen. Bus. Posting Group" := 'DEFAULT';
            //      ReturnReceiptLine.MODIFY;
            //    END;
            //  END;
            // UNTIL ReturnReceiptLine.NEXT=0;
            //
            // MESSAGE('DONE REC')
            //  lEmailItem.Init;
            //  lEmailItem."Send to" := 'red.bamba@themodist.com';
            //  lEmailItem."Send CC" := 'amr.wafa@themodist.com';
            //  lEmailItem."From Name" := COMPANYNAME;
            //  lEmailItem.SetBodyText('TEST TEST TEST Order No: ' + ' Payment Type: ' +' Card Type: '  + ' Description: ');
            //  lEmailItem.Subject := 'TET Failed Payment Capture';
            //  lEmailItem.Send(TRUE);

            // SalesLine.RESET;
            // SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::"Return Order");
            // //SalesLine.SETFILTER("Document No.",'%1..%2','SRO002572','SRO002590');
            // IF SalesLine.FINDSET THEN BEGIN
            //  REPEAT
            //    IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
            //      SalesLine2 := SalesLine;
            //      MainLineNo := SalesLine."Line No.";
            //      SalesLine."Main Line No." := MainLineNo;
            //      SalesLine.MODIFY;
            //    END;
            //    SalesLine2.NEXT;
            //    IF SalesLine2.Type = SalesLine2.Type::"G/L Account" THEN BEGIN
            //      SalesLine2."Main Line No." := MainLineNo;
            //      SalesLine2.MODIFY;
            //    END;
            //  UNTIL SalesLine.NEXT=0;
            // END;
            // IF GUIALLOWED THEN
            //  MESSAGE('done');

            // lLineNo := 10000;
            // ItemLedgerEntry.RESET;
            // ItemLedgerEntry.SETCURRENTKEY("Document No.","Document Type","Document Line No.");
            // ItemLedgerEntry.SETRANGE("Document Type",ItemLedgerEntry."Document Type"::"Purchase Credit Memo");
            // ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Purchase);
            // IF ItemLedgerEntry.FINDSET THEN BEGIN
            //  REPEAT
            //    lPurchRcptLine.INIT;
            //    lPurchRcptLine."Document No." := ItemLedgerEntry."Document No.";
            //    lPurchRcptLine."Line No." := lLineNo;
            //    lPurchRcptLine.Type := lPurchRcptLine.Type::Item;
            //    lPurchRcptLine."No." := ItemLedgerEntry."Item No.";
            //    lPurchRcptLine."Variant Code" := ItemLedgerEntry."Variant Code";
            //    lPurchRcptLine.Quantity := ItemLedgerEntry.Quantity;
            //    lPurchRcptLine."Quantity (Base)" := ItemLedgerEntry.Quantity;
            //    lPurchRcptLine."Unit of Measure Code" := ItemLedgerEntry."Unit of Measure Code";
            //    lPurchRcptLine.Correction := TRUE;
            //    lPurchRcptLine."Location Code" := ItemLedgerEntry."Location Code";
            //    lPurchRcptLine."Buy-from Vendor No." := ItemLedgerEntry."Source No.";
            //    lPurchRcptLine."Season Code" := ItemLedgerEntry."Season Code";
            //    lPurchRcptLine."Sub-Season Code" := ItemLedgerEntry."Sub-Season Code";
            //    lPurchRcptLine."Qty. per Unit of Measure" := ItemLedgerEntry."Qty. per Unit of Measure";
            //    lPurchRcptLine.INSERT;
            //    lLineNo += 10000;
            //      lPurchRcptLine.RESET;
            //      lPurchRcptLine.SETRANGE("Document No.",ItemLedgerEntry."Document No.");
            //      lPurchRcptLine.SETRANGE("No.",ItemLedgerEntry."Item No.");
            //      lPurchRcptLine.SETRANGE("Variant Code",ItemLedgerEntry."Variant Code");
            //      lPurchRcptLine.SETRANGE("Line No.",lLineNo);
            //      lPurchRcptLine.FINDFIRST;
            //      lPurchRcptLine."Qty. per Unit of Measure" := ItemLedgerEntry."Qty. per Unit of Measure";
            //      lPurchRcptLine."Sub-Season Code" := ItemLedgerEntry."Sub-Season Code";
            //      lPurchRcptLine.MODIFY;
            //      lLineNo += 10000;
            //  UNTIL ItemLedgerEntry.NEXT=0;
            // END;
            // MESSAGE('done puch rcp.');


            //lLineNo := 10000;
            // ItemLedgerEntry.RESET;
            // ItemLedgerEntry.SETCURRENTKEY("Document No.","Document Type","Document Line No.");
            // ItemLedgerEntry.SETRANGE("Document Type",ItemLedgerEntry."Document Type"::"Purchase Credit Memo");
            // ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Purchase);
            // IF ItemLedgerEntry.FINDSET THEN BEGIN
            //  REPEAT
            //    lPurchRcptHeader.INIT;
            //    lPurchRcptHeader."No." := ItemLedgerEntry."Document No.";
            //    lPurchRcptHeader."Buy-from Vendor No." := ItemLedgerEntry."Source No.";
            //    lPurchRcptHeader."Posting Date" := ItemLedgerEntry."Posting Date";
            //    lPurchRcptHeader."Document Date" := ItemLedgerEntry."Document Date";
            //    lPurchRcptHeader."Order Date" := ItemLedgerEntry."Posting Date";
            //    lPurchRcptHeader.Correction := TRUE;
            //    lPurchRcptHeader."Location Code" := ItemLedgerEntry."Location Code";
            //    lPurchRcptHeader."Pay-to Vendor No." := ItemLedgerEntry."Source No.";
            //    IF lPurchRcptHeader.INSERT THEN;
            //  UNTIL ItemLedgerEntry.NEXT=0;
            // END;
            // MESSAGE('done puch rcp. 2');

            //
            // SalesLine.GET(SalesLine."Document Type"::Order,'W10074817',40000);
            // SalesLine."Qty. Shipped Not Invd. (Base)" := 0;
            // SalesLine."Qty. Shipped Not Invoiced" := 0;
            // SalesLine.MODIFY;
            // MESSAGE('done');
            ModistSetup.GET;
               lItem.RESET;
               lItem.FINDSET;
               REPEAT
                 lItemDistribution.RESET;
                 lItemDistribution.SETRANGE(Code,ModistSetup."Farfetch Item Dist. Code");
                 lItemDistribution.SETRANGE("Item No.",lItem."No.");
                 IF lItemDistribution.FINDFIRST THEN BEGIN
                   lItemVariant.RESET;
                   lItemVariant.SETRANGE("Item No.",lItem."No.");
                   IF lItemVariant.FINDSET THEN BEGIN
                     REPEAT
                       IF CreateAction(lItemVariant.RECORDID,'StockSynch',3,lItem.RECORDID) THEN;
                     UNTIL lItemVariant.NEXT=0;
                   END;
                 END;
               UNTIL lItem.NEXT=0;
               MESSAGE('done ff items');
          END;

  }
  CODE
  {
    VAR
      LicenceInf@1000000000 : Record 2000000040;
      MaxUsers@1000000001 : Integer;
      DateTimeFilter@1000000003 : Text;
      FileRec@1000000002 : Record 2000000022;
      ModistSetup@1000000004 : Record 50000;
      SalesLine@1000000005 : Record 37;
      SalesLine2@1000000006 : Record 37;

    [EventSubscriber(Table,330,OnAfterModifyEvent)]
    LOCAL PROCEDURE CurrencyExchangeRate_AfterModify@1000000000(VAR Rec@1000000000 : Record 330;VAR xRec@1000000001 : Record 330;RunTrigger@1000000002 : Boolean);
    VAR
      CurrencyLatestER@1000000003 : Record 50015;
      CurrencyExchangeRate@1000000007 : Record 330;
      CurrencyFactor@1000000006 : Decimal;
      ExchangeRateAmt@1000000005 : Decimal;
      ExchangeRateDate@1000000004 : Date;
    BEGIN

      WITH CurrencyLatestER DO BEGIN

        IF NOT GET(Rec."Currency Code") THEN BEGIN
          "Currency Code" := Rec."Currency Code";
          INSERT;
        END;

        "Currency Factor" := CurrencyExchangeRate.GetCurrentCurrencyFactor("Currency Code");
        CurrencyExchangeRate.GetLastestExchangeRate("Currency Code","Starting Date","Exchange Rate");
        MODIFY;

      END;
    END;

    PROCEDURE "--TMFunctions--"@1000000001();
    BEGIN
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,"No.")]
    PROCEDURE SalesLineExchange_BeforeValidateNo@1000000010(VAR Rec@1000000000 : Record 37;VAR xRec@1000000001 : Record 37;CurrFieldNo@1000000004 : Integer);
    VAR
      lSaleaHeader@1000000005 : Record 36;
      lSalesLine@1000000002 : Record 37;
      lText001@1000000003 : TextConst 'ENU=You are only allowed to Exchange the same item with different Size.';
      lReturnReceiptLine@1000000006 : Record 6661;
      lSalesShipmentLine@1000000007 : Record 111;
    BEGIN
      //DOC TM0020 AW 10/09/17
      WITH Rec DO BEGIN
        IF CurrFieldNo <> FIELDNO("No.") THEN
          EXIT;
        IF ISTEMPORARY THEN
          EXIT;
        IF NOT lSaleaHeader.GET("Document Type","Document No.") THEN
          EXIT;
        IF NOT lSaleaHeader."Exahange Order" THEN
          EXIT;
        IF "Document Type" <> "Document Type"::Order THEN
          EXIT;
        IF Type <> Type::Item THEN
          EXIT;
        IF NOT ModistSetup.GET THEN
          EXIT;
        IF NOT ModistSetup."Exchange With Same Item" THEN
          EXIT;

        lSalesShipmentLine.RESET;
        lSalesShipmentLine.SETCURRENTKEY("Order No.");
        lSalesShipmentLine.SETRANGE("Order No.",lSaleaHeader."Origianl Order No.");
        lSalesShipmentLine.SETRANGE(Type,Type::Item);
        lSalesShipmentLine.SETRANGE("No.","No.");
        //IF lSalesShipmentLine.ISEMPTY THEN
          //ERROR(lText001);
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeInsertEvent)]
    PROCEDURE SalesLineExchange_BeforeInsert@1000000013(VAR Rec@1000000000 : Record 37;RunTrigger@1000000001 : Boolean);
    VAR
      lSalesHeader@1000000002 : Record 36;
    BEGIN
      //DOC TM0020 AW 10/09/17
      WITH Rec DO BEGIN
        IF lSalesHeader.GET("Document Type","Document No.") THEN BEGIN
          "Exahange Order" := lSalesHeader."Exahange Order";
          "Origianl Order No." := lSalesHeader."Origianl Order No.";
        END;
      END;
    END;

    [EventSubscriber(Table,454,OnBeforeInsertEvent)]
    PROCEDURE WorkflowUserGroupSufficientApprover@1000000002(VAR Rec@1000000000 : Record 454;RunTrigger@1000000004 : Boolean);
    VAR
      lUserSetup@1000000002 : Record 91;
      lApproverSetup@1000000005 : Record 91;
      lApprovalEntry@1000000003 : Record 454;
      lApprovalsMgmt@1000000001 : Codeunit 1535;
    BEGIN
      //DOC TM0002 AW 13/08/17
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF "Approval Type" <> "Approval Type"::"Workflow User Group" THEN
          EXIT;
        IF NOT ModistSetup.GET THEN
          EXIT;

        //For scalability...
        CASE "Table ID" OF
          DATABASE::"Purchase Header":
            BEGIN
              IF ("Document Type" = "Document Type"::Invoice) AND (NOT ModistSetup."Enable WUG Suff. Purch. App.") THEN
                EXIT;
            END;
          ELSE
            EXIT; //Other CASEs will be added in the future.
        END;

        lApprovalEntry.RESET;
        lApprovalEntry.SETCURRENTKEY("Record ID to Approve","Workflow Step Instance ID","Sequence No.");
        lApprovalEntry.SETRANGE("Record ID to Approve","Record ID to Approve");
        lApprovalEntry.SETRANGE("Workflow Step Instance ID","Workflow Step Instance ID");
        lApprovalEntry.SETFILTER("Sequence No.",'<%1',"Sequence No.");
        IF lApprovalEntry.FINDLAST THEN BEGIN
          lUserSetup.GET(lApprovalEntry."Approver ID");
          lApproverSetup.GET("Approver ID");
          IF (lApprovalsMgmt.IsSufficientApprover(lUserSetup,Rec)) AND (lApproverSetup."Unlimited Purchase Approval") THEN
            Status := Status::Canceled;
        END;
      END;
    END;

    [EventSubscriber(Table,477,OnAfterInsertEvent,"",Skip,Skip)]
    PROCEDURE DoSendReportNotification@1000000007(VAR Rec@1000000000 : Record 477;RunTrigger@1000000001 : Boolean);
    VAR
      lTempBLOB@1000000004 : TEMPORARY Record 99008535;
      lEmailItem@1000000006 : Record 9500;
      lJobQueueEntry@1000000007 : Record 472;
      lFileManagement@1000000003 : Codeunit 419;
      lReader@1000000008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlTextReader";
      lServerTmpFile@1000000005 : Text;
      lEmails@1000000011 : Text;
      OutStream@1000000009 : OutStream;
    BEGIN
      //DOC TM0003 AW 06/09/17
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF NOT lJobQueueEntry.GET("Job Queue Log Entry ID") THEN
          EXIT;

        IF NOT Notifiy(lJobQueueEntry) THEN
          EXIT;

        IF lJobQueueEntry."Email Notification" THEN BEGIN
          IF lJobQueueEntry."Notification User Group" = '' THEN
            EXIT;
          lEmails := GetNotificationEmails(lJobQueueEntry."Notification User Group");
          lTempBLOB.INIT;
          lTempBLOB.Blob := "Report Output";
          lServerTmpFile := lFileManagement.ServerTempFileName(GetSuffix(Rec));
          lFileManagement.BLOBExportToServerFile(lTempBLOB,lServerTmpFile);
          lEmailItem.Init;
          lEmailItem."Send to" := lEmails;
          IF lEmailItem."Send to" = '' THEN
            EXIT;
          lEmailItem."From Name" := COMPANYNAME;
          lEmailItem.SetBodyText(STRSUBSTNO(lJobQueueEntry.Description));
          lEmailItem."Attachment File Path" := lServerTmpFile;
          lEmailItem."Attachment Name" := Description + GetSuffix(Rec);
          lEmailItem.Subject := lJobQueueEntry.Description;
          lEmailItem.Send(TRUE);
         // lEmailItem.INSERT; //Log
        END;
      END;
    END;

    LOCAL PROCEDURE GetNotificationEmails@1000000036(pUserGroup@1000000000 : Code[20]) lEmails : Text;
    VAR
      lUserGroupMember@1000000002 : Record 9001;
      lUserSetup@1000000001 : Record 91;
    BEGIN
      //DOC TM0003 AW 06/09/17
      lUserGroupMember.RESET;
      lUserGroupMember.SETRANGE("User Group Code",pUserGroup);
      IF lUserGroupMember.FINDSET THEN BEGIN
        REPEAT
          lUserGroupMember.CALCFIELDS("User Name");
          lUserSetup.GET(lUserGroupMember."User Name");
          IF lUserSetup."E-Mail" <> '' THEN BEGIN
            IF lEmails = '' THEN
              lEmails := lUserSetup."E-Mail"
            ELSE
              lEmails += ';' + lUserSetup."E-Mail";
          END;
        UNTIL lUserGroupMember.NEXT=0;
      END;
    END;

    LOCAL PROCEDURE Notifiy@1000000017(pJobQueueEntry@1000000003 : Record 472) : Boolean;
    VAR
      lUserGroupMember@1000000005 : Record 9001;
      lUserSetup@1000000004 : Record 91;
    BEGIN
      //DOC TM0003 AW 06/09/17
      WITH pJobQueueEntry DO BEGIN
        EXIT (NOT (("Notification User Group" = '') AND
             (NOT "Email Notification") AND
             (NOT "Slack Notification")))
      END;
    END;

    LOCAL PROCEDURE GetSuffix@1000000009(pReportInbox@1000000000 : Record 477) : Text;
    BEGIN
      //DOC TM0003 AW 06/09/17
       WITH pReportInbox DO BEGIN
        CASE "Output Type" OF
          "Output Type"::Excel: EXIT('.xlsx');
          "Output Type"::PDF  : EXIT('.pdf');
          "Output Type"::Word : EXIT('.docx');
        END;
       END;
    END;

    [EventSubscriber(Table,9062736,OnAfterInsertEvent,"",Skip,Skip)]
    PROCEDURE OnIntegrationLogError@1000000003(VAR Rec@1000000000 : Record 9062736;RunTrigger@1000000001 : Boolean);
    VAR
      lEmailItem@1000000002 : TEMPORARY Record 9500;
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF Status <> Status::Error THEN
          EXIT;
        TrySendEmail(Rec);
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE TrySendEmail@1000000004(pAutoNAVTaskLogEntry@1000000000 : Record 9062736);
    VAR
      lEmailItem@1000000001 : TEMPORARY Record 9500;
    BEGIN
      WITH pAutoNAVTaskLogEntry DO BEGIN
        lEmailItem.Init;
        lEmailItem."Send to" := 'red.bamba@themodist.com;mais.qumsieh@themodist.com';
        lEmailItem."Send CC" := 'amr.wafa@themodist.com';
        lEmailItem."From Name" := COMPANYNAME;
        lEmailItem.SetBodyText(Description);
        lEmailItem.Subject := "AutoNAV Task Queue Code" + ' ' + "Object Caption to Run";
        lEmailItem.Send(TRUE);
        lEmailItem.INSERT; //Log
      END;
    END;

    [EventSubscriber(Table,50008,OnAfterInsertEvent,"",Skip,Skip)]
    PROCEDURE OnSalesPaymentFailureAfterInsert@1000000005(VAR Rec@1000000000 : Record 50008;RunTrigger@1000000001 : Boolean);
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF Status <> Status::Failed THEN
          EXIT;
        TrySendEmailFailPayments(Rec);
      END;
    END;

    [EventSubscriber(Table,50008,OnAfterModifyEvent,"",Skip,Skip)]
    PROCEDURE OnSalesPaymentFailureAfterModify@1000000008(VAR Rec@1000000000 : Record 50008;VAR xRec@1000000001 : Record 50008;RunTrigger@1000000002 : Boolean);
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF Status <> Status::Failed THEN
          EXIT;
        TrySendEmailFailPayments(Rec);
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE TrySendEmailFailPayments@1000000011(pSalesPayments@1000000000 : Record 50008);
    VAR
      lEmailItem@1000000001 : TEMPORARY Record 9500;
    BEGIN
      WITH pSalesPayments DO BEGIN
        lEmailItem.Init;
        lEmailItem."Send to" := 'red.bamba@themodist.com;mais.qumsieh@themodist.com';
        lEmailItem."Send CC" := 'amr.wafa@themodist.com;ines.martins@themodist.com';
        lEmailItem."From Name" := COMPANYNAME;
        lEmailItem.SetBodyText('Order No: ' + "Internet Order No." + ' Payment Type: ' + FORMAT("Payment Type") + ' Card Type: ' + "Card Type" + ' Description: ' + "Error Text");
        lEmailItem.Subject := 'Failed Payment Capture';
        lEmailItem.Send(TRUE);
        //lEmailItem.INSERT; //Log
      END;
    END;

    [EventSubscriber(Table,50008,OnBeforeInsertEvent,"",Skip,Skip)]
    PROCEDURE OnBeforeSalesPaymentInsert@1000000006(VAR Rec@1000000000 : Record 50008;RunTrigger@1000000001 : Boolean);
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        "Date Created" := TODAY;
        "Time Created" := TIME;
      END;
    END;

    [EventSubscriber(Table,50008,OnBeforeModifyEvent,"",Skip,Skip)]
    PROCEDURE OnBeforeSalesPaymentModify@1000000014(VAR Rec@1000000000 : Record 50008;VAR xRec@1000000001 : Record 50008;RunTrigger@1000000002 : Boolean);
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        "Last Date Modified" := TODAY;
        "Last Time Modified" := TIME;
      END;
    END;

    [EventSubscriber(Table,15,OnAfterInsertEvent,"",Skip,Skip)]
    PROCEDURE OnInsertGLAccount@1000000012(VAR Rec@1000000000 : Record 15;RunTrigger@1000000001 : Boolean);
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF NOT RunTrigger THEN
          EXIT;
        InsertModifyGLAccountInCompany(Rec,TRUE);
      END;
    END;

    [EventSubscriber(Table,15,OnAfterModifyEvent,"",Skip,Skip)]
    PROCEDURE OnModifyGLAccount@1000000015(VAR Rec@1000000000 : Record 15;VAR xRec@1000000001 : Record 15;RunTrigger@1000000002 : Boolean);
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF NOT RunTrigger THEN
          EXIT;
        InsertModifyGLAccountInCompany(Rec,FALSE);
      END;
    END;

    LOCAL PROCEDURE InsertModifyGLAccountInCompany@1000000019(pGLAccount@1000000000 : Record 15;pInsert@1000000003 : Boolean);
    VAR
      lCompany@1000000001 : Record 2000000006;
      lGLAccount@1000000002 : Record 15;
    BEGIN
      lCompany.RESET;
      lCompany.SETFILTER(Name,'<>%1',COMPANYNAME);
      IF lCompany.FINDSET THEN BEGIN
        REPEAT
          lGLAccount.RESET;
          lGLAccount.CHANGECOMPANY(lCompany.Name);
          lGLAccount := pGLAccount;
          IF pInsert THEN BEGIN
            IF lGLAccount.INSERT THEN;
          END ELSE BEGIN
            IF lGLAccount.INSERT THEN;
            IF lGLAccount.MODIFY THEN;
          END;
        UNTIL lCompany.NEXT=0;
      END;
    END;

    [EventSubscriber(Table,36,OnAfterValidateEvent,"Sell-to Customer No.")]
    PROCEDURE SalesICPartnerOnAfterValidate@1000000016(VAR Rec@1000000000 : Record 36;VAR xRec@1000000001 : Record 36;CurrFieldNo@1000000002 : Integer);
    BEGIN
      WITH Rec DO BEGIN
        Intercompany := "Sell-to IC Partner Code" <> '';
      END;
    END;

    [EventSubscriber(Table,38,OnAfterValidateEvent,"Buy-from Vendor No.")]
    PROCEDURE PurchaseICPartnerOnAfterValidate@1000000022(VAR Rec@1000000000 : Record 38;VAR xRec@1000000001 : Record 38;CurrFieldNo@1000000002 : Integer);
    BEGIN
      WITH Rec DO BEGIN
        Intercompany := "Buy-from IC Partner Code" <> '';
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeInsertEvent)]
    PROCEDURE SalesLineICPartnerOnAfterValidate@1000000020(VAR Rec@1000000000 : Record 37;RunTrigger@1000000001 : Boolean);
    VAR
      lSalesHeader@1000000003 : Record 36;
    BEGIN
      WITH Rec DO BEGIN
        IF NOT lSalesHeader.GET("Document Type","Document No.") THEN
          EXIT;
        Intercompany := lSalesHeader.Intercompany;
      END;
    END;

    [EventSubscriber(Table,39,OnBeforeInsertEvent)]
    PROCEDURE PurchaseLineICPartnerOnAfterValidate@1000000018(VAR Rec@1000000000 : Record 39;RunTrigger@1000000001 : Boolean);
    VAR
      lPurchaseHeader@1000000003 : Record 38;
    BEGIN
      WITH Rec DO BEGIN
        IF NOT lPurchaseHeader.GET("Document Type","Document No.") THEN
          EXIT;
        Intercompany := lPurchaseHeader.Intercompany;
      END;
    END;

    [EventSubscriber(Table,36,OnBeforeInsertEvent)]
    PROCEDURE OnInternetOrderConversion_SalesHeaderOnInsert@1000000021(VAR Rec@1000000000 : Record 36;RunTrigger@1000000001 : Boolean);
    VAR
      lSalesInvoiceHeader@1000000002 : Record 112;
      lSalesShipmentHeader@1000000003 : Record 110;
      lText000@1000000004 : TextConst 'ENU=Internet Order %1 is already posted.';
    BEGIN
      //DOC TM0017 AW 15/01/2018
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF "Document Type" <> "Document Type"::Order THEN
          EXIT;
        IF "Internet Order Reference" = '' THEN
          EXIT;
        lSalesInvoiceHeader.RESET;
        lSalesInvoiceHeader.SETCURRENTKEY("Order No.");
        lSalesShipmentHeader.RESET;
        lSalesShipmentHeader.SETCURRENTKEY("Order No.");

        lSalesInvoiceHeader.SETRANGE("Order No.","No.");
        IF NOT lSalesInvoiceHeader.ISEMPTY THEN
          ERROR(lText000,"No.");
        lSalesShipmentHeader.SETRANGE("Order No.","No.");
        IF NOT lSalesShipmentHeader.ISEMPTY THEN
          ERROR(lText000,"No.");
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeInsertEvent,"",Skip,Skip)]
    PROCEDURE OnBeforeSalesLineInsert_CustPriceGroupDiff@1000000024(VAR Rec@1000000000 : Record 37;RunTrigger@1000000001 : Boolean);
    BEGIN
      //DOC TM0016 AW 22/01/18
      WITH Rec DO BEGIN
        GetCustomerPriceGroupForItem(Rec);
      END;
    END;

    [EventSubscriber(Table,37,OnBeforeModifyEvent,"",Skip,Skip)]
    PROCEDURE OnBeforeSalesLineModify_CustPriceGroupDiff@1000000029(VAR Rec@1000000000 : Record 37;VAR xRec@1000000001 : Record 37;RunTrigger@1000000002 : Boolean);
    BEGIN
      //DOC TM0016 AW 22/01/18
      WITH Rec DO BEGIN
        GetCustomerPriceGroupForItem(Rec);
      END;
    END;

    LOCAL PROCEDURE GetCustomerPriceGroupForItem@1000000023(VAR pSalesLine@1000000000 : Record 37);
    VAR
      lSalesHeader@1000000002 : Record 36;
      lSalesPrice@1000000004 : Record 7002;
      lTmpSalesPrice@1000000003 : TEMPORARY Record 7002;
      lSalesPriceCalcMgt@1000000001 : Codeunit 7000;
    BEGIN
      //DOC TM0016 AW 22/01/18
      WITH pSalesLine DO BEGIN
        IF Type <> Type::Item THEN
          EXIT;
        IF "No." = '' THEN
          EXIT;
        IF "Unit Price" = 0 THEN
          EXIT;
        IF "Quantity (Base)" = 0 THEN
          EXIT;

        "Customer Price Group" := 'FULL';
        CLEAR(lSalesHeader);
        IF lSalesHeader.GET("Document Type","Document No.") THEN BEGIN
          lSalesPrice.RESET;
          lSalesPrice.SETRANGE("Item No.","No.");
          lSalesPrice.SETFILTER("Variant Code",'%1|%2',"Variant Code",'');
          lSalesPrice.SETFILTER("Ending Date",'%1|>=%2',0D,lSalesHeader."Order Date");
          lSalesPrice.SETFILTER("Currency Code",'%1|%2',lSalesHeader."Currency Code",'');
          IF "Unit of Measure Code" <> '' THEN
            lSalesPrice.SETFILTER("Unit of Measure Code",'%1|%2',"Unit of Measure Code",'');
          lSalesPrice.SETRANGE("Starting Date",0D,lSalesHeader."Order Date");
          lSalesPrice.SETFILTER("Unit Price",'%1..%2',("Unit Price" + ("Product Tax Amount" / "Quantity (Base)") + "Duty Amount") - 1,("Unit Price" + ("Product Tax Amount" / "Quantity (Base)") + "Duty Amount") + 1);
          IF lSalesPrice.FINDFIRST THEN
            "Customer Price Group" := lSalesPrice."Sales Code";
        END;
      END;
    END;

    [EventSubscriber(Table,50013,OnAfterInsertEvent,"",Skip,Skip)]
    PROCEDURE GACOrderUpdate_OnAfterInsert@1000000025(VAR Rec@1000000000 : Record 50013;RunTrigger@1000000001 : Boolean);
    VAR
      lEmailItem@1000000002 : TEMPORARY Record 9500;
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF "Error Text" = '' THEN
          EXIT;
        lEmailItem.Init;
        lEmailItem."Send to" := 'red.bamba@themodist.com;mais.qumsieh@themodist.com';
        lEmailItem."Send CC" := 'amr.wafa@themodist.com';
        lEmailItem."From Name" := COMPANYNAME;
        lEmailItem.SetBodyText('Order No: ' + "Document No." + ' Failed to process due to: ' + "Error Text");
        lEmailItem.Subject := 'Failed Order Processing';
        lEmailItem.Send(TRUE);
      END;
    END;

    [EventSubscriber(Table,50013,OnAfterModifyEvent,"",Skip,Skip)]
    PROCEDURE GACOrderUpdate_OnAfterModify@1000000031(VAR Rec@1000000000 : Record 50013;VAR xRec@1000000001 : Record 50013;RunTrigger@1000000003 : Boolean);
    VAR
      lEmailItem@1000000002 : TEMPORARY Record 9500;
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF "Error Text" = '' THEN
          EXIT;
        lEmailItem.Init;
        lEmailItem."Send to" := 'red.bamba@themodist.com;mais.qumsieh@themodist.com';
        lEmailItem."Send CC" := 'amr.wafa@themodist.com';
        lEmailItem."From Name" := COMPANYNAME;
        lEmailItem.SetBodyText('Order No: ' + "Document No." + ' Failed to process due to: ' + "Error Text");
        lEmailItem.Subject := 'Failed Order Processing';
        lEmailItem.Send(TRUE);
      END;
    END;

    [EventSubscriber(Table,36,OnBeforeInsertEvent)]
    PROCEDURE OnCreateSalesOrderInFZ_OnBeforeInsertSalesHeader@1000000026(VAR Rec@1000000000 : Record 36;RunTrigger@1000000001 : Boolean);
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF (USERID = 'AMR.WAFA') OR (USERID = 'NAVSERVER\AMR') OR (USERID = 'FINANCE1') OR (USERID = 'ANA.INES') OR (USERID = 'NAVSERVER\NAVSERVICE') OR (USERID = 'ROSHELA.FLESTADO') OR (USERID = 'VARSHA.KALWANI') THEN
          EXIT;
        IF COMPANYNAME = 'The Modist FZ LLC' THEN
          ERROR('Your are not allowed to insert data in this company.');
      END;
    END;

    [EventSubscriber(Codeunit,22,OnAfterPostItemJnlLine,"",Skip,Skip)]
    PROCEDURE SendRefundNotification_OnAfterPostItemJrnl@1000000027(VAR ItemJournalLine@1000000000 : Record 83);
    BEGIN
      // WITH ItemJournalLine DO BEGIN
      //  IF ISTEMPORARY THEN
      //    EXIT;
      //  IF "Document Type" <> "Document Type"::"Sales Return Receipt" THEN
      //    EXIT;
      //
      // END;
    END;

    [EventSubscriber(Table,5401,OnAfterInsertEvent,"",Skip,Skip)]
    PROCEDURE OnAfterInsertEvent_ItemVariantMissingData@1000000028(VAR Rec@1000000000 : Record 5401;RunTrigger@1000000001 : Boolean);
    VAR
      lItem@1000000002 : Record 27;
    BEGIN
      WITH Rec DO BEGIN
        IF "Item No." = '' THEN
          EXIT;
        lItem.GET("Item No.");
        IF "Brand Code" = '' THEN
          "Brand Code" := lItem."Brand Code";
        IF "Season Code" = '' THEN
          "Season Code" := lItem."Season Code";
        IF "Sub-Season Code" = '' THEN
          "Sub-Season Code" := lItem."Sub-Season Code";
        IF "Style No." = '' THEN
          "Style No." := lItem."Style No.";
        IF "Division Code" = '' THEN
          "Division Code" := lItem."Division Code";
        IF "Group Code" = '' THEN
          "Group Code" := lItem."Group Code";
        IF "Category Code" = '' THEN
          "Category Code" := lItem."Category Code";
        IF "Colour Code" = '' THEN
          "Colour Code" := lItem."Colour Code";
        IF "Size Group Code" = '' THEN
          "Size Group Code" := lItem."Size Group Code";
      END;
    END;

    [EventSubscriber(Table,330,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertEvent_ICExchangeRate@1000000030(VAR Rec@1000000000 : Record 330;RunTrigger@1000000001 : Boolean);
    VAR
      lCompany@1000000002 : Record 2000000006;
      lCurrencyExchangeRate@1000000003 : Record 330;
    BEGIN
      WITH Rec DO BEGIN
      IF ISTEMPORARY THEN
        EXIT;
        lCompany.RESET;
        lCompany.SETFILTER(Name,'<>%1',COMPANYNAME);
        IF lCompany.FINDSET THEN BEGIN
          REPEAT
            lCurrencyExchangeRate.RESET;
            lCurrencyExchangeRate.CHANGECOMPANY(lCompany.Name);
            lCurrencyExchangeRate.INIT;
            lCurrencyExchangeRate := Rec;
            IF lCurrencyExchangeRate.INSERT THEN;
          UNTIL lCompany.NEXT=0;
        END;
      END;
    END;

    [EventSubscriber(Table,36,OnAfterValidateEvent,"Ship-to Country/Region Code")]
    PROCEDURE OnAfterValidateEvent_VATBusPostingGrpShipToCountry@1000000032(VAR Rec@1000000000 : Record 36;VAR xRec@1000000001 : Record 36;CurrFieldNo@1000000002 : Integer);
    VAR
      lCountryRegion@1000000003 : Record 9;
    BEGIN
      WITH Rec DO BEGIN
        //IF "Internet Order Reference" <> '' THEN
          //EXIT;
        IF "Ship-to Country/Region Code" = '' THEN
          EXIT;
        lCountryRegion.GET("Ship-to Country/Region Code");
        IF lCountryRegion."VAT Bus. Posting Group" <> '' THEN
          VALIDATE("VAT Bus. Posting Group",lCountryRegion."VAT Bus. Posting Group");
      END;
    END;

    [EventSubscriber(Codeunit,22,OnAfterInsertItemLedgEntry,"",Skip,Skip)]
    PROCEDURE OnAfterInsertItemLedgEntry_SynchFarfetchStock@1000000033(VAR ItemLedgerEntry@1000000000 : Record 32;VAR ItemJournalLine@1000000001 : Record 83);
    VAR
      lItem@1000000004 : Record 27;
      lItemVariant@1170000000 : Record 5401;
      lItemDistribution@1000000003 : Record 50026;
      lRecID@1000000002 : RecordID;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF NOT ModistSetup.GET THEN
          EXIT;
        IF ModistSetup."Farfetch Item Dist. Code" = '' THEN
          EXIT;

        lItemDistribution.RESET;
        lItemDistribution.SETRANGE(Code,ModistSetup."Farfetch Item Dist. Code");
        lItemDistribution.SETRANGE("Item No.","Item No.");
        lItemDistribution.SETRANGE("Location Code","Location Code");
        IF NOT lItemDistribution.FINDFIRST THEN
          EXIT;
        IF "Variant Code" <> '' THEN BEGIN
          lItemVariant.GET("Item No.","Variant Code");
          IF CreateAction(lItemVariant.RECORDID,'StockSynch',0,ItemLedgerEntry.RECORDID) THEN;
        END ELSE BEGIN
          lItemVariant.RESET;
          lItemVariant.SETRANGE("Item No.","Item No.");
          IF lItemVariant.FINDSET THEN BEGIN
            REPEAT
              IF CreateAction(lItemVariant.RECORDID,'StockSynch',0,ItemLedgerEntry.RECORDID) THEN;
            UNTIL lItemVariant.NEXT=0;
          END;
        END;
      END;
    END;

    [EventSubscriber(Table,37,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertSalesLine_SynchFarfetchStock@1170000000(VAR Rec@1170000000 : Record 37;RunTrigger@1170000001 : Boolean);
    VAR
      lItem@1170000005 : Record 27;
      lItemVariant@1170000004 : Record 5401;
      lItemDistribution@1170000003 : Record 50026;
      lRecID@1170000002 : RecordID;
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF ("Document Type" <> "Document Type"::Order) AND ("Document Type" <> "Document Type"::Invoice) THEN
          EXIT;
        IF "No." = '' THEN
          EXIT;
        IF Type <> Type::Item THEN
          EXIT;
        IF NOT ModistSetup.GET THEN
          EXIT;
        IF ModistSetup."Farfetch Item Dist. Code" = '' THEN
          EXIT;

        lItemDistribution.RESET;
        lItemDistribution.SETRANGE(Code,ModistSetup."Farfetch Item Dist. Code");
        lItemDistribution.SETRANGE("Item No.","No.");
        lItemDistribution.SETRANGE("Location Code","Location Code");
        IF NOT lItemDistribution.FINDFIRST THEN
          EXIT;

        IF "Variant Code" <> '' THEN BEGIN
          lItemVariant.GET("No.","Variant Code");
          IF CreateAction(lItemVariant.RECORDID,'StockSynch',0,Rec.RECORDID) THEN;
        END ELSE BEGIN
          lItemVariant.RESET;
          lItemVariant.SETRANGE("Item No.","No.");
          IF lItemVariant.FINDSET THEN BEGIN
            REPEAT
              IF CreateAction(lItemVariant.RECORDID,'StockSynch',0,Rec.RECORDID) THEN;
            UNTIL lItemVariant.NEXT=0;
          END;
        END;

      END;
    END;

    [EventSubscriber(Table,37,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifySalesLine_SynchFarfetchStock@1170000010(VAR Rec@1170000000 : Record 37;VAR xRec@1170000001 : Record 37;RunTrigger@1170000006 : Boolean);
    VAR
      lItem@1170000005 : Record 27;
      lItemVariant@1170000004 : Record 5401;
      lItemDistribution@1170000003 : Record 50026;
      lRecID@1170000002 : RecordID;
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF ("Document Type" <> "Document Type"::Order) AND ("Document Type" <> "Document Type"::Invoice) THEN
          EXIT;
        IF "No." = '' THEN
          EXIT;
        IF Type <> Type::Item THEN
          EXIT;
        IF NOT ModistSetup.GET THEN
          EXIT;
        IF ModistSetup."Farfetch Item Dist. Code" = '' THEN
          EXIT;

        lItemDistribution.RESET;
        lItemDistribution.SETRANGE(Code,ModistSetup."Farfetch Item Dist. Code");
        lItemDistribution.SETRANGE("Item No.","No.");
        lItemDistribution.SETRANGE("Location Code","Location Code");
        IF NOT lItemDistribution.FINDFIRST THEN
          EXIT;

        IF "Variant Code" <> '' THEN BEGIN
          lItemVariant.GET("No.","Variant Code");
          IF CreateAction(lItemVariant.RECORDID,'StockSynch',1,Rec.RECORDID) THEN;
        END ELSE BEGIN
          lItemVariant.RESET;
          lItemVariant.SETRANGE("Item No.","No.");
          IF lItemVariant.FINDSET THEN BEGIN
            REPEAT
              IF CreateAction(lItemVariant.RECORDID,'StockSynch',1,Rec.RECORDID) THEN;
            UNTIL lItemVariant.NEXT=0;
          END;
        END;

      END;
    END;

    [EventSubscriber(Table,37,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteSalesLine_SynchFarfetchStock@1170000021(VAR Rec@1170000000 : Record 37;RunTrigger@1170000001 : Boolean);
    VAR
      lItem@1170000005 : Record 27;
      lItemVariant@1170000004 : Record 5401;
      lItemDistribution@1170000003 : Record 50026;
      lRecID@1170000002 : RecordID;
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF ("Document Type" <> "Document Type"::Order) AND ("Document Type" <> "Document Type"::Invoice) THEN
          EXIT;
        IF "No." = '' THEN
          EXIT;
        IF Type <> Type::Item THEN
          EXIT;
        IF NOT ModistSetup.GET THEN
          EXIT;
        IF ModistSetup."Farfetch Item Dist. Code" = '' THEN
          EXIT;

        lItemDistribution.RESET;
        lItemDistribution.SETRANGE(Code,ModistSetup."Farfetch Item Dist. Code");
        lItemDistribution.SETRANGE("Item No.","No.");
        lItemDistribution.SETRANGE("Location Code","Location Code");
        IF NOT lItemDistribution.FINDFIRST THEN
          EXIT;

        IF "Variant Code" <> '' THEN BEGIN
          lItemVariant.GET("No.","Variant Code");
          IF CreateAction(lItemVariant.RECORDID,'StockSynch',2,Rec.RECORDID) THEN;
        END ELSE BEGIN
          lItemVariant.RESET;
          lItemVariant.SETRANGE("Item No.","No.");
          IF lItemVariant.FINDSET THEN BEGIN
            REPEAT
              IF CreateAction(lItemVariant.RECORDID,'StockSynch',2,Rec.RECORDID) THEN;
            UNTIL lItemVariant.NEXT=0;
          END;
        END;

      END;
    END;

    [EventSubscriber(Table,9021667,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertInternetLine_SynchFarfetchStock@1170000008(VAR Rec@1170000000 : Record 9021667;RunTrigger@1170000001 : Boolean);
    VAR
      lItem@1170000005 : Record 27;
      lItemVariant@1170000004 : Record 5401;
      lItemDistribution@1170000003 : Record 50026;
      lRecID@1170000002 : RecordID;
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF "No." = '' THEN
          EXIT;
        IF Type <> Type::Item THEN
          EXIT;
        IF NOT ModistSetup.GET THEN
          EXIT;
        IF ModistSetup."Farfetch Item Dist. Code" = '' THEN
          EXIT;

        lItemDistribution.RESET;
        lItemDistribution.SETRANGE(Code,ModistSetup."Farfetch Item Dist. Code");
        lItemDistribution.SETRANGE("Item No.","No.");
        //lItemDistribution.SETRANGE("Location Code",ModistSetup);
        IF NOT lItemDistribution.FINDFIRST THEN
          EXIT;

        IF "Variant Code" <> '' THEN BEGIN
          lItemVariant.GET("No.","Variant Code");
          IF CreateAction(lItemVariant.RECORDID,'StockSynch',0,Rec.RECORDID) THEN;
        END ELSE BEGIN
          lItemVariant.RESET;
          lItemVariant.SETRANGE("Item No.","No.");
          IF lItemVariant.FINDSET THEN BEGIN
            REPEAT
              IF CreateAction(lItemVariant.RECORDID,'StockSynch',0,Rec.RECORDID) THEN;
            UNTIL lItemVariant.NEXT=0;
          END;
        END;

      END;
    END;

    [EventSubscriber(Table,9021667,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyInternetLine_SynchFarfetchStock@1170000001(VAR Rec@1170000000 : Record 9021667;VAR xRec@1170000001 : Record 9021667;RunTrigger@1170000002 : Boolean);
    VAR
      lItem@1170000006 : Record 27;
      lItemVariant@1170000005 : Record 5401;
      lItemDistribution@1170000004 : Record 50026;
      lRecID@1170000003 : RecordID;
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF "No." = '' THEN
          EXIT;
        IF Type <> Type::Item THEN
          EXIT;
        IF NOT ModistSetup.GET THEN
          EXIT;
        IF ModistSetup."Farfetch Item Dist. Code" = '' THEN
          EXIT;

        lItemDistribution.RESET;
        lItemDistribution.SETRANGE(Code,ModistSetup."Farfetch Item Dist. Code");
        lItemDistribution.SETRANGE("Item No.","No.");
        //lItemDistribution.SETRANGE("Location Code",ModistSetup);
        IF NOT lItemDistribution.FINDFIRST THEN
          EXIT;

        IF "Variant Code" <> '' THEN BEGIN
          lItemVariant.GET("No.","Variant Code");
          IF CreateAction(lItemVariant.RECORDID,'StockSynch',1,Rec.RECORDID) THEN;
        END ELSE BEGIN
          lItemVariant.RESET;
          lItemVariant.SETRANGE("Item No.","No.");
          IF lItemVariant.FINDSET THEN BEGIN
            REPEAT
              IF CreateAction(lItemVariant.RECORDID,'StockSynch',1,Rec.RECORDID) THEN;
            UNTIL lItemVariant.NEXT=0;
          END;
        END;

      END;
    END;

    [EventSubscriber(Table,9021667,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteInternetLine_SynchFarfetchStock@1170000002(VAR Rec@1170000000 : Record 9021667;RunTrigger@1170000001 : Boolean);
    VAR
      lItem@1170000005 : Record 27;
      lItemVariant@1170000004 : Record 5401;
      lItemDistribution@1170000003 : Record 50026;
      lRecID@1170000002 : RecordID;
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF "No." = '' THEN
          EXIT;
        IF Type <> Type::Item THEN
          EXIT;
        IF NOT ModistSetup.GET THEN
          EXIT;
        IF ModistSetup."Farfetch Item Dist. Code" = '' THEN
          EXIT;

        lItemDistribution.RESET;
        lItemDistribution.SETRANGE(Code,ModistSetup."Farfetch Item Dist. Code");
        lItemDistribution.SETRANGE("Item No.","No.");
        //lItemDistribution.SETRANGE("Location Code",ModistSetup);
        IF NOT lItemDistribution.FINDFIRST THEN
          EXIT;

        IF "Variant Code" <> '' THEN BEGIN
          lItemVariant.GET("No.","Variant Code");
          IF CreateAction(lItemVariant.RECORDID,'StockSynch',2,Rec.RECORDID) THEN;
        END ELSE BEGIN
          lItemVariant.RESET;
          lItemVariant.SETRANGE("Item No.","No.");
          IF lItemVariant.FINDSET THEN BEGIN
            REPEAT
              IF CreateAction(lItemVariant.RECORDID,'StockSynch',2,Rec.RECORDID) THEN;
            UNTIL lItemVariant.NEXT=0;
          END;
        END;

      END;
    END;

    [EventSubscriber(Page,31,OnAfterActionEvent,SyncFFStock)]
    LOCAL PROCEDURE OnAfterAction_SyncManual_SynchFarfetchStock@1170000009(VAR Rec@1170000000 : Record 27);
    VAR
      lItem@1170000004 : Record 27;
      lItemVariant@1170000003 : Record 5401;
      lItemDistribution@1170000002 : Record 50026;
      lRecID@1170000001 : RecordID;
    BEGIN

      WITH Rec DO BEGIN
        IF NOT ModistSetup.GET THEN
          EXIT;
        IF ModistSetup."Farfetch Item Dist. Code" = '' THEN
          EXIT;

        lItemDistribution.RESET;
        lItemDistribution.SETRANGE(Code,ModistSetup."Farfetch Item Dist. Code");
        lItemDistribution.SETRANGE("Item No.","No.");
        IF NOT lItemDistribution.FINDFIRST THEN
          ERROR('Item is not setup as Farfetch Item.');

        lItemVariant.RESET;
        lItemVariant.SETRANGE("Item No.","No.");
        IF lItemVariant.FINDSET THEN BEGIN
          REPEAT
            IF CreateAction(lItemVariant.RECORDID,'StockSynch',3,Rec.RECORDID) THEN;
          UNTIL lItemVariant.NEXT=0;
        END;
      END;
    END;

    [TryFunction]
    PROCEDURE CreateAction@1000000034(pRecID@1000000000 : RecordID;pProcessCode@1000000003 : Code[20];pMode@1000000002 : Integer;pActionLocation@1170000000 : RecordID);
    VAR
      lActions@1000000001 : Record 50025;
    BEGIN
      //pMode (0 = Insert, 1 = Modify, 2 = Delete)
      {
      WITH lActions DO BEGIN

        RESET;
        SETCURRENTKEY("Record ID","Process Code",Status);
        SETRANGE("Record ID",pRecID);
        SETRANGE("Process Code",'StockSynch');
        SETRANGE(Status,Status::Pending);
        IF NOT ISEMPTY THEN
          EXIT;
        RESET;

        "Entry No." := 0;
        "Record ID" := pRecID;
        "Process Code" := pProcessCode;
        CASE pMode OF
          0: Action := Action::Insert;
          1: Action := Action::Update;
          2: Action := Action::Delete;
        END;
        "Action Record Location" := pActionLocation;
        Status := Status::Pending;
        "Entry Date" := TODAY;
        "Entry Time" := TIME;
        "Entry User ID" := USERID;
        INSERT(TRUE);

        OnNewActionInserted(lActions);
      END;
      }
    END;

    [Integration]
    LOCAL PROCEDURE OnNewActionInserted@1000000039(VAR pAction@1000000000 : Record 50025);
    BEGIN
    END;

    [EventSubscriber(Codeunit,9087010,OnBeforeStyleModify)]
    PROCEDURE OnBeforeStyleModify_ModifyStyleDescription@1170000004(VAR pStyle@1170000000 : Record 9087012;pBuyingStagingLine@1170000001 : Record 9087017;VAR pModify@1170000002 : Boolean);
    BEGIN
      IF pStyle.Description <> pBuyingStagingLine.Description THEN BEGIN
        pStyle.VALIDATE(Description,pBuyingStagingLine.Description);
        pModify := TRUE;
      END;
    END;

    [EventSubscriber(Codeunit,9087010,OnAfterEnableSize)]
    PROCEDURE OnAfterEnableSize_LayuerProcess@1170000003(VAR pStyleColourSize@1170000000 : Record 9087014;pBuyingStagingHeader@1170000001 : Record 9087016;pOrdered@1170000003 : Boolean);
    VAR
      lModistSetup@1170000002 : Record 50000;
    BEGIN
      IF NOT lModistSetup.GET THEN
        EXIT;
      IF lModistSetup."Layer PO Excel Import Code" = '' THEN
        EXIT;
      IF lModistSetup."Layer PO Excel Import Code" <> pBuyingStagingHeader."Reference No." THEN
        EXIT;
      IF pOrdered THEN BEGIN
        pStyleColourSize.VALIDATE(Enabled,TRUE);
        pStyleColourSize.MODIFY(TRUE);
      END;
    END;

    [EventSubscriber(Page,9087045,OnBeforeActionEvent,ProcessAction)]
    LOCAL PROCEDURE OnBeforeActionEvent_ProcessAction_BS@1170000005(VAR Rec@1170000000 : Record 9087016);
    VAR
      lBuyingStagingLine@1170000001 : Record 9087017;
      lVendorColour@1170000002 : Record 9087004;
      lText000@1170000003 : TextConst 'ENU=Maximum string allowed for Vendor Colour is %1 Current Value is %2, Please change Vendor Colour Code for Vendor Style %3 to 20 Characters or below.';
    BEGIN
      WITH Rec DO BEGIN
        lBuyingStagingLine.RESET;
        lBuyingStagingLine.SETRANGE("Buying Staging No.","No.");
        lBuyingStagingLine.SETFILTER("Vendor Colour Code",'<>%1','');
        IF lBuyingStagingLine.FINDSET THEN BEGIN
          REPEAT
            IF STRLEN(lBuyingStagingLine."Vendor Colour Code") > MAXSTRLEN(lVendorColour.Code) THEN
              ERROR(lText000,MAXSTRLEN(lVendorColour.Code),STRLEN(lBuyingStagingLine."Vendor Colour Code"),lBuyingStagingLine."Vendor Style No.");
          UNTIL lBuyingStagingLine.NEXT=0;
        END;
      END;
    END;

    [EventSubscriber(Codeunit,12,OnBeforeApplToOldestFindApplCustLedgEntry)]
    LOCAL PROCEDURE OnBeforeApplToOldestFindApplCustLedgEntry_GetMatchedOnly@1170000006(VAR pOldCustLedgEntry@1170000000 : Record 21;pCVLedgerEntryBuffer@1170000001 : Record 382;pCust@1170000003 : Record 18;pGenJournalLine@1170000004 : Record 81);
    VAR
      lSalesReceivablesSetup@1170000002 : Record 311;
    BEGIN
      //DOC TM0058 AW 26/08/2018
      IF pGenJournalLine.IsApplied THEN
        EXIT;
      IF NOT lSalesReceivablesSetup.GET THEN
        EXIT;
      IF NOT lSalesReceivablesSetup."Appln. Match Exact Amount" THEN
        EXIT;
      IF pCust."Application Method" <> pCust."Application Method"::"Apply to Oldest" THEN
        EXIT;
      CASE pGenJournalLine."Document Type" OF
        pGenJournalLine."Document Type"::Payment       : pOldCustLedgEntry.SETRANGE("Document Type",pOldCustLedgEntry."Document Type"::Invoice);
        pGenJournalLine."Document Type"::Refund        : pOldCustLedgEntry.SETRANGE("Document Type",pOldCustLedgEntry."Document Type"::"Credit Memo");
        pGenJournalLine."Document Type"::Invoice       : pOldCustLedgEntry.SETRANGE("Document Type",pOldCustLedgEntry."Document Type"::Payment);
        pGenJournalLine."Document Type"::"Credit Memo" : pOldCustLedgEntry.SETRANGE("Document Type",pOldCustLedgEntry."Document Type"::Refund);
        ELSE
          EXIT;
      END;
      pOldCustLedgEntry.SETRANGE(Amount,-pCVLedgerEntryBuffer."Remaining Amount");
    END;

    [EventSubscriber(Codeunit,9021611,OnAfterConvertInternetOrderToSalesOrder)]
    LOCAL PROCEDURE OnAfterConterInternetOrderToSalesOrder_CheckReleasedStatus@1170000007(VAR pSalesHeader@1170000000 : Record 36);
    VAR
      lReleaseSalesDocument@1170000001 : Codeunit 414;
    BEGIN
      IF pSalesHeader.Status = pSalesHeader.Status::Released THEN
        EXIT;
      CLEAR(lReleaseSalesDocument);
      lReleaseSalesDocument.PerformManualRelease(pSalesHeader);  //DOC EC2013.4.671 MQ 08/12/2014 - GW141208 - not compatible earlier versions of NAV
    END;

    [EventSubscriber(Table,23,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnInsertVendor@1170000011(VAR Rec@1170000000 : Record 23;RunTrigger@1170000001 : Boolean);
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF NOT RunTrigger THEN
          EXIT;
        InsertModifyVendorInCompany(Rec,TRUE);
      END;
    END;

    [EventSubscriber(Table,23,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnModifyVendor@1170000012(VAR Rec@1170000000 : Record 23;VAR xRec@1170000001 : Record 23;RunTrigger@1170000002 : Boolean);
    BEGIN
      WITH Rec DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF NOT RunTrigger THEN
          EXIT;
        InsertModifyVendorInCompany(Rec,FALSE);
      END;
    END;

    LOCAL PROCEDURE InsertModifyVendorInCompany@1170000013(pVendor@1000000000 : Record 23;pInsert@1000000003 : Boolean);
    VAR
      lCompany@1000000001 : Record 2000000006;
      lVendor@1000000002 : Record 23;
    BEGIN

      lCompany.RESET;
      lCompany.SETFILTER(Name,'<>%1',COMPANYNAME);
      IF lCompany.FINDSET THEN BEGIN
        REPEAT
          lVendor.RESET;
          lVendor.CHANGECOMPANY(lCompany.Name);
          lVendor := pVendor;
          IF pInsert THEN BEGIN
            IF lVendor.INSERT THEN;
          END ELSE BEGIN
            IF lVendor.INSERT THEN;
            IF lVendor.MODIFY THEN;
          END;
        UNTIL lCompany.NEXT=0;
      END;
    END;

    [EventSubscriber(Codeunit,80,OnBeforePostSalesDoc)]
    LOCAL PROCEDURE OnBeforeSalesOrderPost_ValidateShipToCountryCode@1170000015(VAR SalesHeader@1170000000 : Record 36);
    BEGIN
      WITH SalesHeader DO BEGIN
        IF ISTEMPORARY THEN
          EXIT;
        IF "Ship-to Country/Region Code" = '' THEN
          ERROR('Ship-to Country Code is mandatory, it cannot be blank');
      END;
    END;

    [EventSubscriber(Table,37,OnAfterValidateEvent,"No.")]
    LOCAL PROCEDURE OnAfterValidateSalesLineItemApplyGiftOrderDiscount@1170000018(VAR Rec@1170000000 : Record 37;VAR xRec@1170000001 : Record 37;CurrFieldNo@1170000002 : Integer);
    BEGIN
      //DOC TM1011 AW 01/11/18
      ApplyGiftOrderDiscount(Rec);
    END;

    [EventSubscriber(Table,37,OnAfterValidateEvent,Quantity)]
    LOCAL PROCEDURE OnAfterValidateSalesLineItemQtyApplyGiftOrderDiscount@1170000017(VAR Rec@1170000000 : Record 37;VAR xRec@1170000001 : Record 37;CurrFieldNo@1170000002 : Integer);
    BEGIN
      //DOC TM1011 AW 01/11/18
      ApplyGiftOrderDiscount(Rec);
    END;

    [EventSubscriber(Table,37,OnAfterValidateEvent,"Unit Price")]
    LOCAL PROCEDURE OnAfterValidateSalesLineItemPriceApplyGiftOrderDiscount@1170000016(VAR Rec@1170000000 : Record 37;VAR xRec@1170000001 : Record 37;CurrFieldNo@1170000002 : Integer);
    BEGIN
      //DOC TM1011 AW 01/11/18
      ApplyGiftOrderDiscount(Rec);
    END;

    LOCAL PROCEDURE ApplyGiftOrderDiscount@1170000014(VAR pSalesLine@1170000000 : Record 37);
    VAR
      lSalesHeader@1170000002 : Record 36;
      lReasonCode@1170000001 : Record 231;
    BEGIN
      //DOC TM1011 AW 01/11/18
      WITH pSalesLine DO BEGIN
        IF Type <> Type::Item THEN
          EXIT;
        IF "No." = '' THEN
          EXIT;
        IF (lSalesHeader."Document Type" <> "Document Type") OR ("Document No." <> lSalesHeader."No.") THEN
          lSalesHeader.GET("Document Type","Document No.");
        IF lSalesHeader."Reason Code" = '' THEN
          EXIT;
        lReasonCode.GET(lSalesHeader."Reason Code");
        IF (lReasonCode."Discount %" = 0) OR (lReasonCode."Discount %" = "Line Discount %") THEN
          EXIT;
        VALIDATE("Line Discount %",lReasonCode."Discount %");
      END;
    END;

    BEGIN
    {
      //DOC OP9031 PCM 04/01/17 - Created.
      //DOC TM0002 AW 13/08/17 - New EventSubscriber to enable Sufficient Approval Functionality for "Workflow User Group"
      //DOC TM0003 AW 06/09/17 - POC - Auto send Scheduled Reports by Email
      //DOC TM0020 AW 10/09/17 - New Function for Exchange Process.
      //DOC TM0017 AW 15/01/18 - Stop creating duplicate orders if the order is already posted.
      //DOC TM0016 AW 22/01/18 - Differenciate between different Customer Price Groups.
      //DOC TM1011 AW 01/11/18 - Automatic apply Reason Code Discount
    }
    END.
  }
}

