OBJECT Page 11102073 OM - C/AL History Lines
{
  OBJECT-PROPERTIES
  {
    Date=19/11/15;
    Time=12:00:00 PM;
    Version List=OMA10.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=C/AL History Lines;
               ENU=C/AL History Lines;
               ESP=C/AL History Lines;
               FRA=C/AL History Lines;
               NLD=C/AL Historieregels;
               DEA=C/AL History Lines];
    LinksAllowed=No;
    SourceTable=Table11102053;
    DataCaptionExpr=CaptionExpr;
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    PromotedActionCategoriesML=ENU=New,Process,Report,Object,Edit,Debugger,Where-Used;
    ShowFilter=No;
    OnOpenPage=VAR
                 CALHistoryObject@1000 : Record 11102052;
                 SourceControl@1001 : Codeunit 11102050;
               BEGIN
                 SetCodeChanged(FALSE);

                 IF CALHistoryObject.GET(CALHistoryEntryNo) THEN
                   IF Object.GET(CALHistoryObject."Object Type", '', CALHistoryObject."Object No.") THEN
                     ;

                 PopulateTmpRecords;

                 CASE TRUE OF

                   CursorLineNo <> 0 :
                     IF GET(CALHistoryEntryNo, CursorLineNo, 1) THEN
                       ;

                   HighLighted :
                     IF TmpHighLightedLine.FINDFIRST THEN
                       Rec := TmpHighLightedLine;

                   ELSE
                     IF FINDFIRST THEN
                       ;
                 END;

                 IF NOT CALHistoryObject.TryGoToLastRecord(Object.Type, Object.ID) THEN
                   CALIsOutdated := TRUE
                 ELSE
                   IF CALHistoryObject."Entry No." <> CALHistoryEntryNo THEN
                     CALIsOutdated := TRUE
                   ELSE
                     IF SourceControl.ObjectHeaderIsOutdated(Object, FALSE) THEN
                       CALIsOutdated := TRUE
                     ELSE
                       CALIsOutdated := SourceControl.LatestHistoryIsOutdated(Object);

                 IF NOT CALIsOutdated THEN
                   GetBreakPoints;
               END;

    OnAfterGetRecord=VAR
                       PrintDarkRed@1000 : Boolean;
                       PrintRed@1001 : Boolean;
                     BEGIN
                       IF HighLighted THEN BEGIN
                         PrintRed := TmpHighLightedLine.GET("Entry No.", "Line No.", 1);
                         PrintDarkRed := TmpHighLightedLine2.GET("Entry No.", "Line No.", 1);
                       END ELSE
                         PrintDarkRed :=
                           (STRPOS(DELCHR(Code, '<>'), 'PROCEDURE') = 1) OR
                           (STRPOS(DELCHR(Code, '<>'), 'LOCAL PROCEDURE') = 1);

                       StyleExpr := '';
                       CASE TRUE OF
                         PrintRed :
                           StyleExpr := 'Unfavorable';

                         PrintDarkRed :
                           StyleExpr := 'Attention';

                       END;

                       IF DELSTR(DELCHR(Code, '<'), 3) = '//' THEN
                         StyleExpr := 'Favorable';

                       Breakpoint := HasBreakPoint;
                     END;

    OnNewRecord=BEGIN
                  "Entry No." := xRec."Entry No.";
                  "Line No." := xRec."Line No.";
                  "Sub Line No." := 999;
                END;

    OnInsertRecord=BEGIN
                     IF NOT ProceedModify THEN
                       EXIT(FALSE);

                     NewLine;
                     EXIT(FALSE);
                   END;

    OnModifyRecord=BEGIN
                     IF NOT ProceedModify THEN
                       EXIT(FALSE);

                     SetCodeChanged(TRUE);
                   END;

    OnDeleteRecord=BEGIN
                     IF NOT ProceedModify THEN
                       EXIT(FALSE);

                     SetCodeChanged(TRUE);
                   END;

    OnQueryClosePage=BEGIN
                       EXIT(NOT KeepChanges);
                     END;

    OnAfterGetCurrRecord=BEGIN
                           AnswerProceedModify := AnswerProceedModify::" ";

                           CurrPage.ObjectFactBox.PAGE.SetObject(Object.Type, Object.ID);
                           CurrPage.WhatUsedInFactBox.PAGE.SetCALCodeLine(Object.Type, Object.ID, "Line No.");
                         END;

    ActionList=ACTIONS
    {
      { 1       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 2       ;1   ;ActionGroup;
                      CaptionML=[DEU=&Object;
                                 ENU=&Object;
                                 ESP=&Object;
                                 FRA=&Object;
                                 NLD=&Object;
                                 DEA=&Object] }
      { 3       ;2   ;Action    ;
                      ShortCutKey=Ctrl+F2;
                      CaptionML=[DEU=Design;
                                 ENU=Design;
                                 ESP=Design;
                                 FRA=Design;
                                 NLD=Design;
                                 DEA=Design];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Design;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ObjectMgt@1000 : Codeunit 11102046;
                               BEGIN
                                 ObjectMgt.DesignObject(Object);
                               END;
                                }
      { 4       ;2   ;Action    ;
                      ShortCutKey=Ctrl+R;
                      CaptionML=[DEU=Run;
                                 ENU=Run;
                                 ESP=Run;
                                 FRA=Run;
                                 NLD=Run;
                                 DEA=Run];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Start;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ObjectMgt@1000 : Codeunit 11102046;
                               BEGIN
                                 ObjectMgt.RunObject(Object);
                               END;
                                }
      { 5       ;2   ;Action    ;
                      ShortCutKey=F11;
                      CaptionML=[DEU=Compile;
                                 ENU=Compile;
                                 ESP=Compile;
                                 FRA=Compile;
                                 NLD=Compileren;
                                 DEA=Compile];
                      Image=Recalculate;
                      OnAction=VAR
                                 ObjectMgt@1000 : Codeunit 11102046;
                               BEGIN
                                 ObjectMgt.CompileObject(Object);

                                 Refresh(FALSE);
                               END;
                                }
      { 29      ;2   ;Action    ;
                      CaptionML=[DEU=Navigate;
                                 ENU=Navigate;
                                 ESP=Navigate;
                                 FRA=Navigate;
                                 NLD=Navigeren;
                                 DEA=Navigate];
                      Image=Navigate;
                      OnAction=VAR
                                 ObjectMgt@1000 : Codeunit 11102046;
                               BEGIN
                                 ObjectMgt.Navigate(Object);
                               END;
                                }
      { 6       ;2   ;Action    ;
                      ShortCutKey=Ctrl+T;
                      CaptionML=[DEU=Edit in External Editor;
                                 ENU=Edit in External Editor;
                                 ESP=Edit in External Editor;
                                 FRA=Edit in External Editor;
                                 NLD=In externe &editor wijzigen;
                                 DEA=Edit in External Editor];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=DocumentEdit;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 EditObject;
                               END;
                                }
      { 7       ;2   ;Separator  }
      { 8       ;2   ;Action    ;
                      ShortCutKey=Ctrl+Insert;
                      CaptionML=[DEU=New Line;
                                 ENU=New Line;
                                 ESP=New Line;
                                 FRA=New Line;
                                 NLD=Nieuwe regel;
                                 DEA=New Line];
                      Image=Add;
                      OnAction=BEGIN
                                 IF ProceedModify THEN BEGIN
                                   Code := '';
                                   NewLine;
                                 END;
                               END;
                                }
      { 9       ;2   ;Separator  }
      { 10      ;2   ;Action    ;
                      ShortCutKey=Ctrl+S;
                      CaptionML=[DEU=Save;
                                 ENU=Save;
                                 ESP=Save;
                                 FRA=Save;
                                 NLD=Op&slaan;
                                 DEA=Save];
                      Promoted=Yes;
                      Enabled=SaveEnabled;
                      PromotedIsBig=Yes;
                      Image=Save;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 SaveObject;
                               END;
                                }
      { 11      ;2   ;Action    ;
                      CaptionML=[DEU=Undo;
                                 ENU=Undo;
                                 ESP=Undo;
                                 FRA=Undo;
                                 NLD=On&gedaan maken;
                                 DEA=Undo];
                      Promoted=Yes;
                      Enabled=UndoEnabled;
                      PromotedIsBig=Yes;
                      Image=Undo;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 Undo;
                               END;
                                }
      { 12      ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+L;
                      CaptionML=[DEU=Re&fresh Code;
                                 ENU=Re&fresh Code;
                                 ESP=Re&fresh Code;
                                 FRA=Re&fresh Code;
                                 NLD=Code vernieuwen;
                                 DEA=Re&fresh Code];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Refresh;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 IF NOT KeepChanges THEN
                                   Refresh(TRUE);
                               END;
                                }
      { 13      ;2   ;Action    ;
                      ShortCutKey=Ctrl+Up;
                      CaptionML=[DEU=Previous;
                                 ENU=Previous;
                                 ESP=Previous;
                                 FRA=Previous;
                                 NLD=Omhoog;
                                 DEA=Previous];
                      ToolTipML=[DEU=Up;
                                 ENU=Up;
                                 ESP=Up;
                                 FRA=Up;
                                 NLD=Omhoog;
                                 DEA=Up];
                      Promoted=Yes;
                      Enabled=HighLighted;
                      InFooterBar=Yes;
                      Image=MoveUp;
                      PromotedCategory=Category7;
                      OnAction=BEGIN
                                 GoPrevious;
                               END;
                                }
      { 14      ;2   ;Action    ;
                      ShortCutKey=Ctrl+Down;
                      CaptionML=[DEU=Next;
                                 ENU=Next;
                                 ESP=Next;
                                 FRA=Next;
                                 NLD=Omlaag;
                                 DEA=Next];
                      ToolTipML=[DEU=Down;
                                 ENU=Down;
                                 ESP=Down;
                                 FRA=Down;
                                 NLD=Omlaag;
                                 DEA=Down];
                      Promoted=Yes;
                      Enabled=HighLighted;
                      InFooterBar=Yes;
                      Image=MoveDown;
                      PromotedCategory=Category7;
                      OnAction=BEGIN
                                 GoNext;
                               END;
                                }
      { 15      ;2   ;Action    ;
                      ShortCutKey=Alt+F2;
                      CaptionML=[DEU=Show What Used &In;
                                 ENU=Show What Used &In;
                                 ESP=Show What Used &In;
                                 FRA=Show What Used &In;
                                 NLD=Wat gebruikt in tonen;
                                 DEA=Show What Used &In];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=AnalysisView;
                      PromotedCategory=Category7;
                      OnAction=VAR
                                 CALHistoryLine@1000 : Record 11102053;
                                 WhereUsedMgt@1001 : Codeunit 11102045;
                                 FromLineNo@1002 : Integer;
                                 TillLineNo@1003 : Integer;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(CALHistoryLine);
                                 IF CALHistoryLine.FINDSET THEN BEGIN
                                   FromLineNo := CALHistoryLine."Line No.";
                                   TillLineNo := CALHistoryLine."Line No.";
                                   REPEAT
                                     IF CALHistoryLine."Line No." < FromLineNo THEN
                                       FromLineNo := CALHistoryLine."Line No.";
                                     IF CALHistoryLine."Line No." > TillLineNo THEN
                                       TillLineNo := CALHistoryLine."Line No.";
                                   UNTIL CALHistoryLine.NEXT = 0;
                                 END;

                                 WhereUsedMgt.WhatUsedInCALLine(Object.Type, Object.ID, FromLineNo, TillLineNo);
                               END;
                                }
      { 16      ;2   ;Separator  }
      { 17      ;2   ;Action    ;
                      CaptionML=[DEU=Debug;
                                 ENU=Debug;
                                 ESP=Debug;
                                 FRA=Debug;
                                 NLD=Foutopsporing;
                                 DEA=Debug];
                      RunObject=Codeunit 11102065;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Debug;
                      PromotedCategory=Category6 }
      { 18      ;2   ;Action    ;
                      ShortCutKey=F9;
                      CaptionML=[DEU=Toggle Breakpoint;
                                 ENU=Toggle Breakpoint;
                                 ESP=Toggle Breakpoint;
                                 FRA=Toggle Breakpoint;
                                 NLD=Onderbrekingspunt in-/uitschakelen;
                                 DEA=Toggle Breakpoint];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ToggleBreakpoint;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 IF Breakpoint THEN
                                   DeleteBreakPoint
                                 ELSE
                                   InsertBreakPoint;
                               END;
                                }
      { 19      ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+F9;
                      CaptionML=[DEU=Remove Breakpoints;
                                 ENU=Remove Breakpoints;
                                 ESP=Remove Breakpoints;
                                 FRA=Remove Breakpoints;
                                 NLD=Onderbrekingspunten verwijderen;
                                 DEA=Remove Breakpoints];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=DeleteAllBreakpoints;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 DebugMgt.RemoveAllBreakpoints;
                                 TmpBreakPoint.DELETEALL;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 20      ;2   ;Action    ;
                      CaptionML=[DEU=Set Breakpoint User;
                                 ENU=Set Breakpoint User;
                                 ESP=Set Breakpoint User;
                                 FRA=Set Breakpoint User;
                                 NLD=Zet onderbrekingspunt gebruiker;
                                 DEA=Set Breakpoint User];
                      Image=BreakRulesOn;
                      OnAction=BEGIN
                                 DebugMgt.SetUser;
                                 GetBreakPoints;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 21  ;0   ;Container ;
                ContainerType=ContentArea }

    { 22  ;1   ;Group     ;
                GroupType=Repeater }

    { 23  ;2   ;Field     ;
                CaptionML=[DEU=Breakpoint;
                           ENU=Breakpoint;
                           ESP=Breakpoint;
                           FRA=Breakpoint;
                           NLD=Onderbrekingspunt;
                           DEA=Breakpoint];
                SourceExpr=Breakpoint;
                Enabled=NOT CALIsOutdated;
                OnValidate=BEGIN
                             IF Breakpoint THEN
                               InsertBreakPoint
                             ELSE
                               DeleteBreakPoint;
                           END;
                            }

    { 24  ;2   ;Field     ;
                SourceExpr="Line No.";
                Editable=FALSE;
                StyleExpr=StyleExpr }

    { 25  ;2   ;Field     ;
                SourceExpr=Code;
                StyleExpr=StyleExpr }

    { 26  ;    ;Container ;
                ContainerType=FactBoxArea }

    { 28  ;1   ;Part      ;
                Name=ObjectFactBox;
                PagePartID=Page11175794;
                PartType=Page }

    { 27  ;1   ;Part      ;
                Name=WhatUsedInFactBox;
                PagePartID=Page11175818;
                ProviderID=28;
                PartType=Page }

  }
  CODE
  {
    VAR
      TmpBreakPoint@1000 : TEMPORARY Record 11102053;
      TmpHighLightedLine@1001 : TEMPORARY Record 11102053;
      TmpHighLightedLine2@1002 : TEMPORARY Record 11102053;
      TmpOriginalCALHistoryLine@1003 : TEMPORARY Record 11102053;
      Object@1004 : Record 2000000001;
      DebugMgt@1005 : Codeunit 11102065;
      StyleExpr@1006 : Text INDATASET;
      CALHistoryEntryNo@1007 : Integer;
      CrossTableObjectEntryNo@1008 : Integer;
      CursorLineNo@1009 : Integer;
      AnswerProceedModify@1010 : ' ,Yes,No';
      Breakpoint@1011 : Boolean INDATASET;
      CALIsOutdated@1012 : Boolean;
      CodeChanged@1013 : Boolean INDATASET;
      FormWhereUsed@1014 : Boolean;
      HighLighted@1015 : Boolean INDATASET;
      SaveEnabled@1016 : Boolean INDATASET;
      UndoEnabled@1017 : Boolean INDATASET;

    PROCEDURE SetCALHistoryEntryNo@1(NewValue@1000 : Integer);
    BEGIN
      CALHistoryEntryNo := NewValue;
    END;

    PROCEDURE SetCrossTableObjectEntryNo@2(NewValue@1000 : Integer);
    BEGIN
      CrossTableObjectEntryNo := NewValue;
    END;

    PROCEDURE SetHighLightedLines@3(VAR CALHistoryLine@1000 : Record 11102053);
    BEGIN
      IF CALHistoryLine.FINDSET THEN
        REPEAT
          IF NOT TmpHighLightedLine.GET(CALHistoryLine."Entry No.", CALHistoryLine."Line No.", 1) THEN BEGIN
            TmpHighLightedLine := CALHistoryLine;
            TmpHighLightedLine."Sub Line No." := 1;
            TmpHighLightedLine.INSERT;
          END;
        UNTIL CALHistoryLine.NEXT = 0;

      HighLighted := TRUE;
    END;

    PROCEDURE SetCursor@4(NewValue@1000 : Integer);
    BEGIN
      CursorLineNo := NewValue;
    END;

    LOCAL PROCEDURE GoPrevious@5();
    BEGIN
      TmpHighLightedLine := Rec;
      IF TmpHighLightedLine.NEXT(-1) <> 0 THEN BEGIN
        Rec := TmpHighLightedLine;
        CurrPage.UPDATE(FALSE);
      END;
    END;

    LOCAL PROCEDURE GoNext@6();
    BEGIN
      TmpHighLightedLine := Rec;
      IF TmpHighLightedLine.NEXT <> 0 THEN BEGIN
        Rec := TmpHighLightedLine;
        CurrPage.UPDATE(FALSE);
      END;
    END;

    LOCAL PROCEDURE SaveObject@7();
    VAR
      OriginalRec@1000 : Record 11102053;
      SourceControl@1001 : Codeunit 11102050;
    BEGIN
      IF NOT CodeChanged THEN
        EXIT;

      RESET;
      OriginalRec := Rec;
      SourceControl.UpdateObject(Object, TRUE, TmpOriginalCALHistoryLine, Rec);
      Rec := OriginalRec;

      Refresh(FALSE);
    END;

    LOCAL PROCEDURE Undo@8();
    VAR
      SourceControl@1000 : Codeunit 11102050;
    BEGIN
      SourceControl.FillCALLineBufferWithEntryNo(Rec, "Entry No.");
      SetCodeChanged(FALSE);
    END;

    LOCAL PROCEDURE SetCodeChanged@9(NewValue@1000 : Boolean);
    BEGIN
      CodeChanged := NewValue;
      UndoEnabled := NewValue;
      SaveEnabled := NewValue;
    END;

    LOCAL PROCEDURE Refresh@10(CheckObjectUpToDate@1000 : Boolean);
    VAR
      CALHistoryObject@1001 : Record 11102052;
      OriginalRec@1002 : Record 11102053;
      SourceControl@1003 : Codeunit 11102050;
      EditorMgt@1004 : Codeunit 11102106;
      DoUpdate@1005 : Boolean;
      ctObjectDeleted@1006 : TextConst 'DEU=Object is deleted.;ENU=Object is deleted.;ESP=Object is deleted.;FRA=Object is deleted.;NLD=Object is verwijderd.;DEA=Object is deleted.';
    BEGIN
      IF Object.ID = 0 THEN
        ERROR(ctObjectDeleted);

      Object.GET(Object.Type, '', Object.ID);

      IF CheckObjectUpToDate THEN
        DoUpdate := SourceControl.LatestHistoryIsOutdated(Object)
      ELSE
        DoUpdate := SourceControl.ObjectHeaderIsOutdated(Object, TRUE);

      IF DoUpdate THEN

        IF FormWhereUsed THEN
          EditorMgt.UpdateWhereUsed(Object)
        ELSE
          SourceControl.AddObject(Object, 0, FALSE, FALSE, 1, FALSE);

      OriginalRec := Rec;

      CALHistoryObject.GoToLastRecord(Object.Type, Object.ID);

      CALHistoryEntryNo := CALHistoryObject."Entry No.";

      PopulateTmpRecords;

      IF CrossTableObjectEntryNo <> 0 THEN
        SetWhereUsedHighLightedLines;

      SetCodeChanged(FALSE);

      Rec := OriginalRec;
      "Entry No." := CALHistoryEntryNo;
      IF FIND('=') THEN
        ;

      IF CheckObjectUpToDate THEN BEGIN
        CALIsOutdated := FALSE;
        GetBreakPoints;
      END;
    END;

    LOCAL PROCEDURE KeepChanges@11() : Boolean;
    VAR
      ctSaveChanges@1000 : TextConst 'DEU=Your changes will be lost.\Are you sure?;ENU=Your changes will be lost.\Are you sure?;ESP=Your changes will be lost.\Are you sure?;FRA=Your changes will be lost.\Are you sure?;NLD=Uw wijzigingen gaan verloren.\Weet u het zeker?;DEA=Your changes will be lost.\Are you sure?';
    BEGIN
      IF CodeChanged THEN
        IF NOT CONFIRM(ctSaveChanges, TRUE) THEN
          EXIT(TRUE);
    END;

    LOCAL PROCEDURE PopulateTmpRecords@12();
    VAR
      CALHistoryLine@1000 : Record 11102053;
    BEGIN
      FILTERGROUP(2);
      SETRANGE("Entry No.", CALHistoryEntryNo);
      FILTERGROUP(0);

      RESET;
      DELETEALL;

      TmpOriginalCALHistoryLine.RESET;
      TmpOriginalCALHistoryLine.DELETEALL;

      CALHistoryLine.SETRANGE("Entry No.", CALHistoryEntryNo);
      IF CALHistoryLine.FINDSET THEN
        REPEAT
          Rec := CALHistoryLine;
          INSERT;

          TmpOriginalCALHistoryLine := CALHistoryLine;
          TmpOriginalCALHistoryLine.INSERT;

        UNTIL CALHistoryLine.NEXT = 0;

      IF CrossTableObjectEntryNo <> 0 THEN
        SetWhereUsedHighLightedLines;
    END;

    LOCAL PROCEDURE SetWhereUsedHighLightedLines@13();
    VAR
      CALHistoryLine@1000 : Record 11102053;
      WhereUsedIn@1001 : Record 11102060;
      WhereUsedCrossTable@1002 : Record 11102061;
      VariableName@1003 : Text;
      CodeStartPos@1004 : Integer;
      CodeStarted@1005 : Boolean;
      StopLoop@1006 : Boolean;
    BEGIN
      TmpHighLightedLine.DELETEALL;
      TmpHighLightedLine2.DELETEALL;

      WhereUsedCrossTable.SETCURRENTKEY("Object Entry No.");
      WhereUsedCrossTable.SETRANGE("Object Entry No.", CrossTableObjectEntryNo);
      WhereUsedCrossTable.SETRANGE("Object Type", Object.Type);
      WhereUsedCrossTable.SETRANGE("Object No.", Object.ID);

      CALHistoryLine.SETRANGE("Entry No.", CALHistoryEntryNo);

      IF WhereUsedCrossTable.FINDSET THEN
        REPEAT
          CALHistoryLine.SETRANGE("Line No.", WhereUsedCrossTable."C/AL Code Line No.");
          CALHistoryLine.SETRANGE("Sub Line No.");
          IF CALHistoryLine.FINDSET THEN
            REPEAT
              TmpHighLightedLine := CALHistoryLine;
              IF TmpHighLightedLine.INSERT THEN
                ;
            UNTIL CALHistoryLine.NEXT = 0;

          IF WhereUsedIn.GET(WhereUsedCrossTable."In Entry No.") THEN
            CASE WhereUsedIn.Type OF
              WhereUsedIn.Type::"Local Variable" :
                BEGIN
                  CALHistoryLine.SETRANGE("Line No.", WhereUsedCrossTable."C/AL Code Line No.");
                  CALHistoryLine.SETRANGE("Sub Line No.", 1);

                  StopLoop := FALSE;
                  IF CALHistoryLine.FINDFIRST THEN BEGIN
                    VariableName := DELCHR(CALHistoryLine.Code, '<>');
                    IF STRPOS(VariableName, '@') > 0 THEN
                      VariableName := DELSTR(VariableName, STRPOS(VariableName, '@'));
                    CodeStartPos := STRPOS(CALHistoryLine.Code, VariableName) - 2;

                    CALHistoryLine.SETFILTER("Line No.", '>%1', WhereUsedCrossTable."C/AL Code Line No.");

                    IF CodeStartPos > 0 THEN
                      REPEAT
                        IF COPYSTR(CALHistoryLine.Code, CodeStartPos, 5) = 'BEGIN' THEN
                          CodeStarted := TRUE;
                        IF CodeStarted AND (STRPOS(CALHistoryLine.Code, VariableName) > 0) THEN BEGIN
                          TmpHighLightedLine2 := CALHistoryLine;
                          IF TmpHighLightedLine2.INSERT THEN
                            ;
                        END;
                        StopLoop := COPYSTR(CALHistoryLine.Code, CodeStartPos, 3) = 'END';
                        IF NOT StopLoop THEN
                          StopLoop := CALHistoryLine.NEXT = 0;
                      UNTIL StopLoop;

                  END;
                END;

              WhereUsedIn.Type::"Global Variable" :
                BEGIN
                  CALHistoryLine.SETRANGE("Line No.", WhereUsedCrossTable."C/AL Code Line No.");
                  CALHistoryLine.SETRANGE("Sub Line No.", 1);

                  StopLoop := FALSE;
                  IF CALHistoryLine.FINDFIRST THEN BEGIN
                    VariableName := DELCHR(CALHistoryLine.Code, '<>');
                    IF STRPOS(VariableName, '@') > 0 THEN
                      VariableName := DELSTR(VariableName, STRPOS(VariableName, '@'));
                    CALHistoryLine.SETRANGE("Line No.");
                    CALHistoryLine.FINDSET;
                    REPEAT

                      IF STRLEN(CALHistoryLine.Code) > 4 THEN
                        IF COPYSTR(CALHistoryLine.Code, STRLEN(CALHistoryLine.Code) - 4, 5) = 'BEGIN' THEN BEGIN
                          CodeStarted := TRUE;
                          CodeStartPos := STRLEN(CALHistoryLine.Code) - 4;
                        END;
                      IF CodeStarted AND (STRPOS(CALHistoryLine.Code, VariableName) > 0) THEN BEGIN
                        TmpHighLightedLine2 := CALHistoryLine;
                        IF TmpHighLightedLine2.INSERT THEN
                          ;
                      END;
                      IF CodeStarted THEN
                        IF COPYSTR(CALHistoryLine.Code, CodeStartPos, 3) = 'END' THEN
                          CodeStarted := FALSE;

                    UNTIL CALHistoryLine.NEXT = 0;
                  END;
                END;

            END;

        UNTIL WhereUsedCrossTable.NEXT = 0;

      HighLighted := TRUE;
    END;

    LOCAL PROCEDURE NewLine@14();
    VAR
      OriginalLine@1000 : Record 11102053;
    BEGIN
      OriginalLine := Rec;

      SETFILTER("Line No.", '>=%1', "Line No.");
      IF FINDLAST THEN
        REPEAT
          DELETE;
          "Line No." += 1;
          INSERT;
        UNTIL NEXT(-1) = 0;
      RESET;

      TmpHighLightedLine.SETFILTER("Line No.", '>=%1', "Line No.");
      IF TmpHighLightedLine.FINDLAST THEN
        REPEAT
          TmpHighLightedLine.DELETE;
          TmpHighLightedLine."Line No." += 1;
          TmpHighLightedLine.INSERT;
        UNTIL TmpHighLightedLine.NEXT(-1) = 0;
      TmpHighLightedLine.RESET;

      TmpHighLightedLine2.SETFILTER("Line No.", '>=%1', "Line No.");
      IF TmpHighLightedLine2.FINDLAST THEN
        REPEAT
          TmpHighLightedLine2.DELETE;
          TmpHighLightedLine2."Line No." += 1;
          TmpHighLightedLine2.INSERT;
        UNTIL TmpHighLightedLine2.NEXT(-1) = 0;
      TmpHighLightedLine2.RESET;

      Rec := OriginalLine;
      "Sub Line No." := 1;
      Code := '';
      INSERT;

      SetCodeChanged(TRUE);
    END;

    LOCAL PROCEDURE ProceedModify@15() ExitValue : Boolean;
    VAR
      EditorMgt@1000 : Codeunit 11102106;
      RefreshCode@1001 : Boolean;
    BEGIN
      ExitValue := EditorMgt.ProceedModify(Object, AnswerProceedModify, RefreshCode, '');

      IF RefreshCode THEN
        IF NOT KeepChanges THEN
          Refresh(TRUE);
    END;

    PROCEDURE SetFromWhereUsed@16(NewValue@1000 : Boolean);
    BEGIN
      FormWhereUsed := NewValue;
    END;

    LOCAL PROCEDURE HasBreakPoint@17() : Boolean;
    BEGIN
      EXIT(TmpBreakPoint.GET(0, "Line No.", 0));
    END;

    LOCAL PROCEDURE GetBreakPoints@18();
    BEGIN
      TmpBreakPoint.DELETEALL;
      DebugMgt.GetBreakpoints(Object.Type, Object.ID, TmpBreakPoint);
    END;

    LOCAL PROCEDURE EditObject@19();
    VAR
      TmpCALHistoryObject@1000 : TEMPORARY Record 11102052;
      OriginalRec@1001 : Record 11102053;
      TmpRec2@1002 : TEMPORARY Record 11102053;
      Progressbar@1003 : Codeunit 11102044;
      SourceControl@1004 : Codeunit 11102050;
      FileHandler@1005 : Codeunit 11102097;
      EditFile@1006 : Page 11102075;
      ClientTempFileName@1007 : Text;
      ServerTempFileName@1008 : Text;
      EntryNo@1009 : Integer;
      ctDefaultFileName@1010 : TextConst 'DEU=objects.txt;ENU=objects.txt;ESP=objects.txt;FRA=objects.txt;NLD=objects.txt;DEA=objects.txt';
      ctEditObject@1011 : TextConst 'DEU=Edit Object;ENU=Edit Object;ESP=Edit Object;FRA=Edit Object;NLD=Object wijzigen;DEA=Edit Object';
      ctQuestion@1012 : TextConst 'DEU=Modify the C/AL code in the external editor and press OK.;ENU=Modify the C/AL code in the external editor and press OK.;ESP=Modify the C/AL code in the external editor and press OK.;FRA=Modify the C/AL code in the external editor and press OK.;NLD=Wijzig de C/AL code in de externe tekst-editor en kies OK.;DEA=Modify the C/AL code in the external editor and press OK.';
    BEGIN
      IF NOT ProceedModify THEN
        EXIT;

      ServerTempFileName := FileHandler.TempDirectory + ctDefaultFileName;

      IF EXISTS(ServerTempFileName) THEN
        ERASE(ServerTempFileName);

      OriginalRec := Rec;

      RESET;
      FINDFIRST;

      EntryNo := "Entry No.";

      SourceControl.ExportTextFile(ServerTempFileName, Rec);
      Rec := OriginalRec;

      ClientTempFileName := FileHandler.DownloadToClient(ServerTempFileName, '', ctDefaultFileName);

      SourceControl.OpenInEditor(ClientTempFileName);

      EditFile.SetCaption(ctEditObject);
      EditFile.SetQuestion(ctQuestion);
      EditFile.SetFileName(ClientTempFileName);

      COMMIT;

      IF EditFile.RUNMODAL IN [ACTION::OK, ACTION::Yes] THEN BEGIN
        ServerTempFileName := FileHandler.UploadToServer(ClientTempFileName, ctDefaultFileName);
        DELETEALL;
        SourceControl.ImportTextFile2(ServerTempFileName, 0, Progressbar, 0, TmpCALHistoryObject, TmpRec2, TRUE);
        IF TmpRec2.FINDSET THEN
          REPEAT
            Rec := TmpRec2;
            "Entry No." := EntryNo;
            INSERT;
          UNTIL TmpRec2.NEXT = 0;
        Rec := OriginalRec;
        SetCodeChanged(TRUE);
      END;
    END;

    LOCAL PROCEDURE InsertBreakPoint@20();
    BEGIN
      IF DebugMgt.InsertBreakpoint(Object.Type, Object.ID, "Line No.") THEN BEGIN
        IF NOT TmpBreakPoint.GET(0, "Line No.", 0) THEN BEGIN
          TmpBreakPoint."Line No." := "Line No.";
          TmpBreakPoint.INSERT;
        END;
        Breakpoint := TRUE;
      END;
    END;

    LOCAL PROCEDURE DeleteBreakPoint@21();
    BEGIN
      DebugMgt.DeleteBreakpoint(Object.Type, Object.ID, "Line No.");
      IF TmpBreakPoint.GET(0, "Line No.", 0) THEN
        TmpBreakPoint.DELETE;
      Breakpoint := FALSE;
    END;

    LOCAL PROCEDURE CaptionExpr@22() : Text;
    BEGIN
      EXIT(STRSUBSTNO('%1 %2 %3', Object.Type, Object.ID, Object.Name));
    END;

    BEGIN
    END.
  }
}

