OBJECT Table 9062394 Appointment
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NH2016.15;
  }
  PROPERTIES
  {
    OnInsert=VAR
               NoSeriesMgt@1000000000 : Codeunit 396;
               NoSeriesToolkit@1000000001 : Codeunit 9062598;
               NoSeries@1000000002 : Code[20];
             BEGIN
               IF Code = '' THEN BEGIN
                 NoSeriesToolkit.CreateNoSeries(NoSeries_Appointments,NoSeries_Appointments_StartNo);

                 NoSeriesMgt.InitSeries(NoSeries_Appointments,NoSeries_Appointments,0D,Code,NoSeries);
               END;

               IF TimeZone = '' THEN
                 VALIDATE(TimeZone,GetCurrentTimeZone);

               InitEnhInfoEntry;
             END;

    CaptionML=[ENU=Appointment;
               ENG=Appointment];
    LookupPageID=Page9062522;
    DrillDownPageID=Page9062522;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              ENG=Code] }
    { 10  ;   ;Contact No.         ;Code20        ;TableRelation=Contact;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Contact No.;
                                                              ENG=Contact No.] }
    { 11  ;   ;With Contact No.    ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                Contact@1000000000 : Record 5050;
                                                              BEGIN
                                                                TestStatusOpen;

                                                                IF NOT Contact.GET("With Contact No.") THEN
                                                                  VALIDATE("With Company No.",'')
                                                                ELSE
                                                                  VALIDATE("With Company No.",Contact."Company No.");
                                                              END;

                                                   CaptionML=[ENU=With Contact No.;
                                                              ENG=With Contact No.] }
    { 12  ;   ;With Company No.    ;Code20        ;TableRelation=Contact WHERE (Type=CONST(Company));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=With Company No.;
                                                              ENG=With Company No.] }
    { 13  ;   ;Contact Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(Contact No.)));
                                                   CaptionML=[ENU=Contact Name;
                                                              ENG=Contact Name];
                                                   Editable=No }
    { 14  ;   ;With Contact Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(With Contact No.)));
                                                   CaptionML=[ENU=With Contact Name;
                                                              ENG=With Contact Name];
                                                   Editable=No }
    { 15  ;   ;With Company Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (No.=FIELD(With Company No.)));
                                                   CaptionML=[ENU=With Company Name;
                                                              ENG=With Company Name];
                                                   Editable=No }
    { 20  ;   ;Meeting Code        ;Code20        ;TableRelation=Meeting;
                                                   OnValidate=VAR
                                                                Meeting@1000000000 : Record 9062802;
                                                              BEGIN
                                                                TestStatusOpen;

                                                                IF Meeting.GET("Meeting Code") THEN
                                                                  SetDetailsFromMeeting(Meeting);
                                                              END;

                                                   CaptionML=[ENU=Meeting Code;
                                                              ENG=Meeting Code] }
    { 21  ;   ;Subject             ;Text250       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Subject;
                                                              ENG=Subject] }
    { 22  ;   ;Start Date          ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                VALIDATE("Start DateTime",CREATEDATETIME("Start Date","Start Time"));
                                                              END;

                                                   CaptionML=[ENU=Start Date;
                                                              ENG=Start Date] }
    { 23  ;   ;Start Time          ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                VALIDATE("Start DateTime",CREATEDATETIME("Start Date","Start Time"));
                                                              END;

                                                   CaptionML=[ENU=Start Time;
                                                              ENG=Start Time] }
    { 24  ;   ;End Date            ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                VALIDATE("End Datetime",CREATEDATETIME("End Date","End Time"));
                                                              END;

                                                   CaptionML=[ENU=End Date;
                                                              ENG=End Date] }
    { 25  ;   ;End Time            ;Time          ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                VALIDATE("End Datetime",CREATEDATETIME("End Date","End Time"));
                                                              END;

                                                   CaptionML=[ENU=End Time;
                                                              ENG=End Time] }
    { 26  ;   ;All Day             ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                VALIDATE("Start DateTime",CREATEDATETIME("Start Date",000000T));
                                                                VALIDATE("End Datetime",CREATEDATETIME("End Date",235959T));
                                                              END;

                                                   CaptionML=[ENU=All Day;
                                                              ENG=All Day] }
    { 27  ;   ;Start DateTime      ;DateTime      ;OnValidate=VAR
                                                                lStartDate@1000000000 : Date;
                                                                lStartTime@1000000001 : Time;
                                                              BEGIN
                                                                TestStatusOpen;

                                                                lStartDate := DT2DATE("Start DateTime");
                                                                lStartTime := DT2TIME("Start DateTime");

                                                                IF "Start DateTime" = CREATEDATETIME(0D,0T) THEN
                                                                  VALIDATE("End Datetime",CREATEDATETIME(0D,0T))
                                                                ELSE
                                                                  IF "End Datetime" = CREATEDATETIME(0D,0T) THEN
                                                                    VALIDATE("End Datetime","Start DateTime" + (1000*60*30))
                                                                  ELSE
                                                                    IF xRec."Start DateTime" <> CREATEDATETIME(0D,0T) THEN
                                                                      VALIDATE("End Datetime","End Datetime" + (Rec."Start DateTime" - xRec."Start DateTime"));

                                                                "Start Date" := lStartDate;
                                                                "Start Time" := lStartTime;

                                                                IF TimeZone = '' THEN
                                                                  VALIDATE(TimeZone,GetCurrentTimeZone);
                                                              END;

                                                   CaptionML=[ENU=Start DateTime;
                                                              ENG=Start DateTime] }
    { 28  ;   ;End Datetime        ;DateTime      ;OnValidate=VAR
                                                                lEndDate@1000000001 : Date;
                                                                lEndTime@1000000000 : Time;
                                                              BEGIN
                                                                TestStatusOpen;

                                                                lEndDate := DT2DATE("End Datetime");
                                                                lEndTime := DT2TIME("End Datetime");

                                                                IF "Start DateTime" = CREATEDATETIME(0D,0T) THEN
                                                                  VALIDATE("Start DateTime","End Datetime");

                                                                IF "End Datetime" < "Start DateTime" THEN
                                                                  ERROR(err_EndDateAfterStartDate,"End Datetime","Start DateTime");

                                                                "End Date" := lEndDate;
                                                                "End Time" := lEndTime;

                                                                IF TimeZone = '' THEN
                                                                  VALIDATE(TimeZone,GetCurrentTimeZone);
                                                              END;

                                                   CaptionML=[ENU=End Datetime;
                                                              ENG=End Datetime] }
    { 30  ;   ;TimeZone            ;Text250       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   OnLookup=BEGIN
                                                              VALIDATE(TimeZone,LookupTimeZone);
                                                            END;

                                                   CaptionML=[ENU=TimeZone;
                                                              ENG=TimeZone] }
    { 40  ;   ;Appointment Status  ;Option        ;CaptionML=[ENU=Appointment Status;
                                                              ENG=Appointment Status];
                                                   OptionCaptionML=[ENU=Prospective,Scheduled,Completed,Cancelled;
                                                                    ENG=Prospective,Scheduled,Completed,Cancelled];
                                                   OptionString=Prospective,Scheduled,Completed,Cancelled;
                                                   Editable=No }
    { 41  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=Open,Released,Pending Approval;
                                                                    ENG=Open,Released,Pending Approval];
                                                   OptionString=Open,Released,Pending Approval;
                                                   Editable=No }
    { 50  ;   ;Location Address Source;Option     ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                CASE "Location Address Source" OF
                                                                  "Location Address Source"::"Contact Address" : VALIDATE("Location Contact No.",TNPUtils.GetUserContactNo(TNPUtils.CurrentContact));
                                                                  "Location Address Source"::"Company Address" : SetLocationAddress;
                                                                  "Location Address Source"::"With Contact Address" : VALIDATE("Location Contact No.","With Contact No.");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Location Address Source;
                                                              ENG=Location Address Source];
                                                   OptionCaptionML=[ENU=" ,Contact Address,Company Address,With Contact Address,Other Contact Address";
                                                                    ENG=" ,Contact Address,Company Address,With Contact Address,Other Contact Address"];
                                                   OptionString=[ ,Contact Address,Company Address,With Contact Address,Other Contact Address] }
    { 51  ;   ;Location Contact No.;Code20        ;TableRelation=Contact;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                SetLocationAddress;
                                                              END;

                                                   CaptionML=[ENU=Location Contact No.;
                                                              ENG=Location Contact No.] }
    { 53  ;   ;Location Name       ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                SetLocationSourceFromLocationName;
                                                              END;

                                                   CaptionML=[ENU=Location Name;
                                                              ENG=Location Name] }
    { 60  ;   ;Location Address    ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Location Address;
                                                              ENG=Location Address] }
    { 61  ;   ;Location Address 2  ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Location Address 2;
                                                              ENG=Location Address 2] }
    { 62  ;   ;Location City       ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Location City;
                                                              ENG=Location City] }
    { 63  ;   ;Location County     ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Location County;
                                                              ENG=Location County] }
    { 64  ;   ;Location Post Code  ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Location Post Code;
                                                              ENG=Location Post Code] }
    { 65  ;   ;Location Country    ;Text50        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Location Country;
                                                              ENG=Location Country] }
    { 66  ;   ;Location Phone No.  ;Text30        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Location Phone No.;
                                                              ENG=Location Phone No.] }
    { 67  ;   ;Location E-Mail     ;Text100       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Location E-Mail;
                                                              ENG=Location E-Mail] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Meeting Code                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NoSeries_Appointments@1000000000 : TextConst 'ENU=APPT;ENG=APPT';
      NoSeries_Appointments_StartNo@1000000001 : TextConst 'ENU=AP0000001;ENG=AP0000001';
      err_EndDateAfterStartDate@1000000002 : TextConst 'ENU=The "End Date/Time" (%1) must be the same as or later than the "Start Date/Time" (%2);ENG=The "End Date/Time" (%1) must be the same as or later than the "Start Date/Time" (%2)';
      err_NoTimeZone@1000000004 : TextConst 'ENU=No TimeZones were found!;ENG=No TimeZones were found!';
      TNPUtils@1000000003 : Codeunit 9062229;
      err_AlreadyMeeting@1000000005 : TextConst 'ENU=This Appointment is already related to the Meeting %1;ENG=This Appointment is already related to the Meeting %1';
      err_ApprovalRequired@1000000006 : TextConst 'ENU=An Approval Workflow is enabled for this Record. Please request Approval to Release this Record;ENG=An Approval Workflow is enabled for this Record. Please request Approval to Release this Record';
      err_ApprovalOustanding@1000000007 : TextConst 'ENU=An Approval Workflow is in progress for this Record. Please complete or cancel the Workflow to Reopen the Record.;ENG=An Approval Workflow is in progress for this Record. Please complete or cancel the Workflow to Reopen the Record.';
      SkipReleaseCheck@1000000009 : Boolean;
      err_NeedsOpen@1000000010 : TextConst 'ENU=The Appointment must be Open before making changes;ENG=The Appointment must be Open before making changes';
      err_StatusChange@1000000008 : TextConst 'ENU=You cannot change an Appointment from %1 to %2;ENG=You cannot change an Appointment from %1 to %2';
      RecordRestrictionMgt@1000000011 : Codeunit 1550;
      err_HasMeetingCannotChange@1000000012 : TextConst 'ENU=This Appointment is related to the Meeting %1 and therefore cannot be changed directly;ENG=This Appointment is related to the Meeting %1 and therefore cannot be changed directly';
      err_ReopenComplete@1000000013 : TextConst 'ENU=You cannot Reopen a Completed Appointment;ENG=You cannot Reopen a Completed Appointment';

    PROCEDURE SetDetailsFromMeeting@1000000000(VAR Meeting@1000000001 : Record 9062802);
    BEGIN
      "Meeting Code" := Meeting.Code;

      TRANSFERFIELDS(Meeting,FALSE);
    END;

    LOCAL PROCEDURE GetCurrentTimeZone@1000000001() : Text;
    VAR
      TimeZoneInfo@1000000001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZoneInfo";
    BEGIN
      EXIT(TimeZoneInfo.Local.StandardName);
    END;

    LOCAL PROCEDURE LookupTimeZone@1000000002() : Text;
    VAR
      TimeZoneInfo@1000000001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZoneInfo";
      TimeZones@1000000000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ObjectModel.ReadOnlyCollection`1";
      TimeZoneInfo2@1000000002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZoneInfo";
      TimeSpan@1000000005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeSpan";
      i@1000000003 : Integer;
      TimeZonesText@1000000004 : Text;
      UTCOffset@1000000006 : Duration;
      Selection@1000000007 : Integer;
      DefaultSelection@1000000008 : Integer;
    BEGIN
      TimeZones := TimeZoneInfo.GetSystemTimeZones;
      IF TimeZones.Count = 0 THEN
        ERROR(err_NoTimeZone);

      FOR i := 1 TO TimeZones.Count-1 DO
        BEGIN
          TimeZoneInfo2 := TimeZones.Item(i);
          UTCOffset := TimeZoneInfo2.BaseUtcOffset;

          IF TimeZonesText <> '' THEN
            TimeZonesText += ',';

          TimeZonesText += FORMAT(UTCOffset) + ': ' + TimeZoneInfo2.StandardName;

          IF DefaultSelection = 0 THEN
            IF TimeZoneInfo2.StandardName = GetCurrentTimeZone THEN
              DefaultSelection := i;
        END;

      Selection := STRMENU(TimeZonesText,DefaultSelection);
      IF Selection > 0 THEN BEGIN
        TimeZoneInfo := TimeZones.Item(Selection);
        EXIT(TimeZoneInfo.StandardName);
      END ELSE
        EXIT(GetCurrentTimeZone);
    END;

    LOCAL PROCEDURE SetLocationAddress@1000000012();
    VAR
      Contact@1000000000 : Record 5050;
      CompanyInfo@1000000001 : Record 79;
    BEGIN
      IF "Location Address Source" = "Location Address Source"::"Company Address" THEN BEGIN
        CompanyInfo.GET;
        VALIDATE("Location Name",CompanyInfo.Name);
        VALIDATE("Location Address",CompanyInfo.Address);
        VALIDATE("Location Address 2",CompanyInfo."Address 2");
        VALIDATE("Location City",CompanyInfo.City);
        VALIDATE("Location County",CompanyInfo.County);
        VALIDATE("Location Post Code",CompanyInfo."Post Code");
        VALIDATE("Location Phone No.",CompanyInfo."Phone No.");
        VALIDATE("Location E-Mail",CompanyInfo."E-Mail");
      END ELSE BEGIN
        IF "Location Contact No." <> '' THEN BEGIN
          Contact.GET("Location Contact No.");
          VALIDATE("Location Name",Contact."Company Name");
          IF "Location Name" = '' THEN
            VALIDATE("Location Name",Contact.Name);
          VALIDATE("Location Address",Contact.Address);
          VALIDATE("Location Address 2",Contact."Address 2");
          VALIDATE("Location City",Contact.City);
          VALIDATE("Location County",Contact.County);
          VALIDATE("Location Post Code",Contact."Post Code");
          VALIDATE("Location Phone No.",Contact."Phone No.");
          VALIDATE("Location E-Mail",Contact."E-Mail");
        END;
      END;
    END;

    PROCEDURE SetLocationSourceFromLocationName@1000000013();
    VAR
      LocationText@1000000000 : Text;
      OrigLocationName@1000000001 : Text;
      eTheir@1000000002 : TextConst 'ENU=THEIR;ENG=THEIR';
      eOnSite@1000000003 : TextConst 'ENU=ONSITE;ENG=ONSITE';
      eOnSite2@1000000004 : TextConst 'ENU=ON-SITE;ENG=ON-SITE';
      eOnSite3@1000000005 : TextConst 'ENU=ON SITE;ENG=ON SITE';
      eSite@1000000006 : TextConst 'ENU=SITE;ENG=SITE';
      eCustomer@1000000007 : TextConst 'ENU=CUSTOMER;ENG=CUSTOMER';
      eVendor@1000000008 : TextConst 'ENU=VENDOR;ENG=VENDOR';
      eYour@1000000009 : TextConst 'ENU=YOUR;ENG=YOUR';
      eHeadOffice@1000000010 : TextConst 'ENU=HEAD OFFICE;ENG=HEAD OFFICE';
      eTheOffice@1000000011 : TextConst 'ENU=THE OFFICE;ENG=THE OFFICE';
      eOur@1000000012 : TextConst 'ENU=OUR;ENG=OUR';
      eOffice@1000000013 : TextConst 'ENU=OFFICE;ENG=OFFICE';
      eMainOffice@1000000014 : TextConst 'ENU=MAIN OFFICE;ENG=MAIN OFFICE';
    BEGIN
      OrigLocationName := "Location Name";
      LocationText := UPPERCASE("Location Name");

      IF (STRPOS(LocationText,'MY') = 1) THEN BEGIN
        VALIDATE("Location Address Source","Location Address Source"::"Contact Address");
        "Location Name" := OrigLocationName;
        EXIT;
      END;

      IF (STRPOS(LocationText,eTheir) = 1) OR
         (STRPOS(LocationText,eOnSite) = 1) OR
         (STRPOS(LocationText,eOnSite2) = 1) OR
         (STRPOS(LocationText,eOnSite3) = 1) OR
         (STRPOS(LocationText,eSite) = 1) OR
         (STRPOS(LocationText,eCustomer) = 1) OR
         (STRPOS(LocationText,eVendor) = 1) OR
         (STRPOS(LocationText,eYour) = 1) THEN BEGIN
        VALIDATE("Location Address Source","Location Address Source"::"With Contact Address");
        "Location Name" := OrigLocationName;
        EXIT;
      END;

      IF (STRPOS(LocationText,eHeadOffice) = 1) OR
         (STRPOS(LocationText,eTheOffice) = 1) OR
         (STRPOS(LocationText,eOur) = 1) OR
         (STRPOS(LocationText,eOffice) = 1) OR
         (STRPOS(LocationText,eMainOffice) = 1) THEN BEGIN
        VALIDATE("Location Address Source","Location Address Source"::"Company Address");
        "Location Name" := OrigLocationName;
        EXIT;

      END;
    END;

    PROCEDURE CreateMeeting@1000000003();
    VAR
      Meeting@1000000000 : Record 9062802;
    BEGIN
      CLEAR(Meeting);
      IF "Meeting Code" <> '' THEN
        ERROR(err_AlreadyMeeting,"Meeting Code");

      Meeting.INIT;
      Meeting.TRANSFERFIELDS(Rec,TRUE);
      Meeting.Code := '';
      Meeting.INSERT(TRUE);

      VALIDATE("Meeting Code",Meeting.Code);
    END;

    LOCAL PROCEDURE InitEnhInfoEntry@1000000004();
    VAR
      EnhancedInformationEntry@1000000000 : Record 9062727;
    BEGIN
      IF NOT EnhancedInformationEntry.GET(DATABASE::Appointment) THEN BEGIN
        EnhancedInformationEntry.INIT;
        EnhancedInformationEntry.VALIDATE(EnhancedInformationEntry."Table No.",DATABASE::Appointment);
        EnhancedInformationEntry.INSERT(TRUE);
      END;
    END;

    PROCEDURE ReleaseAppointment@1000000005();
    VAR
      EnhancedWorkflowManagement@1000000000 : Codeunit 9062258;
      EnhancedWorkflow@1000000001 : TEMPORARY Record 9062258;
    BEGIN
      IF Status = Status::Released THEN
        EXIT;

      //Release Checks
      TESTFIELD("Start Date");
      TESTFIELD("End Date");
      TESTFIELD("Contact No.");
      TESTFIELD(Subject);

      CASE Status OF
        Status::Open : BEGIN
          IF EnhancedWorkflowManagement.GetRelatedWorkflows(EnhancedWorkflow,DATABASE::Appointment,GETPOSITION,TRUE) > 0 THEN
            ERROR(err_ApprovalRequired);

          VALIDATE(Status,Status::Released);
          MODIFY(TRUE);;
        END;
        Status::"Pending Approval" :;

      END;
    END;

    PROCEDURE ReopenAppointment@1000000006();
    BEGIN
      SkipReleaseCheck := TRUE;
      CASE Status OF
        Status::Released : BEGIN
          IF "Appointment Status" = "Appointment Status"::Completed THEN
            ERROR(err_ReopenComplete);

          VALIDATE(Status,Status::Open);
          MODIFY(TRUE);
        END;
        Status::Open:
          EXIT;
        Status::"Pending Approval":
          ERROR(err_ApprovalOustanding);
      END;
      SkipReleaseCheck := FALSE;
    END;

    LOCAL PROCEDURE TestStatusOpen@1000000010();
    BEGIN
      IF NOT SkipReleaseCheck THEN
        IF Status <> Status::Open THEN
          ERROR(err_NeedsOpen);
    END;

    PROCEDURE AppointmentStatus_Prospective@1000000011();
    BEGIN
      IF "Meeting Code" <> '' THEN
        ERROR(err_HasMeetingCannotChange,"Meeting Code");

      CASE "Appointment Status" OF
        "Appointment Status"::Prospective :
          EXIT;
        "Appointment Status"::Completed :
          ERROR(err_StatusChange,"Appointment Status","Appointment Status"::Prospective);
        "Appointment Status"::Cancelled :
          ERROR(err_StatusChange,"Appointment Status","Appointment Status"::Prospective);
      END;

      RecordRestrictionMgt.CheckRecordHasUsageRestrictions(RECORDID);
      VALIDATE("Appointment Status","Appointment Status"::Prospective);
    END;

    PROCEDURE AppointmentStatus_Scheduled@1000000007();
    BEGIN
      IF "Meeting Code" <> '' THEN
        ERROR(err_HasMeetingCannotChange,"Meeting Code");

      TESTFIELD(Status,Status::Released);

      CASE "Appointment Status" OF
        "Appointment Status"::Scheduled :
          EXIT;
        "Appointment Status"::Completed:
          ERROR(err_StatusChange,"Appointment Status","Appointment Status"::Scheduled);
        "Appointment Status"::Cancelled :
          ERROR(err_StatusChange,"Appointment Status","Appointment Status"::Scheduled);
      END;

      RecordRestrictionMgt.CheckRecordHasUsageRestrictions(RECORDID);
      VALIDATE("Appointment Status","Appointment Status"::Scheduled);
    END;

    PROCEDURE AppointmentStatus_Completed@1000000008();
    BEGIN
      IF "Meeting Code" <> '' THEN
        ERROR(err_HasMeetingCannotChange,"Meeting Code");

      TESTFIELD(Status,Status::Released);

      CASE "Appointment Status" OF
        "Appointment Status"::Prospective :
          ERROR(err_StatusChange,"Appointment Status","Appointment Status"::Completed);
        "Appointment Status"::Completed :
          EXIT;
        "Appointment Status"::Cancelled :
          ERROR(err_StatusChange,"Appointment Status","Appointment Status"::Completed);
      END;

      RecordRestrictionMgt.CheckRecordHasUsageRestrictions(RECORDID);
      VALIDATE("Appointment Status","Appointment Status"::Completed);
    END;

    PROCEDURE AppointmentStatus_Cancelled@1000000009();
    BEGIN
      IF "Meeting Code" <> '' THEN
        ERROR(err_HasMeetingCannotChange,"Meeting Code");

      CASE "Appointment Status" OF
        "Appointment Status"::Cancelled :
          EXIT;
      END;

      RecordRestrictionMgt.CheckRecordHasUsageRestrictions(RECORDID);
      VALIDATE("Appointment Status","Appointment Status"::Cancelled);
    END;

    BEGIN
    {
      //DOC NH2016.12 PC 11/02/2016 - Created
      //DOC NH2016.15 JH 15/04/2016 - CfMD amendments
    }
    END.
  }
}

