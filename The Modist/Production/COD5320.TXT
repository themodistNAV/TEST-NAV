OBJECT Codeunit 5320 Exchange Web Services Client
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempExchangeFolder@1002 : TEMPORARY Record 5320;
      ServiceOnClient@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.ExchangeServiceWrapper" RUNONCLIENT;
      Text001@1003 : TextConst 'ENU=Connection to the Exchange server failed.;ENG=Connection to the Exchange server failed.';
      Text002@1004 : TextConst 'ENU=Folders with a path that exceeds 250 characters have been omitted.;ENG=Folders with a path that exceeds 250 characters have been omitted.';
      ServiceOnServer@1005 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.ExchangeServiceWrapper";
      LongPathsDetected@1001 : Boolean;

    PROCEDURE GetPublicFolders@2(VAR ExchangeFolder@1000 : Record 5320) : Boolean;
    BEGIN
      IF NOT IsServiceValid THEN
        ERROR(Text001);

      IF ISNULL(ServiceOnServer) THEN
        EXIT(GetPublicFoldersOnClient(ExchangeFolder));
      EXIT(GetPublicFoldersOnServer(ExchangeFolder));
    END;

    LOCAL PROCEDURE GetPublicFoldersOnClient@10(VAR ExchangeFolder@1000 : Record 5320) FoundAny : Boolean;
    VAR
      ParentInfo@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.FolderInfo" RUNONCLIENT;
      SubFolders@1001 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.FolderInfoEnumerator" RUNONCLIENT;
    BEGIN
      IF ExchangeFolder.Cached THEN
        EXIT;

      IF ExchangeFolder."Unique ID".HASVALUE THEN BEGIN
        ParentInfo := ParentInfo.FolderInfo(ExchangeFolder.GetUniqueID,ExchangeFolder.FullPath);
        ExchangeFolder.Cached := TRUE;
        ExchangeFolder.MODIFY;
      END;

      FoundAny := FALSE;
      LongPathsDetected := FALSE;

      SubFolders := ServiceOnClient.GetPublicFolders(ParentInfo,1000);

      IF NOT ISNULL(SubFolders) THEN BEGIN
        WHILE SubFolders.MoveNextPage DO
          WHILE SubFolders.MoveNext DO
            IF STRLEN(SubFolders.Current.FullPath) > 250 THEN
              LongPathsDetected := TRUE
            ELSE
              IF NOT TempExchangeFolder.GET(SubFolders.Current.FullPath) THEN
                IF IsAllowedFolderType(SubFolders.Current.FolderClass) THEN BEGIN
                  FoundAny := TRUE;
                  WITH TempExchangeFolder DO BEGIN
                    INIT;
                    FullPath := SubFolders.Current.FullPath;
                    Depth := SubFolders.Current.Depth;
                    SetUniqueID(SubFolders.Current.UniqueId);
                    Name := SubFolders.Current.Name;
                    Cached := FALSE;
                    INSERT;
                  END;
                END;
        IF LongPathsDetected THEN
          MESSAGE(Text002);
        ReadBuffer(ExchangeFolder);
      END;

      IF ISNULL(ServiceOnServer) THEN BEGIN
        IF ServiceOnServer.LastError <> '' THEN
          MESSAGE(ServiceOnServer.LastError);
      END ELSE
        IF ServiceOnServer.LastError <> '' THEN
          MESSAGE(ServiceOnServer.LastError);

      EXIT(FoundAny);
    END;

    LOCAL PROCEDURE GetPublicFoldersOnServer@11(VAR ExchangeFolder@1000 : Record 5320) FoundAny : Boolean;
    VAR
      ParentInfo@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.FolderInfo";
      SubFolders@1001 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.FolderInfoEnumerator";
    BEGIN
      IF ExchangeFolder.Cached THEN
        EXIT;

      IF ExchangeFolder."Unique ID".HASVALUE THEN BEGIN
        ParentInfo := ParentInfo.FolderInfo(ExchangeFolder.GetUniqueID,ExchangeFolder.FullPath);
        ExchangeFolder.Cached := TRUE;
        ExchangeFolder.MODIFY;
      END;

      FoundAny := FALSE;
      LongPathsDetected := FALSE;

      SubFolders := ServiceOnServer.GetPublicFolders(ParentInfo,1000);

      IF NOT ISNULL(SubFolders) THEN BEGIN
        WHILE SubFolders.MoveNextPage DO
          WHILE SubFolders.MoveNext DO
            IF STRLEN(SubFolders.Current.FullPath) > 250 THEN
              LongPathsDetected := TRUE
            ELSE
              IF NOT TempExchangeFolder.GET(SubFolders.Current.FullPath) THEN
                IF IsAllowedFolderType(SubFolders.Current.FolderClass) THEN BEGIN
                  FoundAny := TRUE;
                  WITH TempExchangeFolder DO BEGIN
                    INIT;
                    FullPath := SubFolders.Current.FullPath;
                    Depth := SubFolders.Current.Depth;
                    SetUniqueID(SubFolders.Current.UniqueId);
                    Name := SubFolders.Current.Name;
                    Cached := FALSE;
                    INSERT;
                  END;
                END;
        IF LongPathsDetected THEN
          MESSAGE(Text002);
        ReadBuffer(ExchangeFolder);
      END;

      IF ISNULL(ServiceOnServer) THEN BEGIN
        IF ServiceOnServer.LastError <> '' THEN
          MESSAGE(ServiceOnServer.LastError);
      END ELSE
        IF ServiceOnServer.LastError <> '' THEN
          MESSAGE(ServiceOnServer.LastError);

      EXIT(FoundAny);
    END;

    PROCEDURE InitializeOnClient@3(AutodiscoveryEmail@1000 : Text[250];ServiceUri@1001 : Text) : Boolean;
    VAR
      ServiceFactoryOnClient@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.ServiceWrapperFactory" RUNONCLIENT;
    BEGIN
      IF ISNULL(ServiceOnClient) THEN BEGIN
        InvalidateService;
        ServiceOnClient := ServiceFactoryOnClient.CreateServiceWrapper;
      END;

      IF ServiceUri <> '' THEN
        ServiceOnClient.ExchangeServiceUrl := ServiceUri;

      IF ServiceOnClient.ExchangeServiceUrl = '' THEN
        EXIT(ServiceOnClient.AutodiscoverServiceUrl(AutodiscoveryEmail));
      EXIT(TRUE);
    END;

    PROCEDURE InitializeOnServer@8(AutodiscoveryEmail@1002 : Text[250];ServiceUri@1001 : Text;Credentials@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential") : Boolean;
    VAR
      ServiceFactoryOnServer@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.ServiceWrapperFactory";
    BEGIN
      IF ISNULL(ServiceOnServer) THEN BEGIN
        InvalidateService;
        ServiceOnServer := ServiceFactoryOnServer.CreateServiceWrapperWithCredentials(Credentials);
      END;

      IF ServiceUri <> '' THEN
        ServiceOnServer.ExchangeServiceUrl := ServiceUri;

      IF ServiceOnServer.ExchangeServiceUrl = '' THEN
        EXIT(ServiceOnServer.AutodiscoverServiceUrl(AutodiscoveryEmail));
      EXIT(TRUE);
    END;

    PROCEDURE FolderExists@1(UniqueID@1000 : Text) : Boolean;
    BEGIN
      IF NOT IsServiceValid THEN
        ERROR(Text001);
      IF ISNULL(ServiceOnServer) THEN
        EXIT(ServiceOnClient.FolderExists(UniqueID));
      EXIT(ServiceOnServer.FolderExists(UniqueID));
    END;

    PROCEDURE ReadBuffer@6(VAR DestExchangeFolder@1000 : Record 5320) : Boolean;
    BEGIN
      IF TempExchangeFolder.FINDSET THEN
        REPEAT
          IF NOT DestExchangeFolder.GET(TempExchangeFolder.FullPath) THEN BEGIN
            TempExchangeFolder.CALCFIELDS("Unique ID");
            DestExchangeFolder.INIT;
            DestExchangeFolder.TRANSFERFIELDS(TempExchangeFolder);
            DestExchangeFolder.INSERT;
          END;
        UNTIL TempExchangeFolder.NEXT = 0
      ELSE
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE IsAllowedFolderType@7(FolderClass@1000 : Text) : Boolean;
    BEGIN
      IF FolderClass = '' THEN
        EXIT(TRUE);

      IF FolderClass = 'IPF.Note' THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsServiceValid@4() : Boolean;
    BEGIN
      IF ISNULL(ServiceOnServer) AND ISNULL(ServiceOnClient) THEN
        EXIT(FALSE);

      IF ISNULL(ServiceOnServer) THEN
        EXIT(ServiceOnClient.ExchangeServiceUrl <> '');
      EXIT(ServiceOnServer.ExchangeServiceUrl <> '');
    END;

    PROCEDURE InvalidateService@5();
    BEGIN
      CLEAR(ServiceOnClient);
      CLEAR(ServiceOnServer);
    END;

    BEGIN
    END.
  }
}

