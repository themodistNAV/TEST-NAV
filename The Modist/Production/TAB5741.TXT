OBJECT Table 5741 Transfer Line
{
  OBJECT-PROPERTIES
  {
    Date=10/10/18;
    Time=[ 8:02:29 AM];
    Modified=Yes;
    Version List=NAVW19.00.00.45480,NS2016.16,TM0001;
  }
  PROPERTIES
  {
    OnInsert=VAR
               TransLine2@1000 : Record 5741;
             BEGIN
               TestStatusOpen;
               TransLine2.RESET;
               TransLine2.SETFILTER("Document No.",TransHeader."No.");
               IF TransLine2.FINDLAST THEN
                 "Line No." := TransLine2."Line No." + 10000;
               ReserveTransferLine.VerifyQuantity(Rec,xRec);
             END;

    OnModify=BEGIN
               ReserveTransferLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=VAR
               ItemChargeAssgntPurch@1000 : Record 5805;
             BEGIN
               TestStatusOpen;

               TESTFIELD("Quantity Shipped","Quantity Received");
               TESTFIELD("Qty. Shipped (Base)","Qty. Received (Base)");
               CALCFIELDS("Reserved Qty. Inbnd. (Base)","Reserved Qty. Outbnd. (Base)");
               TESTFIELD("Reserved Qty. Inbnd. (Base)",0);
               TESTFIELD("Reserved Qty. Outbnd. (Base)",0);

               ReserveTransferLine.DeleteLine(Rec);
               WhseValidateSourceLine.TransLineDelete(Rec);

               ItemChargeAssgntPurch.SETCURRENTKEY(
                 "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
               ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",ItemChargeAssgntPurch."Applies-to Doc. Type"::"Transfer Receipt");
               ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.","Document No.");
               ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.","Line No.");
               ItemChargeAssgntPurch.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Transfer Line;
               ENG=Transfer Line];
    LookupPageID=Page5749;
    DrillDownPageID=Page5749;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ENG=Document No.] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
    { 3   ;   ;Item No.            ;Code20        ;TableRelation=Item WHERE (Type=CONST(Inventory));
                                                   OnValidate=VAR
                                                                TempTransferLine@1000 : TEMPORARY Record 5741;
                                                              BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                CALCFIELDS("Reserved Qty. Inbnd. (Base)");
                                                                TESTFIELD("Reserved Qty. Inbnd. (Base)",0);
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);

                                                                TempTransferLine := Rec;
                                                                INIT;
                                                                "Item No." := TempTransferLine."Item No.";
                                                                SKU := TempTransferLine.SKU; //DOC TM0001 AW 19/11/2017
                                                                IF "Item No." = '' THEN
                                                                  EXIT;

                                                                GetTransHeader;
                                                                GetItem;
                                                                GetDefaultBin("Transfer-from Code","Transfer-to Code");

                                                                Item.TESTFIELD(Blocked,FALSE);

                                                                VALIDATE(Description,Item.Description);
                                                                VALIDATE("Gen. Prod. Posting Group",Item."Gen. Prod. Posting Group");
                                                                VALIDATE("Inventory Posting Group",Item."Inventory Posting Group");
                                                                VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                VALIDATE("Gross Weight",Item."Gross Weight");
                                                                VALIDATE("Net Weight",Item."Net Weight");
                                                                VALIDATE("Unit Volume",Item."Unit Volume");
                                                                VALIDATE("Units per Parcel",Item."Units per Parcel");
                                                                VALIDATE("Description 2",Item."Description 2");
                                                                VALIDATE(Quantity,xRec.Quantity);
                                                                "Item Category Code" := Item."Item Category Code";
                                                                "Product Group Code" := Item."Product Group Code";

                                                                CreateDim(DATABASE::Item,"Item No.");
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

                                                                SKU := CreateSKU; //DOC TM0001 AW 19/11/2017
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ENG=Item No.] }
    { 4   ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                IF Quantity <> 0 THEN
                                                                  TESTFIELD("Item No.");
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                IF ((Quantity * "Quantity Shipped") < 0) OR
                                                                   (ABS(Quantity) < ABS("Quantity Shipped"))
                                                                THEN
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text002,FIELDCAPTION("Quantity Shipped")));
                                                                IF (("Quantity (Base)" * "Qty. Shipped (Base)") < 0) OR
                                                                   (ABS("Quantity (Base)") < ABS("Qty. Received (Base)"))
                                                                THEN
                                                                  FIELDERROR("Quantity (Base)",STRSUBSTNO(Text002,FIELDCAPTION("Qty. Shipped (Base)")));
                                                                InitQtyInTransit;
                                                                InitOutstandingQty;
                                                                InitQtyToShip;
                                                                InitQtyToReceive;
                                                                CheckItemAvailable(FIELDNO(Quantity));

                                                                ReserveTransferLine.VerifyQuantity(Rec,xRec);

                                                                UpdateWithWarehouseShipReceive;

                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENG=Quantity];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 5   ;   ;Unit of Measure     ;Text10        ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure;
                                                              ENG=Unit of Measure] }
    { 6   ;   ;Qty. to Ship        ;Decimal       ;OnValidate=BEGIN
                                                                GetLocation("Transfer-from Code");
                                                                IF CurrFieldNo <> 0 THEN BEGIN
                                                                  IF Location."Require Shipment" AND
                                                                     ("Qty. to Ship" <> 0)
                                                                  THEN
                                                                    CheckWarehouse("Transfer-from Code",FALSE);
                                                                  WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                                END;

                                                                IF "Qty. to Ship" > "Outstanding Quantity" THEN
                                                                  IF "Outstanding Quantity" > 0 THEN
                                                                    ERROR(
                                                                      Text005,
                                                                      "Outstanding Quantity")
                                                                  ELSE
                                                                    ERROR(Text006);
                                                                "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship;
                                                              ENG=Qty. to Ship];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7   ;   ;Qty. to Receive     ;Decimal       ;OnValidate=BEGIN
                                                                GetLocation("Transfer-to Code");
                                                                IF CurrFieldNo <> 0 THEN BEGIN
                                                                  IF Location."Require Receive" AND
                                                                     ("Qty. to Receive" <> 0)
                                                                  THEN
                                                                    CheckWarehouse("Transfer-to Code",TRUE);
                                                                  WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                                END;

                                                                IF "Qty. to Receive" > "Qty. in Transit" THEN
                                                                  IF "Qty. in Transit" > 0 THEN
                                                                    ERROR(
                                                                      Text008,
                                                                      "Qty. in Transit")
                                                                  ELSE
                                                                    ERROR(Text009);
                                                                "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive;
                                                              ENG=Qty. to Receive];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 8   ;   ;Quantity Shipped    ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Shipped (Base)" := CalcBaseQty("Quantity Shipped");
                                                                InitQtyInTransit;
                                                                InitOutstandingQty;
                                                                InitQtyToShip;
                                                                InitQtyToReceive;
                                                              END;

                                                   CaptionML=[ENU=Quantity Shipped;
                                                              ENG=Quantity Shipped];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 9   ;   ;Quantity Received   ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Received (Base)" := CalcBaseQty("Quantity Received");
                                                                InitQtyInTransit;
                                                                InitOutstandingQty;
                                                                InitQtyToReceive;
                                                              END;

                                                   CaptionML=[ENU=Quantity Received;
                                                              ENG=Quantity Received];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 10  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=Open,Released;
                                                                    ENG=Open,Released];
                                                   OptionString=Open,Released;
                                                   Editable=No }
    { 11  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENG=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 12  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENG=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 13  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 14  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENG=Gen. Prod. Posting Group] }
    { 15  ;   ;Inventory Posting Group;Code10     ;TableRelation="Inventory Posting Group";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              ENG=Inventory Posting Group] }
    { 16  ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ENG=Quantity (Base)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 17  ;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=[ENU=Outstanding Qty. (Base);
                                                              ENG=Outstanding Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 18  ;   ;Qty. to Ship (Base) ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Ship","Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship (Base);
                                                              ENG=Qty. to Ship (Base)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 19  ;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=[ENU=Qty. Shipped (Base);
                                                              ENG=Qty. Shipped (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;Qty. to Receive (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Receive","Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive (Base);
                                                              ENG=Qty. to Receive (Base)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 21  ;   ;Qty. Received (Base);Decimal       ;CaptionML=[ENU=Qty. Received (Base);
                                                              ENG=Qty. Received (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 22  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENG=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 23  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                UnitOfMeasure@1000 : Record 204;
                                                                UOMMgt@1001 : Codeunit 5402;
                                                              BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Qty. Shipped (Base)",0);
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Qty. Received (Base)",0);
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                                IF "Unit of Measure Code" = '' THEN
                                                                  "Unit of Measure" := ''
                                                                ELSE BEGIN
                                                                  IF NOT UnitOfMeasure.GET("Unit of Measure Code") THEN
                                                                    UnitOfMeasure.INIT;
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                END;
                                                                GetItem;
                                                                VALIDATE("Qty. per Unit of Measure",UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code"));
                                                                "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENG=Unit of Measure Code] }
    { 24  ;   ;Outstanding Quantity;Decimal       ;CaptionML=[ENU=Outstanding Quantity;
                                                              ENG=Outstanding Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 25  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENG=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 26  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENG=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 27  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENG=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 30  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record 5401;
                                                              BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);

                                                                IF "Variant Code" = '' THEN
                                                                  EXIT;

                                                                GetDefaultBin("Transfer-from Code","Transfer-to Code");
                                                                ItemVariant.GET("Item No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                                "Description 2" := ItemVariant."Description 2";

                                                                CheckItemAvailable(FIELDNO("Variant Code"));
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ENG=Variant Code] }
    { 31  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENG=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 32  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENG=Description 2] }
    { 33  ;   ;In-Transit Code     ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                              END;

                                                   CaptionML=[ENU=In-Transit Code;
                                                              ENG=In-Transit Code];
                                                   Editable=No }
    { 34  ;   ;Qty. in Transit     ;Decimal       ;CaptionML=[ENU=Qty. in Transit;
                                                              ENG=Qty. in Transit];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 35  ;   ;Qty. in Transit (Base);Decimal     ;CaptionML=[ENU=Qty. in Transit (Base);
                                                              ENG=Qty. in Transit (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 36  ;   ;Transfer-from Code  ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                IF "Transfer-from Code" <> xRec."Transfer-from Code" THEN BEGIN
                                                                  "Transfer-from Bin Code" := '';
                                                                  GetDefaultBin("Transfer-from Code",'');
                                                                END;

                                                                CheckItemAvailable(FIELDNO("Transfer-from Code"));
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                UpdateWithWarehouseShipReceive;
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Transfer-from Code;
                                                              ENG=Transfer-from Code];
                                                   Editable=No }
    { 37  ;   ;Transfer-to Code    ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                IF "Transfer-to Code" <> xRec."Transfer-to Code" THEN BEGIN
                                                                  "Transfer-To Bin Code" := '';
                                                                  GetDefaultBin('',"Transfer-to Code");
                                                                END;

                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                UpdateWithWarehouseShipReceive;
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Transfer-to Code;
                                                              ENG=Transfer-to Code];
                                                   Editable=No }
    { 38  ;   ;Shipment Date       ;Date          ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                CheckItemAvailable(FIELDNO("Shipment Date"));
                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.TransferLineCheck(Rec,CurrFieldNo <> 0,0);
                                                              END;

                                                   CaptionML=[ENU=Shipment Date;
                                                              ENG=Shipment Date] }
    { 39  ;   ;Receipt Date        ;Date          ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcShipmentDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                CheckItemAvailable(FIELDNO("Shipment Date"));
                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.TransferLineCheck(Rec,CurrFieldNo <> 0,1);
                                                              END;

                                                   CaptionML=[ENU=Receipt Date;
                                                              ENG=Receipt Date] }
    { 40  ;   ;Derived From Line No.;Integer      ;TableRelation="Transfer Line"."Line No." WHERE (Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Derived From Line No.;
                                                              ENG=Derived From Line No.] }
    { 41  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENG=Shipping Agent Code] }
    { 42  ;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.GetShippingTime(
                                                                  "Transfer-from Code","Transfer-to Code",
                                                                  "Shipping Agent Code","Shipping Agent Service Code",
                                                                  "Shipping Time");
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                CheckItemAvailable(FIELDNO("Shipping Agent Service Code"));
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENG=Shipping Agent Service Code] }
    { 43  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                ItemTrackingLines@1001 : Page 6510;
                                                              BEGIN
                                                                IF "Appl.-to Item Entry" <> 0 THEN BEGIN
                                                                  TESTFIELD(Quantity);
                                                                  ItemLedgEntry.GET("Appl.-to Item Entry");
                                                                  ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                  IF (ItemLedgEntry."Lot No." <> '') OR (ItemLedgEntry."Serial No." <> '') THEN
                                                                    ERROR(MustUseTrackingErr,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-to Item Entry"));
                                                                  IF ABS("Qty. to Ship (Base)") > ItemLedgEntry.Quantity THEN
                                                                    ERROR(ShippingMoreUnitsThanReceivedErr,ItemLedgEntry.Quantity,ItemLedgEntry."Document No.");

                                                                  ItemLedgEntry.TESTFIELD("Location Code","Transfer-from Code");
                                                                  IF NOT ItemLedgEntry.Open THEN
                                                                    MESSAGE(LedgEntryWillBeOpenedMsg,"Appl.-to Item Entry");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-to Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENG=Appl.-to Item Entry] }
    { 50  ;   ;Reserved Quantity Inbnd.;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                       Source Ref. No.=FIELD(Line No.),
                                                                                                       Source Type=CONST(5741),
                                                                                                       Source Subtype=CONST(1),
                                                                                                       Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity Inbnd.;
                                                              ENG=Reserved Quantity Inbnd.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 51  ;   ;Reserved Quantity Outbnd.;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                        Source Ref. No.=FIELD(Line No.),
                                                                                                        Source Type=CONST(5741),
                                                                                                        Source Subtype=CONST(0),
                                                                                                        Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                        Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity Outbnd.;
                                                              ENG=Reserved Quantity Outbnd.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 52  ;   ;Reserved Qty. Inbnd. (Base);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                Source Ref. No.=FIELD(Line No.),
                                                                                                                Source Type=CONST(5741),
                                                                                                                Source Subtype=CONST(1),
                                                                                                                Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. Inbnd. (Base);
                                                              ENG=Reserved Qty. Inbnd. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 53  ;   ;Reserved Qty. Outbnd. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                 Source Ref. No.=FIELD(Line No.),
                                                                                                                 Source Type=CONST(5741),
                                                                                                                 Source Subtype=CONST(0),
                                                                                                                 Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                                 Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. Outbnd. (Base);
                                                              ENG=Reserved Qty. Outbnd. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 54  ;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Time;
                                                              ENG=Shipping Time] }
    { 55  ;   ;Reserved Quantity Shipped;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                       Source Ref. No.=FILTER(<>0),
                                                                                                       Source Type=CONST(5741),
                                                                                                       Source Subtype=CONST(1),
                                                                                                       Source Prod. Order Line=FIELD(Line No.),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity Shipped;
                                                              ENG=Reserved Quantity Shipped];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 56  ;   ;Reserved Qty. Shipped (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                Source Ref. No.=FILTER(<>0),
                                                                                                                Source Type=CONST(5741),
                                                                                                                Source Subtype=CONST(1),
                                                                                                                Source Prod. Order Line=FIELD(Line No.),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. Shipped (Base);
                                                              ENG=Reserved Qty. Shipped (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENG=Dimension Set ID];
                                                   Editable=No }
    { 5704;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENG=Item Category Code] }
    { 5707;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENG=Product Group Code] }
    { 5750;   ;Whse. Inbnd. Otsdg. Qty (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Receipt Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(5741),
                                                                                                                             Source Subtype=CONST(1),
                                                                                                                             Source No.=FIELD(Document No.),
                                                                                                                             Source Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Whse. Inbnd. Otsdg. Qty (Base);
                                                              ENG=Whse. Inbnd. Otsdg. Qty (Base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5751;   ;Whse Outbnd. Otsdg. Qty (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(5741),
                                                                                                                              Source Subtype=CONST(0),
                                                                                                                              Source No.=FIELD(Document No.),
                                                                                                                              Source Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Whse Outbnd. Otsdg. Qty (Base);
                                                              ENG=Whse Outbnd. Otsdg. Qty (Base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;CaptionML=[ENU=Completely Shipped;
                                                              ENG=Completely Shipped];
                                                   Editable=No }
    { 5753;   ;Completely Received ;Boolean       ;CaptionML=[ENU=Completely Received;
                                                              ENG=Completely Received];
                                                   Editable=No }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                              END;

                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ENG=Outbound Whse. Handling Time] }
    { 5794;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                              END;

                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              ENG=Inbound Whse. Handling Time] }
    { 7300;   ;Transfer-from Bin Code;Code20      ;TableRelation="Bin Content"."Bin Code" WHERE (Location Code=FIELD(Transfer-from Code),
                                                                                                 Item No.=FIELD(Item No.),
                                                                                                 Variant Code=FIELD(Variant Code));
                                                   OnValidate=BEGIN
                                                                IF "Transfer-from Bin Code" <> xRec."Transfer-from Bin Code" THEN BEGIN
                                                                  TESTFIELD("Transfer-from Code");
                                                                  IF "Transfer-from Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Transfer-from Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                    GetBin("Transfer-from Code","Transfer-from Bin Code");
                                                                    TESTFIELD("Transfer-from Code",Bin."Location Code");
                                                                    HandleDedicatedBin(TRUE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Transfer-from Bin Code;
                                                              ENG=Transfer-from Bin Code] }
    { 7301;   ;Transfer-To Bin Code;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Transfer-to Code));
                                                   OnValidate=BEGIN
                                                                IF "Transfer-To Bin Code" <> xRec."Transfer-To Bin Code" THEN BEGIN
                                                                  TESTFIELD("Transfer-to Code");
                                                                  IF "Transfer-To Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Transfer-to Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                    GetBin("Transfer-to Code","Transfer-To Bin Code");
                                                                    TESTFIELD("Transfer-to Code",Bin."Location Code");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Transfer-To Bin Code;
                                                              ENG=Transfer-To Bin Code] }
    { 50000;  ;SKU                 ;Code50        ;OnValidate=BEGIN
                                                                GetItemFromSKU; //DOC TM0001 AW 19/11/2017
                                                              END;

                                                   Description=TM0001 }
    { 9087000;;Style No.           ;Code20        ;TableRelation=Style;
                                                   CaptionML=[ENU=Style No.;
                                                              ENG=Style No.];
                                                   Description=NS2015.1 }
    { 9087001;;Allocation Code     ;Code10        ;CaptionML=[ENU=Allocation Code;
                                                              ENG=Allocation Code];
                                                   Description=NS2015.1 }
    { 9087002;;Item Variant UID    ;Code50        ;CaptionML=[ENU=Item Variant UID;
                                                              ENG=Item Variant UID];
                                                   Description=NS2015.1 }
    { 9087003;;Season Code         ;Code20        ;TableRelation=Season;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Season Code" <> xRec."Season Code") THEN
                                                                  Rec.VALIDATE("Sub-Season Code", '');
                                                              END;

                                                   CaptionML=[ENU=Season Code;
                                                              ENG=Season Code];
                                                   Description=NS2015.1 }
    { 9087004;;Brand Code          ;Code20        ;TableRelation=Brand;
                                                   CaptionML=[ENU=Brand Code;
                                                              ENG=Brand Code];
                                                   Description=NS2015.1 }
    { 9087005;;Division Code       ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Division));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Division Code" <> xRec."Division Code") THEN
                                                                  Rec.VALIDATE("Department Code", '');
                                                              END;

                                                   CaptionML=[ENU=Division Code;
                                                              ENG=Division Code];
                                                   Description=NS2015.1 }
    { 9087006;;Department Code     ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Department),
                                                                                              Division Code=FIELD(Division Code));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Department Code" <> xRec."Department Code") THEN
                                                                  Rec.VALIDATE("Group Code", '');
                                                              END;

                                                   CaptionML=[ENU=Department Code;
                                                              ENG=Department Code];
                                                   Description=NS2015.1 }
    { 9087007;;Group Code          ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Group),
                                                                                              Division Code=FIELD(Division Code),
                                                                                              Department Code=FIELD(Department Code));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Group Code" <> xRec."Group Code") THEN
                                                                  Rec.VALIDATE("Category Code", '');
                                                              END;

                                                   CaptionML=[ENU=Group Code;
                                                              ENG=Group Code];
                                                   Description=NS2015.1 }
    { 9087008;;Category Code       ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Category),
                                                                                              Division Code=FIELD(Division Code),
                                                                                              Department Code=FIELD(Department Code),
                                                                                              Group Code=FIELD(Group Code));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Category Code" <> xRec."Category Code") THEN
                                                                  Rec.VALIDATE("Sub-Category Code", '');
                                                              END;

                                                   CaptionML=[ENU=Category Code;
                                                              ENG=Category Code];
                                                   Description=NS2015.1 }
    { 9087009;;Sub-Category Code   ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Category),
                                                                                              Division Code=FIELD(Division Code),
                                                                                              Department Code=FIELD(Department Code),
                                                                                              Group Code=FIELD(Group Code),
                                                                                              Category Code=FIELD(Category Code));
                                                   CaptionML=[ENU=Sub-Category Code;
                                                              ENG=Sub-Category Code];
                                                   Description=NS2015.1 }
    { 9087010;;Size Group Code     ;Code20        ;TableRelation="Size Group";
                                                   OnValidate=VAR
                                                                SizeGroup@1000000000 : Record 9087001;
                                                              BEGIN
                                                                IF (Rec."Size Group Code" <> xRec."Size Group Code") THEN BEGIN
                                                                  IF ("Size Group Code" <> '') THEN BEGIN
                                                                    SizeGroup.GET("Size Group Code");
                                                                    "Standard Size Group Code" := SizeGroup."Standard Size Group Code";
                                                                  END ELSE
                                                                    "Standard Size Group Code" := '';
                                                                  Rec.VALIDATE("Size Code", '');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Size Group Code;
                                                              ENG=Size Group Code];
                                                   Description=NS2015.1 }
    { 9087011;;Size Code           ;Code20        ;TableRelation=Size.Code WHERE (Size Group Code=FIELD(Size Group Code));
                                                   OnValidate=VAR
                                                                Size@1000000000 : Record 9087002;
                                                              BEGIN
                                                                IF ("Size Code" <> '') THEN BEGIN
                                                                  Size.GET("Size Group Code", "Size Code");
                                                                  "Standard Size Code" := Size."Standard Size Code";
                                                                END ELSE
                                                                  "Standard Size Code" := '';
                                                              END;

                                                   CaptionML=[ENU=Size Code;
                                                              ENG=Size Code];
                                                   Description=NS2015.1 }
    { 9087012;;Standard Size Group Code;Code20    ;TableRelation="Size Group";
                                                   OnValidate=BEGIN
                                                                IF (Rec."Standard Size Group Code" <> xRec."Standard Size Group Code") THEN
                                                                  Rec.VALIDATE("Standard Size Code", '');
                                                              END;

                                                   CaptionML=[ENU=Standard Size Group Code;
                                                              ENG=Standard Size Group Code];
                                                   Description=NS2015.1 }
    { 9087013;;Standard Size Code  ;Code20        ;TableRelation=Size.Code WHERE (Size Group Code=FIELD(Standard Size Group Code));
                                                   CaptionML=[ENU=Standard Size Code;
                                                              ENG=Standard Size Code];
                                                   Description=NS2015.1 }
    { 9087014;;Sub-Season Code     ;Code20        ;TableRelation=Sub-Season.Code WHERE (Season Code=FIELD(Season Code));
                                                   CaptionML=[ENU=Sub-Season Code;
                                                              ENG=Sub-Season Code];
                                                   Description=NS2015.1 }
    { 99000755;;Planning Flexibility;Option       ;OnValidate=BEGIN
                                                                IF "Planning Flexibility" <> xRec."Planning Flexibility" THEN
                                                                  ReserveTransferLine.UpdatePlanningFlexibility(Rec);
                                                              END;

                                                   CaptionML=[ENU=Planning Flexibility;
                                                              ENG=Planning Flexibility];
                                                   OptionCaptionML=[ENU=Unlimited,None;
                                                                    ENG=Unlimited,None];
                                                   OptionString=Unlimited,None }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
    {    ;Transfer-to Code,Status,Derived From Line No.,Item No.,Variant Code,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Receipt Date,In-Transit Code;
                                                   SumIndexFields=Qty. in Transit (Base),Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Transfer-from Code,Status,Derived From Line No.,Item No.,Variant Code,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Shipment Date,In-Transit Code;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Item No.,Variant Code                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.;ENG=You cannot rename a %1.';
      Text002@1002 : TextConst 'ENU=must not be less than %1;ENG=must not be less than %1';
      Text003@1003 : TextConst 'ENU="Warehouse %1 is required for %2 = %3.";ENG="Warehouse %1 is required for %2 = %3."';
      Text004@1004 : TextConst 'ENU=\The entered information may be disregarded by warehouse operations.;ENG=\The entered information may be disregarded by warehouse operations.';
      Text005@1005 : TextConst 'ENU=You cannot ship more than %1 units.;ENG=You cannot ship more than %1 units.';
      Text006@1006 : TextConst 'ENU=All items have been shipped.;ENG=All items have been shipped.';
      Text008@1008 : TextConst 'ENU=You cannot receive more than %1 units.;ENG=You cannot receive more than %1 units.';
      Text009@1009 : TextConst 'ENU=No items are currently in transit.;ENG=No items are currently in transit.';
      Text011@1011 : TextConst 'ENU=Outbound,Inbound;ENG=Outbound,Inbound';
      Text012@1020 : TextConst 'ENU=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?;ENG=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?';
      Text013@1017 : TextConst 'ENU=Cancelled.;ENG=Cancelled.';
      TransferRoute@1012 : Record 5742;
      Item@1013 : Record 27;
      TransHeader@1014 : Record 5740;
      Location@1016 : Record 14;
      Bin@1000 : Record 7354;
      Reservation@1018 : Page 498;
      DimMgt@1019 : Codeunit 408;
      WhseValidateSourceLine@1022 : Codeunit 5777;
      ReserveTransferLine@1024 : Codeunit 99000836;
      CheckDateConflict@1025 : Codeunit 99000815;
      WMSManagement@1015 : Codeunit 7302;
      TrackingBlocked@1007 : Boolean;
      MustUseTrackingErr@1023 : TextConst '@@@="%1 = Form Name, %2 = Value to Enter";ENU=You must use form %1 to enter %2, if item tracking is used.;ENG=You must use form %1 to enter %2, if item tracking is used.';
      LedgEntryWillBeOpenedMsg@1021 : TextConst '@@@="%1 = Entry No.";ENU=When posting the Applied to Ledger Entry %1 will be opened first.;ENG=When posting the Applied to Ledger Entry %1 will be opened first.';
      ShippingMoreUnitsThanReceivedErr@1010 : TextConst '@@@="%1 = Quantity Value, %2 = Document No.";ENU=You cannot ship more than the %1 units that you have received for document no. %2.;ENG=You cannot ship more than the %1 units that you have received for document no. %2.';
      "--TMgFunctions--"@1000000000 : Integer;
      GACWebServiceMgmt@1000000002 : Codeunit 50027;
      ImportTransferOrder@1000000001 : Report 50012;
      "--TMTxt--"@1000000003 : TextConst;
      Text50000@1000000004 : TextConst 'ENU=You have insufficient quantity of Item %1-%2 in GAC.';

    LOCAL PROCEDURE InitOutstandingQty@16();
    BEGIN
      "Outstanding Quantity" := Quantity - "Quantity Shipped";
      "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Shipped (Base)";
      "Completely Shipped" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
    END;

    LOCAL PROCEDURE InitQtyToShip@15();
    BEGIN
      "Qty. to Ship" := "Outstanding Quantity";
      "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
    END;

    LOCAL PROCEDURE InitQtyToReceive@2();
    BEGIN
      "Qty. to Receive" := "Qty. in Transit";
      "Qty. to Receive (Base)" := "Qty. in Transit (Base)";
    END;

    LOCAL PROCEDURE InitQtyInTransit@4();
    BEGIN
      "Qty. in Transit" := "Quantity Shipped" - "Quantity Received";
      "Qty. in Transit (Base)" := "Qty. Shipped (Base)" - "Qty. Received (Base)";
      "Completely Received" := (Quantity <> 0) AND (Quantity = "Quantity Received");
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetTransHeader@1();
    BEGIN
      TESTFIELD("Document No.");
      IF "Document No." <> TransHeader."No." THEN
        TransHeader.GET("Document No.");

      TransHeader.TESTFIELD("Shipment Date");
      TransHeader.TESTFIELD("Receipt Date");
      TransHeader.TESTFIELD("Transfer-from Code");
      TransHeader.TESTFIELD("Transfer-to Code");
      TransHeader.TESTFIELD("In-Transit Code");
      "In-Transit Code" := TransHeader."In-Transit Code";
      "Transfer-from Code" := TransHeader."Transfer-from Code";
      "Transfer-to Code" := TransHeader."Transfer-to Code";
      "Shipment Date" := TransHeader."Shipment Date";
      "Receipt Date" := TransHeader."Receipt Date";
      "Shipping Agent Code" := TransHeader."Shipping Agent Code";
      "Shipping Agent Service Code" := TransHeader."Shipping Agent Service Code";
      "Shipping Time" := TransHeader."Shipping Time";
      "Outbound Whse. Handling Time" := TransHeader."Outbound Whse. Handling Time";
      "Inbound Whse. Handling Time" := TransHeader."Inbound Whse. Handling Time";
      Status := TransHeader.Status;
    END;

    LOCAL PROCEDURE GetItem@9();
    BEGIN
      TESTFIELD("Item No.");
      IF "Item No." <> Item."No." THEN
        Item.GET("Item No.");
    END;

    PROCEDURE BlockDynamicTracking@23(SetBlock@1000 : Boolean);
    BEGIN
      TrackingBlocked := SetBlock;
      ReserveTransferLine.Block(SetBlock);
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
      VerifyItemLineDim;
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      SourceCodeSetup@1002 : Record 242;
      TableID@1003 : ARRAY [10] OF Integer;
      No@1004 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup.Transfer,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",TransHeader."Dimension Set ID",DATABASE::Item);
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    LOCAL PROCEDURE CheckItemAvailable@3(CalledByFieldNo@1000 : Integer);
    VAR
      ItemCheckAvail@1001 : Codeunit 311;
    BEGIN
      IF (CurrFieldNo <> 0) AND
         (CurrFieldNo = CalledByFieldNo) AND
         ("Item No." <> '') AND
         ("Outstanding Quantity" > 0)
      //THEN //DOC TM0001 AW 13/03/2018 -+
      THEN BEGIN //DOC TM0001 AW 13/03/2018 -+
        IF ItemCheckAvail.TransferLineCheck(Rec) THEN
          ItemCheckAvail.RaiseUpdateInterruptedError;
        CheckGACItemInventory; //DOC TM0001 AW 13/03/2018 -
      END; //DOC TM0001 AW 13/03/2018 -+
    END;

    PROCEDURE OpenItemTrackingLines@6500(Direction@1002 : 'Outbound,Inbound');
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Quantity (Base)");

      ReserveTransferLine.CallItemTracking(Rec,Direction);
    END;

    LOCAL PROCEDURE TestStatusOpen@37();
    BEGIN
      TESTFIELD("Document No.");
      IF TransHeader."No." <> "Document No." THEN
        TransHeader.GET("Document No.");
      TransHeader.TESTFIELD(Status,TransHeader.Status::Open);
      //TransHeader.TESTFIELD("Transfer Requested",FALSE);
    END;

    PROCEDURE ShowReservation@10();
    VAR
      OptionNumber@1000 : Integer;
    BEGIN
      TESTFIELD("Item No.");
      CLEAR(Reservation);
      OptionNumber := STRMENU(Text011);
      IF OptionNumber > 0 THEN BEGIN
        Reservation.SetTransLine(Rec,OptionNumber - 1);
        Reservation.RUNMODAL;
      END;
    END;

    PROCEDURE UpdateWithWarehouseShipReceive@41();
    BEGIN
      IF Location.RequireShipment("Transfer-from Code") THEN
        VALIDATE("Qty. to Ship",0)
      ELSE
        VALIDATE("Qty. to Ship","Outstanding Quantity");

      IF Location.RequireReceive("Transfer-to Code") THEN
        VALIDATE("Qty. to Receive",0)
      ELSE
        VALIDATE("Qty. to Receive","Qty. in Transit");
    END;

    LOCAL PROCEDURE CheckWarehouse@47(LocationCode@1003 : Code[10];Receive@1004 : Boolean);
    VAR
      ShowDialog@1001 : ' ,Message,Error';
      DialogText@1000 : Text[50];
    BEGIN
      GetLocation(LocationCode);
      IF Location."Directed Put-away and Pick" THEN BEGIN
        ShowDialog := ShowDialog::Error;
        IF Receive THEN
          DialogText := Location.GetRequirementText(Location.FIELDNO("Require Receive"))
        ELSE
          DialogText := Location.GetRequirementText(Location.FIELDNO("Require Shipment"));
      END ELSE BEGIN
        IF Receive AND (Location."Require Receive" OR Location."Require Put-away") THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Transfer Line",
               1,
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location."Require Receive" THEN
              ShowDialog := ShowDialog::Message;
          IF Location."Require Receive" THEN
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Receive"))
          ELSE
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Put-away"));
        END;

        IF NOT Receive AND (Location."Require Shipment" OR Location."Require Pick") THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Transfer Line",
               0,
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location."Require Shipment" THEN
              ShowDialog := ShowDialog::Message;
          IF Location."Require Shipment" THEN
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Shipment"))
          ELSE
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Pick"));
        END;
      END;

      CASE ShowDialog OF
        ShowDialog::Message:
          MESSAGE(Text003 + Text004,DialogText,FIELDCAPTION("Line No."),"Line No.");
        ShowDialog::Error:
          ERROR(Text003,DialogText,FIELDCAPTION("Line No."),"Line No.");
      END;
    END;

    LOCAL PROCEDURE GetLocation@44(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN
        Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@36(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      IF BinCode = '' THEN
        CLEAR(Bin)
      ELSE
        IF Bin.Code <> BinCode THEN
          Bin.GET(LocationCode,BinCode);
    END;

    LOCAL PROCEDURE GetDefaultBin@5(FromLocationCode@1000 : Code[10];ToLocationCode@1001 : Code[10]);
    BEGIN
      IF (FromLocationCode <> '') AND ("Item No." <> '') THEN BEGIN
        GetLocation(FromLocationCode);
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
          WMSManagement.GetDefaultBin("Item No.","Variant Code",FromLocationCode,"Transfer-from Bin Code");
          HandleDedicatedBin(FALSE);
        END;
      END;

      IF (ToLocationCode <> '') AND ("Item No." <> '') THEN BEGIN
        GetLocation(ToLocationCode);
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
          WMSManagement.GetDefaultBin("Item No.","Variant Code",ToLocationCode,"Transfer-To Bin Code");
      END;
    END;

    PROCEDURE IsInbound@8() : Boolean;
    BEGIN
      EXIT("Quantity (Base)" < 0);
    END;

    LOCAL PROCEDURE HandleDedicatedBin@7(IssueWarning@1000 : Boolean);
    VAR
      WhseIntegrationMgt@1001 : Codeunit 7317;
    BEGIN
      IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
        WhseIntegrationMgt.CheckIfBinDedicatedOnSrcDoc("Transfer-from Code","Transfer-from Bin Code",IssueWarning);
    END;

    PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record 27;IsReceipt@1001 : Boolean;IsSupplyForPlanning@1002 : Boolean);
    BEGIN
      RESET;
      SETCURRENTKEY("Item No.");
      SETRANGE("Item No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      IF NOT IsSupplyForPlanning THEN
        SETRANGE("Derived From Line No.",0);
      IF IsReceipt THEN BEGIN
        SETFILTER("Transfer-to Code",Item.GETFILTER("Location Filter"));
        SETFILTER("Receipt Date",Item.GETFILTER("Date Filter"))
      END ELSE BEGIN
        SETFILTER("Transfer-from Code",Item.GETFILTER("Location Filter"));
        SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
        SETFILTER("Outstanding Qty. (Base)",'<>0');
      END;
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
    END;

    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record 27;IsReceipt@1001 : Boolean;IsSupplyForPlanning@1002 : Boolean) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,IsReceipt,IsSupplyForPlanning);
      EXIT(FIND('-'));
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27;IsReceipt@1001 : Boolean) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,IsReceipt,FALSE);
      EXIT(NOT ISEMPTY);
    END;

    LOCAL PROCEDURE VerifyItemLineDim@87();
    BEGIN
      IF "Dimension Set ID" <> xRec."Dimension Set ID" THEN
        IF ("Quantity Shipped" <> 0) OR ("Qty. Shipped (Base)" <> 0)THEN
          IF NOT CONFIRM(Text012,FALSE,TABLECAPTION) THEN
            ERROR(Text013);
    END;

    LOCAL PROCEDURE SelectItemEntry@11(CurrentFieldNo@1000 : Integer);
    VAR
      ItemLedgEntry@1001 : Record 32;
      TransferLine2@1002 : Record 5741;
    BEGIN
      ItemLedgEntry.SETRANGE("Item No.","Item No.");
      IF "Transfer-from Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Transfer-from Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      ItemLedgEntry.SETRANGE(Positive,TRUE);
      ItemLedgEntry.SETRANGE(Open,TRUE);

      IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN BEGIN
        TransferLine2 := Rec;
        TransferLine2.VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.");
        CheckItemAvailable(CurrentFieldNo);
        Rec := TransferLine2;
      END;
    END;

    PROCEDURE "--- NS.F ---"@1000000000();
    BEGIN
    END;

    PROCEDURE CreateUnavailableStock@1000000005();
    VAR
      lUnavailableStock@1000000001 : Record 9087037;
      lUnavailableStockManagement@1000000000 : Codeunit 9087020;
    BEGIN
      //DOC NS2015.1 - Creating unavailable stock

      Rec.TESTFIELD("Document No.");
      Rec.TESTFIELD("Line No.");
      Rec.TESTFIELD("Item No.");

      lUnavailableStockManagement.CreateUnavailableStock(lUnavailableStock."Document Type"::"Transfer Order", Rec."Document No.", Rec."Line No.",
        Rec."Item No.", Rec."Variant Code", Rec."Transfer-to Code");
    END;

    PROCEDURE ShowUnavailableStock@1000000002();
    VAR
      lUnavailableStock@1000000001 : Record 9087037;
      lUnavailableStockManagement@1000000000 : Codeunit 9087020;
    BEGIN
      //DOC NS2015.1 - Showing unavailable stock

      Rec.TESTFIELD("Document No.");
      Rec.TESTFIELD("Line No.");
      Rec.TESTFIELD("Item No.");

      lUnavailableStockManagement.ShowUnavailableStock(lUnavailableStock."Document Type"::"Transfer Order", Rec."Document No.", Rec."Line No.");
    END;

    LOCAL PROCEDURE "--TMFunctions--"@1000000001();
    BEGIN
    END;

    PROCEDURE CreateSKU@1000000003() : Code[50];
    BEGIN
      //DOC TM0001 AW 19/11/2017
      IF SKU <> '' THEN
        EXIT(SKU);
      IF "Item No." = '' THEN
        EXIT('');
      IF "Variant Code" <> '' THEN
        EXIT("Item No." + '-' + "Variant Code");
      EXIT("Item No.");
    END;

    PROCEDURE GetItemFromSKU@1000000004();
    VAR
      lItemNo@1000000000 : Code[20];
      lVariantCode@1000000001 : Code[20];
      lChar@1000000003 : Code[1];
      lCharPosition@1000000002 : Integer;
    BEGIN
      //DOC TM0001 AW 19/11/2017
      IF SKU = '' THEN
        EXIT;
      lChar := '-';
      lCharPosition := STRPOS(SKU,lChar);
      IF lCharPosition <> 0 THEN BEGIN
        lItemNo := COPYSTR(SKU,1,lCharPosition - 1);
        lVariantCode := COPYSTR(SKU,lCharPosition + 1);
      END ELSE
        lItemNo := SKU;

      VALIDATE("Item No.",lItemNo);
      IF lVariantCode <> '' THEN
        VALIDATE("Variant Code",lVariantCode);
    END;

    PROCEDURE UploadTransferOrder@1000000006();
    BEGIN
      //DOC TM0001 AW 19/11/2017
      CLEAR(ImportTransferOrder);
      GetTransHeader;
      ImportTransferOrder.SetTransferOrder(TransHeader);
      ImportTransferOrder.RUNMODAL;
    END;

    LOCAL PROCEDURE CheckGACItemInventory@1000000009();
    VAR
      lGACInventory@1000000000 : Decimal;
    BEGIN
      //DOC TM0001 AW 13/03/2018
      EXIT;
      CLEAR(GACWebServiceMgmt);
      lGACInventory := GACWebServiceMgmt.GetGACItemInventory("Item No.","Variant Code","Transfer-from Code");
      IF "Quantity (Base)" > lGACInventory THEN
        ERROR(Text50000,"Item No.","Variant Code");
    END;

    BEGIN
    {
      //DOC NS2015.1 JH 20/02/2013 - nSemble fields, functions
      //DOC NS2015.1 JH 21/03/2014 - New nSemble fields, new logic
      //DOC TM0001 AW 19/11/2017 - Transfer Order EDI
    }
    END.
  }
}

