OBJECT Codeunit 11102035 OM - Management
{
  OBJECT-PROPERTIES
  {
    Date=19/11/15;
    Time=12:00:00 PM;
    Version List=OMA10.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ShortcutCaption@1(Number@1000 : Integer) : Text;
    VAR
      Setup@1001 : Record 11102035;
      Role@1002 : Record 11102055;
      RoleCode@1003 : Code[20];
    BEGIN
      IF Setup.GET THEN
        ;

      CASE Number OF
        1: RoleCode := Setup."Role Shortcut 1";
        2: RoleCode := Setup."Role Shortcut 2";
        3: RoleCode := Setup."Role Shortcut 3";
        4: RoleCode := Setup."Role Shortcut 4";
        5: RoleCode := Setup."Role Shortcut 5";
      END;

      IF RoleCode <> '' THEN
        IF Role.GET(RoleCode) THEN
          EXIT(Role.Description);
    END;

    PROCEDURE Split@2(String@1000 : Text;SplitCharacter@1001 : Text;VAR IntoArray@1002 : ARRAY [100] OF Text[120]) NoOfEntries : Integer;
    VAR
      i@1003 : Integer;
      PrevSplitPos@1004 : Integer;
    BEGIN
      CLEAR(IntoArray);

      FOR i := 1 TO STRLEN(String) DO
        IF String[i] = SplitCharacter[1] THEN BEGIN
          NoOfEntries += 1;
          IntoArray[NoOfEntries] := COPYSTR(String, PrevSplitPos + 1, i - PrevSplitPos - 1);
          PrevSplitPos := i;
        END;

      NoOfEntries += 1;
      IntoArray[NoOfEntries] := COPYSTR(String, PrevSplitPos + 1, STRLEN(String) - PrevSplitPos);
    END;

    PROCEDURE GetLastError2@3() : Text;
    BEGIN
      EXIT(GETLASTERRORTEXT);
      //EXIT('Errorhandling disabled.');
    END;

    PROCEDURE PersonalSetup@4(VAR Setup@1000 : Record 11102035;OpenPage@1001 : Boolean);
    VAR
      SetupPage@1002 : Page 11102037;
      ctConfirmCreate@1003 : TextConst 'DEU=From now on the global settings will not apply for you.\Are you sure?;ENU=From now on the global settings will not apply for you.\Are you sure?;ESP=From now on the global settings will not apply for you.\Are you sure?;FRA=From now on the global settings will not apply for you.\Are you sure?;NLD=Vanaf nu zullen de globale instellingen niet meer voor u gelden.\Weet u het zeker?;DEA=From now on the global settings will not apply for you.\Are you sure?';
      ctNoUserId@1004 : TextConst 'DEU=Credentials not known.;ENU=Credentials not known.;ESP=Credentials not known.;FRA=Credentials not known.;NLD=Gebruikersid niet bekend.;DEA=Credentials not known.';
    BEGIN
      IF Setup.PersonalCode = '' THEN
        ERROR(ctNoUserId);

      IF NOT Setup.GET(Setup.PersonalCode) THEN BEGIN
        IF NOT CONFIRM(ctConfirmCreate, FALSE) THEN
          EXIT;
        Setup.GET('');
        Setup."Primary Key" := Setup.PersonalCode;
        Setup.INSERT;
      END;

      Setup.GET(Setup.PersonalCode);
      IF OpenPage THEN BEGIN
        SetupPage.SETRECORD(Setup);
        SetupPage.RUN;
      END;
    END;

    PROCEDURE PersonalMachineSetup@32(VAR Setup@1000 : Record 11102035;OpenPage@1001 : Boolean);
    VAR
      SetupPage@1002 : Page 11102037;
      ctConfirmCreate@1003 : TextConst 'DEU=From now on the global settings will not apply for you.\Are you sure?;ENU=From now on the global settings will not apply for you.\Are you sure?;ESP=From now on the global settings will not apply for you.\Are you sure?;FRA=From now on the global settings will not apply for you.\Are you sure?;NLD=Vanaf nu zullen de globale instellingen niet meer voor u gelden.\Weet u het zeker?;DEA=From now on the global settings will not apply for you.\Are you sure?';
      ctNoUserId@1004 : TextConst 'DEU=Credentials not known.;ENU=Credentials not known.;ESP=Credentials not known.;FRA=Credentials not known.;NLD=Gebruikersid niet bekend.;DEA=Credentials not known.';
    BEGIN
      IF Setup.PersonalCode = '' THEN
        ERROR(ctNoUserId);

      IF NOT Setup.GET(Setup.PersonalMachineCode) THEN BEGIN
        IF NOT CONFIRM(ctConfirmCreate, FALSE) THEN
          EXIT;
        Setup.GET('');
        IF Setup.GET(Setup.PersonalCode) THEN
          ;
        Setup."Primary Key" := Setup.PersonalMachineCode;
        Setup.INSERT;
      END;

      Setup.GET(Setup.PersonalMachineCode);
      IF OpenPage THEN BEGIN
        SetupPage.SETRECORD(Setup);
        SetupPage.RUN;
      END;
    END;

    PROCEDURE FormatTableNo@5(VAR Text@1000 : Text;TableNo@1001 : Integer);
    VAR
      AllObj@1002 : Record 2000000038;
    BEGIN
      IF TableNo = 0 THEN
        Text := ''
      ELSE
        IF AllObj.GET(AllObj."Object Type"::Table, TableNo) THEN
          Text := AllObj."Object Name";
    END;

    PROCEDURE FormatFieldNo@6(VAR Text@1000 : Text;TableNo2@1001 : Integer;FieldNo2@1002 : Integer);
    VAR
      Field@1003 : Record 2000000041;
    BEGIN
      IF (TableNo2 = 0) OR (FieldNo2 = 0) THEN
        Text := ''
      ELSE
        IF Field.GET(TableNo2, FieldNo2) THEN
          Text := Field.FieldName;
    END;

    PROCEDURE AssistTableNo@7(TableNo@1000 : Integer);
    VAR
      Object@1001 : Record 2000000001;
      TableInfo@1002 : Page 11102094;
    BEGIN
      IF TableNo = 0 THEN
        EXIT;
      Object.GET(Object.Type::Table, '', TableNo);
      TableInfo.SETRECORD(Object);
      TableInfo.RUNMODAL;
    END;

    PROCEDURE AfterInputObjectNo@8(ObjectType2@1000 : Integer;VAR Text@1001 : Text);
    VAR
      Object@1002 : Record 2000000001;
      TableId@1003 : Integer;
    BEGIN
      IF NOT EVALUATE(TableId, Text) THEN
        IF Text <> '' THEN BEGIN
          Object.SETRANGE(Type, ObjectType2);
          Object.SETFILTER(Name, '@' + Text);

          IF Object.FINDFIRST THEN
            Text := FORMAT(Object.ID)
          ELSE BEGIN
            Object.SETFILTER(Name, '@' + Text + '*');
            IF Object.FINDFIRST THEN
              Text := FORMAT(Object.ID);
          END;
        END;

      IF Text = '' THEN
        Text := '0';
    END;

    PROCEDURE AfterInputFieldNo@9(TableNo@1000 : Integer;VAR Text@1001 : Text);
    VAR
      Field@1002 : Record 2000000041;
      FieldNo2@1003 : Integer;
    BEGIN
      IF NOT EVALUATE(FieldNo2, Text) THEN
        IF Text <> '' THEN BEGIN
          Field.SETRANGE(TableNo, TableNo);
          Field.SETFILTER(FieldName, '@' + Text);
          IF Field.FINDFIRST THEN
            Text := FORMAT(Field."No.")
          ELSE BEGIN
            Field.SETFILTER(FieldName, '@' + Text + '*');
            IF Field.FINDFIRST THEN
              Text := FORMAT(Field."No.");
          END;
        END;

      IF Text = '' THEN
        Text := '0';
    END;

    PROCEDURE Replace@10(String1@1000 : Text;String2@1001 : Text;String3@1002 : Text) RetValue : Text;
    VAR
      LoopCounter@1003 : Integer;
      StringPosition@1004 : Integer;
    BEGIN
      RetValue := String1;

      StringPosition := STRPOS(RetValue, String2);
      WHILE (StringPosition > 0) AND (LoopCounter <= 100) DO BEGIN
        LoopCounter += 1;
        RetValue := DELSTR(RetValue, StringPosition) + String3 + COPYSTR(RetValue, StringPosition + STRLEN(String2));
        StringPosition := STRPOS(RetValue, String2);
      END;
    END;

    PROCEDURE LookupObjectNo@11(ObjectType2@1000 : Option;VAR Text@1001 : Text) : Boolean;
    VAR
      Object@1002 : Record 2000000001;
      ObjectList@1003 : Page 11102067;
      ObjectNo@1004 : Integer;
    BEGIN
      Object.FILTERGROUP(2);
      Object.SETRANGE(Type, ObjectType2);
      Object.SETRANGE("Company Name", '');
      Object.FILTERGROUP(0);

      ObjectList.LOOKUPMODE(TRUE);
      ObjectList.SETTABLEVIEW(Object);

      IF EVALUATE(ObjectNo, Text) THEN
        IF Object.GET(ObjectType2, '', ObjectNo) THEN
          ObjectList.SETRECORD(Object);

      IF ObjectList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ObjectList.GETRECORD(Object);
        Text := FORMAT(Object.ID);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE LookupFieldNo@12(TableNo@1000 : Integer;VAR Text@1001 : Text) : Boolean;
    VAR
      Field@1002 : Record 2000000041;
      FieldList@1003 : Page 11102068;
      FieldNo2@1004 : Integer;
    BEGIN
      Field.FILTERGROUP(2);
      Field.SETRANGE(TableNo, TableNo);
      Field.FILTERGROUP(0);

      FieldList.SETTABLEVIEW(Field);

      IF EVALUATE(FieldNo2, Text) THEN
        IF Field.GET(TableNo, FieldNo2) THEN
          FieldList.SETRECORD(Field);

      IF FieldList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        FieldList.GETRECORD(Field);
        Text := FORMAT(Field."No.");
        EXIT(TRUE);
      END;
    END;

    PROCEDURE LookupUserCode@13(VAR Text@1000 : Text) : Boolean;
    VAR
      User@1001 : Record 11102056;
      Users@1002 : Page 11102077;
    BEGIN
      IF User.GET(Text) THEN
        Users.SETRECORD(User);

      Users.EDITABLE := FALSE;
      Users.LOOKUPMODE := TRUE;
      IF Users.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Users.GETRECORD(User);
        Text := User.Code;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE LookupRoleCode@14(VAR Text@1000 : Text) : Boolean;
    VAR
      Role@1001 : Record 11102055;
      Roles@1002 : Page 11102076;
    BEGIN
      IF Role.GET(Text) THEN
        Roles.SETRECORD(Role);

      Roles.EDITABLE := FALSE;
      Roles.LOOKUPMODE := TRUE;
      IF Roles.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Roles.GETRECORD(Role);
        Text := Role.Code;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE LookupNAVUserID@15(VAR LookupText@1000 : Text) : Boolean;
    VAR
      TmpUser@1001 : TEMPORARY Record 11102056;
      User@1002 : Record 2000000120;
      UserList@1003 : Page 11102091;
    BEGIN
      IF User.FINDSET THEN
        REPEAT
          TmpUser.Code := GetUserIDFromWindowsLogin(User."User Name");
          IF TmpUser.Code <> '' THEN BEGIN
            TmpUser.Name := DELSTR(User."Full Name", MAXSTRLEN(TmpUser.Name) + 1);
            TmpUser.INSERT;
          END;
        UNTIL User.NEXT = 0;

      IF NOT TmpUser.GET(LookupText) THEN
        TmpUser.FINDFIRST;

      UserList.SETRECORD(TmpUser);
      UserList.SetTmpRecord(TmpUser);

      IF UserList.RUNMODAL IN [ACTION::LookupOK, ACTION::OK] THEN BEGIN
        UserList.GETRECORD(TmpUser);
        LookupText := FORMAT(TmpUser.Code);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE ValidateNAVUserID@16(VAR NAVUserID@1000 : Code[20]);
    VAR
      UserSetup@1001 : Record 91;
      SIDAccountID@1002 : Record 2000000055;
    BEGIN
      IF NAVUserID <> '' THEN
        IF NOT UserSetup.GET(NAVUserID) THEN BEGIN
          UserSetup.SETFILTER("User ID", STRSUBSTNO('*\%1', NAVUserID));
          IF NOT UserSetup.FINDFIRST THEN BEGIN
            SIDAccountID.SETCURRENTKEY(ID);
            SIDAccountID.ID := NAVUserID;
            IF NOT SIDAccountID.FIND('=') THEN
              UserSetup.GET(NAVUserID);
          END;
        END;
    END;

    LOCAL PROCEDURE GetUserIDFromWindowsLogin@17(NAVUserID@1000 : Text) : Code[20];
    VAR
      SlashPos@1001 : Integer;
    BEGIN
      SlashPos := STRPOS(NAVUserID, '\');
      IF SlashPos > 0 THEN
        NAVUserID := COPYSTR(NAVUserID, SlashPos + 1);

      IF STRLEN(NAVUserID) <= 20 THEN
        EXIT(NAVUserID);
    END;

    PROCEDURE CreateDateFilter@18(VAR Filter@1000 : Text);
    VAR
      NewFilter@1001 : Text;
      Part@1002 : Text;
      PeriodNoString@1003 : Text;
      i@1004 : Integer;
      PeriodNo@1005 : Integer;
      PeriodNoPos@1006 : Integer;
      PPos@1007 : Integer;
      Year@1008 : Integer;
      PeriodsAfter@1009 : Boolean;
      PeriodsBefore@1010 : Boolean;
    BEGIN
      FOR i := 1 TO STRLEN(Filter) DO
        IF Filter[i] IN ['a'..'z', 'A'..'Z', '0'..'9'] THEN
          Part += FORMAT(Filter[i])
        ELSE BEGIN
          NewFilter += ReplaceDatePart(Part);
          Part := '';
          NewFilter += FORMAT(Filter[i]);
        END;
      NewFilter += ReplaceDatePart(Part);

      Filter := NewFilter;

      WHILE STRPOS(LOWERCASE(Filter), 'p') > 0 DO BEGIN

        PPos := STRPOS(LOWERCASE(Filter), 'p');
        PeriodNoPos := PPos + 1;

        PeriodNoString := '';
        WHILE (Filter[PeriodNoPos] >= '0') AND (Filter[PeriodNoPos] <= '9') DO BEGIN
          PeriodNoString += FORMAT(Filter[PeriodNoPos]);
          PeriodNoPos += 1;
        END;
        IF PeriodNoString = '' THEN
          PeriodNo := DATE2DMY(WORKDATE, 2)
        ELSE
          EVALUATE(PeriodNo, PeriodNoString);

        PeriodsBefore := FALSE;

        IF PPos > 2 THEN
          PeriodsBefore := COPYSTR(Filter, PPos - 2, 2) = '..';
        PeriodsAfter := COPYSTR(Filter, PeriodNoPos, 2) = '..';

        Year := DATE2DMY(WORKDATE, 3);
        WHILE PeriodNo > 12 DO BEGIN
          Year += 1;
          PeriodNo -= 12;
        END;

        Filter := DELSTR(Filter, PPos, PeriodNoPos - PPos);
        CASE TRUE OF
          PeriodsBefore :
            Filter := INSSTR(Filter, FORMAT(CALCDATE('<CM>', DMY2DATE(1, PeriodNo, Year))), PPos);

          PeriodsAfter :
            Filter := INSSTR(Filter, FORMAT(DMY2DATE(1, PeriodNo, Year)), PPos);

          ELSE
            Filter :=
              INSSTR(
                Filter,
                INSSTR(Filter, FORMAT(DMY2DATE(1, PeriodNo, Year)), PPos) + '..' +
                FORMAT(CALCDATE('<CM>', DMY2DATE(1, PeriodNo, Year))),
                PPos);

        END;

      END;
    END;

    LOCAL PROCEDURE ReplaceDatePart@19(DatePart@1000 : Text) : Text;
    VAR
      ctToday@1001 : TextConst 'DEU=HEUTE;ENU=TODAY;ESP=TODAY;FRA=TODAY;NLD=HUIDIGE DATUM;DES=HEUTE;DEA=TODAY';
      ctWorkdate@1002 : TextConst 'DEU=WORKDATE;ENU=WORKDATE;ESP=WORKDATE;FRA=WORKDATE;NLD=WERKDATUM;DEA=WORKDATE';
    BEGIN
      IF DatePart = '' THEN
        EXIT;

      CASE LOWERCASE(DatePart) OF

        COPYSTR(LOWERCASE(ctToday), 1, STRLEN(DatePart)):
          EXIT(FORMAT(TODAY));

        COPYSTR(LOWERCASE(ctWorkdate), 1, STRLEN(DatePart)):
          EXIT(FORMAT(WORKDATE));

      END;

      EXIT(DatePart);
    END;

    PROCEDURE IsReservedKeyword@20(VAR Keyword@1000 : Text) : Boolean;
    BEGIN
      EXIT(
        LOWERCASE(Keyword) IN [
          'abs', 'action', 'addlink', 'and', 'applicationpath', 'array', 'arraylen', 'addfield', 'addfieldno', 'addtable',
          'addrecord', 'addrecordref', 'ascending', 'beep', 'begin', 'calcdate',
          'calcfields', 'calcsums', 'case', 'changecompany', 'checklicensefile', 'clear', 'clearall', 'clear' + 'lasterror',
          'clearmarks', 'closingdate', 'codecoveragelog', 'commandline', 'commit', 'companyname', 'compressarray',
          'confirm', 'consistent', 'contexturl', 'convertstr', 'copy', 'copyarray', 'copyfilter', 'copyfilters',
          'copylinks', 'copystr', 'copystream', 'count', 'countapprox', 'create', 'createdatetime', 'createguid', 'currentclienttype',
          'currentcompany', 'currentdatetime', 'currentkey', 'currenttransactiontype', 'database', 'date2dmy', 'date2dwy', 'dati2variant',
          'defaultlayout', 'delete', 'deleteall', 'deletelink', 'deletelinks', 'delstr', 'div', 'dmy2date', 'do', 'download', 'downto',
          'downloadfromstream', 'dt2date', 'dt2time', 'dwy2date', 'end', 'environ', 'erase', 'error', 'evaluate', 'event',
          'execute', 'exists', 'exit', 'exportobjects', 'false', 'fieldcaption', 'fieldname', 'fieldno',
          'filtergroup', 'file', 'find', 'find' + 'first', 'find' + 'last', 'find' + 'set',
          'function', 'format', 'get', 'getascending', 'getfilter', 'getfilters', 'get' + 'lasterrortext', 'getposition', 'getrangemax',
          'getrangemin', 'getstamp', 'getview', 'global', 'globallanguage', 'guiallowed', 'hasfilter', 'haslinks', 'hyperlink', 'if',
          'importobjects', 'in', 'incstr', 'init', 'insert', 'insstr', 'isclear', 'is' + 'empty', 'isnullguid', 'is' + 'servicetier',
          'istemporary', 'keygroupdisable', 'keygroupenable', 'keygroupenabled', 'locktable', 'locktimeout', 'lowercase', 'mark',
          'markedonly', 'maxstrlen', 'message', 'mod', 'modify', 'modifyall', 'navapp', 'next', 'normaldate', 'not', 'of', 'or', 'osversion',
          'padstr', 'pagecaption', 'power', 'random', 'randomize', 'readconsistency',
          'readpermission', 'recordid', 'recordlevellocking', 'rename',
          'repeat', 'reset', 'round', 'rounddatetime', 'selectlatestversion', 'selectstr', 'serialnumber', 'setcurrentkey',
          'setfilter', 'setpermissionfilter', 'setposition', 'setrange', 'setrecfilter', 'setstamp', 'setview',
          'shell', 'sid', 'sleep', 'strchecksum', 'strlen', 'strmenu', 'strpos', 'strsubstno', 'synchronizealllogins',
          'synchronizesinglelogin', 'tablecaption', 'tablename', 'temporary' + 'path', 'then', 'time', 'today', 'transactiontype',
          'true', 'until', 'updatenolocks', 'upload', 'uploadintostream', 'uppercase', 'userid', 'validate', 'variableactive',
          'variant2date', 'variant2time', 'windowslanguage', 'while', 'workdate', 'writepermission', 'xor', 'yield',
          'asserterror', 'currpage', 'currreport', 'else', 'for', 'local', 'onaction', 'onactivate',
          'onafterassignfield', 'onafterassignvariable', 'onafterexportrecord', 'onafterformatfield', 'onaftergetfield',
          'onaftergetrecord', 'onafterimportrecord', 'onafterinitrecord', 'onafterinput', 'onafterinsertrecord', 'onaftertestrun',
          'onaftervalidate', 'onassistedit', 'onbeforeevaluatefield', 'onbeforeexportrecord', 'onbeforeimportrecord',
          'onbeforeinput', 'onbeforeinsertrecord', 'onbeforepassfield', 'onbeforepassvariable', 'onbeforeputrecord',
          'onbeforetestrun', 'onclosepage', 'oncontroladdin', 'ondeactivate', 'ondelete', 'ondeleterecord', 'ondrilldown',
          'onfindrecord', 'onformat', 'oninit', 'oninitreport', 'oninitxmlport', 'oninputchange', 'oninsert', 'oninsertrecord',
          'onlookup', 'onmodify', 'onmodifyrecord', 'onnewrecord', 'onnextrecord', 'onopenpage', 'onpostdataitem', 'onpostreport',
          'onpostsection', 'onpostxmlport', 'onpredataitem', 'onprereport', 'onpresection', 'onprexmlitem', 'onprexmlport', 'onpush',
          'onqueryclosepage', 'onrename', 'ontimer', 'onvalidate', 'print', 'rdlclayout',
          'rec', 'run', 'runmodal', 'requestoptionspage', 'runrequestpage', 'saveas', 'saveasexcel', 'saveashtml', 'saveaspdf',
          'saveasword', 'saveasxml', 'setascending', 'wordlayout', 'wordxmlpart', 'setautocalcfields', 'testfield',
          'to', 'transferfields', 'usersecurityid', 'var', 'with', 'xrec']);
    END;

    PROCEDURE DisableTraceModification@21();
    VAR
      Setup@1000 : Record 11102035;
    BEGIN
      IF Setup.FINDFIRST THEN BEGIN
        Setup."Skip SQL Trigger" := TRUE;
        Setup.MODIFY;
        Setup.FINDFIRST;
      END;
    END;

    PROCEDURE EnableTraceModification@22();
    VAR
      Setup@1000 : Record 11102035;
    BEGIN
      IF Setup.FINDFIRST THEN BEGIN
        Setup."Skip SQL Trigger" := FALSE;
        Setup.MODIFY;
        Setup.FINDFIRST;
      END;
    END;

    PROCEDURE AssistEditLanguages@23(VAR LanguageFilter@1000 : Code[250]);
    VAR
      TmpUser@1001 : TEMPORARY Record 11102056;
      WindowsLanguage2@1002 : Record 2000000045;
      UserList@1003 : Page 11102091;
      NoOfRecords@1004 : Integer;
      ctMandatoryLanguages@1005 : TextConst 'DEU=Mandatory Languages;ENU=Mandatory Languages;ESP=Mandatory Languages;FRA=Mandatory Languages;NLD=Verplichte talen;DEA=Mandatory Languages';
    BEGIN
      IF WindowsLanguage2.FINDSET THEN
        REPEAT
          IF NOT TmpUser.GET(WindowsLanguage2."Abbreviated Name") THEN BEGIN
            TmpUser.Code := WindowsLanguage2."Abbreviated Name";
            TmpUser.Name := WindowsLanguage2.Name;
            TmpUser.INSERT;
          END;
        UNTIL WindowsLanguage2.NEXT = 0;

      UserList.SetTmpRecord(TmpUser);
      TmpUser.DELETEALL;

      IF LanguageFilter <> '' THEN BEGIN

        WindowsLanguage2.SETCURRENTKEY("Abbreviated Name");
        WindowsLanguage2.SETFILTER("Abbreviated Name", LanguageFilter);
        IF WindowsLanguage2.FINDSET THEN
          REPEAT

            IF NOT TmpUser.GET(WindowsLanguage2."Abbreviated Name") THEN BEGIN
              TmpUser.Code := WindowsLanguage2."Abbreviated Name";
              TmpUser.Name := WindowsLanguage2.Name;
              TmpUser.INSERT;
            END;
            NoOfRecords += 1;

            IF NoOfRecords = 1 THEN
              UserList.SETRECORD(TmpUser);

          UNTIL WindowsLanguage2.NEXT = 0;

      END;
      UserList.SetSelectedUser(TmpUser);

      UserList.SetFormCaption(ctMandatoryLanguages);
      UserList.LOOKUPMODE(TRUE);
      IF UserList.RUNMODAL = ACTION::LookupOK THEN BEGIN

        LanguageFilter := '';

        TmpUser.DELETEALL;
        UserList.GetSelectedUser(TmpUser);
        IF TmpUser.FINDSET THEN
          REPEAT
            IF LanguageFilter = '' THEN
              LanguageFilter := TmpUser.Code
            ELSE
              LanguageFilter := LanguageFilter + '|' + TmpUser.Code;

          UNTIL TmpUser.NEXT = 0;
      END;
    END;

    PROCEDURE ShortUserId@24() : Code[50];
    VAR
      UserName@1000 : Text;
      SlashPos@1001 : Integer;
      NavUserAccountHelper@1002 : DotNet "'Microsoft.Dynamics.Nav.NavUserAccount, Version=9.0.*.*, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.NavUserAccount.NavUserAccountHelper";
    BEGIN
      UserName := NavUserAccountHelper.UserName(SID);

      SlashPos := STRPOS(UserName, '\');
      IF SlashPos > 0 THEN
        EXIT(UPPERCASE(COPYSTR(UserName, SlashPos + 1)));

      EXIT(UPPERCASE(UserName));
    END;

    PROCEDURE CapitalizedUserId@25() : Text;
    VAR
      User@1000 : Record 11102056;
      NavUserAccountHelper@1001 : DotNet "'Microsoft.Dynamics.Nav.NavUserAccount, Version=9.0.*.*, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.NavUserAccount.NavUserAccountHelper";
    BEGIN
      IF User.GetActiveUser(FALSE) THEN
        IF User."Capitalized User Id" <> '' THEN
          EXIT(User."Capitalized User Id");

      EXIT(NavUserAccountHelper.UserName(SID));
    END;

    PROCEDURE GetTableByName@26(VAR AllObj@1000 : Record 2000000038;Name@1001 : Text) : Boolean;
    VAR
      Object@1002 : Record 2000000001;
    BEGIN
      Object.SETCURRENTKEY(Type, Name);
      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETFILTER(Name, Name);
      IF Object.FINDFIRST THEN BEGIN
        AllObj.RESET;
        IF AllObj.GET(Object.Type, Object.ID) THEN
          EXIT(TRUE);
      END;

      AllObj.SETRANGE("Object Type", AllObj."Object Type"::Table);
      AllObj.SETFILTER("Object ID", '>=2000000000');
      AllObj.SETFILTER("Object Name", Name);
      EXIT(AllObj.FINDFIRST);
    END;

    PROCEDURE GetValue@27(VAR Value@1000 : Text;VAR Position@1001 : Integer;StopChar@1002 : Char;VAR ExitValue@1003 : Text) : Boolean;
    VAR
      Char@1004 : Char;
      Advanced@1005 : Boolean;
      FirstCharacter@1006 : Boolean;
      Stop@1007 : Boolean;
    BEGIN
      ExitValue := '';
      FirstCharacter := TRUE;

      IF Position > STRLEN(Value) THEN
        EXIT(FALSE);

      WHILE NOT Stop DO BEGIN

        Char := Value[Position];

        CASE TRUE OF

          Char = '"' :
            IF FirstCharacter THEN
              Advanced := TRUE
            ELSE
              IF Advanced THEN
                IF Value[Position + 1] = '"' THEN BEGIN
                  ExitValue += FORMAT(Char);
                  Position += 1;
                END ELSE BEGIN
                  Stop := TRUE;
                  Position += 1;
                END
              ELSE
                ExitValue += FORMAT(Char);

          Char = StopChar :
            IF Advanced THEN
              ExitValue += FORMAT(Char)
            ELSE
              Stop := TRUE;

          ELSE
            ExitValue += FORMAT(Char);

        END;

        FirstCharacter := FALSE;
        Position += 1;

        IF Position > STRLEN(Value) THEN
          Stop := TRUE;
      END;

      ExitValue := DELCHR(ExitValue, '<>');
      EXIT(TRUE);
    END;

    PROCEDURE RunExecutable@28(Executable@1000 : Text;Arguments@1001 : Text);
    VAR
      WSH@1002 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      Process@1003 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
    BEGIN
      IF FALSE THEN
        Process := Process.Start(Executable, Arguments)
      ELSE BEGIN

        IF ISCLEAR(WSH) THEN
          CREATE(WSH, FALSE, TRUE);
        WSH.Exec(Executable + ' ' + Arguments);
        CLEAR(WSH);
      END;
    END;

    PROCEDURE RunHyperlink@29(CommandLine2@1000 : Text);
    BEGIN
      HYPERLINK(CommandLine2);
    END;

    PROCEDURE SpecialCharacter@63(Char@1000 : Char) : Boolean;
    BEGIN
      IF (Char >= 97) AND (Char <= 122) THEN
        EXIT(FALSE);

      IF Char = 32 THEN
        EXIT(TRUE);

      EXIT(NOT (Char IN [ 48..57, 65..90, 95, 97..122, 192..214, 216..222, 224..246, 248..255]));
    END;

    PROCEDURE GetOptionString@30(TableNo@1000 : Integer;FieldNo2@1001 : Integer) : Text;
    VAR
      RecRef@1002 : RecordRef;
      FldRef@1003 : FieldRef;
    BEGIN
      RecRef.OPEN(TableNo);
      FldRef := RecRef.FIELD(FieldNo2);
      EXIT(FldRef.OPTIONSTRING);
    END;

    PROCEDURE AddQuotes@43(Name@1000 : Text) : Text;
    VAR
      Mgt@1001 : Codeunit 11102035;
      i@1002 : Integer;
      Quotes@1003 : Boolean;
    BEGIN
      Name := LOWERCASE(Name);
      WHILE (i < STRLEN(Name)) AND NOT Quotes DO BEGIN
        i += 1;
        Quotes := Mgt.SpecialCharacter(Name[i]);
      END;

      IF (Name[1] >= '0') AND (Name[1] <= '9') THEN
        Quotes := TRUE;

      IF NOT Quotes THEN
        IF Name IN ['array', 'event', 'function'] THEN
          Quotes := TRUE;
      IF Quotes THEN
        EXIT('"' + Name + '"')
      ELSE
        EXIT(Name);
    END;

    PROCEDURE CreateFilter@60(sFilter@1000 : Text;RemoveQuotes@1001 : Boolean) : Text;
    VAR
      i@1002 : Integer;
    BEGIN
      IF STRPOS(sFilter, '''') > 0 THEN BEGIN
        i := 1;
        WHILE i <= STRLEN(sFilter) DO
          IF sFilter[i] = '''' THEN BEGIN
            sFilter := DELSTR(sFilter, i + 1) + COPYSTR(sFilter, i);
            i += 2;
          END ELSE
            i += 1;
      END;

      IF RemoveQuotes THEN
        EXIT('''@' + DELCHR(sFilter, '<>', '"') + '''')
      ELSE
        EXIT('''@' + sFilter + '''');
    END;

    PROCEDURE CreateFieldFilter@64(sFilter@1000 : Text;RemoveQuotes@1001 : Boolean) : Text;
    VAR
      i@1002 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(sFilter) DO
        IF sFilter[i] IN ['.', '<', '>', '''', '(', ')', '&'] THEN
          sFilter[i] := '?';

      IF RemoveQuotes THEN
        EXIT('''@' + DELCHR(sFilter, '<>', '"') + '''')
      ELSE
        EXIT('''@' + sFilter + '''');
    END;

    PROCEDURE ObjectTypeNo@31(ObjectTypeText@1000 : Text) : Integer;
    BEGIN
      CASE ObjectTypeText OF
        'TableData' : EXIT(0);
        'Table' : EXIT(1);
        'Form' : EXIT(2);
        'Report' : EXIT(3);
        'Dataport' : EXIT(4);
        'Codeunit' : EXIT(5);
        'XMLport' : EXIT(6);
        'MenuSuite' : EXIT(7);
        'Page' : EXIT(8);
        'Query' : EXIT(9);
      END;
    END;

    PROCEDURE CanRunDotNet@33() : Boolean;
    VAR
      ActiveSession@1000 : Record 2000000110;
    BEGIN
      IF ActiveSession.GET(SERVICEINSTANCEID, SESSIONID) THEN
        EXIT(ActiveSession."Client Type" = ActiveSession."Client Type"::"Windows Client");

      EXIT(FALSE);
    END;

    PROCEDURE NextValue@34(VAR TextLine@1000 : Text;VAR Position@1001 : Integer;Seperator@1002 : Char;OpenChar@1003 : Char;CloseChar@1004 : Char;VAR ExitValue@1005 : Text) : Boolean;
    VAR
      Char@1006 : Char;
      Advanced@1007 : Boolean;
      FirstCharacter@1008 : Boolean;
      Stop@1009 : Boolean;
    BEGIN
      ExitValue := '';
      FirstCharacter := TRUE;

      IF Position > STRLEN(TextLine) THEN
        EXIT(FALSE);

      WHILE NOT Stop DO

        IF NextChar(TextLine, Position, Char) THEN BEGIN

          CASE Char OF

            Seperator :
              IF Advanced THEN
                ExitValue += FORMAT(Char)
              ELSE
                Stop := TRUE;

            OpenChar :
              IF FirstCharacter THEN
                Advanced := TRUE
              ELSE
                IF OpenChar = CloseChar THEN BEGIN
                  IF Advanced THEN
                    IF NextChar(TextLine, Position, Char) THEN
                      IF Char = CloseChar THEN
                        ExitValue += FORMAT(Char)
                      ELSE BEGIN
                        Advanced := FALSE;
                        Position -= 1;
                      END;
                END ELSE
                  ExitValue += FORMAT(Char);

            CloseChar :
              IF Advanced THEN BEGIN
                IF NextChar(TextLine, Position, Char) THEN
                  IF Char = CloseChar THEN
                    ExitValue += FORMAT(Char)
                  ELSE BEGIN
                    Advanced := FALSE;
                    Position -= 1;
                  END;
              END ELSE
                ExitValue += FORMAT(Char);

            ELSE
              ExitValue += FORMAT(Char);
          END;

          FirstCharacter := FALSE;

        END ELSE
          Stop := TRUE;

      ExitValue := DELCHR(ExitValue, '<>');
      EXIT(TRUE);
    END;

    PROCEDURE NextChar@35(VAR TextLine@1000 : Text;VAR Position@1001 : Integer;VAR Char@1002 : Char) : Boolean;
    BEGIN
      IF Position <= STRLEN(TextLine) THEN BEGIN
        Char := TextLine[Position];
        Position += 1;
        EXIT(TRUE);
      END;
    END;

    BEGIN
    END.
  }
}

