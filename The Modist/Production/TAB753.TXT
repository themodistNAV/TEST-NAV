OBJECT Table 753 Standard Item Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Standard Item Journal Line;
               ENG=Standard Item Journal Line];
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Item Journal Template";
                                                   CaptionML=[ENU=Journal Template Name;
                                                              ENG=Journal Template Name];
                                                   NotBlank=Yes }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.];
                                                   NotBlank=Yes;
                                                   Editable=No }
    { 3   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF "Item No." <> xRec."Item No." THEN BEGIN
                                                                  "Variant Code" := '';
                                                                  "Bin Code" := '';
                                                                  IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code")
                                                                  END;
                                                                END;

                                                                IF "Item No." = '' THEN BEGIN
                                                                  CreateDim(
                                                                    DATABASE::Item,"Item No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::"Work Center","Work Center No.");
                                                                  EXIT;
                                                                END;

                                                                GetItem;
                                                                Item.TESTFIELD(Blocked,FALSE);
                                                                Description := Item.Description;
                                                                "Inventory Posting Group" := Item."Inventory Posting Group";
                                                                "Item Category Code" := Item."Item Category Code";
                                                                "Product Group Code" := Item."Product Group Code";

                                                                IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
                                                                   ("Item Charge No." <> '')
                                                                THEN BEGIN
                                                                  IF "Item No." <> xRec."Item No." THEN BEGIN
                                                                    RetrieveCosts;
                                                                    "Indirect Cost %" := 0;
                                                                    "Overhead Rate" := 0;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "Indirect Cost %" := Item."Indirect Cost %";
                                                                  "Overhead Rate" := Item."Overhead Rate";
                                                                  IF NOT "Phys. Inventory" THEN BEGIN
                                                                    RetrieveCosts;
                                                                    "Unit Cost" := UnitCost;
                                                                  END ELSE
                                                                    UnitCost := "Unit Cost";
                                                                END;

                                                                IF "Entry Type" <> "Entry Type"::Output THEN
                                                                  "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";

                                                                CASE "Entry Type" OF
                                                                  "Entry Type"::Purchase,
                                                                  "Entry Type"::Output:
                                                                    PurchPriceCalcMgt.FindStdItemJnlLinePrice(Rec,FIELDNO("Item No."));
                                                                  "Entry Type"::"Positive Adjmt.",
                                                                  "Entry Type"::"Negative Adjmt.",
                                                                  "Entry Type"::Consumption:
                                                                    "Unit Amount" := UnitCost;
                                                                  "Entry Type"::Sale:
                                                                    SalesPriceCalcMgt.FindStdItemJnlLinePrice(Rec,FIELDNO("Item No."));
                                                                  "Entry Type"::Transfer:
                                                                    BEGIN
                                                                      "Unit Amount" := 0;
                                                                      "Unit Cost" := 0;
                                                                      Amount := 0;
                                                                    END;
                                                                END;

                                                                CASE "Entry Type" OF
                                                                  "Entry Type"::Purchase:
                                                                    "Unit of Measure Code" := Item."Purch. Unit of Measure";
                                                                  "Entry Type"::Sale:
                                                                    "Unit of Measure Code" := Item."Sales Unit of Measure";
                                                                  ELSE
                                                                    "Unit of Measure Code" := Item."Base Unit of Measure";
                                                                END;

                                                                VALIDATE("Unit of Measure Code");
                                                                IF "Variant Code" <> '' THEN
                                                                  VALIDATE("Variant Code");
                                                                IF "Bin Code" <> '' THEN
                                                                  VALIDATE("Bin Code");

                                                                CreateDim(
                                                                  DATABASE::Item,"Item No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF "Entry Type" <> "Entry Type"::Output THEN
                                                                IF Item.GET("Item No.") OR Item.GET(xRec."Item No.") THEN;
                                                              IF PAGE.RUNMODAL(PAGE::"Item List",Item) = ACTION::LookupOK THEN
                                                                VALIDATE("Item No.",Item."No.");
                                                            END;

                                                   CaptionML=[ENU=Item No.;
                                                              ENG=Item No.] }
    { 5   ;   ;Entry Type          ;Option        ;OnValidate=BEGIN
                                                                IF NOT ("Entry Type" IN ["Entry Type"::"Positive Adjmt.","Entry Type"::"Negative Adjmt."]) THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                CASE "Entry Type" OF
                                                                  "Entry Type"::Purchase:
                                                                    "Location Code" := UserMgt.GetLocation(1,'',UserMgt.GetPurchasesFilter);
                                                                  "Entry Type"::Sale:
                                                                    "Location Code" := UserMgt.GetLocation(0,'',UserMgt.GetSalesFilter);
                                                                END;

                                                                IF "Item No." <> '' THEN
                                                                  VALIDATE("Location Code");

                                                                VALIDATE("Item No.");
                                                              END;

                                                   CaptionML=[ENU=Entry Type;
                                                              ENG=Entry Type];
                                                   OptionCaptionML=[ENU=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output;
                                                                    ENG=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output];
                                                   OptionString=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output }
    { 8   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 9   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  "Bin Code" := '';
                                                                  IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code");
                                                                  END;
                                                                END;

                                                                VALIDATE("Unit of Measure Code");
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code] }
    { 10  ;   ;Inventory Posting Group;Code10     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              ENG=Inventory Posting Group];
                                                   Editable=No }
    { 13  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT PhysInvtEntered THEN
                                                                  TESTFIELD("Phys. Inventory",FALSE);

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);

                                                                GetUnitAmount(FIELDNO(Quantity));
                                                                UpdateAmount;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENG=Quantity];
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Unit Amount         ;Decimal       ;OnValidate=BEGIN
                                                                UpdateAmount;
                                                                IF "Item No." <> '' THEN
                                                                  IF "Value Entry Type" = "Value Entry Type"::Revaluation THEN
                                                                    "Unit Cost" := "Unit Amount"
                                                                  ELSE
                                                                    CASE "Entry Type" OF
                                                                      "Entry Type"::Purchase,
                                                                      "Entry Type"::"Positive Adjmt.":
                                                                        BEGIN
                                                                          IF "Entry Type" = "Entry Type"::"Positive Adjmt." THEN BEGIN
                                                                            GetItem;
                                                                            IF (CurrFieldNo = FIELDNO("Unit Amount")) AND
                                                                               (Item."Costing Method" = Item."Costing Method"::Standard)
                                                                            THEN
                                                                              ERROR(
                                                                                Text002,
                                                                                FIELDCAPTION("Unit Amount"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                          END;

                                                                          ReadGLSetup;
                                                                          IF "Entry Type" = "Entry Type"::Purchase THEN
                                                                            "Unit Cost" := "Unit Amount";
                                                                          IF "Entry Type" = "Entry Type"::"Positive Adjmt." THEN
                                                                            "Unit Cost" :=
                                                                              ROUND("Unit Amount" * (1 + "Indirect Cost %" / 100),GLSetup."Unit-Amount Rounding Precision") +
                                                                              "Overhead Rate" * "Qty. per Unit of Measure";
                                                                          IF ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
                                                                             ("Item Charge No." = '')
                                                                          THEN
                                                                            VALIDATE("Unit Cost");
                                                                        END;
                                                                      "Entry Type"::"Negative Adjmt.",
                                                                      "Entry Type"::Consumption:
                                                                        BEGIN
                                                                          GetItem;
                                                                          IF (CurrFieldNo = FIELDNO("Unit Amount")) AND
                                                                             (Item."Costing Method" = Item."Costing Method"::Standard)
                                                                          THEN
                                                                            ERROR(
                                                                              Text002,
                                                                              FIELDCAPTION("Unit Amount"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                          "Unit Cost" := "Unit Amount";
                                                                          IF ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
                                                                             ("Item Charge No." = '')
                                                                          THEN
                                                                            VALIDATE("Unit Cost");
                                                                        END;
                                                                    END;
                                                              END;

                                                   CaptionML=[ENU=Unit Amount;
                                                              ENG=Unit Amount];
                                                   AutoFormatType=2 }
    { 17  ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Item No.");
                                                                RetrieveCosts;
                                                                IF "Entry Type" IN ["Entry Type"::Purchase,"Entry Type"::"Positive Adjmt.","Entry Type"::Consumption] THEN
                                                                  IF Item."Costing Method" = Item."Costing Method"::Standard THEN BEGIN
                                                                    IF CurrFieldNo = FIELDNO("Unit Cost") THEN
                                                                      ERROR(
                                                                        Text002,
                                                                        FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");

                                                                    "Unit Cost" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                                  END;

                                                                IF ("Item Charge No." = '') AND
                                                                   ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
                                                                   (CurrFieldNo = FIELDNO("Unit Cost"))
                                                                THEN BEGIN
                                                                  CASE "Entry Type" OF
                                                                    "Entry Type"::Purchase:
                                                                      "Unit Amount" := "Unit Cost";
                                                                    "Entry Type"::"Positive Adjmt.":
                                                                      BEGIN
                                                                        ReadGLSetup;
                                                                        "Unit Amount" :=
                                                                          ROUND(
                                                                            ("Unit Cost" - "Overhead Rate" * "Qty. per Unit of Measure") / (1 + "Indirect Cost %" / 100),
                                                                            GLSetup."Unit-Amount Rounding Precision")
                                                                      END;
                                                                    "Entry Type"::"Negative Adjmt.",
                                                                    "Entry Type"::Consumption:
                                                                      BEGIN
                                                                        IF Item."Costing Method" = Item."Costing Method"::Standard THEN
                                                                          ERROR(
                                                                            Text002,
                                                                            FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                        "Unit Amount" := "Unit Cost";
                                                                      END;
                                                                  END;
                                                                  UpdateAmount;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Unit Cost;
                                                              ENG=Unit Cost];
                                                   AutoFormatType=2 }
    { 18  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Quantity);
                                                                "Unit Amount" := Amount / Quantity;
                                                                VALIDATE("Unit Amount");
                                                                ReadGLSetup;
                                                                "Unit Amount" := ROUND("Unit Amount",GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ENG=Amount];
                                                   AutoFormatType=1 }
    { 23  ;   ;Salespers./Purch. Code;Code10      ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Item,"Item No.",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                              END;

                                                   CaptionML=[ENU=Salespers./Purch. Code;
                                                              ENG=Salespers./Purch. Code] }
    { 26  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ENG=Source Code];
                                                   Editable=No }
    { 34  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENG=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 35  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENG=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 37  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Item No.");
                                                                TESTFIELD("Value Entry Type","Value Entry Type"::"Direct Cost");
                                                                TESTFIELD("Item Charge No.",'');
                                                                IF "Entry Type" IN ["Entry Type"::Sale,"Entry Type"::"Negative Adjmt."] THEN
                                                                  ERROR(
                                                                    Text003,
                                                                    "Entry Type",FIELDCAPTION("Entry Type"),FIELDCAPTION("Indirect Cost %"));

                                                                GetItem;
                                                                IF Item."Costing Method" = Item."Costing Method"::Standard THEN
                                                                  ERROR(
                                                                    Text002,
                                                                    FIELDCAPTION("Indirect Cost %"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");

                                                                "Unit Cost" :=
                                                                  ROUND(
                                                                    "Unit Amount" * (1 + "Indirect Cost %" / 100) +
                                                                    "Overhead Rate" * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Indirect Cost %;
                                                              ENG=Indirect Cost %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 41  ;   ;Standard Journal Code;Code10       ;TableRelation="Standard Item Journal".Code;
                                                   CaptionML=[ENU=Standard Journal Code;
                                                              ENG=Standard Journal Code] }
    { 42  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENG=Reason Code] }
    { 47  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENG=Transaction Nature Code] }
    { 48  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENG=Transport Method] }
    { 49  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENG=Country/Region Code] }
    { 53  ;   ;Qty. (Calculated)   ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Qty. (Phys. Inventory)");
                                                              END;

                                                   CaptionML=[ENU=Qty. (Calculated);
                                                              ENG=Qty. (Calculated)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 54  ;   ;Qty. (Phys. Inventory);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Phys. Inventory",TRUE);

                                                                PhysInvtEntered := TRUE;
                                                                Quantity := 0;
                                                                IF "Qty. (Phys. Inventory)" >= "Qty. (Calculated)" THEN BEGIN
                                                                  VALIDATE("Entry Type","Entry Type"::"Positive Adjmt.");
                                                                  VALIDATE(Quantity,"Qty. (Phys. Inventory)" - "Qty. (Calculated)");
                                                                END ELSE BEGIN
                                                                  VALIDATE("Entry Type","Entry Type"::"Negative Adjmt.");
                                                                  VALIDATE(Quantity,"Qty. (Calculated)" - "Qty. (Phys. Inventory)");
                                                                END;
                                                                PhysInvtEntered := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Qty. (Phys. Inventory);
                                                              ENG=Qty. (Phys. Inventory)];
                                                   DecimalPlaces=0:5 }
    { 56  ;   ;Phys. Inventory     ;Boolean       ;CaptionML=[ENU=Phys. Inventory;
                                                              ENG=Phys. Inventory];
                                                   Editable=No }
    { 57  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENG=Gen. Bus. Posting Group] }
    { 58  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENG=Gen. Prod. Posting Group] }
    { 59  ;   ;Entry/Exit Point    ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Entry/Exit Point;
                                                              ENG=Entry/Exit Point] }
    { 63  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENG=Area] }
    { 64  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENG=Transaction Specification] }
    { 65  ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Posting No. Series;
                                                              ENG=Posting No. Series] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENG=Dimension Set ID];
                                                   Editable=No }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF "Variant Code" <> xRec."Variant Code" THEN BEGIN
                                                                  "Bin Code" := '';
                                                                  IF ("Location Code" <> '') AND ("Item No." <> '') THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
                                                                      WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code")
                                                                  END;
                                                                END;

                                                                IF ("Value Entry Type" = "Value Entry Type"::"Direct Cost") AND
                                                                   ("Item Charge No." = '')
                                                                THEN BEGIN
                                                                  GetUnitAmount(FIELDNO("Variant Code"));
                                                                  "Unit Cost" := UnitCost;
                                                                  VALIDATE("Unit Amount");
                                                                  VALIDATE("Unit of Measure Code");
                                                                END;

                                                                IF "Variant Code" = '' THEN
                                                                  EXIT;

                                                                ItemVariant.GET("Item No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ENG=Variant Code] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=IF (Entry Type=FILTER(Purchase|Positive Adjmt.|Output),
                                                                     Quantity=FILTER(>=0)) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                           Item Filter=FIELD(Item No.),
                                                                                                           Variant Filter=FIELD(Variant Code))
                                                                                                           ELSE IF (Entry Type=FILTER(Purchase|Positive Adjmt.|Output),
                                                                                                                    Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                         Item No.=FIELD(Item No.),
                                                                                                                                                                         Variant Code=FIELD(Variant Code))
                                                                                                                                                                         ELSE IF (Entry Type=FILTER(Sale|Negative Adjmt.|Transfer|Consumption),
                                                                                                                                                                                  Quantity=FILTER(>0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                                                                       Item No.=FIELD(Item No.),
                                                                                                                                                                                                                                       Variant Code=FIELD(Variant Code))
                                                                                                                                                                                                                                       ELSE IF (Entry Type=FILTER(Sale|Negative Adjmt.|Transfer|Consumption),
                                                                                                                                                                                                                                                Quantity=FILTER(<=0)) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                                                                                                                      Item Filter=FIELD(Item No.),
                                                                                                                                                                                                                                                                                      Variant Filter=FIELD(Variant Code));
                                                   OnValidate=BEGIN
                                                                IF "Bin Code" <> xRec."Bin Code" THEN BEGIN
                                                                  TESTFIELD("Location Code");
                                                                  IF "Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                    GetBin("Location Code","Bin Code");
                                                                    TESTFIELD("Location Code",Bin."Location Code");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ENG=Bin Code] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENG=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                GetItem;
                                                                "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                GetUnitAmount(FIELDNO("Unit of Measure Code"));
                                                                ReadGLSetup;
                                                                "Unit Cost" := ROUND(UnitCost * "Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision");

                                                                VALIDATE("Unit Amount");
                                                                IF "Entry Type" <> "Entry Type"::Output THEN
                                                                  VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENG=Unit of Measure Code] }
    { 5413;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ENG=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 5701;   ;Originally Ordered No.;Code20      ;TableRelation=Item;
                                                   CaptionML=[ENU=Originally Ordered No.;
                                                              ENG=Originally Ordered No.] }
    { 5702;   ;Originally Ordered Var. Code;Code10;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Originally Ordered No.));
                                                   CaptionML=[ENU=Originally Ordered Var. Code;
                                                              ENG=Originally Ordered Var. Code] }
    { 5704;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENG=Item Category Code] }
    { 5705;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Nonstock;
                                                              ENG=Nonstock] }
    { 5706;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=[ENU=Purchasing Code;
                                                              ENG=Purchasing Code] }
    { 5707;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENG=Product Group Code] }
    { 5800;   ;Value Entry Type    ;Option        ;CaptionML=[ENU=Value Entry Type;
                                                              ENG=Value Entry Type];
                                                   OptionCaptionML=[ENU=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance;
                                                                    ENG=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance];
                                                   OptionString=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance }
    { 5801;   ;Item Charge No.     ;Code20        ;TableRelation="Item Charge";
                                                   CaptionML=[ENU=Item Charge No.;
                                                              ENG=Item Charge No.] }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENG=Correction] }
    { 5839;   ;Work Center No.     ;Code20        ;TableRelation="Work Center";
                                                   CaptionML=[ENU=Work Center No.;
                                                              ENG=Work Centre No.];
                                                   Editable=No }
    { 6600;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=[ENU=Return Reason Code;
                                                              ENG=Return Reason Code] }
    { 99000755;;Overhead Rate      ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
                                                                   ("Item Charge No." <> '')
                                                                THEN BEGIN
                                                                  "Overhead Rate" := 0;
                                                                  VALIDATE("Indirect Cost %",0);
                                                                END ELSE
                                                                  VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=[ENU=Overhead Rate;
                                                              ENG=Overhead Rate];
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;Journal Template Name,Standard Journal Code,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1002 : TextConst 'ENU=You cannot rename a %1.;ENG=You cannot rename a %1.';
      Item@1000 : Record 27;
      ItemVariant@1015 : Record 5401;
      Location@1004 : Record 14;
      Bin@1003 : Record 7354;
      GLSetup@1011 : Record 98;
      SKU@1013 : Record 5700;
      DimMgt@1001 : Codeunit 408;
      WMSManagement@1005 : Codeunit 7302;
      PurchPriceCalcMgt@1007 : Codeunit 7010;
      SalesPriceCalcMgt@1006 : Codeunit 7000;
      UserMgt@1009 : Codeunit 5700;
      UOMMgt@1016 : Codeunit 5402;
      UnitCost@1008 : Decimal;
      GLSetupRead@1010 : Boolean;
      Text002@1012 : TextConst 'ENU=You cannot change %1 when %2 is %3.;ENG=You cannot change %1 when %2 is %3.';
      Text003@1014 : TextConst 'ENU=You cannot change %3 when %2 is %1.;ENG=You cannot change %3 when %2 is %1.';
      PhysInvtEntered@1018 : Boolean;

    PROCEDURE ValidateShortcutDimCode@3(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE ShowDimensions@1();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Journal Template Name","Standard Journal Code","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@36(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      IF BinCode = '' THEN
        CLEAR(Bin)
      ELSE
        IF Bin.Code <> BinCode THEN
          Bin.GET(LocationCode,BinCode);
    END;

    LOCAL PROCEDURE CreateDim@13(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1007 : Integer;No3@1006 : Code[20]);
    VAR
      TableID@1004 : ARRAY [10] OF Integer;
      No@1005 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,"Source Code",
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    END;

    LOCAL PROCEDURE GetItem@2();
    BEGIN
      IF Item."No." <> "Item No." THEN
        Item.GET("Item No.");
    END;

    LOCAL PROCEDURE UpdateAmount@23();
    BEGIN
      Amount := ROUND(Quantity * "Unit Amount");
    END;

    LOCAL PROCEDURE ReadGLSetup@5801();
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
    END;

    LOCAL PROCEDURE RetrieveCosts@5803();
    BEGIN
      ReadGLSetup;
      GetItem;
      IF GetSKU THEN
        UnitCost := SKU."Unit Cost"
      ELSE
        UnitCost := Item."Unit Cost";

      IF "Entry Type" = "Entry Type"::Transfer THEN
        UnitCost := 0
      ELSE
        IF Item."Costing Method" <> Item."Costing Method"::Standard THEN
          UnitCost := ROUND(UnitCost,GLSetup."Unit-Amount Rounding Precision");
    END;

    LOCAL PROCEDURE GetSKU@5802() : Boolean;
    BEGIN
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "Item No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      IF SKU.GET("Location Code","Item No.","Variant Code") THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetUnitAmount@6(CalledByFieldNo@1000 : Integer);
    BEGIN
      RetrieveCosts;
      IF ("Value Entry Type" <> "Value Entry Type"::"Direct Cost") OR
         ("Item Charge No." <> '')
      THEN
        EXIT;

      CASE "Entry Type" OF
        "Entry Type"::Purchase:
          PurchPriceCalcMgt.FindStdItemJnlLinePrice(Rec,CalledByFieldNo);
        "Entry Type"::Sale:
          SalesPriceCalcMgt.FindStdItemJnlLinePrice(Rec,CalledByFieldNo);
        "Entry Type"::"Positive Adjmt.":
          "Unit Amount" := ROUND(
              ((UnitCost - "Overhead Rate") * "Qty. per Unit of Measure") / (1 + "Indirect Cost %" / 100),
              GLSetup."Unit-Amount Rounding Precision");
        "Entry Type"::"Negative Adjmt.":
          IF NOT "Phys. Inventory" THEN
            "Unit Amount" := UnitCost * "Qty. per Unit of Measure"
          ELSE
            UnitCost := "Unit Cost";
        "Entry Type"::Transfer:
          "Unit Amount" := 0;
      END;
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    BEGIN
    END.
  }
}

