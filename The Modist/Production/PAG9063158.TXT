OBJECT Page 9063158 Customise Role Centre
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Customise Role Centre;
               ENG=Customise Role Centre];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table9062775;
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Reports,Available Parts,Left Side,Right Side;
                                ENG=New,Process,Reports,Available Parts,Left Side,Right Side];
    ShowFilter=No;
    OnOpenPage=BEGIN
                 DetectFilters();
                 Reload(FALSE);
                 UpdateGlobals();
               END;

    OnQueryClosePage=VAR
                       lClose@9062230 : Boolean;
                       lOption@9062232 : ' ,Apply,Abandon';
                     BEGIN
                       lClose := FALSE;
                       IF (IsChanged()) THEN
                       BEGIN
                         lOption := STRMENU(tCloseMenuOptions, lOption::Apply, tCloseMenuTitle);
                         CASE (lOption) OF
                           lOption::Apply:
                             lClose := Apply(FALSE, FALSE);
                           lOption::Abandon:
                             lClose := TRUE;
                           ELSE
                             lClose := FALSE;
                         END
                       END
                       ELSE
                         lClose := TRUE;
                       EXIT(lClose);
                     END;

    ActionList=ACTIONS
    {
      { 9062231 ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 9062252 ;1   ;Action    ;
                      Name=ReloadAction;
                      CaptionML=[ENU=Reload;
                                 ENG=Reload];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=RefreshLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Reload(FALSE);
                               END;
                                }
      { 9062250 ;1   ;Action    ;
                      Name=ApplyAction;
                      CaptionML=[ENU=Apply;
                                 ENG=Apply];
                      Promoted=Yes;
                      Enabled=AvailablePartsEnabled;
                      PromotedIsBig=Yes;
                      Image=Apply;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Apply(TRUE, TRUE);
                               END;
                                }
      { 9062232 ;1   ;Action    ;
                      Name=ResetLaoutAction;
                      CaptionML=[ENU=Reset Layout;
                                 ENG=Reset Layout];
                      Promoted=Yes;
                      Enabled=AvailablePartsEnabled;
                      PromotedIsBig=Yes;
                      Image=Undo;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Reload(TRUE);
                               END;
                                }
      { 9062247 ;1   ;ActionGroup;
                      Name=AvailablePartsGroup;
                      CaptionML=[ENU=Available Parts;
                                 ENG=Available Parts];
                      Enabled=AvailablePartsEnabled }
      { 9062233 ;2   ;Action    ;
                      Name=AvailablePartsAddToLeftAction;
                      CaptionML=[ENU=Add to Left;
                                 ENG=Add to Left];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 AddTo(Rec.Side::Left);
                               END;
                                }
      { 9062238 ;2   ;Action    ;
                      Name=AvailablePartsAddToRightAction;
                      CaptionML=[ENU=Add to Right;
                                 ENG=Add to Right];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 AddTo(Rec.Side::Right);
                               END;
                                }
      { 9062239 ;1   ;ActionGroup;
                      Name=LeftSideGroup;
                      CaptionML=[ENU=Left Side;
                                 ENG=Left Side];
                      Enabled=LeftSideEnabled }
      { 9062240 ;2   ;Action    ;
                      Name=LeftSideUpAction;
                      CaptionML=[ENU=Up;
                                 ENG=Up];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=MoveUp;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 MoveUpDown(Rec.Side::Left, SequenceToolkit.Up);
                               END;
                                }
      { 9062241 ;2   ;Action    ;
                      Name=LeftSideDownAction;
                      CaptionML=[ENU=Down;
                                 ENG=Down];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=MoveDown;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 MoveUpDown(Rec.Side::Left, SequenceToolkit.Down);
                               END;
                                }
      { 9062235 ;2   ;Action    ;
                      Name=LeftSideMoveToRightAction;
                      CaptionML=[ENU=Move to Right;
                                 ENG=Move to Right];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 MoveTo(Rec.Side::Left, Rec.Side::Right);
                               END;
                                }
      { 9062242 ;2   ;Action    ;
                      Name=LeftSideRemoveAction;
                      CaptionML=[ENU=Remove;
                                 ENG=Remove];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Delete;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 Remove(Rec.Side::Left);
                               END;
                                }
      { 9062246 ;1   ;ActionGroup;
                      Name=RightSideGroup;
                      CaptionML=[ENU=Right Side;
                                 ENG=Right Side];
                      Enabled=RightSideEnabled }
      { 9062245 ;2   ;Action    ;
                      Name=RightSideUpAction;
                      CaptionML=[ENU=Up;
                                 ENG=Up];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=MoveUp;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 MoveUpDown(Rec.Side::Right, SequenceToolkit.Up);
                               END;
                                }
      { 9062244 ;2   ;Action    ;
                      Name=RightSideDownAction;
                      CaptionML=[ENU=Down;
                                 ENG=Down];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=MoveDown;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 MoveUpDown(Rec.Side::Right, SequenceToolkit.Down);
                               END;
                                }
      { 9062248 ;2   ;Action    ;
                      Name=RightSideMoveToLeftAction;
                      CaptionML=[ENU=Move to Left;
                                 ENG=Move to Left];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 MoveTo(Rec.Side::Right, Rec.Side::Left);
                               END;
                                }
      { 9062243 ;2   ;Action    ;
                      Name=RightSideRemoveAction;
                      CaptionML=[ENU=Remove;
                                 ENG=Remove];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Delete;
                      PromotedCategory=Category6;
                      OnAction=BEGIN
                                 Remove(Rec.Side::Right);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 9062230; ;Container ;
                ContainerType=ContentArea }

    { 9062234;1;Group     ;
                Name=LayoutGroup;
                CaptionML=[ENU=Layout;
                           ENG=Layout];
                GroupType=Group }

    { 1000000001;2;Group  ;
                Name=LeftSideGroup;
                CaptionML=[ENU=Left Side;
                           ENG=Left Side];
                GroupType=Group }

    { 1000000000;3;Field  ;
                Name=LeftSideAction;
                CaptionML=[ENU=Left Side Action;
                           ENG=Left Side Action];
                Editable=FALSE }

    { 9062236;3;Part      ;
                Name=LeftSidePart;
                CaptionML=[ENU=Left Side;
                           ENG=Left Side];
                PagePartID=Page9063159;
                Enabled=LeftSideEnabled;
                PartType=Page }

    { 9062237;2;Part      ;
                Name=RightSidePart;
                CaptionML=[ENU=Right Side;
                           ENG=Right Side];
                PagePartID=Page9063159;
                Enabled=RightSideEnabled;
                PartType=Page }

    { 9062253;1;Part      ;
                Name=AvailablePartsPart;
                CaptionML=[ENU=Available Parts;
                           ENG=Available Parts];
                PagePartID=Page9063159;
                Enabled=AvailablePartsEnabled;
                PartType=Page }

  }
  CODE
  {
    VAR
      RoleCentreControlInfoTmp@9062233 : TEMPORARY Record 9062776;
      RoleCentreToolkit@9062230 : Codeunit 9062639;
      SequenceToolkit@9062234 : Codeunit 9062519;
      PageIdFilter@9062231 : Integer;
      tUnknownPage@9062232 : TextConst 'ENU=Page ID can''t be detected. This page has to be run with page ID filter.;ENG=Page ID can''t be detected. This page has to be run with page ID filter.';
      UserIdFilter@9062238 : Code[50];
      Changed@9062236 : Boolean;
      tCloseMenuTitle@9062237 : TextConst 'ENU=You have modified the layout, but haven''t saved your changes:;ENG=You have modified the layout, but haven''t saved your changes:';
      tCloseMenuOptions@9062235 : TextConst 'ENU=Apply Changes,Abandon Changes;ENG=Apply Changes,Abandon Changes';
      AvailablePartsEnabled@9062241 : Boolean INDATASET;
      LeftSideEnabled@9062239 : Boolean INDATASET;
      RightSideEnabled@9062240 : Boolean INDATASET;

    LOCAL PROCEDURE DetectFilters@9062231();
    VAR
      lFilterGroup@9062230 : Integer;
    BEGIN
      //DOC NA2016.11 - Detecting the page filters

      CLEAR(PageIdFilter);
      CLEAR(UserIdFilter);

      FOR lFilterGroup := 5 DOWNTO 0 DO
      BEGIN
        Rec.FILTERGROUP(lFilterGroup);
        IF (Rec.GETFILTER("Page ID") <> '') THEN
          PageIdFilter := Rec.GETRANGEMIN("Page ID");
        IF (Rec.GETFILTER("User ID") <> '') THEN
          UserIdFilter := Rec.GETRANGEMIN("User ID");
      END;
      Rec.FILTERGROUP(0);

      IF (PageIdFilter = 0) THEN
        ERROR(tUnknownPage);
      IF (UserIdFilter = '') THEN
        UserIdFilter := USERID();
    END;

    LOCAL PROCEDURE Reload@9062240(pReset@9062230 : Boolean);
    VAR
      eConfirmation@9062231 : TextConst 'ENU=There are some changes made to the layout. If you reload data, they will be abandoned. Do you want to continue?;ENG=There are some changes made to the layout. If you reload data, they will be abandoned. Do you want to continue?';
    BEGIN
      //DOC NA2016.11 - Reloading page data
      //  -> pReset: Flag to reset layout

      IF (IsChanged()) THEN
        IF ( NOT (CONFIRM(eConfirmation, FALSE))) THEN
          EXIT;

      Rec.RESET();
      Rec.DELETEALL();

      RoleCentreControlInfoTmp.RESET();
      RoleCentreControlInfoTmp.DELETEALL();

      CLEAR(RoleCentreToolkit);
      RoleCentreToolkit.ReadMetadata(UserIdFilter, PageIdFilter, Rec, RoleCentreControlInfoTmp);

      IF (pReset) THEN
      BEGIN
        RoleCentreControlInfoTmp.RESET();
        IF (RoleCentreControlInfoTmp.FINDSET()) THEN
        REPEAT
          RoleCentreControlInfoTmp.VALIDATE(Side, RoleCentreControlInfoTmp."Original Side");
          RoleCentreControlInfoTmp.VALIDATE(Visible, RoleCentreControlInfoTmp."Original Visible");
          RoleCentreControlInfoTmp.VALIDATE(Sequence, RoleCentreControlInfoTmp."Original Sequence");
          RoleCentreControlInfoTmp.MODIFY();
        UNTIL (RoleCentreControlInfoTmp.NEXT() = 0);
      END;

      RoleCentreControlInfoTmp.RESET();
      RoleCentreControlInfoTmp.SETCURRENTKEY("Page ID", Visible, Side, Sequence);
      RoleCentreControlInfoTmp.SETRANGE(Visible, FALSE);
      CurrPage.AvailablePartsPart.PAGE.SetRecords(RoleCentreControlInfoTmp);

      RoleCentreControlInfoTmp.RESET();
      RoleCentreControlInfoTmp.SETCURRENTKEY("Page ID", Visible, Side, Sequence);
      RoleCentreControlInfoTmp.SETRANGE(Visible, TRUE);
      RoleCentreControlInfoTmp.SETRANGE(Side, RoleCentreControlInfoTmp.Side::Left);
      CurrPage.LeftSidePart.PAGE.SetRecords(RoleCentreControlInfoTmp);

      RoleCentreControlInfoTmp.RESET();
      RoleCentreControlInfoTmp.SETCURRENTKEY("Page ID", Visible, Side, Sequence);
      RoleCentreControlInfoTmp.SETRANGE(Visible, TRUE);
      RoleCentreControlInfoTmp.SETRANGE(Side, RoleCentreControlInfoTmp.Side::Right);
      CurrPage.RightSidePart.PAGE.SetRecords(RoleCentreControlInfoTmp);

      ClearChanged();
      Changed := pReset;

      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE Reset@9062241();
    VAR
      eConfirmation@9062230 : TextConst 'ENU=Do you want to reset the whole layout to its default state?;ENG=Do you want to reset the whole layout to its default state?';
    BEGIN
      //DOC NA2016.11 - Resetting page layout to its default stage

      IF ( NOT (CONFIRM(eConfirmation, FALSE))) THEN
        EXIT;

      Reload(TRUE);
    END;

    LOCAL PROCEDURE Apply@9062236(pInteraction@9062232 : Boolean;pClosePage@9062233 : Boolean) : Boolean;
    VAR
      eNoChanges@9062231 : TextConst 'ENU=There are no changes to apply.;ENG=There are no changes to apply.';
      eConfirmation@9062230 : TextConst 'ENU=Do you want to apply your modifications?;ENG=Do you want to apply your modifications?';
    BEGIN
      //DOC NA2016.11 - Applying modifications to the layout
      //  -> pInteraction: Interaction (with the user) flag
      //  -> pClosePage: Flag to close page after

      IF (pInteraction) THEN
      BEGIN
        IF ( NOT (IsChanged())) THEN
          ERROR(eNoChanges);
        IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
          EXIT(FALSE);
      END;

      CurrPage.AvailablePartsPart.PAGE.GetRecords(RoleCentreControlInfoTmp);
      CurrPage.LeftSidePart.PAGE.GetRecords(RoleCentreControlInfoTmp);
      CurrPage.RightSidePart.PAGE.GetRecords(RoleCentreControlInfoTmp);

      RoleCentreToolkit.WriteMetadata(UserIdFilter, PageIdFilter, Rec, RoleCentreControlInfoTmp);

      ClearChanged();

      IF (pClosePage) THEN
        CurrPage.CLOSE();

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddTo@9062237(pSide@9062230 : Integer);
    VAR
      lRoleCentreControlInfo@9062231 : Record 9062776;
      lEmptyGuid@9062232 : GUID;
    BEGIN
      //DOC NA2016.11 - Adding a part to left / right side
      //  -> pSide: The side to add the part to

      CurrPage.AvailablePartsPart.PAGE.GetCurrentRecord(lRoleCentreControlInfo);
      IF ((lRoleCentreControlInfo."Page ID" <> 0) AND (lRoleCentreControlInfo."Control GUID" <> lEmptyGuid)) THEN
      BEGIN
        lRoleCentreControlInfo.Visible := TRUE;
        lRoleCentreControlInfo.Side := pSide;
        CASE (pSide) OF
          Rec.Side::Left: CurrPage.LeftSidePart.PAGE.AddRecord(lRoleCentreControlInfo);
          Rec.Side::Right: CurrPage.RightSidePart.PAGE.AddRecord(lRoleCentreControlInfo);
        END;
        CurrPage.AvailablePartsPart.PAGE.DeleteRecord(lRoleCentreControlInfo);
        Changed := TRUE;
        CurrPage.UPDATE(FALSE);
      END;
    END;

    LOCAL PROCEDURE MoveTo@9062242(pFromSide@9062230 : Integer;pToSide@9062231 : Integer);
    VAR
      lRoleCentreControlInfo@9062232 : Record 9062776;
    BEGIN
      //DOC NA2016.11 - Moving part from side to side
      //  -> pFromSide: From side
      //  -> pToSide: To side

      IF (pFromSide = pToSide) THEN
        EXIT;

      CASE (pFromSide) OF
        Rec.Side::Left:
          BEGIN
            CurrPage.LeftSidePart.PAGE.GetCurrentRecord(lRoleCentreControlInfo);
            CurrPage.LeftSidePart.PAGE.DeleteRecord(lRoleCentreControlInfo);
          END;
        Rec.Side::Right:
          BEGIN
            CurrPage.RightSidePart.PAGE.GetCurrentRecord(lRoleCentreControlInfo);
            CurrPage.RightSidePart.PAGE.DeleteRecord(lRoleCentreControlInfo);
          END;
      END;

      lRoleCentreControlInfo.Side := pToSide;

      CASE (pToSide) OF
        Rec.Side::Left: CurrPage.LeftSidePart.PAGE.AddRecord(lRoleCentreControlInfo);
        Rec.Side::Right: CurrPage.RightSidePart.PAGE.AddRecord(lRoleCentreControlInfo);
      END;

      Changed := TRUE;
    END;

    LOCAL PROCEDURE MoveUpDown@9062233(pSide@9062230 : Integer;pDirection@9062231 : Integer);
    BEGIN
      //DOC NA2016.11 - Moving part up / down
      //  -> pSide: Part's side
      //  -> pDirection: Direction (use SequenceToolkit.Up() or SequenceToolkit.Down() for values)

      CASE (pSide) OF
        Rec.Side::Left: CurrPage.LeftSidePart.PAGE.Move(pDirection);
        Rec.Side::Right: CurrPage.RightSidePart.PAGE.Move(pDirection);
      END;
      Changed := TRUE;
    END;

    LOCAL PROCEDURE Remove@9062234(pSide@9062230 : Integer);
    VAR
      lRoleCentreControlInfo@9062231 : Record 9062776;
      lEmptyGuid@9062232 : GUID;
    BEGIN
      //DOC NA2016.11 - Removing part from a side (and bringing it back to available parts)
      //  -> pSide: The side

      CASE (pSide) OF
        Rec.Side::Left: CurrPage.LeftSidePart.PAGE.GetCurrentRecord(lRoleCentreControlInfo);
        Rec.Side::Right: CurrPage.RightSidePart.PAGE.GetCurrentRecord(lRoleCentreControlInfo);
      END;
      IF ((lRoleCentreControlInfo."Page ID" <> 0) AND (lRoleCentreControlInfo."Control GUID" <> lEmptyGuid)) THEN
      BEGIN
        lRoleCentreControlInfo.Visible := FALSE;
        lRoleCentreControlInfo.Side := lRoleCentreControlInfo.Side::" ";
        CurrPage.AvailablePartsPart.PAGE.AddRecord(lRoleCentreControlInfo);
        CASE (pSide) OF
          Rec.Side::Left: CurrPage.LeftSidePart.PAGE.DeleteRecord(lRoleCentreControlInfo);
          Rec.Side::Right: CurrPage.RightSidePart.PAGE.DeleteRecord(lRoleCentreControlInfo);
        END;
        Changed := TRUE;
        CurrPage.UPDATE(FALSE);
      END;
    END;

    LOCAL PROCEDURE SelectPanel@9062238(pSide@9062230 : Integer);
    VAR
      lResult@9062231 : Boolean;
    BEGIN
      //DOC NA2016.11 - Selecting a panel for one of the sides or for available parts
      //  -> pSide: The side (empty value is used for available parts)

      CLEAR(lResult);
      CASE (pSide) OF
        Rec.Side::" ": lResult := CurrPage.AvailablePartsPart.PAGE.SelectPanel();
        Rec.Side::Left: lResult := CurrPage.LeftSidePart.PAGE.SelectPanel();
        Rec.Side::Right: lResult := CurrPage.RightSidePart.PAGE.SelectPanel();
      END;
      IF (lResult) THEN
        Changed := TRUE;
    END;

    LOCAL PROCEDURE IsChanged@9062230() : Boolean;
    BEGIN
      //DOC NA2016.11 - Returning if anything has been changed on a page or any of sub-pages
      //  <- The result

      IF (Changed) THEN
        EXIT(TRUE);
      IF (CurrPage.AvailablePartsPart.PAGE.GetChanged()) THEN
        EXIT(TRUE);
      IF (CurrPage.LeftSidePart.PAGE.GetChanged()) THEN
        EXIT(TRUE);
      IF (CurrPage.RightSidePart.PAGE.GetChanged()) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ClearChanged@9062232();
    BEGIN
      //DOC NA2016.11 - Clearing "Changed" flags on a page and any of sub-pages

      Changed := FALSE;
      CurrPage.AvailablePartsPart.PAGE.ClearChanged();
      CurrPage.LeftSidePart.PAGE.ClearChanged();
      CurrPage.RightSidePart.PAGE.ClearChanged();
    END;

    LOCAL PROCEDURE UpdateGlobals@9062235();
    BEGIN
      //DOC NA2016.11 - Updating page globals

      LeftSideEnabled := Rec."Left Side Exists";
      RightSideEnabled := Rec."Right Side Exists";
      AvailablePartsEnabled := ((LeftSideEnabled) OR (RightSideEnabled));
    END;

    BEGIN
    {
      //DOC NA2016.11 JH 31/10/2015 - Created
      //DOC NA2016.12 JH 27/12/2015 - Modified, new version
      //DOC NA2016.15 JH 25/04/2016 - CfMD amendments
    }
    END.
  }
}

