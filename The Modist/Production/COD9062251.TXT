OBJECT Codeunit 9062251 Filter Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=16/03/16;
    Time=12:00:00 PM;
    Version List=NA2016.14;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TableFieldBuffer@1000000000 : TEMPORARY Record 9062231;
      DataTypeBuffer@1000000006 : TEMPORARY Record 9062235;
      DataTypeBufferId@1000000002 : Integer;
      FieldIds@1000000001 : ARRAY [100] OF Integer;
      FieldIdsSet@1000000007 : Boolean;

    LOCAL PROCEDURE "--- General ---"@1000000000();
    BEGIN
    END;

    LOCAL PROCEDURE ValueInFilter@1000000003(pDataType@1000000000 : Integer;pValue@1000000001 : Variant;pFilter@1000000004 : Text) : Boolean;
    VAR
      lDataTypeBuffer@1000000005 : TEMPORARY Record 9062235;
      lRecordRef@1000000002 : RecordRef;
      lFieldId@1000000006 : Integer;
      lFieldRef@1000000003 : FieldRef;
      lResult@1000000007 : Boolean;
    BEGIN
      //DOC NA2016.14 - Returning if value is in filter (internal version)
      //  -> pDataType: Data type
      //  -> pValue: Value (as variant)
      //  -> pFilter: Filter (as text)
      //  <- Response

      lFieldId := DataTypeToFieldId(pDataType);
      IF (pFilter <> '') THEN
      BEGIN
        lDataTypeBuffer.INIT();
        lRecordRef.GETTABLE(lDataTypeBuffer);
        lFieldRef := lRecordRef.FIELD(lFieldId);
        lFieldRef.VALUE(pValue);
        lRecordRef.SETTABLE(lDataTypeBuffer);
        lDataTypeBuffer.INSERT();
        lFieldRef.SETFILTER(pFilter);
        lResult := ( NOT (lDataTypeBuffer.ISEMPTY()));
      END
      ELSE
        lResult := TRUE;
      EXIT(lResult);
    END;

    PROCEDURE BigIntegerValueInFilter@1000000006(pValue@1000000001 : BigInteger;pFilter@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Checking whether biginteger value is in filter
      //  -> pValue: Value to check
      //  -> pFilter: Filter to check against
      //  <- Answer (TRUE = Within filter, FALSE = Nope)

      EXIT(ValueInFilter(TableFieldBuffer."Data Type"::BigInteger, pValue, pFilter));
    END;

    PROCEDURE BooleanValueInFilter@1000000004(pValue@1000000001 : Boolean;pFilter@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Checking whether boolean value is in filter
      //  -> pValue: Value to check
      //  -> pFilter: Filter to check against
      //  <- Answer (TRUE = Within filter, FALSE = Nope)

      EXIT(ValueInFilter(TableFieldBuffer."Data Type"::Boolean, pValue, pFilter));
    END;

    PROCEDURE CodeValueInFilter@1000000012(pValue@1000000001 : Code[250];pFilter@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Checking whether code value is in filter
      //  -> pValue: Value to check
      //  -> pFilter: Filter to check against
      //  <- Answer (TRUE = Within filter, FALSE = Nope)

      EXIT(ValueInFilter(TableFieldBuffer."Data Type"::Code, pValue, pFilter));
    END;

    PROCEDURE DateValueInFilter@1000000023(pValue@1000000001 : Date;pFilter@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Checking whether date value is in filter
      //  -> pValue: Value to check
      //  -> pFilter: Filter to check against
      //  <- Answer (TRUE = Within filter, FALSE = Nope)

      EXIT(ValueInFilter(TableFieldBuffer."Data Type"::Date, pValue, pFilter));
    END;

    PROCEDURE DateFormulaValueInFilter@1000000022(pValue@1000000001 : DateFormula;pFilter@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Checking whether dateformula value is in filter
      //  -> pValue: Value to check
      //  -> pFilter: Filter to check against
      //  <- Answer (TRUE = Within filter, FALSE = Nope)

      EXIT(ValueInFilter(TableFieldBuffer."Data Type"::DateFormula, pValue, pFilter));
    END;

    PROCEDURE DateTimeValueInFilter@1000000021(pValue@1000000001 : DateTime;pFilter@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Checking whether datetime value is in filter
      //  -> pValue: Value to check
      //  -> pFilter: Filter to check against
      //  <- Answer (TRUE = Within filter, FALSE = Nope)

      EXIT(ValueInFilter(TableFieldBuffer."Data Type"::DateTime, pValue, pFilter));
    END;

    PROCEDURE DecimalValueInFilter@1000000020(pValue@1000000001 : Decimal;pFilter@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Checking whether decimal value is in filter
      //  -> pValue: Value to check
      //  -> pFilter: Filter to check against
      //  <- Answer (TRUE = Within filter, FALSE = Nope)

      EXIT(ValueInFilter(TableFieldBuffer."Data Type"::Decimal, pValue, pFilter));
    END;

    PROCEDURE DurationValueInFilter@1000000019(pValue@1000000001 : Duration;pFilter@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Checking whether duration value is in filter
      //  -> pValue: Value to check
      //  -> pFilter: Filter to check against
      //  <- Answer (TRUE = Within filter, FALSE = Nope)

      EXIT(ValueInFilter(TableFieldBuffer."Data Type"::Duration, pValue, pFilter));
    END;

    PROCEDURE GuidValueInFilter@1000000018(pValue@1000000001 : GUID;pFilter@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Checking whether GUID value is in filter
      //  -> pValue: Value to check
      //  -> pFilter: Filter to check against
      //  <- Answer (TRUE = Within filter, FALSE = Nope)

      EXIT(ValueInFilter(TableFieldBuffer."Data Type"::GUID, pValue, pFilter));
    END;

    PROCEDURE IntegerValueInFilter@1000000005(pValue@1000000001 : Integer;pFilter@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Checking whether integer value is in filter
      //  -> pValue: Value to check
      //  -> pFilter: Filter to check against
      //  <- Answer (TRUE = Within filter, FALSE = Nope)

      EXIT(ValueInFilter(TableFieldBuffer."Data Type"::Integer, pValue, pFilter));
    END;

    PROCEDURE RecordIdValueInFilter@1000000016(pValue@1000000001 : RecordID;pFilter@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Checking whether recordid value is in filter
      //  -> pValue: Value to check
      //  -> pFilter: Filter to check against
      //  <- Answer (TRUE = Within filter, FALSE = Nope)

      EXIT(ValueInFilter(TableFieldBuffer."Data Type"::RecordID, pValue, pFilter));
    END;

    PROCEDURE TextValueInFilter@1000000015(pValue@1000000001 : Text[250];pFilter@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Checking whether text value is in filter
      //  -> pValue: Value to check
      //  -> pFilter: Filter to check against
      //  <- Answer (TRUE = Within filter, FALSE = Nope)

      EXIT(ValueInFilter(TableFieldBuffer."Data Type"::Text, pValue, pFilter));
    END;

    PROCEDURE TimeValueInFilter@1000000014(pValue@1000000001 : Time;pFilter@1000000002 : Text) : Boolean;
    BEGIN
      //DOC NA2016.12 - Checking whether time value is in filter
      //  -> pValue: Value to check
      //  -> pFilter: Filter to check against
      //  <- Answer (TRUE = Within filter, FALSE = Nope)

      EXIT(ValueInFilter(TableFieldBuffer."Data Type"::Time, pValue, pFilter));
    END;

    LOCAL PROCEDURE "--- Building ---"@1000000009();
    BEGIN
    END;

    LOCAL PROCEDURE AddValue@1000000013(pDataType@1000000006 : Integer;pValue@1000000005 : Variant) : Boolean;
    VAR
      lRecordRef@1000000003 : RecordRef;
      lFieldId@1000000000 : Integer;
      lFieldRef@1000000002 : FieldRef;
      lResult@1000000004 : Boolean;
    BEGIN
      //DOC NA2016.14 - Adding value
      //  -> pDataType: Data type
      //  -> pValue: Value (as variant)
      //  <- TRUE = Added, FALSE = Value is already there

      lFieldId := DataTypeToFieldId(pDataType);
      lRecordRef.GETTABLE(DataTypeBuffer);
      lFieldRef := lRecordRef.FIELD(lFieldId);
      lFieldRef.SETRANGE(pValue);
      IF (lRecordRef.ISEMPTY()) THEN
      BEGIN
        DataTypeBufferId += 1;
        DataTypeBuffer.INIT();
        DataTypeBuffer.ID := DataTypeBufferId;
        lRecordRef.GETTABLE(DataTypeBuffer);
        lFieldRef.VALUE(pValue);
        lRecordRef.SETTABLE(DataTypeBuffer);
        DataTypeBuffer.INSERT();
        lResult := TRUE;
      END;
      EXIT(lResult);
    END;

    PROCEDURE AddBooleanValue@1000000024(pValue@1000000000 : Boolean) : Boolean;
    BEGIN
      //DOC NA2016.14 - Adding boolean to integer filter
      //  -> pValue: Value to add
      //  <- TRUE = Added, FALSE = Already there

      EXIT(AddValue(TableFieldBuffer."Data Type"::Boolean, pValue));
    END;

    PROCEDURE AddBigIntegerValue@1000000025(pValue@1000000000 : BigInteger) : Boolean;
    BEGIN
      //DOC NA2016.14 - Adding big integer to integer filter
      //  -> pValue: Value to add
      //  <- TRUE = Added, FALSE = Already there

      EXIT(AddValue(TableFieldBuffer."Data Type"::BigInteger, pValue));
    END;

    PROCEDURE AddCodeValue@1000000027(pValue@1000000000 : Code[1024]) : Boolean;
    BEGIN
      //DOC NA2016.14 - Adding code to integer filter
      //  -> pValue: Value to add
      //  <- TRUE = Added, FALSE = Already there

      EXIT(AddValue(TableFieldBuffer."Data Type"::Integer, pValue));
    END;

    PROCEDURE AddDateValue@1000000028(pValue@1000000000 : Date) : Boolean;
    BEGIN
      //DOC NA2016.14 - Adding date to integer filter
      //  -> pValue: Value to add
      //  <- TRUE = Added, FALSE = Already there

      EXIT(AddValue(TableFieldBuffer."Data Type"::Date, pValue));
    END;

    PROCEDURE AddDateFormulaValue@1000000029(pValue@1000000000 : DateFormula) : Boolean;
    BEGIN
      //DOC NA2016.14 - Adding date formula to integer filter
      //  -> pValue: Value to add
      //  <- TRUE = Added, FALSE = Already there

      EXIT(AddValue(TableFieldBuffer."Data Type"::DateFormula, pValue));
    END;

    PROCEDURE AddDateTimeValue@1000000030(pValue@1000000000 : DateTime) : Boolean;
    BEGIN
      //DOC NA2016.14 - Adding datetime to integer filter
      //  -> pValue: Value to add
      //  <- TRUE = Added, FALSE = Already there

      EXIT(AddValue(TableFieldBuffer."Data Type"::DateTime, pValue));
    END;

    PROCEDURE AddDecimalValue@1000000031(pValue@1000000000 : Decimal) : Boolean;
    BEGIN
      //DOC NA2016.14 - Adding decimal to integer filter
      //  -> pValue: Value to add
      //  <- TRUE = Added, FALSE = Already there

      EXIT(AddValue(TableFieldBuffer."Data Type"::Decimal, pValue));
    END;

    PROCEDURE AddDurationValue@1000000032(pValue@1000000000 : Duration) : Boolean;
    BEGIN
      //DOC NA2016.14 - Adding duration to integer filter
      //  -> pValue: Value to add
      //  <- TRUE = Added, FALSE = Already there

      EXIT(AddValue(TableFieldBuffer."Data Type"::Duration, pValue));
    END;

    PROCEDURE AddIntegerValue@1000000008(pValue@1000000000 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.14 - Adding integer to integer filter
      //  -> pValue: Value to add
      //  <- TRUE = Added, FALSE = Already there

      EXIT(AddValue(TableFieldBuffer."Data Type"::Integer, pValue));
    END;

    PROCEDURE AddGuidValue@1000000033(pValue@1000000000 : GUID) : Boolean;
    BEGIN
      //DOC NA2016.14 - Adding GUID to integer filter
      //  -> pValue: Value to add
      //  <- TRUE = Added, FALSE = Already there

      EXIT(AddValue(TableFieldBuffer."Data Type"::GUID, pValue));
    END;

    PROCEDURE AddRecordIdValue@1000000034(pValue@1000000000 : RecordID) : Boolean;
    BEGIN
      //DOC NA2016.14 - Adding record ID to integer filter
      //  -> pValue: Value to add
      //  <- TRUE = Added, FALSE = Already there

      EXIT(AddValue(TableFieldBuffer."Data Type"::RecordID, pValue));
    END;

    PROCEDURE AddTextValue@1000000035(pValue@1000000000 : Text) : Boolean;
    BEGIN
      //DOC NA2016.14 - Adding text to integer filter
      //  -> pValue: Value to add
      //  <- TRUE = Added, FALSE = Already there

      EXIT(AddValue(TableFieldBuffer."Data Type"::Text, pValue));
    END;

    PROCEDURE AddTimeValue@1000000036(pValue@1000000000 : Time) : Boolean;
    BEGIN
      //DOC NA2016.14 - Adding time to integer filter
      //  -> pValue: Value to add
      //  <- TRUE = Added, FALSE = Already there

      EXIT(AddValue(TableFieldBuffer."Data Type"::Time, pValue));
    END;

    PROCEDURE GetFilter@1000000007(pDataType@1000000000 : Integer) : Text;
    VAR
      lFilter@1000000001 : Text;
      lRecordRef@1000000004 : RecordRef;
      lFieldId@1000000002 : Integer;
      lFieldRef@1000000003 : FieldRef;
    BEGIN
      //DOC NA2016.14 - Returning filter for given data type
      //  -> pDataType: Data type
      //  <- The filter

      lFieldId := DataTypeToFieldId(pDataType);
      DataTypeBuffer.RESET();
      IF (DataTypeBuffer.FINDSET()) THEN
      BEGIN
        lRecordRef.OPEN(DATABASE::"Data Type Buffer");
        lFieldRef := lRecordRef.FIELD(lFieldId);
        REPEAT
          lRecordRef.GETTABLE(DataTypeBuffer);
          IF (lFilter <> '') THEN
            lFilter := lFilter + '|';
          lFilter := lFilter + FORMAT(lFieldRef.VALUE(), 0, 1);
        UNTIL (DataTypeBuffer.NEXT() = 0);
      END;
      EXIT(lFilter);
    END;

    PROCEDURE GetBooleanFilter@1000000039() : Text;
    BEGIN
      //DOC NA2016.14 - Returning boolean filter
      //  <- The filter

      EXIT(GetFilter(TableFieldBuffer."Data Type"::Boolean));
    END;

    PROCEDURE GetBigIntegerFilter@1000000052() : Text;
    BEGIN
      //DOC NA2016.14 - Returning big integer filter
      //  <- The filter

      EXIT(GetFilter(TableFieldBuffer."Data Type"::BigInteger));
    END;

    PROCEDURE GetCodeFilter@1000000051() : Text;
    BEGIN
      //DOC NA2016.14 - Returning code filter
      //  <- The filter

      EXIT(GetFilter(TableFieldBuffer."Data Type"::Code));
    END;

    PROCEDURE GetDateFilter@1000000050() : Text;
    BEGIN
      //DOC NA2016.14 - Returning date filter
      //  <- The filter

      EXIT(GetFilter(TableFieldBuffer."Data Type"::Date));
    END;

    PROCEDURE GetDateFormulaFilter@1000000049() : Text;
    BEGIN
      //DOC NA2016.14 - Returning date formula filter
      //  <- The filter

      EXIT(GetFilter(TableFieldBuffer."Data Type"::DateFormula));
    END;

    PROCEDURE GetDateTimeFilter@1000000048() : Text;
    BEGIN
      //DOC NA2016.14 - Returning datetime filter
      //  <- The filter

      EXIT(GetFilter(TableFieldBuffer."Data Type"::DateTime));
    END;

    PROCEDURE GetDecimalFilter@1000000047() : Text;
    BEGIN
      //DOC NA2016.14 - Returning decimal filter
      //  <- The filter

      EXIT(GetFilter(TableFieldBuffer."Data Type"::Decimal));
    END;

    PROCEDURE GetDurationFilter@1000000046() : Text;
    BEGIN
      //DOC NA2016.14 - Returning duration filter
      //  <- The filter

      EXIT(GetFilter(TableFieldBuffer."Data Type"::Duration));
    END;

    PROCEDURE GetIntegerFilter@1000000045() : Text;
    BEGIN
      //DOC NA2016.14 - Returning integer filter
      //  <- The filter

      EXIT(GetFilter(TableFieldBuffer."Data Type"::Integer));
    END;

    PROCEDURE GetGuidFilter@1000000044() : Text;
    BEGIN
      //DOC NA2016.14 - Returning GUID filter
      //  <- The filter

      EXIT(GetFilter(TableFieldBuffer."Data Type"::GUID));
    END;

    PROCEDURE GetRecordIdFilter@1000000043() : Text;
    BEGIN
      //DOC NA2016.14 - Returning record ID filter
      //  <- The filter

      EXIT(GetFilter(TableFieldBuffer."Data Type"::RecordID));
    END;

    PROCEDURE GetTextFilter@1000000042() : Text;
    BEGIN
      //DOC NA2016.14 - Returning text filter
      //  <- The filter

      EXIT(GetFilter(TableFieldBuffer."Data Type"::Text));
    END;

    PROCEDURE GetTimeFilter@1000000041() : Text;
    BEGIN
      //DOC NA2016.14 - Returning time filter
      //  <- The filter

      EXIT(GetFilter(TableFieldBuffer."Data Type"::Time));
    END;

    LOCAL PROCEDURE "--- Internal ---"@1000000001();
    BEGIN
    END;

    LOCAL PROCEDURE DataTypeToFieldId@1000000026(pDataType@1000000000 : Integer) : Integer;
    VAR
      lFieldId@1000000001 : Integer;
    BEGIN
      //DOC NA2016.14 - Converting data type to field ID
      //  -> pDataType: Data type
      //  <- Field ID

      IF ( NOT (FieldIdsSet)) THEN
      BEGIN
        CLEAR(FieldIds);
        FieldIds[TableFieldBuffer."Data Type"::Boolean] := DataTypeBuffer.FIELDNO("Boolean Value");
        FieldIds[TableFieldBuffer."Data Type"::BigInteger] := DataTypeBuffer.FIELDNO("BigInteger Value");
        FieldIds[TableFieldBuffer."Data Type"::Code] := DataTypeBuffer.FIELDNO("Code Value");
        FieldIds[TableFieldBuffer."Data Type"::Date] := DataTypeBuffer.FIELDNO("Date Value");
        FieldIds[TableFieldBuffer."Data Type"::DateFormula] := DataTypeBuffer.FIELDNO("DateFormula Value");
        FieldIds[TableFieldBuffer."Data Type"::DateTime] := DataTypeBuffer.FIELDNO("DateTime Value");
        FieldIds[TableFieldBuffer."Data Type"::Decimal] := DataTypeBuffer.FIELDNO("Decimal Value");
        FieldIds[TableFieldBuffer."Data Type"::Duration] := DataTypeBuffer.FIELDNO("Duration Value");
        FieldIds[TableFieldBuffer."Data Type"::GUID] := DataTypeBuffer.FIELDNO("GUID Value");
        FieldIds[TableFieldBuffer."Data Type"::Integer] := DataTypeBuffer.FIELDNO("Integer Value");
        FieldIds[TableFieldBuffer."Data Type"::OemCode] := DataTypeBuffer.FIELDNO("Code Value");
        FieldIds[TableFieldBuffer."Data Type"::OemText] := DataTypeBuffer.FIELDNO("Text Value");
        FieldIds[TableFieldBuffer."Data Type"::Option] := DataTypeBuffer.FIELDNO("Integer Value");
        FieldIds[TableFieldBuffer."Data Type"::RecordID] := DataTypeBuffer.FIELDNO("RecordID Value");
        FieldIds[TableFieldBuffer."Data Type"::Text] := DataTypeBuffer.FIELDNO("Text Value");
        FieldIds[TableFieldBuffer."Data Type"::Time] := DataTypeBuffer.FIELDNO("Time Value");
        FieldIdsSet := TRUE;
      END;

      lFieldId := FieldIds[pDataType];
      IF (lFieldId = 0) THEN
        DataTypeNotSupportedError(pDataType);

      EXIT(lFieldId);
    END;

    LOCAL PROCEDURE DataTypeNotSupportedError@1000000010(pDataType@1000000000 : Integer);
    VAR
      lTableFieldBuffer@1000000001 : Record 9062231;
      eDataTypeNotSupported@1000000002 : TextConst 'ENU=Data type "%1" is not supported in "%2".;ENG=Data type "%1" is not supported in "%2".';
      lObjectFieldToolkit@1000000003 : Codeunit 9062343;
    BEGIN
      //DOC NA2016.14 - Raising "Data Type Not Supported" error
      //  -> pDataType: The data type

      lTableFieldBuffer."Data Type" := pDataType;
      ERROR(eDataTypeNotSupported, FORMAT(lTableFieldBuffer."Data Type"), lObjectFieldToolkit.GetCodeunitName(CODEUNIT::"Filter Toolkit"));
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 25/01/2016 - Created
      //DOC NA2016.14 JH 11/03/2016 - Integer buffering added
    }
    END.
  }
}

