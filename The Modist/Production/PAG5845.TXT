OBJECT Page 5845 Inventory - G/L Reconciliation
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Inventory - G/L Reconciliation;
               ENG=Inventory - G/L Reconciliation];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr='';
    PageType=Card;
    OnInit=BEGIN
             ShowEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 GLSetup.GET;
                 TestWarning;
                 InvtReportHeader.SETFILTER("Item Filter",ItemFilter);
                 InvtReportHeader.SETFILTER("Location Filter",LocationFilter);
                 InvtReportHeader.SETFILTER("Posting Date Filter",DateFilter);
                 InvtReportHeader."Show Warning" := ShowWarning;

                 IF (LineDimCode = '') AND (ColumnDimCode = '') THEN BEGIN
                   LineDimCode := Text004;
                   ColumnDimCode := Text005;
                 END;
                 InvtReportHeader."Line Option" := DimCodeToOption(LineDimCode);
                 InvtReportHeader."Column Option" := DimCodeToOption(ColumnDimCode);

                 PeriodInitialized := DateFilter <> '';
               END;

    OnFindRecord=BEGIN
                   WITH InvtReportHeader DO BEGIN
                     IF "Line Option" = "Line Option"::"Balance Sheet" THEN BEGIN
                       IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                         IF ShowWarning THEN
                           RowIntegerLine.SETRANGE(Number,1,7)
                         ELSE
                           RowIntegerLine.SETRANGE(Number,1,6)
                       END ELSE
                         RowIntegerLine.SETRANGE(Number,1,4)
                     END ELSE
                       IF "Line Option" = "Line Option"::"Income Statement" THEN
                         IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                           IF ShowWarning THEN
                             RowIntegerLine.SETRANGE(Number,1,18)
                           ELSE
                             RowIntegerLine.SETRANGE(Number,1,17)
                         END ELSE
                           RowIntegerLine.SETRANGE(Number,1,15);
                     EXIT(FindRec("Line Option",Rec,Which,TRUE));
                   END;
                 END;

    OnNextRecord=BEGIN
                   EXIT(NextRec(InvtReportHeader."Line Option",Rec,Steps,TRUE));
                 END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 19      ;1   ;Action    ;
                      CaptionML=[ENU=&Show Matrix;
                                 ENG=&Show Matrix];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MatrixForm@1157 : Page 9297;
                                 i@1001 : Integer;
                               BEGIN
                                 CLEAR(MatrixForm);
                                 CLEAR(MatrixRecords);
                                 CLEAR(MATRIX_CaptionSet);

                                 WITH InvtReportHeader DO BEGIN
                                   IF "Column Option" = "Line Option"::"Balance Sheet" THEN BEGIN
                                     IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                                       IF ShowWarning THEN
                                         ColIntegerLine.SETRANGE(Number,1,7)
                                       ELSE
                                         ColIntegerLine.SETRANGE(Number,1,6)
                                     END ELSE
                                       ColIntegerLine.SETRANGE(Number,1,4)
                                   END ELSE
                                     IF "Column Option" = "Line Option"::"Income Statement" THEN
                                       IF (ItemFilter = '') AND (LocationFilter = '') THEN BEGIN
                                         IF ShowWarning THEN
                                           ColIntegerLine.SETRANGE(Number,1,18)
                                         ELSE
                                           ColIntegerLine.SETRANGE(Number,1,17)
                                       END ELSE
                                         ColIntegerLine.SETRANGE(Number,1,15);
                                   i := 1;

                                   IF FindRec("Column Option",MatrixRecords[i],'-',FALSE) THEN BEGIN
                                     MATRIX_CaptionSet[i] := MatrixRecords[i].Name;
                                     i := i + 1;
                                     WHILE NextRec("Column Option",MatrixRecords[i],1,FALSE) <> 0 DO BEGIN
                                       MATRIX_CaptionSet[i] := MatrixRecords[i].Name;
                                       i := i + 1;
                                     END;
                                   END;
                                 END;
                                 IF ShowWarning THEN
                                   MATRIX_CurrentNoOfColumns := i
                                 ELSE
                                   MATRIX_CurrentNoOfColumns := i - 1;

                                 MatrixForm.Load(MATRIX_CaptionSet,MatrixRecords,MATRIX_CurrentNoOfColumns,ShowWarning,
                                   DateFilter,ItemFilter,LocationFilter);
                                 MatrixForm.RUNMODAL;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Date Filter;
                           ENG=Date Filter];
                SourceExpr=DateFilter;
                OnValidate=BEGIN
                             InvtReportHeader.SETFILTER("Posting Date Filter",DateFilter);
                             DateFilter := InvtReportHeader.GETFILTER("Posting Date Filter");
                             DateFilterOnAfterValidate;
                           END;
                            }

    { 25  ;2   ;Field     ;
                CaptionML=[ENU=Item Filter;
                           ENG=Item Filter];
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             TestWarning;
                             ItemFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           Item@1002 : Record 27;
                           ItemList@1003 : Page 31;
                         BEGIN
                           Item.SETRANGE(Type,Item.Type::Inventory);
                           ItemList.SETTABLEVIEW(Item);
                           ItemList.LOOKUPMODE := TRUE;
                           IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             ItemList.GETRECORD(Item);
                             Text := Item."No.";
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

    { 14  ;2   ;Field     ;
                CaptionML=[ENU=Location Filter;
                           ENG=Location Filter];
                SourceExpr=LocationFilter;
                OnValidate=BEGIN
                             TestWarning;
                             LocationFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           Location@1002 : Record 14;
                           Locations@1003 : Page 15;
                         BEGIN
                           Locations.SETTABLEVIEW(Location);
                           Locations.LOOKUPMODE := TRUE;
                           IF Locations.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Locations.GETRECORD(Location);
                             Text := Location.Code;
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

    { 4   ;2   ;Field     ;
                Name=Show;
                CaptionML=[ENU=Show Warning;
                           ENG=Show Warning];
                SourceExpr=ShowWarning;
                Editable=ShowEditable;
                OnValidate=BEGIN
                             ShowWarningOnAfterValidate;
                           END;
                            }

  }
  CODE
  {
    VAR
      MatrixRecords@1158 : ARRAY [32] OF Record 367;
      MATRIX_CaptionSet@1159 : ARRAY [32] OF Text[1024];
      MATRIX_CurrentNoOfColumns@1165 : Integer;
      GLSetup@1002 : Record 98;
      InvtReportHeader@1028 : Record 5845;
      InvtReportEntry@1001 : TEMPORARY Record 5846;
      RowIntegerLine@1005 : Record 2000000026;
      ColIntegerLine@1032 : Record 2000000026;
      LineDimCode@1031 : Text[20];
      ColumnDimCode@1020 : Text[20];
      DateFilter@1011 : Text[30];
      ItemFilter@1015 : Code[250];
      LocationFilter@1013 : Code[250];
      PeriodInitialized@1018 : Boolean;
      Text004@1029 : TextConst 'ENU=Income Statement;ENG=Income Statement';
      Text005@1030 : TextConst 'ENU=Balance Sheet;ENG=Balance Sheet';
      ShowWarning@1000 : Boolean;
      Text006@1004 : TextConst 'ENU=Expected Cost Setup;ENG=Expected Cost Setup';
      Text007@1009 : TextConst 'ENU=Post Cost to G/L;ENG=Post Cost to G/L';
      Text008@1014 : TextConst 'ENU=Compression;ENG=Compression';
      Text009@1016 : TextConst 'ENU=Posting Group;ENG=Posting Group';
      Text010@1021 : TextConst 'ENU=Direct Posting;ENG=Direct Posting';
      Text011@1023 : TextConst 'ENU=Posting Date;ENG=Posting/Tax Point Date';
      Text012@1027 : TextConst 'ENU=Closed Fiscal Year;ENG=Closed Fiscal Year';
      Text013@1034 : TextConst 'ENU=Similar Accounts;ENG=Similar Accounts';
      Text014@1035 : TextConst 'ENU=Deleted Accounts;ENG=Deleted Accounts';
      CostPostingNotSelectedTxt@1010 : TextConst 'ENU=Expected Cost Posting to G/L is not selected in the Inventory Setup window. Therefore, inventory interim G/L accounts are empty and this causes a difference between inventory and G/L totals.;ENG=Expected Cost Posting to G/L is not selected in the Inventory Setup window. Therefore, inventory interim G/L accounts are empty and this causes a difference between inventory and G/L totals.';
      CostAmountsNotPostedYetTxt@1006 : TextConst 'ENU=Some of the cost amounts in the inventory ledger have not yet been posted to the general ledger. You must run the Post Inventory Cost to G/L batch job to reconcile the ledgers.;ENG=Some of the cost amounts in the inventory ledger have not yet been posted to the general ledger. You must run the Post Inventory Cost to G/L batch job to reconcile the ledgers.';
      EntriesCompressedTxt@1024 : TextConst 'ENU=Some inventory or G/L entries have been date compressed.;ENG=Some inventory or G/L entries have been date compressed.';
      ReassigningAccountsTxt@1025 : TextConst 'ENU=You may have restructured your chart of accounts by reassigning inventory related accounts in the General or Inventory Posting Setup.;ENG=You may have restructured your chart of accounts by reassigning inventory related accounts in the General or Inventory Posting Setup.';
      PostedDirectlyToGLAccountTxt@1036 : TextConst 'ENU=Some inventory costs have been posted directly to a G/L account, bypassing the inventory subledger.;ENG=Some inventory costs have been posted directly to a G/L account, bypassing the inventory subledger.';
      Text021@1037 : TextConst 'ENU=There is a discrepancy between the posting date of the value entry and the associated G/L entry within the reporting period.;ENG=There is a discrepancy between the posting/tax point date of the value entry and the associated G/L entry within the reporting period.';
      PostedInClosedFiscalYearTxt@1038 : TextConst 'ENU=Some of the cost amounts are posted in a closed fiscal year. Therefore, the inventory-related totals are different from their related G/L accounts in the income statement.;ENG=Some of the cost amounts are posted in a closed fiscal year. Therefore, the inventory-related totals are different from their related G/L accounts in the income statement.';
      Text023@1039 : TextConst 'ENU=You have possibly defined one G/L account for different inventory transactions.;ENG=You have possibly defined one G/L account for different inventory transactions.';
      DeletingAccountsTxt@1040 : TextConst 'ENU=You may have restructured your chart of accounts by deleting one or more inventory related G/L accounts.;ENG=You may have restructured your chart of accounts by deleting one or more inventory related G/L accounts.';
      ShowEditable@19062405 : Boolean INDATASET;

    LOCAL PROCEDURE MATRIX_GenerateColumnCaptions@1172(Step@1000 : 'First,Previous,Same,Next');
    BEGIN
    END;

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    BEGIN
      CASE DimCode OF
        '':
          EXIT(-1);
        Text005:
          EXIT(0);
        Text004:
          EXIT(1);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE FindRec@59(DimOption@1000 : 'Balance Sheet,Income Statement';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[250];IsRow@1008 : Boolean) : Boolean;
    VAR
      Found@1007 : Boolean;
    BEGIN
      CASE DimOption OF
        DimOption::"Balance Sheet",
        DimOption::"Income Statement":
          IF IsRow THEN BEGIN
            IF EVALUATE(RowIntegerLine.Number,DimCodeBuf.Code) THEN;
            Found := RowIntegerLine.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(RowIntegerLine,DimCodeBuf,IsRow);
          END ELSE BEGIN
            IF EVALUATE(ColIntegerLine.Number,DimCodeBuf.Code) THEN;
            Found := ColIntegerLine.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(ColIntegerLine,DimCodeBuf,IsRow);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE NextRec@60(DimOption@1000 : 'Balance Sheet,Income Statement';VAR DimCodeBuf@1001 : Record 367;Steps@1002 : Integer;IsRow@1008 : Boolean) : Integer;
    VAR
      ResultSteps@1007 : Integer;
    BEGIN
      CASE DimOption OF
        DimOption::"Balance Sheet",
        DimOption::"Income Statement":
          IF IsRow THEN BEGIN
            IF EVALUATE(RowIntegerLine.Number,DimCodeBuf.Code) THEN;
            ResultSteps := RowIntegerLine.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(RowIntegerLine,DimCodeBuf,IsRow);
          END ELSE BEGIN
            IF EVALUATE(ColIntegerLine.Number,DimCodeBuf.Code) THEN;
            ResultSteps := ColIntegerLine.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(ColIntegerLine,DimCodeBuf,IsRow);
          END;
      END;
      EXIT(ResultSteps);
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimValue@1000 : Record 2000000026;VAR TheDimCodeBuf@1001 : Record 367;IsRow@1002 : Boolean);
    BEGIN
      WITH InvtReportEntry DO
        CASE TRUE OF
          ((InvtReportHeader."Line Option" = InvtReportHeader."Line Option"::"Balance Sheet") AND IsRow) OR
          ((InvtReportHeader."Column Option" = InvtReportHeader."Column Option"::"Balance Sheet") AND NOT IsRow):
            CASE TheDimValue.Number OF
              1:
                InsertRow('1',FIELDCAPTION(Inventory),0,FALSE,TheDimCodeBuf);
              2:
                InsertRow('2',FIELDCAPTION("Inventory (Interim)"),0,FALSE,TheDimCodeBuf);
              3:
                InsertRow('3',FIELDCAPTION("WIP Inventory"),0,FALSE,TheDimCodeBuf);
              4:
                InsertRow('4',FIELDCAPTION(Total),0,TRUE,TheDimCodeBuf);
              5:
                InsertRow('5',FIELDCAPTION("G/L Total"),0,TRUE,TheDimCodeBuf);
              6:
                InsertRow('6',FIELDCAPTION(Difference),0,TRUE,TheDimCodeBuf);
              7:
                InsertRow('7',FIELDCAPTION(Warning),0,TRUE,TheDimCodeBuf);
            END;
          ((InvtReportHeader."Line Option" = InvtReportHeader."Line Option"::"Income Statement") AND IsRow) OR
          ((InvtReportHeader."Column Option" = InvtReportHeader."Column Option"::"Income Statement") AND NOT IsRow):
            CASE TheDimValue.Number OF
              1:
                InsertRow('1',FIELDCAPTION("Inventory To WIP"),0,FALSE,TheDimCodeBuf);
              2:
                InsertRow('2',FIELDCAPTION("WIP To Interim"),0,FALSE,TheDimCodeBuf);
              3:
                InsertRow('3',FIELDCAPTION("COGS (Interim)"),0,FALSE,TheDimCodeBuf);
              4:
                InsertRow('4',FIELDCAPTION("Direct Cost Applied"),0,FALSE,TheDimCodeBuf);
              5:
                InsertRow('5',FIELDCAPTION("Overhead Applied"),0,FALSE,TheDimCodeBuf);
              6:
                InsertRow('6',FIELDCAPTION("Inventory Adjmt."),0,FALSE,TheDimCodeBuf);
              7:
                InsertRow('7',FIELDCAPTION("Invt. Accrual (Interim)"),0,FALSE,TheDimCodeBuf);
              8:
                InsertRow('8',FIELDCAPTION(COGS),0,FALSE,TheDimCodeBuf);
              9:
                InsertRow('9',FIELDCAPTION("Purchase Variance"),0,FALSE,TheDimCodeBuf);
              10:
                InsertRow('10',FIELDCAPTION("Material Variance"),0,FALSE,TheDimCodeBuf);
              11:
                InsertRow('11',FIELDCAPTION("Capacity Variance"),0,FALSE,TheDimCodeBuf);
              12:
                InsertRow('12',FIELDCAPTION("Subcontracted Variance"),0,FALSE,TheDimCodeBuf);
              13:
                InsertRow('13',FIELDCAPTION("Capacity Overhead Variance"),0,FALSE,TheDimCodeBuf);
              14:
                InsertRow('14',FIELDCAPTION("Mfg. Overhead Variance"),0,FALSE,TheDimCodeBuf);
              15:
                InsertRow('15',FIELDCAPTION(Total),0,TRUE,TheDimCodeBuf);
              16:
                InsertRow('16',FIELDCAPTION("G/L Total"),0,TRUE,TheDimCodeBuf);
              17:
                InsertRow('17',FIELDCAPTION(Difference),0,TRUE,TheDimCodeBuf);
              18:
                InsertRow('18',FIELDCAPTION(Warning),0,TRUE,TheDimCodeBuf);
            END;
        END
    END;

    LOCAL PROCEDURE InsertRow@1(Code1@1000 : Code[10];Name1@1001 : Text[80];Indentation1@1002 : Integer;Bold1@1003 : Boolean;VAR TheDimCodeBuf@1004 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := Code1;
        Name := COPYSTR(Name1,1,MAXSTRLEN(Name));
        Indentation := Indentation1;
        "Show in Bold" := Bold1;
      END;
    END;

    LOCAL PROCEDURE GetWarningText@5(TheField@1000 : Text[30];ShowType@1001 : 'ReturnAsText,ShowAsMessage') : Text[250];
    BEGIN
      WITH InvtReportEntry DO BEGIN
        IF "Expected Cost Posting Warning" THEN
          IF TheField IN [FIELDCAPTION("Inventory (Interim)"),
                          FIELDCAPTION("Invt. Accrual (Interim)"),
                          FIELDCAPTION("COGS (Interim)"),
                          FIELDCAPTION("Invt. Accrual (Interim)"),
                          FIELDCAPTION("WIP Inventory")]
          THEN BEGIN
            IF ShowType = ShowType::ReturnAsText THEN
              EXIT(Text006);
            EXIT(CostPostingNotSelectedTxt);
          END;
        IF "Cost is Posted to G/L Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text007);
          EXIT(CostAmountsNotPostedYetTxt);
        END;
        IF "Compression Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text008);
          EXIT(EntriesCompressedTxt);
        END;
        IF "Posting Group Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text009);
          EXIT(ReassigningAccountsTxt);
        END;
        IF "Direct Postings Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text010);
          EXIT(PostedDirectlyToGLAccountTxt);
        END;
        IF "Posting Date Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text011);
          EXIT(Text021);
        END;
        IF "Closing Period Overlap Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text012);
          EXIT(PostedInClosedFiscalYearTxt);
        END;
        IF "Similar Accounts Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text013);
          EXIT(Text023);
        END;
        IF "Deleted G/L Accounts Warning" THEN BEGIN
          IF ShowType = ShowType::ReturnAsText THEN
            EXIT(Text014);
          EXIT(DeletingAccountsTxt);
        END;
      END;
    END;

    LOCAL PROCEDURE GetCaption@3() : Text[250];
    VAR
      ObjTransl@1000 : Record 377;
      SourceTableName@1002 : Text[100];
      LocationTableName@1003 : Text[100];
    BEGIN
      SourceTableName := '';
      LocationTableName := '';
      IF ItemFilter <> '' THEN
        SourceTableName := ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,27);
      IF LocationFilter <> '' THEN
        LocationTableName := ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,14);

      EXIT(STRSUBSTNO('%1 %2 %3 %4',SourceTableName,ItemFilter,LocationTableName,LocationFilter));
    END;

    LOCAL PROCEDURE TestWarning@2();
    BEGIN
      ShowEditable := TRUE;
      IF ShowWarning THEN BEGIN
        IF (ItemFilter <> '') OR (LocationFilter <> '') THEN BEGIN
          ShowWarning := FALSE;
          ShowEditable := FALSE;
        END;
      END ELSE
        IF (ItemFilter <> '') OR (LocationFilter <> '') THEN BEGIN
          ShowWarning := FALSE;
          ShowEditable := FALSE;
        END;
    END;

    LOCAL PROCEDURE LocationFilterOnAfterValidate@19070361();
    BEGIN
      InvtReportHeader.SETFILTER("Location Filter",LocationFilter);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ItemFilterOnAfterValidate@19051257();
    BEGIN
      InvtReportHeader.SETFILTER("Item Filter",ItemFilter);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShowWarningOnAfterValidate@19052425();
    BEGIN
      InvtReportHeader."Show Warning" := ShowWarning;
      CurrPage.UPDATE;
    END;

    BEGIN
    END.
  }
}

