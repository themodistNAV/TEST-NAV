OBJECT Codeunit 9062239 Run with RecordRef
{
  OBJECT-PROPERTIES
  {
    Date=10/11/15;
    Time=[ 4:02:12 PM];
    Version List=NA2016.11;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      mTableManagement@1000000002 : Codeunit 9062585;
      mPosition@1000000001 : Text;

    PROCEDURE "--- Page ---"@1000000003();
    BEGIN
    END;

    PROCEDURE RunPage@1000000004(VAR pRecordRef@1000000000 : RecordRef;pPageId@1000000001 : Integer;pModal@1000000003 : Boolean) : Boolean;
    VAR
      lRecordRefVariant@1000000002 : Variant;
      lAction@1000000004 : Action;
    BEGIN
      //DOC NA2015.4 - Runnig a page for recordref
      //  <> pRecordRef: The record reference
      //  -> pPageId: Page ID
      //  -> pModal: Modal flag
      //  <- Result (LookupOK returned)

      lRecordRefVariant := pRecordRef;
      IF (pModal) THEN
        lAction := PAGE.RUNMODAL(pPageId, lRecordRefVariant)
      ELSE
        PAGE.RUN(pPageId, lRecordRefVariant);
      pRecordRef := lRecordRefVariant;
      mPosition := pRecordRef.GETPOSITION(FALSE);

      //DOC NA2016.11 >>
      //EXIT(lAction IN [ACTION::OK, ACTION::LookupOK, ACTION::Yes]);
      EXIT(lAction = ACTION::LookupOK);
      //DOC NA2016.11 <<
    END;

    PROCEDURE RunDefaultPage@1000000001(VAR pRecordRef@1000000000 : RecordRef;pModal@1000000001 : Boolean) : Boolean;
    BEGIN
      //DOC NA2015.4 - Runnig a default page for recordref
      //  <> pRecordRef: The record reference
      //  -> pModal: Modal flag
      //  <- Result

      EXIT(RunPage(pRecordRef, 0, pModal));
    END;

    PROCEDURE RunPageForTableView@1000000002(pTableId@1000000002 : Integer;pTableView@1000000001 : Text;pPageId@1000000003 : Integer;pModal@1000000000 : Boolean) : Boolean;
    VAR
      lRecordRef@1000000004 : RecordRef;
      lResult@1000000005 : Boolean;
    BEGIN
      //DOC NA2015.4 - Running a page for table / view
      //  -> pTableId: Table ID
      //  -> pTableView: Table view
      //  -> pPageId: Page ID
      //  -> pModal: Modal flag
      //  <- Result

      lRecordRef.OPEN(pTableId);
      IF (pTableView <> '') THEN
        lRecordRef.SETVIEW(pTableView);
      lResult := RunPage(lRecordRef, pPageId, pModal);
      mPosition := lRecordRef.GETPOSITION(FALSE);
      lRecordRef.CLOSE();

      EXIT(lResult);
    END;

    PROCEDURE RunDefaultPageForTableView@1000000000(pTableId@1000000000 : Integer;pTableView@1000000001 : Text;pModal@1000000002 : Boolean) : Boolean;
    BEGIN
      //DOC NA2015.4 - Running a default page for table / view
      //  -> pTableId: Table ID
      //  -> pTableView: Table view
      //  -> pModal: Modal flag
      //  <- Result

      EXIT(RunPageForTableView(pTableId, pTableView, 0, pModal));
    END;

    PROCEDURE RunCardPage@1000000005(VAR pRecordRef@1000000000 : RecordRef;pModal@1000000003 : Boolean) : Boolean;
    VAR
      lRecordRefVariant@1000000002 : Variant;
      lPageId@1000000001 : Integer;
    BEGIN
      //DOC NA2015.4 - Running card page
      //  <> pRecordRef: The record reference
      //  -> pModal: Modal flag
      //  <- Result (LookupOK returned)

      lPageId := mTableManagement.GetCardPageId(pRecordRef.NUMBER, pRecordRef.GETPOSITION);
      IF (lPageId = 0) THEN
        lPageId := mTableManagement.GetListPageId(pRecordRef.NUMBER, pRecordRef.GETPOSITION);

      EXIT(RunPage(pRecordRef, lPageId, pModal));
    END;

    PROCEDURE RunListPage@1000000013(VAR pRecordRef@1000000000 : RecordRef;pModal@1000000003 : Boolean) : Boolean;
    BEGIN
      //DOC NA2015.4 - Running list page
      //  <> pRecordRef: The record reference
      //  -> pModal: Modal flag
      //  <- Result (LookupOK returned)

      EXIT(RunPage(pRecordRef,0,pModal));
    END;

    PROCEDURE GetPosition@1000000017() : Text;
    BEGIN
      //DOC NA2015.3 - Returning position from various "RunPage" functions
      //  <- The position

      EXIT(mPosition);
    END;

    PROCEDURE "--- Report ---"@1000000011();
    BEGIN
    END;

    PROCEDURE RunReport@1000000010(VAR pRecordRef@1000000000 : RecordRef;pReportId@1000000001 : Integer;pModal@1000000003 : Boolean;pUseRequestWindow@1000000004 : Boolean;pUseSystemPrinter@1000000005 : Boolean);
    VAR
      lRecordRefVariant@1000000002 : Variant;
    BEGIN
      //DOC NA2015.1 - Runnig a report for recordref
      //  <> pRecordRef: The record reference
      //  -> pReportId: Report ID
      //  -> pModal: Modal flag
      //  -> pUseRequestWindow: Use request window flag
      //  -> pUseSystemPrinter: Use system printer flag

      lRecordRefVariant := pRecordRef;
      IF (pModal) THEN
        REPORT.RUNMODAL(pReportId, pUseRequestWindow, pUseSystemPrinter, lRecordRefVariant)
      ELSE
        REPORT.RUN(pReportId, pUseRequestWindow, pUseSystemPrinter, lRecordRefVariant);
    END;

    PROCEDURE RunReportForTableView@1000000008(pTableId@1000000002 : Integer;pTableView@1000000001 : Text;pReportId@1000000003 : Integer;pModal@1000000000 : Boolean;pUseRequestWindow@1000000006 : Boolean;pUseSystemPrinter@1000000005 : Boolean);
    VAR
      lRecordRef@1000000004 : RecordRef;
    BEGIN
      //DOC NA2015.1 - Running a report for table / view
      //  -> pTableId: Table ID
      //  -> pTableView: Table view
      //  -> pReportId: Report ID
      //  -> pModal: Modal flag
      //  -> pUseRequestWindow: Use request window flag
      //  -> pUseSystemPrinter: Use system printer flag

      lRecordRef.OPEN(pTableId);
      IF (pTableView <> '') THEN
        lRecordRef.SETVIEW(pTableView);
      RunReport(lRecordRef, pReportId, pModal, pUseRequestWindow, pUseSystemPrinter);
      lRecordRef.CLOSE();
    END;

    PROCEDURE "--- Codeunit ---"@1000000016();
    BEGIN
    END;

    PROCEDURE RunCodeunit@1000000015(VAR pRecordRef@1000000000 : RecordRef;pCodeunitId@1000000001 : Integer);
    VAR
      lRecordRefVariant@1000000002 : Variant;
    BEGIN
      //DOC NA2015.1 - Runnig a codeunit for recordref
      //  <> pRecordRef: The record reference
      //  -> pCodeunitId: Codeunit ID

      lRecordRefVariant := pRecordRef;
      CODEUNIT.RUN(pCodeunitId, lRecordRefVariant);
    END;

    PROCEDURE RunCodeunitForTableView@1000000014(pTableId@1000000002 : Integer;pTableView@1000000001 : Text;pCodeunitId@1000000003 : Integer);
    VAR
      lRecordRef@1000000004 : RecordRef;
    BEGIN
      //DOC NA2015.1 - Running a codeunit for table / view
      //  -> pTableId: Table ID
      //  -> pTableView: Table view
      //  -> pCodeunitId: Codeunit ID

      lRecordRef.OPEN(pTableId);
      IF (pTableView <> '') THEN
        lRecordRef.SETVIEW(pTableView);
      RunCodeunit(lRecordRef, pCodeunitId);
      lRecordRef.CLOSE();
    END;

    PROCEDURE "--- XMLport ---"@1000000012();
    BEGIN
    END;

    PROCEDURE RunXmlPort@1000000009(VAR pRecordRef@1000000000 : RecordRef;pXmlPortId@1000000001 : Integer;pUseRequestWindow@1000000004 : Boolean;pImport@1000000005 : Boolean);
    VAR
      lRecordRefVariant@1000000002 : Variant;
    BEGIN
      //DOC NA2015.1 - Runnig an XMLport for recordref
      //  <> pRecordRef: The record reference
      //  -> pXmlPortId: XMLport ID
      //  -> pUseRequestWindow: Use request window flag
      //  -> pImport: Import flag

      lRecordRefVariant := pRecordRef;
      XMLPORT.RUN(pXmlPortId, pUseRequestWindow, pImport, lRecordRefVariant);
    END;

    PROCEDURE RunXmlPortForTableView@1000000007(pTableId@1000000002 : Integer;pTableView@1000000001 : Text;pXmlPortId@1000000003 : Integer;pUseRequestWindow@1000000006 : Boolean;pImport@1000000000 : Boolean);
    VAR
      lRecordRef@1000000004 : RecordRef;
    BEGIN
      //DOC NA2015.1 - Running an XMLport for table / view
      //  -> pTableId: Table ID
      //  -> pTableView: Table view
      //  -> pXmlPortId: XMLport ID
      //  -> pUseRequestWindow: Use request window flag
      //  -> pImport: Import flag

      lRecordRef.OPEN(pTableId);
      IF (pTableView <> '') THEN
        lRecordRef.SETVIEW(pTableView);
      RunXmlPort(lRecordRef, pXmlPortId, pUseRequestWindow, pImport);
      lRecordRef.CLOSE();
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 11/08/2013 - Created
      //DOC NA2015.1  PC 08/04/2014 - Added "RunCardPage" and "RunListPage" functions
      //DOC NA2015.3  JH 15/08/2014 - Returning result from page
      //DOC NA2015.4  JH 29/12/2014 - Results from page running functions
      //DOC NA2016.10 JH 26/08/2015 - Upgraded to 2016
      //DOC NA2016.11 AZ 10/11/2015 - RunPage in modal mode should return TRUE for ACTION::LookupOK only
    }
    END.
  }
}

