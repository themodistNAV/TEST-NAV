OBJECT Table 10560 Accounting Period GB
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVGB8.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               InvtSetup@1040000 : Record 313;
             BEGIN
               CheckExist;
               IF "Period Type" = "Period Type"::Year THEN BEGIN
                 InvtSetup.GET;
                 "Average Cost Calc. Type" := InvtSetup."Average Cost Calc. Type";
                 "Average Cost Period" := InvtSetup."Average Cost Period";
               END;
               AccountingPeriod2 := Rec;
               IF AccountingPeriod2.FIND('>') THEN
                 AccountingPeriod2.TESTFIELD(Closed,FALSE);
             END;

    OnModify=BEGIN
               TESTFIELD(Closed,FALSE);
               UpdateAvgItems(2);
             END;

    OnDelete=BEGIN
               TESTFIELD(Closed,FALSE);
               UpdateAvgItems(3);
             END;

    OnRename=BEGIN
               TESTFIELD(Closed,FALSE);
               CheckExist;
               AccountingPeriod2 := Rec;
               IF AccountingPeriod2.FIND('>') THEN
                 AccountingPeriod2.TESTFIELD(Closed,FALSE);
               UpdateAvgItems(4);
             END;

    CaptionML=[ENU=Accounting Period GB;
               ENG=Accounting Period GB];
    LookupPageID=Page100;
  }
  FIELDS
  {
    { 1   ;   ;Period Type         ;Option        ;CaptionML=[ENU=Period Type;
                                                              ENG=Period Type];
                                                   OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year;
                                                                    ENG=Day,Week,Month,Quarter,Year];
                                                   OptionString=Day,Week,Month,Quarter,Year }
    { 2   ;   ;Period Start        ;Date          ;CaptionML=[ENU=Period Start;
                                                              ENG=Period Start];
                                                   NotBlank=Yes }
    { 3   ;   ;Period End          ;Date          ;OnValidate=BEGIN
                                                                "Period End" := CLOSINGDATE("Period End");
                                                              END;

                                                   CaptionML=[ENU=Period End;
                                                              ENG=Period End];
                                                   ClosingDates=Yes }
    { 4   ;   ;Period No.          ;Integer       ;CaptionML=[ENU=Period No.;
                                                              ENG=Period No.] }
    { 5   ;   ;Period Name         ;Text30        ;CaptionML=[ENU=Period Name;
                                                              ENG=Period Name] }
    { 5804;   ;Average Cost Calc. Type;Option     ;CaptionML=[ENU=Average Cost Calc. Type;
                                                              ENG=Average Cost Calc. Type];
                                                   OptionCaptionML=[ENU=" ,Item,Item & Location & Variant";
                                                                    ENG=" ,Item,Item & Location & Variant"];
                                                   OptionString=[ ,Item,Item & Location & Variant];
                                                   Editable=No }
    { 5805;   ;Average Cost Period ;Option        ;CaptionML=[ENU=Average Cost Period;
                                                              ENG=Average Cost Period];
                                                   OptionCaptionML=[ENU=" ,Day,Week,Month,Quarter,Year,Accounting Period";
                                                                    ENG=" ,Day,Week,Month,Quarter,Year,Accounting Period"];
                                                   OptionString=[ ,Day,Week,Month,Quarter,Year,Accounting Period];
                                                   Editable=No }
    { 10500;  ;Closed              ;Boolean       ;CaptionML=[ENU=Closed;
                                                              ENG=Closed];
                                                   Editable=No }
    { 10501;  ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
  }
  KEYS
  {
    {    ;Period Type,Period Start                ;Clustered=Yes }
    {    ;Period Start,Line No.                    }
    {    ;Closed                                   }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text1041000@1041000 : TextConst 'ENU=You cannot insert period between closed periods.;ENG=You cannot insert period between closed periods.';
      Text1041001@1041001 : TextConst 'ENU="%1 %2 with %3=%4 conflicts with existing %5 %2 %6..%7.";ENG="%1 %2 with %3=%4 conflicts with existing %5 %2 %6..%7."';
      AccountingPeriod2@1001 : Record 10560;
      Calendar@1040000 : Record 2000000007;

    PROCEDURE UpdateAvgItems@1(UpdateType@1005 : Option);
    VAR
      ChangeAvgCostSetting@1002 : Codeunit 5810;
    BEGIN
      ChangeAvgCostSetting.UpdateAvgCostFromAccPeriodChg(Rec,xRec,UpdateType);
    END;

    PROCEDURE UpdateName@1040001();
    BEGIN
      IF
         ("Period Type" <> Calendar."Period Type") OR
         ("Period Start" <> Calendar."Period Start")
      THEN
        IF Calendar.GET("Period Type","Period Start") THEN
          IF
             ("Period Type" = Calendar."Period Type") AND
             ("Period Start" = Calendar."Period Start") AND
             (NORMALDATE("Period End") = NORMALDATE(Calendar."Period End"))
          THEN BEGIN
            "Period No." := Calendar."Period No.";
            "Period Name" := Calendar."Period Name";
          END;
    END;

    PROCEDURE CheckExist@1040000();
    BEGIN
      AccountingPeriod2 := Rec;
      AccountingPeriod2.SETRANGE("Period Type","Period Type");
      IF AccountingPeriod2.FIND('>') THEN BEGIN
        Closed := AccountingPeriod2.Closed;
        IF
           ("Period Start" >= AccountingPeriod2."Period Start") AND
           ("Period Start" <= AccountingPeriod2."Period End")
        THEN
          ERROR(Text1041001,
            FIELDCAPTION("Period Type"),FORMAT("Period Type"),
            FIELDCAPTION("Period Start"),FORMAT("Period Start"),TABLECAPTION,
            FORMAT(AccountingPeriod2."Period Start"),FORMAT(AccountingPeriod2."Period End"));
      END;
      IF AccountingPeriod2.FIND('<') THEN BEGIN
        IF
           ("Period Start" >= AccountingPeriod2."Period Start") AND
           ("Period Start" <= AccountingPeriod2."Period End")
        THEN
          ERROR(Text1041001,
            FIELDCAPTION("Period Type"),FORMAT("Period Type"),
            FIELDCAPTION("Period Start"),FORMAT("Period Start"),TABLECAPTION,
            FORMAT(AccountingPeriod2."Period Start"),FORMAT(AccountingPeriod2."Period End"));
        IF Closed AND AccountingPeriod2.Closed THEN
          ERROR(Text1041000);
      END;
    END;

    PROCEDURE GetAccountingPeriodDate@1040002(VAR StartDate@1040000 : Date;VAR EndDate@1040001 : Date;ReferenceDate@1040002 : Date);
    BEGIN
      AccountingPeriod2.RESET;
      AccountingPeriod2.SETRANGE("Period Start",0D,ReferenceDate);
      IF AccountingPeriod2.FINDLAST THEN BEGIN
        StartDate := AccountingPeriod2."Period Start";
        EndDate := AccountingPeriod2."Period End";
      END;
    END;

    BEGIN
    END.
  }
}

