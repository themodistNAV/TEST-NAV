OBJECT Page 5339 Integration Synch. Error List
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Integration Synchronization Errors;
               ENG=Integration Synchronisation Errors];
    InsertAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table5339;
    SourceTableView=SORTING(Date/Time,Integration Synch. Job ID)
                    ORDER(Descending);
    PageType=List;
    OnAfterGetRecord=VAR
                       ReferenceRecordRef@1000 : RecordRef;
                     BEGIN
                       IF ReferenceRecordRef.GET("Source Record ID") THEN
                         OpenSourcePageTxt := OpenPageTok
                       ELSE
                         OpenSourcePageTxt := '';

                       IF ReferenceRecordRef.GET("Destination Record ID") THEN
                         OpenDestinationPageTxt := OpenPageTok
                       ELSE
                         OpenDestinationPageTxt := '';
                     END;

    ActionList=ACTIONS
    {
      { 6       ;    ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 11      ;1   ;Action    ;
                      Name=Delete7days;
                      CaptionML=[ENU=Delete Entries Older Than 7 Days;
                                 ENG=Delete Entries Older Than 7 Days];
                      Promoted=Yes;
                      Image=ClearLog;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DeleteEntries(7);
                               END;
                                }
      { 10      ;1   ;Action    ;
                      Name=Delete0days;
                      CaptionML=[ENU=Delete All Entries;
                                 ENG=Delete All Entries];
                      Promoted=Yes;
                      Image=Delete;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DeleteEntries(0);
                               END;
                                }
      { 17      ;1   ;ActionGroup;
                      Name=ActionGroupCRM;
                      CaptionML=[ENU=Dynamics CRM;
                                 ENG=Dynamics CRM] }
      { 15      ;2   ;Action    ;
                      Name=CRMSynchronizeNow;
                      CaptionML=[ENU=Synchronize Now;
                                 ENG=Synchronise Now];
                      ToolTipML=[ENU=Send or get updated data to or from Microsoft Dynamics CRM.;
                                 ENG=Send or get updated data to or from Microsoft Dynamics CRM.];
                      Image=Refresh;
                      OnAction=VAR
                                 CRMIntegrationManagement@1001 : Codeunit 5330;
                                 LocalRecordID@1000 : RecordID;
                               BEGIN
                                 GetRecordID(LocalRecordID);
                                 CRMIntegrationManagement.UpdateOneNow(LocalRecordID);
                               END;
                                }
      { 14      ;2   ;ActionGroup;
                      Name=Coupling;
                      CaptionML=[@@@=Coupling is a noun;
                                 ENU=Coupling;
                                 ENG=Coupling];
                      ToolTipML=[ENU=Create, change, or delete a coupling between the Microsoft Dynamics NAV record and a Microsoft Dynamics CRM record.;
                                 ENG=Create, change, or delete a coupling between the Microsoft Dynamics NAV record and a Microsoft Dynamics CRM record.];
                      Image=LinkAccount }
      { 13      ;3   ;Action    ;
                      Name=ManageCRMCoupling;
                      CaptionML=[ENU=Set Up Coupling;
                                 ENG=Set Up Coupling];
                      ToolTipML=[ENU=Create or modify the coupling to a Microsoft Dynamics CRM entity.;
                                 ENG=Create or modify the coupling to a Microsoft Dynamics CRM entity.];
                      Image=LinkAccount;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                                 LocalRecordID@1001 : RecordID;
                               BEGIN
                                 GetRecordID(LocalRecordID);
                                 CRMIntegrationManagement.CreateOrUpdateCoupling(LocalRecordID);
                               END;
                                }
      { 12      ;3   ;Action    ;
                      Name=DeleteCRMCoupling;
                      CaptionML=[ENU=Delete Coupling;
                                 ENG=Delete Coupling];
                      ToolTipML=[ENU=Delete the coupling to a Microsoft Dynamics CRM entity.;
                                 ENG=Delete the coupling to a Microsoft Dynamics CRM entity.];
                      Image=UnLinkAccount;
                      OnAction=VAR
                                 CRMCouplingManagement@1000 : Codeunit 5331;
                                 LocalRecordID@1001 : RecordID;
                               BEGIN
                                 GetRecordID(LocalRecordID);
                                 CRMCouplingManagement.RemoveCoupling(LocalRecordID);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 5   ;2   ;Field     ;
                SourceExpr="No." }

    { 4   ;2   ;Field     ;
                SourceExpr="Date/Time" }

    { 3   ;2   ;Field     ;
                Width=100;
                SourceExpr=Message }

    { 9   ;2   ;Field     ;
                SourceExpr="Exception Detail" }

    { 16  ;2   ;Field     ;
                Name=Source;
                CaptionML=[ENU=Source;
                           ENG=Source];
                SourceExpr=OpenSourcePageTxt;
                OnDrillDown=VAR
                              OpenRecordID@1000 : RecordID;
                            BEGIN
                              OpenRecordID := "Source Record ID";
                              ShowPage(OpenRecordID);
                            END;
                             }

    { 18  ;2   ;Field     ;
                Name=Destination;
                CaptionML=[ENU=Destination;
                           ENG=Destination];
                SourceExpr=OpenDestinationPageTxt;
                OnDrillDown=VAR
                              OpenRecordID@1000 : RecordID;
                            BEGIN
                              OpenRecordID := "Destination Record ID";
                              ShowPage(OpenRecordID);
                            END;
                             }

  }
  CODE
  {
    VAR
      UnableToFindPageForRecordErr@1002 : TextConst '@@@=%1 ID of the record;ENU=Unable to find page for record %1.;ENG=Unable to find page for record %1.';
      InvalidOrMissingSourceErr@1003 : TextConst 'ENU=The source record was not found.;ENG=The source record was not found.';
      InvalidOrMissingDestinationErr@1004 : TextConst 'ENU=The destination record was not found.;ENG=The destination record was not found.';
      OpenSourcePageTxt@1005 : Text;
      OpenDestinationPageTxt@1006 : Text;
      OpenPageTok@1007 : TextConst 'ENU=View;ENG=View';

    LOCAL PROCEDURE ShowPage@5(RecordID@1000 : RecordID);
    VAR
      TableMetadata@1003 : Record 2000000136;
      PageManagement@1002 : Codeunit 700;
      CRMIntegrationManagement@1001 : Codeunit 5330;
      CrmId@1007 : GUID;
      CrmIdFormattet@1008 : Text;
    BEGIN
      IF RecordID.TABLENO = 0 THEN
        EXIT;
      IF NOT TableMetadata.GET(RecordID.TABLENO) THEN
        EXIT;

      IF NOT TableMetadata.DataIsExternal THEN BEGIN
        PageManagement.PageRun(RecordID);
        EXIT;
      END;

      IF TableMetadata.TableType = TableMetadata.TableType::CRM THEN BEGIN
        CrmIdFormattet := FORMAT(RecordID);
        CrmIdFormattet := COPYSTR(CrmIdFormattet,STRPOS(CrmIdFormattet,':') + 1);
        EVALUATE(CrmId,CrmIdFormattet);
        HYPERLINK(CRMIntegrationManagement.GetCRMEntityUrlFromCRMID(RecordID.TABLENO,CrmId));
        EXIT;
      END;

      ERROR(STRSUBSTNO(UnableToFindPageForRecordErr,FORMAT(RecordID,0,1)));
    END;

    LOCAL PROCEDURE GetRecordID@8(VAR LocalRecordID@1001 : RecordID);
    VAR
      TableMetadata@1000 : Record 2000000136;
    BEGIN
      LocalRecordID := "Source Record ID";
      IF LocalRecordID.TABLENO = 0 THEN
        ERROR(InvalidOrMissingSourceErr);

      IF NOT TableMetadata.GET(LocalRecordID.TABLENO) THEN
        ERROR(InvalidOrMissingSourceErr);

      IF TableMetadata.TableType <> TableMetadata.TableType::CRM THEN
        EXIT;

      LocalRecordID := "Destination Record ID";
      IF LocalRecordID.TABLENO = 0 THEN
        ERROR(InvalidOrMissingDestinationErr);
    END;

    BEGIN
    END.
  }
}

