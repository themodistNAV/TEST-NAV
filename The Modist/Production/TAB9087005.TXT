OBJECT Table 9087005 Item Hierarchy
{
  OBJECT-PROPERTIES
  {
    Date=17/04/17;
    Time=[ 3:50:18 PM];
    Modified=Yes;
    Version List=NS2016.16,IN37785;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD(Type);
               IF (Rec.Type >= Rec.Type::Division) THEN
                 Rec.TESTFIELD("Division Code");
               IF (Rec.Type >= Rec.Type::Department) THEN
                 Rec.TESTFIELD("Department Code");
               IF (Rec.Type >= Rec.Type::Group) THEN
                 Rec.TESTFIELD("Group Code");
               IF (Rec.Type >= Rec.Type::Category) THEN
                 Rec.TESTFIELD("Category Code");
               IF (Rec.Type >= Rec.Type::"Sub-Category") THEN
                 Rec.TESTFIELD("Sub-Category Code");
               UpdateRecord();
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               ItemHierarchy.RESET();
               CASE (Rec.Type) OF
                 Rec.Type::Division:
                   BEGIN
                     CheckOnDeletion('Division Code');
                     ItemHierarchy.SETRANGE(Type, ItemHierarchy.Type::Department);
                     ItemHierarchy.SETRANGE("Division Code", Rec."Division Code");
                     ItemHierarchy.DELETEALL(TRUE);
                   END;
                 Rec.Type::Department:
                   BEGIN
                     CheckOnDeletion('Department Code');
                     ItemHierarchy.SETRANGE(Type, ItemHierarchy.Type::Group);
                     ItemHierarchy.SETRANGE("Division Code", Rec."Division Code");
                     ItemHierarchy.SETRANGE("Department Code", Rec."Department Code");
                     ItemHierarchy.DELETEALL(TRUE);
                   END;
                 Rec.Type::Group:
                   BEGIN
                     CheckOnDeletion('Group Code');
                     ItemHierarchy.SETRANGE(Type, ItemHierarchy.Type::Category);
                     ItemHierarchy.SETRANGE("Division Code", Rec."Division Code");
                     ItemHierarchy.SETRANGE("Department Code", Rec."Department Code");
                     ItemHierarchy.SETRANGE("Group Code", Rec."Group Code");
                     ItemHierarchy.DELETEALL(TRUE);
                   END;
                 Rec.Type::Category:
                   BEGIN
                     CheckOnDeletion('Category Code');
                     ItemHierarchy.SETRANGE(Type, ItemHierarchy.Type::"Sub-Category");
                     ItemHierarchy.SETRANGE("Division Code", Rec."Division Code");
                     ItemHierarchy.SETRANGE("Department Code", Rec."Department Code");
                     ItemHierarchy.SETRANGE("Group Code", Rec."Group Code");
                     ItemHierarchy.SETRANGE("Category Code", Rec."Category Code");
                     ItemHierarchy.DELETEALL(TRUE);
                   END;
                 Rec.Type::"Sub-Category":
                   CheckOnDeletion('Sub-Category Code');
               END;
             END;

    OnRename=VAR
               eRenameBlocked@1000000000 : TextConst 'ENU="You can''t rename the category; you have to delete it and key a new one.";ENG="You can''t rename the category; you have to delete it and key a new one."';
             BEGIN
               ERROR(eRenameBlocked);
             END;

    CaptionML=[ENU=Item Hierarchy;
               ENG=Item Hierarchy];
    LookupPageID=Page9087010;
    DrillDownPageID=Page9087010;
  }
  FIELDS
  {
    { 1   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                Rec.VALIDATE(Indentation, Rec.Type - 1);
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=" ,Division,Department,Group,Category,Sub-Category";
                                                                    ENG=" ,Division,Department,Group,Category,Sub-Category"];
                                                   OptionString=[ ,Division,Department,Group,Category,Sub-Category] }
    { 2   ;   ;Division Code       ;Code20        ;OnValidate=BEGIN
                                                                DivisionCodeValidation := TRUE;
                                                                IF (Rec."Division Code" <> '') THEN
                                                                  IF (Rec.Type > Rec.Type::Division) THEN
                                                                    ItemHierarchy.GET(ItemHierarchy.Type::Division, Rec."Division Code");
                                                                IF (( NOT (CodeValidation)) AND (Rec.Type = Rec.Type::Division)) THEN
                                                                  Rec.VALIDATE(Code, Rec."Division Code");
                                                                DivisionCodeValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Division Code;
                                                              ENG=Division Code] }
    { 3   ;   ;Department Code     ;Code20        ;OnValidate=BEGIN
                                                                DepartmentCodeValidation := TRUE;
                                                                IF (Rec."Department Code" <> '') THEN
                                                                  IF (Rec.Type > Rec.Type::Department) THEN
                                                                    ItemHierarchy.GET(ItemHierarchy.Type::Department, Rec."Division Code", Rec."Department Code")
                                                                  ELSE IF (Rec.Type < Rec.Type::Department) THEN
                                                                    ERROR(tYouCantSpecify, Rec.FIELDCAPTION("Department Code"), LOWERCASE(FORMAT(Rec.Type)));
                                                                IF (( NOT (CodeValidation)) AND (Rec.Type = Rec.Type::Department)) THEN
                                                                  Rec.VALIDATE(Code, Rec."Department Code");
                                                                DepartmentCodeValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Department Code;
                                                              ENG=Department Code] }
    { 4   ;   ;Group Code          ;Code20        ;OnValidate=BEGIN
                                                                GroupCodeValidation := TRUE;
                                                                IF (Rec."Group Code" <> '') THEN
                                                                  IF (Rec.Type > Rec.Type::Group) THEN
                                                                    ItemHierarchy.GET(ItemHierarchy.Type::Group, Rec."Division Code", Rec."Department Code", Rec."Group Code")
                                                                  ELSE IF (Rec.Type < Rec.Type::Group) THEN
                                                                    ERROR(tYouCantSpecify, Rec.FIELDCAPTION("Group Code"), LOWERCASE(FORMAT(Rec.Type)));
                                                                IF (( NOT (CodeValidation)) AND (Rec.Type = Rec.Type::Group)) THEN
                                                                  Rec.Code := Rec."Group Code";
                                                                GroupCodeValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Group Code;
                                                              ENG=Group Code] }
    { 5   ;   ;Category Code       ;Code20        ;OnValidate=BEGIN
                                                                CategoryCodeValidation := TRUE;
                                                                IF (Rec."Category Code" <> '') THEN
                                                                  IF (Rec.Type > Rec.Type::Category) THEN
                                                                    ItemHierarchy.GET(ItemHierarchy.Type::Category, Rec."Division Code", Rec."Department Code", Rec."Group Code", Rec."Category Code")
                                                                  ELSE IF (Rec.Type < Rec.Type::Category) THEN
                                                                    ERROR(tYouCantSpecify, Rec.FIELDCAPTION("Category Code"), LOWERCASE(FORMAT(Rec.Type)));
                                                                IF (( NOT (CodeValidation)) AND (Rec.Type = Rec.Type::Category)) THEN
                                                                  Rec.Code := Rec."Category Code";
                                                                CategoryCodeValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Category Code;
                                                              ENG=Category Code] }
    { 6   ;   ;Sub-Category Code   ;Code20        ;OnValidate=BEGIN
                                                                 SubCategoryCodeValidation := TRUE;
                                                                 IF (Rec."Sub-Category Code" <> '') THEN
                                                                   IF (Rec.Type < Rec.Type::"Sub-Category") THEN
                                                                     ERROR(tYouCantSpecify, Rec.FIELDCAPTION("Sub-Category Code"), LOWERCASE(FORMAT(Rec.Type)));
                                                                 IF (( NOT (CodeValidation)) AND (Rec.Type = Rec.Type::"Sub-Category")) THEN
                                                                   Rec.Code := Rec."Sub-Category Code";
                                                                 SubCategoryCodeValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Sub-Category Code;
                                                              ENG=Sub-Category Code] }
    { 10  ;   ;Code                ;Code20        ;OnValidate=BEGIN
                                                                CodeValidation := TRUE;
                                                                IF (Rec.Code <> xRec.Code) THEN
                                                                BEGIN
                                                                  CASE (Rec.Type) OF
                                                                    Rec.Type::Division:
                                                                      IF ( NOT (DivisionCodeValidation)) THEN
                                                                        IF (ItemHierarchy.GET(Rec.Type, Rec."Division Code")) THEN
                                                                          Rec.RENAME(Rec.Type, Rec.Code, '', '', '', '')
                                                                        ELSE
                                                                          Rec.VALIDATE("Division Code", Rec.Code);
                                                                    Rec.Type::Department:
                                                                      IF ( NOT (DepartmentCodeValidation)) THEN
                                                                        IF (ItemHierarchy.GET(Rec.Type, Rec."Division Code", Rec."Department Code")) THEN
                                                                          Rec.RENAME(Rec.Type, Rec."Division Code", Rec.Code, '', '', '')
                                                                        ELSE
                                                                          Rec.VALIDATE("Department Code", Rec.Code);
                                                                    Rec.Type::Group:
                                                                      IF ( NOT (GroupCodeValidation)) THEN
                                                                        IF (ItemHierarchy.GET(Rec.Type, Rec."Division Code", Rec."Department Code", Rec."Group Code")) THEN
                                                                          Rec.RENAME(Rec.Type, Rec."Division Code", Rec."Department Code", Rec.Code, '', '')
                                                                        ELSE
                                                                          Rec.VALIDATE("Group Code", Rec.Code);
                                                                    Rec.Type::Category:
                                                                      IF ( NOT (CategoryCodeValidation)) THEN
                                                                        IF (ItemHierarchy.GET(Rec.Type, Rec."Division Code", Rec."Department Code", Rec."Group Code", Rec."Category Code")) THEN
                                                                          Rec.RENAME(Rec.Type, Rec."Division Code", Rec."Department Code", Rec."Group Code", Rec.Code, '')
                                                                        ELSE
                                                                          Rec.VALIDATE("Category Code", Rec.Code);
                                                                    Rec.Type::"Sub-Category":
                                                                      IF ( NOT (SubCategoryCodeValidation)) THEN
                                                                        IF (ItemHierarchy.GET(Rec.Type, Rec."Division Code", Rec."Department Code", Rec."Group Code", Rec."Category Code", Rec."Sub-Category Code")) THEN
                                                                          Rec.RENAME(Rec.Type, Rec."Division Code", Rec."Department Code", Rec."Group Code", Rec."Category Code", Rec.Code)
                                                                        ELSE
                                                                          Rec.VALIDATE("Sub-Category Code", Rec.Code);
                                                                  END;
                                                                END;
                                                                TnpToolkit.CodeToName(Rec.Code, Rec.Name);
                                                                Rec.VALIDATE(Name);
                                                                CodeValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              ENG=Code] }
    { 20  ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 30  ;   ;Indentation         ;Integer       ;CaptionML=[ENU=Indentation;
                                                              ENG=Indentation] }
    { 40  ;   ;Division Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Item Hierarchy"."Division Code" WHERE (Type=CONST(Division));
                                                   OnValidate=BEGIN
                                                                DivisionCodeValidation := TRUE;
                                                                IF (Rec."Division Code" <> '') THEN
                                                                  IF (Rec.Type > Rec.Type::Division) THEN
                                                                    ItemHierarchy.GET(ItemHierarchy.Type::Division, Rec."Division Code");
                                                                IF (( NOT (CodeValidation)) AND (Rec.Type = Rec.Type::Division)) THEN
                                                                  Rec.VALIDATE(Code, Rec."Division Code");
                                                                DivisionCodeValidation := FALSE;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Division Filter;
                                                              ENG=Division Filter] }
    { 41  ;   ;Department Filter   ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Item Hierarchy"."Department Code" WHERE (Type=CONST(Department),
                                                                                                           Division Code=FIELD(Division Filter));
                                                   OnValidate=BEGIN
                                                                DepartmentCodeValidation := TRUE;
                                                                IF (Rec."Department Code" <> '') THEN
                                                                  IF (Rec.Type > Rec.Type::Department) THEN
                                                                    ItemHierarchy.GET(ItemHierarchy.Type::Department, Rec."Division Code", Rec."Department Code")
                                                                  ELSE IF (Rec.Type < Rec.Type::Department) THEN
                                                                    ERROR(tYouCantSpecify, Rec.FIELDCAPTION("Department Code"), LOWERCASE(FORMAT(Rec.Type)));
                                                                IF (( NOT (CodeValidation)) AND (Rec.Type = Rec.Type::Department)) THEN
                                                                  Rec.VALIDATE(Code, Rec."Department Code");
                                                                DepartmentCodeValidation := FALSE;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Department Filter;
                                                              ENG=Department Filter] }
    { 42  ;   ;Group Filter        ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Group),
                                                                                              Division Code=FIELD(Division Code),
                                                                                              Department Code=FIELD(Department Code));
                                                   OnValidate=BEGIN
                                                                GroupCodeValidation := TRUE;
                                                                IF (Rec."Group Code" <> '') THEN
                                                                  IF (Rec.Type > Rec.Type::Group) THEN
                                                                    ItemHierarchy.GET(ItemHierarchy.Type::Group, Rec."Division Code", Rec."Department Code", Rec."Group Code")
                                                                  ELSE IF (Rec.Type < Rec.Type::Group) THEN
                                                                    ERROR(tYouCantSpecify, Rec.FIELDCAPTION("Group Code"), LOWERCASE(FORMAT(Rec.Type)));
                                                                IF (( NOT (CodeValidation)) AND (Rec.Type = Rec.Type::Group)) THEN
                                                                  Rec.Code := Rec."Group Code";
                                                                GroupCodeValidation := FALSE;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Group Filter;
                                                              ENG=Group Filter] }
    { 43  ;   ;Category Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Item Hierarchy"."Category Code" WHERE (Type=CONST(Category),
                                                                                                         Division Code=FIELD(Division Code),
                                                                                                         Department Code=FIELD(Department Code),
                                                                                                         Group Code=FIELD(Group Code));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Category Filter" <> xRec."Category Filter") THEN
                                                                  Rec.VALIDATE("Sub-Category Filter", '');
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Category Filter;
                                                              ENG=Category Filter] }
    { 44  ;   ;Sub-Category Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Item Hierarchy"."Sub-Category Code" WHERE (Type=CONST(Sub-Category),
                                                                                                             Division Code=FIELD(Division Code),
                                                                                                             Department Code=FIELD(Department Code),
                                                                                                             Group Code=FIELD(Group Code),
                                                                                                             Category Code=FIELD(Category Code));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Sub-Category Filter;
                                                              ENG=Sub-Category Filter] }
    { 50  ;   ;Styles              ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Style WHERE (Division Code=FIELD(Division Filter),
                                                                                  Department Code=FIELD(Department Filter),
                                                                                  Group Code=FIELD(Group Filter),
                                                                                  Category Code=FIELD(Category Filter),
                                                                                  Sub-Category Code=FIELD(Sub-Category Filter)));
                                                   CaptionML=[ENU=Styles;
                                                              ENG=Styles];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 51  ;   ;Items               ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Item WHERE (Division Code=FIELD(Division Filter),
                                                                                 Department Code=FIELD(Department Filter),
                                                                                 Group Code=FIELD(Group Filter),
                                                                                 Category Code=FIELD(Category Filter),
                                                                                 Sub-Category Code=FIELD(Sub-Category Filter)));
                                                   CaptionML=[ENU=Items;
                                                              ENG=Items];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 60  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENG=Date Filter] }
    { 70  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Filter;
                                                              ENG=Global Dimension 1 Filter];
                                                   CaptionClass='1,3,1' }
    { 71  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Filter;
                                                              ENG=Global Dimension 2 Filter];
                                                   CaptionClass='1,3,2' }
    { 80  ;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=[ENU=Location Filter;
                                                              ENG=Location Filter] }
    { 90  ;   ;Purchases (LCY)     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Purchase Amount (Actual)" WHERE (Item Ledger Entry Type=CONST(Purchase),
                                                                                                                   Division Code=FIELD(Division Filter),
                                                                                                                   Department Code=FIELD(Department Filter),
                                                                                                                   Group Code=FIELD(Group Filter),
                                                                                                                   Category Code=FIELD(Category Filter),
                                                                                                                   Sub-Category Code=FIELD(Sub-Category Filter),
                                                                                                                   Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                   Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                   Location Code=FIELD(Location Filter),
                                                                                                                   Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Purchases (LCY);
                                                              ENG=Purchases (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 91  ;   ;Sales (LCY)         ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Value Entry"."Sales Amount (Actual)" WHERE (Item Ledger Entry Type=CONST(Sale),
                                                                                                                Division Code=FIELD(Division Filter),
                                                                                                                Department Code=FIELD(Department Filter),
                                                                                                                Group Code=FIELD(Group Filter),
                                                                                                                Category Code=FIELD(Category Filter),
                                                                                                                Sub-Category Code=FIELD(Sub-Category Filter),
                                                                                                                Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                                                                                                                Global Dimension 2 Code=FIELD(Global Dimension 2 Filter),
                                                                                                                Location Code=FIELD(Location Filter),
                                                                                                                Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Sales (LCY);
                                                              ENG=Sales (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 100 ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ENG=Blocked] }
    { 110 ;   ;System Activity     ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=System Activity;
                                                              ENG=System Activity] }
    { 1000;   ;Created By          ;Code50        ;OnValidate=BEGIN
                                                                TnpToolkit.UserValidate(Rec."Created By");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnValidate=BEGIN
                                                                TnpToolkit.UserValidate(Rec."Modified By");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
    { 50000;  ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionClass='1,1,1' }
    { 50001;  ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionClass='1,1,2' }
    { 50002;  ;HSCODE              ;Code50         }
  }
  KEYS
  {
    {    ;Type,Division Code,Department Code,Group Code,Category Code,Sub-Category Code;
                                                   Clustered=Yes }
    {    ;Division Code,Department Code,Group Code,Category Code,Sub-Category Code }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Name                                }
  }
  CODE
  {
    VAR
      ItemHierarchy@1000000001 : Record 9087005;
      TnpToolkit@1000000000 : Codeunit 9062230;
      DivisionCodeValidation@1000000004 : Boolean;
      DepartmentCodeValidation@1000000005 : Boolean;
      GroupCodeValidation@1000000006 : Boolean;
      CategoryCodeValidation@1000000007 : Boolean;
      SubCategoryCodeValidation@1000000008 : Boolean;
      CodeValidation@1000000003 : Boolean;
      tYouCantSpecify@1000000009 : TextConst 'ENU=You can''t specify "%1" for %2.;ENG=You can''t specify "%1" for %2.';

    PROCEDURE "--- General ---"@1000000016();
    BEGIN
    END;

    PROCEDURE UpdateRecord@1000000000();
    BEGIN
      //DOC NS2015.1 - Updating the record

      CASE (Rec.Type) OF
        Rec.Type::Division:
          Rec.Code := Rec."Division Code";
        Rec.Type::Department:
          Rec.Code := Rec."Department Code";
        Rec.Type::Group:
          Rec.Code := Rec."Group Code";
        Rec.Type::Category:
          Rec.Code := Rec."Category Code";
        Rec.Type::"Sub-Category":
          Rec.Code := Rec."Sub-Category Code";
      END;
      Rec.Indentation := Rec.Type - 1;
    END;

    LOCAL PROCEDURE CheckOnDeletion@1000000022(pFieldName@1000000000 : Text[50]);
    VAR
      lDeletionCheck@1000000001 : Codeunit 9062384;
    BEGIN
      //DOC NS2015.1 - Checking on deletion
      //  -> pFieldName: Field name to check

      lDeletionCheck.AddTable(DATABASE::Style);
      lDeletionCheck.AddTable(DATABASE::Item);
      lDeletionCheck.AddTable(DATABASE::"Item Variant");
      lDeletionCheck.AddTable(DATABASE::"Buying Staging Header");
      lDeletionCheck.AddTable(DATABASE::"Buying Staging Line");
      lDeletionCheck.AddTable(DATABASE::"Buying Sheet Header");
      lDeletionCheck.AddTable(DATABASE::"Buying Sheet Summary Line");
      lDeletionCheck.AddTable(DATABASE::"Buying Sheet Line");
      lDeletionCheck.AddTable(DATABASE::"Sales Line");
      lDeletionCheck.AddTable(DATABASE::"Purchase Line");
      lDeletionCheck.AddTable(DATABASE::"Item Ledger Entry");
      lDeletionCheck.AddTable(DATABASE::"Value Entry");
      lDeletionCheck.AddTable(DATABASE::"Sales Shipment Line");
      lDeletionCheck.AddTable(DATABASE::"Sales Invoice Line");
      lDeletionCheck.AddTable(DATABASE::"Sales Cr.Memo Line");
      lDeletionCheck.AddTable(DATABASE::"Purch. Rcpt. Line");
      lDeletionCheck.AddTable(DATABASE::"Purch. Inv. Line");
      lDeletionCheck.AddTable(DATABASE::"Purch. Cr. Memo Line");
      lDeletionCheck.AddTable(DATABASE::"Return Shipment Line");
      lDeletionCheck.AddTable(DATABASE::"Return Receipt Line");
      lDeletionCheck.AddTable(DATABASE::"Buying Staging Arch. Header");
      lDeletionCheck.AddTable(DATABASE::"Buying Staging Arch. Line");
      lDeletionCheck.AddTable(DATABASE::"Buying Sheet Arch. Header");
      lDeletionCheck.AddTable(DATABASE::"Buying Sheet Arch. Sum. Line");
      lDeletionCheck.AddTable(DATABASE::"Buying Sheet Arch. Line");

      lDeletionCheck.CheckMultiple(FORMAT(Rec.Type), Rec.Code, pFieldName);
    END;

    PROCEDURE GetSystemActivity@1000000024() : Boolean;
    BEGIN
      //DOC NS2016.16 - Returning system activity
      //  <- The activity

      IF (Rec.GETFILTER("System Activity") <> '') THEN
        EXIT(Rec.GETRANGEMIN("System Activity"))
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE SetSystemActivity@1000000025(pSystemActivity@1000000000 : Boolean);
    BEGIN
      //DOC NS2016.16 - Setting system activity
      //  -> pSystemActivity: The activity

      IF (pSystemActivity) THEN
        Rec.SETRANGE("System Activity", TRUE)
      ELSE
        Rec.SETRANGE("System Activity");
    END;

    PROCEDURE "--- Editing ---"@1000000013();
    BEGIN
    END;

    PROCEDURE Edit@1000000001();
    VAR
      lItemHierarchy@1000000000 : Record 9087005;
    BEGIN
      //DOC NS2015.1 - Editing the current record

      IF (Rec.Code = '') THEN
        EXIT;

      lItemHierarchy.RESET();
      lItemHierarchy.FILTERGROUP(2);
      lItemHierarchy.SETRANGE(Type, Rec.Type);
      IF (Rec.Type > Rec.Type::Division) THEN
        lItemHierarchy.SETRANGE("Division Code", Rec."Division Code");
      IF (Rec.Type > Rec.Type::Department) THEN
        lItemHierarchy.SETRANGE("Department Code", Rec."Department Code");
      IF (Rec.Type > Rec.Type::Group) THEN
        lItemHierarchy.SETRANGE("Group Code", Rec."Group Code");
      IF (Rec.Type > Rec.Type::Category) THEN
        lItemHierarchy.SETRANGE("Category Code", Rec."Category Code");
      lItemHierarchy.FILTERGROUP(0);

      PAGE.RUNMODAL(PAGE::"Item Hierarchy List", lItemHierarchy);
    END;

    PROCEDURE EditHierarchy@1000000002();
    VAR
      lItemHierarchy@1000000000 : Record 9087005;
    BEGIN
      //DOC NS2015.1 - Editing the current record hierarchy (sub-structure)

      IF (Rec.Type = Rec.Type::"Sub-Category") THEN
        EXIT;

      lItemHierarchy := Rec;
      lItemHierarchy.Type := Rec.Type + 1;
      lItemHierarchy.Edit();
    END;

    PROCEDURE DeleteWithConfirmation@1000000003();
    VAR
      eDelete@1000000000 : TextConst 'ENU=Delete %1 %2?;ENG=Delete %1 %2?';
    BEGIN
      IF ( NOT (CONFIRM(eDelete, TRUE, Rec.Type, Rec.Code))) THEN
        EXIT;
      Rec.DELETE(TRUE);
    END;

    PROCEDURE "--- FlowFilters ---"@1000000014();
    BEGIN
    END;

    PROCEDURE ClearFlowFilters@1000000021();
    BEGIN
      //DOC NS2015.1 - Clearing FlowFilters

      Rec.SETRANGE("Division Filter");
      Rec.SETRANGE("Department Filter");
      Rec.SETRANGE("Group Filter");
      Rec.SETRANGE("Category Filter");
      Rec.SETRANGE("Sub-Category Filter");
    END;

    PROCEDURE SetFlowFilters@1000000005();
    BEGIN
      //DOC NS2015.1 - Setting FlowFilters depending on type

      CASE (Rec.Type) OF
        Rec.Type::Division:
          SetDivisionFlowFilters();
        Rec.Type::Department:
          SetDepartmentFlowFilters();
        Rec.Type::Group:
          SetGroupFlowFilters();
        Rec.Type::Category:
          SetCategoryFlowFilters();
        Rec.Type::"Sub-Category":
          SetSubCategoryFlowFilters();
      END;
    END;

    PROCEDURE SetDivisionFlowFilters@1000000009();
    BEGIN
      //DOC NS2015.1 - Setting division FlowFilters

      SetFlowFilterValues(Rec."Division Code", '', '', '', '');
    END;

    PROCEDURE SetDepartmentFlowFilters@1000000004();
    BEGIN
      //DOC NS2015.1 - Setting department FlowFilters

      SetFlowFilterValues(Rec."Division Code", Rec."Department Code", '', '', '');
    END;

    PROCEDURE SetGroupFlowFilters@1000000012();
    BEGIN
      //DOC NS2015.1 - Setting group FlowFilters

      SetFlowFilterValues(Rec."Division Code", Rec."Department Code", Rec."Group Code", '', '');
    END;

    PROCEDURE SetCategoryFlowFilters@1000000011();
    BEGIN
      //DOC NS2015.1 - Setting category FlowFilters

      SetFlowFilterValues(Rec."Division Code", Rec."Department Code", Rec."Group Code", Rec."Category Code", '');
    END;

    PROCEDURE SetSubCategoryFlowFilters@1000000010();
    BEGIN
      //DOC NS2015.1 - Setting sub-category FlowFilters

      SetFlowFilterValues(Rec."Division Code", Rec."Department Code", Rec."Group Code", Rec."Category Code", Rec."Sub-Category Code");
    END;

    LOCAL PROCEDURE SetFlowFilterValues@1000000006(pDivisionFilter@1000000000 : Code[20];pDepartmentFilter@1000000004 : Code[20];pGroupFilter@1000000003 : Code[20];pCategoryFilter@1000000002 : Code[20];pSubCategoryFilter@1000000001 : Code[20]);
    BEGIN
      //DOC NS2015.1 - Setting FlowFilter values
      //  -> pDivisionFilter: Division filter to set
      //  -> pDepartmentFilter: Department filter to set
      //  -> pGroupFilter: Group filter to set
      //  -> pCategoryFilter: Category filter to set
      //  -> pSubCategoryFilter: Sub-category filter to set

      IF (pDivisionFilter <> '') THEN
        Rec.SETRANGE("Division Filter", pDivisionFilter)
      ELSE
        Rec.SETRANGE("Division Filter");

      IF (pDepartmentFilter <> '' )THEN
        Rec.SETRANGE("Department Filter", pDepartmentFilter)
      ELSE
        Rec.SETRANGE("Department Filter");

      IF (pGroupFilter <> '') THEN
        Rec.SETRANGE("Group Filter", pGroupFilter)
      ELSE
        Rec.SETRANGE("Group Filter");

      IF (pCategoryFilter <> '' ) THEN
        Rec.SETRANGE("Category Filter", pCategoryFilter)
      ELSE
        Rec.SETRANGE("Category Filter");

      IF (pSubCategoryFilter <> '') THEN
        Rec.SETRANGE("Sub-Category Filter", pSubCategoryFilter)
      ELSE
        Rec.SETRANGE("Sub-Category Filter");
    END;

    PROCEDURE "--- FlowFields ---"@1000000015();
    BEGIN
    END;

    PROCEDURE CalculateFlowFields@1000000007(VAR pStyles@1000000000 : Integer;VAR pItems@1000000001 : Integer;VAR pPurchasesLcy@1000000002 : Decimal;VAR pSalesLcy@1000000003 : Decimal);
    BEGIN
      //DOC NS2015.1 - Calculating FlowFields
      //  <> pStyles: Target (number of) styles
      //  <> pItems: Target (number of) items
      //  <> pPurchasesLcy: Target purchases (LCY) amount
      //  <> pSalesLcy: Target sales (LCY) amount

      SetFlowFilters();

      Rec.CALCFIELDS(Styles, Items, "Purchases (LCY)", "Sales (LCY)");

      pStyles := Rec.Styles;
      pItems := Rec.Items;
      pPurchasesLcy := Rec."Purchases (LCY)";
      pSalesLcy := Rec."Sales (LCY)";

      ClearFlowFilters();
    END;

    PROCEDURE ShowStyles@1000000018();
    VAR
      lStyle@1000000000 : Record 9087012;
    BEGIN
      //DOC NS2015.1 - Showing styles

      lStyle.RESET();
      lStyle.SETCURRENTKEY("Division Code", "Department Code", "Group Code", "Category Code", "Sub-Category Code");
      IF (Rec.Type >= Rec.Type::Division) THEN
        lStyle.SETRANGE("Division Code", Rec."Division Code");
      IF (Rec.Type >= Rec.Type::Department) THEN
        lStyle.SETRANGE("Department Code", Rec."Department Code");
      IF (Rec.Type >= Rec.Type::Group) THEN
        lStyle.SETRANGE("Group Code", Rec."Group Code");
      IF (Rec.Type >= Rec.Type::Category) THEN
        lStyle.SETRANGE("Category Code", Rec."Category Code");
      IF (Rec.Type >= Rec.Type::"Sub-Category") THEN
        lStyle.SETRANGE("Sub-Category Code", Rec."Sub-Category Code");
      PAGE.RUN(0, lStyle);
    END;

    PROCEDURE ShowItems@1000000019();
    VAR
      lItem@1000000000 : Record 27;
    BEGIN
      //DOC NS2015.1 - Showing items

      lItem.RESET();
      lItem.SETCURRENTKEY("Division Code", "Department Code", "Group Code", "Category Code", "Sub-Category Code");
      IF (Rec.Type >= Rec.Type::Division) THEN
        lItem.SETRANGE("Division Code", Rec."Division Code");
      IF (Rec.Type >= Rec.Type::Department) THEN
        lItem.SETRANGE("Department Code", Rec."Department Code");
      IF (Rec.Type >= Rec.Type::Group) THEN
        lItem.SETRANGE("Group Code", Rec."Group Code");
      IF (Rec.Type >= Rec.Type::Category) THEN
        lItem.SETRANGE("Category Code", Rec."Category Code");
      IF (Rec.Type >= Rec.Type::"Sub-Category") THEN
        lItem.SETRANGE("Sub-Category Code", Rec."Sub-Category Code");
      PAGE.RUN(0, lItem);
    END;

    PROCEDURE ShowPurchases@1000000008();
    VAR
      lValueEntry@1000000000 : Record 5802;
    BEGIN
      //DOC NS2015.1 - Showing purchases

      ShowValueEntries(lValueEntry."Item Ledger Entry Type"::Purchase);
    END;

    PROCEDURE ShowSales@1000000017();
    VAR
      lValueEntry@1000000000 : Record 5802;
    BEGIN
      //DOC NS2015.1 - Showing sales

      ShowValueEntries(lValueEntry."Item Ledger Entry Type"::Sale);
    END;

    LOCAL PROCEDURE ShowValueEntries@1000000020(pItemLedgerEntryType@1000000000 : Integer);
    VAR
      lValueEntry@1000000001 : Record 5802;
    BEGIN
      //DOC NS2015.1 - Showing value entries for specified item ledger entry type
      //  -> pItemLedgerEntryType: The type

      Rec.SetFlowFilters();

      lValueEntry.RESET();
      lValueEntry.SETCURRENTKEY("Item Ledger Entry Type", "Brand Code", "Season Code", "Division Code", "Department Code", "Group Code", "Category Code",
        "Sub-Category Code", "Global Dimension 1 Code", "Global Dimension 2 Code", "Location Code", "Posting Date");
      lValueEntry.SETRANGE("Item Ledger Entry Type", pItemLedgerEntryType);
      IF (Rec.GETFILTER("Division Filter") <> '') THEN
        lValueEntry.SETFILTER("Division Code", Rec.GETFILTER("Division Filter"));
      IF (Rec.GETFILTER("Department Filter") <> '') THEN
        lValueEntry.SETFILTER("Department Code", Rec.GETFILTER("Department Filter"));
      IF (Rec.GETFILTER("Group Filter") <> '') THEN
        lValueEntry.SETFILTER("Group Code", Rec.GETFILTER("Group Filter"));
      IF (Rec.GETFILTER("Category Filter") <> '') THEN
        lValueEntry.SETFILTER("Category Code", Rec.GETFILTER("Category Filter"));
      IF (Rec.GETFILTER("Sub-Category Filter") <> '') THEN
        lValueEntry.SETFILTER("Sub-Category Code", Rec.GETFILTER("Sub-Category Filter"));
      IF (Rec.GETFILTER("Global Dimension 1 Filter") <> '') THEN
        lValueEntry.SETFILTER("Global Dimension 1 Code", Rec.GETFILTER("Global Dimension 1 Filter"));
      IF (Rec.GETFILTER("Global Dimension 2 Filter") <> '') THEN
        lValueEntry.SETFILTER("Global Dimension 2 Code", Rec.GETFILTER("Global Dimension 2 Filter"));
      IF (Rec.GETFILTER("Location Filter") <> '') THEN
        lValueEntry.SETFILTER("Division Code", Rec.GETFILTER("Location Filter"));
      IF (GETFILTER(Rec."Date Filter") <> '') THEN
        lValueEntry.SETFILTER("Posting Date", GETFILTER(Rec."Date Filter"));

      PAGE.RUN(0, lValueEntry);
    END;

    BEGIN
    {
      //DOC NS2015.1  JH 08/01/2014 - Created
      //DOC NS2015.3  JH 30/07/2014 - "Blocked" added
      //DOC NS2016.16 JH 05/09/2016 - nSemble 2016
    }
    END.
  }
}

