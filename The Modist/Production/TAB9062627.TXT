OBJECT Table 9062627 Criteria Field
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Criteria ID");
               InitRecord();
               UpdateCriteria(FALSE);
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               UpdateCriteria(FALSE);
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               UpdateCriteria(TRUE);
             END;

    CaptionML=[ENU=Criteria Field;
               ENG=Criteria Field];
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 10  ;   ;Criteria ID         ;Integer       ;TableRelation=Criteria;
                                                   CaptionML=[ENU=Criteria ID;
                                                              ENG=Criteria ID] }
    { 20  ;   ;Table ID            ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Table ID" <> xRec."Table ID") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Field Type", Rec."Field Type"::Field);
                                                                  Rec.VALIDATE("Field ID", 0);
                                                                END;
                                                                Rec.CALCFIELDS("Table Name");
                                                              END;

                                                   CaptionML=[ENU=Table ID;
                                                              ENG=Table ID] }
    { 21  ;   ;Table Name          ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Table ID)));
                                                   CaptionML=[ENU=Table Name;
                                                              ENG=Table Name];
                                                   Editable=No }
    { 30  ;   ;Field Type          ;Option        ;InitValue=Field;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Field Type" <> xRec."Field Type") THEN
                                                                  Rec.VALIDATE("Field ID", 0);
                                                              END;

                                                   CaptionML=[ENU=Field Type;
                                                              ENG=Field Type];
                                                   OptionCaptionML=[ENU=" ,Field,Enhanced Field";
                                                                    ENG=" ,Field,Enhanced Field"];
                                                   OptionString=[ ,Field,Enhanced Field] }
    { 31  ;   ;Field ID            ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table ID));
                                                   OnValidate=BEGIN
                                                                Rec.CALCFIELDS("Field Name");
                                                              END;

                                                   CaptionML=[ENU=Field ID;
                                                              ENG=Field ID] }
    { 32  ;   ;Field Name          ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field.FieldName WHERE (TableNo=FIELD(Table ID),
                                                                                             No.=FIELD(Field ID)));
                                                   CaptionML=[ENU=Field Name;
                                                              ENG=Field Name];
                                                   Editable=No }
    { 33  ;   ;Enhanced Field Name ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Enhanced Field Definition".Name WHERE (Table No.=FIELD(Table ID),
                                                                                                              Enhanced Field No.=FIELD(Field ID)));
                                                   CaptionML=[ENU=Enhanced Field Name;
                                                              ENG=Enhanced Field Name];
                                                   Editable=No }
    { 40  ;   ;Sequence            ;Integer       ;CaptionML=[ENU=Sequence;
                                                              ENG=Sequence];
                                                   MinValue=0 }
    { 50  ;   ;Value               ;Text250       ;OnValidate=BEGIN
                                                                ValidateValue();
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupValue();
                                                            END;

                                                   CaptionML=[ENU=Value;
                                                              ENG=Value] }
    { 60  ;   ;Filter Source       ;Option        ;OnValidate=BEGIN
                                                                IF ("Filter Source" <> xRec."Filter Source") THEN BEGIN
                                                                  Criteria.GET("Criteria ID");
                                                                  Value := '';
                                                                  "Filter Source Record Position" := '';
                                                                  "Filter Source Field Id" := 0;
                                                                  "Filter Source Caption Field Id" := 0;
                                                                  "Filter Source Table Id" := 0;

                                                                  CASE ("Filter Source") OF
                                                                    "Filter Source"::Field:
                                                                        "Filter Source Table Id" := Criteria."Filter Source Table Id";
                                                                    "Filter Source"::"Enhanced Field":
                                                                        "Filter Source Table Id" := Criteria."Filter Source Table Id";
                                                                    "Filter Source"::Record:
                                                                      BEGIN
                                                                        "Filter Source Table Id" := Criteria."Filter Source Table Id";
                                                                        "Filter Source Field Id" := Criteria."Filter Source Field Id";
                                                                        "Filter Source Caption Field Id" := Criteria."Filter Source Caption Field Id";
                                                                      END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Filter Source;
                                                              ENG=Filter Source];
                                                   OptionCaptionML=[ENU=Const,Filter,Field,Enhanced Field,Record;
                                                                    ENG=Const,Filter,Field,Enhanced Field,Record];
                                                   OptionString=Const,Filter,Field,Enhanced Field,Record }
    { 61  ;   ;Filter Source Table Id;Integer     ;CaptionML=[ENU=Filter Source Table Id;
                                                              ENG=Filter Source Table Id] }
    { 62  ;   ;Filter Source Field Id;Integer     ;CaptionML=[ENU=Filter Source Field Id;
                                                              ENG=Filter Source Field Id] }
    { 63  ;   ;Filter Source Caption Field Id;Integer;
                                                   CaptionML=[ENU=Filter Source Caption Field Id;
                                                              ENG=Filter Source Caption Field Id] }
    { 64  ;   ;Filter Source Record Position;Text250;
                                                   CaptionML=[ENU=Filter Source Record Position;
                                                              ENG=Filter Source Record Position] }
    { 70  ;   ;Field Class         ;Option        ;CaptionML=[ENU=Field Class;
                                                              ENG=Field Class];
                                                   OptionCaptionML=[ENU=" ,Normal,FlowField,FlowFilter";
                                                                    ENG=" ,Normal,FlowField,FlowFilter"];
                                                   OptionString=[ ,Normal,FlowField,FlowFilter] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Criteria ID,Sequence                     }
    {    ;Criteria ID,Table ID,Field ID            }
    {    ;Criteria ID,Field ID                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Criteria@1000000001 : Record 9062626;
      CriteriaField@1000000002 : Record 9062627;
      TableFieldBuffer@1000000007 : TEMPORARY Record 9062231;
      CriteriaManagement@1000000004 : Codeunit 9062462;
      ObjectFieldToolkit@1000000006 : Codeunit 9062343;
      TableFieldManagement@1000000008 : Codeunit 9062248;
      TnpToolkit@1000000000 : Codeunit 9062230;
      Direction@1000000003 : ' ,Up,Down';
      SystemActivity@1000000005 : Boolean;

    PROCEDURE SetSystemActivity@1000000008(pSystemActivity@1000000000 : Boolean);
    BEGIN
      //DOC NA2016.12 - Setting system activity flag
      //  -> pSystemActivity: The flag

      SystemActivity := pSystemActivity;
    END;

    LOCAL PROCEDURE UpdateCriteria@1000000009(pDeleting@1000000000 : Boolean);
    BEGIN
      //DOC NA2016.12 - Updating criteria (on insert / modify / delete)
      //  -> pDeleting: Deleting flag

      IF ( NOT (Criteria.GET(Rec."Criteria ID"))) THEN
        EXIT;

      Criteria.SetSystemActivity(SystemActivity);
      Criteria.UpdateDescriptionAndViewForField(Rec, pDeleting, TRUE);
      Criteria.SetSystemActivity(FALSE);
    END;

    PROCEDURE NewSequence@1000000005() : Integer;
    VAR
      lCriteriaField@1000000000 : Record 9062627;
    BEGIN
      //DOC NA2015.3 - Returning new sequence
      //  <- The sequence

      lCriteriaField.RESET();
      lCriteriaField.SETCURRENTKEY("Criteria ID", Sequence);
      lCriteriaField.SETRANGE("Criteria ID", Rec."Criteria ID");
      IF (lCriteriaField.FINDLAST()) THEN
        EXIT(lCriteriaField.Sequence + 10)
      ELSE
        EXIT(10);
    END;

    PROCEDURE InitRecord@1000000001();
    BEGIN
      //DOC NA2015.3 - Initialising the record

      IF (Criteria.GET(Rec."Criteria ID")) THEN
      BEGIN
        Rec.VALIDATE("Table ID", Criteria."Table ID");
        Rec.VALIDATE("Field Class", Criteria."Field Class");
      END;
      Rec.VALIDATE(Sequence, NewSequence());
    END;

    LOCAL PROCEDURE "--- Field Validation and Lookup ---"@1000000013();
    BEGIN
    END;

    PROCEDURE GetFieldName@1000000000() : Text[50];
    VAR
      lFieldName@1000000000 : Text[50];
    BEGIN
      //DOC NA2015.3 - Returning field name
      //  <- The name

      CASE (Rec."Field Type") OF
        Rec."Field Type"::Field:
          BEGIN
            Rec.CALCFIELDS("Field Name");
            lFieldName := Rec."Field Name";
          END;
        Rec."Field Type"::"Enhanced Field":
          BEGIN
            Rec.CALCFIELDS("Enhanced Field Name");
            lFieldName := Rec."Enhanced Field Name";
          END;
      END;

      EXIT(lFieldName);
    END;

    PROCEDURE GetFieldDataType@1000000016() : Integer;
    VAR
      lField@1000000001 : Record 2000000041;
      lEnhancedFieldDefinition@1000000002 : Record 9062327;
      lDataType@1000000000 : Integer;
    BEGIN
      //DOC NA2016.12 - Returning field data type
      //  <- The data type

      lDataType := TableFieldBuffer."Data Type"::" ";
      IF ((Rec."Table ID" <> 0) AND (Rec."Field Type" <> Rec."Field Type"::" ") AND (Rec."Field ID" <> 0)) THEN
        CASE (Rec."Field Type") OF
          Rec."Field Type"::Field:
            IF (lField.GET(Rec."Table ID", Rec."Field ID")) THEN
              lDataType := TableFieldManagement.FieldTypeToDataType(lField.Type);
          Rec."Field Type"::"Enhanced Field":
            IF (lEnhancedFieldDefinition.GET(Rec."Table ID", Rec."Field ID")) THEN
              lDataType := TableFieldManagement.EnhancedFieldTypeToDataType(lEnhancedFieldDefinition.Type);
        END;

      EXIT(lDataType);
    END;

    PROCEDURE ValidateFieldId@1000000012() : Boolean;
    VAR
      lResult@1000000002 : Boolean;
      lFieldType@1000000001 : Option;
      lFieldId@1000000000 : Integer;
    BEGIN
      //DOC NA2016.12 - Validating field ID
      //  <- TRUE = Field changed, FALSE = Not

      lResult := FALSE;
      lFieldType := Rec."Field Type";
      lFieldId := Rec."Field ID";
      CLEAR(ObjectFieldToolkit);
      ObjectFieldToolkit.SetFieldClass(Rec."Field Class");
      ObjectFieldToolkit.ValidateFieldIdAdv(Rec."Table ID", lFieldType, lFieldId);
      IF (lFieldType <> Rec."Field Type") THEN
      BEGIN
        Rec.VALIDATE("Field Type", lFieldType);
        lResult := TRUE;
      END;
      IF (lFieldId <> Rec."Field ID") THEN
      BEGIN
        Rec.VALIDATE("Field ID", lFieldId);
        lResult := TRUE;
      END;
      CLEAR(ObjectFieldToolkit);
      EXIT(lResult);
    END;

    PROCEDURE ValidateFieldText@1000000010(VAR pFieldText@1000000000 : Text) : Boolean;
    VAR
      lResult@1000000001 : Boolean;
      lFieldType@1000000002 : Option;
      lFieldId@1000000003 : Integer;
    BEGIN
      //DOC NA2016.12 - Validating field text
      //  <> pFieldText: Source / target field text
      //  <- TRUE = Field changed, FALSE = Not

      lResult := FALSE;
      lFieldType := Rec."Field Type";
      lFieldId := Rec."Field ID";
      CLEAR(ObjectFieldToolkit);
      ObjectFieldToolkit.SetFieldClass(Rec."Field Class");
      ObjectFieldToolkit.ValidateFieldNameAdv(Rec."Table ID", lFieldType, lFieldId, pFieldText);
      IF (lFieldType <> Rec."Field Type") THEN
      BEGIN
        Rec.VALIDATE("Field Type", lFieldType);
        lResult := TRUE;
      END;
      IF (lFieldId <> Rec."Field ID") THEN
      BEGIN
        Rec.VALIDATE("Field ID", lFieldId);
        lResult := TRUE;
      END;
      CLEAR(ObjectFieldToolkit);
      EXIT(lResult);
    END;

    PROCEDURE FieldLookup@1000000011() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
      lFieldType@1000000002 : Option;
      lFieldId@1000000001 : Integer;
    BEGIN
      //DOC NA2016.12 - Performing field lookup
      //  <- Lookup result

      lResult := FALSE;
      lFieldType := Rec."Field Type";
      lFieldId := Rec."Field ID";
      CLEAR(ObjectFieldToolkit);
      ObjectFieldToolkit.SetFieldClass(Rec."Field Class");
      IF (ObjectFieldToolkit.FieldLookupAdv(Rec."Table ID", lFieldType, lFieldId)) THEN
      BEGIN
        Rec.VALIDATE("Field Type", lFieldType);
        Rec.VALIDATE("Field ID", lFieldId);
        lResult := TRUE;
      END;
      CLEAR(ObjectFieldToolkit);
      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Value Validation and Lookup ---"@1000000014();
    BEGIN
    END;

    LOCAL PROCEDURE ValidateValue@1000000006();
    VAR
      Field@1000000005 : Record 2000000041;
      EnhancedField@1000000004 : Record 9062327;
      RecRef@1000000003 : RecordRef;
      FldRef@1000000002 : FieldRef;
      CaptionField@1000000001 : FieldRef;
      FilterField@1000000000 : FieldRef;
    BEGIN
      Criteria.GET("Criteria ID");

      IF (Value <> '') THEN BEGIN
        CASE ("Filter Source") OF
          "Filter Source"::Const,
          "Filter Source"::Filter:
            BEGIN
              //DOC NA2016.10 >> Commented out, blows away smart filters - to be discussed
              //RecRef.OPEN("Table ID");
              //FilterField := RecRef.FIELD("Field ID");
              //FilterField.SETFILTER(Value);
              //Value := FilterField.GETFILTER();
              //RecRef.CLOSE();
              //DOC NA2016.10 <<
            END;
          "Filter Source"::Field:
            BEGIN
              Field.RESET();
              Field.SETRANGE(TableNo, "Filter Source Table Id");
              Field.SETRANGE(FieldName, Value);
              IF (NOT(Field.FINDFIRST())) THEN BEGIN
                Field.SETFILTER(FieldName, Value + '*');
                Field.FINDFIRST();
              END;
              Value := Field.FieldName;
              "Filter Source Field Id" := Field."No.";
            END;
          "Filter Source"::"Enhanced Field":
            BEGIN
              EnhancedField.RESET();
              EnhancedField.SETRANGE("Table No.", "Filter Source Table Id");
              EnhancedField.SETRANGE(Name, Value);
              IF (NOT(EnhancedField.FINDFIRST())) THEN BEGIN
                EnhancedField.SETFILTER(Name, Value + '*');
                EnhancedField.FINDFIRST();
              END;
              Value := EnhancedField.Name;
            END;
          "Filter Source"::Record:
            BEGIN
              RecRef.OPEN("Filter Source Table Id");
              IF (Criteria."Filter Source Record Position" <> '') THEN
                RecRef.SETVIEW(Criteria."Filter Source Record Position");
              CaptionField := RecRef.FIELD("Filter Source Caption Field Id");
              CaptionField.SETRANGE(Value);
              IF (NOT(RecRef.FINDFIRST())) THEN BEGIN
                CaptionField.SETFILTER(Value + '*');
                RecRef.FINDFIRST();
              END;
              Value := FORMAT(CaptionField.VALUE);
              "Filter Source Record Position" := RecRef.GETPOSITION();
              RecRef.CLOSE();
            END;
        END;
      END ELSE BEGIN
        "Filter Source Record Position" := '';
      END;
    END;

    LOCAL PROCEDURE LookupValue@1000000007();
    VAR
      Field@1000000002 : Record 2000000041;
      RunWithRecordRef@1000000003 : Codeunit 9062239;
      TableId@1000000001 : Integer;
      FieldId@1000000000 : Integer;
      RecRef@1000000004 : RecordRef;
      CaptionField@1000000005 : FieldRef;
    BEGIN
      CASE ("Filter Source") OF
        "Filter Source"::Const,
        "Filter Source"::Filter:
          CriteriaManagement.FilterLookup(Rec);
        "Filter Source"::Field:
          BEGIN
            FieldId := "Filter Source Field Id";
            TableId := "Filter Source Table Id";
            IF (TnpToolkit.FieldIdLookup(TableId, FieldId)) THEN BEGIN
              Field.GET(TableId, FieldId);
              VALIDATE(Value, Field.FieldName);
            END;
          END;
        "Filter Source"::"Enhanced Field":
          BEGIN

          END;
        "Filter Source"::Record:
          BEGIN
            RecRef.OPEN("Filter Source Table Id");
            IF (Criteria."Filter Source Record Position" <> '') THEN
              RecRef.SETVIEW(Criteria."Filter Source Record Position");
            IF (RunWithRecordRef.RunListPage(RecRef, TRUE)) THEN BEGIN
              CaptionField := RecRef.FIELD("Filter Source Caption Field Id");
              Value := FORMAT(CaptionField.VALUE);
              "Filter Source Record Position" := RecRef.GETPOSITION();
            END;
            RecRef.CLOSE();
          END;
      END;
    END;

    LOCAL PROCEDURE "--- Moving ---"@1000000015();
    BEGIN
    END;

    PROCEDURE MoveUp@1000000002() : Boolean;
    BEGIN
      //DOC NA2015.3 - Moving field up (lower sequence)
      //  <- TRUE: Actually moved, FALSE: Not

      EXIT(Move(Direction::Up));
    END;

    PROCEDURE MoveDown@1000000003() : Boolean;
    BEGIN
      //DOC NA2015.3 - Moving field down (higher sequence)
      //  <- TRUE: Actually moved, FALSE: Not

      EXIT(Move(Direction::Down));
    END;

    LOCAL PROCEDURE Move@1000000004(pDirection@1000000000 : Integer) : Boolean;
    VAR
      lFound@1000000001 : Boolean;
      lSequence@1000000002 : Integer;
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NA2015.3 - Moving field down / up
      //  -> pDirection: Direction
      //  <- TRUE: Actually moved, FALSE: Not

      IF (pDirection IN [Direction::Up, Direction::Down]) THEN
      BEGIN
        CriteriaField.RESET();
        CriteriaField.SETCURRENTKEY("Criteria ID", Sequence);
        CriteriaField.SETRANGE("Criteria ID", Rec."Criteria ID");
        CriteriaField.SETFILTER(ID, '<>%1', Rec.ID);
        CASE (pDirection) OF
          Direction::Up:
            BEGIN
              CriteriaField.SETFILTER(Sequence, '<=%1', Rec.Sequence);
              lFound := CriteriaField.FINDLAST();
            END;
          Direction::Down:
            BEGIN
              CriteriaField.SETFILTER(Sequence, '>=%1', Rec.Sequence);
              lFound := CriteriaField.FINDFIRST();
            END;
        END;
      END;

      IF (lFound) THEN
      BEGIN
        lSequence := Rec.Sequence;
        Rec.Sequence := CriteriaField.Sequence;
        Rec.MODIFY(FALSE);
        CriteriaField.Sequence := lSequence;
        CriteriaField.MODIFY(FALSE);
        IF (Criteria.GET(Rec."Criteria ID")) THEN
          Criteria.UpdateDescriptionAndView(TRUE);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    BEGIN
    {
      //DOC NA2015.3  JH 17/09/2014 - Created
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.12 AZ 07/12/2015 - Bugfixes
      //DOC NA2016.12 JH 22/01/2016 - Field class added, "GetFieldDataType" added
      //DOC NA2016.14 JH 14/03/2016 - Fixes
      //DOC NA2016.15 JH 06/05/2016 - CfMD amendments
    }
    END.
  }
}

