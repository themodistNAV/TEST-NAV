OBJECT Codeunit 9086967 nF. User Chart Management
{
  OBJECT-PROPERTIES
  {
    Date=20/10/16;
    Time=[ 3:43:08 PM];
    Version List=NF2016.17;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NfCues@1000000000 : Record 9086969;
      NfUser@1000000001 : Record 9086953;
      tUserStatus@1000000003 : TextConst 'ENU=User Status;ENG=User Status';
      tCountOf@1000000002 : TextConst 'ENU=Count of;ENG=Count of';

    PROCEDURE InitialiseChart@6000(VAR pBusinessChartBuffer@1000000000 : Record 485);
    VAR
      MiniLastUsedChart@1170000000 : Record 1311;
      LastChartRecorded@1000 : Boolean;
      LastChartExists@1001 : Boolean;
      LastChartEnabled@1002 : Boolean;
    BEGIN
      ///<summary>Initialising chart</summary>
      ///<param name="pBusinessChartBuffer">The chart buffer</param>

      UpdateChart(pBusinessChartBuffer);
    END;

    PROCEDURE UpdateChart@6(VAR pBusinessChartBuffer@1004 : Record 485);
    VAR
      lColumn@1000000000 : Integer;
      lValues@1000000001 : ARRAY [6] OF Integer;
    BEGIN
      ///<summary>Updating chart</summary>
      ///<param name="pBusinessChartBuffer">The chart buffer</param>

      CalculateValues(lValues);

      pBusinessChartBuffer.Initialize();
      pBusinessChartBuffer.AddMeasure(tCountOf, 1, pBusinessChartBuffer."Data Type"::Integer, pBusinessChartBuffer."Chart Type"::StackedColumn);
      pBusinessChartBuffer.SetXAxis(tUserStatus, pBusinessChartBuffer."Data Type"::String);
      FOR lColumn := NfCues."User Status"::"All Users" TO NfCues."User Status"::"Disabled Users" DO
      BEGIN
        NfCues."User Status" := lColumn;
        pBusinessChartBuffer.AddColumn(FORMAT(NfCues."User Status"));
        pBusinessChartBuffer.SetValueByIndex(0, lColumn - 1, lValues[lColumn]);
      END;
    END;

    LOCAL PROCEDURE CalculateValues@1000000000(VAR pValues@1000000000 : ARRAY [6] OF Integer);
    BEGIN
      ///<summary>Calculating values for the chart</summary>
      ///<param name="pValues">Target array of values</param>

      NfUser.RESET();
      pValues[NfCues."User Status"::"All Users"] := NfUser.COUNT();

      NfUser.SETRANGE(Superuser, TRUE);
      pValues[NfCues."User Status"::Superusers] := NfUser.COUNT();
      NfUser.SETRANGE(Superuser);

      NfUser.SETRANGE(New, TRUE);
      pValues[NfCues."User Status"::"New Users"] := NfUser.COUNT();
      NfUser.SETRANGE(New);

      NfUser.SETRANGE(Pending, TRUE);
      pValues[NfCues."User Status"::"Pending Users"] := NfUser.COUNT();
      NfUser.SETRANGE(Pending);

      NfUser.SETRANGE(Hidden, TRUE);
      pValues[NfCues."User Status"::"Hidden Users"] := NfUser.COUNT();
      NfUser.SETRANGE(Hidden);

      NfUser.SETRANGE(Disabled, TRUE);
      pValues[NfCues."User Status"::"Disabled Users"] := NfUser.COUNT();
      NfUser.SETRANGE(Disabled);
    END;

    PROCEDURE DrillDown@4(VAR pBusinessChartBuffer@1003 : Record 485);
    VAR
      SalesHeader@1002 : Record 36;
      ToDate@1004 : Date;
      Measure@1000 : Integer;
    BEGIN
      ///<summary>Performing drill-down</summary>
      ///<param name="pBusinessChartBuffer">Chart buffer with drill-down information</param>

      NfUser.RESET();
      CASE (pBusinessChartBuffer."Drill-Down X Index" + 1) OF
        NfCues."User Status"::Superusers:
          NfUser.SETRANGE(Superuser, TRUE);
        NfCues."User Status"::"New Users":
          NfUser.SETRANGE(New, TRUE);
        NfCues."User Status"::"Pending Users":
          NfUser.SETRANGE(Pending, TRUE);
        NfCues."User Status"::"Hidden Users":
          NfUser.SETRANGE(Hidden, TRUE);
        NfCues."User Status"::"Disabled Users":
          NfUser.SETRANGE(Disabled, TRUE);
      END;
      PAGE.RUN(0, NfUser);
    END;

    BEGIN
    {
      ///<summary>Logic of nForcement users chart for the role centre</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-10-16">Created</change>
    }
    END.
  }
}

