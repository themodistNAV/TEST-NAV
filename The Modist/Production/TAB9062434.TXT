OBJECT Table 9062434 Checklist Header
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=VAR
               NoSeriesCode@1000000000 : Code[10];
               NoSeriesMgt@1000000002 : Codeunit 396;
             BEGIN
               NoSeriesCode := EnablementSetup.GetChecklistNos();
               VALIDATE(Code,NoSeriesMgt.GetNextNo(NoSeriesCode,TODAY,TRUE));
               CreateFromTemplate("Checklist Type");
             END;

    OnDelete=VAR
               CheckListLine@1000000000 : Record 9062435;
             BEGIN
               CheckListLine.SETRANGE("Checklist Type","Checklist Type");
               CheckListLine.SETRANGE("Checklist Code",Code);
               IF CheckListLine.FINDSET THEN CheckListLine.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Checklist Header;
               ENG=Checklist Header];
    LookupPageID=Page9062565;
    DrillDownPageID=Page9062565;
  }
  FIELDS
  {
    { 1   ;   ;Checklist Type      ;Code20        ;TableRelation="Checklist Template Header"."Checklist Type";
                                                   OnValidate=VAR
                                                                ChecklistHeader@1000000000 : Record 9062434;
                                                                ChecklistLine@1000000001 : Record 9062435;
                                                              BEGIN
                                                                IF ("Checklist Type" <> xRec."Checklist Type") THEN BEGIN
                                                                  IF ChecklistHeader.GET(xRec."Checklist Type", Code) THEN BEGIN
                                                                    ChecklistLine.RESET();
                                                                    ChecklistLine.SETRANGE("Checklist Type", xRec."Checklist Type");
                                                                    ChecklistLine.SETRANGE("Checklist Code", Code);
                                                                    ChecklistLine.DELETEALL(TRUE);

                                                                    ChecklistHeader.RENAME("Checklist Type", Code);
                                                                    COMMIT;

                                                                    Rec.GET("Checklist Type", Code);
                                                                    xRec."Checklist Type" := "Checklist Type";
                                                                    CreateFromTemplate("Checklist Type");
                                                                    Rec.MODIFY();
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Checklist Type;
                                                              ENG=Checklist Type] }
    { 2   ;   ;Code                ;Code20        ;CaptionML=[ENU=Code;
                                                              ENG=Code] }
    { 3   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 4   ;   ;Related Table No.   ;Integer       ;CaptionML=[ENU=Related Table No.;
                                                              ENG=Related Table No.] }
    { 5   ;   ;Related Position Text;Text250      ;OnValidate=VAR
                                                                RecRef@1000000000 : RecordRef;
                                                                FieldRef@1000000001 : FieldRef;
                                                                KeyRef@1000000003 : KeyRef;
                                                                i@1000000002 : Integer;
                                                              BEGIN
                                                                IF "Related Position Text" = '' THEN BEGIN
                                                                  VALIDATE("Related Record Description",'');
                                                                  EXIT;
                                                                END;

                                                                IF "Related Table No." = 0 THEN BEGIN
                                                                  VALIDATE("Related Record Description",'');
                                                                  EXIT;
                                                                END;

                                                                RecRef.OPEN("Related Table No.");
                                                                RecRef.SETPOSITION("Related Position Text");

                                                                i := 0;
                                                                KeyRef := RecRef.KEYINDEX(1);
                                                                REPEAT
                                                                  i += 1;
                                                                  FieldRef := KeyRef.FIELDINDEX(i);
                                                                  IF "Related Record Description" <> '' THEN "Related Record Description" := "Related Record Description" + ' ';
                                                                  VALIDATE("Related Record Description","Related Record Description" + FORMAT(FieldRef.VALUE));
                                                                UNTIL i >= KeyRef.FIELDCOUNT;
                                                              END;

                                                   CaptionML=[ENU=Related Position Text;
                                                              ENG=Related Position Text] }
    { 6   ;   ;Assigned to Contact No;Code20      ;TableRelation=Contact.No.;
                                                   OnValidate=VAR
                                                                ChecklistLine@1000000000 : Record 9062435;
                                                              BEGIN
                                                                ChecklistLine.SETRANGE(ChecklistLine."Checklist Type","Checklist Type");
                                                                ChecklistLine.SETRANGE(ChecklistLine."Checklist Code",Code);
                                                                ChecklistLine.SETRANGE(ChecklistLine."Assigned to Contact No.",'');
                                                                IF ChecklistLine.FINDSET THEN
                                                                  ChecklistLine.MODIFYALL(ChecklistLine."Assigned to Contact No.","Assigned to Contact No",TRUE);
                                                              END;

                                                   CaptionML=[ENU=Assigned to Contact No;
                                                              ENG=Assigned to Contact No] }
    { 7   ;   ;Created DateTime    ;DateTime      ;CaptionML=[ENU=Created DateTime;
                                                              ENG=Created DateTime];
                                                   Editable=No }
    { 8   ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF (xRec.Status <> Status::Complete) AND (Status = Status::Complete) THEN
                                                                  OnChecklistBecomeComplete;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=Not Started,In Progress,Complete;
                                                                    ENG=Not Started,In Progress,Complete];
                                                   OptionString=Not Started,In Progress,Complete }
    { 9   ;   ;Related Table Name  ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Object.Name WHERE (Type=CONST(Table),
                                                                                         ID=FIELD(Related Table No.)));
                                                   OnLookup=BEGIN
                                                              ObjFldToolkit.TableLookup("Related Table No.");
                                                              VALIDATE("Related Table No.");
                                                            END;

                                                   CaptionML=[ENU=Related Table Name;
                                                              ENG=Related Table Name];
                                                   Editable=No }
    { 10  ;   ;Related Record Description;Text250 ;CaptionML=[ENU=Related Record Description;
                                                              ENG=Related Record Description];
                                                   Editable=No }
    { 100 ;   ;Primary Key 1 To Pass;Text250      ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Primary Key 1 To Pass;
                                                              ENG=Primary Key 1 To Pass] }
    { 101 ;   ;Primary Key 2 To Pass;Text250      ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Primary Key 2 To Pass;
                                                              ENG=Primary Key 2 To Pass] }
    { 102 ;   ;Primary Key 3 To Pass;Text250      ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Primary Key 3 To Pass;
                                                              ENG=Primary Key 3 To Pass] }
    { 103 ;   ;Primary Key 4 To Pass;Text250      ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Primary Key 4 To Pass;
                                                              ENG=Primary Key 4 To Pass] }
    { 104 ;   ;Primary Key 5 To Pass;Text250      ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Primary Key 5 To Pass;
                                                              ENG=Primary Key 5 To Pass] }
    { 105 ;   ;Table No. To Pass   ;Integer       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Table No. To Pass;
                                                              ENG=Table No. To Pass] }
  }
  KEYS
  {
    {    ;Checklist Type,Code                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      eLinesAlreadyExist@1000000001 : TextConst 'ENU=Lines already exist for the Checklist %1 %2, please delete them before assigning a new Type;ENG=Lines already exist for the Checklist %1 %2, please delete them before assigning a new Type';
      EnablementSetup@1000000003 : Record 9062229;
      TNPUtils@1000000002 : Codeunit 9062229;
      ObjFldToolkit@1000000000 : Codeunit 9062343;

    PROCEDURE CreateFromTemplate@1000000000(ChecklistType@1000000000 : Code[20]);
    VAR
      ChecklistHeader@1000000004 : Record 9062434;
      ChecklistTemplateHeader@1000000001 : Record 9062436;
      ChecklistLine@1000000002 : Record 9062435;
      ChecklistTemplateLine@1000000003 : Record 9062437;
    BEGIN
      ChecklistLine.SETRANGE("Checklist Type","Checklist Type");
      ChecklistLine.SETRANGE("Checklist Code",Code);
      IF ChecklistLine.FINDSET THEN ERROR(eLinesAlreadyExist,"Checklist Type",Code);

      IF NOT ChecklistTemplateHeader.GET(ChecklistType) THEN EXIT;
      TRANSFERFIELDS(ChecklistTemplateHeader);

      ChecklistTemplateLine.SETRANGE("Checklist Type",ChecklistTemplateHeader."Checklist Type");
      IF ChecklistTemplateLine.FINDSET THEN BEGIN
        REPEAT
          ChecklistLine.INIT;
          ChecklistLine.TRANSFERFIELDS(ChecklistTemplateLine);
          ChecklistLine."Checklist Type" := "Checklist Type";
          ChecklistLine."Checklist Code" := Code;
          ChecklistLine.INSERT(TRUE);
        UNTIL ChecklistTemplateLine.NEXT = 0;
      END;
    END;

    PROCEDURE SetPositionFromFilters@1000000002();
    VAR
      i@1000000000 : Integer;
      PK1Filter@1000000001 : Text;
      PK2Filter@1000000002 : Text;
      PK3Filter@1000000003 : Text;
      PK4Filter@1000000004 : Text;
      PK5Filter@1000000005 : Text;
      PKFieldID@1000000006 : Integer;
      PKFilter@1000000009 : Text;
      RecRef@1000000007 : RecordRef;
      FieldRef@1000000008 : FieldRef;
      TableNoFilter@1000000010 : Text;
    BEGIN
      IF "Related Table No." = 0 THEN EXIT;

      i := 0;
      REPEAT
        TableNoFilter := GETFILTER("Table No. To Pass");
        i += 1;
      UNTIL (i >= 10) OR (TableNoFilter <> '');

      IF TableNoFilter <> '' THEN BEGIN
        IF TableNoFilter <> FORMAT("Related Table No.") THEN EXIT;

        PK1Filter := GETFILTER("Primary Key 1 To Pass");
        PK2Filter := GETFILTER("Primary Key 2 To Pass");
        PK3Filter := GETFILTER("Primary Key 3 To Pass");
        PK4Filter := GETFILTER("Primary Key 4 To Pass");
        PK5Filter := GETFILTER("Primary Key 5 To Pass");

        RecRef.OPEN("Related Table No.");

        PKFilter := PK1Filter;
        PKFieldID := TNPUtils.GetPrimaryKeyFieldID("Related Table No.",'',1);
        IF PKFieldID <> 0 THEN BEGIN
          FieldRef := RecRef.FIELD(PKFieldID);
          FieldRef.SETFILTER(PKFilter);
        END;

        PKFilter := PK2Filter;
        PKFieldID := TNPUtils.GetPrimaryKeyFieldID("Related Table No.",'',2);
        IF PKFieldID <> 0 THEN BEGIN
          FieldRef := RecRef.FIELD(PKFieldID);
          FieldRef.SETFILTER(PKFilter);
        END;

        PKFilter := PK3Filter;
        PKFieldID := TNPUtils.GetPrimaryKeyFieldID("Related Table No.",'',3);
        IF PKFieldID <> 0 THEN BEGIN
          FieldRef := RecRef.FIELD(PKFieldID);
          FieldRef.SETFILTER(PKFilter);
        END;

        PKFilter := PK4Filter;
        PKFieldID := TNPUtils.GetPrimaryKeyFieldID("Related Table No.",'',4);
        IF PKFieldID <> 0 THEN BEGIN
          FieldRef := RecRef.FIELD(PKFieldID);
          FieldRef.SETFILTER(PKFilter);
        END;

        PKFilter := PK5Filter;
        PKFieldID := TNPUtils.GetPrimaryKeyFieldID("Related Table No.",'',5);
        IF PKFieldID <> 0 THEN BEGIN
          FieldRef := RecRef.FIELD(PKFieldID);
          FieldRef.SETFILTER(PKFilter);
        END;

        IF RecRef.FINDFIRST THEN VALIDATE("Related Position Text",RecRef.GETPOSITION);

      END;
    END;

    [Integration(TRUE)]
    PROCEDURE OnChecklistBecomeComplete@54();
    BEGIN
    END;

    BEGIN
    {
      //DOC NA2016.10 AZ 08/09/2015 - Upgraded to 2016, table lookup moved from TNPToolkit to ObjectFieldToolkit codeunit
      //DOC NA2015.10 PC 09/10/2015 - Added Event OnChecklistBecomeComplete() triggered when Status becomes Complete
      //DOC NA2016.12 AZ 11/12/2015 - Change Checklist Type without displaing rename confirmation dialog
      //DOC NA2016.15 JH 15/04/2016 - CfMD amendments
    }
    END.
  }
}

