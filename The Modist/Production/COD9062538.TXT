OBJECT Codeunit 9062538 Quick Report Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=16/03/16;
    Time=12:00:00 PM;
    Version List=NA2016.14;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ConvertOldFieldDataTypes();
            UpdateFieldDataTypes();
          END;

  }
  CODE
  {
    VAR
      QuickReportHeader@1000000009 : Record 9062697;
      QuickReportField@1000000000 : Record 9062698;
      QuickReportData@1000000002 : Record 9062699;
      TableField@9062232 : Record 9062231;
      ObjectFieldToolkit@9062231 : Codeunit 9062343;
      TableFieldManagement@1000000005 : Codeunit 9062248;
      TnpToolkit@1000000003 : Codeunit 9062230;
      QuickReportCode@9062229 : Code[60];
      QuickReportFieldIndex@9062230 : Integer;
      tFieldTypeNotSupported@1000000001 : TextConst 'ENU=%1 is not supported in quick reports.;ENG=%1 is not supported in quick reports.';
      tNoDataConversion@1000000004 : TextConst 'ENU=There is no data conversion possible between "%1" and "%2".;ENG=There is no data conversion possible between "%1" and "%2".';

    LOCAL PROCEDURE "--- General ---"@1000000024();
    BEGIN
    END;

    PROCEDURE CompactMode@1000000026() : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning if we should be using compact mode
      //  <- The answer

      EXIT(CURRENTCLIENTTYPE = CLIENTTYPE::Phone);
    END;

    PROCEDURE "--- Field Data Type ---"@1000000002();
    BEGIN
    END;

    PROCEDURE FieldToFieldDataType@1000000015(pTableId@1000000000 : Integer;pFieldType@1000000001 : Integer;pFieldId@1000000002 : Integer) : Integer;
    VAR
      lDataType@1000000003 : Integer;
    BEGIN
      //DOC NA2016.14 - Converting field information to field data type
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type
      //  -> pFieldId: Field ID
      //  <- Field data type

      CLEAR(lDataType);

      IF ((pTableId <> 0) AND (pFieldType <> QuickReportField."Field Type"::" ") AND (pFieldId <> 0)) THEN
        CASE (pFieldType) OF
          QuickReportField."Field Type"::Field:
            lDataType := TableFieldManagement.TableFieldTypeToDataType(pTableId, pFieldId);
          QuickReportField."Field Type"::"Enhanced Field":
            lDataType := TableFieldManagement.EnhancedTableFieldTypeToDataType(pTableId, pFieldId);
        END;

      EXIT(lDataType);
    END;

    PROCEDURE NavQueryColumnTypeToFieldDataType@1000000035(pNavQueryColumnDataType@1000000000 : Integer) : Integer;
    VAR
      lNavQueryColumnDefinition@1000000002 : Record 9062329;
      lFieldDataType@1000000001 : Integer;
    BEGIN
      //DOC NA2016.14 - Converting NAV query column type to field data type
      //  -> pNavQueryColumnDataType: NAV query column data type
      //  <- Field data type

      CLEAR(lFieldDataType);

      CASE (pNavQueryColumnDataType) OF
        lNavQueryColumnDefinition."Data Type"::Integer: lFieldDataType := QuickReportField."Field Data Type"::Integer;
        lNavQueryColumnDefinition."Data Type"::Decimal: lFieldDataType := QuickReportField."Field Data Type"::Decimal;
        lNavQueryColumnDefinition."Data Type"::Text: lFieldDataType := QuickReportField."Field Data Type"::Text;
      END;

      EXIT(lFieldDataType);
    END;

    PROCEDURE SqlQueryResultFieldTypeToFieldDataType@1000000038(pSqlQueryResultFieldType@1000000000 : Integer) : Integer;
    VAR
      lSqlQueryResultField@1000000002 : Record 9062387;
      lFieldDataType@1000000001 : Integer;
    BEGIN
      //DOC NA2016.14 - Converting SQL query result field type to field data type
      //  -> pSqlQueryResultFieldType: SQL query result field type
      //  <- Field data type

      CLEAR(lFieldDataType);

      CASE (pSqlQueryResultFieldType) OF
        lSqlQueryResultField.Type::Boolean: lFieldDataType := QuickReportField."Field Data Type"::Boolean;
        lSqlQueryResultField.Type::Integer: lFieldDataType := QuickReportField."Field Data Type"::Integer;
        lSqlQueryResultField.Type::Decimal: lFieldDataType := QuickReportField."Field Data Type"::Decimal;
        lSqlQueryResultField.Type::Date: lFieldDataType := QuickReportField."Field Data Type"::Date;
        lSqlQueryResultField.Type::Time: lFieldDataType := QuickReportField."Field Data Type"::Time;
        lSqlQueryResultField.Type::DateTime: lFieldDataType := QuickReportField."Field Data Type"::DateTime;
        lSqlQueryResultField.Type::Text: lFieldDataType := QuickReportField."Field Data Type"::Text;
      END;

      EXIT(lFieldDataType);
    END;

    LOCAL PROCEDURE FieldDataTypeCaption@1000000049(pFieldDataType@1000000000 : Integer) : Text;
    VAR
      lQuickReportField@1000000001 : Record 9062698;
    BEGIN
      //DOC NA2016.14 - Returning field data type caption
      //  -> pFieldDataType: The field data type
      //  <- The caption

      lQuickReportField."Field Data Type" := pFieldDataType;
      EXIT(FORMAT(lQuickReportField."Field Data Type"));
    END;

    LOCAL PROCEDURE "--- Field Length ---"@1000000045();
    BEGIN
    END;

    PROCEDURE FieldToFieldLength@1000000031(pTableId@1000000002 : Integer;pFieldType@1000000001 : Integer;pFieldId@1000000000 : Integer) : Integer;
    VAR
      lField@1000000005 : Record 2000000041;
      lEnhancedFieldDefinition@1000000004 : Record 9062327;
      lEnhancedFieldValue@1000000006 : Record 9062328;
      lFieldLength@1000000003 : Integer;
    BEGIN
      //DOC NA2016.14 - Converting field to field length
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type
      //  -> pFieldId: Field ID
      //  <- Field length

      CLEAR(lFieldLength);

      IF ((pTableId <> 0) AND (pFieldType <> QuickReportField."Field Type"::" ") AND (pFieldId <> 0)) THEN
        CASE (pFieldType) OF
          QuickReportField."Field Type"::Field:
            BEGIN
              lField.GET(pTableId, pFieldId);
              lFieldLength := lField.Len;
            END;
          QuickReportField."Field Type"::"Enhanced Field":
            BEGIN
              lEnhancedFieldDefinition.GET(pTableId, pFieldId);
              CASE (lEnhancedFieldDefinition.Type) OF
                lEnhancedFieldDefinition.Type::Code: lFieldLength := MAXSTRLEN(lEnhancedFieldValue."Value as Code");
                lEnhancedFieldDefinition.Type::Text: lFieldLength := MAXSTRLEN(lEnhancedFieldValue."Value as Text");
              END;
            END;
        END;

      EXIT(lFieldLength);
    END;

    PROCEDURE NavQueryColumnTypeToFieldLength@1000000032(pNavQueryColumnDataType@1000000000 : Integer) : Integer;
    VAR
      lNavQueryColumnDefinition@1000000002 : Record 9062329;
      lNavQueryResultEntry@1000000003 : Record 9062330;
      lFieldLength@1000000001 : Integer;
    BEGIN
      //DOC NA2016.14 - Converting NAV query column type to field length
      //  -> pNavQueryColumnDataType: NAV query column data type
      //  <- Field length

      CLEAR(lFieldLength);

      IF (pNavQueryColumnDataType = lNavQueryColumnDefinition."Data Type"::Text) THEN
        lFieldLength := MAXSTRLEN(lNavQueryResultEntry."Value as Text");

      EXIT(lFieldLength);
    END;

    PROCEDURE SqlQueryResultFieldTypeToFieldLength@1000000040(pSqlQueryResultFieldType@1000000000 : Integer) : Integer;
    VAR
      lSqlQueryResultField@1000000002 : Record 9062387;
      lSqlQueryResult@1000000003 : Record 9062333;
      lFieldLength@1000000001 : Integer;
    BEGIN
      //DOC NA2016.14 - Converting SQL query result field type to field length
      //  -> pSqlQueryResultFieldType: SQL query result field type
      //  <- Field length

      CLEAR(lFieldLength);

      IF (pSqlQueryResultFieldType = lSqlQueryResultField.Type::Text) THEN
        lFieldLength := MAXSTRLEN(lSqlQueryResult."Text Value");

      EXIT(lFieldLength);
    END;

    LOCAL PROCEDURE "--- Field Type vs Quick Report Field Type ---"@1000000047();
    BEGIN
    END;

    PROCEDURE FieldDataTypeToQuickReportDataType@1000000043(pFieldDataType@1000000000 : Option;pFieldLength@1000000002 : Integer) : Integer;
    VAR
      lQuickReportDataType@1000000001 : Integer;
    BEGIN
      //DOC NA2016.14 - Converting field data type to quick report data type
      //  -> pFieldDataType: Field data type
      //  -> pFieldLength: Integer
      //  <- Quick report data type

      CLEAR(lQuickReportDataType);

      IF (pFieldDataType <> QuickReportField."Field Data Type"::" ") THEN
        CASE (pFieldDataType) OF
          QuickReportField."Field Data Type"::BigInteger: lQuickReportDataType := QuickReportField."Quick Report Data Type"::Decimal;
          QuickReportField."Field Data Type"::Boolean: lQuickReportDataType := QuickReportField."Quick Report Data Type"::Code;
          QuickReportField."Field Data Type"::Code: lQuickReportDataType := CodeOrTextQuickReportDataType(pFieldLength);
          QuickReportField."Field Data Type"::Decimal: lQuickReportDataType := QuickReportField."Quick Report Data Type"::Decimal;
          QuickReportField."Field Data Type"::Integer: lQuickReportDataType := QuickReportField."Quick Report Data Type"::Decimal;
          QuickReportField."Field Data Type"::Date: lQuickReportDataType := QuickReportField."Quick Report Data Type"::Date;
          QuickReportField."Field Data Type"::DateFormula: lQuickReportDataType := QuickReportField."Quick Report Data Type"::Code;
          QuickReportField."Field Data Type"::DateTime: lQuickReportDataType := QuickReportField."Quick Report Data Type"::DateTime;
          QuickReportField."Field Data Type"::Document: lQuickReportDataType := QuickReportField."Quick Report Data Type"::Text;
          QuickReportField."Field Data Type"::Duration: lQuickReportDataType := QuickReportField."Quick Report Data Type"::Code;
          QuickReportField."Field Data Type"::"Dynamic Link": lQuickReportDataType := QuickReportField."Quick Report Data Type"::Text;
          QuickReportField."Field Data Type"::"Extended Text": lQuickReportDataType := QuickReportField."Quick Report Data Type"::Text;
          QuickReportField."Field Data Type"::GUID: lQuickReportDataType := QuickReportField."Quick Report Data Type"::Text;
          QuickReportField."Field Data Type"::Link: lQuickReportDataType := QuickReportField."Quick Report Data Type"::Text;
          QuickReportField."Field Data Type"::OemCode: lQuickReportDataType := CodeOrTextQuickReportDataType(pFieldLength);
          QuickReportField."Field Data Type"::OemText: lQuickReportDataType := QuickReportField."Quick Report Data Type"::Text;
          QuickReportField."Field Data Type"::Option: lQuickReportDataType := QuickReportField."Quick Report Data Type"::Text;
          QuickReportField."Field Data Type"::Text: lQuickReportDataType := QuickReportField."Quick Report Data Type"::Text;
          QuickReportField."Field Data Type"::Time: lQuickReportDataType := QuickReportField."Quick Report Data Type"::Code;
          ELSE ERROR(tFieldTypeNotSupported, FieldDataTypeCaption(pFieldDataType));
        END;

      EXIT(lQuickReportDataType);
    END;

    LOCAL PROCEDURE CodeOrTextQuickReportDataType@1000000028(pFieldLength@1000000000 : Integer) : Integer;
    BEGIN
      //DOC NA2016.14 - Returning code or text quick report data type depending on field length
      //  -> pFieldLength: The field length
      //  <- The data type

      IF (pFieldLength > MAXSTRLEN(QuickReportData."Code Field 1")) THEN
        EXIT(QuickReportField."Quick Report Data Type"::Text)
      ELSE
        EXIT(QuickReportField."Quick Report Data Type"::Code);
    END;

    LOCAL PROCEDURE "--- Data Type Conversion ---"@1000000004();
    BEGIN
    END;

    PROCEDURE DataTypesToDataTypeConversion@1000000033(pFieldDataType@1000000000 : Integer;pQuickReportDataType@1000000001 : Integer) : Integer;
    VAR
      lDataTypeConversion@1000000002 : Integer;
    BEGIN
      //DOC NA2016.14 - Converting data types to data type conversion
      //  -> pFieldDataType: Field data type
      //  -> pQuickReportDataType: Quick report data type
      //  <- Data type conversion

      CLEAR(lDataTypeConversion);

      IF ((pFieldDataType <> QuickReportField."Field Data Type"::" ") AND
          (pQuickReportDataType <> QuickReportField."Quick Report Data Type"::" ")) THEN
        CASE (pFieldDataType) OF
          QuickReportField."Field Data Type"::BigInteger: lDataTypeConversion := NumericDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::Boolean: lDataTypeConversion := FormatDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::Code: lDataTypeConversion := TextDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::Date: lDataTypeConversion := DateDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::DateTime: lDataTypeConversion := DateTimeDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::Decimal: lDataTypeConversion := NumericDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::Document: lDataTypeConversion := TextDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::"Dynamic Link": lDataTypeConversion := TextDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::"Extended Text": lDataTypeConversion := TextDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::Integer: lDataTypeConversion := NumericDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::DateFormula: lDataTypeConversion := FormatDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::Duration: lDataTypeConversion := FormatDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::GUID: lDataTypeConversion := FormatDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::Link: lDataTypeConversion := TextDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::OemCode: lDataTypeConversion := TextDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::OemText: lDataTypeConversion := TextDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::Option: lDataTypeConversion := FormatDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::Text: lDataTypeConversion := TextDataTypeConversion(pQuickReportDataType);
          QuickReportField."Field Data Type"::Time: lDataTypeConversion := FormatDataTypeConversion(pQuickReportDataType);
          ELSE ERROR(tFieldTypeNotSupported, FieldDataTypeCaption(pFieldDataType));
        END;

      EXIT(lDataTypeConversion);
    END;

    LOCAL PROCEDURE NumericDataTypeConversion@1000000034(pQuickReportDataType@1000000000 : Integer) : Integer;
    VAR
      lDataTypeConversion@1000000001 : Integer;
    BEGIN
      //DOC NA2016.14 - Returning numeric data type conversion
      //  -> pQuickReportDataType: Quick report data type
      //  <- Data type conversion

      CLEAR(lDataTypeConversion);

      CASE (pQuickReportDataType) OF
        QuickReportField."Quick Report Data Type"::Date,
        QuickReportField."Quick Report Data Type"::DateTime:
          ReportNoDataConversion();
        QuickReportField."Quick Report Data Type"::Code,
        QuickReportField."Quick Report Data Type"::Text:
          lDataTypeConversion := QuickReportField."Data Type Conversion"::Format;
      END;

      EXIT(lDataTypeConversion);
    END;

    LOCAL PROCEDURE DateDataTypeConversion@1000000041(pQuickReportDataType@1000000000 : Integer) : Integer;
    VAR
      lDataTypeConversion@1000000001 : Integer;
    BEGIN
      //DOC NA2016.14 - Returning date data type conversion
      //  -> pQuickReportDataType: Quick report data type
      //  <- Data type conversion

      CLEAR(lDataTypeConversion);

      CASE (pQuickReportDataType) OF
        QuickReportField."Quick Report Data Type"::Decimal,
        QuickReportField."Quick Report Data Type"::DateTime:
          ReportNoDataConversion();
        QuickReportField."Quick Report Data Type"::Code,
        QuickReportField."Quick Report Data Type"::Text:
          lDataTypeConversion := QuickReportField."Data Type Conversion"::Format;
      END;

      EXIT(lDataTypeConversion);
    END;

    LOCAL PROCEDURE DateTimeDataTypeConversion@1000000044(pQuickReportDataType@1000000000 : Integer) : Integer;
    VAR
      lDataTypeConversion@1000000001 : Integer;
    BEGIN
      //DOC NA2016.14 - Returning datetime data type conversion
      //  -> pQuickReportDataType: Quick report data type
      //  <- Data type conversion

      CLEAR(lDataTypeConversion);

      CASE (pQuickReportDataType) OF
        QuickReportField."Quick Report Data Type"::Decimal,
        QuickReportField."Quick Report Data Type"::Date:
          ReportNoDataConversion();
        QuickReportField."Quick Report Data Type"::Code,
        QuickReportField."Quick Report Data Type"::Text:
          lDataTypeConversion := QuickReportField."Data Type Conversion"::Format;
      END;

      EXIT(lDataTypeConversion);
    END;

    LOCAL PROCEDURE TextDataTypeConversion@1000000046(pQuickReportDataType@1000000000 : Integer) : Integer;
    VAR
      lDataTypeConversion@1000000001 : Integer;
    BEGIN
      //DOC NA2016.14 - Returning text data type conversion
      //  -> pQuickReportDataType: Quick report data type
      //  <- Data type conversion

      CLEAR(lDataTypeConversion);

      CASE (pQuickReportDataType) OF
        QuickReportField."Quick Report Data Type"::Date:
          lDataTypeConversion := QuickReportField."Data Type Conversion"::"Evaluate to Date";
        QuickReportField."Quick Report Data Type"::DateTime:
          lDataTypeConversion := QuickReportField."Data Type Conversion"::"Evaluate to DateTime";
        QuickReportField."Quick Report Data Type"::Decimal:
          lDataTypeConversion := QuickReportField."Data Type Conversion"::"Evaluate To Decimal";
      END;

      EXIT(lDataTypeConversion);
    END;

    LOCAL PROCEDURE FormatDataTypeConversion@1000000048(pQuickReportDataType@1000000000 : Integer) : Integer;
    VAR
      lDataTypeConversion@1000000001 : Integer;
    BEGIN
      //DOC NA2016.14 - Returning format data type conversion
      //  -> pQuickReportDataType: Quick report data type
      //  <- Data type conversion

      CLEAR(lDataTypeConversion);

      CASE (pQuickReportDataType) OF
        QuickReportField."Quick Report Data Type"::Code,
        QuickReportField."Quick Report Data Type"::Text:
          lDataTypeConversion := QuickReportField."Data Type Conversion"::Format;
        ELSE
          ReportNoDataConversion();
      END;

      EXIT(lDataTypeConversion);
    END;

    LOCAL PROCEDURE ReportNoDataConversion@1000000003();
    BEGIN
      ERROR(tNoDataConversion, QuickReportField."Field Data Type", QuickReportField."Quick Report Data Type");
    END;

    LOCAL PROCEDURE "--- Field Data Type vs Date Field ID ---"@1000000019();
    BEGIN
    END;

    PROCEDURE FieldIndexAndDataTypeToDataFieldId@1000000021(pFieldIndex@1000000000 : Integer;pDataType@1000000001 : Integer) : Integer;
    BEGIN
      //DOC NA2016.14 - Converting field index and field data type to data field ID
      //  -> pFieldIndex: The field indx
      //  -> pDataType: The data type
      //  -> pTreatAsCodeDataType: Flag to treat as code data type
      //  <- Data field ID

      IF ((pFieldIndex > 0) AND (pDataType <> QuickReportField."Quick Report Data Type"::" ")) THEN
        EXIT(1000 + pFieldIndex * 10 + pDataType)
      ELSE
        EXIT(0);
    END;

    PROCEDURE FieldIndexAndDataTypeToDataFieldIdCompact@1000000027(pFieldIndex@1000000000 : Integer;pDataType@1000000001 : Integer) : Integer;
    BEGIN
      //DOC NA2016.14 - Converting field index and field data type to data field ID (for compact mode)
      //  -> pFieldIndex: The field indx
      //  -> pDataType: The data type
      //  <- Data field ID

      EXIT(FieldIndexAndDataTypeToDataFieldId(pFieldIndex, QuickReportField."Quick Report Data Type"::Text));
    END;

    PROCEDURE DataFieldIdToFieldIndex@1000000023(pDataFieldId@1000000000 : Integer) : Integer;
    BEGIN
      //DOC NA2016.14 - Converting data field ID to field index
      //  -> pDataFieldId: The data field ID
      //  <- The field index

      EXIT((pDataFieldId - 1000) DIV 10);
    END;

    PROCEDURE DataFieldIdToDataType@1000000025(pDataFieldId@1000000000 : Integer) : Integer;
    BEGIN
      //DOC NA2016.14 - Converting data field ID to data type
      //  -> pDataFieldId: The data field ID
      //  <- The data type

      EXIT((pDataFieldId - 1000) MOD 10);
    END;

    PROCEDURE "--- Sequence ---"@1000000000();
    BEGIN
    END;

    PROCEDURE QuickReportUp@1000000001(VAR pQuickReportHeader@1000000001 : Record 9062697) : Boolean;
    VAR
      lRecordsetVariant@1000000003 : Variant;
      lSequenceToolkit@1000000000 : Codeunit 9062519;
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2015.7 - Moving quick report up (lower sequence)
      //  <> pQuickReportHeader: Quick report header recordset
      //  <- TRUE = Sequence changed, FALSE = Not

      lRecordsetVariant := pQuickReportHeader;
      lResult := lSequenceToolkit.SequenceUp(lRecordsetVariant, DATABASE::"Quick Report Header", pQuickReportHeader.FIELDNO(Sequence));
      pQuickReportHeader := lRecordsetVariant;
      EXIT(lResult);
    END;

    PROCEDURE QuickReportDown@1000000005(VAR pQuickReportHeader@1000000001 : Record 9062697) : Boolean;
    VAR
      lRecordsetVariant@1000000002 : Variant;
      lSequenceToolkit@1000000000 : Codeunit 9062519;
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NA2015.7 - Moving quick report down (higher sequence)
      //  <> pQuickReportHeader: Quick report header recordset
      //  <- TRUE = Sequence changed, FALSE = Not

      lRecordsetVariant := pQuickReportHeader;
      lSequenceToolkit.SequenceDown(lRecordsetVariant, DATABASE::"Quick Report Header", pQuickReportHeader.FIELDNO(Sequence));
      pQuickReportHeader := lRecordsetVariant;
      EXIT(lResult);
    END;

    PROCEDURE QuickReportFieldUp@1000000009(VAR pQuickReportField@1000000004 : Record 9062698) : Boolean;
    VAR
      lRecordsetVariant@1000000003 : Variant;
      lSequenceToolkit@1000000000 : Codeunit 9062519;
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2015.7 - Moving quick report field up (lower sequence)
      //  <> pQuickReportField: Quick report field recordset
      //  <- TRUE = Sequence changed, FALSE = Not

      lRecordsetVariant := pQuickReportField;
      lResult := lSequenceToolkit.SequenceUp(lRecordsetVariant, DATABASE::"Quick Report Field", pQuickReportField.FIELDNO(Sequence));
      pQuickReportField := lRecordsetVariant;
      EXIT(lResult);
    END;

    PROCEDURE QuickReportFieldDown@1000000008(VAR pQuickReportField@1000000001 : Record 9062698) : Boolean;
    VAR
      lRecordsetVariant@1000000002 : Variant;
      lSequenceToolkit@1000000000 : Codeunit 9062519;
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NA2015.7 - Moving quick report field down (higher sequence)
      //  <> pQuickReportField: Quick report field recordset
      //  <- TRUE = Sequence changed, FALSE = Not

      lRecordsetVariant := pQuickReportField;
      lSequenceToolkit.SequenceDown(lRecordsetVariant, DATABASE::"Quick Report Field", pQuickReportField.FIELDNO(Sequence));
      pQuickReportField := lRecordsetVariant;
      EXIT(lResult);
    END;

    PROCEDURE "--- Adding Fields ---"@1000000006();
    BEGIN
    END;

    PROCEDURE AddMultipleFields@1000000010(VAR pQuickReportHeader@1000000000 : Record 9062697) : Boolean;
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2016.12 - Adding multiple fields to a quick report
      //  <> pQuickReportHeader: The quick report (can be modified)
      //  <- TRUE = Fields added, FALSE = Not

      lResult := FALSE;

      pQuickReportHeader.TESTFIELD("Data From");
      CASE (pQuickReportHeader."Data From") OF
        pQuickReportHeader."Data From"::Table:
          lResult := AddMultipleTableFields(pQuickReportHeader);
        pQuickReportHeader."Data From"::"NAV Query":
          lResult := AddMultipleNavQueryColumns(pQuickReportHeader);
        pQuickReportHeader."Data From"::"SQL Query":
          lResult := AddMultipleSqlQueryFields(pQuickReportHeader);
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE AddMultipleTableFields@1000000036(VAR pQuickReportHeader@1000000000 : Record 9062697) : Boolean;
    VAR
      lTableFieldTmp@1000000002 : TEMPORARY Record 9062231;
      lObjectFieldToolkit@1000000004 : Codeunit 9062343;
      lFieldsLookup@1000000001 : Page 9806;
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NA2016.12 - Adding multiple table fields to a quick report
      //  <> pQuickReportHeader: The quick report (can be modified)
      //  <- TRUE = Fields added, FALSE = Not

      IF ( NOT (CheckTable(pQuickReportHeader))) THEN
        EXIT(FALSE);

      IF (lObjectFieldToolkit.FieldLookupMultipleAdv(pQuickReportHeader."Table ID", lTableFieldTmp)) THEN
      BEGIN
        IF (lTableFieldTmp.FINDSET()) THEN
        REPEAT
          AddField(pQuickReportHeader, lTableFieldTmp."Field Type", lTableFieldTmp."Field ID", '');
        UNTIL (lTableFieldTmp.NEXT() = 0);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE AddMultipleNavQueryColumns@1000000037(VAR pQuickReportHeader@1000000000 : Record 9062697) : Boolean;
    VAR
      lNavQueryColumnDefinition@1000000002 : Record 9062329;
      lNavQueryManagment@1000000001 : Codeunit 9062300;
      lNavQueryColumns@1000000003 : Page 9062582;
      lResult@1000000004 : Boolean;
    BEGIN
      //DOC NA2016.12 - Adding multiple NAV query columns to a quick report
      //  <> pQuickReportHeader: The quick report (can be modified)
      //  <- TRUE = Fields added, FALSE = Not

      pQuickReportHeader.TESTFIELD("NAV Query ID");

      IF (lNavQueryManagment.AutoUpdateQueryDefinition(pQuickReportHeader."NAV Query ID")) THEN
        COMMIT;

      lNavQueryColumnDefinition.RESET();
      lNavQueryColumnDefinition.FILTERGROUP(2);
      lNavQueryColumnDefinition.SETRANGE("Query No.", pQuickReportHeader."NAV Query ID");
      lNavQueryColumnDefinition.FILTERGROUP(0);

      lNavQueryColumns.LOOKUPMODE := TRUE;
      lNavQueryColumns.SETTABLEVIEW(lNavQueryColumnDefinition);
      IF (lNavQueryColumns.RUNMODAL() = ACTION::LookupOK) THEN
      BEGIN
        lNavQueryColumns.GetSelectionFilter(lNavQueryColumnDefinition);
        IF (lNavQueryColumnDefinition.FINDSET()) THEN
        REPEAT
          AddField(pQuickReportHeader, QuickReportField."Field Type"::Field, 0, lNavQueryColumnDefinition.Name);
        UNTIL (lNavQueryColumnDefinition.NEXT() = 0);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE AddMultipleSqlQueryFields@1000000039(VAR pQuickReportHeader@1000000000 : Record 9062697) : Boolean;
    VAR
      lSqlQueryResultField@1000000002 : Record 9062387;
      lSqlIntegration@1000000001 : Codeunit 9062299;
      lSqlQueryResultFields@1000000003 : Page 9062982;
      lResult@1000000004 : Boolean;
    BEGIN
      //DOC NA2016.12 - Adding multiple SQL query fields (columns) to a quick report
      //  <> pQuickReportHeader: The quick report (can be modified)
      //  <- TRUE = Fields added, FALSE = Not

      pQuickReportHeader.TESTFIELD("SQL Query Code");

      IF (lSqlIntegration.AutoUpdateResultFields(pQuickReportHeader."SQL Query Code")) THEN
        COMMIT;

      lSqlQueryResultField.RESET();
      lSqlQueryResultField.FILTERGROUP(2);
      lSqlQueryResultField.SETRANGE("Query Code", pQuickReportHeader."SQL Query Code");
      lSqlQueryResultField.FILTERGROUP(0);

      lSqlQueryResultFields.LOOKUPMODE := TRUE;
      lSqlQueryResultFields.SETTABLEVIEW(lSqlQueryResultField);
      IF (lSqlQueryResultFields.RUNMODAL() = ACTION::LookupOK) THEN
      BEGIN
        lSqlQueryResultFields.GetSelectionFilter(lSqlQueryResultField);
        IF (lSqlQueryResultField.FINDSET()) THEN
        REPEAT
          AddField(pQuickReportHeader, QuickReportField."Field Type"::Field, 0, lSqlQueryResultField.Name);
        UNTIL (lSqlQueryResultField.NEXT() = 0);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE AddField@1000000012(pQuickReportHeader@1000000000 : Record 9062697;pFieldType@1000000001 : Integer;pFieldId@1000000002 : Integer;pFieldName@1000000003 : Text);
    BEGIN
      //DOC NA2015.7 - Adding one field to a quick report
      //  -> pQuickReportHeader: The quick report
      //  -> pFieldType: Field type
      //  -> pFieldId: Field ID (can be empty)
      //  -> pFieldName: Field name (used only if field ID is empty)

      QuickReportField.RESET();
      QuickReportField.SETCURRENTKEY("Quick Report Code", "Field Type", "Field ID");
      QuickReportField.SETRANGE("Quick Report Code", pQuickReportHeader.Code);
      QuickReportField.SETRANGE("Field Type", pFieldType);
      IF (pFieldId <> 0) THEN
        QuickReportField.SETRANGE("Field ID", pFieldId)
      ELSE
        QuickReportField.SETRANGE("Field Name", pFieldName);
      IF (QuickReportField.ISEMPTY) THEN
      BEGIN
        CLEAR(QuickReportField);
        QuickReportField.INIT();
        QuickReportField.VALIDATE("Quick Report Code", pQuickReportHeader.Code);
        QuickReportField.InitialiseRecord(TRUE);
        QuickReportField.VALIDATE("Field Type", pFieldType);
        IF (pFieldId <> 0) THEN
          QuickReportField.VALIDATE("Field ID", pFieldId)
        ELSE
          QuickReportField.VALIDATE("Field Name", pFieldName);
        QuickReportField.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CheckTable@1000000014(VAR pQuickReportHeader@1000000000 : Record 9062697) : Boolean;
    VAR
      eConfirmation@1000000001 : TextConst 'ENU=Table hasn''t been specified for quick report "%1". Do you want to do it now?;ENG=Table hasn''t been specified for quick report "%1". Do you want to do it now?';
      lObjectFieldToolkit@1000000002 : Codeunit 9062343;
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NA2015.7 - Checking if table has been selected for a quick report, if not - proposing it
      //  <> pQuickReportHeader: The quick report (can be modified)
      //  <- TRUE = Table has been selected, FALSE = Not

      CheckSourceTypeIsTable(pQuickReportHeader);
      IF (pQuickReportHeader."Table ID" <> 0) THEN
        EXIT(TRUE);

      IF ( NOT (CONFIRM(eConfirmation, TRUE, pQuickReportHeader.Code))) THEN
        EXIT(FALSE);

      lResult := lObjectFieldToolkit.TableLookup(pQuickReportHeader."Table ID");
      IF (lResult) THEN
      BEGIN
        pQuickReportHeader.VALIDATE("Table ID");
        pQuickReportHeader.MODIFY(TRUE);
        COMMIT;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE CheckSourceTypeIsTable@1000000020(VAR pQuickReportHeader@1000000000 : Record 9062697);
    BEGIN
      //DOC NA2015.7 - Checking if source type is "Table"
      //  <> pQuickReportHeader: The quick report (can be modified)

      IF (pQuickReportHeader."Data From" = pQuickReportHeader."Data From"::"0") THEN
        pQuickReportHeader."Data From" := pQuickReportHeader."Data From"::Table;
      pQuickReportHeader.TESTFIELD("Data From", pQuickReportHeader."Data From"::Table);
    END;

    PROCEDURE "-- Quick Report Card Fields ---"@1000000013();
    BEGIN
    END;

    PROCEDURE ClearAllGrouping@1000000017(pQuickReportField@1000000000 : Record 9062698) : Boolean;
    VAR
      eConfirmation@1000000001 : TextConst 'ENU=Do you want to clear all grouping?;ENG=Do you want to clear all grouping?';
      lQuickReportField@1000000002 : Record 9062698;
    BEGIN
      //DOC NA2015.7 - Claring all grouping
      //  -> pQuickReportField: THe current quick report field
      //  <- TRUE = Cleared, FALSE = Cancelled

      pQuickReportField.TESTFIELD("Quick Report Code");

      IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
        EXIT(FALSE);

      lQuickReportField.RESET();
      IF (lQuickReportField.FINDSET(TRUE)) THEN
      REPEAT
        lQuickReportField.VALIDATE(Grouping, lQuickReportField.Grouping::" ");
        lQuickReportField.MODIFY(TRUE);
      UNTIL (lQuickReportField.NEXT() = 0);

      EXIT(TRUE);
    END;

    PROCEDURE ClearAllSorting@1000000022(pQuickReportField@1000000000 : Record 9062698) : Boolean;
    VAR
      eConfirmation@1000000001 : TextConst 'ENU=Do you want to clear all sorting?;ENG=Do you want to clear all sorting?';
      lQuickReportField@1000000002 : Record 9062698;
    BEGIN
      //DOC NA2015.7 - Claring all sorting
      //  -> pQuickReportField: THe current quick report field
      //  <- TRUE = Cleared, FALSE = Cancelled

      pQuickReportField.TESTFIELD("Quick Report Code");

      IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
        EXIT(FALSE);

      lQuickReportField.RESET();
      IF (lQuickReportField.FINDSET(TRUE)) THEN
      REPEAT
        lQuickReportField.VALIDATE(Sorting, 0);
        lQuickReportField.MODIFY(TRUE);
      UNTIL (lQuickReportField.NEXT() = 0);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "--- Validation and Lookup ---"@1000000007();
    BEGIN
    END;

    PROCEDURE QuickReportName@1000000042(pQuickReportCode@1000000001 : Code[60]) : Text[50];
    BEGIN
      //DOC NA2015.8 - Returning quick report name
      //  -> pQuickReportCode: Quick report code
      //  <- The name

      IF ( NOT (QuickReportHeader.GET(pQuickReportCode))) THEN
        CLEAR(QuickReportHeader);
      EXIT(QuickReportHeader.Name);
    END;

    PROCEDURE ValidateQuickReportCode@1000000016(pQuickReportCode@1000000003 : Code[60]);
    VAR
      eUknownQuickReport@1000000002 : TextConst 'ENU=Quick report "%1" doesn''t exist.;ENG=Quick report "%1" doesn''t exist.';
    BEGIN
      //DOC NA2015.8 - Validating quick report code
      //  -> pQuickReportCode: Quick report code

      IF ( NOT (TryToValidateQuickReportCode(pQuickReportCode))) THEN
        ERROR(eUknownQuickReport, pQuickReportCode);
    END;

    PROCEDURE TryToValidateQuickReportCode@1000000117(pQuickReportCode@1000000002 : Code[60]) : Boolean;
    BEGIN
      //DOC NA2015.8 - Trying to validate quick report code
      //  -> pQuickReportCode: Quick report code
      //  <- Result

      IF (pQuickReportCode = '') THEN
        EXIT(TRUE);

      EXIT(QuickReportHeader.GET(pQuickReportCode));
    END;

    PROCEDURE ValidateQuickReportName@1000000029(VAR pQuickReportCode@1000000007 : Code[60];VAR pQuickReportName@1000000002 : Text[50];pExactMatch@1000000006 : Boolean);
    VAR
      eUnknownQuickReport@1000000004 : TextConst 'ENU=Unknown quick report: "%1";ENG=Unknown quick report: "%1"';
      lErrorMessage@1000000005 : Text[1024];
    BEGIN
      //DOC NA2015.8 - Validating quick report name (advanced version)
      //  <> pQuickReportCode: Source / target quick report code
      //  <> pQuickReportName: Source / target quick report name
      //  -> pExactMatch: Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)

      IF ( NOT (TryToValidateQuickReportName(pQuickReportCode, pQuickReportName, pExactMatch))) THEN
        ERROR(eUnknownQuickReport, pQuickReportName);
    END;

    PROCEDURE TryToValidateQuickReportName@1000000113(VAR pQuickReportCode@1000000008 : Code[60];VAR pQuickReportName@1000000007 : Text[50];pExactMatch@1000000006 : Boolean) : Boolean;
    VAR
      eUnknownObjectType@1000000003 : TextConst 'ENU=Unknown %1: "%2";ENG=Unknown %1: "%2"';
      eUnknownObject@1000000004 : TextConst 'ENU=Unknown object: "%1";ENG=Unknown object: "%1"';
      lResult@1000000005 : Boolean;
      lNameFilter@1000000000 : ARRAY [4] OF Text;
      lNameMaxIndex@1000000001 : Integer;
      lNameIndex@1000000009 : Integer;
    BEGIN
      //DOC NA2015.8 - Trying to validate quick report name (advanced version)
      //  <> pQuickReportCode: Source / target quick report code
      //  <> pQuickReportName: Source / target quick report name
      //  -> pExactMatch: Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)
      //  <- Result

      lResult := FALSE;

      IF (pQuickReportName <> '') THEN
      BEGIN
        lNameFilter[1] := pQuickReportName;
        IF ( NOT (pExactMatch)) THEN
        BEGIN
          lNameFilter[2] := '@' + pQuickReportName;
          lNameFilter[3] := '@' + pQuickReportName + '*';
          lNameFilter[4] := '@*' + pQuickReportName + '*';
          lNameMaxIndex := 4;
        END
        ELSE
          lNameMaxIndex := 1;

        FOR lNameIndex := 1 TO lNameMaxIndex DO
        BEGIN
          QuickReportHeader.RESET();
          QuickReportHeader.SETFILTER(Name, lNameFilter[lNameIndex]);
          lResult := QuickReportHeader.FINDFIRST();
          IF (lResult) THEN
            lNameIndex := lNameMaxIndex;
        END;

        IF (lResult) THEN
        BEGIN
          pQuickReportCode := QuickReportHeader.Code;
          pQuickReportName := QuickReportHeader.Name;
        END;
      END
      ELSE
      BEGIN
        CLEAR(pQuickReportCode);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE QuickReportLookup@1000000075(VAR pQuickReportCode@1000000000 : Code[60]) : Boolean;
    VAR
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NA2015.8 - Lookup for quick reports (advanced version)
      //  <> pQuickReportCode: Source / target quick report code
      //  <- Lookup result

      lResult := FALSE;

      QuickReportHeader.RESET();
      IF (pQuickReportCode <> '') THEN
      BEGIN
        QuickReportHeader.SETRANGE(Code, pQuickReportCode);
        IF (QuickReportHeader.FINDFIRST()) THEN;
        QuickReportHeader.SETRANGE(Code);
      END;

      IF (PAGE.RUNMODAL(0, QuickReportHeader) = ACTION::LookupOK) THEN
      BEGIN
        pQuickReportCode := QuickReportHeader.Code;
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE "--- Retrieving Information ---"@9062229();
    BEGIN
    END;

    PROCEDURE FindTableAndField@9062236(pQuickReportData@9062229 : Record 9062699;pTableId@9062236 : Integer;pFieldId@9062237 : Integer) : Integer;
    BEGIN
      //DOC NA2016.10 - Trying to find table and field within quick report using quick report data
      //  -> pQuickReportData: Quick report data record
      //  -> pTableId: Table ID
      //  -> pFieldId: Field ID
      //  <- Field index found or 0 if not found

      EXIT(FindTableAndFieldAdv(pQuickReportData, pTableId, TableField."Field Type"::Field, pFieldId));
    END;

    PROCEDURE FindTableAndEnhancedField@9062237(pQuickReportData@9062229 : Record 9062699;pTableId@9062236 : Integer;pFieldId@9062237 : Integer) : Integer;
    BEGIN
      //DOC NA2016.10 - Trying to find table and ehanced field within quick report using quick report data
      //  -> pQuickReportData: Quick report data record
      //  -> pTableId: Table ID
      //  -> pFieldId: Field ID
      //  <- Field index found or 0 if not found

      EXIT(FindTableAndFieldAdv(pQuickReportData, pTableId, TableField."Field Type"::"Enhanced Field", pFieldId));
    END;

    PROCEDURE FindTableAndFieldAdv@9062233(pQuickReportData@9062229 : Record 9062699;pTableId@9062236 : Integer;pFieldType@9062238 : Integer;pFieldId@9062237 : Integer) : Integer;
    VAR
      lQuickReportHeader@9062231 : Record 9062697;
      lQuickReportField@9062230 : Record 9062698;
      eNoTable@9062232 : TextConst 'ENU=Quick report "%1" is not based on "%2" table.;ENG=Quick report "%1" is not based on "%2" table.';
      lFieldIndex@9062233 : Integer;
      lCurrentFieldIndex@9062234 : Integer;
      eNoField@9062235 : TextConst 'ENU=Quick report "%1" lacks "%2"."%3" field in its definition.;ENG=Quick report "%1" lacks "%2"."%3" field in its definition.';
    BEGIN
      //DOC NA2016.10 - Trying to find table and field within quick report using quick report data (advanced version)
      //  -> pQuickReportData: Quick report data record
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type
      //  -> pFieldId: Field ID
      //  <- Field index found or 0 if not found

      IF ((pQuickReportData."Quick Report Code" = QuickReportCode) AND (QuickReportFieldIndex > 0)) THEN
        EXIT(QuickReportFieldIndex);

      IF ((pTableId = 0) OR (pFieldId = 0)) THEN
        EXIT(0);

      QuickReportCode := pQuickReportData."Quick Report Code";

      lQuickReportHeader.GET(QuickReportCode);
      IF (lQuickReportHeader."Table ID" <> DATABASE::Customer) THEN
        ERROR(eNoTable, QuickReportCode, ObjectFieldToolkit.GetTableName(pTableId));

      lFieldIndex := 0;
      lCurrentFieldIndex := 0;
      lQuickReportField.RESET();
      lQuickReportField.SETCURRENTKEY("Quick Report Code", Blocked, Sequence, ID);
      lQuickReportField.SETRANGE("Quick Report Code", QuickReportCode);
      lQuickReportField.SETRANGE(Blocked, FALSE);
      IF (lQuickReportField.FINDSET()) THEN
      REPEAT
        lCurrentFieldIndex += 1;
        IF ((lQuickReportField."Field Type" = lQuickReportField."Field Type"::Field) AND
            (lQuickReportField."Field ID" = pFieldId)) THEN
          lFieldIndex := lCurrentFieldIndex;
      UNTIL ((lQuickReportField.NEXT() = 0) OR (lFieldIndex > 0));

      IF (lFieldIndex > 0) THEN
        QuickReportFieldIndex := lFieldIndex
      ELSE
        ERROR(eNoField, QuickReportCode, ObjectFieldToolkit.GetTableName(pTableId), ObjectFieldToolkit.GetFieldNameAdv(pTableId, pFieldType, pFieldId));

      EXIT(QuickReportFieldIndex);
    END;

    PROCEDURE GetDecimalFieldValue@9062247(pQuickReportData@9062229 : Record 9062699;pTableId@9062232 : Integer;pFieldType@9062231 : Integer;pFieldId@9062230 : Integer) : Decimal;
    BEGIN
      //DOC NA2016.10 - Returning decimal field from quick report data for given table and field IDs
      //  -> pQuickReportData: The data
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type
      //  -> pFieldId: Field ID
      //  <- The field value

      FindTableAndFieldAdv(pQuickReportData, pTableId, pFieldType, pFieldId);
      EXIT(pQuickReportData.GetDecimalField(QuickReportFieldIndex));
    END;

    PROCEDURE GetTextFieldValue@9062246(pQuickReportData@9062229 : Record 9062699;pTableId@9062232 : Integer;pFieldType@9062231 : Integer;pFieldId@9062230 : Integer) : Text;
    BEGIN
      //DOC NA2016.10 - Returning boolean field from quick report data for given table and field IDs
      //  -> pQuickReportData: The data
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type
      //  -> pFieldId: Field ID
      //  <- The field value

      FindTableAndFieldAdv(pQuickReportData, pTableId, pFieldType, pFieldId);
      EXIT(pQuickReportData.GetTextField(QuickReportFieldIndex));
    END;

    PROCEDURE GetDateFieldValue@9062245(pQuickReportData@9062229 : Record 9062699;pTableId@9062232 : Integer;pFieldType@9062231 : Integer;pFieldId@9062230 : Integer) : Date;
    BEGIN
      //DOC NA2016.10 - Returning boolean field from quick report data for given table and field IDs
      //  -> pQuickReportData: The data
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type
      //  -> pFieldId: Field ID
      //  <- The field value

      FindTableAndFieldAdv(pQuickReportData, pTableId, pFieldType, pFieldId);
      EXIT(pQuickReportData.GetDateField(QuickReportFieldIndex));
    END;

    PROCEDURE GetDateTimeFieldValue@9062243(pQuickReportData@9062229 : Record 9062699;pTableId@9062232 : Integer;pFieldType@9062231 : Integer;pFieldId@9062230 : Integer) : DateTime;
    BEGIN
      //DOC NA2016.10 - Returning boolean field from quick report data for given table and field IDs
      //  -> pQuickReportData: The data
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type
      //  -> pFieldId: Field ID
      //  <- The field value

      FindTableAndFieldAdv(pQuickReportData, pTableId, pFieldType, pFieldId);
      EXIT(pQuickReportData.GetDateTimeField(QuickReportFieldIndex));
    END;

    PROCEDURE GetCodeFieldValue@9062242(pQuickReportData@9062229 : Record 9062699;pTableId@9062232 : Integer;pFieldType@9062231 : Integer;pFieldId@9062230 : Integer) : Code[1024];
    BEGIN
      //DOC NA2016.10 - Returning code field from quick report data for given table and field IDs
      //  -> pQuickReportData: The data
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type
      //  -> pFieldId: Field ID
      //  <- The field value

      FindTableAndFieldAdv(pQuickReportData, pTableId, pFieldType, pFieldId);
      EXIT(pQuickReportData.GetCodeField(QuickReportFieldIndex));
    END;

    LOCAL PROCEDURE "--- Maintenance ---"@1000000011();
    BEGIN
    END;

    LOCAL PROCEDURE ConvertOldFieldDataTypes@1000000018();
    VAR
      eConfirmation@1000000000 : TextConst 'ENU=Do you want to convert old field data types to new ones?;ENG=Do you want to convert old field data types to new ones?';
      lConverted@1000000001 : Boolean;
      lCounter@1000000002 : Integer;
      eConverted@1000000003 : TextConst 'ENU=%1 fields have been converted.;ENG=%1 fields have been converted.';
      eNoFieldsConverted@1000000004 : TextConst 'ENU=No fields have been converted.;ENG=No fields have been converted.';
    BEGIN
      //DOC NA2016.14 - Converting old field data types for all existing quick report fields
      //                    Old field data types: 0 = (Empty), 1 = Boolean, 2 = Integer, 3 = Decimal, 4 = Text, 5 = Date, 6 = Time, 7 = DateTime, 8 = Code
      //                    New field data types: 0 = (Empty), 3 = Decimal, 4 = Text, 5 = Date, 7 = DateTime, 8 = Code
      //                    Integer is represented as Decimal, Boolean and Time - as formatted text

      IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
        EXIT;

      QuickReportField.RESET();
      IF (QuickReportField.FINDSET()) THEN
      REPEAT
        lConverted := FALSE;
        CASE (QuickReportField."Quick Report Data Type") OF
          1, {old Boolean}
          6: {old Time}
            BEGIN
              QuickReportField.VALIDATE("Quick Report Data Type", QuickReportField."Quick Report Data Type"::Text);
              QuickReportField.VALIDATE("Data Type Conversion", QuickReportField."Data Type Conversion"::Format);
              lConverted := TRUE;
            END;
          2: {old Integer}
            BEGIN
              QuickReportField.VALIDATE("Quick Report Data Type", QuickReportField."Quick Report Data Type"::Decimal);
              lConverted := TRUE;
            END;
        END;
        IF (lConverted) THEN
        BEGIN
          QuickReportField.MODIFY(TRUE);
          lCounter += 1;
        END;
      UNTIL (QuickReportField.NEXT() = 0);

      IF (lCounter > 0) THEN
        MESSAGE(eConverted, lCounter)
      ELSE
        MESSAGE(eNoFieldsConverted);
    END;

    LOCAL PROCEDURE UpdateFieldDataTypes@1000000030();
    VAR
      lCounter@1000000000 : Integer;
      eConfirmation@1000000003 : TextConst 'ENU=Do you want to update all field data types?;ENG=Do you want to update all field data types?';
      eUpdated@1000000002 : TextConst 'ENU=%1 fields have been updated.;ENG=%1 fields have been updated.';
      eNoFieldsUpdated@1000000001 : TextConst 'ENU=No fields have been updated.;ENG=No fields have been updated.';
      lFieldDataType@1000000004 : Integer;
      lFieldLength@1000000005 : Integer;
      lQuickReportDataType@1000000006 : Integer;
      lQuickReportLength@1000000007 : Integer;
      lDataTypeConversion@1000000008 : Integer;
    BEGIN
      //DOC NA2016.14 - Updating field data types (for all fields)

      IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
        EXIT;

      QuickReportField.RESET();
      IF (QuickReportField.FINDSET()) THEN
      REPEAT
        QuickReportHeader.GET(QuickReportField."Quick Report Code");

        lFieldDataType := QuickReportField."Field Data Type";
        lFieldLength := QuickReportField."Field Length";
        lQuickReportDataType := QuickReportField."Quick Report Data Type";
        lQuickReportLength := QuickReportField."Quick Report Length";
        lDataTypeConversion := QuickReportField."Data Type Conversion";

        IF (QuickReportField."Field From" = QuickReportField."Field From"::Data) THEN
          CASE (QuickReportHeader."Data From") OF
            QuickReportHeader."Data From"::Table:
              QuickReportField.VALIDATE("Field ID");
            ELSE
              QuickReportField.VALIDATE("Field Name");
          END
        ELSE
          QuickReportField.VALIDATE("Field ID");
        QuickReportField.MODIFY();

        IF ((lFieldDataType <> QuickReportField."Field Data Type") OR (lFieldLength <> QuickReportField."Field Length") OR
            (lQuickReportDataType <> QuickReportField."Quick Report Data Type") OR (lQuickReportLength <> QuickReportField."Quick Report Length") OR
            (lDataTypeConversion <> QuickReportField."Data Type Conversion")) THEN
          lCounter += 1;
      UNTIL (QuickReportField.NEXT() = 0);

      IF (lCounter > 0) THEN
        MESSAGE(eUpdated, lCounter)
      ELSE
        MESSAGE(eNoFieldsUpdated);
    END;

    BEGIN
    {
      //DOC NA2015.7  JH 15/05/2015 - Created
      //DOC NA2015.8  JH 22/06/2015 - Validation and lookup added
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.12 JH 22/01/2016 - Fixes, amendments
      //DOC NA2016.12 JH 28/01/2016 - Multi-adding fields improved
      //DOC NA2016.14 JH 21/02/2016 - Integer represented as Decimal, Boolean and Time as Text; auto-update added
      //DOC NA2016.14 JH 14/03/2016 - Fixes
    }
    END.
  }
}

