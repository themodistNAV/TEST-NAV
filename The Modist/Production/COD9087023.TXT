OBJECT Codeunit 9087023 Transfer Matrix Management
{
  OBJECT-PROPERTIES
  {
    Date=05/10/16;
    Time=11:28:54 AM;
    Version List=NS2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Item@1000000010 : Record 27;
      ItemMatrixBuffer@1000000002 : Record 9087029;
      SizeGroup@1000000019 : Record 9087001;
      Size@1000000031 : Record 9087002;
      Style@1000000022 : Record 9087012;
      TransferSummaryLine@1000000006 : Record 9087032;
      TransferLine@1000000008 : Record 5741;
      TnpToolkit@1000000000 : Codeunit 9062230;
      DocumentNo@1000000005 : Code[20];
      StyleNo@1000000004 : Code[20];
      ItemNo@1000000003 : Code[20];
      SetSize@1000000011 : Integer;
      SetMaxIndex@1000000018 : Integer;
      SetStartIndex@1000000017 : Integer;
      SetEndIndex@1000000016 : Integer;
      SetCode@1000000001 : ARRAY [20] OF Code[20];
      Show@1000000033 : Integer;
      DataType@1000000007 : Integer;

    PROCEDURE "--- General Methods ---"@1000000003();
    BEGIN
    END;

    PROCEDURE InitialiseForTransferSummaryLine@1000000012(pTransferSummaryLine@1000000000 : Record 9087032);
    BEGIN
      //DOC NS2015.1 - Initialising the page for transfer summary line
      //  -> pTransferSummaryLine: The line

      TransferSummaryLine := pTransferSummaryLine;

      TransferSummaryLine.TESTFIELD("Document No.");
      TransferSummaryLine.TESTFIELD("Item No.");

      Initialise(TransferSummaryLine."Document No.", TransferSummaryLine."Style No.", TransferSummaryLine."Item No.");
    END;

    PROCEDURE InitialiseForTransferLine@1000000013(pTransferLine@1000000000 : Record 5741);
    BEGIN
      //DOC NS2015.1 - Initialising the page for transfer line
      //  -> pTransferLine: The line

      TransferLine := pTransferLine;

      TransferLine.TESTFIELD("Document No.");
      TransferLine.TESTFIELD("Item No.");

      Initialise(TransferLine."Document No.", TransferLine."Style No.", TransferLine."Item No.");
    END;

    LOCAL PROCEDURE Initialise@1000000000(pDocumentNo@1000000003 : Code[20];pStyleNo@1000000000 : Code[20];pItemNo@1000000001 : Code[20]);
    BEGIN
      //DOC NS2015.1 - Initialising the page
      //  -> pDocumentNo: Document no.
      //  -> pStyleNo: Style no.
      //  -> pItemNo: Item no.

      DocumentNo := pDocumentNo;
      StyleNo := pStyleNo;
      ItemNo := pItemNo;

      IF (StyleNo <> '') THEN
      BEGIN
        Style.GET(StyleNo);
        Style.TESTFIELD("Size Group Code");
        SizeGroup.GET(Style."Size Group Code");
      END
      ELSE
      BEGIN
        Item.GET(ItemNo);
        Item.TESTFIELD("Size Group Code");
        SizeGroup.GET(Item."Size Group Code");
      END;
    END;

    PROCEDURE CreateRecords@1000000008(pShow@1000000000 : Integer;pSetSize@1000000004 : Integer;pDataType@1000000003 : Integer;VAR pItemMatrixBuffer@1000000001 : Record 9087029);
    VAR
      lItemMatrixBufferId@1000000002 : Integer;
    BEGIN
      //DOC NS2015.1 - Creating records
      //  -> pShow: Flag what to show
      //  -> pSetSize: Set size (how many columns)
      //  -> pDataType: Data type
      //  <> pItemMatrixBuffer: Target item matrix buffer recordset

      Show := pShow;
      SetSize := pSetSize;
      DataType := pDataType;

      pItemMatrixBuffer.RESET();
      pItemMatrixBuffer.DELETEALL();
      lItemMatrixBufferId := 0;

      IF (StyleNo <> '') THEN
      BEGIN
        Item.RESET();
        Item.SETCURRENTKEY("Style No.");
        Item.SETRANGE("Style No.", StyleNo);
        IF (Item.FINDSET()) THEN
        REPEAT
          CreateRecord(Item, pItemMatrixBuffer, lItemMatrixBufferId);
        UNTIL (Item.NEXT() = 0);
      END;

      IF (pItemMatrixBuffer.ISEMPTY) THEN
      BEGIN
        Item.GET(ItemNo);
        CreateRecord(Item, pItemMatrixBuffer, lItemMatrixBufferId);
      END;
    END;

    LOCAL PROCEDURE CreateRecord@1000000007(pItem@1000000001 : Record 27;VAR pItemMatrixBuffer@1000000000 : Record 9087029;VAR pItemMatrixBufferId@1000000002 : Integer);
    BEGIN
      //DOC NS2015.1 - Creating one record based on item
      //  -> pItem: Source item
      //  <> pItemMatrixBuffer: Target recordset
      //  <> pItemMatrixBufferId: Source / target ID

      pItemMatrixBufferId += 1;

      CLEAR(pItemMatrixBuffer);
      pItemMatrixBuffer.INIT();
      pItemMatrixBuffer.VALIDATE(ID, pItemMatrixBufferId);
      pItemMatrixBuffer.VALIDATE("Item No.", pItem."No.");
      pItemMatrixBuffer.INSERT(TRUE);
    END;

    PROCEDURE UpdateSets@1000000002(pSetUpdateMode@1000000000 : Integer;VAR pCaption@1000000004 : ARRAY [20] OF Text[100];VAR pDecimalDataEnabled@1000000003 : ARRAY [20] OF Boolean;VAR pCodeDataEnabled@1000000007 : ARRAY [20] OF Boolean;VAR pPreviousSetEnabled@1000000005 : Boolean;VAR pNextSetEnabled@1000000006 : Boolean);
    VAR
      lIndex@1000000001 : Integer;
      lIndexIncluded@1000000002 : Integer;
    BEGIN
      //DOC NS2015.1 - Updating matrix sets for given update mode
      //  -> pSetUpdateMode: Set update mode
      //  <> pCaption: Target array of captions
      //  <> pDecimalDataEnabled: Target set of "decimal data enabled" flags
      //  <> pCodeDataEnabled: Target set of "code data enabled" flags
      //  <> pPreviousSetEnabled: "Previous Set" button enabled flag
      //  <> pNextSetEnabled: "Next Set" button enabled flag

      CASE (pSetUpdateMode) OF
        ItemMatrixBuffer."Set Update Mode"::Init:
          BEGIN
            Size.RESET();
            Size.SETCURRENTKEY("Size Group Code", Sequence, Code);
            Size.SETRANGE("Size Group Code", SizeGroup.Code);
            SetMaxIndex := Size.COUNT();
            SetStartIndex := 1;
            SetEndIndex := TnpToolkit.MinInteger(SetSize, SetMaxIndex);
          END;
        ItemMatrixBuffer."Set Update Mode"::Back:
          SetStartIndex := TnpToolkit.MaxInteger(SetStartIndex - SetSize, 1);
        ItemMatrixBuffer."Set Update Mode"::Forward:
          SetStartIndex := TnpToolkit.MaxInteger(TnpToolkit.MinInteger(SetStartIndex + SetSize, SetMaxIndex - SetSize + 1), 1);
      END;
      SetEndIndex := SetStartIndex + TnpToolkit.MinInteger(SetSize, SetMaxIndex) - 1;

      pPreviousSetEnabled := (SetStartIndex > 1);
      pNextSetEnabled := (SetEndIndex < SetMaxIndex - SetSize + 1);

      CLEAR(pCaption);
      lIndex := 0;
      lIndexIncluded := 0;
      Size.RESET();
      Size.SETCURRENTKEY("Size Group Code", Sequence, Code);
      Size.SETRANGE("Size Group Code", SizeGroup.Code);
      IF (Size.FINDSET()) THEN
      REPEAT
        lIndex += 1;
        IF ((lIndex >= SetStartIndex) AND (lIndex <= SetEndIndex)) THEN
        BEGIN
          lIndexIncluded += 1;
          SetCode[lIndexIncluded] := Size.Code;
          pCaption[lIndexIncluded] := SetCode[lIndexIncluded];
        END;
      UNTIL (Size.NEXT() = 0);

      CLEAR(pCodeDataEnabled);
      CLEAR(pDecimalDataEnabled);
      CASE (DataType) OF
        ItemMatrixBuffer."Data Type"::Decimal:
          FOR lIndex := 1 TO SetSize DO
            pDecimalDataEnabled[lIndex] := (SetMaxIndex >= lIndex);
        ItemMatrixBuffer."Data Type"::Code:
          FOR lIndex := 1 TO SetSize DO
            pCodeDataEnabled[lIndex] := (SetMaxIndex >= lIndex);
      END;
    END;

    PROCEDURE ClearData@1000000006(VAR pDecimalData@1000000001 : ARRAY [10] OF Decimal;VAR pCodeData@1000000000 : ARRAY [20] OF Code[20]);
    BEGIN
      //DOC NS2015.1 - Clearing data
      //  <> pDecimalData: Target array of decimal data
      //  <> pCodeData: Target array of code data

      CLEAR(pDecimalData);
      CLEAR(pCodeData);
    END;

    PROCEDURE UpdateData@1000000004(VAR pItemMatrixBuffer@1000000002 : Record 9087029);
    BEGIN
      //DOC NS2015.1 - Updating data for the current record
      //  <> pItemMatrixBuffer: The current buffer record

      pItemMatrixBuffer.VALIDATE("No. of Lines", 0);
      pItemMatrixBuffer.VALIDATE("Total Quantity", 0);
      pItemMatrixBuffer.VALIDATE("Total Amount", 0);

      TransferSummaryLine.RESET();
      TransferSummaryLine.SETRANGE("Document No.", DocumentNo);
      TransferSummaryLine.SETRANGE("Item No.", ItemNo);
      IF (TransferSummaryLine.FINDSET()) THEN
      REPEAT
        TransferSummaryLine.CALCFIELDS("No. of Lines", "Total Quantity");
        pItemMatrixBuffer."No. of Lines" += TransferSummaryLine."No. of Lines";
        pItemMatrixBuffer.VALIDATE("No. of Lines");
        pItemMatrixBuffer."Total Quantity" += TransferSummaryLine."Total Quantity";
        pItemMatrixBuffer.VALIDATE("Total Quantity");
      UNTIL (TransferSummaryLine.NEXT() = 0);

      pItemMatrixBuffer.MODIFY(TRUE);
    END;

    PROCEDURE UpdateMatrixData@1000000005(pItemMatrixBuffer@1000000004 : Record 9087029;VAR pDecimalData@1000000005 : ARRAY [10] OF Decimal;VAR pCodeData@1000000000 : ARRAY [20] OF Code[20];VAR pStyle@1000000006 : ARRAY [20] OF Text[20]);
    VAR
      lIndex@1000000002 : Integer;
      eQuantityAllocated@1000000001 : TextConst 'ENU=%1 / %2;ENG=%1 / %2';
    BEGIN
      //DOC NS2015.1 - Updating matrix data for the current record
      //  -> pItemMatrixBuffer: The current buffer record
      //  <> pDecimalData: Target array of decimal data
      //  <> pCodeData: Target array of code data
      //  <> pStyle: Target array of styles

      CLEAR(pDecimalData);
      CLEAR(pCodeData);
      CLEAR(pStyle);

      TransferLine.RESET();
      TransferLine.SETRANGE("Document No.", DocumentNo);
      TransferLine.SETRANGE("Item No.", pItemMatrixBuffer."Item No.");

      FOR lIndex := 1 TO SetSize DO
      BEGIN
        TransferLine.SETRANGE("Variant Code", SetCode[lIndex]);
        IF (TransferLine.FINDFIRST()) THEN
          CASE (Show) OF
            pItemMatrixBuffer.Show::Quantity:
              pDecimalData[lIndex] := TransferLine.Quantity;
            pItemMatrixBuffer.Show::"Quantity to Ship":
              pDecimalData[lIndex] := TransferLine."Qty. to Ship";
            pItemMatrixBuffer.Show::"Quantity to Receive":
              pDecimalData[lIndex] := TransferLine."Qty. to Receive";
            pItemMatrixBuffer.Show::"Quantity Shipped":
              pDecimalData[lIndex] := TransferLine."Quantity Shipped";
            pItemMatrixBuffer.Show::"Quantity Received":
              pDecimalData[lIndex] := TransferLine."Quantity Received";
          END;
      END;
    END;

    PROCEDURE SetData@1000000016(VAR pItemMatrixBuffer@1000000003 : Record 9087029;pIndex@1000000000 : Integer;VAR pDecimalData@1000000006 : ARRAY [10] OF Decimal;VAR pCodeData@1000000005 : ARRAY [20] OF Code[20]);
    BEGIN
      //DOC NS2015.1 - Setting (modifying) data for the current record
      //  <> pItemMatrixBuffer: The current buffer record
      //  -> pIndex: Index (of the data; 1..20)
      //  <> pDecimalData: Target array of decimal data
      //  <> pCodeData: Target array of code data

      SetDataVerifySummaryLine(pItemMatrixBuffer);
      IF (SetDataVerifyLine(pItemMatrixBuffer, pIndex, pDecimalData, pCodeData)) THEN
        SetDataModifyLine(pItemMatrixBuffer, pIndex, pDecimalData, pCodeData);

      UpdateData(pItemMatrixBuffer);
    END;

    LOCAL PROCEDURE SetDataVerifySummaryLine@1000000015(VAR pItemMatrixBuffer@1000000001 : Record 9087029);
    VAR
      lLineNo@1000000002 : Integer;
    BEGIN
      //DOC NS2016.16 - Setting data - verifying summary line
      //  <> pItemMatrixBuffer: The current buffer record

      TransferSummaryLine.RESET();
      TransferSummaryLine.SETRANGE("Document No.", DocumentNo);
      TransferSummaryLine.SETRANGE("Item No.", pItemMatrixBuffer."Item No.");
      IF (TransferSummaryLine.ISEMPTY) THEN
      BEGIN
        TransferSummaryLine.RESET();
        TransferSummaryLine.SETRANGE("Document No.", DocumentNo);
        IF (TransferSummaryLine.FINDLAST()) THEN
          lLineNo := TransferSummaryLine."Line No." + 10000
        ELSE
          lLineNo := 10000;
        TransferSummaryLine.SETRANGE("Document No.");

        CLEAR(TransferSummaryLine);
        TransferSummaryLine.INIT();
        TransferSummaryLine.VALIDATE("Document No.", DocumentNo);
        TransferSummaryLine.VALIDATE("Line No.", lLineNo);
        TransferSummaryLine.VALIDATE("Item No.", pItemMatrixBuffer."Item No.");
        TransferSummaryLine.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE SetDataVerifyLine@1000000021(VAR pItemMatrixBuffer@1000000005 : Record 9087029;pIndex@1000000004 : Integer;VAR pDecimalData@1000000010 : ARRAY [10] OF Decimal;VAR pCodeData@1000000009 : ARRAY [20] OF Code[20]) : Boolean;
    VAR
      eDoesntExists@1000000002 : TextConst 'ENU=Transfer line with item "%1" and variant "%2" doesn''t exist. Please create such line setting appropriate quantity above zero.;ENG=Transfer line with item "%1" and variant "%2" doesn''t exist. Please create such line setting appropriate quantity above zero.';
      lVariantCode@1000000007 : Code[10];
      lLineExists@1000000008 : Boolean;
      lLineActivity@1000000006 : ' ,Create,Delete,Error';
      lLineNo@1000000003 : Integer;
    BEGIN
      //DOC NS2016.16 - Setting data - verifying line
      //  <> pItemMatrixBuffer: The current buffer record
      //  -> pIndex: Index (of the data; 1..20)
      //  <> pDecimalData: Target array of decimal data
      //  <> pCodeData: Target array of code data
      //  <- TRUE = Modify line, FALSE = Not

      lVariantCode := SetCode[pIndex];

      TransferLine.RESET();
      TransferLine.SETRANGE("Document No.", DocumentNo);
      TransferLine.SETRANGE("Item No.", pItemMatrixBuffer."Item No.");
      TransferLine.SETRANGE("Variant Code", lVariantCode);
      lLineExists := TransferLine.FINDFIRST();
      IF (Show = pItemMatrixBuffer.Show::Quantity) THEN
      BEGIN
        IF ((lLineExists) AND (pDecimalData[pIndex] = 0)) THEN
          lLineActivity := lLineActivity::Delete
        ELSE IF (( NOT (lLineExists)) AND (pDecimalData[pIndex] <> 0)) THEN
          lLineActivity := lLineActivity::Create;
      END
      ELSE
        IF ( NOT (lLineExists)) THEN
          lLineActivity:= lLineActivity::Error;

      CASE (lLineActivity) OF
        lLineActivity::Create:
          TransferSummaryLine.CreateTransferLineAdv(lLineNo, pItemMatrixBuffer."Item No.", lVariantCode, TransferLine);
        lLineActivity::Delete:
          TransferLine.DELETE(TRUE);
        lLineActivity::Error:
          ERROR(eDoesntExists, pItemMatrixBuffer."Item No.", SetCode[pIndex]);
      END;

      EXIT(lLineActivity <> lLineActivity::Delete);
    END;

    LOCAL PROCEDURE SetDataModifyLine@1000000017(VAR pItemMatrixBuffer@1000000000 : Record 9087029;pIndex@1000000003 : Integer;VAR pDecimalData@1000000002 : ARRAY [10] OF Decimal;VAR pCodeData@1000000001 : ARRAY [20] OF Code[20]);
    BEGIN
      //DOC NS2016.16 - Setting data - modifying line
      //  <> pItemMatrixBuffer: The current buffer record
      //  -> pIndex: Index (of the data; 1..20)
      //  <> pDecimalData: Target array of decimal data
      //  <> pCodeData: Target array of code data

      CASE (Show) OF
        pItemMatrixBuffer.Show::Quantity:
          IF (TransferLine.Quantity <> pDecimalData[pIndex]) THEN
          BEGIN
            TransferLine.VALIDATE(Quantity, pDecimalData[pIndex]);
            TransferLine.MODIFY(TRUE);
          END;
        pItemMatrixBuffer.Show::"Quantity to Ship":
          IF (TransferLine."Qty. to Ship" <> pDecimalData[pIndex]) THEN
          BEGIN
            TransferLine.VALIDATE("Qty. to Ship", pDecimalData[pIndex]);
            TransferLine.MODIFY(TRUE);
          END;
        pItemMatrixBuffer.Show::"Quantity to Receive":
          IF (TransferLine."Qty. to Receive" <> pDecimalData[pIndex]) THEN
          BEGIN
            TransferLine.VALIDATE("Qty. to Receive", pDecimalData[pIndex]);
            TransferLine.MODIFY(TRUE);
          END;
      END;
    END;

    PROCEDURE AssistEdit@1000000009(VAR pItemMatrixBuffer@1000000002 : Record 9087029;pIndex@1000000001 : Integer;VAR pDecimalData@1000000006 : ARRAY [10] OF Decimal;VAR pCodeData@1000000005 : ARRAY [20] OF Code[20]);
    VAR
      lLocation@1000000004 : Record 14;
      lDecimalData@1000000008 : ARRAY [20] OF Decimal;
      lCodeData@1000000007 : ARRAY [20] OF Code[20];
    BEGIN
      //DOC NS2015.1 - Performing assist edit for selected buffer record and index
      //  <> pItemMatrixBuffer: The current buffer record
      //  -> pIndex: Index (of the data; 1..20)
      //  <> pDecimalData: Source / target array of decimal data
      //  <> pCodeData: Source / target array of code data

      CASE (Show) OF
        ELSE
          BEGIN
            TransferLine.RESET();
            TransferLine.FILTERGROUP(2);
            TransferLine.SETRANGE("Document No.", DocumentNo);
            TransferLine.FILTERGROUP(0);
            TransferLine.SETRANGE("Item No.", pItemMatrixBuffer."Item No.");
            TransferLine.SETRANGE("Variant Code", SetCode[pIndex]);
            PAGE.RUN(0, TransferLine);
          END;
      END;
    END;

    PROCEDURE UpdateTotals@1000000010(pItemMatrixBuffer@1000000008 : Record 9087029;VAR pStyleTotalPresent@1000000002 : Boolean;VAR pStyleTotalQuantity@1000000007 : Decimal;VAR pItemTotalQuantity@1000000003 : Decimal);
    VAR
      lTransferHeader@1000000000 : Record 5740;
    BEGIN
      //DOC NS2015.1 - Updating totals
      //  -> pItemMatrixBuffer: The current matrix record
      //  <> pStyleTotalPresent: Style total present flag
      //  <> pStyleTotalQuantity: Style total quantity
      //  <> pItemTotalQuantity: Item total quantity

      pStyleTotalPresent := FALSE;
      pStyleTotalQuantity := 0;
      pItemTotalQuantity := 0;

      IF (lTransferHeader.GET(DocumentNo)) THEN
      BEGIN
        IF (pItemMatrixBuffer."Style No." <> '') THEN
        BEGIN
          pStyleTotalPresent := TRUE;
          lTransferHeader.SETRANGE("Style Filter", pItemMatrixBuffer."Style No.");
          lTransferHeader.CALCFIELDS("Total Quantity (Base)");
          pStyleTotalQuantity := lTransferHeader."Total Quantity (Base)";
          lTransferHeader.SETRANGE("Style Filter");
        END;
        lTransferHeader.SETRANGE("Item Filter", pItemMatrixBuffer."Item No.");
        lTransferHeader.CALCFIELDS("Total Quantity (Base)");
        pItemTotalQuantity := lTransferHeader."Total Quantity (Base)";
        lTransferHeader.SETRANGE("Item Filter");
      END;
    END;

    PROCEDURE SetAllValuesForLine@1000000011(VAR pItemMatrixBuffer@1000000000 : Record 9087029) : Boolean;
    VAR
      lDecimalValue@1000000003 : Decimal;
      lCodeValue@1000000001 : Code[20];
      lResult@1000000004 : Boolean;
    BEGIN
      //DOC NS2015.1 - Setting all values for the current line
      //  -> pItemMatrixBuffer: The current line
      //  <- Result

      lResult := FALSE;

      IF (AskForValue(lDecimalValue, lCodeValue)) THEN
      BEGIN
        SetAllValuesForRecord(pItemMatrixBuffer, lDecimalValue, lCodeValue);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE SetAllValues@1000000014(VAR pItemMatrixBuffer@1000000000 : Record 9087029) : Boolean;
    VAR
      lDecimalValue@1000000002 : Decimal;
      lCodeValue@1000000003 : Code[20];
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NS2015.1 - Setting all values
      //  <> pItemMatrixBuffer: The buffer recordset

      lResult := FALSE;

      IF (pItemMatrixBuffer.FINDSET(TRUE)) THEN
        IF (AskForValue(lDecimalValue, lCodeValue)) THEN
        REPEAT
          SetAllValuesForRecord(pItemMatrixBuffer, lDecimalValue, lCodeValue);
          lResult := TRUE;
        UNTIL(pItemMatrixBuffer.NEXT() = 0);

      EXIT(lResult);
    END;

    LOCAL PROCEDURE SetAllValuesForRecord@1000000019(VAR pItemMatrixBuffer@1000000000 : Record 9087029;pDecimalValue@1000000003 : Decimal;pCodeValue@1000000005 : Code[20]);
    VAR
      lIndex@1000000002 : Integer;
      lDecimalData@1000000001 : ARRAY [20] OF Decimal;
      lCodeData@1000000004 : ARRAY [20] OF Code[20];
    BEGIN
      //DOC NS2015.1 - Setting all values for given record
      //  -> pItemMatrixBuffer: The record
      //  -> pDecimalValue: Deicmal value to set

      FOR lIndex := SetStartIndex TO SetEndIndex DO
      BEGIN
        CASE (Show) OF
          ItemMatrixBuffer.Show::Quantity,
          ItemMatrixBuffer.Show::"Unit Price",
          ItemMatrixBuffer.Show::"Line Discount",
          ItemMatrixBuffer.Show::"Quantity to Ship",
          ItemMatrixBuffer.Show::"Quantity to Invoice":
            lDecimalData[lIndex] := pDecimalValue;
          ItemMatrixBuffer.Show::Location:
            lCodeData[lIndex] := pCodeValue;
        END;
        SetData(pItemMatrixBuffer, lIndex, lDecimalData, lCodeData);
      END;
    END;

    PROCEDURE AskForValue@1000000018(VAR pDecimalValue@1000000000 : Decimal;VAR pCodeValue@1000000004 : Code[20]) : Boolean;
    VAR
      lLocation@1000000003 : Record 14;
      lSetValue@1000000001 : Report 9087007;
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NS2015.1 - Asking for value
      //  <> pDecimalValue: Target decimal value
      //  <> pCodeValue: Target code value
      //  <- Result (TRUE = confirmed, FALSE = cancelled)

      lResult := FALSE;

      CASE (Show) OF
        ItemMatrixBuffer.Show::Quantity,
        ItemMatrixBuffer.Show::"Unit Price",
        ItemMatrixBuffer.Show::"Line Discount",
        ItemMatrixBuffer.Show::"Quantity to Ship",
        ItemMatrixBuffer.Show::"Quantity to Invoice":
          BEGIN
            CLEAR(lSetValue);
            lSetValue.Initialise(ItemMatrixBuffer.GetShowText(Show), 0);
            lSetValue.RUNMODAL();
            IF (lSetValue.OK) THEN
            BEGIN
              pDecimalValue := lSetValue.GetValue();
              lResult := TRUE;
            END;
          END;
        ItemMatrixBuffer.Show::Location:
          BEGIN
            lLocation.RESET();
            IF (PAGE.RUNMODAL(0, lLocation) = ACTION::LookupOK) THEN
            BEGIN
              pCodeValue := lLocation.Code;
              lResult := TRUE;
            END;
          END;
      END;

      EXIT(lResult);
    END;

    BEGIN
    {
      //DOC NS2015.1  JH 20/03/2014 - Created
      //DOC NS2015.3  JH 31/07/2014 - Bugfixes
      //DOC NS2016.16 JH 07/09/2016 - nSemble 2016
    }
    END.
  }
}

