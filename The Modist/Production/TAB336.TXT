OBJECT Table 336 Tracking Specification
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               TESTFIELD("Quantity Handled (Base)",0);
               TESTFIELD("Quantity Invoiced (Base)",0);
             END;

    CaptionML=[ENU=Tracking Specification;
               ENG=Tracking Specification];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ENG=Entry No.] }
    { 2   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              ENG=Item No.] }
    { 3   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code] }
    { 4   ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Quantity (Base)" * "Quantity Handled (Base)" < 0) OR
                                                                   (ABS("Quantity (Base)") < ABS("Quantity Handled (Base)"))
                                                                THEN
                                                                  FIELDERROR("Quantity (Base)",STRSUBSTNO(Text002,FIELDCAPTION("Quantity Handled (Base)")));

                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                                InitQtyToShip;
                                                                CheckSerialNoQty;

                                                                IF NOT QuantityToInvoiceIsSufficient THEN
                                                                  VALIDATE("Appl.-to Item Entry",0);
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ENG=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 7   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 8   ;   ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              ENG=Creation Date] }
    { 10  ;   ;Source Type         ;Integer       ;CaptionML=[ENU=Source Type;
                                                              ENG=Source Type] }
    { 11  ;   ;Source Subtype      ;Option        ;CaptionML=[ENU=Source Subtype;
                                                              ENG=Source Subtype];
                                                   OptionCaptionML=[ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                                    ENG=0,1,2,3,4,5,6,7,8,9,10];
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10 }
    { 12  ;   ;Source ID           ;Code20        ;CaptionML=[ENU=Source ID;
                                                              ENG=Source ID] }
    { 13  ;   ;Source Batch Name   ;Code10        ;CaptionML=[ENU=Source Batch Name;
                                                              ENG=Source Batch Name] }
    { 14  ;   ;Source Prod. Order Line;Integer    ;CaptionML=[ENU=Source Prod. Order Line;
                                                              ENG=Source Prod. Order Line] }
    { 15  ;   ;Source Ref. No.     ;Integer       ;CaptionML=[ENU=Source Ref. No.;
                                                              ENG=Source Ref. No.] }
    { 16  ;   ;Item Ledger Entry No.;Integer      ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Item Ledger Entry No.;
                                                              ENG=Item Ledger Entry No.] }
    { 17  ;   ;Transfer Item Entry No.;Integer    ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Transfer Item Entry No.;
                                                              ENG=Transfer Item Entry No.] }
    { 24  ;   ;Serial No.          ;Code20        ;OnValidate=BEGIN
                                                                IF "Serial No." <> xRec."Serial No." THEN BEGIN
                                                                  TESTFIELD("Quantity Handled (Base)",0);
                                                                  TESTFIELD("Appl.-from Item Entry",0);
                                                                  IF IsReclass THEN
                                                                    "New Serial No." := "Serial No.";
                                                                  WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                                  IF NOT SkipSerialNoQtyValidation THEN
                                                                    CheckSerialNoQty;
                                                                  InitExpirationDate;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Serial No.;
                                                              ENG=Serial No.] }
    { 28  ;   ;Positive            ;Boolean       ;CaptionML=[ENU=Positive;
                                                              ENG=Positive] }
    { 29  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENG=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                ItemJnlLine@1001 : Record 83;
                                                              BEGIN
                                                                IF "Appl.-to Item Entry" = 0 THEN
                                                                  EXIT;

                                                                IF NOT TrackingExists THEN BEGIN
                                                                  TESTFIELD("Serial No.");
                                                                  TESTFIELD("Lot No.");
                                                                END;

                                                                ItemLedgEntry.GET("Appl.-to Item Entry");
                                                                ItemLedgEntry.TESTFIELD("Item No.","Item No.");
                                                                ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");
                                                                ItemLedgEntry.TESTFIELD("Serial No.","Serial No.");
                                                                ItemLedgEntry.TESTFIELD("Lot No.","Lot No.");
                                                                IF "Source Type" = DATABASE::"Item Journal Line" THEN BEGIN
                                                                  ItemJnlLine.SETRANGE("Journal Template Name","Source ID");
                                                                  ItemJnlLine.SETRANGE("Journal Batch Name","Source Batch Name");
                                                                  ItemJnlLine.SETRANGE("Line No.","Source Ref. No.");
                                                                  ItemJnlLine.SETRANGE("Entry Type","Source Subtype");

                                                                  IF ItemJnlLine.FINDFIRST THEN
                                                                    IF ItemJnlLine."Entry Type" = ItemJnlLine."Entry Type"::Output THEN BEGIN
                                                                      ItemLedgEntry.TESTFIELD("Order Type",ItemJnlLine."Order Type"::Production);
                                                                      ItemLedgEntry.TESTFIELD("Order No.",ItemJnlLine."Order No.");
                                                                      ItemLedgEntry.TESTFIELD("Order Line No.",ItemJnlLine."Order Line No.");
                                                                      ItemLedgEntry.TESTFIELD("Entry Type",ItemJnlLine."Entry Type");
                                                                    END;
                                                                END;
                                                                IF ABS("Quantity (Base)") > ABS(ItemLedgEntry."Remaining Quantity") THEN
                                                                  ERROR(RemainingQtyErr,ItemLedgEntry.FIELDCAPTION("Remaining Quantity"),ItemLedgEntry."Entry No.",FIELDCAPTION("Quantity (Base)"));
                                                              END;

                                                   OnLookup=VAR
                                                              ItemLedgEntry@1000 : Record 32;
                                                            BEGIN
                                                              ItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Location Code");
                                                              ItemLedgEntry.SETRANGE("Item No.","Item No.");
                                                              ItemLedgEntry.SETRANGE(Positive,TRUE);
                                                              ItemLedgEntry.SETRANGE("Location Code","Location Code");
                                                              ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
                                                              ItemLedgEntry.SETRANGE("Serial No.","Serial No.");
                                                              ItemLedgEntry.SETRANGE("Lot No.","Lot No.");
                                                              ItemLedgEntry.SETRANGE(Open,TRUE);
                                                              IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN
                                                                VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.");
                                                            END;

                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENG=Appl.-to Item Entry] }
    { 40  ;   ;Warranty Date       ;Date          ;CaptionML=[ENU=Warranty Date;
                                                              ENG=Warranty Date] }
    { 41  ;   ;Expiration Date     ;Date          ;OnValidate=BEGIN
                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                                IF "Buffer Status2" = "Buffer Status2"::"ExpDate blocked" THEN BEGIN
                                                                  "Expiration Date" := xRec."Expiration Date";
                                                                  MESSAGE(Text004);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Expiration Date;
                                                              ENG=Expiration Date] }
    { 50  ;   ;Qty. to Handle (Base);Decimal      ;OnValidate=BEGIN
                                                                IF ("Qty. to Handle (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Qty. to Handle (Base)") > ABS("Quantity (Base)")
                                                                    - "Quantity Handled (Base)")
                                                                THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    "Quantity (Base)" - "Quantity Handled (Base)");

                                                                InitQtyToInvoice;
                                                                "Qty. to Handle" := CalcQty("Qty. to Handle (Base)");
                                                                CheckSerialNoQty;
                                                              END;

                                                   CaptionML=[ENU=Qty. to Handle (Base);
                                                              ENG=Qty. to Handle (Base)];
                                                   DecimalPlaces=0:5 }
    { 51  ;   ;Qty. to Invoice (Base);Decimal     ;OnValidate=BEGIN
                                                                IF ("Qty. to Invoice (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Qty. to Invoice (Base)") > ABS("Qty. to Handle (Base)"
                                                                      + "Quantity Handled (Base)" - "Quantity Invoiced (Base)"))
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    "Qty. to Handle (Base)" + "Quantity Handled (Base)" - "Quantity Invoiced (Base)");

                                                                "Qty. to Invoice" := CalcQty("Qty. to Invoice (Base)");
                                                                CheckSerialNoQty;
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice (Base);
                                                              ENG=Qty. to Invoice (Base)];
                                                   DecimalPlaces=0:5 }
    { 52  ;   ;Quantity Handled (Base);Decimal    ;CaptionML=[ENU=Quantity Handled (Base);
                                                              ENG=Quantity Handled (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 53  ;   ;Quantity Invoiced (Base);Decimal   ;CaptionML=[ENU=Quantity Invoiced (Base);
                                                              ENG=Quantity Invoiced (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 60  ;   ;Qty. to Handle      ;Decimal       ;CaptionML=[ENU=Qty. to Handle;
                                                              ENG=Qty. to Handle];
                                                   DecimalPlaces=0:5 }
    { 61  ;   ;Qty. to Invoice     ;Decimal       ;CaptionML=[ENU=Qty. to Invoice;
                                                              ENG=Qty. to Invoice];
                                                   DecimalPlaces=0:5 }
    { 70  ;   ;Buffer Status       ;Option        ;CaptionML=[ENU=Buffer Status;
                                                              ENG=Buffer Status];
                                                   OptionCaptionML=[ENU=" ,MODIFY,INSERT";
                                                                    ENG=" ,MODIFY,INSERT"];
                                                   OptionString=[ ,MODIFY,INSERT];
                                                   Editable=No }
    { 71  ;   ;Buffer Status2      ;Option        ;CaptionML=[ENU=Buffer Status2;
                                                              ENG=Buffer Status2];
                                                   OptionCaptionML=[ENU=,ExpDate blocked;
                                                                    ENG=,ExpDate blocked];
                                                   OptionString=,ExpDate blocked;
                                                   Editable=No }
    { 72  ;   ;Buffer Value1       ;Decimal       ;CaptionML=[ENU=Buffer Value1;
                                                              ENG=Buffer Value1];
                                                   Editable=No }
    { 73  ;   ;Buffer Value2       ;Decimal       ;CaptionML=[ENU=Buffer Value2;
                                                              ENG=Buffer Value2];
                                                   Editable=No }
    { 74  ;   ;Buffer Value3       ;Decimal       ;CaptionML=[ENU=Buffer Value3;
                                                              ENG=Buffer Value3];
                                                   Editable=No }
    { 75  ;   ;Buffer Value4       ;Decimal       ;CaptionML=[ENU=Buffer Value4;
                                                              ENG=Buffer Value4];
                                                   Editable=No }
    { 76  ;   ;Buffer Value5       ;Decimal       ;CaptionML=[ENU=Buffer Value5;
                                                              ENG=Buffer Value5];
                                                   Editable=No }
    { 80  ;   ;New Serial No.      ;Code20        ;OnValidate=BEGIN
                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=New Serial No.;
                                                              ENG=New Serial No.] }
    { 81  ;   ;New Lot No.         ;Code20        ;OnValidate=BEGIN
                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=New Lot No.;
                                                              ENG=New Lot No.] }
    { 900 ;   ;Prohibit Cancellation;Boolean      ;CaptionML=[ENU=Prohibit Cancellation;
                                                              ENG=Prohibit Cancellation] }
    { 5400;   ;Lot No.             ;Code20        ;OnValidate=BEGIN
                                                                IF "Lot No." <> xRec."Lot No." THEN BEGIN
                                                                  TESTFIELD("Quantity Handled (Base)",0);
                                                                  TESTFIELD("Appl.-from Item Entry",0);
                                                                  IF IsReclass THEN
                                                                    "New Lot No." := "Lot No.";
                                                                  WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                                  InitExpirationDate;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Lot No.;
                                                              ENG=Lot No.] }
    { 5401;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ENG=Variant Code] }
    { 5402;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   CaptionML=[ENU=Bin Code;
                                                              ENG=Bin Code] }
    { 5811;   ;Appl.-from Item Entry;Integer      ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF "Appl.-from Item Entry" = 0 THEN
                                                                  EXIT;

                                                                CASE "Source Type" OF
                                                                  DATABASE::"Sales Line":
                                                                    IF (("Source Subtype" IN [3,5]) AND ("Quantity (Base)" < 0)) OR
                                                                       (("Source Subtype" IN [1,2]) AND ("Quantity (Base)" > 0)) // sale
                                                                    THEN
                                                                      FIELDERROR("Quantity (Base)");
                                                                  DATABASE::"Item Journal Line":
                                                                    IF (("Source Subtype" IN [0,2,6]) AND ("Quantity (Base)" < 0)) OR
                                                                       (("Source Subtype" IN [1,3,4,5]) AND ("Quantity (Base)" > 0))
                                                                    THEN
                                                                      FIELDERROR("Quantity (Base)");
                                                                  DATABASE::"Service Line":
                                                                    IF (("Source Subtype" IN [3]) AND ("Quantity (Base)" < 0)) OR
                                                                       (("Source Subtype" IN [1,2]) AND ("Quantity (Base)" > 0))
                                                                    THEN
                                                                      FIELDERROR("Quantity (Base)");
                                                                  ELSE
                                                                    FIELDERROR("Source Subtype");
                                                                END;

                                                                IF NOT TrackingExists THEN BEGIN
                                                                  TESTFIELD("Serial No.");
                                                                  TESTFIELD("Lot No.");
                                                                END;
                                                                ItemLedgEntry.GET("Appl.-from Item Entry");
                                                                ItemLedgEntry.TESTFIELD("Item No.","Item No.");
                                                                ItemLedgEntry.TESTFIELD(Positive,FALSE);
                                                                IF ItemLedgEntry."Shipped Qty. Not Returned" + ABS("Qty. to Handle (Base)") > 0 THEN
                                                                  ItemLedgEntry.FIELDERROR("Shipped Qty. Not Returned");
                                                                ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");
                                                                ItemLedgEntry.TESTFIELD("Serial No.","Serial No.");
                                                                ItemLedgEntry.TESTFIELD("Lot No.","Lot No.");
                                                              END;

                                                   OnLookup=VAR
                                                              ItemLedgEntry@1000 : Record 32;
                                                            BEGIN
                                                              ItemLedgEntry.SETCURRENTKEY("Item No.",Positive,"Location Code","Variant Code");
                                                              ItemLedgEntry.SETRANGE("Item No.","Item No.");
                                                              ItemLedgEntry.SETRANGE(Positive,FALSE);
                                                              IF "Location Code" <> '' THEN
                                                                ItemLedgEntry.SETRANGE("Location Code","Location Code");
                                                              ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
                                                              ItemLedgEntry.SETRANGE("Serial No.","Serial No.");
                                                              ItemLedgEntry.SETRANGE("Lot No.","Lot No.");
                                                              ItemLedgEntry.SETFILTER("Shipped Qty. Not Returned",'<0');
                                                              IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN
                                                                VALIDATE("Appl.-from Item Entry",ItemLedgEntry."Entry No.");
                                                            END;

                                                   CaptionML=[ENU=Appl.-from Item Entry;
                                                              ENG=Appl.-from Item Entry];
                                                   MinValue=0 }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENG=Correction] }
    { 6505;   ;New Expiration Date ;Date          ;OnValidate=BEGIN
                                                                WMSManagement.CheckItemTrackingChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=New Expiration Date;
                                                              ENG=New Expiration Date] }
    { 7300;   ;Quantity actual Handled (Base);Decimal;
                                                   CaptionML=[ENU=Quantity actual Handled (Base);
                                                              ENG=Quantity actual Handled (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Source ID,Source Type,Source Subtype,Source Batch Name,Source Prod. Order Line,Source Ref. No.;
                                                   SumIndexFields=Qty. to Handle (Base),Qty. to Invoice (Base),Quantity Handled (Base),Quantity Invoiced (Base);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Lot No.,Serial No.                       }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1003 : TextConst 'ENU=You cannot invoice more than %1 units.;ENG=You cannot invoice more than %1 units.';
      Text001@1001 : TextConst 'ENU=You cannot handle more than %1 units.;ENG=You cannot handle more than %1 units.';
      Text002@1000 : TextConst 'ENU=must not be less than %1;ENG=must not be less than %1';
      Text003@1002 : TextConst 'ENU=%1 must be -1, 0 or 1 when %2 is stated.;ENG=%1 must be -1, 0 or 1 when %2 is stated.';
      Text004@1004 : TextConst 'ENU=Expiration date has been established by existing entries and cannot be changed.;ENG=Expiration date has been established by existing entries and cannot be changed.';
      WMSManagement@1005 : Codeunit 7302;
      Text005@1006 : TextConst 'ENU=%1 in %2 for %3 %4, %5: %6, %7: %8 is currently %9. It must be %10.;ENG=%1 in %2 for %3 %4, %5: %6, %7: %8 is currently %9. It must be %10.';
      SkipSerialNoQtyValidation@1202 : Boolean;
      RemainingQtyErr@1007 : TextConst 'ENU=The %1 in item ledger entry %2 is too low to cover %3.;ENG=The %1 in item ledger entry %2 is too low to cover %3.';

    PROCEDURE InitQtyToShip@15();
    BEGIN
      "Qty. to Handle (Base)" := "Quantity (Base)" - "Quantity Handled (Base)";
      "Qty. to Handle" := CalcQty("Qty. to Handle (Base)");

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToInvoice@13();
    BEGIN
      "Qty. to Invoice (Base)" := "Quantity Handled (Base)" + "Qty. to Handle (Base)" - "Quantity Invoiced (Base)";
      "Qty. to Invoice" := CalcQty("Qty. to Invoice (Base)");
    END;

    LOCAL PROCEDURE CheckSerialNoQty@1();
    BEGIN
      IF "Serial No." = '' THEN
        EXIT;
      IF NOT ("Quantity (Base)" IN [-1,0,1]) THEN
        ERROR(Text003,FIELDCAPTION("Quantity (Base)"),FIELDCAPTION("Serial No."));
      IF NOT ("Qty. to Handle (Base)" IN [-1,0,1]) THEN
        ERROR(Text003,FIELDCAPTION("Qty. to Handle (Base)"),FIELDCAPTION("Serial No."));
      IF NOT ("Qty. to Invoice (Base)" IN [-1,0,1]) THEN
        ERROR(Text003,FIELDCAPTION("Qty. to Invoice (Base)"),FIELDCAPTION("Serial No."));
    END;

    LOCAL PROCEDURE CopyPointerFilters@3(VAR ReservEntry@1000 : Record 337);
    BEGIN
      ReservEntry.COPYFILTER("Source Type","Source Type");
      ReservEntry.COPYFILTER("Source Subtype","Source Subtype");
      ReservEntry.COPYFILTER("Source ID","Source ID");
      ReservEntry.COPYFILTER("Source Batch Name","Source Batch Name");
      ReservEntry.COPYFILTER("Source Prod. Order Line","Source Prod. Order Line");
      ReservEntry.COPYFILTER("Source Ref. No.","Source Ref. No.");
    END;

    PROCEDURE CalcQty@14(BaseQty@1000 : Decimal) : Decimal;
    BEGIN
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      EXIT(ROUND(BaseQty / "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE InitExpirationDate@2();
    VAR
      ItemTrackingMgt@1001 : Codeunit 6500;
      ExpDate@1000 : Date;
      EntriesExist@1002 : Boolean;
    BEGIN
      IF ("Serial No." = xRec."Serial No.") AND ("Lot No." = xRec."Lot No.") THEN
        EXIT;

      "Expiration Date" := 0D;

      ExpDate := ItemTrackingMgt.ExistingExpirationDate("Item No.","Variant Code","Lot No.","Serial No.",FALSE,EntriesExist);
      IF EntriesExist THEN BEGIN
        "Expiration Date" := ExpDate;
        "Buffer Status2" := "Buffer Status2"::"ExpDate blocked";
      END ELSE
        "Buffer Status2" := 0;

      IF IsReclass THEN BEGIN
        "New Expiration Date" := "Expiration Date";
        "Warranty Date" := ItemTrackingMgt.ExistingWarrantyDate("Item No.","Variant Code","Lot No.","Serial No.",EntriesExist);
      END;
    END;

    PROCEDURE IsReclass@4() : Boolean;
    BEGIN
      EXIT(("Source Type" = DATABASE::"Item Journal Line") AND ("Source Subtype" = 4));
    END;

    PROCEDURE TestFieldError@5(FieldCaptionText@1000 : Text[80];CurrFieldValue@1001 : Decimal;CompareValue@1002 : Decimal);
    BEGIN
      IF CurrFieldValue = CompareValue THEN
        EXIT;

      ERROR(Text005,
        FieldCaptionText,
        TABLECAPTION,
        FIELDCAPTION("Item No."),
        "Item No.",
        FIELDCAPTION("Serial No."),
        "Serial No.",
        FIELDCAPTION("Lot No."),
        "Lot No.",
        ABS(CurrFieldValue),
        ABS(CompareValue));
    END;

    PROCEDURE SetSkipSerialNoQtyValidation@7(NewVal@1000 : Boolean);
    BEGIN
      SkipSerialNoQtyValidation := NewVal;
    END;

    PROCEDURE CheckItemTrackingQuantity@6(TableNo@1000 : Integer;DocumentType@1001 : Option;DocumentNo@1002 : Code[20];LineNo@1003 : Integer;QtyToHandleBase@1009 : Decimal;QtyToInvoiceBase@1010 : Decimal;Handle@1004 : Boolean;Invoice@1006 : Boolean);
    VAR
      ReservationEntry@1005 : Record 337;
    BEGIN
      IF QtyToHandleBase = 0 THEN
        Handle := FALSE;
      IF QtyToInvoiceBase = 0 THEN
        Invoice := FALSE;
      IF NOT (Handle OR Invoice) THEN
        EXIT;
      ReservationEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
      ReservationEntry.SETRANGE("Source Type",TableNo);
      ReservationEntry.SETRANGE("Source Subtype",DocumentType);
      ReservationEntry.SETRANGE("Source ID",DocumentNo);
      ReservationEntry.SETRANGE("Source Ref. No.",LineNo);
      ReservationEntry.SETFILTER("Item Tracking",'%1|%2',
        ReservationEntry."Item Tracking"::"Lot and Serial No.",
        ReservationEntry."Item Tracking"::"Serial No.");
      CheckItemTrackingByType(ReservationEntry,QtyToHandleBase,QtyToInvoiceBase,FALSE,Handle,Invoice);
      ReservationEntry.SETRANGE("Item Tracking",ReservationEntry."Item Tracking"::"Lot No.");
      CheckItemTrackingByType(ReservationEntry,QtyToHandleBase,QtyToInvoiceBase,TRUE,Handle,Invoice);
    END;

    LOCAL PROCEDURE CheckItemTrackingByType@12(VAR ReservationEntry@1000 : Record 337;QtyToHandleBase@1004 : Decimal;QtyToInvoiceBase@1006 : Decimal;OnlyLot@1005 : Boolean;Handle@1001 : Boolean;Invoice@1002 : Boolean);
    VAR
      TrackingSpecification@1009 : Record 336;
      HandleQtyBase@1007 : Decimal;
      InvoiceQtyBase@1008 : Decimal;
      LotsToHandleUndefined@1003 : Boolean;
      LotsToInvoiceUndefined@1010 : Boolean;
    BEGIN
      IF OnlyLot THEN BEGIN
        GetUndefinedLots(ReservationEntry,Handle,Invoice,LotsToHandleUndefined,LotsToInvoiceUndefined);
        IF NOT (LotsToHandleUndefined OR LotsToInvoiceUndefined) THEN
          EXIT;
      END;
      IF NOT ReservationEntry.FIND('-') THEN
        EXIT;
      REPEAT
        IF Handle THEN
          HandleQtyBase += ReservationEntry."Qty. to Handle (Base)";
        IF Invoice THEN
          InvoiceQtyBase += ReservationEntry."Qty. to Invoice (Base)";
      UNTIL ReservationEntry.NEXT = 0;
      TrackingSpecification.TRANSFERFIELDS(ReservationEntry);
      IF Handle THEN
        IF ABS(HandleQtyBase) > ABS(QtyToHandleBase) THEN
          TrackingSpecification.TestFieldError(FIELDCAPTION("Qty. to Handle (Base)"),HandleQtyBase,QtyToHandleBase);
      IF Invoice THEN
        IF ABS(InvoiceQtyBase) > ABS(QtyToInvoiceBase) THEN
          TrackingSpecification.TestFieldError(FIELDCAPTION("Qty. to Invoice (Base)"),InvoiceQtyBase,QtyToInvoiceBase);
    END;

    LOCAL PROCEDURE GetUndefinedLots@10(VAR ReservationEntry@1000 : Record 337;Handle@1004 : Boolean;Invoice@1005 : Boolean;VAR LotsToHandleUndefined@1006 : Boolean;VAR LotsToInvoiceUndefined@1007 : Boolean);
    VAR
      HandleLot@1003 : Code[20];
      InvoiceLot@1002 : Code[20];
      StopLoop@1008 : Boolean;
    BEGIN
      LotsToHandleUndefined := FALSE;
      LotsToInvoiceUndefined := FALSE;
      IF NOT ReservationEntry.FINDSET THEN
        EXIT;
      REPEAT
        IF Handle THEN BEGIN
          CheckLot(ReservationEntry."Qty. to Handle (Base)",ReservationEntry."Lot No.",HandleLot,LotsToHandleUndefined);
          IF LotsToHandleUndefined AND NOT Invoice THEN
            StopLoop := TRUE;
        END;
        IF Invoice THEN BEGIN
          CheckLot(ReservationEntry."Qty. to Invoice (Base)",ReservationEntry."Lot No.",InvoiceLot,LotsToInvoiceUndefined);
          IF LotsToInvoiceUndefined AND NOT Handle THEN
            StopLoop := TRUE;
        END;
        IF LotsToHandleUndefined AND LotsToInvoiceUndefined THEN
          StopLoop := TRUE;
      UNTIL StopLoop OR (ReservationEntry.NEXT = 0);
    END;

    LOCAL PROCEDURE CheckLot@16(ReservQty@1000 : Decimal;ReservLot@1003 : Code[20];VAR Lot@1001 : Code[20];VAR Undefined@1002 : Boolean);
    BEGIN
      Undefined := FALSE;
      IF ReservQty = 0 THEN
        EXIT;
      IF Lot = '' THEN
        Lot := ReservLot
      ELSE
        IF ReservLot <> Lot THEN
          Undefined := TRUE;
    END;

    LOCAL PROCEDURE QuantityToInvoiceIsSufficient@9() : Boolean;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      IF "Source Type" = DATABASE::"Sales Line" THEN BEGIN
        SalesLine.SETRANGE("Document Type","Source Subtype");
        SalesLine.SETRANGE("Document No.","Source ID");
        SalesLine.SETRANGE("Line No.","Source Ref. No.");
        IF SalesLine.FINDFIRST THEN
          EXIT("Quantity (Base)" < SalesLine."Qty. to Invoice (Base)");
      END;
    END;

    PROCEDURE TrackingExists@11() : Boolean;
    BEGIN
      EXIT(("Serial No." <> '') OR ("Lot No." <> ''));
    END;

    BEGIN
    END.
  }
}

