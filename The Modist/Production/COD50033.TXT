OBJECT Codeunit 50033 Is Returnable Order
{
  OBJECT-PROPERTIES
  {
    Date=30/07/18;
    Time=[ 2:14:55 PM];
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            {
            SalesLine.GET(SalesLine."Document Type"::Order,'SO001640',10000);
            SalesLine."Duty Amount" := 16.45;
            SalesLine."Product Tax Amount" := 10.97;
            SalesLine.MODIFY;
            }
            F8;
          END;

  }
  CODE
  {
    VAR
      SalesHeader@1000000000 : Record 36;
      SalesLine@1000000001 : Record 37;
      SalesLine2@1000000010 : Record 37;
      SalesInvoiceHeader@1000000011 : Record 112;
      SalesInvoiceLine@1000000012 : Record 113;
      SalesInvoiceLine2@1000000013 : Record 113;
      TempBlob@1000000006 : TEMPORARY Record 99008535;
      XMLWriter@1000000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlWriter";
      XMLWriterSettings@1000000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlWriterSettings";
      Encoding@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      XmlDoc@1000000002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReqBodyOutStream@1000000009 : OutStream;
      ResBodyOutStream@1000000008 : OutStream;
      RespBodyInStream@1000000007 : InStream;
      ItemJournalLine@1000000014 : Record 83;

    LOCAL PROCEDURE F1@1000000002();
    BEGIN
      SalesHeader.RESET;
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("Document Date",210118D,310118D);
      IF SalesHeader.FINDSET THEN BEGIN
        TempBlob.RESET;
        TempBlob.DELETEALL;
        TempBlob.INIT;
        TempBlob.Blob.CREATEOUTSTREAM(ReqBodyOutStream);
        TempBlob.Blob.CREATEINSTREAM(RespBodyInStream);

        XMLWriterSettings := XMLWriterSettings.XmlWriterSettings;
        XMLWriterSettings.Encoding := Encoding.UTF8;
        XMLWriterSettings.Indent := TRUE;
        XMLWriter := XMLWriter.Create(ReqBodyOutStream,XMLWriterSettings);
        XMLWriter.WriteStartElement('orders','http://www.demandware.com/xml/impex/order/2006-10-31');
        XMLWriter.WriteAttributeString('xmlns','http://www.demandware.com/xml/impex/order/2006-10-31');
        REPEAT
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine.SETRANGE(Type,SalesLine.Type::"G/L Account");
          SalesLine.SETRANGE("No.",'231025');
          IF SalesLine.FINDSET THEN BEGIN
            SalesLine2.COPYFILTERS(SalesLine);
            SalesLine2.SETRANGE(Type,SalesLine2.Type::Item);
            SalesLine2.SETRANGE("No.");
            IF SalesLine2.FINDSET THEN BEGIN
              XMLWriter.WriteStartElement('order');
              XMLWriter.WriteAttributeString('order-no',SalesHeader."No.");
              XMLWriter.WriteStartElement('product-lineitems');
              REPEAT
                XMLWriter.WriteStartElement('product-lineitem');
                IF SalesLine2."Variant Code" = 'OS' THEN
                  XMLWriter.WriteElementString('product-id',SalesLine2."No.")
                ELSE
                  XMLWriter.WriteElementString('product-id',SalesLine2."No." + '-' + SalesLine2."Variant Code");
                XMLWriter.WriteElementString('IsReturnable','false');
                XMLWriter.WriteEndElement;
              UNTIL SalesLine2.NEXT=0;
              XMLWriter.WriteEndElement;
              XMLWriter.WriteEndElement;
            END;
          END ELSE BEGIN
            SalesLine2.COPYFILTERS(SalesLine);
            SalesLine2.SETRANGE(Type,SalesLine2.Type::Item);
            SalesLine2.SETRANGE("No.");
            IF SalesLine2.FINDSET THEN BEGIN
              XMLWriter.WriteStartElement('order');
              XMLWriter.WriteAttributeString('order-no',SalesHeader."No.");
              XMLWriter.WriteStartElement('product-lineitems');
              REPEAT
                XMLWriter.WriteStartElement('product-lineitem');
                IF SalesLine2."Variant Code" = 'OS' THEN
                  XMLWriter.WriteElementString('product-id',SalesLine2."No.")
                ELSE
                  XMLWriter.WriteElementString('product-id',SalesLine2."No." + '-' + SalesLine2."Variant Code");
                XMLWriter.WriteElementString('IsReturnable','true');
                XMLWriter.WriteEndElement;
              UNTIL SalesLine2.NEXT=0;
              XMLWriter.WriteEndElement;
              XMLWriter.WriteEndElement;
            END;

          END;
        UNTIL SalesHeader.NEXT=0;
        XMLWriter.WriteEndElement;
        XMLWriter.Close;
        XMLWriter.Dispose;

        XmlDoc := XmlDoc.XmlDocument;
        XmlDoc.Load(ReqBodyOutStream);
        XmlDoc.Save('F:\IsReturnable\orders.xml');
      END;
    END;

    LOCAL PROCEDURE F2@1000000003();
    BEGIN
      SalesInvoiceHeader.RESET;
      SalesInvoiceHeader.SETRANGE("Document Date",210118D,310118D);
      IF SalesInvoiceHeader.FINDSET THEN BEGIN
        TempBlob.RESET;
        TempBlob.DELETEALL;
        TempBlob.INIT;
        TempBlob.Blob.CREATEOUTSTREAM(ReqBodyOutStream);
        TempBlob.Blob.CREATEINSTREAM(RespBodyInStream);

        XMLWriterSettings := XMLWriterSettings.XmlWriterSettings;
        XMLWriterSettings.Encoding := Encoding.UTF8;
        XMLWriterSettings.Indent := TRUE;
        XMLWriter := XMLWriter.Create(ReqBodyOutStream,XMLWriterSettings);
        XMLWriter.WriteStartElement('orders','http://www.demandware.com/xml/impex/order/2006-10-31');
        XMLWriter.WriteAttributeString('xmlns','http://www.demandware.com/xml/impex/order/2006-10-31');
        REPEAT
          SalesInvoiceLine.RESET;
          SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
          SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::"G/L Account");
          SalesInvoiceLine.SETRANGE("No.",'231025');
          IF SalesInvoiceLine.FINDSET THEN BEGIN
            SalesInvoiceLine2.COPYFILTERS(SalesInvoiceLine);
            SalesInvoiceLine2.SETRANGE(Type,SalesInvoiceLine2.Type::Item);
            SalesInvoiceLine2.SETRANGE("No.");
            IF SalesInvoiceLine2.FINDSET THEN BEGIN
              XMLWriter.WriteStartElement('order');
              XMLWriter.WriteAttributeString('order-no',SalesInvoiceHeader."Order No.");
              XMLWriter.WriteStartElement('product-lineitems');
              REPEAT
                XMLWriter.WriteStartElement('product-lineitem');
                IF SalesInvoiceLine2."Variant Code" = 'OS' THEN
                  XMLWriter.WriteElementString('product-id',SalesInvoiceLine2."No.")
                ELSE
                  XMLWriter.WriteElementString('product-id',SalesInvoiceLine2."No." + '-' + SalesInvoiceLine2."Variant Code");
                XMLWriter.WriteElementString('IsReturnable','false');
                XMLWriter.WriteEndElement;
              UNTIL SalesInvoiceLine2.NEXT=0;
              XMLWriter.WriteEndElement;
              XMLWriter.WriteEndElement;
            END;
          END ELSE BEGIN
            SalesInvoiceLine2.COPYFILTERS(SalesInvoiceLine);
            SalesInvoiceLine2.SETRANGE(Type,SalesInvoiceLine2.Type::Item);
            SalesInvoiceLine2.SETRANGE("No.");
            IF SalesInvoiceLine2.FINDSET THEN BEGIN
              XMLWriter.WriteStartElement('order');
              XMLWriter.WriteAttributeString('order-no',SalesInvoiceHeader."Order No.");
              XMLWriter.WriteStartElement('product-lineitems');
              REPEAT
                XMLWriter.WriteStartElement('product-lineitem');
                IF SalesInvoiceLine2."Variant Code" = 'OS' THEN
                  XMLWriter.WriteElementString('product-id',SalesInvoiceLine2."No.")
                ELSE
                  XMLWriter.WriteElementString('product-id',SalesInvoiceLine2."No." + '-' + SalesInvoiceLine2."Variant Code");
                XMLWriter.WriteElementString('IsReturnable','true');
                XMLWriter.WriteEndElement;
              UNTIL SalesInvoiceLine2.NEXT=0;
              XMLWriter.WriteEndElement;
              XMLWriter.WriteEndElement;
            END;
          END;
        UNTIL SalesInvoiceHeader.NEXT=0;
        XMLWriter.WriteEndElement;
        XMLWriter.Close;
        XMLWriter.Dispose;

        XmlDoc := XmlDoc.XmlDocument;
        XmlDoc.Load(ReqBodyOutStream);
        XmlDoc.Save('F:\IsReturnable\orders2.xml');
      END;
    END;

    LOCAL PROCEDURE F3@1000000000();
    BEGIN
      SalesHeader.RESET;
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("Document Date",010218D,270218D);
      IF SalesHeader.FINDSET THEN BEGIN
        TempBlob.RESET;
        TempBlob.DELETEALL;
        TempBlob.INIT;
        TempBlob.Blob.CREATEOUTSTREAM(ReqBodyOutStream);
        TempBlob.Blob.CREATEINSTREAM(RespBodyInStream);

        XMLWriterSettings := XMLWriterSettings.XmlWriterSettings;
        XMLWriterSettings.Encoding := Encoding.UTF8;
        XMLWriterSettings.Indent := TRUE;
        XMLWriter := XMLWriter.Create(ReqBodyOutStream,XMLWriterSettings);
        XMLWriter.WriteStartElement('orders','http://www.demandware.com/xml/impex/order/2006-10-31');
        XMLWriter.WriteAttributeString('xmlns','http://www.demandware.com/xml/impex/order/2006-10-31');
        REPEAT
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine.SETRANGE(Type,SalesLine.Type::Item);
          SalesLine.SETRANGE("No.",'231025');
          IF SalesLine.FINDSET THEN BEGIN
            SalesLine2.COPYFILTERS(SalesLine);
            SalesLine2.SETRANGE(Type,SalesLine2.Type::Item);
            SalesLine2.SETRANGE("No.");
            IF SalesLine2.FINDSET THEN BEGIN
              XMLWriter.WriteStartElement('order');
              XMLWriter.WriteAttributeString('order-no',SalesHeader."No.");
              XMLWriter.WriteStartElement('product-lineitems');
              REPEAT
                XMLWriter.WriteStartElement('product-lineitem');
                IF SalesInvoiceLine2."Variant Code" = 'OS' THEN
                  XMLWriter.WriteElementString('product-id',SalesLine2."No.")
                ELSE
                  XMLWriter.WriteElementString('product-id',SalesLine2."No." + '-' + SalesLine2."Variant Code");
                XMLWriter.WriteElementString('IsReturnable','true');
                XMLWriter.WriteEndElement;
              UNTIL SalesLine2.NEXT=0;
              XMLWriter.WriteEndElement;
              XMLWriter.WriteEndElement;
            END;
          END ELSE BEGIN
            SalesLine2.COPYFILTERS(SalesLine);
            SalesLine2.SETRANGE(Type,SalesLine2.Type::Item);
            SalesLine2.SETRANGE("No.");
            IF SalesLine2.FINDSET THEN BEGIN
              XMLWriter.WriteStartElement('order');
              XMLWriter.WriteAttributeString('order-no',SalesHeader."No.");
              XMLWriter.WriteStartElement('product-lineitems');
              REPEAT
                XMLWriter.WriteStartElement('product-lineitem');
                IF SalesLine2."Variant Code" = 'OS' THEN
                  XMLWriter.WriteElementString('product-id',SalesLine2."No.")
                ELSE
                  XMLWriter.WriteElementString('product-id',SalesLine2."No." + '-' + SalesLine2."Variant Code");
                XMLWriter.WriteElementString('IsReturnable','true');
                XMLWriter.WriteEndElement;
              UNTIL SalesLine2.NEXT=0;
              XMLWriter.WriteEndElement;
              XMLWriter.WriteEndElement;
            END;

          END;
        UNTIL SalesHeader.NEXT=0;
        XMLWriter.WriteEndElement;
        XMLWriter.Close;
        XMLWriter.Dispose;

        XmlDoc := XmlDoc.XmlDocument;
        XmlDoc.Load(ReqBodyOutStream);
        XmlDoc.Save('F:\IsReturnable\orders3.xml');
      END;
    END;

    LOCAL PROCEDURE F4@1000000001();
    BEGIN
      SalesInvoiceHeader.RESET;
      SalesInvoiceHeader.SETRANGE("Document Date",010218D,270218D);
      IF SalesInvoiceHeader.FINDSET THEN BEGIN
        TempBlob.RESET;
        TempBlob.DELETEALL;
        TempBlob.INIT;
        TempBlob.Blob.CREATEOUTSTREAM(ReqBodyOutStream);
        TempBlob.Blob.CREATEINSTREAM(RespBodyInStream);

        XMLWriterSettings := XMLWriterSettings.XmlWriterSettings;
        XMLWriterSettings.Encoding := Encoding.UTF8;
        XMLWriterSettings.Indent := TRUE;
        XMLWriter := XMLWriter.Create(ReqBodyOutStream,XMLWriterSettings);
        XMLWriter.WriteStartElement('orders','http://www.demandware.com/xml/impex/order/2006-10-31');
        XMLWriter.WriteAttributeString('xmlns','http://www.demandware.com/xml/impex/order/2006-10-31');
        REPEAT
          SalesInvoiceLine.RESET;
          SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
          SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::"G/L Account");
          SalesInvoiceLine.SETRANGE("No.",'231025');
          IF SalesInvoiceLine.FINDSET THEN BEGIN
            SalesInvoiceLine2.COPYFILTERS(SalesInvoiceLine);
            SalesInvoiceLine2.SETRANGE(Type,SalesInvoiceLine2.Type::Item);
            SalesInvoiceLine2.SETRANGE("No.");
            IF SalesInvoiceLine2.FINDSET THEN BEGIN
              XMLWriter.WriteStartElement('order');
              XMLWriter.WriteAttributeString('order-no',SalesInvoiceHeader."Order No.");
              XMLWriter.WriteStartElement('product-lineitems');
              REPEAT
                XMLWriter.WriteStartElement('product-lineitem');
                IF SalesInvoiceLine2."Variant Code" = 'OS' THEN
                  XMLWriter.WriteElementString('product-id',SalesInvoiceLine2."No.")
                ELSE
                  XMLWriter.WriteElementString('product-id',SalesInvoiceLine2."No." + '-' + SalesInvoiceLine2."Variant Code");
                XMLWriter.WriteElementString('IsReturnable','true');
                XMLWriter.WriteEndElement;
              UNTIL SalesInvoiceLine2.NEXT=0;
              XMLWriter.WriteEndElement;
              XMLWriter.WriteEndElement;
            END;
          END ELSE BEGIN
            SalesInvoiceLine2.COPYFILTERS(SalesInvoiceLine);
            SalesInvoiceLine2.SETRANGE(Type,SalesInvoiceLine2.Type::Item);
            SalesInvoiceLine2.SETRANGE("No.");
            IF SalesInvoiceLine2.FINDSET THEN BEGIN
              XMLWriter.WriteStartElement('order');
              XMLWriter.WriteAttributeString('order-no',SalesInvoiceHeader."Order No.");
              XMLWriter.WriteStartElement('product-lineitems');
              REPEAT
                XMLWriter.WriteStartElement('product-lineitem');
                IF SalesInvoiceLine2."Variant Code" = 'OS' THEN
                  XMLWriter.WriteElementString('product-id',SalesInvoiceLine2."No.")
                ELSE
                  XMLWriter.WriteElementString('product-id',SalesInvoiceLine2."No." + '-' + SalesInvoiceLine2."Variant Code");
                XMLWriter.WriteElementString('IsReturnable','true');
                XMLWriter.WriteEndElement;
              UNTIL SalesInvoiceLine2.NEXT=0;
              XMLWriter.WriteEndElement;
              XMLWriter.WriteEndElement;
            END;
          END;
        UNTIL SalesInvoiceHeader.NEXT=0;
        XMLWriter.WriteEndElement;
        XMLWriter.Close;
        XMLWriter.Dispose;

        XmlDoc := XmlDoc.XmlDocument;
        XmlDoc.Load(ReqBodyOutStream);
        XmlDoc.Save('F:\IsReturnable\orders4.xml');
      END;
    END;

    LOCAL PROCEDURE F5@1000000004();
    BEGIN
      ItemJournalLine.RESET;
      ItemJournalLine.SETRANGE("Journal Batch Name",'DEFAULT');
      ItemJournalLine.SETRANGE("Journal Template Name",'ITEM');
      ItemJournalLine.MODIFYALL("Document No.",'T00149');
    END;

    LOCAL PROCEDURE F6@1170000001();
    BEGIN
      SalesHeader.RESET;
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("Document Date",180718D,300718D);
      IF SalesHeader.FINDSET THEN BEGIN
        TempBlob.RESET;
        TempBlob.DELETEALL;
        TempBlob.INIT;
        TempBlob.Blob.CREATEOUTSTREAM(ReqBodyOutStream);
        TempBlob.Blob.CREATEINSTREAM(RespBodyInStream);

        XMLWriterSettings := XMLWriterSettings.XmlWriterSettings;
        XMLWriterSettings.Encoding := Encoding.UTF8;
        XMLWriterSettings.Indent := TRUE;
        XMLWriter := XMLWriter.Create(ReqBodyOutStream,XMLWriterSettings);
        XMLWriter.WriteStartElement('orders','http://www.demandware.com/xml/impex/order/2006-10-31');
        XMLWriter.WriteAttributeString('xmlns','http://www.demandware.com/xml/impex/order/2006-10-31');
        REPEAT
          SalesLine2.RESET;
          SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine2.SETRANGE(Type, SalesLine2.Type::Item);
          IF SalesLine2.FINDSET THEN BEGIN
            XMLWriter.WriteStartElement('order');
            XMLWriter.WriteAttributeString('order-no',SalesHeader."No.");
            XMLWriter.WriteStartElement('product-lineitems');
            REPEAT
              XMLWriter.WriteStartElement('product-lineitem');
              IF SalesLine2."Variant Code" = 'OS' THEN
                XMLWriter.WriteElementString('product-id',SalesLine2."No.")
              ELSE
                XMLWriter.WriteElementString('product-id',SalesLine2."No." + '-' + SalesLine2."Variant Code");
              GetCustomerPriceGroupForItem(SalesLine2);
              IF SalesLine2."Customer Price Group" = 'FULL'THEN // if not FULL then it returns false
                XMLWriter.WriteElementString('IsReturnable','true')
              ELSE
                XMLWriter.WriteElementString('IsReturnable','false');
              XMLWriter.WriteEndElement;
            UNTIL SalesLine2.NEXT=0;
            XMLWriter.WriteEndElement;
            XMLWriter.WriteEndElement;
          END;
        UNTIL SalesHeader.NEXT=0;
        XMLWriter.WriteEndElement;
        XMLWriter.Close;
        XMLWriter.Dispose;

        XmlDoc := XmlDoc.XmlDocument;
        XmlDoc.Load(ReqBodyOutStream);
        XmlDoc.Save('F:\IsReturnable\orders8.xml');
        //XmlDoc.Save('C:\F6.xml');
      END;
    END;

    LOCAL PROCEDURE F7@1170000000();
    BEGIN
      SalesInvoiceHeader.RESET;
      SalesInvoiceHeader.SETRANGE("Document Date",180718D,300718D);
      IF SalesInvoiceHeader.FINDSET THEN BEGIN
        TempBlob.RESET;
        TempBlob.DELETEALL;
        TempBlob.INIT;
        TempBlob.Blob.CREATEOUTSTREAM(ReqBodyOutStream);
        TempBlob.Blob.CREATEINSTREAM(RespBodyInStream);

        XMLWriterSettings := XMLWriterSettings.XmlWriterSettings;
        XMLWriterSettings.Encoding := Encoding.UTF8;
        XMLWriterSettings.Indent := TRUE;
        XMLWriter := XMLWriter.Create(ReqBodyOutStream,XMLWriterSettings);
        XMLWriter.WriteStartElement('orders','http://www.demandware.com/xml/impex/order/2006-10-31');
        XMLWriter.WriteAttributeString('xmlns','http://www.demandware.com/xml/impex/order/2006-10-31');
        REPEAT
          SalesInvoiceLine2.RESET;
          SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
          SalesInvoiceLine2.SETRANGE(Type, SalesInvoiceLine2.Type::Item);
          IF SalesInvoiceLine2.FINDSET THEN BEGIN
            XMLWriter.WriteStartElement('order');
            XMLWriter.WriteAttributeString('order-no',SalesInvoiceHeader."Order No.");
            XMLWriter.WriteStartElement('product-lineitems');
            REPEAT
              XMLWriter.WriteStartElement('product-lineitem');
              IF SalesInvoiceLine2."Variant Code" = 'OS' THEN
                XMLWriter.WriteElementString('product-id',SalesInvoiceLine2."No.")
              ELSE
                XMLWriter.WriteElementString('product-id',SalesInvoiceLine2."No." + '-' + SalesInvoiceLine2."Variant Code");
              GetCustomerPriceGroupForInvoicedItem(SalesInvoiceLine2);
              IF SalesInvoiceLine2."Customer Price Group" = 'FULL'THEN // if not FULL then it returns false
                XMLWriter.WriteElementString('IsReturnable','true')
              ELSE
                XMLWriter.WriteElementString('IsReturnable','false');
              XMLWriter.WriteEndElement;
            UNTIL SalesInvoiceLine2.NEXT=0;
            XMLWriter.WriteEndElement;
            XMLWriter.WriteEndElement;
          END;
        UNTIL SalesInvoiceHeader.NEXT=0;
        XMLWriter.WriteEndElement;
        XMLWriter.Close;
        XMLWriter.Dispose;

        XmlDoc := XmlDoc.XmlDocument;
        XmlDoc.Load(ReqBodyOutStream);
        XmlDoc.Save('F:\IsReturnable\orders9.xml');
       // XmlDoc.Save('C:\F7.xml');
      END;
    END;

    LOCAL PROCEDURE F8@1170000002();
    BEGIN
      SalesInvoiceHeader.RESET;
      //SalesInvoiceHeader.SETRANGE("Document Date",180718D,300718D);
      SalesInvoiceHeader.SETFILTER("Order No.",
      'W10090618|W10090617|W10090729|W10090728|W10090725|W10090724|W10090616|W10090723|W10090722|W10090615|W10090614|W10090721|W10090720|W10090611|W10090719|W10090718|W10090610|W10090717|W10090716|W10090715|W10090712|W10090711|W10090710|W10090708');
      IF SalesInvoiceHeader.FINDSET THEN BEGIN
        TempBlob.RESET;
        TempBlob.DELETEALL;
        TempBlob.INIT;
        TempBlob.Blob.CREATEOUTSTREAM(ReqBodyOutStream);
        TempBlob.Blob.CREATEINSTREAM(RespBodyInStream);

        XMLWriterSettings := XMLWriterSettings.XmlWriterSettings;
        XMLWriterSettings.Encoding := Encoding.UTF8;
        XMLWriterSettings.Indent := TRUE;
        XMLWriter := XMLWriter.Create(ReqBodyOutStream,XMLWriterSettings);
        XMLWriter.WriteStartElement('orders','http://www.demandware.com/xml/impex/order/2006-10-31');
        XMLWriter.WriteAttributeString('xmlns','http://www.demandware.com/xml/impex/order/2006-10-31');
        REPEAT
          SalesInvoiceLine2.RESET;
          SalesInvoiceLine2.SETRANGE("Document No.",SalesInvoiceHeader."No.");
          SalesInvoiceLine2.SETRANGE(Type, SalesInvoiceLine2.Type::Item);
          IF SalesInvoiceLine2.FINDSET THEN BEGIN
            XMLWriter.WriteStartElement('order');
            XMLWriter.WriteAttributeString('order-no',SalesInvoiceHeader."Order No.");
            XMLWriter.WriteStartElement('product-lineitems');
            REPEAT
              XMLWriter.WriteStartElement('product-lineitem');
              IF SalesInvoiceLine2."Variant Code" = 'OS' THEN
                XMLWriter.WriteElementString('product-id',SalesInvoiceLine2."No.")
              ELSE
                XMLWriter.WriteElementString('product-id',SalesInvoiceLine2."No." + '-' + SalesInvoiceLine2."Variant Code");
              GetCustomerPriceGroupForInvoicedItem(SalesInvoiceLine2);
              IF SalesInvoiceLine2."Customer Price Group" = 'FULL'THEN // if not FULL then it returns false
                XMLWriter.WriteElementString('IsReturnable','true')
              ELSE
                XMLWriter.WriteElementString('IsReturnable','false');
              XMLWriter.WriteEndElement;
            UNTIL SalesInvoiceLine2.NEXT=0;
            XMLWriter.WriteEndElement;
            XMLWriter.WriteEndElement;
          END;
        UNTIL SalesInvoiceHeader.NEXT=0;
        XMLWriter.WriteEndElement;
        XMLWriter.Close;
        XMLWriter.Dispose;

        XmlDoc := XmlDoc.XmlDocument;
        XmlDoc.Load(ReqBodyOutStream);
        XmlDoc.Save('F:\IsReturnable\orders-patch3.xml');
       // XmlDoc.Save('C:\F7.xml');
      END;
    END;

    LOCAL PROCEDURE GetCustomerPriceGroupForItem@1000000023(VAR pSalesLine@1000000000 : Record 37);
    VAR
      lSalesHeader@1000000002 : Record 36;
      lSalesPrice@1000000004 : Record 7002;
      lTmpSalesPrice@1000000003 : TEMPORARY Record 7002;
      lSalesPriceCalcMgt@1000000001 : Codeunit 7000;
    BEGIN
      //DOC TM0016 AW 22/01/18
      WITH pSalesLine DO BEGIN
        IF Type <> Type::Item THEN
          EXIT;
        IF "No." = '' THEN
          EXIT;
        IF "Unit Price" = 0 THEN
          EXIT;
        IF "Quantity (Base)" = 0 THEN
          EXIT;

        "Customer Price Group" := 'FULL';
        IF lSalesHeader.GET("Document Type","Document No.") THEN BEGIN
          lSalesPrice.RESET;
          lSalesPrice.SETRANGE("Item No.","No.");
          lSalesPrice.SETFILTER("Variant Code",'%1|%2',"Variant Code",'');
          lSalesPrice.SETFILTER("Ending Date",'%1|>=%2',0D,lSalesHeader."Order Date");
          lSalesPrice.SETFILTER("Currency Code",'%1|%2',lSalesHeader."Currency Code",'');
          IF "Unit of Measure Code" <> '' THEN
            lSalesPrice.SETFILTER("Unit of Measure Code",'%1|%2',"Unit of Measure Code",'');
          lSalesPrice.SETRANGE("Starting Date",0D,lSalesHeader."Order Date");
          lSalesPrice.SETFILTER("Unit Price",'%1..%2',("Unit Price" + ("Product Tax Amount" / "Quantity (Base)") + "Duty Amount") - 1,("Unit Price" + ("Product Tax Amount" / "Quantity (Base)") + "Duty Amount") + 1);
          IF lSalesPrice.FINDFIRST THEN
            "Customer Price Group" := lSalesPrice."Sales Code";
        END;
      END;
    END;

    LOCAL PROCEDURE GetCustomerPriceGroupForInvoicedItem@1170000003(VAR pSalesInvLine@1000000000 : Record 113);
    VAR
      lSalesInvHeader@1000000002 : Record 112;
      lSalesPrice@1000000004 : Record 7002;
      lTmpSalesPrice@1000000003 : TEMPORARY Record 7002;
      lSalesPriceCalcMgt@1000000001 : Codeunit 7000;
    BEGIN
      //DOC TM0016 AW 22/01/18
      WITH pSalesInvLine DO BEGIN
        IF Type <> Type::Item THEN
          EXIT;
        IF "No." = '' THEN
          EXIT;
        IF "Unit Price" = 0 THEN
          EXIT;
        IF "Quantity (Base)" = 0 THEN
          EXIT;

        "Customer Price Group" := 'FULL';
        IF lSalesInvHeader.GET("Document No.") THEN BEGIN
          lSalesPrice.RESET;
          lSalesPrice.SETRANGE("Item No.","No.");
          lSalesPrice.SETFILTER("Variant Code",'%1|%2',"Variant Code",'');
          lSalesPrice.SETFILTER("Ending Date",'%1|>=%2',0D,lSalesInvHeader."Order Date");
          lSalesPrice.SETFILTER("Currency Code",'%1|%2',lSalesInvHeader."Currency Code",'');
          IF "Unit of Measure Code" <> '' THEN
            lSalesPrice.SETFILTER("Unit of Measure Code",'%1|%2',"Unit of Measure Code",'');
          lSalesPrice.SETRANGE("Starting Date",0D,lSalesInvHeader."Order Date");
          lSalesPrice.SETFILTER("Unit Price",'%1..%2',("Unit Price" + ("Product Tax Amount" / "Quantity (Base)") + "Duty Amount") - 1,("Unit Price" + ("Product Tax Amount" / "Quantity (Base)") + "Duty Amount") + 1);
          IF lSalesPrice.FINDFIRST THEN
            "Customer Price Group" := lSalesPrice."Sales Code";
        END;
      END;
    END;

    EVENT XmlDoc@1000000002::NodeInserting@94(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XmlDoc@1000000002::NodeInserted@95(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XmlDoc@1000000002::NodeRemoving@96(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XmlDoc@1000000002::NodeRemoved@97(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XmlDoc@1000000002::NodeChanging@98(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XmlDoc@1000000002::NodeChanged@99(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

