OBJECT Page 11102082 OM - Check License
{
  OBJECT-PROPERTIES
  {
    Date=19/11/15;
    Time=12:00:00 PM;
    Version List=OMA10.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Check License;
               ENU=Check License;
               ESP=Check License;
               FRA=Check License;
               NLD=Licentie controleren;
               DEA=Check License];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table2000000001;
    SourceTableView=SORTING(Type,Company Name,ID)
                    WHERE(Type=FILTER(<>TableData&<>MenuSuite),
                          Company Name=FILTER(''));
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    OnOpenPage=VAR
                 Object@1000 : Record 2000000001;
                 PermissionRange@1001 : Record 2000000044;
               BEGIN
                 IF OpeningFileName <> '' THEN
                   ImportLicenseDefinition(TmpPermissionRange[1], OpeningFileName)
                 ELSE
                   IF PermissionRange.FINDSET THEN
                     REPEAT
                       TmpPermissionRange[1] := PermissionRange;
                       TmpPermissionRange[1].INSERT;
                     UNTIL PermissionRange.NEXT = 0;

                 IF FirstPostitionNo <> 0 THEN BEGIN
                   LastObjectNo[FirstPostitionType] := FirstPostitionNo;
                   ObjectType2 := FirstPostitionType;
                 END;

                 Object.SETRANGE(Type, Object.Type::"2");
                 FormsPresent := NOT Object.ISEMPTY;

                 SetObjectTypeFilter;
               END;

    OnFindRecord=VAR
                   PreviousRecord@1000 : Record 2000000001;
                   LicensePermission@1001 : Record 2000000043;
                 BEGIN
                   PreviousRecord := Rec;

                   SetLicencePermissionFilter(LicensePermission);

                   LicensePermission."Object Type" := Type;
                   LicensePermission."Object Number" := ID;

                   IF NOT LicensePermission.FIND(Which) THEN
                     EXIT(FALSE);

                   Type := LicensePermission."Object Type";
                   ID := LicensePermission."Object Number";

                   IF NOT ObjectVisible THEN
                     CASE Which OF
                       '-', '=><' :
                         WHILE NOT ObjectVisible DO
                           IF RecNext(1) = 0 THEN BEGIN
                             Rec := PreviousRecord;
                             EXIT(FALSE);
                           END;

                       '+' :
                         WHILE NOT ObjectVisible DO
                           IF RecNext(-1) = 0 THEN BEGIN
                             Rec := PreviousRecord;
                             EXIT(FALSE);
                           END;
                     END;

                   EXIT(TRUE);
                 END;

    OnNextRecord=BEGIN
                   EXIT(OnNextRecord2(Steps));
                 END;

    OnAfterGetRecord=VAR
                       Object@1000 : Record 2000000001;
                     BEGIN
                       LineStyleExpr := GetLineStyleExpr;

                       SetObjectFilter(Object);
                       Object.Type := Type;
                       Object."Company Name" := '';
                       Object.ID := ID;

                       IF Object.FIND('=') THEN
                         Rec := Object
                       ELSE BEGIN
                         INIT;
                         Name := UnusedText;
                         CASE Type OF
                           Type::"2" :
                             IF NOT Object.GET(Type::Page, '', ID) THEN
                               IF InLicenseInsertPermission(Type::Page, ID) THEN
                                 Name := UnusedBothText;

                           Type::Page :
                             IF FormsPresent THEN
                               IF NOT Object.GET(Type::"2", '', ID) THEN
                                 IF InLicenseInsertPermission(Type::"2", ID) THEN
                                   Name := UnusedBothText;
                         END;

                       END;

                       CLEAR(Permission);

                       TmpPermissionRange[2].RESET;
                       CASE ShowPermissionType OF

                         ShowPermissionType::Object :
                           TmpPermissionRange[2].SETRANGE("Object Type", Type);

                         ShowPermissionType::Data :
                           IF Type = Type::Table THEN
                             TmpPermissionRange[2].SETRANGE("Object Type", TmpPermissionRange[2]."Object Type"::TableData)
                           ELSE
                             TmpPermissionRange[2].SETRANGE("Object Type", -1);

                       END;

                       TmpPermissionRange[2].SETRANGE(From, 0, ID);
                       TmpPermissionRange[2].SETFILTER("To", '>=%1', ID);
                       IF TmpPermissionRange[2].FINDSET THEN
                         REPEAT
                           Permission[1] := TmpPermissionRange[2]."Read Permission";
                           Permission[2] := TmpPermissionRange[2]."Insert Permission";
                           Permission[3] := TmpPermissionRange[2]."Modify Permission";
                           Permission[4] := TmpPermissionRange[2]."Delete Permission";
                           Permission[5] := TmpPermissionRange[2]."Execute Permission";
                         UNTIL TmpPermissionRange[2].NEXT = 0;
                     END;

    OnInsertRecord=BEGIN
                     EXIT(FALSE);
                   END;

    OnModifyRecord=BEGIN
                     EXIT(FALSE);
                   END;

    OnDeleteRecord=BEGIN
                     EXIT(FALSE);
                   END;

    OnAfterGetCurrRecord=BEGIN
                           IF Type > 0 THEN
                             LastObjectNo[Type] := ID;
                         END;

    ActionList=ACTIONS
    {
      { 1       ;0   ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 2       ;1   ;ActionGroup;
                      CaptionML=[DEU=F&unctions;
                                 ENU=F&unctions;
                                 ESP=F&unctions;
                                 FRA=F&unctions;
                                 NLD=F&uncties;
                                 DEA=F&unctions] }
      { 3       ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[DEU=Export;
                                 ENU=Export;
                                 ESP=Export;
                                 FRA=Export;
                                 NLD=Exporteren;
                                 DEA=Export];
                      Image=ExportFile;
                      OnAction=VAR
                                 Progressbar@1000 : Codeunit 11102044;
                                 CommonDialog@1001 : Codeunit 11102059;
                                 FileHandler@1002 : Codeunit 11102097;
                                 ServerFileName@1003 : Text;
                                 ctDefaultFileName@1004 : TextConst 'DEU=license.lic;ENU=license.lic;ESP=license.lic;FRA=license.lic;NLD=clientmonitorlines.fab;DEA=license.lic';
                                 ctExporting@1005 : TextConst 'DEU=Exporting...;ENU=Exporting...;ESP=Exporting...;FRA=Exporting...;NLD=Exporteren...;DEA=Exporting...';
                               BEGIN
                                 CommonDialog.AddKnownExtension('lic');
                                 IF NOT CommonDialog.SaveFile(ExportFileName, ServerFileName, ctDefaultFileName) THEN
                                   EXIT;

                                 Progressbar.Open(ctExporting, 2);
                                 ExportLicenseDefinition(TmpPermissionRange[1], ServerFileName);
                                 Progressbar.Close;

                                 FileHandler.DownloadToClient(ServerFileName, ExportFileName, ctDefaultFileName);
                               END;
                                }
      { 4       ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[DEU=Import;
                                 ENU=Import;
                                 ESP=Import;
                                 FRA=Import;
                                 NLD=Importeren;
                                 DEA=Import];
                      Image=Import;
                      OnAction=VAR
                                 CommonDialog@1000 : Codeunit 11102059;
                                 ServerFileName@1001 : Text;
                               BEGIN
                                 CommonDialog.AddKnownExtension('lic');
                                 IF NOT CommonDialog.OpenFile(ImportFileName, ServerFileName) THEN
                                   EXIT;

                                 TmpPermissionRange[1].RESET;
                                 TmpPermissionRange[1].DELETEALL;

                                 ImportLicenseDefinition(TmpPermissionRange[1], ServerFileName);
                               END;
                                }
      { 48      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[DEU=Import Voice Permission Report;
                                 ENU=Import Voice Permission Report;
                                 ESP=Import Voice Permission Report;
                                 FRA=Import Voice Permission Report;
                                 NLD=Voice permission report importeren;
                                 DEA=Import Voice Permission Report];
                      Image=Import;
                      OnAction=VAR
                                 CommonDialog@1000 : Codeunit 11102059;
                                 ServerFileName@1001 : Text;
                               BEGIN
                                 CommonDialog.AddKnownExtension('txt');
                                 IF NOT CommonDialog.OpenFile(ImportFileName, ServerFileName) THEN
                                   EXIT;

                                 TmpPermissionRange[1].RESET;
                                 TmpPermissionRange[1].DELETEALL;

                                 ImportVoiceLicenseDefinition(ServerFileName);
                               END;
                                }
      { 6       ;2   ;ActionGroup;
                      CaptionML=[DEU=Mar&k Objects;
                                 ENU=Mar&k Objects;
                                 ESP=Mar&k Objects;
                                 FRA=Mar&k Objects;
                                 NLD=Objecten markere&n;
                                 DEA=Mar&k Objects];
                      Image=EditFilter }
      { 7       ;3   ;Action    ;
                      ShortCutKey=Ctrl+M;
                      CaptionML=[DEU=Mark Objects;
                                 ENU=Mark Objects;
                                 ESP=Mark Objects;
                                 FRA=Mark Objects;
                                 NLD=Objecten markeren;
                                 DEA=Mark Objects];
                      Image=EditFilter;
                      OnAction=VAR
                                 Object@1000 : Record 2000000001;
                                 VersionControl@1001 : Codeunit 11102040;
                               BEGIN
                                 VersionControl.CheckMarkLock;

                                 CurrPage.SETSELECTIONFILTER(Object);
                                 IF Object.FINDSET THEN
                                   REPEAT
                                     VersionControl.MarkObject(Object, TRUE);
                                   UNTIL Object.NEXT = 0;
                               END;
                                }
      { 8       ;3   ;Action    ;
                      CaptionML=[DEU=Remove Marks;
                                 ENU=Remove Marks;
                                 ESP=Remove Marks;
                                 FRA=Remove Marks;
                                 NLD=Verwijder markeringen;
                                 DEA=Remove Marks];
                      Image=RemoveFilterLines;
                      OnAction=VAR
                                 Object@1000 : Record 2000000001;
                                 VersionControl@1001 : Codeunit 11102040;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Object);
                                 IF Object.FINDSET THEN
                                   REPEAT
                                     VersionControl.RemoveObjectMark(Object);
                                   UNTIL Object.NEXT = 0;

                                 VersionControl.RemoveMarkLock(TRUE);
                               END;
                                }
      { 9       ;3   ;Action    ;
                      ShortCutKey=Shift+Ctrl+M;
                      CaptionML=[DEU=Remove &all Marks;
                                 ENU=Remove &all Marks;
                                 ESP=Remove &all Marks;
                                 FRA=Remove &all Marks;
                                 NLD=Verwijder &alle markeringen;
                                 DEA=Remove &all Marks];
                      Image=ClearFilter;
                      OnAction=VAR
                                 VersionControl@1000 : Codeunit 11102040;
                               BEGIN
                                 VersionControl.RemoveObjectMarks(TRUE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 10  ;0   ;Container ;
                ContainerType=ContentArea }

    { 11  ;1   ;Group      }

    { 12  ;2   ;Field     ;
                CaptionML=[DEU=Object Type Filter;
                           ENU=Object Type Filter;
                           ESP=Object Type Filter;
                           FRA=Object Type Filter;
                           NLD=Objectsoortfilter;
                           DEA=Object Type Filter];
                SourceExpr=ObjectType2;
                OnValidate=BEGIN
                             SetObjectTypeFilter;

                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 13  ;2   ;Field     ;
                CaptionML=[DEU=In License Filter;
                           ENU=In License Filter;
                           ESP=In License Filter;
                           FRA=In License Filter;
                           NLD=In licentiefilter;
                           DEA=In License Filter];
                OptionCaptionML=[DEU=All,Free,Outside License;
                                 ENU=All,Free,Outside License;
                                 ESP=All,Free,Outside License;
                                 FRA=All,Free,Outside License;
                                 NLD=Alles,Vrije objecten,Buiten licentie;
                                 DEA=All,Free,Outside License];
                SourceExpr=ViewType;
                OnValidate=BEGIN
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 14  ;2   ;Field     ;
                CaptionML=[DEU=Show Permissions of;
                           ENU=Show Permissions of;
                           ESP=Show Permissions of;
                           FRA=Show Permissions of;
                           NLD=Toon rechten van;
                           DEA=Show Permissions of];
                OptionCaptionML=[DEU=Object,Data;
                                 ENU=Object,Data;
                                 ESP=Object,Data;
                                 FRA=Object,Data;
                                 NLD=Object,Data;
                                 DEA=Object,Data];
                SourceExpr=ShowPermissionType;
                OnValidate=BEGIN
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 15  ;2   ;Group     ;
                CaptionML=[DEU=Legend;
                           ENU=Legend;
                           ESP=Legend;
                           FRA=Legend;
                           NLD=Legenda;
                           DEA=Legend];
                GroupType=Group }

    { 16  ;3   ;Field     ;
                CaptionML=[DEU=Unused Object;
                           ENU=Unused Object;
                           ESP=Unused Object;
                           FRA=Unused Object;
                           NLD=Ongebruikt object;
                           DEA=Unused Object];
                Style=Favorable }

    { 17  ;3   ;Field     ;
                CaptionML=[DEU=Outside License;
                           ENU=Outside License;
                           ESP=Outside License;
                           FRA=Outside License;
                           NLD=Buiten licentie;
                           DEA=Outside License];
                Style=Unfavorable }

    { 18  ;3   ;Field     ;
                CaptionML=[DEU=Outside License But Can Run;
                           ENU=Outside License But Can Run;
                           ESP=Outside License But Can Run;
                           FRA=Outside License But Can Run;
                           NLD=Buiten licentie kan uitvoeren;
                           DEA=Outside License But Can Run];
                Style=Attention }

    { 19  ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 20  ;2   ;Field     ;
                SourceExpr=Type;
                Editable=False;
                StyleExpr=LineStyleExpr }

    { 21  ;2   ;Field     ;
                SourceExpr=ID;
                Editable=FALSE;
                StyleExpr=LineStyleExpr }

    { 22  ;2   ;Field     ;
                SourceExpr=Name;
                StyleExpr=LineStyleExpr }

    { 23  ;2   ;Field     ;
                SourceExpr=Caption;
                Visible=FALSE;
                StyleExpr=LineStyleExpr }

    { 24  ;2   ;Field     ;
                CaptionML=[DEU=Read;
                           ENU=Read;
                           ESP=Read;
                           FRA=Read;
                           NLD=Lezen;
                           DEA=Read];
                SourceExpr=Permission[1];
                StyleExpr=LineStyleExpr }

    { 25  ;2   ;Field     ;
                CaptionML=[DEU=Insert;
                           ENU=Insert;
                           ESP=Insert;
                           FRA=Insert;
                           NLD=Toevoegen;
                           DEA=Insert];
                SourceExpr=Permission[2];
                StyleExpr=LineStyleExpr }

    { 26  ;2   ;Field     ;
                CaptionML=[DEU=Modify;
                           ENU=Modify;
                           ESP=Modify;
                           FRA=Modify;
                           NLD=Wijzigen;
                           DEA=Modify];
                SourceExpr=Permission[3];
                StyleExpr=LineStyleExpr }

    { 27  ;2   ;Field     ;
                CaptionML=[DEU=Delete;
                           ENU=Delete;
                           ESP=Delete;
                           FRA=Delete;
                           NLD=Verwijderen;
                           DEA=Delete];
                SourceExpr=Permission[4];
                StyleExpr=LineStyleExpr }

    { 28  ;2   ;Field     ;
                CaptionML=[DEU=Execute;
                           ENU=Execute;
                           ESP=Execute;
                           FRA=Execute;
                           NLD=Uitvoeren;
                           DEA=Execute];
                SourceExpr=Permission[5];
                StyleExpr=LineStyleExpr }

    { 29  ;2   ;Field     ;
                SourceExpr=Modified;
                StyleExpr=LineStyleExpr }

    { 30  ;2   ;Field     ;
                SourceExpr="Version List";
                StyleExpr=LineStyleExpr }

    { 31  ;2   ;Field     ;
                SourceExpr=Date;
                StyleExpr=LineStyleExpr }

    { 32  ;2   ;Field     ;
                SourceExpr=Time;
                StyleExpr=LineStyleExpr }

    { 33  ;2   ;Field     ;
                BlankZero=Yes;
                SourceExpr="BLOB Size";
                Editable=FALSE;
                StyleExpr=LineStyleExpr }

    { 34  ;2   ;Field     ;
                SourceExpr=Compiled;
                Editable=FALSE;
                StyleExpr=LineStyleExpr }

    { 35  ;1   ;Field     ;
                SourceExpr=ImportFileName;
                Visible=FALSE }

    { 36  ;1   ;Field     ;
                SourceExpr=ExportFileName;
                Visible=FALSE }

    { 37  ;1   ;Field     ;
                SourceExpr=LastObjectNo[1];
                Visible=FALSE }

    { 38  ;1   ;Field     ;
                SourceExpr=LastObjectNo[3];
                Visible=FALSE }

    { 39  ;1   ;Field     ;
                SourceExpr=LastObjectNo[5];
                Visible=FALSE }

    { 40  ;1   ;Field     ;
                SourceExpr=LastObjectNo[6];
                Visible=FALSE }

    { 41  ;1   ;Field     ;
                SourceExpr=LastObjectNo[7];
                Visible=FALSE }

    { 42  ;1   ;Field     ;
                SourceExpr=LastObjectNo[8];
                Visible=FALSE }

    { 43  ;1   ;Field     ;
                SourceExpr=LastObjectNo[9];
                Visible=FALSE }

    { 44  ;0   ;Container ;
                ContainerType=FactBoxArea }

    { 45  ;1   ;Part      ;
                SubPageLink=Object Type=FIELD(Type),
                            Object No.=FIELD(ID);
                PagePartID=Page11175794;
                PartType=Page }

    { 46  ;1   ;Part      ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 47  ;1   ;Part      ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      TmpPermissionRange@1000 : ARRAY [10] OF TEMPORARY Record 2000000044;
      ExportFileName@1001 : Text;
      ImportFileName@1002 : Text;
      LineStyleExpr@1003 : Text INDATASET;
      OpeningFileName@1004 : Text;
      FirstPostitionNo@1005 : Integer;
      LastObjectNo@1006 : ARRAY [30] OF Integer;
      FirstPostitionType@1007 : Option;
      ObjectType2@1008 : 'All,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query';
      Permission@1009 : ARRAY [5] OF ' ,Yes,Indirect';
      ShowPermissionType@1010 : 'Object,Data';
      ViewType@1011 : 'All,Free,Outside License';
      FormsPresent@1012 : Boolean;

    LOCAL PROCEDURE OnNextRecord2@1(Steps@1000 : Integer) : Integer;
    VAR
      LastVisibleRecord@1001 : Record 2000000001;
      OneStep@1002 : Integer;
      StepsDone@1003 : Integer;
      EndOfLoop@1004 : Boolean;
    BEGIN
      LastVisibleRecord := Rec;

      IF Steps > 0 THEN
        OneStep := 1
      ELSE
        OneStep := -1;

      WHILE (ABS(Steps) > ABS(StepsDone)) AND NOT EndOfLoop DO BEGIN
        EndOfLoop := RecNext(OneStep) = 0;
        IF NOT EndOfLoop THEN
          IF ObjectVisible THEN BEGIN
            LastVisibleRecord := Rec;
            StepsDone += OneStep;
          END;

      END;

      Rec := LastVisibleRecord;

      EXIT(StepsDone);
    END;

    LOCAL PROCEDURE ObjectVisible@2() : Boolean;
    VAR
      Object@1000 : Record 2000000001;
      TmpObject@1001 : TEMPORARY Record 2000000001;
      InPermissionRange@1002 : Boolean;
      IsVisibleObject@1003 : Boolean;
    BEGIN
      SetObjectFilter(Object);
      Object.Type := Type;
      Object."Company Name" := '';
      Object.ID := ID;

      IsVisibleObject := Object.FIND('=');

      TmpPermissionRange[3].RESET;
      SetPermissionRangeFilter(TmpPermissionRange[3]);
      TmpPermissionRange[3].SETRANGE("Object Type", Type);
      TmpPermissionRange[3].SETFILTER(From, '<=%1', ID);
      TmpPermissionRange[3].SETFILTER("To", '>=%1', ID);
      IF ViewType = ViewType::"Outside License" THEN
        TmpPermissionRange[3].SETRANGE("Read Permission", TmpPermissionRange[3]."Read Permission"::Yes)
      ELSE
        TmpPermissionRange[3].SETRANGE("Insert Permission", TmpPermissionRange[3]."Insert Permission"::Yes);

      InPermissionRange := TmpPermissionRange[3].FINDFIRST;

      IF NOT IsVisibleObject AND InPermissionRange THEN BEGIN
        SetObjectFilter(TmpObject);
        TmpObject.Type := Type;
        TmpObject.ID := ID;
        TmpObject.INSERT;
        IF NOT TmpObject.FIND('=') THEN
          InPermissionRange := FALSE;
      END;

      CASE ViewType OF
        ViewType::All :
          EXIT(IsVisibleObject OR InPermissionRange);

        ViewType::Free :
          EXIT(NOT IsVisibleObject AND InPermissionRange);

        ViewType::"Outside License" :
          EXIT(IsVisibleObject AND NOT InPermissionRange);

      END;

      EXIT(TmpPermissionRange[3].FINDFIRST);
    END;

    LOCAL PROCEDURE SetObjectTypeFilter@3();
    BEGIN
      FILTERGROUP(12);

      CASE ObjectType2 OF

        ObjectType2::All :
          SETFILTER(Type, '<>%1&<>%2', Type::TableData, Type::MenuSuite);

        ELSE BEGIN
          SETRANGE(Type, ObjectType2);
          Type := ObjectType2;
          ID := LastObjectNo[ObjectType2];
        END;

      END;

      FILTERGROUP(0);

      IF FIND('=') THEN
        ;

      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE GetLineStyleExpr@4() : Text;
    VAR
      Object@1000 : Record 2000000001;
    BEGIN
      IF NOT Object.GET(Type, '', ID) THEN
        EXIT('Favorable');

      TmpPermissionRange[4].RESET;
      TmpPermissionRange[4].SETRANGE("Object Type", Type);
      TmpPermissionRange[4].SETFILTER(From, '<=%1', ID);
      TmpPermissionRange[4].SETFILTER("To", '>=%1', ID);
      IF NOT TmpPermissionRange[4].FINDFIRST THEN
        EXIT('Unfavorable');

      IF TmpPermissionRange[4]."Read Permission" = TmpPermissionRange[4]."Read Permission"::" " THEN
        IF TmpPermissionRange[4]."Execute Permission" = TmpPermissionRange[4]."Execute Permission"::Yes THEN
          EXIT('Attention')
        ELSE
          EXIT('Unfavorable');
    END;

    LOCAL PROCEDURE RecNext@5(Steps@1000 : Integer) : Integer;
    VAR
      Object@1001 : Record 2000000001;
      LicensePermission@1002 : Record 2000000043;
      FirstRecord@1003 : ' ,Permission From,Permission To,Object';
      InPermissionRange@1004 : Boolean;
      IsObject@1005 : Boolean;
      ObjectFound@1006 : Boolean;
      PermissionFound@1007 : Boolean;
    BEGIN
      CASE ViewType OF
        ViewType::All, ViewType::Free :
          BEGIN
            SetLicencePermissionFilter(LicensePermission);

            TmpPermissionRange[5].RESET;
            SetPermissionRangeFilter(TmpPermissionRange[5]);

            IF ViewType = ViewType::All THEN
              SetObjectFilter(Object)
            ELSE
              Object.SETFILTER(Type, '<0');

            LicensePermission."Object Type" := Type;
            LicensePermission."Object Number" := ID;
            IF LicensePermission.NEXT(Steps) = 0 THEN
              EXIT(0);

            TmpPermissionRange[5].SETRANGE("Object Type", LicensePermission."Object Type");
            TmpPermissionRange[5].SETFILTER(From, '<=%1', LicensePermission."Object Number");
            TmpPermissionRange[5].SETFILTER("To", '>=%1', LicensePermission."Object Number");
            TmpPermissionRange[5].SETRANGE("Insert Permission", TmpPermissionRange[5]."Insert Permission"::Yes);
            InPermissionRange := TmpPermissionRange[5].FINDFIRST;

            Object.Type := LicensePermission."Object Type";
            Object."Company Name" := '';
            Object.ID := LicensePermission."Object Number";
            IsObject := Object.FIND('=');

            IF IsObject OR InPermissionRange THEN BEGIN
              Type := LicensePermission."Object Type";
              "Company Name" := '';
              ID := LicensePermission."Object Number";
              EXIT(Steps);
            END ELSE
              IF Steps = 1 THEN BEGIN

                TmpPermissionRange[5].SETFILTER(From, '>=%1', LicensePermission."Object Number");
                TmpPermissionRange[5].SETRANGE("To");
                PermissionFound := TmpPermissionRange[5].FINDFIRST;
                IF NOT PermissionFound THEN BEGIN
                  TmpPermissionRange[5].SETRANGE(From);
                  TmpPermissionRange[5].SETFILTER("Object Type", '>%1', LicensePermission."Object Type");
                  PermissionFound := TmpPermissionRange[5].FINDFIRST;
                END;

                Object.Type := Type;
                Object."Company Name" := '';
                Object.ID := ID;
                ObjectFound := Object.NEXT(Steps) <> 0;

                CASE TRUE OF
                  PermissionFound AND ObjectFound AND (TmpPermissionRange[5]."Object Type" < Object.Type) :
                    FirstRecord := FirstRecord::"Permission From";

                  PermissionFound AND ObjectFound AND (TmpPermissionRange[5]."Object Type" > Object.Type) :
                    FirstRecord := FirstRecord::Object;

                  PermissionFound AND ObjectFound AND (TmpPermissionRange[5].From <= Object.ID) :
                    FirstRecord := FirstRecord::"Permission From";

                  PermissionFound AND ObjectFound AND (TmpPermissionRange[5].From > Object.ID) :
                    FirstRecord := FirstRecord::Object;

                  PermissionFound :
                    FirstRecord := FirstRecord::"Permission From";

                  ObjectFound :
                    FirstRecord := FirstRecord::Object;

                END;

              END ELSE BEGIN

                TmpPermissionRange[5].SETRANGE(From);
                TmpPermissionRange[5].SETFILTER("To", '<=%1', LicensePermission."Object Number");
                PermissionFound := TmpPermissionRange[5].FINDLAST;
                IF NOT PermissionFound THEN BEGIN
                  TmpPermissionRange[5].SETRANGE("To");
                  TmpPermissionRange[5].SETFILTER("Object Type", '<%1', LicensePermission."Object Type");
                  PermissionFound := TmpPermissionRange[5].FINDLAST;
                END;

                Object.Type := Type;
                Object."Company Name" := '';
                Object.ID := ID;
                ObjectFound := Object.NEXT(Steps) <> 0;

                CASE TRUE OF
                  PermissionFound AND ObjectFound AND (TmpPermissionRange[5]."Object Type" > Object.Type) :
                    FirstRecord := FirstRecord::"Permission To";

                  PermissionFound AND ObjectFound AND (TmpPermissionRange[5]."Object Type" < Object.Type) :
                    FirstRecord := FirstRecord::Object;

                  PermissionFound AND ObjectFound AND (TmpPermissionRange[5]."To" >= Object.ID) :
                    FirstRecord := FirstRecord::"Permission To";

                  PermissionFound AND ObjectFound AND (TmpPermissionRange[5]."To" < Object.ID) :
                    FirstRecord := FirstRecord::Object;

                  PermissionFound :
                    FirstRecord := FirstRecord::"Permission To";

                  ObjectFound :
                    FirstRecord := FirstRecord::Object;

                END;

              END;

            CASE FirstRecord OF
              FirstRecord::"Permission From" :
                BEGIN
                  Type := TmpPermissionRange[5]."Object Type";
                  "Company Name" := '';
                  ID := TmpPermissionRange[5].From;
                  EXIT(Steps);
                END;

              FirstRecord::"Permission To" :
                BEGIN
                  Type := TmpPermissionRange[5]."Object Type";
                  "Company Name" := '';
                  ID := TmpPermissionRange[5]."To";
                  EXIT(Steps);
                END;

              FirstRecord::Object :
                BEGIN
                  Type := Object.Type;
                  "Company Name" := '';
                  ID := Object.ID;
                  EXIT(Steps);
                END;

            END;
          END;

        ViewType::"Outside License" :
          BEGIN

            TmpPermissionRange[5].SETRANGE("Read Permission", TmpPermissionRange[5]."Read Permission"::" ");

            IF NEXT(Steps) = 0 THEN
              EXIT(0);

            WHILE InLicenseReadPermission(Type, ID) DO
              IF NEXT(Steps) = 0 THEN
                EXIT(0);

            EXIT(Steps);
          END;

      END;
    END;

    LOCAL PROCEDURE InLicenseReadPermission@6(ObjectType2@1000 : Integer;ObjectNo@1001 : Integer) : Boolean;
    BEGIN
      TmpPermissionRange[6].RESET;
      TmpPermissionRange[6].SETRANGE("Object Type", ObjectType2);
      TmpPermissionRange[6].SETFILTER(From, '<=%1', ObjectNo);
      TmpPermissionRange[6].SETFILTER("To", '>=%1', ObjectNo);
      TmpPermissionRange[6].SETRANGE("Read Permission", TmpPermissionRange[6]."Read Permission"::Yes);
      EXIT(NOT TmpPermissionRange[6].ISEMPTY);
    END;

    LOCAL PROCEDURE InLicenseInsertPermission@7(ObjectType2@1000 : Integer;ObjectNo@1001 : Integer) : Boolean;
    BEGIN
      TmpPermissionRange[6].RESET;
      TmpPermissionRange[6].SETRANGE("Object Type", ObjectType2);
      TmpPermissionRange[6].SETFILTER(From, '<=%1', ObjectNo);
      TmpPermissionRange[6].SETFILTER("To", '>=%1', ObjectNo);
      TmpPermissionRange[6].SETRANGE("Insert Permission", TmpPermissionRange[6]."Insert Permission"::Yes);
      EXIT(NOT TmpPermissionRange[6].ISEMPTY);
    END;

    LOCAL PROCEDURE SetLicencePermissionFilter@8(VAR LicensePermission@1000 : Record 2000000043);
    BEGIN
      LicensePermission.FILTERGROUP(11);
      LicensePermission.SETFILTER("Object Type",
        '<>%1&<>%2&<>%3',
        LicensePermission."Object Type"::TableData,
        LicensePermission."Object Type"::System,
        LicensePermission."Object Type"::FieldNumber,
        LicensePermission."Object Type"::MenuSuite);
      LicensePermission.FILTERGROUP(0);

      LicensePermission.FILTERGROUP(12);
      FILTERGROUP(12);
      COPYFILTER(Type, LicensePermission."Object Type");
      FILTERGROUP(0);
      LicensePermission.FILTERGROUP(0);

      LicensePermission.FILTERGROUP(11);
      LicensePermission.SETFILTER("Object Number", '<>0');
      LicensePermission.FILTERGROUP(0);

      COPYFILTER(ID, LicensePermission."Object Number");
    END;

    LOCAL PROCEDURE SetPermissionRangeFilter@9(VAR PermissionRange@1000 : Record 2000000044);
    VAR
      TmpObject@1001 : TEMPORARY Record 2000000001;
    BEGIN
      PermissionRange.FILTERGROUP(11);
      PermissionRange.SETFILTER("Object Type",
        '<>%1&<>%2&<>%3&<>%4',
        PermissionRange."Object Type"::TableData,
        PermissionRange."Object Type"::System,
        PermissionRange."Object Type"::FieldNumber,
        PermissionRange."Object Type"::MenuSuite);
      PermissionRange.FILTERGROUP(0);

      PermissionRange.FILTERGROUP(12);
      FILTERGROUP(12);
      COPYFILTER(Type, PermissionRange."Object Type");
      FILTERGROUP(0);
      PermissionRange.FILTERGROUP(0);

      PermissionRange.FILTERGROUP(11);
      PermissionRange.SETFILTER(From, '<>0');
      PermissionRange.FILTERGROUP(0);

      TmpObject.Type := -1;
      TmpObject.Name := UnusedText;
      TmpObject.INSERT;

      TmpObject.Type := -2;
      TmpObject.Name := UnusedBothText;
      TmpObject.INSERT;

      TmpObject.SETVIEW(GETVIEW);
      TmpObject.SETRANGE(Type);
      TmpObject.SETRANGE(ID);
      IF NOT TmpObject.FIND('=') THEN BEGIN
        PermissionRange.FILTERGROUP(13);
        PermissionRange.SETFILTER("Object Type", '<0');
        PermissionRange.FILTERGROUP(0);
      END;
    END;

    LOCAL PROCEDURE SetObjectFilter@10(VAR Object@1000 : Record 2000000001);
    BEGIN
      Object.COPYFILTERS(Rec);
    END;

    PROCEDURE SetFormPosition@11(ObjectType2@1000 : Option;ObjectNo@1001 : Integer);
    BEGIN
      FirstPostitionType := ObjectType2;
      FirstPostitionNo := ObjectNo;
    END;

    PROCEDURE GetFormPosition@12(VAR ObjectType2@1000 : Option;VAR ObjectNo@1001 : Integer);
    BEGIN
      ObjectType2 := Type;
      ObjectNo := ID;
    END;

    LOCAL PROCEDURE UnusedText@13() : Text;
    VAR
      ctUnused@1000 : TextConst 'DEU=Unused;ENU=Unused;ESP=Unused;FRA=Unused;NLD=Vrij;DEA=Unused';
    BEGIN
      EXIT(ctUnused);
    END;

    LOCAL PROCEDURE UnusedBothText@14() : Text;
    VAR
      ctUnusedBoth@1000 : TextConst 'DEU=Unused (form en page);ENU=Unused (form en page);ESP=Unused (form en page);FRA=Unused (form en page);NLD=Vrij (form en page);DEA=Unused (form en page)';
    BEGIN
      EXIT(ctUnusedBoth);
    END;

    LOCAL PROCEDURE ExportLicenseDefinition@15(VAR PermissionRange@1000 : Record 2000000044;FileName@1001 : Text);
    VAR
      Progressbar@1002 : Codeunit 11102044;
      FileHandler@1003 : Codeunit 11102097;
      oFile@1004 : File;
      ctExportingLicenseDefinition@1005 : TextConst 'DEU=Exporting license definition...;ENU=Exporting license definition...;ESP=Exporting license definition...;FRA=Exporting license definition...;NLD=Licentiedefinitie exporteren...;DEA=Exporting license definition...';
    BEGIN
      FileHandler.QueryReplace(FileName);
      oFile.TEXTMODE(TRUE);
      oFile.CREATE(FileName);

      Progressbar.Open(ctExportingLicenseDefinition, 0);

      WITH PermissionRange DO BEGIN

        Progressbar.BarSize := COUNT;

        IF FINDSET THEN
          REPEAT
            Progressbar.AddToBar(1);
            oFile.WRITE(
              FORMAT("Object Type" + 0) + ' ' +
              FORMAT(Index) + ' ' +
              FORMAT(From) + ' ' +
              FORMAT("To") + ' ' +
              FORMAT("Read Permission" + 0) + ' ' +
              FORMAT("Insert Permission" + 0) + ' ' +
              FORMAT("Modify Permission" + 0) + ' ' +
              FORMAT("Delete Permission" + 0) + ' ' +
              FORMAT("Execute Permission" + 0));

          UNTIL NEXT = 0;

      END;

      Progressbar.Close;
    END;

    LOCAL PROCEDURE ImportLicenseDefinition@16(VAR PermissionRange@1000 : Record 2000000044;FileName@1001 : Text);
    VAR
      Progressbar@1002 : Codeunit 11102044;
      oFile@1003 : File;
      ImportLine@1004 : Text[1024];
      Value@1005 : ARRAY [11] OF Text[250];
      FieldId@1006 : Integer;
      i@1007 : Integer;
      ctImportingLicenseDefinition@1008 : TextConst 'DEU=Importing license definition...;ENU=Importing license definition...;ESP=Importing license definition...;FRA=Importing license definition...;NLD=Licentiedefinitie importeren...;DEA=Importing license definition...';
      ctNotValid@1009 : TextConst 'DEU=This is not a valid license definition file.;ENU=This is not a valid license definition file.;ESP=This is not a valid license definition file.;FRA=This is not a valid license definition file.;NLD=Dit is geen geldig licentiedefinitiebestand.;DEA=This is not a valid license definition file.';
    BEGIN
      WITH PermissionRange DO BEGIN

        Progressbar.Open(ctImportingLicenseDefinition, 0);

        oFile.TEXTMODE(TRUE);
        oFile.OPEN(FileName);

        Progressbar.BarSize := oFile.LEN;

        WHILE oFile.POS < oFile.LEN DO BEGIN

          oFile.READ(ImportLine);
          FieldId := 1;

          CLEAR(Value);
          FOR i := 1 TO STRLEN(ImportLine) DO
            IF ImportLine[i] = ' ' THEN
              FieldId += 1
            ELSE
              Value[FieldId] := Value[FieldId] + FORMAT(ImportLine[i]);

          IF Value[10] <> '' THEN
            ERROR(ctNotValid);

          IF NOT EVALUATE("Object Type", Value[1]) THEN
            ERROR(ctNotValid);

          IF NOT EVALUATE(Index, Value[2]) THEN
            ERROR(ctNotValid);

          IF NOT EVALUATE(From, Value[3]) THEN
            ERROR(ctNotValid);

          IF NOT EVALUATE("To", Value[4]) THEN
            ERROR(ctNotValid);

          IF NOT EVALUATE("Read Permission", Value[5]) THEN
            ERROR(ctNotValid);

          IF NOT EVALUATE("Insert Permission", Value[6]) THEN
            ERROR(ctNotValid);

          IF NOT EVALUATE("Modify Permission", Value[7]) THEN
            ERROR(ctNotValid);

          IF NOT EVALUATE("Delete Permission", Value[8]) THEN
            ERROR(ctNotValid);

          IF NOT EVALUATE("Execute Permission", Value[9]) THEN
            ERROR(ctNotValid);

          IF NOT INSERT THEN
            ERROR(ctNotValid);

          Progressbar.BarPosition := oFile.POS;
        END;

      END;
    END;

    LOCAL PROCEDURE ImportVoiceLicenseDefinition@18(ServerFileName@1000 : Text);
    VAR
      Object@1001 : Record 2000000001;
      Progressbar@1002 : Codeunit 11102044;
      oFile@1003 : File;
      ImportLine@1004 : Text[1024];
      ObjectType3@1005 : Text;
      Permissions@1006 : Text;
      i@1007 : Integer;
      RangeFrom@1008 : Integer;
      RangeFromPos@1009 : Integer;
      RangeTill@1010 : Integer;
      ctImportingLicenseDefinition@1011 : TextConst 'DEU=Importing license definition...;ENU=Importing license definition...;ESP=Importing license definition...;FRA=Importing license definition...;NLD=Licentiedefinitie importeren...;DEA=Importing license definition...';
    BEGIN
      TmpPermissionRange[1].RESET;
      TmpPermissionRange[1].DELETEALL;

      Progressbar.Open(ctImportingLicenseDefinition, 0);
      oFile.TEXTMODE(TRUE);
      oFile.OPEN(ServerFileName);
      Progressbar.BarSize := oFile.LEN;
      WHILE oFile.POS < oFile.LEN DO BEGIN
        oFile.READ(ImportLine);
        IF STRLEN(ImportLine) = 0 THEN
          RangeFromPos := 0;
        IF STRPOS(ImportLine, 'Range From') > 0 THEN
          RangeFromPos := STRPOS(ImportLine, 'Range From');

        IF (RangeFromPos > 0) AND (STRLEN(ImportLine) >= RangeFromPos + 5) THEN BEGIN
          FOR i := 1 TO STRLEN(ImportLine) DO
            IF ImportLine[i] > 122 THEN
              ImportLine[i] := 32;
          IF EVALUATE(RangeFrom, COPYSTR(ImportLine, RangeFromPos, 15)) THEN BEGIN
            EVALUATE(RangeTill, COPYSTR(ImportLine, RangeFromPos + 15, 15));
            ObjectType3 := DELCHR(COPYSTR(ImportLine, RangeFromPos + 30, 20), '<>');
            IF ObjectType3 = 'TableDescription' THEN
              ObjectType3 := FORMAT(Object.Type::Table);
            Permissions := DELCHR(COPYSTR(ImportLine, RangeFromPos + 50, 15));
            IF EVALUATE(Object.Type, ObjectType3) THEN
              AddPermissionRange(Object.Type, RangeFrom, RangeTill, Permissions);
          END;
        END;

        Progressbar.BarPosition := oFile.POS;
      END;

      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE AddPermissionRange@19(ObjectType3@1000 : Integer;FromRange@1001 : Integer;TillRange@1002 : Integer;Permissions@1003 : Text);
    BEGIN
      SplitExistingRanges(ObjectType3, FromRange, TillRange);
      FillGaps(ObjectType3, FromRange, TillRange);
      SetPermissions(ObjectType3, FromRange, TillRange, Permissions);
    END;

    LOCAL PROCEDURE SplitExistingRanges@20(ObjectType3@1000 : Integer;FromRange@1001 : Integer;TillRange@1002 : Integer);
    BEGIN
      WITH TmpPermissionRange[1] DO BEGIN
        RESET;
        TmpPermissionRange[2].RESET;
        SETRANGE("Object Type", ObjectType3);
        SETFILTER(From, '<%1', FromRange);
        SETFILTER("To", '>=%1', FromRange);
        IF FINDSET THEN
          REPEAT

            DELETE;

            TmpPermissionRange[2] := TmpPermissionRange[1];
            TmpPermissionRange[2]."To" := FromRange - 1;
            IF TmpPermissionRange[2].INSERT THEN
              ;

            TmpPermissionRange[2] := TmpPermissionRange[1];
            TmpPermissionRange[2].Index := FromRange;
            TmpPermissionRange[2].From := FromRange;
            IF TmpPermissionRange[2].INSERT THEN
              ;

          UNTIL NEXT = 0;

        SETFILTER("To", '>%1', TillRange);
        SETFILTER(From, '<=%1', TillRange);
        IF FINDSET THEN
          REPEAT

            DELETE;

            TmpPermissionRange[2] := TmpPermissionRange[1];
            TmpPermissionRange[2].Index := TillRange + 1;
            TmpPermissionRange[2].From := TillRange + 1;
            IF TmpPermissionRange[2].INSERT THEN
              ;

            TmpPermissionRange[2] := TmpPermissionRange[1];
            TmpPermissionRange[2]."To" := TillRange;
            IF TmpPermissionRange[2].INSERT THEN
              ;

          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillGaps@21(ObjectType3@1000 : Integer;FromRange@1001 : Integer;TillRange@1002 : Integer);
    VAR
      PrevTill@1003 : Integer;
    BEGIN
      WITH TmpPermissionRange[1] DO BEGIN
        RESET;
        TmpPermissionRange[2].RESET;
        SETRANGE("Object Type", ObjectType3);
        SETFILTER(From, '>=%1', FromRange);
        SETFILTER("To", '<=%1', TillRange);
        IF FINDSET THEN BEGIN
          IF From > FromRange THEN
            AddRange(ObjectType3, FromRange, From - 1);
          PrevTill := "To";
          IF NEXT <> 0 THEN
            REPEAT
              IF From > PrevTill + 1 THEN
                AddRange(ObjectType3, PrevTill + 1, From - 1);
              PrevTill := "To";
            UNTIL NEXT = 0;
          IF "To" < TillRange THEN
            AddRange(ObjectType3, PrevTill + 1, TillRange);
        END ELSE
          AddRange(ObjectType3, FromRange, TillRange);
      END;
    END;

    LOCAL PROCEDURE AddRange@23(ObjectType3@1000 : Integer;FromRange@1001 : Integer;TillRange@1002 : Integer);
    BEGIN
      WITH TmpPermissionRange[2] DO BEGIN
        INIT;
        "Object Type" := ObjectType3;
        Index := FromRange;
        From := FromRange;
        "To" := TillRange;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE SetPermissions@22(ObjectType3@1000 : Integer;FromRange@1001 : Integer;TillRange@1002 : Integer;Permissions@1003 : Text);
    VAR
      Delete2@1004 : Boolean;
      Execute2@1005 : Boolean;
      Insert2@1006 : Boolean;
      Modify2@1007 : Boolean;
      Read2@1008 : Boolean;
    BEGIN
      Read2 := Permissions[1] = 'R';
      Insert2 := Permissions[2] = 'I';
      Modify2 := Permissions[3] = 'M';
      Delete2 := Permissions[4] = 'D';
      Execute2 := Permissions[5] = 'X';
      WITH TmpPermissionRange[1] DO BEGIN
        RESET;
        SETRANGE("Object Type", ObjectType3);
        SETFILTER(From, '>=%1', FromRange);
        SETFILTER("To", '<=%1', TillRange);
        IF FINDSET THEN
          REPEAT
            IF Read2 THEN
              "Read Permission" := "Read Permission"::Yes;
            IF Insert2 THEN
              "Insert Permission" := "Insert Permission"::Yes;
            IF Modify2 THEN
              "Modify Permission" := "Modify Permission"::Yes;
            IF Delete2 THEN
              "Delete Permission" := "Delete Permission"::Yes;
            IF Execute2 THEN
              "Execute Permission" := "Execute Permission"::Yes;
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE SetOpeningFileName@17(NewFileName@1000 : Text);
    BEGIN
      OpeningFileName := NewFileName;
    END;

    BEGIN
    END.
  }
}

