OBJECT Codeunit 11 Gen. Jnl.-Check Line
{
  OBJECT-PROPERTIES
  {
    Date=21/10/18;
    Time=[ 2:44:49 PM];
    Modified=Yes;
    Version List=NAVW19.00,NAVGB9.00;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 252=rimd;
    OnRun=BEGIN
            GLSetup.GET;
            RunCheck(Rec);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=can only be a closing date for G/L entries;ENG=can only be a closing date for G/L entries';
      Text001@1001 : TextConst 'ENU=is not within your range of allowed posting dates;ENG=is not within your range of allowed posting/tax point dates';
      Text002@1002 : TextConst 'ENU=%1 or %2 must be G/L Account or Bank Account.;ENG=%1 or %2 must be G/L Account or Bank Account.';
      Text003@1003 : TextConst 'ENU=must have the same sign as %1;ENG=must have the same sign as %1';
      Text004@1004 : TextConst 'ENU=You must not specify %1 when %2 is %3.;ENG=You must not specify %1 when %2 is %3.';
      Text005@1005 : TextConst 'ENU=%1 + %2 must be %3.;ENG=%1 + %2 must be %3.';
      Text006@1006 : TextConst 'ENU=%1 + %2 must be -%3.;ENG=%1 + %2 must be -%3.';
      Text007@1007 : TextConst 'ENU=must be positive;ENG=must be positive';
      Text008@1008 : TextConst 'ENU=must be negative;ENG=must be negative';
      Text009@1009 : TextConst 'ENU=must have a different sign than %1;ENG=must have a different sign than %1';
      Text010@1010 : TextConst 'ENU=%1 %2 and %3 %4 is not allowed.;ENG=%1 %2 and %3 %4 is not allowed.';
      Text011@1011 : TextConst 'ENU=The combination of dimensions used in %1 %2, %3, %4 is blocked. %5;ENG=The combination of dimensions used in %1 %2, %3, %4 is blocked. %5';
      Text012@1012 : TextConst 'ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5;ENG=A dimension used in %1 %2, %3, %4 has caused an error. %5';
      AccountingPeriod@1013 : Record 10560;
      GLSetup@1014 : Record 98;
      UserSetup@1015 : Record 91;
      GenJnlTemplate@1020 : Record 80;
      CostAccSetup@1024 : Record 1108;
      DimMgt@1017 : Codeunit 408;
      CostAccMgt@1023 : Codeunit 1100;
      AllowPostingFrom@1018 : Date;
      AllowPostingTo@1019 : Date;
      GenJnlTemplateFound@1021 : Boolean;
      OverrideDimErr@1022 : Boolean;
      SalesDocAlreadyExistsErr@1026 : TextConst '@@@="%1 = Document Type; %2 = Document No.";ENU=Sales %1 %2 already exists.;ENG=Sales %1 %2 already exists.';
      PurchDocAlreadyExistsErr@1025 : TextConst '@@@="%1 = Document Type; %2 = Document No.";ENU=Purchase %1 %2 already exists.;ENG=Purchase %1 %2 already exists.';

    PROCEDURE RunCheck@4(VAR GenJnlLine@1000 : Record 81);
    VAR
      PaymentTerms@1004 : Record 3;
      Cust@1005 : Record 18;
      Vendor@1006 : Record 23;
      ICPartner@1007 : Record 413;
      ICGLAcount@1008 : Record 410;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF EmptyLine THEN
          EXIT;
        IF NOT GenJnlTemplateFound THEN BEGIN
          IF GenJnlTemplate.GET("Journal Template Name") THEN;
          GenJnlTemplateFound := TRUE;
        END;

        TESTFIELD("Posting Date");
        IF "Posting Date" <> NORMALDATE("Posting Date") THEN BEGIN
          IF ("Account Type" <> "Account Type"::"G/L Account") OR
             ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
          THEN
            FIELDERROR("Posting Date",Text000);
          AccountingPeriod.GET(AccountingPeriod."Period Type"::Year,NORMALDATE("Posting Date") + 1);
          AccountingPeriod.SETRANGE("Period Type",AccountingPeriod."Period Type"::Year);
          AccountingPeriod.NEXT(-1);
          AccountingPeriod.TESTFIELD(Closed,TRUE);
        END;

        IF DateNotAllowed("Posting Date") THEN
          FIELDERROR("Posting Date",Text001);

        IF "Document Date" <> 0D THEN
          IF ("Document Date" <> NORMALDATE("Document Date")) AND
             (("Account Type" <> "Account Type"::"G/L Account") OR
              ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account"))
          THEN
            FIELDERROR("Document Date",Text000);

        TESTFIELD("Document No.");

        IF ("Account Type" IN
            ["Account Type"::Customer,
             "Account Type"::Vendor,
             "Account Type"::"Fixed Asset",
             "Account Type"::"IC Partner"]) AND
           ("Bal. Account Type" IN
            ["Bal. Account Type"::Customer,
             "Bal. Account Type"::Vendor,
             "Bal. Account Type"::"Fixed Asset",
             "Bal. Account Type"::"IC Partner"])
        THEN
          ERROR(
            Text002,
            FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));

        IF "Bal. Account No." = '' THEN
          TESTFIELD("Account No.");

        IF ("Account No." <> '') AND
           NOT "System-Created Entry" AND
           NOT "Allow Zero-Amount Posting" AND
           ("Account Type" <> "Account Type"::"Fixed Asset")
        THEN
          TESTFIELD(Amount);

        IF Amount * "Amount (LCY)" < 0 THEN
          FIELDERROR("Amount (LCY)",STRSUBSTNO(Text003,FIELDCAPTION(Amount)));

        IF ("Account Type" = "Account Type"::"G/L Account") AND
           ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")
        THEN
          TESTFIELD("Applies-to Doc. No.",'');

        IF ("Recurring Method" IN
            ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]) AND
           ("Currency Code" <> '')
        THEN
          ERROR(
            Text004,
            FIELDCAPTION("Currency Code"),FIELDCAPTION("Recurring Method"),"Recurring Method");

        IF "Account No." <> '' THEN
          CASE "Account Type" OF
            "Account Type"::"G/L Account":
              BEGIN
                IF ("Gen. Bus. Posting Group" <> '') OR ("Gen. Prod. Posting Group" <> '') OR
                   ("VAT Bus. Posting Group" <> '') OR ("VAT Prod. Posting Group" <> '')
                THEN
                  TESTFIELD("Gen. Posting Type");
                IF ("Gen. Posting Type" <> "Gen. Posting Type"::" ") AND
                   ("VAT Posting" = "VAT Posting"::"Automatic VAT Entry")
                THEN BEGIN
                  IF "VAT Amount" + "VAT Base Amount" <> Amount THEN
                    ERROR(
                      Text005,FIELDCAPTION("VAT Amount"),FIELDCAPTION("VAT Base Amount"),
                      FIELDCAPTION(Amount));
                  IF "Currency Code" <> '' THEN
                    IF "VAT Amount (LCY)" + "VAT Base Amount (LCY)" <> "Amount (LCY)" THEN
                      ERROR(
                        Text005,FIELDCAPTION("VAT Amount (LCY)"),
                        FIELDCAPTION("VAT Base Amount (LCY)"),FIELDCAPTION("Amount (LCY)"));
                END;
              END;
            "Account Type"::Customer,"Account Type"::Vendor:
              BEGIN
                TESTFIELD("Gen. Posting Type",0);
                TESTFIELD("Gen. Bus. Posting Group",'');
                TESTFIELD("Gen. Prod. Posting Group",'');
                TESTFIELD("VAT Bus. Posting Group",'');
                TESTFIELD("VAT Prod. Posting Group",'');

                IF (("Account Type" = "Account Type"::Customer) AND
                    ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase)) OR
                   (("Account Type" = "Account Type"::Vendor) AND
                    ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Sale))
                THEN
                  ERROR(
                    STRSUBSTNO(
                      Text010,
                      FIELDCAPTION("Account Type"),"Account Type",
                      FIELDCAPTION("Bal. Gen. Posting Type"),"Bal. Gen. Posting Type"));
                CheckGenJnlLineDocType(GenJnlLine);
                IF NOT "System-Created Entry" AND (Amount * "Sales/Purch. (LCY)" < 0) THEN
                  FIELDERROR(
                    "Sales/Purch. (LCY)",STRSUBSTNO(Text003,FIELDCAPTION(Amount)));
                TESTFIELD("Job No.",'');
                IF "Account Type" = "Account Type"::Customer THEN BEGIN
                  IF Cust.GET("Account No.") THEN BEGIN
                    Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);
                    IF (Cust."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       ICPartner.GET(Cust."IC Partner Code")
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                  END;
                END ELSE BEGIN
                  IF Vendor.GET("Account No.") THEN BEGIN
                    Vendor.CheckBlockedVendOnJnls(Vendor,"Document Type",TRUE);
                    IF (Vendor."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       ICPartner.GET(Vendor."IC Partner Code")
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                  END;
                END;
              END;
            "Account Type"::"Bank Account":
              BEGIN
                TESTFIELD("Gen. Posting Type",0);
                TESTFIELD("Gen. Bus. Posting Group",'');
                TESTFIELD("Gen. Prod. Posting Group",'');
                TESTFIELD("VAT Bus. Posting Group",'');
                TESTFIELD("VAT Prod. Posting Group",'');
                TESTFIELD("Job No.",'');
                IF (Amount < 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") THEN
                  TESTFIELD("Check Printed",TRUE);
                IF (Amount < 0) AND ("Bank Payment Type" = "Bank Payment Type"::BACS) THEN
                  TESTFIELD("Exported to Payment File",TRUE);
              END;
            "Account Type"::"IC Partner":
              BEGIN
                ICPartner.GET("Account No.");
                ICPartner.CheckICPartner;
                IF "Journal Template Name" <> '' THEN
                  IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                    FIELDERROR("Account Type");
              END;
          END;

        IF "Bal. Account No." <> '' THEN
          CASE "Bal. Account Type" OF
            "Bal. Account Type"::"G/L Account":
              BEGIN
                IF ("Bal. Gen. Bus. Posting Group" <> '') OR ("Bal. Gen. Prod. Posting Group" <> '') OR
                   ("Bal. VAT Bus. Posting Group" <> '') OR ("Bal. VAT Prod. Posting Group" <> '')
                THEN
                  TESTFIELD("Bal. Gen. Posting Type");
                IF ("Bal. Gen. Posting Type" <> "Bal. Gen. Posting Type"::" ") AND
                   ("VAT Posting" = "VAT Posting"::"Automatic VAT Entry")
                THEN BEGIN
                  IF "Bal. VAT Amount" + "Bal. VAT Base Amount" <> -Amount THEN
                    ERROR(
                      Text006,FIELDCAPTION("Bal. VAT Amount"),FIELDCAPTION("Bal. VAT Base Amount"),
                      FIELDCAPTION(Amount));
                  IF "Currency Code" <> '' THEN
                    IF "Bal. VAT Amount (LCY)" + "Bal. VAT Base Amount (LCY)" <> -"Amount (LCY)" THEN
                      ERROR(
                        Text006,FIELDCAPTION("Bal. VAT Amount (LCY)"),
                        FIELDCAPTION("Bal. VAT Base Amount (LCY)"),FIELDCAPTION("Amount (LCY)"));
                END;
              END;
            "Bal. Account Type"::Customer,"Bal. Account Type"::Vendor:
              BEGIN
                TESTFIELD("Bal. Gen. Posting Type",0);
                TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                TESTFIELD("Bal. VAT Bus. Posting Group",'');
                TESTFIELD("Bal. VAT Prod. Posting Group",'');

                IF (("Bal. Account Type" = "Bal. Account Type"::Customer) AND
                    ("Gen. Posting Type" = "Gen. Posting Type"::Purchase)) OR
                   (("Bal. Account Type" = "Bal. Account Type"::Vendor) AND
                    ("Gen. Posting Type" = "Gen. Posting Type"::Sale))
                THEN
                  ERROR(
                    STRSUBSTNO(
                      Text010,
                      FIELDCAPTION("Bal. Account Type"),"Bal. Account Type",
                      FIELDCAPTION("Gen. Posting Type"),"Gen. Posting Type"));

                IF "Document Type" <> 0 THEN BEGIN
                  IF ("Bal. Account Type" = "Bal. Account Type"::Customer) =
                     ("Document Type" IN ["Document Type"::Payment,"Document Type"::"Credit Memo"])
                  THEN BEGIN
                    IF Amount < 0 THEN
                      FIELDERROR(Amount,Text007);
                  END ELSE
                    IF Amount > 0 THEN
                      FIELDERROR(Amount,Text008);
                END;
                IF Amount * "Sales/Purch. (LCY)" > 0 THEN
                  FIELDERROR(
                    "Sales/Purch. (LCY)",
                    STRSUBSTNO(Text009,FIELDCAPTION(Amount)));
                TESTFIELD("Job No.",'');
                IF "Bal. Account Type" = "Bal. Account Type"::Customer THEN BEGIN
                  IF Cust.GET("Bal. Account No.") THEN BEGIN
                    Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);
                    IF (Cust."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       ICPartner.GET(Cust."IC Partner Code")
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                  END
                END ELSE BEGIN
                  IF Vendor.GET("Bal. Account No.") THEN BEGIN
                    Vendor.CheckBlockedVendOnJnls(Vendor,"Document Type",TRUE);
                    IF (Vendor."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       ICPartner.GET(Vendor."IC Partner Code")
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                  END;
                END;
              END;
            "Bal. Account Type"::"Bank Account":
              BEGIN
                TESTFIELD("Bal. Gen. Posting Type",0);
                TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                TESTFIELD("Bal. VAT Bus. Posting Group",'');
                TESTFIELD("Bal. VAT Prod. Posting Group",'');
                IF (Amount > 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") THEN
                  TESTFIELD("Check Printed",TRUE);
                IF (Amount > 0) AND ("Bank Payment Type" = "Bank Payment Type"::BACS) THEN
                  TESTFIELD("Exported to Payment File",TRUE);
              END;
            "Bal. Account Type"::"IC Partner":
              BEGIN
                ICPartner.GET("Bal. Account No.");
                ICPartner.CheckICPartner;
                IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                  FIELDERROR("Bal. Account Type");
              END;
          END;

        IF "IC Partner G/L Acc. No." <> '' THEN
          IF ICGLAcount.GET("IC Partner G/L Acc. No.") THEN
            ICGLAcount.TESTFIELD(Blocked,FALSE);

        IF NOT PaymentTerms.GET("Payment Terms Code") THEN
          CLEAR(PaymentTerms);
        IF (("Account Type" = "Account Type"::"G/L Account") AND
            ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) OR
           (("Document Type" <> "Document Type"::Invoice) AND
            (NOT
             (("Document Type" = "Document Type"::"Credit Memo") AND
              PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")))
        THEN BEGIN
          TESTFIELD("Pmt. Discount Date",0D);
          TESTFIELD("Payment Discount %",0);
        END;

        IF (("Account Type" = "Account Type"::"G/L Account") AND
            ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) OR
           ("Applies-to Doc. No." <> '')
        THEN
          TESTFIELD("Applies-to ID",'');

        IF ("Account Type" <> "Account Type"::"Bank Account") AND
           ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account")
        THEN
          TESTFIELD("Bank Payment Type","Bank Payment Type"::" ");

        IF ("Account Type" = "Account Type"::"Fixed Asset") OR
           ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")
        THEN
          CODEUNIT.RUN(CODEUNIT::"FA Jnl.-Check Line",GenJnlLine);

        IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
           ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
        THEN BEGIN
          TESTFIELD("Depreciation Book Code",'');
          TESTFIELD("FA Posting Type",0);
        END;

        IF OverrideDimErr THEN
          EXIT;

        IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
          ERROR(
            Text011,
            TABLECAPTION,"Journal Template Name","Journal Batch Name","Line No.",
            DimMgt.GetDimCombErr);

        TableID[1] := DimMgt.TypeToTableID1("Account Type");
        No[1] := "Account No.";
        TableID[2] := DimMgt.TypeToTableID1("Bal. Account Type");
        No[2] := "Bal. Account No.";
        TableID[3] := DATABASE::Job;
        No[3] := "Job No.";
        TableID[4] := DATABASE::"Salesperson/Purchaser";
        No[4] := "Salespers./Purch. Code";
        TableID[5] := DATABASE::Campaign;
        No[5] := "Campaign No.";
        IF NOT DimMgt.CheckDimValuePosting(TableID,No,"Dimension Set ID") THEN
          IF "Line No." <> 0 THEN
            ERROR(
              Text012,
              TABLECAPTION,"Journal Template Name","Journal Batch Name","Line No.",
              DimMgt.GetDimValuePostingErr)
          ELSE
            ERROR(DimMgt.GetDimValuePostingErr);
      END;

      IF CostAccSetup.GET THEN
        CostAccMgt.CheckValidCCAndCOInGLEntry(GenJnlLine."Dimension Set ID");

      OnAfterCheckGenJnlLine(GenJnlLine);
    END;

    PROCEDURE DateNotAllowed@1(PostingDate@1000 : Date) : Boolean;
    BEGIN
      IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
        IF USERID <> '' THEN
          IF UserSetup.GET(USERID) THEN BEGIN
            AllowPostingFrom := UserSetup."Allow Posting From";
            AllowPostingTo := UserSetup."Allow Posting To";
          END;
        IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
          GLSetup.GET;
          AllowPostingFrom := GLSetup."Allow Posting From";
          AllowPostingTo := GLSetup."Allow Posting To";
        END;
        IF AllowPostingTo = 0D THEN
          AllowPostingTo := 31129999D;
      END;
      EXIT((PostingDate < AllowPostingFrom) OR (PostingDate > AllowPostingTo));
    END;

    LOCAL PROCEDURE ErrorIfPositiveAmt@2(GenJnlLine@1000 : Record 81);
    BEGIN
      IF GenJnlLine.Amount > 0 THEN
        GenJnlLine.FIELDERROR(Amount,Text008);
    END;

    LOCAL PROCEDURE ErrorIfNegativeAmt@3(GenJnlLine@1000 : Record 81);
    BEGIN
      IF GenJnlLine.Amount < 0 THEN
        GenJnlLine.FIELDERROR(Amount,Text007);
    END;

    PROCEDURE SetOverDimErr@5();
    BEGIN
      OverrideDimErr := TRUE;
    END;

    PROCEDURE CheckSalesDocNoIsNotUsed@115(DocType@1000 : Option;DocNo@1001 : Code[20]);
    VAR
      OldCustLedgEntry@1002 : Record 21;
    BEGIN
      OldCustLedgEntry.SETRANGE("Document No.",DocNo);
      OldCustLedgEntry.SETRANGE("Document Type",DocType);
      IF OldCustLedgEntry.FINDFIRST THEN
        ERROR(SalesDocAlreadyExistsErr,OldCustLedgEntry."Document Type",DocNo);
    END;

    PROCEDURE CheckPurchDocNoIsNotUsed@107(DocType@1000 : Option;DocNo@1002 : Code[20]);
    VAR
      OldVendLedgEntry@1001 : Record 25;
    BEGIN
      OldVendLedgEntry.SETRANGE("Document No.",DocNo);
      OldVendLedgEntry.SETRANGE("Document Type",DocType);
      IF OldVendLedgEntry.FINDFIRST THEN
        ERROR(PurchDocAlreadyExistsErr,OldVendLedgEntry."Document Type",DocNo);
    END;

    LOCAL PROCEDURE CheckGenJnlLineDocType@7(GenJnlLine@1001 : Record 81);
    VAR
      IsPayment@1000 : Boolean;
    BEGIN

      WITH GenJnlLine DO
        IF "Document Type" <> 0 THEN BEGIN
          IsPayment := "Document Type" IN ["Document Type"::Payment,"Document Type"::"Credit Memo"];
          IF IsPayment XOR ("Account Type" = "Account Type"::Customer) THEN
            ErrorIfNegativeAmt(GenJnlLine)
          ELSE
            ErrorIfPositiveAmt(GenJnlLine);
        END;

    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckGenJnlLine@6(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    BEGIN
    END.
  }
}

