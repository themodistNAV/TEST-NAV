OBJECT Codeunit 6648 Purch.-Get Return Shipments
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    TableNo=39;
    OnRun=BEGIN
            PurchHeader.GET("Document Type","Document No.");
            PurchHeader.TESTFIELD("Document Type",PurchHeader."Document Type"::"Credit Memo");
            PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);

            ReturnShptLine.SETCURRENTKEY("Pay-to Vendor No.");
            ReturnShptLine.SETRANGE("Pay-to Vendor No.",PurchHeader."Pay-to Vendor No.");
            ReturnShptLine.SETFILTER("Return Qty. Shipped Not Invd.",'<>0');
            ReturnShptLine.SETRANGE("Currency Code",PurchHeader."Currency Code");

            GetReturnShptLines.SETTABLEVIEW(ReturnShptLine);
            GetReturnShptLines.LOOKUPMODE := TRUE;
            GetReturnShptLines.SetPurchHeader(PurchHeader);
            GetReturnShptLines.RUNMODAL;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The %1 on the %2 %3 and the %4 %5 must be the same.;ENG=The %1 on the %2 %3 and the %4 %5 must be the same.';
      PurchHeader@1001 : Record 38;
      PurchLine@1002 : Record 39;
      ReturnShptHeader@1003 : Record 6650;
      ReturnShptLine@1004 : Record 6651;
      GetReturnShptLines@1005 : Page 6648;

    PROCEDURE CreateInvLines@1(VAR ReturnShptLine2@1000 : Record 6651);
    VAR
      DifferentCurrencies@1001 : Boolean;
    BEGIN
      WITH ReturnShptLine2 DO BEGIN
        SETFILTER("Return Qty. Shipped Not Invd.",'<>0');
        IF FIND('-') THEN BEGIN
          PurchLine.LOCKTABLE;
          PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
          PurchLine.SETRANGE("Document No.",PurchHeader."No.");
          PurchLine."Document Type" := PurchHeader."Document Type";
          PurchLine."Document No." := PurchHeader."No.";

          REPEAT
            IF ReturnShptHeader."No." <> "Document No." THEN BEGIN
              ReturnShptHeader.GET("Document No.");
              ReturnShptHeader.TESTFIELD("Pay-to Vendor No.",PurchHeader."Pay-to Vendor No.");
              DifferentCurrencies := FALSE;
              IF ReturnShptHeader."Currency Code" <> PurchHeader."Currency Code" THEN BEGIN
                MESSAGE(Text000,
                  PurchHeader.FIELDCAPTION("Currency Code"),
                  PurchHeader.TABLECAPTION,PurchHeader."No.",
                  ReturnShptHeader.TABLECAPTION,ReturnShptHeader."No.");
                DifferentCurrencies := TRUE;
              END;
            END;
            IF NOT DifferentCurrencies THEN BEGIN
              ReturnShptLine := ReturnShptLine2;
              ReturnShptLine.InsertInvLineFromRetShptLine(PurchLine);
              IF Type = Type::"Charge (Item)" THEN
                GetItemChargeAssgnt(ReturnShptLine2,PurchLine."Qty. to Invoice");
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE SetPurchHeader@2(VAR PurchHeader2@1000 : Record 38);
    BEGIN
      PurchHeader.GET(PurchHeader2."Document Type",PurchHeader2."No.");
      PurchHeader.TESTFIELD("Document Type",PurchHeader."Document Type"::"Credit Memo");
    END;

    PROCEDURE GetItemChargeAssgnt@5800(VAR ReturnShptLine@1000 : Record 6651;QtyToInv@1003 : Decimal);
    VAR
      PurchOrderLine@1001 : Record 39;
      ItemChargeAssgntPurch@1002 : Record 5805;
    BEGIN
      WITH ReturnShptLine DO
        IF PurchOrderLine.GET(
             PurchOrderLine."Document Type"::"Return Order",
             "Return Order No.","Return Order Line No.")
        THEN BEGIN
          ItemChargeAssgntPurch.LOCKTABLE;
          ItemChargeAssgntPurch.RESET;
          ItemChargeAssgntPurch.SETRANGE("Document Type",PurchOrderLine."Document Type");
          ItemChargeAssgntPurch.SETRANGE("Document No.",PurchOrderLine."Document No.");
          ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchOrderLine."Line No.");
          IF ItemChargeAssgntPurch.FINDFIRST THEN BEGIN
            ItemChargeAssgntPurch.CALCSUMS("Qty. to Assign");
            IF ItemChargeAssgntPurch."Qty. to Assign" <> 0 THEN
              CopyItemChargeAssgnt(
                PurchOrderLine,ReturnShptLine,ItemChargeAssgntPurch."Qty. to Assign",
                QtyToInv / ItemChargeAssgntPurch."Qty. to Assign");
          END;
        END;
    END;

    LOCAL PROCEDURE CopyItemChargeAssgnt@5801(PurchOrderLine@1000 : Record 39;ReturnShptLine@1001 : Record 6651;QtyToAssign@1002 : Decimal;QtyFactor@1008 : Decimal);
    VAR
      ReturnShptLine2@1003 : Record 6651;
      PurchLine2@1004 : Record 39;
      ItemChargeAssgntPurch@1005 : Record 5805;
      ItemChargeAssgntPurch2@1006 : Record 5805;
      InsertChargeAssgnt@1007 : Boolean;
    BEGIN
      WITH PurchOrderLine DO BEGIN
        ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
        ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
        ItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
        IF ItemChargeAssgntPurch.FIND('-') THEN
          REPEAT
            IF ItemChargeAssgntPurch."Qty. to Assign" <> 0 THEN BEGIN
              ItemChargeAssgntPurch2 := ItemChargeAssgntPurch;
              ItemChargeAssgntPurch2."Qty. to Assign" := QtyFactor * ItemChargeAssgntPurch2."Qty. to Assign";
              PurchLine2.SETRANGE("Return Shipment No.",ReturnShptLine."Document No.");
              PurchLine2.SETRANGE("Return Shipment Line No.",ReturnShptLine."Line No.");
              IF PurchLine2.FIND('-') THEN
                REPEAT
                  PurchLine2.CALCFIELDS("Qty. to Assign");
                  InsertChargeAssgnt := PurchLine2."Qty. to Assign" <> PurchLine2.Quantity;
                UNTIL (PurchLine2.NEXT = 0) OR InsertChargeAssgnt;

              IF InsertChargeAssgnt THEN BEGIN
                ItemChargeAssgntPurch2."Document Type" := PurchLine2."Document Type";
                ItemChargeAssgntPurch2."Document No." := PurchLine2."Document No.";
                ItemChargeAssgntPurch2."Document Line No." := PurchLine2."Line No.";
                ItemChargeAssgntPurch2."Qty. Assigned" := 0;
                IF ABS(QtyToAssign) < ABS(ItemChargeAssgntPurch2."Qty. to Assign") THEN
                  ItemChargeAssgntPurch2."Qty. to Assign" := QtyToAssign;
                IF ABS(PurchLine2.Quantity - PurchLine2."Qty. to Assign") <
                   ABS(ItemChargeAssgntPurch2."Qty. to Assign")
                THEN
                  ItemChargeAssgntPurch2."Qty. to Assign" :=
                    PurchLine2.Quantity - PurchLine2."Qty. to Assign";
                ItemChargeAssgntPurch2.VALIDATE("Unit Cost");

                IF ItemChargeAssgntPurch2."Applies-to Doc. Type" = "Document Type" THEN BEGIN
                  ItemChargeAssgntPurch2."Applies-to Doc. Type" := PurchLine2."Document Type";
                  ItemChargeAssgntPurch2."Applies-to Doc. No." := PurchLine2."Document No.";
                  ReturnShptLine2.SETCURRENTKEY("Return Order No.","Return Order Line No.");
                  ReturnShptLine2.SETRANGE("Return Order No.",ItemChargeAssgntPurch."Applies-to Doc. No.");
                  ReturnShptLine2.SETRANGE("Return Order Line No.",ItemChargeAssgntPurch."Applies-to Doc. Line No.");
                  ReturnShptLine2.SETRANGE("Document No.",ReturnShptLine."Document No.");
                  IF ReturnShptLine2.FINDFIRST THEN BEGIN
                    PurchLine2.SETCURRENTKEY("Document Type","Receipt No.","Receipt Line No.");
                    PurchLine2.SETRANGE("Document Type",PurchLine2."Document Type"::"Credit Memo");
                    PurchLine2.SETRANGE("Return Shipment No.",ReturnShptLine2."Document No.");
                    PurchLine2.SETRANGE("Return Shipment Line No.",ReturnShptLine2."Line No.");
                    IF PurchLine2.FIND('-') AND (PurchLine2.Quantity <> 0) THEN
                      ItemChargeAssgntPurch2."Applies-to Doc. Line No." := PurchLine2."Line No."
                    ELSE
                      InsertChargeAssgnt := FALSE;
                  END ELSE
                    InsertChargeAssgnt := FALSE;
                END;
              END;

              IF InsertChargeAssgnt AND (ItemChargeAssgntPurch2."Qty. to Assign" <> 0) THEN BEGIN
                ItemChargeAssgntPurch2.INSERT;
                QtyToAssign := QtyToAssign - ItemChargeAssgntPurch2."Qty. to Assign";
              END;
            END;
          UNTIL ItemChargeAssgntPurch.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

