OBJECT Codeunit 50084 MARA - Create Order
{
  OBJECT-PROPERTIES
  {
    Date=19/12/18;
    Time=[ 5:29:01 PM];
    Modified=Yes;
    Version List=TM3032;
  }
  PROPERTIES
  {
    OnRun=VAR
            SalesHeaderL@1170000000 : Record 36;
          BEGIN
          END;

  }
  CODE
  {

    [TryFunction]
    PROCEDURE MARACreateOrder@1170000000(SalesHeaderP@1170000000 : Record 36);
    VAR
      PaymentMethod@1170000013 : Record 289;
      ConvertedAmtL@1000000005 : BigInteger;
      HttpClientL@1170000026 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      HttpResponseMessageL@1170000025 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      UriL@1170000024 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      HttpStringContentL@1170000023 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.StringContent";
      EncodingL@1170000022 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      JObjectL@1170000021 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JObject";
      BodyTextL@1170000012 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      ReponseTextL@1170000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      ServicePointManagerL@1170000005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.ServicePointManager";
      SecurityProtocolTypeL@1170000004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.SecurityProtocolType";
      HeaderL@1170000007 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.AuthenticationHeaderValue";
      C_Body1@1000000000 : TextConst 'ENU={"userid":"%1","action":"CreateOrder","externalid":"%2","data":{"is_carry_now":"%3","auto_confirm":"%4","receiver_location":"%5","receiver_address":"%6","receiver_contact_name":"%7","receiver_contact_number":"%8","dispatcher_location":"%9","dispatcher_address":"%10","dispatcher_contact_number":"%11","dispatcher_contact_name":"%12",';
      OAuthAuthorizationL@1000000003 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=9.0.0.0'.Microsoft.Dynamics.Nav.OAuthHelper.OAuthAuthorization";
      OAuthConsumerL@1000000002 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=9.0.0.0 '.Microsoft.Dynamics.Nav.OAuthHelper.Consumer";
      OAuthTokenL@1000000001 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=9.0.0.0'.Microsoft.Dynamics.Nav.OAuthHelper.Token";
      C_Body2@1000000008 : TextConst 'ENU="""package_name"":""%13"",""package_description"":""%14"",""pickup_time"":""%15"",""dropoff_time"":""%16"",""amount_to_collect"":""%17"",""vehicle_type"":""%18"",""weight"":""%19"",""quantity"":""%20"",""handling_type"":""[]""}}"';
      C_Method@1000000004 : TextConst 'ENU=POST';
      ModistSetupL@1000000006 : Record 50000;
      C_OAuthDescription@1000000007 : TextConst 'ENU="%1,realm=""%2"""';
      WebServicehandlerL@1170000011 : Codeunit 50066;
      JsonConvertL@1170000010 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      JsonFormattingL@1170000009 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Formatting";
      MsgHdrDirectionL@1170000008 : 'Incoming Request,Incoming Response,Outgoing Request,Outgoing Response';
      StatusL@1170000006 : 'To be Processed,Failed,Processed,Closed Manually,Skip Processing';
      EntryNoL@1170000001 : BigInteger;
      XmlDocL@1170000002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      AmntToCollect@1170000014 : Decimal;
    BEGIN
      ModistSetupL.GET;
      ModistSetupL.TESTFIELD("Carry Access Token");
      ModistSetupL.TESTFIELD("Carry Consumer Key");
      ModistSetupL.TESTFIELD("Carry Consumer Secret");
      ModistSetupL.TESTFIELD("Carry Create Order Url");
      ModistSetupL.TESTFIELD("Carry Realm");
      ModistSetupL.TESTFIELD("Carry Token Secret");
      ModistSetupL.TESTFIELD("Carry User ID");
      ModistSetupL.TESTFIELD("Carry Integration Code");

      XmlDocL := XmlDocL.XmlDocument;

      AmntToCollect := 0;
      IF SalesHeaderP."Payment Method Code" <> '' THEN BEGIN
        PaymentMethod.GET(SalesHeaderP."Payment Method Code");
        IF PaymentMethod."Payment Type" = PaymentMethod."Payment Type"::COD THEN BEGIN
          SalesHeaderP.CALCFIELDS("Amount Including VAT");
          AmntToCollect := SalesHeaderP."Amount Including VAT";
        END;
      END;

      ServicePointManagerL.SecurityProtocol := SecurityProtocolTypeL.Tls12;
      HttpClientL := HttpClientL.HttpClient();
      HttpClientL.BaseAddress := UriL.Uri(ModistSetupL."Carry Create Order Url");

      OAuthConsumerL := OAuthConsumerL.Consumer(ModistSetupL."Carry Consumer Key", ModistSetupL."Carry Consumer Secret");
      OAuthTokenL := OAuthTokenL.Token(ModistSetupL."Carry Access Token", ModistSetupL."Carry Token Secret");
      OAuthAuthorizationL := OAuthAuthorizationL.OAuthAuthorization(OAuthConsumerL, OAuthTokenL);

      BodyTextL := STRSUBSTNO(C_Body1 + C_Body2, ModistSetupL."Carry User ID", SalesHeaderP."No.", FALSE, FALSE, '', SalesHeaderP."Ship-to Address" + SalesHeaderP."Ship-to Address 2" + SalesHeaderP."Ship-to Address 3",
                            SalesHeaderP."Ship-to Name",SalesHeaderP."Ship-to Phone No.", '', '', '', '', '', '', '', '', FORMAT(AmntToCollect,0,9), 1, '', '', '[]');

      EntryNoL := WebServicehandlerL.InsertMessageHeader(MsgHdrDirectionL::"Outgoing Request", StatusL::Processed, 10, JsonConvertL.DeserializeXmlNode(BodyTextL.ToString, 'root'), 0, 0, ModistSetupL."Carry Integration Code");
      WebServicehandlerL.ModifyMessageHeader(EntryNoL, 0, StatusL::Processed, SalesHeaderP."No.", '');
      HttpClientL.DefaultRequestHeaders.Add('Authorization', STRSUBSTNO(C_OAuthDescription, OAuthAuthorizationL.GetAuthorizationHeader(ModistSetupL."Carry Create Order Url", C_Method), ModistSetupL."Carry Realm"));
      HttpStringContentL := HttpStringContentL.StringContent(BodyTextL.ToString, EncodingL.UTF8, 'application/json');
      HttpResponseMessageL := HttpClientL.PostAsync(ModistSetupL."Carry Create Order Url", HttpStringContentL).Result;
      ReponseTextL := HttpResponseMessageL.Content.ReadAsStringAsync().Result;
      JObjectL := JObjectL.Parse(ReponseTextL.ToString());
      IF HttpResponseMessageL.IsSuccessStatusCode THEN BEGIN
        IF JObjectL.GetValue('status').ToString = 'success' THEN
          WebServicehandlerL.InsertMessageHeader(MsgHdrDirectionL::"Outgoing Response", StatusL::"Skip Processing", 0, JsonConvertL.DeserializeXmlNode(ReponseTextL.ToString, 'root'), EntryNoL, EntryNoL, ModistSetupL."Carry Integration Code")
        ELSE BEGIN
          WebServicehandlerL.InsertErrorMessage(EntryNoL, '', '', JsonConvertL.DeserializeXmlNode(ReponseTextL.ToString, 'root'));
          WebServicehandlerL.ModifyMessageHeader(EntryNoL, 0, StatusL::"To be Processed", SalesHeaderP."No.", '');
        END;
      END ELSE BEGIN
        WebServicehandlerL.InsertErrorMessage(EntryNoL, '', '', JsonConvertL.DeserializeXmlNode(ReponseTextL.ToString, 'root'));
        WebServicehandlerL.ModifyMessageHeader(EntryNoL, 0, StatusL::"To be Processed", '', '');
      END;
    END;

    BEGIN
    {
      //Doc TM3032 ST 20/11/18 - New Object added for MARA Integration
    }
    END.
  }
}

