OBJECT Report 7052 Suggest Sales Price on Wksh.
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Suggest Sales Price on Wksh.;
               ENG=Suggest Sales Price on Wksh.];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CASE ToSalesType OF
                    ToSalesType::Customer:
                      BEGIN
                        ToCust."No." := ToSalesCode;
                        IF ToCust."No." <> '' THEN
                          ToCust.FIND
                        ELSE BEGIN
                          IF NOT ToCust.FIND THEN
                            ToCust.INIT;
                          ToSalesCode := ToCust."No.";
                        END;
                      END;
                    ToSalesType::"Customer Price Group":
                      BEGIN
                        ToCustPriceGr.Code := ToSalesCode;
                        IF ToCustPriceGr.Code <> '' THEN
                          ToCustPriceGr.FIND
                        ELSE BEGIN
                          IF NOT ToCustPriceGr.FIND THEN
                            ToCustPriceGr.INIT;
                          ToSalesCode := ToCustPriceGr.Code;
                        END;
                      END;
                    ToSalesType::Campaign:
                      BEGIN
                        ToCampaign."No." := ToSalesCode;
                        IF ToCampaign."No." <> '' THEN
                          ToCampaign.FIND
                        ELSE BEGIN
                          IF NOT ToCampaign.FIND THEN
                            ToCampaign.INIT;
                          ToSalesCode := ToCampaign."No.";
                        END;
                        ToStartDate := ToCampaign."Starting Date";
                        ToEndDate := ToCampaign."Ending Date";
                      END;
                  END;

                  ReplaceUnitOfMeasure := ToUnitOfMeasure.Code <> '';
                  ReplaceCurrency := ToCurrency.Code <> '';
                  ReplaceStartingDate := ToStartDate <> 0D;
                  ReplaceEndingDate := ToEndDate <> 0D;

                  IF ReplaceUnitOfMeasure AND (ToUnitOfMeasure.Code <> '') THEN
                    ToUnitOfMeasure.FIND;

                  RoundingMethod.SETRANGE(Code,RoundingMethod.Code);
                END;

  }
  DATASET
  {
    { 7331;    ;DataItem;                    ;
               DataItemTable=Table7002;
               DataItemTableView=SORTING(Item No.);
               OnPreDataItem=BEGIN
                               Window.OPEN(Text001);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Item."No." <> "Item No." THEN BEGIN
                                    Item.GET("Item No.");
                                    Window.UPDATE(1,"Item No.");
                                  END;

                                  ReplaceSalesCode := NOT (("Sales Type" = ToSalesType) AND ("Sales Code" = ToSalesCode));

                                  IF (ToSalesCode = '') AND (ToSalesType <> ToSalesType::"All Customers") THEN
                                    ERROR(Text002,"Sales Type");

                                  CLEAR(SalesPriceWksh);

                                  SalesPriceWksh.VALIDATE("Sales Type",ToSalesType);
                                  IF NOT ReplaceSalesCode THEN
                                    SalesPriceWksh.VALIDATE("Sales Code","Sales Code")
                                  ELSE
                                    SalesPriceWksh.VALIDATE("Sales Code",ToSalesCode);

                                  SalesPriceWksh.VALIDATE("Item No.","Item No.");
                                  SalesPriceWksh."New Unit Price" := "Unit Price";
                                  SalesPriceWksh."Minimum Quantity" := "Minimum Quantity";

                                  IF NOT ReplaceUnitOfMeasure THEN
                                    SalesPriceWksh."Unit of Measure Code" := "Unit of Measure Code"
                                  ELSE BEGIN
                                    SalesPriceWksh."Unit of Measure Code" := ToUnitOfMeasure.Code;
                                    IF NOT (SalesPriceWksh."Unit of Measure Code" IN ['',Item."Base Unit of Measure"]) THEN
                                      IF NOT ItemUnitOfMeasure.GET("Item No.",SalesPriceWksh."Unit of Measure Code") THEN
                                        CurrReport.SKIP;
                                    SalesPriceWksh."New Unit Price" :=
                                      SalesPriceWksh."New Unit Price" *
                                      UOMMgt.GetQtyPerUnitOfMeasure(Item,SalesPriceWksh."Unit of Measure Code") /
                                      UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                  END;
                                  SalesPriceWksh.VALIDATE("Unit of Measure Code");
                                  SalesPriceWksh.VALIDATE("Variant Code","Variant Code");

                                  IF NOT ReplaceCurrency THEN
                                    SalesPriceWksh."Currency Code" := "Currency Code"
                                  ELSE
                                    SalesPriceWksh."Currency Code" := ToCurrency.Code;

                                  IF NOT ReplaceStartingDate THEN BEGIN
                                    IF NOT ReplaceEndingDate THEN
                                      SalesPriceWksh.VALIDATE("Starting Date","Starting Date")
                                  END ELSE
                                    SalesPriceWksh.VALIDATE("Starting Date",ToStartDate);

                                  IF NOT ReplaceEndingDate THEN BEGIN
                                    IF NOT ReplaceStartingDate THEN
                                      SalesPriceWksh.VALIDATE("Ending Date","Ending Date")
                                  END ELSE
                                    SalesPriceWksh.VALIDATE("Ending Date",ToEndDate);

                                  IF "Currency Code" <> SalesPriceWksh."Currency Code" THEN BEGIN
                                    IF "Currency Code" <> '' THEN BEGIN
                                      FromCurrency.GET("Currency Code");
                                      FromCurrency.TESTFIELD(Code);
                                      SalesPriceWksh."New Unit Price" :=
                                        CurrExchRate.ExchangeAmtFCYToLCY(
                                          WORKDATE,"Currency Code",SalesPriceWksh."New Unit Price",
                                          CurrExchRate.ExchangeRate(
                                            WORKDATE,"Currency Code"));
                                    END;
                                    IF SalesPriceWksh."Currency Code" <> '' THEN
                                      SalesPriceWksh."New Unit Price" :=
                                        CurrExchRate.ExchangeAmtLCYToFCY(
                                          WORKDATE,SalesPriceWksh."Currency Code",
                                          SalesPriceWksh."New Unit Price",CurrExchRate.ExchangeRate(
                                            WORKDATE,SalesPriceWksh."Currency Code"));
                                  END;

                                  IF SalesPriceWksh."Currency Code" = '' THEN
                                    Currency2.InitRoundingPrecision
                                  ELSE BEGIN
                                    Currency2.GET(SalesPriceWksh."Currency Code");
                                    Currency2.TESTFIELD("Unit-Amount Rounding Precision");
                                  END;
                                  SalesPriceWksh."New Unit Price" :=
                                    ROUND(SalesPriceWksh."New Unit Price",Currency2."Unit-Amount Rounding Precision");

                                  IF SalesPriceWksh."New Unit Price" > PriceLowerLimit THEN
                                    SalesPriceWksh."New Unit Price" := SalesPriceWksh."New Unit Price" * UnitPriceFactor;
                                  IF RoundingMethod.Code <> '' THEN BEGIN
                                    RoundingMethod."Minimum Amount" := SalesPriceWksh."New Unit Price";
                                    IF RoundingMethod.FIND('=<') THEN BEGIN
                                      SalesPriceWksh."New Unit Price" :=
                                        SalesPriceWksh."New Unit Price" + RoundingMethod."Amount Added Before";
                                      IF RoundingMethod.Precision > 0 THEN
                                        SalesPriceWksh."New Unit Price" :=
                                          ROUND(
                                            SalesPriceWksh."New Unit Price",
                                            RoundingMethod.Precision,COPYSTR('=><',RoundingMethod.Type + 1,1));
                                      SalesPriceWksh."New Unit Price" := SalesPriceWksh."New Unit Price" +
                                        RoundingMethod."Amount Added After";
                                    END;
                                  END;

                                  SalesPriceWksh."Price Includes VAT" := "Price Includes VAT";
                                  SalesPriceWksh."VAT Bus. Posting Gr. (Price)" := "VAT Bus. Posting Gr. (Price)";
                                  SalesPriceWksh."Allow Invoice Disc." := "Allow Invoice Disc.";
                                  SalesPriceWksh."Allow Line Disc." := "Allow Line Disc.";
                                  SalesPriceWksh.CalcCurrentPrice(PriceAlreadyExists);

                                  IF PriceAlreadyExists OR CreateNewPrices THEN BEGIN
                                    SalesPriceWksh2 := SalesPriceWksh;
                                    IF SalesPriceWksh2.FIND('=') THEN
                                      SalesPriceWksh.MODIFY(TRUE)
                                    ELSE
                                      SalesPriceWksh.INSERT(TRUE);
                                  END;
                                END;

               ReqFilterFields=Sales Type,Sales Code,Item No.,Currency Code,Starting Date }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               ToEndDateCtrlEnable := TRUE;
               ToStartDateCtrlEnable := TRUE;
               SalesCodeCtrlEnable := TRUE;
             END;

      OnOpenPage=BEGIN
                   IF UnitPriceFactor = 0 THEN BEGIN
                     UnitPriceFactor := 1;
                     ToCustPriceGr.Code := '';
                     ToUnitOfMeasure.Code := '';
                     ToCurrency.Code := '';
                   END;

                   SalesCodeCtrlEnable := TRUE;
                   IF ToSalesType = ToSalesType::"All Customers" THEN
                     SalesCodeCtrlEnable := FALSE;

                   SalesCodeCtrlEnable := ToSalesType <> ToSalesType::"All Customers";
                   ToStartDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;
                   ToEndDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 21  ;2   ;Group     ;
                  CaptionML=[ENU=Copy to Sales Price Worksheet...;
                             ENG=Copy to Sales Price Worksheet...] }

      { 8   ;3   ;Field     ;
                  Name=SalesType;
                  CaptionML=[ENU=Sales Type;
                             ENG=Sales Type];
                  OptionCaptionML=[ENU=Customer,Customer Price Group,All Customers,Campaign;
                                   ENG=Customer,Customer Price Group,All Customers,Campaign];
                  SourceExpr=ToSalesType;
                  OnValidate=BEGIN
                               SalesCodeCtrlEnable := ToSalesType <> ToSalesType::"All Customers";
                               ToStartDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;
                               ToEndDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;

                               ToSalesCode := '';
                               ToStartDate := 0D;
                               ToEndDate := 0D;
                             END;
                              }

      { 1   ;3   ;Field     ;
                  Name=SalesCodeCtrl;
                  CaptionML=[ENU=Sales Code;
                             ENG=Sales Code];
                  SourceExpr=ToSalesCode;
                  Enabled=SalesCodeCtrlEnable;
                  OnValidate=VAR
                               Customer@1001 : Record 18;
                               CustomerPriceGroup@1003 : Record 6;
                               Campaign@1002 : Record 5071;
                             BEGIN
                               IF ToSalesType = ToSalesType::"All Customers" THEN
                                 EXIT;

                               CASE ToSalesType OF
                                 ToSalesType::Customer:
                                   Customer.GET(ToSalesCode);
                                 ToSalesType::"Customer Price Group":
                                   CustomerPriceGroup.GET(ToSalesCode);
                                 ToSalesType::Campaign:
                                   BEGIN
                                     Campaign.GET(ToSalesCode);
                                     ToStartDate := Campaign."Starting Date";
                                     ToEndDate := Campaign."Ending Date";
                                   END;
                               END;
                             END;

                  OnLookup=VAR
                             CustList@1003 : Page 22;
                             CustPriceGrList@1002 : Page 7;
                             CampaignList@1004 : Page 5087;
                           BEGIN
                             CASE ToSalesType OF
                               ToSalesType::Customer:
                                 BEGIN
                                   CustList.LOOKUPMODE := TRUE;
                                   CustList.SETRECORD(ToCust);
                                   IF CustList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                     CustList.GETRECORD(ToCust);
                                     ToSalesCode := ToCust."No.";
                                   END;
                                 END;
                               ToSalesType::"Customer Price Group":
                                 BEGIN
                                   CustPriceGrList.LOOKUPMODE := TRUE;
                                   CustPriceGrList.SETRECORD(ToCustPriceGr);
                                   IF CustPriceGrList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                     CustPriceGrList.GETRECORD(ToCustPriceGr);
                                     ToSalesCode := ToCustPriceGr.Code;
                                   END;
                                 END;
                               ToSalesType::Campaign:
                                 BEGIN
                                   CampaignList.LOOKUPMODE := TRUE;
                                   CampaignList.SETRECORD(ToCampaign);
                                   IF CampaignList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                     CampaignList.GETRECORD(ToCampaign);
                                     ToSalesCode := ToCampaign."No.";
                                     ToStartDate := ToCampaign."Starting Date";
                                     ToEndDate := ToCampaign."Ending Date";
                                   END;
                                 END;
                             END;
                           END;
                            }

      { 14  ;3   ;Field     ;
                  Name=UnitOfMeasureCode;
                  CaptionML=[ENU=Unit of Measure Code;
                             ENG=Unit of Measure Code];
                  SourceExpr=ToUnitOfMeasure.Code;
                  TableRelation="Unit of Measure";
                  OnValidate=BEGIN
                               IF ToUnitOfMeasure.Code <> '' THEN
                                 ToUnitOfMeasure.FIND;
                             END;
                              }

      { 2   ;3   ;Field     ;
                  Name=CurrencyCode;
                  CaptionML=[ENU=Currency Code;
                             ENG=Currency Code];
                  SourceExpr=ToCurrency.Code;
                  TableRelation=Currency;
                  OnValidate=BEGIN
                               IF ToCurrency.Code <> '' THEN
                                 ToCurrency.FIND;
                             END;
                              }

      { 3   ;3   ;Field     ;
                  Name=ToStartDateCtrl;
                  CaptionML=[ENU=Starting Date;
                             ENG=Starting Date];
                  SourceExpr=ToStartDate;
                  Enabled=ToStartDateCtrlEnable }

      { 10  ;3   ;Field     ;
                  Name=ToEndDateCtrl;
                  CaptionML=[ENU=Ending Date;
                             ENG=Ending Date];
                  SourceExpr=ToEndDate;
                  Enabled=ToEndDateCtrlEnable }

      { 4   ;2   ;Field     ;
                  Name=OnlyPricesAbove;
                  CaptionML=[ENU=Only Prices Above;
                             ENG=Only Prices Above];
                  DecimalPlaces=2:5;
                  SourceExpr=PriceLowerLimit }

      { 5   ;2   ;Field     ;
                  Name=AdjustmentFactor;
                  CaptionML=[ENU=Adjustment Factor;
                             ENG=Adjustment Factor];
                  DecimalPlaces=0:5;
                  SourceExpr=UnitPriceFactor;
                  MinValue=0 }

      { 6   ;2   ;Field     ;
                  Name=RoundingMethodCtrl;
                  CaptionML=[ENU=Rounding Method;
                             ENG=Rounding Method];
                  SourceExpr=RoundingMethod.Code;
                  TableRelation="Rounding Method" }

      { 7   ;2   ;Field     ;
                  Name=CreateNewPrices;
                  CaptionML=[ENU=Create New Prices;
                             ENG=Create New Prices];
                  SourceExpr=CreateNewPrices }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=Processing items  #1##########;ENG=Processing items  #1##########';
      SalesPriceWksh2@1037 : Record 7023;
      SalesPriceWksh@1005 : Record 7023;
      ToCust@1036 : Record 18;
      ToCustPriceGr@1035 : Record 6;
      ToCampaign@1020 : Record 5071;
      ToUnitOfMeasure@1006 : Record 204;
      ItemUnitOfMeasure@1007 : Record 5404;
      ToCurrency@1008 : Record 4;
      FromCurrency@1009 : Record 4;
      Currency2@1010 : Record 4;
      CurrExchRate@1011 : Record 330;
      RoundingMethod@1012 : Record 42;
      Item@1003 : Record 27;
      UOMMgt@1014 : Codeunit 5402;
      Window@1015 : Dialog;
      PriceAlreadyExists@1016 : Boolean;
      CreateNewPrices@1017 : Boolean;
      UnitPriceFactor@1018 : Decimal;
      PriceLowerLimit@1019 : Decimal;
      ToSalesType@1033 : 'Customer,Customer Price Group,All Customers,Campaign';
      ToSalesCode@1032 : Code[20];
      ToStartDate@1031 : Date;
      ToEndDate@1030 : Date;
      ReplaceSalesCode@1022 : Boolean;
      ReplaceUnitOfMeasure@1023 : Boolean;
      ReplaceCurrency@1024 : Boolean;
      ReplaceStartingDate@1025 : Boolean;
      ReplaceEndingDate@1002 : Boolean;
      Text002@1004 : TextConst 'ENU=Sales Code must be specified when copying from %1 to All Customers.;ENG=Sales Code must be specified when copying from %1 to All Customers.';
      SalesCodeCtrlEnable@19004995 : Boolean INDATASET;
      ToStartDateCtrlEnable@19060085 : Boolean INDATASET;
      ToEndDateCtrlEnable@19023823 : Boolean INDATASET;

    PROCEDURE InitializeRequest@3(NewToSalesType@1005 : 'Customer,Customer Price Group,Campaign,All CUstomers';NewToSalesCode@1004 : Code[20];NewToStartDate@1002 : Date;NewToEndDate@1000 : Date;NewToCurrCode@1001 : Code[10];NewToUOMCode@1003 : Code[10];NewCreateNewPrices@1006 : Boolean);
    BEGIN
      ToSalesType := NewToSalesType;
      ToSalesCode := NewToSalesCode;
      ToStartDate := NewToStartDate;
      ToEndDate := NewToEndDate;
      ToCurrency.Code := NewToCurrCode;
      ToUnitOfMeasure.Code := NewToUOMCode;
      CreateNewPrices := NewCreateNewPrices;
    END;

    PROCEDURE InitializeRequest2@1(NewToSalesType@1005 : 'Customer,Customer Price Group,Campaign,All CUstomers';NewToSalesCode@1004 : Code[20];NewToStartDate@1002 : Date;NewToEndDate@1000 : Date;NewToCurrCode@1001 : Code[10];NewToUOMCode@1003 : Code[10];NewCreateNewPrices@1006 : Boolean;NewPriceLowerLimit@1007 : Decimal;NewUnitPriceFactor@1008 : Decimal;NewRoundingMethodCode@1009 : Code[10]);
    BEGIN
      InitializeRequest(NewToSalesType,NewToSalesCode,NewToStartDate,NewToEndDate,NewToCurrCode,NewToUOMCode,NewCreateNewPrices);
      PriceLowerLimit := NewPriceLowerLimit;
      UnitPriceFactor := NewUnitPriceFactor;
      RoundingMethod.Code := NewRoundingMethodCode;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

