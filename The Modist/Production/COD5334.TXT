OBJECT Codeunit 5334 CRM Setup Defaults
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      IntegrationTableMapping@1000 : Record 5335;
      IntegrationFieldMapping@1001 : Record 5336;
      JobQueueEntryNameTok@1002 : TextConst '@@@="%1 = The Integration Table Name to synchronized (ex. CUSTOMER)";ENU=" %1 - Dynamics CRM synchronization job.";ENG=" %1 - Dynamics CRM synchronisation job."';
      SetupSuccessfulMsg@1004 : TextConst 'ENU=The default setup for Microsoft Dynamics CRM synchronization has completed successfully.;ENG=The default setup for Microsoft Dynamics CRM synchronisation has completed successfully.';
      IntegrationTablePrefixTok@1003 : TextConst '@@@={Locked} Product name;ENU=Dynamics CRM;ENG=Dynamics CRM';
      DefaultNAVPriceListNameTxt@1005 : TextConst 'ENU=Dynamics NAV Default Price List;ENG=Dynamics NAV Default Price List';
      CustomStatisticsSynchJobDescTxt@1006 : TextConst 'ENU=Customer Statistics - Dynamics CRM synchronization job.;ENG=Customer Statistics - Dynamics CRM synchronisation job.';
      CRMAccountConfigTemplateCodeTok@1007 : TextConst '@@@=Config. Template code for CRM Accounts created from Customers. Max length 10.;ENU=CRMACCOUNT;ENG=CRMACCOUNT';
      CRMAccountConfigTemplateDescTxt@1009 : TextConst '@@@=Max. length 50.;ENU=New CRM Account records created during synch.;ENG=New CRM Account records created during synch.';
      CustomerConfigTemplateCodeTok@1008 : TextConst '@@@=Customer template code for new customers created from CRM data. Max length 10.;ENU=CRMCUST;ENG=CRMCUST';
      CustomerConfigTemplateDescTxt@1010 : TextConst '@@@=Max. length 50.;ENU=New Customer records created during synch.;ENG=New Customer records created during synch.';

    PROCEDURE ResetConfiguration@9(ShowResultMessage@1000 : Boolean);
    VAR
      CRMConnectionSetup@1002 : Record 5330;
      TempCRMConnectionSetup@1004 : TEMPORARY Record 5330;
      CRMIntegrationManagement@1001 : Codeunit 5330;
      ConnectionName@1003 : Text;
    BEGIN
      CRMConnectionSetup.GET;
      ConnectionName := RegisterTempConnectionIfNeeded(CRMConnectionSetup,TempCRMConnectionSetup);
      IF ConnectionName <> '' THEN
        SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::CRM,ConnectionName,TRUE);

      ResetSalesPeopleSystemUserMapping;
      ResetCustomerAccountMapping;
      ResetContactContactMapping;
      ResetCurrencyTransactionCurrencyMapping;
      ResetUnitOfMeasureUoMScheduleMapping;
      ResetItemProductMapping;
      ResetResourceProductMapping;
      ResetSalesInvoiceHeaderInvoiceMapping;
      ResetSalesInvoiceLineInvoiceMapping;
      RecreateStatisticsJobQueueEntry;

      IF CRMIntegrationManagement.IsCRMSolutionInstalled THEN
        ResetCRMNAVConnectionUrl;

      IF ShowResultMessage THEN
        MESSAGE(SetupSuccessfulMsg);

      IF ConnectionName <> '' THEN
        TempCRMConnectionSetup.UnregisterConnection;
    END;

    LOCAL PROCEDURE ResetSalesPeopleSystemUserMapping@7();
    VAR
      SalespersonPurchaser@1001 : Record 13;
      CRMSystemuser@1002 : Record 5340;
      IntegrationTableMappingName@1000 : Code[20];
    BEGIN
      IntegrationTableMappingName := 'SALESPEOPLE';

      RemoveIntegrationTableMapping(IntegrationTableMappingName);
      InsertIntegrationTableMapping(
        IntegrationTableMappingName,
        DATABASE::"Salesperson/Purchaser",
        DATABASE::"CRM Systemuser",
        CODEUNIT::"CRM Integration Table Synch.",
        CRMSystemuser.FIELDNO(SystemUserId),
        CRMSystemuser.FIELDNO(ModifiedOn),
        '',
        '',
        IntegrationTableMapping.Direction::FromIntegrationTable,
        TRUE);

      CRMSystemuser.RESET;
      CRMSystemuser.SETRANGE(IsDisabled,FALSE);
      CRMSystemuser.SETRANGE(IsLicensed,TRUE);
      IntegrationTableMapping.SetIntegrationTableFilter(
        GetTableFilterFromView(DATABASE::"CRM Systemuser",CRMSystemuser.TABLECAPTION,CRMSystemuser.GETVIEW));
      IntegrationTableMapping.MODIFY;

      // E-mail > InternalEMailAddress
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalespersonPurchaser.FIELDNO("E-Mail"),
        CRMSystemuser.FIELDNO(InternalEMailAddress),
        IntegrationFieldMapping.Direction::FromIntegrationTable,
        '',TRUE,FALSE);

      // Name > FullName
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalespersonPurchaser.FIELDNO(Name),
        CRMSystemuser.FIELDNO(FullName),
        IntegrationFieldMapping.Direction::FromIntegrationTable,
        '',TRUE,FALSE);

      // Phone No. > MobilePhone
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalespersonPurchaser.FIELDNO("Phone No."),
        CRMSystemuser.FIELDNO(MobilePhone),
        IntegrationFieldMapping.Direction::FromIntegrationTable,
        '',TRUE,FALSE);

      RecreateJobQueueEntry(30);
    END;

    LOCAL PROCEDURE ResetCustomerAccountMapping@2();
    VAR
      CRMAccount@1001 : Record 5341;
      Customer@1002 : Record 18;
      IntegrationTableMappingName@1000 : Code[20];
    BEGIN
      IntegrationTableMappingName := 'CUSTOMER';

      RemoveIntegrationTableMapping(IntegrationTableMappingName);

      InsertIntegrationTableMapping(
        IntegrationTableMappingName,
        DATABASE::Customer,DATABASE::"CRM Account",
        CODEUNIT::"CRM Integration Table Synch.",
        CRMAccount.FIELDNO(AccountId),
        CRMAccount.FIELDNO(ModifiedOn),
        ResetCustomerConfigTemplate,
        ResetAccountConfigTemplate,
        IntegrationTableMapping.Direction::Bidirectional,
        TRUE);

      CRMAccount.SETRANGE(StateCode,CRMAccount.StateCode::Active);
      CRMAccount.SETRANGE(CustomerTypeCode,CRMAccount.CustomerTypeCode::Customer);
      IntegrationTableMapping.SetIntegrationTableFilter(
        GetTableFilterFromView(DATABASE::"CRM Account",CRMAccount.TABLECAPTION,CRMAccount.GETVIEW));
      IntegrationTableMapping.MODIFY;

      // Name > Name
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO(Name),
        CRMAccount.FIELDNO(Name),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Contact > Address1_PrimaryContactName
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO(Contact),
        CRMAccount.FIELDNO(Address1_PrimaryContactName),
        IntegrationFieldMapping.Direction::FromIntegrationTable,
        '',FALSE,FALSE); // We do not validate contact name.

      // Address > Address1_Line1
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO(Address),
        CRMAccount.FIELDNO(Address1_Line1),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Address 2 > Address1_Line2
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO("Address 2"),
        CRMAccount.FIELDNO(Address1_Line2),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Post Code > Address1_PostalCode
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO("Post Code"),
        CRMAccount.FIELDNO(Address1_PostalCode),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // City > Address1_City
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO(City),
        CRMAccount.FIELDNO(Address1_City),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Country > Address1_Country
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO("Country/Region Code"),
        CRMAccount.FIELDNO(Address1_Country),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // E-Mail > EmailAddress1
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO("E-Mail"),
        CRMAccount.FIELDNO(EMailAddress1),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Fax No > Fax
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO("Fax No."),
        CRMAccount.FIELDNO(Fax),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Home Page > WebSiteUrl
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO("Home Page"),
        CRMAccount.FIELDNO(WebSiteURL),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Phone No. > Telephone1
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO("Phone No."),
        CRMAccount.FIELDNO(Telephone1),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Shipment Method Code > address1_freighttermscode
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO("Shipment Method Code"),
        CRMAccount.FIELDNO(Address1_FreightTermsCode),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Shipping Agent Code > address1_shippingmethodcode
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO("Shipping Agent Code"),
        CRMAccount.FIELDNO(Address1_ShippingMethodCode),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Payment Terms Code > paymenttermscode
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO("Payment Terms Code"),
        CRMAccount.FIELDNO(PaymentTermsCode),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Credit Limit (LCY) > creditlimit
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Customer.FIELDNO("Credit Limit (LCY)"),
        CRMAccount.FIELDNO(CreditLimit),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      RecreateJobQueueEntry(2);
    END;

    LOCAL PROCEDURE ResetContactContactMapping@3();
    VAR
      CRMContact@1001 : Record 5342;
      Contact@1002 : Record 5050;
      EmptyGuid@1004 : GUID;
      IntegrationTableMappingName@1000 : Code[20];
    BEGIN
      IntegrationTableMappingName := 'CONTACT';
      RemoveIntegrationTableMapping(IntegrationTableMappingName);

      InsertIntegrationTableMapping(
        IntegrationTableMappingName,
        DATABASE::Contact,DATABASE::"CRM Contact",
        CODEUNIT::"CRM Integration Table Synch.",
        CRMContact.FIELDNO(ContactId),
        CRMContact.FIELDNO(ModifiedOn),
        '',
        '',
        IntegrationTableMapping.Direction::Bidirectional,
        TRUE);

      Contact.RESET;
      Contact.SETRANGE(Type,Contact.Type::Person);
      Contact.SETFILTER("Company No.",'<>''''');
      IntegrationTableMapping.SetTableFilter(GetTableFilterFromView(DATABASE::Contact,Contact.TABLECAPTION,Contact.GETVIEW));

      CRMContact.RESET;
      CRMContact.SETFILTER(ParentCustomerId,'<>''%1''',EmptyGuid);
      CRMContact.SETRANGE(ParentCustomerIdType,CRMContact.ParentCustomerIdType::account);
      IntegrationTableMapping.SetIntegrationTableFilter(
        GetTableFilterFromView(DATABASE::"CRM Contact",CRMContact.TABLECAPTION,CRMContact.GETVIEW));
      IntegrationTableMapping.MODIFY;

      // Address > Address1_Line1
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO(Address),
        CRMContact.FIELDNO(Address1_Line1),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Address 2 > Address1_Line2
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Address 2"),
        CRMContact.FIELDNO(Address1_Line2),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Post Code > Address1_PostalCode
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Post Code"),
        CRMContact.FIELDNO(Address1_PostalCode),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // City > Address1_City
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO(City),
        CRMContact.FIELDNO(Address1_City),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Country/Region Code > Address1_Country
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Country/Region Code"),
        CRMContact.FIELDNO(Address1_Country),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // E-Mail > EmailAddress1
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("E-Mail"),
        CRMContact.FIELDNO(EMailAddress1),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Fax No. > Fax
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Fax No."),
        CRMContact.FIELDNO(Fax),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // First Name > FirstName
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("First Name"),
        CRMContact.FIELDNO(FirstName),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Middle Name > MiddleName
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Middle Name"),
        CRMContact.FIELDNO(MiddleName),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Surname > LastName
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO(Surname),
        CRMContact.FIELDNO(LastName),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Home Page > WebSiteUrl
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Home Page"),
        CRMContact.FIELDNO(WebSiteUrl),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Mobile Phone No. > MobilePhone
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Mobile Phone No."),
        CRMContact.FIELDNO(MobilePhone),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Pager > Pager
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO(Pager),
        CRMContact.FIELDNO(Pager),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Phone No. > Telephone1
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO("Phone No."),
        CRMContact.FIELDNO(Telephone1),
        IntegrationFieldMapping.Direction::Bidirectional,
        '',TRUE,FALSE);

      // Type
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Contact.FIELDNO(Type),
        0,
        IntegrationFieldMapping.Direction::FromIntegrationTable,
        FORMAT(Contact.Type::Person),TRUE,FALSE);

      RecreateJobQueueEntry(2);
    END;

    LOCAL PROCEDURE ResetCurrencyTransactionCurrencyMapping@10();
    VAR
      Currency@1003 : Record 4;
      CRMTransactioncurrency@1004 : Record 5345;
      IntegrationTableMappingName@1000 : Code[20];
    BEGIN
      IntegrationTableMappingName := 'CURRENCY';
      RemoveIntegrationTableMapping(IntegrationTableMappingName);

      InsertIntegrationTableMapping(
        IntegrationTableMappingName,
        DATABASE::Currency,// NAV Table No.
        DATABASE::"CRM Transactioncurrency",// Foreign Table No.
        CODEUNIT::"CRM Integration Table Synch.",// Mapping codeunit No.
        CRMTransactioncurrency.FIELDNO(TransactionCurrencyId),// IntegrationTableUIDFieldNo
        CRMTransactioncurrency.FIELDNO(ModifiedOn),// IntegrationTableModifiedFieldNo
        '',// TableConfigTemplateCode
        '',// IntegrationTableConfigTemplateCode
        IntegrationTableMapping.Direction::ToIntegrationTable,
        TRUE);// SynchOnlyCoupledRecords

      // Code > ISOCurrencyCode
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Currency.FIELDNO(Code),
        CRMTransactioncurrency.FIELDNO(ISOCurrencyCode),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Code > CurrencySymbol
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Currency.FIELDNO(Code),
        CRMTransactioncurrency.FIELDNO(CurrencySymbol),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Description > CurrencyName
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Currency.FIELDNO(Description),
        CRMTransactioncurrency.FIELDNO(CurrencyName),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      RecreateJobQueueEntry(2);
    END;

    LOCAL PROCEDURE ResetItemProductMapping@12();
    VAR
      Item@1003 : Record 27;
      CRMProduct@1004 : Record 5348;
      IntegrationTableMappingName@1000 : Code[20];
    BEGIN
      IntegrationTableMappingName := 'ITEM-PRODUCT';
      RemoveIntegrationTableMapping(IntegrationTableMappingName);

      InsertIntegrationTableMapping(
        IntegrationTableMappingName,
        DATABASE::Item,// NAV Table No.
        DATABASE::"CRM Product",// Foreign Table No.
        CODEUNIT::"CRM Integration Table Synch.",// Mapping codeunit No.
        CRMProduct.FIELDNO(ProductId),// IntegrationTableUIDFieldNo
        CRMProduct.FIELDNO(ModifiedOn),// IntegrationTableModifiedFieldNo
        '',// TableConfigTemplateCode
        '',// IntegrationTableConfigTemplateCode
        IntegrationTableMapping.Direction::ToIntegrationTable,
        TRUE);// SynchOnlyCoupledRecords

      // "No." > ProductNumber
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Item.FIELDNO("No."),
        CRMProduct.FIELDNO(ProductNumber),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Description > Name
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Item.FIELDNO(Description),
        CRMProduct.FIELDNO(Name),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Unit Price > Price
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Item.FIELDNO("Unit Price"),
        CRMProduct.FIELDNO(Price),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Unit Cost > Standard Cost
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Item.FIELDNO("Unit Cost"),
        CRMProduct.FIELDNO(StandardCost),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Unit Cost > Current Cost
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Item.FIELDNO("Unit Cost"),
        CRMProduct.FIELDNO(CurrentCost),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Unit Volume > Stock Volume
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Item.FIELDNO("Unit Volume"),
        CRMProduct.FIELDNO(StockVolume),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Gross Weight > Stock Weight
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Item.FIELDNO("Gross Weight"),
        CRMProduct.FIELDNO(StockWeight),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Vendor No. > Vendor part number
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Item.FIELDNO("Vendor No."),
        CRMProduct.FIELDNO(VendorPartNumber),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Inventory > Quantity on Hand. If less then zero, it will later be set to zero
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Item.FIELDNO(Inventory),
        CRMProduct.FIELDNO(QuantityOnHand),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      RecreateJobQueueEntry(30);
    END;

    LOCAL PROCEDURE ResetResourceProductMapping@13();
    VAR
      Resource@1003 : Record 156;
      CRMProduct@1004 : Record 5348;
      IntegrationTableMappingName@1000 : Code[20];
    BEGIN
      IntegrationTableMappingName := 'RESOURCE-PRODUCT';
      RemoveIntegrationTableMapping(IntegrationTableMappingName);

      InsertIntegrationTableMapping(
        IntegrationTableMappingName,
        DATABASE::Resource,// NAV Table No.
        DATABASE::"CRM Product",// Foreign Table No.
        CODEUNIT::"CRM Integration Table Synch.",// Mapping codeunit No.
        CRMProduct.FIELDNO(ProductId),// IntegrationTableUIDFieldNo
        CRMProduct.FIELDNO(ModifiedOn),// IntegrationTableModifiedFieldNo
        '',// TableConfigTemplateCode
        '',// IntegrationTableConfigTemplateCode
        IntegrationTableMapping.Direction::ToIntegrationTable,
        TRUE);// SynchOnlyCoupledRecords

      // "No." > ProductNumber
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Resource.FIELDNO("No."),
        CRMProduct.FIELDNO(ProductNumber),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Name > Name
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Resource.FIELDNO(Name),
        CRMProduct.FIELDNO(Name),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Unit Price > Price
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Resource.FIELDNO("Unit Price"),
        CRMProduct.FIELDNO(Price),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Unit Cost > Standard Cost
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Resource.FIELDNO("Unit Cost"),
        CRMProduct.FIELDNO(StandardCost),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Unit Cost > Current Cost
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Resource.FIELDNO("Unit Cost"),
        CRMProduct.FIELDNO(CurrentCost),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Vendor No. > Vendor part number
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Resource.FIELDNO("Vendor No."),
        CRMProduct.FIELDNO(VendorPartNumber),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Capacity > Quantity on Hand. If less then zero, it will later be set to zero
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        Resource.FIELDNO(Capacity),
        CRMProduct.FIELDNO(QuantityOnHand),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      RecreateJobQueueEntry(2);
    END;

    LOCAL PROCEDURE ResetSalesInvoiceHeaderInvoiceMapping@23();
    VAR
      SalesInvoiceHeader@1003 : Record 112;
      CRMInvoice@1004 : Record 5355;
      IntegrationTableMappingName@1000 : Code[20];
    BEGIN
      IntegrationTableMappingName := 'POSTEDSALESINV-INV';
      RemoveIntegrationTableMapping(IntegrationTableMappingName);

      InsertIntegrationTableMapping(
        IntegrationTableMappingName,
        DATABASE::"Sales Invoice Header",// NAV Table No.
        DATABASE::"CRM Invoice",// Foreign Table No.
        CODEUNIT::"CRM Integration Table Synch.",// Mapping codeunit No.
        CRMInvoice.FIELDNO(InvoiceId),// IntegrationTableUIDFieldNo
        CRMInvoice.FIELDNO(ModifiedOn),// IntegrationTableModifiedFieldNo
        '',// TableConfigTemplateCode
        '',// IntegrationTableConfigTemplateCode
        IntegrationTableMapping.Direction::ToIntegrationTable,
        TRUE);// SynchOnlyCoupledRecords

      // "No." > InvoiceNumber
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("No."),
        CRMInvoice.FIELDNO(InvoiceNumber),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // "Due Date" > DueDate
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Due Date"),
        CRMInvoice.FIELDNO(DueDate),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Payment Discount % > DiscountPercentage
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Payment Discount %"),
        CRMInvoice.FIELDNO(DiscountPercentage),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Ship-to Name
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Ship-to Name"),
        CRMInvoice.FIELDNO(ShipTo_Name),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Ship-to Address
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Ship-to Address"),
        CRMInvoice.FIELDNO(ShipTo_Line1),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Ship-to Address 2
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Ship-to Address 2"),
        CRMInvoice.FIELDNO(ShipTo_Line2),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Ship-to City
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Ship-to City"),
        CRMInvoice.FIELDNO(ShipTo_City),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // "Ship-to Country/Region Code"
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Ship-to Country/Region Code"),
        CRMInvoice.FIELDNO(ShipTo_Country),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // "Ship-to Post Code"
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Ship-to Post Code"),
        CRMInvoice.FIELDNO(ShipTo_PostalCode),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // "Ship-to County"
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Ship-to County"),
        CRMInvoice.FIELDNO(ShipTo_StateOrProvince),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // "Shipment Date"
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Shipment Date"),
        CRMInvoice.FIELDNO(DateDelivered),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Bill-to Name
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Bill-to Name"),
        CRMInvoice.FIELDNO(BillTo_Name),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Bill-to Address
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Bill-to Address"),
        CRMInvoice.FIELDNO(BillTo_Line1),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Bill-to Address 2
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Bill-to Address 2"),
        CRMInvoice.FIELDNO(BillTo_Line2),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Bill-to City
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Bill-to City"),
        CRMInvoice.FIELDNO(BillTo_City),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Bill-to Country/Region Code
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Bill-to Country/Region Code"),
        CRMInvoice.FIELDNO(BillTo_Country),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // "Bill-to Post Code"
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Bill-to Post Code"),
        CRMInvoice.FIELDNO(BillTo_PostalCode),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // "Bill-to County"
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Bill-to County"),
        CRMInvoice.FIELDNO(BillTo_StateOrProvince),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Amount
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Amount Including VAT"),
        CRMInvoice.FIELDNO(TotalAmount),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // Amount
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceHeader.FIELDNO("Amount Including VAT"),
        CRMInvoice.FIELDNO(TotalLineItemAmount),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      RecreateJobQueueEntry(30);
    END;

    LOCAL PROCEDURE ResetSalesInvoiceLineInvoiceMapping@25();
    VAR
      SalesInvoiceLine@1003 : Record 113;
      CRMInvoicedetail@1004 : Record 5356;
      IntegrationTableMappingName@1000 : Code[20];
    BEGIN
      IntegrationTableMappingName := 'POSTEDSALESLINE-INV';
      RemoveIntegrationTableMapping(IntegrationTableMappingName);

      InsertIntegrationTableMapping(
        IntegrationTableMappingName,
        DATABASE::"Sales Invoice Line",// NAV Table No.
        DATABASE::"CRM Invoicedetail",// Foreign Table No.
        CODEUNIT::"CRM Integration Table Synch.",// Mapping codeunit No.
        CRMInvoicedetail.FIELDNO(InvoiceDetailId),// IntegrationTableUIDFieldNo
        CRMInvoicedetail.FIELDNO(ModifiedOn),// IntegrationTableModifiedFieldNo
        '',// TableConfigTemplateCode
        '',// IntegrationTableConfigTemplateCode
        IntegrationTableMapping.Direction::ToIntegrationTable,
        FALSE);// SynchOnlyCoupledRecords

      // Quantity -> Quantity
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceLine.FIELDNO(Quantity),
        CRMInvoicedetail.FIELDNO(Quantity),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // "Line Discount Amount" -> "Manual Discount Amount"
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceLine.FIELDNO("Line Discount Amount"),
        CRMInvoicedetail.FIELDNO(ManualDiscountAmount),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // "Unit Price" > PricePerUnit
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        SalesInvoiceLine.FIELDNO("Unit Price"),
        CRMInvoicedetail.FIELDNO(PricePerUnit),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      // TRUE > IsPriceOverridden
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        0,
        CRMInvoicedetail.FIELDNO(IsPriceOverridden),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '1',TRUE,FALSE);
    END;

    LOCAL PROCEDURE ResetUnitOfMeasureUoMScheduleMapping@11();
    VAR
      UnitOfMeasure@1003 : Record 204;
      CRMUomschedule@1004 : Record 5362;
      IntegrationTableMappingName@1000 : Code[20];
    BEGIN
      IntegrationTableMappingName := 'UNIT OF MEASURE';
      RemoveIntegrationTableMapping(IntegrationTableMappingName);

      InsertIntegrationTableMapping(
        IntegrationTableMappingName,
        DATABASE::"Unit of Measure",// NAV Table No.
        DATABASE::"CRM Uomschedule",// Foreign Table No.
        CODEUNIT::"CRM Integration Table Synch.",// Mapping codeunit No.
        CRMUomschedule.FIELDNO(UoMScheduleId),// IntegrationTableUIDFieldNo
        CRMUomschedule.FIELDNO(ModifiedOn),// IntegrationTableModifiedFieldNo
        '',// TableConfigTemplateCode
        '',// IntegrationTableConfigTemplateCode
        IntegrationTableMapping.Direction::ToIntegrationTable,
        TRUE);// SynchOnlyCoupledRecords

      // Code > BaseUoM Name
      InsertIntegrationFieldMapping(
        IntegrationTableMappingName,
        UnitOfMeasure.FIELDNO(Code),
        CRMUomschedule.FIELDNO(BaseUoMName),
        IntegrationFieldMapping.Direction::ToIntegrationTable,
        '',TRUE,FALSE);

      RecreateJobQueueEntry(2);
    END;

    LOCAL PROCEDURE InsertIntegrationTableMapping@5(IntegrationTableMappingName@1000 : Code[20];TableNo@1001 : Integer;IntegrationTableNo@1002 : Integer;MappingCodeunitNo@1004 : Integer;IntegrationTableUIDFieldNo@1005 : Integer;IntegrationTableModifiedFieldNo@1006 : Integer;TableConfigTemplateCode@1003 : Code[10];IntegrationTableConfigTemplateCode@1007 : Code[10];SynchDirection@1008 : Option;SynchOnlyCoupledRecords@1009 : Boolean);
    BEGIN
      WITH IntegrationTableMapping DO BEGIN
        RESET;
        INIT;
        Name := COPYSTR(IntegrationTableMappingName,1,MAXSTRLEN(Name));
        "Table ID" := TableNo;
        "Integration Table ID" := IntegrationTableNo;
        "Synch. Codeunit ID" := MappingCodeunitNo;
        "Integration Table UID Fld. No." := IntegrationTableUIDFieldNo;
        "Int. Tbl. Modified On Fld. No." := IntegrationTableModifiedFieldNo;
        "Table Config Template Code" := TableConfigTemplateCode;
        "Int. Tbl. Config Template Code" := IntegrationTableConfigTemplateCode;
        Direction := SynchDirection;
        "Int. Tbl. Caption Prefix" := IntegrationTablePrefixTok;
        "Synch. Only Coupled Records" := SynchOnlyCoupledRecords;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertIntegrationFieldMapping@1(IntegrationTableMappingName@1000 : Code[20];TableFieldNo@1001 : Integer;IntegrationTableFieldNo@1002 : Integer;SynchDirection@1004 : Option;ConstValue@1005 : Text;ValidateField@1003 : Boolean;ValidateIntegrationTableField@1006 : Boolean);
    BEGIN
      WITH IntegrationFieldMapping DO BEGIN
        RESET;
        INIT;
        "No." := 0;
        "Integration Table Mapping Name" := IntegrationTableMappingName;
        "Field No." := TableFieldNo;
        "Integration Table Field No." := IntegrationTableFieldNo;
        Direction := SynchDirection;
        "Constant Value" := COPYSTR(ConstValue,1,MAXSTRLEN("Constant Value"));
        "Validate Field" := ValidateField;
        "Validate Integration Table Fld" := ValidateIntegrationTableField;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE RecreateStatisticsJobQueueEntry@14();
    VAR
      JobQueueEntry@1000 : Record 472;
    BEGIN
      WITH JobQueueEntry DO BEGIN
        SETRANGE("Object Type to Run","Object Type to Run"::Codeunit);
        SETRANGE("Object ID to Run",CODEUNIT::"CRM Statistics Job");
        DELETEALL;

        INIT;
        ID := CREATEGUID;
        "Earliest Start Date/Time" := CREATEDATETIME(TODAY,TIME);
        "Object Type to Run" := "Object Type to Run"::Codeunit;
        "Object ID to Run" := CODEUNIT::"CRM Statistics Job";
        "Run in User Session" := FALSE;
        Priority := 1000;
        Description := COPYSTR(CustomStatisticsSynchJobDescTxt,1,MAXSTRLEN(Description));
        "Recurring Job" := TRUE;
        "No. of Minutes between Runs" := 30;
        "Run on Mondays" := TRUE;
        "Run on Tuesdays" := TRUE;
        "Run on Wednesdays" := TRUE;
        "Run on Thursdays" := TRUE;
        "Run on Fridays" := TRUE;
        "Run on Saturdays" := TRUE;
        "Run on Sundays" := TRUE;
        "Maximum No. of Attempts to Run" := 2;
        Status := Status::"On Hold";
        "Rerun Delay (sec.)" := 30;
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE RecreateJobQueueEntry@8(IntervalInMinutes@1002 : Integer);
    VAR
      JobQueueEntry@1001 : Record 472;
    BEGIN
      WITH JobQueueEntry DO BEGIN
        SETRANGE("Object Type to Run","Object Type to Run"::Codeunit);
        SETRANGE("Object ID to Run",CODEUNIT::"Integration Synch. Job Runner");
        SETRANGE("Record ID to Process",IntegrationTableMapping.RECORDID);
        DELETEALL;

        INIT;
        ID := CREATEGUID;
        "Earliest Start Date/Time" := CREATEDATETIME(TODAY,TIME);
        "Object Type to Run" := "Object Type to Run"::Codeunit;
        "Object ID to Run" := CODEUNIT::"Integration Synch. Job Runner";
        "Record ID to Process" := IntegrationTableMapping.RECORDID;
        "Run in User Session" := FALSE;
        Priority := 1000;
        Description := COPYSTR(STRSUBSTNO(JobQueueEntryNameTok,IntegrationTableMapping.Name),1,MAXSTRLEN(Description));
        "Recurring Job" := TRUE;
        "No. of Minutes between Runs" := IntervalInMinutes;
        "Run on Mondays" := TRUE;
        "Run on Tuesdays" := TRUE;
        "Run on Wednesdays" := TRUE;
        "Run on Thursdays" := TRUE;
        "Run on Fridays" := TRUE;
        "Run on Saturdays" := TRUE;
        "Run on Sundays" := TRUE;
        "Maximum No. of Attempts to Run" := 10;
        Status := Status::Ready;
        "Rerun Delay (sec.)" := 30;
        INSERT(TRUE);
      END;
    END;

    PROCEDURE ResetCRMNAVConnectionUrl@19();
    VAR
      CRMIntegrationManagement@1000 : Codeunit 5330;
    BEGIN
      CRMIntegrationManagement.SetCRMNAVConnectionUrl(GETURL(CLIENTTYPE::Web));
    END;

    LOCAL PROCEDURE RemoveIntegrationTableMapping@6(IntegrationTableMappingName@1000 : Code[20]);
    BEGIN
      IntegrationFieldMapping.RESET;
      IntegrationFieldMapping.SETRANGE("Integration Table Mapping Name",IntegrationTableMappingName);
      IntegrationFieldMapping.DELETEALL;

      IntegrationTableMapping.RESET;
      IntegrationTableMapping.SETRANGE(Name,IntegrationTableMappingName);
      IntegrationTableMapping.DELETEALL;
    END;

    PROCEDURE GetAddPostedSalesDocumentToCRMAccountWallConfig@4() : Boolean;
    BEGIN
      EXIT(TRUE);
    END;

    PROCEDURE GetAllowNonSecureConnections@20() : Boolean;
    BEGIN
      EXIT(FALSE);
    END;

    PROCEDURE GetDefaultNAVPriceListName@17() : Text[100];
    BEGIN
      EXIT(DefaultNAVPriceListNameTxt);
    END;

    PROCEDURE GetProductQuantityPrecision@16() : Integer;
    BEGIN
      EXIT(2);
    END;

    LOCAL PROCEDURE GetTableFilterFromView@18(TableID@1000 : Integer;Caption@1001 : Text;View@1002 : Text) : Text;
    VAR
      FilterBuilder@1003 : FilterPageBuilder;
    BEGIN
      FilterBuilder.ADDTABLE(Caption,TableID);
      FilterBuilder.SETVIEW(Caption,View);
      EXIT(FilterBuilder.GETVIEW(Caption,TRUE));
    END;

    PROCEDURE GetPrioritizedMappingList@21(VAR NameValueBuffer@1000 : Record 823);
    VAR
      NextPriority@1002 : Integer;
    BEGIN
      NextPriority := 1;

      // 1) From CRM Systemusers
      AddPrioritizedMappingsToList(NameValueBuffer,NextPriority,0,DATABASE::"CRM Systemuser");
      // 2) From Currency
      AddPrioritizedMappingsToList(NameValueBuffer,NextPriority,DATABASE::Currency,0);
      // 3) From Unit of measure
      AddPrioritizedMappingsToList(NameValueBuffer,NextPriority,DATABASE::"Unit of Measure",0);
      // 4) To/From Customers/CRM Accounts
      AddPrioritizedMappingsToList(NameValueBuffer,NextPriority,DATABASE::Customer,DATABASE::"CRM Account");
      // 5) To/From Contacts/CRM Contacts
      AddPrioritizedMappingsToList(NameValueBuffer,NextPriority,DATABASE::Contact,DATABASE::"CRM Contact");
      // 6) From Items to CRM Products
      AddPrioritizedMappingsToList(NameValueBuffer,NextPriority,DATABASE::Item,DATABASE::"CRM Product");
      // 7) From Resources to CRM Products
      AddPrioritizedMappingsToList(NameValueBuffer,NextPriority,DATABASE::Resource,DATABASE::"CRM Product");

      IntegrationTableMapping.RESET;
      IntegrationTableMapping.SETFILTER("Parent Name",'=''''');
      IF IntegrationTableMapping.FINDSET THEN
        REPEAT
          AddPrioritizedMappingToList(NameValueBuffer,NextPriority,IntegrationTableMapping.Name);
        UNTIL IntegrationTableMapping.NEXT = 0;
    END;

    LOCAL PROCEDURE AddPrioritizedMappingsToList@30(VAR NameValueBuffer@1002 : Record 823;VAR Priority@1001 : Integer;TableID@1000 : Integer;IntegrationTableID@1003 : Integer);
    BEGIN
      WITH IntegrationTableMapping DO BEGIN
        IF TableID > 0 THEN BEGIN
          RESET;
          SETRANGE("Table ID",TableID);
          IF FINDSET THEN
            REPEAT
              AddPrioritizedMappingToList(NameValueBuffer,Priority,Name);
            UNTIL NEXT = 0;
        END;
        IF IntegrationTableID > 0 THEN BEGIN
          RESET;
          SETRANGE("Integration Table ID",IntegrationTableID);
          IF FINDSET THEN
            REPEAT
              AddPrioritizedMappingToList(NameValueBuffer,Priority,Name);
            UNTIL NEXT = 0;
        END;

        RESET;
      END;
    END;

    LOCAL PROCEDURE AddPrioritizedMappingToList@24(VAR NameValueBuffer@1002 : Record 823;VAR Priority@1000 : Integer;MappingName@1001 : Code[20]);
    BEGIN
      WITH NameValueBuffer DO BEGIN
        SETRANGE(Value,MappingName);

        IF NOT FINDFIRST THEN BEGIN
          INIT;
          ID := Priority;
          Name := FORMAT(Priority);
          Value := MappingName;
          INSERT;
          Priority := Priority + 1;
        END;

        RESET;
      END;
    END;

    PROCEDURE GetTableIDCRMEntityNameMapping@22(VAR TempNameValueBuffer@1000 : TEMPORARY Record 823);
    BEGIN
      TempNameValueBuffer.RESET;
      TempNameValueBuffer.DELETEALL;

      AddEntityTableMapping('systemuser',DATABASE::"Salesperson/Purchaser",TempNameValueBuffer);
      AddEntityTableMapping('systemuser',DATABASE::"CRM Systemuser",TempNameValueBuffer);

      AddEntityTableMapping('account',DATABASE::Customer,TempNameValueBuffer);
      AddEntityTableMapping('account',DATABASE::"CRM Account",TempNameValueBuffer);

      AddEntityTableMapping('contact',DATABASE::Contact,TempNameValueBuffer);
      AddEntityTableMapping('contact',DATABASE::"CRM Contact",TempNameValueBuffer);

      AddEntityTableMapping('product',DATABASE::Item,TempNameValueBuffer);
      AddEntityTableMapping('product',DATABASE::Resource,TempNameValueBuffer);
      AddEntityTableMapping('product',DATABASE::"CRM Product",TempNameValueBuffer);

      AddEntityTableMapping('salesorder',DATABASE::"Sales Header",TempNameValueBuffer);
      AddEntityTableMapping('salesorder',DATABASE::"CRM Salesorder",TempNameValueBuffer);

      AddEntityTableMapping('invoice',DATABASE::"Sales Invoice Header",TempNameValueBuffer);
      AddEntityTableMapping('invoice',DATABASE::"CRM Invoice",TempNameValueBuffer);

      // Only NAV
      AddEntityTableMapping('transactioncurrency',DATABASE::Currency,TempNameValueBuffer);
      AddEntityTableMapping('uomschedule',DATABASE::"Unit of Measure",TempNameValueBuffer);

      // Only CRM
      AddEntityTableMapping('incident',DATABASE::"CRM Incident",TempNameValueBuffer);
      AddEntityTableMapping('opportunity',DATABASE::"CRM Opportunity",TempNameValueBuffer);
      AddEntityTableMapping('quote',DATABASE::"CRM Quote",TempNameValueBuffer);
    END;

    LOCAL PROCEDURE AddEntityTableMapping@26(CRMEntityTypeName@1000 : Text;TableID@1001 : Integer;VAR TempNameValueBuffer@1002 : TEMPORARY Record 823);
    BEGIN
      WITH TempNameValueBuffer DO BEGIN
        INIT;
        ID := COUNT + 1;
        Name := COPYSTR(CRMEntityTypeName,1,MAXSTRLEN(Name));
        Value := FORMAT(TableID);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ResetAccountConfigTemplate@29() : Code[10];
    VAR
      AccountConfigTemplateHeader@1001 : Record 8618;
      ConfigTemplateLine@1000 : Record 8619;
      CRMAccount@1002 : Record 5341;
    BEGIN
      ConfigTemplateLine.SETRANGE(
        "Data Template Code",COPYSTR(CRMAccountConfigTemplateCodeTok,1,MAXSTRLEN(AccountConfigTemplateHeader.Code)));
      ConfigTemplateLine.DELETEALL;
      AccountConfigTemplateHeader.SETRANGE(
        Code,COPYSTR(CRMAccountConfigTemplateCodeTok,1,MAXSTRLEN(AccountConfigTemplateHeader.Code)));
      AccountConfigTemplateHeader.DELETEALL;

      AccountConfigTemplateHeader.INIT;
      AccountConfigTemplateHeader.Code := COPYSTR(CRMAccountConfigTemplateCodeTok,1,MAXSTRLEN(AccountConfigTemplateHeader.Code));
      AccountConfigTemplateHeader.Description :=
        COPYSTR(CRMAccountConfigTemplateDescTxt,1,MAXSTRLEN(AccountConfigTemplateHeader.Description));
      AccountConfigTemplateHeader."Table ID" := DATABASE::"CRM Account";
      AccountConfigTemplateHeader.INSERT;
      ConfigTemplateLine.INIT;
      ConfigTemplateLine."Data Template Code" := AccountConfigTemplateHeader.Code;
      ConfigTemplateLine."Line No." := 1;
      ConfigTemplateLine.Type := ConfigTemplateLine.Type::Field;
      ConfigTemplateLine."Table ID" := DATABASE::"CRM Account";
      ConfigTemplateLine."Field ID" := CRMAccount.FIELDNO(CustomerTypeCode);
      ConfigTemplateLine."Field Name" := CRMAccount.FIELDNAME(CustomerTypeCode);
      ConfigTemplateLine."Default Value" := FORMAT(CRMAccount.CustomerTypeCode::Customer);
      ConfigTemplateLine.INSERT;

      EXIT(CRMAccountConfigTemplateCodeTok);
    END;

    LOCAL PROCEDURE ResetCustomerConfigTemplate@31() : Code[10];
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      CustomerConfigTemplateHeader@1005 : Record 8618;
      ConfigTemplateLine@1001 : Record 8619;
      CustomerConfigTemplateLine@1006 : Record 8619;
      Customer@1002 : Record 18;
      FoundTemplateCode@1003 : Code[10];
    BEGIN
      CustomerConfigTemplateLine.SETRANGE(
        "Data Template Code",COPYSTR(CustomerConfigTemplateCodeTok,1,MAXSTRLEN(CustomerConfigTemplateLine."Data Template Code")));
      CustomerConfigTemplateLine.DELETEALL;
      CustomerConfigTemplateHeader.SETRANGE(
        Code,COPYSTR(CustomerConfigTemplateCodeTok,1,MAXSTRLEN(CustomerConfigTemplateHeader.Code)));
      CustomerConfigTemplateHeader.DELETEALL;

      // Base the customer config template off the first customer template with currency code '' (LCY);
      ConfigTemplateHeader.SETRANGE("Table ID",DATABASE::Customer);
      IF ConfigTemplateHeader.FINDSET THEN
        REPEAT
          ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);
          ConfigTemplateLine.SETRANGE("Field ID",Customer.FIELDNO("Currency Code"));
          ConfigTemplateLine.SETFILTER("Default Value",'');
          IF ConfigTemplateLine.FINDFIRST THEN BEGIN
            FoundTemplateCode := ConfigTemplateHeader.Code;
            BREAK;
          END;
        UNTIL ConfigTemplateHeader.NEXT = 0;

      IF FoundTemplateCode = '' THEN
        EXIT('');

      CustomerConfigTemplateHeader.INIT;
      CustomerConfigTemplateHeader.TRANSFERFIELDS(ConfigTemplateHeader,FALSE);
      CustomerConfigTemplateHeader.Code := COPYSTR(CustomerConfigTemplateCodeTok,1,MAXSTRLEN(CustomerConfigTemplateHeader.Code));
      CustomerConfigTemplateHeader.Description :=
        COPYSTR(CustomerConfigTemplateDescTxt,1,MAXSTRLEN(CustomerConfigTemplateHeader.Description));
      CustomerConfigTemplateHeader.INSERT;

      ConfigTemplateLine.RESET;
      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);
      ConfigTemplateLine.FINDSET;
      REPEAT
        CustomerConfigTemplateLine.INIT;
        CustomerConfigTemplateLine.TRANSFERFIELDS(ConfigTemplateLine,TRUE);
        CustomerConfigTemplateLine."Data Template Code" := CustomerConfigTemplateHeader.Code;
        CustomerConfigTemplateLine.INSERT;
      UNTIL ConfigTemplateLine.NEXT = 0;

      EXIT(CustomerConfigTemplateCodeTok);
    END;

    LOCAL PROCEDURE RegisterTempConnectionIfNeeded@15(CRMConnectionSetup@1000 : Record 5330;VAR TempCRMConnectionSetup@1001 : TEMPORARY Record 5330) ConnectionName : Text;
    BEGIN
      IF CRMConnectionSetup."Is User Mapping Required" THEN BEGIN
        ConnectionName := FORMAT(CREATEGUID);
        TempCRMConnectionSetup.TRANSFERFIELDS(CRMConnectionSetup);
        TempCRMConnectionSetup."Is User Mapping Required" := FALSE;
        TempCRMConnectionSetup.RegisterConnectionWithName(ConnectionName);
      END;
    END;

    BEGIN
    END.
  }
}

