OBJECT Codeunit 5342 CRM Synch. Helper
{
  OBJECT-PROPERTIES
  {
    Date=23/10/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43402;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CannotFindCRMSetupErr@1006 : TextConst 'ENU=Cannot read the CRM Organization setup.;ENG=Cannot read the CRM Organisation setup.';
      CRMBaseCurrencyNotFoundInNAVErr@1008 : TextConst '@@@="%1,%2,%3=the ISO code of a currency (example: DKK);";ENU=The currency with the ISO code ''%1'' cannot be found. Therefore, the exchange rate between ''%2'' and ''%3'' cannot be calculated.;ENG=The currency with the ISO code ''%1'' cannot be found. Therefore, the exchange rate between ''%2'' and ''%3'' cannot be calculated.';
      DynamicsCRMTransactionCurrencyRecordNotFoundErr@1004 : TextConst '@@@="%1=the currency code";ENU=Cannot find the currency with the value ''%1'' in Microsoft Dynamics CRM.;ENG=Cannot find the currency with the value ''%1'' in Microsoft Dynamics CRM.';
      DynamicsCRMUoMNotFoundInGroupErr@1011 : TextConst '@@@="%1=Unit Group Name";ENU=Cannot find any unit of measure inside the unit group ''%1'' in Microsoft Dynamics CRM.;ENG=Cannot find any unit of measure inside the unit group ''%1'' in Microsoft Dynamics CRM.';
      DynamicsCRMUoMFoundMultipleInGroupErr@1012 : TextConst '@@@="%1=Unit Group Name";ENU=Multiple units of measure were found in the unit group ''%1'' in Microsoft Dynamics CRM.;ENG=Multiple units of measure were found in the unit group ''%1'' in Microsoft Dynamics CRM.';
      IncorrectCRMUoMNameErr@1013 : TextConst '@@@="%1=Unit Group name (ex: NAV PIECE), %2=Expected name (ex: PIECE), %3=Actual name (ex: BOX)";ENU=The unit of measure in the unit group ''%1'' has an incorrect name: expected name ''%2'', found name ''%3''.;ENG=The unit of measure in the unit group ''%1'' has an incorrect name: expected name ''%2'', found name ''%3''.';
      IncorrectCRMUoMQuantityErr@1015 : TextConst '@@@="%1=unit of measure name (ex: PIECE).";ENU=The quantity on the unit of measure ''%1'' should be 1.;ENG=The quantity on the unit of measure ''%1'' should be 1.';
      DynamicsCRMUoMScheduleNotFoundErr@1000 : TextConst '@@@="%1 = unit group name";ENU=Cannot find the unit group ''%1'' in Microsoft Dynamics CRM.;ENG=Cannot find the unit group ''%1'' in Microsoft Dynamics CRM.';
      IncorrectCRMUoMStatusErr@1014 : TextConst '@@@="%1=value of the unit of measure, %2=value of the unit group";ENU=The unit of measure ''%1'' is not the base unit of measure of the unit group ''%2''.;ENG=The unit of measure ''%1'' is not the base unit of measure of the unit group ''%2''.';
      InvalidDestinationRecordNoErr@1010 : TextConst 'ENU=Invalid destination record number.;ENG=Invalid destination record number.';
      NAVLCYMustBeSetErr@1009 : TextConst '@@@="%1=field caption of table General Ledger Setup.NAV LCY, %2=table caption of General Ledger Setup";ENU=%1 must be set in %2 before using currencies with Dynamics CRM.;ENG=%1 must be set in %2 before using currencies with Dynamics CRM.';
      NavTxt@1005 : TextConst '@@@=locked;ENU=NAV;ENG=NAV';
      RecordMustBeCoupledErr@1007 : TextConst '@@@="%1 = table caption, %2 = primary key value, %3 = CRM Table caption";ENU=%1 %2 must be coupled to a %3 record.;ENG=%1 %2 must be coupled to a %3 record.';
      RecordNotFoundErr@1001 : TextConst '@@@="%1=value;%2=table name in which the value was searched";ENU=%1 could not be found in %2.;ENG=%1 could not be found in %2.';
      CanOnlyUseSystemUserOwnerTypeErr@1002 : TextConst '@@@=Dynamics CRM entity owner property can be of type team or systemuser. Only the type systemuser is supported.;ENU=Only Dynamics CRM Owner of Type SystemUser can be mapped to Salespeople.;ENG=Only Dynamics CRM Owner of Type SystemUser can be mapped to Salespeople.';

    PROCEDURE CreateOrUpdateCRMPriceListItem@1(VAR CRMProduct@1000 : Record 5348) : Boolean;
    VAR
      CRMProductpricelevel@1001 : Record 5347;
      AdditionalFieldsWereModified@1002 : Boolean;
    BEGIN
      IF ISNULLGUID(CRMProduct.ProductId) THEN
        EXIT(FALSE);

      IF SetCRMDefaultPriceListOnProduct(CRMProduct) THEN
        AdditionalFieldsWereModified := TRUE;

      CRMProductpricelevel.SETRANGE(ProductId,CRMProduct.ProductId);
      IF NOT CRMProductpricelevel.FINDFIRST THEN BEGIN
        CRMProductpricelevel.INIT;
        CRMProductpricelevel.PriceLevelId := CRMProduct.PriceLevelId;
        CRMProductpricelevel.UoMId := CRMProduct.DefaultUoMId;
        CRMProductpricelevel.UoMScheduleId := CRMProduct.DefaultUoMScheduleId;
        CRMProductpricelevel.ProductId := CRMProduct.ProductId;
        CRMProductpricelevel.Amount := CRMProduct.Price;
        CRMProductpricelevel.TransactionCurrencyId := CRMProduct.TransactionCurrencyId;
        CRMProductpricelevel.ProductNumber := CRMProduct.ProductNumber;
        CRMProductpricelevel.INSERT;
        EXIT(TRUE);
      END;

      IF CRMProductpricelevel.PriceLevelId <> CRMProduct.PriceLevelId THEN BEGIN
        CRMProductpricelevel.PriceLevelId := CRMProduct.PriceLevelId;
        AdditionalFieldsWereModified := TRUE;
      END;

      IF CRMProductpricelevel.UoMId <> CRMProduct.DefaultUoMId THEN BEGIN
        CRMProductpricelevel.UoMId := CRMProduct.DefaultUoMId;
        AdditionalFieldsWereModified := TRUE;
      END;

      IF CRMProductpricelevel.UoMScheduleId <> CRMProduct.DefaultUoMScheduleId THEN BEGIN
        CRMProductpricelevel.UoMScheduleId := CRMProduct.DefaultUoMScheduleId;
        AdditionalFieldsWereModified := TRUE;
      END;

      IF CRMProductpricelevel.ProductId <> CRMProduct.ProductId THEN BEGIN
        CRMProductpricelevel.ProductId := CRMProduct.ProductId;
        AdditionalFieldsWereModified := TRUE;
      END;

      IF CRMProductpricelevel.Amount <> CRMProduct.Price THEN BEGIN
        CRMProductpricelevel.Amount := CRMProduct.Price;
        AdditionalFieldsWereModified := TRUE;
      END;

      IF CRMProductpricelevel.TransactionCurrencyId <> CRMProduct.TransactionCurrencyId THEN BEGIN
        CRMProductpricelevel.TransactionCurrencyId := CRMProduct.TransactionCurrencyId;
        AdditionalFieldsWereModified := TRUE;
      END;

      IF CRMProductpricelevel.ProductNumber <> CRMProduct.ProductNumber THEN BEGIN
        CRMProductpricelevel.ProductNumber := CRMProduct.ProductNumber;
        AdditionalFieldsWereModified := TRUE;
      END;

      IF AdditionalFieldsWereModified THEN
        CRMProductpricelevel.MODIFY;

      EXIT(AdditionalFieldsWereModified);
    END;

    PROCEDURE CreatePriceListElementsOnProduct@18(VAR CRMProduct@1000 : Record 5348) : Boolean;
    BEGIN
      IF CreateOrUpdateCRMPriceListItem(CRMProduct) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE FormatCurrencyToCRM@16(UnformattedCurrencyISOCode@1000 : Text[10]) FormattedCurrencyISOCode : Text[5];
    BEGIN
      // NAV Currency ISO code is max 10 chars long, while CRM TransactionCurrency ISOCode is max 5

      // Trim to 5 chars
      FormattedCurrencyISOCode := FORMAT(UnformattedCurrencyISOCode,5);

      // Remove any trailing whitespaces, ex: transform 'DKK  ' into 'DKK'
      FormattedCurrencyISOCode := DELCHR(FormattedCurrencyISOCode,'>',' ');
    END;

    PROCEDURE GetOrCreateCRMDefaultPriceList@26(VAR CRMPricelevel@1000 : Record 5346);
    VAR
      CRMTransactioncurrency@1001 : Record 5345;
      CRMSetupDefaults@1002 : Codeunit 5334;
    BEGIN
      CRMPricelevel.SETRANGE(Name,CRMSetupDefaults.GetDefaultNAVPriceListName);
      IF NOT CRMPricelevel.FINDFIRST THEN BEGIN
        CRMPricelevel.Name := CRMSetupDefaults.GetDefaultNAVPriceListName;
        GetOrCreateNAVLCYInCRM(CRMTransactioncurrency);
        CRMPricelevel.TransactionCurrencyId := CRMTransactioncurrency.TransactionCurrencyId;
        CRMPricelevel.TransactionCurrencyIdName := CRMTransactioncurrency.CurrencyName;
        CRMPricelevel.INSERT;
      END;
    END;

    PROCEDURE GetOrCreateNAVLCYInCRM@20(VAR CRMTransactioncurrency@1000 : Record 5345);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      NAVLCYCode@1001 : Code[10];
    BEGIN
      NAVLCYCode := GetNavLCYCode;
      IF NAVLCYCode = '' THEN
        ERROR(NAVLCYMustBeSetErr,GeneralLedgerSetup.FIELDCAPTION("LCY Code"),GeneralLedgerSetup.TABLECAPTION);

      CRMTransactioncurrency.SETRANGE(ISOCurrencyCode,NAVLCYCode);
      IF CRMTransactioncurrency.FINDFIRST THEN
        EXIT;

      CRMTransactioncurrency.INIT;
      CRMTransactioncurrency.ISOCurrencyCode := FormatCurrencyToCRM(NAVLCYCode);
      CRMTransactioncurrency.CurrencyName := CRMTransactioncurrency.ISOCurrencyCode;
      CRMTransactioncurrency.CurrencySymbol := CRMTransactioncurrency.ISOCurrencyCode;
      CRMTransactioncurrency.CurrencyPrecision := GetCRMCurrencyDefaultPrecision;
      CRMTransactioncurrency.ExchangeRate := GetCRMLCYToFCYExchangeRate(CRMTransactioncurrency.ISOCurrencyCode);
      CRMTransactioncurrency.INSERT;
    END;

    PROCEDURE GetCRMCurrencyDefaultPrecision@24() : Integer;
    VAR
      CRMOrganization@1000 : Record 5363;
    BEGIN
      GetCRMOrganizationSetup(CRMOrganization);
      EXIT(CRMOrganization.CurrencyDecimalPrecision);
    END;

    LOCAL PROCEDURE GetCRMExchangeRateRoundingPrecision@23() : Decimal;
    BEGIN
      EXIT(0.0000000001);
    END;

    PROCEDURE GetCRMLCYToFCYExchangeRate@12(ToCurrencyISOCode@1002 : Text[10]) : Decimal;
    VAR
      CRMOrganization@1000 : Record 5363;
      CRMTransactioncurrency@1001 : Record 5345;
    BEGIN
      // Calculate the exchange rate from CRM's base currency to the ToCurrencyISOCode

      // Search for CRM Base Currency by matching ISO code in NAV.
      GetCRMOrganizationSetup(CRMOrganization);

      IF ToCurrencyISOCode = CRMOrganization.BaseCurrencySymbol THEN
        EXIT(1);

      CRMTransactioncurrency.SETRANGE(TransactionCurrencyId,CRMOrganization.BaseCurrencyId);
      IF NOT CRMTransactioncurrency.FINDFIRST THEN
        ERROR(DynamicsCRMTransactionCurrencyRecordNotFoundErr,CRMOrganization.BaseCurrencySymbol);
      EXIT(GetFCYtoFCYExchangeRate(CRMTransactioncurrency.ISOCurrencyCode,ToCurrencyISOCode));
    END;

    PROCEDURE GetCRMOrganizationSetup@15(VAR CRMOrganization@1000 : Record 5363);
    BEGIN
      IF NOT CRMOrganization.FINDFIRST THEN
        ERROR(CannotFindCRMSetupErr);
    END;

    PROCEDURE GetFCYtoFCYExchangeRate@27(FromFCY@1002 : Text[10];ToFCY@1005 : Text[10]) : Decimal;
    VAR
      Currency@1003 : Record 4;
      CurrencyExchangeRate@1004 : Record 330;
      CalculatedExchangeRate@1000 : Decimal;
      NavLCYCode@1001 : Code[10];
    BEGIN
      IF (FromFCY = '') OR (ToFCY = '') THEN
        ERROR(CRMBaseCurrencyNotFoundInNAVErr,'',ToFCY,FromFCY);

      IF ToFCY = FromFCY THEN
        EXIT(1);

      NavLCYCode := GetNavLCYCode;
      IF ToFCY = NavLCYCode THEN
        ToFCY := '';

      // NAV LCY and FromFCY are the same
      IF NavLCYCode = FromFCY THEN
        EXIT(CurrencyExchangeRate.GetCurrentCurrencyFactor(ToFCY));

      IF NOT Currency.GET(FromFCY) THEN
        ERROR(CRMBaseCurrencyNotFoundInNAVErr,FromFCY,ToFCY,FromFCY);

      // NAV LCY and FromFCY are different currencies
      CalculatedExchangeRate := CurrencyExchangeRate.ExchangeAmtFCYToFCY(WORKDATE,ToFCY,FromFCY,1);
      CalculatedExchangeRate := ROUND(CalculatedExchangeRate,GetCRMExchangeRateRoundingPrecision,'=');
      EXIT(CalculatedExchangeRate);
    END;

    LOCAL PROCEDURE GetNavLCYCode@29() : Code[10];
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      // LCY = Local CurrencY
      GeneralLedgerSetup.GET;
      EXIT(GeneralLedgerSetup."LCY Code");
    END;

    PROCEDURE GetUnitGroupName@11(UnitOfMeasureCode@1000 : Text) : Text[200];
    BEGIN
      EXIT(STRSUBSTNO('%1 %2',NavTxt,UnitOfMeasureCode));
    END;

    PROCEDURE GetUnitOfMeasureName@37(UnitOfMeasureRecordRef@1002 : RecordRef) : Text[100];
    VAR
      UnitOfMeasure@1004 : Record 204;
      UnitOfMeasureCodeFieldRef@1003 : FieldRef;
    BEGIN
      UnitOfMeasureCodeFieldRef := UnitOfMeasureRecordRef.FIELD(UnitOfMeasure.FIELDNO(Code));
      EXIT(FORMAT(UnitOfMeasureCodeFieldRef.VALUE));
    END;

    PROCEDURE SetCRMDecimalsSupportedValue@7(VAR CRMProduct@1003 : Record 5348);
    VAR
      CRMSetupDefaults@1002 : Codeunit 5334;
    BEGIN
      CRMProduct.QuantityDecimal := CRMSetupDefaults.GetProductQuantityPrecision;
    END;

    PROCEDURE SetCRMDefaultPriceListOnProduct@22(VAR CRMProduct@1000 : Record 5348) AdditionalFieldsWereModified : Boolean;
    VAR
      CRMPricelevel@1001 : Record 5346;
    BEGIN
      GetOrCreateCRMDefaultPriceList(CRMPricelevel);

      IF CRMProduct.PriceLevelId <> CRMPricelevel.PriceLevelId THEN BEGIN
        CRMProduct.PriceLevelId := CRMPricelevel.PriceLevelId;
        AdditionalFieldsWereModified := TRUE;
      END;
    END;

    PROCEDURE SetCRMProductStateToActive@13(VAR CRMProduct@1000 : Record 5348);
    BEGIN
      CRMProduct.StateCode := CRMProduct.StateCode::Active;
      CRMProduct.StatusCode := CRMProduct.StatusCode::Active;
    END;

    PROCEDURE SetContactParentCompany@2(AccountID@1003 : GUID;DestinationContactRecordRef@1007 : RecordRef) : Boolean;
    VAR
      CRMIntegrationRecord@1004 : Record 5331;
      ContactBusinessRelation@1002 : Record 5054;
      Customer@1001 : Record 18;
      Contact@1000 : Record 5050;
      LookupRecordID@1005 : RecordID;
      DestinationFieldRef@1006 : FieldRef;
    BEGIN
      IF DestinationContactRecordRef.NUMBER <> DATABASE::Contact THEN
        ERROR(InvalidDestinationRecordNoErr);

      IF ISNULLGUID(AccountID) THEN
        EXIT(FALSE);

      IF NOT CRMIntegrationRecord.FindRecordIDFromID(AccountID,DATABASE::Customer,LookupRecordID) THEN BEGIN
        IF NOT SynchRecordIfMappingExists(DATABASE::"CRM Account",AccountID) THEN
          EXIT(FALSE);

        IF NOT CRMIntegrationRecord.FindRecordIDFromID(AccountID,DATABASE::Customer,LookupRecordID) THEN
          EXIT(FALSE);
      END;

      IF NOT Customer.GET(LookupRecordID) THEN
        EXIT(FALSE);

      ContactBusinessRelation.SETCURRENTKEY("Link to Table","No.");
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("No.",Customer."No.");
      IF NOT ContactBusinessRelation.FINDFIRST THEN
        EXIT(FALSE);

      IF NOT Contact.GET(ContactBusinessRelation."Contact No.") THEN
        EXIT(FALSE);

      DestinationFieldRef := DestinationContactRecordRef.FIELD(Contact.FIELDNO("Company No."));
      DestinationFieldRef.VALUE := Contact."No.";
      DestinationFieldRef := DestinationContactRecordRef.FIELD(Contact.FIELDNO("Company Name"));
      DestinationFieldRef.VALUE := Contact.Name;
      EXIT(TRUE);
    END;

    PROCEDURE SynchRecordIfMappingExists@8(IntegrationTableNo@1000 : Integer;PrimaryKey@1001 : Variant) : Boolean;
    VAR
      IntegrationTableMapping@1002 : Record 5335;
      IntegrationSynchJob@1005 : Record 5338;
      CRMIntegrationTableSynch@1003 : Codeunit 5340;
      NewJobEntryId@1004 : GUID;
    BEGIN
      IF PrimaryKey.ISRECORDID THEN
        IF NOT GetMappingForTable(IntegrationTableNo,IntegrationTableMapping) THEN
          EXIT(FALSE);
      IF PrimaryKey.ISGUID AND NOT GetIntegrationMappingForTable(IntegrationTableNo,IntegrationTableMapping) THEN
        EXIT(FALSE);

      NewJobEntryId := CRMIntegrationTableSynch.SynchRecord(IntegrationTableMapping,PrimaryKey,TRUE,FALSE);
      IF ISNULLGUID(NewJobEntryId) OR (NOT IntegrationSynchJob.GET(NewJobEntryId)) THEN
        EXIT(FALSE);

      EXIT((IntegrationSynchJob.Inserted > 0) OR
        (IntegrationSynchJob.Modified > 0) OR
        (IntegrationSynchJob.Unchanged > 0));
    END;

    PROCEDURE UpdateCRMCurrencyIdIfChanged@9(CurrencyCode@1000 : Text;VAR DestinationCurrencyIDFieldRef@1001 : FieldRef) : Boolean;
    VAR
      CRMTransactioncurrency@1002 : Record 5345;
      GeneralLedgerSetup@1005 : Record 98;
    BEGIN
      // Given a source NAV currency code, find a currency with the same ISO code in CRM and update the target CRM currency value if needed

      // In NAV, an empty currency means local currency (LCY)
      IF DELCHR(CurrencyCode,'<>') = '' THEN BEGIN
        GeneralLedgerSetup.GET;
        CurrencyCode := GeneralLedgerSetup."LCY Code";
      END;

      IF CurrencyCode = '' THEN
        ERROR(RecordNotFoundErr,GeneralLedgerSetup.FIELDCAPTION("LCY Code"),GeneralLedgerSetup.TABLECAPTION);

      // Find the NAV currency in CRM by ISO code. We don't require it to be coupled
      IF CurrencyCode = GetNavLCYCode THEN
        GetOrCreateNAVLCYInCRM(CRMTransactioncurrency)
      ELSE BEGIN
        CRMTransactioncurrency.SETRANGE(ISOCurrencyCode,CurrencyCode);
        IF NOT CRMTransactioncurrency.FINDFIRST THEN
          ERROR(DynamicsCRMTransactionCurrencyRecordNotFoundErr,CurrencyCode);
      END;

      EXIT(UpdateFieldRefValueIfChanged(DestinationCurrencyIDFieldRef,CRMTransactioncurrency.TransactionCurrencyId));
    END;

    PROCEDURE UpdateCRMInvoiceStatus@17(VAR CRMInvoice@1001 : Record 5355;SalesInvoiceHeader@1000 : Record 112);
    VAR
      CustLedgerEntry@1002 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      IF NOT CustLedgerEntry.FINDFIRST THEN
        EXIT;
      CustLedgerEntry.CALCFIELDS("Remaining Amount",Amount);
      IF CustLedgerEntry."Remaining Amount" = 0 THEN BEGIN
        CRMInvoice.StateCode := CRMInvoice.StateCode::Paid;
        CRMInvoice.StatusCode := CRMInvoice.StatusCode::Complete;
      END ELSE
        IF CustLedgerEntry."Remaining Amount" <> CustLedgerEntry.Amount THEN BEGIN
          CRMInvoice.StateCode := CRMInvoice.StateCode::Active;
          CRMInvoice.StatusCode := CRMInvoice.StatusCode::Partial;
        END ELSE BEGIN
          CRMInvoice.StateCode := CRMInvoice.StateCode::Active;
          CRMInvoice.StatusCode := CRMInvoice.StatusCode::Billed;
        END;
      CRMInvoice.MODIFY;
    END;

    PROCEDURE UpdateCRMProductPriceIfNegative@6(VAR CRMProduct@1001 : Record 5348) : Boolean;
    BEGIN
      // CRM doesn't allow negative prices. Update the price to zero, if negative (this preserves the behavior of the old CRM Connector)
      IF CRMProduct.Price < 0 THEN BEGIN
        CRMProduct.Price := 0;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE UpdateCRMProductQuantityOnHandIfNegative@10(VAR CRMProduct@1001 : Record 5348) : Boolean;
    BEGIN
      // Update to zero, if negative (this preserves the behavior of the old CRM Connector)
      IF CRMProduct.QuantityOnHand < 0 THEN BEGIN
        CRMProduct.QuantityOnHand := 0;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE UpdateCRMProductTypeCodeIfChanged@19(VAR CRMProduct@1000 : Record 5348;NewProductTypeCode@1009 : Integer) : Boolean;
    BEGIN
      // We use ProductTypeCode::SalesInventory and ProductTypeCode::Services to trace back later,
      // where this CRM product originated from: a NAV Item, or a NAV Resource
      IF CRMProduct.ProductTypeCode <> NewProductTypeCode THEN BEGIN
        CRMProduct.ProductTypeCode := NewProductTypeCode;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE UpdateCRMProductUoMFieldsIfChanged@5(VAR CRMProduct@1000 : Record 5348;UnitOfMeasureCode@1009 : Code[10]) : Boolean;
    VAR
      CRMUom@1005 : Record 5361;
      CRMUomschedule@1008 : Record 5362;
      AdditionalFieldsWereModified@1011 : Boolean;
    BEGIN
      // Get the unit of measure ID used in this product
      // On that unit of measure ID, get the UoMName, UoMScheduleID, UoMScheduleName and update them in the product if needed

      GetValidCRMUnitOfMeasureRecords(CRMUom,CRMUomschedule,UnitOfMeasureCode);

      // Update UoM ID if changed
      IF CRMProduct.DefaultUoMId <> CRMUom.UoMId THEN BEGIN
        CRMProduct.DefaultUoMId := CRMUom.UoMId;
        AdditionalFieldsWereModified := TRUE;
      END;

      // Update the UoMSchedule ID if changed
      IF CRMProduct.DefaultUoMScheduleId <> CRMUomschedule.UoMScheduleId THEN BEGIN
        CRMProduct.DefaultUoMScheduleId := CRMUomschedule.UoMScheduleId;
        AdditionalFieldsWereModified := TRUE;
      END;

      EXIT(AdditionalFieldsWereModified);
    END;

    PROCEDURE UpdateCRMProductVendorNameIfChanged@14(VAR CRMProduct@1001 : Record 5348) : Boolean;
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      IF NOT Vendor.GET(CRMProduct.VendorPartNumber) THEN
        EXIT(FALSE);

      IF CRMProduct.VendorName <> Vendor.Name THEN BEGIN
        CRMProduct.VendorName := Vendor.Name;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE UpdateOwnerIfChanged@3(SourceRecordRef@1000 : RecordRef;DestinationRecordRef@1001 : RecordRef;SourceSalespersonCodeFieldNo@1002 : Integer;DestinationOwnerFieldNo@1003 : Integer;DestinationOwnerTypeFieldNo@1006 : Integer;DestinationOwnerTypeValue@1012 : Option) : Boolean;
    VAR
      SalespersonPurchaser@1009 : Record 13;
      CRMIntegrationRecord@1010 : Record 5331;
      IntegrationTableMapping@1011 : Record 5335;
      SalespersonCodeFieldRef@1008 : FieldRef;
      OwnerFieldRef@1007 : FieldRef;
      OwnerTypeFieldRef@1013 : FieldRef;
      OwnerGuid@1005 : GUID;
      CurrentOwnerGuid@1004 : GUID;
    BEGIN
      IntegrationTableMapping.SETRANGE("Table ID",DATABASE::"Salesperson/Purchaser");
      IntegrationTableMapping.SETRANGE("Integration Table ID",DATABASE::"CRM Systemuser");
      IF NOT IntegrationTableMapping.FINDFIRST THEN
        EXIT(FALSE); // There are no mapping for salepeople to SystemUsers

      SalespersonCodeFieldRef := SourceRecordRef.FIELD(SourceSalespersonCodeFieldNo);

      // Ignore empty salesperson code.
      IF FORMAT(SalespersonCodeFieldRef.VALUE) = '' THEN
        EXIT(FALSE);

      SalespersonPurchaser.SETFILTER(Code,FORMAT(SalespersonCodeFieldRef.VALUE));
      IF NOT SalespersonPurchaser.FINDFIRST THEN
        ERROR(RecordNotFoundErr,SalespersonCodeFieldRef.VALUE,SalespersonPurchaser.TABLECAPTION);

      IF NOT CRMIntegrationRecord.FindIDFromRecordID(SalespersonPurchaser.RECORDID,OwnerGuid) THEN
        ERROR(
          RecordMustBeCoupledErr,SalespersonPurchaser.TABLECAPTION,SalespersonCodeFieldRef.VALUE,
          IntegrationTableMapping.GetExtendedIntegrationTableCaption);

      OwnerFieldRef := DestinationRecordRef.FIELD(DestinationOwnerFieldNo);
      CurrentOwnerGuid := OwnerFieldRef.VALUE;
      IF CurrentOwnerGuid <> OwnerGuid THEN BEGIN
        OwnerFieldRef.VALUE := OwnerGuid;
        OwnerTypeFieldRef := DestinationRecordRef.FIELD(DestinationOwnerTypeFieldNo);
        OwnerTypeFieldRef.VALUE := DestinationOwnerTypeValue;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE UpdateSalesPersonCodeIfChanged@4(SourceRecordRef@1008 : RecordRef;VAR DestinationRecordRef@1009 : RecordRef;SourceOwnerIDFieldNo@1004 : Integer;SourceOwnerTypeFieldNo@1010 : Integer;AllowedOwnerTypeValue@1011 : Option;DestinationSalesPersonCodeFieldNo@1005 : Integer) : Boolean;
    VAR
      CRMIntegrationRecord@1003 : Record 5331;
      SalespersonPurchaser@1000 : Record 13;
      IntegrationTableMapping@1014 : Record 5335;
      OutlookSynchTypeConv@1013 : Codeunit 5302;
      SalesPersonRecordID@1002 : RecordID;
      SourceFieldRef@1007 : FieldRef;
      DestinationFieldRef@1006 : FieldRef;
      CRMSystemUserID@1001 : GUID;
      CurrentOptionValue@1012 : Integer;
    BEGIN
      IntegrationTableMapping.SETRANGE("Table ID",DATABASE::"Salesperson/Purchaser");
      IntegrationTableMapping.SETRANGE("Integration Table ID",DATABASE::"CRM Systemuser");
      IF NOT IntegrationTableMapping.FINDFIRST THEN
        EXIT(FALSE); // There are no mapping for salepeople to SystemUsers

      SourceFieldRef := SourceRecordRef.FIELD(SourceOwnerTypeFieldNo);
      CurrentOptionValue := OutlookSynchTypeConv.TextToOptionValue(FORMAT(SourceFieldRef.VALUE),SourceFieldRef.OPTIONSTRING);
      // Allow 0 as it is the default value for CRM options.
      IF (CurrentOptionValue <> 0) AND (CurrentOptionValue <> AllowedOwnerTypeValue) THEN
        ERROR(CanOnlyUseSystemUserOwnerTypeErr);

      SourceFieldRef := SourceRecordRef.FIELD(SourceOwnerIDFieldNo);
      CRMSystemUserID := SourceFieldRef.VALUE;

      IF ISNULLGUID(CRMSystemUserID) THEN
        EXIT(FALSE);

      DestinationFieldRef := DestinationRecordRef.FIELD(DestinationSalesPersonCodeFieldNo);

      IF NOT CRMIntegrationRecord.FindRecordIDFromID(CRMSystemUserID,DATABASE::"Salesperson/Purchaser",SalesPersonRecordID) THEN BEGIN
        IF NOT SynchRecordIfMappingExists(DATABASE::"CRM Systemuser",CRMSystemUserID) THEN
          EXIT(FALSE);
        IF NOT CRMIntegrationRecord.FindRecordIDFromID(CRMSystemUserID,DATABASE::"Salesperson/Purchaser",SalesPersonRecordID) THEN
          EXIT(FALSE);
      END;

      IF NOT SalespersonPurchaser.GET(SalesPersonRecordID) THEN
        EXIT(FALSE);

      IF FORMAT(DestinationFieldRef.VALUE) <> SalespersonPurchaser.Code THEN BEGIN
        DestinationFieldRef.VALUE := SalespersonPurchaser.Code;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE UpdateFieldRefValueIfChanged@21(VAR DestinationFieldRef@1000 : FieldRef;NewFieldValue@1001 : Text) : Boolean;
    BEGIN
      // Compare and updates the fieldref value, if different
      IF FORMAT(DestinationFieldRef.VALUE) = NewFieldValue THEN
        EXIT(FALSE);

      // Return TRUE if the value was changed
      DestinationFieldRef.VALUE := NewFieldValue;
      EXIT(TRUE);
    END;

    PROCEDURE GetValidCRMUnitOfMeasureRecords@46(VAR CRMUom@1007 : Record 5361;VAR CRMUomschedule@1001 : Record 5362;UnitOfMeasureCode@1002 : Code[10]);
    VAR
      CRMUnitGroupName@1003 : Text;
    BEGIN
      // This function checks that the CRM Unit of Measure and its parent group exist in CRM, and that the user didn't change their properties from
      // the expected ones

      // Attempt to get the UoMSchedule with the expected name = 'NAV ' + UnitOfMeasureCode
      CRMUnitGroupName := GetUnitGroupName(UnitOfMeasureCode);
      CRMUomschedule.SETRANGE(Name,CRMUnitGroupName);

      // CRM Unit Group - Not found
      IF NOT CRMUomschedule.FINDSET THEN
        ERROR(DynamicsCRMUoMScheduleNotFoundErr,CRMUnitGroupName);

      // CRM Unit Group  - Multiple found
      IF CRMUomschedule.COUNT > 1 THEN
        ERROR(DynamicsCRMUoMFoundMultipleInGroupErr,CRMUnitGroupName);

      // CRM Unit Group - One found - check its child unit of measure, should be just one
      CRMUom.SETRANGE(UoMScheduleId,CRMUomschedule.UoMScheduleId);

      // CRM Unit of Measure - not found
      IF NOT CRMUom.FINDSET THEN
        ERROR(DynamicsCRMUoMNotFoundInGroupErr,CRMUomschedule.Name);

      // CRM Unit of Measure - multiple found
      IF CRMUom.COUNT > 1 THEN
        ERROR(DynamicsCRMUoMFoundMultipleInGroupErr,CRMUomschedule.Name);

      // CRM Unit of Measure - one found, does it have the correct name?
      IF CRMUom.Name <> UnitOfMeasureCode THEN
        ERROR(IncorrectCRMUoMNameErr,CRMUomschedule.Name,UnitOfMeasureCode,CRMUom.Name);

      // CRM Unit of Measure should be the base
      IF NOT CRMUom.IsScheduleBaseUoM THEN
        ERROR(IncorrectCRMUoMStatusErr,CRMUom.Name,CRMUomschedule.Name);

      // CRM Unit of Measure should have the conversion rate of 1
      IF CRMUom.Quantity <> 1 THEN
        ERROR(IncorrectCRMUoMQuantityErr,CRMUom.Name);

      // All checks passed. We're good to go
    END;

    LOCAL PROCEDURE GetIntegrationMappingForTable@28(IntegrationTableID@1001 : Integer;VAR IntegrationTableMapping@1000 : Record 5335) : Boolean;
    BEGIN
      IntegrationTableMapping.SETRANGE("Integration Table ID",IntegrationTableID);
      EXIT(IntegrationTableMapping.FINDFIRST);
    END;

    PROCEDURE GetMappingForTable@32(TableID@1001 : Integer;VAR IntegrationTableMapping@1000 : Record 5335) : Boolean;
    BEGIN
      IntegrationTableMapping.SETRANGE("Table ID",TableID);
      EXIT(IntegrationTableMapping.FINDFIRST);
    END;

    BEGIN
    END.
  }
}

