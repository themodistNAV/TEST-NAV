OBJECT Codeunit 50008 Integration Functions
{
  OBJECT-PROPERTIES
  {
    Date=01/03/17;
    Time=[ 9:13:10 AM];
    Modified=Yes;
    Version List=OP9031;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetEANcode@1000000014(ItemNo@1000000000 : Code[20];VariantCode@1000000001 : Code[10]) : Text;
    VAR
      ItemCrossReference@1000000002 : Record 5717;
    BEGIN
      //this function returns the EAN Barcode from the Item Cross reference table
      ItemCrossReference.SETRANGE("Item No.",ItemNo);
      ItemCrossReference.SETRANGE("Variant Code",VariantCode);
      ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::"Bar Code");
      ItemCrossReference.SETRANGE("Cross-Reference Type No.",'EAN');
      IF ItemCrossReference.FINDFIRST THEN
        EXIT(ItemCrossReference."Cross-Reference No.");
    END;

    PROCEDURE RetrieveElement@1000000003(VAR XmlItems@1000000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";Which@1000000001 : Text;i@1000000002 : Integer) : Text;
    VAR
      XmlItem@1000000003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NullObject@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
    BEGIN
      //Extracts element from node
      XmlItem := XmlItems.Item(i).SelectSingleNode(Which);
      IF NOT ISNULL(XmlItem) THEN
        EXIT(XmlItem.InnerText());
    END;

    PROCEDURE RetrieveElementAsInteger@1000000005(VAR XmlItems@1000000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";Which@1000000001 : Text;i@1000000002 : Integer) : Integer;
    VAR
      XmlItem@1000000003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NullObject@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
      IntVal@1000000005 : Integer;
    BEGIN
      //Extracts element from node and casts to integer
      XmlItem := XmlItems.Item(i).SelectSingleNode(Which);
      IF NOT ISNULL(XmlItem) THEN
        EVALUATE(IntVal,XmlItem.InnerText());

      EXIT(IntVal);
    END;

    PROCEDURE SplitSKUno@1000000008(SKUno@1000000000 : Code[31];VAR ItemNo@1000000001 : Code[20];VAR VarCode@1000000002 : Code[10]);
    VAR
      delimpos@1000000003 : Integer;
    BEGIN
      //This function splites the SKU No into a seperate Item No and Variant Code assuming the format iiiii-vvv
      delimpos := STRPOS(SKUno,'-');
      IF delimpos > 0 THEN BEGIN
        ItemNo := COPYSTR(SKUno,1,delimpos-1);
        VarCode := COPYSTR(SKUno,delimpos+1,STRLEN(SKUno)-delimpos);
      END ELSE BEGIN
        ItemNo := SKUno;
        VarCode := '';
      END;
    END;

    PROCEDURE RetrieveElementAsDecimal@1000000011(VAR XmlItems@1000000000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";Which@1000000001 : Text;i@1000000002 : Integer) : Decimal;
    VAR
      XmlItem@1000000003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NullObject@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
      DecVal@1000000005 : Integer;
    BEGIN
      //Extracts element from node and casts to decimal
      XmlItem := XmlItems.Item(i).SelectSingleNode(Which);
      IF NOT ISNULL(XmlItem) THEN
        EVALUATE(DecVal,XmlItem.InnerText());

      EXIT(DecVal);
    END;

    PROCEDURE BuildSKUnumber@1000000000(VAR ItemNo@1000000001 : Code[20];VAR VarCode@1000000002 : Code[10]) : Code[31];
    BEGIN
      //This returns the SKU No. which is the Item No. concatenated with the Variant code delimited with a Hyphen
      IF STRLEN(VarCode) > 0 THEN
        EXIT(ItemNo + '-' + VarCode)
      ELSE
        EXIT(ItemNo);
    END;

    PROCEDURE SaleableLocationFilter@1000000001() : Text;
    VAR
      Location@1000000000 : Record 14;
      tempFilter@1000000001 : Text;
    BEGIN
      Location.RESET;
      Location.SETRANGE("Saleable Stock",TRUE);
      IF Location.FINDSET THEN BEGIN
        REPEAT
          tempFilter := tempFilter + Location.Code + '|';
        UNTIL Location.NEXT=0;
      END;

      tempFilter:=COPYSTR(tempFilter,1,STRLEN(tempFilter)-1);

      EXIT(tempFilter);
    END;

    LOCAL PROCEDURE LogIntegrationProcess@1000000002(IntegrationType@1000000001 : Code[10];IntegrationGroup@1000000002 : Code[10];Direction@1000000004 : 'Inbound,Outbound';FileName@1000000003 : Text[250];Notes@1000000007 : Text[250]);
    VAR
      IntegrationLog@1000000000 : Record 50016;
    BEGIN
      //This function creates an integration log
      IntegrationLog.INIT;
      IntegrationLog."Integration Type" := IntegrationType;
      IntegrationLog."Integration Group" := IntegrationGroup;
      IntegrationLog.Direction := Direction;
      IntegrationLog.FileName := FileName;
      IntegrationLog."Date Logged" := TODAY;
      IntegrationLog."Time Logged" := TIME;
      IntegrationLog."Processed By" := USERID;
      IntegrationLog.Notes := Notes;
      IntegrationLog.INSERT;
    END;

    PROCEDURE LogDMWCatalogueUpload@1000000007(FileName@1000000003 : Text[250];LogNotes@1000000004 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=Full Catalogue extracted from NAV and Uploaded;ENG=Full Catalogue extracted from NAV and Uploaded';
      Direction@1000000002 : 'Inbound,Outbound';
      FileMgmnt@1000000005 : Codeunit 419;
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."Demandware Integration Type",ModistSetup."Demandware Catalogue Group",Direction::Outbound,FileMgmnt.GetFileName(FileName),LogNotes);
    END;

    PROCEDURE LogDMWInventoryUpload@1000000013(FileName@1000000002 : Text[250];LogNotes@1000000004 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=Inventory extracted from NAV and Uploaded;ENG=Inventory extracted from NAV and Uploaded';
      Direction@1000000003 : 'Inbound,Outbound';
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."Demandware Integration Type",ModistSetup."Demandware Inventory Group",Direction::Outbound,FileName,LogNotes);
    END;

    PROCEDURE LogDMWInventoryDeltaUpload@1000000020(FileName@1000000002 : Text[250];LogNotes@1000000004 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=Inventory extracted from NAV and Uploaded;ENG=Inventory extracted from NAV and Uploaded';
      Direction@1000000003 : 'Inbound,Outbound';
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."Demandware Integration Type",ModistSetup."Demandware Inv. Delta Group",Direction::Outbound,FileName,LogNotes);
    END;

    PROCEDURE LogDMWOrderUpdate@1000000017(FileName@1000000004 : Text[250];LogNotes@1000000003 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=Inventory extracted from NAV and Uploaded;ENG=Inventory extracted from NAV and Uploaded';
      Direction@1000000002 : 'Inbound,Outbound';
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."Demandware Integration Type",ModistSetup."Demandware Inventory Group",Direction::Outbound,FileName,LogNotes);
    END;

    PROCEDURE LogDMWOrderImport@1000000019(FileName@1000000002 : Text[250];LogNotes@1000000004 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=Orders Imported;ENG=Orders Imported';
      Direction@1000000003 : 'Inbound,Outbound';
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."Demandware Integration Type",ModistSetup."Demandware Order Import Group",Direction::Inbound,FileName,LogNotes);
    END;

    PROCEDURE LogDMWPricebookUpload@1000000004(FileName@1000000002 : Text[250];LogNotes@1000000004 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=Orders Imported;ENG=Orders Imported';
      Direction@1000000003 : 'Inbound,Outbound';
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."Demandware Integration Type",ModistSetup."Demandware PriceBook Group",Direction::Outbound,FileName,LogNotes);
    END;

    PROCEDURE Log3PLCatalogueUpload@1000000012(FileName@1000000003 : Text[250];LogNotes@1000000004 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=Full Catalogue extracted from NAV and Uploaded;ENG=Full Catalogue extracted from NAV and Uploaded';
      Direction@1000000002 : 'Inbound,Outbound';
      FileMgmnt@1000000005 : Codeunit 419;
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."3PL Integration Type",ModistSetup."3PL Catalogue Group",Direction::Outbound,FileMgmnt.GetFileName(FileName),LogNotes);
    END;

    PROCEDURE Log3PLTransferOrderUpload@1000000016(FileName@1000000003 : Text[250];LogNotes@1000000004 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=Full Catalogue extracted from NAV and Uploaded;ENG=Full Catalogue extracted from NAV and Uploaded';
      Direction@1000000002 : 'Inbound,Outbound';
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."3PL Integration Type",ModistSetup."3PL Inventory Group",Direction::Outbound,FileName,LogNotes);
    END;

    PROCEDURE Log3PLASNUpload@1000000006(FileName@1000000003 : Text[250];LogNotes@1000000004 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=ASN extracted from NAV and Uploaded;ENG=ASN extracted from NAV and Uploaded';
      Direction@1000000002 : 'Inbound,Outbound';
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."3PL Integration Type",ModistSetup."3PL ASN Group",Direction::Outbound,FileName,LogNotes);
    END;

    PROCEDURE Log3PLGRNImport@1000000010(FileName@1000000003 : Text[250];LogNotes@1000000004 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=GRN imported from 3PL;ENG=GRN imported from 3PL';
      Direction@1000000002 : 'Inbound,Outbound';
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."3PL Integration Type",ModistSetup."3PL GRN Group",Direction::Inbound,FileName,LogNotes);
    END;

    PROCEDURE Log3PLInventoryImport@1000000018(FileName@1000000003 : Text[250];LogNotes@1000000004 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=Inventory imported from 3PL;ENG=Inventory imported from 3PL';
      Direction@1000000002 : 'Inbound,Outbound';
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."3PL Integration Type",ModistSetup."3PL Inventory Group",Direction::Inbound,FileName,LogNotes);
    END;

    PROCEDURE Log3PLSalesOrderUpload@1000000022(FileName@1000000003 : Text[250];LogNotes@1000000004 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=ASN extracted from NAV and Uploaded;ENG=ASN extracted from NAV and Uploaded';
      Direction@1000000002 : 'Inbound,Outbound';
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."3PL Integration Type",ModistSetup."3PL Order Group",Direction::Outbound,FileName,LogNotes);
    END;

    PROCEDURE Log3PLPurchaseReturnUpload@1000000024(FileName@1000000003 : Text[250];LogNotes@1000000004 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=Purchase Return upload to 3PL;ENG=Purchase Return upload to 3PL';
      Direction@1000000002 : 'Inbound,Outbound';
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."3PL Integration Type",ModistSetup."3PL Purchase Return Group",Direction::Outbound,FileName,LogNotes);
    END;

    PROCEDURE Log3PLSalesOrderUdateUpload@1000000027(FileName@1000000003 : Text[250];LogNotes@1000000004 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=Sales Order Update processed;ENG=Sales Order Update processed';
      Direction@1000000002 : 'Inbound,Outbound';
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."3PL Integration Type",ModistSetup."3PL Order Update Import Group",Direction::Outbound,FileName,LogNotes);
    END;

    PROCEDURE GetNumIntegrationErrors@1000000009(IntegrationType@1000000000 : Code[10];IntegrationGroup@1000000001 : Code[10];IntegrationFile@1000000003 : Text) : Integer;
    VAR
      IntegrationErrorLog@1000000002 : Record 50011;
    BEGIN
      IntegrationErrorLog.SETCURRENTKEY("Integration Type","Integration Process Group",FileName);
      IntegrationErrorLog.SETRANGE("Integration Type",IntegrationType);
      IntegrationErrorLog.SETRANGE("Integration Process Group",IntegrationGroup);
      IF IntegrationFile <> '' THEN
        IntegrationErrorLog.SETRANGE(FileName,IntegrationFile);

      EXIT(IntegrationErrorLog.COUNT);
    END;

    PROCEDURE MoveFile@1000000015(SourceFile@1000000000 : Text;DestinationFile@1000000001 : Text);
    VAR
      File@1000000003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      Directory@1000000002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory";
      Path@1000000004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path";
    BEGIN
      //This function moves a file from source to destination
      IF NOT Directory.Exists(Path.GetDirectoryName(DestinationFile)) THEN
        Directory.CreateDirectory(Path.GetDirectoryName(DestinationFile))
      ELSE
        IF File.Exists(DestinationFile) THEN
          File.Delete(DestinationFile);

      File.Move(SourceFile,DestinationFile);
    END;

    PROCEDURE LogBRONTOmessageSent@1000000021(FileName@1000000003 : Text[250];LogNotes@1000000004 : Text[250]);
    VAR
      ModistSetup@1000000000 : Record 50000;
      TEXT001@1000000001 : TextConst 'ENU=Sales Order Update processed;ENG=Sales Order Update processed';
      Direction@1000000002 : 'Inbound,Outbound';
    BEGIN
      ModistSetup.GET;
      LogIntegrationProcess(ModistSetup."BRONTO Integration Type",ModistSetup."BRONTO Messaging SOAP Group",Direction::Outbound,FileName,LogNotes);
    END;

    BEGIN
    {
      //This codeunit contains commonly used functions
    }
    END.
  }
}

