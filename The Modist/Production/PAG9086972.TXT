OBJECT Page 9086972 nF. Log Overview
{
  OBJECT-PROPERTIES
  {
    Date=22/12/16;
    Time=12:00:00 PM;
    Version List=NF2016.17.11;
  }
  PROPERTIES
  {
    CaptionML=[ENU=nForcement Log Overview;
               ENG=nForcement Log Overview];
    SourceTable=Table9086967;
    PageType=List;
    PromotedActionCategoriesML=[ENU=New,Process,Reports,Show/Hide;
                                ENG=New,Process,Reports,Show/Hide];
    OnInit=BEGIN
             NfLogManagement.DetectResultFilter(Rec, ResultFilter);
             UpdateFlags();
           END;

    OnOpenPage=BEGIN
                 UpdateFilters();
               END;

    OnAfterGetRecord=BEGIN
                       UpdateGlobals();
                     END;

    ActionList=ACTIONS
    {
      { 1000000003;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000005;1 ;Action    ;
                      Name=ShowEventsAction;
                      CaptionML=[ENU=Show Events;
                                 ENG=Show Events];
                      Promoted=Yes;
                      Visible=ShowEventsVisible;
                      Enabled=ShowEventsEnabled;
                      PromotedIsBig=Yes;
                      Image=Action;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowEvents();
                               END;
                                }
      { 1000000008;1 ;Action    ;
                      Name=GoBackToActionsAction;
                      CaptionML=[ENU=Go Back to Actions;
                                 ENG=Go Back to Actions];
                      Promoted=Yes;
                      Visible=GoBackToActionsVisible;
                      PromotedIsBig=Yes;
                      Image=Interaction;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 GoBackToActions();
                               END;
                                }
      { 1000000021;1 ;Separator  }
      { 1000000015;1 ;Action    ;
                      Name=ConfirmAction;
                      CaptionML=[ENU=Confirm;
                                 ENG=Confirm];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Approve;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lNfLog@1000000000 : Record 9086967;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(lNfLog);
                                 IF (NfLogManagement.ConfirmLog(lNfLog, TRUE)) THEN
                                   CurrPage.UPDATE(FALSE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;0;Container;
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=Group;
                CaptionML=[ENU=Group;
                           ENG=Group];
                IndentationColumnName=Indentation;
                IndentationControls=Message;
                GroupType=Repeater }

    { 1000000002;2;Field  ;
                SourceExpr=ID;
                Visible=FALSE;
                Editable=FALSE }

    { 1000000004;2;Field  ;
                SourceExpr="Activity Type";
                Editable=FALSE }

    { 1000000007;2;Field  ;
                Name=Message;
                CaptionML=[ENU=Message;
                           ENG=Message];
                SourceExpr=MessageText;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              MESSAGE(MessageText);
                            END;
                             }

    { 1000000009;2;Field  ;
                SourceExpr=Result;
                Editable=FALSE;
                StyleExpr=ResultStyle }

    { 1000000014;2;Field  ;
                SourceExpr="Created By";
                Editable=FALSE }

    { 1000000013;2;Field  ;
                SourceExpr="Created Date Time";
                Editable=FALSE }

    { 1000000012;2;Field  ;
                SourceExpr=Confirmed;
                Editable=FALSE }

    { 1000000011;2;Field  ;
                SourceExpr="Confirmed By";
                Editable=FALSE }

    { 1000000010;2;Field  ;
                SourceExpr="Confirmed Date Time";
                Editable=FALSE }

    { 1000000006;2;Field  ;
                Name=ActionField;
                CaptionML=[ENU=Action;
                           ENG=Action];
                SourceExpr=ActionText;
                Editable=FALSE;
                Style=StandardAccent;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              ActionDrillDown();
                            END;

                ShowCaption=No }

    { 1000000019;1;Group  ;
                Name=FilterGroup;
                CaptionML=[ENU=Filter;
                           ENG=Filter];
                GroupType=Group }

    { 1000000018;2;Field  ;
                Name=ShowSuccessField;
                CaptionML=[ENU=Show Success;
                           ENG=Show Success];
                SourceExpr=ResultFilter[Rec.Result::Success];
                OnValidate=BEGIN
                             NfLogManagement.UpdateResultFilter(Rec, ResultFilter);
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 1000000017;2;Field  ;
                Name=ShowWarningsField;
                CaptionML=[ENU=Show Warnings;
                           ENG=Show Warnings];
                SourceExpr=ResultFilter[Rec.Result::Warning];
                OnValidate=BEGIN
                             NfLogManagement.UpdateResultFilter(Rec, ResultFilter);
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

    { 1000000016;2;Field  ;
                Name=ShowErrorsField;
                CaptionML=[ENU=Show Errors;
                           ENG=Show Errors];
                SourceExpr=ResultFilter[Rec.Result::Error];
                OnValidate=BEGIN
                             NfLogManagement.UpdateResultFilter(Rec, ResultFilter);
                             CurrPage.UPDATE(FALSE);
                           END;
                            }

  }
  CODE
  {
    VAR
      NfLogManagement@1000000011 : Codeunit 9086966;
      NfIif@1000000002 : Codeunit 9086975;
      ActivityId@1000000003 : Integer;
      ResultStyle@1000000000 : Text;
      MessageText@1000000004 : Text;
      ActionText@1000000001 : Text;
      tGoBackToActions@1000000005 : TextConst 'ENU=Go Back to Actions;ENG=Go Back to Actions';
      tShowEvents@1000000006 : TextConst 'ENU=Show Events;ENG=Show Events';
      ShowEventsVisible@1000000007 : Boolean INDATASET;
      ShowEventsEnabled@1000000009 : Boolean INDATASET;
      GoBackToActionsVisible@1000000008 : Boolean INDATASET;
      ResultFilter@1000000010 : ARRAY [3] OF Boolean;

    LOCAL PROCEDURE UpdateGlobals@1000000001();
    BEGIN
      Rec.CALCFIELDS("Has Events");
      MessageText := Rec.GetMessage();
      ResultStyle := Rec.GetResultStyle();
      IF (ActivityId <> 0) THEN
        ActionText := NfIif.Text(Rec."Entry Type" = Rec."Entry Type"::Activity, tGoBackToActions, '')
      ELSE
        ActionText := NfIif.Text(Rec."Has Events", tShowEvents, '');
      UpdateFlags();
    END;

    LOCAL PROCEDURE UpdateFilters@1000000000();
    BEGIN
      Rec.FILTERGROUP(2);
      IF (ActivityId = 0) THEN
      BEGIN
        Rec.SETRANGE("Entry Type", Rec."Entry Type"::Activity);
        Rec.SETRANGE("Activity ID");
      END
      ELSE
      BEGIN
        Rec.SETRANGE("Entry Type");
        Rec.SETRANGE("Activity ID", ActivityId);
      END;
      Rec.FILTERGROUP(0);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE UpdateFlags@1000000003();
    BEGIN
      ShowEventsVisible := (ActivityId = 0);
      ShowEventsEnabled := Rec."Has Events";
      GoBackToActionsVisible := (ActivityId <> 0);
    END;

    LOCAL PROCEDURE ShowEvents@1000000005();
    BEGIN
      IF (Rec."Has Events") THEN
      BEGIN
        ActivityId := Rec.ID;
        UpdateFilters();
      END;
    END;

    LOCAL PROCEDURE GoBackToActions@1000000006();
    BEGIN
      ActivityId := 0;
      UpdateFilters();
    END;

    LOCAL PROCEDURE ActionDrillDown@1000000004();
    BEGIN
      IF (ActivityId <> 0) THEN
        GoBackToActions()
      ELSE
        ShowEvents();
    END;

    BEGIN
    {
      ///<summary></summary>
      ///<change version="NF2016.17" initials="JH" date="2016-07-02">Created</change>
      ///<change version="NF2016.17.11" initials="JH" date="2016-11-03">Logic changes, bug fixes</change>
    }
    END.
  }
}

