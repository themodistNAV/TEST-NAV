OBJECT Report 99001043 Exchange Production BOM Item
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Exchange Production BOM Item;
               ENG=Exchange Production BOM Item];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   Recertify := TRUE;
                   CopyRoutingLink := TRUE;
                 END;

    OnPreReport=BEGIN
                  IF StartingDate = 0D THEN
                    ERROR(Text000);

                  IF Type[1] = Type[1]::" " THEN
                    ERROR(Text001);

                  IF No[1] = '' THEN
                    ERROR(Text002);

                  IF (Type[1] = Type[2]) AND (No[1] = No[2]) THEN
                    ERROR(ItemBOMExchangeErr,SELECTSTR(Type[1] + 1,TypeTxt),No[1],SELECTSTR(Type[2] + 1,TypeTxt),No[2]);
                END;

  }
  DATASET
  {
    { 5444;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               MaxIteration=1;
               OnPostDataItem=VAR
                                ProdBOMHeader2@1000 : Record 99000771;
                                FirstVersion@1001 : Boolean;
                              BEGIN
                                Window.OPEN(
                                  Text004 +
                                  Text005);

                                Window.UPDATE(1,SELECTSTR(Type[1] + 1,TypeTxt));
                                Window.UPDATE(2,No[1]);

                                ProdBOMLine.SETCURRENTKEY(Type,"No.");
                                ProdBOMLine.SETRANGE(Type,Type[1]);
                                ProdBOMLine.SETRANGE("No.",No[1]);

                                IF ProdBOMLine.FIND('+') THEN
                                  REPEAT
                                    FirstVersion := TRUE;
                                    ProdBOMHeader.GET(ProdBOMLine."Production BOM No.");
                                    IF ProdBOMLine."Version Code" <> '' THEN BEGIN
                                      ProdBOMVersionList.GET(
                                        ProdBOMLine."Production BOM No.",ProdBOMLine."Version Code");
                                      ProdBOMHeader.Status := ProdBOMVersionList.Status;
                                      ProdBOMHeader2 := ProdBOMHeader;
                                      ProdBOMHeader2."Unit of Measure Code" := ProdBOMVersionList."Unit of Measure Code";
                                    END ELSE BEGIN
                                      ProdBOMVersionList.SETRANGE("Production BOM No.");
                                      ProdBOMVersionList."Version Code" := '';
                                      ProdBOMHeader2 := ProdBOMHeader;
                                    END;

                                    IF IsActiveBOMVersion(ProdBOMHeader,ProdBOMLine) THEN BEGIN
                                      Window.UPDATE(3,ProdBOMLine."Production BOM No.");
                                      IF NOT CreateNewVersion THEN BEGIN
                                        IF ProdBOMLine."Version Code" <> '' THEN BEGIN
                                          ProdBOMVersionList.Status := ProdBOMVersionList.Status::"Under Development";
                                          ProdBOMVersionList.MODIFY;
                                          ProdBOMVersionList.MARK(TRUE);
                                        END ELSE BEGIN
                                          ProdBOMHeader.Status := ProdBOMHeader.Status::"Under Development";
                                          ProdBOMHeader.MODIFY;
                                          ProdBOMHeader.MARK(TRUE);
                                        END;
                                      END ELSE BEGIN
                                        IF ProdBOMLine."Production BOM No." <> ProdBOMLine2."Production BOM No." THEN BEGIN
                                          ProdBOMVersionList.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");

                                          IF ProdBOMVersionList.FIND('+') THEN
                                            ProdBOMVersionList."Version Code" := INCSTR(ProdBOMVersionList."Version Code")
                                          ELSE BEGIN
                                            ProdBOMVersionList."Production BOM No." := ProdBOMLine."Production BOM No.";
                                            ProdBOMVersionList."Version Code" := '1';
                                          END;
                                          ProdBOMVersionList.Description := ProdBOMHeader2.Description;
                                          ProdBOMVersionList.VALIDATE("Starting Date",StartingDate);
                                          ProdBOMVersionList."Unit of Measure Code" := ProdBOMHeader2."Unit of Measure Code";
                                          ProdBOMVersionList."Last Date Modified" := TODAY;
                                          ProdBOMVersionList.Status := ProdBOMVersionList.Status::New;
                                          IF  ProdBOMHeader2."Version Nos." <> '' THEN BEGIN
                                            ProdBOMVersionList."No. Series" := ProdBOMHeader2."Version Nos.";
                                            ProdBOMVersionList."Version Code" := '';
                                            ProdBOMVersionList.INSERT(TRUE);
                                          END ELSE
                                            ProdBOMVersionList.INSERT;
                                          ProdBOMVersionList.MARK(TRUE);
                                          ProdBOMLine3.RESET;
                                          ProdBOMLine3.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");
                                          ProdBOMLine3.SETRANGE("Version Code",ProdBOMLine."Version Code");
                                          IF ProdBOMLine3.FIND('-') THEN
                                            REPEAT
                                              IF (ProdBOMLine.Type <> ProdBOMLine3.Type) OR
                                                 (ProdBOMLine."No." <> ProdBOMLine3."No.")
                                              THEN BEGIN
                                                ProdBOMLine2 := ProdBOMLine3;
                                                ProdBOMLine2."Version Code" := ProdBOMVersionList."Version Code";
                                                ProdBOMLine2.INSERT;
                                              END;
                                            UNTIL ProdBOMLine3.NEXT = 0;
                                        END ELSE
                                          FirstVersion := FALSE;
                                      END;

                                      IF (No[2] <> '') AND FirstVersion THEN
                                        IF CreateNewVersion THEN BEGIN
                                          ProdBOMLine3.SETCURRENTKEY("Production BOM No.","Version Code");
                                          ProdBOMLine3.SETRANGE(Type,Type[1]);
                                          ProdBOMLine3.SETRANGE("No.",No[1]);
                                          ProdBOMLine3.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");
                                          ProdBOMLine3.SETRANGE("Version Code",ProdBOMLine."Version Code");
                                          IF ProdBOMLine3.FIND('-') THEN
                                            REPEAT
                                              ProdBOMLine2 := ProdBOMLine3;
                                              ProdBOMLine2."Version Code" := ProdBOMVersionList."Version Code";
                                              ProdBOMLine2.VALIDATE(Type,Type[2]);
                                              ProdBOMLine2.VALIDATE("No.",No[2]);
                                              ProdBOMLine2.VALIDATE("Quantity per",ProdBOMLine3."Quantity per" * QtyMultiply);
                                              IF CopyRoutingLink THEN
                                                ProdBOMLine2.VALIDATE("Routing Link Code",ProdBOMLine3."Routing Link Code");
                                              ProdBOMLine2."Ending Date" := 0D;
                                              ProdBOMLine2.INSERT;
                                            UNTIL ProdBOMLine3.NEXT = 0;
                                        END ELSE BEGIN
                                          ProdBOMLine3.SETRANGE("Production BOM No.",ProdBOMLine."Production BOM No.");
                                          ProdBOMLine3.SETRANGE("Version Code",ProdBOMVersionList."Version Code");
                                          IF NOT ProdBOMLine3.FIND('+') THEN
                                            CLEAR(ProdBOMLine3);
                                          ProdBOMLine3."Line No." := ProdBOMLine3."Line No." + 10000;
                                          ProdBOMLine2 := ProdBOMLine;
                                          ProdBOMLine2."Version Code" := ProdBOMVersionList."Version Code";
                                          ProdBOMLine2."Line No." := ProdBOMLine3."Line No.";
                                          ProdBOMLine2.VALIDATE(Type,Type[2]);
                                          ProdBOMLine2.VALIDATE("No.",No[2]);
                                          ProdBOMLine2.VALIDATE("Quantity per",ProdBOMLine."Quantity per" * QtyMultiply);
                                          IF CopyRoutingLink THEN
                                            ProdBOMLine2.VALIDATE("Routing Link Code",ProdBOMLine."Routing Link Code");
                                          IF NOT CreateNewVersion THEN
                                            ProdBOMLine2."Starting Date" := StartingDate;
                                          ProdBOMLine2."Ending Date" := 0D;
                                          ProdBOMLine2.INSERT;
                                          IF DeleteExcComp THEN
                                            ProdBOMLine.DELETE(TRUE)
                                          ELSE BEGIN
                                            ProdBOMLine."Ending Date" := StartingDate - 1;
                                            ProdBOMLine.MODIFY;
                                          END;
                                        END;
                                    END;
                                  UNTIL ProdBOMLine.NEXT(-1) = 0;
                              END;
                               }

    { 5317;    ;DataItem;RecertifyLoop       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  IF Recertify THEN BEGIN
                                    ProdBOMHeader.MARKEDONLY(TRUE);
                                    IF ProdBOMHeader.FIND('-') THEN
                                      REPEAT
                                        ProdBOMHeader.VALIDATE(Status,ProdBOMHeader.Status::Certified);
                                        ProdBOMHeader.MODIFY;
                                      UNTIL ProdBOMHeader.NEXT = 0;

                                    ProdBOMVersionList.SETRANGE("Production BOM No.");
                                    ProdBOMVersionList.MARKEDONLY(TRUE);
                                    IF ProdBOMVersionList.FIND('-') THEN
                                      REPEAT
                                        ProdBOMVersionList.VALIDATE(Status,ProdBOMVersionList.Status::Certified);
                                        ProdBOMVersionList.MODIFY;
                                      UNTIL ProdBOMVersionList.NEXT = 0;
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               DeleteExchangedComponentEditab := TRUE;
               "Create New VersionEditable" := TRUE;
               CreateNewVersion := TRUE;
               QtyMultiply := 1;
               StartingDate := WORKDATE;
             END;

      OnOpenPage=BEGIN
                   "Create New VersionEditable" := NOT DeleteExcComp;
                   DeleteExchangedComponentEditab := NOT CreateNewVersion;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 4   ;2   ;Group     ;
                  CaptionML=[ENU=Exchange;
                             ENG=Exchange] }

      { 5   ;3   ;Field     ;
                  Name=ExchangeType;
                  CaptionML=[ENU=Type;
                             ENG=Type];
                  OptionCaptionML=[ENU=" ,Item,Production BOM";
                                   ENG=" ,Item,Production BOM"];
                  SourceExpr=Type[1];
                  OnValidate=BEGIN
                               No[1] := '';
                             END;
                              }

      { 1   ;3   ;Field     ;
                  Name=ExchangeNo;
                  CaptionML=[ENU=No.;
                             ENG=No.];
                  SourceExpr=No[1];
                  OnValidate=BEGIN
                               IF Type[1] = Type::" " THEN
                                 ERROR(Text006);

                               CASE Type[1] OF
                                 Type[1]::Item:
                                   Item.GET(No[1]);
                                 Type[1]::"Production BOM":
                                   ProdBOMHeader.GET(No[1]);
                               END;
                             END;

                  OnLookup=BEGIN
                             CASE Type[1] OF
                               Type[1]::Item:
                                 IF PAGE.RUNMODAL(0,Item) = ACTION::LookupOK THEN BEGIN
                                   Text := Item."No.";
                                   EXIT(TRUE);
                                 END;
                               Type[1]::"Production BOM":
                                 IF PAGE.RUNMODAL(0,ProdBOMHeader) = ACTION::LookupOK THEN BEGIN
                                   Text := ProdBOMHeader."No.";
                                   EXIT(TRUE);
                                 END;
                             END;
                           END;
                            }

      { 8   ;2   ;Group     ;
                  CaptionML=[ENU=With;
                             ENG=With] }

      { 12  ;3   ;Field     ;
                  Name=WithType;
                  CaptionML=[ENU=Type;
                             ENG=Type];
                  OptionCaptionML=[ENU=" ,Item,Production BOM";
                                   ENG=" ,Item,Production BOM"];
                  SourceExpr=Type[2];
                  OnValidate=BEGIN
                               No[2] := '';
                             END;
                              }

      { 9   ;3   ;Field     ;
                  Name=WithNo;
                  CaptionML=[ENU=No.;
                             ENG=No.];
                  SourceExpr=No[2];
                  OnValidate=BEGIN
                               IF Type[1] = Type::" " THEN
                                 ERROR(Text006);

                               CASE Type[2] OF
                                 Type[2]::Item:
                                   Item.GET(No[2]);
                                 Type[2]::"Production BOM":
                                   ProdBOMHeader.GET(No[2]);
                               END;
                             END;

                  OnLookup=BEGIN
                             CASE Type[2] OF
                               Type[2]::Item:
                                 IF PAGE.RUNMODAL(0,Item) = ACTION::LookupOK THEN BEGIN
                                   Text := Item."No.";
                                   EXIT(TRUE);
                                 END;
                               Type[2]::"Production BOM":
                                 IF PAGE.RUNMODAL(0,ProdBOMHeader) = ACTION::LookupOK THEN BEGIN
                                   Text := ProdBOMHeader."No.";
                                   EXIT(TRUE);
                                 END;
                             END;
                             EXIT(FALSE);
                           END;
                            }

      { 15  ;2   ;Field     ;
                  Name=Create New Version;
                  CaptionML=[ENU=Create New Version;
                             ENG=Create New Version];
                  SourceExpr=CreateNewVersion;
                  Editable="Create New VersionEditable";
                  OnValidate=BEGIN
                               CreateNewVersionOnAfterValidat;
                             END;
                              }

      { 13  ;2   ;Field     ;
                  Name=MultiplyQtyWith;
                  CaptionML=[ENU=Multiply Qty. with;
                             ENG=Multiply Qty. with];
                  DecimalPlaces=0:5;
                  SourceExpr=QtyMultiply }

      { 3   ;2   ;Field     ;
                  Name=StartingDate;
                  CaptionML=[ENU=Starting Date;
                             ENG=Starting Date];
                  SourceExpr=StartingDate }

      { 19  ;2   ;Field     ;
                  Name=Recertify;
                  CaptionML=[ENU=Recertify;
                             ENG=Recertify];
                  SourceExpr=Recertify }

      { 17  ;2   ;Field     ;
                  Name=CopyRoutingLink;
                  CaptionML=[ENU=Copy Routing Link;
                             ENG=Copy Routing Link];
                  SourceExpr=CopyRoutingLink }

      { 21  ;2   ;Field     ;
                  Name=Delete Exchanged Component;
                  CaptionML=[ENU=Delete Exchanged Component;
                             ENG=Delete Exchanged Component];
                  SourceExpr=DeleteExcComp;
                  Editable=DeleteExchangedComponentEditab;
                  OnValidate=BEGIN
                               DeleteExcCompOnAfterValidate;
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You must enter a Starting Date.;ENG=You must enter a Starting Date.';
      Text001@1001 : TextConst 'ENU=You must enter the Type to exchange.;ENG=You must enter the Type to exchange.';
      Text002@1002 : TextConst 'ENU=You must enter the No. to exchange.;ENG=You must enter the No. to exchange.';
      ItemBOMExchangeErr@1003 : TextConst '@@@=%1 and %3 are strings (''Item'' or ''Production BOM''), %2 and %4 are either an Item No. or a Production BOM Header No. (Code[20]);ENU=You cannot exchange %1 %2 with %3 %4.;ENG=You cannot exchange %1 %2 with %3 %4.';
      Text004@1004 : TextConst 'ENU=Exchanging #1########## #2############\;ENG=Exchanging              #1########## #2############\';
      Text005@1005 : TextConst 'ENU=Production BOM No.      #3############;ENG=Production BOM No.      #3############';
      Text006@1006 : TextConst 'ENU=Type must be entered.;ENG=Type must be entered.';
      Item@1007 : Record 27;
      ProdBOMHeader@1008 : Record 99000771;
      ProdBOMVersionList@1009 : Record 99000779;
      ProdBOMLine@1010 : Record 99000772;
      ProdBOMLine2@1011 : Record 99000772;
      ProdBOMLine3@1012 : Record 99000772;
      Window@1013 : Dialog;
      Type@1014 : ARRAY [2] OF ' ,Item,Production BOM';
      No@1015 : ARRAY [2] OF Code[20];
      QtyMultiply@1016 : Decimal;
      CreateNewVersion@1017 : Boolean;
      StartingDate@1018 : Date;
      Recertify@1019 : Boolean;
      TypeTxt@1020 : TextConst 'ENU=" ,Item,Production BOM";ENG=" ,Item,Production BOM"';
      CopyRoutingLink@1021 : Boolean;
      DeleteExcComp@1022 : Boolean;
      "Create New VersionEditable"@19037184 : Boolean INDATASET;
      DeleteExchangedComponentEditab@19075716 : Boolean INDATASET;

    LOCAL PROCEDURE CreateNewVersionOnAfterValidat@19007803();
    BEGIN
      "Create New VersionEditable" := NOT DeleteExcComp;
      DeleteExchangedComponentEditab := NOT CreateNewVersion;
    END;

    LOCAL PROCEDURE DeleteExcCompOnAfterValidate@19039897();
    BEGIN
      "Create New VersionEditable" := NOT DeleteExcComp;
      DeleteExchangedComponentEditab := NOT CreateNewVersion;
    END;

    LOCAL PROCEDURE IsActiveBOMVersion@1(ProdBOMHeader@1000 : Record 99000771;ProdBOMLine@1003 : Record 99000772) : Boolean;
    VAR
      VersionManagement@1002 : Codeunit 99000756;
    BEGIN
      IF ProdBOMHeader.Status = ProdBOMHeader.Status::Closed THEN
        EXIT(FALSE);

      EXIT(ProdBOMLine."Version Code" = VersionManagement.GetBOMVersion(ProdBOMLine."Production BOM No.",StartingDate,TRUE));
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

