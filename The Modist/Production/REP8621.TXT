OBJECT Report 8621 Config. Package - Process
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    TransactionType=UpdateNoLocks;
    CaptionML=[ENU=Config. Package - Process;
               ENG=Config. Package - Process];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  ERROR(ThereIsNothingToProcessErr);
                END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table8613;
               DataItemTableView=SORTING(Package Code,Table ID)
                                 ORDER(Ascending);
               OnAfterGetRecord=BEGIN
                                  ProcessCustomRulesExample("Config. Package Table");
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      SourceTable=Table8613;
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ThereIsNothingToProcessErr@1001 : TextConst 'ENU=There is nothing to process.\\Implement processing logic in Report 8621 - Config. Package - Process.;ENG=There is nothing to process.\\Implement processing logic in Report 8621 - Config. Package - Process.';

    PROCEDURE ProcessCustomRulesExample@5(ConfigPackageTable@1000 : Record 8613);
    VAR
      Customer@1001 : Record 18;
      BankAccount@1002 : Record 270;
      PaymentTerms@1003 : Record 3;
      ConfigTextTransformation@1004 : Record 8640;
    BEGIN
      CASE ConfigPackageTable."Table ID" OF
        DATABASE::"Payment Terms":
          BEGIN
            ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::"Title Case";
            ApplyTextTransformation(ConfigPackageTable,PaymentTerms.FIELDNO(Description),ConfigTextTransformation);
          END;
        DATABASE::"Bank Account":
          BEGIN
            ConfigTextTransformation."Transformation Type" :=
              ConfigTextTransformation."Transformation Type"::"Remove Non-Alphanumeric Characters";

            ApplyTextTransformation(ConfigPackageTable,BankAccount.FIELDNO("SWIFT Code"),ConfigTextTransformation);
            ApplyTextTransformation(ConfigPackageTable,BankAccount.FIELDNO(IBAN),ConfigTextTransformation);

            ConfigTextTransformation."Transformation Type" :=
              ConfigTextTransformation."Transformation Type"::"Remove Non-Alphanumeric Characters";

            ApplyTextTransformation(ConfigPackageTable,BankAccount.FIELDNO("SWIFT Code"),ConfigTextTransformation);
            ApplyTextTransformation(ConfigPackageTable,BankAccount.FIELDNO(IBAN),ConfigTextTransformation);
          END;
        DATABASE::Customer:
          BEGIN
            ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::Replace;
            ConfigTextTransformation."Current Value" := 'Mister';
            ConfigTextTransformation."New Value" := 'Mr.';

            ApplyTextTransformation(ConfigPackageTable,Customer.FIELDNO(Name),ConfigTextTransformation);
          END;
      END;
    END;

    PROCEDURE TransformText@1(ConfigTextTransformation@1000 : Record 8640;OldValue@1001 : Text) : Text;
    VAR
      NewValue@1002 : Text;
    BEGIN
      NewValue := OldValue;

      CASE ConfigTextTransformation."Transformation Type" OF
        ConfigTextTransformation."Transformation Type"::Uppercase:
          NewValue := UPPERCASE(OldValue);
        ConfigTextTransformation."Transformation Type"::Lowercase:
          NewValue := LOWERCASE(OldValue);
        ConfigTextTransformation."Transformation Type"::"Title Case":
          NewValue := TextToTitleCase(ConfigTextTransformation,OldValue);
        ConfigTextTransformation."Transformation Type"::Trim:
          NewValue := DELCHR(OldValue,'<>');
        ConfigTextTransformation."Transformation Type"::Substring:
          NewValue := Substring(OldValue,ConfigTextTransformation);
        ConfigTextTransformation."Transformation Type"::Replace:
          NewValue := StringReplace(OldValue,ConfigTextTransformation."Current Value",ConfigTextTransformation."New Value");
        ConfigTextTransformation."Transformation Type"::"Regular Expression":
          NewValue := RegularExpression(OldValue,ConfigTextTransformation."Current Value",ConfigTextTransformation."New Value");
        ConfigTextTransformation."Transformation Type"::"Remove Non-Alphanumeric Characters":
          NewValue := RemoveNonAplhaNumericCharacters(OldValue);
        ConfigTextTransformation."Transformation Type"::"Date and Time Formatting":
          NewValue := DateTimeFormatting(OldValue,ConfigTextTransformation);
      END;

      EXIT(NewValue);
    END;

    LOCAL PROCEDURE TextToTitleCase@17(ConfigTextTransformation@1000 : Record 8640;OldValue@1001 : Text) : Text;
    VAR
      CultureInfo@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      CultureInfo := CultureInfo.GetCultureInfo(ConfigTextTransformation.GetLanguageID);
      EXIT(CultureInfo.TextInfo.ToTitleCase(OldValue));
    END;

    LOCAL PROCEDURE StringReplace@2(StringToReplace@1000 : Text;OldValue@1001 : Text;NewValue@1002 : Text) : Text;
    VAR
      DotNetString@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      NewString@1004 : Text;
    BEGIN
      DotNetString := StringToReplace;
      NewString := DotNetString.Replace(OldValue,NewValue);
      EXIT(NewString);
    END;

    LOCAL PROCEDURE RegularExpression@3(StringToReplace@1000 : Text;Pattern@1001 : Text;NewValue@1002 : Text) : Text;
    VAR
      Regex@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      RegexOptions@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.RegexOptions";
      NewString@1004 : Text;
    BEGIN
      Regex := Regex.Regex(Pattern,RegexOptions.IgnoreCase);
      NewString := Regex.Replace(StringToReplace,NewValue);
      EXIT(NewString);
    END;

    LOCAL PROCEDURE RemoveNonAplhaNumericCharacters@19(OldValue@1003 : Text) : Text;
    VAR
      DotNetChar@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Char";
      NewValue@1001 : Text;
      I@1000 : Integer;
    BEGIN
      NewValue := '';
      FOR I := 1 TO STRLEN(OldValue) DO BEGIN
        IF DotNetChar.IsLetterOrDigit(OldValue[I]) THEN
          NewValue += FORMAT(OldValue[I]);
      END;

      EXIT(NewValue);
    END;

    LOCAL PROCEDURE DateTimeFormatting@20(OldValue@1001 : Text;ConfigTextTransformation@1002 : Record 8640) : Text;
    VAR
      DotNetDateTime@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      CultureInfo@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
      DotNetDateTimeStyles@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.DateTimeStyles";
      NewValue@1003 : Text;
    BEGIN
      NewValue := OldValue;

      DotNetDateTime := DotNetDateTime.DateTime(1);
      CultureInfo := CultureInfo.GetCultureInfo(ConfigTextTransformation.GetLanguageID);

      IF DotNetDateTime.TryParse(OldValue,CultureInfo,DotNetDateTimeStyles.None,DotNetDateTime) THEN
        NewValue := DotNetDateTime.ToString(ConfigTextTransformation.Format,CultureInfo);

      EXIT(NewValue);
    END;

    LOCAL PROCEDURE ApplyTextTransformation@25(ConfigPackageTable@1001 : Record 8613;FieldNo@1002 : Integer;ConfigTextTransformation@1000 : Record 8640);
    VAR
      ConfigPackageData@1003 : Record 8615;
    BEGIN
      IF GetConfigPackageData(ConfigPackageData,ConfigPackageTable,FieldNo) THEN
        REPEAT
          ConfigPackageData.Value := COPYSTR(TransformText(ConfigTextTransformation,ConfigPackageData.Value),1,250);
          ConfigPackageData.MODIFY;
        UNTIL ConfigPackageData.NEXT = 0;
    END;

    LOCAL PROCEDURE GetConfigPackageData@4(VAR ConfigPackageData@1004 : Record 8615;ConfigPackageTable@1000 : Record 8613;FieldId@1001 : Integer) : Boolean;
    BEGIN
      ConfigPackageData.SETRANGE("Package Code",ConfigPackageTable."Package Code");
      ConfigPackageData.SETRANGE("Table ID",ConfigPackageTable."Table ID");
      ConfigPackageData.SETRANGE("Field ID",FieldId);
      EXIT(ConfigPackageData.FINDSET(TRUE,FALSE));
    END;

    LOCAL PROCEDURE Substring@7(OldValue@1000 : Text;ConfigTextTransformation@1001 : Record 8640) : Text;
    VAR
      StartPosition@1002 : Integer;
      Length@1003 : Integer;
    BEGIN
      StartPosition := ConfigTextTransformation."Start Position";
      Length := ConfigTextTransformation.Length;

      IF StartPosition = 0 THEN
        StartPosition := 1;

      IF Length = 0 THEN
        Length := STRLEN(OldValue);

      EXIT(COPYSTR(OldValue,StartPosition,Length));
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

