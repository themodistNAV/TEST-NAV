OBJECT Table 9062280 AutoNAV Log Entry
{
  OBJECT-PROPERTIES
  {
    Date=14/07/17;
    Time=12:34:25 PM;
    Modified=Yes;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    CaptionML=[ENU=AutoNAV Log Entry;
               ENG=AutoNAV Log Entry];
    LookupPageID=Page9062325;
    DrillDownPageID=Page9062325;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Entry No.;
                                                              ENG=Entry No.] }
    { 2   ;   ;DateTime Logged     ;DateTime      ;CaptionML=[ENU=DateTime Logged;
                                                              ENG=DateTime Logged] }
    { 3   ;   ;Source              ;Code20        ;CaptionML=[ENU=Source;
                                                              ENG=Source] }
    { 4   ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 6   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=" ,Information,Warning,Error,Debug";
                                                                    ENG=" ,Information,Warning,Error,Debug"];
                                                   OptionString=[ ,Information,Warning,Error,Debug] }
    { 7   ;   ;Description 2       ;Text250       ;CaptionML=[ENU=Description2;
                                                              ENG=Description2] }
    { 10  ;   ;User ID             ;Code50        ;CaptionML=[ENU=User ID;
                                                              ENG=User ID] }
    { 11  ;   ;FAO                 ;Text250       ;CaptionML=[ENU=FAO;
                                                              ENG=FAO] }
    { 12  ;   ;FAO Contact No.     ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=FAO Contact No.;
                                                              ENG=FAO Contact No.] }
    { 13  ;   ;Error Code          ;Code20        ;CaptionML=[ENU=Error Code;
                                                              ENG=Error Code] }
    { 14  ;   ;Acknowledged        ;Boolean       ;CaptionML=[ENU=Acknowledged;
                                                              ENG=Acknowledged] }
    { 20  ;   ;Object Type         ;Option        ;OnValidate=BEGIN
                                                                IF (Rec."Object Type" <> xRec."Object Type") THEN
                                                                  Rec.VALIDATE("Object ID", 0);
                                                              END;

                                                   CaptionML=[ENU=Object Type;
                                                              ENG=Object Type];
                                                   OptionCaptionML=[ENU=" ,,,Report,,Codeunit,XMLport";
                                                                    ENG=" ,,,Report,,Codeunit,XMLport"];
                                                   OptionString=[ ,,,Report,,Codeunit,XMLport] }
    { 21  ;   ;Object ID           ;Integer       ;OnValidate=BEGIN
                                                                Rec.CALCFIELDS("Object Name");
                                                              END;

                                                   CaptionML=[ENU=Object ID;
                                                              ENG=Object ID] }
    { 22  ;   ;Object Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=FIELD(Object Type),
                                                                                                                Object ID=FIELD(Object ID)));
                                                   CaptionML=[ENU=Object Name;
                                                              ENG=Object Name] }
    { 60  ;   ;Transaction ID      ;Integer       ;CaptionML=[ENU=Transaction ID;
                                                              ENG=Transaction ID] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;DateTime Logged                          }
    {    ;Transaction ID                           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      SystemBehaviour@1000000000 : Record 9062230;
      String@1000000002 : Codeunit 9062236;
      UniversalVariables@1000000001 : Codeunit 9062232;
      TNLUtils@1000000003 : Codeunit 9062229;
      LogDebug@1000000004 : Boolean;
      LogDebugRetrieved@1000000006 : Boolean;
      LogFolder@1000000007 : Text;
      LogFolderRetrieved@1000000008 : Boolean;

    PROCEDURE Log@1000000003(pSource@1000000001 : Code[20];pType@1000000010 : Integer;pDescription@1000000000 : Text;pFAO@1000000006 : Text);
    VAR
      TxtErrorMsg@1000000012 : TextConst 'ENU=NAV Log Entry - ERROR;ENG=NAV Log Entry - ERROR';
    BEGIN
      LogAdv(pSource, pType, pDescription, pFAO, '');
    END;

    PROCEDURE LogError@1000000000(pSource@1000000001 : Code[20];pType@1000000010 : Integer;pDescription@1000000000 : Text;pErrorCode@1000000002 : Code[20]) : Code[20];
    BEGIN
      LogAdv(pSource, Rec.Type::Error, pDescription, '', pErrorCode);
    END;

    PROCEDURE LogAdv@1000000015(pSource@1000000001 : Code[20];pType@1000000010 : Integer;pDescription@1000000000 : Text;pFAO@1000000006 : Text;pErrorCode@1000000002 : Code[20]);
    VAR
      EmailLogAdd@1000000008 : Text[1024];
      EmailType@1000000009 : 'E-Mail,Popup';
      EmailNotMgt@1000000004 : Codeunit 9062261;
      OnScreenDesc@1000000011 : Text[1024];
      TxtErrorMsg@1000000012 : TextConst 'ENU=NAV Log Entry - ERROR;ENG=NAV Log Entry - ERROR';
    BEGIN
      IF pType = Rec.Type::Debug THEN
      BEGIN
        IF NOT GetLogDebug() THEN
          EXIT;
        IF NOT SystemBehaviour.GetBoolean('DEBUG_' + COPYSTR(pSource, 1, 14)) THEN
          EXIT;
      END;

      pDescription := String.Replace(pDescription, 'ª', '');

      CLEAR(Rec);
      Rec.INIT();
      Rec.VALIDATE("DateTime Logged", CURRENTDATETIME);
      Rec.VALIDATE(Source, pSource);
      Rec.VALIDATE(Type, pType);
      Rec.SetDescription(pDescription);
      Rec.VALIDATE("User ID",USERID);
      Rec.VALIDATE(FAO, UPPERCASE(pFAO));
      Rec.VALIDATE("FAO Contact No.", IdentifyFAOContact(pFAO));
      Rec.VALIDATE("Error Code", pErrorCode);
      Rec.INSERT(TRUE);

      IF Rec.Type = Rec.Type::Warning THEN
      BEGIN
        EmailLogAdd := SystemBehaviour.GetText('EMAIL_AUTONAV_LOG_TO');
        IF EmailLogAdd <> '' THEN BEGIN
          EmailNotMgt.InsertNewMessage(EmailLogAdd, '', TxtErrorMsg, Rec.Description, '', '', FALSE, '',
            EmailType::"E-Mail", 0);
        END;
        IF GUIALLOWED AND (UniversalVariables.GetBooleanVar('SHOWERRORS')) THEN BEGIN
          OnScreenDesc := pDescription; //DOC NA2016.10 PC
          OnScreenDesc := String.Replace(OnScreenDesc, '\', '%1');
          OnScreenDesc := String.Replace(OnScreenDesc, 'ª', '\');
          MESSAGE(OnScreenDesc,'\')
        END;
      END;
    END;

    PROCEDURE ShowError@1000000001(pAlwaysShowMessage@1000000001 : Boolean);
    VAR
      lErrorText@1000000000 : Text[1024];
    BEGIN
      pAlwaysShowMessage := FALSE;

      IF ((Rec.FAO = '') AND (Rec.Description = '')) THEN
        EXIT;
      IF ( NOT (GUIALLOWED())) THEN
        EXIT;

      IF (Rec.Description <> '') THEN
        lErrorText := Rec.Description
      ELSE
        lErrorText := Rec.FAO;

      CASE (Rec.Type) OF
        Rec.Type::Information: MESSAGE(lErrorText);
        Rec.Type::Warning: ERROR(lErrorText);
        ELSE
          IF (pAlwaysShowMessage) THEN
            MESSAGE(lErrorText);
      END;
    END;

    PROCEDURE GetDescription@1000000002() : Text;
    BEGIN
      EXIT(Rec.Description + Rec."Description 2");
    END;

    PROCEDURE SetDescription@1000000004(pDescription@1000000000 : Text);
    BEGIN
      Rec.Description := COPYSTR(pDescription, 1, 250);
      Rec."Description 2" := COPYSTR(pDescription, 251, 250);
    END;

    LOCAL PROCEDURE IdentifyFAOContact@1000000005(LogFAOText@1000000000 : Text[250]) ContactNo : Code[20];
    VAR
      Contact@1000000001 : Record 5050;
      nAblementUser@1000000002 : Record 9062729;
    BEGIN
      IF Contact.GET(COPYSTR(LogFAOText,1,20)) THEN EXIT(Contact."No.");
      IF nAblementUser.GET(COPYSTR(LogFAOText,1,20)) THEN EXIT(nAblementUser."Contact No.");

      nAblementUser.SETFILTER("E-Mail",'@'+COPYSTR(LogFAOText,1,100));
      IF nAblementUser.FINDFIRST THEN EXIT(nAblementUser."Contact No.");

      Contact.SETFILTER("E-Mail",'@'+COPYSTR(LogFAOText,1,100));
      IF Contact.FINDFIRST THEN EXIT(Contact."No.");

      EXIT('');
    END;

    LOCAL PROCEDURE GetLogDebug@1000000009() : Boolean;
    BEGIN
      IF ( NOT (LogDebugRetrieved)) THEN
      BEGIN
        LogDebug := SystemBehaviour.GetBoolean('AUTONAV_LOG_DEBUG');
        LogDebugRetrieved := TRUE;
      END;
      EXIT(LogDebug);
    END;

    LOCAL PROCEDURE GetLogFolder@1000000012() : Text;
    BEGIN
      IF ( NOT (LogFolderRetrieved)) THEN
      BEGIN
        LogFolder := SystemBehaviour.GetText('AUTONAV_LOG_FOLDER');
        LogFolderRetrieved := TRUE;
      END;
      EXIT(LogFolder);
    END;

    PROCEDURE GetStyle@1000000006() : Text;
    BEGIN
      //DOC NA2015.7 - Returning the record style
      //  <- The style

      CASE (Rec.Type) OF
        Rec.Type::Warning:
          IF (Rec.Acknowledged) THEN
            EXIT('StandardAccent')
          ELSE
            EXIT('StrongAccent');
        Rec.Type::Error:
          IF (Rec.Acknowledged) THEN
            EXIT('Attention')
          ELSE
            EXIT('Unfavorable');
        Rec.Type::Debug:
          EXIT('Ambiguous');
      END;

      EXIT('Standard');
    END;

    PROCEDURE GetTypeStyle@9062229(pType@9062229 : Integer) : Text;
    VAR
      lAutoNAVLogEntry@9062230 : Record 9062280;
    BEGIN
      //DOC NA2016.10 - Returning a style for given type
      //  -> pType: The type
      //  <- The style

      lAutoNAVLogEntry.Type := pType;
      EXIT(lAutoNAVLogEntry.GetStyle());
    END;

    PROCEDURE GetNewTransactionId@1000000010() : Integer;
    VAR
      lAutoNavLogEntry@1000000000 : Record 9062280;
    BEGIN
      //DOC NA2016.11 - Returning new transaction ID
      //  <- The ID

      lAutoNavLogEntry.RESET();
      lAutoNavLogEntry.SETCURRENTKEY("Transaction ID");
      IF (lAutoNavLogEntry.FINDLAST()) THEN
        EXIT(lAutoNavLogEntry."Transaction ID" + 1)
      ELSE
        EXIT(1);
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 20/08/2012 - Migrated to 2013, error handling
      //DOC NA2015.1  PC 11/03/2014 - Changed Log param "Type" to "LogType" to prevent clash with Global
      //DOC NA2015.1  JH 25/03/2014 - "Acknowledged" added
      //DOC NA2015.4  JH 28/12/2014 - System behaviours renamed
      //DOC NA2016.10 JH 27/08/2015 - Upgraded to 2016
      //DOC NA2016.10 PC 25/09/2015 - Fixed bug with displaying message boxes if log type is Warning
      //DOC NA2016.10 PC 07/10/2015 - Disabled write to CSV function
      //DOC NA2016.11 JH 26/11/2015 - Transactions added
      //DOC NA2016.12 JH 17/12/2015 - Changes related to auto nav task queues
      //DOC NA2016.12 JH 28/01/2016 - New string codeunit
      //DOC NA2016.14 JH 04/03/2016 - "HIDEERRORS" logic reversed and changed to "SHOWERRORS"
      //DOC NA2016.15 JH 15/04/2016 - CfMD amendments
    }
    END.
  }
}

