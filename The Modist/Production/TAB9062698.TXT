OBJECT Table 9062698 Quick Report Field
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Quick Report Code");
               CheckModifyPermission();
               InitialiseRecord(TRUE);
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
               UpdateTimestamp();
             END;

    OnModify=BEGIN
               CheckModifyPermission();
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
               UpdateTimestamp();
             END;

    OnDelete=BEGIN
               CheckModifyPermission();
               CriteriaManagement.DeleteCriteria(Rec."Field Filter ID");
               UpdateTimestamp();
             END;

    OnRename=BEGIN
               CheckModifyPermission();
             END;

    CaptionML=[ENU=Quick Report Field;
               ENG=Quick Report Field];
    LookupPageID=Page9063035;
    DrillDownPageID=Page9063035;
  }
  FIELDS
  {
    { 1   ;   ;Quick Report Code   ;Code60        ;TableRelation="Quick Report Header";
                                                   CaptionML=[ENU=Quick Report Code;
                                                              ENG=Quick Report Code] }
    { 2   ;   ;ID                  ;Integer       ;CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 3   ;   ;Table ID            ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Table ID" <> xRec."Table ID") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Field Type", Rec."Field Type"::" ");
                                                                  Rec.VALIDATE("Field ID", 0);
                                                                  Rec.VALIDATE("Field Data Type", Rec."Field Data Type"::" ");
                                                                  Rec.VALIDATE("Quick Report Data Type", Rec."Quick Report Data Type"::" ");
                                                                END;
                                                                Rec.CALCFIELDS("Table Name");
                                                              END;

                                                   CaptionML=[ENU=Table ID;
                                                              ENG=Table ID] }
    { 4   ;   ;Table Name          ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Table ID)));
                                                   CaptionML=[ENU=Table Name;
                                                              ENG=Table Name];
                                                   Editable=No }
    { 5   ;   ;Field Type          ;Option        ;InitValue=Field;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Field Type" <> xRec."Field Type") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Field ID", 0);
                                                                  Rec.VALIDATE("Field Data Type", Rec."Field Data Type"::" ");
                                                                  Rec.VALIDATE("Quick Report Data Type", Rec."Quick Report Data Type"::" ");
                                                                  Rec.VALIDATE("Data Type Conversion", QuickReportToolkit.DataTypesToDataTypeConversion(Rec."Field Data Type", Rec."Quick Report Data Type"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Field Type;
                                                              ENG=Field Type];
                                                   OptionCaptionML=[ENU=" ,Field,Enhanced Field";
                                                                    ENG=" ,Field,Enhanced Field"];
                                                   OptionString=[ ,Field,Enhanced Field] }
    { 6   ;   ;Field ID            ;Integer       ;OnValidate=VAR
                                                                eFieldIdNotAllowed@1000000002 : TextConst 'ENU="Field ID is not allowed for ""%1"" = ''%2''";ENG="Field ID is not allowed for ""%1"" = ''%2''"';
                                                                lDataFrom@1000000003 : Integer;
                                                              BEGIN
                                                                IF (Rec."Field ID" <> xRec."Field ID") THEN
                                                                BEGIN
                                                                  CriteriaManagement.DeleteCriteria(Rec."Field Filter ID");
                                                                  Rec.VALIDATE("Field Filter ID", 0);
                                                                END;
                                                                IF (Rec."Field ID" <> 0) THEN
                                                                BEGIN
                                                                  Rec.TESTFIELD("Quick Report Code");
                                                                  QuickReportHeader.GET(Rec."Quick Report Code");
                                                                  QuickReportHeader.TESTFIELD("Data From");

                                                                  lDataFrom := GetDataFrom();
                                                                  CASE (lDataFrom) OF
                                                                    QuickReportHeader."Data From"::Table:
                                                                      BEGIN
                                                                        Rec.TESTFIELD("Field Type");
                                                                        CLEAR(ObjectFieldToolkit);
                                                                        ObjectFieldToolkit.ValidateFieldIdAdv(Rec."Table ID", Rec."Field Type", Rec."Field ID");
                                                                        Rec."Field Name" := ObjectFieldToolkit.GetFieldNameAdv(Rec."Table ID", Rec."Field Type", Rec."Field ID");
                                                                        Rec.VALIDATE("Field Data Type", QuickReportToolkit.FieldToFieldDataType(Rec."Table ID", Rec."Field Type", Rec."Field ID"));
                                                                        Rec.VALIDATE("Field Length", QuickReportToolkit.FieldToFieldLength(Rec."Table ID", Rec."Field Type", Rec."Field ID"));
                                                                        UpdateCaption(TRUE);
                                                                        CLEAR(ObjectFieldToolkit);
                                                                      END;
                                                                    QuickReportHeader."Data From"::"NAV Query",
                                                                    QuickReportHeader."Data From"::"SQL Query":
                                                                      ERROR(eFieldIdNotAllowed, QuickReportHeader.FIELDCAPTION("Data From"), lDataFrom);
                                                                  END;
                                                                END
                                                                ELSE
                                                                BEGIN
                                                                  Rec."Field Name" := '';
                                                                  Rec.VALIDATE("Field Data Type", Rec."Field Data Type"::" ");
                                                                  Rec.VALIDATE("Field Length", 0);
                                                                END;

                                                                UpdateFlowField();
                                                              END;

                                                   OnLookup=BEGIN
                                                              FieldLookup();
                                                            END;

                                                   CaptionML=[ENU=Field ID;
                                                              ENG=Field ID] }
    { 7   ;   ;Field Name          ;Text50        ;OnValidate=VAR
                                                                lNavQueryColumnDefinition@1000000000 : Record 9062329;
                                                                lSqlQueryResultField@1000000001 : Record 9062387;
                                                                lDataFrom@1000000002 : Integer;
                                                                lFieldType@1000000003 : Option;
                                                                lFieldId@1000000004 : Integer;
                                                              BEGIN
                                                                Rec.TESTFIELD("Quick Report Code");
                                                                QuickReportHeader.GET(Rec."Quick Report Code");
                                                                QuickReportHeader.TESTFIELD("Data From");
                                                                lDataFrom := GetDataFrom();
                                                                CASE (lDataFrom) OF
                                                                  QuickReportHeader."Data From"::Table:
                                                                    BEGIN
                                                                      ObjectFieldToolkit.ValidateFieldNameAdv(Rec."Table ID", lFieldType, lFieldId, Rec."Field Name");
                                                                      IF (Rec."Field Type" <> lFieldType) THEN
                                                                        Rec.VALIDATE("Field Type", lFieldType);
                                                                      IF (Rec."Field ID" <> lFieldId) THEN
                                                                        Rec.VALIDATE("Field ID", lFieldId);
                                                                    END;
                                                                  QuickReportHeader."Data From"::"NAV Query":
                                                                    BEGIN
                                                                      NavQueryManagment.ValidateNavQueryColumn(QuickReportHeader."NAV Query ID", Rec."Field Name");
                                                                      IF (Rec."Field Name" <> '') THEN
                                                                      BEGIN
                                                                        lNavQueryColumnDefinition.RESET();
                                                                        lNavQueryColumnDefinition.SETRANGE("Query No.", QuickReportHeader."NAV Query ID");
                                                                        lNavQueryColumnDefinition.SETRANGE(Name, Rec."Field Name");
                                                                        lNavQueryColumnDefinition.FINDFIRST();
                                                                        Rec.VALIDATE("Field Data Type", QuickReportToolkit.NavQueryColumnTypeToFieldDataType(lNavQueryColumnDefinition."Data Type"));
                                                                        Rec.VALIDATE("Field Length", QuickReportToolkit.NavQueryColumnTypeToFieldLength(lNavQueryColumnDefinition."Data Type"));
                                                                      END
                                                                      ELSE
                                                                      BEGIN
                                                                        Rec.VALIDATE("Field Data Type", Rec."Field Data Type"::" ");
                                                                        Rec.VALIDATE("Field Length", 0);
                                                                      END;
                                                                    END;
                                                                  QuickReportHeader."Data From"::"SQL Query":
                                                                    BEGIN
                                                                      SqlIntegration.ValidateResultField(QuickReportHeader."SQL Query Code", Rec."Field Name");
                                                                      IF (Rec."Field Name" <> '') THEN
                                                                      BEGIN
                                                                        lSqlQueryResultField.RESET();
                                                                        lSqlQueryResultField.SETRANGE("Query Code", QuickReportHeader."SQL Query Code");
                                                                        lSqlQueryResultField.SETRANGE(Name, Rec."Field Name");
                                                                        lSqlQueryResultField.FINDFIRST();
                                                                        Rec.VALIDATE("Field Data Type", QuickReportToolkit.SqlQueryResultFieldTypeToFieldDataType(lSqlQueryResultField.Type));
                                                                        Rec.VALIDATE("Field Length", QuickReportToolkit.SqlQueryResultFieldTypeToFieldLength(lSqlQueryResultField.Type));
                                                                      END
                                                                      ELSE
                                                                      BEGIN
                                                                        Rec.VALIDATE("Field Data Type", Rec."Field Data Type"::" ");
                                                                        Rec.VALIDATE("Field Length", 0);
                                                                      END;
                                                                    END;
                                                                END;
                                                                UpdateCaption(FALSE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              FieldLookup();
                                                            END;

                                                   CaptionML=[ENU=Field Name;
                                                              ENG=Field Name] }
    { 8   ;   ;Quick Report Data Type;Option      ;OnValidate=BEGIN
                                                                IF (Rec."Quick Report Data Type" <> xRec."Quick Report Data Type") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Data Type Conversion", QuickReportToolkit.DataTypesToDataTypeConversion(Rec."Field Data Type", Rec."Quick Report Data Type"));
                                                                  CASE (Rec."Quick Report Data Type") OF
                                                                    Rec."Quick Report Data Type"::Code:
                                                                      Rec.VALIDATE("Quick Report Length", MAXSTRLEN(QuickReportData."Code Field 1"));
                                                                    Rec."Quick Report Data Type"::Text:
                                                                      Rec.VALIDATE("Quick Report Length", MAXSTRLEN(QuickReportData."Text Field 1"));
                                                                    ELSE
                                                                      Rec.VALIDATE("Quick Report Length", 0);
                                                                  END;
                                                                  IF (Rec."Quick Report Data Type" = Rec."Quick Report Data Type"::Decimal) THEN
                                                                    Rec.VALIDATE(Grouping, Rec.Grouping::Sum)
                                                                  ELSE
                                                                    Rec.VALIDATE(Grouping, Rec.Grouping::" ");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Quick Report Data Type;
                                                              ENG=Quick Report Data Type];
                                                   OptionCaptionML=[ENU=" ,,,Decimal,Text,Date,,DateTime,Code";
                                                                    ENG=" ,,,Decimal,Text,Date,,DateTime,Code"];
                                                   OptionString=[ ,,,Decimal,Text,Date,,DateTime,Code] }
    { 9   ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ENG=Blocked] }
    { 10  ;   ;Sequence            ;Integer       ;CaptionML=[ENU=Sequence;
                                                              ENG=Sequence] }
    { 11  ;   ;Grouping            ;Option        ;OnValidate=VAR
                                                                lQuickReportField@1000000000 : Record 9062698;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Grouping;
                                                              ENG=Grouping];
                                                   OptionCaptionML=[ENU=" ,Group By,Sum,Minimum,Maximum,Average,Count";
                                                                    ENG=" ,Group By,Sum,Minimum,Maximum,Average,Count"];
                                                   OptionString=[ ,Group By,Sum,Minimum,Maximum,Average,Count] }
    { 12  ;   ;Sorting             ;Integer       ;OnValidate=VAR
                                                                lQuickReportField@1000000000 : Record 9062698;
                                                                lQuickReportFieldToModify@1000000003 : Record 9062698;
                                                                lMaxSorting@1000000001 : Integer;
                                                                lSorting@1000000002 : Integer;
                                                                lSearching@1000000004 : Boolean;
                                                              BEGIN
                                                                IF (Rec.Sorting <> xRec.Sorting) THEN
                                                                  IF (Rec.Sorting > 0) THEN
                                                                  BEGIN
                                                                    lQuickReportField.RESET();
                                                                    lQuickReportField.SETRANGE("Quick Report Code", Rec."Quick Report Code");
                                                                    lQuickReportField.SETFILTER(ID, '<>%1', Rec.ID);
                                                                    lQuickReportField.SETRANGE(Sorting, Rec.Sorting);
                                                                    IF ( NOT (lQuickReportField.ISEMPTY)) THEN
                                                                    BEGIN
                                                                      lSearching := TRUE;
                                                                      lMaxSorting := Rec.Sorting;
                                                                      WHILE (lSearching) DO
                                                                      BEGIN
                                                                        lQuickReportField.SETRANGE(Sorting, lMaxSorting + 1);
                                                                        IF ( NOT (lQuickReportField.ISEMPTY)) THEN
                                                                          lMaxSorting += 1
                                                                        ELSE
                                                                          lSearching := FALSE;
                                                                      END;
                                                                      FOR lSorting := lMaxSorting DOWNTO Rec.Sorting DO
                                                                      BEGIN
                                                                        lQuickReportField.SETRANGE(Sorting, lSorting);
                                                                        IF (lQuickReportField.FINDSET()) THEN
                                                                        REPEAT
                                                                          lQuickReportFieldToModify := lQuickReportField;
                                                                          IF (lQuickReportFieldToModify.Sorting < 3) THEN
                                                                            lQuickReportFieldToModify.Sorting += 1
                                                                          ELSE
                                                                            lQuickReportFieldToModify.Sorting := 0;
                                                                          lQuickReportFieldToModify.MODIFY(TRUE);
                                                                        UNTIL (lQuickReportField.NEXT() = 0);
                                                                      END;
                                                                    END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Sorting;
                                                              ENG=Sorting];
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 13  ;   ;System Activity     ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=System Activity;
                                                              ENG=System Activity] }
    { 14  ;   ;Index               ;Integer       ;OnValidate=BEGIN
                                                                UpdateDataFieldIds();
                                                              END;

                                                   CaptionML=[ENU=Index;
                                                              ENG=Index] }
    { 15  ;   ;Last Execution Time [s];Decimal    ;CaptionML=[ENU=Last Execution Time [s]];
                                                              ENG=Last Execution Time [s]]];
                                                   DecimalPlaces=0:2;
                                                   BlankZero=Yes }
    { 16  ;   ;Field From          ;Option        ;InitValue=Data;
                                                   OnValidate=BEGIN
                                                                QuickReportHeader.GET(Rec."Quick Report Code");
                                                                CASE (Rec."Field From") OF
                                                                  Rec."Field From"::Data:
                                                                    Rec.VALIDATE("Table ID", QuickReportHeader."Table ID");
                                                                  Rec."Field From"::"Report Table":
                                                                    BEGIN
                                                                      QuickReportHeader.TESTFIELD("Report Table ID");
                                                                      Rec.VALIDATE("Table ID", QuickReportHeader."Report Table ID");
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Field From;
                                                              ENG=Field From];
                                                   OptionCaptionML=[ENU=,Data,Report Table;
                                                                    ENG=,Data,Report Table];
                                                   OptionString=,Data,Report Table }
    { 17  ;   ;Field Length        ;Integer       ;OnValidate=BEGIN
                                                                Rec.VALIDATE("Quick Report Data Type", QuickReportToolkit.FieldDataTypeToQuickReportDataType(Rec."Field Data Type", Rec."Field Length"));
                                                              END;

                                                   CaptionML=[ENU=Field Length;
                                                              ENG=Field Length] }
    { 18  ;   ;FlowField           ;Boolean       ;CaptionML=[ENU=FlowField;
                                                              ENG=FlowField] }
    { 19  ;   ;Data Field ID       ;Integer       ;CaptionML=[ENU=Data Field ID;
                                                              ENG=Data Field ID] }
    { 20  ;   ;Caption             ;Text50        ;CaptionML=[ENU=Caption;
                                                              ENG=Caption] }
    { 21  ;   ;Data Field ID (Compact);Integer    ;CaptionML=[ENU=Data Field ID (Compact);
                                                              ENG=Data Field ID (Compact)] }
    { 22  ;   ;Editable            ;Boolean       ;CaptionML=[ENU=Editable;
                                                              ENG=Editable] }
    { 23  ;   ;Field Data Type     ;Option        ;OnValidate=BEGIN
                                                                Rec.VALIDATE("Quick Report Data Type", QuickReportToolkit.FieldDataTypeToQuickReportDataType(Rec."Field Data Type", Rec."Field Length"));
                                                              END;

                                                   CaptionML=[ENU=Field Data Type;
                                                              ENG=Field Data Type];
                                                   OptionCaptionML=[ENU=" ,Boolean,Integer,BigInteger,Option,Decimal,Code,Text,Date,Time,DateTime,DateFormula,Duration,GUID,BLOB,RecordID,TableFilter,OemCode,OemText,Binary,,,,,,,,,,,Extended Text,Document,Image,Link,Dynamic Link";
                                                                    ENG=" ,Boolean,Integer,BigInteger,Option,Decimal,Code,Text,Date,Time,DateTime,DateFormula,Duration,GUID,BLOB,RecordID,TableFilter,OemCode,OemText,Binary,,,,,,,,,,,Extended Text,Document,Image,Link,Dynamic Link"];
                                                   OptionString=[ ,Boolean,Integer,BigInteger,Option,Decimal,Code,Text,Date,Time,DateTime,DateFormula,Duration,GUID,BLOB,RecordID,TableFilter,OemCode,OemText,Binary,,,,,,,,,,,Extended Text,Document,Image,Link,Dynamic Link] }
    { 25  ;   ;Field Filter ID     ;Integer       ;TableRelation=Criteria;
                                                   CaptionML=[ENU=Field Filter ID;
                                                              ENG=Field Filter ID] }
    { 26  ;   ;Field Filter Description;Text30    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Criteria.Description WHERE (ID=FIELD(Field Filter ID)));
                                                   CaptionML=[ENU=Field Filter Description;
                                                              ENG=Field Filter Description];
                                                   Editable=No }
    { 27  ;   ;Data Type Conversion;Option        ;CaptionML=[ENU=Field Data Type Conversion;
                                                              ENG=Field Data Type Conversion];
                                                   OptionCaptionML=[ENU=" ,Format,Evaluate To Decimal,Evaluate to Date,Evaluate to DateTime";
                                                                    ENG=" ,Format,Evaluate To Decimal,Evaluate to Date,Evaluate to DateTime"];
                                                   OptionString=[ ,Format,Evaluate To Decimal,Evaluate to Date,Evaluate to DateTime] }
    { 28  ;   ;Quick Report Length ;Integer       ;CaptionML=[ENU=Quick Report Length;
                                                              ENG=Quick Report Length] }
    { 50  ;   ;Pivot Type          ;Option        ;CaptionML=[ENU=Pivot Type;
                                                              ENG=Pivot Type];
                                                   OptionCaptionML=[ENU=" ,Pivot Col,Pivot Row,Pivot Data";
                                                                    ENG=" ,Pivot Col,Pivot Row,Pivot Data"];
                                                   OptionString=[ ,Pivot Col,Pivot Row,Pivot Data] }
    { 60  ;   ;Value Format Code   ;Code10        ;TableRelation="Value Format";
                                                   CaptionML=[ENU=Value Format Code;
                                                              ENG=Value Format Code] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
    { 1004;   ;Slicer Field        ;Boolean       ;CaptionML=[ENU=Slicer Field;
                                                              ENG=Slicer Field] }
  }
  KEYS
  {
    {    ;Quick Report Code,ID                    ;Clustered=Yes }
    {    ;Table ID,Field Type,Field ID             }
    {    ;Quick Report Code,Sequence,ID            }
    {    ;Quick Report Code,Sorting                }
    {    ;Quick Report Code,Index                  }
    {    ;Quick Report Code,Blocked,Sequence,ID    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      QuickReportHeader@1000000002 : Record 9062697;
      QuickReportData@1000000008 : Record 9062699;
      TableFieldBuffer@1000000007 : TEMPORARY Record 9062231;
      CriteriaManagement@1000000006 : Codeunit 9062462;
      EnhancedPermissionsMgt@1000000009 : Codeunit 9062277;
      NavQueryManagment@1000000004 : Codeunit 9062300;
      ObjectFieldToolkit@1000000003 : Codeunit 9062343;
      QuickReportToolkit@1000000001 : Codeunit 9062538;
      SqlIntegration@1000000005 : Codeunit 9062299;
      TnpToolkit@1000000000 : Codeunit 9062230;

    PROCEDURE UpdateTimestamp@1000000006();
    VAR
      lSystemActivity@1000000001 : Boolean;
    BEGIN
      //DOC NA2015.7 - Updating record timestamp

      IF (Rec.GETFILTER("System Activity") <> '') THEN
      BEGIN
        lSystemActivity := Rec.GETRANGEMIN("System Activity");
        IF (lSystemActivity) THEN
          EXIT;
      END;

      IF ( NOT (QuickReportHeader.GET(Rec."Quick Report Code"))) THEN
        EXIT;

      QuickReportHeader.UpdateTimestamp(TRUE);
    END;

    LOCAL PROCEDURE NewId@1000000000() : Integer;
    VAR
      lQuickReportField@1000000000 : Record 9062698;
    BEGIN
      //DOC NA2015.7 - Returning new ID
      //  <- The ID

      Rec.TESTFIELD("Quick Report Code");

      lQuickReportField.RESET();
      lQuickReportField.SETRANGE("Quick Report Code", Rec."Quick Report Code");
      IF (lQuickReportField.FINDLAST()) THEN
        EXIT(lQuickReportField.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE NewSequence@1000000001() : Integer;
    VAR
      lQuickReportField@1000000000 : Record 9062698;
    BEGIN
      //DOC NA2016.12 - Returning new sequence
      //  <- The sequence

      lQuickReportField.RESET();
      lQuickReportField.SETCURRENTKEY("Quick Report Code", Sequence);
      lQuickReportField.SETRANGE("Quick Report Code", Rec."Quick Report Code");
      IF (lQuickReportField.FINDLAST()) THEN
        EXIT(lQuickReportField.Sequence + 10)
      ELSE
        EXIT(10);
    END;

    PROCEDURE InitialiseRecord@1000000002(pOnInsert@1000000000 : Boolean);
    VAR
      lTableId@1000000001 : Integer;
    BEGIN
      //DOC NA2015.7 - Initialising the record
      //  -> pOnInsert: On insert flag

      IF (pOnInsert) THEN
        IF (Rec.ID = 0) THEN
          Rec.VALIDATE(ID, NewId());
      IF (Rec.Sequence = 0) THEN
        Rec.VALIDATE(Sequence, NewSequence());

      IF (QuickReportHeader.GET(Rec."Quick Report Code")) THEN
      BEGIN
        CASE (Rec."Field From") OF
          Rec."Field From"::Data:
            lTableId := QuickReportHeader."Table ID";
          Rec."Field From"::"Report Table":
            lTableId := QuickReportHeader."Report Table ID";
        END;
        IF (Rec."Table ID" <> lTableId) THEN
          Rec.VALIDATE("Table ID", lTableId);
      END;

      IF (Rec."Field Type" = Rec."Field Type"::" ") THEN
        Rec."Field Type" := Rec."Field Type"::Field;
    END;

    LOCAL PROCEDURE FieldLookup@1000000010();
    VAR
      lDataFrom@1000000000 : Integer;
      lFieldType@1000000001 : Option;
      lFieldId@1000000002 : Integer;
    BEGIN
      //DOC NA2015.7 - Performing a field lookup

      Rec.TESTFIELD("Quick Report Code");
      QuickReportHeader.GET(Rec."Quick Report Code");
      QuickReportHeader.TESTFIELD("Data From");

      lDataFrom := GetDataFrom();
      CASE (lDataFrom) OF
        QuickReportHeader."Data From"::Table:
          BEGIN
            lFieldId := Rec."Field ID";
            IF (ObjectFieldToolkit.FieldLookupAdv(Rec."Table ID", lFieldType, lFieldId)) THEN
            BEGIN
              IF (Rec."Field Type" <> lFieldType) THEN
                Rec.VALIDATE("Field Type", lFieldType);
              IF (Rec."Field ID" <> lFieldId) THEN
                Rec.VALIDATE("Field ID", lFieldId);
            END;
          END;
        QuickReportHeader."Data From"::"NAV Query":
          IF (NavQueryManagment.NavQueryColumnLookup(QuickReportHeader."NAV Query ID", Rec."Field Name")) THEN
            Rec.VALIDATE("Field Name");
        QuickReportHeader."Data From"::"SQL Query":
          IF (SqlIntegration.ResultFieldLookup(QuickReportHeader."SQL Query Code", Rec."Field Name")) THEN
            Rec.VALIDATE("Field Name");
      END;
    END;

    PROCEDURE GetStyle@1000000004() : Text;
    BEGIN
      //DOC NA2015.7 - Returning style of the record
      //  <- The style

      IF (Rec.Blocked) THEN
        EXIT('Subordinate')
      ELSE IF (Rec.Grouping = Rec.Grouping::"Group By") THEN
        EXIT('Strong')
      ELSE IF (Rec.Grouping <> Rec.Grouping::" ") THEN
        EXIT('StandardAccent');
    END;

    LOCAL PROCEDURE GroupByFieldsExist@1000000003() : Boolean;
    VAR
      lQuickReportField@1000000000 : Record 9062698;
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2015.7 - Returning if "group by" fields exist
      //  <- Result

      lQuickReportField.RESET();
      lQuickReportField.SETRANGE("Quick Report Code", Rec."Quick Report Code");
      lQuickReportField.SETFILTER(ID, '<>%1', Rec.ID);
      lQuickReportField.SETRANGE(Grouping, lQuickReportField.Grouping::"Group By");
      EXIT( NOT (lQuickReportField.ISEMPTY));
    END;

    LOCAL PROCEDURE AggregatedFieldsExist@1000000011() : Boolean;
    VAR
      lQuickReportField@1000000000 : Record 9062698;
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2015.7 - Returning if aggregated fields exist
      //  <- Result

      lQuickReportField.RESET();
      lQuickReportField.SETRANGE("Quick Report Code", Rec."Quick Report Code");
      lQuickReportField.SETFILTER(ID, '<>%1', Rec.ID);
      lQuickReportField.SETFILTER(Grouping, '>%1', lQuickReportField.Grouping::"Group By");
      EXIT( NOT (lQuickReportField.ISEMPTY));
    END;

    LOCAL PROCEDURE GroupAllNonNumberFields@1000000017();
    VAR
      lQuickReportField@1000000000 : Record 9062698;
    BEGIN
      //DOC NA2015.7 - Switching on "Group By" for all non-number fields

      lQuickReportField.RESET();
      lQuickReportField.SETRANGE("Quick Report Code", Rec."Quick Report Code");
      lQuickReportField.SETFILTER(ID, '<>%1', Rec.ID);
      lQuickReportField.SETFILTER("Quick Report Data Type", '<>%1', lQuickReportField."Quick Report Data Type"::Decimal);
      lQuickReportField.MODIFYALL(Grouping, lQuickReportField.Grouping::"Group By", TRUE);
    END;

    LOCAL PROCEDURE SumAllNumberFields@1000000013();
    VAR
      lQuickReportField@1000000000 : Record 9062698;
    BEGIN
      //DOC NA2015.7 - Switching on "Sum" for all number fields

      lQuickReportField.RESET();
      lQuickReportField.SETRANGE("Quick Report Code", Rec."Quick Report Code");
      lQuickReportField.SETFILTER(ID, '<>%1', Rec.ID);
      lQuickReportField.SETRANGE("Quick Report Data Type", lQuickReportField."Quick Report Data Type"::Decimal);
      lQuickReportField.SETRANGE(Grouping, lQuickReportField.Grouping::" ");
      lQuickReportField.MODIFYALL(Grouping, lQuickReportField.Grouping::Sum, TRUE);
    END;

    LOCAL PROCEDURE ClearAllNumberFieldsGrouping@1000000005();
    VAR
      lQuickReportField@1000000000 : Record 9062698;
    BEGIN
      //DOC NA2015.7 - Clearing all number fields grouping

      lQuickReportField.RESET();
      lQuickReportField.SETRANGE("Quick Report Code", Rec."Quick Report Code");
      lQuickReportField.SETFILTER(ID, '<>%1', Rec.ID);
      lQuickReportField.SETRANGE("Quick Report Data Type", lQuickReportField."Quick Report Data Type"::Decimal);
      lQuickReportField.MODIFYALL(Grouping, lQuickReportField.Grouping::" ", TRUE);
    END;

    PROCEDURE UpdateFlowField@1000000008();
    VAR
      lField@1000000000 : Record 2000000041;
    BEGIN
      //DOC NA2015.7 - Updating flow field (flag)

      Rec.FlowField := FALSE;
      IF ((Rec."Table ID" <> 0) AND (Rec."Field ID" <> 0) AND (Rec."Field Type" = Rec."Field Type"::Field)) THEN
        IF (lField.GET(Rec."Table ID", Rec."Field ID")) THEN
           Rec.FlowField := (lField.Class = lField.Class::FlowField);
    END;

    LOCAL PROCEDURE UpdateDataFieldIds@1000000009();
    BEGIN
      //DOC NA2016.14 - Updating target field ID

      Rec.VALIDATE("Data Field ID", QuickReportToolkit.FieldIndexAndDataTypeToDataFieldId(Rec.Index, Rec."Quick Report Data Type"));
      Rec.VALIDATE("Data Field ID (Compact)", QuickReportToolkit.FieldIndexAndDataTypeToDataFieldIdCompact(Rec.Index, Rec."Quick Report Data Type"));
    END;

    LOCAL PROCEDURE UpdateCaption@1000000012(pForce@1000000000 : Boolean);
    VAR
      lUpdate@1000000001 : Boolean;
    BEGIN
      //DOC NA2015.7 - Updating caption
      //  -> pForce: Flag to force

      IF (pForce) THEN
        lUpdate := TRUE
      ELSE
        lUpdate := (Rec."Field Name" <> xRec."Field Name");

      IF (lUpdate) THEN
        IF ((Rec.Caption = '') OR (Rec.Caption = xRec."Field Name")) THEN
          Rec.VALIDATE(Caption, Rec."Field Name");
    END;

    PROCEDURE EditFieldFilter@1000000016();
    VAR
      lFieldFilterDescription@1000000000 : Text;
    BEGIN
      //DOC NA2016.12 - Editing field filter

      Rec.TESTFIELD("Table ID");
      Rec.TESTFIELD("Field Type", Rec."Field Type"::Field);
      Rec.TESTFIELD("Field ID");
      Rec.TESTFIELD(FlowField);

      Rec.CALCFIELDS("Field Filter Description");
      lFieldFilterDescription := Rec."Field Filter Description";

      CLEAR(CriteriaManagement);
      CriteriaManagement.SetFieldClass(TableFieldBuffer."Field Class"::FlowFilter);
      CriteriaManagement.EditCriteriaAttachedAdvanced(Rec."Field Filter ID", Rec."Table ID", 0, DATABASE::"Quick Report Field",
        Rec.GETPOSITION(FALSE), Rec.FIELDNO("Field Filter ID"), FALSE);
      CLEAR(CriteriaManagement);
      Rec.CALCFIELDS("Field Filter Description");

      IF (Rec."Field Filter Description" <> lFieldFilterDescription) THEN
        UpdateTimestamp();
    END;

    LOCAL PROCEDURE GetDataFrom@1000000014() : Integer;
    BEGIN
      //DOC NA2016.12 - Returning "Data From"
      //  <- The data from

      IF (Rec."Field From" = Rec."Field From"::"Report Table") THEN
        EXIT(QuickReportHeader."Data From"::Table)
      ELSE
        EXIT(QuickReportHeader."Data From");
    END;

    LOCAL PROCEDURE CheckModifyPermission@1000000007();
    BEGIN
      //DOC NA2016.15 - Checking modify permission

      IF ( NOT (QuickReportHeader.GET(Rec."Quick Report Code"))) THEN
        EXIT;
      IF (QuickReportHeader."Temporary") THEN
        EXIT;
      EnhancedPermissionsMgt.CheckQuickReportModifyPermission(QuickReportHeader, USERID());
    END;

    BEGIN
    {
      //DOC NA2015.7  JH 15/05/2015 - Created
      //DOC NA2015.9  JH 10/08/2015 - "Target Text Field ID" + logic added
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.10 AZ 21/10/2015 - "Alt. Target Field ID" and "Format Alt. Target" fields added
      //DOC NA2016.12 JH 08/12/2015 - Timestamp fixes
      //DOC NA2016.12 JH 21/01/2016 - Field filter added
      //DOC NA2016.12 JH 28/01/2016 - Amendments to field lookup
      //DOC NA2016.14 JH 21/02/2016 - New data types
      //DOC NA2016.15 AZ 03/03/2016 - "Value Format Code" field added
      //DOC NA2016.15 JH 05/05/2016 - Enhanced permissions
    }
    END.
  }
}

