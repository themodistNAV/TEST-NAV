OBJECT Codeunit 5820 Close Inventory Period
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00,NAVGB7.00;
  }
  PROPERTIES
  {
    TableNo=5814;
    Permissions=TableData 5814=imd,
                TableData 5815=imd;
    OnRun=BEGIN
            IF NOT HideDialog THEN
              IF NOT ReOpen THEN BEGIN
                IF NOT CONFIRM(
                     Text002,
                     FALSE,
                     "Ending Date")
                THEN
                  EXIT
              END ELSE
                IF NOT CONFIRM(Text006,FALSE,TABLECAPTION,"Ending Date") THEN
                  EXIT;

            TESTFIELD(Closed,ReOpen);
            IF NOT ReOpen THEN BEGIN
              TESTFIELD("Ending Date");
              CheckCostIsAdjusted("Ending Date");
              CheckOpenOutboundEntryExist("Ending Date");
            END ELSE
              IF NOT HideDialog AND AccPeriodIsClosed("Ending Date") THEN
                IF NOT CONFIRM(Text008,FALSE,TABLECAPTION,"Ending Date") THEN
                  EXIT;

            UpdateInvtPeriod(Rec);
            CreateInvtPeriodEntry(Rec);

            IF NOT HideDialog THEN
              IF NOT ReOpen THEN BEGIN
                MESSAGE(Text005,TABLECAPTION,"Ending Date")
              END ELSE
                MESSAGE(Text007,"Ending Date");
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The Inventory Period cannot be closed because there is at least one item with unadjusted entries in the current period.\\Run the Close Inventory Period - Test report to identify item ledger entries for the affected items.;ENG=The Inventory Period cannot be closed because there is at least one item with unadjusted entries in the current period.\\Run the Close Inventory Period - Test report to identify item ledger entries for the affected items.';
      Text001@1001 : TextConst 'ENU=The Inventory Period cannot be closed because there is negative inventory for one or more items.\\Run the Close Inventory Period - Test report to identify item ledger entries for the affected items.;ENG=The Inventory Period cannot be closed because there is negative inventory for one or more items.\\Run the Close Inventory Period - Test report to identify item ledger entries for the affected items.';
      Text002@1007 : TextConst 'ENU=This function closes the inventory up to %1. Once it is closed, you cannot post in the period until it is re-opened.\\Make sure that all your inventory is posted to G/L.\\Do you want to close the inventory period?;ENG=This function closes the inventory up to %1. Once it is closed, you cannot post in the period until it is re-opened.\\Make sure that all your inventory is posted to G/L.\\Do you want to close the inventory period?';
      Text005@1004 : TextConst 'ENU=The %1 has been closed on %2.;ENG=The %1 has been closed on %2.';
      Text006@1005 : TextConst 'ENU=Do you want to reopen the %1 that ends %2?;ENG=Do you want to reopen the %1 that ends %2?';
      Text007@1006 : TextConst 'ENU=All inventory periods from %1 have been reopened.;ENG=All inventory periods from %1 have been reopened.';
      ReOpen@1002 : Boolean;
      HideDialog@1008 : Boolean;
      Text008@1010 : TextConst 'ENU=The accounting period is already closed. Are you sure you want to reopen the %1 that ends %2?;ENG=The accounting period is already closed. Are you sure you want to reopen the %1 that ends %2?';
      Text010@1009 : TextConst 'ENU=The Inventory Period cannot be closed because there is at least one %1 Order in the current period that has not been adjusted.\\Run the Close Inventory Period - Test report to identify the affected orders.;ENG=The Inventory Period cannot be closed because there is at least one %1 Order in the current period that has not been adjusted.\\Run the Close Inventory Period - Test report to identify the affected orders.';

    LOCAL PROCEDURE CheckCostIsAdjusted@4(EndingDate@1003 : Date);
    VAR
      AvgCostAdjmtEntryPoint@1004 : Record 5804;
      InvtAdjmtEntryOrder@1000 : Record 5896;
      ValueEntry@1005 : Record 5802;
    BEGIN
      AvgCostAdjmtEntryPoint.RESET;
      AvgCostAdjmtEntryPoint.SETCURRENTKEY("Item No.","Cost Is Adjusted","Valuation Date");
      AvgCostAdjmtEntryPoint.SETRANGE("Cost Is Adjusted",FALSE);
      AvgCostAdjmtEntryPoint.SETRANGE("Valuation Date",0D,EndingDate);
      IF NOT AvgCostAdjmtEntryPoint.ISEMPTY THEN
        ERROR(Text000);

      InvtAdjmtEntryOrder.SETCURRENTKEY("Cost is Adjusted");
      InvtAdjmtEntryOrder.SETRANGE("Cost is Adjusted",FALSE);
      InvtAdjmtEntryOrder.SETRANGE("Is Finished",TRUE);
      IF InvtAdjmtEntryOrder.FINDSET THEN
        REPEAT
          ValueEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.");
          ValueEntry.SETRANGE("Order Type",InvtAdjmtEntryOrder."Order Type");
          ValueEntry.SETRANGE("Order No.",InvtAdjmtEntryOrder."Order No.");
          ValueEntry.SETRANGE("Order Line No.",InvtAdjmtEntryOrder."Order Line No.");
          ValueEntry.SETFILTER("Item Ledger Entry Type",'%1|%2',
            ValueEntry."Item Ledger Entry Type"::Output,ValueEntry."Item Ledger Entry Type"::"Assembly Output");
          ValueEntry.SETRANGE("Valuation Date",0D,EndingDate);
          IF NOT ValueEntry.ISEMPTY THEN
            ERROR(Text010,InvtAdjmtEntryOrder."Order Type");
        UNTIL InvtAdjmtEntryOrder.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckOpenOutboundEntryExist@5(EndingDate@1001 : Date);
    VAR
      ItemLedgEntry@1000 : Record 32;
    BEGIN
      ItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date");
      ItemLedgEntry.SETRANGE(Open,TRUE);
      ItemLedgEntry.SETRANGE(Positive,FALSE);
      ItemLedgEntry.SETRANGE("Posting Date",0D,EndingDate);
      IF NOT ItemLedgEntry.ISEMPTY THEN
        ERROR(Text001);
    END;

    LOCAL PROCEDURE AccPeriodIsClosed@2(StartDate@1001 : Date) : Boolean;
    VAR
      AccPeriod@1000 : Record 10560;
    BEGIN
      AccPeriod.SETCURRENTKEY(Closed);
      AccPeriod.SETRANGE(Closed,TRUE);
      AccPeriod.SETFILTER("Period Start",'>=%1',StartDate);
      EXIT(NOT AccPeriod.ISEMPTY);
    END;

    LOCAL PROCEDURE UpdateInvtPeriod@3(VAR TheInvtPeriod@1002 : Record 5814);
    VAR
      InvtPeriod2@1000 : Record 5814;
      InvtPeriod3@1001 : Record 5814;
    BEGIN
      WITH TheInvtPeriod DO BEGIN
        InvtPeriod2.SETRANGE(Closed,ReOpen);
        IF ReOpen THEN
          InvtPeriod2.SETFILTER("Ending Date",'>%1',"Ending Date")
        ELSE
          InvtPeriod2.SETFILTER("Ending Date",'<%1',"Ending Date");
        IF InvtPeriod2.FINDSET(TRUE,TRUE) THEN
          REPEAT
            InvtPeriod3 := InvtPeriod2;
            InvtPeriod3.Closed := NOT ReOpen;
            InvtPeriod3.MODIFY;
            CreateInvtPeriodEntry(InvtPeriod3);
          UNTIL InvtPeriod2.NEXT = 0;

        Closed := NOT ReOpen;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateInvtPeriodEntry@11(InvtPeriod@1000 : Record 5814);
    VAR
      InvtPeriodEntry@1001 : Record 5815;
      ItemRegister@1003 : Record 46;
      EntryNo@1002 : Integer;
    BEGIN
      WITH InvtPeriod DO BEGIN
        InvtPeriodEntry.SETRANGE("Ending Date","Ending Date");
        IF InvtPeriodEntry.FINDLAST THEN
          EntryNo := InvtPeriodEntry."Entry No." + 1
        ELSE
          EntryNo := 1;

        InvtPeriodEntry.INIT;
        InvtPeriodEntry."Entry No." := EntryNo;
        InvtPeriodEntry."Ending Date" := "Ending Date";
        InvtPeriodEntry."User ID" := USERID;
        InvtPeriodEntry."Creation Date" := WORKDATE;
        InvtPeriodEntry."Creation Time" := TIME;
        IF Closed THEN BEGIN
          InvtPeriodEntry."Entry Type" := InvtPeriodEntry."Entry Type"::Close;
          IF ItemRegister.FINDLAST THEN
            InvtPeriodEntry."Closing Item Register No." := ItemRegister."No.";
        END ELSE
          InvtPeriodEntry."Entry Type" := InvtPeriodEntry."Entry Type"::"Re-open";

        InvtPeriodEntry.INSERT;
      END;
    END;

    PROCEDURE SetReOpen@13(NewReOpen@1000 : Boolean);
    BEGIN
      ReOpen := NewReOpen;
    END;

    PROCEDURE SetHideDialog@6(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    BEGIN
    END.
  }
}

