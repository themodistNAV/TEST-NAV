OBJECT Table 9062307 Incident Link
{
  OBJECT-PROPERTIES
  {
    Date=27/12/15;
    Time=[ 5:35:30 PM];
    Version List=NH2016.12;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Incident No.");
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    CaptionML=[ENU=Incident Link;
               ENG=Incident Link];
  }
  FIELDS
  {
    { 1   ;   ;Incident No.        ;Code20        ;TableRelation=Incident;
                                                   CaptionML=[ENU=Incident No.;
                                                              ENG=Incident No.] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
    { 20  ;   ;Incident Link Type Code;Code20     ;TableRelation="Incident Link Type";
                                                   OnValidate=BEGIN
                                                                IF (IncidentLinkTypeCodeValidation) THEN
                                                                  EXIT;
                                                                IncidentLinkTypeCodeValidation := TRUE;
                                                                IF (Rec."Incident Link Type Code" <> xRec."Incident Link Type Code") THEN
                                                                BEGIN
                                                                  IF (Rec."Incident Link Type Code" <> '') THEN
                                                                    IF ( NOT (IncidentLinkType.GET(Rec."Incident Link Type Code"))) THEN
                                                                      CLEAR(IncidentLinkType);
                                                                  Rec.VALIDATE("Table ID", IncidentLinkType."Table ID");
                                                                  Rec.VALIDATE("Record Position", '');
                                                                  Rec.VALIDATE("Record Description", '');
                                                                END;
                                                                IncidentLinkTypeCodeValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Incident Link Type Code;
                                                              ENG=Incident Link Type Code] }
    { 30  ;   ;Table ID            ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (TableIdValidation) THEN
                                                                  EXIT;
                                                                TableIdValidation := TRUE;
                                                                IF (Rec."Table ID" <> xRec."Table ID") THEN
                                                                BEGIN
                                                                  IF (Rec."Incident Link Type Code" <> '') THEN
                                                                  BEGIN
                                                                    IncidentLinkType.GET(Rec."Incident Link Type Code");
                                                                    IF (IncidentLinkType."Table ID" <> Rec."Table ID") THEN
                                                                      Rec.VALIDATE("Incident Link Type Code", '');
                                                                  END;
                                                                  Rec.VALIDATE("Record Position", '');
                                                                  Rec.VALIDATE("Record Description", '');
                                                                END;
                                                                Rec.CALCFIELDS("Table Caption");
                                                                UpdateRecordDescription();
                                                                TableIdValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Table ID;
                                                              ENG=Table ID] }
    { 31  ;   ;Table Caption       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Table),
                                                                                                                Object ID=FIELD(Table ID)));
                                                   CaptionML=[ENU=Table Caption;
                                                              ENG=Table Caption];
                                                   Editable=No }
    { 40  ;   ;Record Position     ;Text250       ;OnValidate=BEGIN
                                                                UpdateRecordDescription();
                                                              END;

                                                   CaptionML=[ENU=Record Position;
                                                              ENG=Record Position] }
    { 41  ;   ;Record Description  ;Text250       ;CaptionML=[ENU=Record Description;
                                                              ENG=Record Description] }
    { 50  ;   ;Source              ;Option        ;CaptionML=[ENU=Source;
                                                              ENG=Source];
                                                   OptionCaptionML=[ENU=" ,Related-to,New Document";
                                                                    ENG=" ,Related-to,New Document"];
                                                   OptionString=[ ,Related-to,New Document] }
    { 60  ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Incident No.,Line No.                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=Cannot create Incident/Document Link as Incident %1 does not exist;ENG=Cannot create Incident/Document Link as Incident %1 does not exist';
      Text002@1000000001 : TextConst 'ENU=Cannot open Document Link as Document Type %1 does not exist;ENG=Cannot open Document Link as Document Type %1 does not exist';
      IncidentLinkType@1000000004 : Record 9062308;
      IncidentToolkit@1000000007 : Codeunit 9062654;
      RunWithRecordRef@1000000006 : Codeunit 9062239;
      TnpToolkit@1000000003 : Codeunit 9062230;
      IncidentLinkTypeCodeValidation@1000000002 : Boolean;
      TableIdValidation@1000000005 : Boolean;

    PROCEDURE NewLineNo@1000000001() : Integer;
    VAR
      lIncidentLink@1000000000 : Record 9062307;
    BEGIN
      //DOC NH2016.11 - Returning new line no.
      //  <- The line no.

      lIncidentLink.RESET();
      lIncidentLink.SETRANGE("Incident No.", Rec."Incident No.");
      IF (lIncidentLink.FINDLAST()) THEN
        EXIT(lIncidentLink."Line No." + 10000)
      ELSE
        EXIT(10000);
    END;

    PROCEDURE ChooseRecord@1000000010(pModify@1000000001 : Boolean) : Boolean;
    VAR
      lAllObjWithCaption@1000000000 : Record 2000000058;
      lCriteriaManagement@1000000004 : Codeunit 9062462;
      lRecordRef@1000000002 : RecordRef;
    BEGIN
      //DOC NH2016.11 - Choosing record
      //  -> pModify: Modify flag
      //  <- TRUE = Record chosen, FALSE = Cancelled

      IF (Rec."Table ID" = 0) THEN
      BEGIN
        lAllObjWithCaption.RESET();
        lAllObjWithCaption.FILTERGROUP(2);
        lAllObjWithCaption.SETRANGE("Object Type", lAllObjWithCaption."Object Type"::Table);
        lAllObjWithCaption.FILTERGROUP(0);
        IF (PAGE.RUNMODAL(PAGE::Objects, lAllObjWithCaption) <> ACTION::LookupOK) THEN
          EXIT(FALSE);
        Rec.VALIDATE("Table ID", lAllObjWithCaption."Object ID");
      END;

      lRecordRef.OPEN(Rec."Table ID");
      IF (Rec."Incident Link Type Code" <> '') THEN
      BEGIN
        IncidentLinkType.GET(Rec."Incident Link Type Code");
        IncidentLinkType.TESTFIELD("Table ID", Rec."Table ID");
        IF (IncidentLinkType."Table Criteria ID" <> 0) THEN
          lCriteriaManagement.ApplyCriteriaToRecRef(IncidentLinkType."Table Criteria ID", lRecordRef);
      END;
      IF (Rec."Record Position" <> '') THEN
        lRecordRef.SETPOSITION(Rec."Record Position");
      IF (RunWithRecordRef.RunListPage(lRecordRef, TRUE)) THEN
        Rec.VALIDATE("Record Position", lRecordRef.GETPOSITION(TRUE));

      IF (pModify) THEN
        Rec.MODIFY(TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE OpenRecord@1000000000();
    VAR
      eRecordInformationIncomplete@1000000000 : TextConst 'ENU=Record information is incomplete - table and record must be selected.;ENG=Record information is incomplete - table and record must be selected.';
      lRecordRef@1000000001 : RecordRef;
    BEGIN
      //DOC NH2016.11 - Opening record

      IF ((Rec."Table ID" = 0) OR (Rec."Record Position" = '')) THEN
        ERROR(eRecordInformationIncomplete);

      lRecordRef.OPEN(Rec."Table ID");
      lRecordRef.SETPOSITION(Rec."Record Position");
      RunWithRecordRef.RunCardPage(lRecordRef, FALSE);
      lRecordRef.CLOSE();
    END;

    LOCAL PROCEDURE UpdateRecordDescription@1000000002();
    BEGIN
      //DOC NH2016.11 - Updating record description

      IF ((Rec."Table ID" <> 0) AND (Rec."Record Position" <> '')) THEN
        Rec.VALIDATE("Record Description", IncidentToolkit.GetRecordDescription(Rec."Table ID", Rec."Record Position"))
      ELSE
        Rec.VALIDATE("Record Description", '');
    END;

    BEGIN
    {
      //DOC NH2016.11 JH 12/11/2015 - Redesigned for 2016
      //DOC NH2016.12 JH 27/12/2015 - Criteria references changed
    }
    END.
  }
}

