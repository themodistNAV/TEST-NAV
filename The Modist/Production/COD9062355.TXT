OBJECT Codeunit 9062355 Panel Property Management
{
  OBJECT-PROPERTIES
  {
    Date=28/08/15;
    Time=10:16:06 AM;
    Version List=NA2016.3;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      mTilePanelProperty@1000000001 : Record 9062433;
      mTnpToolkit@1000000000 : Codeunit 9062230;

    PROCEDURE PropertiesInformation@1000000022(pProperties@1000000003 : Integer) : Text[250];
    VAR
      eZero@1000000002 : TextConst 'ENU=No Properties;ENG=No Properties';
      eOne@1000000001 : TextConst 'ENU=1 Property;ENG=1 Property';
      eMany@1000000000 : TextConst 'ENU=%1 Properties;ENG=%1 Properties';
    BEGIN
      //DOC NA2015.1 - Returning properties information
      //  -> pProperties: Properties (number of)
      //  <- The information

      EXIT(mTnpToolkit.IntegerInformation(pProperties, eZero, eOne, eMany));
    END;

    PROCEDURE ShowProperties@1000000012(pParentTableId@1000000000 : Integer;pParentCode@1000000001 : Code[20];pParentId@1000000002 : Integer;pParentId2@1000000003 : Integer);
    BEGIN
      //DOC NA2015.1 - Showing properties
      //  -> pParentTableId: Parent table ID
      //  -> pParentCode: Parent code
      //  -> pParentId: Parent ID
      //  -> pParentId2: Parent ID 2

      mTilePanelProperty.RESET();
      mTilePanelProperty.FILTERGROUP(2);
      mTilePanelProperty.SETRANGE("Parent Table ID", pParentTableId);
      mTilePanelProperty.SETRANGE("Parent Code", pParentCode);
      mTilePanelProperty.SETRANGE("Parent ID", pParentId);
      mTilePanelProperty.SETRANGE("Parent ID 2", pParentId2);
      mTilePanelProperty.FILTERGROUP(0);

      PAGE.RUN(0, mTilePanelProperty);
    END;

    PROCEDURE ShowProperty@1000000009(pParentTableId@1000000005 : Integer;pParentCode@1000000004 : Code[20];pParentId@1000000003 : Integer;pParentId2@1000000002 : Integer;pPropertyTableId@1000000007 : Integer;pPropertyId@1000000000 : Integer;pCreateIfNotFound@1000000006 : Boolean);
    BEGIN
      //DOC NA2015.1 - Showing property with given ID
      //  -> pParentTableId: Parent table ID
      //  -> pParentCode: Parent code (panel code)
      //  -> pParentId: Parent ID (panel control ID)
      //  -> pParentId2: Parent ID 2 (panel tile group ID / panel tile ID / panel data ID depending on parent table ID)
      //  -> pPropertyTableId: Property table ID
      //  -> pPropertyId: Property ID
      //  -> pCreateIfNotFound: Create if not found flag

      mTilePanelProperty.RESET();
      mTilePanelProperty.FILTERGROUP(2);
      mTilePanelProperty.SETRANGE("Parent Table ID", pParentTableId);
      mTilePanelProperty.SETRANGE("Parent Code", pParentCode);
      mTilePanelProperty.SETRANGE("Parent ID", pParentId);
      mTilePanelProperty.SETRANGE("Parent ID 2", pParentId2);
      mTilePanelProperty.SETRANGE("Property Table ID", pPropertyTableId);
      mTilePanelProperty.FILTERGROUP(0);
      mTilePanelProperty.SETRANGE("Property ID", pPropertyId);
      IF (( NOT (mTilePanelProperty.FINDFIRST())) AND (pCreateIfNotFound)) THEN
      BEGIN
        mTilePanelProperty.INIT();
        mTilePanelProperty.VALIDATE("Parent Table ID", pParentTableId);
        mTilePanelProperty.VALIDATE("Parent Code", pParentCode);
        mTilePanelProperty.VALIDATE("Parent ID", pParentId);
        mTilePanelProperty.VALIDATE("Parent ID 2", pParentId2);
        mTilePanelProperty.VALIDATE("Property Table ID", pPropertyTableId);
        mTilePanelProperty.VALIDATE("Property ID", pPropertyId);
        mTilePanelProperty.INSERT(TRUE);
        COMMIT;
      END;
      IF (mTilePanelProperty.FINDFIRST()) THEN
        PAGE.RUNMODAL(PAGE::"Panel Property Card", mTilePanelProperty);
    END;

    PROCEDURE CopyPropertyValues@1000000001(pToPanelProperty@1000000000 : Record 9062433;pInteraction@1000000006 : Boolean) : Boolean;
    VAR
      lFromPanelProperty@1000000001 : Record 9062433;
      lFromPanelPropertyValue@1000000004 : Record 9062444;
      lToPanelPropertyValue@1000000005 : Record 9062444;
      lResult@1000000002 : Boolean;
      eCantCopyValuesToThemselves@1000000003 : TextConst 'ENU="Can''t copy panel values to themselves; please select another panel to copy values from.";ENG="Can''t copy panel values to themselves; please select another panel to copy values from."';
      lConfirmed@1000000007 : Boolean;
      eNoValues@1000000009 : TextConst 'ENU=The property selected by you doesn''t have any values defined.;ENG=The property selected by you doesn''t have any values defined.';
      eConfirmation@1000000008 : TextConst 'ENU=Existing values will be deleted. Are you sure?;ENG=Existing values will be deleted. Are you sure?';
      lFromBlob@1000000010 : Boolean;
      lToBlob@1000000011 : Boolean;
    BEGIN
      //DOC NA2015.3 - Copying property values
      //  -> pToPanelProperty: Target panel property
      //  -> pInteraction: TRUE = With user interaction, FALSE = silent
      //  <- TRUE = Copied, FALSE = Cancelled

      pInteraction := ((pInteraction) AND (GUIALLOWED));

      lResult := FALSE;

      lFromPanelProperty.RESET();
      lFromPanelProperty.FILTERGROUP(2);
      lFromPanelProperty.SETRANGE("Parent Table ID", pToPanelProperty."Parent Table ID");
      lFromPanelProperty.SETRANGE("Property Table ID", pToPanelProperty."Property Table ID");
      lFromPanelProperty.FILTERGROUP(0);
      lFromPanelProperty.SETRANGE("Parent Code", pToPanelProperty."Parent Code");
      lFromPanelProperty.SETRANGE("Property ID", pToPanelProperty."Property ID");
      IF (PAGE.RUNMODAL(0, lFromPanelProperty) = ACTION::LookupOK) THEN
      BEGIN
        IF ((lFromPanelProperty."Parent Table ID" = pToPanelProperty."Parent Table ID") AND
            (lFromPanelProperty."Parent Code" = pToPanelProperty."Parent Code") AND
            (lFromPanelProperty."Parent ID" = pToPanelProperty."Parent ID") AND
            (lFromPanelProperty."Parent ID 2" = pToPanelProperty."Parent ID 2") AND
            (lFromPanelProperty.ID = pToPanelProperty.ID)) THEN
          ERROR(eCantCopyValuesToThemselves);

        FilterPropertyValuesForProperty(lFromPanelProperty, lFromPanelPropertyValue);
        IF (lFromPanelPropertyValue.ISEMPTY) THEN
          ERROR(eNoValues);

        FilterPropertyValuesForProperty(pToPanelProperty, lToPanelPropertyValue);
        IF ( NOT (lToPanelPropertyValue.ISEMPTY)) THEN
        BEGIN
          IF (pInteraction) THEN
            lConfirmed := CONFIRM(eConfirmation)
          ELSE
            lConfirmed := TRUE;
          IF ( NOT (lConfirmed)) THEN
            EXIT(lResult);
          lToPanelPropertyValue.DELETEALL(TRUE);
        END;

        lFromBlob := lFromPanelProperty.IsBlob();
        lToBlob := pToPanelProperty.IsBlob();

        FilterPropertyValuesForProperty(lFromPanelProperty, lFromPanelPropertyValue);
        IF (lFromPanelPropertyValue.FINDSET()) THEN
        REPEAT
          CLEAR(lToPanelPropertyValue);
          lToPanelPropertyValue.INIT();
          lToPanelPropertyValue.VALIDATE("Parent Table ID", pToPanelProperty."Parent Table ID");
          lToPanelPropertyValue.VALIDATE("Parent Code", pToPanelProperty."Parent Code");
          lToPanelPropertyValue.VALIDATE("Parent ID", pToPanelProperty."Parent ID");
          lToPanelPropertyValue.VALIDATE("Parent ID 2", pToPanelProperty."Parent ID 2");
          lToPanelPropertyValue.VALIDATE("Panel Property ID", pToPanelProperty.ID);
          lToPanelPropertyValue.VALIDATE(Sequence, lFromPanelPropertyValue.Sequence);
          lToPanelPropertyValue.VALIDATE("Property Value", lFromPanelPropertyValue."Property Value");
          IF ((lFromBlob) AND (lToBlob)) THEN
          BEGIN
            lFromPanelPropertyValue.CALCFIELDS(Image);
            lToPanelPropertyValue.VALIDATE(Image, lFromPanelPropertyValue.Image);
          END
          ELSE IF (( NOT (lFromBlob)) AND ( NOT (lToBlob))) THEN
            lToPanelPropertyValue.VALIDATE(Value, lFromPanelPropertyValue.Value);
          lToPanelPropertyValue.INSERT(TRUE);
        UNTIL (lFromPanelPropertyValue.NEXT() = 0);

        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE FilterPropertyValuesForProperty@1000000013(pPanelProperty@1000000000 : Record 9062433;VAR pPanelPropertyValue@1000000001 : Record 9062444);
    BEGIN
      //DOC NA2015.3 - Filtering filter property values for given property
      //  -> pPanelProperty: The property record
      //  <> pPanelPropertyValue: Panel property value recordset to filter

      pPanelPropertyValue.RESET();
      pPanelPropertyValue.SETRANGE("Parent Table ID", pPanelProperty."Parent Table ID");
      pPanelPropertyValue.SETRANGE("Parent Code", pPanelProperty."Parent Code");
      pPanelPropertyValue.SETRANGE("Parent ID", pPanelProperty."Parent ID");
      pPanelPropertyValue.SETRANGE("Parent ID 2", pPanelProperty."Parent ID 2");
      pPanelPropertyValue.SETRANGE("Panel Property ID", pPanelProperty.ID);
    END;

    BEGIN
    {
      //DOC NA2015.1 JH 01/12/2013 - Created
      //DOC NA2015.1 JH 25/04/2014 - Tile panels 3
      //DOC NA2015.3 JH 15/08/2014 - Property values copying added
      //DOC NA2016.3 JH 27/08/2015 - Upgraded to 2016
      //DOC NA2016.3 JH 28/08/2015 - Upgraded to 2016
    }
    END.
  }
}

