OBJECT Codeunit 9062312 Planning Board Filter Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=12/01/16;
    Time=[ 4:53:20 PM];
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PlanningBoardTable@1000000000 : Record 9062338;
      PlanningBoardTableField@9062230 : Record 9062340;
      CriteriaManagement@9062232 : Codeunit 9062462;
      ObjectFieldToolkit@1000000001 : Codeunit 9062343;
      RunWithRecordRef@9062231 : Codeunit 9062239;
      SequenceToolkit@9062234 : Codeunit 9062519;

    LOCAL PROCEDURE "--- Filters ---"@1000000001();
    BEGIN
    END;

    PROCEDURE AddFilters@1000000002(pPlanningBoardTableField@1000000000 : Record 9062340) : Boolean;
    VAR
      lPlanningBoardTable@1000000001 : Record 9062340;
      lTableFieldBuffer@1000000003 : TEMPORARY Record 9062231;
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2016.12 - Adding filters for selected fields
      //  -> pPlanningBoardTableField: The current field (as a reference)
      //  <- TRUE = Filters added, FALSE = Cancelled

      lResult := FALSE;

      pPlanningBoardTableField.TESTFIELD("Planning Board Code");
      pPlanningBoardTableField.TESTFIELD("Planning Board Table Type");
      pPlanningBoardTableField.TESTFIELD("Table ID");
      pPlanningBoardTableField.TESTFIELD("Field Application", pPlanningBoardTableField."Field Application"::Filter);
      IF (ObjectFieldToolkit.SelectFieldsAdv(pPlanningBoardTableField."Table ID", lTableFieldBuffer."Field Type"::Field,
          lTableFieldBuffer."Field Class"::Normal, lTableFieldBuffer)) THEN
      BEGIN
        IF (lTableFieldBuffer.FINDSET()) THEN
        REPEAT
          lPlanningBoardTable.RESET();
          lPlanningBoardTable.SETRANGE("Planning Board Code", pPlanningBoardTableField."Planning Board Code");
          lPlanningBoardTable.SETRANGE("Planning Board Table Type", pPlanningBoardTableField."Planning Board Table Type");
          lPlanningBoardTable.SETRANGE("Field Application", pPlanningBoardTableField."Field Application");
          lPlanningBoardTable.SETRANGE("Field ID", lTableFieldBuffer."Field ID");
          IF (lPlanningBoardTable.ISEMPTY()) THEN
          BEGIN
            CLEAR(lPlanningBoardTable);
            lPlanningBoardTable.INIT();
            lPlanningBoardTable.VALIDATE("Planning Board Code", pPlanningBoardTableField."Planning Board Code");
            lPlanningBoardTable.VALIDATE("Planning Board Table Type", pPlanningBoardTableField."Planning Board Table Type");
            lPlanningBoardTable.VALIDATE("Field Application", pPlanningBoardTableField."Field Application");
            lPlanningBoardTable.INSERT(TRUE);
            lPlanningBoardTable.VALIDATE("Field ID", lTableFieldBuffer."Field ID");
            lPlanningBoardTable.MODIFY(TRUE);
          END;
        UNTIL (lTableFieldBuffer.NEXT() = 0);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Context ---"@1000000000();
    BEGIN
    END;

    PROCEDURE FilterLookup@9062230(VAR pPlanningBoardContext@9062231 : Record 9062349;pIndex@9062230 : Integer) : Boolean;
    VAR
      lResult@9062232 : Boolean;
      lTableType@9062233 : Integer;
      lId@9062234 : Integer;
      lRecordRef@9062235 : RecordRef;
      lFieldRef@9062237 : FieldRef;
      lValue@9062236 : Text;
    BEGIN
      //DOC NA2016.12 - Performing filter lookup for given planning board context and index
      //  <> pPlanningBoardContext: The context
      //  -> pIndex: Filter index (1..6)
      //  <- Lookup result

      lResult := FALSE;

      IF (pPlanningBoardContext."Planning Board Code" = '') THEN
        EXIT(lResult);
      IF ( NOT (pPlanningBoardContext.GetFilterEnabled(pIndex))) THEN
        EXIT(lResult);

      lTableType := pPlanningBoardContext.GetFilterTableType(pIndex);
      lId := pPlanningBoardContext.GetFilterId(pIndex);

      IF ((lTableType = pPlanningBoardContext."Filter 1 Table Type"::" ") OR (lId = 0)) THEN
        EXIT(lResult);

      IF ( NOT (PlanningBoardTableField.GET(pPlanningBoardContext."Planning Board Code", lTableType,
           PlanningBoardTableField."Field Application"::Filter, lId))) THEN
        EXIT(lResult);
      IF (PlanningBoardTableField."Lookup Table ID" = 0) THEN
        EXIT(lResult);
      IF (PlanningBoardTableField."Lookup Field ID" = 0) THEN
        EXIT(lResult);

      lRecordRef.OPEN(PlanningBoardTableField."Lookup Table ID");
      IF (PlanningBoardTableField."Lookup Table Criteria ID" <> 0) THEN
        CriteriaManagement.ApplyCriteriaToRecRef(PlanningBoardTableField."Lookup Table Criteria ID", lRecordRef);

      IF (RunWithRecordRef.RunDefaultPage(lRecordRef, TRUE)) THEN
      BEGIN
        lFieldRef := lRecordRef.FIELD(PlanningBoardTableField."Lookup Field ID");
        lValue := FORMAT(lFieldRef.VALUE, 0, 1);
        pPlanningBoardContext.SetFilterValue(pIndex, lValue);
        lResult := TRUE;
      END;

      lRecordRef.CLOSE();

      EXIT(lResult);
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 19/10/2015 - Created
    }
    END.
  }
}

