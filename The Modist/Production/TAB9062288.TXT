OBJECT Table 9062288 Excel Cell
{
  OBJECT-PROPERTIES
  {
    Date=25/09/15;
    Time=[ 1:09:06 PM];
    Version List=NA2016.10;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Excel Cell;
               ENG=Excel Cell];
  }
  FIELDS
  {
    { 1   ;   ;Excel ID            ;Integer       ;TableRelation=Excel;
                                                   CaptionML=[ENU=Excel ID;
                                                              ENG=Excel ID] }
    { 2   ;   ;Sheet Name          ;Text100       ;CaptionML=[ENU=Sheet Name;
                                                              ENG=Sheet Name] }
    { 3   ;   ;Row                 ;Integer       ;CaptionML=[ENU=Row;
                                                              ENG=Row] }
    { 4   ;   ;Row ID              ;Text10        ;CaptionML=[ENU=Row ID;
                                                              ENG=Row ID] }
    { 5   ;   ;Column              ;Integer       ;OnValidate=VAR
                                                                x@1000 : Integer;
                                                                i@1001 : Integer;
                                                                y@1003 : Integer;
                                                                c@1002 : Char;
                                                                t@1102601000 : Text[30];
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Column;
                                                              ENG=Column] }
    { 6   ;   ;Column ID           ;Text10        ;CaptionML=[ENU=Column ID;
                                                              ENG=Column ID] }
    { 7   ;   ;Value               ;Text250       ;CaptionML=[ENU=Value;
                                                              ENG=Value] }
    { 8   ;   ;Comment             ;Text250       ;CaptionML=[ENU=Comment;
                                                              ENG=Comment] }
    { 9   ;   ;Formula             ;Text250       ;CaptionML=[ENU=Formula;
                                                              ENG=Formula] }
    { 10  ;   ;Formula 2           ;Text250       ;CaptionML=[ENU=Formula 2;
                                                              ENG=Formula 2] }
    { 11  ;   ;Formula 3           ;Text250       ;CaptionML=[ENU=Formula 3;
                                                              ENG=Formula 3] }
    { 12  ;   ;Formula 4           ;Text250       ;CaptionML=[ENU=Formula 4;
                                                              ENG=Formula 4] }
    { 13  ;   ;Bold                ;Boolean       ;CaptionML=[ENU=Bold;
                                                              ENG=Bold] }
    { 14  ;   ;Italic              ;Boolean       ;CaptionML=[ENU=Italic;
                                                              ENG=Italic] }
    { 15  ;   ;Underline           ;Boolean       ;CaptionML=[ENU=Underline;
                                                              ENG=Underline] }
    { 16  ;   ;Format              ;Text30        ;CaptionML=[ENU=Format;
                                                              ENG=Format] }
    { 17  ;   ;Cell Type           ;Option        ;CaptionML=[ENU=Cell Type;
                                                              ENG=Cell Type];
                                                   OptionCaptionML=[ENU=Number,Text,Date,Time;
                                                                    ENG=Number,Text,Date,Time];
                                                   OptionString=Number,Text,Date,Time }
    { 18  ;   ;Workbook Name       ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Excel.Name WHERE (ID=FIELD(Excel ID),
                                                                                        Type=CONST(Workbook)));
                                                   CaptionML=[ENU=Workbook Name;
                                                              ENG=Workbook Name];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Excel ID,Sheet Name,Column,Row          ;Clustered=Yes }
    {    ;Excel ID,Sheet Name,Column ID,Row ID     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE RowToRowId@1000000003(pRow@1000000000 : Integer) : Text[10];
    VAR
      lExcelBuffer@1000000001 : Record 9062715;
    BEGIN
      //DOC NA2015.1 - Converting row to row ID
      //  -> pRow: Row
      //  <- Row ID

      lExcelBuffer.VALIDATE("Row No.", pRow);
      EXIT(lExcelBuffer.xlRowID);
    END;

    PROCEDURE ColumnToColumnId@1000000004(pColumn@1000000000 : Integer) : Text[10];
    VAR
      lExcelBuffer@1000000001 : Record 9062715;
    BEGIN
      //DOC NA2015.1 - Converting column to column ID
      //  -> pColumn: Column
      //  <- Column ID

      lExcelBuffer.VALIDATE("Column No.", pColumn);
      EXIT(lExcelBuffer.xlColID);
    END;

    PROCEDURE GetAddress@1000000030() : Text[250];
    VAR
      lExcelBuffer@1000000000 : Record 9062715;
    BEGIN
      //DOC NA2015.1 - Getting cell address
      //  <- The address

      IF (Rec."Column ID" = '') THEN
      BEGIN
        Rec.TESTFIELD(Column);
        Rec."Column ID" := ColumnToColumnId(Rec.Column);
      END;

      IF (Rec."Row ID" = '') THEN
      BEGIN
        Rec.TESTFIELD(Row);
        Rec."Row ID" := RowToRowId(Rec.Row);
      END;

      EXIT(Rec."Column ID" + ':' + Rec."Row ID");
    END;

    PROCEDURE SetAddress@1000000001(pAddress@1000000000 : Text[250]);
    VAR
      lIndex@1000000004 : Integer;
      xUnrecognisedAddress@1000000005 : TextConst 'ENU=Excel cell address "%1" can''t be recognised.;ENG=Excel cell address "%1" can''t be recognised.';
      lAddressChar@1000000002 : Text[1];
      lAddressPart@1000000001 : ' ,Column,Row';
    BEGIN
      //DOC NA2015.1 - Decoding Excel cell address into sheet name + row ID + column ID
      //  -> pAddress; The address to decode

      IF (COPYSTR(pAddress, 1, 1) = '=') THEN
        pAddress := COPYSTR(pAddress, 2, STRLEN(pAddress) - 1);

      lIndex := STRPOS(pAddress, '!');
      IF (lIndex > 0) THEN
      BEGIN
        Rec."Sheet Name" := COPYSTR(pAddress, 1, lIndex - 1);
        IF (COPYSTR(Rec."Sheet Name", 1, 1) IN ['''', '`', '[', '"']) THEN
          Rec."Sheet Name" := COPYSTR(Rec."Sheet Name", 2, STRLEN(Rec."Sheet Name") - 1);
        IF (COPYSTR(Rec."Sheet Name", STRLEN(Rec."Sheet Name"), 1) IN ['''', '`', '[', '"']) THEN
          Rec."Sheet Name" := COPYSTR(Rec."Sheet Name", 1, STRLEN(Rec."Sheet Name") - 1);
        pAddress := COPYSTR(pAddress, lIndex + 1, STRLEN(pAddress) - lIndex);
      END
      ELSE
        Rec."Sheet Name" := '';

      IF (pAddress <> '') THEN
      BEGIN
        Rec."Column ID" := '';
        Rec."Row ID" := '';
        pAddress := UPPERCASE(pAddress);
        FOR lIndex := 1 TO STRLEN(pAddress) DO
        BEGIN
          lAddressChar := COPYSTR(pAddress, lIndex, 1);
          IF ((lAddressChar >= 'A') AND (lAddressChar <= 'Z')) THEN
          BEGIN
            IF (lAddressPart IN [lAddressPart::" ", lAddressPart::Column]) THEN
            BEGIN
              Rec."Column ID" := Rec."Column ID" + lAddressChar;
              lAddressPart  := lAddressPart::Column;
            END
            ELSE
              ERROR(xUnrecognisedAddress, pAddress);
          END
          ELSE IF ((lAddressChar >= '0') AND (lAddressChar <= '9')) THEN
          BEGIN
            IF (lAddressPart IN [lAddressPart::Column, lAddressPart::Row]) THEN
            BEGIN
              Rec."Row ID" := Rec."Row ID" + lAddressChar;
              lAddressPart  := lAddressPart::Row;
            END
            ELSE
              ERROR(xUnrecognisedAddress, pAddress);
          END
          ELSE IF (lAddressChar <> '$') THEN
            ERROR(xUnrecognisedAddress, pAddress);
        END;
      END
      ELSE
        ERROR(xUnrecognisedAddress, pAddress);
    END;

    PROCEDURE CopyFromExcelBuffer@1000000000(pExcelBuffer@1000000000 : Record 9062715);
    BEGIN
      //DOC NA2015.1 - Copying all values of passed Excel Buffer record to the current record
      //  -> pExcelBuffer: The excel buffer

      Rec.VALIDATE(Row, pExcelBuffer."Row No.");
      Rec.VALIDATE("Row ID", pExcelBuffer.xlRowID);
      Rec.VALIDATE(Column, pExcelBuffer."Column No.");
      Rec.VALIDATE("Column ID", pExcelBuffer.xlColID);
      Rec.VALIDATE(Value, pExcelBuffer."Cell Value as Text");
      Rec.VALIDATE(Comment, pExcelBuffer.Comment);
      Rec.VALIDATE(Formula, pExcelBuffer.Formula);
      Rec.VALIDATE("Formula 2", pExcelBuffer.Formula2);
      Rec.VALIDATE("Formula 3", pExcelBuffer.Formula3);
      Rec.VALIDATE("Formula 4", pExcelBuffer.Formula4);
      Rec.VALIDATE(Bold, pExcelBuffer.Bold);
      Rec.VALIDATE(Italic, pExcelBuffer.Italic);
      Rec.VALIDATE(Underline, pExcelBuffer.Underline);
      Rec.VALIDATE(Format, pExcelBuffer.NumberFormat);
      Rec.VALIDATE("Cell Type", pExcelBuffer."Cell Type");
    END;

    LOCAL PROCEDURE ClearStaticReferenceFromId@1000000006(pId@1000000000 : Text[10]) : Text[10];
    BEGIN
      //DOC NA2015.1 - Clearing static reference from ID
      //  -> pId: The ID
      //  <- Cleared ID

      IF (COPYSTR(pId, 1, 1) = '$') THEN
        pId := COPYSTR(pId, 2, STRLEN(pId) - 1);

      EXIT(pId);
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 17/04/2013 - Created
      //DOC NA2016.10 JH 27/08/2015 - Upgraded to 2016
    }
    END.
  }
}

