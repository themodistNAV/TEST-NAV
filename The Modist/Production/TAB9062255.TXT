OBJECT Table 9062255 Enhanced Permission
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Enhanced Permission Group Code");
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    CaptionML=[ENU=Enhanced Permission;
               ENG=Enhanced Permission];
  }
  FIELDS
  {
    { 1   ;   ;Enhanced Permission Group Code;Code20;
                                                   TableRelation="Enhanced Permission Group";
                                                   CaptionML=[ENU=Enhanced Permission Group Code;
                                                              ENG=Enhanced Permission Group Code] }
    { 2   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (Rec.Type <> xRec.Type) THEN
                                                                  Rec.VALIDATE(Code, '');
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=" ,Panel,Planning Board,Quick Report,Jet Report";
                                                                    ENG=" ,Panel,Planning Board,Quick Report,Jet Report"];
                                                   OptionString=[ ,Panel,Planning Board,Quick Report,Jet Report] }
    { 3   ;   ;Code                ;Code50        ;OnValidate=VAR
                                                                lFound@1000000000 : Boolean;
                                                                lTypeText@1000000001 : Text;
                                                              BEGIN
                                                                IF (Rec.Code <> xRec.Code) THEN
                                                                  Rec.VALIDATE(ID, 0);
                                                                IF (Rec.Code <> '') THEN
                                                                  CASE (Rec.Type) OF
                                                                    Rec.Type::Panel:
                                                                      BEGIN
                                                                        FindPanel(TRUE);
                                                                        Rec.Code := Panel.Code;
                                                                        Rec.Description := Panel.Description;
                                                                      END;
                                                                    Rec.Type::"Planning Board":
                                                                      BEGIN
                                                                        FindPlanningBoard(TRUE);
                                                                        Rec.Code := PlanningBoardHeader.Code;
                                                                        Rec.Description := PlanningBoardHeader.Name;
                                                                      END;
                                                                    Rec.Type::"Quick Report":
                                                                      BEGIN
                                                                        FindQuickReport(TRUE);
                                                                        Rec.Code := QuickReportHeader.Code;
                                                                        Rec.Description := QuickReportHeader.Name;
                                                                      END;
                                                                    Rec.Type::"Jet Report":
                                                                      BEGIN
                                                                        FindJetReport(TRUE);
                                                                        Rec.ID := JetReportHeader.ID;
                                                                        Rec.Code := JetReportHeader."Short Code";
                                                                        Rec.Description := JetReportHeader.Description;
                                                                      END;
                                                                  END
                                                                ELSE
                                                                  IF (Rec.Type <> Rec.Type::" ") THEN
                                                                  BEGIN
                                                                    lTypeText := LanguageToolkit.ToPlural(FORMAT(Rec.Type));
                                                                    Rec.Description := STRSUBSTNO(tAll, lTypeText);
                                                                  END;
                                                              END;

                                                   OnLookup=BEGIN
                                                                CASE (Rec.Type) OF
                                                                  Rec.Type::Panel:
                                                                    BEGIN
                                                                      FindPanel(FALSE);
                                                                      IF (PAGE.RUNMODAL(0, Panel) = ACTION::LookupOK) THEN
                                                                        Rec.VALIDATE(Code, Panel.Code);
                                                                    END;
                                                                  Rec.Type::"Planning Board":
                                                                    BEGIN
                                                                      FindPlanningBoard(FALSE);
                                                                      IF (PAGE.RUNMODAL(0, PlanningBoardHeader) = ACTION::LookupOK) THEN
                                                                        Rec.VALIDATE(Code, PlanningBoardHeader.Code);
                                                                    END;
                                                                  Rec.Type::"Quick Report":
                                                                    BEGIN
                                                                      FindQuickReport(FALSE);
                                                                      IF (PAGE.RUNMODAL(0, QuickReportHeader) = ACTION::LookupOK) THEN
                                                                        Rec.VALIDATE(Code, QuickReportHeader.Code);
                                                                    END;
                                                                  Rec.Type::"Jet Report":
                                                                    BEGIN
                                                                      FindJetReport(FALSE);
                                                                      IF (PAGE.RUNMODAL(0, JetReportHeader) = ACTION::LookupOK) THEN
                                                                        Rec.VALIDATE(Code, FORMAT(JetReportHeader.ID, 0, 1));
                                                                    END;
                                                                END;
                                                            END;

                                                   CaptionML=[ENU=Code;
                                                              ENG=Code] }
    { 12  ;   ;ID                  ;Integer       ;CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 20  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 30  ;   ;Execute Permission  ;Boolean       ;CaptionML=[ENU=Execute Permission;
                                                              ENG=Execute Permission] }
    { 31  ;   ;Modify Permission   ;Boolean       ;CaptionML=[ENU=Modify Permission;
                                                              ENG=Modify Permission] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Enhanced Permission Group Code,Type,Code;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      JetReportHeader@1000000005 : Record 9062296;
      Panel@1000000001 : Record 9062363;
      PlanningBoardHeader@1000000002 : Record 9062337;
      QuickReportHeader@1000000003 : Record 9062697;
      LanguageToolkit@1000000007 : Codeunit 9062586;
      TnpToolkit@1000000000 : Codeunit 9062230;
      tCantBeFound@1000000004 : TextConst 'ENU=%1 "%2" can''t be found;ENG=%1 "%2" can''t be found';
      tAll@1000000006 : TextConst 'ENU=(All %1);ENG=(All %1)';

    LOCAL PROCEDURE FindPanel@1000000007(pErrorIfNotFound@1000000001 : Boolean) : Boolean;
    VAR
      lFound@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.15 - Trying to find a panel using the record code
      //  -> pErrorIfNotFound: Flag to raise an error if the panel can't be found
      //  <- Result

      Panel.RESET();
      lFound := Panel.GET(COPYSTR(Rec.Code, 1, MAXSTRLEN(Panel.Code)));
      IF ( NOT (lFound)) THEN
      BEGIN
        Panel.SETFILTER(Code, Rec.Code + '*');
        lFound := Panel.FINDFIRST();
      END;
      IF ( NOT (lFound)) THEN
      BEGIN
        Panel.SETFILTER(Code, '*' + Rec.Code + '*');
        lFound := Panel.FINDFIRST();
      END;

      IF (( NOT (lFound)) AND (pErrorIfNotFound)) THEN
        ERROR(tCantBeFound, Panel.TABLECAPTION(), Rec.Code);
    END;

    LOCAL PROCEDURE FindPlanningBoard@1000000001(pErrorIfNotFound@1000000001 : Boolean) : Boolean;
    VAR
      lFound@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.15 - Trying to find a planning board using the record code
      //  -> pErrorIfNotFound: Flag to raise an error if the planning board can't be found
      //  <- Result

      PlanningBoardHeader.RESET();
      lFound := PlanningBoardHeader.GET(COPYSTR(Rec.Code, 1, MAXSTRLEN(PlanningBoardHeader.Code)));
      IF ( NOT (lFound)) THEN
      BEGIN
        PlanningBoardHeader.SETFILTER(Code, Rec.Code + '*');
        lFound := PlanningBoardHeader.FINDFIRST();
      END;
      IF ( NOT (lFound)) THEN
      BEGIN
        PlanningBoardHeader.SETFILTER(Code, '*' + Rec.Code + '*');
        lFound := PlanningBoardHeader.FINDFIRST();
      END;

      IF (( NOT (lFound)) AND (pErrorIfNotFound)) THEN
        ERROR(tCantBeFound, PlanningBoardHeader.TABLECAPTION(), Rec.Code);
    END;

    LOCAL PROCEDURE FindQuickReport@1000000000(pErrorIfNotFound@1000000001 : Boolean) : Boolean;
    VAR
      lFound@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.15 - Trying to find a quick report using the record code
      //  -> pErrorIfNotFound: Flag to raise an error if the quick report can't be found
      //  <- Result

      QuickReportHeader.RESET();
      lFound := QuickReportHeader.GET(COPYSTR(Rec.Code, 1, MAXSTRLEN(QuickReportHeader.Code)));
      IF ( NOT (lFound)) THEN
      BEGIN
        QuickReportHeader.SETFILTER(Code, Rec.Code + '*');
        lFound := QuickReportHeader.FINDFIRST();
      END;
      IF ( NOT (lFound)) THEN
      BEGIN
        QuickReportHeader.SETFILTER(Code, '*' + Rec.Code + '*');
        lFound := QuickReportHeader.FINDFIRST();
      END;

      IF (( NOT (lFound)) AND (pErrorIfNotFound)) THEN
        ERROR(tCantBeFound, QuickReportHeader.TABLECAPTION(), Rec.Code);
    END;

    LOCAL PROCEDURE FindJetReport@1000000002(pErrorIfNotFound@1000000001 : Boolean);
    VAR
      lFound@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.15 - Trying to find a jet report using the record code
      //  -> pErrorIfNotFound: Flag to raise an error if the panel can't be found
      //  <- Result

      JetReportHeader.RESET();
      IF (EVALUATE(Rec.ID, Rec.Code)) THEN
        lFound := JetReportHeader.GET(Rec.ID);
      IF ( NOT (lFound)) THEN
        JetReportHeader.SETCURRENTKEY("Short Code");
      IF ( NOT (lFound)) THEN
      BEGIN
        JetReportHeader.SETRANGE("Short Code", COPYSTR(Rec.Code, 1, MAXSTRLEN(JetReportHeader."Short Code")));
        lFound := JetReportHeader.FINDFIRST();
      END;
      IF ( NOT (lFound)) THEN
      BEGIN
        JetReportHeader.SETFILTER("Short Code", Rec.Code + '*');
        lFound := JetReportHeader.FINDFIRST();
      END;
      IF ( NOT (lFound)) THEN
      BEGIN
        JetReportHeader.SETRANGE("Short Code", '*' + Rec.Code + '*');
        lFound := JetReportHeader.FINDFIRST();
      END;

      IF (( NOT (lFound)) AND (pErrorIfNotFound)) THEN
        ERROR(tCantBeFound, JetReportHeader.TABLECAPTION(), Rec.Code);
    END;

    BEGIN
    {
      //DOC NA2016.15 JH 04/05/2016 - Created
    }
    END.
  }
}

