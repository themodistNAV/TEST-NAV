OBJECT Codeunit 5600 FA Insert Ledger Entry
{
  OBJECT-PROPERTIES
  {
    Date=22/12/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.44365;
  }
  PROPERTIES
  {
    TableNo=5601;
    Permissions=TableData 5601=rim,
                TableData 5612=rim,
                TableData 5617=rim,
                TableData 5625=rim;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="%2 = %3 does not exist for %1.";ENG="%2 = %3 does not exist for %1."';
      Text001@1001 : TextConst 'ENU="%2 = %3 does not match the journal line for %1.";ENG="%2 = %3 does not match the journal line for %1."';
      Text002@1002 : TextConst 'ENU=%1 is a %2. %3 must be %4 in %5.;ENG=%1 is a %2. %3 must be %4 in %5.';
      FASetup@1003 : Record 5603;
      FAPostingTypeSetup@1004 : Record 5604;
      DeprBook@1005 : Record 5611;
      FADeprBook@1006 : Record 5612;
      FADeprBook2@1007 : Record 5612;
      FA@1008 : Record 5600;
      FA2@1009 : Record 5600;
      FALedgEntry@1010 : Record 5601;
      FALedgEntry2@1011 : Record 5601;
      TmpFALedgEntry@1027 : TEMPORARY Record 5601;
      MaintenanceLedgEntry@1012 : Record 5625;
      TmpMaintenanceLedgEntry@1028 : TEMPORARY Record 5625;
      FAReg@1013 : Record 5617;
      FAJnlLine@1014 : Record 5621;
      FAInsertGLAcc@1017 : Codeunit 5601;
      FACheckConsistency@1018 : Codeunit 5606;
      FAAutomaticEntry@1019 : Codeunit 5607;
      DeprBookCode@1020 : Code[10];
      ErrorEntryNo@1021 : Integer;
      NextEntryNo@1022 : Integer;
      NextMaintenanceEntryNo@1023 : Integer;
      Text003@1025 : TextConst 'ENU=%1 must not be %2 in %3 %4.;ENG=%1 must not be %2 in %3 %4.';
      Text004@1024 : TextConst 'ENU=Reversal found a %1 without a matching %2.;ENG=Reversal found a %1 without a matching %2.';
      RegisterInserted@1026 : Boolean;
      Text005@1029 : TextConst 'ENU=You cannot reverse the transaction, because it has already been reversed.;ENG=You cannot reverse the transaction, because it has already been reversed.';
      Text006@1030 : TextConst 'ENU=The combination of dimensions used in %1 %2 is blocked. %3;ENG=The combination of dimensions used in %1 %2 is blocked. %3';
      LastEntryNo@1031 : Integer;
      Text007@1032 : TextConst 'ENU="%1 = %2 already exists for %5 (%3 = %4).";ENG="%1 = %2 already exists for %5 (%3 = %4)."';
      GLRegisterNo@1015 : Integer;

    PROCEDURE InsertFA@14(VAR FALedgEntry3@1000 : Record 5601);
    BEGIN
      IF NextEntryNo = 0 THEN BEGIN
        FALedgEntry.LOCKTABLE;
        IF FALedgEntry.FINDLAST THEN
          NextEntryNo := FALedgEntry."Entry No.";
        InitRegister(
          0,FALedgEntry3."G/L Entry No.",FALedgEntry3."Source Code",
          FALedgEntry3."Journal Batch Name");
      END;
      NextEntryNo := NextEntryNo + 1;

      FALedgEntry := FALedgEntry3;
      DeprBook.GET(FALedgEntry."Depreciation Book Code");
      FA.GET(FALedgEntry."FA No.");
      DeprBookCode := FALedgEntry."Depreciation Book Code";
      CheckMainAsset;
      ErrorEntryNo := FALedgEntry."Entry No.";
      FALedgEntry."Entry No." := NextEntryNo;
      SetFAPostingType(FALedgEntry);
      IF FALedgEntry."Automatic Entry" THEN
        FAAutomaticEntry.AdjustFALedgEntry(FALedgEntry);
      FALedgEntry."Amount (LCY)" :=
        ROUND(FALedgEntry.Amount * GetExchangeRate(FALedgEntry."FA Exchange Rate"));
      IF NOT CalcGLIntegration(FALedgEntry) THEN
        FALedgEntry."G/L Entry No." := 0
      ELSE
        FAInsertGLAcc.RUN(FALedgEntry);
      IF NOT DeprBook."Allow Identical Document No." AND
         (FALedgEntry."Journal Batch Name" <> '') AND
         (FALedgEntry."FA Posting Category" = FALedgEntry."FA Posting Category"::" ") AND
         (ErrorEntryNo = 0) AND
         (LastEntryNo > 0)
      THEN
        CheckFADocNo(FALedgEntry);
      FALedgEntry.INSERT(TRUE);

      IF ErrorEntryNo > 0 THEN BEGIN
        IF NOT FALedgEntry2.GET(ErrorEntryNo) THEN
          ERROR(
            Text000,
            FAName(DeprBookCode),FALedgEntry2.FIELDCAPTION("Entry No."),ErrorEntryNo);
        IF (FALedgEntry2."Depreciation Book Code" <> FALedgEntry."Depreciation Book Code") OR
           (FALedgEntry2."FA No." <> FALedgEntry."FA No.") OR
           (FALedgEntry2."FA Posting Category" <> FALedgEntry."FA Posting Category") OR
           (FALedgEntry2."FA Posting Type" <> FALedgEntry."FA Posting Type") OR
           (FALedgEntry2.Amount <> -FALedgEntry.Amount) OR
           (FALedgEntry2."FA Posting Date" <> FALedgEntry."FA Posting Date")
        THEN
          ERROR(
            Text001,
            FAName(DeprBookCode),FAJnlLine.FIELDCAPTION("FA Error Entry No."),ErrorEntryNo);
        FALedgEntry."Canceled from FA No." := FALedgEntry."FA No.";
        FALedgEntry2."Canceled from FA No." := FALedgEntry2."FA No.";
        FALedgEntry2."FA No." := '';
        FALedgEntry."FA No." := '';
        FALedgEntry2.MODIFY;
        FALedgEntry.MODIFY;
        FALedgEntry."FA No." := FALedgEntry3."FA No.";
      END;

      IF FALedgEntry3."FA Posting Category" = FALedgEntry3."FA Posting Category"::" " THEN
        IF FALedgEntry3."FA Posting Type" <= FALedgEntry3."FA Posting Type"::"Salvage Value" THEN
          FACheckConsistency.RUN(FALedgEntry);

      InsertRegister(0,NextEntryNo);
    END;

    PROCEDURE InsertMaintenance@1(VAR MaintenanceLedgEntry2@1000 : Record 5625);
    BEGIN
      IF NextMaintenanceEntryNo = 0 THEN BEGIN
        MaintenanceLedgEntry.LOCKTABLE;
        IF MaintenanceLedgEntry.FINDLAST THEN
          NextMaintenanceEntryNo := MaintenanceLedgEntry."Entry No.";
        InitRegister(
          1,MaintenanceLedgEntry2."G/L Entry No.",MaintenanceLedgEntry2."Source Code",
          MaintenanceLedgEntry2."Journal Batch Name");
      END;
      NextMaintenanceEntryNo := NextMaintenanceEntryNo + 1;
      MaintenanceLedgEntry := MaintenanceLedgEntry2;
      WITH MaintenanceLedgEntry DO BEGIN
        DeprBook.GET("Depreciation Book Code");
        FA.GET("FA No.");
        CheckMainAsset;
        "Entry No." := NextMaintenanceEntryNo;
        IF "Automatic Entry" THEN
          FAAutomaticEntry.AdjustMaintenanceLedgEntry(MaintenanceLedgEntry);
        "Amount (LCY)" := ROUND(Amount * GetExchangeRate("FA Exchange Rate"));
        IF (Amount > 0) AND NOT Correction OR
           (Amount < 0) AND Correction
        THEN BEGIN
          "Debit Amount" := Amount;
          "Credit Amount" := 0
        END ELSE BEGIN
          "Debit Amount" := 0;
          "Credit Amount" := -Amount;
        END;
        IF "G/L Entry No." > 0 THEN
          FAInsertGLAcc.InsertMaintenanceAccNo(MaintenanceLedgEntry);
        INSERT(TRUE);
        SetMaintenanceLastDate(MaintenanceLedgEntry);
      END;
      InsertRegister(1,NextMaintenanceEntryNo);
    END;

    PROCEDURE SetMaintenanceLastDate@11(MaintenanceLedgEntry@1000 : Record 5625);
    BEGIN
      WITH MaintenanceLedgEntry DO BEGIN
        SETCURRENTKEY("FA No.","Depreciation Book Code","FA Posting Date");
        SETRANGE("FA No.","FA No.");
        SETRANGE("Depreciation Book Code","Depreciation Book Code");
        FADeprBook.GET("FA No.","Depreciation Book Code");
        IF FINDLAST THEN
          FADeprBook."Last Maintenance Date" := "FA Posting Date"
        ELSE
          FADeprBook."Last Maintenance Date" := 0D;
        FADeprBook.MODIFY;
      END;
    END;

    LOCAL PROCEDURE SetFAPostingType@3(VAR FALedgEntry@1000 : Record 5601);
    BEGIN
      WITH FALedgEntry DO BEGIN
        IF (Amount > 0) AND NOT Correction OR
           (Amount < 0) AND Correction
        THEN BEGIN
          "Debit Amount" := Amount;
          "Credit Amount" := 0
        END ELSE BEGIN
          "Debit Amount" := 0;
          "Credit Amount" := -Amount;
        END;
        "Part of Book Value" := FALSE;
        "Part of Depreciable Basis" := FALSE;
        IF "FA Posting Category" <> "FA Posting Category"::" " THEN
          EXIT;
        CASE "FA Posting Type" OF
          "FA Posting Type"::"Write-Down":
            FAPostingTypeSetup.GET(
              DeprBookCode,FAPostingTypeSetup."FA Posting Type"::"Write-Down");
          "FA Posting Type"::Appreciation:
            FAPostingTypeSetup.GET(
              DeprBookCode,FAPostingTypeSetup."FA Posting Type"::Appreciation);
          "FA Posting Type"::"Custom 1":
            FAPostingTypeSetup.GET(
              DeprBookCode,FAPostingTypeSetup."FA Posting Type"::"Custom 1");
          "FA Posting Type"::"Custom 2":
            FAPostingTypeSetup.GET(
              DeprBookCode,FAPostingTypeSetup."FA Posting Type"::"Custom 2");
        END;
        CASE "FA Posting Type" OF
          "FA Posting Type"::"Acquisition Cost",
          "FA Posting Type"::"Salvage Value":
            "Part of Depreciable Basis" := TRUE;
          "FA Posting Type"::"Write-Down",
          "FA Posting Type"::Appreciation,
          "FA Posting Type"::"Custom 1",
          "FA Posting Type"::"Custom 2":
            "Part of Depreciable Basis" := FAPostingTypeSetup."Part of Depreciable Basis";
        END;
        CASE "FA Posting Type" OF
          "FA Posting Type"::"Acquisition Cost",
          "FA Posting Type"::Depreciation:
            "Part of Book Value" := TRUE;
          "FA Posting Type"::"Write-Down",
          "FA Posting Type"::Appreciation,
          "FA Posting Type"::"Custom 1",
          "FA Posting Type"::"Custom 2":
            "Part of Book Value" := FAPostingTypeSetup."Part of Book Value";
        END;
      END;
    END;

    LOCAL PROCEDURE GetExchangeRate@12(ExchangeRate@1000 : Decimal) : Decimal;
    BEGIN
      IF ExchangeRate <= 0 THEN
        EXIT(1);
      EXIT(ExchangeRate / 100);
    END;

    LOCAL PROCEDURE CalcGLIntegration@4(VAR FALedgEntry@1000 : Record 5601) : Boolean;
    BEGIN
      WITH FALedgEntry DO BEGIN
        IF "G/L Entry No." = 0 THEN
          EXIT(FALSE);
        CASE DeprBook."Disposal Calculation Method" OF
          DeprBook."Disposal Calculation Method"::Net:
            IF "FA Posting Type" = "FA Posting Type"::"Proceeds on Disposal" THEN
              EXIT(FALSE);
          DeprBook."Disposal Calculation Method"::Gross:
            IF "FA Posting Type" = "FA Posting Type"::"Gain/Loss" THEN
              EXIT(FALSE);
        END;
        IF "FA Posting Type" = "FA Posting Type"::"Salvage Value" THEN
          EXIT(FALSE);

        EXIT(TRUE);
      END;
    END;

    PROCEDURE InsertBalAcc@2(VAR FALedgEntry@1000 : Record 5601);
    BEGIN
      FAInsertGLAcc.InsertBalAcc(FALedgEntry);
    END;

    PROCEDURE InsertBalDisposalAcc@13(FALedgEntry@1000 : Record 5601);
    BEGIN
      FAInsertGLAcc.RUN(FALedgEntry);
    END;

    PROCEDURE FindFirstGLAcc@7(VAR FAGLPostBuf@1000 : Record 5637) : Boolean;
    BEGIN
      EXIT(FAInsertGLAcc.FindFirstGLAcc(FAGLPostBuf));
    END;

    PROCEDURE GetNextGLAcc@8(VAR FAGLPostBuf@1000 : Record 5637) : Integer;
    BEGIN
      EXIT(FAInsertGLAcc.GetNextGLAcc(FAGLPostBuf));
    END;

    PROCEDURE DeleteAllGLAcc@9();
    BEGIN
      FAInsertGLAcc.DeleteAllGLAcc;
    END;

    LOCAL PROCEDURE CheckMainAsset@6();
    BEGIN
      IF FA."Main Asset/Component" = FA."Main Asset/Component"::Component THEN
        FADeprBook2.GET(FA."Component of Main Asset",DeprBook.Code);

      WITH FASetup DO BEGIN
        GET;
        IF "Allow Posting to Main Assets" THEN
          EXIT;
        FA2."Main Asset/Component" := FA2."Main Asset/Component"::"Main Asset";
        IF FA."Main Asset/Component" = FA."Main Asset/Component"::"Main Asset" THEN
          ERROR(
            Text002,
            FAName(''),FA2."Main Asset/Component",FIELDCAPTION("Allow Posting to Main Assets"),
            TRUE,TABLECAPTION);
      END;
    END;

    LOCAL PROCEDURE InitRegister@10(CalledFrom@1000 : 'FA,Maintenance';GLEntryNo@1001 : Integer;SourceCode@1002 : Code[10];BatchName@1003 : Code[10]);
    BEGIN
      IF (CalledFrom = CalledFrom::FA) AND (NextMaintenanceEntryNo <> 0) THEN
        EXIT;
      IF (CalledFrom = CalledFrom::Maintenance) AND (NextEntryNo <> 0) THEN
        EXIT;
      WITH FAReg DO BEGIN
        LOCKTABLE;
        IF FINDLAST THEN BEGIN
          IF (GLRegisterNo <> 0) AND (GLRegisterNo = "G/L Register No.") THEN
            EXIT;
          "No." += 1;
        END ELSE
          "No." := 1;
        INIT;
        IF GLEntryNo = 0 THEN
          "Journal Type" := "Journal Type"::"Fixed Asset";
        "Creation Date" := TODAY;
        "Source Code" := SourceCode;
        "Journal Batch Name" := BatchName;
        "User ID" := USERID;
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InsertRegister@15(CalledFrom@1000 : 'FA,Maintenance';NextEntryNo@1001 : Integer);
    BEGIN
      WITH FAReg DO BEGIN
        IF CalledFrom = CalledFrom::FA THEN BEGIN
          IF "From Entry No." = 0 THEN
            "From Entry No." := NextEntryNo;
          "To Entry No." := NextEntryNo;
        END;
        IF CalledFrom = CalledFrom::Maintenance THEN BEGIN
          IF "From Maintenance Entry No." = 0 THEN
            "From Maintenance Entry No." := NextEntryNo;
          "To Maintenance Entry No." := NextEntryNo;
        END;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE FAName@5(DeprBookCode@1000 : Code[10]) : Text[200];
    VAR
      DepreciationCalc@1001 : Codeunit 5616;
    BEGIN
      EXIT(DepreciationCalc.FAName(FA,DeprBookCode));
    END;

    LOCAL PROCEDURE CheckFADocNo@25(FALedgEntry@1000 : Record 5601);
    VAR
      OldFALedgEntry@1001 : Record 5601;
    BEGIN
      OldFALedgEntry.SETCURRENTKEY(
        "FA No.","Depreciation Book Code","FA Posting Category","FA Posting Type","Document No.");
      OldFALedgEntry.SETRANGE("FA No.",FALedgEntry."FA No.");
      OldFALedgEntry.SETRANGE("Depreciation Book Code",FALedgEntry."Depreciation Book Code");
      OldFALedgEntry.SETRANGE("FA Posting Category",FALedgEntry."FA Posting Category");
      OldFALedgEntry.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type");
      OldFALedgEntry.SETRANGE("Document No.",FALedgEntry."Document No.");
      OldFALedgEntry.SETRANGE("Entry No.",0,LastEntryNo);
      IF OldFALedgEntry.FINDFIRST THEN
        ERROR(
          Text007,
          OldFALedgEntry.FIELDCAPTION("Document No."),
          OldFALedgEntry."Document No.",
          OldFALedgEntry.FIELDCAPTION("FA Posting Type"),
          OldFALedgEntry."FA Posting Type",
          FAName(DeprBookCode));
    END;

    PROCEDURE SetOrgGenJnlLine@16(OrgGenJnlLine2@1000 : Boolean);
    BEGIN
      FAInsertGLAcc.SetOrgGenJnlLine(OrgGenJnlLine2)
    END;

    PROCEDURE CorrectEntries@17();
    BEGIN
      FAInsertGLAcc.CorrectEntries;
    END;

    PROCEDURE InsertReverseEntry@19(NewGLEntryNo@1001 : Integer;FAEntryType@1004 : ' ,Fixed Asset,Maintenance';FAEntryNo@1005 : Integer;VAR NewFAEntryNo@1002 : Integer;TransactionNo@1007 : Integer;VAR ReversalEntry@1009 : Record 179);
    VAR
      SourceCodeSetup@1008 : Record 242;
      FALedgEntry3@1003 : Record 5601;
      MaintenanceLedgEntry3@1006 : Record 5625;
      DimMgt@1012 : Codeunit 408;
      TableID@1014 : ARRAY [10] OF Integer;
      AccNo@1013 : ARRAY [10] OF Code[20];
    BEGIN
      IF FAEntryType = FAEntryType::"Fixed Asset" THEN BEGIN
        FALedgEntry3.GET(FAEntryNo);
        FALedgEntry3.TESTFIELD("Reversed by Entry No.",0);
        FALedgEntry3.TESTFIELD("FA Posting Category",FALedgEntry3."FA Posting Category"::" ");
        IF FALedgEntry3."FA Posting Type" = FALedgEntry3."FA Posting Type"::"Proceeds on Disposal" THEN
          ERROR(
            Text003,
            FALedgEntry3.FIELDCAPTION("FA Posting Type"),
            FALedgEntry3."FA Posting Type",
            FALedgEntry.TABLECAPTION,FALedgEntry3."Entry No.");
        IF FALedgEntry3."FA Posting Type" <> FALedgEntry3."FA Posting Type"::"Salvage Value" THEN BEGIN
          IF NOT DimMgt.CheckDimIDComb(FALedgEntry3."Dimension Set ID") THEN
            ERROR(Text006,FALedgEntry3.TABLECAPTION,FALedgEntry3."Entry No.",DimMgt.GetDimCombErr);
          CLEAR(TableID);
          CLEAR(AccNo);
          TableID[1] := DATABASE::"Fixed Asset";
          AccNo[1] := FALedgEntry3."FA No.";
          IF NOT DimMgt.CheckDimValuePosting(TableID,AccNo,FALedgEntry3."Dimension Set ID") THEN
            ERROR(DimMgt.GetDimValuePostingErr);
          IF NextEntryNo = 0 THEN BEGIN
            FALedgEntry.LOCKTABLE;
            IF FALedgEntry.FINDLAST THEN
              NextEntryNo := FALedgEntry."Entry No.";
            SourceCodeSetup.GET;
            InitRegister(0,1,SourceCodeSetup.Reversal,'');
            RegisterInserted := TRUE;
          END;
          NextEntryNo := NextEntryNo + 1;
          NewFAEntryNo := NextEntryNo;
          TmpFALedgEntry := FALedgEntry3;
          TmpFALedgEntry.INSERT;
          SetFAReversalMark(ReversalEntry,FALedgEntry3,NextEntryNo);
          FALedgEntry3."Entry No." := NextEntryNo;
          FALedgEntry3."G/L Entry No." := NewGLEntryNo;
          FALedgEntry3.Amount := -FALedgEntry3.Amount;
          FALedgEntry3."Debit Amount" := -FALedgEntry3."Debit Amount";
          FALedgEntry3."Credit Amount" := -FALedgEntry3."Credit Amount";
          FALedgEntry3.Quantity := 0;
          FALedgEntry3."User ID" := USERID;
          FALedgEntry3."Source Code" := SourceCodeSetup.Reversal;
          FALedgEntry3."Transaction No." := TransactionNo;
          FALedgEntry3."VAT Amount" := -FALedgEntry3."VAT Amount";
          FALedgEntry3."Amount (LCY)" := -FALedgEntry3."Amount (LCY)";
          FALedgEntry3.Correction := NOT FALedgEntry3.Correction;
          FALedgEntry3."No. Series" := '';
          FALedgEntry3."Journal Batch Name" := '';
          FALedgEntry3."FA No./Budgeted FA No." := '';
          FALedgEntry3.INSERT(TRUE);
          FACheckConsistency.RUN(FALedgEntry3);
          InsertRegister(0,NextEntryNo);
        END;
      END;
      IF FAEntryType = FAEntryType::Maintenance THEN BEGIN
        IF NextMaintenanceEntryNo = 0 THEN BEGIN
          MaintenanceLedgEntry.LOCKTABLE;
          IF MaintenanceLedgEntry.FINDLAST THEN
            NextMaintenanceEntryNo := MaintenanceLedgEntry."Entry No.";
          SourceCodeSetup.GET;
          InitRegister(1,1,SourceCodeSetup.Reversal,'');
          RegisterInserted := TRUE;
        END;
        NextMaintenanceEntryNo := NextMaintenanceEntryNo + 1;
        NewFAEntryNo := NextMaintenanceEntryNo;
        MaintenanceLedgEntry3.GET(FAEntryNo);

        IF NOT DimMgt.CheckDimIDComb(MaintenanceLedgEntry3."Dimension Set ID") THEN
          ERROR(Text006,MaintenanceLedgEntry3.TABLECAPTION,MaintenanceLedgEntry3."Entry No.",DimMgt.GetDimCombErr);
        CLEAR(TableID);
        CLEAR(AccNo);
        TableID[1] := DATABASE::"Fixed Asset";
        AccNo[1] := MaintenanceLedgEntry3."FA No.";
        IF NOT DimMgt.CheckDimValuePosting(TableID,AccNo,MaintenanceLedgEntry3."Dimension Set ID") THEN
          ERROR(DimMgt.GetDimValuePostingErr);

        TmpMaintenanceLedgEntry := MaintenanceLedgEntry3;
        TmpMaintenanceLedgEntry.INSERT;
        SetMaintReversalMark(ReversalEntry,MaintenanceLedgEntry3,NextMaintenanceEntryNo);
        MaintenanceLedgEntry3."Entry No." := NextMaintenanceEntryNo;
        MaintenanceLedgEntry3."G/L Entry No." := NewGLEntryNo;
        MaintenanceLedgEntry3.Amount := -MaintenanceLedgEntry3.Amount;
        MaintenanceLedgEntry3."Debit Amount" := -MaintenanceLedgEntry3."Debit Amount";
        MaintenanceLedgEntry3."Credit Amount" := -MaintenanceLedgEntry3."Credit Amount";
        MaintenanceLedgEntry3.Quantity := 0;
        MaintenanceLedgEntry3."User ID" := USERID;
        MaintenanceLedgEntry3."Source Code" := SourceCodeSetup.Reversal;
        MaintenanceLedgEntry3."Transaction No." := TransactionNo;
        MaintenanceLedgEntry3."VAT Amount" := -MaintenanceLedgEntry3."VAT Amount";
        MaintenanceLedgEntry3."Amount (LCY)" := -MaintenanceLedgEntry3."Amount (LCY)";
        MaintenanceLedgEntry3.Correction := NOT FALedgEntry3.Correction;
        MaintenanceLedgEntry3."No. Series" := '';
        MaintenanceLedgEntry3."Journal Batch Name" := '';
        MaintenanceLedgEntry3."FA No./Budgeted FA No." := '';
        MaintenanceLedgEntry3.INSERT;
        InsertRegister(1,NextMaintenanceEntryNo);
      END;
    END;

    PROCEDURE CheckFAReverseEntry@18(FALedgEntry3@1000 : Record 5601);
    VAR
      GLEntry@1001 : Record 17;
    BEGIN
      TmpFALedgEntry := FALedgEntry3;
      IF FALedgEntry3."FA Posting Type" <> FALedgEntry3."FA Posting Type"::"Salvage Value" THEN BEGIN
        IF NOT TmpFALedgEntry.DELETE THEN
          ERROR(Text004,FALedgEntry.TABLECAPTION,GLEntry.TABLECAPTION);
      END;
    END;

    PROCEDURE CheckMaintReverseEntry@20(MaintenanceLedgEntry3@1001 : Record 5625);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      TmpMaintenanceLedgEntry := MaintenanceLedgEntry3;
      IF NOT TmpMaintenanceLedgEntry.DELETE THEN
        ERROR(Text004,MaintenanceLedgEntry.TABLECAPTION,GLEntry.TABLECAPTION);
    END;

    PROCEDURE FinishFAReverseEntry@35(GLReg@1001 : Record 45);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      IF TmpFALedgEntry.FINDFIRST THEN
        ERROR(Text004,FALedgEntry,GLEntry);
      IF TmpMaintenanceLedgEntry.FINDFIRST THEN
        ERROR(Text004,MaintenanceLedgEntry,GLEntry);
      IF RegisterInserted THEN BEGIN
        FAReg."G/L Register No." := GLReg."No.";
        FAReg.MODIFY;
      END;
    END;

    LOCAL PROCEDURE SetFAReversalMark@21(VAR ReversalEntry@1002 : Record 179;VAR FALedgEntry@1000 : Record 5601;NextEntryNo@1001 : Integer);
    VAR
      FALedgEntry2@1003 : Record 5601;
      CloseReversal@1004 : Boolean;
    BEGIN
      IF FALedgEntry."Reversed Entry No." <> 0 THEN BEGIN
        FALedgEntry2.GET(FALedgEntry."Reversed Entry No.");
        IF FALedgEntry2."Reversed Entry No." <> 0 THEN
          ERROR(Text005);
        CloseReversal := TRUE;
        FALedgEntry2."Reversed by Entry No." := 0;
        FALedgEntry2.Reversed := FALSE;
        FALedgEntry2.MODIFY;
      END;
      FALedgEntry."Reversed by Entry No." := NextEntryNo;
      IF CloseReversal THEN
        FALedgEntry."Reversed Entry No." := NextEntryNo;
      FALedgEntry.Reversed := TRUE;
      FALedgEntry.MODIFY;
      FALedgEntry."Reversed by Entry No." := 0;
      FALedgEntry."Reversed Entry No." := FALedgEntry."Entry No.";
      IF CloseReversal THEN
        FALedgEntry."Reversed by Entry No." := FALedgEntry."Entry No.";
      ReversalEntry.SETCURRENTKEY("Entry Type");
      ReversalEntry.SETRANGE("Entry Type",ReversalEntry."Entry Type"::"Fixed Asset");
      IF ReversalEntry.FIND('-') THEN
        REPEAT
          IF ReversalEntry."Entry No." = FALedgEntry."Entry No." THEN
            FALedgEntry.Description := ReversalEntry.Description;
        UNTIL ReversalEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SetMaintReversalMark@23(VAR ReversalEntry@1002 : Record 179;VAR MaintenanceLedgEntry@1000 : Record 5625;NextEntryNo@1001 : Integer);
    VAR
      MaintenanceLedgEntry2@1003 : Record 5625;
      CloseReversal@1004 : Boolean;
    BEGIN
      IF MaintenanceLedgEntry."Reversed Entry No." <> 0 THEN BEGIN
        MaintenanceLedgEntry2.GET(MaintenanceLedgEntry."Reversed Entry No.");
        IF MaintenanceLedgEntry2."Reversed Entry No." <> 0 THEN
          ERROR(Text005);
        CloseReversal := TRUE;
        MaintenanceLedgEntry2."Reversed by Entry No." := 0;
        MaintenanceLedgEntry2.Reversed := FALSE;
        MaintenanceLedgEntry2.MODIFY;
      END;
      MaintenanceLedgEntry."Reversed by Entry No." := NextEntryNo;
      IF CloseReversal THEN
        MaintenanceLedgEntry."Reversed Entry No." := NextEntryNo;
      MaintenanceLedgEntry.Reversed := TRUE;
      MaintenanceLedgEntry.MODIFY;
      MaintenanceLedgEntry."Reversed by Entry No." := 0;
      MaintenanceLedgEntry."Reversed Entry No." := MaintenanceLedgEntry."Entry No.";
      IF CloseReversal THEN
        MaintenanceLedgEntry."Reversed by Entry No." := MaintenanceLedgEntry."Entry No.";
      ReversalEntry.SETCURRENTKEY("Entry Type");
      ReversalEntry.SETRANGE("Entry Type",ReversalEntry."Entry Type"::Maintenance);
      IF ReversalEntry.FIND('-') THEN
        REPEAT
          IF ReversalEntry."Entry No." = MaintenanceLedgEntry."Entry No." THEN
            MaintenanceLedgEntry.Description := ReversalEntry.Description;
        UNTIL ReversalEntry.NEXT = 0;
    END;

    PROCEDURE SetNetdisposal@22(NetDisp2@1000 : Boolean);
    BEGIN
      FAInsertGLAcc.SetNetDisposal(NetDisp2);
    END;

    PROCEDURE SetLastEntryNo@24(FindLastEntry@1000 : Boolean);
    VAR
      FALedgEntry@1001 : Record 5601;
    BEGIN
      LastEntryNo := 0;
      IF FindLastEntry THEN
        IF FALedgEntry.FINDLAST THEN
          LastEntryNo := FALedgEntry."Entry No.";
    END;

    PROCEDURE SetGLRegisterNo@26(NewGLRegisterNo@1000 : Integer);
    BEGIN
      GLRegisterNo := NewGLRegisterNo;
    END;

    BEGIN
    END.
  }
}

