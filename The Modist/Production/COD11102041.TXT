OBJECT Codeunit 11102041 OM - Initialize
{
  OBJECT-PROPERTIES
  {
    Date=19/11/15;
    Time=12:00:00 PM;
    Version List=OMA10.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            DataConversion;
          END;

  }
  CODE
  {

    PROCEDURE Initialize@1(DatabaseType@1000 : 'Dev,Test,Pre-Prod,Prod');
    VAR
      Setup@1001 : Record 11102035;
      Status@1002 : Record 11102039;
      Flow@1003 : Record 11102040;
      RepositorySetup@1004 : Record 11102085;
      ProjectType@1005 : Record 11102097;
      TransportType@1006 : Record 11102098;
      MessageText@1007 : Text;
      NoOfUsersAdded@1008 : Integer;
      ctDatabaseInititialized@1009 : TextConst 'DEU=Object Manager initialized.;ENU=Object Manager initialized.;ESP=Object Manager initialized.;FRA=Object Manager initialized.;NLD=Object Manager geinitialiseerd.;DEA=Object Manager initialized.';
      ctUsersAdded@1010 : TextConst 'DEU=%1 users added.;ENU=%1 users added.;ESP=%1 users added.;FRA=%1 users added.;NLD=%1 gebruikers toegevoegd.;DEA=%1 users added.';
    BEGIN
      InsertRole('CONSULTANT', 'Consultant');
      InsertRole('DEVELOPER', 'Developer');

      InsertStatus(Status."Table Name"::Project, '10-CREATED', 'Created', Status.Type::" ", 'CONSULTANT');
      InsertStatus(Status."Table Name"::Project, '20-DEVELOP', 'Developing', Status.Type::Developing, 'DEVELOPER');
      InsertStatus(Status."Table Name"::Project, '30-TEST', 'Testing', Status.Type::Developing, 'CONSULTANT');
      InsertStatus(Status."Table Name"::Project, '40-REJECTED', 'Rejected', Status.Type::Developing, 'DEVELOPER');
      InsertStatus(Status."Table Name"::Project, '50-READY', 'Ready to Transport', Status.Type::Ready, 'CONSULTANT');
      InsertStatus(Status."Table Name"::Project, '60-TRANSPORTED', 'Transported', Status.Type::Ready, 'CONSULTANT');

      IF NOT Flow.GET(Flow."Table Name"::Project, 'SIMPLE') THEN BEGIN
        Flow."Table Name" := Flow."Table Name"::Project;
        Flow.Code := 'SIMPLE';
        Flow.VALIDATE(Description, 'Simple project without testing');
        Flow."Default Status" := '20-DEVELOP';
        Flow."Transport Status" := '60-TRANSPORTED';
        Flow.INSERT;
        InsertFlowStatus(0, 'SIMPLE', 10000, '20-DEVELOP', 'DEVELOPER', '', '');
        InsertFlowStatus(0, 'SIMPLE', 20000, '50-READY', 'CONSULTANT', '', '');
        InsertFlowStatus(0, 'SIMPLE', 30000, '60-TRANSPORTED', 'CONSULTANT', '', '');
      END;

      IF NOT Flow.GET(Flow."Table Name"::Project, 'TESTING') THEN BEGIN
        Flow."Table Name" := Flow."Table Name"::Project;
        Flow.Code := 'TESTING';
        Flow.VALIDATE(Description, 'Project with testing');
        Flow."Default Status" := '10-CREATED';
        Flow."Transport Status" := '60-TRANSPORTED';
        Flow.INSERT;
        InsertFlowStatus(0, 'TESTING', 10000, '10-CREATED', 'CONSULTANT', '', '');
        InsertFlowStatus(0, 'TESTING', 20000, '20-DEVELOP', 'DEVELOPER', '', '');
        InsertFlowStatus(0, 'TESTING', 30000, '30-TEST', 'CONSULTANT', '', '40-REJECTED|50-READY');
        InsertFlowStatus(0, 'TESTING', 40000, '40-REJECTED', 'DEVELOPER', '', '20-DEVELOP');
        InsertFlowStatus(0, 'TESTING', 50000, '50-READY', 'CONSULTANT', '30-TEST', '');
        InsertFlowStatus(0, 'TESTING', 60000, '60-TRANSPORTED', 'CONSULTANT', '', '');
      END;

      InsertStatus(Status."Table Name"::Transport, '10-PLANNING', 'Planning', Status.Type::" ", 'CONSULTANT');
      InsertStatus(Status."Table Name"::Transport, '20-DEVELOP', 'Developing', Status.Type::Developing, 'CONSULTANT');
      InsertStatus(Status."Table Name"::Transport, '30-READY', 'Ready', Status.Type::Ready, 'CONSULTANT');
      InsertStatus(Status."Table Name"::Transport, '40-TRANSPORTED', 'Transported', Status.Type::Ready, 'CONSULTANT');

      IF NOT Flow.GET(Flow."Table Name"::Transport, 'SIMPLE') THEN BEGIN
        Flow."Table Name" := Flow."Table Name"::Transport;
        Flow.Code := 'SIMPLE';
        Flow.VALIDATE(Description, 'Simple transport');
        Flow."Default Status" := '30-READY';
        Flow."Transport Status" := '40-TRANSPORTED';
        Flow.INSERT;
        InsertFlowStatus(1, 'SIMPLE', 10000, '30-READY', 'CONSULTANT', '', '');
        InsertFlowStatus(1, 'SIMPLE', 20000, '40-TRANSPORTED', 'CONSULTANT', '', '');
      END;

      IF NOT Flow.GET(Flow."Table Name"::Transport, 'PLANNING') THEN BEGIN
        Flow."Table Name" := Flow."Table Name"::Transport;
        Flow.Code := 'PLANNING';
        Flow.VALIDATE(Description, 'Transport with planning');
        Flow."Default Status" := '10-PLANNING';
        Flow."Transport Status" := '40-TRANSPORTED';
        Flow.INSERT;
        InsertFlowStatus(1, 'PLANNING', 10000, '10-PLANNING', 'CONSULTANT', '', '');
        InsertFlowStatus(1, 'PLANNING', 20000, '20-DEVELOP', 'CONSULTANT', '', '');
        InsertFlowStatus(1, 'PLANNING', 30000, '30-READY', 'CONSULTANT', '', '');
        InsertFlowStatus(1, 'PLANNING', 40000, '40-TRANSPORTED', 'CONSULTANT', '', '');
      END;

      InsertCommentType(0, 'COMMENT', 'Comment', 1, FALSE, FALSE);
      InsertCommentType(1, 'COMMENT', 'Comment', 1, FALSE, FALSE);
      InsertCommentType(2, 'COMMENT', 'Comment', 1, FALSE, FALSE);

      IF NOT ProjectType.GET('DEFAULT') THEN BEGIN
        ProjectType.Code := 'DEFAULT';
        ProjectType.Description := 'Default';
        ProjectType."Search Description" := 'DEFAULT';
        ProjectType."Project Flow Code" := 'SIMPLE';
        ProjectType.INSERT;
      END;

      IF NOT TransportType.GET('DEFAULT') THEN BEGIN
        TransportType.Code := 'DEFAULT';
        TransportType.Description := 'Default';
        TransportType."Search Description" := 'DEFAULT';
        TransportType.INSERT;
      END;

      Setup.CustomGet;
      Setup."Project Nos. Format" := 'P0001';
      Setup."Transport Nos. Format" := 'T0001';
      Setup."Role Shortcut 1" := 'DEVELOPER';
      Setup."Role Shortcut 2" := 'CONSULTANT';
      Setup."Project Description" := 'Project %1';
      Setup."Transport Description" := 'Transport %1 - <Day> <Month Text> <Year4>';
      Setup.Initialized := TRUE;

      FillIfExists(Setup."Compare Tool", 'C:\Program Files (x86)\Beyond Compare 2\BC2.exe');
      FillIfExists(Setup."Compare Tool", 'C:\Program Files\Beyond Compare 2\BC2.exe');
      FillIfExists(Setup."Compare Tool", 'C:\Program Files (x86)\Beyond Compare 3\BCompare.exe');
      FillIfExists(Setup."Compare Tool", 'C:\Program Files\Beyond Compare 3\BCompare.exe');

      Setup."Branch Nos. Format" := 'B0001';
      Setup."Branch Description" := 'Branch %1';
      Setup."Merge Nos. Format" := 'M0001';
      Setup."Merge Description" := 'Merge %1';
      Setup."Default Project Type" := 'DEFAULT';
      Setup."Default Transport Type" := 'DEFAULT';
      Setup."Data Convert to Version No." := Setup.OMAVersionNo;
      SetGuidelinesSettings(Setup);

      Setup.MODIFY;

      CASE DatabaseType OF
        DatabaseType::Dev :
          BEGIN
            Setup."Lock Object at Design" := TRUE;

            Setup."Save C/AL at Modification" := Setup."Save C/AL at Modification"::"If Changed";
            Setup."Save C/AL at Assigning" := Setup."Save C/AL at Assigning"::"If Changed";
            Setup."Save C/AL at Locking" := Setup."Save C/AL at Locking"::"If Changed";
            Setup."Save C/AL at Unlocking" := Setup."Save C/AL at Unlocking"::"If Changed";
            Setup."Save C/AL after Transporting" := Setup."Save C/AL after Transporting"::Yes;
            Setup."Save C/AL before Import Tr." := Setup."Save C/AL before Import Tr."::"If Changed";
            Setup."Save C/AL after Import Tr." := Setup."Save C/AL after Import Tr."::"If Changed";

            Setup."Confirm Changes at Imp. Tr." := FALSE;

            Setup."Reset Project Status at Import" := FALSE;
            Setup."Block Project at Imp. Trans." := Setup."Block Project at Imp. Trans."::" ";
            Setup."Block Transport at Imp. Trans." := Setup."Block Transport at Imp. Trans."::" ";
          END;

        DatabaseType::Test :
          BEGIN
            Setup."Transport Nos. Format" := 'TT0001';

            Setup."Lock Object at Design" := FALSE;
            Setup."Save C/AL at Modification" := Setup."Save C/AL at Modification"::No;
            Setup."Save C/AL at Assigning" := Setup."Save C/AL at Assigning"::No;
            Setup."Save C/AL at Locking" := Setup."Save C/AL at Locking"::No;
            Setup."Save C/AL at Unlocking" := Setup."Save C/AL at Unlocking"::No;
            Setup."Save C/AL after Transporting" := Setup."Save C/AL after Transporting"::No;
            Setup."Save C/AL before Import Tr." := Setup."Save C/AL before Import Tr."::Yes;
            Setup."Save C/AL after Import Tr." := Setup."Save C/AL after Import Tr."::Yes;
            Setup."Confirm Changes at Imp. Tr." := TRUE;
            Setup."Reset Project Status at Import" := TRUE;
            Setup."Block Project at Imp. Trans." := Setup."Block Project at Imp. Trans."::No;
            Setup."Block Transport at Imp. Trans." := Setup."Block Transport at Imp. Trans."::Yes;

          END;

        DatabaseType::"Pre-Prod" :
          BEGIN
            Setup."Lock Object at Design" := FALSE;
            Setup."Save C/AL at Modification" := Setup."Save C/AL at Modification"::No;
            Setup."Save C/AL at Assigning" := Setup."Save C/AL at Assigning"::No;
            Setup."Save C/AL at Locking" := Setup."Save C/AL at Locking"::No;
            Setup."Save C/AL at Unlocking" := Setup."Save C/AL at Unlocking"::No;
            Setup."Save C/AL after Transporting" := Setup."Save C/AL after Transporting"::No;
            Setup."Save C/AL before Import Tr." := Setup."Save C/AL before Import Tr."::Yes;
            Setup."Save C/AL after Import Tr." := Setup."Save C/AL after Import Tr."::Yes;
            Setup."Confirm Changes at Imp. Tr." := TRUE;
            Setup."Reset Project Status at Import" := FALSE;
            Setup."Block Project at Imp. Trans." := Setup."Block Project at Imp. Trans."::Yes;
            Setup."Block Transport at Imp. Trans." := Setup."Block Transport at Imp. Trans."::No;

          END;

        DatabaseType::Prod :
          BEGIN
            Setup."Lock Object at Design" := FALSE;
            Setup."Save C/AL at Modification" := Setup."Save C/AL at Modification"::No;
            Setup."Save C/AL at Assigning" := Setup."Save C/AL at Assigning"::No;
            Setup."Save C/AL at Locking" := Setup."Save C/AL at Locking"::No;
            Setup."Save C/AL at Unlocking" := Setup."Save C/AL at Unlocking"::No;
            Setup."Save C/AL after Transporting" := Setup."Save C/AL after Transporting"::No;
            Setup."Save C/AL before Import Tr." := Setup."Save C/AL before Import Tr."::Yes;
            Setup."Save C/AL after Import Tr." := Setup."Save C/AL after Import Tr."::Yes;
            Setup."Confirm Changes at Imp. Tr." := TRUE;
            Setup."Reset Project Status at Import" := FALSE;
            Setup."Block Project at Imp. Trans." := Setup."Block Project at Imp. Trans."::Yes;
            Setup."Block Transport at Imp. Trans." := Setup."Block Transport at Imp. Trans."::Yes;

          END;

      END;

      Setup.MODIFY;

      NoOfUsersAdded := AddUsers;
      AddProfile;

      IF NOT RepositorySetup.GET THEN BEGIN
        RepositorySetup.INIT;
        RepositorySetup.INSERT;
      END;

      IF NoOfUsersAdded > 0 THEN
        MessageText := ctDatabaseInititialized + '\' + STRSUBSTNO(ctUsersAdded, NoOfUsersAdded)
      ELSE
        MessageText := ctDatabaseInititialized;

      MESSAGE(MessageText);
    END;

    LOCAL PROCEDURE InsertStatus@2(Table@1000 : Option;Code@1001 : Code[20];Description@1002 : Text;Type@1003 : Integer;Role@1004 : Code[20]);
    VAR
      Status@1005 : Record 11102039;
    BEGIN
      Status."Table Name" := Table;
      Status.Code := Code;
      Status.Description := Description;
      Status.Type := Type;
      Status."Role Code" := Role;
      IF Status.INSERT THEN
        ;
    END;

    LOCAL PROCEDURE InsertFlowStatus@3(Table@1000 : Option;Flow@1001 : Code[20];LineNo@1002 : Integer;Status@1003 : Code[20];Role@1004 : Code[20];PreviousStatus@1005 : Code[100];NextStatus@1006 : Code[100]);
    VAR
      FlowStatus@1007 : Record 11102041;
    BEGIN
      FlowStatus."Table Name" := Table;
      FlowStatus."Flow Code" := Flow;
      FlowStatus."Line No." := LineNo;
      FlowStatus."Status Code" := Status;
      FlowStatus.Role := Role;
      FlowStatus."Previous Status" := PreviousStatus;
      FlowStatus."Next Status" := NextStatus;
      IF FlowStatus.INSERT THEN
        ;
    END;

    LOCAL PROCEDURE InsertRole@4(Code@1000 : Code[20];Description@1001 : Text);
    VAR
      Role@1002 : Record 11102055;
    BEGIN
      Role.Code := Code;
      Role.Description := Description;
      IF Role.INSERT THEN
        ;
    END;

    LOCAL PROCEDURE InsertCommentType@5(TableOption@1000 : Option;Code@1001 : Code[20];Description@1002 : Text;Order@1003 : Integer;Mandatory@1004 : Boolean;Print2@1005 : Boolean);
    VAR
      CommentType@1006 : Record 11102044;
    BEGIN
      CommentType."Table Name" := TableOption;
      CommentType.Code := Code;
      CommentType.Description := Description;
      CommentType.Order := Order;
      CommentType.Mandatory := Mandatory;
      CommentType.Print := Print2;
      IF CommentType.INSERT THEN
        ;
    END;

    LOCAL PROCEDURE GetUserName@6(UserCode@1000 : Code[50]) : Text;
    VAR
      User@1001 : Record 2000000120;
    BEGIN
      User.SETCURRENTKEY("User Name");
      User.SETFILTER("User Name", '@*\' + UserCode);
      IF User.FINDFIRST THEN
        EXIT(User."Full Name");
    END;

    PROCEDURE DataConversion@7();
    VAR
      Setup@1000 : Record 11102035;
      Project@1001 : Record 11102036;
      ProjectObject@1002 : Record 11102037;
      StatusHistory@1003 : Record 11102038;
      Transport@1004 : Record 11102043;
      CALHistoryObject@1005 : Record 11102052;
      RepositorySetup@1006 : Record 11102085;
      ProjectType@1007 : Record 11102097;
      TransportType@1008 : Record 11102098;
      Progressbar@1009 : Codeunit 11102044;
      ctUpgradingData@1010 : TextConst 'DEU=Upgrading data...;ENU=Upgrading data...;ESP=Upgrading data...;FRA=Upgrading data...;NLD=Data upgraden...;DEA=Upgrading data...';
    BEGIN
      Setup.GET;
      IF Setup."Data Convert to Version No." = Setup.OMAVersionNo THEN
        EXIT;

      Progressbar.Open(ctUpgradingData, 0);
      Progressbar.BarSize := 1;
      Progressbar.AddToBar(1);

      IF Setup."Data Convert to Version No." < 307 THEN BEGIN
        Setup.MODIFYALL("Data Convert to Version No.", 307);
        Transport.MODIFYALL("Update Version List", TRUE);
      END;

      IF Setup."Data Convert to Version No." < 501 THEN BEGIN
        Setup.MODIFYALL("Data Convert to Version No.", 501);
        IF Setup.FINDSET THEN
          REPEAT
            SetGuidelinesSettings(Setup);
            Setup.MODIFY;
          UNTIL Setup.NEXT = 0;
      END;

      IF Setup."Data Convert to Version No." < 601 THEN BEGIN
        Setup.MODIFYALL("Data Convert to Version No.", 601);
        SetTransferFieldTables;
      END;

      IF Setup."Data Convert to Version No." < 702 THEN BEGIN
        Setup.MODIFYALL("Data Convert to Version No.", 702);
        IF RepositorySetup.GET THEN BEGIN
          RepositorySetup.MODIFYALL("Auto Export Projects", TRUE);
          RepositorySetup.MODIFYALL("Auto Export Transports", TRUE);
          RepositorySetup.MODIFYALL("Synchronize Databases", TRUE);
        END;
      END;

      IF Setup."Data Convert to Version No." < 801 THEN BEGIN
        Setup.MODIFYALL("Data Convert to Version No.", 801);

        IF StatusHistory.FINDSET THEN
          REPEAT
            StatusHistory.GetDescription;
            StatusHistory.MODIFY;
          UNTIL StatusHistory.NEXT = 0;

        Transport.MODIFYALL("Status Type", Transport."Status Type"::Ready);

        Project.MODIFYALL("Project Type Code", 'DEFAULT');
        Transport.MODIFYALL("Transport Type Code", 'DEFAULT');

        Setup.MODIFYALL("Default Project Type", 'DEFAULT');
        Setup.MODIFYALL("Default Transport Type", 'DEFAULT');
        Setup.MODIFYALL("Check Wrong SETCURRENTKEY", TRUE);
        Setup.MODIFYALL("Check Usage Not Exis. Keys", TRUE);

        CALHistoryObject.MODIFYALL("C/AL Code Present", TRUE);
        ProjectObject.MODIFYALL("Include in Transport", TRUE);
      END;

      IF Setup."Data Convert to Version No." < 850 THEN BEGIN
        Setup.MODIFYALL("Data Convert to Version No.", 850);
        Setup.MODIFYALL("Check Field Types of Relations", TRUE);
        Setup.MODIFYALL("Deleted Field 141", TRUE);
        Setup.MODIFYALL("Check Missing <> in CALCDATE", TRUE);
        Setup.MODIFYALL("Check PAGE.RUN(Integer)", TRUE);
        Setup.MODIFYALL("Check Function Names", TRUE);
        Setup.MODIFYALL("Critical Guideline Checks", '114|119|130|134|140|154|157|159|164');
      END;

      IF Setup."Data Convert to Version No." < 900 THEN BEGIN
        Setup.MODIFYALL("Data Convert to Version No.", 900);
        AddProfile;
      END;

      IF Setup."Data Convert to Version No." < 901 THEN BEGIN
        Setup.MODIFYALL("Data Convert to Version No.", 901);

        Setup.MODIFYALL("Check Missing Relations", TRUE);
        Setup.MODIFYALL("Check Assignments", TRUE);
        Setup.MODIFYALL("Check Delete Relating Table", TRUE);
        Setup.MODIFYALL("Check Constants in Relations", TRUE);
        Setup.MODIFYALL("Check Transferfields", TRUE);

        Setup.MODIFYALL("Check Missing Image", TRUE);
        Setup.MODIFYALL("Check IS SERVICETIER", TRUE);
        Setup.MODIFYALL("Check Empty Action", TRUE);

      END;

      IF Setup."Data Convert to Version No." < 904 THEN BEGIN

        IF ProjectType.FINDSET THEN
          REPEAT
            IF ProjectType."Deleted Field 10" THEN BEGIN
              ProjectType."Check Guid. at Set Ready Pr." := ProjectType."Check Guid. at Set Ready Pr."::"All Checks";
              ProjectType.MODIFY;
            END;
          UNTIL ProjectType.NEXT = 0;

        IF Project.FINDSET THEN
          REPEAT
            IF Project."Deleted Field 33" THEN BEGIN
              Project."Check Guidelines" := Project."Check Guidelines"::"All Checks";
              Project.MODIFY;
            END;
          UNTIL ProjectType.NEXT = 0;

        IF TransportType.FINDSET THEN
          REPEAT
            IF TransportType."Deleted Field 31" THEN BEGIN
              TransportType."Check Guidelines before Trans." := TransportType."Check Guidelines before Trans."::"All Checks";
              TransportType.MODIFY;
            END;
          UNTIL TransportType.NEXT = 0;

        IF Transport.FINDSET THEN
          REPEAT
            IF Transport."Deleted Field 36" THEN BEGIN
              Transport."Check Guidelines" := Transport."Check Guidelines"::"All Checks";
              Transport.MODIFY;
            END;
          UNTIL Transport.NEXT = 0;

        Setup.MODIFYALL("Data Convert to Version No.", 904);
      END;

      IF Setup."Data Convert to Version No." < 1000 THEN BEGIN
        Setup.MODIFYALL("Check Lookup Page", TRUE);
        Setup.MODIFYALL("Check Data Caption Fields", FALSE);
        Setup.MODIFYALL("Check TextConst", TRUE);
        Setup.MODIFYALL("Data Convert to Version No.", 1000);
      END;

      IF Setup."Data Convert to Version No." < Setup.OMAVersionNo THEN
        Setup.MODIFYALL("Data Convert to Version No.", Setup.OMAVersionNo);

      Progressbar.Close;
    END;

    LOCAL PROCEDURE SetGuidelinesSettings@8(VAR Setup@1000 : Record 11102035);
    BEGIN
      Setup."Check Wrong Indent" := TRUE;
      Setup."Check Empty Lines" := TRUE;
      Setup."Check Wrong IF THEN Use" := TRUE;
      Setup."Check Redundant Spaces" := TRUE;
      Setup."Check = TRUE" := TRUE;
      Setup."Check = FALSE" := TRUE;
      Setup."Check Table Name in SETRANGE" := TRUE;
      Setup."Check Redundant Table Name" := TRUE;
      Setup."Check Missing Spaces" := TRUE;
      Setup."Check Unnecessary BEGIN END" := TRUE;
      Setup."Check Wrong Line Break" := TRUE;
      Setup."Check Redundant ()" := TRUE;
      Setup."Check Missing ;" := TRUE;
      Setup."Check FIND(-)" := TRUE;
      Setup."Check Double Variable Names" := TRUE;
      Setup."Check Unnecessary Properties T" := TRUE;
      Setup."Check TODO Comment" := TRUE;
      Setup."Check Text in Code" := TRUE;
      Setup."Check Wrong SETCURRENTKEY" := TRUE;
      Setup."Check Missing <> in CALCDATE" := TRUE;
      Setup."Check Missing Image" := TRUE;
      Setup."Check Double Access Keys" := TRUE;
      Setup."Check Double Shortcut Keys" := TRUE;
      Setup."Check Lowercase Shortcut Keys" := TRUE;
      Setup."Check Missing Captions" := TRUE;
      Setup."Check Unnecessary Properties L" := TRUE;
      Setup."Check Usage Not Exis. Keys" := TRUE;
      Setup."Deleted Field 141" := TRUE;
      Setup."Check Pr. Key in Relation" := TRUE;
      Setup."Check Key Fields Int. or Code" := TRUE;
      Setup."Check NotBlank on Key Fields" := TRUE;
      Setup."Check Testfield on Key Fields" := FALSE;
      Setup."Check Flowfields Not Editable" := TRUE;
      Setup."Check Option Strings" := TRUE;
      Setup."Check Field Types of Relations" := TRUE;
      Setup."Check tmp in Name Temp Rec." := TRUE;
      Setup."Check Variable Names" := TRUE;
      Setup."Check Object Names" := TRUE;
      Setup."Check Field Names" := TRUE;
      Setup."Check Reserved Names" := TRUE;
      Setup."Check MARK" := FALSE;
      Setup."Check PAGE.RUN(Integer)" := TRUE;
      Setup."Check Function Names" := TRUE;
      Setup."Mandatory Languages" := 'ENU';
      Setup."Space after Comma" := Setup."Space after Comma"::" ";

      Setup."Check Missing Relations" := TRUE;
      Setup."Check Assignments" := TRUE;
      Setup."Check Delete Relating Table" := TRUE;
      Setup."Check Constants in Relations" := TRUE;
      Setup."Check Code in OnLookup" := FALSE;
      Setup."Check Comments with Brackets" := FALSE;
      Setup."Check Transferfields" := TRUE;

      Setup."Check Missing Image" := TRUE;
      Setup."Check IS SERVICETIER" := TRUE;
      Setup."Check Empty Action" := TRUE;
      Setup."Check Lookup Page" := TRUE;
      Setup."Check Data Caption Fields" := FALSE;
      Setup."Check TextConst" := TRUE;
      Setup."Check AltSearchField" := FALSE;

      Setup."Critical Guideline Checks" := '114|119|130|134|140|154|157|159|164|174|179|182';
    END;

    PROCEDURE SetTransferFieldTables@9();
    BEGIN
      SetTransferFieldTable(15, 376);
      SetTransferFieldTable(18, 5050);
      SetTransferFieldTable(21, 382);
      SetTransferFieldTable(23, 5050);
      SetTransferFieldTable(36, 110);
      SetTransferFieldTable(36, 112);
      SetTransferFieldTable(36, 114);
      SetTransferFieldTable(36, 426);
      SetTransferFieldTable(36, 5107);
      SetTransferFieldTable(36, 6660);
      SetTransferFieldTable(37, 111);
      SetTransferFieldTable(37, 113);
      SetTransferFieldTable(37, 115);
      SetTransferFieldTable(37, 427);
      SetTransferFieldTable(37, 5108);
      SetTransferFieldTable(37, 6661);
      SetTransferFieldTable(38, 120);
      SetTransferFieldTable(38, 122);
      SetTransferFieldTable(38, 124);
      SetTransferFieldTable(38, 428);
      SetTransferFieldTable(38, 5109);
      SetTransferFieldTable(38, 6650);
      SetTransferFieldTable(39, 121);
      SetTransferFieldTable(39, 123);
      SetTransferFieldTable(39, 125);
      SetTransferFieldTable(39, 429);
      SetTransferFieldTable(39, 5110);
      SetTransferFieldTable(39, 6651);
      SetTransferFieldTable(43, 5125);
      SetTransferFieldTable(44, 5126);
      SetTransferFieldTable(81, 751);
      SetTransferFieldTable(83, 753);
      SetTransferFieldTable(110, 36);
      SetTransferFieldTable(111, 37);
      SetTransferFieldTable(112, 36);
      SetTransferFieldTable(112, 426);
      SetTransferFieldTable(113, 37);
      SetTransferFieldTable(113, 427);
      SetTransferFieldTable(114, 36);
      SetTransferFieldTable(114, 426);
      SetTransferFieldTable(115, 37);
      SetTransferFieldTable(115, 427);
      SetTransferFieldTable(120, 38);
      SetTransferFieldTable(121, 39);
      SetTransferFieldTable(122, 38);
      SetTransferFieldTable(123, 39);
      SetTransferFieldTable(124, 38);
      SetTransferFieldTable(125, 39);
      SetTransferFieldTable(133, 137);
      SetTransferFieldTable(270, 5050);
      SetTransferFieldTable(273, 275);
      SetTransferFieldTable(273, 1295);
      SetTransferFieldTable(274, 276);
      SetTransferFieldTable(274, 1296);
      SetTransferFieldTable(295, 297);
      SetTransferFieldTable(296, 298);
      SetTransferFieldTable(302, 304);
      SetTransferFieldTable(303, 305);
      SetTransferFieldTable(336, 337);
      SetTransferFieldTable(336, 6550);
      SetTransferFieldTable(337, 336);
      SetTransferFieldTable(337, 99008533);
      SetTransferFieldTable(339, 343);
      SetTransferFieldTable(357, 5106);
      SetTransferFieldTable(337, 7360);
      SetTransferFieldTable(379, 383);
      SetTransferFieldTable(380, 383);
      SetTransferFieldTable(382, 21);
      SetTransferFieldTable(383, 379);
      SetTransferFieldTable(383, 380);
      SetTransferFieldTable(414, 416);
      SetTransferFieldTable(415, 417);
      SetTransferFieldTable(417, 415);
      SetTransferFieldTable(418, 420);
      SetTransferFieldTable(419, 415);
      SetTransferFieldTable(419, 421);
      SetTransferFieldTable(420, 418);
      SetTransferFieldTable(421, 419);
      SetTransferFieldTable(426, 430);
      SetTransferFieldTable(427, 431);
      SetTransferFieldTable(428, 432);
      SetTransferFieldTable(429, 433);
      SetTransferFieldTable(430, 426);
      SetTransferFieldTable(431, 427);
      SetTransferFieldTable(432, 428);
      SetTransferFieldTable(433, 429);
      SetTransferFieldTable(434, 426);
      SetTransferFieldTable(434, 438);
      SetTransferFieldTable(435, 37);
      SetTransferFieldTable(435, 427);
      SetTransferFieldTable(435, 439);
      SetTransferFieldTable(436, 428);
      SetTransferFieldTable(436, 440);
      SetTransferFieldTable(437, 39);
      SetTransferFieldTable(437, 429);
      SetTransferFieldTable(437, 441);
      SetTransferFieldTable(438, 434);
      SetTransferFieldTable(439, 435);
      SetTransferFieldTable(440, 436);
      SetTransferFieldTable(441, 437);
      SetTransferFieldTable(454, 456);
      SetTransferFieldTable(455, 457);
      SetTransferFieldTable(751, 81);
      SetTransferFieldTable(753, 83);
      SetTransferFieldTable(900, 910);
      SetTransferFieldTable(901, 911);
      SetTransferFieldTable(910, 900);
      SetTransferFieldTable(911, 901);
      SetTransferFieldTable(950, 954);
      SetTransferFieldTable(951, 955);
      SetTransferFieldTable(952, 956);
      SetTransferFieldTable(953, 957);
      SetTransferFieldTable(1293, 1294);
      SetTransferFieldTable(1294, 1293);
      SetTransferFieldTable(1504, 1530);
      SetTransferFieldTable(1511, 1514);
      SetTransferFieldTable(1525, 1526);
      SetTransferFieldTable(1701, 1704);
      SetTransferFieldTable(1701, 5127);
      SetTransferFieldTable(1702, 1705);
      SetTransferFieldTable(1702, 5128);
      SetTransferFieldTable(1704, 1701);
      SetTransferFieldTable(1705, 1702);
      SetTransferFieldTable(5050, 18);
      SetTransferFieldTable(5050, 23);
      SetTransferFieldTable(5050, 270);
      SetTransferFieldTable(5107, 36);
      SetTransferFieldTable(5108, 37);
      SetTransferFieldTable(5109, 38);
      SetTransferFieldTable(5110, 39);
      SetTransferFieldTable(5126, 44);
      SetTransferFieldTable(5128, 1702);
      SetTransferFieldTable(5766, 5772);
      SetTransferFieldTable(5766, 7340);
      SetTransferFieldTable(5766, 7342);
      SetTransferFieldTable(5766, 7344);
      SetTransferFieldTable(5767, 5773);
      SetTransferFieldTable(5767, 7341);
      SetTransferFieldTable(5767, 7343);
      SetTransferFieldTable(5767, 7345);
      SetTransferFieldTable(5900, 5990);
      SetTransferFieldTable(5900, 5992);
      SetTransferFieldTable(5900, 5994);
      SetTransferFieldTable(5901, 5989);
      SetTransferFieldTable(5902, 5991);
      SetTransferFieldTable(5902, 5993);
      SetTransferFieldTable(5902, 5995);
      SetTransferFieldTable(5964, 5971);
      SetTransferFieldTable(5965, 5970);
      SetTransferFieldTable(6507, 6509);
      SetTransferFieldTable(6550, 336);
      SetTransferFieldTable(6650, 38);
      SetTransferFieldTable(6550, 337);
      SetTransferFieldTable(6651, 39);
      SetTransferFieldTable(6660, 36);
      SetTransferFieldTable(6661, 37);
      SetTransferFieldTable(7316, 7318);
      SetTransferFieldTable(7317, 7319);
      SetTransferFieldTable(7321, 7323);
      SetTransferFieldTable(8627, 79);
      SetTransferFieldTable(99000775, 5415);
      SetTransferFieldTable(99000776, 5416);
      SetTransferFieldTable(99000802, 5411);
      SetTransferFieldTable(99000803, 5412);
      SetTransferFieldTable(99000805, 5413);
    END;

    LOCAL PROCEDURE SetTransferFieldTable@10(FromTableNo@1000 : Integer;ToTableNo@1001 : Integer);
    VAR
      CheckTransferfields@1002 : Record 11102083;
      Object@1003 : Record 2000000001;
    BEGIN
      IF Object.GET(Object.Type::Table, '', FromTableNo) AND
         Object.GET(Object.Type::Table, '', ToTableNo)
      THEN
        IF NOT CheckTransferfields.GET(FromTableNo, ToTableNo) THEN BEGIN
          CheckTransferfields."From Table No." := FromTableNo;
          CheckTransferfields."To Table No." := ToTableNo;
          CheckTransferfields.INSERT;
        END;
    END;

    LOCAL PROCEDURE FillIfExists@11(VAR FieldToFill@1000 : Text;FileName@1001 : Text);
    BEGIN
      IF EXISTS(FileName) THEN
        FieldToFill := FileName;
    END;

    PROCEDURE AddUsers@12() : Integer;
    VAR
      OMUser@1000 : Record 11102056;
      Object@1001 : Record 2000000001;
      Progressbar@1002 : Codeunit 11102044;
      RecRef@1003 : RecordRef;
      FldRef@1004 : FieldRef;
      NoOfUsersAdded@1005 : Integer;
      ctAddingUsers@1006 : TextConst 'DEU=Adding users...;ENU=Adding users...;ESP=Adding users...;FRA=Adding users...;NLD=Gebuikers toevoegen...;DEA=Adding users...';
    BEGIN
      IF Object.GET(Object.Type::Table, '', DATABASE::"User Setup") THEN BEGIN

        RecRef.OPEN(DATABASE::"User Setup");
        Progressbar.Open(ctAddingUsers, 0);
        Progressbar.BarSize := RecRef.COUNT;
        IF RecRef.FINDSET THEN
          REPEAT
            Progressbar.AddToBar(1);
            FldRef := RecRef.FIELD(1);

            IF NOT OMUser.GET(FldRef.VALUE) THEN BEGIN
              OMUser.Code := FldRef.VALUE;
              OMUser."Short User Id" := FldRef.VALUE;
              OMUser.Name := GetUserName(FORMAT(FldRef.VALUE));
              OMUser.INSERT;

              NoOfUsersAdded += 1;

            END;
          UNTIL RecRef.NEXT = 0;
        Progressbar.Close;
        RecRef.CLOSE;

      END;

      EXIT(NoOfUsersAdded);
    END;

    PROCEDURE EmptyDeletedFieldsAndTables@13();
    VAR
      Object@1000 : Record 2000000001;
      Field@1001 : Record 2000000041;
      Progressbar@1002 : Codeunit 11102044;
      EmptyRecRef@1003 : RecordRef;
      RecRef@1004 : RecordRef;
      EmptyFldRef@1005 : FieldRef;
      FldRef@1006 : FieldRef;
      ctEmptyDeletedFieldsAndTables@1007 : TextConst 'DEU=Emptying deleted fields and tables...;ENU=Emptying deleted fields and tables...;ESP=Emptying deleted fields and tables...;FRA=Emptying deleted fields and tables...;NLD=Verwijderde velden en tabellen leegmaken...;DEA=Emptying deleted fields and tables...';
    BEGIN
      Progressbar.Open(ctEmptyDeletedFieldsAndTables, 0);
      Progressbar.BarSize := Field.COUNT;

      Field.SETRANGE(TableNo, DATABASE::"OM - Setup", DATABASE::"OM - NAV Database");
      Field.SETFILTER(FieldName, 'Deleted Field*');

      Progressbar.BarSize := Field.COUNT;
      Progressbar.UseRange(0, 80);

      IF Field.FINDSET THEN
        REPEAT
          Progressbar.AddToBar(1);

          EmptyRecRef.OPEN(Field.TableNo);
          EmptyFldRef := EmptyRecRef.FIELD(Field."No.");

          RecRef.OPEN(Field.TableNo);
          FldRef := RecRef.FIELD(Field."No.");
          IF FORMAT(FldRef.TYPE) <> 'BLOB' THEN
            FldRef.SETFILTER('<>%1', EmptyFldRef.VALUE);
          IF RecRef.FINDSET THEN
            REPEAT
              FldRef := RecRef.FIELD(Field."No.");
              FldRef.VALUE := EmptyFldRef.VALUE;
              RecRef.MODIFY;
            UNTIL RecRef.NEXT = 0;

          RecRef.CLOSE;
          EmptyRecRef.CLOSE;
        UNTIL Field.NEXT = 0;

      Object.SETRANGE(Type, Object.Type::Table);
      Object.SETFILTER(Name, 'OM - Deleted Table *');

      Progressbar.BarSize := Object.COUNT;
      Progressbar.UseRange(80, 100);
      IF Object.FINDSET THEN
        REPEAT

          Progressbar.AddToBar(1);

          RecRef.OPEN(Object.ID);
          RecRef.DELETEALL;
          RecRef.CLOSE;
        UNTIL Object.NEXT = 0;

      Progressbar.Close;
    END;

    LOCAL PROCEDURE AddProfile@14();
    VAR
      Object@1000 : Record 2000000001;
      RecRef@1001 : RecordRef;
      FldRef@1002 : FieldRef;
    BEGIN
      IF Object.GET(Object.Type::Table, '', DATABASE::Profile) THEN BEGIN

        RecRef.OPEN(DATABASE::Profile);
        FldRef := RecRef.FIELD(3);
        FldRef.SETRANGE('DEVELOPER');
        IF RecRef.ISEMPTY THEN BEGIN
          RecRef.RESET;
          FldRef.VALUE := 'DEVELOPER';

          FldRef := RecRef.FIELD(12);
          FldRef.VALUE := 'Developer';

          FldRef := RecRef.FIELD(15);
          FldRef.VALUE := PAGE::"OM - Developer Role Center";

          RecRef.INSERT;

        END;
      END;
    END;

    BEGIN
    END.
  }
}

