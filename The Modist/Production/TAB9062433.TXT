OBJECT Table 9062433 Panel Property
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Parent Table ID");
               Rec.TESTFIELD("Parent Code");
               CheckModifyPermission();
               IF (Rec.ID = 0) THEN
                 Rec.VALIDATE(ID, NewId());
               IF (Rec."Parent Table ID" IN [DATABASE::Panel, DATABASE::Margin, DATABASE::"Tile Group", DATABASE::Tile,
                   DATABASE::"Tile Frame"]) THEN
                 Rec.VALIDATE("Property Table ID", Rec."Parent Table ID");
               IF (PanelToolkit.PanelTable(Rec."Parent Table ID")) THEN
                 PanelTimestampToolkit.Add(Rec."Parent Code");
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               CheckModifyPermission();
               IF (PanelToolkit.PanelTable(Rec."Parent Table ID")) THEN
                 PanelTimestampToolkit.Add(Rec."Parent Code");
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               CheckModifyPermission();

               PanelPropertyField.RESET();
               PanelPropertyField.SETRANGE("Parent Table ID", Rec."Parent Table ID");
               PanelPropertyField.SETRANGE("Parent Code", Rec."Parent Code");
               PanelPropertyField.SETRANGE("Parent ID", Rec."Parent ID");
               PanelPropertyField.SETRANGE("Parent ID 2", Rec."Parent ID 2");
               PanelPropertyField.SETRANGE("Panel Property ID", Rec.ID);
               PanelPropertyField.DELETEALL(TRUE);

               PanelPropertyValue.RESET();
               PanelPropertyValue.SETRANGE("Parent Table ID", Rec."Parent Table ID");
               PanelPropertyValue.SETRANGE("Parent Code", Rec."Parent Code");
               PanelPropertyValue.SETRANGE("Parent ID", Rec."Parent ID");
               PanelPropertyValue.SETRANGE("Parent ID 2", Rec."Parent ID 2");
               PanelPropertyValue.SETRANGE("Panel Property ID", Rec.ID);
               PanelPropertyValue.DELETEALL(TRUE);

               TableFilterManagement.DeleteTableFilter(DATABASE::"Panel Property", Rec.GETPOSITION(FALSE));

               IF (PanelToolkit.PanelTable(Rec."Parent Table ID")) THEN
                 PanelTimestampToolkit.Add(Rec."Parent Code");
             END;

    OnRename=VAR
               eRenameBlocked@1000000000 : TextConst 'ENU=You can''t rename "%1" record.;ENG=You can''t rename "%1" record.';
             BEGIN
               CheckModifyPermission();
               ProcessRename(xRec."Parent Table ID", xRec."Parent Code", xRec."Parent ID", xRec."Parent ID 2", xRec.ID,
                 Rec."Parent Table ID", Rec."Parent Code", Rec."Parent ID", Rec."Parent ID 2", Rec.ID);
             END;

    CaptionML=[ENU=Panel Property;
               ENG=Panel Property];
    LookupPageID=Page9062459;
    DrillDownPageID=Page9062459;
  }
  FIELDS
  {
    { 1   ;   ;Parent Table ID     ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   CaptionML=[ENU=Parent Table ID;
                                                              ENG=Parent Table ID] }
    { 2   ;   ;Parent Code         ;Code20        ;TableRelation=Panel;
                                                   CaptionML=[ENU=Parent Code;
                                                              ENG=Parent Code] }
    { 3   ;   ;Parent ID           ;Integer       ;CaptionML=[ENU=Parent ID;
                                                              ENG=Parent ID] }
    { 4   ;   ;Parent ID 2         ;Integer       ;CaptionML=[ENU=Parent ID 2;
                                                              ENG=Parent ID 2] }
    { 7   ;   ;ID                  ;Integer       ;CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 10  ;   ;Property Table ID   ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Property Table ID" <> xRec."Property Table ID") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Property ID", 0);
                                                                  Rec.VALIDATE("Source Property ID", 0);
                                                                END;
                                                                Rec.CALCFIELDS("Property Table Name");
                                                              END;

                                                   CaptionML=[ENU=Property Table ID;
                                                              ENG=Property Table ID] }
    { 11  ;   ;Property Table Name ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Property Table ID)));
                                                   CaptionML=[ENU=Property Table Name;
                                                              ENG=Property Table Name];
                                                   Editable=No }
    { 12  ;   ;Property ID         ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Property Table ID));
                                                   OnValidate=BEGIN
                                                                Rec.CALCFIELDS("Property Name");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PropertyLookup();
                                                            END;

                                                   CaptionML=[ENU=Property ID;
                                                              ENG=Property ID] }
    { 13  ;   ;Property Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field.FieldName WHERE (TableNo=FIELD(Property Table ID),
                                                                                             No.=FIELD(Property ID)));
                                                   CaptionML=[ENU=Property Name;
                                                              ENG=Property Name];
                                                   Editable=No }
    { 20  ;   ;Parent Table Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Parent Table ID)));
                                                   CaptionML=[ENU=Parent Table Name;
                                                              ENG=Parent Table Name];
                                                   Editable=No }
    { 25  ;   ;Table Filter        ;Text250       ;OnValidate=BEGIN
                                                                IF (Rec."Table Filter" <> xRec."Table Filter") THEN
                                                                BEGIN
                                                                  IF (Rec."Table Filter" <> '') THEN
                                                                  BEGIN
                                                                    Rec.TESTFIELD(Type, Rec.Type::Table);
                                                                    Rec.TESTFIELD("Table ID");
                                                                  END;
                                                                  UpdateDescription();
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              TableFilterLookup();
                                                            END;

                                                   CaptionML=[ENU=Table Filter;
                                                              ENG=Table Filter] }
    { 30  ;   ;Type                ;Option        ;InitValue=Table;
                                                   OnValidate=VAR
                                                                lTile@1000000000 : Record 9062367;
                                                              BEGIN
                                                                IF (Rec.Type <> xRec.Type) THEN
                                                                BEGIN
                                                                  IF (Rec.Type <> Rec.Type::Table) THEN
                                                                    Rec.VALIDATE("Table ID", 0);
                                                                  IF (Rec.Type = Rec.Type::Property) THEN
                                                                    Rec.VALIDATE("Source Property ID", lTile.FIELDNO(Info))
                                                                  ELSE
                                                                    Rec.VALIDATE("Source Property ID", 0);
                                                                  UpdateDescription();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=" ,Table,Property";
                                                                    ENG=" ,Table,Property"];
                                                   OptionString=[ ,Table,Property] }
    { 31  ;   ;Table ID            ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Table ID" <> xRec."Table ID") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Table Filter", '');
                                                                  TableFilterManagement.DeleteTableFilterForField(DATABASE::"Panel Property", Rec.GETPOSITION(FALSE), Rec.FIELDNO("Table Filter"));//Rec.FIELDNO("Table ID")); DOC PC 11/03/2014
                                                                  UpdateFields(Rec.FIELDNO("Table ID"));
                                                                  UpdateDescription();
                                                                END;
                                                                Rec.CALCFIELDS("Table Name");
                                                              END;

                                                   CaptionML=[ENU=Table ID;
                                                              ENG=Table ID] }
    { 32  ;   ;Table Name          ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Table ID)));
                                                   CaptionML=[ENU=Table Name;
                                                              ENG=Table Name];
                                                   Editable=No }
    { 40  ;   ;Formula             ;Text250       ;CaptionML=[ENU=Formula;
                                                              ENG=Formula] }
    { 51  ;   ;Fields              ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Panel Property Field" WHERE (Parent Code=FIELD(Parent Code),
                                                                                                   Parent ID=FIELD(Parent ID),
                                                                                                   Parent ID 2=FIELD(Parent ID 2),
                                                                                                   Panel Property ID=FIELD(ID)));
                                                   CaptionML=[ENU=Fields;
                                                              ENG=Fields];
                                                   Editable=No }
    { 60  ;   ;Static Value        ;Text250       ;CaptionML=[ENU=Static Value;
                                                              ENG=Static Value] }
    { 62  ;   ;Static Image        ;BLOB          ;CaptionML=[ENU=Static Image;
                                                              ENG=Static Image];
                                                   SubType=Bitmap }
    { 63  ;No ;Static Bitmap       ;BLOB          ;CaptionML=[ENU=Static Bitmap;
                                                              ENG=Static Bitmap];
                                                   SubType=Bitmap }
    { 70  ;   ;Panel Description   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Panel.Description WHERE (Code=FIELD(Parent Code)));
                                                   CaptionML=[ENU=Panel Description;
                                                              ENG=Panel Description];
                                                   Editable=No }
    { 72  ;   ;Panel Data Name     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Panel Data".Description WHERE (Panel Code=FIELD(Parent Code),
                                                                                                      ID=FIELD(Parent ID)));
                                                   CaptionML=[ENU=Panel Data Name;
                                                              ENG=Panel Data Name];
                                                   Editable=No }
    { 73  ;   ;Panel Tile Group Text;Text100      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Tile Group".Text WHERE (Panel Code=FIELD(Parent Code),
                                                                                               ID=FIELD(Parent ID)));
                                                   CaptionML=[ENU=Panel Tile Group Text;
                                                              ENG=Panel Tile Group Text];
                                                   Editable=No }
    { 74  ;   ;Panel Tile Text     ;Text100       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Tile.Text WHERE (Panel Code=FIELD(Parent Code),
                                                                                       ID=FIELD(Parent ID)));
                                                   CaptionML=[ENU=Panel Tile Text;
                                                              ENG=Panel Tile Text];
                                                   Editable=No }
    { 80  ;   ;Values              ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Panel Property Value" WHERE (Parent Code=FIELD(Parent Code),
                                                                                                   Parent ID=FIELD(Parent ID),
                                                                                                   Parent ID 2=FIELD(Parent ID 2),
                                                                                                   Panel Property ID=FIELD(ID)));
                                                   CaptionML=[ENU=Values;
                                                              ENG=Values];
                                                   Editable=No }
    { 90  ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 100 ;   ;Calculation         ;Option        ;OnValidate=BEGIN
                                                                IF (Rec.Calculation <> xRec.Calculation) THEN
                                                                  UpdateDescription();
                                                              END;

                                                   CaptionML=[ENU=Calculation;
                                                              ENG=Calculation];
                                                   OptionCaptionML=[ENU=" ,First,Last,Sum,Count";
                                                                    ENG=" ,First,Last,Sum,Count"];
                                                   OptionString=[ ,First,Last,Sum,Count] }
    { 120 ;   ;Page ID             ;Integer       ;TableRelation=Object.ID WHERE (Type=CONST(Page));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Page ID" <> xRec."Page ID") THEN
                                                                  UpdateDescription();
                                                                Rec.CALCFIELDS("Table Name");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (ObjectFieldToolkit.PageLookup(Rec."Page ID")) THEN
                                                                Rec.VALIDATE("Page ID");
                                                            END;

                                                   CaptionML=[ENU=Page ID;
                                                              ENG=Page ID] }
    { 121 ;   ;Page Name           ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Page),
                                                                                                  Object ID=FIELD(Page ID)));
                                                   CaptionML=[ENU=Page Name;
                                                              ENG=Page Name];
                                                   Editable=No }
    { 122 ;   ;Run Page Modally    ;Boolean       ;CaptionML=[ENU=Run Page Modally;
                                                              ENG=Run Page Modally] }
    { 130 ;   ;Source Property ID  ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Property Table ID));
                                                   OnValidate=BEGIN
                                                                Rec.CALCFIELDS("Source Property Name");
                                                                UpdateDescription();
                                                              END;

                                                   OnLookup=BEGIN
                                                              PropertyLookup();
                                                            END;

                                                   CaptionML=[ENU=Source Property ID;
                                                              ENG=Source Property ID] }
    { 131 ;   ;Source Property Name;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field.FieldName WHERE (TableNo=FIELD(Property Table ID),
                                                                                             No.=FIELD(Source Property ID)));
                                                   CaptionML=[ENU=Source Property Name;
                                                              ENG=Source Property Name];
                                                   Editable=No }
    { 140 ;   ;Rounding            ;Decimal       ;CaptionML=[ENU=Rounding;
                                                              ENG=Rounding];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 141 ;   ;Multiplier          ;Decimal       ;CaptionML=[ENU=Multiplier;
                                                              ENG=Multiplier];
                                                   DecimalPlaces=0:5 }
    { 150 ;   ;Prefix              ;Text50        ;CaptionML=[ENU=Prefix;
                                                              ENG=Prefix] }
    { 151 ;   ;Suffix              ;Text50        ;CaptionML=[ENU=Suffix;
                                                              ENG=Suffix] }
    { 160 ;   ;Record by Record    ;Boolean       ;CaptionML=[ENU=Record by Record;
                                                              ENG=Record by Record] }
    { 170 ;   ;Quick Report Code   ;Code60        ;TableRelation="Quick Report Header";
                                                   OnValidate=BEGIN
                                                                IF (Rec."Quick Report Code" <> Rec."Quick Report Code") THEN
                                                                BEGIN
                                                                  IF (Rec."Quick Report Code" <> '') THEN
                                                                    Rec.TESTFIELD("Data Source", Rec."Data Source"::"Quick Report");
                                                                  UpdateDescription();
                                                                END;
                                                                Rec.CALCFIELDS("Quick Report Name");
                                                              END;

                                                   CaptionML=[ENU=Quick Report Code;
                                                              ENG=Quick Report Code] }
    { 171 ;   ;Quick Report Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Quick Report Header".Name WHERE (Code=FIELD(Quick Report Code)));
                                                   CaptionML=[ENU=Quick Report Name;
                                                              ENG=Quick Report Name];
                                                   Editable=No }
    { 180 ;   ;Data Source         ;Option        ;InitValue=Table;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Data Source" <> xRec."Data Source") THEN
                                                                BEGIN
                                                                  IF (Rec."Data Source" <> Rec."Data Source"::Table) THEN
                                                                    Rec.VALIDATE("Table ID", 0);
                                                                  IF (Rec."Data Source" <> Rec."Data Source"::"Quick Report") THEN
                                                                    Rec.VALIDATE("Quick Report Code", '');
                                                                  UpdateDescription();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Data Source;
                                                              ENG=Data Source];
                                                   OptionCaptionML=[ENU=" ,Table,Quick Report";
                                                                    ENG=" ,Table,Quick Report"];
                                                   OptionString=[ ,Table,Quick Report] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Parent Table ID,Parent Code,Parent ID,Parent ID 2,ID;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Panel@1000000007 : Record 9062363;
      PanelPropertyField@1000000001 : Record 9062443;
      PanelPropertyValue@1000000003 : Record 9062444;
      EnhancedPermissionsMgt@1000000008 : Codeunit 9062277;
      ObjectFieldToolkit@1000000002 : Codeunit 9062343;
      PanelTimestampToolkit@1000000005 : Codeunit 9062385;
      PanelToolkit@1000000006 : Codeunit 9062320;
      TableFilterManagement@1000000004 : Codeunit 9062238;
      TnpToolkit@1000000000 : Codeunit 9062230;

    PROCEDURE "--- Initialisation ---"@1000000004();
    BEGIN
    END;

    PROCEDURE NewId@1000000000() : Integer;
    VAR
      lPanelProperty@1000000000 : Record 9062433;
    BEGIN
      //DOC NA2015.1 - Returning new ID
      //  <- New ID

      Rec.TESTFIELD("Parent Table ID");
      Rec.TESTFIELD("Parent Code");

      lPanelProperty.RESET();
      lPanelProperty.SETRANGE("Parent Table ID", Rec."Parent Table ID");
      lPanelProperty.SETRANGE("Parent Code", Rec."Parent Code");
      lPanelProperty.SETRANGE("Parent ID", Rec."Parent ID");
      lPanelProperty.SETRANGE("Parent ID 2", Rec."Parent ID 2");
      IF (lPanelProperty.FINDLAST()) THEN
        EXIT(lPanelProperty.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE InitRecord@1000000030();
    BEGIN
      //DOC NA2015.1 - Initialising the record

      IF (Rec."Parent Table ID" IN [DATABASE::Panel, DATABASE::"Tile Group", DATABASE::Tile, DATABASE::"Tile Frame", DATABASE::"Panel Link"]) THEN
        Rec.VALIDATE("Property Table ID", Rec."Parent Table ID");
    END;

    PROCEDURE "--- General ---"@1000000010();
    BEGIN
    END;

    PROCEDURE ParentName@1000000031() : Text[100];
    VAR
      lName@1000000000 : Text[100];
      eTileGroup@1000000002 : TextConst 'ENU=%1 - %2;ENG=%1 - %2';
      eTile@1000000001 : TextConst 'ENU=%1 - %2;ENG=%1 - %2';
      eData@1000000003 : TextConst 'ENU=%1 - %2;ENG=%1 - %2';
    BEGIN
      //DOC NA2015.3 - Returning parent name
      //  <- The name

      CASE (Rec."Parent Table ID") OF
        DATABASE::"Tile Group":
          BEGIN
            Rec.CALCFIELDS("Panel Description", "Panel Tile Group Text");
            lName := STRSUBSTNO(eTileGroup, Rec."Panel Description", Rec."Panel Tile Group Text");
          END;
        DATABASE::Tile:
          BEGIN
            Rec.CALCFIELDS("Panel Description", "Panel Tile Text");
            lName := STRSUBSTNO(eTile, Rec."Panel Description", Rec."Panel Tile Text");
          END;
        DATABASE::"Panel Data":
          BEGIN
            Rec.CALCFIELDS("Panel Description", "Panel Data Name");
            lName := STRSUBSTNO(eData, Rec."Panel Description", Rec."Panel Data Name");
          END;
      END;

      EXIT(lName);
    END;

    PROCEDURE ProcessRename@1000000015(pFromTableId@1000000000 : Integer;pFromParentCode@1000000001 : Code[20];pFromParentId@1000000002 : Integer;pFromParentId2@1000000003 : Integer;pFromId@1000000004 : Integer;pToTableId@1000000009 : Integer;pToParentCode@1000000008 : Code[20];pToParentId@1000000007 : Integer;pToParentId2@1000000006 : Integer;pToId@1000000005 : Integer);
    VAR
      lFromPanelPropertyField@1000000010 : Record 9062443;
      lToPanelPropertyField@1000000012 : Record 9062443;
      lFromPanelPropertyValue@1000000011 : Record 9062444;
      lToPanelPropertyValue@1000000013 : Record 9062444;
    BEGIN
      //DOC NA2015.2 - Processing rename (for non-standard table relations)
      //  -> pFromTableId: Source table ID
      //  -> pFromParentCode: Source parent code
      //  -> pFromParentId: Source parent ID
      //  -> pFromParentId2: Source parent ID 2
      //  -> pFromId: Source ID
      //  -> pToTableId: Destination table ID
      //  -> pToParentCode: Destination parent code
      //  -> pToParentId: Destination parent ID
      //  -> pToParentId2: Destination parent ID 2
      //  -> pToId: Destination ID

      IF ((pFromTableId = pToTableId) AND (pFromParentCode = pToParentCode) AND (pFromParentId = pToParentId) AND (pFromParentId2 = pToParentId2) AND
          (pFromId = pToId)) THEN
        EXIT;

      lFromPanelPropertyField.RESET();
      lFromPanelPropertyField.SETRANGE("Parent Table ID", pFromTableId);
      lFromPanelPropertyField.SETRANGE("Parent Code", pFromParentCode);
      lFromPanelPropertyField.SETRANGE("Parent ID", pFromParentId);
      lFromPanelPropertyField.SETRANGE("Parent ID 2", pFromParentId2);
      lFromPanelPropertyField.SETRANGE("Panel Property ID", pFromId);
      IF (lFromPanelPropertyField.FINDSET()) THEN
      BEGIN
        REPEAT
          lToPanelPropertyField := lFromPanelPropertyField;
          lToPanelPropertyField."Parent Table ID" := pToTableId;
          lToPanelPropertyField."Parent Code" := pToParentCode;
          lToPanelPropertyField."Parent ID" := pToParentId;
          lToPanelPropertyField."Parent ID 2" := pToParentId2;
          lToPanelPropertyField."Panel Property ID" := pToId;
          lToPanelPropertyField.INSERT(TRUE);
        UNTIL (lFromPanelPropertyField.NEXT() = 0);
        lFromPanelPropertyField.DELETEALL(TRUE);
      END;

      lFromPanelPropertyValue.RESET();
      lFromPanelPropertyValue.SETRANGE("Parent Table ID", pFromTableId);
      lFromPanelPropertyValue.SETRANGE("Parent Code", pFromParentCode);
      lFromPanelPropertyValue.SETRANGE("Parent ID", pFromParentId);
      lFromPanelPropertyValue.SETRANGE("Parent ID 2", pFromParentId2);
      lFromPanelPropertyValue.SETRANGE("Panel Property ID", pFromId);
      IF (lFromPanelPropertyValue.FINDSET()) THEN
      BEGIN
        REPEAT
          lToPanelPropertyValue := lFromPanelPropertyValue;
          lToPanelPropertyValue."Parent Table ID" := pToTableId;
          lToPanelPropertyValue."Parent Code" := pToParentCode;
          lToPanelPropertyValue."Parent ID" := pToParentId;
          lToPanelPropertyValue."Parent ID 2" := pToParentId2;
          lToPanelPropertyValue."Panel Property ID" := pToId;
          lToPanelPropertyValue.INSERT(TRUE);
        UNTIL (lFromPanelPropertyValue.NEXT() = 0);
        lFromPanelPropertyValue.DELETEALL(TRUE);
      END;
    END;

    PROCEDURE DataProperty@1000000026() : Boolean;
    BEGIN
      //DOC NA2015.1 - Returning TRUE if the property is attached to data ("Panel Data")
      //  <- Result

      EXIT(Rec."Parent Table ID" = DATABASE::"Panel Data");
    END;

    PROCEDURE UpdateFields@1000000001(pFieldId@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Updating fields ("Panel Data Property Field" table records)

      PanelPropertyField.RESET();
      PanelPropertyField.SETRANGE("Parent Table ID", Rec."Parent Table ID");
      PanelPropertyField.SETRANGE("Parent Code", Rec."Parent Code");
      PanelPropertyField.SETRANGE("Parent ID", Rec."Parent ID");
      PanelPropertyField.SETRANGE("Parent ID 2", Rec."Parent ID 2");
      PanelPropertyField.SETRANGE("Panel Property ID", Rec.ID);
      IF (PanelPropertyField.FINDSET(TRUE)) THEN
      REPEAT
        CASE (pFieldId) OF
          Rec.FIELDNO("Table ID"):
            PanelPropertyField.VALIDATE("Table ID", Rec."Table ID");
        END;
        PanelPropertyField.MODIFY(TRUE);
      UNTIL (PanelPropertyField.NEXT() = 0);
    END;

    PROCEDURE UpdateDescription@1000000019();
    VAR
      eName@1000000000 : TextConst 'ENU="""%1""";ENG="""%1"""';
      eTable@1000000002 : TextConst 'ENU=Table %1;ENG=Table %1';
      ePage@1000000004 : TextConst 'ENU=Page %1;ENG=Page %1';
      eProperty@1000000012 : TextConst 'ENU=Property %1;ENG=Property %1';
      eFormula@1000000005 : TextConst 'ENU=FORMULA;ENG=FORMULA';
      eShownWith@1000000006 : TextConst 'ENU=SHOWN WITH;ENG=SHOWN WITH';
      lDescription@1000000003 : Text[1024];
      eCalculationFirst@1000000008 : TextConst 'ENU=%1;ENG=%1';
      eCalculationLast@1000000010 : TextConst 'ENU=%1;ENG=%1';
      eCalculationSum@1000000009 : TextConst 'ENU=%1 OF;ENG=%1 OF';
      eCalculationCount@1000000011 : TextConst 'ENU=%1 OF;ENG=%1 OF';
      lFieldName@1000000007 : Text[256];
      lPageName@1000000001 : Text[256];
    BEGIN
      //DOC NA2015.1 - Updating data description

      lDescription := '';

      CASE (Rec.Type) OF
        Rec.Type::Table:
          BEGIN
            CASE (Rec.Calculation) OF
              Rec.Calculation::First:
                AddToDescription(lDescription, STRSUBSTNO(eCalculationFirst, UPPERCASE(FORMAT(Rec.Calculation))), ' ');
              Rec.Calculation::Last:
                AddToDescription(lDescription, STRSUBSTNO(eCalculationLast, UPPERCASE(FORMAT(Rec.Calculation))), ' ');
              Rec.Calculation::Sum:
                AddToDescription(lDescription, STRSUBSTNO(eCalculationSum, UPPERCASE(FORMAT(Rec.Calculation))), ' ');
              Rec.Calculation::Count:
                AddToDescription(lDescription, STRSUBSTNO(eCalculationCount, UPPERCASE(FORMAT(Rec.Calculation))), ' ');
              ELSE
                IF (Rec.Calculation <> Rec.Calculation::" ") THEN
                  AddToDescription(lDescription, UPPERCASE(FORMAT(Rec.Calculation)), ' ');
            END;

            Rec.CALCFIELDS(Fields);
            IF (Rec.Fields = 1) THEN
              lFieldName := STRSUBSTNO(eName, FieldName())
            ELSE IF (Rec.Fields > 1) THEN
              lFieldName := eFormula;

            IF (Rec."Page ID" <> 0) THEN
            BEGIN
              Rec.CALCFIELDS("Page Name");
              IF (Rec."Page Name" <> '') THEN
                lPageName := STRSUBSTNO(eName, Rec."Page Name")
              ELSE
                lPageName := STRSUBSTNO(ePage, Rec."Page ID");
              lPageName := eShownWith + ' ' + lPageName;
            END;

            Rec.CALCFIELDS("Table Name");
            IF (Rec."Table Name" <> '') THEN
              AddToDescription(lDescription, STRSUBSTNO(eName, Rec."Table Name"), ' ')
            ELSE
              AddToDescription(lDescription, STRSUBSTNO(eTable, Rec."Table ID"), ' ');
            IF (lFieldName <> '') THEN
              AddToDescription(lDescription, lFieldName, '.');
            IF (Rec."Table Filter" <> '') THEN
              AddToDescription(lDescription, Rec."Table Filter", ' ');
            IF (lPageName <> '') THEN
              AddToDescription(lDescription, lPageName, ' ');
          END;
        Rec.Type::Property:
          BEGIN
            Rec.CALCFIELDS("Source Property Name");
            AddToDescription(lDescription, STRSUBSTNO(eProperty, Rec."Source Property Name"), ' ')
          END;
      END;

      Rec.VALIDATE(Description, COPYSTR(lDescription, 1, MAXSTRLEN(Rec.Description)));
    END;

    PROCEDURE PageCaption@1000000039() : Text;
    VAR
      eCaption@1000000000 : TextConst 'ENU=%1 - %2 - %3;ENG=%1 - %2 - %3';
      lText@1000000001 : Text;
    BEGIN
      //DOC NA2015.1 - Returning page caption
      //  <- The caption

      Rec.CALCFIELDS("Panel Description");
      CASE (Rec."Parent Table ID") OF
        DATABASE::"Tile Group":
          BEGIN
            Rec.CALCFIELDS("Panel Tile Group Text");
            lText := Rec."Panel Tile Group Text";
          END;
        DATABASE::Tile:
          BEGIN
            Rec.CALCFIELDS("Panel Tile Text");
            lText := Rec."Panel Tile Text";
          END;
        DATABASE::"Panel Data":
          BEGIN
            Rec.CALCFIELDS("Panel Data Name");
            lText := Rec."Panel Data Name";
          END;
      END;

      EXIT(STRSUBSTNO(eCaption, Rec."Panel Description", lText, Rec."Property Name"));
    END;

    PROCEDURE LoadImageFromLibrary@1000000047() : Boolean;
    VAR
      lSystemImage@1000000001 : Record 9062240;
      lSystemImageManagement@1000000000 : Codeunit 9062244;
      lImageSelection@1000000003 : Integer;
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2015.4 - Loading image from library
      //  <- Result

      lResult := FALSE;

      IF (lSystemImageManagement.LoadImageFromLibrary(lSystemImage, lImageSelection)) THEN
      BEGIN
        CASE (lImageSelection) OF
          lSystemImage."Image Selection"::Image:
            Rec.VALIDATE("Static Image", lSystemImage.Image);
          lSystemImage."Image Selection"::"Alternative Image":
            Rec.VALIDATE("Static Image", lSystemImage."Alternative Image");
        END;
        Rec.MODIFY(TRUE);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE IsBlob@1000000016() : Boolean;
    VAR
      lField@1000000000 : Record 2000000041;
    BEGIN
      //DOC NA2015.3 - Returning TRUE if the property is based on a BLOB field
      //  <- Response

      IF ((Rec."Property Table ID" = 0) OR (Rec."Property ID" = 0)) THEN
        EXIT(FALSE);

      IF ( NOT (lField.GET(Rec."Property Table ID", Rec."Property ID"))) THEN
        EXIT(FALSE);

      EXIT(lField.Type = lField.Type::BLOB);
    END;

    LOCAL PROCEDURE CheckModifyPermission@1000000041();
    BEGIN
      //DOC NA2016.15 - Checking modify permission (given to the panel)

      IF ( NOT (PanelToolkit.PanelTable(Rec."Parent Table ID"))) THEN
        EXIT;
      IF ( NOT (Panel.GET(Rec."Parent Code"))) THEN
        EXIT;
      EnhancedPermissionsMgt.CheckPanelModifyPermission(Panel, USERID());
    END;

    PROCEDURE "--- Property ---"@1000000011();
    BEGIN
    END;

    PROCEDURE ValidatePropertyName@1000000009(pPropertyName@1000000000 : Text[50]);
    BEGIN
      //DOC NA2015.1 - Validating property name
      //  -> pPropertyName: Property name

      IF (pPropertyName <> '') THEN
      BEGIN
        Rec.TESTFIELD("Property Table ID");
        IF (InitPropertyFilter()) THEN
        BEGIN
          ObjectFieldToolkit.ValidateFieldName(Rec."Property Table ID", Rec."Property ID", pPropertyName, FALSE);
          Rec.VALIDATE("Property ID");
        END
        ELSE
          Rec.VALIDATE("Property ID", 0);
      END
      ELSE
        Rec.VALIDATE("Property ID", 0);
    END;

    PROCEDURE PropertyLookup@1000000008() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2015.1 - Property lookup
      //  <- Lookup result

      lResult := FALSE;

      Rec.TESTFIELD("Property Table ID");
      IF (InitPropertyFilter()) THEN
        lResult := ObjectFieldToolkit.FieldLookup(Rec."Property Table ID", Rec."Property ID");

      EXIT(lResult);
    END;

    PROCEDURE ValidateSourcePropertyName@1000000024(pSourcePropertyName@1000000000 : Text[50]);
    BEGIN
      //DOC NA2015.1 - Validating source property name
      //  -> pSourcePropertyName: The name

      IF (pSourcePropertyName <> '') THEN
      BEGIN
        Rec.TESTFIELD("Property Table ID");
        IF (InitPropertyFilter()) THEN
        BEGIN
          ObjectFieldToolkit.ValidateFieldName(Rec."Property Table ID", Rec."Source Property ID", pSourcePropertyName, FALSE);
          Rec.VALIDATE("Source Property ID");
        END
        ELSE
          Rec.VALIDATE("Source Property ID", 0);
      END
      ELSE
        Rec.VALIDATE("Source Property ID", 0);
    END;

    PROCEDURE SourcePropertyLookup@1000000025() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2015.1 - Source property lookup
      //  <- Lookup result

      lResult := FALSE;

      Rec.TESTFIELD("Property Table ID");
      IF (InitPropertyFilter()) THEN
        lResult := ObjectFieldToolkit.FieldLookup(Rec."Property Table ID", Rec."Source Property ID");

      EXIT(lResult);
    END;

    LOCAL PROCEDURE InitPropertyFilter@1000000012() : Boolean;
    VAR
      lPanelTile@1000000000 : Record 9062367;
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2015.1 - Initialising property filter
      //  <- TRUE: Filter initialised, FALSE: Not

      lResult := FALSE;

      CASE (Rec."Property Table ID") OF
        DATABASE::Tile:
          BEGIN
            CLEAR(ObjectFieldToolkit);
            ObjectFieldToolkit.AddToFieldIdFilter(lPanelTile.FIELDNO(Text));
            ObjectFieldToolkit.AddToFieldIdFilter(lPanelTile.FIELDNO(Info));
            ObjectFieldToolkit.AddToFieldIdFilter(lPanelTile.FIELDNO("Background Colour Code"));
            ObjectFieldToolkit.AddToFieldIdFilter(lPanelTile.FIELDNO(Image));
            ObjectFieldToolkit.AddToFieldIdFilter(lPanelTile.FIELDNO(Size));
            lResult := TRUE;
          END;
      END;

      EXIT(lResult);
    END;

    PROCEDURE "--- Table and Page ---"@1000000027();
    BEGIN
    END;

    PROCEDURE ValidateTableName@1000000028(pTableName@1000000000 : Text[50]);
    BEGIN
      //DOC NA2015.1 - Validating table name
      //  -> pTableName: The name

      ObjectFieldToolkit.ValidateTableName(Rec."Table ID", pTableName, FALSE);
      Rec.VALIDATE("Table ID");
    END;

    PROCEDURE TableLookup@1000000029() : Boolean;
    BEGIN
      //DOC NA2015.1 - Lookup for table
      //  <- Lookup result

      EXIT(ObjectFieldToolkit.TableLookup(Rec."Table ID"));
    END;

    PROCEDURE ValidatePageName@1000000023(pPageName@1000000001 : Text[50]);
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2015.1 - Validating page name
      //  -> pPageName: The name

      ObjectFieldToolkit.ValidatePageName(Rec."Page ID", pPageName, FALSE);
      Rec.VALIDATE("Page ID");
    END;

    PROCEDURE PageLookup@1000000020() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2015.1 - Page lookup
      //  <- Lookup result

      lResult := FALSE;

      IF (ObjectFieldToolkit.PageLookup(Rec."Page ID")) THEN
      BEGIN
        Rec.VALIDATE("Page ID");
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE TableFilterLookup@1000000032();
    VAR
      lPanelProperty@1000000000 : Record 9062433;
      eTypeIncorrect@1000000002 : TextConst 'ENU=You can define table filters only when %1 is "%2".;ENG=You can define table filters only when %1 is "%2".';
      eTableIdZero@1000000001 : TextConst 'ENU=You have to specify "%1" before you can define "%2".;ENG=You have to specify "%1" before you can define "%2".';
    BEGIN
      //DOC NA2016.10 - Performing table filter lookup

      IF (Rec.Type <> Rec.Type::Table) THEN
      BEGIN
        lPanelProperty.Type := lPanelProperty.Type::Table;
        ERROR(eTypeIncorrect, Rec.FIELDCAPTION(Type), FORMAT(lPanelProperty.Type));
      END;
      IF (Rec."Table ID" = 0) THEN
        ERROR(eTableIdZero, Rec.FIELDCAPTION("Table ID"), Rec.FIELDCAPTION("Table Filter"));
      IF (TableFilterManagement.EditTableFilter(DATABASE::"Panel Property", Rec.GETPOSITION(FALSE), Rec.FIELDNO("Table Filter"),
          Rec."Table ID", Rec."Table Filter")) THEN
      BEGIN
        TableFilterManagement.CreateTableFilterText(DATABASE::"Panel Property", Rec.GETPOSITION(FALSE), Rec.FIELDNO("Table Filter"),
          Rec."Table Filter");
        Rec.VALIDATE("Table Filter");
      END;
      UpdateDescription();
    END;

    PROCEDURE "--- Fields ---"@1000000013();
    BEGIN
    END;

    PROCEDURE FieldsInformation@1000000002() : Text;
    VAR
      eManyFields@1000000000 : TextConst 'ENU=%1 Fields;ENG=%1 Fields';
    BEGIN
      //DOC NA2015.6 - Returning fields information

      Rec.CALCFIELDS(Fields);
      IF (Rec.Fields = 1) THEN
        EXIT(FieldName())
      ELSE
        EXIT(TnpToolkit.IntegerInformation(Rec.Fields, '', '', eManyFields));
    END;

    PROCEDURE FieldName@1000000007() : Text;
    BEGIN
      //DOC NA2015.1 - Returning field name
      //  <- The name

      PanelPropertyField.RESET();
      PanelPropertyField.SETRANGE("Parent Table ID", Rec."Parent Table ID");
      PanelPropertyField.SETRANGE("Parent Code", Rec."Parent Code");
      PanelPropertyField.SETRANGE("Parent ID", Rec."Parent ID");
      PanelPropertyField.SETRANGE("Parent ID 2", Rec."Parent ID 2");
      PanelPropertyField.SETRANGE("Panel Property ID", Rec.ID);
      IF (PanelPropertyField.FINDFIRST()) THEN
      BEGIN
        PanelPropertyField.CALCFIELDS("Field Name");
        EXIT(PanelPropertyField."Field Name");
      END
      ELSE
        EXIT('');
    END;

    PROCEDURE ValidateFieldName@1000000005(VAR pFieldName@1000000000 : Text[50]);
    VAR
      lFieldId@1000000001 : Integer;
    BEGIN
      //DOC NA2015.1 - Validating field name
      //  <> pFieldName: Field name

      Rec.CALCFIELDS(Fields);
      IF (Rec.Fields <= 1) THEN
      BEGIN
        IF (pFieldName <> '') THEN
        BEGIN
          Rec.TESTFIELD("Table ID");
          ObjectFieldToolkit.ValidateFieldName(Rec."Table ID", lFieldId, pFieldName, FALSE);
          UpdateField(lFieldId);
        END
        ELSE
        BEGIN
          PanelPropertyField.RESET();
          PanelPropertyField.SETRANGE("Parent Table ID", Rec."Parent Table ID");
          PanelPropertyField.SETRANGE("Parent Code", Rec."Parent Code");
          PanelPropertyField.SETRANGE("Parent ID", Rec."Parent ID");
          PanelPropertyField.SETRANGE("Parent ID 2", Rec."Parent ID 2");
          PanelPropertyField.SETRANGE("Panel Property ID", Rec.ID);
          PanelPropertyField.DELETEALL(TRUE);
        END;
      END
      ELSE
        PAGE.RUN(PAGE::"Panel Property Card", Rec);
    END;

    PROCEDURE FieldLookup@1000000003();
    VAR
      lFieldId@1000000000 : Integer;
    BEGIN
      //DOC NA2015.1 - Doing field lookup

      Rec.CALCFIELDS(Fields);
      IF (Rec.Fields <= 1) THEN
      BEGIN
        Rec.TESTFIELD("Table ID");
        IF (ObjectFieldToolkit.FieldLookup(Rec."Table ID", lFieldId)) THEN
          UpdateField(lFieldId);
      END
      ELSE
        PAGE.RUN(PAGE::"Panel Property Card", Rec);
    END;

    PROCEDURE UpdateField@1000000006(pFieldId@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Updating a field
      //  -> pFieldId: Field ID

      Rec.CALCFIELDS(Fields);
      CASE (Rec.Fields) OF
        0:
          BEGIN
            CLEAR(PanelPropertyField);
            PanelPropertyField.INIT();
            PanelPropertyField.VALIDATE("Parent Table ID", Rec."Parent Table ID");
            PanelPropertyField.VALIDATE("Parent Code", Rec."Parent Code");
            PanelPropertyField.VALIDATE("Parent ID", Rec."Parent ID");
            PanelPropertyField.VALIDATE("Parent ID 2", Rec."Parent ID 2");
            PanelPropertyField.VALIDATE("Panel Property ID", Rec.ID);
            PanelPropertyField.VALIDATE("Table ID", Rec."Table ID");
            PanelPropertyField.VALIDATE("Field ID", pFieldId);
            PanelPropertyField.VALIDATE("Field Index", 1);
            PanelPropertyField.INSERT(TRUE);
          END;
        1:
          BEGIN
            PanelPropertyField.RESET();
            PanelPropertyField.SETRANGE("Parent Table ID", Rec."Parent Table ID");
            PanelPropertyField.SETRANGE("Parent Code", Rec."Parent Code");
            PanelPropertyField.SETRANGE("Parent ID", Rec."Parent ID");
            PanelPropertyField.SETRANGE("Parent ID 2", Rec."Parent ID 2");
            PanelPropertyField.SETRANGE("Panel Property ID", Rec.ID);
            PanelPropertyField.FINDFIRST();
            PanelPropertyField.VALIDATE("Field ID", pFieldId);
            PanelPropertyField.MODIFY(TRUE);
          END;
        ELSE
          PAGE.RUN(PAGE::"Panel Property Card", Rec);
      END;
    END;

    PROCEDURE "--- Values"@1000000017();
    BEGIN
    END;

    PROCEDURE ValuesInformation@1000000014() : Text[20];
    VAR
      eZero@1000000000 : TextConst 'ENU=No Values;ENG=No Values';
      eOne@1000000001 : TextConst 'ENU=1 Value;ENG=1 Value';
      eMany@1000000002 : TextConst 'ENU=%1 Values;ENG=%1 Values';
    BEGIN
      //DOC NA2015.1 - Returning values information
      //  <- The information

      Rec.CALCFIELDS(Values);
      EXIT(TnpToolkit.IntegerInformation(Rec.Values, eZero, eOne, eMany));
    END;

    PROCEDURE ShowValues@1000000018();
    BEGIN
      //DOC NA2015.1 - Showing values

      PAGE.RUN(PAGE::"Panel Property Card", Rec);
    END;

    PROCEDURE "--- Tools ---"@1000000022();
    BEGIN
    END;

    LOCAL PROCEDURE AddToDescription@1000000021(VAR pDescription@1000000000 : Text[1024];pAdd@1000000001 : Text[1024];pSeparator@1000000002 : Text[256]);
    BEGIN
      //DOC NA2015.1 - Adding value to description
      //  <> pDescription: Source / target description
      //  -> pAdd: Text to add

      IF (pAdd = '') THEN
        EXIT;

      IF (pDescription <> '') THEN
        pDescription := pDescription + pSeparator;

      pDescription := pDescription + pAdd;
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 28/10/2013 - Created
      //DOC NA2015.1  JH 15/12/2013 - Properties and sources integrated
      //DOC NA2015.1  PC 11/03/2013 - Fix bug with call to DeleteTableFilterForField on change of Table ID
      //DOC NA2015.1  JH 15/04/2014 - Tile panels 3
      //DOC NA2015.3  JH 15/08/2014 - Function to detect BLOB property, function to return parent name
      //DOC NA2015.4  JH 09/02/2015 - Table filter error messages improved
      //DOC NA2015.5  JH 14/03/2015 - "Static Bitmap" added (for backward-compatibility with 2009)
      //DOC NA2015.6  JH 02/04/2015 - "FieldsInformation" function fixed
      //DOC NA2015.8  JH 25/06/2015 - Tile lists
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.15 JH 05/05/2016 - Enhanced permissions
    }
    END.
  }
}

