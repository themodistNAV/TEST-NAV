OBJECT Codeunit 9062291 Spindle Management
{
  OBJECT-PROPERTIES
  {
    Date=25/09/15;
    Time=[ 1:21:11 PM];
    Version List=NA2016.10;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      mContact@1000000001 : Record 5050;
      mContactBusinessRelation@1000000002 : Record 5054;
      mSystemBehaviour@1000000000 : Record 9062230;
      mConfig@1000000005 : Text[30];
      mDebugMode@1000000006 : Boolean;
      DocumentSending@1000000003 : Codeunit 9062290;
      DeliveryMethod@1000000004 : 'System Default,Hard Copy,E-Mail,Fax';

    PROCEDURE "--- Using Document Sending ---"@1000000004();
    BEGIN
    END;

    PROCEDURE GetDocSpindleCommands@1000000005(Document@1000000000 : Code[20];PositionText@1000000001 : Text[1024]) SpindleCommands : Text[1024];
    VAR
      SendTo@1000000003 : Text[250];
      TempContact@1000000004 : Record 5050;
      SpindleConfig@1000000002 : Text[100];
      Var1@1000000007 : Text[250];
      Var2@1000000006 : Text[250];
      Var3@1000000005 : Text[250];
      SendToContactNo@1000000008 : Code[20];
    BEGIN
      IF ( NOT (UseSpindle())) THEN
        EXIT('');

      SendToContactNo := DocumentSending.FindSendTo(Document,PositionText,DeliveryMethod,SendTo);
      DocumentSending.FindPrintManagementDetails(Document,PositionText,SendToContactNo,SpindleConfig,Var1,Var2,Var3);

      AddToSpindleCommands(SpindleCommands, 'CFG', SpindleConfig);
      AddToSpindleCommands(SpindleCommands, GetCommandName(DeliveryMethod), SendTo);

      IF (Var1 <> '') THEN
        AddToSpindleCommands(SpindleCommands, 'VAR1', Var1);
      IF (Var2 <> '') THEN
        AddToSpindleCommands(SpindleCommands, 'VAR2', Var2);
      IF (Var3 <> '') THEN
        AddToSpindleCommands(SpindleCommands, 'VAR3', Var3);

      EXIT(SpindleCommands);
    END;

    PROCEDURE "--- Vendor and Purchases ---"@1000000007();
    BEGIN
    END;

    PROCEDURE GetVendorSpindleCommands@1000000010(pVendor@1000000000 : Record 23;pConfig@1000000001 : Text[30];pDebugMode@1000000006 : Boolean) : Text[1024];
    BEGIN
      //DOC NA2015.1 - Returning vendor spindle commands
      //  -> pVendor: Vendor
      //  -> pConfig: Spindle config name
      //  <- Spindle commands

      IF ( NOT (UseSpindle())) THEN
        EXIT('');

      SetSpindleGlobals(pConfig);
      FindVendorContact(pVendor."No.");
      GetCorrespondenceType(mContact."Correspondence Type");
      EXIT(GetSpindleCommands(mContact."No.", mContact.Name, ''));
    END;

    PROCEDURE GetPurchaseHeaderSpindleCommands@1000000022(pPurchaseHeader@1000000000 : Record 38;pConfig@1000000001 : Text[30]) : Text[1024];
    BEGIN
      //DOC NA2015.1 - Returning purchase header spindle commands
      //  -> pPurchaseHeader: Purchase header
      //  -> pConfig: Spindle config name
      //  <- Spindle commands

      EXIT(GetDocSpindleCommands(pConfig,pPurchaseHeader.GETPOSITION));

      //EXIT(GetPurchaseDocumentSpindleCommands(pPurchaseHeader."Buy-from Vendor No.", pPurchaseHeader."No.",
      //  pPurchaseHeader."Correspondence Type", pConfig));
    END;

    PROCEDURE GetPurchInvHeaderSpindleCommands@1000000023(pPurchInvHeader@1000000000 : Record 122;pConfig@1000000001 : Text[30]) : Text[1024];
    BEGIN
      //DOC NA2015.1 - Returning purchase invoice header spindle commands
      //  -> pPurchInvHeader: Purchase invoice header
      //  -> pConfig: Spindle config name
      //  <- Spindle commands

      EXIT(GetDocSpindleCommands(pConfig,pPurchInvHeader.GETPOSITION));

      //EXIT(GetPurchaseDocumentSpindleCommands(pPurchInvHeader."Buy-from Vendor No.", pPurchInvHeader."No.",
      //  pPurchInvHeader."Correspondence Type", pConfig));
    END;

    PROCEDURE GetPurchCrMemoHeaderSpindleCommands@1000000024(pPurchCrMemoHdr@1000000000 : Record 124;pConfig@1000000001 : Text[30]) : Text[1024];
    BEGIN
      //DOC NA2015.1 - Returning purchase document spindle commands
      //  -> pPurchaseHeader: Purchase header
      //  -> pConfig: Spindle config name
      //  <- Spindle commands

      EXIT(GetDocSpindleCommands(pConfig,pPurchCrMemoHdr.GETPOSITION));

      //EXIT(GetPurchaseDocumentSpindleCommands(pPurchCrMemoHdr."Buy-from Vendor No.", pPurchCrMemoHdr."No.",
      //  pPurchCrMemoHdr."Correspondence Type", pConfig));
    END;

    LOCAL PROCEDURE GetPurchaseDocumentSpindleCommands@1000000017(pVendorNo@1000000000 : Code[20];pDocumentNo@1000000005 : Code[20];pCorrespondenceType@1000000008 : Integer;pConfig@1000000001 : Text[30]) : Text[1024];
    BEGIN
      //DOC NA2015.1 - Returning purchase document spindle commands
      //  -> pVendorNo: Vendor number
      //  -> pDocumentNo: Document number
      //  -> pCorrespondenceType: Correspondence type
      //  -> pConfig: Spindle config name
      //  <- Spindle commands

      IF ( NOT (UseSpindle())) THEN
        EXIT('');

      SetSpindleGlobals(pConfig);
      FindVendorContact(pVendorNo);
      GetCorrespondenceType(pCorrespondenceType);
      EXIT(GetSpindleCommands(pDocumentNo, mContact.Name, ''));
    END;

    PROCEDURE "--- Customer and Sales ---"@1000000020();
    BEGIN
    END;

    PROCEDURE GetCustomerSpindleCommands@1000000009(pCustomer@1000000000 : Record 18;pConfig@1000000001 : Text[30]) : Text[1024];
    BEGIN
      //DOC NA2015.1 - Returning customer spindle commands
      //  -> pCustomer: Customer
      //  -> pConfig: Spindle config name
      //  <- Spindle commands


      EXIT(GetDocSpindleCommands(pConfig,pCustomer.GETPOSITION));

      //IF ( NOT (UseSpindle())) THEN
      //  EXIT('');

      //SetSpindleGlobals(pConfig);
      //FindCustomerContact(pCustomer."No.");
      //GetCorrespondenceType(mContact."Correspondence Type");
      //EXIT(GetSpindleCommands(mContact."No.", mContact.Name, ''));
    END;

    PROCEDURE GetSalesHeaderSpindleCommands@1000000027(pSalesHeader@1000000005 : Record 36;pConfig@1000000002 : Text[30]) : Text[1024];
    BEGIN
      //DOC NA2015.1 - Returning sales header spindle commands
      //  -> pSalesHeader: Sales header
      //  -> pConfig: Spindle config name
      //  <- Spindle commands

      EXIT(GetDocSpindleCommands(pConfig,pSalesHeader.GETPOSITION));

      //EXIT(GetSalesDocumentSpindleCommands(pSalesHeader."Sell-to Customer No.", pSalesHeader."No.",
      //  pSalesHeader."Correspondence Type", pConfig));
    END;

    PROCEDURE GetSalesInvoiceHeaderSpindleCommands@1000000026(pSalesInvoiceHeader@1000000005 : Record 112;pConfig@1000000002 : Text[30]) : Text[1024];
    BEGIN
      //DOC NA2015.1 - Returning sales invoice header spindle commands
      //  -> pSalesInvoiceHeader: Sales invoice header
      //  -> pConfig: Spindle config name
      //  <- Spindle commands

      EXIT(GetDocSpindleCommands(pConfig,pSalesInvoiceHeader.GETPOSITION));

      //EXIT(GetSalesDocumentSpindleCommands(pSalesInvoiceHeader."Sell-to Customer No.", pSalesInvoiceHeader."No.",
      //  pSalesInvoiceHeader."Correspondence Type", pConfig));
    END;

    PROCEDURE GetSalesCrMemoSpindleCommands@1000000028(pSalesCrMemoHeader@1000000005 : Record 114;pConfig@1000000002 : Text[30]) : Text[1024];
    BEGIN
      //DOC NA2015.1 - Returning sales credit memo header spindle commands
      //  -> pCustomerNo: Customer number
      //  -> pDocumentNo: Document number
      //  -> pCorrespondenceType: Correspondence type
      //  -> pConfig: Spindle config name
      //  <- Spindle commands

      EXIT(GetDocSpindleCommands(pConfig,pSalesCrMemoHeader.GETPOSITION));

      //EXIT(GetSalesDocumentSpindleCommands(pSalesCrMemoHeader."Sell-to Customer No.", pSalesCrMemoHeader."No.",
      //  pSalesCrMemoHeader."Correspondence Type", pConfig));
    END;

    LOCAL PROCEDURE GetSalesDocumentSpindleCommands@1000000018(pCustomerNo@1000000005 : Code[20];pDocumentNo@1000000004 : Code[20];pCorrespondenceType@1000000003 : Integer;pConfig@1000000002 : Text[30]) : Text[1024];
    BEGIN
      //DOC NA2015.1 - Returning sales document spindle commands
      //  -> pCustomerNo: Customer number
      //  -> pDocumentNo: Document number
      //  -> pCorrespondenceType: Correspondence type
      //  -> pConfig: Spindle config name
      //  <- Spindle commands

      IF ( NOT (UseSpindle())) THEN
        EXIT('');

      SetSpindleGlobals(pConfig);
      FindCustomerContact(pCustomerNo);
      GetCorrespondenceType(pCorrespondenceType);
      EXIT(GetSpindleCommands(pDocumentNo, mContact.Name, ''));
    END;

    PROCEDURE "--- Internal Functions ---"@1000000001();
    BEGIN
    END;

    PROCEDURE UseSpindle@1000000006() : Boolean;
    BEGIN
      //DOC NA2015.1 - Returning whether to use Spindle
      //  <- Use Spindle / forget

      EXIT(mSystemBehaviour.GetBoolean('SPINDLE_ENABLED'));
    END;

    LOCAL PROCEDURE SetSpindleGlobals@1000000002(pConfig@1000000000 : Text[30]) : Boolean;
    BEGIN
      //DOC NA2015.1 - Setting Spindle globals
      //  -> pConfig: Spindle config name

      mConfig := pConfig;
      mDebugMode := mSystemBehaviour.GetBoolean('SPINDLE_DEBUG_MODE');
    END;

    PROCEDURE GetCorrespondenceType@1000000014(pCorrespondenceType@1000000002 : Integer) : Integer;
    VAR
      lSystemBehaviour@1000000000 : Record 9062230;
      lCorrespondenceType@1000000001 : Text[50];
    BEGIN
      //DOC NA2015.1 - Finding system behaviour values
      //  -> pCorrespondenceType: Contact correspondence type

      IF (pCorrespondenceType <> mContact."Correspondence Type"::" ") THEN
        mContact."Correspondence Type" := pCorrespondenceType;

      lCorrespondenceType := LOWERCASE(DELCHR(lSystemBehaviour.GetText('CORRESPONDENCE_TYPE'), '=', ' '));
      CASE (lCorrespondenceType) OF
        'print', 'hardcopy': mContact."Correspondence Type" := mContact."Correspondence Type"::"Hard Copy";
        'mail', 'email', 'e-mail': mContact."Correspondence Type" := mContact."Correspondence Type"::"E-Mail";
        'fax': mContact."Correspondence Type" := mContact."Correspondence Type"::Fax;
        ELSE mContact."Correspondence Type" := mContact."Correspondence Type"::"Hard Copy";
      END;

      CASE (mContact."Correspondence Type") OF
        mContact."Correspondence Type"::"E-Mail":
          IF (mContact."E-Mail" = '') THEN
            mContact."Correspondence Type" := mContact."Correspondence Type"::"Hard Copy";
        mContact."Correspondence Type"::Fax:
          IF (mContact."Fax No." = '') THEN
            mContact."Correspondence Type" := mContact."Correspondence Type"::"Hard Copy";
      END;
    END;

    LOCAL PROCEDURE FindContact@1000000021(pLinkToTable@1000000000 : Integer;pNo@1000000001 : Code[20]) : Boolean;
    BEGIN
      //DOC NA2015.1 - Finding a contact linked to customer / vendor
      //  -> pLinkToTable: Customer / Vendor (see "Contact Business Relation"."Link to Table" field
      //  -> pNo: Customer / Vendor number
      //  <- We found / we haven't found the contact

      CLEAR(mContact);
      IF (mContact.GET(pNo)) THEN
        EXIT(TRUE);

      mContactBusinessRelation.RESET();
      mContactBusinessRelation.SETRANGE("Link to Table", pLinkToTable);
      mContactBusinessRelation.SETRANGE("No.", pNo);
      mContactBusinessRelation.SETFILTER("Contact No.", '<>%1', '');
      IF (mContactBusinessRelation.FINDFIRST()) THEN
      BEGIN
        mContact.GET(mContactBusinessRelation."Contact No.");
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FindVendorContact@1000000011(pVendorNo@1000000000 : Code[20]);
    VAR
      lVendor@1000000001 : Record 23;
    BEGIN
      //DOC NA2015.1 - Finding vendor contact
      //  -> pVendorNo: Vendor number

      IF ( NOT (FindContact(mContactBusinessRelation."Link to Table"::Vendor, pVendorNo))) THEN
      BEGIN
        lVendor.GET(pVendorNo);
        mContact."No." := lVendor."No.";
        mContact.Name := lVendor.Name;
        mContact."E-Mail" := lVendor."E-Mail";
        mContact."Fax No." := lVendor."Fax No.";
      END;
    END;

    LOCAL PROCEDURE FindCustomerContact@1000000012(pCustomerNo@1000000000 : Code[20]);
    VAR
      lCustomer@1000000001 : Record 18;
    BEGIN
      //DOC NA2015.1 - Finding customer contact
      //  -> pCustomerNo: Customer number

      IF ( NOT (FindContact(mContactBusinessRelation."Link to Table"::Customer, pCustomerNo))) THEN
      BEGIN
        lCustomer.GET(pCustomerNo);
        mContact."No." := lCustomer."No.";
        mContact.Name := lCustomer.Name;
        mContact."E-Mail" := lCustomer."E-Mail";
        mContact."Fax No." := lCustomer."Fax No.";
      END;
    END;

    LOCAL PROCEDURE GetSpindleCommands@1000000000(pVar1@1000000005 : Text[250];pVar2@1000000006 : Text[250];pVar3@1000000007 : Text[250]) : Text[1024];
    VAR
      lSpindleCommands@1000000003 : Text[1024];
    BEGIN
      //DOC NA2015.1 - Returning spindle commands (full version)
      //  -> pVar1: Variable 1
      //  -> pVar2: Variable 2
      //  -> pVar3: Variable 3

      AddToSpindleCommands(lSpindleCommands, 'CFG', mConfig);
      AddToSpindleCommands(lSpindleCommands, GetCommandName(mContact."Correspondence Type"), GetCommandValue());
      IF (pVar1 <> '') THEN
        AddToSpindleCommands(lSpindleCommands, 'VAR1', pVar1);
      IF (pVar2 <> '') THEN
        AddToSpindleCommands(lSpindleCommands, 'VAR2', pVar2);
      IF (pVar3 <> '') THEN
        AddToSpindleCommands(lSpindleCommands, 'VAR3', pVar3);

      EXIT(lSpindleCommands);
    END;

    LOCAL PROCEDURE AddToSpindleCommands@1000000003(VAR pSpindleCommands@1000000002 : Text[1024];pCommandName@1000000000 : Text[50];pCommandValue@1000000001 : Text[250]);
    VAR
      xSpindleCommand@1000000003 : TextConst 'ENU=##%1 %2##;ENG=##%1 %2##';
    BEGIN
      //DOC NA2015.1 - Adding another command to Spindle commands
      //  <> pSpindleCommands: Target spindle commands
      //  -> pCommandName: Command name
      //  -> pCommandValue: Command value

      IF ((pCommandName = '') AND (pCommandValue = '')) THEN
        EXIT;

      IF (pSpindleCommands <> '') THEN
        pSpindleCommands := pSpindleCommands + ' ';

      pSpindleCommands := pSpindleCommands + STRSUBSTNO(xSpindleCommand, pCommandName, pCommandValue);
    END;

    LOCAL PROCEDURE GetCommandName@1000000015(DeliveryMethod@1000000000 : 'System Default,Hard Copy,E-Mail,Fax') : Text[30];
    VAR
      lCommandName@1000000001 : Text[30];
    BEGIN
      //DOC NA2015.1 - Returning command name
      //  <- Command name

      CASE (DeliveryMethod) OF
        DeliveryMethod::"Hard Copy":
          lCommandName := 'PRINT';
        DeliveryMethod::"E-Mail":
          lCommandName := 'EMAIL';
        DeliveryMethod::Fax:
          lCommandName := 'FAX';
        ELSE
          lCommandName := '';
      END;

      EXIT(lCommandName);
    END;

    LOCAL PROCEDURE GetCommandValue@1000000016() : Text[250];
    VAR
      lNablementUser@1000000005 : Record 9062729;
      lCommandValue@1000000003 : Text[250];
      xNoUserSetup@1000000006 : TextConst 'ENU=No user setup for user "%1".;ENG=No user setup for user "%1".';
      xUserSetupEMailEmpty@1000000007 : TextConst 'ENU="""%1"" is empty in user setup for user ""%2"".";ENG="""%1"" is empty in user setup for user ""%2""."';
    BEGIN
      //DOC NA2015.1 - Getting command value
      //  <- Command value

      IF (mDebugMode) THEN
        IF (mContact."Correspondence Type" = mContact."Correspondence Type"::"E-Mail") THEN
        BEGIN
          IF ( NOT (lNablementUser.GET(USERID()))) THEN
            ERROR(xNoUserSetup, USERID());
          IF (lNablementUser."E-Mail" = '') THEN
            ERROR(xUserSetupEMailEmpty, lNablementUser.FIELDCAPTION("E-Mail"), USERID());
          mContact."E-Mail" := lNablementUser."E-Mail";
        END;

      CASE (mContact."Correspondence Type") OF
        mContact."Correspondence Type"::"E-Mail":
          lCommandValue := mContact."E-Mail";
        mContact."Correspondence Type"::Fax:
          lCommandValue := mContact."Fax No.";
        ELSE
          lCommandValue := '';
      END;

      EXIT(lCommandValue);
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 27/07/2012 - Created
      //DOC NA2015.4  JH 28/12/2014 - System behaviours renamed
      //DOC NA2016.10 JH 26/08/2015 - Upgraded to 2016
    }
    END.
  }
}

