OBJECT Table 9062859 QC Test Answer
{
  OBJECT-PROPERTIES
  {
    Date=14/07/16;
    Time=12:40:04 PM;
    Version List=NH2016.16;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               VALIDATE("DateTime Created",CURRENTDATETIME);
               VALIDATE("Created By User",USERID);

               //DOC NH2016.16 PC >>>
               IF (Type = Type::"Text Only") AND ("Misc - Pass Criteria" = "Misc - Pass Criteria"::"Blank Allowed") THEN
                 VALIDATE(Status,Status::Passed);

               IF "Status Required" = "Status Required"::Ignored THEN
                 VALIDATE(Passed,TRUE);
               //DOC NH2016.16 PC <<<
             END;

    OnModify=VAR
               TestInstance@1000000000 : Record 9062858;
             BEGIN
               TestInstance.GET("Test Code","Instance No.");
               TestInstance.GetStatusFromAnswers(Rec,TestInstance.Status);
               TestInstance.VALIDATE(TestInstance.Status);
               TestInstance.MODIFY(TRUE);
             END;

    OnDelete=VAR
               AnswerLine@1000000000 : Record 9062860;
             BEGIN
               AnswerLine.SETRANGE("Test Code","Test Code");
               AnswerLine.SETRANGE("Instance No.","Instance No.");
               AnswerLine.SETRANGE("Line No.","Line No.");
               IF AnswerLine.FINDSET THEN AnswerLine.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=QC Test Answer;
               ENG=QC Test Answer];
  }
  FIELDS
  {
    { 1   ;   ;Test Code           ;Code20        ;TableRelation="QC Test Header";
                                                   CaptionML=[ENU=Test Code;
                                                              ENG=Test Code] }
    { 2   ;   ;Instance No.        ;Integer       ;CaptionML=[ENU=Instance No.;
                                                              ENG=Instance No.] }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
    { 10  ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=Text Only,Yes/No,Number,Date,Time;
                                                                    ENG=Text Only,Yes/No,Number,Date,Time];
                                                   OptionString=Text Only,Yes/No,Number,Date,Time }
    { 11  ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 12  ;   ;Status Required     ;Option        ;CaptionML=[ENU=Status Required;
                                                              ENG=Status Required];
                                                   OptionCaptionML=[ENU=Passed,Warning,Ignored;
                                                                    ENG=Passed,Warning,Ignored];
                                                   OptionString=Passed,Warning,Ignored }
    { 13  ;   ;No. Answers Required;Integer       ;InitValue=1;
                                                   CaptionML=[ENU=No. Answers Required;
                                                              ENG=No. Answers Required] }
    { 14  ;   ;Get Answer From     ;Option        ;CaptionML=[ENU=Get Answer From;
                                                              ENG=Get Answer From];
                                                   OptionCaptionML=[ENU=" ,Average,Min,Max,Calculation";
                                                                    ENG=" ,Average,Min,Max,Calculation"];
                                                   OptionString=[ ,Average,Min,Max,Calculation] }
    { 20  ;   ;Misc - Pass Criteria;Option        ;CaptionML=[ENU=Misc - Pass Criteria;
                                                              ENG=Misc - Pass Criteria];
                                                   OptionCaptionML=[ENU=Blank Allowed,Value Required;
                                                                    ENG=Blank Allowed,Value Required];
                                                   OptionString=Blank Allowed,Value Required }
    { 21  ;   ;Yes/No - Pass Criteria;Option      ;CaptionML=[ENU=Yes/No - Pass Criteria;
                                                              ENG=Yes/No - Pass Criteria];
                                                   OptionCaptionML=[ENU=Yes or No,Yes,No;
                                                                    ENG=Yes or No,Yes,No];
                                                   OptionString=Yes or No,Yes,No }
    { 22  ;   ;Number - Minimum    ;Text30        ;CaptionML=[ENU=Number - Minimum;
                                                              ENG=Number - Minimum] }
    { 23  ;   ;Number - Lower Warning;Text30      ;CaptionML=[ENU=Number - Lower Warning;
                                                              ENG=Number - Lower Warning] }
    { 24  ;   ;Number - Upper Warning;Text30      ;CaptionML=[ENU=Number - Upper Warning;
                                                              ENG=Number - Upper Warning] }
    { 25  ;   ;Number - Maximum    ;Text30        ;CaptionML=[ENU=Number - Maximum;
                                                              ENG=Number - Maximum] }
    { 30  ;   ;Formula             ;Text250       ;CaptionML=[ENU=Formula;
                                                              ENG=Formula] }
    { 100 ;   ;Answer              ;Text250       ;OnValidate=VAR
                                                                AnswerLine@1000000000 : Record 9062860;
                                                                NullTime@1000000001 : Time;
                                                                NullDate@1000000002 : Date;
                                                              BEGIN
                                                                //DOC NH2016.16 PC >>>
                                                                IF NOT CalledBySystem THEN
                                                                  IF "Get Answer From" = "Get Answer From"::Calculation THEN
                                                                    ERROR(Text001);
                                                                //DOC NH2016.16 PC <<<

                                                                VALIDATE("DateTime Answered",CURRENTDATETIME);
                                                                VALIDATE("Answered By User",USERID);

                                                                IF ("No. Answers Required" = 1) AND NOT CalledBySystem THEN BEGIN
                                                                  AnswerLine.GET("Test Code","Instance No.","Line No.",1);
                                                                  AnswerLine.VALIDATE(Answer,Answer);
                                                                  AnswerLine.MODIFY(FALSE); //Don't trigger call back
                                                                END;

                                                                CASE Type OF
                                                                  Type::"Text Only" :
                                                                    BEGIN
                                                                      VALIDATE("Answer (Text)",Answer);
                                                                    END;
                                                                  Type::"Yes/No" :
                                                                    BEGIN
                                                                      IF Answer = '' THEN
                                                                        EVALUATE("Answer (Yes/No)",'False')
                                                                      ELSE BEGIN
                                                                        EVALUATE("Answer (Yes/No)",Answer);
                                                                        Answer := FORMAT("Answer (Yes/No)");
                                                                        VALIDATE("Answer (Yes/No)");
                                                                      END;
                                                                    END;
                                                                  Type::Number :
                                                                    BEGIN
                                                                      IF Answer = '' THEN
                                                                        EVALUATE("Answer (Number)",'0')
                                                                      ELSE BEGIN
                                                                        EVALUATE("Answer (Number)",Answer);
                                                                        Answer := FORMAT("Answer (Number)");
                                                                        VALIDATE("Answer (Number)");
                                                                      END;
                                                                    END;
                                                                  Type::Date :
                                                                    BEGIN
                                                                      IF Answer = '' THEN
                                                                        EVALUATE("Answer (Date)",'01/01/1900')
                                                                      ELSE BEGIN
                                                                        EVALUATE("Answer (Date)",Answer);
                                                                        Answer := FORMAT("Answer (Date)");
                                                                        VALIDATE("Answer (Date)");
                                                                        EVALUATE(NullDate,'01/01/1900');
                                                                        "Answer (Number)" := ("Answer (Date)" - NullDate);
                                                                      END;
                                                                    END;
                                                                  Type::Time :
                                                                    BEGIN
                                                                      IF Answer = '' THEN
                                                                        EVALUATE("Answer (Time)",'00:00:00')
                                                                      ELSE BEGIN
                                                                        EVALUATE("Answer (Time)",Answer);
                                                                        Answer := FORMAT("Answer (Time)");
                                                                        VALIDATE("Answer (Time)");
                                                                        EVALUATE(NullTime,'00:00:00');
                                                                        "Answer (Number)" := ("Answer (Time)" - NullTime) / 1000;
                                                                      END;
                                                                    END;

                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Answer;
                                                              ENG=Answer] }
    { 110 ;   ;Answer (Text)       ;Text250       ;OnValidate=BEGIN
                                                                SetLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Answer (Text);
                                                              ENG=Answer (Text)] }
    { 120 ;   ;Answer (Yes/No)     ;Boolean       ;OnValidate=BEGIN
                                                                SetLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Answer (Yes/No);
                                                              ENG=Answer (Yes/No)] }
    { 130 ;   ;Answer (Number)     ;Decimal       ;OnValidate=BEGIN
                                                                SetLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Answer (Number);
                                                              ENG=Answer (Number)] }
    { 140 ;   ;Answer (Date)       ;Date          ;OnValidate=BEGIN
                                                                SetLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Answer (Date);
                                                              ENG=Answer (Date)] }
    { 150 ;   ;Answer (Time)       ;Time          ;OnValidate=BEGIN
                                                                SetLineStatus;
                                                              END;

                                                   CaptionML=[ENU=Answer (Time);
                                                              ENG=Answer (Time)] }
    { 200 ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                CASE "Status Required" OF
                                                                  "Status Required"::Passed :
                                                                    IF Status = Status::Passed THEN VALIDATE(Passed,TRUE) ELSE VALIDATE(Passed,FALSE);

                                                                  "Status Required"::Warning :
                                                                    IF (Status = Status::Passed) OR (Status = Status::Warning) THEN VALIDATE(Passed,TRUE) ELSE VALIDATE(Passed,FALSE);

                                                                  "Status Required"::Ignored :
                                                                    VALIDATE(Passed,TRUE);
                                                                END;

                                                                UpdateCalculations;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=Not Answered,Passed,Failed,Warning;
                                                                    ENG=Not Answered,Passed,Failed,Warning];
                                                   OptionString=Not Answered,Passed,Failed,Warning;
                                                   Editable=No }
    { 210 ;   ;Passed              ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE(Failed,NOT Passed);
                                                              END;

                                                   CaptionML=[ENU=Passed;
                                                              ENG=Passed];
                                                   Editable=No }
    { 211 ;   ;Failed              ;Boolean       ;CaptionML=[ENU=Failed;
                                                              ENG=Failed];
                                                   Editable=No }
    { 300 ;   ;DateTime Created    ;DateTime      ;CaptionML=[ENU=DateTime Created;
                                                              ENG=DateTime Created];
                                                   Editable=No }
    { 301 ;   ;Created By User     ;Code50        ;TableRelation="User Setup"."User ID";
                                                   CaptionML=[ENU=Created By User;
                                                              ENG=Created By User];
                                                   Editable=No }
    { 302 ;   ;DateTime Answered   ;DateTime      ;CaptionML=[ENU=DateTime Answered;
                                                              ENG=DateTime Answered];
                                                   Editable=No }
    { 303 ;   ;Answered By User    ;Code50        ;TableRelation="User Setup"."User ID";
                                                   CaptionML=[ENU=Answered By User;
                                                              ENG=Answered By User];
                                                   Editable=No }
    { 5000;   ;Related Rec. Desc   ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("QC Test Instance"."Related Rec. Description" WHERE (Test Code=FIELD(Test Code),
                                                                                                                           Instance No.=FIELD(Instance No.)));
                                                   CaptionML=[ENU=Related Rec. Desc;
                                                              ENG=Related Rec. Desc];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Test Code,Instance No.,Line No.         ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CalledBySystem@1000000000 : Boolean;
      TNPUtils@1000000001 : Codeunit 9062229;
      Text001@1000000002 : TextConst 'ENU=This Answer is calculated using a formula and cannot be manually entered;ENG=This Answer is calculated using a formula and cannot be manually entered';

    PROCEDURE SetLineStatus@1000000000();
    VAR
      FormulaCalculator@1000000001 : Codeunit 9062445;
      NumberMinimum@1000000000 : Decimal;
      NumberLowerWarning@1000000002 : Decimal;
      NumberUpperWarning@1000000003 : Decimal;
      NumberMaximum@1000000004 : Decimal;
    BEGIN
      // IF "Status Required" = "Status Required"::Ignored THEN BEGIN
      //  VALIDATE(Status,Status::Passed);
      //  EXIT;
      // END;

      CASE Type OF
        Type::"Text Only", Type::Date, Type::Time :
          CASE "Misc - Pass Criteria" OF
            "Misc - Pass Criteria"::"Blank Allowed" : VALIDATE(Status,Status::Passed);
            "Misc - Pass Criteria"::"Value Required" :
              IF STRLEN(Answer) <> 0 THEN
                VALIDATE(Status,Status::Passed)
              ELSE
                VALIDATE(Status,Status::Failed);
          END;

        Type::"Yes/No" :
          CASE "Yes/No - Pass Criteria" OF
            "Yes/No - Pass Criteria"::"Yes or No" : VALIDATE(Status,Status::Passed);
            "Yes/No - Pass Criteria"::Yes :
              IF "Answer (Yes/No)" = TRUE THEN
                VALIDATE(Status,Status::Passed)
              ELSE
                VALIDATE(Status,Status::Failed);
            "Yes/No - Pass Criteria"::No :
              IF "Answer (Yes/No)" = FALSE THEN
                VALIDATE(Status,Status::Passed)
              ELSE
                VALIDATE(Status,Status::Failed);

          END;

        Type::Number :
          BEGIN
            //DOC NH2016.16 06/07/2016 PC >>>
            IF "Number - Minimum" <> '' THEN BEGIN
              NumberMinimum := FormulaCalculator.EvaluateExpression(Formula_ReplaceLineNums("Number - Minimum"));
              IF "Answer (Number)" < NumberMinimum THEN BEGIN
                VALIDATE(Status,Status::Failed);
                EXIT;
              END;
            END;

            IF "Number - Lower Warning" <> '' THEN BEGIN
              NumberLowerWarning := FormulaCalculator.EvaluateExpression(Formula_ReplaceLineNums("Number - Lower Warning"));
              IF "Answer (Number)" < NumberLowerWarning THEN BEGIN
                VALIDATE(Status,Status::Warning);
                EXIT;
              END;
            END;

            IF "Number - Maximum" <> '' THEN BEGIN
              NumberMaximum := FormulaCalculator.EvaluateExpression(Formula_ReplaceLineNums("Number - Maximum"));
              IF "Answer (Number)" > NumberMaximum THEN BEGIN
                VALIDATE(Status,Status::Failed);
                EXIT;
              END;
            END;

            IF "Number - Upper Warning" <> '' THEN BEGIN
              NumberUpperWarning := FormulaCalculator.EvaluateExpression(Formula_ReplaceLineNums("Number - Upper Warning"));
              IF "Answer (Number)" > NumberUpperWarning THEN BEGIN
                VALIDATE(Status,Status::Warning);
                EXIT;
              END;
            END;
            //DOC NH2016.16 06/07/2016 PC <<<
            VALIDATE(Status,Status::Passed);
            EXIT;
          END;
      END;
    END;

    PROCEDURE GetAnswerFromLines@1000000001(VAR CurrAnswerLine@1000000005 : Record 9062860) AnswerText : Text;
    VAR
      AnswerLine@1000000000 : Record 9062860;
      NoAnswers@1000000001 : Integer;
      MinAnswer@1000000002 : Decimal;
      MaxAnswer@1000000003 : Decimal;
      SumAnswer@1000000004 : Decimal;
    BEGIN
      IF "No. Answers Required" = 1 THEN BEGIN
        IF CurrAnswerLine.Answer <> '' THEN EXIT(CurrAnswerLine.Answer);
      END;

      AnswerLine.SETRANGE("Test Code","Test Code");
      AnswerLine.SETRANGE("Instance No.","Instance No.");
      AnswerLine.SETRANGE("Line No.","Line No.");
      AnswerLine.SETFILTER("Answer No.",'<>%1',CurrAnswerLine."Answer No.");
      AnswerLine.SETFILTER(Answer,'%1','');
      IF AnswerLine.FINDFIRST THEN EXIT(''); //Not all answers are given yet

      AnswerLine.RESET;
      AnswerLine.SETRANGE("Test Code","Test Code");
      AnswerLine.SETRANGE("Instance No.","Instance No.");
      AnswerLine.SETRANGE("Line No.","Line No.");
      AnswerLine.SETFILTER("Answer No.",'<>%1',CurrAnswerLine."Answer No.");
      AnswerLine.FINDSET;

      SumAnswer := CurrAnswerLine."Answer (Number)";
      MinAnswer := CurrAnswerLine."Answer (Number)";
      MaxAnswer := CurrAnswerLine."Answer (Number)";

      REPEAT
        CASE "Get Answer From" OF
          "Get Answer From"::Average : SumAnswer += AnswerLine."Answer (Number)";
          "Get Answer From"::Min : IF AnswerLine."Answer (Number)" < MinAnswer THEN MinAnswer := AnswerLine."Answer (Number)";
          "Get Answer From"::Max : IF AnswerLine."Answer (Number)" > MaxAnswer THEN MaxAnswer := AnswerLine."Answer (Number)";
        END;
      UNTIL AnswerLine.NEXT = 0;

      CASE "Get Answer From" OF
        "Get Answer From"::Average : EXIT(FORMAT(SumAnswer/"No. Answers Required"));
        "Get Answer From"::Min : EXIT(FORMAT(MinAnswer));
        "Get Answer From"::Max : EXIT(FORMAT(MaxAnswer));
      END;
    END;

    PROCEDURE SetCalledBySystem@1000000002(SetTo@1000000000 : Boolean);
    BEGIN
      CalledBySystem := SetTo;
    END;

    PROCEDURE UpdateCalculations@1000000004();
    VAR
      AnswerLine@1000000000 : Record 9062859;
    BEGIN
      AnswerLine.SETRANGE("Test Code","Test Code");
      AnswerLine.SETRANGE("Instance No.","Instance No.");
      AnswerLine.SETRANGE("Get Answer From","Get Answer From"::Calculation);
      AnswerLine.SETFILTER("Line No.",'<>%1',"Line No.");

      IF AnswerLine.FINDSET THEN BEGIN
        REPEAT
          AnswerLine.SetCalledBySystem(TRUE);
          IF AnswerLine.PerformCalc THEN BEGIN
            AnswerLine.MODIFY(TRUE);
          END;
        UNTIL AnswerLine.NEXT = 0;
      END;
    END;

    PROCEDURE PerformCalc@1000000003() Calculated : Boolean;
    VAR
      LineNoTxt@1000000000 : Text;
      CurrFormula@1000000001 : Text;
      PrevFormula@1000000002 : Text;
      AccSchedManagement@1000000003 : Codeunit 8;
      AccSchedLine@1000000005 : Record 85;
      ColumnLayout@1000000004 : Record 334;
      FormulaCalculator@1000000006 : Codeunit 9062445;
    BEGIN
      IF "Get Answer From" <> "Get Answer From"::Calculation THEN EXIT(FALSE);

      CurrFormula := Formula_ReplaceLineNums(Formula);

      IF STRPOS(CurrFormula,'[') <> 0 THEN EXIT(FALSE);

      VALIDATE(Answer,FORMAT(FormulaCalculator.EvaluateExpression(CurrFormula)));
      EXIT(TRUE);
    END;

    PROCEDURE ReplaceLineNums@1000000005(Formula@1000000000 : Text) NewFormula : Text;
    VAR
      OpenBracketPos@1000000001 : Integer;
      CloseBracketPos@1000000003 : Integer;
      RemainingString@1000000002 : Text;
      LineNoText@1000000004 : Text;
      LineNoInt@1000000005 : Integer;
      AnswerLine@1000000006 : Record 9062859;
      String@1000000007 : Codeunit 9062236;
    BEGIN
      NewFormula := Formula;

      OpenBracketPos := STRPOS(Formula,'[');
      IF OpenBracketPos = 0 THEN EXIT;

      CloseBracketPos := STRPOS(Formula,']');
      IF CloseBracketPos = 0 THEN EXIT;
      CloseBracketPos += 1;

      LineNoText := COPYSTR(Formula,OpenBracketPos,CloseBracketPos-OpenBracketPos);
      IF LineNoText = '' THEN EXIT;

      EVALUATE(LineNoInt,COPYSTR(LineNoText,2,STRLEN(LineNoText)-2));
      AnswerLine.GET("Test Code","Instance No.",LineNoInt);

      IF AnswerLine.Status = AnswerLine.Status::"Not Answered" THEN EXIT;
      NewFormula := String.Replace(Formula,LineNoText,FORMAT(AnswerLine."Answer (Number)"));
    END;

    PROCEDURE IsSameAsCurrentVersion@1000000006() : Boolean;
    VAR
      QCTestLine@1000000000 : Record 9062857;
    BEGIN
      //DOC NH2016.16 PC 05/07/2016 >>>
      IF NOT QCTestLine.GET("Test Code","Line No.") THEN
        EXIT(FALSE);

      IF QCTestLine.Type <> Type THEN
        EXIT(FALSE);

      IF QCTestLine.Description <> Description THEN
        EXIT(FALSE);

      IF QCTestLine."Status Required" <> "Status Required" THEN
        EXIT(FALSE);

      IF QCTestLine."No. Answers Required" <> "No. Answers Required" THEN
        EXIT(FALSE);

      IF QCTestLine."Get Answer From" <> "Get Answer From" THEN
        EXIT(FALSE);

      IF QCTestLine."Text - Pass Criteria" <> "Misc - Pass Criteria" THEN
        EXIT(FALSE);

      IF QCTestLine."Yes/No - Pass Criteria" <> "Yes/No - Pass Criteria" THEN
        EXIT(FALSE);

      IF QCTestLine."Number - Minimum" <> "Number - Minimum" THEN
        EXIT(FALSE);

      IF QCTestLine."Number - Lower Warning" <> "Number - Lower Warning" THEN
        EXIT(FALSE);

      IF QCTestLine."Number - Upper Warning" <> "Number - Upper Warning" THEN
        EXIT(FALSE);

      IF QCTestLine."Number - Maximum" <> "Number - Maximum" THEN
        EXIT(FALSE);

      IF QCTestLine.Formula <> Formula THEN
        EXIT(FALSE);

      EXIT(TRUE);
      //DOC NH2016.16 PC 05/07/2016 <<<
    END;

    LOCAL PROCEDURE Formula_ReplaceLineNums@1000000007(CurrFormula@1000000000 : Text) NewFormula : Text;
    VAR
      FormulaAtStart@1000000001 : Text;
    BEGIN
      NewFormula := CurrFormula;

      REPEAT
        FormulaAtStart := NewFormula;
        NewFormula := ReplaceLineNums(NewFormula);
      UNTIL NewFormula = FormulaAtStart;

      IF STRPOS(NewFormula,'[') <> 0 THEN EXIT('');
    END;

    BEGIN
    {
      //DOC NH2016.15 JH 06/05/2016 - CfMD amendments
      //DOC NH2016.16 PC 05/07/2016 - Added function IsSameAsCurrentVersion
      //DOC NH2016.16 PC 05/07/2016 - OnInsert set lines which are Text and Blank Allowed to "Passed"
      //DOC NH2016.16 PC 06/07/2016 - Changed "Number -" criteria to be text fields and support formulas
      //DOC NH2016.16 PC 06/07/2016 - Renamed "CalledFromLine" to "CalledBySystem" and prevented manual answering of Calculated answersf
      //DOC NH2016.16 PC 06/07/2016 - Added "Ignored" to Status Required
    }
    END.
  }
}

