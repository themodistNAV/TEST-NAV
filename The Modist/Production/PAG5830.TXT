OBJECT Page 5830 Demand Overview
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Demand Overview;
               ENG=Demand Overview];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table5830;
    SourceTableView=SORTING(Item No.,Date,Attached to Entry No.,Type);
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    RefreshOnActivate=Yes;
    OnInit=BEGIN
             DemandNoCtrlEnable := TRUE;
             MatchCriteria := TRUE;
           END;

    OnOpenPage=BEGIN
                 InitTempTable;

                 SETRANGE("Matches Criteria");
                 IF MatchCriteria THEN
                   SETRANGE("Matches Criteria",TRUE);
                 DemandNoCtrlEnable := DemandType <> DemandType::" ";
                 CurrPage.UPDATE(FALSE);
               END;

    OnAfterGetRecord=BEGIN
                       TypeIndent := 0;
                       ItemNoHideValue := Type <> Type::Item;
                       IF Type = Type::Item THEN
                         ItemNoEmphasize := "Matches Criteria";

                       TypeEmphasize := "Matches Criteria" AND (Type IN [Type::Item,Type::"As of Date"]);
                       TypeIndent := Level;

                       SourceTypeText := FORMAT("Source Type");
                       SourceTypeTextOnFormat(SourceTypeText);

                       IF Type IN [Type::Item,Type::"As of Date"] THEN BEGIN
                         QuantityText := '';
                         ReservedQuantityText := '';
                       END ELSE BEGIN
                         QuantityText := FORMAT(Quantity);
                         ReservedQuantityText := FORMAT("Reserved Quantity");
                       END;

                       SupplyRunningTotalHideValue := Type = Type::Item;
                       SourceOrderStatusHideValue := Type = Type::Item;
                       RunningTotalHideValue := Type = Type::Item;
                       InventoryRunningTotalHideValue := Type = Type::Item;
                       DemandRunningTotalHideValue := Type = Type::Item;

                       DateEmphasize := "Running Total" < 0;
                       DescriptionEmphasize := Type = Type::Item;
                       SupplyRunningTotalEmphasize := Type = Type::"As of Date";
                       DemandRunningTotalEmphasize := Type = Type::"As of Date";
                       RunningTotalEmphasize := Type = Type::"As of Date";
                       InventoryRunningTotalEmphasize := Type = Type::"As of Date";
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 65      ;1   ;Action    ;
                      Name=Calculate;
                      CaptionML=[ENU=Calculate;
                                 ENG=Calculate];
                      Promoted=Yes;
                      Image=Calculate;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CalculationOfDemand := TRUE;
                                 InitTempTable;
                                 IsCalculated := TRUE;
                                 SETRANGE("Matches Criteria");
                                 IF MatchCriteria THEN
                                   SETRANGE("Matches Criteria",TRUE);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 37  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 39  ;2   ;Field     ;
                CaptionML=[ENU=Start Date;
                           ENG=Start Date];
                SourceExpr=StartDate;
                OnValidate=BEGIN
                             IsCalculated := FALSE;
                           END;
                            }

    { 41  ;2   ;Field     ;
                CaptionML=[ENU=End Date;
                           ENG=End Date];
                SourceExpr=EndDate;
                OnValidate=BEGIN
                             IsCalculated := FALSE;
                           END;
                            }

    { 43  ;2   ;Field     ;
                CaptionML=[ENU=Demand Type;
                           ENG=Demand Type];
                OptionCaptionML=[ENU=" All Demand,Sale,Production,Job,Service,Assembly";
                                 ENG=" All Demand,Sale,Production,Job,Service,Assembly"];
                SourceExpr=DemandType;
                OnValidate=BEGIN
                             IsCalculated := FALSE;
                             DemandNoCtrlEnable := DemandType <> DemandType::" ";
                           END;
                            }

    { 45  ;2   ;Field     ;
                Name=DemandNoCtrl;
                CaptionML=[ENU=Demand No.;
                           ENG=Demand No.];
                SourceExpr=DemandNo;
                Enabled=DemandNoCtrlEnable;
                OnValidate=BEGIN
                             IsCalculated := FALSE;
                           END;

                OnLookup=VAR
                           SalesHeader@1007 : Record 36;
                           ProdOrder@1006 : Record 5405;
                           Job@1005 : Record 167;
                           ServHeader@1004 : Record 5900;
                           AsmHeader@1010 : Record 900;
                           SalesList@1000 : Page 45;
                           ProdOrderList@1001 : Page 99000815;
                           JobList@1002 : Page 89;
                           ServiceOrders@1003 : Page 9318;
                           AsmOrders@1011 : Page 902;
                         BEGIN
                           CASE DemandType OF
                             DemandType::Sales:
                               BEGIN
                                 SalesHeader.SETRANGE("Document Type",ServHeader."Document Type"::Order);
                                 SalesList.SETTABLEVIEW(SalesHeader);
                                 SalesList.LOOKUPMODE := TRUE;
                                 IF SalesList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   SalesList.GETRECORD(SalesHeader);
                                   Text := SalesHeader."No.";
                                   EXIT(TRUE);
                                 END;
                                 EXIT(FALSE);
                               END;
                             DemandType::Production:
                               BEGIN
                                 ProdOrder.SETRANGE(Status,ProdOrder.Status::Planned,ProdOrder.Status::Released);
                                 ProdOrderList.SETTABLEVIEW(ProdOrder);
                                 ProdOrderList.LOOKUPMODE := TRUE;
                                 IF ProdOrderList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   ProdOrderList.GETRECORD(ProdOrder);
                                   Text := ProdOrder."No.";
                                   EXIT(TRUE);
                                 END;
                                 EXIT(FALSE);
                               END;
                             DemandType::Services:
                               BEGIN
                                 ServHeader.SETRANGE("Document Type",ServHeader."Document Type"::Order);
                                 ServiceOrders.SETTABLEVIEW(ServHeader);
                                 ServiceOrders.LOOKUPMODE := TRUE;
                                 IF ServiceOrders.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   ServiceOrders.GETRECORD(ServHeader);
                                   Text := ServHeader."No.";
                                   EXIT(TRUE);
                                 END;
                                 EXIT(FALSE);
                               END;
                             DemandType::Jobs:
                               BEGIN
                                 Job.SETRANGE(Status,Job.Status::Order);
                                 JobList.SETTABLEVIEW(Job);
                                 JobList.LOOKUPMODE := TRUE;
                                 IF JobList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   JobList.GETRECORD(Job);
                                   Text := Job."No.";
                                   EXIT(TRUE);
                                 END;
                                 EXIT(FALSE);
                               END;
                             DemandType::Assembly:
                               BEGIN
                                 AsmHeader.SETRANGE("Document Type",AsmHeader."Document Type"::Order);
                                 AsmOrders.SETTABLEVIEW(AsmHeader);
                                 AsmOrders.LOOKUPMODE := TRUE;
                                 IF AsmOrders.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   AsmOrders.GETRECORD(AsmHeader);
                                   Text := AsmHeader."No.";
                                   EXIT(TRUE);
                                 END;
                                 EXIT(FALSE);
                               END;
                           END;
                         END;
                          }

    { 55  ;2   ;Field     ;
                CaptionML=[ENU=Calculated;
                           ENG=Calculated];
                SourceExpr=IsCalculated;
                Editable=FALSE }

    { 1   ;1   ;Group     ;
                IndentationColumnName=TypeIndent;
                IndentationControls=Type;
                ShowAsTree=Yes;
                GroupType=Repeater }

    { 6   ;2   ;Field     ;
                SourceExpr="Item No.";
                Editable=FALSE;
                HideValue=ItemNoHideValue;
                Style=Strong;
                StyleExpr=ItemNoEmphasize }

    { 4   ;2   ;Field     ;
                SourceExpr="Matches Criteria";
                Visible=FALSE;
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr=Type;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TypeEmphasize }

    { 10  ;2   ;Field     ;
                SourceExpr=Date;
                Editable=FALSE;
                Style=Unfavorable;
                StyleExpr=DateEmphasize }

    { 12  ;2   ;Field     ;
                SourceExpr=SourceTypeText;
                CaptionClass=FIELDCAPTION("Source Type");
                Editable=FALSE;
                HideValue=SourceTypeHideValue }

    { 14  ;2   ;Field     ;
                SourceExpr="Source Order Status";
                Visible=FALSE;
                Editable=FALSE;
                HideValue=SourceOrderStatusHideValue }

    { 16  ;2   ;Field     ;
                SourceExpr="Source ID";
                Visible=FALSE;
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                SourceExpr=Description;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=DescriptionEmphasize }

    { 20  ;2   ;Field     ;
                SourceExpr="Location Code";
                Editable=FALSE }

    { 22  ;2   ;Field     ;
                SourceExpr="Variant Code";
                Editable=FALSE }

    { 24  ;2   ;Field     ;
                CaptionML=[ENU=Quantity;
                           ENG=Quantity];
                SourceExpr=QuantityText;
                CaptionClass=FIELDCAPTION(Quantity);
                Editable=FALSE }

    { 2   ;2   ;Field     ;
                CaptionML=[ENU=Reserved Quantity;
                           ENG=Reserved Quantity];
                SourceExpr=ReservedQuantityText;
                CaptionClass=FIELDCAPTION("Reserved Quantity");
                Editable=FALSE }

    { 26  ;2   ;Field     ;
                SourceExpr="Running Total";
                CaptionClass=FIELDCAPTION("Running Total");
                Editable=FALSE;
                HideValue=RunningTotalHideValue;
                Style=Strong;
                StyleExpr=RunningTotalEmphasize }

    { 28  ;2   ;Field     ;
                SourceExpr="Inventory Running Total";
                CaptionClass=FIELDCAPTION("Inventory Running Total");
                Visible=FALSE;
                Editable=FALSE;
                HideValue=InventoryRunningTotalHideValue;
                Style=Strong;
                StyleExpr=InventoryRunningTotalEmphasize }

    { 30  ;2   ;Field     ;
                SourceExpr="Supply Running Total";
                CaptionClass=FIELDCAPTION("Supply Running Total");
                Visible=FALSE;
                Editable=FALSE;
                HideValue=SupplyRunningTotalHideValue;
                Style=Strong;
                StyleExpr=SupplyRunningTotalEmphasize }

    { 32  ;2   ;Field     ;
                SourceExpr="Demand Running Total";
                CaptionClass=FIELDCAPTION("Demand Running Total");
                Visible=FALSE;
                Editable=FALSE;
                HideValue=DemandRunningTotalHideValue;
                Style=Strong;
                StyleExpr=DemandRunningTotalEmphasize }

    { 1907524401;1;Group  ;
                CaptionML=[ENU=Filters;
                           ENG=Filters] }

    { 70  ;2   ;Field     ;
                CaptionML=[ENU=Item Filter;
                           ENG=Item Filter];
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             IsCalculated := FALSE;
                           END;

                OnLookup=VAR
                           Item@1001 : Record 27;
                           ItemList@1000 : Page 31;
                         BEGIN
                           Item.SETRANGE(Type,Item.Type::Inventory);
                           ItemList.SETTABLEVIEW(Item);
                           ItemList.LOOKUPMODE := TRUE;
                           IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             ItemList.GETRECORD(Item);
                             Text := Item."No.";
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

    { 38  ;2   ;Field     ;
                CaptionML=[ENU=Location Filter;
                           ENG=Location Filter];
                SourceExpr=LocationFilter;
                OnValidate=BEGIN
                             IsCalculated := FALSE;
                           END;

                OnLookup=VAR
                           Location@1001 : Record 14;
                           LocationList@1000 : Page 15;
                         BEGIN
                           LocationList.SETTABLEVIEW(Location);
                           LocationList.LOOKUPMODE := TRUE;
                           IF LocationList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             LocationList.GETRECORD(Location);
                             Text := Location.Code;
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

    { 49  ;2   ;Field     ;
                CaptionML=[ENU=Variant Filter;
                           ENG=Variant Filter];
                SourceExpr=VariantFilter;
                OnValidate=BEGIN
                             IsCalculated := FALSE;
                           END;

                OnLookup=VAR
                           ItemVariant@1001 : Record 5401;
                           ItemVariants@1000 : Page 5401;
                         BEGIN
                           ItemVariant.SETFILTER("Item No.",ItemFilter);
                           ItemVariants.SETTABLEVIEW(ItemVariant);
                           ItemVariants.LOOKUPMODE := TRUE;
                           IF ItemVariants.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             ItemVariants.GETRECORD(ItemVariant);
                             Text := ItemVariant.Code;
                             EXIT(TRUE);
                           END;
                           EXIT(FALSE);
                         END;
                          }

  }
  CODE
  {
    VAR
      TempAvailCalcOverview@1011 : TEMPORARY Record 5830;
      CalcAvailOverview@1010 : Codeunit 5830;
      ItemFilter@1008 : Code[250];
      LocationFilter@1007 : Code[250];
      VariantFilter@1006 : Code[250];
      StartDate@1005 : Date;
      EndDate@1004 : Date;
      DemandType@1003 : ' ,Sales,Production,Jobs,Services,Assembly';
      DemandNo@1002 : Code[20];
      IsCalculated@1001 : Boolean;
      MatchCriteria@1000 : Boolean;
      Text001@1026 : TextConst 'ENU=Sales;ENG=Sales';
      Text002@1025 : TextConst 'ENU=Production;ENG=Production';
      Text003@1024 : TextConst 'ENU=Purchase;ENG=Purchase';
      Text004@1023 : TextConst 'ENU=Inventory;ENG=Inventory';
      Text005@1022 : TextConst 'ENU=Service;ENG=Service';
      Text006@1021 : TextConst 'ENU=Job;ENG=Job';
      Text007@1020 : TextConst 'ENU=Prod. Comp.;ENG=Prod. Comp.';
      Text008@1019 : TextConst 'ENU=Transfer;ENG=Transfer';
      Text009@1009 : TextConst 'ENU=Assembly;ENG=Assembly';
      Text020@1018 : TextConst 'ENU=Expanding...\;ENG=Expanding...\';
      Text021@1017 : TextConst 'ENU=Status    #1###################\;ENG=Status    #1###################\';
      Text022@1016 : TextConst 'ENU=Setting Filters;ENG=Setting Filters';
      Text023@1015 : TextConst 'ENU=Fetching Items;ENG=Fetching Items';
      Text025@1013 : TextConst 'ENU=Fetching Specific Entries in Dates;ENG=Fetching Specific Entries in Dates';
      Text026@1012 : TextConst 'ENU=Displaying results;ENG=Displaying results';
      DemandNoCtrlEnable@19038271 : Boolean INDATASET;
      ItemNoHideValue@19067338 : Boolean INDATASET;
      ItemNoEmphasize@19054492 : Boolean INDATASET;
      TypeEmphasize@19012868 : Boolean INDATASET;
      TypeIndent@19015277 : Integer INDATASET;
      SourceTypeHideValue@19007390 : Boolean INDATASET;
      SourceTypeText@19060780 : Text[1024] INDATASET;
      SourceOrderStatusHideValue@19072585 : Boolean INDATASET;
      DescriptionEmphasize@19010547 : Boolean INDATASET;
      QuantityText@19076211 : Text[1024] INDATASET;
      DateEmphasize@1027 : Boolean INDATASET;
      ReservedQuantityText@19044286 : Text[1024] INDATASET;
      RunningTotalHideValue@19007299 : Boolean INDATASET;
      RunningTotalEmphasize@19035876 : Boolean INDATASET;
      InventoryRunningTotalHideValue@19055310 : Boolean INDATASET;
      InventoryRunningTotalEmphasize@19021114 : Boolean INDATASET;
      SupplyRunningTotalHideValue@19048092 : Boolean INDATASET;
      SupplyRunningTotalEmphasize@19042436 : Boolean INDATASET;
      DemandRunningTotalHideValue@19075312 : Boolean INDATASET;
      DemandRunningTotalEmphasize@19012517 : Boolean INDATASET;
      CalculationOfDemand@1014 : Boolean;

    LOCAL PROCEDURE ApplyUserFilters@6(VAR AvailCalcOverview@1000 : Record 5830);
    BEGIN
      AvailCalcOverview.RESET;
      AvailCalcOverview.SETFILTER("Item No.",ItemFilter);
      IF (StartDate <> 0D) OR (EndDate <> 0D) THEN BEGIN
        IF EndDate <> 0D THEN
          AvailCalcOverview.SETRANGE(Date,StartDate,EndDate)
        ELSE
          AvailCalcOverview.SETRANGE(Date,StartDate,31129999D);
      END;
      IF LocationFilter <> '' THEN
        AvailCalcOverview.SETFILTER("Location Code",LocationFilter);
      IF VariantFilter <> '' THEN
        AvailCalcOverview.SETFILTER("Variant Code",VariantFilter);
    END;

    PROCEDURE InitTempTable@1();
    VAR
      AvailCalcOverviewFilters@1000 : Record 5830;
    BEGIN
      IF NOT CalculationOfDemand THEN
        EXIT;
      AvailCalcOverviewFilters.COPY(Rec);
      ApplyUserFilters(TempAvailCalcOverview);
      CalcAvailOverview.SetParam(DemandType,DemandNo);
      CalcAvailOverview.RUN(TempAvailCalcOverview);
      TempAvailCalcOverview.RESET;
      RESET;
      DELETEALL;
      IF TempAvailCalcOverview.FIND('-') THEN
        REPEAT
          IF TempAvailCalcOverview.Level = 0 THEN BEGIN
            Rec := TempAvailCalcOverview;
            INSERT;
          END;
        UNTIL TempAvailCalcOverview.NEXT = 0;
      COPYFILTERS(AvailCalcOverviewFilters);
      ExpandAll(TempAvailCalcOverview);
      COPY(AvailCalcOverviewFilters);
      IF FIND('-') THEN;
      IsCalculated := TRUE;
    END;

    LOCAL PROCEDURE ExpandAll@12(VAR AvailCalcOverview@1000 : Record 5830);
    VAR
      AvailCalcOverviewFilters@1001 : Record 5830;
      Window@1002 : Dialog;
    BEGIN
      Window.OPEN(Text020 + Text021);
      AvailCalcOverviewFilters.COPY(Rec);

      // Set Filters
      Window.UPDATE(1,Text022);
      AvailCalcOverview.RESET;
      AvailCalcOverview.DELETEALL;
      ApplyUserFilters(AvailCalcOverview);
      CalcAvailOverview.SetParam(DemandType,DemandNo);

      // Fetching Items
      Window.UPDATE(1,Text023);
      RESET;
      IF FIND('+') THEN
        REPEAT
          IF Type = Type::Item THEN BEGIN
            AvailCalcOverview := Rec;
            IF CalcAvailOverview.EntriesExist(AvailCalcOverview) THEN BEGIN
              AvailCalcOverview.INSERT;
              CalcAvailOverview.CalculateItem(AvailCalcOverview);
            END;
          END;
        UNTIL NEXT(-1) = 0;

      // Fetch Entries in Dates
      Window.UPDATE(1,Text025);
      IF AvailCalcOverview.FIND('+') THEN
        REPEAT
          Rec := AvailCalcOverview;
          IF AvailCalcOverview.Type = Type::"As of Date" THEN
            CalcAvailOverview.CalculateDate(AvailCalcOverview);
          AvailCalcOverview := Rec;
        UNTIL AvailCalcOverview.NEXT(-1) = 0;

      // Copy to View Table
      Window.UPDATE(1,Text026);
      DELETEALL;
      IF AvailCalcOverview.FIND('-') THEN
        REPEAT
          Rec := AvailCalcOverview;
          INSERT;
        UNTIL AvailCalcOverview.NEXT = 0;

      Window.CLOSE;
      COPY(AvailCalcOverviewFilters);
      IF FIND('-') THEN;
    END;

    LOCAL PROCEDURE RefreshTempTable@14(VAR AvailCalcOverview2@1000 : Record 5830;VAR AvailCalcOverview@1001 : Record 5830);
    BEGIN
      AvailCalcOverview2.COPY(Rec);

      WITH Rec DO BEGIN
        RESET;
        IF FIND('-') THEN
          REPEAT
            AvailCalcOverview := Rec;
            IF NOT AvailCalcOverview.FIND OR
               ((Level = 0) AND ((AvailCalcOverview.NEXT = 0) OR (AvailCalcOverview.Level = 0)))
            THEN BEGIN
              IF Level = 0 THEN BEGIN
                AvailCalcOverview := Rec;
                AvailCalcOverview.FIND;
                AvailCalcOverview.DELETE(TRUE);
              END;
              DELETE;
            END;
          UNTIL NEXT = 0;
      END;

      COPY(AvailCalcOverview2);
    END;

    LOCAL PROCEDURE GetDirection@3() : Integer;
    BEGIN
      IF ASCENDING THEN
        EXIT(1);
      EXIT(-1);
    END;

    PROCEDURE SetRecFilters@5();
    BEGIN
      RESET;
      SETCURRENTKEY("Item No.",Date,"Attached to Entry No.",Type);
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE Initialize@2(NewStartDate@1000 : Date;NewDemandType@1001 : Integer;NewDemandNo@1002 : Code[20];NewItemNo@1003 : Code[20];NewLocationFilter@1004 : Code[250]);
    BEGIN
      StartDate := NewStartDate;
      DemandType := NewDemandType;
      DemandNo := NewDemandNo;
      ItemFilter := NewItemNo;
      LocationFilter := NewLocationFilter;
      MatchCriteria := TRUE;
    END;

    LOCAL PROCEDURE SourceTypeTextOnFormat@19076639(VAR Text@19071319 : Text[1024]);
    BEGIN
      SourceTypeHideValue := FALSE;
      CASE "Source Type" OF
        DATABASE::"Sales Line":
          Text := Text001;
        DATABASE::"Service Line":
          Text := Text005;
        DATABASE::"Job Planning Line":
          Text := Text006;
        DATABASE::"Prod. Order Line":
          Text := Text002;
        DATABASE::"Prod. Order Component":
          Text := Text007;
        DATABASE::"Purchase Line":
          Text := Text003;
        DATABASE::"Item Ledger Entry":
          Text := Text004;
        DATABASE::"Transfer Line":
          Text := Text008;
        DATABASE::"Assembly Header",
        DATABASE::"Assembly Line":
          Text := Text009;
        ELSE
          SourceTypeHideValue := TRUE;
      END
    END;

    PROCEDURE SetCalculationParameter@7(CalculateDemandParam@1000 : Boolean);
    BEGIN
      CalculationOfDemand := CalculateDemandParam;
    END;

    BEGIN
    END.
  }
}

