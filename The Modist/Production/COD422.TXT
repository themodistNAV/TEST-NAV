OBJECT Codeunit 422 XBRL Import Taxonomy Spec. 2
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    TableNo=399;
    OnRun=VAR
            InStr@1005 : InStream;
            LinkbaseFileName@1012 : Text[250];
            TaxonomyNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
            LinkbaseRefNodes@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
            LinkbaseRefNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
            LinkbaseRole@1011 : Text[250];
            LinkBaseType@1000 : 'Label,Presentation,Calculation,Reference';
            i@1010 : Integer;
          BEGIN
            CALCFIELDS(XSD);
            IF NOT XSD.HASVALUE THEN
              ERROR(Text002,TABLECAPTION,"Line No.");

            XBRLSchema := Rec;

            ProgressBox.OPEN(Text000);
            ProgressBox.UPDATE(1,STRSUBSTNO(Text001,"XBRL Taxonomy Name"));

            XSD.CREATEINSTREAM(InStr);

            TaxonomyDocument := TaxonomyDocument.XmlDocument;

            TaxonomyDocument.Load(InStr);

            TaxonomyNode := TaxonomyDocument.DocumentElement;
            IF NOT TaxonomyNode.HasChildNodes THEN
              ERROR(Text005,TABLECAPTION,"Line No.");

            DocumentPrefix := GetDocumentPreFix(TaxonomyNode);
            targetNamespace := GetAttribute('targetNamespace',TaxonomyNode);
            "xmlns:xbrli" := GetAttribute('xmlns:xbrli',TaxonomyNode);
            IF "xmlns:xbrli" = '' THEN
              "xmlns:xbrli" := GetAttribute('xmlns:xbrl',TaxonomyNode);
            IF "xmlns:xbrli" = '' THEN
              "xmlns:xbrli" := GetAttribute('xmlns:xbrli01',TaxonomyNode);

            targetNamespacePrefix := GetXmlnsPrefix(targetNamespace,TaxonomyNode);
            IF targetNamespacePrefix <> '' THEN BEGIN
              Description := COPYSTR(targetNamespacePrefix,1,MAXSTRLEN(Description));
              IF Description[STRLEN(Description)] = ':' THEN
                Description := COPYSTR(Description,1,STRLEN(Description) - 1);
            END;

            MODIFY;
            XBRLSchema := Rec;

            GetCommonXmnsPrefixes(TaxonomyNode);
            CreateNameSpaceManager(TaxonomyDocument);
            PopulateNamespaceManager(TaxonomyDocument.DocumentElement);

            CASE "xmlns:xbrli" OF
              'http://www.xbrl.org/2001/instance': // spec. 2.0
                BEGIN
                  SelectNodes(
                    TaxonomyNode,'%1annotation/%1appinfo/' + STRSUBSTNO('%1linkbaseRef',LinkPrefix),xsdPrefix,LinkbaseRefNodes);
                  HandleDocument;
                  IF NOT ISNULL(LinkbaseRefNodes) AND IsWindowsClientSession THEN
                    FOR i := 1 TO LinkbaseRefNodes.Count DO BEGIN
                      LinkbaseRefNode := LinkbaseRefNodes.Item(i - 1);
                      LinkbaseRole := GetAttribute(XLinkPrefix + 'role',LinkbaseRefNode);
                      LinkbaseFileName := GetAttribute(XLinkPrefix + 'href',LinkbaseRefNode);
                      CASE LinkbaseRole OF
                        'http://www.xbrl.org/linkprops/linkRef/presentation':
                          LinkBaseType := LinkBaseType::Presentation;
                        'http://www.xbrl.org/linkprops/linkRef/calculation':
                          LinkBaseType := LinkBaseType::Calculation;
                        'http://www.xbrl.org/linkprops/linkRef/label':
                          LinkBaseType := LinkBaseType::Label;
                        'http://www.xbrl.org/linkprops/linkRef/reference':
                          LinkBaseType := LinkBaseType::Reference;
                        ELSE
                          LinkbaseFileName := '';
                      END;
                      IF LinkbaseFileName <> '' THEN
                        ImportLinkbase(Rec,LinkBaseType,LinkbaseFileName);
                    END;
                END;
              'http://www.xbrl.org/2003/instance': // spec. 2.1
                BEGIN
                  SelectNodes(
                    TaxonomyNode,'%1annotation/%1appinfo/' + STRSUBSTNO('%1linkbaseRef',LinkPrefix),xsdPrefix,LinkbaseRefNodes);
                  HandleDocument;
                  IF NOT ISNULL(LinkbaseRefNodes) AND IsWindowsClientSession THEN
                    FOR i := 1 TO LinkbaseRefNodes.Count DO BEGIN
                      LinkbaseRefNode := LinkbaseRefNodes.Item(i - 1);
                      LinkbaseRole := GetAttribute(XLinkPrefix + 'role',LinkbaseRefNode);
                      LinkbaseFileName := GetAttribute(XLinkPrefix + 'href',LinkbaseRefNode);
                      CASE LinkbaseRole OF
                        'http://www.xbrl.org/2003/role/presentationLinkbaseRef':
                          LinkBaseType := LinkBaseType::Presentation;
                        'http://www.xbrl.org/2003/role/calculationLinkbaseRef':
                          LinkBaseType := LinkBaseType::Calculation;
                        'http://www.xbrl.org/2003/role/labelLinkbaseRef':
                          LinkBaseType := LinkBaseType::Label;
                        'http://www.xbrl.org/2003/role/referenceLinkbaseRef':
                          LinkBaseType := LinkBaseType::Reference;
                        ELSE
                          LinkbaseFileName := '';
                      END;
                      IF LinkbaseFileName <> '' THEN
                        ImportLinkbase(Rec,LinkBaseType,LinkbaseFileName);
                    END;
                END;
              ELSE
                ERROR(Text018,"xmlns:xbrli");
            END;
          END;

  }
  CODE
  {
    VAR
      XBRLTaxonomy@1014 : Record 394;
      XBRLSchema@1005 : Record 399;
      XBRLLine@1020009 : Record 395;
      TempXBRLLine@1020005 : TEMPORARY Record 395;
      XBRLGLMapLine@1010 : Record 397;
      TempXBRLGLMapLine@1011 : TEMPORARY Record 397;
      XBRLCommentLine@1012 : Record 396;
      TempXBRLCommentLine@1013 : TEMPORARY Record 396;
      TaxonomyDocument@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      NamespaceMgr@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      ProgressBox@1020010 : Dialog;
      Text000@1020012 : TextConst 'ENU=#1###################################### \Progress            @2@@@@@@@@@@@@@@@@@@;ENG=#1###################################### \Progress            @2@@@@@@@@@@@@@@@@@@';
      Text001@1020011 : TextConst 'ENU=Importing taxonomy %1;ENG=Importing taxonomy %1';
      Text002@1020000 : TextConst 'ENU=You must first import a taxonomy into %1 %2.;ENG=You must first import a taxonomy into %1 %2.';
      NextLineNo@1020028 : Integer;
      Text005@1020023 : TextConst 'ENU=%1 %2 has no Elements.;ENG=%1 %2 has no Elements.';
      Text007@1020030 : TextConst 'ENU=Unexpected type: "%1".;ENG=Unexpected type: "%1".';
      Text008@1000 : TextConst 'ENU=Updating new taxonomy from existing taxonomy;ENG=Updating new taxonomy from existing taxonomy';
      Text009@1001 : TextConst 'ENU=Updating database;ENG=Updating database';
      Text012@1003 : TextConst 'ENU=You must first import a linkbase into %1 %2.;ENG=You must first import a linkbase into %1 %2.';
      Text013@1006 : TextConst 'ENU=%1 %2\%3 #4######## #5##################\@6@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;ENG=%1 %2\%3 #4######## #5##################\@6@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text015@1008 : TextConst 'ENU=There is no Schemalocation defined in the document.;ENG=There is no Schemalocation defined in the document.';
      Text017@1015 : TextConst 'ENU=%1 %2 has a different version than %3 %4. Do you want to continue anyway?;ENG=%1 %2 has a different version than %3 %4. Do you want to continue anyway?';
      Text018@1016 : TextConst 'ENU=This document has an unknown version (%1).;ENG=This document has an unknown version (%1).';
      targetNamespacePrefix@1009 : Text;
      xsdPrefix@1018 : Text;
      xbrliPrefix@1019 : Text;
      XLinkPrefix@1017 : Text;
      LinkPrefix@1007 : Text;
      FilesOnServer@1002 : Boolean;
      DocumentPrefix@1020 : Text[30];

    LOCAL PROCEDURE ImportLinkbase@11(XBRLSchema@1000 : Record 399;LinkBaseType@1001 : 'Label,Presentation,Calculation,Reference';LinkBaseName@1002 : Text[250]);
    VAR
      XBRLLinkbase@1003 : Record 400;
      TempBlob@1005 : Record 99008535;
      FileMgt@1004 : Codeunit 419;
    BEGIN
      XBRLLinkbase.SETRANGE("XBRL Taxonomy Name",XBRLSchema."XBRL Taxonomy Name");
      XBRLLinkbase.SETRANGE("XBRL Schema Line No.",XBRLSchema."Line No.");
      XBRLLinkbase.SETRANGE(Type,LinkBaseType);
      IF XBRLSchema."Folder Name" <> '' THEN
        IF XBRLSchema."Folder Name"[STRLEN(XBRLSchema."Folder Name")] <> '\' THEN
          XBRLSchema."Folder Name" := XBRLSchema."Folder Name" + '\';

      // FilesOnServer is used when scripting this codeunit.
      IF FilesOnServer THEN
        IF NOT EXISTS(XBRLSchema."Folder Name" + LinkBaseName) THEN
          EXIT;

      XBRLLinkbase.SETRANGE(Type);
      IF XBRLLinkbase.FINDLAST THEN
        XBRLLinkbase."Line No." := XBRLLinkbase."Line No." + 10000
      ELSE
        XBRLLinkbase."Line No." := 10000;

      XBRLLinkbase."XBRL Taxonomy Name" := XBRLSchema."XBRL Taxonomy Name";
      XBRLLinkbase."XBRL Schema Line No." := XBRLSchema."Line No.";
      XBRLLinkbase.Type := LinkBaseType;
      XBRLLinkbase.Description := FORMAT(XBRLLinkbase.Type);
      IF FilesOnServer THEN
        XBRLLinkbase.XML.IMPORT(XBRLSchema."Folder Name" + LinkBaseName)
      ELSE BEGIN
        IF FileMgt.BLOBImport(TempBlob,XBRLSchema."Folder Name" + LinkBaseName) = '' THEN
          EXIT;
        XBRLLinkbase.XML := TempBlob.Blob;
      END;

      XBRLLinkbase."File Name" := LinkBaseName;
      XBRLLinkbase.INSERT;

      CASE LinkBaseType OF
        LinkBaseType::Label:
          ImportLabels(XBRLLinkbase);
        LinkBaseType::Presentation:
          ImportPresentation(XBRLLinkbase);
        LinkBaseType::Reference:
          ImportReference(XBRLLinkbase);
        LinkBaseType::Calculation:
          ImportCalculation(XBRLLinkbase);
      END;
    END;

    LOCAL PROCEDURE HandleDocument@6();
    VAR
      TaxonomyNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TaxonomyNodeList@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NoOfNodes@1004 : Integer;
      Progress@1003 : Integer;
      NewProgress@1002 : Integer;
      i@1001 : Integer;
      NodeIndex@1006 : Integer;
    BEGIN
      XBRLTaxonomy.GET(XBRLSchema."XBRL Taxonomy Name");
      IF XBRLTaxonomy.schemaLocation = '' THEN BEGIN
        XBRLTaxonomy.schemaLocation := XBRLSchema.schemaLocation;
        XBRLTaxonomy.MODIFY;
      END;
      IF XBRLTaxonomy."xmlns:xbrli" = '' THEN BEGIN
        XBRLTaxonomy."xmlns:xbrli" := XBRLSchema."xmlns:xbrli";
        XBRLTaxonomy.MODIFY;
      END ELSE
        IF XBRLTaxonomy."xmlns:xbrli" <> XBRLSchema."xmlns:xbrli" THEN
          IF NOT CONFIRM(
               STRSUBSTNO(
                 Text017,XBRLSchema.TABLECAPTION,XBRLSchema.Description,
                 XBRLTaxonomy.TABLECAPTION,XBRLSchema."XBRL Taxonomy Name"),FALSE)
          THEN
            EXIT;
      XBRLLine.LOCKTABLE;
      XBRLLine.SETRANGE("XBRL Taxonomy Name",XBRLSchema."XBRL Taxonomy Name");
      IF XBRLLine.FIND('+') THEN;
      NextLineNo := XBRLLine."Line No." + 10000;

      TaxonomyNode := TaxonomyDocument.DocumentElement;
      TaxonomyNodeList := TaxonomyNode.ChildNodes;
      NodeIndex := 0;
      TaxonomyNode := TaxonomyNodeList.Item(NodeIndex);
      NoOfNodes := TaxonomyNodeList.Count;
      Progress := 0;
      NewProgress := 0;
      i := 0;
      WHILE NOT ISNULL(TaxonomyNode) DO BEGIN
        IF (TaxonomyNode.Name = STRSUBSTNO('%1element',xsdPrefix)) OR
           (TaxonomyNode.Name = STRSUBSTNO('%1element',DocumentPrefix)) OR
           (TaxonomyNode.Name = 'element')
        THEN
          HandleElement(TaxonomyNode,0,-1);
        i := i + 1;
        NewProgress := ROUND(i / NoOfNodes * 10000,1);
        IF (Progress = 0) OR (NewProgress >= Progress + 100) THEN BEGIN
          ProgressBox.UPDATE(2,NewProgress);
          Progress := NewProgress;
        END;
        NodeIndex := NodeIndex + 1;
        TaxonomyNode := TaxonomyNodeList.Item(NodeIndex);
      END;
      SortPresentationOrder(0,0,'');

      IF TempXBRLLine.COUNT = 0 THEN
        EXIT;

      // Update from existing data, if any
      ProgressBox.UPDATE(1,STRSUBSTNO(Text008,XBRLSchema."XBRL Taxonomy Name"));
      ProgressBox.UPDATE(2,0);
      Progress := 0;
      NewProgress := 0;
      i := 0;
      XBRLLine.SETRANGE("XBRL Taxonomy Name",XBRLSchema."XBRL Taxonomy Name");
      XBRLLine.SETRANGE("XBRL Schema Line No.",XBRLSchema."Line No.");
      IF XBRLLine.FIND('-') THEN
        REPEAT
          i := i + 1;
          NewProgress := ROUND(i / NoOfNodes * 10000,1);
          IF (Progress = 0) OR (NewProgress >= Progress + 100) THEN BEGIN
            ProgressBox.UPDATE(2,NewProgress);
            Progress := NewProgress;
          END;
          XBRLLine.CALCFIELDS("G/L Map Lines",Notes);
          IF (XBRLLine."Constant Amount" <> 0) OR (XBRLLine.Description <> '') OR
             XBRLLine."G/L Map Lines" OR XBRLLine.Notes
          THEN BEGIN
            TempXBRLLine.SETCURRENTKEY(Name);
            TempXBRLLine.SETRANGE("XBRL Taxonomy Name",XBRLLine."XBRL Taxonomy Name");
            TempXBRLLine.SETRANGE(Name,XBRLLine.Name);
            IF TempXBRLLine.FIND('-') THEN BEGIN
              TempXBRLLine."Constant Amount" := XBRLLine."Constant Amount";
              IF TempXBRLLine.Description = '' THEN
                TempXBRLLine.Description := XBRLLine.Description;
              TempXBRLLine.MODIFY;

              XBRLGLMapLine.SETRANGE("XBRL Taxonomy Name",TempXBRLLine."XBRL Taxonomy Name");
              XBRLGLMapLine.SETRANGE("XBRL Taxonomy Line No.",TempXBRLLine."Line No.");
              IF XBRLGLMapLine.FIND('-') THEN
                REPEAT
                  TempXBRLGLMapLine := XBRLGLMapLine;
                  TempXBRLGLMapLine."XBRL Taxonomy Line No." := TempXBRLLine."Line No.";
                  TempXBRLGLMapLine.INSERT;
                UNTIL XBRLGLMapLine.NEXT = 0;

              XBRLCommentLine.SETRANGE("XBRL Taxonomy Name",TempXBRLLine."XBRL Taxonomy Name");
              XBRLCommentLine.SETRANGE("XBRL Taxonomy Line No.",TempXBRLLine."Line No.");
              XBRLCommentLine.SETRANGE("Comment Type",XBRLCommentLine."Comment Type"::Notes);
              IF XBRLCommentLine.FIND('-') THEN
                REPEAT
                  TempXBRLCommentLine := XBRLCommentLine;
                  TempXBRLCommentLine."XBRL Taxonomy Line No." := TempXBRLLine."Line No.";
                  TempXBRLCommentLine.INSERT;
                UNTIL XBRLCommentLine.NEXT = 0;
            END;
          END;
          XBRLLine.DELETE(TRUE);
        UNTIL XBRLLine.NEXT = 0;
      TempXBRLLine.RESET;

      // Write back to database
      ProgressBox.UPDATE(1,Text009);
      ProgressBox.UPDATE(2,0);
      IF TempXBRLLine.FIND('-') THEN
        REPEAT
          XBRLLine := TempXBRLLine;
          XBRLLine.INSERT;
        UNTIL TempXBRLLine.NEXT = 0;
      IF TempXBRLCommentLine.FIND('-') THEN
        REPEAT
          XBRLCommentLine := TempXBRLCommentLine;
          XBRLCommentLine.INSERT;
        UNTIL TempXBRLCommentLine.NEXT = 0;
      IF TempXBRLGLMapLine.FIND('-') THEN
        REPEAT
          XBRLGLMapLine := TempXBRLGLMapLine;
          XBRLGLMapLine.INSERT;
        UNTIL TempXBRLGLMapLine.NEXT = 0;
    END;

    LOCAL PROCEDURE HandleElement@9(ElementNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ParentLineNo@1001 : Integer;ParentLevel@1004 : Integer);
    VAR
      ThisXBRLLine@1006 : Record 395;
      NamespacePrefix@1002 : Text[250];
      ReferenceElementName@1003 : Text[250];
      XMLNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NumericContextPeriodType@1007 : Text[250];
      IsTypeDescription@1008 : Boolean;
    BEGIN
      IsTypeDescription := IsElementTypeDescription(ElementNode);

      ReferenceElementName := GetAttribute('ref',ElementNode);
      IF ReferenceElementName <> '' THEN BEGIN
        IF STRPOS(ReferenceElementName,':') > 0 THEN
          ReferenceElementName := COPYSTR(ReferenceElementName,STRPOS(ReferenceElementName,':') + 1);
        ElementNode := TaxonomyDocument.DocumentElement;
        ElementNode := ElementNode.SelectSingleNode(STRSUBSTNO('%1element[@name="%2"]',xsdPrefix,ReferenceElementName),NamespaceMgr);
        IF ISNULL(ElementNode) THEN
          EXIT;
      END;
      TempXBRLLine.INIT;
      TempXBRLLine."XBRL Taxonomy Name" := XBRLSchema."XBRL Taxonomy Name";
      TempXBRLLine."XBRL Schema Line No." := XBRLSchema."Line No.";
      TempXBRLLine."Line No." := NextLineNo;
      NextLineNo := NextLineNo + 10000;
      TempXBRLLine."Parent Line No." := ParentLineNo;
      TempXBRLLine.Level := ParentLevel + 1;
      TempXBRLLine.Name := GetAttribute('name',ElementNode);
      TempXBRLLine."Element ID" := COPYSTR(GetAttribute('id',ElementNode),1,MAXSTRLEN(TempXBRLLine."Element ID"));
      IF TempXBRLLine."Element ID" = '' THEN
        TempXBRLLine."Element ID" := TempXBRLLine.Name;
      IF TempXBRLLine.Name = '' THEN
        TempXBRLLine.Name := TempXBRLLine."Element ID";
      TempXBRLLine.TESTFIELD(Name);
      NumericContextPeriodType := COPYSTR(GetAttribute('xbrli:periodType',ElementNode),1,MAXSTRLEN(NumericContextPeriodType));
      CASE NumericContextPeriodType OF
        'instant':
          TempXBRLLine."Numeric Context Period Type" := TempXBRLLine."Numeric Context Period Type"::Instant;
        'duration':
          TempXBRLLine."Numeric Context Period Type" := TempXBRLLine."Numeric Context Period Type"::Duration;
      END;

      TempXBRLLine."Type Description Element" := IsTypeDescription;
      TempXBRLLine."XBRL Item Type" := GetAttribute('type',ElementNode);
      IF STRPOS(TempXBRLLine."XBRL Item Type",':') > 0 THEN BEGIN
        NamespacePrefix := COPYSTR(TempXBRLLine."XBRL Item Type",1,STRPOS(TempXBRLLine."XBRL Item Type",':'));
        TempXBRLLine."XBRL Item Type" :=
          COPYSTR(TempXBRLLine."XBRL Item Type",STRPOS(TempXBRLLine."XBRL Item Type",':') + 1);
      END;
      IF (TempXBRLLine."XBRL Item Type" = '') OR (NamespacePrefix = targetNamespacePrefix) THEN BEGIN
        IF GetAttribute('substitutionGroup',ElementNode) = STRSUBSTNO('%1tuple',xbrliPrefix) THEN
          TempXBRLLine."Source Type" := TempXBRLLine."Source Type"::Tuple
        ELSE
          TempXBRLLine."Source Type" := TempXBRLLine."Source Type"::Description;
        TempXBRLLine.INSERT;
        ThisXBRLLine := TempXBRLLine;
        HandleCustomType(TempXBRLLine,TempXBRLLine."XBRL Item Type",ElementNode);
      END ELSE BEGIN
        CASE LOWERCASE(TempXBRLLine."XBRL Item Type") OF
          'stringitemtype','string':
            TempXBRLLine."Source Type" := TempXBRLLine."Source Type"::Description;
          'monetaryitemtype':
            TempXBRLLine."Source Type" := TempXBRLLine."Source Type"::"General Ledger";
          'decimalitemtype':
            TempXBRLLine."Source Type" := TempXBRLLine."Source Type"::Constant;
          'sharesitemtype':
            TempXBRLLine."Source Type" := TempXBRLLine."Source Type"::Constant;
          'uriitemtype':
            TempXBRLLine."Source Type" := TempXBRLLine."Source Type"::Description;
          'tupletype':
            TempXBRLLine."Source Type" := TempXBRLLine."Source Type"::Tuple;
          'datetimeitemtype','dateitemtype':
            BEGIN
              TempXBRLLine."Source Type" := TempXBRLLine."Source Type"::Description;
              TempXBRLLine.Description := '%6%3%2';
            END;
          ELSE
            BEGIN
            TempXBRLLine."Source Type" := TempXBRLLine."Source Type"::"Not Applicable";
            IF TempXBRLLine."XBRL Item Type" <> '' THEN
              TempXBRLLine.Description := STRSUBSTNO(Text007,TempXBRLLine."XBRL Item Type");
          END;
        END;
        TempXBRLLine.INSERT;
        ThisXBRLLine := TempXBRLLine;
      END;

      XMLNode := ElementNode.SelectSingleNode(STRSUBSTNO('%1annotation//%1documentation',xsdPrefix),NamespaceMgr);
      IF NOT ISNULL(XMLNode) THEN BEGIN
        XBRLCommentLine.SETRANGE("XBRL Taxonomy Name",ThisXBRLLine."XBRL Taxonomy Name");
        XBRLCommentLine.SETRANGE("XBRL Taxonomy Line No.",ThisXBRLLine."Line No.");
        XBRLCommentLine.SETRANGE("Comment Type",XBRLCommentLine."Comment Type"::Information);
        XBRLCommentLine.DELETEALL;
        XBRLCommentLine.INIT;
        XBRLCommentLine."XBRL Taxonomy Name" := ThisXBRLLine."XBRL Taxonomy Name";
        XBRLCommentLine."XBRL Taxonomy Line No." := ThisXBRLLine."Line No.";
        XBRLCommentLine."Comment Type" := XBRLCommentLine."Comment Type"::Information;
        XBRLCommentLine."Line No." := 0;
        InsertReference(XMLNode,XBRLCommentLine);
      END;
    END;

    LOCAL PROCEDURE HandleCustomType@17(ParentXBRLLine@1000 : Record 395;ElementType@1001 : Text[250];SourceNode@1008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLElementList@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLElement@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ReferenceElementName@1004 : Text;
      i@1006 : Integer;
    BEGIN
      IF ElementType = '' THEN
        SelectSingleNode(SourceNode,'%1complexType',xsdPrefix,XMLNode)
      ELSE
        SelectSingleNode(
          TaxonomyDocument.DocumentElement,'%1' + STRSUBSTNO('complexType[@name="%1"]',ElementType),
          xsdPrefix,XMLNode);
      IF ISNULL(XMLNode) THEN
        EXIT;
      SelectNodes(XMLNode,'%1complexContent/%1extension/%1sequence/%1element',xsdPrefix,XMLElementList);
      IF XMLElementList.Count = 0 THEN
        SelectNodes(XMLNode,'%1sequence/%1element',xsdPrefix,XMLElementList);
      // Choice Type
      IF XMLElementList.Count = 0 THEN BEGIN
        SelectSingleNode(XMLNode,'%1choice/%1element',xsdPrefix,XMLElement);
        IF ISNULL(XMLElement) THEN
          EXIT;
        ReferenceElementName := GetAttribute('ref',XMLElement);
        SelectNodes(
          XMLNode.OwnerDocument.DocumentElement,'%1' + STRSUBSTNO(
            'element[@substitutionGroup=''%1'']',ReferenceElementName),xsdPrefix,XMLElementList);
      END;

      IF XMLElementList.Count = 0 THEN
        EXIT;
      FOR i := 1 TO XMLElementList.Count DO BEGIN
        XMLElement := XMLElementList.Item(i - 1);
        HandleElement(XMLElement,ParentXBRLLine."Line No.",ParentXBRLLine.Level);
      END;
    END;

    LOCAL PROCEDURE GetAttribute@1(AttributeName@1001 : Text;XMLNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Text[1024];
    VAR
      XMLAttributeNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLAttributeNode := XMLNode.Attributes.GetNamedItem(AttributeName);
      IF ISNULL(XMLAttributeNode) THEN
        EXIT('');

      EXIT(FORMAT(XMLAttributeNode.InnerText));
    END;

    LOCAL PROCEDURE GetAttributeNameByValue@16(AttributeValue@1001 : Text;XMLNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";IncludeTargetNamespace@1004 : Boolean) : Text;
    VAR
      XMLAttributeNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLAttributes@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      Index@1005 : Integer;
    BEGIN
      XMLAttributes := XMLNode.Attributes;
      FOR Index := 1 TO XMLAttributes.Count DO BEGIN
        XMLAttributeNode := XMLAttributes.Item(Index - 1);
        IF (FORMAT(XMLAttributeNode.InnerText) = AttributeValue) AND
           (IncludeTargetNamespace OR
            NOT IncludeTargetNamespace AND (XMLAttributeNode.Name <> 'targetNamespace'))
        THEN
          EXIT(XMLAttributeNode.Name);
      END;
      EXIT('');
    END;

    PROCEDURE ImportLabels@2(VAR XBRLLinkbase@1000 : Record 400);
    VAR
      XBRLTaxonomyLine@1003 : Record 395;
      InStr@1001 : InStream;
      LinkbaseDocument@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      LinkbaseDocNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNode@1008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ArcNodeList@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LabelNodeList@1015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      LabelNode@1009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      i@1007 : Integer;
      j@1014 : Integer;
      Progress@1010 : Integer;
      NoOfRecords@1011 : Integer;
      Window@1012 : Dialog;
      Schemalocation@1013 : Text[1024];
    BEGIN
      XBRLSchema.GET(XBRLLinkbase."XBRL Taxonomy Name",XBRLLinkbase."XBRL Schema Line No.");
      Window.OPEN(
        STRSUBSTNO(
          Text013,XBRLSchema.TABLECAPTION,XBRLSchema.Description,XBRLLinkbase.TABLECAPTION));
      Window.UPDATE(4,XBRLLinkbase.Type);
      Window.UPDATE(5,XBRLLinkbase.Description);

      WITH XBRLLinkbase DO BEGIN
        TESTFIELD(Type,Type::Label);
        CALCFIELDS(XML);
        IF NOT XML.HASVALUE THEN
          ERROR(Text012,TABLECAPTION,"Line No.");
        XML.CREATEINSTREAM(InStr);
      END;
      LinkbaseDocument := LinkbaseDocument.XmlDocument;
      LinkbaseDocument.Load(InStr);
      LinkbaseDocNode := LinkbaseDocument.FirstChild;
      WHILE LOWERCASE(LinkbaseDocNode.NodeType.ToString) IN ['xmldeclaration','processinginstruction','comment'] DO
        LinkbaseDocNode := LinkbaseDocNode.NextSibling;
      Schemalocation := GetAttribute('xsi:schemaLocation',LinkbaseDocNode);
      IF Schemalocation = '' THEN
        ERROR(Text015);
      i := STRPOS(Schemalocation,XBRLSchema.targetNamespace + ' ');
      IF i <> 0 THEN BEGIN
        i := i + STRLEN(XBRLSchema.targetNamespace);
        WHILE Schemalocation[i] = ' ' DO
          i := i + 1;
        j := i;
        WHILE (Schemalocation[j] <> ' ') AND (j <= STRLEN(Schemalocation)) DO
          j := j + 1;
        Schemalocation := COPYSTR(Schemalocation,i,j - i);
      END ELSE
        Schemalocation := XBRLSchema.schemaLocation;

      GetCommonXmnsPrefixes(LinkbaseDocNode);
      CreateNameSpaceManager(LinkbaseDocument);
      PopulateNamespaceManager(LinkbaseDocument.DocumentElement);
      PopulateNamespaceManager(LinkbaseDocNode.FirstChild);

      XBRLTaxonomyLine.SETRANGE("XBRL Taxonomy Name",XBRLLinkbase."XBRL Taxonomy Name");
      XBRLTaxonomyLine.SETRANGE("XBRL Schema Line No.",XBRLLinkbase."XBRL Schema Line No.");
      NoOfRecords := XBRLTaxonomyLine.COUNT;

      IF XBRLTaxonomyLine.FIND('-') THEN
        REPEAT
          Progress := Progress + 1;
          Window.UPDATE(6,ROUND(Progress / NoOfRecords * 10000,1));
          XMLNode :=
            LinkbaseDocNode.SelectSingleNode(
              STRSUBSTNO(
                '%3labelLink/%3loc[@%4href="%1#%2"]',
                Schemalocation,XBRLTaxonomyLine."Element ID",LinkPrefix,XLinkPrefix),NamespaceMgr);
          IF NOT ISNULL(XMLNode) THEN BEGIN
            ArcNodeList :=
              LinkbaseDocNode.SelectNodes(
                STRSUBSTNO(
                  '%2labelLink/%2labelArc[@%3from="%1"]',
                  GetAttribute(XLinkPrefix + 'label',XMLNode),LinkPrefix,XLinkPrefix),NamespaceMgr);
            FOR i := 1 TO ArcNodeList.Count DO BEGIN
              XMLNode := ArcNodeList.Item(i - 1);
              LabelNodeList :=
                LinkbaseDocNode.SelectNodes(
                  STRSUBSTNO(
                    '%2labelLink/%2label[@%3label="%1"]',
                    GetAttribute(XLinkPrefix + 'to',XMLNode),LinkPrefix,XLinkPrefix),NamespaceMgr);
              FOR j := 1 TO LabelNodeList.Count DO BEGIN
                LabelNode := LabelNodeList.Item(j - 1);
                InsertLabel(LabelNode,XBRLTaxonomyLine);
              END
            END;
          END;
        UNTIL XBRLTaxonomyLine.NEXT = 0;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE InsertLabel@31(XMLNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR XBRLLine@1001 : Record 395);
    VAR
      XBRLTaxonomyLabel@1002 : Record 401;
      langAttribute@1003 : Text[30];
      roleAttribute@1004 : Text[1024];
      Label@1005 : Text[250];
    BEGIN
      langAttribute := GetAttribute('xml:lang',XMLNode);
      roleAttribute := LOWERCASE(GetAttribute(XLinkPrefix + 'role',XMLNode));
      IF (roleAttribute <> 'http://www.xbrl.org/2003/role/label') AND // spec. 2.1
         (roleAttribute <> 'http://www.xbrl.org/linkprops/label/standard') // spec. 2.0
      THEN
        EXIT;
      Label := COPYSTR(XMLNode.InnerText,1,MAXSTRLEN(XBRLTaxonomyLabel.Label));
      IF NOT XBRLTaxonomyLabel.GET(XBRLLine."XBRL Taxonomy Name",XBRLLine."Line No.",langAttribute) THEN BEGIN
        XBRLTaxonomyLabel.INIT;
        XBRLTaxonomyLabel."XBRL Taxonomy Name" := XBRLLine."XBRL Taxonomy Name";
        XBRLTaxonomyLabel."XBRL Taxonomy Line No." := XBRLLine."Line No.";
        XBRLTaxonomyLabel."XML Language Identifier" := langAttribute;
        XBRLTaxonomyLabel.Label := Label;
        XBRLTaxonomyLabel.INSERT;
      END ELSE
        IF XBRLTaxonomyLabel.Label <> Label THEN BEGIN
          XBRLTaxonomyLabel.Label := Label;
          XBRLTaxonomyLabel.MODIFY;
        END;
    END;

    PROCEDURE ImportPresentation@4(VAR XBRLLinkbase@1000 : Record 400);
    VAR
      XBRLTaxonomyLine@1003 : Record 395;
      XBRLTaxonomyLine2@1004 : Record 395;
      XBRLSchema@1020 : Record 399;
      TempXBRLSchema@1022 : TEMPORARY Record 399;
      LinkbaseDocument@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      LinkbaseDocNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNode@1008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CurrNodeIndex@1024 : Integer;
      i@1007 : Integer;
      j@1021 : Integer;
      Progress@1010 : Integer;
      NoOfRecords@1011 : Integer;
      Window@1012 : Dialog;
      Schemalocation@1013 : Text[1024];
      FromSchemalocation@1023 : Text[1024];
      ToSchemalocation@1019 : Text[1024];
      fromLabel@1014 : Text[250];
      toLabel@1015 : Text[250];
      ToName@1016 : Text[250];
      t@1018 : Text[30];
      Order@1017 : Decimal;
      UpdateParentPresentationLineNo@1009 : Boolean;
      LastXBRLLineNo@1025 : Integer;
    BEGIN
      XBRLSchema.GET(XBRLLinkbase."XBRL Taxonomy Name",XBRLLinkbase."XBRL Schema Line No.");
      Window.OPEN(
        STRSUBSTNO(
          Text013,XBRLSchema.TABLECAPTION,XBRLSchema.Description,XBRLLinkbase.TABLECAPTION));
      Window.UPDATE(4,XBRLLinkbase.Type);
      Window.UPDATE(5,XBRLLinkbase.Description);

      LoadLinkbaseDocument(XBRLLinkbase,LinkbaseDocument);
      FindLinkbaseDocNode(LinkbaseDocument,LinkbaseDocNode);
      Schemalocation := GetAttribute('xsi:schemaLocation',LinkbaseDocNode);

      IF Schemalocation = '' THEN
        ERROR(Text015);

      TempXBRLSchema.DELETEALL;
      XBRLSchema.SETRANGE("XBRL Taxonomy Name",XBRLLinkbase."XBRL Taxonomy Name");
      IF XBRLSchema.FIND('-') THEN
        REPEAT
          IF XBRLSchema."Line No." = XBRLLinkbase."XBRL Schema Line No." THEN BEGIN
            i := STRPOS(Schemalocation,XBRLSchema.targetNamespace + ' ');
            IF i > 0 THEN BEGIN
              i := i + STRLEN(XBRLSchema.targetNamespace);
              WHILE (i < STRLEN(Schemalocation)) AND (Schemalocation[i] <> ' ') DO
                i := i + 1;
              WHILE (i < STRLEN(Schemalocation)) AND (Schemalocation[i] = ' ') DO
                i := i + 1;
              j := i;
              WHILE (i < STRLEN(Schemalocation)) AND (Schemalocation[i] <> ' ') DO
                i := i + 1;
              IF i = STRLEN(Schemalocation) THEN
                i := i + 1;
              XBRLSchema.schemaLocation := COPYSTR(Schemalocation,j,i - j);
              XBRLSchema.MODIFY;
              FromSchemalocation := XBRLSchema.schemaLocation;
            END;
          END;
          TempXBRLSchema := XBRLSchema;
          TempXBRLSchema.INSERT;
        UNTIL XBRLSchema.NEXT = 0;

      GetCommonXmnsPrefixes(LinkbaseDocNode);
      CreateNameSpaceManager(LinkbaseDocument);
      PopulateNamespaceManager(LinkbaseDocument.DocumentElement);
      PopulateNamespaceManager(LinkbaseDocNode.FirstChild);

      XBRLTaxonomyLine.SETRANGE("XBRL Taxonomy Name",XBRLLinkbase."XBRL Taxonomy Name");
      XBRLTaxonomyLine.SETRANGE("Presentation Linkbase Line No.",XBRLLinkbase."Line No.");
      XBRLTaxonomyLine.MODIFYALL("Presentation Linkbase Line No.",0);
      XBRLTaxonomyLine.SETRANGE("Presentation Linkbase Line No.");
      NoOfRecords := XBRLTaxonomyLine.COUNT;

      IF XBRLTaxonomyLine.FINDLAST THEN
        LastXBRLLineNo := XBRLTaxonomyLine."Line No.";

      InitTaxonomyLinesBuf(XBRLTaxonomyLine,TempXBRLLine);
      IF TempXBRLLine.FINDSET THEN
        REPEAT
          Progress := Progress + 1;
          Window.UPDATE(6,ROUND(Progress / NoOfRecords * 10000,1));
          IF TempXBRLSchema."Line No." <> TempXBRLLine."XBRL Schema Line No." THEN
            TempXBRLSchema.GET(TempXBRLLine."XBRL Taxonomy Name",TempXBRLLine."XBRL Schema Line No.");
          FromSchemalocation := TempXBRLSchema.schemaLocation;
          XMLNode :=
            LinkbaseDocNode.SelectSingleNode(
              STRSUBSTNO(
                '%3presentationLink/%3loc[@%4href="%1#%2"]',
                FromSchemalocation,TempXBRLLine."Element ID",LinkPrefix,XLinkPrefix),NamespaceMgr);
          IF NOT ISNULL(XMLNode) THEN BEGIN
            fromLabel := GetAttribute(XLinkPrefix + 'label',XMLNode);
            IF XBRLSchema."xmlns:xbrli" = 'http://www.xbrl.org/2001/instance' THEN // spec. 2.0
              XMLNodeList :=
                LinkbaseDocNode.SelectNodes(
                  STRSUBSTNO(
                    '%3presentationLink/%3presentationArc[@%4from="%1" and @%4arcrole="%2"]',
                    fromLabel,'http://www.xbrl.org/linkprops/arc/parent-child',LinkPrefix,XLinkPrefix),NamespaceMgr)
            ELSE // 'http://www.xbrl.org/2003/instance' // spec. 2.1
              XMLNodeList :=
                LinkbaseDocNode.SelectNodes(
                  STRSUBSTNO(
                    '%3presentationLink/%3presentationArc[@%4from="%1" and @%4arcrole="%2"]',
                    fromLabel,'http://www.xbrl.org/2003/arcrole/parent-child',LinkPrefix,XLinkPrefix),NamespaceMgr);

            FOR CurrNodeIndex := 0 TO XMLNodeList.Count - 1 DO BEGIN
              XMLNode := XMLNodeList.Item(CurrNodeIndex);
              t := GetAttribute('order',XMLNode);
              IF t = '' THEN
                Order := 1
              ELSE
                EVALUATE(Order,t);
              toLabel := GetAttribute(XLinkPrefix + 'to',XMLNode);
              XMLNode :=
                LinkbaseDocNode.SelectSingleNode(
                  STRSUBSTNO(
                    '%2presentationLink/%2loc[@%3label="%1"]',toLabel,LinkPrefix,XLinkPrefix),NamespaceMgr);
              IF NOT ISNULL(XMLNode) THEN BEGIN
                ToName := GetAttribute(XLinkPrefix + 'href',XMLNode);
                IF ToName <> '' THEN BEGIN
                  i := STRPOS(ToName,'#');
                  IF i > 0 THEN BEGIN
                    ToSchemalocation := COPYSTR(ToName,1,i - 1);
                    ToName := COPYSTR(ToName,i + 1);
                  END ELSE
                    ToSchemalocation := '';
                  CopyXBRLElementsForPresentation(
                    LinkbaseDocNode,XBRLSchema."xmlns:xbrli",XBRLLinkbase."XBRL Taxonomy Name",ToName,LastXBRLLineNo);
                  XBRLTaxonomyLine2.COPY(TempXBRLLine);
                  TempXBRLLine.SETCURRENTKEY("XBRL Taxonomy Name","Element ID");
                  TempXBRLLine.SETRANGE("Element ID",ToName);
                  TempXBRLLine.SETRANGE(
                    "XBRL Taxonomy Name",TempXBRLLine."XBRL Taxonomy Name");
                  IF TempXBRLSchema.schemaLocation = ToSchemalocation THEN
                    TempXBRLLine.SETRANGE("XBRL Schema Line No.",TempXBRLSchema."Line No.")
                  ELSE BEGIN
                    TempXBRLSchema.SETRANGE("XBRL Taxonomy Name",XBRLLinkbase."XBRL Taxonomy Name");
                    TempXBRLSchema.SETRANGE(schemaLocation,ToSchemalocation);
                    IF TempXBRLSchema.FINDFIRST THEN
                      TempXBRLLine.SETRANGE("XBRL Schema Line No.",TempXBRLSchema."Line No.")
                    ELSE
                      TempXBRLLine.SETRANGE("XBRL Schema Line No.");
                  END;
                  UpdateParentPresentationLineNo := FALSE;
                  TempXBRLLine.SETRANGE("Presentation Linkbase Line No.",0);
                  IF TempXBRLLine.ISEMPTY THEN
                    TempXBRLLine.SETRANGE("Presentation Linkbase Line No.");
                  IF TempXBRLLine.FIND('-') THEN BEGIN
                    TempXBRLLine."Parent Line No." := XBRLTaxonomyLine2."Line No.";
                    TempXBRLLine."Presentation Order No." := ROUND(Order,1);
                    TempXBRLLine."Presentation Linkbase Line No." := XBRLLinkbase."Line No.";
                    TempXBRLLine.MODIFY;
                    UpdateParentPresentationLineNo := TRUE;
                  END;
                  TempXBRLLine.COPY(XBRLTaxonomyLine2);
                  IF UpdateParentPresentationLineNo AND (TempXBRLLine."Presentation Linkbase Line No." = 0) THEN BEGIN
                    TempXBRLLine."Presentation Linkbase Line No." := XBRLLinkbase."Line No.";
                    TempXBRLLine.MODIFY;
                  END;
                  TempXBRLLine.SETCURRENTKEY("XBRL Taxonomy Name","Line No.");
                END;
              END;
            END;
          END;
        UNTIL TempXBRLLine.NEXT = 0;

      SortPresentationOrder(0,0,'');
      SaveTaxonomyLines(TempXBRLLine);

      Window.CLOSE;
    END;

    PROCEDURE ImportCalculation@5(VAR XBRLLinkbase@1000 : Record 400);
    VAR
      XBRLTaxonomyLine@1003 : Record 395;
      XBRLTaxonomyLine2@1004 : Record 395;
      XBRLRollupLine@1017 : Record 398;
      TempXBRLSchema@1021 : TEMPORARY Record 399;
      InStr@1001 : InStream;
      LinkbaseDocument@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      LinkbaseDocNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNode@1008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CurrNodeIndex@1009 : Integer;
      i@1007 : Integer;
      j@1020 : Integer;
      Progress@1010 : Integer;
      NoOfRecords@1011 : Integer;
      Window@1012 : Dialog;
      Schemalocation@1013 : Text[1024];
      fromLabel@1014 : Text[250];
      toLabel@1015 : Text[250];
      ToName@1016 : Text[250];
      WeightTxt@1019 : Text[30];
      Weight@1018 : Decimal;
      FromSchemalocation@1022 : Text[100];
      ToSchemalocation@1023 : Text[100];
    BEGIN
      XBRLSchema.GET(XBRLLinkbase."XBRL Taxonomy Name",XBRLLinkbase."XBRL Schema Line No.");
      Window.OPEN(
        STRSUBSTNO(
          Text013,XBRLSchema.TABLECAPTION,XBRLSchema.Description,XBRLLinkbase.TABLECAPTION));
      Window.UPDATE(4,XBRLLinkbase.Type);
      Window.UPDATE(5,XBRLLinkbase.Description);

      WITH XBRLLinkbase DO BEGIN
        TESTFIELD(Type,Type::Calculation);
        CALCFIELDS(XML);
        IF NOT XML.HASVALUE THEN
          ERROR(Text012,TABLECAPTION,"Line No.");
        XML.CREATEINSTREAM(InStr);
      END;
      LinkbaseDocument := LinkbaseDocument.XmlDocument;
      LinkbaseDocument.Load(InStr);
      LinkbaseDocNode := LinkbaseDocument.FirstChild;
      WHILE LOWERCASE(LinkbaseDocNode.NodeType.ToString) IN ['xmldeclaration','processinginstruction','comment'] DO
        LinkbaseDocNode := LinkbaseDocNode.NextSibling;
      Schemalocation := GetAttribute('xsi:schemaLocation',LinkbaseDocNode);
      IF Schemalocation = '' THEN
        ERROR(Text015);
      i := STRPOS(Schemalocation,XBRLSchema.targetNamespace + ' ');
      IF i = 0 THEN
        Schemalocation := XBRLSchema.schemaLocation;

      TempXBRLSchema.DELETEALL;
      XBRLSchema.SETRANGE("XBRL Taxonomy Name",XBRLLinkbase."XBRL Taxonomy Name");
      IF XBRLSchema.FIND('-') THEN
        REPEAT
          IF XBRLSchema."Line No." = XBRLLinkbase."XBRL Schema Line No." THEN BEGIN
            i := STRPOS(Schemalocation,XBRLSchema.targetNamespace + ' ');
            IF i > 0 THEN BEGIN
              i := i + STRLEN(XBRLSchema.targetNamespace);
              WHILE (i < STRLEN(Schemalocation)) AND (Schemalocation[i] <> ' ') DO
                i := i + 1;
              WHILE (i < STRLEN(Schemalocation)) AND (Schemalocation[i] = ' ') DO
                i := i + 1;
              j := i;
              WHILE (i < STRLEN(Schemalocation)) AND (Schemalocation[i] <> ' ') DO
                i := i + 1;
              IF i = STRLEN(Schemalocation) THEN
                i := i + 1;
              XBRLSchema.schemaLocation := COPYSTR(Schemalocation,j,i - j);
              XBRLSchema.MODIFY;
              FromSchemalocation := XBRLSchema.schemaLocation;
            END;
          END;
          TempXBRLSchema := XBRLSchema;
          TempXBRLSchema.INSERT;
        UNTIL XBRLSchema.NEXT = 0;

      GetCommonXmnsPrefixes(LinkbaseDocNode);
      CreateNameSpaceManager(LinkbaseDocument);
      PopulateNamespaceManager(LinkbaseDocument.DocumentElement);
      PopulateNamespaceManager(LinkbaseDocNode.FirstChild);

      XBRLTaxonomyLine.SETRANGE("XBRL Taxonomy Name",XBRLLinkbase."XBRL Taxonomy Name");
      NoOfRecords := XBRLTaxonomyLine.COUNT;

      IF XBRLTaxonomyLine.FIND('-') THEN
        REPEAT
          Progress := Progress + 1;
          Window.UPDATE(6,ROUND(Progress / NoOfRecords * 10000,1));
          IF TempXBRLSchema."Line No." <> XBRLTaxonomyLine."XBRL Schema Line No." THEN
            TempXBRLSchema.GET(XBRLTaxonomyLine."XBRL Taxonomy Name",XBRLTaxonomyLine."XBRL Schema Line No.");
          FromSchemalocation := TempXBRLSchema.schemaLocation;
          XMLNode :=
            LinkbaseDocNode.SelectSingleNode(
              STRSUBSTNO(
                '%3calculationLink/%3loc[@%4href="%1#%2"]',
                FromSchemalocation,XBRLTaxonomyLine."Element ID",LinkPrefix,XLinkPrefix),NamespaceMgr);
          IF NOT ISNULL(XMLNode) THEN BEGIN
            fromLabel := GetAttribute(XLinkPrefix + 'label',XMLNode);
            IF XBRLSchema."xmlns:xbrli" = 'http://www.xbrl.org/2001/instance' THEN // spec. 2.0
              XMLNodeList :=
                LinkbaseDocNode.SelectNodes(
                  STRSUBSTNO(
                    '%3calculationLink/%3calculationArc[@%4from="%1" and @%4arcrole="%2"]',
                    fromLabel,'http://www.xbrl.org/linkprops/arc/parent-child',LinkPrefix,XLinkPrefix),NamespaceMgr)
            ELSE // 'http://www.xbrl.org/2003/instance' // spec. 2.1
              XMLNodeList :=
                LinkbaseDocNode.SelectNodes(
                  STRSUBSTNO(
                    '%3calculationLink/%3calculationArc[@%4from="%1" and @%4arcrole="%2"]',
                    fromLabel,'http://www.xbrl.org/2003/arcrole/summation-item',LinkPrefix,XLinkPrefix),NamespaceMgr);

            FOR CurrNodeIndex := 0 TO XMLNodeList.Count - 1 DO BEGIN
              XMLNode := XMLNodeList.Item(CurrNodeIndex);
              toLabel := GetAttribute(STRSUBSTNO('%1to',XLinkPrefix),XMLNode);
              WeightTxt := GetAttribute('weight',XMLNode);
              IF WeightTxt <> '' THEN
                EVALUATE(Weight,WeightTxt)
              ELSE
                Weight := 0;
              XMLNode :=
                LinkbaseDocNode.SelectSingleNode(
                  STRSUBSTNO('%2calculationLink/%2loc[@%3label="%1"]',toLabel,LinkPrefix,XLinkPrefix),NamespaceMgr);
              IF NOT ISNULL(XMLNode) THEN BEGIN
                ToName := GetAttribute(STRSUBSTNO('%1href',XLinkPrefix),XMLNode);
                IF ToName <> '' THEN BEGIN
                  i := STRPOS(ToName,'#');
                  IF i > 0 THEN BEGIN
                    ToSchemalocation := COPYSTR(ToName,1,i - 1);
                    ToName := COPYSTR(ToName,i + 1);
                  END ELSE
                    ToSchemalocation := '';
                  XBRLTaxonomyLine2.SETCURRENTKEY("XBRL Taxonomy Name","Element ID");
                  XBRLTaxonomyLine2.SETRANGE("Element ID",ToName);
                  XBRLTaxonomyLine2.SETRANGE(
                    "XBRL Taxonomy Name",XBRLTaxonomyLine."XBRL Taxonomy Name");
                  IF TempXBRLSchema.schemaLocation = ToSchemalocation THEN
                    XBRLTaxonomyLine2.SETRANGE("XBRL Schema Line No.",TempXBRLSchema."Line No.")
                  ELSE BEGIN
                    TempXBRLSchema.SETRANGE("XBRL Taxonomy Name",XBRLLinkbase."XBRL Taxonomy Name");
                    TempXBRLSchema.SETRANGE(schemaLocation,ToSchemalocation);
                    IF TempXBRLSchema.FINDFIRST THEN
                      XBRLTaxonomyLine2.SETRANGE("XBRL Schema Line No.",TempXBRLSchema."Line No.")
                    ELSE
                      XBRLTaxonomyLine2.SETRANGE("XBRL Schema Line No.");
                  END;
                  IF XBRLTaxonomyLine2.FINDFIRST THEN BEGIN
                    IF NOT XBRLRollupLine.GET(
                         XBRLTaxonomyLine."XBRL Taxonomy Name",XBRLTaxonomyLine."Line No.",
                         XBRLTaxonomyLine2."Line No.")
                    THEN BEGIN
                      XBRLRollupLine.INIT;
                      XBRLRollupLine."XBRL Taxonomy Name" := XBRLTaxonomyLine2."XBRL Taxonomy Name";
                      XBRLRollupLine."XBRL Taxonomy Line No." := XBRLTaxonomyLine."Line No.";
                      XBRLRollupLine."From XBRL Taxonomy Line No." := XBRLTaxonomyLine2."Line No.";
                      XBRLRollupLine.Weight := Weight;
                      XBRLRollupLine.INSERT;
                    END ELSE
                      IF XBRLRollupLine.Weight <> Weight THEN BEGIN
                        XBRLRollupLine.Weight := Weight;
                        XBRLRollupLine.MODIFY;
                      END;
                    IF XBRLTaxonomyLine."Source Type" <> XBRLTaxonomyLine."Source Type"::Rollup THEN BEGIN
                      XBRLTaxonomyLine."Source Type" := XBRLTaxonomyLine."Source Type"::Rollup;
                      XBRLTaxonomyLine.MODIFY;
                    END;
                  END;
                END;
              END;
            END;
          END;
        UNTIL XBRLTaxonomyLine.NEXT = 0;
      Window.CLOSE;
    END;

    PROCEDURE ImportReference@8(VAR XBRLLinkbase@1000 : Record 400);
    VAR
      XBRLTaxonomyLine@1003 : Record 395;
      XBRLCommentLine@1004 : Record 396;
      InStr@1001 : InStream;
      LinkbaseDocument@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      LinkbaseDocNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNode@1008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ReferenceNode@1009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CurrNodeIndex@1016 : Integer;
      i@1007 : Integer;
      j@1015 : Integer;
      Progress@1010 : Integer;
      NoOfRecords@1011 : Integer;
      Window@1012 : Dialog;
      Schemalocation@1013 : Text[1024];
      FromLabel@1014 : Text[250];
    BEGIN
      XBRLSchema.GET(XBRLLinkbase."XBRL Taxonomy Name",XBRLLinkbase."XBRL Schema Line No.");
      Window.OPEN(
        STRSUBSTNO(
          Text013,XBRLSchema.TABLECAPTION,XBRLSchema.Description,XBRLLinkbase.TABLECAPTION));
      Window.UPDATE(4,XBRLLinkbase.Type);
      Window.UPDATE(5,XBRLLinkbase.Description);

      WITH XBRLLinkbase DO BEGIN
        TESTFIELD(Type,Type::Reference);
        CALCFIELDS(XML);
        IF NOT XML.HASVALUE THEN
          ERROR(Text012,TABLECAPTION,"Line No.");
        XML.CREATEINSTREAM(InStr);
      END;
      LinkbaseDocument := LinkbaseDocument.XmlDocument;
      LinkbaseDocument.Load(InStr);
      LinkbaseDocNode := LinkbaseDocument.FirstChild;
      WHILE LOWERCASE(LinkbaseDocNode.NodeType.ToString) IN ['xmldeclaration','processinginstruction','comment'] DO
        LinkbaseDocNode := LinkbaseDocNode.NextSibling;
      Schemalocation := GetAttribute('xsi:schemaLocation',LinkbaseDocNode);
      IF Schemalocation = '' THEN
        ERROR(Text015);
      i := STRPOS(Schemalocation,XBRLSchema.targetNamespace + ' ');
      IF i <> 0 THEN BEGIN
        i := i + STRLEN(XBRLSchema.targetNamespace);
        WHILE Schemalocation[i] = ' ' DO
          i := i + 1;
        j := i;
        WHILE (Schemalocation[j] <> ' ') AND (j <= STRLEN(Schemalocation)) DO
          j := j + 1;
        Schemalocation := COPYSTR(Schemalocation,i,j - i);
      END ELSE
        Schemalocation := XBRLSchema.schemaLocation;

      GetCommonXmnsPrefixes(LinkbaseDocNode);
      CreateNameSpaceManager(LinkbaseDocument);
      PopulateNamespaceManager(LinkbaseDocument.DocumentElement);
      PopulateNamespaceManager(LinkbaseDocNode.FirstChild);

      XBRLTaxonomyLine.SETRANGE("XBRL Taxonomy Name",XBRLLinkbase."XBRL Taxonomy Name");
      XBRLTaxonomyLine.SETRANGE("XBRL Schema Line No.",XBRLLinkbase."XBRL Schema Line No.");
      NoOfRecords := XBRLTaxonomyLine.COUNT;

      IF XBRLTaxonomyLine.FIND('-') THEN
        REPEAT
          Progress := Progress + 1;
          Window.UPDATE(6,ROUND(Progress / NoOfRecords * 10000,1));
          XMLNode :=
            LinkbaseDocNode.SelectSingleNode(
              STRSUBSTNO(
                '%3referenceLink/%3loc[@%4href="%1#%2"]',
                Schemalocation,XBRLTaxonomyLine."Element ID",LinkPrefix,XLinkPrefix),NamespaceMgr);
          IF NOT ISNULL(XMLNode) THEN BEGIN
            FromLabel := GetAttribute(STRSUBSTNO('%1label',XLinkPrefix),XMLNode);
            IF XBRLSchema."xmlns:xbrli" = 'http://www.xbrl.org/2001/instance' THEN // spec. 2.0
              XMLNodeList :=
                LinkbaseDocNode.SelectNodes(
                  STRSUBSTNO(
                    '%3referenceLink/%3referenceArc[@%4from="%1" and @%4arcrole="%2"]',
                    FromLabel,'http://www.xbrl.org/linkprops/arc/element-reference',LinkPrefix,XLinkPrefix),NamespaceMgr)
            ELSE // 'http://www.xbrl.org/2003/instance' // spec. 2.1
              XMLNodeList :=
                LinkbaseDocNode.SelectNodes(
                  STRSUBSTNO(
                    '%3referenceLink/%3referenceArc[@%4from="%1" and @%4arcrole="%2"]',
                    FromLabel,'http://www.xbrl.org/2003/arcrole/concept-reference',LinkPrefix,XLinkPrefix),NamespaceMgr);

            IF XMLNodeList.Count > 0 THEN BEGIN
              XBRLCommentLine.SETRANGE("XBRL Taxonomy Name",XBRLTaxonomyLine."XBRL Taxonomy Name");
              XBRLCommentLine.SETRANGE("XBRL Taxonomy Line No.",XBRLTaxonomyLine."Line No.");
              XBRLCommentLine.SETRANGE("Comment Type",XBRLCommentLine."Comment Type"::Reference);
              XBRLCommentLine.DELETEALL;
              XBRLCommentLine.INIT;
              XBRLCommentLine."XBRL Taxonomy Name" := XBRLTaxonomyLine."XBRL Taxonomy Name";
              XBRLCommentLine."XBRL Taxonomy Line No." := XBRLTaxonomyLine."Line No.";
              XBRLCommentLine."Comment Type" := XBRLCommentLine."Comment Type"::Reference;
              XBRLCommentLine."Line No." := 0;
              FOR CurrNodeIndex := 0 TO XMLNodeList.Count - 1 DO BEGIN
                XMLNode := XMLNodeList.Item(CurrNodeIndex);
                ReferenceNode :=
                  LinkbaseDocNode.SelectSingleNode(
                    STRSUBSTNO(
                      '%2referenceLink/%2reference[@%3label="%1"]',
                      GetAttribute(XLinkPrefix + 'to',XMLNode),LinkPrefix,XLinkPrefix),NamespaceMgr);
                IF NOT ISNULL(ReferenceNode) THEN BEGIN
                  ReferenceNode := ReferenceNode.FirstChild;
                  WHILE NOT ISNULL(ReferenceNode) DO BEGIN
                    InsertReference(ReferenceNode,XBRLCommentLine);
                    ReferenceNode := ReferenceNode.NextSibling;
                  END;
                END;
              END;
            END;
          END;
        UNTIL XBRLTaxonomyLine.NEXT = 0;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE InsertReference@10(DocumentationNode2@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR XBRLCommentLine@1008 : Record 396);
    VAR
      i@1003 : Integer;
      CommentTextCutIndex@1010 : Integer;
      s@1006 : Text[1024];
      CommentText@1009 : Text[1024];
    BEGIN
      IF XBRLCommentLine."Comment Type" = XBRLCommentLine."Comment Type"::Reference THEN BEGIN
        s := COPYSTR(DocumentationNode2.LocalName,1,70);
        i := STRPOS(s,':');
        IF i > 0 THEN
          s := COPYSTR(s,i + 1);
        s := s + ': ';
        i := STRLEN(s);
      END;

      CommentText := COPYSTR(DocumentationNode2.InnerText,1,1024);
      CommentTextCutIndex := STRPOS(CommentText,' ');
      IF s <> '' THEN BEGIN
        CommentText := COPYSTR(s,1,i) + COPYSTR(CommentText,1,1024 - i);
        CommentTextCutIndex := CommentTextCutIndex + i;
      END;

      IF (CommentTextCutIndex < 66) OR (CommentTextCutIndex > MAXSTRLEN(XBRLCommentLine.Comment)) THEN
        CommentTextCutIndex := MAXSTRLEN(XBRLCommentLine.Comment);

      XBRLCommentLine."Line No." := XBRLCommentLine."Line No." + 10000;
      XBRLCommentLine.Comment := COPYSTR(CommentText,1,CommentTextCutIndex);
      XBRLCommentLine.INSERT;
    END;

    LOCAL PROCEDURE UpdateFromLinkbases@7(XBRLTaxonomy@1000 : Record 394);
    VAR
      XBRLSchema@1001 : Record 399;
      XBRLLinkbase@1002 : Record 400;
    BEGIN
      XBRLSchema.SETRANGE("XBRL Taxonomy Name",XBRLTaxonomy.Name);
      IF XBRLSchema.FIND('-') THEN
        REPEAT
          XBRLLinkbase.SETRANGE("XBRL Taxonomy Name",XBRLSchema."XBRL Taxonomy Name");
          XBRLLinkbase.SETRANGE("XBRL Schema Line No.",XBRLSchema."Line No.");
          IF XBRLLinkbase.FIND('-') THEN
            REPEAT
              CASE XBRLLinkbase.Type OF
                XBRLLinkbase.Type::Label:
                  ImportLabels(XBRLLinkbase);
                XBRLLinkbase.Type::Calculation:
                  ImportCalculation(XBRLLinkbase);
                XBRLLinkbase.Type::Presentation:
                  ImportPresentation(XBRLLinkbase);
                XBRLLinkbase.Type::Reference:
                  ImportReference(XBRLLinkbase);
              END;
            UNTIL XBRLLinkbase.NEXT = 0;
        UNTIL XBRLSchema.NEXT = 0;
    END;

    LOCAL PROCEDURE SortPresentationOrder@12(ParentLineNo@1001 : Integer;ParentLevel@1002 : Integer;ParentPresentationOrder@1003 : Text[100]);
    VAR
      TempXBRLLine0@1000 : TEMPORARY Record 395;
      PresentationOrderNo@1004 : Integer;
    BEGIN
      TempXBRLLine0.DELETEALL;
      TempXBRLLine.SETCURRENTKEY("Parent Line No.");
      TempXBRLLine.SETRANGE("Parent Line No.",ParentLineNo);
      IF NOT TempXBRLLine.FIND('-') THEN BEGIN
        TempXBRLLine.SETRANGE("Parent Line No.");
        EXIT;
      END;
      REPEAT
        IF ParentLineNo = 0 THEN BEGIN
          TempXBRLLine.Level := ParentLevel;
          TempXBRLLine."Presentation Order" := COPYSTR(FORMAT(100000000 + TempXBRLLine."Line No."),2)
        END ELSE BEGIN
          TempXBRLLine.Level := ParentLevel + 1;
          PresentationOrderNo := PresentationOrderNo + 1;
          IF TempXBRLLine."Presentation Order No." = 0 THEN
            TempXBRLLine."Presentation Order No." := PresentationOrderNo;
          TempXBRLLine."Presentation Order" :=
            ParentPresentationOrder + '.' + COPYSTR(FORMAT(1000 + TempXBRLLine."Presentation Order No."),2);
          // Presentation order must be unique
          TempXBRLLine0.RESET;
          TempXBRLLine0.SETCURRENTKEY("XBRL Taxonomy Name","Presentation Order");
          TempXBRLLine0.SETRANGE("XBRL Taxonomy Name",TempXBRLLine."XBRL Taxonomy Name");
          TempXBRLLine0.SETRANGE("Presentation Order",TempXBRLLine."Presentation Order");
          IF NOT TempXBRLLine0.ISEMPTY THEN BEGIN
            TempXBRLLine0.SETRANGE("Presentation Order");
            TempXBRLLine0.SETRANGE("Parent Line No.",ParentLineNo);
            TempXBRLLine0.FINDLAST;
            TempXBRLLine."Presentation Order" := INCSTR(TempXBRLLine0."Presentation Order");
          END;
        END;
        TempXBRLLine.MODIFY;
        TempXBRLLine0 := TempXBRLLine;
        TempXBRLLine0.INSERT;
      UNTIL TempXBRLLine.NEXT = 0;
      TempXBRLLine.SETRANGE("Parent Line No.");

      TempXBRLLine0.RESET;
      IF TempXBRLLine0.FIND('-') THEN
        REPEAT
          SortPresentationOrder(TempXBRLLine0."Line No.",TempXBRLLine0.Level,TempXBRLLine0."Presentation Order");
        UNTIL TempXBRLLine0.NEXT = 0;
      TempXBRLLine.RESET;
    END;

    LOCAL PROCEDURE GetCommonXmnsPrefixes@14(DocNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      xsdPrefix := GetXmlnsPrefix('http://www.w3.org/2001/XMLSchema',DocNode);

      XLinkPrefix := GetXmlnsPrefix('http://www.w3.org/1999/xlink',DocNode);

      LinkPrefix := GetXmlnsPrefix('http://www.xbrl.org/2001/XLink/xbrllinkbase',DocNode);
      IF LinkPrefix = '' THEN
        LinkPrefix := GetXmlnsPrefix('http://www.xbrl.org/2003/linkbase',DocNode);

      xbrliPrefix := GetXmlnsPrefix('http://www.xbrl.org/2001/instance',DocNode);
      IF xbrliPrefix = '' THEN
        xbrliPrefix := GetXmlnsPrefix('http://www.xbrl.org/2003/instance',DocNode);
    END;

    LOCAL PROCEDURE GetXmlnsPrefix@15(NameSpace@1000 : Text[260];DocNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Text;
    VAR
      DocNode2@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Prefix@1002 : Text;
      i@1001 : Integer;
    BEGIN
      Prefix := GetAttributeNameByValue(NameSpace,DocNode,FALSE);
      IF (Prefix = '') AND DocNode.HasChildNodes THEN BEGIN
        DocNode2 := DocNode.FirstChild;
        Prefix := GetAttributeNameByValue(NameSpace,DocNode2,FALSE);
      END;

      i := STRPOS(Prefix,'xmlns:');
      IF i > 0 THEN BEGIN
        Prefix := COPYSTR(Prefix,i + 6);
        IF STRLEN(Prefix) > 0 THEN
          Prefix := Prefix + ':';
      END ELSE
        Prefix := '';
      EXIT(Prefix);
    END;

    PROCEDURE ReadNamespaceFromSchema@13(VAR SchemaLocation@1003 : Text) : Text[1024];
    VAR
      TempBlob@1006 : Record 99008535;
      FileMgt@1005 : Codeunit 419;
      TaxonomyNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BlobInStream@1007 : InStream;
      i@1004 : Integer;
      FileName@1000 : Text;
    BEGIN
      IF STRPOS(SchemaLocation,'/') <= 0 THEN BEGIN
        i := STRLEN(SchemaLocation);
        IF i > 1 THEN
          WHILE (i > 1) AND (SchemaLocation[i] <> '\') DO
            i := i - 1;
        IF i > 1 THEN
          FileName := COPYSTR(SchemaLocation,1,i);
      END;
      FileName := FileMgt.BLOBImport(TempBlob,FileName + '*.xsd');
      IF FileName = '' THEN
        EXIT('');

      TaxonomyDocument := TaxonomyDocument.XmlDocument;
      TempBlob.Blob.CREATEINSTREAM(BlobInStream);
      TaxonomyDocument.Load(BlobInStream);
      TaxonomyNode := TaxonomyDocument.DocumentElement;
      SchemaLocation := FileName;
      EXIT(GetAttribute('targetNamespace',TaxonomyNode));
    END;

    PROCEDURE SetFilesOnServer@19(NewFilesOnServer@1000 : Boolean);
    BEGIN
      // FilesOnServer is used when scripting this codeunit.
      FilesOnServer := NewFilesOnServer;
    END;

    LOCAL PROCEDURE PopulateNamespaceManager@20(XmlNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      Attribute@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      Attributes@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      i@1001 : Integer;
      Prefix@1004 : Text;
    BEGIN
      IF NOT ISNULL(XmlNode) THEN BEGIN
        Attributes := XmlNode.Attributes;
        FOR i := 0 TO Attributes.Count - 1 DO BEGIN
          Attribute := Attributes.Item(i);
          IF STRPOS(Attribute.Name,'xmlns') = 1 THEN
            IF STRPOS(Attribute.Name,':') > 0 THEN BEGIN
              Prefix := COPYSTR(Attribute.Name,STRPOS(Attribute.Name,':') + 1);
              IF XmlNode.Prefix = Prefix THEN
                xsdPrefix := Prefix + ':';
              NamespaceMgr.AddNamespace(Prefix,Attribute.Value)
            END ELSE BEGIN
              NamespaceMgr.AddNamespace('defns',Attribute.Value);
              xsdPrefix := 'defns:'
            END;
        END;

        IF XLinkPrefix = '' THEN
          XLinkPrefix := xsdPrefix;
        IF LinkPrefix = '' THEN
          LinkPrefix := xsdPrefix;
        IF xbrliPrefix = '' THEN
          xbrliPrefix := xsdPrefix;
      END;
    END;

    LOCAL PROCEDURE IsWindowsClientSession@3() : Boolean;
    VAR
      ActiveSession@1000 : Record 2000000110;
    BEGIN
      ActiveSession.GET(SERVICEINSTANCEID,SESSIONID);
      EXIT(ActiveSession."Client Type" = ActiveSession."Client Type"::"Windows Client");
    END;

    LOCAL PROCEDURE CreateNameSpaceManager@18(XmlDocument@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    BEGIN
      IF NOT ISNULL(NamespaceMgr) THEN
        CLEAR(NamespaceMgr);

      NamespaceMgr := NamespaceMgr.XmlNamespaceManager(XmlDocument.NameTable);
    END;

    LOCAL PROCEDURE GetDocumentPreFix@27(TaxonomyNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Text[30];
    BEGIN
      IF STRPOS(TaxonomyNode.Name,':') > 1 THEN
        EXIT(COPYSTR(TaxonomyNode.Name,1,STRPOS(TaxonomyNode.Name,':')));
    END;

    LOCAL PROCEDURE IsElementTypeDescription@22(ElementNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      XMLElement@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      // "Sequence" type
      XMLElement :=
        ElementNode.OwnerDocument.DocumentElement.SelectSingleNode(
          STRSUBSTNO('%1element/%1complexType/%1sequence/%1element[@ref="%2%3"]',
            xsdPrefix,targetNamespacePrefix,GetAttribute('name',ElementNode)),
          NamespaceMgr);

      // "Choice" type
      IF ISNULL(XMLElement) THEN
        XMLElement :=
          ElementNode.OwnerDocument.DocumentElement.SelectSingleNode(
            STRSUBSTNO('%1element/%1complexType/%1choice/%1element[@ref="%2%3"]',
              xsdPrefix,targetNamespacePrefix,GetAttribute('name',ElementNode)),
            NamespaceMgr);

      IF ISNULL(XMLElement) THEN
        XMLElement :=
          ElementNode.OwnerDocument.DocumentElement.SelectSingleNode(
            STRSUBSTNO('%1element/%1complexType/%1choice/%1element[@ref="%2%3"]',
              xsdPrefix,targetNamespacePrefix,GetAttribute('substitutionGroup',ElementNode)),
            NamespaceMgr);

      EXIT(NOT ISNULL(XMLElement));
    END;

    LOCAL PROCEDURE SelectSingleNode@29(SourceNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";XPathExpr@1001 : Text;Prefix@1002 : Text;VAR ResultNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      ResultNode := SourceNode.SelectSingleNode(STRSUBSTNO(XPathExpr,Prefix),NamespaceMgr);
      IF ISNULL(ResultNode) THEN
        ResultNode := SourceNode.SelectSingleNode(STRSUBSTNO(XPathExpr,''),NamespaceMgr);
    END;

    LOCAL PROCEDURE SelectNodes@28(SourceNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";XPathExpr@1001 : Text;Prefix@1002 : Text;VAR ResultElementList@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList");
    BEGIN
      ResultElementList := SourceNode.SelectNodes(STRSUBSTNO(XPathExpr,Prefix),NamespaceMgr);
      IF ResultElementList.Count = 0 THEN
        ResultElementList := SourceNode.SelectNodes(STRSUBSTNO(XPathExpr,''),NamespaceMgr);
    END;

    LOCAL PROCEDURE CopyXBRLElementsForPresentation@23(VAR LinkbaseDocNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";xbrli@1001 : Text;XBRLTaxonomyName@1002 : Code[20];XBRLElementName@1003 : Text;VAR LastXBRLLineNo@1007 : Integer);
    VAR
      XBRLTaxonomyLine2@1004 : Record 395;
      XMLNodeList@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1006 : Integer;
    BEGIN
      IF xbrli = 'http://www.xbrl.org/2001/instance' THEN // spec. 2.0
        XMLNodeList :=
          LinkbaseDocNode.SelectNodes(
            STRSUBSTNO(
              '%3presentationLink/%3presentationArc[@%4to="%1" and @%4arcrole="%2"]',
              XBRLElementName,'http://www.xbrl.org/linkprops/arc/parent-child',LinkPrefix,XLinkPrefix),NamespaceMgr)
      ELSE // 'http://www.xbrl.org/2003/instance' // spec. 2.1
        XMLNodeList :=
          LinkbaseDocNode.SelectNodes(
            STRSUBSTNO(
              '%3presentationLink/%3presentationArc[@%4to="%1" and @%4arcrole="%2"]',
              XBRLElementName,'http://www.xbrl.org/2003/arcrole/parent-child',LinkPrefix,XLinkPrefix),NamespaceMgr);

      // TempXBRLLine is a global variable, so we must save its current state before any manupulations to restore it later
      XBRLTaxonomyLine2.COPY(TempXBRLLine);
      TempXBRLLine.RESET;
      TempXBRLLine.SETRANGE("XBRL Taxonomy Name",XBRLTaxonomyName);
      TempXBRLLine.SETRANGE("Element ID",XBRLElementName);
      TempXBRLLine.SETRANGE("Type Description Element",FALSE);

      FOR i := 1 TO XMLNodeList.Count - TempXBRLLine.COUNT DO BEGIN
        LastXBRLLineNo += 10000;
        CopyElementLine(XBRLTaxonomyName,XBRLElementName,LastXBRLLineNo);
      END;

      TempXBRLLine.COPY(XBRLTaxonomyLine2);
    END;

    LOCAL PROCEDURE CopyElementLine@24(TaxonomyName@1000 : Code[20];ElementName@1001 : Text;XBRLLineNo@1002 : Integer);
    VAR
      XBRLTaxonomyLine@1003 : Record 395;
    BEGIN
      WITH TempXBRLLine DO BEGIN
        XBRLTaxonomyLine.SETRANGE("XBRL Taxonomy Name",TaxonomyName);
        XBRLTaxonomyLine.SETRANGE("Element ID",ElementName);
        IF XBRLTaxonomyLine.FINDFIRST THEN BEGIN
          TRANSFERFIELDS(XBRLTaxonomyLine);
          "Presentation Linkbase Line No." := 0;
          "Line No." := XBRLLineNo;
          INSERT;

          CopyRelatedXBRLSetup(TaxonomyName,XBRLTaxonomyLine."Line No.",XBRLLineNo,DATABASE::"XBRL Taxonomy Label");
          CopyRelatedXBRLSetup(TaxonomyName,XBRLTaxonomyLine."Line No.",XBRLLineNo,DATABASE::"XBRL Comment Line");
          CopyRelatedXBRLSetup(TaxonomyName,XBRLTaxonomyLine."Line No.",XBRLLineNo,DATABASE::"XBRL G/L Map Line");
          CopyRelatedXBRLSetup(TaxonomyName,XBRLTaxonomyLine."Line No.",XBRLLineNo,DATABASE::"XBRL Rollup Line");
        END;
      END;
    END;

    LOCAL PROCEDURE CopyRelatedXBRLSetup@25(TaxonomyName@1000 : Code[20];FromTaxonomyLineNo@1001 : Integer;ToTaxonomyLineNo@1002 : Integer;TableNo@1003 : Integer);
    VAR
      FromRecRef@1004 : RecordRef;
      ToRecRef@1005 : RecordRef;
      FilterFieldRef@1006 : FieldRef;
      NewLineNoFieldRef@1007 : FieldRef;
    BEGIN
      FromRecRef.OPEN(TableNo);
      FilterFieldRef := FromRecRef.FIELD(1);  // Field "XBRL Taxonomy Name"
      FilterFieldRef.SETRANGE(TaxonomyName);
      FilterFieldRef := FromRecRef.FIELD(2);  // Field "XBRL Taxonomy Line No."
      FilterFieldRef.SETRANGE(FromTaxonomyLineNo);
      IF FromRecRef.FINDSET THEN
        REPEAT
          ToRecRef := FromRecRef.DUPLICATE;
          NewLineNoFieldRef := ToRecRef.FIELD(2);
          NewLineNoFieldRef.VALUE := ToTaxonomyLineNo;
          ToRecRef.INSERT;
        UNTIL FromRecRef.NEXT = 0;
    END;

    LOCAL PROCEDURE LoadLinkbaseDocument@21(VAR XBRLLinkbase@1001 : Record 400;VAR LinkbaseDocument@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      InStr@1002 : InStream;
    BEGIN
      WITH XBRLLinkbase DO BEGIN
        TESTFIELD(Type,Type::Presentation);
        CALCFIELDS(XML);
        IF NOT XML.HASVALUE THEN
          ERROR(Text012,TABLECAPTION,"Line No.");
        XML.CREATEINSTREAM(InStr);
      END;
      LinkbaseDocument := LinkbaseDocument.XmlDocument;
      LinkbaseDocument.Load(InStr);
    END;

    LOCAL PROCEDURE FindLinkbaseDocNode@26(VAR LinkbaseDocument@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR LinkbaseDocNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      LinkbaseDocNode := LinkbaseDocument.FirstChild;
      WHILE LOWERCASE(LinkbaseDocNode.NodeType.ToString) IN ['xmldeclaration','processinginstruction','comment'] DO
        LinkbaseDocNode := LinkbaseDocNode.NextSibling;
    END;

    LOCAL PROCEDURE SaveTaxonomyLines@32(VAR TempXBRLTaxonomyLine@1000 : TEMPORARY Record 395);
    VAR
      XBRLTaxonomyLine@1001 : Record 395;
    BEGIN
      IF TempXBRLTaxonomyLine.FINDSET THEN
        REPEAT
          WITH XBRLTaxonomyLine DO BEGIN
            XBRLTaxonomyLine := TempXBRLTaxonomyLine;
            SETRANGE("XBRL Taxonomy Name","XBRL Taxonomy Name");
            SETRANGE("Line No.","Line No.");
            IF ISEMPTY THEN
              INSERT
            ELSE
              MODIFY;
          END;
        UNTIL TempXBRLTaxonomyLine.NEXT = 0;
    END;

    LOCAL PROCEDURE InitTaxonomyLinesBuf@36(VAR XBRLTaxonomyLine@1000 : Record 395;VAR TempXBRLTaxonomyLine@1001 : TEMPORARY Record 395);
    BEGIN
      TempXBRLTaxonomyLine.DELETEALL;
      XBRLTaxonomyLine.SETRANGE("Type Description Element",FALSE);
      IF XBRLTaxonomyLine.FINDSET THEN
        REPEAT
          TempXBRLTaxonomyLine := XBRLTaxonomyLine;
          TempXBRLTaxonomyLine.INSERT;
        UNTIL XBRLTaxonomyLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

