OBJECT Table 9062369 Panel Event
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Parent Table ID");
               Rec.TESTFIELD("Parent Code");
               CheckModifyPermission();
               IF (Rec.ID = 0) THEN
                 Rec.ID := NewId();
               PanelTimestampManagement.Add(Rec."Panel Code");
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               CheckModifyPermission();
               PanelTimestampManagement.Add(Rec."Panel Code");
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               CheckModifyPermission();
               PanelTimestampManagement.Add(Rec."Panel Code");
             END;

    OnRename=BEGIN
               CheckModifyPermission();
               PanelTimestampManagement.Rename(xRec."Panel Code", Rec."Panel Code");
             END;

    CaptionML=[ENU=Panel Event;
               ENG=Panel Event];
    LookupPageID=Page9062458;
    DrillDownPageID=Page9062458;
  }
  FIELDS
  {
    { 1   ;   ;Parent Table ID     ;Integer       ;CaptionML=[ENU=Parent Table ID;
                                                              ENG=Parent Table ID] }
    { 2   ;   ;Parent Table Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Name" WHERE (Object Type=CONST(TableData),
                                                                                                             Object ID=FIELD(Parent Table ID)));
                                                   CaptionML=[ENU=Parent Table Name;
                                                              ENG=Parent Table Name];
                                                   Editable=No }
    { 3   ;   ;Parent Code         ;Code20        ;TableRelation=Panel;
                                                   CaptionML=[ENU=Parent Code;
                                                              ENG=Parent Code] }
    { 4   ;   ;Parent ID           ;Integer       ;CaptionML=[ENU=Parent ID;
                                                              ENG=Parent ID] }
    { 10  ;   ;ID                  ;Integer       ;CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 11  ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=" ,Click";
                                                                    ENG=" ,Click"];
                                                   OptionString=[ ,Click] }
    { 12  ;   ;Object ID           ;Integer       ;TableRelation=Object.ID WHERE (Type=FIELD(Object Type));
                                                   OnValidate=BEGIN
                                                                UpdateDescription();
                                                                Rec.CALCFIELDS("Object Name");
                                                              END;

                                                   CaptionML=[ENU=Object ID;
                                                              ENG=Object ID] }
    { 13  ;   ;Object Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Name" WHERE (Object Type=FIELD(Object Type),
                                                                                                             Object ID=FIELD(Object ID)));
                                                   OnLookup=BEGIN
                                                              IF (ObjectFieldLookups.CodeunitLookup(Rec."Object ID")) THEN
                                                                Rec.VALIDATE("Object ID");
                                                            END;

                                                   CaptionML=[ENU=Object Name;
                                                              ENG=Object Name];
                                                   Editable=No }
    { 14  ;   ;Action Type         ;Option        ;OnValidate=BEGIN
                                                                UpdateDescription();
                                                              END;

                                                   CaptionML=[ENU=Action Type;
                                                              ENG=Action Type];
                                                   OptionCaptionML=[ENU=" ,Refresh,Show,Run Object,Open Panel,Back,Lookup,Hyperlink,Run Quick Report,Open Planning Board,Run Questionnaire,Edit Panels,Edit Panel,Copy Panel,Reset Panel,,,,,,,Edit Tile Groups,New Tile Group,Delete Tile Group,Copy Tile Group,Show Tile Groups,Hide Tile Group,Reset Tile Groups,,,,Edit Tiles,Edit Tile,New Tile,Delete Tile,Copy Tile,Show Tiles,Hide Tile,,,,Edit Links,Edit Link,New Link,Delete Link,Copy Link,Show Links,Hide Link,Reset Links,,,,,,Apply Palette,Load Image from Library,,,,,,Run Checklist";
                                                                    ENG=" ,Refresh,Show,Run Object,Open Panel,Back,Lookup,Hyperlink,Run Quick Report,Open Planning Board,Run Questionnaire,Edit Panels,Edit Panel,Copy Panel,Reset Panel,,,,,,,Edit Tile Groups,New Tile Group,Delete Tile Group,Copy Tile Group,Show Tile Groups,Hide Tile Group,Reset Tile Groups,,,,Edit Tiles,Edit Tile,New Tile,Delete Tile,Copy Tile,Show Tiles,Hide Tile,,,,Edit Links,Edit Link,New Link,Delete Link,Copy Link,Show Links,Hide Link,Reset Links,,,,,,Apply Palette,Load Image from Library,,,,,,Run Checklist"];
                                                   OptionString=[ ,Refresh,Show,Run Object,Open Panel,Back,Lookup,Hyperlink,Run Quick Report,Open Planning Board,Run Questionnaire,Edit Panels,Edit Panel,Copy Panel,Reset Panel,,,,,,,Edit Tile Groups,New Tile Group,Delete Tile Group,Copy Tile Group,Show Tile Groups,Hide Tile Group,Reset Tile Groups,,,,Edit Tiles,Edit Tile,New Tile,Delete Tile,Copy Tile,Show Tiles,Hide Tile,,,,Edit Links,Edit Link,New Link,Delete Link,Copy Link,Show Links,Hide Link,Reset Links,,,,,,Apply Palette,Load Image from Library,,,,,,Run Checklist] }
    { 15  ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ENG=Blocked] }
    { 16  ;   ;Object Type         ;Option        ;OnValidate=BEGIN
                                                                IF (Rec."Object Type" <> xRec."Object Type") THEN
                                                                  Rec.VALIDATE("Object ID", 0);
                                                                UpdateDescription();
                                                              END;

                                                   CaptionML=[ENU=Object Type;
                                                              ENG=Object Type];
                                                   OptionCaptionML=[ENU=" ,,,Report,,Codeunit,XMLport,,Page";
                                                                    ENG=" ,,,Report,,Codeunit,XMLport,,Page"];
                                                   OptionString=[ ,,,Report,,Codeunit,XMLport,,Page] }
    { 17  ;   ;Table ID            ;Integer       ;TableRelation=Object.ID WHERE (Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Table ID" <> xRec."Table ID") THEN
                                                                BEGIN
                                                                  TableFilterManagement.DeleteTableFilterForField(DATABASE::"Panel Selection", Rec.GETPOSITION(FALSE), Rec.FIELDNO("Table Filter"));
                                                                  UpdateTableFilter();
                                                                END;
                                                                UpdateDescription();
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (ObjectFieldLookups.TableLookup(Rec."Table ID")) THEN
                                                                Rec.VALIDATE("Table ID");
                                                            END;

                                                   CaptionML=[ENU=Table ID;
                                                              ENG=Table ID] }
    { 18  ;   ;Table Name          ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Table ID)));
                                                   CaptionML=[ENU=Table Name;
                                                              ENG=Table Name] }
    { 19  ;   ;Table Filter        ;Text250       ;OnLookup=BEGIN
                                                              EditTableFilter();
                                                            END;

                                                   CaptionML=[ENU=Table Filter;
                                                              ENG=Table Filter] }
    { 20  ;   ;Target Table ID     ;Integer       ;CaptionML=[ENU=Target Table ID;
                                                              ENG=Target Table ID] }
    { 21  ;   ;Target Position     ;Text250       ;CaptionML=[ENU=Target Position;
                                                              ENG=Target Position] }
    { 22  ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 24  ;   ;Panel Code          ;Code20        ;TableRelation=Panel;
                                                   OnValidate=BEGIN
                                                                UpdateDescription();
                                                                Rec.CALCFIELDS("Panel Description");
                                                              END;

                                                   CaptionML=[ENU=Panel Code;
                                                              ENG=Panel Code] }
    { 25  ;   ;Panel on New Page   ;Boolean       ;CaptionML=[ENU=Panel on New Page;
                                                              ENG=Panel on New Page] }
    { 26  ;   ;Panel Description   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Panel.Description WHERE (Code=FIELD(Panel Code)));
                                                   CaptionML=[ENU=Panel Description;
                                                              ENG=Panel Description];
                                                   Editable=No }
    { 30  ;   ;Run Modally         ;Boolean       ;CaptionML=[ENU=Run Modally;
                                                              ENG=Run Modally] }
    { 31  ;   ;XMLport Direction   ;Option        ;CaptionML=[ENU=XMLport Direction;
                                                              ENG=XMLport Direction];
                                                   OptionCaptionML=[ENU=" ,Import,Export";
                                                                    ENG=" ,Import,Export"];
                                                   OptionString=[ ,Import,Export] }
    { 40  ;   ;Run with Event Arguments;Boolean   ;CaptionML=[ENU=Run with Event Arguments;
                                                              ENG=Run with Event Arguments] }
    { 50  ;   ;Hyperlink URL       ;Text250       ;OnValidate=BEGIN
                                                                UpdateDescription();
                                                              END;

                                                   CaptionML=[ENU=Hyperlink URL;
                                                              ENG=Hyperlink URL] }
    { 60  ;   ;Quick Report Code   ;Code60        ;TableRelation="Quick Report Header";
                                                   OnValidate=BEGIN
                                                                UpdateDescription();
                                                              END;

                                                   CaptionML=[ENU=Quick Report Code;
                                                              ENG=Quick Report Code] }
    { 70  ;   ;Planning Board Code ;Code60        ;TableRelation="Planning Board Header";
                                                   OnValidate=BEGIN
                                                                UpdateDescription();
                                                              END;

                                                   CaptionML=[ENU=Planning Board Code;
                                                              ENG=Planning Board Code] }
    { 80  ;   ;Questionnaire Template Code;Code20 ;TableRelation="Questionnaire Template";
                                                   OnValidate=BEGIN
                                                                UpdateDescription();
                                                              END;

                                                   CaptionML=[ENU=Questionnaire Template Code;
                                                              ENG=Questionnaire Template Code] }
    { 90  ;   ;Checklist Template Type;Code20     ;TableRelation="Checklist Template Header";
                                                   OnValidate=BEGIN
                                                                UpdateDescription();
                                                              END;

                                                   CaptionML=[ENU=Checklist Template Type;
                                                              ENG=Checklist Template Type] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Parent Table ID,Parent Code,Parent ID,ID;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Panel@1000000003 : Record 9062363;
      ObjectFieldLookups@1000000002 : Codeunit 9062343;
      EnhancedPermissionsMgt@1000000005 : Codeunit 9062277;
      PanelTimestampManagement@1000000004 : Codeunit 9062385;
      TableFilterManagement@1000000001 : Codeunit 9062238;
      TnpToolkit@1000000000 : Codeunit 9062230;

    PROCEDURE "--- Initialisation ---"@1000000020();
    BEGIN
    END;

    PROCEDURE NewId@1000000015() : Integer;
    VAR
      lTilePanelEvent@1000000000 : Record 9062369;
    BEGIN
      //DOC NA2015.1 - Returning new ID
      //  <- The ID

      Rec.TESTFIELD("Parent Table ID");
      Rec.TESTFIELD("Parent Code");

      lTilePanelEvent.RESET();
      lTilePanelEvent.SETRANGE("Parent Table ID", Rec."Parent Table ID");
      lTilePanelEvent.SETRANGE("Parent Code", Rec."Parent Code");
      lTilePanelEvent.SETRANGE("Parent ID", Rec."Parent ID");
      IF (lTilePanelEvent.FINDLAST()) THEN
        EXIT(lTilePanelEvent.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE NewIdFor@1000000000(pParentTableId@1000000002 : Integer;pParentCode@1000000001 : Code[20];pParentId@1000000003 : Integer) : Integer;
    BEGIN
      //DOC NA2015.1 - Returning new ID for given parent (using Rec)
      //  -> pParentTableId: Parent table ID
      //  -> pParentCode: Parent code
      //  -> pParentId: Parent ID
      //  <- The ID

      Rec.RESET();
      Rec.SETRANGE("Parent Table ID", pParentTableId);
      Rec.SETRANGE("Parent Code", pParentCode);
      Rec.SETRANGE("Parent ID", pParentId);
      IF (Rec.FINDLAST()) THEN
        EXIT(Rec.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE "--- General ---"@1000000021();
    BEGIN
    END;

    PROCEDURE UpdateDescription@1000000007();
    VAR
      eRunObject@1000000000 : TextConst 'ENU=%1 "%2";ENG=%1 "%2"';
      eRunObjectView@1000000002 : TextConst 'ENU=%1 "%2" %3;ENG=%1 "%2" %3';
      eOpenPanel@1000000001 : TextConst 'ENU=Panel "%1";ENG=Panel "%1"';
      eHyperlinkTo@1000000003 : TextConst 'ENU=Hyperlink to "%1";ENG=Hyperlink to "%1"';
      eRunQuickReport@1000000004 : TextConst 'ENU=Run quick report "%1";ENG=Run quick report "%1"';
      eOpenPlanningBoard@1000000005 : TextConst 'ENU=Open planning board "%1";ENG=Open planning board "%1"';
      eRunQuestionnaire@1000000006 : TextConst 'ENU=Run questionnaire "%1";ENG=Run questionnaire "%1"';
      eRunChecklist@1000000007 : TextConst 'ENU=Run checklist "%1";ENG=Run checklist "%1"';
    BEGIN
      //DOC NA2015.1 - Updating description

      CASE (Rec."Action Type") OF
        Rec."Action Type"::"Run Object":
          BEGIN
            Rec.CALCFIELDS("Object Name");
            IF (Rec."Table Filter" <> '') THEN
              Rec.VALIDATE(Description, STRSUBSTNO(eRunObjectView, FORMAT(Rec."Object Type"), Rec."Object Name", Rec."Table Filter"))
            ELSE
              Rec.VALIDATE(Description, STRSUBSTNO(eRunObject, FORMAT(Rec."Object Type"), Rec."Object Name"));
          END;
        Rec."Action Type"::"Open Panel":
          BEGIN
            Rec.CALCFIELDS("Panel Description");
            Rec.VALIDATE(Description, STRSUBSTNO(eOpenPanel, Rec."Panel Description"));
          END;
        Rec."Action Type"::Hyperlink:
          Rec.VALIDATE(Description, COPYSTR(STRSUBSTNO(eHyperlinkTo, Rec."Hyperlink URL"), 1, MAXSTRLEN(Rec.Description)));
        Rec."Action Type"::"Run Quick Report":
          Rec.VALIDATE(Description, STRSUBSTNO(eRunQuickReport, Rec."Quick Report Code"));
        Rec."Action Type"::"Open Planning Board":
          Rec.VALIDATE(Description, STRSUBSTNO(eOpenPlanningBoard, Rec."Planning Board Code"));
        Rec."Action Type"::"Run Questionnaire":
          Rec.VALIDATE(Description, STRSUBSTNO(eRunQuestionnaire, Rec."Questionnaire Template Code"));
        Rec."Action Type"::"Edit Panels":
          Rec.VALIDATE(Description, STRSUBSTNO(eRunChecklist, Rec."Checklist Template Type"));
        ELSE
          Rec.VALIDATE(Description, FORMAT(Rec."Action Type"));
      END;
    END;

    LOCAL PROCEDURE UpdateTableFilter@1000000003();
    BEGIN
      //DOC NA2015.1 - Updating view table filter

      TableFilterManagement.CreateTableFilterText(DATABASE::"Panel Event", Rec.GETPOSITION(FALSE), Rec.FIELDNO("Table Filter"), Rec."Table Filter");
      Rec.VALIDATE("Table Filter");
    END;

    PROCEDURE EditTableFilter@1000000005() : Boolean;
    VAR
      lTableFilterManagement@1000000000 : Codeunit 9062238;
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2015.1 - Editing view table filter
      //  <- Result

      Rec.TESTFIELD("Table ID");
      lResult := lTableFilterManagement.EditTableFilter(DATABASE::"Panel Event", Rec.GETPOSITION(FALSE), Rec.FIELDNO("Table Filter"),
        Rec."Table ID", Rec."Table Filter");
      IF (lResult) THEN
      BEGIN
        UpdateTableFilter();
        UpdateDescription();
      END;

      EXIT(lResult);
    END;

    PROCEDURE PageCaption@1000000011() : Text[1024];
    VAR
      lTilePanel@1000000001 : Record 9062363;
      lTile@1000000007 : Record 9062366;
      lTilePanelData@1000000008 : Record 9062432;
      lPageCaption@1000000000 : Text[1024];
      eTileCaption@1000000006 : TextConst 'ENU=%1 - %2 - %3;ENG=%1 - %2 - %3';
      eTileDataCaption@1000000002 : TextConst 'ENU=%1 - %2 - %3;ENG=%1 - %2 - %3';
    BEGIN
      //DOC NA2015.1 - Returning page caption
      //  <- The caption

      lPageCaption := '';

      IF ( NOT (lTilePanel.GET(Rec."Parent Code"))) THEN
        CLEAR(lTilePanel);

      CASE (Rec."Parent Table ID") OF
        DATABASE::Tile:
          BEGIN
            IF ( NOT (lTile.GET(Rec."Parent Code", Rec."Parent ID"))) THEN
              CLEAR(lTile);
            lPageCaption := STRSUBSTNO(eTileCaption, lTilePanel.Description, lTile.Text, Rec.Type);
          END;
        DATABASE::"Panel Data":
          BEGIN
            IF ( NOT (lTilePanelData.GET(Rec."Parent Code", Rec."Parent ID"))) THEN
              CLEAR(lTilePanelData);
            lPageCaption := STRSUBSTNO(eTileDataCaption, lTilePanel.Description, lTilePanelData.Description, Rec.Type);
          END;
      END;

      EXIT(lPageCaption);
    END;

    LOCAL PROCEDURE CheckModifyPermission@1000000041();
    BEGIN
      //DOC NA2016.15 - Checking modify permission (given to the panel)

      IF ( NOT (Panel.GET(Rec."Panel Code"))) THEN
        EXIT;
      EnhancedPermissionsMgt.CheckPanelModifyPermission(Panel, USERID());
    END;

    PROCEDURE "--- Objects / Fields ---"@1000000022();
    BEGIN
    END;

    PROCEDURE ValidateObjectName@1000000008(VAR pRunObjectName@1000000000 : Text[50]);
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      ObjectFieldLookups.ValidateObjectName(Rec."Object Type", Rec."Object ID", pRunObjectName, FALSE);
      Rec.VALIDATE("Object ID");
    END;

    PROCEDURE ObjectNameLookup@1000000006();
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      IF (ObjectFieldLookups.ObjectLookup(Rec."Object Type", Rec."Object ID")) THEN
        Rec.VALIDATE("Object ID");
    END;

    PROCEDURE ValidateTableName@1000000010(VAR pViewTableName@1000000000 : Text[50]);
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      ObjectFieldLookups.ValidateTableName(Rec."Table ID", pViewTableName, FALSE);
      Rec.VALIDATE("Table ID");
    END;

    PROCEDURE TableNameLookup@1000000009();
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      IF (ObjectFieldLookups.TableLookup(Rec."Table ID")) THEN
        Rec.VALIDATE("Table ID");
    END;

    PROCEDURE "--- Texts (for .NET) ---"@1000000019();
    BEGIN
    END;

    PROCEDURE TypeText@1000000004() : Text[50];
    BEGIN
      //DOC NA2015.1 - Returning type text (for .NET)
      //  <- The text

      CASE (Rec.Type) OF
        Rec.Type::Click:
          EXIT('TileClick');
        Rec.Type::"2":
          EXIT('TileDrag');
        Rec.Type::"3":
          EXIT('LinkClick');
        Rec.Type::"4":
          EXIT('MenuClick');
        ELSE
          EXIT('');
      END;
    END;

    PROCEDURE ObjectTypeText@1000000014() : Text[50];
    BEGIN
      //DOC NA2015.1 - Returning Object type text (for .NET)
      //  <- The text

      CASE (Rec."Object Type") OF
        Rec."Object Type"::Report:
          EXIT('Report');
        Rec."Object Type"::Codeunit:
          EXIT('Codeunit');
        Rec."Object Type"::XMLport:
          EXIT('XmlPort');
        Rec."Object Type"::Page:
          EXIT('Page');
        ELSE
          EXIT('');
      END;
    END;

    PROCEDURE XmlPortDirectionText@1000000017() : Text[50];
    BEGIN
      //DOC NA2015.1 - Returning XMLport direction type text (for .NET)
      //  <- The text

      CASE (Rec."XMLport Direction") OF
        Rec."XMLport Direction"::Import:
          EXIT('Import');
        Rec."XMLport Direction"::Export:
          EXIT('Export');
        ELSE
          EXIT('');
      END;
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 29/04/2013 - Created
      //DOC NA2015.1  JH 19/07/2013 - Tiles
      //DOC NA2015.1  JH 23/09/2013 - Fixes
      //DOC NA2015.1  JH 14/04/2014 - Panels 3
      //DOC NA2015.4  JH 12/02/2015 - New actions added
      //DOC NA2015.8  JH 26/06/2015 - Tile lists
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.11 JH 06/11/2015 - "Action" renamed to "Action Type"
      //DOC NA2016.14 JH 19/02/2016 - Actions to run quick report and open planning board added
      //DOC NA2016.14 JH 09/03/2016 - "Run Questionnaire" added
      //DOC NA2016.14 NM 09/03/2016 - Added "Run Checklist"
      //DOC NA2016.15 JH 05/05/2016 - Enhanced permissions
    }
    END.
  }
}

