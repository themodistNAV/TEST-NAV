OBJECT Codeunit 9021662 Version Calls
{
  OBJECT-PROPERTIES
  {
    Date=13/07/16;
    Time=[ 1:51:20 PM];
    Version List=EC2016.6;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      VersionNo@1000000007 : Integer;

    PROCEDURE ePageTempPageGGuIDLookup@1000000028(LabelCode@1000000000 : Code[10];TempPageGroupGuID@1000000001 : Integer) : Integer;
    VAR
      TemplatePageList@1000000002 : Page 9021645;
      PageRec@1000000003 : Record 9021628;
      PageRec1@1000000004 : Record 9021628;
    BEGIN
      CLEAR(TemplatePageList);
      PageRec.RESET;
      PageRec.SETRANGE("Label Code",LabelCode);
      IF TempPageGroupGuID <> 0 THEN
        PageRec.SETRANGE("Page GUID",TempPageGroupGuID);
      PageRec.SETRANGE("System Entry",TRUE);
      PageRec.SETRANGE("Template Page Entry");
      TemplatePageList.SETTABLEVIEW(PageRec);
      TemplatePageList.LOOKUPMODE(TRUE);
      CLEAR(PageRec1); //DOC EC2013.4.0
      IF TemplatePageList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        TemplatePageList.GETRECORD(PageRec1);
        EXIT(PageRec1."Page GUID");
      END ELSE
        EXIT(0);
    END;

    PROCEDURE IntCustsFindContact@1000000001(VAR TempContRec@1000000000 : Record 5050) : Boolean;
    VAR
      ExitValue@1000000001 : Boolean;
    BEGIN
      EXIT(PAGE.RUNMODAL(PAGE::"Contact List",TempContRec) = ACTION::LookupOK);
    END;

    PROCEDURE ShowCust@1000000054(Cust@1000000000 : Record 18);
    BEGIN
      PAGE.RUNMODAL(PAGE::"Customer List",Cust);
    END;

    PROCEDURE ShowIntCust@1000000053(IntCust@1000000000 : Record 9021642);
    BEGIN
      PAGE.RUNMODAL(PAGE::"Internet Customers List",IntCust);
    END;

    PROCEDURE ShowSalesQuote@1000000052(SalesHead@1000000000 : Record 36);
    BEGIN
      PAGE.RUNMODAL(PAGE::"Sales Quote",SalesHead);
    END;

    PROCEDURE ShowSalesOrder@1000000051(SalesHead@1000000000 : Record 36);
    BEGIN
      PAGE.RUNMODAL(PAGE::"Sales Order",SalesHead);
    END;

    PROCEDURE RunNavigate@1000000050(DocNo@1000000000 : Code[20];InDate@1000000001 : Date);
    VAR
      NavigatePage@1000000002 : Page 344;
    BEGIN
      NavigatePage.SetDoc(InDate,DocNo);
      NavigatePage.RUN;
    END;

    PROCEDURE ShowCustLedgEntries@1000000049(CustLedgEnt@1000000000 : Record 21);
    BEGIN
      PAGE.RUNMODAL(PAGE::"Customer Ledger Entries",CustLedgEnt);
    END;

    PROCEDURE ShowReturnOrder@1000000048(SalesHead@1000000000 : Record 36);
    BEGIN
      PAGE.RUNMODAL(PAGE::"Sales Order",SalesHead);
    END;

    PROCEDURE ShowIntOrder@1000000047(IntOrdHead@1000000000 : Record 9021666);
    BEGIN
      PAGE.RUNMODAL(PAGE::"Internet Order Card",IntOrdHead);
    END;

    PROCEDURE ShowCustSubscription@1000000046(CustSub@1000000000 : Record 9021654);
    BEGIN
      PAGE.RUNMODAL(PAGE::"Customer Subscription Card",CustSub);
    END;

    PROCEDURE ShowSubscription@1000000045(Subscript@1000000000 : Record 9021653);
    BEGIN
      PAGE.RUNMODAL(PAGE::"Subscription Card",Subscript);
    END;

    PROCEDURE ShowIntQuestionAns@1000000044(IntQuestAns@1000000000 : Record 9021660);
    BEGIN
      PAGE.RUNMODAL(PAGE::"Internet Questionnaire Answer",IntQuestAns);
    END;

    PROCEDURE ShowFieldUpdateFromWeb@1000000043(FieldUpdateFromWeb@1000000000 : Record 9021607);
    BEGIN
      PAGE.RUNMODAL(PAGE::"Field Update From Web",FieldUpdateFromWeb);
    END;

    PROCEDURE ShowSyncCollection@1000000041(SyncColl@1000000000 : Record 9021612) : Boolean;
    BEGIN
      IF PAGE.RUNMODAL(PAGE::"Sync Collection List",SyncColl,
        SyncColl."Include Module in Next Sync") = ACTION::LookupOK THEN
        EXIT(TRUE)
      ELSE
       EXIT(FALSE);
    END;

    PROCEDURE ShowShipToAddress@1000000040(ShipTo@1000000000 : Record 222);
    BEGIN
      PAGE.RUNMODAL(PAGE::"Ship-to Address",ShipTo);
    END;

    PROCEDURE ShowTemplatePage@1000000039(ePage@1000000000 : Record 9021628);
    BEGIN
      PAGE.RUNMODAL(PAGE::"Template Page List",ePage);
    END;

    PROCEDURE ShowWebFileDownload@1000000038(WebFileDownload@1000000000 : Record 9021664);
    BEGIN
      PAGE.RUNMODAL(PAGE::"Web File Download",WebFileDownload);
    END;

    PROCEDURE LookupEPage@1000000037(VAR epage@1000000000 : Record 9021628) : Boolean;
    BEGIN
      IF PAGE.RUNMODAL(PAGE::"ePage Configuration",epage) = ACTION::LookupOK THEN
        EXIT(TRUE)
      ELSE
       EXIT(FALSE);
    END;

    PROCEDURE LookupItem@1000000036(VAR Item@1000000000 : Record 27) : Boolean;
    BEGIN
      IF PAGE.RUNMODAL(PAGE::"Item List",Item) = ACTION::LookupOK THEN
        EXIT(TRUE)
      ELSE
       EXIT(FALSE);
    END;

    PROCEDURE LookupPageItemContent@1000000035(VAR PageItemContent@1000000000 : Record 9021636) : Boolean;
    BEGIN
      IF PAGE.RUNMODAL(PAGE::"Page Item Content List",PageItemContent) = ACTION::LookupOK THEN
        EXIT(TRUE)
      ELSE
       EXIT(FALSE);
    END;

    PROCEDURE AssistEditForAttributes@1000000034(AttributeTypeCode@1000000000 : Code[20];LabelCode@1000000003 : Code[10];InNo@1000000004 : Code[20]);
    VAR
      LabelAttributesForm@1000000001 : Page 9021634;
      LabelAttributeRec@1000000002 : Record 9021623;
      Text000@1000000005 : TextConst 'ENU=Label Attribute Label %1, Type %2, Owner Ref %3, Type Code %4 does not exist. (7);ENG=Label Attribute Label %1, Type %2, Owner Ref %3, Type Code %4 does not exist. (7)';
      LabelAttTransRec@1000000006 : Record 9021624;
      TxtContent@1000000007 : TextConst 'ENU=CONTENT;ENG=CONTENT';
    BEGIN
      //Function from Page Item Content Table
      //Not called from Table, called from Page Item Content Card (not used on Page)
      CLEAR(LabelAttributesForm);
      LabelAttributeRec.RESET;
      LabelAttributeRec.SETCURRENTKEY("Label Code","Attribute Type","Attribute Owner Reference",
                                   "Type Code");  //DOC EC2013.3.00
      LabelAttributeRec.SETRANGE("Label Code",LabelCode);
      LabelAttributeRec.SETRANGE("Attribute Type",TxtContent);  //DOC EC2013.3.00
      LabelAttributeRec.SETRANGE("Attribute Owner Reference",InNo); //DOC EC2013.3.00
      LabelAttributeRec.SETRANGE("Type Code",AttributeTypeCode);
      IF NOT LabelAttributeRec.FINDFIRST THEN
        ERROR(Text000,LabelCode,TxtContent,InNo,AttributeTypeCode);
      LabelAttTransRec.RESET;
      LabelAttTransRec.SETRANGE("Label Code",LabelCode);
      LabelAttTransRec.SETRANGE("Label Attribute Entry No.",
                                   LabelAttributeRec."Entry No.");
      LabelAttributesForm.SETTABLEVIEW(LabelAttTransRec);
      LabelAttributesForm.RUNMODAL;
    END;

    PROCEDURE LookupSegmentHeader@1000000033(VAR SegHead@1000000000 : Record 5076) : Boolean;
    BEGIN
      IF PAGE.RUNMODAL(0,SegHead) = ACTION::LookupOK THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE LookupNoOnPromoQualLine@1000000032(PromoQualLine@1000000000 : Record 9021657) : Code[20];
    VAR
      Text000@1000000001 : TextConst 'ENU=System not setup to handle the type of %1;ENG=System not setup to handle the type of %1';
      PromoHeader@1000000007 : Record 9021656;
      Item@1000000006 : Record 27;
      VoucherEntry@1000000004 : Record 9021672;
      PromotionGroup@1000000003 : Record 9021651;
    BEGIN
      CASE TRUE OF
        PromoQualLine."Applies-to Type" = PromoQualLine."Applies-to Type"::Item:
          BEGIN
            Item.RESET;
            IF PromoQualLine."No." <> '' THEN
              Item.GET(PromoQualLine."No.");
            IF PAGE.RUNMODAL(0,Item) = ACTION::LookupOK THEN
              EXIT(Item."No.")
            ELSE
              EXIT('');
          END;
        PromoQualLine."Applies-to Type" = PromoQualLine."Applies-to Type"::"Order Total": ;
        PromoQualLine."Applies-to Type" = PromoQualLine."Applies-to Type"::Voucher:
          BEGIN
            VoucherEntry.RESET;
            VoucherEntry.SETCURRENTKEY("Customer No.","Voucher No.",Open);
            VoucherEntry.FILTERGROUP(0);
            VoucherEntry.SETRANGE("Voucher Type",VoucherEntry."Voucher Type"::Promotional);
            VoucherEntry.SETRANGE(Open,TRUE);
            VoucherEntry.FILTERGROUP(2);
            IF PAGE.RUNMODAL(0,VoucherEntry) = ACTION::LookupOK THEN
              EXIT(VoucherEntry."Voucher No.")
            ELSE
              EXIT('');
          END;
        PromoQualLine."Applies-to Type" = PromoQualLine."Applies-to Type"::"Promotion Group":
          BEGIN
            IF PromoQualLine."Label Code" = '' THEN BEGIN
              PromoQualLine.TESTFIELD("Promotion No.");
              PromoHeader.GET(PromoQualLine."Promotion No.");
              PromoHeader.TESTFIELD("Label Code");
              PromoQualLine."Label Code" := PromoHeader."Label Code";
            END;
            PromotionGroup.RESET;
            PromotionGroup.SETRANGE("Label Code",PromoQualLine."Label Code");
            IF PAGE.RUNMODAL(0,PromotionGroup) = ACTION::LookupOK THEN
              EXIT(PromotionGroup.Code)
            ELSE
              EXIT('');
          END;
        ELSE
          ERROR(Text000,PromoQualLine."Applies-to Type");
      END;
    END;

    PROCEDURE DataMgtProbRecLookup@1000000031(IntDataMgtIssue@1000000000 : Record 9021720);
    VAR
      Text00@1000000001 : TextConst 'ENU=The %1 record no longer exists.;ENG=The %1 record no longer exists.';
      Contact@1000000008 : Record 5050;
      Customer@1000000007 : Record 18;
      CLEntry@1000000006 : Record 21;
      CrMemoHeader@1000000005 : Record 114;
      EntryNo@1000000004 : Integer;
      InvoiceHeader@1000000003 : Record 112;
      SalesHeader@1000000002 : Record 36;
      TxtQuote@1000000009 : TextConst 'ENU=QUOTE;ENG=QUOTE';
      TxtOrder@1000000010 : TextConst 'ENU=ORDER;ENG=ORDER';
      TxtCredit@1000000011 : TextConst 'ENU=CREDIT;ENG=CREDIT';
      TxtInvoice@1000000012 : TextConst 'ENU=INVOICE;ENG=INVOICE';
    BEGIN
      CASE IntDataMgtIssue.Type OF
        IntDataMgtIssue.Type::Contact : BEGIN
          IF NOT Contact.GET(IntDataMgtIssue."Key Field 1") THEN
            ERROR(Text00,Contact.TABLENAME);
          PAGE.RUNMODAL(PAGE::"Contact Card",Contact);
        END;
        IntDataMgtIssue.Type::Customer : BEGIN
          IF NOT Customer.GET(IntDataMgtIssue."Key Field 1") THEN
            ERROR(Text00,Customer.TABLENAME);
          PAGE.RUNMODAL(PAGE::"Customer Card",Customer);
        END;
        IntDataMgtIssue.Type::"Cust. Ledger Entry" : BEGIN
          EVALUATE(EntryNo,IntDataMgtIssue."Key Field 1");
          IF NOT CLEntry.GET(EntryNo) THEN ERROR(Text00,CLEntry.TABLENAME);
          PAGE.RUNMODAL(PAGE::"Customer Ledger Entries",CLEntry);
        END;
        IntDataMgtIssue.Type::Credit : BEGIN
          IF NOT CrMemoHeader.GET(IntDataMgtIssue."Key Field 1") THEN
            ERROR(Text00,CrMemoHeader.TABLENAME);
          PAGE.RUNMODAL(PAGE::"Posted Sales Credit Memo",CrMemoHeader);
        END;
        IntDataMgtIssue.Type::Invoice : BEGIN
          IF NOT InvoiceHeader.GET(IntDataMgtIssue."Key Field 1") THEN
            ERROR(Text00,InvoiceHeader.TABLENAME);
          PAGE.RUNMODAL(PAGE::"Posted Sales Invoice",InvoiceHeader);
        END;
        IntDataMgtIssue.Type::Sale : BEGIN
          CASE IntDataMgtIssue."Key Field 1" OF
            TxtQuote : BEGIN
              IF NOT SalesHeader.GET(SalesHeader."Document Type"::Quote,IntDataMgtIssue."Key Field 2") THEN
                ERROR(Text00,SalesHeader.TABLENAME);
              PAGE.RUNMODAL(PAGE::"Sales Quote",SalesHeader);
            END;
            TxtOrder : BEGIN
              IF NOT SalesHeader.GET(SalesHeader."Document Type"::Order,IntDataMgtIssue."Key Field 2") THEN
                ERROR(Text00,SalesHeader.TABLENAME);
              PAGE.RUNMODAL(PAGE::"Sales Order",SalesHeader);
            END;
            TxtCredit : BEGIN
              IF NOT SalesHeader.GET(SalesHeader."Document Type"::"Credit Memo",IntDataMgtIssue."Key Field 2") THEN
                ERROR(Text00,SalesHeader.TABLENAME);
              PAGE.RUNMODAL(PAGE::"Sales Credit Memo",SalesHeader);
            END;
            TxtInvoice : BEGIN
              IF NOT SalesHeader.GET(SalesHeader."Document Type"::Invoice,IntDataMgtIssue."Key Field 2") THEN
                ERROR(Text00,SalesHeader.TABLENAME);
              PAGE.RUNMODAL(PAGE::"Sales Invoice",SalesHeader);
            END
            ELSE PAGE.RUNMODAL(PAGE::"Sales List",SalesHeader);
          END;
        END;
      END;
    END;

    PROCEDURE ReturnResxName@1000000013(ResxName@1190000005 : Code[100];LabelC@1190000008 : Code[10]) : Code[100];
    VAR
      MultiLangRec@1000000000 : Record 9021603;
      MultiLangForm@1190000006 : Page 9021603;
      TxtLabelCodeBlank@1000000001 : TextConst 'ENU=Label Code cannot be blank;ENG=Label Code cannot be blank';
      TxtLanguage@1000000002 : TextConst 'ENU=LANGUAGE;ENG=LANGUAGE';
    BEGIN
      //Called from CU Multi Language Functions
      MultiLangRec.RESET;
      MultiLangRec.SETCURRENTKEY("Label Code","Base File Name",
                   "Language ID","Resx Name");
      IF LabelC = '' THEN ERROR(TxtLabelCodeBlank);
      //MultiLangRec.SETRANGE("Label Code",LabelC);
      MultiLangRec.SETFILTER("Label Code",'%1|%2',LabelC,'');

      MultiLangRec.SETRANGE("Base File Name",TxtLanguage);

      IF ResxName <> '' THEN
        MultiLangRec.SETRANGE("Resx Name",ResxName);
      IF MultiLangRec.FINDFIRST THEN BEGIN
        MultiLangRec.SETRANGE("Resx Name");
        MultiLangForm.SETRECORD(MultiLangRec);
        MultiLangForm.SETTABLEVIEW(MultiLangRec);
      END;

      MultiLangForm.LOOKUPMODE := TRUE;
      IF MultiLangForm.RUNMODAL = ACTION::LookupOK THEN BEGIN
        MultiLangForm.GETRECORD(MultiLangRec);
        EXIT(MultiLangRec."Resx Name");
      END ELSE
        EXIT(ResxName);
    END;

    PROCEDURE RunImportLoginsXMLPort@1000000026();
    BEGIN
      XMLPORT.RUN(9021755);
    END;

    PROCEDURE MailNewMessage@1000000030(ToName@1000000005 : Text[80];CCName@1000000004 : Text[80];BCName@1000000006 : Text[80];Subject@1000000003 : Text[260];Body@1000000002 : Text[1000];AttachFileName@1000000001 : Text[260];OpenDialog@1000000000 : Boolean);
    VAR
      Mail@1000000007 : Codeunit 397;
    BEGIN
      Mail.NewMessage(ToName,CCName,BCName,Subject,Body,AttachFileName,OpenDialog);
    END;

    PROCEDURE AttributeValueLookup@1000000000(VAR PageContentValue@1000000000 : Record 9021635) : Text;
    BEGIN
      IF (PAGE.RUNMODAL(0, PageContentValue) = ACTION::LookupOK) THEN
        EXIT(PageContentValue."Value Text")
      ELSE
        EXIT('');
    END;

    PROCEDURE ReserveSalesLine@1000000015(SalesLine@1000000000 : Record 37) : Decimal;
    VAR
      ReserveSalesLine@1000000001 : Codeunit 99000832;
      QtyToReserve@1000000005 : Decimal;
      QtyToReserveBase@1000000004 : Decimal;
    BEGIN
      ReserveSalesLine.ReservQuantity(SalesLine,QtyToReserve,QtyToReserveBase);
      EXIT(QtyToReserve);
    END;

    PROCEDURE AutoReserve@1000000016(VAR FullAutoReservation@1000000003 : Boolean;Description@1000000002 : Text[50];AvailabilityDate@1000000001 : Date;MaxQtyToReserve@1000000000 : Decimal;MaxQtyToReserveBase@1000000005 : Decimal;SalesLine@1000000006 : Record 37);
    VAR
      ReservMgt@1000000004 : Codeunit 99000845;
    BEGIN
      ReservMgt.SetSalesLine(SalesLine);
      ReservMgt.AutoReserve(FullAutoReservation,Description,AvailabilityDate,MaxQtyToReserve,MaxQtyToReserveBase);
    END;

    BEGIN
    {
      //DOC EC2013.4.00 MQ 07/11/2013 - GW131107 New function to enable RTC and Classic workings with same code base.
      //DOC EC2013.4.64 MQ 02/07/2014 - GW140702 New function for importing Internet Logins
      //DOC EC2015.5.02 MQ 11/02/2015 - GW150211 New function ShowWebFileDownload
      //DOC EC2015.5.03 MQ 08/06/2015 - GW150608 New function MailNewMessage - used by Internet Shop Mgt MQ cos 2015 has extra parameter
      //DOC EC2015.5.04 MQ 17/07/2015 - GW150717 Add function ShowSalesQuote
      //DOC EC2016.6    JH 05/10/2016 - ECom 2016
    }
    END.
  }
}

