OBJECT Report 9062247 Load System Images
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Load System Images;
               ENG=Load System Images];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF (Folder = '') THEN
                    ERROR(tFolderEmpty);

                  DialogManagement.Add(tDialogCategory, 10, DialogIndex::Category, 20, FALSE, FALSE);
                  DialogManagement.Add(tDialogGroup, 10, DialogIndex::Group, 20, FALSE, FALSE);
                  DialogManagement.Add(tDialogSubGroup, 10, DialogIndex::SubGroup, 20, FALSE, FALSE);
                  DialogManagement.Add(tDialogFile, 10, DialogIndex::File, 20, FALSE, FALSE);
                  DialogManagement.Open(tDialogTitle);

                  ProcessFolder(0, Folder, AltFolder, '', '', '');

                  DialogManagement.Close();
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1000000000;;Container;
                  ContainerType=ContentArea }

      { 1000000001;1;Group  ;
                  Name=OptionsGroup;
                  CaptionML=[ENU=Options;
                             ENG=Options];
                  GroupType=Group }

      { 1000000002;2;Field  ;
                  Name=FolderField;
                  CaptionML=[ENU=Folder;
                             ENG=Folder];
                  SourceExpr=Folder;
                  OnAssistEdit=BEGIN
                                 Folder := FileManagement.BrowseForFolderDialog(tBrowseForFolderTitle, '', FALSE);
                               END;
                                }

      { 1000000004;2;Field  ;
                  Name=AltFolderField;
                  CaptionML=[ENU=Folder (Alternative Images);
                             ENG=Folder (Alternative Images)];
                  SourceExpr=AltFolder;
                  OnAssistEdit=BEGIN
                                 AltFolder := FileManagement.BrowseForFolderDialog(tBrowseForFolderTitle, '', FALSE);
                               END;
                                }

      { 1000000003;2;Field  ;
                  Name=PrefixField;
                  CaptionML=ENU=Prefix;
                  SourceExpr=Prefix }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Blob@1000000008 : Record 99008535;
      SystemImage@1000000004 : Record 9062240;
      SystemImageGroup@1000000002 : Record 9062242;
      DialogManagement@1000000009 : Codeunit 9062249;
      FileManagement@1000000011 : Codeunit 419;
      FileSystem@1000000003 : Codeunit 9062264;
      String@1000000010 : Codeunit 9062236;
      TnpToolkit@1000000007 : Codeunit 9062230;
      Folder@1000000013 : Text;
      AltFolder@1000000015 : Text;
      Prefix@1000000005 : Text;
      tDialogTitle@1000000025 : TextConst 'ENU=Importing tile images...;ENG=Importing tile images...';
      tDialogCategory@1000000023 : TextConst 'ENU=Category;ENG=Category';
      tDialogGroup@1000000019 : TextConst 'ENU=Group;ENG=Group';
      tDialogSubGroup@1000000020 : TextConst 'ENU=Sub-Group;ENG=Sub-Group';
      tDialogFile@1000000022 : TextConst 'ENU=File;ENG=File';
      tBrowseForFolderTitle@1000000012 : TextConst 'ENU=Choose root folder with images;ENG=Choose root folder with images';
      tFolderEmpty@1000000014 : TextConst 'ENU=Please provide root folder to load images from.;ENG=Please provide root folder to load images from.';
      DialogIndex@1000000024 : ' ,Category,Group,SubGroup,File';
      LastCategory@1000000000 : Text;
      LastGroup@1000000001 : Text;
      LastSubGroup@1000000006 : Text;

    LOCAL PROCEDURE ProcessFolder@1000000008(pLevel@1000000005 : Integer;pFolder@1000000003 : Text;pAltFolder@1000000008 : Text;pCategory@1000000000 : Text;pGroup@1000000001 : Text;pSubGroup@1000000002 : Text);
    VAR
      lLevel@1000000006 : Integer;
      lFileBuffer@1000000004 : TEMPORARY Record 9062386;
      lFolderBuffer@1000000007 : TEMPORARY Record 9062386;
      lAltFolder@1000000009 : Text;
    BEGIN
      lLevel := pLevel + 1;

      FileSystem.GetFiles(TRUE, pFolder, '', lFileBuffer);
      IF (lFileBuffer.FINDSET()) THEN
      REPEAT
        DialogManagement.SetCounterTextValue(DialogIndex::File, lFileBuffer.Name);
        ProcessFile(lLevel, pCategory, pGroup, pSubGroup, lFileBuffer.GetPath(), lFileBuffer.Name, pAltFolder);
      UNTIL (lFileBuffer.NEXT() = 0);

      IF (lLevel <= 3) THEN
      BEGIN
        FileSystem.GetFolders(TRUE, pFolder, '', lFolderBuffer);
        IF (lFolderBuffer.FINDSET()) THEN
        REPEAT
          DialogManagement.SetCounterTextValue(DialogIndex::Category, pCategory);
          DialogManagement.SetCounterTextValue(DialogIndex::Group, pGroup);
          DialogManagement.SetCounterTextValue(DialogIndex::SubGroup, pSubGroup);
          DialogManagement.SetCounterTextValue(DialogIndex::File, '');
          CASE (lLevel) OF
            1: pCategory := lFolderBuffer.Name;
            2: pGroup := lFolderBuffer.Name;
            3: pSubGroup := lFolderBuffer.Name;
          END;
          lAltFolder := TnpToolkit.IIFText(pAltFolder <> '', FileSystem.Combine(TRUE, pAltFolder, lFolderBuffer.Name), '');
          ProcessFolder(lLevel, lFolderBuffer.GetPath(), lAltFolder, pCategory, pGroup, pSubGroup);
        UNTIL (lFolderBuffer.NEXT() = 0);
      END;
    END;

    LOCAL PROCEDURE ProcessFile@1000000002(pLevel@1000000013 : Integer;pCategory@1000000006 : Text;pGroup@1000000002 : Text;pSubGroup@1000000000 : Text;pFilePath@1000000015 : Text;pFileName@1000000014 : Text;pAltFolder@1000000007 : Text);
    VAR
      lFileNameWithoutExt@1000000001 : Text;
      lCode@1000000009 : Code[1024];
      lDescription@1000000016 : Text;
      lAltPath@1000000004 : Text;
    BEGIN
      ProcessGroup(pCategory, pGroup, pSubGroup);

      lFileNameWithoutExt := FileSystem.GetFileNameWithoutExtension(TRUE, pFileName);
      lDescription := COPYSTR(CreateText(Prefix, pCategory, lFileNameWithoutExt, '', ''), 1, MAXSTRLEN(SystemImage.Description));
      lCode := COPYSTR(lDescription, 1, MAXSTRLEN(SystemImage.Code));

      IF (pAltFolder <> '') THEN
      BEGIN
        lAltPath := FileSystem.Combine(TRUE, pAltFolder, pFileName);
        IF ( NOT (FileSystem.FileExists(TRUE, lAltPath))) THEN
          lAltPath := '';
      END;

      IF ( NOT (SystemImage.GET(lCode))) THEN
      BEGIN
        CLEAR(SystemImage);
        SystemImage.INIT();
        SystemImage.VALIDATE(Code, lCode);
        SystemImage.INSERT(TRUE);
      END;

      SystemImage.VALIDATE("Group Code", SystemImageGroup.Code);
      FileSystem.ImportFileToBlobSilent(TRUE, pFilePath, Blob);
      SystemImage.Image := Blob.Blob;
      IF (lAltPath <> '') THEN
      BEGIN
        FileSystem.ImportFileToBlobSilent(TRUE, lAltPath, Blob);
        SystemImage."Alternative Image" := Blob.Blob;
      END;
      SystemImage.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ProcessGroup@1000000012(pCategory@1000000004 : Text;pGroup@1000000003 : Text;pSubGroup@1000000002 : Text);
    VAR
      lCode@1000000000 : Code[1024];
      lDescription@1000000001 : Text;
    BEGIN
      IF ((pCategory = LastCategory) AND (pGroup = LastGroup) AND (pSubGroup = LastSubGroup)) THEN
        EXIT;

      lDescription := COPYSTR(CreateText(Prefix, pCategory, pGroup, pSubGroup, ''), 1, MAXSTRLEN(SystemImageGroup.Description));
      lCode := COPYSTR(lDescription, 1, MAXSTRLEN(SystemImageGroup.Code));

      IF ( NOT (SystemImageGroup.GET(lCode))) THEN
      BEGIN
        SystemImageGroup.INIT();
        SystemImageGroup.VALIDATE(Code, lCode);
        SystemImageGroup.VALIDATE(Description, lDescription);
        SystemImageGroup.INSERT();
      END;

      LastCategory := pCategory;
      LastGroup := pGroup;
      LastSubGroup := pSubGroup;
    END;

    LOCAL PROCEDURE BuildAltPath@1000000013();
    BEGIN
    END;

    LOCAL PROCEDURE CreateText@1000000010(pPart1@1000000005 : Text;pPart2@1000000004 : Text;pPart3@1000000003 : Text;pPart4@1000000002 : Text;pPart5@1000000000 : Text) : Text;
    VAR
      lParts@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      lPart@1000000001 : Text;
      lText@1000000007 : Text;
    BEGIN
      lParts := lParts.List();
      lParts.Add(pPart1);
      lParts.Add(pPart2);
      lParts.Add(pPart3);
      lParts.Add(pPart4);
      lParts.Add(pPart5);
      FOREACH lPart IN lParts DO
        AddToText(lText, lPart);
      EXIT(lText);
    END;

    LOCAL PROCEDURE AddToText@1000000011(VAR pCode@1000000000 : Text;pPart@1000000001 : Text);
    BEGIN
      IF (pPart = '') THEN
        EXIT;
      IF (pCode <> '') THEN
        pCode := pCode + ' ';
      pCode := pCode + pPart;
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 02/11/2013 - Created
      //DOC NA2016.1  JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.11 JH 02/12/2015 - Bugfixes
      //DOC NA2016.12 JH 28/01/2016 - New string codeunit
      //DOC NA2016.15 JH 20/04/2016 - Redesigned
    }
    END.
  }
  RDLDATA
  {
  }
}

