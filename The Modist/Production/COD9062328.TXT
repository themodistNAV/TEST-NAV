OBJECT Codeunit 9062328 Migration Management
{
  OBJECT-PROPERTIES
  {
    Date=27/11/15;
    Time=11:28:25 AM;
    Version List=NA2016.11;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      MigrationHeader@1000000004 : Record 9062373;
      SequenceToolkit@1000000000 : Codeunit 9062519;
      TnpToolkit@1000000002 : Codeunit 9062230;
      Direction@1000000001 : ' ,Up,Down';

    LOCAL PROCEDURE "--- Moving Lines ---"@1000000000();
    BEGIN
    END;

    PROCEDURE IndentLine@1000000003(VAR pMigrationLine@1000000000 : Record 9062374) : Boolean;
    VAR
      lMigrationLine@1000000001 : Record 9062374;
    BEGIN
      //DOC NA2016.11 - Indenting line
      //  <> pMigrationLine: The line
      //  <- TRUE = Line indented, FALSE = Not

      lMigrationLine.RESET();
      lMigrationLine.SETCURRENTKEY("Migration Code", "Parent ID", Sequence);
      lMigrationLine.SETRANGE("Migration Code", pMigrationLine."Migration Code");
      lMigrationLine.SETRANGE("Parent ID", pMigrationLine."Parent ID");
      lMigrationLine.SETRANGE(Type, lMigrationLine.Type::Group);
      lMigrationLine.SETRANGE(Sequence, pMigrationLine.Sequence);
      lMigrationLine.SETFILTER(ID, '<%1', pMigrationLine.ID);
      IF ( NOT (lMigrationLine.FINDLAST())) THEN
      BEGIN
        lMigrationLine.SETFILTER(Sequence, '<%1', pMigrationLine.Sequence);
        lMigrationLine.SETRANGE(ID);
        IF ( NOT (lMigrationLine.FINDLAST())) THEN
          EXIT(FALSE);
      END;

      pMigrationLine.VALIDATE("Parent ID", lMigrationLine.ID);

      EXIT(TRUE);
    END;

    PROCEDURE UnindentLine@1000000004(VAR pMigrationLine@1000000000 : Record 9062374) : Boolean;
    VAR
      lMigrationLine@1000000001 : Record 9062374;
    BEGIN
      //DOC NA2016.11 - Unindenting line
      //  <> pMigrationLine: The line
      //  <- TRUE = Line unindented, FALSE = Not

      IF (pMigrationLine."Parent ID" = 0) THEN
        EXIT(FALSE);
      IF ( NOT (lMigrationLine.GET(pMigrationLine."Migration Code", pMigrationLine."Parent ID"))) THEN
        EXIT(FALSE);

      pMigrationLine.VALIDATE("Parent ID", lMigrationLine."Parent ID");

      EXIT(TRUE);
    END;

    PROCEDURE MoveLineUp@1000000005(VAR pMigrationLine@1000000000 : Record 9062374) : Boolean;
    BEGIN
      //DOC NA2016.11 - Moving line up
      //  <> pMigrationLine: The line
      //  <- TRUE = Line moved, FALSE = Not

      EXIT(MoveLineUpDown(pMigrationLine, SequenceToolkit.Up()));
    END;

    PROCEDURE MoveLineDown@1000000006(VAR pMigrationLine@1000000000 : Record 9062374) : Boolean;
    BEGIN
      //DOC NA2016.11 - Moving line down
      //  <> pMigrationLine: The line
      //  <- TRUE = Line moved, FALSE = Not

      EXIT(MoveLineUpDown(pMigrationLine, SequenceToolkit.Down()));
    END;

    LOCAL PROCEDURE MoveLineUpDown@1000000007(VAR pMigrationLine@1000000000 : Record 9062374;pDirection@1000000001 : Option) : Boolean;
    VAR
      lMigrationLine@1000000003 : Record 9062374;
      lMigrationLineFound@1000000005 : Boolean;
      lFilter@1000000002 : Text;
      lResult@1000000004 : Boolean;
      lSequenceBuffer@1000000006 : Integer;
    BEGIN
      //DOC NA2016.11 - Moving line down
      //  <> pMigrationLine: The line
      //  -> pDirection: Direction (see global variable "Direction")
      //  <- TRUE = Line moved, FALSE = Not

      CASE (pDirection) OF
        Direction::Up: lFilter := '<';
        Direction::Down: lFilter := '>';
      END;

      lMigrationLine.RESET();
      lMigrationLine.SETCURRENTKEY("Migration Code", "Parent ID", Sequence);
      lMigrationLine.SETRANGE("Migration Code", pMigrationLine."Migration Code");
      lMigrationLine.SETRANGE("Parent ID", pMigrationLine."Parent ID");
      lMigrationLine.SETFILTER(Sequence, lFilter + '%1', pMigrationLine.Sequence);
      CASE (pDirection) OF
        Direction::Up: lMigrationLineFound := lMigrationLine.FINDLAST();
        Direction::Down: lMigrationLineFound := lMigrationLine.FINDFIRST();
      END;

      IF (lMigrationLineFound) THEN
      BEGIN
        lSequenceBuffer := pMigrationLine.Sequence;
        pMigrationLine.VALIDATE(Sequence, lMigrationLine.Sequence);
        lMigrationLine.VALIDATE(Sequence, lSequenceBuffer);
        lMigrationLine.MODIFY(TRUE);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Bulk Operations ---"@1000000008();
    BEGIN
    END;

    PROCEDURE AddXmlPorts@1000000009(pMigrationCode@1000000005 : Code[20];pParentMigrationLine@1000000001 : Record 9062374) : Boolean;
    VAR
      lParentMigrationLine@1000000006 : Record 9062374;
      lMigrationLine@1000000004 : Record 9062374;
      lXmlPortBuffer@1000000002 : TEMPORARY Record 9062730;
      lAddMigrationXmlPorts@1000000000 : Report 9062342;
      lAdd@1000000003 : Integer;
    BEGIN
      //DOC NA2016.11 - Adding XMLports
      //  -> pMigrationCode: Migration code
      //  -> pParentMigrationLine: The current parent migration line
      //  <- TRUE = XMLports added, FALSE = Cancelled

      CLEAR(lParentMigrationLine);
      CASE (pParentMigrationLine.Type) OF
        pParentMigrationLine.Type::Group:
          lParentMigrationLine := pParentMigrationLine;
        pParentMigrationLine.Type::XMLport:
          IF (pParentMigrationLine."Parent ID" <> 0) THEN
            IF ( NOT (lParentMigrationLine.GET(pParentMigrationLine."Migration Code", pParentMigrationLine."Parent ID"))) THEN
              CLEAR(lParentMigrationLine);
      END;

      lAddMigrationXmlPorts.Initialise(lParentMigrationLine, TRUE);
      lAddMigrationXmlPorts.RUNMODAL();
      IF ( NOT (lAddMigrationXmlPorts.GetOk())) THEN
        EXIT(FALSE);
      lAddMigrationXmlPorts.GetSelectedXmlPorts(lXmlPortBuffer);
      lAdd := lAddMigrationXmlPorts.GetAdd();

      lXmlPortBuffer.RESET();
      IF (lXmlPortBuffer.FINDSET()) THEN
      REPEAT
        CLEAR(lMigrationLine);
        lMigrationLine.INIT();
        lMigrationLine.VALIDATE("Migration Code", pMigrationCode);
        lMigrationLine.INSERT(TRUE);
        IF ((lAdd = lMigrationLine.Add::"To the Current Line") AND (lParentMigrationLine.ID <> 0)) THEN
          lMigrationLine.VALIDATE("Parent ID", lParentMigrationLine.ID);
        lMigrationLine.VALIDATE(Type, lMigrationLine.Type::XMLport);
        lMigrationLine.VALIDATE("XMLport ID", lXmlPortBuffer.ID);
        lMigrationLine.MODIFY(TRUE);
      UNTIL (lXmlPortBuffer.NEXT() = 0);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "--- Enabling / Disabling ---"@1000000001();
    BEGIN
    END;

    PROCEDURE EnableDisableAll@1000000002(pMigrationHeader@1000000000 : Record 9062373;pEnable@1000000001 : Boolean;pInteraction@1000000002 : Boolean) : Boolean;
    VAR
      eConfirmation@1000000003 : TextConst 'ENU=Do you want to %1 all lines?;ENG=Do you want to %1 all lines?';
      eEnable@1000000004 : TextConst 'ENU=enable;ENG=enable';
      eDisable@1000000005 : TextConst 'ENU=disable;ENG=disable';
      lMigrationLine@1000000006 : Record 9062374;
    BEGIN
      //DOC NA2016.11 - Enabling / disabling all (lines)
      //  -> pMigrationHeader: Migration header to start with
      //  -> pEnable: TRUE = Enable, FALSE = Disable
      //  -> pInteraction: Interaction flag
      //  <- TRUE = Enabled / disabled, FALSE = Cancelled

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE, TnpToolkit.IIFText(pEnable, eEnable, eDisable)))) THEN
          EXIT(FALSE);

      lMigrationLine.RESET();
      lMigrationLine.SETRANGE("Migration Code", pMigrationHeader.Code);
      IF (lMigrationLine.FINDSET(TRUE)) THEN
      REPEAT
        IF (lMigrationLine.Enabled <> pEnable) THEN
        BEGIN
          lMigrationLine.VALIDATE(Enabled, pEnable);
          lMigrationLine.MODIFY(TRUE);
        END;
      UNTIL (lMigrationLine.NEXT() = 0);

      EXIT(TRUE);
    END;

    BEGIN
    {
      //DOC NA2016.11 JH 24/11/2015 - Created
    }
    END.
  }
}

