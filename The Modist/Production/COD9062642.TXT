OBJECT Codeunit 9062642 Multilanguage
{
  OBJECT-PROPERTIES
  {
    Date=31/10/15;
    Time=[ 6:50:52 PM];
    Version List=NA2016.11;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Language@9062230 : Record 8;

    LOCAL PROCEDURE "--- General ---"@9062246();
    BEGIN
    END;

    PROCEDURE GetTextForCurrentLanguage@9062232(pMultilanguageText@9062230 : Text) : Text;
    BEGIN
      //DOC NH2016.10 - Returning text (from multilanguage text) for current language
      //  -> pMultilanguageText: Multilanguage text
      //  <- Extracted text

      EXIT(GetTextForLanguageId(pMultilanguageText, GLOBALLANGUAGE()));
    END;

    PROCEDURE GetTextForLanguage@9062231(pMultilanguageText@9062230 : Text;pLanguage@9062231 : Record 8) : Text;
    BEGIN
      //DOC NH2016.10 - Returning text (from multilanguage text) for given language
      //  -> pMultilanguageText: Multilanguage text
      //  -> pLanguage: Language (record)
      //  <- Extracted text

      EXIT(GetTextForLanguageCode(pMultilanguageText, pLanguage.Code));
    END;

    PROCEDURE GetTextForLanguageId@9062233(pMultilanguageText@9062230 : Text;pLanguageId@9062231 : Integer) : Text;
    BEGIN
      //DOC NH2016.10 - Returning text (from multilanguage text) for given language ID
      //  -> pMultilanguageText: Multilanguage text
      //  -> pLanguageId: Language ID (Windows ID)
      //  <- Extracted text

      Language.RESET();
      Language.SETRANGE("Windows Language ID", pLanguageId);
      Language.FINDFIRST();
      EXIT(GetTextForLanguageCode(pMultilanguageText, Language.Code));
    END;

    PROCEDURE GetTextForLanguageCode@9062234(pMultilanguageText@9062230 : Text;pLanguageCode@9062231 : Code[10]) : Text;
    VAR
      lLanguageCodes@9062232 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      lTexts@9062233 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      lLength@9062236 : Integer;
      lIndex@9062234 : Integer;
      lLanguageCode@9062237 : Text;
      lText@9062235 : Text;
    BEGIN
      //DOC NH2016.10 - Returning text (from multilanguage text) for given language code
      //  -> pMultilanguageText: Multilanguage text
      //  -> pLanguageCode: Language code
      //  <- Extracted text

      CLEAR(lText);
      SplitMultilanguageText(pMultilanguageText, lLanguageCodes, lTexts);
      lLength := lLanguageCodes.Length;
      FOR lIndex := 0 TO lLength - 1 DO
      BEGIN
        lLanguageCode := lLanguageCodes.GetValue(lIndex);
        IF (lLanguageCode = pLanguageCode) THEN
        BEGIN
          lText := lTexts.GetValue(lIndex);
          lIndex := lLength;
        END;
      END;
      EXIT(lText);
    END;

    LOCAL PROCEDURE "--- Tools ---"@9062247();
    BEGIN
    END;

    LOCAL PROCEDURE SplitMultilanguageText@9062248(pMultilanguageText@9062230 : Text;VAR pLanguageCodes@9062234 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";VAR pTexts@9062232 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      lRegex@9062231 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      lMatch@9062233 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";
      lLanguageCodes@9062235 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      lTexts@9062236 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      lFirst@9062238 : Boolean;
      lPosition@9062237 : Integer;
    BEGIN
      //DOC NH2016.10 - Splitting multilanguage text
      //  -> pMultilanguageText: Multilanguage text
      //  <> pLanguageCodes: Target language codes (.NET array)
      //  <> pTexts: Target extracted texts (.NET array)

      pMultilanguageText := ';' + pMultilanguageText;

      lLanguageCodes := lLanguageCodes.List();
      lTexts := lTexts.List();

      lFirst := TRUE;
      lPosition := 0;
      FOREACH lMatch IN lRegex.Matches(pMultilanguageText, '[;][A-Z]{3}=') DO
      BEGIN
        IF ( NOT (lFirst)) THEN
          lTexts.Add(COPYSTR(pMultilanguageText, lPosition + 1, lMatch.Index - lPosition))
        ELSE
          lFirst := FALSE;
        lLanguageCodes.Add(COPYSTR(lMatch.Value, 2, 3));
        lPosition := lMatch.Index + lMatch.Length;
      END;
      IF (lPosition < STRLEN(pMultilanguageText) - 1) THEN
        lTexts.Add(COPYSTR(pMultilanguageText, lPosition + 1, STRLEN(pMultilanguageText) - lPosition));

      pLanguageCodes := lLanguageCodes.ToArray();
      pTexts := lTexts.ToArray();
    END;

    BEGIN
    {
      //DOC NA2016.11 JH 31/10/2015 - Created
    }
    END.
  }
}

