OBJECT Codeunit 9510 Document Service Management
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NoConfigErr@1000 : TextConst 'ENU=No online document configuration was found.;ENG=No online document configuration was found.';
      MultipleConfigsErr@1001 : TextConst 'ENU=More than one online document configuration was found.;ENG=More than one online document configuration was found.';
      SourceFileNotFoundErr@1002 : TextConst '@@@="%1=Full path to the file on disk;%2=the detailed error describing why the document could not be accessed.";ENU=Cannot open the specified document from the following location: %1 due to the following error: %2.;ENG=Cannot open the specified document from the following location: %1 due to the following error: %2.';
      RequiredSourceNameErr@1004 : TextConst 'ENU=You must specify a source path for the document.;ENG=You must specify a source path for the document.';
      DocumentService@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentService.Types, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentService.Types.IDocumentService";
      DocumentServiceFactory@1008 : DotNet "'Microsoft.Dynamics.Nav.DocumentService, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentService.DocumentServiceFactory";
      ServiceType@1006 : Text;
      LastServiceType@1009 : Text;
      RequiredTargetNameErr@1005 : TextConst 'ENU=You must specify a name for the document.;ENG=You must specify a name for the document.';
      RequiredTargetURIErr@1011 : TextConst 'ENU=You must specify the URI that you want to open.;ENG=You must specify the URI that you want to open.';
      ValidateConnectionErr@1003 : TextConst 'ENU=Cannot connect because the user name and password have not been specified, or because the connection was canceled.;ENG=Cannot connect because the user name and password have not been specified, or because the connection was cancelled.';

    PROCEDURE TestConnection@9();
    VAR
      DocumentServiceHelper@1000 : DotNet "'Microsoft.Dynamics.Nav.NavUserAccount, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.NavDocumentService.NavDocumentServiceHelper";
    BEGIN
      // Tests connectivity to the Document Service using the current configuration in Dynamics NAV.
      // An error occurrs if unable to successfully connect.
      IF NOT IsConfigured THEN
        ERROR(NoConfigErr);
      DocumentServiceHelper.Reset;
      SetDocumentService;
      SetProperties;
      IF ISNULL(DocumentService.Credentials) THEN
        ERROR(ValidateConnectionErr);
      DocumentService.ValidateConnection();
      CheckError;
    END;

    PROCEDURE SaveFile@10(SourcePath@1000 : Text;TargetName@1002 : Text;Overwrite@1001 : Boolean) : Text;
    VAR
      SourceFile@1003 : File;
      SourceStream@1004 : InStream;
    BEGIN
      // Saves a file to the Document Service using the configured location specified in Dynamics NAV.
      // SourcePath: The path to a physical file on the Dynamics NAV server.
      // TargetName: The name which will be given to the file saved to the Document Service.
      // Overwrite: TRUE if the target file should be overwritten.
      // - An error is shown if Overwrite is FALSE and a file with that name already exists.
      // Returns: A URI to the file on the Document Service.

      IF SourcePath = '' THEN
        ERROR(RequiredSourceNameErr);

      IF TargetName = '' THEN
        ERROR(RequiredTargetNameErr);

      IF NOT IsConfigured THEN
        ERROR(NoConfigErr);

      IF NOT SourceFile.OPEN(SourcePath) THEN
        ERROR(SourceFileNotFoundErr,SourcePath,GETLASTERRORTEXT);

      SourceFile.CREATEINSTREAM(SourceStream);

      EXIT(SaveStream(SourceStream,TargetName,Overwrite));
    END;

    PROCEDURE IsConfigured@2() : Boolean;
    VAR
      DocumentServiceRec@1000 : Record 2000000114;
    BEGIN
      // Returns TRUE if Dynamics NAV has been configured with a Document Service.

      WITH DocumentServiceRec DO BEGIN
        IF COUNT > 1 THEN
          ERROR(MultipleConfigsErr);

        IF NOT FINDFIRST THEN
          EXIT(FALSE);

        IF (Location = '') OR (Folder = '') THEN
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE IsServiceUri@3(TargetURI@1000 : Text) : Boolean;
    VAR
      DocumentServiceRec@1001 : Record 2000000114;
      IsValid@1002 : Boolean;
    BEGIN
      // Returns TRUE if the TargetURI points to a location on the currently-configured Document Service.

      IF TargetURI = '' THEN
        EXIT(FALSE);

      WITH DocumentServiceRec DO BEGIN
        IF FINDLAST THEN
          IF Location <> '' THEN BEGIN
            SetDocumentService;
            SetProperties;
            IsValid := DocumentService.IsValidUri(TargetURI);
            CheckError;
            EXIT(IsValid);
          END
      END;

      EXIT(FALSE);
    END;

    PROCEDURE SetServiceType@6(RequestedServiceType@1000 : Text);
    VAR
      DocumentServiceHelper@1001 : DotNet "'Microsoft.Dynamics.Nav.NavUserAccount, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.NavDocumentService.NavDocumentServiceHelper";
    BEGIN
      // Sets the type name of the Document Service.
      // The type must match the DocumentServiceMetadata attribute value on the IDocumentServiceHandler interface
      // exposed by at least one assembly in the Server installation folder.
      // By default, Dynamics NAV uses the SharePoint Online Document Service with type named 'SHAREPOINTONLINE'.
      ServiceType := RequestedServiceType;
      DocumentServiceHelper.SetDocumentServiceType(RequestedServiceType);
    END;

    PROCEDURE GetServiceType@7() : Text;
    BEGIN
      // Gets the name of the current Document Service.

      EXIT(ServiceType);
    END;

    PROCEDURE OpenDocument@8(TargetURI@1000 : Text);
    BEGIN
      // Navigates to the specified URI on the Document Service from the client device.

      IF TargetURI = '' THEN
        ERROR(RequiredTargetURIErr);

      IF NOT IsConfigured THEN
        ERROR(NoConfigErr);

      SetDocumentService;
      HYPERLINK(DocumentService.GenerateViewableDocumentAddress(TargetURI));
      CheckError;
    END;

    LOCAL PROCEDURE SetProperties@34();
    VAR
      DocumentServiceRec@1000 : Record 2000000114;
      DocumentServiceHelper@1001 : DotNet "'Microsoft.Dynamics.Nav.NavUserAccount, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.NavDocumentService.NavDocumentServiceHelper";
    BEGIN
      WITH DocumentServiceRec DO BEGIN
        IF NOT FINDFIRST THEN
          ERROR(NoConfigErr);

        // The Document Service will throw an exception if the property is not known to the service type provider.
        DocumentService.Properties.SetProperty(FIELDNAME(Description),Description);
        DocumentService.Properties.SetProperty(FIELDNAME(Location),Location);
        DocumentService.Properties.SetProperty(FIELDNAME("User Name"),"User Name");
        DocumentService.Properties.SetProperty(FIELDNAME(Password),Password);
        DocumentService.Properties.SetProperty(FIELDNAME("Document Repository"),"Document Repository");
        DocumentService.Properties.SetProperty(FIELDNAME(Folder),Folder);

        DocumentService.Credentials := DocumentServiceHelper.ProvideCredentials();
        IF NOT (DocumentServiceHelper.LastErrorMessage = '') THEN
          ERROR(DocumentServiceHelper.LastErrorMessage);
      END;
    END;

    LOCAL PROCEDURE SetDocumentService@5();
    VAR
      RequestedServiceType@1000 : Text;
    BEGIN
      // Sets the Document Service for the current Service Type, reusing an existing service if possible.

      RequestedServiceType := GetServiceType;

      IF RequestedServiceType = '' THEN
        RequestedServiceType := 'SHAREPOINTONLINE';

      IF LastServiceType <> RequestedServiceType THEN BEGIN
        DocumentService := DocumentServiceFactory.CreateService(RequestedServiceType);
        LastServiceType := RequestedServiceType;
      END;
    END;

    LOCAL PROCEDURE CheckError@12();
    BEGIN
      // Checks whether the Document Service received an error and displays that error to the user.

      IF NOT ISNULL(DocumentService.LastError) AND (DocumentService.LastError.Message <> '') THEN
        ERROR(DocumentService.LastError.Message);
    END;

    LOCAL PROCEDURE SaveStream@13(Stream@1000 : InStream;TargetName@1002 : Text;Overwrite@1001 : Boolean) : Text;
    VAR
      DocumentURI@1003 : Text;
    BEGIN
      // Saves a stream to the Document Service using the configured location specified in Dynamics NAV.
      SetDocumentService;
      SetProperties;

      DocumentURI := DocumentService.Save(Stream,TargetName,Overwrite);
      CheckError;

      EXIT(DocumentURI);
    END;

    BEGIN
    {
      Provides functions for the storage of documents to online services such as O365 (Office 365).
    }
    END.
  }
}

