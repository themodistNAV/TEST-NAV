OBJECT Codeunit 1410 Doc. Exch. Service Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=26/11/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43897;
  }
  PROPERTIES
  {
    Permissions=TableData 112=m,
                TableData 114=m;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      MissingCredentialsQst@1000 : TextConst '@@@="%1=Doc. Exch. Service Setup";ENU=The %1 is missing the secret keys or tokens. Do you want to open the %1 window?;ENG=The %1 is missing the secret keys or tokens. Do you want to open the %1 window?';
      MissingCredentialsErr@1001 : TextConst '@@@="%1 = Doc. Exch. Service Setup";ENU=The tokens and secret keys must be filled in the %1 window.;ENG=The tokens and secret keys must be filled in the %1 window.';
      ResponseTempBlob@1006 : Record 99008535;
      TempTraceTempBlob@1028 : TEMPORARY Record 99008535;
      Trace@1027 : Codeunit 1292;
      HttpWebRequestMgt@1005 : Codeunit 1297;
      ConnectionSuccessMsg@1012 : TextConst 'ENU=The connection test was successful. The settings are valid.;ENG=The connection test was successful. The settings are valid.';
      DocSendSuccessMsg@1007 : TextConst '@@@=%1 is the actual document no.;ENU=The document was successfully sent to the document exchange service for processing.;ENG=The document was successfully sent to the document exchange service for processing.';
      DocUploadSuccessMsg@1030 : TextConst '@@@=%1 is the actual document no.;ENU=The document was successfully uploaded to the document exchange service for processing.;ENG=The document was successfully uploaded to the document exchange service for processing.';
      DocDispatchSuccessMsg@1017 : TextConst '@@@=%1 is the actual document no.;ENU=The document was successfully sent for dispatching.;ENG=The document was successfully sent for dispatching.';
      DocDispatchFailedMsg@1018 : TextConst '@@@=%1 is the actual document no.;ENU="The document was not successfully dispatched. ";ENG="The document was not successfully dispatched. "';
      DocStatusOKMsg@1016 : TextConst '@@@=%1 is the returned value.;ENU=The current status of the electronic document is %1.;ENG=The current status of the electronic document is %1.';
      NotEnabledErr@1010 : TextConst 'ENU=The document exchange service is not enabled.;ENG=The document exchange service is not enabled.';
      DocExchLinks@1020 : Codeunit 1411;
      GLBResponseInStream@1011 : InStream;
      CheckConnectionTxt@1013 : TextConst 'ENU=Check connection.;ENG=Check connection.';
      SendDocTxt@1014 : TextConst 'ENU=Send document.;ENG=Send document.';
      GLBHttpStatusCode@1008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      GLBResponseHeaders@1019 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      GLBLastUsedGUID@1015 : Text;
      DispatchDocTxt@1009 : TextConst 'ENU=Dispatch document.;ENG=Dispatch document.';
      GetDocStatusTxt@1002 : TextConst 'ENU=Check document status.;ENG=Check document status.';
      GetDocsTxt@1021 : TextConst 'ENU=Get received documents.;ENG=Get received documents.';
      LoggingConstTxt@1003 : TextConst 'ENU=Document exchange service.;ENG=Document exchange service.';
      GetDocErrorTxt@1004 : TextConst 'ENU=Check document dispatch errors.;ENG=Check document dispatch errors.';
      MarkBusinessProcessedTxt@1022 : TextConst 'ENU=Mark as Business Processed.;ENG=Mark as Business Processed.';
      DocIdImportedTxt@1023 : TextConst '@@@=%1 is the actual doc id.;ENU=The document ID %1 is imported into incoming documents.;ENG=The document ID %1 is imported into incoming documents.';
      FileInvalidTxt@1024 : TextConst '@@@=%1 is the actual doc id;ENU="The document ID %1 is not a valid XML format. ";ENG="The document ID %1 is not a valid XML format. "';
      GLBTraceLogEnabled@1026 : Boolean;
      UnSupportedTableTypeErr@1025 : TextConst '@@@=%1 is the table.;ENU=The %1 table is not supported.;ENG=The %1 table is not supported.';
      InvalidHeaderResponseMsg@1029 : TextConst 'ENU=The document exchange service did not return a document identifier.;ENG=The document exchange service did not return a document identifier.';
      CannotResendErr@1031 : TextConst 'ENU=You cannot send this electronic document because it is already delivered or in progress.;ENG=You cannot send this electronic document because it is already delivered or in progress.';
      MalformedGuidErr@1032 : TextConst 'ENU=The document exchange service did not return a valid document identifier.;ENG=The document exchange service did not return a valid document identifier.';

    PROCEDURE SetURLsToDefault@2(VAR DocExchServiceSetup@1000 : Record 1275);
    BEGIN
      WITH DocExchServiceSetup DO BEGIN
        "Signup URL" := 'https://go.tradeshift.com/register';
        "Service URL" := 'https://api.tradeshift.com/tradeshift/rest/external';
        "Login URL" := 'https://go.tradeshift.com/login';
        "User Agent" := COPYSTR(COMPANYNAME + '/v1.0',1,MAXSTRLEN("User Agent"));
      END;
    END;

    PROCEDURE CheckConnection@10();
    VAR
      DocExchServiceSetup@1000 : Record 1275;
    BEGIN
      Initialize(GetCheckConnectionURL,'GET','');

      DocExchServiceSetup.GET;
      IF NOT ExecuteWebServiceRequest THEN
        LogActivityFailed(DocExchServiceSetup.RECORDID,CheckConnectionTxt,'');

      LogActivitySucceeded(DocExchServiceSetup.RECORDID,CheckConnectionTxt,ConnectionSuccessMsg);

      MESSAGE(ConnectionSuccessMsg);

      IF GLBTraceLogEnabled THEN
        Trace.LogStreamToTempFile(GLBResponseInStream,'checkstatus',TempTraceTempBlob);
    END;

    PROCEDURE SendUBLDocument@36(DocVariant@1003 : Variant;FileName@1000 : Text) : Text;
    VAR
      DocRecRef@1002 : RecordRef;
    BEGIN
      CheckServiceEnabled;

      DocRecRef.GETTABLE(DocVariant);

      CheckDocumentStatus(DocRecRef);

      Initialize(GetPostSalesURL(DocRecRef),'POST',FileName);

      IF NOT ExecuteWebServiceRequest THEN
        LogActivityFailed(DocRecRef.RECORDID,SendDocTxt,'');

      LogActivitySucceeded(DocRecRef.RECORDID,SendDocTxt,DocSendSuccessMsg);

      DocExchLinks.UpdateDocumentRecord(DocRecRef,GLBLastUsedGUID,'');

      IF GUIALLOWED THEN
        MESSAGE(DocSendSuccessMsg);

      EXIT(GLBLastUsedGUID);
    END;

    PROCEDURE SendDocument@20(DocVariant@1003 : Variant;FileName@1001 : Text) : Text;
    VAR
      DocRecRef@1002 : RecordRef;
      DocIdentifier@1000 : Text;
    BEGIN
      CheckServiceEnabled;

      DocIdentifier := GetGUID;
      DocRecRef.GETTABLE(DocVariant);

      CheckDocumentStatus(DocRecRef);

      PutDocument(FileName,DocIdentifier,DocRecRef);
      DispatchDocument(DocIdentifier,DocRecRef);

      IF GUIALLOWED THEN
        MESSAGE(DocSendSuccessMsg);

      EXIT(DocIdentifier);
    END;

    LOCAL PROCEDURE PutDocument@26(FileName@1003 : Text;DocIdentifier@1000 : Text;DocRecRef@1002 : RecordRef);
    BEGIN
      Initialize(GetPUTDocURL(DocIdentifier),'PUT',FileName);

      IF NOT ExecuteWebServiceRequest THEN
        LogActivityFailed(DocRecRef.RECORDID,SendDocTxt,'');

      IF NOT GLBHttpStatusCode.Equals(GLBHttpStatusCode.NoContent) THEN
        LogActivityFailed(DocRecRef.RECORDID,SendDocTxt,'');

      LogActivitySucceeded(DocRecRef.RECORDID,SendDocTxt,DocUploadSuccessMsg);

      IF GLBTraceLogEnabled THEN
        Trace.LogStreamToTempFile(GLBResponseInStream,'put',TempTraceTempBlob);
    END;

    LOCAL PROCEDURE DispatchDocument@31(DocOrigIdentifier@1000 : Text;DocRecRef@1001 : RecordRef);
    VAR
      DocIdentifier@1003 : Text;
      PlaceholderGuid@1002 : GUID;
    BEGIN
      Initialize(GetDispatchDocURL(DocOrigIdentifier),'POST','');

      IF NOT ExecuteWebServiceRequest THEN
        LogActivityFailed(DocRecRef.RECORDID,DispatchDocTxt,'');

      IF NOT GLBHttpStatusCode.Equals(GLBHttpStatusCode.Created) THEN BEGIN
        DocExchLinks.UpdateDocumentRecord(DocRecRef,'',DocOrigIdentifier);
        LogActivityFailed(DocRecRef.RECORDID,DispatchDocTxt,DocDispatchFailedMsg);
      END;

      IF GLBTraceLogEnabled THEN
        Trace.LogStreamToTempFile(GLBResponseInStream,'dispatch',TempTraceTempBlob);

      DocIdentifier := GLBResponseHeaders.Get(GetDocumentIDKey);
      IF NOT EVALUATE(PlaceholderGuid,DocIdentifier) THEN
        LogActivityFailed(DocRecRef.RECORDID,DispatchDocTxt,InvalidHeaderResponseMsg);
      DocExchLinks.UpdateDocumentRecord(DocRecRef,DocIdentifier,DocOrigIdentifier);

      LogActivitySucceeded(DocRecRef.RECORDID,DispatchDocTxt,DocDispatchSuccessMsg);
    END;

    PROCEDURE GetDocumentStatus@18(DocRecordID@1000 : RecordID;DocIdentifier@1003 : Text[50];DocOrigIdentifier@1002 : Text[50]) : Text;
    VAR
      Errors@1005 : Text;
    BEGIN
      CheckServiceEnabled;

      // Check for dispatch errors first
      IF DocOrigIdentifier <> '' THEN
        IF GetDocDispatchErrors(DocRecordID,DocOrigIdentifier,Errors) THEN
          IF Errors <> '' THEN
            EXIT('FAILED');

      // Check metadata
      IF NOT GetDocumentMetadata(DocRecordID,DocIdentifier,Errors) THEN
        EXIT('PENDING');

      // If metadata exist it means doc has been dispatched
      EXIT(Errors);
    END;

    [TryFunction]
    LOCAL PROCEDURE GetDocDispatchErrors@27(DocRecordID@1000 : RecordID;DocIdentifier@1003 : Text;VAR Errors@1002 : Text);
    VAR
      XMLDOMMgt@1001 : Codeunit 6224;
      XmlDoc@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      CheckServiceEnabled;

      Initialize(GetDispatchErrorsURL(DocIdentifier),'GET','');

      IF NOT ExecuteWebServiceRequest THEN
        LogActivityFailed(DocRecordID,GetDocErrorTxt,'');

      IF NOT HttpWebRequestMgt.TryLoadXMLResponse(GLBResponseInStream,XmlDoc) THEN
        LogActivityFailed(DocRecordID,GetDocErrorTxt,'');

      Errors := XMLDOMMgt.FindNodeTextWithNamespace(XmlDoc.DocumentElement,GetErrorXPath,
          GetPrefix,GetApiNamespace);

      LogActivitySucceeded(DocRecordID,GetDocErrorTxt,Errors);

      IF GLBTraceLogEnabled THEN
        Trace.LogStreamToTempFile(GLBResponseInStream,'dispatcherrors',TempTraceTempBlob);
    END;

    [TryFunction]
    PROCEDURE GetDocumentMetadata@19(DocRecordID@1000 : RecordID;DocIdentifier@1003 : Text[50];VAR NewStatus@1002 : Text);
    VAR
      XMLDOMMgt@1001 : Codeunit 6224;
      XmlDoc@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      CheckServiceEnabled;
      NewStatus := '';

      Initialize(GetDocStatusURL(DocIdentifier),'GET','');

      IF NOT ExecuteWebServiceRequest THEN
        LogActivityFailed(DocRecordID,GetDocStatusTxt,'');

      IF NOT HttpWebRequestMgt.TryLoadXMLResponse(GLBResponseInStream,XmlDoc) THEN
        LogActivityFailed(DocRecordID,GetDocStatusTxt,'');

      IF GLBTraceLogEnabled THEN
        Trace.LogStreamToTempFile(GLBResponseInStream,'checkstatus',TempTraceTempBlob);

      NewStatus := XMLDOMMgt.FindNodeTextWithNamespace(XmlDoc.DocumentElement,GetStatusXPath,GetPrefix,GetPublicNamespace);
      LogActivitySucceeded(DocRecordID,GetDocStatusTxt,STRSUBSTNO(DocStatusOKMsg,NewStatus));
    END;

    PROCEDURE ReceiveDocuments@9(ContextRecordID@1002 : RecordID);
    VAR
      XmlDoc@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      CheckServiceEnabled;

      Initialize(GetRetrieveDocsURL,'GET','');

      IF NOT ExecuteWebServiceRequest THEN
        LogActivityFailed(ContextRecordID,GetDocsTxt,'');

      IF NOT HttpWebRequestMgt.TryLoadXMLResponse(GLBResponseInStream,XmlDoc) THEN
        LogActivityFailed(ContextRecordID,GetDocsTxt,'');

      ProcessReceivedDocs(ContextRecordID,XmlDoc);
    END;

    LOCAL PROCEDURE ProcessReceivedDocs@126(ContextRecordID@1004 : RecordID;XmlDocs@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      IncomingDocument@1003 : Record 130;
      XMLDOMMgt@1008 : Codeunit 6224;
      XMLRootNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Node@1009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DummyGuid@1010 : GUID;
      DocIdentifier@1002 : Text;
      Description@1000 : Text;
    BEGIN
      XMLRootNode := XmlDocs.DocumentElement;

      FOREACH Node IN XMLRootNode.ChildNodes DO BEGIN
        DocIdentifier := XMLDOMMgt.FindNodeTextWithNamespace(Node,GetDocumentIDXPath,
            GetPrefix,GetPublicNamespace);

        IF NOT EVALUATE(DummyGuid,DocIdentifier) THEN
          LogActivityFailed(ContextRecordID,GetDocsTxt,MalformedGuidErr);
        IF TryGetDocumentDescription(Node,Description) THEN;
        IF DELCHR(Description,'<>',' ') = '' THEN
          Description := DocIdentifier;
        GetOriginalDocument(ContextRecordID,DocIdentifier);
        CreateIncomingDocEntry(IncomingDocument,ContextRecordID,DocIdentifier,Description);

        IF NOT MarkDocBusinessProcessed(ContextRecordID,DocIdentifier) THEN BEGIN
          IncomingDocument.DELETE;
          LogActivityFailed(ContextRecordID,MarkBusinessProcessedTxt,'');
        END;
        COMMIT;

        IncomingDocument.FIND;
        OnAfterIncomingDocReceivedFromDocExch(IncomingDocument);
      END;
    END;

    LOCAL PROCEDURE GetOriginalDocument@42(ContextRecordID@1002 : RecordID;DocIdentifier@1000 : Text);
    BEGIN
      CheckServiceEnabled;

      Initialize(GetRetrieveOriginalDocIDURL(DocIdentifier),'GET','');

      // If can't get the original, it means it was not a 2-step. Get the actual TS-UBL
      IF NOT ExecuteWebServiceRequest THEN
        GetDocument(ContextRecordID,DocIdentifier);
    END;

    LOCAL PROCEDURE GetDocument@29(ContextRecordID@1002 : RecordID;DocIdentifier@1000 : Text);
    BEGIN
      CheckServiceEnabled;

      Initialize(GetRetrieveDocIDURL(DocIdentifier),'GET','');

      IF NOT ExecuteWebServiceRequest THEN
        LogActivityFailed(ContextRecordID,GetDocsTxt,'');
    END;

    [TryFunction]
    LOCAL PROCEDURE MarkDocBusinessProcessed@41(ContextRecordID@1002 : RecordID;DocIdentifier@1001 : Text);
    BEGIN
      CheckServiceEnabled;

      Initialize(GetSetTagURL(DocIdentifier),'PUT','');

      ExecuteWebServiceRequest;

      LogActivitySucceeded(ContextRecordID,MarkBusinessProcessedTxt,STRSUBSTNO(DocIdImportedTxt,DocIdentifier));
    END;

    LOCAL PROCEDURE CreateIncomingDocEntry@131(VAR IncomingDocument@1001 : Record 130;ContextRecordID@1004 : RecordID;DocIdentifier@1003 : Text;Description@1005 : Text);
    VAR
      IncomingDocumentAttachment@1002 : Record 133;
      XmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      // Assert response is XML
      IF NOT HttpWebRequestMgt.TryLoadXMLResponse(GLBResponseInStream,XmlDoc) THEN
        LogActivityFailed(ContextRecordID,GetDocsTxt,STRSUBSTNO(FileInvalidTxt,DocIdentifier));

      IncomingDocument.CreateIncomingDocument(
        COPYSTR(Description,1,MAXSTRLEN(IncomingDocument.Description)),GetExternalDocURL(DocIdentifier));
      IncomingDocument.AddAttachmentFromStream(IncomingDocumentAttachment,DocIdentifier,'xml',GLBResponseInStream);
    END;

    LOCAL PROCEDURE Initialize@3(URL@1002 : Text;Method@1001 : Text[6];BodyFilePath@1003 : Text);
    VAR
      DocExchServiceSetup@1000 : Record 1275;
      OAuthAuthorization@1006 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=9.0.0.0'.Microsoft.Dynamics.Nav.OAuthHelper.OAuthAuthorization";
      OAuthConsumer@1005 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=9.0.0.0 '.Microsoft.Dynamics.Nav.OAuthHelper.Consumer";
      OAuthToken@1004 : DotNet "'Microsoft.Dynamics.Nav.OAuth, Version=9.0.0.0'.Microsoft.Dynamics.Nav.OAuthHelper.Token";
    BEGIN
      CheckCredentials;

      WITH DocExchServiceSetup DO BEGIN
        GET;
        OAuthConsumer := OAuthConsumer.Consumer(GetPassword("Consumer Key"),GetPassword("Consumer Secret"));
        OAuthToken := OAuthToken.Token(GetPassword(Token),GetPassword("Token Secret"));
        OAuthAuthorization := OAuthAuthorization.OAuthAuthorization(OAuthConsumer,OAuthToken);
      END;

      CLEAR(HttpWebRequestMgt);
      HttpWebRequestMgt.Initialize(URL);
      HttpWebRequestMgt.SetMethod(Method);
      HttpWebRequestMgt.AddHeader('Authorization',OAuthAuthorization.GetAuthorizationHeader(URL,Method));

      SetDefaults(BodyFilePath);
    END;

    LOCAL PROCEDURE SetDefaults@16(BodyFilePath@1000 : Text);
    BEGIN
      HttpWebRequestMgt.SetContentType('text/xml');
      HttpWebRequestMgt.SetReturnType('text/xml');
      HttpWebRequestMgt.SetUserAgent(GetUserAgent);
      HttpWebRequestMgt.AddHeader('X-Tradeshift-TenantId',GetTenantID);
      HttpWebRequestMgt.AddHeader('Accept-Encoding','utf-8');
      HttpWebRequestMgt.AddBody(BodyFilePath);

      GLBTraceLogEnabled := TRUE;
    END;

    PROCEDURE CheckCredentials@4();
    VAR
      DocExchServiceSetup@1000 : Record 1275;
    BEGIN
      WITH DocExchServiceSetup DO
        IF NOT (GET AND HasPassword("Consumer Key") AND HasPassword("Consumer Secret") AND
                HasPassword(Token) AND HasPassword("Token Secret"))
        THEN
          IF CONFIRM(STRSUBSTNO(MissingCredentialsQst,TABLECAPTION),TRUE) THEN BEGIN
            COMMIT;
            PAGE.RUNMODAL(PAGE::"Doc. Exch. Service Setup",DocExchServiceSetup);
            IF NOT (GET AND HasPassword("Consumer Key") AND HasPassword("Consumer Secret") AND
                    HasPassword(Token) AND HasPassword("Token Secret"))
            THEN
              ERROR(MissingCredentialsErr,TABLECAPTION);
          END ELSE
            ERROR(MissingCredentialsErr,TABLECAPTION);
    END;

    [TryFunction]
    LOCAL PROCEDURE ExecuteWebServiceRequest@1();
    BEGIN
      CLEAR(ResponseTempBlob);
      ResponseTempBlob.INIT;
      ResponseTempBlob.Blob.CREATEINSTREAM(GLBResponseInStream);

      IF NOT GUIALLOWED THEN
        HttpWebRequestMgt.DisableUI;

      IF NOT HttpWebRequestMgt.GetResponse(GLBResponseInStream,GLBHttpStatusCode,GLBResponseHeaders) THEN
        HttpWebRequestMgt.ProcessFaultXMLResponse('',GetErrorXPath,GetPrefix,GetApiNamespace);
    END;

    PROCEDURE CheckServiceEnabled@6();
    VAR
      DocExchServiceSetup@1000 : Record 1275;
    BEGIN
      WITH DocExchServiceSetup DO BEGIN
        GET;
        IF NOT Enabled THEN
          ERROR(NotEnabledErr);
      END;
    END;

    LOCAL PROCEDURE CheckDocumentStatus@28(DocRecRef@1000 : RecordRef);
    VAR
      SalesInvoiceHeader@1001 : Record 112;
      SalesCrMemoHeader@1002 : Record 114;
      ServiceInvoiceHeader@1003 : Record 5992;
      ServiceCrMemoHeader@1004 : Record 5994;
    BEGIN
      CASE DocRecRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            DocRecRef.SETTABLE(SalesInvoiceHeader);
            IF SalesInvoiceHeader."Document Exchange Status" IN
               [SalesInvoiceHeader."Document Exchange Status"::"Sent to Document Exchange Service",
                SalesInvoiceHeader."Document Exchange Status"::"Delivered to Recipient",
                SalesInvoiceHeader."Document Exchange Status"::"Pending Connection to Recipient"]
            THEN
              ERROR(CannotResendErr);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            DocRecRef.SETTABLE(SalesCrMemoHeader);
            IF SalesCrMemoHeader."Document Exchange Status" IN
               [SalesCrMemoHeader."Document Exchange Status"::"Sent to Document Exchange Service",
                SalesCrMemoHeader."Document Exchange Status"::"Delivered to Recipient",
                SalesCrMemoHeader."Document Exchange Status"::"Pending Connection to Recipient"]
            THEN
              ERROR(CannotResendErr);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            DocRecRef.SETTABLE(ServiceInvoiceHeader);
            IF ServiceInvoiceHeader."Document Exchange Status" IN
               [ServiceInvoiceHeader."Document Exchange Status"::"Sent to Document Exchange Service",
                ServiceInvoiceHeader."Document Exchange Status"::"Delivered to Recipient",
                ServiceInvoiceHeader."Document Exchange Status"::"Pending Connection to Recipient"]
            THEN
              ERROR(CannotResendErr);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            DocRecRef.SETTABLE(ServiceCrMemoHeader);
            IF ServiceCrMemoHeader."Document Exchange Status" IN
               [ServiceCrMemoHeader."Document Exchange Status"::"Sent to Document Exchange Service",
                ServiceCrMemoHeader."Document Exchange Status"::"Delivered to Recipient",
                ServiceCrMemoHeader."Document Exchange Status"::"Pending Connection to Recipient"]
            THEN
              ERROR(CannotResendErr);
          END;
        ELSE
          ERROR(UnSupportedTableTypeErr,DocRecRef.NUMBER);
      END;
    END;

    LOCAL PROCEDURE GetTenantID@11() : Text;
    VAR
      DocExchServiceSetup@1000 : Record 1275;
    BEGIN
      WITH DocExchServiceSetup DO BEGIN
        GET;
        EXIT(GetPassword("Doc. Exch. Tenant ID"));
      END;
    END;

    LOCAL PROCEDURE GetUserAgent@17() : Text;
    VAR
      DocExchServiceSetup@1000 : Record 1275;
    BEGIN
      WITH DocExchServiceSetup DO BEGIN
        GET;
        TESTFIELD("User Agent");
        EXIT("User Agent");
      END;
    END;

    LOCAL PROCEDURE GetFullURL@47(PartialURL@1000 : Text) : Text;
    VAR
      DocExchServiceSetup@1001 : Record 1275;
    BEGIN
      WITH DocExchServiceSetup DO BEGIN
        GET;
        TESTFIELD("Service URL");
        EXIT("Service URL" + PartialURL);
      END;
    END;

    LOCAL PROCEDURE GetCheckConnectionURL@5() : Text;
    BEGIN
      EXIT(GetFullURL('/account/info'));
    END;

    LOCAL PROCEDURE GetPostSalesURL@46(DocRecRef@1000 : RecordRef) : Text;
    BEGIN
      CASE DocRecRef.NUMBER OF
        DATABASE::"Sales Invoice Header",DATABASE::"Service Invoice Header":
          EXIT(GetPostSalesInvURL);
        DATABASE::"Sales Cr.Memo Header",DATABASE::"Service Cr.Memo Header":
          EXIT(GetPostSalesCrMemoURL);
        ELSE
          ERROR(UnSupportedTableTypeErr,DocRecRef.NUMBER);
      END;
    END;

    LOCAL PROCEDURE GetPostSalesInvURL@1110() : Text;
    BEGIN
      EXIT(GetFullURL(STRSUBSTNO('/documents/dispatcher?documentId=%1&documentProfileId=tradeshift.invoice.ubl.1.0',
            GetGUID)));
    END;

    LOCAL PROCEDURE GetPostSalesCrMemoURL@12() : Text;
    BEGIN
      EXIT(GetFullURL(STRSUBSTNO('/documents/dispatcher?documentId=%1&documentProfileId=tradeshift.creditnote.ubl.1.0',
            GetGUID)));
    END;

    LOCAL PROCEDURE GetDocStatusURL@15(DocIdentifier@1001 : Text) : Text;
    BEGIN
      EXIT(GetFullURL(STRSUBSTNO('/documents/%1/metadata',DocIdentifier)));
    END;

    LOCAL PROCEDURE GetPUTDocURL@119(FileName@1000 : Text) : Text;
    BEGIN
      EXIT(GetFullURL(STRSUBSTNO('/documentfiles/%1/file?directory=outbox',FileName)));
    END;

    LOCAL PROCEDURE GetDispatchDocURL@30(FileName@1000 : Text) : Text;
    BEGIN
      EXIT(GetFullURL(STRSUBSTNO('/documentfiles/%1/dispatcher?directory=outbox',FileName)));
    END;

    LOCAL PROCEDURE GetDispatchErrorsURL@23(DocIdentifier@1001 : Text) : Text;
    BEGIN
      EXIT(GetFullURL(STRSUBSTNO('/documentfiles/%1/errors',DocIdentifier)));
    END;

    LOCAL PROCEDURE GetRetrieveDocsURL@123() : Text;
    BEGIN
      EXIT(GetFullURL(STRSUBSTNO('/documents?stag=inbox&withouttag=BusinessDelivered&limit=%1',GetChunckSize)));
    END;

    LOCAL PROCEDURE GetRetrieveDocIDURL@130(DocIdentifier@1003 : Text) : Text;
    BEGIN
      EXIT(GetFullURL(STRSUBSTNO('/documents/%1',DocIdentifier)));
    END;

    LOCAL PROCEDURE GetRetrieveOriginalDocIDURL@21(DocIdentifier@1003 : Text) : Text;
    BEGIN
      EXIT(GetFullURL(STRSUBSTNO('/documents/%1/original',DocIdentifier)));
    END;

    LOCAL PROCEDURE GetSetTagURL@127(DocIdentifier@1002 : Text) : Text;
    BEGIN
      EXIT(GetFullURL(STRSUBSTNO('/documents/%1/tags/BusinessDelivered',DocIdentifier)));
    END;

    LOCAL PROCEDURE GetGUID@1111() : Text;
    BEGIN
      GLBLastUsedGUID := DELCHR(DELCHR(FORMAT(CREATEGUID),'=','{'),'=','}');

      EXIT(GLBLastUsedGUID);
    END;

    LOCAL PROCEDURE GetChunckSize@33() : Integer;
    BEGIN
      EXIT(100);
    END;

    LOCAL PROCEDURE GetApiNamespace@13() : Text;
    BEGIN
      EXIT('http://tradeshift.com/api/1.0');
    END;

    LOCAL PROCEDURE GetPublicNamespace@40() : Text;
    BEGIN
      EXIT('http://tradeshift.com/api/public/1.0');
    END;

    LOCAL PROCEDURE GetErrorXPath@14() : Text;
    BEGIN
      EXIT(STRSUBSTNO('//%1:Message',GetPrefix));
    END;

    LOCAL PROCEDURE GetStatusXPath@22() : Text;
    BEGIN
      EXIT(STRSUBSTNO('//%1:DeliveryState',GetPrefix));
    END;

    LOCAL PROCEDURE GetDocumentIDXPath@39() : Text;
    BEGIN
      EXIT(STRSUBSTNO('.//%1:DocumentId',GetPrefix));
    END;

    LOCAL PROCEDURE GetDocumentTypeXPath@44() : Text;
    BEGIN
      EXIT(STRSUBSTNO('.//%1:DocumentType',GetPrefix));
    END;

    LOCAL PROCEDURE GetDocumentIDForDescriptionXPath@38() : Text;
    BEGIN
      EXIT(STRSUBSTNO('.//%1:ID',GetPrefix));
    END;

    LOCAL PROCEDURE GetPrefix@45() : Text;
    BEGIN
      EXIT('newnamespace');
    END;

    LOCAL PROCEDURE GetDocumentIDKey@34() : Text;
    BEGIN
      EXIT('X-Tradeshift-DocumentId');
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetDocumentDescription@35(Node@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR Description@1003 : Text);
    VAR
      XMLDOMMgt@1002 : Codeunit 6224;
      SrchNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      Description := '';
      XMLDOMMgt.FindNodeWithNamespace(Node,GetDocumentTypeXPath,GetPrefix,
        GetPublicNamespace,SrchNode);
      Description := MapDocumentType(XMLDOMMgt.GetAttributeValue(SrchNode,'type'));
      Description += ' ' + XMLDOMMgt.FindNodeTextWithNamespace(Node,GetDocumentIDForDescriptionXPath,
          GetPrefix,GetPublicNamespace);
    END;

    LOCAL PROCEDURE MapDocumentType@37(DocType@1000 : Text) : Text;
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CASE DocType OF
        'invoice':
          PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Invoice;
        'creditnote':
          PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::"Credit Memo";
        ELSE
          EXIT('');
      END;
      EXIT(FORMAT(PurchaseHeader."Document Type"));
    END;

    LOCAL PROCEDURE LogActivitySucceeded@25(RelatedRecordID@1001 : RecordID;ActivityDescription@1002 : Text;ActivityMessage@1003 : Text);
    VAR
      ActivityLog@1000 : Record 710;
    BEGIN
      ActivityLog.LogActivity(RelatedRecordID,ActivityLog.Status::Success,LoggingConstTxt,
        COPYSTR(ActivityDescription,1,250),COPYSTR(ActivityMessage,1,250));
    END;

    LOCAL PROCEDURE LogActivityFailed@24(RelatedRecordID@1001 : RecordID;ActivityDescription@1002 : Text;ActivityMessage@1003 : Text);
    VAR
      ActivityLog@1000 : Record 710;
    BEGIN
      ActivityMessage := GETLASTERRORTEXT + ' ' + ActivityMessage;
      CLEARLASTERROR;

      ActivityLog.LogActivity(RelatedRecordID,ActivityLog.Status::Failed,LoggingConstTxt,
        COPYSTR(ActivityDescription,1,250),COPYSTR(ActivityMessage,1,250));

      COMMIT;

      IF DELCHR(ActivityMessage,'<>',' ') <> '' THEN
        ERROR(ActivityMessage);
    END;

    PROCEDURE EnableTraceLog@8(NewTraceLogEnabled@1000 : Boolean);
    BEGIN
      GLBTraceLogEnabled := NewTraceLogEnabled;
    END;

    [EventSubscriber(Table,1400,OnRegisterServiceConnection)]
    PROCEDURE HandleVANRegisterServiceConnection@122(VAR ServiceConnection@1000 : Record 1400);
    VAR
      DocExchServiceSetup@1001 : Record 1275;
      RecRef@1002 : RecordRef;
    BEGIN
      IF NOT DocExchServiceSetup.GET THEN BEGIN
        DocExchServiceSetup.INIT;
        DocExchServiceSetup.INSERT;
      END;

      RecRef.GETTABLE(DocExchServiceSetup);

      IF DocExchServiceSetup.Enabled THEN
        ServiceConnection.Status := ServiceConnection.Status::Enabled
      ELSE
        ServiceConnection.Status := ServiceConnection.Status::Disabled;

      WITH DocExchServiceSetup DO
        ServiceConnection.InsertServiceConnection(
          ServiceConnection,RecRef.RECORDID,TABLENAME,"Service URL",PAGE::"Doc. Exch. Service Setup");
    END;

    [Integration(TRUE)]
    PROCEDURE OnAfterIncomingDocReceivedFromDocExch@32(VAR IncomingDocument@1000 : Record 130);
    BEGIN
    END;

    PROCEDURE GetExternalDocURL@7(DocID@1000 : Text) : Text;
    VAR
      URLPart@1001 : Text;
    BEGIN
      URLPart := 'www';
      IF STRPOS(GetFullURL(''),'sandbox') > 0 THEN
        URLPart := 'sandbox';

      EXIT(STRSUBSTNO('https://%1.tradeshift.com/app/Tradeshift.Migration#::conversation/view/%2::',URLPart,DocID));
    END;

    BEGIN
    END.
  }
}

