OBJECT XMLport 9062317 Web Questionnaire Card
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Web Questionnaire Card;
               ENG=Web Questionnaire Card];
    Encoding=ISO-8859-2;
    XMLVersionNo=1.1;
    Format/Evaluate=XML Format/Evaluate;
    OnPreXMLport=BEGIN
                   json_Array1 := 'true';
                   json_Array2 := json_Array1;
                 END;

  }
  ELEMENTS
  {
    { [{E2BC3607-1AAC-4382-8898-402AEE898D12}];  ;data                ;Element ;Text    ;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{7E0D88E6-43EB-4994-8A7D-7A5E8077160C}];1 ;request             ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once }

    { [{70B16B71-6910-4856-A6F8-CB31CEF82581}];2 ;actionName          ;Element ;Text    ;
                                                  VariableName=f_actionName;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once }

    { [{99905464-17B2-4020-875D-4F5CD980E99F}];2 ;questGuid           ;Element ;Text    ;
                                                  VariableName=f_questGuid;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once }

    { [{887655A3-9E2F-4C3E-85CE-53775BA5FF64}];2 ;currentPageNo       ;Element ;Text    ;
                                                  VariableName=f_currentPageNo;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once }

    { [{9CFD731D-2A21-43FF-B967-86D87D098C34}];2 ;lineNo              ;Element ;Text    ;
                                                  VariableName=f_lineNo;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once }

    { [{B054C32A-6111-4A54-B08E-4837200A329A}];2 ;inputText           ;Element ;Text    ;
                                                  VariableName=f_inputText;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once }

    { [{A37B248A-7668-4719-897E-4E554CAD3D35}];2 ;activeQuestIndex    ;Element ;Text    ;
                                                  VariableName=f_activeQuestIndex;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once }

    { [{8AE44554-86C7-4664-A184-3870C3441A9C}];1 ;questionnaire       ;Element ;Table   ;
                                                  VariableName=QuestInstance;
                                                  SourceTable=Table9062704;
                                                  Temporary=Yes;
                                                  MinOccurs=Zero;
                                                  Export::OnAfterGetRecord=BEGIN
                                                                             txt_currPageNo := FORMAT(currPageNo, 0, 9);
                                                                             CLEAR(gQuestInstanceDescription);
                                                                             gQuestInstanceDescription.ADDTEXT(QuestInstance.GetDescription);
                                                                           END;
                                                                            }

    { [{536DA944-6B20-43D3-B703-D124D2DF4D83}];2 ;firstPageNo         ;Element ;Field   ;
                                                  DataType=Integer;
                                                  SourceField=QuestInstance::First Active Page No.;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{21813FA5-30AE-4D7B-8CAD-13927A279F5E}];2 ;lastPageNo          ;Element ;Field   ;
                                                  DataType=Integer;
                                                  SourceField=QuestInstance::Last Active Page No.;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{457D1B41-70E0-4086-A5DD-287EE8964B17}];2 ;name                ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=QuestInstance::Name }

    { [{D8D99553-70F4-4773-855D-B234A213C87E}];2 ;description         ;Element ;Text    ;
                                                  VariableName=gQuestInstanceDescription;
                                                  TextType=BigText;
                                                  DataType=Text }

    { [{24DB68D3-0A56-466A-8B27-E4C1DF3E744E}];2 ;currentPageNo       ;Element ;Text    ;
                                                  VariableName=txt_currPageNo;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{D707CA40-5603-4D97-AFF8-532B26222C7D}];2 ;canGoNext           ;Element ;Text    ;
                                                  VariableName=Quest_CanGoNext;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{5AD3BD65-C1D3-450F-A259-BE188280D48A}];2 ;canGoPrev           ;Element ;Text    ;
                                                  VariableName=Quest_CanGoPrev;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{C29F5DBB-2A55-4578-AFC3-E331056893F1}];2 ;canFinish           ;Element ;Text    ;
                                                  VariableName=Quest_CanFinish;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{F994664F-ECDE-4454-9189-B0CF0E7CA4FB}];2 ;editable            ;Element ;Text    ;
                                                  VariableName=Quest_Editable;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{ED75219D-2E11-40CA-AE05-E4D9025BAAD5}];2 ;finished            ;Element ;Field   ;
                                                  DataType=Boolean;
                                                  SourceField=QuestInstance::Finished }

    { [{0F988783-37CE-43ED-8990-043FD8D2FBCB}];2 ;finishStatusText    ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=QuestInstance::On Finish - Status Text }

    { [{880C1251-4522-4827-BE7D-932CB47E7CEE}];2 ;visiblePageCount    ;Element ;Text    ;
                                                  VariableName=Quest_VisiblePageCount;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{26F6DF6C-D8E1-4B2F-BF39-401F6D583053}];2 ;visiblePageIndex    ;Element ;Text    ;
                                                  VariableName=Quest_VisiblePageIndex;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{C76B8482-0C64-4CC2-B0A8-B484DC4BD618}];2 ;previewMode         ;Element ;Text    ;
                                                  VariableName=Quest_PreviewMode }

    { [{043867E5-723D-40DF-BFE4-7F9DBD30136D}];2 ;focusedId           ;Element ;Text    ;
                                                  VariableName=Quest_FocusedId }

    { [{0A93A3E4-9AA2-48B9-879C-50CAD40D86EF}];2 ;questionnaireLine   ;Element ;Table   ;
                                                  VariableName=QuestionnaireLine;
                                                  SourceTable=Table9062705;
                                                  SourceTableView=SORTING(Field2,Field8)
                                                                  WHERE(Field300=CONST(No));
                                                  LinkFields=Field2=FIELD(Field2);
                                                  LinkTable=QuestInstance;
                                                  MinOccurs=Zero;
                                                  Export::OnPreXMLItem=BEGIN
                                                                         IF (NOT(IsSinglePageMode())) THEN
                                                                           QuestionnaireLine.SETRANGE("Page No.", currPageNo);
                                                                         QuestionIndex := 0;
                                                                       END;

                                                  Export::OnAfterGetRecord=VAR
                                                                             UseDropDown@1000000000 : Boolean;
                                                                             UseLookup@1000000001 : Boolean;
                                                                           BEGIN
                                                                             UseLookup := FALSE;
                                                                             UseDropDown := FALSE;
                                                                             AnswerOption.RESET();
                                                                             AnswerOption.DELETEALL();
                                                                             UseDropDown := FALSE;
                                                                             QuestionIndex += 1;
                                                                             QuestionIndexText := FORMAT(QuestionIndex, 0, 9);
                                                                             QuestionUniqueId := 'quest' + FORMAT(QuestionnaireLine."Line No.", 0, 9);
                                                                             //select editor type
                                                                             CASE (QuestionnaireLine."Answer Type") OF
                                                                               QuestionnaireLine."Answer Type"::Date:
                                                                                 QuestLine_EditorType := 'date';
                                                                             //  QuestionnaireLine."Answer Type"::Time:
                                                                             //    QuestLine_EditorType := 'time';
                                                                               QuestionnaireLine."Answer Type"::Boolean:
                                                                                 BEGIN
                                                                                   QuestLine_InputOption := BoolToNumber(QuestionnaireLine."Boolean Input");
                                                                                   CollectOptionStringValues(txtBooleanOptions);
                                                                                   QuestLine_EditorType := 'option';
                                                                                   //QuestLine_EditorType := 'boolean';
                                                                                 END;
                                                                               QuestionnaireLine."Answer Type"::Option:
                                                                                 BEGIN
                                                                                   QuestLine_InputOption := FORMAT(QuestionnaireLine."Integer Input", 0, 9);
                                                                                   CollectOptionStringValues(QuestionnaireLine."Answer Option String");
                                                                                   QuestLine_EditorType := 'option';
                                                                                 END;
                                                                               QuestionnaireLine."Answer Type"::DateTime:
                                                                                 QuestLine_EditorType := 'date';
                                                                             ELSE
                                                                               QuestLine_EditorType := 'text';
                                                                             END;

                                                                             //add line error text
                                                                             IF ((WasError) AND (QuestionnaireLine."Line No." = ErrorLineNo)) THEN BEGIN
                                                                               QuestLine_LineError := BoolToNumber(TRUE);
                                                                               QuestLine_LineErrorText := ErrorText;
                                                                             END ELSE BEGIN
                                                                               QuestLine_LineError := BoolToNumber(FALSE);
                                                                               QuestLine_LineErrorText := '';
                                                                             END;

                                                                             //format output
                                                                             QuestLine_TextInput := QuestionnaireLine."Text Input";
                                                                             IF (QuestionnaireLine."Text Input" <> '') THEN BEGIN
                                                                               CASE (QuestionnaireLine."Answer Type") OF
                                                                                 QuestionnaireLine."Answer Type"::Date:
                                                                                   QuestLine_TextInput := FORMAT(QuestionnaireLine."Date Input", 0, 9);
                                                                                 QuestionnaireLine."Answer Type"::DateTime:
                                                                                   QuestLine_TextInput := FORMAT(QuestionnaireLine."DateTime Input", 0, 9);
                                                                               END;
                                                                             END;

                                                                             //format boolean and option values
                                                                             QuestLine_InputOption := FORMAT(QuestionnaireLine."Integer Input", 0, 9);
                                                                             IF (QuestionnaireLine."Answer Type" = QuestionnaireLine."Answer Type"::Boolean) THEN BEGIN
                                                                               QuestLine_InputOption := BoolToNumber(QuestionnaireLine."Boolean Input");
                                                                             END;

                                                                             IF (QuestionnaireLine."Answer Table Id" <> 0) AND (QuestionnaireLine."Answer Field Id" <> 0) THEN BEGIN
                                                                               IF (QuestionnaireLine."Show Drop Down") THEN BEGIN
                                                                                 UseDropDown := TRUE;
                                                                                 QuestLine_EditorType := 'option';
                                                                                 QuestLine_InputOption := QuestionnaireLine."Text Input";
                                                                                 CollectTableValues(
                                                                                   QuestionnaireLine."Answer Table Id",
                                                                                   QuestionnaireLine."Answer Field Id",
                                                                                   QuestionnaireLine."Answer Field Id",
                                                                                   QuestionnaireLine."Answer Criteria Id");
                                                                               END ELSE
                                                                                 UseLookup := TRUE;
                                                                             END;

                                                                             IF (NOT(QuestionnaireLine."Has Value")) THEN BEGIN
                                                                               CASE (QuestionnaireLine."Answer Type") OF
                                                                                 QuestionnaireLine."Answer Type"::Boolean:
                                                                                   BEGIN
                                                                                     QuestLine_TextInput := '';
                                                                                     QuestLine_InputOption := '-1';
                                                                                   END;
                                                                                 QuestionnaireLine."Answer Type"::Option:
                                                                                   BEGIN
                                                                                     QuestLine_TextInput := '-1';
                                                                                     QuestLine_InputOption := '-1';
                                                                                   END;
                                                                               END;
                                                                             END;

                                                                             CLEAR(gQuestionText);
                                                                             gQuestionText.ADDTEXT(QuestionnaireLine.GetExtendedQuestionText(FALSE));

                                                                             CLEAR(gQuestionHelpText);
                                                                             gQuestionHelpText.ADDTEXT(QuestionnaireLine.GetHelpText);

                                                                             IF (QuestionnaireLine."Line Type" = QuestionnaireLine."Line Type"::Question) AND (FocusedId = '') THEN
                                                                               FocusedId := QuestionUniqueId;

                                                                             QuestLine_Lookup := BoolToText(UseLookup);
                                                                           END;
                                                                            }

    { [{FA0C062F-D3D3-4ABB-8ADD-6E6A92FA1CF4}];3 ;json_Array          ;Attribute;Text   ;
                                                  VariableName=json_Array1;
                                                  Occurrence=Optional }

    { [{CFB49FAA-856A-42BA-BE15-E638B39E844D}];3 ;lineNo              ;Element ;Field   ;
                                                  DataType=Integer;
                                                  SourceField=QuestionnaireLine::Line No. }

    { [{FF5B50B4-2514-4834-9E90-F5AF7608491F}];3 ;no                  ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=QuestionnaireLine::Question No. }

    { [{8006A25B-9A23-4BC0-9CFA-489ED511F112}];3 ;question            ;Element ;Text    ;
                                                  VariableName=gQuestionText;
                                                  TextType=BigText;
                                                  DataType=Text }

    { [{924049EB-47CC-4336-BAF8-C99B7ABF01B8}];3 ;answer              ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=QuestionnaireLine::Answer }

    { [{78E715FC-2181-4AA0-ABF8-2361046550CF}];3 ;input               ;Element ;Text    ;
                                                  VariableName=QuestLine_TextInput;
                                                  DataType=Text;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{7B38BB42-1185-47C8-92DB-B15348904E98}];3 ;inputOption         ;Element ;Text    ;
                                                  VariableName=QuestLine_InputOption;
                                                  DataType=Integer;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{5A35B3C0-B1C2-47E5-B1E5-E274675F8443}];3 ;inputBool           ;Element ;Field   ;
                                                  DataType=Boolean;
                                                  SourceField=QuestionnaireLine::Boolean Input }

    { [{139BAD32-8A56-4D8F-871B-EFBB94F726CE}];3 ;dataType            ;Element ;Field   ;
                                                  DataType=Option;
                                                  SourceField=QuestionnaireLine::Answer Type }

    { [{58C59410-163B-46D9-8585-C0A45D0BF6A6}];3 ;dataTypeName        ;Element ;Text    ;
                                                  VariableName=QuestLine_TypeName;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 QuestLine_TypeName := LOWERCASE(FORMAT(QuestionnaireLine."Answer Type"));
                                                                               END;
                                                                                }

    { [{7A831B86-5B19-4B47-A444-1FF51511AD74}];3 ;editorType          ;Element ;Text    ;
                                                  VariableName=QuestLine_EditorType;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{F4D760B5-B046-4167-B405-3EBB4CCBB42C}];3 ;lineType            ;Element ;Field   ;
                                                  DataType=Option;
                                                  SourceField=QuestionnaireLine::Line Type }

    { [{F4F7414E-56C6-432F-8727-9BB5D08841A7}];3 ;lineError           ;Element ;Text    ;
                                                  VariableName=QuestLine_LineError;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{B9FE2F9C-690B-4167-8B4F-6B2DB81538A2}];3 ;lineErrorText       ;Element ;Text    ;
                                                  VariableName=QuestLine_LineErrorText;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { [{9DF0E9EA-2FBC-4424-B961-F867A52355EF}];3 ;helpText            ;Element ;Text    ;
                                                  VariableName=gQuestionHelpText;
                                                  TextType=BigText }

    { [{126439DE-B08F-4ADA-B9BB-813C58C248F8}];3 ;helpURL             ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=QuestionnaireLine::Question Help URL }

    { [{037EA404-FA25-4311-BD61-716AFBF1ABD1}];3 ;helpURLName         ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=QuestionnaireLine::Question Help URL Name }

    { [{700FB114-452F-485E-97DA-A00581E3BB22}];3 ;required            ;Element ;Field   ;
                                                  DataType=Boolean;
                                                  SourceField=QuestionnaireLine::Required }

    { [{683FAB69-8898-4C45-AE7B-B21342AE60F1}];3 ;elementIndex        ;Element ;Text    ;
                                                  VariableName=QuestionIndexText;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once }

    { [{C8A43AE5-1FED-4CFE-AA88-D7D158AD3431}];3 ;uniqueId            ;Element ;Text    ;
                                                  VariableName=QuestionUniqueId }

    { [{A15740CC-51C1-4C03-9456-99F647403A37}];3 ;showLookup          ;Element ;Text    ;
                                                  VariableName=QuestLine_Lookup }

    { [{C94AF910-1DA3-4C5C-9EC2-F0390DECA0F3}];3 ;answerOption        ;Element ;Table   ;
                                                  VariableName=AnswerOption;
                                                  SourceTable=Table823;
                                                  Temporary=Yes;
                                                  MinOccurs=Zero }

    { [{5C25F8A4-F333-43F8-9C30-0E3968C6B3B7}];4 ;json_Array          ;Attribute;Text   ;
                                                  VariableName=json_Array2;
                                                  Occurrence=Optional }

    { [{FDB96648-BBF1-4247-A4B1-A1F9B04F6FB3}];4 ;id                  ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=AnswerOption::Value }

    { [{140DF116-F2FD-4A2C-9410-074D686C18BB}];4 ;value               ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=AnswerOption::Name }

    { [{C576C31E-4F07-4EA8-B0F8-271B83CA077A}];4 ;selected            ;Element ;Text    ;
                                                  VariableName=AnswerOption_Selected;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 //IF (AnswerOption.ID = QuestionnaireLine."Integer Input") THEN
                                                                                 //  AnswerOption_Selected := 'true'
                                                                                 //ELSE
                                                                                 //  AnswerOption_Selected := 'false';
                                                                                 AnswerOption_Selected := BoolToText(AnswerOption.Value = QuestLine_InputOption);
                                                                               END;
                                                                                }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      currPageNo@1000000000 : Integer;
      questGuid@1000000001 : GUID;
      txtDefaultQuestionnaireDescription@1000000002 : TextConst 'ENU=Questionnaire;ENG=Questionnaire';
      questLineNo@1000000009 : Integer;
      QuestionIndex@1000000008 : Integer;
      WasError@1000000003 : Boolean;
      ErrorLineNo@1000000004 : Integer;
      ErrorText@1000000005 : Text;
      txtBooleanOptions@1000000007 : TextConst 'ENU=No,Yes;ENG=No,Yes';
      txtPleaseSelectValue@1000000006 : TextConst 'ENU=Please select...;ENG=Please select...';
      QuestionnaireFound@1000000010 : Boolean;
      PreviewMode@1000000011 : Boolean;
      FocusedId@1000000012 : Text;

    PROCEDURE InitData@1000000003();
    BEGIN
      currPageNo := 1;
      CLEAR(questGuid);
      ClearError();
    END;

    PROCEDURE FilterData@1000000001();
    VAR
      QuestInstanceDb@1000000000 : Record 9062704;
      QuestInstanceLineDb@1000000002 : Record 9062705;
      VisiblePageIndex@1000000003 : Integer;
      VisiblePageCount@1000000004 : Integer;
      LastPageNo@1000000005 : Integer;
    BEGIN
      //process request
      IF (GetRequestFromImpData(QuestInstanceDb)) THEN
        ProcessAndCollectData(QuestInstanceDb);
    END;

    PROCEDURE RunFromNav@1000000010(NewQuestId@1000000000 : Integer;NewPageNo@1000000001 : Integer;NewPreviewMode@1000000003 : Boolean;NewFocusedId@1000000004 : Text);
    VAR
      QuestInstanceDb@1000000002 : Record 9062704;
    BEGIN
      PreviewMode := NewPreviewMode;
      FocusedId := NewFocusedId;

      IF (SetNavRequest(QuestInstanceDb, NewQuestId, NewPageNo)) THEN
        ProcessAndCollectData(QuestInstanceDb);
    END;

    LOCAL PROCEDURE CollectOptionStringValues@1000000000(OptionString@1000000000 : Text);
    VAR
      i@1000000002 : Integer;
      NoOfOptions@1000000001 : Integer;
      InsertEmptyOption@1000000003 : Boolean;
    BEGIN
      AnswerOption.RESET();
      AnswerOption.DELETEALL();
      InsertEmptyOption := TRUE;

      IF (OptionString <> '') THEN BEGIN
        NoOfOptions := 1;
        FOR i:=1 TO STRLEN(OptionString) DO
          IF (OptionString[i] = ',') THEN
            NoOfOptions += 1;

        FOR i:=1 TO NoOfOptions DO BEGIN
          AnswerOption.INIT();
          AnswerOption.ID := (i - 1);
          AnswerOption.Value := FORMAT(AnswerOption.ID, 0, 9);
          AnswerOption.Name := SELECTSTR(i, OptionString);
          //IF (AnswerOption.Value = '') THEN
          //  AnswerOption.Value := ' ';
          AnswerOption.INSERT();

          //IF (AnswerOption.Value = ' ') THEN
          //  InsertEmptyOption := FALSE;
        END;
      END;

      IF (InsertEmptyOption) THEN BEGIN
        AnswerOption.INIT();
        AnswerOption.ID := -1;
        AnswerOption.Value := '-1';
        AnswerOption.Name := txtPleaseSelectValue;
        AnswerOption.INSERT();
      END;
    END;

    LOCAL PROCEDURE CollectTableValues@1000000002(TableNo@1000000000 : Integer;ValueFieldNo@1000000004 : Integer;CaptionFieldNo@1000000005 : Integer;CriteriaId@1000000009 : Integer);
    VAR
      Criteria@1000000010 : Record 9062626;
      CriteriaMgt@1000000011 : Codeunit 9062462;
      RecRef@1000000002 : RecordRef;
      ValueFldRef@1000000007 : FieldRef;
      CaptionFldRef@1000000008 : FieldRef;
      NoOfOptions@1000000001 : Integer;
      InsertEmptyOption@1000000003 : Boolean;
      EntryNo@1000000006 : Integer;
    BEGIN
      AnswerOption.RESET();
      AnswerOption.DELETEALL();
      InsertEmptyOption := TRUE;

      EntryNo := -1;
      RecRef.OPEN(TableNo);
      IF (CriteriaId <> 0) THEN BEGIN
        Criteria.GET(CriteriaId);
        CriteriaMgt.ApplyCriteriaToRecRef(CriteriaId, RecRef);
      END;

      IF (RecRef.FINDSET()) THEN BEGIN
        REPEAT
          ValueFldRef := RecRef.FIELD(ValueFieldNo);
          CaptionFldRef := RecRef.FIELD(CaptionFieldNo);
          EntryNo += 1;

          AnswerOption.INIT();
          AnswerOption.ID := EntryNo;
          AnswerOption.Name := FORMAT(CaptionFldRef.VALUE);
          AnswerOption.Value := FORMAT(ValueFldRef.VALUE);
          AnswerOption.INSERT();
        UNTIL (RecRef.NEXT() = 0);
      END;

      IF (InsertEmptyOption) THEN BEGIN
        AnswerOption.INIT();
        AnswerOption.ID := -1;
        AnswerOption.Name := '';
        AnswerOption.Value := '';
        AnswerOption.INSERT();
      END;
    END;

    LOCAL PROCEDURE BoolToNumber@1000000004(Value@1000000000 : Boolean) : Text;
    BEGIN
      IF (Value) THEN
        EXIT('1');
      EXIT('0');
    END;

    LOCAL PROCEDURE BoolToText@1000000011(Value@1000000000 : Boolean) : Text;
    BEGIN
      IF (Value) THEN
        EXIT('true');
      EXIT('false');
    END;

    PROCEDURE GetCurrentPageNo@1000000021() : Integer;
    BEGIN
      EXIT(currPageNo);
    END;

    PROCEDURE GetFocusedElement@1000000005() : Text;
    BEGIN
      EXIT(FocusedId);
    END;

    PROCEDURE SetError@1000000024(NewError@1000000000 : Boolean;NewErrorText@1000000001 : Text;NewErrorLineNo@1000000002 : Integer);
    BEGIN
      WasError := NewError;
      ErrorLineNo := NewErrorLineNo;
      ErrorText := NewErrorText;
    END;

    LOCAL PROCEDURE ClearError@1000000015();
    BEGIN
      SetError(FALSE, '', 0);
    END;

    LOCAL PROCEDURE "--- Request Processing ---"@1000000007();
    BEGIN
    END;

    LOCAL PROCEDURE GetRequestFromImpData@1000000008(VAR QuestionnaireDb@1000000000 : Record 9062704) : Boolean;
    BEGIN
      currPageNo := 1;
      IF (f_currentPageNo <> '') THEN
        IF (EVALUATE(currPageNo, f_currentPageNo)) THEN ;

      CLEAR(questGuid);
      IF (f_questGuid <> '') THEN
        IF (EVALUATE(questGuid, f_questGuid)) THEN ;

      questLineNo := 0;
      IF (f_lineNo <> '') THEN
        IF (EVALUATE(questLineNo, f_lineNo)) THEN ;

      QuestionnaireDb.RESET();
      QuestionnaireDb.SETCURRENTKEY("Questionnaire GUID");
      QuestionnaireDb.SETRANGE("Questionnaire GUID", questGuid);
      QuestionnaireFound := QuestionnaireDb.FINDFIRST();
      EXIT(QuestionnaireFound);
    END;

    LOCAL PROCEDURE SetNavRequest@1000000013(VAR QuestionnaireDb@1000000003 : Record 9062704;NewQuestId@1000000000 : Integer;NewPageNo@1000000001 : Integer) : Boolean;
    BEGIN
      CLEAR(questGuid);
      currPageNo := NewPageNo;
      f_actionName := '';
      QuestionnaireFound := QuestionnaireDb.GET(NewQuestId);
      IF (QuestionnaireFound) THEN
        questGuid := QuestionnaireDb."Questionnaire GUID";
      EXIT(QuestionnaireFound);
    END;

    LOCAL PROCEDURE ProcessAndCollectData@1000000012(VAR QuestInstanceDb@1000000000 : Record 9062704);
    BEGIN
      QuestInstanceDb.CALCFIELDS("First Active Page No.", "Last Active Page No.");
      ProcessRequest(QuestInstanceDb, f_actionName);
      CollectData(QuestInstanceDb);
    END;

    LOCAL PROCEDURE ProcessRequest@1000000009(VAR QuestInstanceDb@1000000000 : Record 9062704;ActionName@1000000002 : Text);
    VAR
      QuestInstanceLineDb@1000000001 : Record 9062705;
    BEGIN
      //run command
      CASE (ActionName) OF
        'nextPage':
          currPageNo := QuestInstanceDb.GetNextActivePageNo(currPageNo);
        'prevPage':
          currPageNo := QuestInstanceDb.GetPrevActivePageNo(currPageNo);
        'finishQuest':
          BEGIN
            QuestInstanceDb.VALIDATE(Finished, TRUE);
            QuestInstanceDb.MODIFY(TRUE);
          END;
        'answer':
          IF (questLineNo > 0) THEN BEGIN
            IF (QuestInstanceLineDb.GET(QuestInstanceDb."Questionnaire No.", questLineNo)) THEN BEGIN
              QuestInstanceLineDb.SetSkipErrors(TRUE);
              QuestInstanceLineDb.SetDateFormat('dd-MM-yyyy');
              QuestInstanceLineDb.VALIDATE("Text Input", f_inputText);
              IF (QuestInstanceLineDb.GetError()) THEN
                SetError(TRUE, QuestInstanceLineDb.GetErrorText(), QuestInstanceLineDb."Line No.")
              ELSE BEGIN
                QuestInstanceLineDb.MODIFY(TRUE);
                QuestInstanceDb.FIND('=');
                QuestInstanceDb.CALCFIELDS("First Active Page No.", "Last Active Page No.");
              END;
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE CollectData@1000000014(VAR QuestInstanceDb@1000000000 : Record 9062704);
    VAR
      QuestInstanceLineDb@1000000001 : Record 9062705;
      VisiblePageIndex@1000000002 : Integer;
      VisiblePageCount@1000000003 : Integer;
      LastPageNo@1000000004 : Integer;
    BEGIN
      QuestInstanceLineDb.RESET();
      QuestInstanceLineDb.SETCURRENTKEY("Questionnaire No.", "Page No.");
      QuestInstanceLineDb.SETRANGE("Questionnaire No.", QuestInstanceDb."Questionnaire No.");
      QuestInstanceLineDb.SETRANGE("Line Type", QuestInstanceLineDb."Line Type"::Question);
      QuestInstanceLineDb.SETRANGE(Skip, FALSE);
      QuestInstanceLineDb.SETFILTER("Page No.", '<=%1', currPageNo);
      IF (QuestInstanceLineDb.FINDLAST()) THEN
        currPageNo := QuestInstanceLineDb."Page No.";

      IF (currPageNo > QuestInstanceDb."Last Active Page No.") THEN
        currPageNo := QuestInstanceDb."Last Active Page No.";
      IF (currPageNo < QuestInstanceDb."First Active Page No.") THEN
        currPageNo := QuestInstanceDb."First Active Page No.";

      Quest_CanGoPrev := BoolToNumber(currPageNo > QuestInstanceDb."First Active Page No.");
      Quest_CanGoNext := BoolToNumber(currPageNo < QuestInstanceDb."Last Active Page No.");
      Quest_CanFinish := BoolToNumber(currPageNo = QuestInstanceDb."Last Active Page No.");
      Quest_Editable := BoolToNumber(NOT(QuestInstanceDb.Finished));
      Quest_PreviewMode := BoolToText(PreviewMode);
      Quest_FocusedId := FocusedId;

      //count visible pages
      IF (IsSinglePageMode()) THEN BEGIN
        VisiblePageIndex := 1;
        VisiblePageCount := 1;
        currPageNo := 1;
      END ELSE BEGIN
        VisiblePageIndex := 0;
        VisiblePageCount := 0;
        QuestInstanceLineDb.RESET();
        QuestInstanceLineDb.SETCURRENTKEY("Questionnaire No.", "Page No.");
        QuestInstanceLineDb.SETRANGE("Questionnaire No.", QuestInstanceDb."Questionnaire No.");
        QuestInstanceLineDb.SETRANGE("Line Type", QuestInstanceLineDb."Line Type"::Question);
        QuestInstanceLineDb.SETRANGE(Skip, FALSE);
        IF (QuestInstanceLineDb.FINDSET()) THEN BEGIN
          LastPageNo := QuestInstanceLineDb."Page No.";
          VisiblePageCount := 1;
          REPEAT
            IF (QuestInstanceLineDb."Page No." > LastPageNo) THEN
              VisiblePageCount += 1;
            IF (currPageNo = QuestInstanceLineDb."Page No.") THEN
              VisiblePageIndex := VisiblePageCount;
            LastPageNo := QuestInstanceLineDb."Page No.";
          UNTIL (QuestInstanceLineDb.NEXT() = 0);
        END;
      END;
      Quest_VisiblePageCount := FORMAT(VisiblePageCount, 9);
      Quest_VisiblePageIndex := FORMAT(VisiblePageIndex, 9);

      QuestInstance.TRANSFERFIELDS(QuestInstanceDb);
      IF (QuestInstance.Description = '') THEN
        QuestInstance.Description := txtDefaultQuestionnaireDescription;
      QuestInstance.INSERT();
    END;

    LOCAL PROCEDURE AnswerQuestion@1000000018(LineNo@1000000000 : Integer;Answer@1000000001 : Integer);
    BEGIN
    END;

    LOCAL PROCEDURE "--- Settings ---"@1000000016();
    BEGIN
    END;

    LOCAL PROCEDURE IsSinglePageMode@1000000017() : Boolean;
    BEGIN
      EXIT(PreviewMode);
    END;

    BEGIN
    {
      //DOC NA2015.7  AZ 05/06/2015 - Created
      //DOC NA2015.9  AZ 18/08/2015 - Question groups and loops
      //DOC NA2015.9  AZ 03/09/2015 - question index fields
      //DOC NA2016.12 JH 27/12/2015 - Criteria references changed
      //DOC NA2016.14 AZ 08/03/2016 - Nav Web Control support added
      //DOC NA2016.15 JH 10/05/2016 - CfMD amendments
    }
    END.
  }
}

