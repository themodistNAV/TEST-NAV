OBJECT Codeunit 50027 GAC Web Service Mgmt.
{
  OBJECT-PROPERTIES
  {
    Date=10/10/18;
    Time=[ 8:02:23 AM];
    Modified=Yes;
    Version List=TM0001;
  }
  PROPERTIES
  {
    OnRun=VAR
            lTmpItemLedgerEntry@1000000000 : TEMPORARY Record 32;
            lTransferHeader@1000000001 : Record 5740;
          BEGIN
            lTmpItemLedgerEntry.RESET;
            lTmpItemLedgerEntry.DELETEALL;
            //GetGACItemInventory('000051607','OS','FREESTOCK');
            lTransferHeader.GET('TRO000042');
            GetGACInventoryForTransfer(lTransferHeader,lTmpItemLedgerEntry);
          END;

  }
  CODE
  {
    VAR
      ModistSetup@1000000020 : Record 50000;
      TempBlob@1000000006 : TEMPORARY Record 99008535;
      TmpGACItemLedgerEntry@1000000022 : TEMPORARY Record 32;
      XMLWriter@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlWriter";
      XMLWriterSettings@1000000014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlWriterSettings";
      Encoding@1000000015 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      XmlDoc@1000000005 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      HttpStatusCode@1000000003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeaders@1000000002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      JsonConvert@1000000010 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      JsonFormatting@1000000009 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Formatting";
      Reader@1000000017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlTextReader";
      XMLReader@1000000019 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlReader";
      HttpWebRequestMgt@1000000004 : Codeunit 1297;
      FileManagement@1000000025 : Codeunit 419;
      ReqBodyOutStream@1000000007 : OutStream;
      RespBodyOutStream@1000000018 : OutStream;
      RespBodyInStream@1000000011 : InStream;
      Json@1000000008 : Text;
      pBaseURL@1000000001 : Text;
      ReaderName@1000000016 : Text;
      ReaderValue@1000000013 : Text;
      NodeTypeTxt@1000000012 : Text;
      ModistSetupOK@1000000021 : Boolean;
      Text000@1000000023 : TextConst 'ENU=You have insufficient quantity of Item %1-%2 Location %3';
      Text001@1000000024 : TextConst 'ENU=Connection with GAC Server is down. Please contact System Administrator.';

    PROCEDURE GetGACInventoryForTransfer@1000000005(pTransferHeader@1000000000 : Record 5740;VAR pTmpGACItemLedgerEntry@1000000004 : TEMPORARY Record 32);
    VAR
      lTransferLine@1000000001 : Record 5741;
      lSKU@1000000003 : Code[40];
      lEntryNo@1000000002 : Integer;
    BEGIN
      WITH pTransferHeader DO BEGIN
        EXIT; //Disable
        GetModistSetup;
        ModistSetup.TESTFIELD("GAC Bulk Stock Status Code");
        pTmpGACItemLedgerEntry.RESET;
        pTmpGACItemLedgerEntry.DELETEALL;

        InitializeWebRequest;

        XMLWriter.WriteStartElement('soap','Envelope','http://www.w3.org/2003/05/soap-envelope');
        XMLWriter.WriteAttributeString('xmlns','tem','','http://tempuri.org/');
        XMLWriter.WriteAttributeString('xmlns','soap','','http://www.w3.org/2003/05/soap-envelope');
          XMLWriter.WriteStartElement('soap','Header','http://www.w3.org/2003/05/soap-envelope');
            XMLWriter.WriteStartElement('AuthSoapHeader','http://tempuri.org/');
              XMLWriter.WriteElementString('strUserName','http://tempuri.org/',ModistSetup."GAC WS Username");
              XMLWriter.WriteElementString('strPassword','http://tempuri.org/',ModistSetup."GAC WS Password");
            XMLWriter.WriteEndElement; //AuthSoapHeader
          XMLWriter.WriteEndElement; //Header
          XMLWriter.WriteStartElement('soap','Body','http://www.w3.org/2003/05/soap-envelope');
            XMLWriter.WriteStartElement('GetMultipleStockStatus','http://tempuri.org/');
              XMLWriter.WriteStartElement('skuList_','http://tempuri.org/');
                lTransferLine.RESET;
                lTransferLine.SETRANGE("Document No.","No.");
                lTransferLine.SETRANGE("Derived From Line No.",0);
                lTransferLine.SETFILTER("Item No.",'<>%1','');
                IF lTransferLine.FINDSET THEN BEGIN
                  REPEAT
                    IF lTransferLine."Variant Code" <> '' THEN
                      lSKU := lTransferLine."Item No." + '-' + lTransferLine."Variant Code"
                    ELSE
                      lSKU := lTransferLine."Item No.";
                    XMLWriter.WriteElementString('string','http://tempuri.org/',lSKU);
                  UNTIL lTransferLine.NEXT=0;
                END;
              XMLWriter.WriteEndElement; //skuList_
            XMLWriter.WriteEndElement; //GetMultipleStockStatus
          XMLWriter.WriteEndElement; //Body
        XMLWriter.WriteEndElement; //Envelope


        FinalizeWebRequest(ModistSetup."GAC Bulk Stock Status Code");
        SendHTTPRequest(ModistSetup."GAC Bulk Stock Status Code");
        GetHTTPResponse;
        FinalizeWebResponse(ModistSetup."GAC Bulk Stock Status Code");

        lEntryNo := 1;

        WHILE Reader.Read DO BEGIN
          NodeTypeTxt := FORMAT(Reader.NodeType);
          CASE NodeTypeTxt OF
            'Element':
              BEGIN
                ReaderName := Reader.Name;
                CASE ReaderName OF
                  'Table':
                    BEGIN
                      pTmpGACItemLedgerEntry.INIT;
                      pTmpGACItemLedgerEntry."Entry No." := lEntryNo;
                    END;
                END;
              END;
            'Text':
              BEGIN
                ReaderValue := Reader.Value;
                CASE ReaderName OF
                  'PROD_CODE':
                    BEGIN
                      GetItemFromSKU(ReaderValue,pTmpGACItemLedgerEntry."Item No.",pTmpGACItemLedgerEntry."Variant Code");
                    END;
                  'LOCATION':
                    BEGIN
                      pTmpGACItemLedgerEntry."Location Code" := ReaderValue;
                    END;
                  'SOH':
                    BEGIN
                      EVALUATE(pTmpGACItemLedgerEntry.Quantity,ReaderValue);
                    END;
                END;
              END;
            'EndElement':
              BEGIN
                ReaderName := Reader.Name;
                CASE ReaderName OF
                  'Table':
                    BEGIN
                      pTmpGACItemLedgerEntry.INSERT;
                      lEntryNo += 1;
                    END;
                END;
              END;
          END;
        END;

      END;
    END;

    PROCEDURE GetGACItemInventory@1000000001(pItemNo@1000000000 : Code[20];pVariantCode@1000000001 : Code[20];pLocationCode@1000000004 : Code[20]) : Decimal;
    VAR
      lSKU@1000000002 : Code[40];
      lEntryNo@1000000003 : Integer;
    BEGIN
      GetModistSetup;
      ModistSetup.TESTFIELD("GAC Single Stock Status Code");
      InitializeWebRequest;

      IF pVariantCode <> '' THEN
        lSKU := pItemNo + '-' + pVariantCode
      ELSE
        lSKU := pItemNo;

      XMLWriter.WriteStartElement('soap','Envelope','http://www.w3.org/2003/05/soap-envelope');
      XMLWriter.WriteAttributeString('xmlns','tem','','http://tempuri.org/');
      XMLWriter.WriteAttributeString('xmlns','soap','','http://www.w3.org/2003/05/soap-envelope');
        XMLWriter.WriteStartElement('soap','Header','http://www.w3.org/2003/05/soap-envelope');
          XMLWriter.WriteStartElement('AuthSoapHeader','http://tempuri.org/');
            XMLWriter.WriteElementString('strUserName','http://tempuri.org/',ModistSetup."GAC WS Username");
            XMLWriter.WriteElementString('strPassword','http://tempuri.org/',ModistSetup."GAC WS Password");
          XMLWriter.WriteEndElement; //AuthSoapHeader
        XMLWriter.WriteEndElement; //Header
        XMLWriter.WriteStartElement('soap','Body','http://www.w3.org/2003/05/soap-envelope');
          XMLWriter.WriteStartElement('GetStockStatus','http://tempuri.org/');
            XMLWriter.WriteElementString('sku_','http://tempuri.org/',lSKU);
          XMLWriter.WriteEndElement; //GetStockStatus
        XMLWriter.WriteEndElement; //Body
      XMLWriter.WriteEndElement; //Envelope

      FinalizeWebRequest(ModistSetup."GAC Single Stock Status Code");
      SendHTTPRequest(ModistSetup."GAC Single Stock Status Code");
      GetHTTPResponse;
      FinalizeWebResponse(ModistSetup."GAC Single Stock Status Code");

      TmpGACItemLedgerEntry.RESET;
      TmpGACItemLedgerEntry.DELETEALL;
      lEntryNo := 1;

      WHILE Reader.Read DO BEGIN
        NodeTypeTxt := FORMAT(Reader.NodeType);
        CASE NodeTypeTxt OF
          'Element':
            BEGIN
              ReaderName := Reader.Name;
              CASE ReaderName OF
                'Table':
                  BEGIN
                    TmpGACItemLedgerEntry.INIT;
                    TmpGACItemLedgerEntry."Entry No." := lEntryNo;
                  END;
              END;
            END;
          'Text':
            BEGIN
              ReaderValue := Reader.Value;
              CASE ReaderName OF
                'PROD_CODE':
                  BEGIN
                    GetItemFromSKU(ReaderValue,TmpGACItemLedgerEntry."Item No.",TmpGACItemLedgerEntry."Variant Code");
                  END;
                'LOCATION':
                  BEGIN
                    TmpGACItemLedgerEntry."Location Code" := ReaderValue;
                  END;
                'SOH':
                  BEGIN
                    EVALUATE(TmpGACItemLedgerEntry.Quantity,ReaderValue);
                  END;
              END;
            END;
          'EndElement':
            BEGIN
              ReaderName := Reader.Name;
              CASE ReaderName OF
                'Table':
                  BEGIN
                    TmpGACItemLedgerEntry.INSERT;
                    lEntryNo += 1;
                  END;
              END;
            END;
        END;
      END;

      TmpGACItemLedgerEntry.RESET;
      IF pLocationCode <> '' THEN
        TmpGACItemLedgerEntry.SETRANGE("Location Code",pLocationCode);
      IF TmpGACItemLedgerEntry.FINDFIRST THEN
        EXIT(TmpGACItemLedgerEntry.Quantity);
      EXIT(0);
    END;

    LOCAL PROCEDURE InitializeWebRequest@1000000002();
    BEGIN
      CLEAR(XMLWriter);
      CLEAR(XMLWriterSettings);
      CLEAR(ReqBodyOutStream);
      CLEAR(RespBodyInStream);
      CLEAR(RespBodyOutStream);

      TempBlob.RESET;
      TempBlob.DELETEALL;
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(ReqBodyOutStream);
      TempBlob.Blob.CREATEINSTREAM(RespBodyInStream);

      XMLWriterSettings := XMLWriterSettings.XmlWriterSettings;
      XMLWriterSettings.Encoding := Encoding.UTF8;
      XMLWriterSettings.Indent := TRUE;

      XMLWriter := XMLWriter.Create(ReqBodyOutStream,XMLWriterSettings);
    END;

    LOCAL PROCEDURE FinalizeWebRequest@1000000009(pAction@1000000000 : Text);
    BEGIN
      XMLWriter.Close;
      XMLWriter.Dispose;
      XmlDoc := XmlDoc.XmlDocument;
      XmlDoc.Load(ReqBodyOutStream);
      IF ModistSetup."GAC WS Log" THEN
        IF ModistSetup."GAC WS Log Directory" <> '' THEN
          XmlDoc.Save(ModistSetup."GAC WS Log Directory" + '\' + FileManagement.StripNotsupportChrInFileName(pAction + '_' + FORMAT(CURRENTDATETIME,0,9) + '_Request.xml'));
    END;

    LOCAL PROCEDURE SendHTTPRequest@1000000007(pAction@1000000000 : Text);
    BEGIN
      CLEAR(HttpWebRequestMgt);
      HttpWebRequestMgt.Initialize(ModistSetup."GAC WS Base URL");
      HttpWebRequestMgt.DisableUI;
      HttpWebRequestMgt.SetMethod('POST');
      HttpWebRequestMgt.SetContentType('application/soap+xml;charset=UTF-8;action=' + pAction);
      HttpWebRequestMgt.AddBodyBlob(TempBlob);
    END;

    LOCAL PROCEDURE GetHTTPResponse@1000000014();
    BEGIN
      HttpWebRequestMgt.GetResponse(RespBodyInStream,HttpStatusCode,ResponseHeaders);
    END;

    LOCAL PROCEDURE FinalizeWebResponse@1000000017(pAction@1000000000 : Text);
    BEGIN
      XmlDoc.Load(RespBodyInStream);
      IF ModistSetup."GAC WS Log" THEN
        IF ModistSetup."GAC WS Log Directory" <> '' THEN
          XmlDoc.Save(ModistSetup."GAC WS Log Directory" + '\' + FileManagement.StripNotsupportChrInFileName(pAction + '_' + FORMAT(CURRENTDATETIME,0,9) + '_Response.xml'));

      Reader := Reader.Create(RespBodyInStream);
    END;

    LOCAL PROCEDURE GetModistSetup@1000000003();
    BEGIN
      IF NOT ModistSetupOK THEN BEGIN
        ModistSetup.GET;
        ValidateModistSetup;
        ModistSetupOK := TRUE;
      END;
    END;

    LOCAL PROCEDURE ValidateModistSetup@1000000000();
    BEGIN
      ModistSetup.TESTFIELD("GAC WS Base URL");
      ModistSetup.TESTFIELD("GAC WS Username");
      ModistSetup.TESTFIELD("GAC WS Password");
    END;

    PROCEDURE GetItemFromSKU@1000000004(pSKU@1000000004 : Code[50];VAR pItemNo@1000000005 : Code[20];VAR pVariantCode@1000000006 : Code[10]);
    VAR
      lChar@1000000003 : Code[1];
      lCharPosition@1000000002 : Integer;
    BEGIN
      IF pSKU = '' THEN
        EXIT;
      lChar := '-';
      lCharPosition := STRPOS(pSKU,lChar);
      IF lCharPosition <> 0 THEN BEGIN
        pItemNo := COPYSTR(pSKU,1,lCharPosition - 1);
        pVariantCode := COPYSTR(pSKU,lCharPosition + 1);
      END ELSE
        pItemNo := pSKU;
    END;

    EVENT XmlDoc@1000000005::NodeInserting@94(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XmlDoc@1000000005::NodeInserted@95(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XmlDoc@1000000005::NodeRemoving@96(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XmlDoc@1000000005::NodeRemoved@97(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XmlDoc@1000000005::NodeChanging@98(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XmlDoc@1000000005::NodeChanged@99(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

