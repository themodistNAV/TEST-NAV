OBJECT Codeunit 9062641 XML Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=13/04/16;
    Time=[ 5:08:53 PM];
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Convert@1000000000 : Codeunit 9062683;
      TnpToolkit@1000000001 : Codeunit 9062230;

    LOCAL PROCEDURE "--- Namespaces ---"@9062234();
    BEGIN
    END;

    PROCEDURE GetXmlDocumentNamespaces@9062230(pXmlDocument@9062237 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";pDefaultNamespaceName@9062236 : Text;VAR pXmlNamespaceManager@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager");
    VAR
      lXmlNamespaceScope@9062235 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceScope";
      lXPathNavigator@9062233 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XPath.XPathNavigator";
      lNamespacesEnumerator@9062232 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IDictionaryEnumerator";
      lNamespaceName@9062231 : Text;
      lNamespaceValue@9062230 : Text;
    BEGIN
      //DOC NA2016.11 - Retrieving XML document namespaces of and creating namespace manager for them
      //  -> pXmlDocument: XML document
      //  -> pDefaultNamespaceName: Default namespace name
      //  <> pXmlNamespaceManager: Target XML namespace manager

      IF (pDefaultNamespaceName = '') THEN
        pDefaultNamespaceName := 'default';

      lXPathNavigator := pXmlDocument.DocumentElement.CreateNavigator();
      pXmlNamespaceManager := pXmlNamespaceManager.XmlNamespaceManager(pXmlDocument.NameTable);
      lNamespacesEnumerator := lXPathNavigator.GetNamespacesInScope(lXmlNamespaceScope.All).GetEnumerator();
      WHILE (lNamespacesEnumerator.MoveNext()) DO
      BEGIN
        lNamespaceName := lNamespacesEnumerator.Key;
        IF (lNamespaceName = '') THEN
          lNamespaceName := pDefaultNamespaceName;
        lNamespaceValue := lNamespacesEnumerator.Value;
        pXmlNamespaceManager.AddNamespace(lNamespaceName, lNamespaceValue);
      END;
    END;

    LOCAL PROCEDURE "--- Getting Attributes ---"@9062235();
    BEGIN
    END;

    PROCEDURE XmlElementHasAttribute@9062231(pXmlElement@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062232 : Text) : Boolean;
    BEGIN
      //DOC NA2016.11 - Returning if XML element has attribute with given name
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  <- Answer

      EXIT(pXmlElement.HasAttribute(pAttributeName));
    END;

    PROCEDURE GetXmlNodeAttribute@9062233(pXmlElement@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062231 : Text) : Text;
    BEGIN
      //DOC NA2016.11 - Returning XML node attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  <- Attribute value

      EXIT(pXmlElement.GetAttribute(pAttributeName));
    END;

    PROCEDURE GetXmlNodeBooleanAttribute@9062239(pXmlElement@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text) : Boolean;
    BEGIN
      //DOC NA2016.14 - Returning xml element boolean attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  <- Attribute value

      EXIT(Convert.SafeParseBoolean(GetXmlNodeAttribute(pXmlElement, pAttributeName), FALSE));
    END;

    PROCEDURE GetXmlNodeIntegerAttribute@9062238(pXmlElement@9062231 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text) : Integer;
    BEGIN
      //DOC NA2016.14 - Returning xml element integer attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  <- Attribute value

      EXIT(Convert.SafeParseInteger(GetXmlNodeAttribute(pXmlElement, pAttributeName), 0));
    END;

    PROCEDURE GetXmlNodeDecimalAttribute@9062242(pXmlElement@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text) : Decimal;
    BEGIN
      //DOC NA2016.14 - Returning xml element integer attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  <- Attribute value

      EXIT(Convert.SafeParseDecimal(GetXmlNodeAttribute(pXmlElement, pAttributeName), 0));
    END;

    PROCEDURE GetXmlNodeDateAttribute@9062243(pXmlElement@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text) : Date;
    BEGIN
      //DOC NA2016.11 - Returning xml element integer attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  <- Attribute value

      EXIT(SafeParseXmlDate(GetXmlNodeAttribute(pXmlElement, pAttributeName), 0D));
    END;

    PROCEDURE GetXmlNodeTimeAttribute@9062246(pXmlElement@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text) : Time;
    BEGIN
      //DOC NA2016.11 - Returning xml element integer attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  <- Attribute value

      EXIT(SafeParseXmlTime(GetXmlNodeAttribute(pXmlElement, pAttributeName), 0T));
    END;

    PROCEDURE GetXmlNodeDateTimeAttribute@9062245(pXmlElement@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text) : DateTime;
    BEGIN
      //DOC NA2016.11 - Returning xml elemtnt datetime attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  <- Attribute value

      EXIT(SafeParseXmlDateTime(GetXmlNodeAttribute(pXmlElement, pAttributeName), 0DT));
    END;

    PROCEDURE GetXmlNodeGuidAttribute@9062244(pXmlElement@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text) : GUID;
    VAR
      lEmptyValue@9062232 : GUID;
    BEGIN
      //DOC NA2016.11 - Returning xml element GUID attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  <- Attribute value

      EXIT(Convert.SafeParseGuid(GetXmlNodeAttribute(pXmlElement, pAttributeName), lEmptyValue));
    END;

    LOCAL PROCEDURE "--- Setting Attributes ---"@9062236();
    BEGIN
    END;

    PROCEDURE SetXmlElementAttribute@9062232(pXmlElement@9062231 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text;pAttributeValue@9062232 : Text);
    VAR
      lXmlAttributes@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      lXmlAttribute@9062233 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      //DOC NA2016.11 - Setting XML element attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  -> pAttributeValue: Attribute value

      pXmlElement.SetAttribute(pAttributeName, '', pAttributeValue);
    END;

    PROCEDURE SetXmlElementBooleanAttribute@9062240(pXmlElement@9062231 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text;pAttributeValue@9062232 : Boolean);
    VAR
      lXmlAttributes@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      lXmlAttribute@9062233 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      //DOC NA2016.11 - Setting XML element boolean attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  -> pAttributeValue: Attribute value

      SetXmlElementAttribute(pXmlElement, pAttributeName, FORMAT(pAttributeValue, 0, 9));
    END;

    PROCEDURE SetXmlElementIntegerAttribute@9062253(pXmlElement@9062231 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text;pAttributeValue@9062232 : Integer);
    VAR
      lXmlAttributes@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      lXmlAttribute@9062233 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      //DOC NA2016.11 - Setting XML element boolean attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  -> pAttributeValue: Attribute value

      SetXmlElementAttribute(pXmlElement, pAttributeName, FORMAT(pAttributeValue, 0, 9));
    END;

    PROCEDURE SetXmlElementDecimalAttribute@9062252(pXmlElement@9062231 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text;pAttributeValue@9062232 : Decimal);
    VAR
      lXmlAttributes@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      lXmlAttribute@9062233 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      //DOC NA2016.11 - Setting XML element boolean attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  -> pAttributeValue: Attribute value

      SetXmlElementAttribute(pXmlElement, pAttributeName, FORMAT(pAttributeValue, 0, 9));
    END;

    PROCEDURE SetXmlElementDateAttribute@9062251(pXmlElement@9062231 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text;pAttributeValue@9062232 : Date);
    VAR
      lXmlAttributes@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      lXmlAttribute@9062233 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      //DOC NA2016.11 - Setting XML element boolean attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  -> pAttributeValue: Attribute value

      SetXmlElementAttribute(pXmlElement, pAttributeName, FORMAT(pAttributeValue, 0, 9));
    END;

    PROCEDURE SetXmlElementTimeAttribute@9062250(pXmlElement@9062231 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text;pAttributeValue@9062232 : Time);
    VAR
      lXmlAttributes@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      lXmlAttribute@9062233 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      //DOC NA2016.11 - Setting XML element boolean attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  -> pAttributeValue: Attribute value

      SetXmlElementAttribute(pXmlElement, pAttributeName, FORMAT(pAttributeValue, 0, 9));
    END;

    PROCEDURE SetXmlElementDateTimeAttribute@9062249(pXmlElement@9062231 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text;pAttributeValue@9062232 : DateTime);
    VAR
      lXmlAttributes@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      lXmlAttribute@9062233 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      //DOC NA2016.11 - Setting XML element boolean attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  -> pAttributeValue: Attribute value

      SetXmlElementAttribute(pXmlElement, pAttributeName, FORMAT(pAttributeValue, 0, 9));
    END;

    PROCEDURE SetXmlElementGuidAttribute@9062248(pXmlElement@9062231 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pAttributeName@9062230 : Text;pAttributeValue@9062232 : GUID);
    VAR
      lXmlAttributes@9062234 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      lXmlAttribute@9062233 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      //DOC NA2016.11 - Setting XML element boolean attribute
      //  -> pXmlElement: The element
      //  -> pAttributeName: Attribute name
      //  -> pAttributeValue: Attribute value

      SetXmlElementAttribute(pXmlElement, pAttributeName, FORMAT(pAttributeValue, 0, 9));
    END;

    LOCAL PROCEDURE "--- Getting Nodes ---"@1000000004();
    BEGIN
    END;

    PROCEDURE GetXmlNodeValue@1000000015(VAR ParentXmlNode@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";XPath@1000000001 : Text;VAR XmlNamespaceManager@1000000003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager") : Text;
    VAR
      XmlNode@1000000002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XmlNode := ParentXmlNode.SelectSingleNode(XPath, XmlNamespaceManager);
      IF (ISNULL(XmlNode)) THEN
        EXIT('');
      EXIT(XmlNode.InnerText);
    END;

    LOCAL PROCEDURE "--- Miscellaneous ---"@1000000000();
    BEGIN
    END;

    PROCEDURE ToElementName@1000000001(pName@1000000000 : Text) : Text;
    BEGIN
      //DOC NA2016.14 - Converting passed name to element name
      //  -> pName: Name to convert
      //  <- Converted name

      EXIT(ToXmlName(pName));
    END;

    PROCEDURE ToAttributeName@1000000002(pName@1000000000 : Text) : Text;
    BEGIN
      //DOC NA2016.14 - Converting passed name to attribute name
      //  -> pName: Name to convert
      //  <- Converted name

      EXIT(ToXmlName(pName));
    END;

    LOCAL PROCEDURE ToXmlName@1000000003(pName@1000000000 : Text) : Text;
    VAR
      lName@1000000003 : Text;
      lNameLength@1000000002 : Integer;
      lNameIndex@1000000001 : Integer;
      lNameCharacter@1000000004 : Text[1];
    BEGIN
      //DOC NA2016.14 - Converting passed name to XML name
      //  -> pName: Name to convert
      //  <- Converted name

      pName := DELCHR(pName, '<=>', ' ');
      lNameLength := STRLEN(pName);
      FOR lNameIndex := 1 TO lNameLength DO
      BEGIN
        lNameCharacter := COPYSTR(pName, lNameIndex, 1);
        IF (((lNameCharacter >= 'A') AND (lNameCharacter <= 'Z')) OR ((lNameCharacter >= 'a') AND (lNameCharacter <= 'z')) OR
            ((lNameCharacter >= '0') AND (lNameCharacter <= '9'))) THEN
          lName := lName + lNameCharacter;
      END;
      EXIT(lName);
    END;

    PROCEDURE "--- XML Data Conversion ---"@1000000062();
    BEGIN
    END;

    PROCEDURE FormatXmlBoolean@1000000059(pBoolean@1000000000 : Boolean) : Text;
    BEGIN
      //DOC NA2016.14 - Formatting boolean to XML
      //  -> pBooleanValue: Boolean value
      //  <- XML boolean text

      EXIT(TnpToolkit.IIFText(pBoolean, '1', '0'));
    END;

    PROCEDURE FormatXmlDate@1000000055(pDateValue@1000000000 : Date) : Text;
    BEGIN
      //DOC NA2016.14 - Formatting date to XML
      //  -> pDateValue: Date value
      //  <- XML date text

      EXIT(FORMAT(pDateValue, 0, 9));
    END;

    PROCEDURE FormatXmlDateTime@1000000074(pDateTimeValue@1000000000 : DateTime) : Text;
    BEGIN
      //DOC NA2016.14 - Formatting datetime to XML
      //  -> pDateTimeValue: Date value
      //  <- XML date text

      EXIT(FORMAT(pDateTimeValue, 0, 9));
    END;

    PROCEDURE ParseXmlBoolean@1000000063(pText@1000000000 : Text) : Boolean;
    BEGIN
      //DOC NA2016.14 - Parsing XML text to boolean
      //  -> pText: XML text
      //  <- Boolean

      EXIT(Convert.SafeParseBoolean(pText, FALSE));
    END;

    PROCEDURE SafeParseXmlBoolean@1000000014(pText@1000000000 : Text;pDefaultValue@1000000001 : Boolean) : Boolean;
    VAR
      lValue@1000000002 : Boolean;
    BEGIN
      //DOC NA2016.14 - Safe-parsing XML text to boolean
      //  -> pText: XML text
      //  -> pDefaultValue: Default value (used if parsing failed)
      //  <- Boolean

      IF ( NOT (TryToParseXmlBoolean(pText, lValue))) THEN
        lValue := pDefaultValue;
      EXIT(lValue);
    END;

    [TryFunction]
    PROCEDURE TryToParseXmlBoolean@1000000013(pText@1000000000 : Text;VAR pValue@1000000001 : Boolean);
    BEGIN
      //DOC NA2016.14 - Trying to parse XML text to boolean
      //  -> pText: XML text
      //  <> pValue: Target value

      pValue := ParseXmlBoolean(pText);
    END;

    PROCEDURE ParseXmlDate@1000000007(pText@1000000000 : Text) : Date;
    VAR
      lDateTime@1000000001 : DateTime;
    BEGIN
      //DOC NA2016.14 - Parsing XML text to date
      //  -> pText: XML text
      //  <- Date

      lDateTime := ParseXmlDateTime(pText);
      EXIT(TnpToolkit.IIFDate(lDateTime <> 0DT, DT2DATE(lDateTime), 0D));
    END;

    PROCEDURE SafeParseXmlDate@1000000012(pText@1000000000 : Text;pDefaultValue@1000000002 : Date) : Date;
    VAR
      lValue@1000000001 : Date;
    BEGIN
      //DOC NA2016.14 - Safe-parsing XML text to date
      //  -> pText: XML text
      //  -> pDefaultValue: Default value (used if parsing failed)
      //  <- Date

      IF ( NOT (TryToParseXmlDate(pText, lValue))) THEN
        lValue := pDefaultValue;
      EXIT(lValue);
    END;

    [TryFunction]
    PROCEDURE TryToParseXmlDate@1000000009(pText@1000000000 : Text;VAR pValue@1000000002 : Date);
    VAR
      lDateTime@1000000001 : DateTime;
    BEGIN
      //DOC NA2016.14 - Trying to parse XML text to date
      //  -> pText: XML text
      //  <> pValue: Target value

      pValue := ParseXmlDate(pText);
    END;

    PROCEDURE ParseXmlTime@1000000006(pText@1000000000 : Text) : Time;
    VAR
      lDateTimeValue@1000000001 : DateTime;
    BEGIN
      //DOC NA2016.14 - Parsing XML text to time
      //  -> pText: XML text
      //  <- Time

      lDateTimeValue := ParseXmlDateTime(pText);
      EXIT(TnpToolkit.IIFTime(lDateTimeValue <> 0DT, DT2TIME(lDateTimeValue), 0T));
    END;

    PROCEDURE SafeParseXmlTime@1000000008(pText@1000000000 : Text;pDefaultValue@1000000001 : Time) : Time;
    VAR
      lValue@1000000002 : Time;
    BEGIN
      //DOC NA2016.14 - Safe-parsing XML text to time
      //  -> pText: XML text
      //  -> pDefaultValue: Default value (used if parsing failed)
      //  <- Time

      IF ( NOT (TryToParseXmlTime(pText, lValue))) THEN
        lValue := pDefaultValue;
      EXIT(lValue);
    END;

    [TryFunction]
    PROCEDURE TryToParseXmlTime@1000000005(pText@1000000000 : Text;VAR pValue@1000000002 : Time);
    BEGIN
      //DOC NA2016.14 - Trying to parse XML text to time
      //  -> pText: XML text
      //  <> pValue: Target value

      pValue := ParseXmlTime(pText);
    END;

    PROCEDURE ParseXmlDateTime@1000000075(pText@1000000000 : Text) : DateTime;
    VAR
      lXmlBoolean@1000000001 : Code[30];
      lYear@1000000008 : Integer;
      lMonth@1000000010 : Integer;
      lDay@1000000011 : Integer;
      lHour@1000000012 : Integer;
      lMinute@1000000013 : Integer;
      lSecond@1000000014 : Integer;
      lDateTime@1000000015 : DateTime;
      lDate@1000000016 : Date;
      lTime@1000000017 : Time;
    BEGIN
      //DOC NA2016.14 - Parsing XML text to datetime
      //  -> pText: XML text
      //  <- Datetime

      IF (pText <> '') THEN
      BEGIN
        lYear := Convert.ParseInteger(COPYSTR(pText, 1, 4));
        lMonth := Convert.ParseInteger(COPYSTR(pText, 6, 2));
        lDay := Convert.ParseInteger(COPYSTR(pText, 9, 2));
        lHour := Convert.ParseInteger(COPYSTR(pText, 12, 2));
        lMinute := Convert.ParseInteger(COPYSTR(pText, 15, 2));
        lSecond := Convert.ParseInteger(COPYSTR(pText, 18, 2));
        lDate := DMY2DATE(lDay, lMonth, lYear);
        lTime := 000000T + ((lHour * 60 + lMinute) * 60 + lSecond) * 1000;
        lDateTime := CREATEDATETIME(lDate, lTime);
      END;

      EXIT(lDateTime);
    END;

    PROCEDURE SafeParseXmlDateTime@1000000011(pText@1000000000 : Text;pDefaultValue@1000000001 : DateTime) : DateTime;
    VAR
      lValue@1000000002 : DateTime;
    BEGIN
      //DOC NA2016.14 - Safe-parsing XML text to datetime
      //  -> pText: XML text
      //  -> pDefaultValue: Default value (used if parsing failed)
      //  <- Result value

      IF ( NOT (TryToParseXmlDateTime(pText, lValue))) THEN
        lValue := pDefaultValue;
      EXIT(lValue);
    END;

    [TryFunction]
    PROCEDURE TryToParseXmlDateTime@1000000010(pText@1000000000 : Text;VAR pValue@1000000001 : DateTime);
    BEGIN
      //DOC NA2016.14 - Trying to parse XML text to datetime
      //  -> pText: The text
      //  <> pValue: Target value

      pValue := ParseXmlDateTime(pText);
    END;

    BEGIN
    {
      //DOC NA2016.11 JH 30/10/2015 - Created
      //DOC NA2016.14 JH 22/02/2016 - New functions added
      //DOC NA2016.14 JH 16/03/2016 - Using "Convert" codeunit
      //DOC NA2016.15 AZ 18/03/2016 - Node functions added
    }
    END.
  }
}

