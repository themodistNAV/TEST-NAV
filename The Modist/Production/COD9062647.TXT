OBJECT Codeunit 9062647 POS UI Functions
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NH2016.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PosFuncsDL@1000000000 : Codeunit 9062643;
      POSSetup@1000000001 : Record 9062777;
      RunwithRecordRef@1000000002 : Codeunit 9062239;
      POSGlobals@1000000003 : Codeunit 9062662;

    PROCEDURE ProcessPOSCommandInput@9062240(VAR lPosHeader@9062231 : Record 9062778;VAR PosCommand@9062233 : TEMPORARY Record 9062780;VAR pVariant@9062230 : Variant);
    VAR
      POSCommandTbl@1000000000 : Record 9062780;
    BEGIN
      POSSetup.GET();

      POSCommandTbl.GET(PosCommand.Command);

      IF NOT POSCommandTbl."Ignore Login Check" THEN BEGIN
        IF NOT Login(lPosHeader,PosCommand,pVariant) THEN
          BEGIN
            ShowPosMessage(lPosHeader,PosCommand,pVariant);
            EXIT;
          END;
        END;

      IF (POSSetup."Debug Mode") AND (POSSetup."Debug Message") THEN
        MESSAGE(FORMAT(PosCommand));

      CASE PosCommand.Command  OF
       // 'CHECKLOGIN':
       //   Login(lPosHeader,PosCommand,pVariant);
        'RUNURL':
            RunUrl(lPosHeader,PosCommand,pVariant);
          'LUCENE':
          LuceneSearch(lPosHeader,PosCommand,pVariant);
      //  'RESET':
      //     ResetOrderMode(lPosHeader,PosCommand,pVariant);
      //  'LOGIN':
      //     Login(lPosHeader,PosCommand,pVariant);
      //  'STARTTRANS':
      //    StartTransaction(pVariant);
      // 'NEWORDER':
      //    CreateNewPOSTrans(pVariant);
        'VIEWORDER':
          ViewOrder(lPosHeader,PosCommand,pVariant);
      // 'CANCEL':
      //    CancelOrder(lPosHeader,PosCommand,pVariant);
      // 'ADDCUST':
      //   AddCustToTrans(lPosHeader,PosCommand,pVariant);
       'NEWCUSTOMER':
          NewCustomer(lPosHeader,PosCommand,pVariant);
      // 'ADDITEM':
      //    AddItemToTrans(lPosHeader,PosCommand,pVariant);
      // 'ADDPAYMENT':
      //    AddPaymentToTrans(lPosHeader,PosCommand,pVariant);
      //  'ADDCURRPAYMENT':
      //    AddCurrPaymentToTrans(lPosHeader,PosCommand,pVariant);
      // 'TOTDISC':
      //    AddTotDisc(lPosHeader,PosCommand,pVariant);
      // 'POST':
      //    PostPosTrans(lPosHeader,PosCommand,pVariant);
      // 'SUSPEND':
      //    SuspendOrder(lPosHeader,PosCommand,pVariant);

       'FINDSUSPENDED':
        FindSuspended(lPosHeader,PosCommand,pVariant);

      // 'SETACTIVE':
      //    RetrieveOrder(lPosHeader,PosCommand,pVariant);
      // 'POSTANDNEW':
      //    PostPosTransCreateNew(lPosHeader,PosCommand,pVariant);
      // 'CONFIRM':
      //    ConfirmOrder(lPosHeader,PosCommand,pVariant);
      // 'REOPEN':
      //    CheckIfOpen(lPosHeader,PosCommand,pVariant);

      // 'FINDITEM':
      //    FindItem(lPosHeader,PosCommand,pVariant);
       'BROWSE':
          ShowBrowser(lPosHeader,PosCommand,pVariant);
       'SHOWITEMLIST':
         ShowItemList(lPosHeader,PosCommand,pVariant);
      // 'FINDCUST':
      //     FindCust(lPosHeader,PosCommand,pVariant);
      // 'LINEDISCPCT':
      //   AddDiscPctToLine(lPosHeader,PosCommand,pVariant);
      //  'LINEDEL':
      //    DeleteLine(lPosHeader,PosCommand,pVariant);
      // 'LINEDISCVAL':
      //   AddDiscValToLine(lPosHeader,PosCommand,pVariant);
      // 'LINEPRICE':
      //   ChangePriceOnLine(lPosHeader,PosCommand,pVariant);
      // 'LINETOORDER':
      //    SetItemToOnOrder(lPosHeader,PosCommand,pVariant);
      // 'NUMPAD':
      //    ProcessNumPad(lPosHeader,PosCommand,pVariant);
      // 'CLEARINPUT':
      //    ClearInput(lPosHeader,PosCommand,pVariant);
      // 'BACKSPACE':
      //    BackSpace(lPosHeader,PosCommand,pVariant);
      // 'LINEQTYADD':
      //   QtyAdd(lPosHeader,PosCommand,pVariant);
      // 'LINEVOID':
      //    VoidLine(lPosHeader,PosCommand,pVariant);
      // 'LINEQTYMINUS':
      //    QtyMinus(lPosHeader,PosCommand,pVariant);
      // 'LINEQTY':
      //   ChangeQtyOnLine(lPosHeader,PosCommand,pVariant);
      // 'SETMODE':
      //    SetPosMode(lPosHeader,PosCommand,pVariant);
      // 'SETMODEEDIT':
      //    SetModeEdit(lPosHeader,PosCommand,pVariant);
      // 'SETCUSTMODE':
      //    SetCustMode(lPosHeader,PosCommand,pVariant);
      // 'SETITEMMODE':
      //    SetItemMode(lPosHeader,PosCommand,pVariant);
      // 'SETFINDMODE':
      //    SetFindMode(lPosHeader,PosCommand,pVariant);
      //  'SETDISCMODE':
      //    SetDiscMode(lPosHeader,PosCommand,pVariant);
      //  'SETPAYMODE':
      //    SetPayMode(lPosHeader,PosCommand,pVariant);
      // 'ENTER':
      //    ProcessEnter(lPosHeader,PosCommand,pVariant);
       'ORDERINCURR':
           ShowOrderValInCurr(lPosHeader,PosCommand,pVariant);
       'ITEMINCURR':
           ShowItemInCurr(lPosHeader,PosCommand,pVariant);
        ELSE
          //ProcessNonPosCommand(lPosHeader,PosCommand,pVariant);;
            PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
      END;


      ProcessPostPosCommand(lPosHeader,PosCommand,pVariant);

      //This shows the message if there is one when we come back from the
      ShowPosMessage(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE ProcessPostPosCommand@1000000015(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant) : Boolean;
    VAR
      SH@9062232 : Record 36;
    BEGIN

      {
      IF PosCommand."Run Codeunit ID" <> 0 THEN BEGIN
        IF NOT CODEUNIT.RUN(PosCommand."Run Codeunit ID") THEN
          EXIT(FALSE);
        END;
      }

      CASE lPosHeader."Order Mode" OF

       {
         'LINEDISCPCT':
          BEGIN
            AddDiscPctToLine(lPosHeader,PosCommand,pVariant);
            END;

        'LINEDISCVAL':
            BEGIN
            AddDiscValToLine(lPosHeader,PosCommand,pVariant);
            END;

        'LINEPRICE':
          BEGIN
          ChangePriceOnLine(lPosHeader,PosCommand,pVariant);
            END;

        'LINEQTY':
          BEGIN
            ChangeQtyOnLine(lPosHeader,PosCommand,pVariant);
          END;

        'CUSTOMERS':
          BEGIN
            AddCustToTrans(lPosHeader,PosCommand,pVariant);
            END;

        'ITEMS':
          BEGIN
            AddItemToTrans(lPosHeader,PosCommand,pVariant);
            END;
            }
        'FINDITEM':
            FindItem(lPosHeader,PosCommand,pVariant);
        'CUSTOMERS':
           FindCust(lPosHeader,PosCommand,pVariant);
          {
        'PAYMENTS':
          BEGIN
            AddPaymentToTrans(lPosHeader,PosCommand,pVariant);
            END;

        'SETEMAIL':
          BEGIN
             SetEmail(lPosHeader,PosCommand,pVariant);
            END;

        'TOTALDISC':
          BEGIN
            AddTotDisc(lPosHeader,PosCommand,pVariant);
            END;

         'PRICECHECK':
          BEGIN
            PriceCheck(lPosHeader,PosCommand,pVariant);
            END;
            }
        END;

      EXIT(FALSE);
    END;

    PROCEDURE CheckLoggedIn@1000000010() IsLoggedIn : Boolean;
    VAR
      POSUserLogon@1000000000 : Page 9063186;
      Act@1000000001 : Action;
      UserName@1000000003 : Text;
      PassCode@1000000002 : Text;
    BEGIN

      POSSetup.GET();

      IF POSSetup."User Must Login" = FALSE THEN
        EXIT(TRUE);

      IF POSGlobals.GetPOSUser <> '' THEN EXIT(TRUE);

      IF POSGlobals.GetPOSUser = '' THEN BEGIN
        //Use not logged in
        COMMIT;
        Act := POSUserLogon.RUNMODAL;

       POSUserLogon.GetUserDetails(UserName,PassCode);

      IF (UserName ='' ) THEN EXIT(FALSE);

       IF POSGlobals.LogonPosUser(UserName,PassCode) THEN
          EXIT(TRUE);

        IF POSGlobals.GetPOSUser='' THEN
          EXIT(FALSE);

      END;

      EXIT(TRUE);
    END;

    PROCEDURE Login@1000000012(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant) : Boolean;
    VAR
      POSUserLogon@1000000006 : Page 9063186;
      Act@1000000005 : Action;
      UserName@1000000004 : Text;
      PassCode@1000000003 : Text;
      eNotLoggedIn@1000000007 : TextConst 'ENU=Sorry you are not logged in.\\Please try again.;ENG=Sorry you are not logged in.\\Please try again.';
    BEGIN
      POSSetup.GET();

      IF POSSetup."User Must Login" = FALSE THEN
        EXIT(TRUE);

      IF POSGlobals.GetPOSUser <> '' THEN EXIT(TRUE);

      IF POSGlobals.GetPOSUser = '' THEN BEGIN
        //Use not logged in
        COMMIT;
        Act := POSUserLogon.RUNMODAL;

        POSUserLogon.GetUserDetails(UserName,PassCode);

      IF (UserName ='' ) THEN EXIT(FALSE);

        IF POSGlobals.LogonPosUser(UserName,PassCode) THEN  BEGIN
          //Removed as it causes modal runtiem message timing issues
          //lPosHeader."POS Message":='Logged in';
          //lPosHeader."POS Message Type":=lPosHeader."POS Message Type"::Information;
          //lPosHeader.MODIFY;
          EXIT(TRUE);
        END;

        IF POSGlobals.GetPOSUser='' THEN BEGIN
          lPosHeader."POS Message":=eNotLoggedIn;
          lPosHeader."POS Message Type":=lPosHeader."POS Message Type"::Error;
          lPosHeader.MODIFY;
          EXIT(FALSE);
          END;

      END;

      EXIT(TRUE);
    END;

    PROCEDURE ShowPosMessage@1000000008(VAR lPosHeader@1000000003 : Record 9062778;VAR PosCommand@1000000002 : TEMPORARY Record 9062780;VAR pVariant@1000000001 : Variant) : Boolean;
    VAR
      PosHeader@9062231 : Record 9062778;
      SH@9062232 : Record 36;
      PosUser@9062233 : Record 9062783;
      Store@9062234 : Record 9062786;
      DimMgt@9062235 : Codeunit 408;
      TmpDimSet@9062236 : TEMPORARY Record 480;
      DimSetID@9062237 : Integer;
      PosSetup@1000000000 : Record 9062777;
      MessageTxt@1000000004 : Text;
    BEGIN

      IF lPosHeader."POS Message"<>'' THEN BEGIN

        MessageTxt:=lPosHeader."POS Message";
        lPosHeader."POS Message":='';
        lPosHeader.EntryText:='';
        lPosHeader."POS Message Type":=lPosHeader."POS Message Type"::Information;
        lPosHeader.MODIFY;
        COMMIT;

        IF lPosHeader."POS Message Type" = lPosHeader."POS Message Type"::Error THEN
        BEGIN
          ERROR(MessageTxt);
        END;

        IF lPosHeader."POS Message Type" = lPosHeader."POS Message Type"::Information THEN
          BEGIN
          MESSAGE(MessageTxt);
          EXIT
        END;

        END;
    END;

    PROCEDURE StartTransaction@1000000007(VAR pVariant@1000000001 : Variant) : Boolean;
    VAR
      PosHeader@9062231 : Record 9062778;
      SH@9062232 : Record 36;
      PosUser@9062233 : Record 9062783;
      Store@9062234 : Record 9062786;
      DimMgt@9062235 : Codeunit 408;
      TmpDimSet@9062236 : TEMPORARY Record 480;
      DimSetID@9062237 : Integer;
      PosSetup@1000000000 : Record 9062777;
    BEGIN

      //PosFuncsDL.StartTransaction(pVariant);
    END;

    PROCEDURE ResetOrderMode@1000000011(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant) : Boolean;
    VAR
      PosHeader@1000000003 : Record 9062778;
    BEGIN

      //PosFuncsDL.ResetOrderMode(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE CreateNewPOSTrans@9062231(VAR pVariant@1000000000 : Variant);
    VAR
      PosHeader@9062231 : Record 9062778;
      SH@9062232 : Record 36;
      PosUser@9062233 : Record 9062783;
      Store@9062234 : Record 9062786;
      DimMgt@9062235 : Codeunit 408;
      TmpDimSet@9062236 : TEMPORARY Record 480;
      DimSetID@9062237 : Integer;
    BEGIN

      //PosFuncsDL.CreateNewPOSTrans(pVariant);
    END;

    PROCEDURE AddItemToTrans@9062233(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      Item@9062233 : Record 27;
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      QTY@9062230 : Decimal;
      ItemNo@9062232 : Code[20];
      PosUser@9062237 : Record 9062783;
      ItemCrossRef@9062238 : Record 5717;
      pItemNo@9062239 : Text[30];
      ItemFound@9062240 : Boolean;
      Store@9062241 : Record 9062786;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE AddCustToTrans@9062234(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      Cust@9062232 : Record 18;
      SH@9062233 : Record 36;
      CustNo@9062230 : Code[20];
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE AddPaymentToTrans@9062235(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      PosPayments@9062231 : Record 9062779;
      Value@9062234 : Decimal;
      PaymentType@9062230 : Code[20];
      pValue@9062232 : Code[10];
      POSTenderType@9062236 : Record 9062781;
      CurrExch@9062238 : Record 330;
      ExRate@9062237 : Decimal;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE AddCurrPaymentToTrans@9062272(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      PosPayments@9062231 : Record 9062779;
      Value@9062234 : Decimal;
      PaymentType@9062230 : Code[20];
      pValue@9062232 : Code[10];
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE ChangeQtyOnLine@9062239(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      Qty@9062231 : Integer;
      NewQty@9062230 : Code[10];
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE ChangeLocOnLine@9062267(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      NewLoc@9062230 : Code[10];
      CuSoRel@9062231 : Codeunit 414;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE ChangePriceOnLine@9062268(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      Price@9062231 : Integer;
      NewPrice@9062230 : Code[10];
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE SetItemToOnOrder@9062271(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE VoidLine@9062269(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      pDisc@9062231 : Code[10];
      DiscPct@9062230 : Decimal;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE DeleteLine@9062266(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      pDisc@9062231 : Code[10];
      DiscPct@9062230 : Decimal;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE AddDiscPctToLine@9062244(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      pDisc@9062231 : Code[10];
      DiscPct@9062230 : Decimal;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE AddDiscValToLine@9062259(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      pDisc@9062231 : Code[10];
      DiscPct@9062230 : Decimal;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE SuspendOrder@9062238(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      CuSoRel@9062231 : Codeunit 414;
      SH@9062232 : Record 36;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE RetrieveOrder@9062241(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      CuSoRel@9062231 : Codeunit 414;
      SH@9062232 : Record 36;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE ViewOrder@1000000004(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      CuSoRel@9062231 : Codeunit 414;
      SH@9062232 : Record 36;
    BEGIN

      COMMIT;
      IF SH.GET(lPosHeader."Sales Document Type",lPosHeader."Sales Document No.") THEN BEGIN
        PAGE.RUNMODAL(9063192,SH);
        END;
      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE RunUrl@1000000009(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      CuSoRel@9062231 : Codeunit 414;
      SH@9062232 : Record 36;
    BEGIN
      COMMIT;
      HYPERLINK(PosCommand."Parameter 1");
    END;

    PROCEDURE LuceneSearch@1000000016(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062232 : Record 36;
      LuceneControl@1000000003 : Codeunit 9062684;
      eOrderNotFound@1000000004 : TextConst 'ENU=Order %1 not found for this transaction;ENG=Order %1 not found for this transaction';
    BEGIN
      //This needs to run the lucene search form then it the item is OK add it to the order.
      COMMIT;

      IF SH.GET(lPosHeader."Sales Document Type",lPosHeader."Sales Document No.") THEN
        LuceneControl.RunSearchPageWithFuncId(SH,lPosHeader.EntryText,1)
      ELSE
        MESSAGE(eOrderNotFound,lPosHeader."Sales Document No.");

      ////LuceneControl.RunSearchPage(SH,lPosHeader.EntryText)
    END;

    PROCEDURE CancelOrder@9062263(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      CuSoRel@9062231 : Codeunit 414;
      SH@9062232 : Record 36;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE ConfirmOrder@9062232(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      CuSoRel@9062231 : Codeunit 414;
      SH@9062232 : Record 36;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE CheckIfOpen@9062260(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      CuSoRel@9062231 : Codeunit 414;
      SH@9062232 : Record 36;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE AddTotDisc@9062253(VAR lPosHeader@1000000004 : Record 9062778;VAR PosCommand@1000000003 : TEMPORARY Record 9062780;VAR pVariant@1000000002 : Variant);
    VAR
      SH@9062238 : Record 36;
      SL@9062237 : Record 37;
      PosSetup@9062231 : Record 9062777;
      pValue@1000000000 : Code[10];
      DiscValue@1000000001 : Decimal;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE CheckCustomerOK@9062280(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant) : Boolean;
    VAR
      CuSalesPostOnQueue@9062232 : Codeunit 88;
      SH@9062231 : Record 36;
      GLLine@9062234 : Record 81;
      GLPost@9062233 : Codeunit 13;
      POSSetup@9062235 : Record 9062777;
      SalesVariant@9062236 : Variant;
      recRef@9062237 : RecordRef;
      FldRef@9062238 : FieldRef;
      CuSoRel@9062239 : Codeunit 414;
      GlDec@9062240 : Decimal;
      POSPayments@9062241 : Record 9062779;
      tmpStr@9062242 : Text;
      POSPaymentType@9062243 : Record 9062781;
      msgtxt@9062244 : TextConst 'ENU=Default Customer cannot be used for ordering. Select new customer;ENG=Default Customer cannot be used for ordering. Select new customer';
      SL@9062245 : Record 37;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE PostPosTrans@9062262(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant) : Boolean;
    VAR
      msgtxt@9062244 : TextConst 'ENU=Default Customer cannot be used for ordering. Select new customer;ENG=Default Customer cannot be used for ordering. Select new customer';
      ReceiptPrint@1000000003 : Report 9062341;
      POSMessage@1000000004 : Record 9062785;
      ErrorText@1000000005 : Text;
      DocPrint@1000000006 : Codeunit 229;
      SH@1000000007 : Record 36;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);

          IF pVariant.ISTEXT THEN
            BEGIN
              ErrorText:=pVariant;
              IF ErrorText<>'' THEN
                ERROR(pVariant);
            END;

          POSSetup.GET();
          IF POSSetup."Print Receipts"= TRUE THEN
            BEGIN
              POSMessage.SETRANGE("Pos Trans No",lPosHeader."Entry No");
              IF POSMessage.FINDSET THEN
                BEGIN
                  ReceiptPrint.SETTABLEVIEW(POSMessage);
                  ReceiptPrint.USEREQUESTPAGE(TRUE);
                  ReceiptPrint.PRINT('');
                END;
            END;

      //EmailReceipt(lPosHeader,PosCommand,pVariant)
    END;

    PROCEDURE CalcOrderDiscounts@9062237(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant) : Boolean;
    VAR
      CuSoRel@9062234 : Codeunit 414;
      SH@9062233 : Record 36;
      SL@9062232 : Record 37;
      SalesCalcDiscountByType@9062231 : Codeunit 56;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE PostPosTransCreateNew@9062230(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SalesVariant@9062236 : Variant;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE CreateCashReceiptJnl@9062236(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      GLLine@9062230 : Record 81;
      GLPost@9062231 : Codeunit 12;
      POSPayments@9062232 : Record 9062779;
      SH@9062241 : Record 36;
      POSSetup@9062238 : Record 9062777;
      GlDec@9062233 : Decimal;
      recRef@9062239 : RecordRef;
      FldRef@9062237 : FieldRef;
      SalesVariant@9062243 : Variant;
    BEGIN
    END;

    PROCEDURE FindItem@9062242(VAR lPosHeader@1000000005 : Record 9062778;VAR PosCommand@1000000004 : TEMPORARY Record 9062780;VAR pVariant@1000000003 : Variant);
    VAR
      RecRef@1000000001 : RecordRef;
      PostionStr@1000000000 : Text;
      OK@1000000002 : Boolean;
      KeyRef@1000000006 : KeyRef;
      Fldref@1000000007 : FieldRef;
      VarKeyRef@1000000008 : KeyRef;
      i@1000000009 : Integer;
      Text000@1000000010 : TextConst 'ENU=KeyIndex: %1 KeyRef: %2;ENG=KeyIndex: %1 KeyRef: %2';
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);

      IF pVariant.ISRECORD THEN
        BEGIN

        RecRef.GETTABLE(pVariant);

        CASE RecRef.NUMBER OF
        27:
          BEGIN
            OK:= RunwithRecordRef.RunPage(RecRef,9063168,TRUE);

             IF OK THEN BEGIN
             PostionStr:=RunwithRecordRef.GetPosition;
             CLEAR(pVariant);
             RecRef.SETPOSITION(PostionStr);

             PosCommand.Command:='ADDITEM';

             KeyRef := RecRef.KEYINDEX(1);
             //IF KeyRef.FIELDCOUNT < KeyNum THEN EXIT('');
             Fldref := KeyRef.FIELDINDEX(1);
             IF UPPERCASE(FORMAT(Fldref.TYPE)) = 'OPTION' THEN
                PosCommand."Parameter 1":=FORMAT(Fldref.VALUE,0,'<Number>')
              ELSE
                PosCommand."Parameter 1":=FORMAT(Fldref.VALUE);

             //PosFuncsDL.AddItemToTrans(lPosHeader,PosCommand,pVariant);
             PosFuncsDL.FindItem(lPosHeader,PosCommand,pVariant);

             //there might be a variant here
             IF pVariant.ISRECORD THEN BEGIN
               FindItem(lPosHeader,PosCommand,pVariant);
               END;
             //ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);

             END;
          END;

          5401:
            BEGIN
              //Needs to have a list of variants
               OK:= RunwithRecordRef.RunPage(RecRef,9063212,TRUE);

             IF OK THEN BEGIN
                 PostionStr:=RunwithRecordRef.GetPosition;
                 CLEAR(pVariant);
                 RecRef.SETPOSITION(PostionStr);

                 PosCommand.Command:='ADDITEM';

                 KeyRef := RecRef.KEYINDEX(1);

                 Fldref := KeyRef.FIELDINDEX(1);

                 IF UPPERCASE(FORMAT(Fldref.TYPE)) = 'OPTION' THEN
                    PosCommand."Parameter 1":=FORMAT(Fldref.VALUE,0,'<Number>')
                  ELSE
                    PosCommand."Parameter 1":=FORMAT(Fldref.VALUE);

                 Fldref := KeyRef.FIELDINDEX(2);

                 IF UPPERCASE(FORMAT(Fldref.TYPE)) = 'OPTION' THEN
                    PosCommand."Parameter 2":=FORMAT(Fldref.VALUE,0,'<Number>')
                  ELSE
                    PosCommand."Parameter 2":=FORMAT(Fldref.VALUE);

                 PosFuncsDL.AddItemToTrans(lPosHeader,PosCommand,pVariant);
                END;
              END;
         //End of case
         END;

         RecRef.CLOSE;
      END;
    END;

    PROCEDURE ShowItemList@1000000013(VAR lPosHeader@1000000005 : Record 9062778;VAR PosCommand@1000000004 : TEMPORARY Record 9062780;VAR pVariant@1000000003 : Variant);
    VAR
      RecRef@1000000001 : RecordRef;
      PostionStr@1000000000 : Text;
      OK@1000000002 : Boolean;
      KeyRef@1000000006 : KeyRef;
      Fldref@1000000007 : FieldRef;
      VarKeyRef@1000000008 : KeyRef;
      i@1000000009 : Integer;
      Text000@1000000010 : TextConst 'ENU=KeyIndex: %1 KeyRef: %2;ENG=KeyIndex: %1 KeyRef: %2';
    BEGIN

      COMMIT;

        RecRef.OPEN(27);

      //  CASE RecRef.NUMBER OF
      //  27:
          //BEGIN
            OK:= RunwithRecordRef.RunPage(RecRef,9063168,TRUE);

             IF OK THEN BEGIN
             PostionStr:=RunwithRecordRef.GetPosition;
             CLEAR(pVariant);
             RecRef.SETPOSITION(PostionStr);

             PosCommand.Command:='ADDITEM';

             KeyRef := RecRef.KEYINDEX(1);
             Fldref := KeyRef.FIELDINDEX(1);
             IF UPPERCASE(FORMAT(Fldref.TYPE)) = 'OPTION' THEN
                PosCommand."Parameter 1":=FORMAT(Fldref.VALUE,0,'<Number>')
              ELSE
                PosCommand."Parameter 1":=FORMAT(Fldref.VALUE);

             PosFuncsDL.FindItem(lPosHeader,PosCommand,pVariant);
             COMMIT;
             //there might be a variant here
             IF pVariant.ISRECORD THEN BEGIN
               FindItem(lPosHeader,PosCommand,pVariant);
               END;

             END;
      //    END;

      {
          5401:
            BEGIN
              //Needs to have a list of variants
               OK:= RunwithRecordRef.RunPage(RecRef,9063212,TRUE);

             IF OK THEN BEGIN
                 PostionStr:=RunwithRecordRef.GetPosition;
                 CLEAR(pVariant);
                 RecRef.SETPOSITION(PostionStr);

                //CustomerRecref.OPEN(18);
                //  FOR i := 1 TO RecRef.KEYCOUNT DO BEGIN
                //    VarKeyRef := RecRef.KEYINDEX(i);
                //    MESSAGE(Text000, i, VarKeyRef);
                //  END;
                ///CustomerRecref.CLOSE;

                 PosCommand.Command:='ADDITEM';

                 KeyRef := RecRef.KEYINDEX(1);
                 //IF KeyRef.FIELDCOUNT < KeyNum THEN EXIT('');

                 Fldref := KeyRef.FIELDINDEX(1);

                 IF UPPERCASE(FORMAT(Fldref.TYPE)) = 'OPTION' THEN
                    PosCommand."Parameter 1":=FORMAT(Fldref.VALUE,0,'<Number>')
                  ELSE
                    PosCommand."Parameter 1":=FORMAT(Fldref.VALUE);

                 Fldref := KeyRef.FIELDINDEX(2);

                 IF UPPERCASE(FORMAT(Fldref.TYPE)) = 'OPTION' THEN
                    PosCommand."Parameter 2":=FORMAT(Fldref.VALUE,0,'<Number>')
                  ELSE
                    PosCommand."Parameter 2":=FORMAT(Fldref.VALUE);

                 PosFuncsDL.AddItemToTrans(lPosHeader,PosCommand,pVariant);
                 //PosFuncsDL.FindItem(lPosHeader,PosCommand,pVariant);
                END;
              END;
         //End of case
         END;

         RecRef.CLOSE;
      END;
      }
    END;

    PROCEDURE ShowBrowser@1000000006(VAR lPosHeader@1000000005 : Record 9062778;VAR PosCommand@1000000004 : TEMPORARY Record 9062780;VAR pVariant@1000000003 : Variant);
    VAR
      RecBrowerMan@1000000000 : Codeunit 9062666;
      TmpItem@1000000001 : TEMPORARY Record 27;
      OK@1000000002 : Boolean;
    BEGIN
      //This will run the item browser

      COMMIT;
      OK:= RecBrowerMan.SelectItems(TmpItem);

      IF NOT OK THEN
        EXIT;

      IF TmpItem.COUNT > 0 THEN BEGIN
        TmpItem.FINDSET;

        REPEAT

         PosCommand.Command:='ADDITEM';
         PosCommand."Parameter 1":=TmpItem."No.";

         AddItemToTrans(lPosHeader,PosCommand,pVariant);

         UNTIL TmpItem.NEXT=0;

      END;
    END;

    PROCEDURE FindCust@1000000002(VAR lPosHeader@1000000004 : Record 9062778;VAR PosCommand@1000000003 : TEMPORARY Record 9062780;VAR pVariant@1000000002 : Variant);
    VAR
      RecRef@1000000001 : RecordRef;
      PostionStr@1000000000 : Text;
      FldRef@1000000005 : FieldRef;
      OK@1000000006 : Boolean;
      KeyRef@1000000007 : KeyRef;
    BEGIN
      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);

      IF pVariant.ISRECORD THEN
        BEGIN
        RecRef.GETTABLE(pVariant);
          IF RecRef.COUNT>0 THEN BEGIN
         OK := RunwithRecordRef.RunPage(RecRef,9063167,TRUE);
             IF OK THEN BEGIN
             PostionStr:=RunwithRecordRef.GetPosition;
             CLEAR(pVariant);
             RecRef.SETPOSITION(PostionStr);

          KeyRef := RecRef.KEYINDEX(1);
          //IF KeyRef.FIELDCOUNT < KeyNum THEN EXIT('');
          FldRef := KeyRef.FIELDINDEX(1);
          PosCommand.Command:='ADDCUST';

          IF UPPERCASE(FORMAT(FldRef.TYPE)) = 'OPTION' THEN
            PosCommand."Parameter 1":=FORMAT(FldRef.VALUE,0,'<Number>')
          ELSE
            PosCommand."Parameter 1":=FORMAT(FldRef.VALUE);

          PosFuncsDL.AddCustToTrans(lPosHeader,PosCommand,pVariant);
         END;
         END;
        RecRef.CLOSE;
      END;
    END;

    PROCEDURE NewCustomer@9062243(VAR lPosHeader@1000000004 : Record 9062778;VAR PosCommand@1000000003 : TEMPORARY Record 9062780;VAR pVariant@1000000002 : Variant);
    VAR
      RecRef@1000000001 : RecordRef;
      PostionStr@1000000000 : Text;
      FldRef@1000000005 : FieldRef;
      OK@1000000006 : Boolean;
      KeyRef@1000000007 : KeyRef;
      NewCustomerPAge@1000000008 : Page 9063169;
      Cust@1000000009 : Record 18;
      TMPCust@1000000010 : TEMPORARY Record 18;
      POSSetup@1000000011 : Record 9062777;
      SetupCust@1000000012 : Record 18;
    BEGIN

      COMMIT;
      CLEAR(NewCustomerPAge);
      NewCustomerPAge.LOOKUPMODE(TRUE);

      IF NewCustomerPAge.RUNMODAL = ACTION::LookupOK THEN

        BEGIN
          POSSetup.GET();
          SetupCust.GET(POSSetup."Default Customer");

         NewCustomerPAge.GETRECORD(TMPCust);

          //Need to create a new customer;
          Cust.INIT;
          Cust.VALIDATE(Cust."No.",'');
          Cust.INSERT(TRUE);
          Cust.VALIDATE("Gen. Bus. Posting Group",SetupCust."Gen. Bus. Posting Group");
          Cust.VALIDATE("VAT Bus. Posting Group",SetupCust."VAT Bus. Posting Group");
          Cust.VALIDATE("Customer Posting Group",SetupCust."Customer Posting Group");
          Cust.VALIDATE(Cust."Prices Including VAT",TRUE);
          Cust.VALIDATE("Customer Price Group",SetupCust."Customer Price Group");
          Cust.VALIDATE("Customer Disc. Group",SetupCust."Customer Disc. Group");

          Cust.VALIDATE(Name,TMPCust.Name);
          Cust.VALIDATE("Name 2",TMPCust."Name 2");
          Cust.VALIDATE(Address,TMPCust.Address);
          Cust.VALIDATE("Address 2",TMPCust."Address 2");
          Cust.VALIDATE(City,TMPCust.City);
          Cust.VALIDATE("Post Code",TMPCust."Post Code");
          Cust.VALIDATE(County,TMPCust.County);
          Cust.VALIDATE("Phone No.",TMPCust."Phone No.");
          Cust.VALIDATE("E-Mail",TMPCust."E-Mail");
          Cust.MODIFY(TRUE);

          Cust.SETRECFILTER;
          PosCommand.Command:='ADDCUST';
          PosCommand."Parameter 1":=Cust."No.";

          PosFuncsDL.AddCustToTrans(lPosHeader,PosCommand,pVariant);

      END;
    END;

    PROCEDURE FindSuspended@9062264(VAR lPosHeader@1000000005 : Record 9062778;VAR PosCommand@1000000004 : TEMPORARY Record 9062780;VAR pVariant@1000000003 : Variant);
    VAR
      RecRef@1000000000 : RecordRef;
      PostionStr@1000000001 : Text;
      OK@1000000002 : Boolean;
      FldRef@1000000008 : FieldRef;
      KeyRef@1000000006 : KeyRef;
    BEGIN

      PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);

      IF pVariant.ISRECORD THEN
        BEGIN
        RecRef.GETTABLE(pVariant);
          IF RecRef.COUNT>0 THEN BEGIN
         OK:= RunwithRecordRef.RunListPage(RecRef,TRUE);
              IF OK THEN BEGIN
           PostionStr:=RunwithRecordRef.GetPosition;

        KeyRef := RecRef.KEYINDEX(1);
          //IF KeyRef.FIELDCOUNT < KeyNum THEN EXIT('');
          PosCommand.Command:='SETACTIVE';

          FldRef := KeyRef.FIELDINDEX(1);
          IF UPPERCASE(FORMAT(FldRef.TYPE)) = 'OPTION' THEN

            PosCommand."Parameter 1":=FORMAT(FldRef.VALUE,0,'<Number>')
          ELSE
            PosCommand."Parameter 1":=FORMAT(FldRef.VALUE);

        PosFuncsDL.RetrieveOrder(lPosHeader,PosCommand,pVariant);
           END;
         END;
        RecRef.CLOSE;
      END;
    END;

    PROCEDURE ProcessNumPad@9062245(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      Item@9062233 : Record 27;
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      Qty@9062231 : Integer;
      LineNo@9062237 : Integer;
      NewQty@9062230 : Code[10];
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE ProcessEnter@9062265(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      Item@9062233 : Record 27;
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      Qty@9062231 : Integer;
      LineNo@9062237 : Integer;
      NewQty@9062230 : Code[10];
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE BackSpace@9062273(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      Item@9062233 : Record 27;
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      Qty@9062231 : Integer;
      LineNo@9062237 : Integer;
      NewQty@9062230 : Code[10];
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE ClearInput@9062246(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      Item@9062233 : Record 27;
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      Qty@9062231 : Integer;
      LineNo@9062237 : Integer;
      NewQty@9062230 : Code[10];
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE QtyAdd@9062248(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      Item@9062233 : Record 27;
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      NewQty@9062231 : Integer;
      pQty@9062230 : Code[10];
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE QtyMinus@9062252(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      Item@9062233 : Record 27;
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      NewQty@9062231 : Integer;
      pQty@9062230 : Code[10];
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE CalcTotals@9062249(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      TempCurrentSalesLine@9062236 : TEMPORARY Record 37;
      VATAmount@9062235 : Decimal;
      TempTotalSalesLine@9062234 : TEMPORARY Record 37;
      "##"@9062237 : Integer;
      TempSalesLine@9062245 : TEMPORARY Record 37;
      TempTotalSalesLineLCY@9062244 : TEMPORARY Record 37;
      SalesHeader@9062243 : Record 36;
      SalesPost@9062242 : Codeunit 80;
      VATAmountText@9062241 : Text[30];
      ProfitLCY@9062240 : Decimal;
      ProfitPct@9062239 : Decimal;
      TotalAdjCostLCY@9062238 : Decimal;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE CheckFunds@9062251(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant) : Boolean;
    VAR
      TempCurrentSalesLine@9062236 : TEMPORARY Record 37;
      VATAmount@9062235 : Decimal;
      TempTotalSalesLine@9062234 : TEMPORARY Record 37;
      TempSalesLine@9062245 : TEMPORARY Record 37;
      TempTotalSalesLineLCY@9062244 : TEMPORARY Record 37;
      SalesHeader@9062243 : Record 36;
      SalesPost@9062242 : Codeunit 80;
      VATAmountText@9062241 : Text[30];
      ProfitLCY@9062240 : Decimal;
      ProfitPct@9062239 : Decimal;
      TotalAdjCostLCY@9062238 : Decimal;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE ProcessNonPosCommand@9062247(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant) : Boolean;
    VAR
      SH@9062232 : Record 36;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE SetPosMode@9062250(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062232 : Record 36;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE SetModeEdit@9062261(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      CuSoRel@9062231 : Codeunit 414;
      SH@9062232 : Record 36;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE SetItemMode@9062254(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062232 : Record 36;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE SetDiscMode@1000000000(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062232 : Record 36;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE SetCustMode@9062255(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062232 : Record 36;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE SetFindMode@9062256(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062232 : Record 36;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    PROCEDURE ShowOrderValInCurr@9062279(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062234 : Record 36;
      CurrExch@9062230 : Record 330;
      CurrTemp@9062232 : TEMPORARY Record 4;
      Currency@9062237 : Record 4;
      ExRate@9062235 : Decimal;
      PosCurrPAge@1000000003 : Page 9063187;
    BEGIN
      COMMIT;
      PosCurrPAge.SetLocalVal(lPosHeader."Order Total");
      PosCurrPAge.RUNMODAL;
    END;

    PROCEDURE ShowItemInCurr@9062270(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant);
    VAR
      SH@9062234 : Record 36;
      SL@9062235 : Record 37;
      CurrExch@9062230 : Record 330;
      CurrTemp@9062232 : TEMPORARY Record 4;
      Currency@9062237 : Record 4;
      ExRate@9062238 : Decimal;
      PosCurrPAge@1000000004 : Page 9063187;
    BEGIN

      COMMIT;
      IF SL.GET(lPosHeader."Sales Document Type",lPosHeader."Sales Document No.",lPosHeader."Current Line") THEN BEGIN
        PosCurrPAge.SetLocalVal(SL."Unit Price");
        PosCurrPAge.RUNMODAL;
        END;
    END;

    PROCEDURE SetPayMode@1000000003(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant) : Boolean;
    VAR
      SH@9062232 : Record 36;
    BEGIN

      //PosFuncsDL.ProcessPOSCommandInput(lPosHeader,PosCommand,pVariant);
    END;

    LOCAL PROCEDURE "##"@1000000001();
    BEGIN
    END;

    PROCEDURE GetPrimaryKey@1000000036(TableID@1000000000 : Integer;PositionText@1000000006 : Text[250];KeyNum@1000000001 : Integer) KeyValue : Text[250];
    VAR
      RecRef@1000000002 : RecordRef;
      FieldRef@1000000004 : FieldRef;
      KeyRef@1000000005 : KeyRef;
    BEGIN
      //DOC PC TNLV100061
      RecRef.OPEN(TableID);
      RecRef.SETPOSITION(PositionText);

      KeyRef := RecRef.KEYINDEX(1);
      IF KeyRef.FIELDCOUNT < KeyNum THEN EXIT('');

      FieldRef := KeyRef.FIELDINDEX(KeyNum);
      IF UPPERCASE(FORMAT(FieldRef.TYPE)) = 'OPTION' THEN

        EXIT(FORMAT(FieldRef.VALUE,0,'<Number>'))
      ELSE
        EXIT(FORMAT(FieldRef.VALUE));
    END;

    PROCEDURE EmailReceipt@1000000005(VAR lPosHeader@1000000002 : Record 9062778;VAR PosCommand@1000000001 : TEMPORARY Record 9062780;VAR pVariant@1000000000 : Variant) : Boolean;
    VAR
      msgtxt@9062244 : TextConst 'ENU=Default Customer cannot be used for ordering. Select new customer;ENG=Default Customer cannot be used for ordering. Select new customer';
      ReceiptPrint@1000000003 : Report 9062341;
      POSMessage@1000000004 : Record 9062785;
      ErrorText@1000000005 : Text;
      "##"@1000000008 : Integer;
      FileManagement@1000000010 : Codeunit 419;
      ServerAttachmentFilePath@1000000009 : Text;
      TempEmailItem@1000000011 : TEMPORARY Record 9500;
      Cust@1000000012 : Record 18;
      ServerSaveAsPdfFailedErr@1000000013 : TextConst 'ENU=Cannot Save Report to Server;ENG=Cannot Save Report to Server';
      POSSetup@1000000006 : Record 9062777;
      EmailPage@1000000007 : Page 9063201;
      ActionRes@1000000014 : Action;
      eYourReceipt@1000000015 : TextConst 'ENU=Your receipt for transaction no: %1;ENG=Your receipt for transaction no: %1';
    BEGIN

      IF lPosHeader."E-Mail"='' THEN EXIT;

      POSSetup.GET();
      IF POSSetup."Email Receipts" = FALSE THEN
        EXIT;

      //CLEAR(EmailPage);
      //EmailPage.SETRECORD(lPosHeader);
      //ActionRes:=EmailPage.RUNMODAL;

      //IF ActionRes = ACTION::OK THEN BEGIN
            ServerAttachmentFilePath := FileManagement.ServerTempFileName('pdf');

            POSMessage.SETRANGE("Pos Trans No",lPosHeader."Entry No");
                IF POSMessage.FINDSET THEN
                  BEGIN
                    CLEAR(ReceiptPrint);
                    ReceiptPrint.SETTABLEVIEW(POSMessage);
                    ReceiptPrint.USEREQUESTPAGE(FALSE);
                    ReceiptPrint.SAVEASPDF(ServerAttachmentFilePath);
                  END;

            IF NOT EXISTS(ServerAttachmentFilePath) THEN
              ERROR(ServerSaveAsPdfFailedErr);

            //Create a temp email item then send it
            WITH TempEmailItem DO BEGIN
            "Send to" := lPosHeader."E-Mail";
            Subject:=STRSUBSTNO(eYourReceipt, lPosHeader."Entry No");
            "Attachment File Path" := ServerAttachmentFilePath;
              //"Attachment Name" := AttachmentFileName;
            "Attachment Name" := ServerAttachmentFilePath;
            Send(TRUE);
            END;
      //END;
    END;

    BEGIN
    {
      //This codeunit handles the UI elements of the POS interactions.
      //It contains a pre and post data calling section where you can add UI interaction with the user.
      //for example the user might want to open a search page ( which would be done here ) and then pass the results of the search to the data handler to update the POS transaction.
      //
      //also if a function was carried out in the DATA handler and an error was to be raised then the error or warning messgage is displayed from here in a pop up box.
      //
      //There are a number of commented out functions as a framework for the data handler
      //DOC NH2016.15 JH 26/04/2016 - CfMD amendments
    }
    END.
  }
}

