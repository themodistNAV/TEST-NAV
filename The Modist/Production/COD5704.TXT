OBJECT Codeunit 5704 TransferOrder-Post Shipment
{
  OBJECT-PROPERTIES
  {
    Date=12/12/16;
    Time=11:19:46 AM;
    Modified=Yes;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    TableNo=5740;
    Permissions=TableData 6507=i;
    OnRun=VAR
            Item@1000 : Record 27;
            SourceCodeSetup@1001 : Record 242;
            InvtSetup@1002 : Record 313;
            InventoryPostingSetup@1007 : Record 5813;
            NoSeriesMgt@1003 : Codeunit 396;
            UpdateAnalysisView@1004 : Codeunit 410;
            UpdateItemAnalysisView@1009 : Codeunit 7150;
            CreateReservEntry@1010 : Codeunit 99000830;
            RecordLinkManagement@1011 : Codeunit 447;
            Window@1006 : Dialog;
            LineCount@1005 : Integer;
            NextLineNo@1008 : Integer;
            IntegrationProcessProcessor@1000000000 : Codeunit 50005;
          BEGIN
            IF Status = Status::Open THEN BEGIN
              CODEUNIT.RUN(CODEUNIT::"Release Transfer Document",Rec);
              Status := Status::Open;
              MODIFY;
              COMMIT;
              Status := Status::Released;
            END;
            TransHeader := Rec;
            TransHeader.SetHideValidationDialog(HideValidationDialog);

            WITH TransHeader DO BEGIN
              TESTFIELD("Transfer-from Code");
              TESTFIELD("Transfer-to Code");
              IF "Transfer-from Code" = "Transfer-to Code" THEN
                ERROR
                (Text000,
                  "No.",FIELDCAPTION("Transfer-from Code"),FIELDCAPTION("Transfer-to Code"));
              TESTFIELD("In-Transit Code");
              TESTFIELD(Status,Status::Released);
              TESTFIELD("Posting Date");

              WhseReference := "Posting from Whse. Ref.";
              "Posting from Whse. Ref." := 0;

              IF "Shipping Advice" = "Shipping Advice"::Complete THEN
                IF NOT GetShippingAdvice THEN
                  ERROR(Text008);

              CheckDim;

              TransLine.RESET;
              TransLine.SETRANGE("Document No.","No.");
              TransLine.SETRANGE("Derived From Line No.",0);
              TransLine.SETFILTER(Quantity,'<>0');
              TransLine.SETFILTER("Qty. to Ship",'<>0');
              IF TransLine.ISEMPTY THEN
                ERROR(Text001);

              WhseShip := TempWhseShptHeader.FINDFIRST;
              InvtPickPutaway := WhseReference <> 0;
              CheckItemInInventoryAndWarehouse(TransLine,NOT (WhseShip OR InvtPickPutaway));

              GetLocation("Transfer-from Code");
              IF Location."Bin Mandatory" AND NOT (WhseShip OR InvtPickPutaway) THEN
                WhsePosting := TRUE;

              Window.OPEN(
                '#1#################################\\' +
                Text003);

              Window.UPDATE(1,STRSUBSTNO(Text004,"No."));

              SourceCodeSetup.GET;
              SourceCode := SourceCodeSetup.Transfer;
              InvtSetup.GET;
              InvtSetup.TESTFIELD("Posted Transfer Shpt. Nos.");
              InventoryPostingSetup.SETRANGE("Location Code","Transfer-from Code");
              InventoryPostingSetup.FINDFIRST;
              InventoryPostingSetup.SETRANGE("Location Code","Transfer-to Code");
              InventoryPostingSetup.FINDFIRST;

              NoSeriesLine.LOCKTABLE;
              IF NoSeriesLine.FINDLAST THEN;
              IF InvtSetup."Automatic Cost Posting" THEN BEGIN
                GLEntry.LOCKTABLE;
                IF GLEntry.FINDLAST THEN;
              END;

              // Insert shipment header
              PostedWhseShptHeader.LOCKTABLE;
              TransShptHeader.LOCKTABLE;
              TransShptHeader.INIT;
              TransShptHeader."Transfer-from Code" := "Transfer-from Code";
              TransShptHeader."Transfer-from Name" := "Transfer-from Name";
              TransShptHeader."Transfer-from Name 2" := "Transfer-from Name 2";
              TransShptHeader."Transfer-from Address" := "Transfer-from Address";
              TransShptHeader."Transfer-from Address 2" := "Transfer-from Address 2";
              TransShptHeader."Transfer-from Post Code" := "Transfer-from Post Code";
              TransShptHeader."Transfer-from City" := "Transfer-from City";
              TransShptHeader."Transfer-from County" := "Transfer-from County";
              TransShptHeader."Trsf.-from Country/Region Code" := "Trsf.-from Country/Region Code";
              TransShptHeader."Transfer-from Contact" := "Transfer-from Contact";
              TransShptHeader."Transfer-to Code" := "Transfer-to Code";
              TransShptHeader."Transfer-to Name" := "Transfer-to Name";
              TransShptHeader."Transfer-to Name 2" := "Transfer-to Name 2";
              TransShptHeader."Transfer-to Address" := "Transfer-to Address";
              TransShptHeader."Transfer-to Address 2" := "Transfer-to Address 2";
              TransShptHeader."Transfer-to Post Code" := "Transfer-to Post Code";
              TransShptHeader."Transfer-to City" := "Transfer-to City";
              TransShptHeader."Transfer-to County" := "Transfer-to County";
              TransShptHeader."Trsf.-to Country/Region Code" := "Trsf.-to Country/Region Code";
              TransShptHeader."Transfer-to Contact" := "Transfer-to Contact";
              TransShptHeader."Transfer Order Date" := "Posting Date";
              TransShptHeader."Posting Date" := "Posting Date";
              TransShptHeader."Shipment Date" := "Shipment Date";
              TransShptHeader."Receipt Date" := "Receipt Date";
              TransShptHeader."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
              TransShptHeader."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
              TransShptHeader."Dimension Set ID" := "Dimension Set ID";
              TransShptHeader."Transfer Order No." := "No.";
              TransShptHeader."External Document No." := "External Document No.";
              TransShptHeader."In-Transit Code" := "In-Transit Code";
              TransShptHeader."Shipping Agent Code" := "Shipping Agent Code";
              TransShptHeader."Shipping Agent Service Code" := "Shipping Agent Service Code";
              TransShptHeader."Shipment Method Code" := "Shipment Method Code";
              TransShptHeader."Transaction Type" := "Transaction Type";
              TransShptHeader."Transport Method" := "Transport Method";
              TransShptHeader."Entry/Exit Point" := "Entry/Exit Point";
              TransShptHeader.Area := Area;
              TransShptHeader."Transaction Specification" := "Transaction Specification";
              TransShptHeader."No. Series" := InvtSetup."Posted Transfer Shpt. Nos.";
              TransShptHeader."No." :=
                NoSeriesMgt.GetNextNo(
                  InvtSetup."Posted Transfer Shpt. Nos.","Posting Date",TRUE);
              TransShptHeader.INSERT;

              IF InvtSetup."Copy Comments Order to Shpt." THEN BEGIN
                CopyCommentLines(1,2,"No.",TransShptHeader."No.");
                RecordLinkManagement.CopyLinks(Rec,TransShptHeader);
              END;

              IF WhseShip THEN BEGIN
                WhseShptHeader.GET(TempWhseShptHeader."No.");
                WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,TransShptHeader."No.","Posting Date");
              END;

              // Insert shipment lines
              LineCount := 0;
              IF WhseShip THEN
                PostedWhseShptLine.LOCKTABLE;
              IF InvtPickPutaway THEN
                WhseRqst.LOCKTABLE;
              TransShptLine.LOCKTABLE;
              TransLine.SETRANGE(Quantity);
              TransLine.SETRANGE("Qty. to Ship");
              IF TransLine.FIND('-') THEN
                REPEAT
                  LineCount := LineCount + 1;
                  Window.UPDATE(2,LineCount);

                  IF TransLine."Item No." <> '' THEN BEGIN
                    Item.GET(TransLine."Item No.");
                    Item.TESTFIELD(Blocked,FALSE);
                  END;

                  TransShptLine.INIT;
                  TransShptLine."Document No." := TransShptHeader."No.";
                  TransShptLine."Line No." := TransLine."Line No.";
                  TransShptLine."Item No." := TransLine."Item No.";
                  TransShptLine.Description := TransLine.Description;
                  TransShptLine.Quantity := TransLine."Qty. to Ship";
                  TransShptLine."Unit of Measure" := TransLine."Unit of Measure";
                  TransShptLine."Shortcut Dimension 1 Code" := TransLine."Shortcut Dimension 1 Code";
                  TransShptLine."Shortcut Dimension 2 Code" := TransLine."Shortcut Dimension 2 Code";
                  TransShptLine."Dimension Set ID" := TransLine."Dimension Set ID";
                  TransShptLine."Gen. Prod. Posting Group" := TransLine."Gen. Prod. Posting Group";
                  TransShptLine."Inventory Posting Group" := TransLine."Inventory Posting Group";
                  TransShptLine."Quantity (Base)" := TransLine."Qty. to Ship (Base)";
                  TransShptLine."Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
                  TransShptLine."Unit of Measure Code" := TransLine."Unit of Measure Code";
                  TransShptLine."Gross Weight" := TransLine."Gross Weight";
                  TransShptLine."Net Weight" := TransLine."Net Weight";
                  TransShptLine."Unit Volume" := TransLine."Unit Volume";
                  TransShptLine."Variant Code" := TransLine."Variant Code";
                  TransShptLine."Units per Parcel" := TransLine."Units per Parcel";
                  TransShptLine."Description 2" := TransLine."Description 2";
                  TransShptLine."Transfer Order No." := TransLine."Document No.";
                  TransShptLine."Shipment Date" := TransLine."Shipment Date";
                  TransShptLine."Shipping Agent Code" := TransLine."Shipping Agent Code";
                  TransShptLine."Shipping Agent Service Code" := TransLine."Shipping Agent Service Code";
                  TransShptLine."In-Transit Code" := TransLine."In-Transit Code";
                  TransShptLine."Transfer-from Code" := TransLine."Transfer-from Code";
                  TransShptLine."Transfer-to Code" := TransLine."Transfer-to Code";
                  TransShptLine."Transfer-from Bin Code" := TransLine."Transfer-from Bin Code";
                  TransShptLine."Shipping Time" := TransLine."Shipping Time";
                  TransShptLine."Item Category Code" := TransLine."Item Category Code";
                  TransShptLine."Product Group Code" := TransLine."Product Group Code";

                  IF TransLine."Qty. to Ship" > 0 THEN BEGIN
                    OriginalQuantity := TransLine."Qty. to Ship";
                    OriginalQuantityBase := TransLine."Qty. to Ship (Base)";
                    PostItemJnlLine(TransLine,TransShptHeader,TransShptLine);
                    TransShptLine."Item Shpt. Entry No." := InsertShptEntryRelation(TransShptLine);
                    IF WhseShip THEN BEGIN
                      WhseShptLine.SETCURRENTKEY(
                        "No.","Source Type","Source Subtype","Source No.","Source Line No.");
                      WhseShptLine.SETRANGE("No.",WhseShptHeader."No.");
                      WhseShptLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
                      WhseShptLine.SETRANGE("Source No.",TransLine."Document No.");
                      WhseShptLine.SETRANGE("Source Line No.",TransLine."Line No.");
                      WhseShptLine.FINDFIRST;
                      WhseShptLine.TESTFIELD("Qty. to Ship",TransShptLine.Quantity);
                      WhsePostShpt.CreatePostedShptLine(
                        WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
                    END;
                    IF WhsePosting THEN
                      PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase);
                  END;
                  TransShptLine.INSERT;
                UNTIL TransLine.NEXT = 0;

              InvtSetup.GET;
              IF InvtSetup."Automatic Cost Adjustment" <>
                 InvtSetup."Automatic Cost Adjustment"::Never
              THEN BEGIN
                InvtAdjmt.SetProperties(TRUE,InvtSetup."Automatic Cost Posting");
                InvtAdjmt.MakeMultiLevelAdjmt;
              END;

              IF WhseShip THEN
                WhseShptLine.LOCKTABLE;
              TransLine.LOCKTABLE;
              TransLine.SETFILTER(Quantity,'<>0');
              TransLine.SETFILTER("Qty. to Ship",'<>0');
              IF TransLine.FIND('-') THEN BEGIN
                NextLineNo := AssignLineNo(TransLine."Document No.");
                REPEAT
                  TransLine2.INIT;
                  TransLine2 := TransLine;
                  TransLine2."Transfer-from Code" := TransLine."In-Transit Code";
                  TransLine2."In-Transit Code" := '';
                  TransLine2."Derived From Line No." := TransLine."Line No.";
                  TransLine2."Line No." := NextLineNo;
                  NextLineNo := NextLineNo + 10000;
                  TransLine2.Quantity := TransLine."Qty. to Ship";
                  TransLine2."Quantity (Base)" := TransLine."Qty. to Ship (Base)";
                  TransLine2."Qty. to Ship" := TransLine2.Quantity;
                  TransLine2."Qty. to Ship (Base)" := TransLine2."Quantity (Base)";
                  TransLine2."Qty. to Receive" := TransLine2.Quantity;
                  TransLine2."Qty. to Receive (Base)" := TransLine2."Quantity (Base)";
                  TransLine2."Quantity Shipped" := 0;
                  TransLine2."Qty. Shipped (Base)" := 0;
                  TransLine2."Quantity Received" := 0;
                  TransLine2."Qty. Received (Base)" := 0;
                  TransLine2."Qty. in Transit" := 0;
                  TransLine2."Qty. in Transit (Base)" := 0;
                  TransLine2."Outstanding Quantity" := TransLine2.Quantity;
                  TransLine2."Outstanding Qty. (Base)" := TransLine2."Quantity (Base)";
                  TransLine2.INSERT;

                  TransferTracking(TransLine,TransLine2,TransLine."Qty. to Ship (Base)");

                  TransLine.VALIDATE("Quantity Shipped",TransLine."Quantity Shipped" + TransLine."Qty. to Ship");

                  TransLine.UpdateWithWarehouseShipReceive;

                  TransLine.MODIFY;
                UNTIL TransLine.NEXT = 0;
              END;

              IF WhseShip THEN
                WhseShptLine.LOCKTABLE;
              LOCKTABLE;
              IF WhseShip THEN BEGIN
                WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
                TempWhseShptHeader.DELETE;
              END;

              "Last Shipment No." := TransShptHeader."No.";
              MODIFY;

              TransLine.SETRANGE(Quantity);
              TransLine.SETRANGE("Qty. to Ship");
              HeaderDeleted := DeleteOneTransferOrder(TransHeader,TransLine);
              IF NOT HeaderDeleted THEN BEGIN
                WhseTransferRelease.Release(TransHeader);
                ReserveTransLine.UpdateItemTrackingAfterPosting(TransHeader,0);
                CreateReservEntry.UpdReservEntryAfterPostingPick(TransHeader);
              END;

              IF NOT InvtPickPutaway THEN
                COMMIT;
              CLEAR(WhsePostShpt);
              CLEAR(InvtAdjmt);
              Window.CLOSE;
            END;
            UpdateAnalysisView.UpdateAll(0,TRUE);
            UpdateItemAnalysisView.UpdateAll(0,TRUE);
            Rec := TransHeader;

            //DOC OP9031 LF 08/12/2016 -
            //IntegrationProcessProcessor.AddTransferOrder(TransHeader);
            //DOC OP9031 LF 08/12/2016 +
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Transfer order %2 cannot be posted because %3 and %4 are the same.;ENG=Transfer order %2 cannot be posted because %3 and %4 are the same.';
      Text001@1001 : TextConst 'ENU=There is nothing to post.;ENG=There is nothing to post.';
      Text002@1002 : TextConst 'ENU="Warehouse handling is required for Transfer order = %1, %2 = %3.";ENG="Warehouse handling is required for Transfer order = %1, %2 = %3."';
      Text003@1003 : TextConst 'ENU=Posting transfer lines     #2######;ENG=Posting transfer lines     #2######';
      Text004@1004 : TextConst 'ENU=Transfer Order %1;ENG=Transfer Order %1';
      Text005@1005 : TextConst 'ENU=The combination of dimensions used in transfer order %1 is blocked. %2;ENG=The combination of dimensions used in transfer order %1 is blocked. %2';
      Text006@1006 : TextConst 'ENU=The combination of dimensions used in transfer order %1, line no. %2 is blocked. %3;ENG=The combination of dimensions used in transfer order %1, line no. %2 is blocked. %3';
      Text007@1007 : TextConst 'ENU=The dimensions that are used in transfer order %1, line no. %2 are not valid. %3.;ENG=The dimensions that are used in transfer order %1, line no. %2 are not valid. %3.';
      TransShptHeader@1008 : Record 5744;
      TransShptLine@1009 : Record 5745;
      TransHeader@1010 : Record 5740;
      TransLine@1011 : Record 5741;
      TransLine2@1012 : Record 5741;
      Location@1015 : Record 14;
      ItemJnlLine@1016 : Record 83;
      WhseRqst@1027 : Record 5765;
      WhseShptHeader@1022 : Record 7320;
      TempWhseShptHeader@1030 : TEMPORARY Record 7320;
      WhseShptLine@1028 : Record 7321;
      PostedWhseShptHeader@1034 : Record 7322;
      PostedWhseShptLine@1035 : Record 7323;
      TempWhseSplitSpecification@1037 : TEMPORARY Record 336;
      TempHandlingSpecification@1018 : TEMPORARY Record 336;
      NoSeriesLine@1029 : Record 309;
      GLEntry@1040 : Record 17;
      ItemJnlPostLine@1021 : Codeunit 22;
      DimMgt@1017 : Codeunit 408;
      WhseTransferRelease@1019 : Codeunit 5773;
      ReserveTransLine@1020 : Codeunit 99000836;
      WhsePostShpt@1036 : Codeunit 5763;
      InvtAdjmt@1041 : Codeunit 5895;
      SourceCode@1023 : Code[10];
      HideValidationDialog@1024 : Boolean;
      HeaderDeleted@1025 : Boolean;
      WhseShip@1026 : Boolean;
      WhsePosting@1033 : Boolean;
      InvtPickPutaway@1039 : Boolean;
      WhseReference@1038 : Integer;
      OriginalQuantity@1031 : Decimal;
      OriginalQuantityBase@1032 : Decimal;
      Text008@11042 : TextConst 'ENU=This order must be a complete shipment.;ENG=This order must be a complete shipment.';
      Text009@1042 : TextConst 'ENU=Item %1 is not in inventory.;ENG=Item %1 is not in inventory.';

    LOCAL PROCEDURE PostItemJnlLine@2(VAR TransLine3@1000 : Record 5741;TransShptHeader2@1001 : Record 5744;TransShptLine2@1002 : Record 5745);
    BEGIN
      ItemJnlLine.INIT;
      ItemJnlLine."Posting Date" := TransShptHeader2."Posting Date";
      ItemJnlLine."Document Date" := TransShptHeader2."Posting Date";
      ItemJnlLine."Document No." := TransShptHeader2."No.";
      ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Transfer Shipment";
      ItemJnlLine."Document Line No." := TransShptLine2."Line No.";
      ItemJnlLine."Order Type" := ItemJnlLine."Order Type"::Transfer;
      ItemJnlLine."Order No." := TransShptHeader2."Transfer Order No.";
      ItemJnlLine."Order Line No." := TransLine3."Line No.";
      ItemJnlLine."External Document No." := TransShptHeader2."External Document No.";
      ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Transfer;
      ItemJnlLine."Item No." := TransShptLine2."Item No.";
      ItemJnlLine.Description := TransShptLine2.Description;
      ItemJnlLine."Shortcut Dimension 1 Code" := TransShptLine2."Shortcut Dimension 1 Code";
      ItemJnlLine."New Shortcut Dimension 1 Code" := TransShptLine2."Shortcut Dimension 1 Code";
      ItemJnlLine."Shortcut Dimension 2 Code" := TransShptLine2."Shortcut Dimension 2 Code";
      ItemJnlLine."New Shortcut Dimension 2 Code" := TransShptLine2."Shortcut Dimension 2 Code";
      ItemJnlLine."Dimension Set ID" := TransShptLine2."Dimension Set ID";
      ItemJnlLine."New Dimension Set ID" := TransShptLine2."Dimension Set ID";
      ItemJnlLine."Location Code" := TransShptHeader2."Transfer-from Code";
      ItemJnlLine."New Location Code" := TransHeader."In-Transit Code";
      ItemJnlLine.Quantity := TransShptLine2.Quantity;
      ItemJnlLine."Invoiced Quantity" := TransShptLine2.Quantity;
      ItemJnlLine."Quantity (Base)" := TransShptLine2."Quantity (Base)";
      ItemJnlLine."Invoiced Qty. (Base)" := TransShptLine2."Quantity (Base)";
      ItemJnlLine."Source Code" := SourceCode;
      ItemJnlLine."Gen. Prod. Posting Group" := TransShptLine2."Gen. Prod. Posting Group";
      ItemJnlLine."Inventory Posting Group" := TransShptLine2."Inventory Posting Group";
      ItemJnlLine."Unit of Measure Code" := TransShptLine2."Unit of Measure Code";
      ItemJnlLine."Qty. per Unit of Measure" := TransShptLine2."Qty. per Unit of Measure";
      ItemJnlLine."Variant Code" := TransShptLine2."Variant Code";
      ItemJnlLine."Bin Code" := TransLine."Transfer-from Bin Code";
      ItemJnlLine."Country/Region Code" := TransShptHeader2."Trsf.-from Country/Region Code";
      ItemJnlLine."Transaction Type" := TransShptHeader2."Transaction Type";
      ItemJnlLine."Transport Method" := TransShptHeader2."Transport Method";
      ItemJnlLine."Entry/Exit Point" := TransShptHeader2."Entry/Exit Point";
      ItemJnlLine.Area := TransShptHeader2.Area;
      ItemJnlLine."Transaction Specification" := TransShptHeader2."Transaction Specification";
      ItemJnlLine."Product Group Code" := TransLine."Product Group Code";
      ItemJnlLine."Item Category Code" := TransLine."Item Category Code";
      ItemJnlLine."Applies-to Entry" := TransLine."Appl.-to Item Entry";

      ReserveTransLine.TransferTransferToItemJnlLine(TransLine3,
        ItemJnlLine,ItemJnlLine."Quantity (Base)",0);

      ItemJnlPostLine.RunWithCheck(ItemJnlLine);
    END;

    LOCAL PROCEDURE CopyCommentLines@22(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    VAR
      InvtCommentLine@1004 : Record 5748;
      InvtCommentLine2@1005 : Record 5748;
    BEGIN
      InvtCommentLine.SETRANGE("Document Type",FromDocumentType);
      InvtCommentLine.SETRANGE("No.",FromNumber);
      IF InvtCommentLine.FIND('-') THEN
        REPEAT
          InvtCommentLine2 := InvtCommentLine;
          InvtCommentLine2."Document Type" := ToDocumentType;
          InvtCommentLine2."No." := ToNumber;
          InvtCommentLine2.INSERT;
        UNTIL InvtCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDim@34();
    BEGIN
      TransLine."Line No." := 0;
      CheckDimComb(TransHeader,TransLine);
      CheckDimValuePosting(TransHeader,TransLine);

      TransLine.SETRANGE("Document No.",TransHeader."No.");
      IF TransLine.FINDFIRST THEN BEGIN
        CheckDimComb(TransHeader,TransLine);
        CheckDimValuePosting(TransHeader,TransLine);
      END;
    END;

    LOCAL PROCEDURE CheckDimComb@30(TransferHeader@1001 : Record 5740;TransferLine@1000 : Record 5741);
    BEGIN
      IF TransferLine."Line No." = 0 THEN
        IF NOT DimMgt.CheckDimIDComb(TransferHeader."Dimension Set ID") THEN
          ERROR(
            Text005,
            TransHeader."No.",DimMgt.GetDimCombErr);
      IF TransferLine."Line No." <> 0 THEN
        IF NOT DimMgt.CheckDimIDComb(TransferLine."Dimension Set ID") THEN
          ERROR(
            Text006,
            TransHeader."No.",TransferLine."Line No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(TransferHeader@1001 : Record 5740;TransferLine@1000 : Record 5741);
    VAR
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      TableIDArr[1] := DATABASE::Item;
      NumberArr[1] := TransferLine."Item No.";
      IF TransferLine."Line No." = 0 THEN
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,TransferHeader."Dimension Set ID") THEN
          ERROR(Text007,TransHeader."No.",TransferLine."Line No.",DimMgt.GetDimValuePostingErr);

      IF TransferLine."Line No." <> 0 THEN
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,TransferLine."Dimension Set ID") THEN
          ERROR(Text007,TransHeader."No.",TransferLine."Line No.",DimMgt.GetDimValuePostingErr);
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE AssignLineNo@1(FromDocNo@1000 : Code[20]) : Integer;
    VAR
      TransLine3@1002 : Record 5741;
    BEGIN
      TransLine3.SETRANGE("Document No.",FromDocNo);
      IF TransLine3.FINDLAST THEN
        EXIT(TransLine3."Line No." + 10000);
    END;

    LOCAL PROCEDURE InsertShptEntryRelation@38(VAR TransShptLine@1002 : Record 5745) : Integer;
    VAR
      TempHandlingSpecification2@1000 : TEMPORARY Record 336;
      ItemEntryRelation@1001 : Record 6507;
      ItemTrackingMgt@1005 : Codeunit 6500;
      WhseSNRequired@1003 : Boolean;
      WhseLNRequired@1004 : Boolean;
    BEGIN
      IF WhsePosting THEN BEGIN
        TempWhseSplitSpecification.RESET;
        TempWhseSplitSpecification.DELETEALL;
      END;

      TempHandlingSpecification2.RESET;
      IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) THEN BEGIN
        TempHandlingSpecification2.SETRANGE("Buffer Status",0);
        IF TempHandlingSpecification2.FIND('-') THEN BEGIN
          REPEAT
            IF WhsePosting OR WhseShip OR InvtPickPutaway THEN BEGIN
              ItemTrackingMgt.CheckWhseItemTrkgSetup(
                TransShptLine."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
              IF WhseSNRequired OR WhseLNRequired THEN BEGIN
                TempWhseSplitSpecification := TempHandlingSpecification2;
                TempWhseSplitSpecification."Source Type" := DATABASE::"Transfer Line";
                TempWhseSplitSpecification."Source ID" := TransLine."Document No.";
                TempWhseSplitSpecification."Source Ref. No." := TransLine."Line No.";
                TempWhseSplitSpecification.INSERT;
              END;
            END;

            ItemEntryRelation.INIT;
            ItemEntryRelation."Item Entry No." := TempHandlingSpecification2."Entry No.";
            ItemEntryRelation."Serial No." := TempHandlingSpecification2."Serial No.";
            ItemEntryRelation."Lot No." := TempHandlingSpecification2."Lot No.";
            ItemEntryRelation.TransferFieldsTransShptLine(TransShptLine);
            ItemEntryRelation.INSERT;
            TempHandlingSpecification := TempHandlingSpecification2;
            TempHandlingSpecification."Source Prod. Order Line" := TransShptLine."Line No.";
            TempHandlingSpecification."Buffer Status" := TempHandlingSpecification."Buffer Status"::MODIFY;
            TempHandlingSpecification.INSERT;
          UNTIL TempHandlingSpecification2.NEXT = 0;
          EXIT(0);
        END;
      END ELSE
        EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE TransferTracking@3(VAR FromTransLine@1003 : Record 5741;VAR ToTransLine@1004 : Record 5741;TransferQty@1001 : Decimal);
    VAR
      DummySpecification@1005 : Record 336;
    BEGIN
      TempHandlingSpecification.RESET;
      TempHandlingSpecification.SETRANGE("Source Prod. Order Line",ToTransLine."Derived From Line No.");
      IF TempHandlingSpecification.FIND('-') THEN BEGIN
        REPEAT
          ReserveTransLine.TransferTransferToTransfer(
            FromTransLine,ToTransLine,-TempHandlingSpecification."Quantity (Base)",1,TempHandlingSpecification);
          TransferQty += TempHandlingSpecification."Quantity (Base)";
        UNTIL TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
      END;

      IF TransferQty > 0 THEN
        ReserveTransLine.TransferTransferToTransfer(
          FromTransLine,ToTransLine,TransferQty,1,DummySpecification);
    END;

    LOCAL PROCEDURE CheckWarehouse@7301(TransLine@1000 : Record 5741);
    VAR
      WhseValidateSourceLine@1003 : Codeunit 5777;
      ShowError@1002 : Boolean;
    BEGIN
      GetLocation(TransLine."Transfer-from Code");
      IF Location."Require Pick" OR Location."Require Shipment" THEN BEGIN
        IF Location."Bin Mandatory" THEN
          ShowError := TRUE
        ELSE
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Transfer Line",
               0,// Out
               TransLine."Document No.",
               TransLine."Line No.",
               0,
               TransLine.Quantity)
          THEN
            ShowError := TRUE;

        IF ShowError THEN
          ERROR(
            Text002,
            TransLine."Document No.",
            TransLine.FIELDCAPTION("Line No."),
            TransLine."Line No.");
      END;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE PostWhseJnlLine@4(ItemJnlLine@1000 : Record 83;OriginalQuantity@1001 : Decimal;OriginalQuantityBase@1006 : Decimal);
    VAR
      WhseJnlLine@1002 : Record 7311;
      TempWhseJnlLine2@1005 : TEMPORARY Record 7311;
      ItemTrackingMgt@1004 : Codeunit 6500;
      WMSMgmt@1007 : Codeunit 7302;
      WhseJnlPostLine@1008 : Codeunit 7301;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        Quantity := OriginalQuantity;
        "Quantity (Base)" := OriginalQuantityBase;
        GetLocation("Location Code");
        IF Location."Bin Mandatory" THEN
          IF WMSMgmt.CreateWhseJnlLine(ItemJnlLine,1,WhseJnlLine,FALSE) THEN BEGIN
            WMSMgmt.SetTransferLine(TransLine,WhseJnlLine,0,TransShptHeader."No.");
            ItemTrackingMgt.SplitWhseJnlLine(
              WhseJnlLine,TempWhseJnlLine2,TempWhseSplitSpecification,TRUE);
            IF TempWhseJnlLine2.FIND('-') THEN
              REPEAT
                WMSMgmt.CheckWhseJnlLine(TempWhseJnlLine2,1,0,TRUE);
                WhseJnlPostLine.RUN(TempWhseJnlLine2);
              UNTIL TempWhseJnlLine2.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE SetWhseShptHeader@5(VAR WhseShptHeader2@1000 : Record 7320);
    BEGIN
      WhseShptHeader := WhseShptHeader2;
      TempWhseShptHeader := WhseShptHeader;
      TempWhseShptHeader.INSERT;
    END;

    LOCAL PROCEDURE GetShippingAdvice@6() : Boolean;
    VAR
      TransLine@1000 : Record 5741;
    BEGIN
      TransLine.SETRANGE("Document No.",TransHeader."No.");
      IF TransLine.FIND('-') THEN
        REPEAT
          IF TransLine."Quantity (Base)" <>
             TransLine."Qty. to Ship (Base)" + TransLine."Qty. Shipped (Base)"
          THEN
            EXIT(FALSE);
        UNTIL TransLine.NEXT = 0;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckItemInInventory@1043(TransLine@1000 : Record 5741);
    VAR
      Item@1001 : Record 27;
    BEGIN
      WITH Item DO BEGIN
        GET(TransLine."Item No.");
        SETFILTER("Variant Filter",TransLine."Variant Code");
        SETFILTER("Location Filter",TransLine."Transfer-from Code");
        CALCFIELDS(Inventory);
        IF Inventory <= 0 THEN
          ERROR(Text009,TransLine."Item No.");
      END;
    END;

    LOCAL PROCEDURE CheckItemInInventoryAndWarehouse@8(VAR TransLine@1000 : Record 5741;NeedCheckWarehouse@1001 : Boolean);
    VAR
      TransLine2@1002 : Record 5741;
    BEGIN
      TransLine2.COPYFILTERS(TransLine);
      TransLine2.FINDSET;
      REPEAT
        CheckItemInInventory(TransLine2);
        IF  NeedCheckWarehouse THEN
          CheckWarehouse(TransLine2);
      UNTIL TransLine2.NEXT = 0;
    END;

    BEGIN
    {
      //DOC OP9031 LF 08/12/2016 - Added hook to Add Transfer order to Integration process table OnRun
    }
    END.
  }
}

