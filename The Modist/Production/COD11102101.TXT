OBJECT Codeunit 11102101 OM - Application Settings
{
  OBJECT-PROPERTIES
  {
    Date=19/11/15;
    Time=12:00:00 PM;
    Version List=OMA10.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CustomSettingsFile2@1000 : Text;
      FormCaption@1001 : Text;
      KeyArray@1002 : ARRAY [100] OF Text[1024];
      ValueArray@1003 : ARRAY [100] OF Text[1024];
      LookupTableNo@1004 : Integer;
      NoOfSettings@1005 : Integer;

    PROCEDURE GetSetting@1(Key@1000 : Text) : Text;
    VAR
      Value@1001 : Text;
      i@1002 : Integer;
      XmlDocument@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      FOR i := 1 TO NoOfSettings DO
        IF UPPERCASE(KeyArray[i]) = UPPERCASE(Key) THEN
          EXIT(ValueArray[i]);

      XmlDocument := XmlDocument.XmlDocument;

      XmlDocument.Load(CustomSettingsFile);
      XmlNode := XmlDocument.SelectSingleNode('//appSettings/add[@key=''' + Key + ''']');

      IF NOT ISNULL(XmlNode) THEN
        Value := XmlNode.Attributes.Item(1).Value;

      NoOfSettings += 1;
      KeyArray[NoOfSettings] := Key;
      ValueArray[NoOfSettings] := Value;

      EXIT(Value);
    END;

    PROCEDURE ServerName@2() : Text;
    BEGIN
      EXIT(GetSetting('DatabaseServer'));
    END;

    PROCEDURE ServerInstanceName@3() : Text;
    BEGIN
      IF GetSetting('DatabaseInstance') = '' THEN
        EXIT(GetSetting('DatabaseServer'))
      ELSE
        EXIT(GetSetting('DatabaseServer') + '\' + GetSetting('DatabaseInstance'));
    END;

    PROCEDURE DatabaseName@4() : Text;
    BEGIN
      EXIT(GetSetting('DatabaseName'));
    END;

    PROCEDURE ServerInstance@5() : Text;
    BEGIN
      EXIT(GetSetting('ServerInstance'));
    END;

    PROCEDURE SetFormCaption@6(NewValue@1000 : Text);
    BEGIN
      FormCaption := NewValue;
    END;

    PROCEDURE GetFormCaption@7() ExitValue : Text;
    BEGIN
      ExitValue := FormCaption;
    END;

    PROCEDURE SetLookupTableNo@8(NewValue@1000 : Integer);
    BEGIN
      LookupTableNo := NewValue;
    END;

    PROCEDURE GetLookupTableNo@9() : Integer;
    BEGIN
      EXIT(LookupTableNo);
    END;

    PROCEDURE SetSetting@10(Key@1000 : Text;Value@1001 : Text);
    VAR
      i@1002 : Integer;
    BEGIN
      FOR i := 1 TO NoOfSettings DO
        IF UPPERCASE(KeyArray[i]) = UPPERCASE(Key) THEN BEGIN
          ValueArray[i] := Value;
          EXIT;
        END;

      NoOfSettings += 1;
      KeyArray[NoOfSettings] := Key;
      ValueArray[NoOfSettings] := Value;
    END;

    LOCAL PROCEDURE CustomSettingsFile@13() : Text;
    BEGIN
      IF CustomSettingsFile2 = '' THEN
        CustomSettingsFile2 := GetCustomSettingsFile;

      EXIT(CustomSettingsFile2);
    END;

    LOCAL PROCEDURE GetCustomSettingsFile@11() ExitValue : Text;
    VAR
      XmlAttribute@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      XmlDocument@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      ExitValue := APPLICATIONPATH + 'CustomSettings.config';

      XmlDocument := XmlDocument.XmlDocument;

      XmlDocument.Load(InstanceSettingsFile);
      XmlNode := XmlDocument.SelectSingleNode('//appSettings');

      IF NOT ISNULL(XmlNode) THEN BEGIN
        XmlAttribute := XmlNode.Attributes.ItemOf('file');
        IF NOT ISNULL(XmlAttribute) THEN BEGIN
          ExitValue := XmlAttribute.Value;
          IF STRPOS(ExitValue, '\') = 0 THEN
            ExitValue := APPLICATIONPATH + ExitValue;
        END;
      END;
    END;

    LOCAL PROCEDURE InstanceSettingsFile@12() ExitValue : Text;
    VAR
      ImagePath@1000 : Text;
      InstanceName@1001 : Text;
      InstanceSettingsFile@1002 : Text;
      RegistryKey@1003 : Text;
      SplitPos@1004 : Integer;
      Registry@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.Microsoft.Win32.Registry";
    BEGIN
      ExitValue := APPLICATIONPATH + 'Microsoft.Dynamics.Nav.Server.exe.config';

      InstanceName := GetInstanceName;
      RegistryKey := 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\MicrosoftDynamicsNavServer$' + InstanceName;
      ImagePath := Registry.GetValue(RegistryKey, 'ImagePath', '');

      SplitPos := STRPOS(LOWERCASE(ImagePath), '$' + LOWERCASE(InstanceName));

      IF SplitPos > 0 THEN BEGIN
        InstanceSettingsFile := COPYSTR(ImagePath, SplitPos + STRLEN(InstanceName) + 2);
        SplitPos := STRPOS(InstanceSettingsFile, ' ');
        IF SplitPos > 0 THEN BEGIN
          InstanceSettingsFile := COPYSTR(InstanceSettingsFile, SplitPos + 1);
          InstanceSettingsFile := DELCHR(InstanceSettingsFile, '<>', '"');
          ExitValue := InstanceSettingsFile;
        END;
      END;
    END;

    LOCAL PROCEDURE GetInstanceName@14() : Text;
    VAR
      ActiveSession@1000 : Record 2000000110;
    BEGIN
      ActiveSession.GET(SERVICEINSTANCEID, SESSIONID);
      EXIT(ActiveSession."Server Instance Name");
    END;

    PROCEDURE ApplicationVersion@15() : Text;
    VAR
      Setup@1000 : Record 11102035;
    BEGIN
      // If ISTEMPORARY exist
      IF NOT Setup.ISTEMPORARY THEN
        EXIT('9.0');

      // If Encryption exist
      IF ENCRYPTIONENABLED OR NOT ENCRYPTIONENABLED THEN
        EXIT('8.0');

      // If TenantId command exists
      IF (TENANTID <> '') OR (TENANTID <> '1') THEN
        EXIT('7.1');

      EXIT('7.0');
    END;

    PROCEDURE ComputerName@16() : Text;
    VAR
      Mgt@1000 : Codeunit 11102035;
      ClientEnvironment@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Environment" RUNONCLIENT;
      ServerEnvironment@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Environment";
    BEGIN
      IF Mgt.CanRunDotNet THEN
        IF GUIALLOWED THEN
          EXIT(ClientEnvironment.MachineName)
        ELSE
          EXIT(ServerEnvironment.MachineName);
    END;

    PROCEDURE SetServerInstanceValues@17(VAR ServerComputerName@1000 : Text;VAR ServerInstanceName@1001 : Text;VAR ManagementPort@1002 : Integer);
    VAR
      ServerInstance@1003 : Record 2000000112;
    BEGIN
      IF ServerInstance.GET(SERVICEINSTANCEID) THEN
        WITH ServerInstance DO BEGIN
          ServerComputerName := "Server Computer Name";
          ServerInstanceName := "Server Instance Name";
          ManagementPort := "Management Port";
        END;
    END;

    BEGIN
    END.
  }
}

