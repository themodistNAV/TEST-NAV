OBJECT Codeunit 9651 Document Report Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NotImplementedErr@1002 : TextConst 'ENU=This option is not available.;ENG=This option is not available.';
      TemplateValidationQst@1000 : TextConst 'ENU=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the layout validation:\%1\Do you want to continue?;ENG=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the layout validation:\%1\Do you want to continue?';
      TemplateValidationErr@1003 : TextConst 'ENU=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the document validation:\%1\You must update the layout to match the current report design.;ENG=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the document validation:\%1\You must update the layout to match the current report design.';
      AbortWithValidationErr@1001 : TextConst 'ENU=The Word layout action has been canceled because of validation errors.;ENG=The Word layout action has been cancelled because of validation errors.';
      TemplateValidationUpdateQst@1004 : TextConst 'ENU=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the layout validation:\%1\Do you want to run an automatic update?;ENG=The Word layout does not comply with the current report design (for example, fields are missing or the report ID is wrong).\The following errors were detected during the layout validation:\%1\Do you want to run an automatic update?';
      TemplateAfterUpdateValidationErr@1006 : TextConst 'ENU=The automatic update could not resolve all the conflicts in the current Word layout. For example, the layout uses fields that are missing in the report design or the report ID is wrong.\The following errors were detected:\%1\You must manually update the layout to match the current report design.;ENG=The automatic update could not resolve all the conflicts in the current Word layout. For example, the layout uses fields that are missing in the report design or the report ID is wrong.\The following errors were detected:\%1\You must manually update the layout to match the current report design.';
      UpgradeMessageMsg@1005 : TextConst 'ENU=The report upgrade process returned the following log messages:\%1.;ENG=The report upgrade process returned the following log messages:\%1.';
      NoReportLayoutUpgradeRequiredMsg@1007 : TextConst 'ENU=The layout upgrade process completed without detecting any required changes in the current application.;ENG=The layout upgrade process completed without detecting any required changes in the current application.';

    PROCEDURE MergeWordLayout@5(ReportID@1000 : Integer;ReportAction@1007 : 'SaveAsPdf,SaveAsWord,SaveAsExcel,Preview,Print';InStrXmlData@1002 : InStream;FileName@1001 : Text);
    VAR
      ReportLayoutSelection@1011 : Record 9651;
      CustomReportLayout@1003 : Record 9650;
      TempBlob@1009 : Record 99008535;
      FileMgt@1008 : Codeunit 419;
      InStrWordDoc@1006 : InStream;
      OutStrWordDoc@1005 : OutStream;
      NAVWordXMLMerger@1004 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
      DoConvertToPdf@1010 : Boolean;
      CustomLayoutID@1012 : Integer;
    BEGIN
      // FileName contains printername for ReportAction::Print.
      // Temporarily selected layout for Design-time report execution?
      IF ReportLayoutSelection.GetTempLayoutSelected <> 0 THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE  // Normal selection
        IF ReportLayoutSelection.GET(ReportID,COMPANYNAME) AND
           (ReportLayoutSelection.Type = ReportLayoutSelection.Type::"Custom Layout")
        THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF CustomLayoutID <> 0 THEN
        IF NOT CustomReportLayout.GET(CustomLayoutID) THEN
          CustomLayoutID := 0;

      IF CustomLayoutID = 0 THEN
        REPORT.WORDLAYOUT(ReportID,InStrWordDoc)
      ELSE BEGIN
        ValidateAndUpdateWordLayoutOnRecord(CustomReportLayout);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStrWordDoc);
        ValidateWordLayoutCheckOnly(ReportID,InStrWordDoc);
      END;
      TempBlob.Blob.CREATEOUTSTREAM(OutStrWordDoc);

      OutStrWordDoc := NAVWordXMLMerger.MergeWordDocument(InStrWordDoc,InStrXmlData,OutStrWordDoc) ;
      COMMIT;

      IF ReportAction = ReportAction::SaveAsPdf THEN BEGIN
        DoConvertToPdf := TRUE;
        ConvertToPdf(TempBlob);
      END;

      CASE ReportAction OF
        ReportAction::SaveAsPdf,ReportAction::SaveAsWord:
          IF FileName = '' THEN
            FileMgt.BLOBExport(TempBlob,UserFileName(ReportID,DoConvertToPdf),TRUE)
          ELSE
            TempBlob.Blob.EXPORT(FileName);
        ReportAction::SaveAsExcel:
          ERROR(NotImplementedErr);
        ReportAction::Print:
          PrintWordDoc(ReportID,TempBlob,FileName);
        ReportAction::Preview:
          FileMgt.BLOBExport(TempBlob,UserFileName(ReportID,DoConvertToPdf),TRUE);
      END;
    END;

    PROCEDURE ValidateWordLayout@2(ReportID@1001 : Integer;DocumentStream@1000 : InStream;useConfirm@1004 : Boolean;updateContext@1005 : Boolean) : Boolean;
    VAR
      NAVWordXMLMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
      ValidationErrors@1003 : Text;
      ValidationErrorFormat@1006 : Text;
    BEGIN
      ValidationErrors := NAVWordXMLMerger.ValidateWordDocumentTemplate(DocumentStream,REPORT.WORDXMLPART(ReportID,TRUE));
      IF ValidationErrors <> '' THEN BEGIN
        IF useConfirm THEN BEGIN
          IF NOT CONFIRM(TemplateValidationQst,FALSE,ValidationErrors) THEN
            ERROR(AbortWithValidationErr);
        END ELSE BEGIN
          IF updateContext THEN
            ValidationErrorFormat := TemplateAfterUpdateValidationErr
          ELSE
            ValidationErrorFormat := TemplateValidationErr;

          ERROR(ValidationErrorFormat,ValidationErrors);
        END;

        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ValidateWordLayoutCheckOnly@4(ReportID@1001 : Integer;DocumentStream@1000 : InStream);
    VAR
      NAVWordXMLMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
      ValidationErrors@1003 : Text;
      ValidationErrorFormat@1006 : Text;
    BEGIN
      ValidationErrors := NAVWordXMLMerger.ValidateWordDocumentTemplate(DocumentStream,REPORT.WORDXMLPART(ReportID,TRUE));
      IF ValidationErrors <> '' THEN BEGIN
        ValidationErrorFormat := TemplateAfterUpdateValidationErr;
        MESSAGE(ValidationErrorFormat,ValidationErrors);
      END;
    END;

    LOCAL PROCEDURE ValidateAndUpdateWordLayoutOnRecord@7(CustomReportLayout@1001 : Record 9650) : Boolean;
    VAR
      NAVWordXMLMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
      DocumentStream@1005 : InStream;
      ValidationErrors@1003 : Text;
    BEGIN
      CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::Word);
      CustomReportLayout.CALCFIELDS(Layout);
      CustomReportLayout.Layout.CREATEINSTREAM(DocumentStream);
      NAVWordXMLMerger := NAVWordXMLMerger.WordReportManager;

      ValidationErrors :=
        NAVWordXMLMerger.ValidateWordDocumentTemplate(DocumentStream,REPORT.WORDXMLPART(CustomReportLayout."Report ID",TRUE));
      IF ValidationErrors <> '' THEN BEGIN
        IF CONFIRM(TemplateValidationUpdateQst,FALSE,ValidationErrors) THEN BEGIN
          ValidationErrors := CustomReportLayout.TryUpdateLayout(FALSE);
          COMMIT;
          EXIT(TRUE);
        END;
        ERROR(TemplateValidationErr,ValidationErrors);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE UpdateWordLayout@3(DocumentStream@1001 : InStream;VAR UpdateStream@1002 : OutStream;CachedCustomPart@1003 : Text;CurrentCustomPart@1004 : Text;ContinueOnError@1000 : Boolean) : Boolean;
    VAR
      NAVWordXMLMerger@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
    BEGIN
      NAVWordXMLMerger := NAVWordXMLMerger.WordReportManager;
      EXIT(NAVWordXMLMerger.UpdateWordDocumentLayout(DocumentStream,UpdateStream,CachedCustomPart,CurrentCustomPart,ContinueOnError));
    END;

    PROCEDURE TryUpdateWordLayout@12(DocumentStream@1001 : InStream;VAR UpdateStream@1002 : OutStream;CachedCustomPart@1003 : Text;CurrentCustomPart@1004 : Text) : Text;
    VAR
      NAVWordXMLMerger@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
    BEGIN
      NAVWordXMLMerger := NAVWordXMLMerger.WordReportManager;
      NAVWordXMLMerger.UpdateWordDocumentLayout(DocumentStream,UpdateStream,CachedCustomPart,CurrentCustomPart,TRUE);
      EXIT(NAVWordXMLMerger.LastUpdateError);
    END;

    LOCAL PROCEDURE UpdateRdlcLayout@8(reportId@1001 : Integer;Rdlc@1002 : Text;CachedCustomPart@1003 : Text;CurrentCustomPart@1004 : Text) : Text;
    VAR
      NAVWordXMLMerger@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.RdlcReportManager";
    BEGIN
      EXIT(NAVWordXMLMerger.UpdateRdlcLayout(reportId,Rdlc,CachedCustomPart,CurrentCustomPart));
    END;

    PROCEDURE TryUpdateRdlcLayout@13(reportId@1001 : Integer;RdlcStream@1002 : InStream;RdlcUpdatedStream@1000 : OutStream;CachedCustomPart@1003 : Text;CurrentCustomPart@1004 : Text;IgnoreDelete@1005 : Boolean) : Text;
    VAR
      NAVWordXMLMerger@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.RdlcReportManager";
    BEGIN
      EXIT(NAVWordXMLMerger.TryUpdateRdlcLayout(reportId,RdlcStream,RdlcUpdatedStream,
          CachedCustomPart,CurrentCustomPart,IgnoreDelete));
    END;

    PROCEDURE NewWordLayout@11(ReportId@1000 : Integer;VAR DocumentStream@1001 : OutStream);
    VAR
      NAVWordXmlMerger@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.WordReportManager";
    BEGIN
      NAVWordXmlMerger.NewWordDocumentLayout(DocumentStream,REPORT.WORDXMLPART(ReportId));
    END;

    LOCAL PROCEDURE ConvertToPdf@1(VAR TempBlob@1015 : Record 99008535);
    VAR
      TempBlobPdf@1006 : Record 99008535;
      InStreamWordDoc@1007 : InStream;
      OutStreamPdfDoc@1008 : OutStream;
      PdfWriter@1002 : DotNet "'Microsoft.Dynamics.Nav.PdfWriter, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.PdfWriter.WordToPdf";
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStreamWordDoc);
      TempBlobPdf.Blob.CREATEOUTSTREAM(OutStreamPdfDoc);
      PdfWriter.ConvertToPdf(InStreamWordDoc,OutStreamPdfDoc);
      TempBlob.Blob := TempBlobPdf.Blob;
    END;

    LOCAL PROCEDURE PrintWordDoc@15(ReportID@1003 : Integer;VAR TempBlob@1015 : Record 99008535;PrinterName@1000 : Text);
    VAR
      FileMgt@1001 : Codeunit 419;
    BEGIN
      IF FileMgt.IsWindowsClient THEN
        PrintWordDocInWord(ReportID,TempBlob,PrinterName)
      ELSE
        IF FileMgt.IsWebClient THEN
          FileMgt.BLOBExport(TempBlob,UserFileName(ReportID,FALSE),TRUE)
        ELSE
          PrintWordDocOnServer(TempBlob,PrinterName);
    END;

    LOCAL PROCEDURE PrintWordDocInWord@17(ReportID@1006 : Integer;TempBlob@1015 : Record 99008535;PrinterName@1004 : Text);
    VAR
      FileMgt@1005 : Codeunit 419;
      WordApplication@1001 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      WordHelper@1016 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHelper" RUNONCLIENT;
      FileName@1003 : Text;
      T0@1002 : DateTime;
    BEGIN
      IF GetWordApplication(WordApplication) AND NOT ISNULL(WordApplication) THEN BEGIN
        FileName := STRSUBSTNO('%1.docx',CREATEGUID);
        FileName := FileMgt.BLOBExport(TempBlob,FileName,FALSE);

        WordDocument := WordHelper.CallOpen(WordApplication,FileName,FALSE,FALSE);
        WordHelper.CallPrintOut(WordDocument,PrinterName);

        T0 := CURRENTDATETIME;
        WHILE (WordApplication.BackgroundPrintingStatus > 0) AND (CURRENTDATETIME < T0 + 180000) DO
          SLEEP(250);
        WordHelper.CallQuit(WordApplication,FALSE);
        IF DeleteClientFile(FileName) THEN;
      END ELSE BEGIN
        IF (PrinterName <> '') AND IsValidPrinter(PrinterName) THEN
          PrintWordDocOnServer(TempBlob,PrinterName) // Don't print on server if the printer has not been setup.
        ELSE
          FileMgt.BLOBExport(TempBlob,UserFileName(ReportID,FALSE),TRUE);
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE DeleteClientFile@20(FileName@1000 : Text);
    VAR
      FileMgt@1001 : Codeunit 419;
    BEGIN
      FileMgt.DeleteClientFile(FileName);
    END;

    LOCAL PROCEDURE IsValidPrinter@19(PrinterName@1000 : Text) : Boolean;
    VAR
      Printer@1001 : Record 2000000039;
    BEGIN
      Printer.SETFILTER(Name,PrinterName);
      Printer.FINDFIRST;
      EXIT(NOT Printer.ISEMPTY);
    END;

    [TryFunction]
    LOCAL PROCEDURE GetWordApplication@18(VAR WordApplication@1000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT);
    BEGIN
      WordApplication := WordApplication.ApplicationClass;
    END;

    LOCAL PROCEDURE PrintWordDocOnServer@16(TempBlob@1001 : Record 99008535;PrinterName@1000 : Text);
    VAR
      PdfWriter@1003 : DotNet "'Microsoft.Dynamics.Nav.PdfWriter, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.PdfWriter.WordToPdf";
      InStreamWordDoc@1002 : InStream;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStreamWordDoc);
      PdfWriter.PrintWordDoc(InStreamWordDoc,PrinterName);
    END;

    LOCAL PROCEDURE UserFileName@6(ReportID@1000 : Integer;DoConvertToPdf@1003 : Boolean) : Text;
    VAR
      AllObjWithCaption@1001 : Record 2000000058;
      UserFileType@1002 : Text[10];
    BEGIN
      AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Report,ReportID);
      UserFileType := '%1.docx';
      IF DoConvertToPdf THEN
        UserFileType := '%1.pdf';
      EXIT(STRSUBSTNO(UserFileType,AllObjWithCaption."Object Caption"));
    END;

    PROCEDURE ApplyUpgradeToReports@10(VAR ReportUpgradeCollection@1007 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.ReportUpgradeCollection";testOnly@1000 : Boolean) : Boolean;
    VAR
      CustomReportLayout@1005 : Record 9650;
      ReportUpgrade@1006 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.ReportUpgradeSet";
      ReportChangeLogCollection@1008 : DotNet "'Microsoft.Dynamics.Nav.Types.Report, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Types.Report.IReportChangeLogCollection";
    BEGIN
      FOREACH ReportUpgrade IN ReportUpgradeCollection DO BEGIN
        CustomReportLayout.SETFILTER("Report ID",FORMAT(ReportUpgrade.ReportId()));
        IF CustomReportLayout.FIND('-') THEN
          REPEAT
            CustomReportLayout.ApplyUpgrade(ReportUpgrade,ReportChangeLogCollection,testOnly);
          UNTIL CustomReportLayout.NEXT = 0;
      END;

      IF ISNULL(ReportChangeLogCollection) THEN BEGIN // Don't break upgrade process with user information
        IF (CURRENTCLIENTTYPE <> CLIENTTYPE::Background) AND (CURRENTCLIENTTYPE <> CLIENTTYPE::Management) THEN
          MESSAGE(NoReportLayoutUpgradeRequiredMsg);

        EXIT(FALSE);
      END;

      ProcessUpgradeLog(ReportChangeLogCollection);
      EXIT(ReportChangeLogCollection.Count > 0);
    END;

    PROCEDURE CalculateUpgradeChangeSet@21(VAR ReportUpgradeCollection@1002 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.ReportUpgradeCollection");
    VAR
      CustomReportLayout@1000 : Record 9650;
      ReportUpgradeSet@1001 : DotNet "'Microsoft.Dynamics.Nav.Types.Report, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Types.Report.IReportUpgradeSet";
    BEGIN
      CustomReportLayout.SETAUTOCALCFIELDS(CustomReportLayout."Custom XML Part");
      WITH CustomReportLayout DO
        IF FIND('-') THEN
          REPEAT
            ReportUpgradeSet := ReportUpgradeCollection.AddReport("Report ID"); // runtime will load the current XmlPart from metadata
            IF NOT ISNULL(ReportUpgradeSet) THEN
              ReportUpgradeSet.CalculateAutoChangeSet(GetCustomXmlPart);
          UNTIL NEXT <> 1;
    END;

    LOCAL PROCEDURE ProcessUpgradeLog@9(VAR ReportChangeLogCollection@1000 : DotNet "'Microsoft.Dynamics.Nav.Types.Report, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Types.Report.IReportChangeLogCollection");
    VAR
      ReportLayoutUpdateLog@1001 : Codeunit 9656;
    BEGIN
      IF ISNULL(ReportChangeLogCollection) THEN
        EXIT;

      IF (CURRENTCLIENTTYPE <> CLIENTTYPE::Background) AND (CURRENTCLIENTTYPE <> CLIENTTYPE::Management) THEN
        ReportLayoutUpdateLog.ViewLog(ReportChangeLogCollection)
      ELSE
        MESSAGE(UpgradeMessageMsg,FORMAT(ReportChangeLogCollection));
    END;

    PROCEDURE BulkUpgrade@14(testMode@1002 : Boolean);
    VAR
      ReportUpgradeCollection@1000 : DotNet "'Microsoft.Dynamics.Nav.DocumentReport, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DocumentReport.ReportUpgradeCollection";
    BEGIN
      ReportUpgradeCollection := ReportUpgradeCollection.ReportUpgradeCollection;
      CalculateUpgradeChangeSet(ReportUpgradeCollection);
      ApplyUpgradeToReports(ReportUpgradeCollection,testMode);
    END;

    BEGIN
    END.
  }
}

