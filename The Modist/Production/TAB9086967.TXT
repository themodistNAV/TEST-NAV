OBJECT Table 9086967 nF. Log
{
  OBJECT-PROPERTIES
  {
    Date=22/12/16;
    Time=12:00:00 PM;
    Version List=NF2016.17.11;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               NfRecordAuditToolkit.UpdateCreated(Rec."Created By", Rec."Created Date Time");
             END;

    CaptionML=[ENU=nForcement Log;
               ENG=nForcement Log];
    LookupPageID=Page9086971;
    DrillDownPageID=Page9086971;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 10  ;   ;Entry Type          ;Option        ;OnValidate=VAR
                                                                lIndentation@1000000000 : Integer;
                                                              BEGIN
                                                                CASE (Rec."Entry Type") OF
                                                                  Rec."Entry Type"::Activity: lIndentation := 0;
                                                                  Rec."Entry Type"::"Event": lIndentation := 1;
                                                                  ELSE lIndentation := 0;
                                                                END;
                                                                Rec.VALIDATE(Indentation, lIndentation);
                                                              END;

                                                   CaptionML=[ENU=Entry Type;
                                                              ENG=Entry Type];
                                                   OptionCaptionML=[ENU=" ,Activity,Event";
                                                                    ENG=" ,Activity,Event"];
                                                   OptionString=[ ,Activity,Event] }
    { 20  ;   ;Activity Type       ;Text250       ;CaptionML=[ENU=Activity Type;
                                                              ENG=Activity Type] }
    { 21  ;   ;Activity ID         ;Integer       ;CaptionML=[ENU=Activity ID;
                                                              ENG=Activity ID] }
    { 30  ;   ;Result              ;Option        ;CaptionML=[ENU=Result;
                                                              ENG=Result];
                                                   OptionCaptionML=[ENU=" ,Success,Warning,Error";
                                                                    ENG=" ,Success,Warning,Error"];
                                                   OptionString=[ ,Success,Warning,Error] }
    { 40  ;   ;Message 1           ;Text250       ;CaptionML=[ENU=Message 1;
                                                              ENG=Message 1] }
    { 41  ;   ;Message 2           ;Text250       ;CaptionML=[ENU=Message 2;
                                                              ENG=Message 2] }
    { 42  ;   ;Message 3           ;Text250       ;CaptionML=[ENU=Message 3;
                                                              ENG=Message 3] }
    { 43  ;   ;Message 4           ;Text250       ;CaptionML=[ENU=Message 4;
                                                              ENG=Message 4] }
    { 44  ;   ;Message 5           ;Text24        ;CaptionML=[ENU=Message 5;
                                                              ENG=Message 5] }
    { 50  ;   ;Confirmed           ;Boolean       ;OnValidate=BEGIN
                                                                Rec.VALIDATE("Confirmed By", NfIIF.Text(Rec.Confirmed, USERID(), ''));
                                                                Rec.VALIDATE("Confirmed Date Time", NfIIF.DateTime(Rec.Confirmed, CURRENTDATETIME(), 0DT));
                                                                IF (Rec."Entry Type" = Rec."Entry Type"::Activity) THEN
                                                                BEGIN
                                                                  NfLog.RESET();
                                                                  NfLog.SETCURRENTKEY("Entry Type", "Activity ID", Result);
                                                                  NfLog.SETRANGE("Entry Type", NfLog."Entry Type"::"Event");
                                                                  NfLog.SETRANGE("Activity ID", Rec.ID);
                                                                  NfLog.SETFILTER(Result, '%1|%2', NfLog.Result::Error, NfLog.Result::Warning);
                                                                  IF (NfLog.FINDSET(TRUE)) THEN
                                                                  REPEAT
                                                                    IF ( NOT (NfLog.Confirmed)) THEN
                                                                    BEGIN
                                                                      NfLog.VALIDATE(Confirmed, TRUE);
                                                                      NfLog.MODIFY(TRUE);
                                                                    END;
                                                                  UNTIL (NfLog.NEXT() = 0);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Confirmed;
                                                              ENG=Confirmed] }
    { 51  ;   ;Confirmed By        ;Code50        ;OnLookup=BEGIN
                                                              NfRecordAuditToolkit.UserLookup(Rec."Confirmed By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Confirmed By;
                                                              ENG=Confirmed By] }
    { 52  ;   ;Confirmed Date Time ;DateTime      ;CaptionML=[ENU=Confirmed Date Time;
                                                              ENG=Confirmed Date Time] }
    { 60  ;   ;Indentation         ;Integer       ;CaptionML=[ENU=Indentation;
                                                              ENG=Indentation] }
    { 70  ;   ;Has Events          ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("nF. Log" WHERE (Activity ID=FIELD(ID),
                                                                                      Entry Type=CONST(Event)));
                                                   CaptionML=[ENU=Has Events;
                                                              ENG=Has Events];
                                                   Editable=No }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              NfRecordAuditToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Result,Confirmed                         }
    {    ;Activity ID,Entry Type                   }
    {    ;Entry Type,Activity ID,Result            }
    {    ;Created Date Time                        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NfLog@1000000002 : Record 9086967;
      NfIIF@1000000000 : Codeunit 9086975;
      NfRecordAuditToolkit@1000000001 : Codeunit 9086951;
      CalculatedResult@1000000003 : Option;

    PROCEDURE GetMessage@1000000000() : Text;
    BEGIN
      ///<summary>Returning joined message</summary>
      ///<returns>The message</returns>

      EXIT(Rec."Message 1" + Rec."Message 2" + Rec."Message 3" + Rec."Message 4" + Rec."Message 5");
    END;

    PROCEDURE SetMessage@1000000001(pMessage@1000000000 : Text);
    BEGIN
      ///<summary>Setting message</summary>
      ///<param name="pMessage">The message</param>

      Rec."Message 1" := COPYSTR(pMessage, 1, 250);
      Rec."Message 2" := COPYSTR(pMessage, 251, 250);
      Rec."Message 3" := COPYSTR(pMessage, 501, 250);
      Rec."Message 4" := COPYSTR(pMessage, 751, 250);
      Rec."Message 5" := COPYSTR(pMessage, 1001, 24);
    END;

    PROCEDURE AddActivity@1000000015(pActivityType@1000000000 : Text;pMessage@1000000001 : Text;pResult@1000000002 : Option;pBackgroundSession@1000000003 : Boolean) : Integer;
    BEGIN
      ///<summary>Adding activity</summary>
      ///<param name="pActivityType">Activity type</param>
      ///<param name="pMessage">Message</param>
      ///<param name="pResult">Result</param>
      ///<param name="pBackgroundSession">Flag to fire a background session</param>
      ///<returns>ID</returns>

      EXIT(Add(Rec."Entry Type"::Activity, pActivityType, 0, pResult, pMessage, pBackgroundSession));
    END;

    PROCEDURE AddNoResultActivity@1000000009(pActivityType@1000000000 : Text;pMessage@1000000001 : Text;pBackgroundSession@1000000002 : Boolean) : Integer;
    BEGIN
      ///<summary>Adding no-result activity</summary>
      ///<param name="pActivityType">Activity type</param>
      ///<param name="pMessage">Message</param>
      ///<param name="pBackgroundSession">Flag to fire a background session</param>
      ///<returns>ID</returns>

      EXIT(Add(Rec."Entry Type"::Activity, pActivityType, 0, Rec.Result::" ", pMessage, pBackgroundSession));
    END;

    PROCEDURE AddSuccessActivity@1000000005(pActivityType@1000000001 : Text;pMessage@1000000003 : Text;pBackgroundSession@1000000000 : Boolean) : Integer;
    BEGIN
      ///<summary>Adding success activity</summary>
      ///<param name="pActivityType">Activity type</param>
      ///<param name="pMessage">Message</param>
      ///<param name="pBackgroundSession">Flag to fire a background session</param>
      ///<returns>ID</returns>

      EXIT(Add(Rec."Entry Type"::Activity, pActivityType, 0, Rec.Result::Success, pMessage, pBackgroundSession));
    END;

    PROCEDURE AddWarningActivity@1000000007(pActivityType@1000000001 : Text;pMessage@1000000003 : Text;pBackgroundSession@1000000000 : Boolean) : Integer;
    BEGIN
      ///<summary>Adding warning activity</summary>
      ///<param name="pActivityType">Activity type</param>
      ///<param name="pMessage">Message</param>
      ///<param name="pBackgroundSession">Flag to fire a background session</param>
      ///<returns>ID</returns>

      EXIT(Add(Rec."Entry Type"::Activity, pActivityType, 0, Rec.Result::Warning, pMessage, pBackgroundSession));
    END;

    PROCEDURE AddErrorActivity@1000000006(pActivityType@1000000001 : Text;pMessage@1000000003 : Text;pBackgroundSession@1000000000 : Boolean) : Integer;
    BEGIN
      ///<summary>Adding error activity</summary>
      ///<param name="pActivityType">Activity type</param>
      ///<param name="pMessage">Message</param>
      ///<param name="pBackgroundSession">Flag to fire a background session</param>
      ///<returns>ID</returns>

      EXIT(Add(Rec."Entry Type"::Activity, pActivityType, 0, Rec.Result::Error, pMessage, pBackgroundSession));
    END;

    PROCEDURE AddEvent@1000000016(pActivityType@1000000001 : Text;pActivityId@1000000002 : Integer;pMessage@1000000000 : Text;pResult@1000000003 : Option;pBackgroundSession@1000000004 : Boolean) : Integer;
    BEGIN
      ///<summary>Adding an event</summary>
      ///<param name="pActivityType">Activity type</param>
      ///<param name="pActivityId">Activity ID</param>
      ///<param name="pMessage">Message</param>
      ///<param name="pResult">Result</param>
      ///<param name="pBackgroundSession">Flag to fire a background session</param>
      ///<returns>ID</returns>

      EXIT(Add(Rec."Entry Type"::"Event", pActivityType, pActivityId, pResult, pMessage, pBackgroundSession));
    END;

    PROCEDURE AddNoResultEvent@1000000010(pActivityType@1000000001 : Text;pActivityId@1000000002 : Integer;pMessage@1000000000 : Text;pBackgroundSession@1000000003 : Boolean) : Integer;
    BEGIN
      ///<summary>Adding no-result event</summary>
      ///<param name="pActivityType">Activity type</param>
      ///<param name="pActivityId">Activity ID</param>
      ///<param name="pMessage">Message</param>
      ///<param name="pBackgroundSession">Flag to fire a background session</param>
      ///<returns>ID</returns>

      EXIT(Add(Rec."Entry Type"::"Event", pActivityType, pActivityId, Rec.Result::" ", pMessage, pBackgroundSession));
    END;

    PROCEDURE AddSuccessEvent@1000000008(pActivityType@1000000002 : Text;pActivityId@1000000001 : Integer;pMessage@1000000000 : Text;pBackgroundSession@1000000003 : Boolean) : Integer;
    BEGIN
      ///<summary>Adding success event</summary>
      ///<param name="pActivityType">Activity type</param>
      ///<param name="pActivityId">Activity ID</param>
      ///<param name="pMessage">Message</param>
      ///<param name="pBackgroundSession">Flag to fire a background session</param>
      ///<returns>ID</returns>

      EXIT(Add(Rec."Entry Type"::"Event", pActivityType, pActivityId, Rec.Result::Success, pMessage, pBackgroundSession));
    END;

    PROCEDURE AddWarningEvent@1000000003(pActivityType@1000000001 : Text;pActivityId@1000000002 : Integer;pMessage@1000000003 : Text;pBackgroundSession@1000000000 : Boolean) : Integer;
    BEGIN
      ///<summary>Adding warning event</summary>
      ///<param name="pActivityType">Activity type</param>
      ///<param name="pActivityId">Activity ID</param>
      ///<param name="pMessage">Message</param>
      ///<param name="pBackgroundSession">Flag to fire a background session</param>
      ///<returns>ID</returns>

      EXIT(Add(Rec."Entry Type"::"Event", pActivityType, pActivityId, Rec.Result::Warning, pMessage, pBackgroundSession));
    END;

    PROCEDURE AddErrorEvent@1000000002(pActivityType@1000000001 : Text;pActivityId@1000000002 : Integer;pMessage@1000000003 : Text;pBackgroundSession@1000000000 : Boolean) : Integer;
    BEGIN
      ///<summary>Adding error event</summary>
      ///<param name="pActivityType">Activity type</param>
      ///<param name="pActivityId">Activity ID</param>
      ///<param name="pMessage">Message</param>
      ///<param name="pBackgroundSession">Flag to fire a background session</param>
      ///<returns>ID</returns>

      EXIT(Add(Rec."Entry Type"::"Event", pActivityType, pActivityId, Rec.Result::Error, pMessage, pBackgroundSession));
    END;

    LOCAL PROCEDURE Add@1000000004(pEntryType@1000000000 : Option;pActivityType@1000000001 : Text;pActivityId@1000000002 : Integer;pResult@1000000004 : Option;pMessage@1000000003 : Text;pBackgroundSession@1000000005 : Boolean) : Integer;
    VAR
      lSessionId@1000000006 : Integer;
      lId@1000000007 : Integer;
    BEGIN
      ///<summary>Adding a new log entry</summary>
      ///<param name="pEntryType">Entry type</param>
      ///<param name="pActivityType">Activity type</param>
      ///<param name="pActivityId">Activity ID</param>
      ///<param name="pResult">Result</param>
      ///<param name="pMessage">Message</param>
      ///<param name="pBackgroundSession">Flag to fire a background session</param>
      ///<returns>ID (only if background session is not fired)</returns>

      lId := 0;

      Rec.INIT();
      Rec.ID := 0;
      Rec.VALIDATE("Entry Type", pEntryType);
      Rec.VALIDATE("Activity Type", pActivityType);
      Rec.VALIDATE("Activity ID", pActivityId);
      Rec.VALIDATE(Result, pResult);
      Rec.SetMessage(pMessage);
      IF (pBackgroundSession) THEN
        STARTSESSION(lSessionId, CODEUNIT::"nF. Add Log", COMPANYNAME(), Rec)
      ELSE
      BEGIN
        Rec.INSERT(TRUE);
        IF (Rec."Entry Type" = Rec."Entry Type"::Activity) THEN
        BEGIN
          Rec.VALIDATE("Activity ID", Rec.ID);
          Rec.MODIFY();
        END;
        UpdateCalculatedResult();
        lId := Rec.ID;
      END;

      EXIT(lId);
    END;

    PROCEDURE GetResultStyle@1000000011() : Text;
    BEGIN
      ///<summary>Returning result style</summary>
      ///<returns>The style</returns>

      CASE (Rec.Result) OF
        Rec.Result::Error: EXIT(NfIIF.Text(Rec.Confirmed, 'Attention', 'Unfavorable'));
        Rec.Result::Warning: EXIT('Ambiguous');
        Rec.Result::Success: EXIT('Favorable');
      END;

      EXIT('Standard');
    END;

    PROCEDURE GetResultStyleFor@1000000014(pResult@1000000000 : Option) : Text;
    VAR
      lNfLog@1000000001 : Record 9086967;
    BEGIN
      ///<summary>Returning result style for given result</summary>
      ///<param name="pResult">The result</param>
      ///<returns>The style</returns>

      lNfLog.Result := pResult;
      EXIT(lNfLog.GetResultStyle());
    END;

    PROCEDURE GetCalculatedResult@1000000012() : Integer;
    BEGIN
      ///<summary>Returning calculated result</summary>
      ///<returns>The result</returns>

      EXIT(CalculatedResult);
    END;

    LOCAL PROCEDURE UpdateCalculatedResult@1000000013();
    BEGIN
      ///<summary>Updating calculated result</summary>

      CASE (Rec.Result) OF
        Rec.Result::Success: CalculatedResult := NfIIF.Integer(CalculatedResult IN [Rec.Result::Error, Rec.Result::Warning], CalculatedResult, Rec.Result);
        Rec.Result::Warning: CalculatedResult := NfIIF.Integer(CalculatedResult = Rec.Result::Error, CalculatedResult, Rec.Result);
        ELSE CalculatedResult := Rec.Result;
      END;
    END;

    BEGIN
    {
      ///<summary>nForcement log</summary>
      ///<remarks>The log should be cleared periodically - there is a job queue codeunit and nForcmeent setup field for it</remarks>
      ///<change version="NF2016.17" initials="JH" date="2016-06-24">Created</change>
      ///<change version="NF2016.17.11" initials="JH" date="2016-11-03">Logic changes, bug fixes</change>
    }
    END.
  }
}

