OBJECT Table 9062272 File Attachment
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=VAR
               FAttach@1000000000 : Record 9062272;
               NoSeries@1000000001 : Code[20];
             BEGIN
               nHanceSetup.GET;

               IF "No." = '' THEN BEGIN
                 NoSeriesMgt.InitSeries(nHanceSetup."File Attachment Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               "Created By" := UPPERCASE(USERID);
               "Date Created" := TODAY;

               "Company Name" := COPYSTR(COMPANYNAME,1,MAXSTRLEN("Company Name")); //DOC NA2015.4

               SetIcon;
             END;

    OnModify=VAR
               FAttach@1000000000 : Record 9062272;
             BEGIN
               "Last Modified By" := UPPERCASE(USERID);
               "Last Modified" := TODAY;

               SetIcon;
               SetRecordDescription;
             END;

    OnRename=BEGIN
               "Last Modified By" := UPPERCASE(USERID);
               "Last Modified" := TODAY;
             END;

    CaptionML=[ENU=File Attachment;
               ENG=File Attachment;
               ENC=File Attachment];
    LookupPageID=Page9062313;
    DrillDownPageID=Page9062313;
  }
  FIELDS
  {
    { 1   ;   ;Table ID            ;Integer       ;TableRelation=Object.ID WHERE (Type=FILTER(Table));
                                                   OnValidate=VAR
                                                                TempTableName@1102633000 : Text[30];
                                                              BEGIN
                                                              END;

                                                   OnLookup=VAR
                                                              TempTableID@1102633000 : Integer;
                                                            BEGIN
                                                            END;

                                                   CaptionML=[ENU=Table ID;
                                                              ENG=Table ID;
                                                              ENC=Table ID];
                                                   NotBlank=Yes }
    { 2   ;   ;Primary Key Value 1 ;Code50        ;TableRelation=IF (Table ID=CONST(18)) Customer
                                                                 ELSE IF (Table ID=CONST(23)) Vendor
                                                                 ELSE IF (Table ID=CONST(81)) "Gen. Journal Line"
                                                                 ELSE IF (Table ID=CONST(270)) "Bank Account"
                                                                 ELSE IF (Table ID=CONST(5200)) Employee
                                                                 ELSE IF (Table ID=CONST(5600)) "Fixed Asset";
                                                   CaptionML=[ENU=Primary Key Value 1;
                                                              ENG=Primary Key Value 1;
                                                              ENC=Primary Key Value 1] }
    { 3   ;   ;Primary Key Value 2 ;Code50        ;CaptionML=[ENU=Primary Key Value 2;
                                                              ENG=Primary Key Value 2;
                                                              ENC=Primary Key Value 2] }
    { 4   ;   ;Primary Key Value 3 ;Code50        ;CaptionML=[ENU=Primary Key Value 3;
                                                              ENG=Primary Key Value 3;
                                                              ENC=Primary Key Value 3] }
    { 5   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  NoSeriesMgt.TestManual(SysB.GetText('F_ATT_NOS'));
                                                                  "No. Series" := '';
                                                                END;

                                                                IF "No." = '' THEN
                                                                  ERROR(FAText001,FIELDCAPTION("No."));
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENG=No.;
                                                              ENC=No.] }
    { 6   ;   ;Type                ;Code20        ;TableRelation="General Lookup".Code WHERE (Type=CONST(FILEATTACHMENT));
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Type;
                                                              ENG=Type] }
    { 7   ;   ;Extension           ;Text10        ;CaptionML=[ENU=Extension;
                                                              ENG=Extension] }
    { 8   ;   ;Version No.         ;Integer       ;CaptionML=[ENU=Version No.;
                                                              ENG=Version No.];
                                                   Editable=No }
    { 9   ;   ;Current Version     ;Boolean       ;CaptionML=[ENU=Current Version;
                                                              ENG=Current Version] }
    { 10  ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ENG=Description;
                                                              ENC=Description] }
    { 11  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENG=Document Date] }
    { 15  ;   ;Attachment          ;BLOB          ;CaptionML=[ENU=Attachment;
                                                              ENG=Attachment;
                                                              ENC=Attachment];
                                                   SubType=User-Defined }
    { 20  ;   ;Icon                ;BLOB          ;CaptionML=[ENU=Icon;
                                                              ENG=Icon];
                                                   SubType=Bitmap }
    { 30  ;   ;Excel ID            ;Integer       ;TableRelation=Excel;
                                                   CaptionML=[ENU=Excel ID;
                                                              ENG=Excel ID] }
    { 40  ;   ;Related Record Position;Text250    ;CaptionML=[ENU=Related Record Position;
                                                              ENG=Related Record Position];
                                                   Description=NA2016.10 }
    { 100 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENG=No. Series;
                                                              ENC=No. Series];
                                                   Editable=No }
    { 105 ;   ;FileName            ;Text100       ;CaptionML=[ENU=FileName;
                                                              ENG=FileName;
                                                              ENC=FileName] }
    { 400 ;   ;Created By          ;Code50        ;TableRelation="User Setup";
                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By;
                                                              ENC=Created By];
                                                   Editable=No }
    { 401 ;   ;Created By Contact  ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Created By Contact;
                                                              ENG=Created By Contact] }
    { 402 ;   ;Created By Email Add.;Text80       ;CaptionML=[ENU=Created By Email Add.;
                                                              ENG=Created By Email Add.] }
    { 410 ;   ;Date Created        ;Date          ;CaptionML=[ENU=Date Created;
                                                              ENG=Date Created;
                                                              ENC=Date Created];
                                                   Editable=No }
    { 420 ;   ;Last Modified       ;Date          ;CaptionML=[ENU=Last Modified;
                                                              ENG=Last Modified;
                                                              ENC=Last Date Modified];
                                                   Editable=No }
    { 430 ;   ;Last Modified By    ;Code50        ;TableRelation="User Setup";
                                                   CaptionML=[ENU=Last Modified By;
                                                              ENG=Last Modified By;
                                                              ENC=Last Modified By];
                                                   Editable=No }
    { 900 ;   ;Table Name          ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                             Object ID=FIELD(Table ID)));
                                                   CaptionML=[ENU=Table Name;
                                                              ENG=Table Name;
                                                              ENC=Table Name];
                                                   Editable=No }
    { 901 ;   ;Type Name           ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("General Lookup".Description WHERE (Type=CONST(FILEATTACHMENT),
                                                                                                          Code=FIELD(Type)));
                                                   CaptionML=[ENU=Type Name;
                                                              ENG=Type Name] }
    { 902 ;   ;Form Code           ;Code20        ;CaptionML=[ENU=Form Code;
                                                              ENG=Form Code] }
    { 1000;   ;Primary Key FieldID 1;Integer      ;CaptionML=[ENU=Primary Key FieldID 1;
                                                              ENG=Primary Key FieldID 1] }
    { 1001;   ;Primary Key FieldID 2;Integer      ;CaptionML=[ENU=Primary Key FieldID 2;
                                                              ENG=Primary Key FieldID 2] }
    { 1002;   ;Primary Key FieldID 3;Integer      ;CaptionML=[ENU=Primary Key FieldID 3;
                                                              ENG=Primary Key FieldID 3] }
    { 1100;   ;Card Page ID        ;Integer       ;CaptionML=[ENU=Card Page ID;
                                                              ENG=Card Page ID] }
    { 2000;   ;Attachment No.      ;Integer       ;CaptionML=[ENU=Attachment No.;
                                                              ENG=Attachment No.] }
    { 3000;   ;Stored FilePath     ;Text250       ;CaptionML=[ENU=Stored FilePath;
                                                              ENG=Stored FilePath] }
    { 3001;   ;Storage Type        ;Option        ;CaptionML=[ENU=Storage Type;
                                                              ENG=Storage Type];
                                                   OptionCaptionML=[ENU=BLOB,FilePath;
                                                                    ENG=BLOB,FilePath];
                                                   OptionString=BLOB,FilePath,Web }
    { 4000;   ;Move to Table ID    ;Integer       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Move to Table ID;
                                                              ENG=Move to Table ID] }
    { 4001;   ;Move to PK Field ID 1;Integer      ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Move to PK Field ID 1;
                                                              ENG=Move to PK Field ID 1] }
    { 4002;   ;Move to PK Field ID 2;Integer      ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Move to PK Field ID 2;
                                                              ENG=Move to PK Field ID 2] }
    { 4003;   ;Move to PK Field ID 3;Integer      ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Move to PK Field ID 3;
                                                              ENG=Move to PK Field ID 3] }
    { 4004;   ;Move to PK Value 1  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Move to PK Value 1;
                                                              ENG=Move to PK Value 1] }
    { 4005;   ;Move to PK Value 2  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Move to PK Value 2;
                                                              ENG=Move to PK Value 2] }
    { 4006;   ;Move to PK Value 3  ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Move to PK Value 3;
                                                              ENG=Move to PK Value 3] }
    { 4007;   ;Move to Card Page ID;Integer       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Move to Card Page ID;
                                                              ENG=Move to Card Page ID] }
    { 4009;   ;Move                ;Boolean       ;CaptionML=[ENU=Move;
                                                              ENG=Move] }
    { 4010;   ;CopyOnly Mode       ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=CopyOnly Mode;
                                                              ENG=CopyOnly Mode] }
    { 5000;   ;Errored             ;Boolean       ;CaptionML=[ENU=Errored;
                                                              ENG=Errored] }
    { 5001;   ;Error Description   ;Text250       ;CaptionML=[ENU=Error Description;
                                                              ENG=Error Description] }
    { 6000;   ;Reference Type      ;Option        ;CaptionML=[ENU=Reference Type;
                                                              ENG=Reference Type];
                                                   OptionCaptionML=[ENU=" ,Trello";
                                                                    ENG=" ,Trello"];
                                                   OptionString=[ ,Trello] }
    { 6001;   ;Reference No.       ;Text250       ;CaptionML=[ENU=Reference No.;
                                                              ENG=Reference No.] }
    { 6002;   ;Reference No. 2     ;Text250       ;CaptionML=[ENU=Reference No. 2;
                                                              ENG=Reference No. 2] }
    { 7000;   ;Related Record Desc.;Text250       ;CaptionML=[ENU=Related Record Desc.;
                                                              ENG=Related Record Desc.] }
    { 8000;   ;Company Name        ;Text50        ;CaptionML=[ENU=Company Name;
                                                              ENG=Company Name] }
  }
  KEYS
  {
    {    ;No.                                      }
    {    ;Table ID,Primary Key Value 1,Primary Key Value 2,Primary Key Value 3,No.;
                                                   Clustered=Yes }
    {    ;Primary Key Value 1                      }
    {    ;Primary Key Value 2                      }
    {    ;Primary Key Value 3                      }
    {    ;Type,FileName,Version No.                }
    {    ;Excel ID                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NoSeriesMgt@1102633000 : Codeunit 396;
      FAText001@1102633004 : TextConst 'ENU=%1 must be filled in. Enter a value.;ENG=%1 must be filled in. Enter a value.';
      FAText002@1102633005 : TextConst 'ENU=There are files attached to this record.  Confirm delete?;ENG=There are files attached to this record.  Confirm delete?';
      SNText001@1000000001 : TextConst 'ENU=File not found.  Attaching folders is not supported.;ENG=File not found.  Attaching folders is not supported.';
      SNText002@1000000000 : TextConst 'ENU=There is already a file with the same name in this location. Do you want to overwrite the existing file?;ENG=There is already a file with the same name in this location. Do you want to overwrite the existing file?';
      FAText003@1000000004 : TextConst 'ENU=Are you sure you want delete %1 version %2;ENG=Are you sure you want delete %1 version %2';
      Logger@1000000005 : Record 9062280;
      SysB@1000000006 : Record 9062230;
      FileAttachMgt@1000000007 : Codeunit 9062267;
      DestRecRef@1000000008 : RecordRef;
      TNLUtils@1000000009 : Codeunit 9062229;
      FileSystem@1000000002 : Codeunit 9062264;
      FileManagement@1000000003 : Codeunit 419;
      UniversalVars@1000000010 : Codeunit 9062232;
      ExcelIntegration@1000000011 : Codeunit 9062283;
      TxtCalledImportFile@1000000012 : TextConst 'ENU=Called "ImportFile" for Queue %1;ENG=Called "ImportFile" for Queue %1';
      nHanceSetup@1000000013 : Record 9062229;
      GenDevUtils@1000000014 : Codeunit 9062459;
      String@1000000015 : Codeunit 9062236;

    PROCEDURE SetIcon@1000000001();
    VAR
      FAttach@1000000000 : Record 9062272;
    BEGIN
      FAttach.SETRANGE("Table ID", DATABASE::"General Lookup");
      FAttach.SETRANGE("Primary Key Value 1",'ICON');
      FAttach.SETRANGE("Primary Key Value 2",UPPERCASE(Extension));
      IF FAttach.FINDSET THEN BEGIN
        FAttach.CALCFIELDS(Attachment);
        Icon := FAttach.Attachment;
      END;
    END;

    PROCEDURE DeleteFile@1000000009();
    VAR
      TxtConfirmation@1000000001 : TextConst 'ENU=Are you sure you want to delete %1 version %2?;ENG=Are you sure you want to delete %1 version %2?';
      TxtDeletedFile@1000000002 : TextConst 'ENU=Deleted file %1;ENG=Deleted file %1';
      TxtCouldntDeleteFile@1000000003 : TextConst 'ENU=Couldn''t delete %1 as it does not exist;ENG=Couldn''t delete %1 as it does not exist';
      TxtDeleted@1000000004 : TextConst 'ENU=Deleted %1 for table %2, PK1: %3, PK2: %4, PK3: %5;ENG=Deleted %1 for table %2, PK1: %3, PK2: %4, PK3: %5';
    BEGIN
      IF CONFIRM(TxtConfirmation, TRUE, FileName, "Version No.") THEN BEGIN
        IF "Storage Type" = "Storage Type"::FilePath THEN BEGIN //DOC NA2015.3
          IF "Stored FilePath" <> '' THEN BEGIN
            IF (FileSystem.DeleteFileIfExists(FALSE, "Stored FilePath")) THEN
              Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(TxtDeletedFile, "Stored FilePath"), USERID)
            ELSE
              Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(TxtCouldntDeleteFile, "Stored FilePath"), USERID);
          END;
        END;
        Rec.DELETE;
        Logger.Log('FATTACH', Logger.Type::Information, COPYSTR(STRSUBSTNO(TxtDeleted, FileName, "Table ID", "Primary Key Value 1", "Primary Key Value 2",
          "Primary Key Value 3"), 1, 100), USERID);
      END;
    END;

    PROCEDURE OpenFile@1000000005();
    VAR
      TempBlob@1000000000 : TEMPORARY Record 99008535;
      TempFileName@1000000001 : Text[250];
      FAQ@1000000003 : Record 9062270;
      FAQEntryNo@1000000002 : Integer;
      FAQEntry@1000000004 : Record 9062271;
      FSO@1000000005 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      TxtOpening@1000000007 : TextConst 'ENU=Opening %1 for viewing;ENG=Opening %1 for viewing';
      TxtConfirmation@1000000006 : TextConst 'ENU=Would you like to save your changes?;ENG=Would you like to save your changes?';
      FileSystem@1000000008 : Codeunit 9062264;
      ToFile@1000000009 : Text;
    BEGIN
      IF "Storage Type" = "Storage Type"::Web THEN
        HYPERLINK("Stored FilePath")
      ELSE BEGIN
        TempFileName := ExportServerFile(TRUE);
        Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(TxtOpening, TempFileName), USERID);
        ToFile := FileName;
        DOWNLOAD(TempFileName, 'Download File', '','',ToFile);
        IF EXISTS(TempFileName) THEN
          ERASE(TempFileName);
      END;
    END;

    PROCEDURE DownloadToClient@9062231();
    VAR
      FileManagement@9062229 : Codeunit 419;
      TempFileName@9062231 : Text;
      ClientFileName@9062230 : Text;
    BEGIN
      IF "Storage Type" <> "Storage Type"::Web THEN BEGIN
        ClientFileName := FileManagement.SaveFileDialog('Save file', FileName, '');
        IF (ClientFileName <> '') THEN BEGIN
          TempFileName := ExportServerFile(TRUE);
          FileManagement.DownloadToFile(TempFileName, ClientFileName);
        END;
      END;
    END;

    PROCEDURE ExportServerFile@1000000015(FileNameInTempPath@9062229 : Boolean) : Text[1024];
    VAR
      lBlob@1000000004 : Record 99008535;
      lFileSystem@1000000000 : Codeunit 9062264;
      lFilePath@1000000001 : Text[1024];
      TxtAttachmentEmpty@1000000003 : TextConst 'ENU=Attachment "%1" is empty.;ENG=Attachment "%1" is empty.';
      TxtExportedTo@1000000002 : TextConst 'ENU=Exported file attachment "%1" BLOB to "%2";ENG=Exported file attachment "%1" BLOB to "%2"';
      i@9062230 : Integer;
    BEGIN
      //DOC NA2015.1 - Saving file to server file
      // FileNameInTempPath - include original file name in temp path
      //  <- File path

      //export server temp file name
      IF (FileNameInTempPath) THEN BEGIN
        lFilePath := FileSystem.GetTempPathForFile(FALSE, Rec.FileName);
        lFilePath := String.Replace(lFilePath,',','');
        IF FileSystem.FileExists(FALSE,lFilePath) THEN BEGIN
          i := 0;
          REPEAT
            i += 1;
            lFilePath := FileSystem.GetTempPathForFile(FALSE, '(' + FORMAT(i) + ') ' + Rec.FileName);
          UNTIL NOT FileSystem.FileExists(FileSystem.Client,lFilePath);
        END;
      END ELSE
        lFilePath := lFileSystem.GetTempPathForExtension(FALSE, Rec.Extension);

      //save file to disk
      CASE (Rec."Storage Type") OF
        Rec."Storage Type"::BLOB:
          BEGIN
            Rec.CALCFIELDS(Attachment);
            IF ( NOT (Rec.Attachment.HASVALUE)) THEN
              ERROR(TxtAttachmentEmpty, Rec."No.");
            lBlob.Blob := Rec.Attachment;
            lFileSystem.ExportBlobToFileSilent(FALSE, lBlob, lFilePath);
            Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(TxtExportedTo, Rec."No.", lFilePath), USERID);
          END;
        Rec."Storage Type"::FilePath:
          BEGIN
            Rec.TESTFIELD("Stored FilePath");
            lFileSystem.CopyFile(FALSE, Rec."Stored FilePath", lFilePath);
            Logger.Log('FATTACH', Logger.Type::Debug, STRSUBSTNO(TxtExportedTo, Rec."No.", lFilePath), USERID);
          END;
      END;

      EXIT(lFilePath);
    END;

    PROCEDURE SetRecordDescription@1000000018();
    BEGIN
      IF "Table ID" = 0 THEN EXIT;
      IF "Primary Key Value 1" = '' THEN EXIT;
      VALIDATE("Related Record Desc.",TNLUtils.GetRecordDescription(
        "Table ID",
        TNLUtils.GetPositionTextUsingPrimaryKeyValues("Table ID", "Primary Key Value 1","Primary Key Value 2","Primary Key Value 3",'','')));
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 10/08/2012 - Migrated to 2013
      //DOC NA2015.1  PC 24/02/2012 - Store files in Overflow folder on disk if too big for BLOB
      //DOC NA2015.1  PC 24/02/2012 - Removed file storage parameters from Import functions
      //DOC NA2015.1  PC 24/02/2012 - Changed references to User to 50 char
      //DOC NA2015.1  PC 24/02/2012 - Changed BrowseForFile function to not upload the file before calling the FAQ.AddEntry mechanism
      //DOC NA2015.1  PC 03/04/2014 - Change to the way the Destination Record is identified
      //DOC NA2015.1  PC 08/04/2014 - Fixed issue with downloading Attachments stored on Disk (not BLOB)
      //DOC NA2015.1  PC 03/06/2014 - Fixed issue with errors not being sent back to person who e-mailed in File Attachment
      //DOC NA2015.1  PC 03/06/2014 - Changes to support Web Client Upload/Download
      //DOC NA2015.3  PC 03/09/2014 - Added "Web" to "Storage Type" Option Field
      //DOC NA2015.3  PC 03/09/2014 - Added code to "OpenFile()" to use Hyperlink to open records with "Storay Type" of "Web"
      //DOC NA2015.3  PC 03/09/2014 - Added "Reference Type", "Reference No." and "Reference No. 2" fields
      //DOC NA2015.3  PC 03/09/2014 - Added code at end of ImportFileAdvanced to attempt Trello upload if required
      //DOC NA2015.3  PC 03/09/2014 - Added code to "OnDelete" to remove File Attachment from Trello if required
      //DOC NA2015.4  JH 28/12/2014 - System behaviours renamed
      //DOC NA2015.4  PC 29/01/2015 - Added System Behaviour check before sending File Attachment success conf. email
      //DOC NA2015.4  PC 29/01/2015 - Added "Company Name" field and set OnInsert
      //DOC NA2015.4  JH 12/02/2015 - Code to check file extension for Excel, Word
      //DOC NA2015.9  AZ 07/09/2015 - ImportLocalFile function added
      //DOC NA2016.10 JH 27/08/2015 - Upgraded to 2016
      //DOC NA2016.10 AZ 02/11/2015 - "Card Form ID" and "Move to Card Form ID" fields removed
      //DOC NA2016.12 JH 28/01/2016 - New string codeunit
      //DOC NA2016.12 AZ 01/02/2016 - "Document Date" field added
      //DOC NA2016.15 AP 28/04/2014 - Use file att. name when saving the file instead of temp file name
      //DOC NA2016.15 JH 06/05/2016 - CfMD amendments
    }
    END.
  }
}

