OBJECT Codeunit 9062550 Quest. WS Request Processing
{
  OBJECT-PROPERTIES
  {
    Date=28/08/15;
    Time=[ 1:25:49 PM];
    Version List=NA2016.7;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempBlob@1000000004 : Record 99008535;
      InpStream@1000000001 : InStream;
      OutpStream@1000000000 : OutStream;
      errUnknownPath@1000000007 : TextConst 'ENU=Unknown path ''%1''.;ENG=Unknown path ''%1''.';
      errFileDownloadNotAllowed@1000000006 : TextConst 'ENU=You are not allowed to download this file.;ENG=You are not allowed to download this file.';

    PROCEDURE ProcessCallRequest@1000000001(PortalUserId@1000000000 : Text[250];PortalCode@1000000005 : Code[20];Path@1000000001 : Text[250];Command@1000000004 : Text[250];VAR InputData@1000000002 : BigText;VAR OutputData@1000000003 : BigText);
    BEGIN
      CLEAR(OutputData);
      CASE (LOWERCASE(Path)) OF
        'main': ProcessMainReq(Command, InputData, OutputData);
        'dashboard': ProcessDashboard(PortalCode, Command, InputData, OutputData);
        'questionnairecard': ProcessQuestionnaireCard(Command, InputData, OutputData);
        'questionnairesum': ProcessQuestionnaireSummary(Command, InputData, OutputData);
      ELSE
        ERROR(errUnknownPath, Path);
      END;
    END;

    LOCAL PROCEDURE ProcessMainReq@1000000003(Command@1000000002 : Text[250];VAR InputData@1000000001 : BigText;VAR OutputData@1000000000 : BigText);
    BEGIN
      //User.RESET();
      //User.SETRANGE(Id, PortalUser.Id);
      //
      //XmlData.FilterData();
      //XmlData.SETTABLEVIEW(User);
      //
      //GetOutputStream(OutpStream);
      //XmlData.SETDESTINATION(OutpStream);
      //XmlData.EXPORT();
      //GetOutputData(OutputData);
    END;

    PROCEDURE ProcessDashboard@1000000002(PortalCode@1000000001 : Code[20];Command@1000000004 : Text[250];VAR InputData@1000000002 : BigText;VAR OutputData@1000000003 : BigText);
    BEGIN
      //XmlData.InitData(PortalCode, PortalUser);
      //GetOutputStream(OutpStream);
      //XmlData.SETDESTINATION(OutpStream);
      //XmlData.EXPORT();
      //GetOutputData(OutputData);
    END;

    LOCAL PROCEDURE ProcessQuestionnaireCard@1000000013(Command@1000000002 : Text[250];VAR InputData@1000000001 : BigText;VAR OutputData@1000000000 : BigText);
    VAR
      XmlData@1000000003 : XMLport 9062317;
    BEGIN
      XmlData.InitData();
      IF (GetInputStream(InputData, InpStream)) THEN BEGIN
        XmlData.SETSOURCE(InpStream);
        XmlData.IMPORT();
      END;

      XmlData.FilterData();

      GetOutputStream(OutpStream);
      XmlData.SETDESTINATION(OutpStream);
      XmlData.EXPORT();
      GetOutputData(OutputData);
    END;

    LOCAL PROCEDURE ProcessQuestionnaireSummary@1000000000(Command@1000000002 : Text[250];VAR InputData@1000000001 : BigText;VAR OutputData@1000000000 : BigText);
    VAR
      XmlData@1000000003 : XMLport 9062330;
    BEGIN
      XmlData.InitData();
      IF (GetInputStream(InputData, InpStream)) THEN BEGIN
        XmlData.SETSOURCE(InpStream);
        XmlData.IMPORT();
      END;

      XmlData.FilterData();

      GetOutputStream(OutpStream);
      XmlData.SETDESTINATION(OutpStream);
      XmlData.EXPORT();
      GetOutputData(OutputData);
    END;

    LOCAL PROCEDURE GetInputStream@1000000004(VAR InputData@1000000000 : BigText;VAR InputStream@1000000001 : InStream) : Boolean;
    VAR
      OutputStream@1000000002 : OutStream;
    BEGIN
      IF (InputData.LENGTH = 0) THEN
        EXIT(FALSE);

      CLEAR(TempBlob);
      TempBlob.Blob.CREATEOUTSTREAM(OutputStream);
      InputData.WRITE(OutputStream);
      TempBlob.Blob.CREATEINSTREAM(InputStream);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetOutputStream@1000000005(VAR OutputStream@1000000000 : OutStream);
    BEGIN
      CLEAR(TempBlob);
      TempBlob.Blob.CREATEOUTSTREAM(OutputStream);
    END;

    LOCAL PROCEDURE GetOutputData@1000000006(VAR OutputData@1000000000 : BigText);
    VAR
      InputStream@1000000001 : InStream;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InputStream);
      OutputData.READ(InputStream);
    END;

    LOCAL PROCEDURE CheckFileName@1000000024(VAR FileName@1000000000 : Text);
    VAR
      ValidCharacters@1000000001 : Text;
      i@1000000002 : Integer;
    BEGIN
      FOR i:=1 TO STRLEN(FileName) DO BEGIN
        IF (NOT(FileName[i] IN ['A'..'Z', 'a'..'z', '0'..'9', '.', ' ', ','])) THEN
          FileName[i] := '_';
      END;
    END;

    LOCAL PROCEDURE EncodeFileData@1000000030(VAR InputStream@1000000000 : InStream;VAR OutputData@1000000001 : BigText);
    VAR
      Convert@1000000003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@1000000002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
    BEGIN
      MemoryStream := MemoryStream.MemoryStream();
      COPYSTREAM(MemoryStream, InputStream);
      OutputData.ADDTEXT(Convert.ToBase64String(MemoryStream.ToArray()));
    END;

    BEGIN
    {
      //DOC NA2015.7 AZ 05/06/2015 - Created
      //DOC NA2016.7 JH 28/08/2015 - Upgraded to 2016
    }
    END.
  }
}

