OBJECT Page 9062691 Tag Merge Selection
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Tag Merge Selection;
               ENG=Tag Merge Selection];
    MultipleNewLines=No;
    SourceTable=Table9062492;
    PageType=StandardDialog;
    ShowFilter=No;
    OnQueryClosePage=VAR
                       SelectedTags@9062232 : Record 9062492;
                       TagFound@9062230 : Boolean;
                       ConfirmMessage@9062231 : Text;
                     BEGIN
                       IF (CloseAction IN [ACTION::OK, ACTION::LookupOK]) THEN BEGIN
                         TagFound := FindTag();
                         IF (TagFound) THEN BEGIN
                           CurrPage.TagsToMerge.PAGE.GetSelectedTags(SelectedTags);
                           IF (SelectedTags.COUNT = 1) THEN BEGIN
                             SelectedTags.FINDFIRST();
                             IF ((SelectedTags.Code = Tag.Code) AND
                               (SelectedTags."Table No." = Tag."Table No.") AND
                               (SelectedTags."User ID" = Tag."User ID"))
                             THEN
                               ERROR(errTheSameTagsSelected);
                           END;
                         END ELSE BEGIN

                           IF (TagVisibility = TagVisibility::Public) THEN
                             ConfirmMessage := cnfCreatePublicTag
                           ELSE
                             ConfirmMessage := cnfCreatePrivateTag;

                           IF (CONFIRM(STRSUBSTNO(ConfirmMessage, TagName))) THEN BEGIN
                             Tag.INIT();
                             Tag.Code := '';
                             Tag."Table No." := TagTableNo;
                             Tag.VALIDATE(Name, TagName);
                             Tag.VALIDATE(Visibility, TagVisibility);
                             Tag.INSERT(TRUE);
                             EXIT(TRUE);
                           END;
                         END;
                         EXIT(FALSE);

                       END ELSE
                         EXIT(TRUE);
                     END;

  }
  CONTROLS
  {
    { 1000000000;0;Container;
                ContainerType=ContentArea }

    { 9062231;1;Group     ;
                Name=ToTag;
                CaptionML=[ENU=Tag to keep;
                           ENG=Tag to keep];
                GroupType=Group }

    { 9062229;2;Field     ;
                CaptionML=[ENU=Tag Name;
                           ENG=Tag Name];
                SourceExpr=TagName;
                OnLookup=VAR
                           TagList@9062229 : Page 9062688;
                         BEGIN
                           Tag.RESET();
                           Tag.SETRANGE("Table No.", TagTableNo);
                           Tag.SETFILTER("User ID", '%1|%2', '', USERID);
                           IF (TagName <> '') THEN
                             Tag.SETRANGE(Name, TagName);
                           IF (Tag.FINDFIRST()) THEN ;
                           Tag.SETRANGE(Name);
                           TagList.LOOKUPMODE := TRUE;
                           TagList.SETTABLEVIEW(Tag);
                           TagList.SETRECORD(Tag);
                           IF (TagList.RUNMODAL() = ACTION::LookupOK) THEN BEGIN
                             TagList.GETRECORD(Tag);
                             TagName := Tag.Name;
                             TagVisibility := Tag.Visibility;
                           END;
                         END;
                          }

    { 9062230;2;Field     ;
                CaptionML=ENU=Visibility;
                OptionCaptionML=[ENU=Private,Public;
                                 ENG=Private,Public];
                SourceExpr=TagVisibility }

    { 9062232;1;Part      ;
                Name=TagsToMerge;
                CaptionML=[ENU=Tags to merge;
                           ENG=Tags to merge];
                PagePartID=Page9062689;
                PartType=Page }

  }
  CODE
  {
    VAR
      Tag@9062230 : Record 9062492;
      TagName@1000000000 : Text;
      TagVisibility@9062229 : 'Private,Public';
      TagTableNo@9062231 : Integer;
      cnfCreatePublicTag@9062232 : TextConst 'ENU=Public tag %1 does not exist. Do you want to create it?;ENG=Public tag %1 does not exist. Do you want to create it?';
      cnfCreatePrivateTag@9062233 : TextConst 'ENU=Private tag %1 does not exist. Do you wnat to create it?;ENG=Private tag %1 does not exist. Do you wnat to create it?';
      errTheSameTagsSelected@9062234 : TextConst 'ENU=You have to select different tags to merge and keep.;ENG=You have to select different tags to merge and keep.';

    PROCEDURE SetSelectedTag@9062232(VAR SelectedTag@9062229 : Record 9062492);
    VAR
      Tag@9062230 : Record 9062492;
    BEGIN
      TagTableNo := SelectedTag."Table No.";
      TagName := SelectedTag.Name;
      TagVisibility := SelectedTag.Visibility;

      Tag.RESET();
      Tag.FILTERGROUP(7);
      Tag.SETRANGE("Table No.", SelectedTag."Table No.");
      Tag.SETFILTER("User ID", '%1|%2', '', USERID);
      Tag.FILTERGROUP(0);
      CurrPage.TagsToMerge.PAGE.SETTABLEVIEW(Tag);
    END;

    LOCAL PROCEDURE FindTag@9062230() : Boolean;
    BEGIN
      Tag.RESET();
      Tag.SETRANGE(Name, TagName);
      Tag.SETRANGE("Table No.", TagTableNo);
      IF (TagVisibility = TagVisibility::Public) THEN
        Tag.SETRANGE("User ID", '')
      ELSE
        Tag.SETRANGE("User ID", USERID);
      EXIT(Tag.FINDFIRST());
    END;

    PROCEDURE GetSelectedTags@9062229(VAR SelectedTags@9062230 : Record 9062492;VAR TagToKeep@9062229 : Record 9062492);
    BEGIN
      FindTag();
      TagToKeep.GET(Tag.Code, Tag."Table No.", Tag."User ID");
      CurrPage.TagsToMerge.PAGE.GetSelectedTags(SelectedTags);
    END;

    BEGIN
    {
      //DOC NA2015.5  IH 10/03/2015 - Updated
      //DOC NA2015.8  IH 13/07/2015 - Amendments
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.15 JH 10/05/2016 - CfMD amendments
    }
    END.
  }
}

