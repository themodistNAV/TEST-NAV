OBJECT Codeunit 9062315 Planning Board Action Handling
{
  OBJECT-PROPERTIES
  {
    Date=18/01/16;
    Time=12:39:37 PM;
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    TableNo=9062349;
    OnRun=BEGIN
            Code(Rec);
          END;

  }
  CODE
  {
    VAR
      PlanningBoardResourceBuffer@9062235 : TEMPORARY Record 9062346;
      PlanningBoardEntryBuffer@9062236 : TEMPORARY Record 9062347;
      Convert@1000000001 : Codeunit 9062683;
      EnhancedFieldManagement@1000000002 : Codeunit 9062298;
      ObjectFieldToolkit@1000000003 : Codeunit 9062343;
      PlanningBoardActionToolkit@9062234 : Codeunit 9062314;
      RecordRefManagement@1000000000 : Codeunit 9062241;
      RunWithRecordRef@9062232 : Codeunit 9062239;
      tDeletionConfirmation@9062230 : TextConst 'ENU=Do you want to delete %1 "%2"?;ENG=Do you want to delete %1 "%2"?';
      TnpToolkit@9062233 : Codeunit 9062230;
      DateTimeFieldIdx@9062231 : ' ,StartDate,StartTime,EndDate,EndTime';

    LOCAL PROCEDURE "--- General ---"@9062232();
    BEGIN
    END;

    LOCAL PROCEDURE Code@9062230(VAR pPlanningBoardContext@9062230 : Record 9062349);
    BEGIN
      //DOC NA2016.12 - Code of the codeunit
      //  <> pPlanningBoardContext: Planning board context

      CASE (pPlanningBoardContext."Action Type") OF
        pPlanningBoardContext."Action Type"::Refresh:
          Refresh(pPlanningBoardContext);
        pPlanningBoardContext."Action Type"::"View Resource":
          ViewEditResource(pPlanningBoardContext, FALSE);
        pPlanningBoardContext."Action Type"::"Edit Resource":
          ViewEditResource(pPlanningBoardContext, TRUE);
        pPlanningBoardContext."Action Type"::"New Resource":
          NewResource(pPlanningBoardContext);
        pPlanningBoardContext."Action Type"::"Delete Resource":
          DeleteResource(pPlanningBoardContext);
        pPlanningBoardContext."Action Type"::"View Entry":
          ViewEditEntry(pPlanningBoardContext, FALSE);
        pPlanningBoardContext."Action Type"::"Edit Entry":
          ViewEditEntry(pPlanningBoardContext, TRUE);
        pPlanningBoardContext."Action Type"::"New Entry":
          NewEntry(pPlanningBoardContext);
        pPlanningBoardContext."Action Type"::"Delete Entry":
          DeleteEntry(pPlanningBoardContext);
        pPlanningBoardContext."Action Type"::"Drag Entry":
          DropEntry(pPlanningBoardContext);
        pPlanningBoardContext."Action Type"::"Resize Entry":
          ResizeEntry(pPlanningBoardContext);
        pPlanningBoardContext."Action Type"::"Clone Entry":
          CloneEntry(pPlanningBoardContext);
        pPlanningBoardContext."Action Type"::"Run Object":
          RunObject(pPlanningBoardContext);
        pPlanningBoardContext."Action Type"::"Run Quick Report":
          RunQuickReport(pPlanningBoardContext);
        pPlanningBoardContext."Action Type"::"Open Panel":
          OpenPanel(pPlanningBoardContext);
        pPlanningBoardContext."Action Type"::"Open Planning Board":
          OpenPlanningBoard(pPlanningBoardContext);
        pPlanningBoardContext."Action Type"::Hyperlink:
          HyperlinkToUrl(pPlanningBoardContext);
        pPlanningBoardContext."Action Type"::"Change Field":
          ChangeField(pPlanningBoardContext);
      END;
    END;

    LOCAL PROCEDURE "--- Planning Board ---"@9062233();
    BEGIN
    END;

    LOCAL PROCEDURE Refresh@9062245(VAR pPlanningBoardContext@9062230 : Record 9062349);
    BEGIN
      //DOC NA2016.12 - Refreshing the planning board
      //  <> pPlanningBoardContext: Planning board context

      pPlanningBoardContext."Update Type" := pPlanningBoardContext."Update Type"::Full;
      pPlanningBoardContext."Force Update" := TRUE;
      pPlanningBoardContext."Action Handled" := TRUE;
    END;

    LOCAL PROCEDURE ViewEditResource@9062234(VAR pPlanningBoardContext@9062232 : Record 9062349;pEdit@9062230 : Boolean);
    VAR
      lResourceRecordRef@9062231 : RecordRef;
      lTimestampBefore@9062233 : BigInteger;
      lTimestampAfter@9062234 : BigInteger;
    BEGIN
      //DOC NA2016.12 - Viewing / editing resource
      //  <> pPlanningBoardContext: Planning board context
      //  -> pEdit: Flag to edit (TRUE = Edit, FALSE = View)

      PlanningBoardActionToolkit.OpenRecordRefForResource(pPlanningBoardContext, TRUE, lResourceRecordRef, PlanningBoardResourceBuffer);
      lTimestampBefore := PlanningBoardActionToolkit.GetTimestamp(lResourceRecordRef);
      RunWithRecordRef.RunCardPage(lResourceRecordRef, TRUE);
      lTimestampAfter := PlanningBoardActionToolkit.GetTimestamp(lResourceRecordRef);
      IF ((pEdit) AND (lTimestampBefore <> lTimestampAfter)) THEN
        pPlanningBoardContext.SetResourceIncrementalUpdate(lResourceRecordRef, pPlanningBoardContext."Event Resource Activity"::Modify, TRUE);
      PlanningBoardActionToolkit.CloseRecordRef(lResourceRecordRef);

      pPlanningBoardContext."Action Handled" := TRUE;
    END;

    LOCAL PROCEDURE NewResource@9062238(VAR pPlanningBoardContext@9062230 : Record 9062349);
    VAR
      lResourceRecordRef@9062231 : RecordRef;
    BEGIN
      //DOC NA2016.12 - Creating a new resource
      //  <> pPlanningBoardContext: Planning board context

      PlanningBoardActionToolkit.OpenRecordRefForResource(pPlanningBoardContext, FALSE, lResourceRecordRef, PlanningBoardResourceBuffer);
      lResourceRecordRef.INIT();
      lResourceRecordRef.INSERT(TRUE);
      COMMIT;
      RunWithRecordRef.RunCardPage(lResourceRecordRef, TRUE);
      pPlanningBoardContext.SetResourceIncrementalUpdate(lResourceRecordRef, pPlanningBoardContext."Event Resource Activity"::Insert, TRUE);
      PlanningBoardActionToolkit.CloseRecordRef(lResourceRecordRef);

      pPlanningBoardContext."Action Handled" := TRUE;
    END;

    LOCAL PROCEDURE DeleteResource@9062239(VAR pPlanningBoardContext@9062230 : Record 9062349);
    VAR
      lResourceRecordRef@9062231 : RecordRef;
      lTableName@9062232 : Text;
      lRecordName@9062233 : Text;
    BEGIN
      //DOC NA2016.12 - Creating a resource
      //  <> pPlanningBoardContext: Planning board context

      PlanningBoardActionToolkit.OpenRecordRefForResource(pPlanningBoardContext, TRUE, lResourceRecordRef, PlanningBoardResourceBuffer);
      lTableName := PlanningBoardActionToolkit.GetResourceTableName(pPlanningBoardContext);
      lRecordName := PlanningBoardActionToolkit.GetRecordName(lResourceRecordRef);
      IF (CONFIRM(tDeletionConfirmation, FALSE, LOWERCASE(lTableName), lRecordName)) THEN
      BEGIN
        lResourceRecordRef.DELETE(TRUE);
        pPlanningBoardContext.SetResourceIncrementalUpdate(lResourceRecordRef, pPlanningBoardContext."Event Resource Activity"::Delete, TRUE);
      END;
      PlanningBoardActionToolkit.CloseRecordRef(lResourceRecordRef);

      pPlanningBoardContext."Action Handled" := TRUE;
    END;

    LOCAL PROCEDURE ViewEditEntry@9062235(VAR pPlanningBoardContext@9062232 : Record 9062349;pEdit@9062230 : Boolean);
    VAR
      lEntryRecordRef@9062231 : RecordRef;
      lTimestampBefore@9062234 : BigInteger;
      lTimestampAfter@9062233 : BigInteger;
    BEGIN
      //DOC NA2016.12 - Viewing / editing entry
      //  <> pPlanningBoardContext: Planning board context
      //  -> pEdit: Flag to edit (TRUE = Edit, FALSE = View)

      PlanningBoardActionToolkit.OpenRecordRefForEntry(pPlanningBoardContext, TRUE, lEntryRecordRef, PlanningBoardEntryBuffer);
      lTimestampBefore := PlanningBoardActionToolkit.GetTimestamp(lEntryRecordRef);
      RunWithRecordRef.RunCardPage(lEntryRecordRef, TRUE);
      lTimestampAfter := PlanningBoardActionToolkit.GetTimestamp(lEntryRecordRef);
      IF ((pEdit) AND (lTimestampBefore <> lTimestampAfter)) THEN
        pPlanningBoardContext.SetEntryIncrementalUpdate(lEntryRecordRef, pPlanningBoardContext."Event Entry Activity"::Modify, TRUE);
      PlanningBoardActionToolkit.CloseRecordRef(lEntryRecordRef);

      pPlanningBoardContext."Action Handled" := TRUE;
    END;

    LOCAL PROCEDURE NewEntry@9062240(VAR pPlanningBoardContext@9062230 : Record 9062349);
    VAR
      lResourceRecordRef@9062232 : RecordRef;
      lEntryRecordRef@9062231 : RecordRef;
    BEGIN
      //DOC NA2016.12 - Creating a new entry
      //  <> pPlanningBoardContext: Planning board context

      PlanningBoardActionToolkit.OpenRecordRefForResource(pPlanningBoardContext, TRUE, lResourceRecordRef, PlanningBoardResourceBuffer);
      PlanningBoardActionToolkit.OpenRecordRefForEntry(pPlanningBoardContext, FALSE, lEntryRecordRef, PlanningBoardEntryBuffer);
      lEntryRecordRef.INIT();
      PlanningBoardActionToolkit.SetEntryResource(pPlanningBoardContext, lResourceRecordRef, lEntryRecordRef);
      PlanningBoardActionToolkit.SetEntryDatesTimes(pPlanningBoardContext, pPlanningBoardContext."Date Time Update"::"First Start", lEntryRecordRef);
      lEntryRecordRef.INSERT(TRUE);
      COMMIT;
      RunWithRecordRef.RunCardPage(lEntryRecordRef, TRUE);
      pPlanningBoardContext.SetEntryIncrementalUpdate(lEntryRecordRef, pPlanningBoardContext."Event Entry Activity"::Insert, TRUE);
      PlanningBoardActionToolkit.CloseRecordRef(lEntryRecordRef);
      PlanningBoardActionToolkit.CloseRecordRef(lResourceRecordRef);

      pPlanningBoardContext."Action Handled" := TRUE;
    END;

    LOCAL PROCEDURE DeleteEntry@9062241(VAR pPlanningBoardContext@9062230 : Record 9062349);
    VAR
      lEntryRecordRef@9062231 : RecordRef;
      lTableName@9062232 : Text;
      lRecordName@9062233 : Text;
    BEGIN
      //DOC NA2016.12 - Deleting an entry
      //  <> pPlanningBoardContext: Planning board context

      PlanningBoardActionToolkit.OpenRecordRefForEntry(pPlanningBoardContext, TRUE, lEntryRecordRef, PlanningBoardEntryBuffer);
      lTableName := PlanningBoardActionToolkit.GetEntryTableName(pPlanningBoardContext);
      lRecordName := PlanningBoardActionToolkit.GetRecordName(lEntryRecordRef);
      IF (CONFIRM(tDeletionConfirmation, FALSE, LOWERCASE(lTableName), lRecordName)) THEN
      BEGIN
        lEntryRecordRef.DELETE(TRUE);
        pPlanningBoardContext.SetEntryIncrementalUpdate(lEntryRecordRef, pPlanningBoardContext."Event Entry Activity"::Delete, TRUE);
      END;
      PlanningBoardActionToolkit.CloseRecordRef(lEntryRecordRef);

      pPlanningBoardContext."Action Handled" := TRUE;
    END;

    LOCAL PROCEDURE DropEntry@9062242(VAR pPlanningBoardContext@9062230 : Record 9062349);
    VAR
      lResourceRecordRef@9062238 : RecordRef;
      lEntryRecordRef@9062231 : RecordRef;
      lDateTimeUpdate@9062236 : Integer;
    BEGIN
      //DOC NA2016.12 - Dropping an entry
      //  <> pPlanningBoardContext: Planning board context

      PlanningBoardActionToolkit.OpenRecordRefForEntry(pPlanningBoardContext, TRUE, lEntryRecordRef, PlanningBoardEntryBuffer);
      IF ((pPlanningBoardContext."Event Resource ID" <> 0) AND
          (pPlanningBoardContext."Event Resource ID" <> PlanningBoardEntryBuffer."Resource ID")) THEN
      BEGIN
        PlanningBoardActionToolkit.OpenRecordRefForResource(pPlanningBoardContext, TRUE, lResourceRecordRef, PlanningBoardResourceBuffer);
        PlanningBoardActionToolkit.SetEntryResource(pPlanningBoardContext, lResourceRecordRef, lEntryRecordRef);
        PlanningBoardActionToolkit.CloseRecordRef(lResourceRecordRef);
      END;
      lDateTimeUpdate := PlanningBoardActionToolkit.DetectDateTimeUpdate(PlanningBoardEntryBuffer."Start Date", PlanningBoardEntryBuffer."Start Time",
        PlanningBoardEntryBuffer."End Date", PlanningBoardEntryBuffer."End Time", pPlanningBoardContext."Event Start Date",
        pPlanningBoardContext."Event Start Time", pPlanningBoardContext."Event End Date", pPlanningBoardContext."Event End Time");
      PlanningBoardActionToolkit.SetEntryDatesTimes(pPlanningBoardContext, lDateTimeUpdate, lEntryRecordRef);
      lEntryRecordRef.MODIFY(TRUE);
      pPlanningBoardContext.SetEntryIncrementalUpdate(lEntryRecordRef, pPlanningBoardContext."Event Entry Activity"::Modify, FALSE);
      PlanningBoardActionToolkit.CloseRecordRef(lEntryRecordRef);

      pPlanningBoardContext."Action Handled" := TRUE;
    END;

    LOCAL PROCEDURE ResizeEntry@9062243(VAR pPlanningBoardContext@9062230 : Record 9062349);
    VAR
      lEntryRecordRef@9062231 : RecordRef;
      lDateTimeUpdate@9062232 : Integer;
    BEGIN
      //DOC NA2016.12 - Resizing an entry
      //  <> pPlanningBoardContext: Planning board context

      PlanningBoardActionToolkit.OpenRecordRefForEntry(pPlanningBoardContext, TRUE, lEntryRecordRef, PlanningBoardEntryBuffer);
      lDateTimeUpdate := PlanningBoardActionToolkit.DetectDateTimeUpdate(PlanningBoardEntryBuffer."Start Date", PlanningBoardEntryBuffer."Start Time",
        PlanningBoardEntryBuffer."End Date", PlanningBoardEntryBuffer."End Time", pPlanningBoardContext."Event Start Date",
        pPlanningBoardContext."Event Start Time", pPlanningBoardContext."Event End Date", pPlanningBoardContext."Event End Time");
      PlanningBoardActionToolkit.SetEntryDatesTimes(pPlanningBoardContext, lDateTimeUpdate, lEntryRecordRef);
      lEntryRecordRef.MODIFY(TRUE);
      pPlanningBoardContext.SetEntryIncrementalUpdate(lEntryRecordRef, pPlanningBoardContext."Event Entry Activity"::Modify, FALSE);
      PlanningBoardActionToolkit.CloseRecordRef(lEntryRecordRef);

      pPlanningBoardContext."Action Handled" := TRUE;
    END;

    LOCAL PROCEDURE CloneEntry@9062244(VAR pPlanningBoardContext@9062230 : Record 9062349);
    VAR
      lFromEntryRecordRef@1000000000 : RecordRef;
      lToResourceRecordRef@1000000002 : RecordRef;
      lToEntryRecordRef@1000000001 : RecordRef;
      lDateTimeUpdate@1000000003 : Integer;
    BEGIN
      //DOC NA2016.12 - Cloning an entry
      //  <> pPlanningBoardContext: Planning board context

      PlanningBoardActionToolkit.OpenRecordRefForEntry(pPlanningBoardContext, TRUE, lFromEntryRecordRef, PlanningBoardEntryBuffer);
      PlanningBoardActionToolkit.OpenRecordRefForEntry(pPlanningBoardContext, FALSE, lToEntryRecordRef, PlanningBoardEntryBuffer);

      RecordRefManagement.CopyFields(lFromEntryRecordRef, lToEntryRecordRef, FALSE);
      IF ((pPlanningBoardContext."Event Resource ID" <> 0) AND
          (pPlanningBoardContext."Event Resource ID" <> PlanningBoardEntryBuffer."Resource ID")) THEN
      BEGIN
        PlanningBoardActionToolkit.OpenRecordRefForResource(pPlanningBoardContext, TRUE, lToResourceRecordRef, PlanningBoardResourceBuffer);
        PlanningBoardActionToolkit.SetEntryResource(pPlanningBoardContext, lToResourceRecordRef, lToEntryRecordRef);
        PlanningBoardActionToolkit.CloseRecordRef(lToResourceRecordRef);
      END;
      lDateTimeUpdate := PlanningBoardActionToolkit.DetectDateTimeUpdate(PlanningBoardEntryBuffer."Start Date", PlanningBoardEntryBuffer."Start Time",
        PlanningBoardEntryBuffer."End Date", PlanningBoardEntryBuffer."End Time", pPlanningBoardContext."Event Start Date",
        pPlanningBoardContext."Event Start Time", pPlanningBoardContext."Event End Date", pPlanningBoardContext."Event End Time");
      PlanningBoardActionToolkit.SetEntryDatesTimes(pPlanningBoardContext, lDateTimeUpdate, lToEntryRecordRef);
      lToEntryRecordRef.INSERT(TRUE);
      COMMIT;
      pPlanningBoardContext.SetEntryIncrementalUpdate(lToEntryRecordRef, pPlanningBoardContext."Event Entry Activity"::Insert, FALSE);
      PlanningBoardActionToolkit.CloseRecordRef(lToEntryRecordRef);
      PlanningBoardActionToolkit.CloseRecordRef(lFromEntryRecordRef);
    END;

    LOCAL PROCEDURE "--- System ---"@9062246();
    BEGIN
    END;

    LOCAL PROCEDURE RunObject@9062247(VAR pPlanningBoardContext@9062230 : Record 9062349);
    BEGIN
      //DOC NA2016.12 - Running an object
      //  <> pPlanningBoardContext: Planning board context

      pPlanningBoardContext.TESTFIELD("Action Run Object Type");
      pPlanningBoardContext.TESTFIELD("Action Run Object ID");
      CASE (pPlanningBoardContext."Action Run Object Type") OF
        pPlanningBoardContext."Action Run Object Type"::Page:
          PAGE.RUN(pPlanningBoardContext."Action Run Object ID");
        pPlanningBoardContext."Action Run Object Type"::Report:
          REPORT.RUN(pPlanningBoardContext."Action Run Object ID", TRUE, FALSE);
        pPlanningBoardContext."Action Run Object Type"::Codeunit:
          CODEUNIT.RUN(pPlanningBoardContext."Action Run Object ID");
        pPlanningBoardContext."Action Run Object Type"::XMLport:
          XMLPORT.RUN(pPlanningBoardContext."Action Run Object ID", TRUE);
      END;
    END;

    LOCAL PROCEDURE RunQuickReport@9062250(VAR pPlanningBoardContext@9062230 : Record 9062349);
    VAR
      lQuickReportHeader@1000000000 : Record 9062697;
      lQuickReportInteraction@1000000001 : Codeunit 9062543;
    BEGIN
      //DOC NA2016.12 - Running a quick report
      //  <> pPlanningBoardContext: Planning board context

      pPlanningBoardContext.TESTFIELD("Action Run Quick Report Code");
      lQuickReportHeader.GET(pPlanningBoardContext."Action Run Quick Report Code");
      lQuickReportHeader.SETRECFILTER();
      lQuickReportInteraction.ListEdit(lQuickReportHeader);
    END;

    LOCAL PROCEDURE OpenPanel@9062251(VAR pPlanningBoardContext@9062230 : Record 9062349);
    VAR
      lPanel@1000000000 : Record 9062363;
    BEGIN
      //DOC NA2016.12 - Opening a panel
      //  <> pPlanningBoardContext: Planning board context

      pPlanningBoardContext.TESTFIELD("Action Open Panel Code");
      lPanel.GET(pPlanningBoardContext."Action Open Panel Code");
      lPanel.SETRECFILTER();
      PAGE.RUN(PAGE::Panel, lPanel);
    END;

    LOCAL PROCEDURE OpenPlanningBoard@9062248(VAR pPlanningBoardContext@9062230 : Record 9062349);
    VAR
      lPlanningBoardHeader@1000000000 : Record 9062337;
    BEGIN
      //DOC NA2016.12 - Opening a planning board
      //  <> pPlanningBoardContext: Planning board context

      pPlanningBoardContext.TESTFIELD("Action Open Pl. Board Code");
      lPlanningBoardHeader.GET(pPlanningBoardContext."Action Open Pl. Board Code");
      lPlanningBoardHeader.SETRECFILTER();
      PAGE.RUN(PAGE::"Planning Board", lPlanningBoardHeader);
    END;

    LOCAL PROCEDURE HyperlinkToUrl@9062249(VAR pPlanningBoardContext@9062230 : Record 9062349);
    BEGIN
      //DOC NA2016.12 - Firing a hyperlink
      //  <> pPlanningBoardContext: Planning board context

      pPlanningBoardContext.TESTFIELD("Action Hyperlink URL");
      HYPERLINK(pPlanningBoardContext."Action Hyperlink URL");

      pPlanningBoardContext."Action Handled" := TRUE;
    END;

    LOCAL PROCEDURE ChangeField@1000000000(VAR pPlanningBoardContext@1000000000 : Record 9062349);
    VAR
      lRecordRef@1000000001 : RecordRef;
      lFieldRef@1000000004 : FieldRef;
      lDataType@1000000003 : Integer;
      lValue@1000000002 : Variant;
      eMessage@1000000005 : TextConst 'ENU=%1 "%2" has been set to ''%3''.;ENG=%1 "%2" has been set to ''%3''.';
      lRecordId@1000000006 : RecordID;
    BEGIN
      //DOC NA2016.12 - Changing a field
      //  <> pPlanningBoardContext: Planning board context

      pPlanningBoardContext.TESTFIELD("Event Menu Table Type");
      pPlanningBoardContext.TESTFIELD("Event Menu Item ID");
      pPlanningBoardContext.TESTFIELD("Action Change Table ID");
      pPlanningBoardContext.TESTFIELD("Action Change Field Type");
      pPlanningBoardContext.TESTFIELD("Action Change Field ID");

      pPlanningBoardContext.GetActionChangeFieldValue(lValue);

      CASE (pPlanningBoardContext."Event Menu Table Type") OF
        pPlanningBoardContext."Event Menu Table Type"::Resource:
          PlanningBoardActionToolkit.OpenRecordRefForResource(pPlanningBoardContext, TRUE, lRecordRef, PlanningBoardResourceBuffer);
        pPlanningBoardContext."Event Menu Table Type"::Entry:
          PlanningBoardActionToolkit.OpenRecordRefForEntry(pPlanningBoardContext, TRUE, lRecordRef, PlanningBoardEntryBuffer);
      END;

      CASE (pPlanningBoardContext."Action Change Field Type") OF
        pPlanningBoardContext."Action Change Field Type"::Field:
          BEGIN
            lFieldRef := lRecordRef.FIELD(pPlanningBoardContext."Action Change Field ID");
            lFieldRef.VALIDATE(lValue);
            lRecordRef.MODIFY(TRUE);
          END;
        pPlanningBoardContext."Action Change Field Type"::"Enhanced Field":
          EnhancedFieldManagement.SetFieldValue(pPlanningBoardContext."Action Change Table ID", pPlanningBoardContext."Action Change Field ID",
            lRecordRef.GETPOSITION(FALSE), lValue);
      END;

      CASE (pPlanningBoardContext."Event Menu Table Type") OF
        pPlanningBoardContext."Event Menu Table Type"::Resource:
          pPlanningBoardContext.SetResourceIncrementalUpdate(lRecordRef, pPlanningBoardContext."Event Entry Activity"::Modify, TRUE);
        pPlanningBoardContext."Event Menu Table Type"::Entry:
          pPlanningBoardContext.SetEntryIncrementalUpdate(lRecordRef, pPlanningBoardContext."Event Entry Activity"::Modify, TRUE);
      END;

      lRecordId := lRecordRef.RECORDID();

      PlanningBoardActionToolkit.CloseRecordRef(lRecordRef);

      IF (pPlanningBoardContext."Action Change Field Message") THEN
        MESSAGE(eMessage, FORMAT(lRecordId, 0, 1), ObjectFieldToolkit.GetFieldNameAdv(pPlanningBoardContext."Action Change Table ID",
          pPlanningBoardContext."Action Change Field Type", pPlanningBoardContext."Action Change Field ID"), FORMAT(lValue, 0, 1));

      pPlanningBoardContext."Action Handled" := TRUE;
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 11/11/2015 - Created
    }
    END.
  }
}

