OBJECT Page 554 Analysis by Dimensions
{
  OBJECT-PROPERTIES
  {
    Date=26/11/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43897,NAVGB9.00.00.43897;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Analysis by Dimensions;
               ENG=Analysis by Dimensions];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=AnalysisViewCode;
    PageType=Card;
    OnInit=BEGIN
             Dim4FilterEnable := TRUE;
             Dim3FilterEnable := TRUE;
             Dim2FilterEnable := TRUE;
             Dim1FilterEnable := TRUE;
           END;

    OnOpenPage=VAR
                 GLAcc@1002 : Record 15;
                 Field@1000 : Record 2000000041;
                 CashFlowAccount@1001 : Record 841;
               BEGIN
                 IF (NewAnalysisViewCode <> '') AND (NewAnalysisViewCode <> AnalysisViewCode) THEN
                   AnalysisViewCode := NewAnalysisViewCode;

                 ValidateAnalysisViewCode;

                 GLSetup.GET;
                 IF GLSetup."Additional Reporting Currency" = '' THEN
                   ShowInAddCurr := FALSE
                 ELSE
                   Currency.GET(GLSetup."Additional Reporting Currency");

                 IF GLAccountSource THEN
                   LineDimCode := GLAcc.TABLECAPTION
                 ELSE
                   LineDimCode := CashFlowAccount.TABLECAPTION;
                 ColumnDimCode := Text000;

                 LineDimOption := DimCodeToOption(LineDimCode);
                 ColumnDimOption := DimCodeToOption(ColumnDimCode);
                 IF GLAccountSource THEN BEGIN
                   Field.GET(DATABASE::"G/L Account",42);
                   BusUnitFilterCaption := Field."Field Caption";
                 END;

                 PeriodFormMgt.SetCalendarSource(CalendarSource);
                 FindPeriod('');

                 CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
               END;

    OnFindRecord=BEGIN
                   EXIT(FindRec(LineDimOption,Rec,Which));
                 END;

    OnNextRecord=BEGIN
                   EXIT(NextRec(LineDimOption,Rec,Steps));
                 END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 24      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Actions;
                                 ENG=&Actions];
                      Image=Action }
      { 25      ;2   ;Action    ;
                      CaptionML=[ENU=Reverse Lines and Columns;
                                 ENG=Reverse Lines and Columns];
                      Image=Undo;
                      OnAction=VAR
                                 TempDimCode@1000 : Text[30];
                               BEGIN
                                 TempDimCode := ColumnDimCode;
                                 ColumnDimCode := LineDimCode;
                                 LineDimCode := TempDimCode;
                                 ValidateLineDimCode;
                                 ValidateColumnDimCode;
                                 CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 19      ;1   ;Action    ;
                      Name=ShowMatrix;
                      CaptionML=[ENU=&Show Matrix;
                                 ENG=&Show Matrix];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MatrixForm@1000 : Page 9249;
                               BEGIN
                                 CLEAR(MatrixForm);

                                 IF GLAccountSource THEN
                                   CashFlowFilter := '';

                                 MatrixForm.Load(
                                   LineDimOption,ColumnDimOption,LineDimCode,ColumnDimCode,PeriodType,DateFilter,AccFilter,
                                   BusUnitFilter,BudgetFilter,Dim1Filter,Dim2Filter,Dim3Filter,Dim4Filter,CashFlowFilter);
                                 MatrixForm.Load2(
                                   QtyType,AnalysisViewCode,ShowOppositeSign,ShowColumnName,
                                   ShowActualBudg,AmountField,ClosingEntryFilter,RoundingFactor,ShowInAddCurr,
                                   ColumnCaptions,PrimaryKeyFirstColInSet,CalendarSource);
                                 MatrixForm.RUNMODAL;
                               END;
                                }
      { 12      ;1   ;Action    ;
                      CaptionML=[ENU=Previous Set;
                                 ENG=Previous Set];
                      ToolTipML=[ENU=Previous Set;
                                 ENG=Previous Set];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CreateCaptionSet(Rec,Step::Previous,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                               END;
                                }
      { 11      ;1   ;Action    ;
                      CaptionML=[ENU=Next Set;
                                 ENG=Next Set];
                      ToolTipML=[ENU=Next Set;
                                 ENG=Next Set];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CreateCaptionSet(Rec,Step::Next,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 5   ;2   ;Field     ;
                CaptionML=[ENU=Analysis View Code;
                           ENG=Analysis View Code];
                SourceExpr=AnalysisViewCode;
                TableRelation="Analysis View";
                OnValidate=BEGIN
                             ValidateAnalysisViewCode;
                             ValidateColumnDimCode;
                             ValidateLineDimCode;
                           END;

                OnLookup=VAR
                           AnalysisViewList@1002 : Page 556;
                         BEGIN
                           AnalysisViewList.LOOKUPMODE := TRUE;
                           AnalysisView.SETRANGE("Account Source",AnalysisView."Account Source");
                           AnalysisViewList.SETTABLEVIEW(AnalysisView);
                           AnalysisViewList.SETRECORD(AnalysisView);
                           IF AnalysisViewList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             AnalysisViewList.GETRECORD(AnalysisView);
                             AnalysisViewCode := AnalysisView.Code;
                             Text := AnalysisView.Code;
                             ValidateAnalysisViewCode;
                             ValidateColumnDimCode;
                             ValidateLineDimCode;
                             CurrPage.UPDATE;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 6   ;2   ;Field     ;
                CaptionML=[ENU=Show as Lines;
                           ENG=Show as Lines];
                SourceExpr=LineDimCode;
                OnValidate=BEGIN
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               ColumnDimCode := '';
                               ValidateColumnDimCode;
                             END;
                             ValidateLineDimCode;
                             IF LineDimOption = LineDimOption::Period THEN
                               SETCURRENTKEY("Period Start")
                             ELSE
                               SETCURRENTKEY(Code);
                             CurrPage.UPDATE;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := GetDimSelection(LineDimCode);
                           IF NewCode = LineDimCode THEN
                             EXIT(FALSE);

                           Text := NewCode;
                           LineDimCode := NewCode;
                           ValidateLineDimCode;
                           CurrPage.UPDATE;
                           EXIT(TRUE);
                         END;
                          }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Show as Columns;
                           ENG=Show as Columns];
                SourceExpr=ColumnDimCode;
                OnValidate=BEGIN
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               LineDimCode := '';
                               ValidateLineDimCode;
                             END;
                             ValidateColumnDimCode;

                             CurrPage.UPDATE;
                             CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := GetDimSelection(ColumnDimCode);
                           IF NewCode = ColumnDimCode THEN
                             EXIT(FALSE);

                           Text := NewCode;
                           ColumnDimCode := NewCode;
                           ValidateColumnDimCode;
                           CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                           CurrPage.UPDATE;
                           EXIT(TRUE);
                         END;
                          }

    { 1907524401;1;Group  ;
                CaptionML=[ENU=Filters;
                           ENG=Filters] }

    { 36  ;2   ;Field     ;
                CaptionML=[ENU=Date Filter;
                           ENG=Date Filter];
                SourceExpr=DateFilter;
                OnValidate=VAR
                             GLAcc@1001 : Record 15;
                             ApplicationManagement@1002 : Codeunit 1;
                           BEGIN
                             IF ApplicationManagement.MakeDateFilter(DateFilter) = 0 THEN;
                             GLAcc.SETFILTER("Date Filter",DateFilter);
                             DateFilter := GLAcc.GETFILTER("Date Filter");
                             InternalDateFilter := DateFilter;
                             IF ColumnDimOption = ColumnDimOption::Period THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;
                            }

    { 38  ;2   ;Field     ;
                CaptionML=[ENU=Account Filter;
                           ENG=Account Filter];
                SourceExpr=AccFilter;
                OnValidate=BEGIN
                             IF (ColumnDimOption = ColumnDimOption::"G/L Account") OR (ColumnDimOption = ColumnDimOption::"Cash Flow Account") THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=VAR
                           GLAccList@1002 : Page 18;
                           CFAccList@1000 : Page 855;
                         BEGIN
                           IF GLAccountSource THEN BEGIN
                             GLAccList.LOOKUPMODE(TRUE);
                             IF NOT (GLAccList.RUNMODAL = ACTION::LookupOK) THEN
                               EXIT(FALSE);

                             Text := GLAccList.GetSelectionFilter;
                           END ELSE BEGIN
                             CFAccList.LOOKUPMODE(TRUE);
                             IF NOT (CFAccList.RUNMODAL = ACTION::LookupOK) THEN
                               EXIT(FALSE);

                             Text := CFAccList.GetSelectionFilter;
                           END;
                           EXIT(TRUE);
                         END;
                          }

    { 22  ;2   ;Field     ;
                SourceExpr=BusUnitFilter;
                CaptionClass='3,' + BusUnitFilterCaption;
                Visible=GLAccountSource;
                OnLookup=VAR
                           BusUnitList@1002 : Page 240;
                         BEGIN
                           BusUnitList.LOOKUPMODE(TRUE);
                           IF NOT (BusUnitList.RUNMODAL = ACTION::LookupOK) THEN
                             EXIT(FALSE);
                           Text := BusUnitList.GetSelectionFilter;
                           EXIT(TRUE);
                         END;
                          }

    { 1013;2   ;Field     ;
                CaptionML=[ENU=Cash Flow Filter;
                           ENG=Cash Flow Filter];
                SourceExpr=CashFlowFilter;
                TableRelation="Cash Flow Forecast";
                Visible=(GLAccountSource = FALSE);
                LookupPageID=Cash Flow Forecast List;
                OnValidate=BEGIN
                             IF ColumnDimOption = ColumnDimOption::"Cash Flow Forecast" THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;
                            }

    { 53  ;2   ;Field     ;
                CaptionML=[ENU=Budget Filter;
                           ENG=Budget Filter];
                SourceExpr=BudgetFilter;
                TableRelation="G/L Budget Name".Name;
                Visible=GLAccountSource;
                LookupPageID=G/L Budget Names }

    { 34  ;2   ;Field     ;
                Name=Dim1Filter;
                CaptionML=[ENU=Dimension 1 Filter;
                           ENG=Dimension 1 Filter];
                SourceExpr=Dim1Filter;
                CaptionClass=GetCaptionClass(1);
                Enabled=Dim1FilterEnable;
                OnValidate=BEGIN
                             IF ColumnDimOption = ColumnDimOption::"Dimension 1" THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           EXIT(LookUpDimFilter(AnalysisView."Dimension 1 Code",Text));
                         END;
                          }

    { 30  ;2   ;Field     ;
                Name=Dim2Filter;
                CaptionML=[ENU=Dimension 2 Filter;
                           ENG=Dimension 2 Filter];
                SourceExpr=Dim2Filter;
                CaptionClass=GetCaptionClass(2);
                Enabled=Dim2FilterEnable;
                OnValidate=BEGIN
                             IF ColumnDimOption = ColumnDimOption::"Dimension 2" THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           EXIT(LookUpDimFilter(AnalysisView."Dimension 2 Code",Text));
                         END;
                          }

    { 46  ;2   ;Field     ;
                Name=Dim3Filter;
                CaptionML=[ENU=Dimension 3 Filter;
                           ENG=Dimension 3 Filter];
                SourceExpr=Dim3Filter;
                CaptionClass=GetCaptionClass(3);
                Enabled=Dim3FilterEnable;
                OnValidate=BEGIN
                             IF ColumnDimOption = ColumnDimOption::"Dimension 3" THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           EXIT(LookUpDimFilter(AnalysisView."Dimension 3 Code",Text));
                         END;
                          }

    { 35  ;2   ;Field     ;
                Name=Dim4Filter;
                CaptionML=[ENU=Dimension 4 Filter;
                           ENG=Dimension 4 Filter];
                SourceExpr=Dim4Filter;
                CaptionClass=GetCaptionClass(4);
                Enabled=Dim4FilterEnable;
                OnValidate=BEGIN
                             IF ColumnDimOption = ColumnDimOption::"Dimension 4" THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                             CurrPage.UPDATE;
                           END;

                OnLookup=BEGIN
                           EXIT(LookUpDimFilter(AnalysisView."Dimension 4 Code",Text));
                         END;
                          }

    { 1903121901;1;Group  ;
                CaptionML=[ENU=Options;
                           ENG=Options] }

    { 29  ;2   ;Field     ;
                CaptionML=[ENU=Show;
                           ENG=Show];
                OptionCaptionML=[ENU=Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%,Amounts;
                                 ENG=Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%,Amounts];
                SourceExpr=ShowActualBudg;
                Visible=GLAccountSource }

    { 47  ;2   ;Field     ;
                CaptionML=[ENU=Show Amount Field;
                           ENG=Show Amount Field];
                OptionCaptionML=[ENU=Amount,Debit Amount,Credit Amount;
                                 ENG=Amount,Debit Amount,Credit Amount];
                SourceExpr=AmountField }

    { 52  ;2   ;Field     ;
                CaptionML=[ENU=Closing Entries;
                           ENG=Closing Entries];
                OptionCaptionML=[ENU=Include,Exclude;
                                 ENG=Include,Exclude];
                SourceExpr=ClosingEntryFilter;
                Visible=GLAccountSource;
                OnValidate=BEGIN
                             FindPeriod('=');
                           END;
                            }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Rounding Factor;
                           ENG=Rounding Factor];
                OptionCaptionML=[ENU=None,1,1000,1000000;
                                 ENG=None,1,1000,1000000];
                SourceExpr=RoundingFactor }

    { 49  ;2   ;Field     ;
                CaptionML=[ENU=Show Amounts in Add. Reporting Currency;
                           ENG=Show Amounts in Add. Reporting Currency];
                SourceExpr=ShowInAddCurr;
                Visible=GLAccountSource;
                MultiLine=Yes }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=Show Column Name;
                           ENG=Show Column Name];
                SourceExpr=ShowColumnName;
                OnValidate=BEGIN
                             CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                           END;
                            }

    { 54  ;2   ;Field     ;
                CaptionML=[ENU=Show Opposite Sign;
                           ENG=Show Opposite Sign];
                SourceExpr=ShowOppositeSign;
                MultiLine=Yes }

    { 1906098301;1;Group  ;
                CaptionML=[ENU=Matrix Options;
                           ENG=Matrix Options] }

    { 13  ;2   ;Field     ;
                CaptionML=[ENU=View by;
                           ENG=View by];
                OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year;
                                 ENG=Day,Week,Month,Quarter,Year];
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                             IF ColumnDimOption = ColumnDimOption::Period THEN
                               CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                           END;
                            }

    { 1040000;2;Field     ;
                CaptionML=[ENU=Calendar Source;
                           ENG=Calendar Source];
                OptionCaptionML=[ENU=" ,System Calendar,Acc. Period Calendar";
                                 ENG=" ,System Calendar,Acc. Period Calendar"];
                SourceExpr=CalendarSource;
                OnValidate=BEGIN
                             PeriodFormMgt.SetCalendarSource(CalendarSource);
                             FindPeriod('');
                             CreateCaptionSet(Rec,Step::First,32,PrimaryKeyFirstColInSet,ColumnCaptions,ColumnsSet);
                           END;
                            }

    { 14  ;2   ;Field     ;
                CaptionML=[ENU=Column Set;
                           ENG=Column Set];
                SourceExpr=ColumnsSet;
                Editable=FALSE }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=View as;
                           ENG=View as];
                OptionCaptionML=[ENU=Net Change,Balance at Date;
                                 ENG=Net Change,Balance at Date];
                SourceExpr=QtyType }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Period;ENG=Period';
      Text002@1002 : TextConst 'ENU=You have not yet defined an analysis view.;ENG=You have not yet defined an analysis view.';
      Text003@1003 : TextConst 'ENU=%1 is not a valid line definition.;ENG=%1 is not a valid line definition.';
      Text004@1004 : TextConst 'ENU=%1 is not a valid column definition.;ENG=%1 is not a valid column definition.';
      Text005@1005 : TextConst 'ENU=1,6,,Dimension 1 Filter;ENG=1,6,,Dimension 1 Filter';
      Text006@1006 : TextConst 'ENU=1,6,,Dimension 2 Filter;ENG=1,6,,Dimension 2 Filter';
      Text007@1007 : TextConst 'ENU=1,6,,Dimension 3 Filter;ENG=1,6,,Dimension 3 Filter';
      Text008@1008 : TextConst 'ENU=1,6,,Dimension 4 Filter;ENG=1,6,,Dimension 4 Filter';
      GLSetup@1009 : Record 98;
      AnalysisView@1011 : Record 363;
      AnalysisViewEntry@1012 : Record 365;
      Currency@1044 : Record 4;
      LineDimOption@1017 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,Cash Flow Account,Cash Flow Forecast';
      ColumnDimOption@1018 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,Cash Flow Account,Cash Flow Forecast';
      PeriodType@1021 : 'Day,Week,Month,Quarter,Year';
      AmountType@1022 : 'Net Change,Balance at Date';
      RoundingFactor@1023 : 'None,1,1000,1000000';
      AmountField@1024 : 'Amount,Debit Amount,Credit Amount';
      ShowActualBudg@1025 : 'Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%,Amounts';
      ClosingEntryFilter@1028 : 'Include,Exclude';
      GLAccountSource@1014 : Boolean INDATASET;
      LineDimCode@1015 : Text[30];
      ColumnDimCode@1010 : Text[30];
      DateFilter@1030 : Text[250];
      InternalDateFilter@1031 : Text[250];
      CashFlowFilter@1129 : Text[250];
      ColumnCaptions@1046 : ARRAY [32] OF Text[80];
      PrimaryKeyFirstColInSet@1054 : Text[1024];
      ColumnsSet@1055 : Text[1024];
      AnalysisViewCode@1016 : Code[10];
      NewAnalysisViewCode@1059 : Code[10];
      AccFilter@1033 : Code[250];
      BudgetFilter@1034 : Text[250];
      Dim1Filter@1035 : Code[250];
      Dim2Filter@1036 : Code[250];
      Dim3Filter@1037 : Code[250];
      Dim4Filter@1038 : Code[250];
      ShowOppositeSign@1027 : Boolean;
      ShowColumnName@1029 : Boolean;
      PeriodInitialized@1041 : Boolean;
      ShowInAddCurr@1026 : Boolean;
      BusUnitFilter@1043 : Code[250];
      Step@1056 : 'First,Previous,Same,Next';
      QtyType@1058 : 'Net Change,Balance at Date';
      BusUnitFilterCaption@1001 : Text[80];
      PeriodFormMgt@1040000 : Codeunit 359;
      CalendarSource@1040001 : ' ,System,AccPeriod';
      Dim1FilterEnable@19054192 : Boolean INDATASET;
      Dim2FilterEnable@19062512 : Boolean INDATASET;
      Dim3FilterEnable@19011605 : Boolean INDATASET;
      Dim4FilterEnable@19064250 : Boolean INDATASET;
      Text009@1013 : TextConst 'ENU=Unsupported Account Source %1.;ENG=Unsupported Account Source %1.';

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30]) : Integer;
    VAR
      AccountCaption@1002 : Text[30];
      UnitCaption@1003 : Text[30];
    BEGIN
      GetAccountCaption(AccountCaption,UnitCaption);
      CASE DimCode OF
        AccountCaption:
          BEGIN
            IF GLAccountSource THEN
              EXIT(0);
            EXIT(7);
          END;
        Text000:
          EXIT(1);
        UnitCaption:
          BEGIN
            IF GLAccountSource THEN
              EXIT(2);
            EXIT(8);
          END;
        AnalysisView."Dimension 1 Code":
          EXIT(3);
        AnalysisView."Dimension 2 Code":
          EXIT(4);
        AnalysisView."Dimension 3 Code":
          EXIT(5);
        AnalysisView."Dimension 4 Code":
          EXIT(6);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE FindRec@59(DimOption@1000 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,Cash Flow Account,Cash Flow Forecast';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[250]) : Boolean;
    VAR
      GLAcc@1003 : Record 15;
      BusUnit@1004 : Record 220;
      CFAccount@1023 : Record 841;
      CashFlowForecast@1024 : Record 840;
      Period@1005 : Record 2000000007;
      DimVal@1006 : Record 349;
      Found@1008 : Boolean;
    BEGIN
      CASE DimOption OF
        DimOption::"G/L Account":
          BEGIN
            GLAcc."No." := DimCodeBuf.Code;
            IF AccFilter <> '' THEN
              GLAcc.SETFILTER("No.",AccFilter);
            Found := GLAcc.FIND(Which);
            IF Found THEN
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          END;
        DimOption::"Cash Flow Account":
          BEGIN
            CFAccount."No." := DimCodeBuf.Code;
            IF AccFilter <> '' THEN
              CFAccount.SETFILTER("No.",AccFilter);
            Found := CFAccount.FIND(Which);
            IF Found THEN
              CopyCFAccToBuf(CFAccount,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF NOT PeriodInitialized THEN
              DateFilter := '';
            PeriodInitialized := TRUE;
            Period."Period Start" := DimCodeBuf."Period Start";
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter)
            ELSE
              IF InternalDateFilter <> '' THEN
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            IF Found THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::"Business Unit":
          BEGIN
            BusUnit.Code := DimCodeBuf.Code;
            IF BusUnitFilter <> '' THEN
              BusUnit.SETFILTER(Code,BusUnitFilter);
            Found := BusUnit.FIND(Which);
            IF Found THEN
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          END;
        DimOption::"Cash Flow Forecast":
          BEGIN
            CashFlowForecast."No." := DimCodeBuf.Code;
            IF CashFlowFilter <> '' THEN
              CashFlowForecast.SETFILTER("No.",CashFlowFilter);
            Found := CashFlowForecast.FIND(Which);
            IF Found THEN
              CopyCashFlowToBuf(CashFlowForecast,DimCodeBuf);
          END;
        DimOption::"Dimension 1":
          BEGIN
            IF Dim1Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim1Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2":
          BEGIN
            IF Dim2Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim2Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 3":
          BEGIN
            IF Dim3Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim3Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 4":
          BEGIN
            IF Dim4Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim4Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 4 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(Found);
    END;

    LOCAL PROCEDURE NextRec@60(DimOption@1000 : 'G/L Account,Period,Business Unit,Dimension 1,Dimension 2,Dimension 3,Dimension 4,Cash Flow Account,Cash Flow Forecast';VAR DimCodeBuf@1001 : Record 367;Steps@1002 : Integer) : Integer;
    VAR
      GLAcc@1003 : Record 15;
      BusUnit@1004 : Record 220;
      CFAccount@1023 : Record 841;
      CashFlowForecast@1024 : Record 840;
      Period@1005 : Record 2000000007;
      DimVal@1006 : Record 349;
      ResultSteps@1008 : Integer;
    BEGIN
      CASE DimOption OF
        DimOption::"G/L Account":
          BEGIN
            GLAcc."No." := DimCodeBuf.Code;
            IF AccFilter <> '' THEN
              GLAcc.SETFILTER("No.",AccFilter);
            ResultSteps := GLAcc.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyGLAccToBuf(GLAcc,DimCodeBuf);
          END;
        DimOption::"Cash Flow Account":
          BEGIN
            CFAccount."No." := DimCodeBuf.Code;
            IF AccFilter <> '' THEN
              CFAccount.SETFILTER("No.",AccFilter);
            ResultSteps := CFAccount.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyCFAccToBuf(CFAccount,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter);
            Period."Period Start" := DimCodeBuf."Period Start";
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            IF ResultSteps <> 0 THEN
              CopyPeriodToBuf(Period,DimCodeBuf);
          END;
        DimOption::"Business Unit":
          BEGIN
            BusUnit.Code := DimCodeBuf.Code;
            IF BusUnitFilter <> '' THEN
              BusUnit.SETFILTER(Code,BusUnitFilter);
            ResultSteps := BusUnit.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyBusUnitToBuf(BusUnit,DimCodeBuf);
          END;
        DimOption::"Cash Flow Forecast":
          BEGIN
            CashFlowForecast."No." := DimCodeBuf.Code;
            IF CashFlowFilter <> '' THEN
              CashFlowForecast.SETFILTER("No.",CashFlowFilter);
            ResultSteps := CashFlowForecast.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyCashFlowToBuf(CashFlowForecast,DimCodeBuf);
          END;
        DimOption::"Dimension 1":
          BEGIN
            IF Dim1Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim1Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2":
          BEGIN
            IF Dim2Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim2Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 3":
          BEGIN
            IF Dim3Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim3Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 4":
          BEGIN
            IF Dim4Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim4Filter);
            DimVal."Dimension Code" := AnalysisView."Dimension 4 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(ResultSteps);
    END;

    LOCAL PROCEDURE CopyGLAccToBuf@1(VAR TheGLAcc@1000 : Record 15;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheGLAcc."No.";
        Name := TheGLAcc.Name;
        Totaling := TheGLAcc.Totaling;
        Indentation := TheGLAcc.Indentation;
        "Show in Bold" := TheGLAcc."Account Type" <> TheGLAcc."Account Type"::Posting;
      END;
    END;

    LOCAL PROCEDURE CopyCFAccToBuf@1003(VAR TheCFAcc@1000 : Record 841;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheCFAcc."No.";
        Name := TheCFAcc.Name;
        Totaling := TheCFAcc.Totaling;
        Indentation := TheCFAcc.Indentation;
        "Show in Bold" := TheCFAcc."Account Type" <> TheCFAcc."Account Type"::Entry;
      END;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@8(VAR ThePeriod@1000 : Record 2000000007;VAR TheDimCodeBuf@1001 : Record 367);
    VAR
      Period2@1002 : Record 2000000007;
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
          "Period End" := CLOSINGDATE(ThePeriod."Period End")
        ELSE
          "Period End" := ThePeriod."Period End";
        IF DateFilter <> '' THEN BEGIN
          Period2.SETFILTER("Period End",DateFilter);
          IF Period2.GETRANGEMAX("Period End") < "Period End" THEN
            "Period End" := Period2.GETRANGEMAX("Period End");
        END;
        Name := ThePeriod."Period Name";
      END;
    END;

    LOCAL PROCEDURE CopyBusUnitToBuf@5(VAR TheBusUnit@1000 : Record 220;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheBusUnit.Code;
        Name := TheBusUnit.Name;
      END;
    END;

    LOCAL PROCEDURE CopyCashFlowToBuf@1005(VAR TheCashFlowForecast@1000 : Record 840;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheCashFlowForecast."No.";
        Name := TheCashFlowForecast.Description;
      END;
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR TheDimVal@1000 : Record 349;VAR TheDimCodeBuf@1001 : Record 367);
    BEGIN
      WITH TheDimCodeBuf DO BEGIN
        INIT;
        Code := TheDimVal.Code;
        Name := TheDimVal.Name;
        Totaling := TheDimVal.Totaling;
        Indentation := TheDimVal.Indentation;
        "Show in Bold" :=
          TheDimVal."Dimension Value Type" <> TheDimVal."Dimension Value Type"::Standard;
      END;
    END;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Calendar@1001 : Record 2000000007;
      TempDate@1003 : Date;
    BEGIN
      IF NOT PeriodInitialized THEN
        DateFilter := '';
      IF (DateFilter <> '') AND EVALUATE(TempDate,DateFilter) THEN BEGIN
        Calendar.SETFILTER("Period Start",DateFilter);
        IF NOT PeriodFormMgt.FindDate('+',Calendar,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      END;
      IF PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType) THEN
        IF ClosingEntryFilter = ClosingEntryFilter::Include THEN
          Calendar."Period End" := CLOSINGDATE(Calendar."Period End");
      IF AmountType = AmountType::"Net Change" THEN BEGIN
        AnalysisViewEntry.SETRANGE("Posting Date",Calendar."Period Start",Calendar."Period End");
        IF AnalysisViewEntry.GETRANGEMIN("Posting Date") = AnalysisViewEntry.GETRANGEMAX("Posting Date") THEN
          AnalysisViewEntry.SETRANGE("Posting Date",AnalysisViewEntry.GETRANGEMIN("Posting Date"));
      END ELSE
        AnalysisViewEntry.SETRANGE("Posting Date",0D,Calendar."Period End");

      InternalDateFilter := AnalysisViewEntry.GETFILTER("Posting Date");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN
        DateFilter := InternalDateFilter;
    END;

    LOCAL PROCEDURE GetDimSelection@3(OldDimSelCode@1000 : Text[30]) : Text[30];
    VAR
      DimSelection@1001 : Page 568;
      AccountCaption@1003 : Text[30];
      UnitCaption@1002 : Text[30];
    BEGIN
      GetAccountCaption(AccountCaption,UnitCaption);
      DimSelection.InsertDimSelBuf(FALSE,AccountCaption,AccountCaption);
      DimSelection.InsertDimSelBuf(FALSE,Text000,Text000);
      DimSelection.InsertDimSelBuf(FALSE,UnitCaption,UnitCaption);

      IF AnalysisView."Dimension 1 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 1 Code",'');
      IF AnalysisView."Dimension 2 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 2 Code",'');
      IF AnalysisView."Dimension 3 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 3 Code",'');
      IF AnalysisView."Dimension 4 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,AnalysisView."Dimension 4 Code",'');

      DimSelection.LOOKUPMODE := TRUE;
      IF DimSelection.RUNMODAL = ACTION::LookupOK THEN
        EXIT(DimSelection.GetDimSelCode);

      EXIT(OldDimSelCode);
    END;

    LOCAL PROCEDURE LookUpDimFilter@57(Dim@1000 : Code[20];VAR Text@1001 : Text[250]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Page 560;
    BEGIN
      IF Dim = '' THEN
        EXIT(FALSE);
      DimValList.LOOKUPMODE(TRUE);
      DimVal.SETRANGE("Dimension Code",Dim);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END;
      EXIT(FALSE)
    END;

    LOCAL PROCEDURE ValidateAnalysisViewCode@11();
    VAR
      AnalysisViewFilter@1000 : Record 364;
    BEGIN
      AnalysisView.Code := AnalysisViewCode;
      IF NOT AnalysisView.FIND('=<>') THEN
        ERROR(Text002);
      AnalysisViewCode := AnalysisView.Code;
      AccFilter := AnalysisView."Account Filter";
      Dim1Filter := '';
      Dim2Filter := '';
      Dim3Filter := '';
      Dim4Filter := '';
      Dim1Filter := GETFILTER("Dimension 1 Value Filter");
      Dim2Filter := GETFILTER("Dimension 2 Value Filter");
      Dim3Filter := GETFILTER("Dimension 3 Value Filter");
      Dim4Filter := GETFILTER("Dimension 4 Value Filter");

      Dim1FilterEnable :=
        (AnalysisView."Dimension 1 Code" <> '') AND
        (GETFILTER("Dimension 1 Value Filter") = '');
      Dim2FilterEnable :=
        (AnalysisView."Dimension 2 Code" <> '') AND
        (GETFILTER("Dimension 2 Value Filter") = '');
      Dim3FilterEnable :=
        (AnalysisView."Dimension 3 Code" <> '') AND
        (GETFILTER("Dimension 3 Value Filter") = '');
      Dim4FilterEnable :=
        (AnalysisView."Dimension 4 Code" <> '') AND
        (GETFILTER("Dimension 4 Value Filter") = '');

      IF Dim1FilterEnable THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 1 Code") THEN
          Dim1Filter := AnalysisViewFilter."Dimension Value Filter";

      IF Dim2FilterEnable THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 2 Code") THEN
          Dim2Filter := AnalysisViewFilter."Dimension Value Filter";

      IF Dim3FilterEnable THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 3 Code") THEN
          Dim3Filter := AnalysisViewFilter."Dimension Value Filter";

      IF Dim4FilterEnable THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,AnalysisView."Dimension 4 Code") THEN
          Dim4Filter := AnalysisViewFilter."Dimension Value Filter";

      CASE AnalysisView."Account Source" OF
        AnalysisView."Account Source"::"G/L Account":
          GLAccountSource := TRUE;
        AnalysisView."Account Source"::"Cash Flow Account":
          GLAccountSource := FALSE;
        ELSE
          ERROR(Text009,AnalysisView."Account Source");
      END;
    END;

    LOCAL PROCEDURE ValidateLineDimCode@19();
    VAR
      AccountCaption@1002 : Text[30];
      UnitCaption@1003 : Text[30];
    BEGIN
      GetAccountCaption(AccountCaption,UnitCaption);

      IF (UPPERCASE(LineDimCode) <> UPPERCASE(AccountCaption)) AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(UnitCaption)) AND
         (UPPERCASE(LineDimCode) <> UPPERCASE(Text000)) AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 1 Code") AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 2 Code") AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 3 Code") AND
         (UPPERCASE(LineDimCode) <> AnalysisView."Dimension 4 Code") AND
         (LineDimCode <> '')
      THEN BEGIN
        MESSAGE(Text003,LineDimCode);
        LineDimCode := '';
      END;
      LineDimOption := DimCodeToOption(LineDimCode);
      InternalDateFilter := AnalysisViewEntry.GETFILTER("Posting Date");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN BEGIN
        DateFilter := InternalDateFilter;
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END;
    END;

    LOCAL PROCEDURE ValidateColumnDimCode@20();
    VAR
      AccountCaption@1002 : Text[30];
      UnitCaption@1003 : Text[30];
    BEGIN
      GetAccountCaption(AccountCaption,UnitCaption);

      IF (UPPERCASE(ColumnDimCode) <> UPPERCASE(AccountCaption)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(UnitCaption)) AND
         (UPPERCASE(ColumnDimCode) <> UPPERCASE(Text000)) AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 1 Code") AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 2 Code") AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 3 Code") AND
         (UPPERCASE(ColumnDimCode) <> AnalysisView."Dimension 4 Code") AND
         (ColumnDimCode <> '')
      THEN BEGIN
        MESSAGE(Text004,ColumnDimCode);
        ColumnDimCode := '';
      END;
      ColumnDimOption := DimCodeToOption(ColumnDimCode);
      InternalDateFilter := AnalysisViewEntry.GETFILTER("Posting Date");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN BEGIN
        DateFilter := InternalDateFilter;
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END ELSE
        PeriodInitialized := FALSE;
    END;

    LOCAL PROCEDURE GetCaptionClass@12(AnalysisViewDimType@1000 : Integer) : Text[250];
    BEGIN
      IF AnalysisView.Code <> AnalysisViewCode THEN
        AnalysisView.GET(AnalysisViewCode);
      CASE AnalysisViewDimType OF
        1:
          BEGIN
            IF AnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 1 Code");

            EXIT(Text005);
          END;
        2:
          BEGIN
            IF AnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 2 Code");

            EXIT(Text006);
          END;
        3:
          BEGIN
            IF AnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 3 Code");

            EXIT(Text007);
          END;
        4:
          BEGIN
            IF AnalysisView."Dimension 4 Code" <> '' THEN
              EXIT('1,6,' + AnalysisView."Dimension 4 Code");

            EXIT(Text008);
          END;
      END;
    END;

    LOCAL PROCEDURE CreateCaptionSet@29(RecRef@1000 : Record 367;Step@1008 : 'First,Previous,Same,Next';MaximumNoOfCaptions@1001 : Integer;VAR PrimaryKeyFirstCaptionInCurrSe@1006 : Text[1024];VAR CaptionSet@1005 : ARRAY [32] OF Text[1024];VAR CaptionRange@1004 : Text[1024]) : Integer;
    VAR
      CurrentCaptionOrdinal@1003 : Integer;
    BEGIN
      CLEAR(CaptionSet);
      CaptionRange := '';

      CurrentCaptionOrdinal := 0;

      CASE Step OF
        Step::First:
          BEGIN
            IF (ColumnDimOption = ColumnDimOption::Period) AND (DateFilter = '') THEN
              FindRec(ColumnDimOption,RecRef,'=><')
            ELSE
              IF NOT FindRec(ColumnDimOption,RecRef,'-') THEN
                EXIT;
          END;
        Step::Previous:
          BEGIN
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            IF ColumnDimOption = ColumnDimOption::Period THEN
              EVALUATE(RecRef."Period Start",RecRef.Code);
            IF NOT FindRec(ColumnDimOption,RecRef,'=') THEN
              EXIT;
            NextRec(ColumnDimOption,RecRef,-MaximumNoOfCaptions);
          END;
        Step::Same:
          BEGIN
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            IF ColumnDimOption = ColumnDimOption::Period THEN
              EVALUATE(RecRef."Period Start",RecRef.Code);
            IF NOT FindRec(ColumnDimOption,RecRef,'=') THEN
              EXIT;
          END;
        Step::Next:
          BEGIN
            RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
            IF ColumnDimOption = ColumnDimOption::Period THEN
              EVALUATE(RecRef."Period Start",RecRef.Code);
            IF NOT FindRec(ColumnDimOption,RecRef,'=') THEN
              EXIT;
            IF NOT (NextRec(ColumnDimOption,RecRef,MaximumNoOfCaptions) = MaximumNoOfCaptions) THEN BEGIN
              RecRef.SETPOSITION(PrimaryKeyFirstCaptionInCurrSe);
              FindRec(ColumnDimOption,RecRef,'=');
            END;
          END;
      END;

      PrimaryKeyFirstCaptionInCurrSe := RecRef.GETPOSITION;

      REPEAT
        CurrentCaptionOrdinal := CurrentCaptionOrdinal + 1;
        IF ShowColumnName THEN
          CaptionSet[CurrentCaptionOrdinal] := RecRef.Name
        ELSE
          CaptionSet[CurrentCaptionOrdinal] := RecRef.Code;
      UNTIL (CurrentCaptionOrdinal = MaximumNoOfCaptions) OR (NextRec(ColumnDimOption,RecRef,1) <> 1);

      IF CurrentCaptionOrdinal = 1 THEN
        CaptionRange := CaptionSet[1]
      ELSE
        CaptionRange := COPYSTR(CaptionSet[1] + '..' + CaptionSet[CurrentCaptionOrdinal],1,MAXSTRLEN(CaptionRange));
    END;

    PROCEDURE SetAnalysisViewCode@14(NextAnalysisViewCode@1000 : Code[10]);
    BEGIN
      NewAnalysisViewCode := NextAnalysisViewCode;
    END;

    LOCAL PROCEDURE GetAccountCaption@7(VAR AccountCaption@1000 : Text[30];VAR UnitCaption@1001 : Text[30]);
    VAR
      GLAcc@1002 : Record 15;
      CFAccount@1003 : Record 841;
      BusUnit@1004 : Record 220;
      CashFlowForecast@1005 : Record 840;
    BEGIN
      IF GLAccountSource THEN BEGIN
        AccountCaption := GLAcc.TABLECAPTION;
        UnitCaption := BusUnit.TABLECAPTION;
      END ELSE BEGIN
        AccountCaption := CFAccount.TABLECAPTION;
        UnitCaption := CashFlowForecast.TABLECAPTION;
      END;
    END;

    BEGIN
    END.
  }
}

