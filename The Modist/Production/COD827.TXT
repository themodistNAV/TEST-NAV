OBJECT Codeunit 827 DO Payment Card Validation
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=''Invalid card type''.;ENG=''Invalid card type''.';
      Text002@1002 : TextConst 'ENU=%1 must not contain spaces.;ENG=%1 must not contain spaces.';
      Text003@1003 : TextConst 'ENU=The specified %1 is not valid.;ENG=The specified %1 is not valid.';
      Text004@1004 : TextConst 'ENU=%1 can only contain digits.;ENG=%1 can only contain digits.';
      Text005@1005 : TextConst 'ENU=You must specify %1.;ENG=You must specify %1.';
      Text006@1006 : TextConst 'ENU=Validation rule does not allow spaces.;ENG=Validation rule does not allow spaces.';
      Text007@1007 : TextConst 'ENU=%1 does not meet the required length.;ENG=%1 does not meet the required length.';
      Text008@1008 : TextConst 'ENU=%1 exceeds the maximum length.;ENG=%1 exceeds the maximum length.';

    PROCEDURE ValidateCreditCard@1(CardNumber@1000 : Text[30];CardTypeName@1001 : Text[20]);
    VAR
      DOPaymentCardType@1002 : Record 830;
    BEGIN
      IF NOT DOPaymentCardType.GET(CardTypeName) THEN
        ERROR(Text001);

      ValidateCreditCardType(CardNumber,DOPaymentCardType);
    END;

    LOCAL PROCEDURE ValidateCreditCardType@2(CardNumber@1000 : Text[30];DOPaymentCardType@1001 : Record 830);
    VAR
      DOPaymentCreditCard@1002 : Record 827;
      Integer@1003 : Integer;
      IsValid@1004 : Boolean;
      I@1005 : Integer;
    BEGIN
      IF NOT DOPaymentCardType."Allow Spaces" THEN
        IF STRPOS(CardNumber,' ') > 0 THEN
          ERROR(Text002,DOPaymentCreditCard.FIELDCAPTION("Credit Card Number"));

      IF DOPaymentCardType."Numeric Only" THEN
        FOR I := 1 TO STRLEN(CardNumber) DO BEGIN
          IF (COPYSTR(CardNumber,I,1) <> ' ') AND (NOT EVALUATE(Integer,COPYSTR(CardNumber,I,1))) THEN
            ERROR(Text004,DOPaymentCreditCard.FIELDCAPTION("Credit Card Number"));
        END;

      IF DOPaymentCardType."Min. Length" > 0 THEN
        IF STRLEN(CardNumber) < DOPaymentCardType."Min. Length" THEN
          ERROR(Text007,DOPaymentCreditCard.FIELDCAPTION("Credit Card Number"));

      IF DOPaymentCardType."Max. Length" > 0 THEN
        IF STRLEN(CardNumber) > DOPaymentCardType."Max. Length" THEN
          ERROR(Text008,DOPaymentCreditCard.FIELDCAPTION("Credit Card Number"));

      IsValid := TRUE;
      IF DOPaymentCardType."Validation Rule" > 0 THEN
        CASE DOPaymentCardType."Validation Rule" OF
          1:
            IsValid := IsModulus10(CardNumber);
          ELSE
            ERROR(Text005,DOPaymentCreditCard.FIELDCAPTION(Type));
        END;

      IF NOT IsValid THEN
        ERROR(Text003,DOPaymentCreditCard.FIELDCAPTION("Credit Card Number"));
    END;

    LOCAL PROCEDURE IsModulus10@3(CardNo@1000 : Text[30]) : Boolean;
    VAR
      I@1001 : Integer;
      IntegerValue@1002 : Integer;
      SumValue@1003 : Integer;
    BEGIN
      WHILE STRLEN(CardNo) MOD 2 <> 0 DO
        CardNo := '0' + CardNo;

      IF STRPOS(CardNo,' ') > 0 THEN
        ERROR(Text006);

      FOR I := 0 TO STRLEN(CardNo) - 1 DO
        IF I MOD 2 = 0 THEN BEGIN
          EVALUATE(IntegerValue,COPYSTR(CardNo,I + 1,1));
          IF (IntegerValue * 2) > 9 THEN
            SumValue := SumValue + (1 + ((IntegerValue * 2) MOD 10))
          ELSE
            SumValue := SumValue + IntegerValue * 2;
        END ELSE BEGIN
          EVALUATE(IntegerValue,COPYSTR(CardNo,I + 1,1));
          SumValue := SumValue + IntegerValue;
        END;

      IF SumValue MOD 10 <> 0 THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

