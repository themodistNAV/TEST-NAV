OBJECT Page 5097 Create To-do
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Create To-do;
               ENG=Create To-do];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table5080;
    DataCaptionExpr=Caption;
    PageType=NavigatePage;
    OnInit=BEGIN
             AttachmentEnable := TRUE;
             "Language CodeEnable" := TRUE;
             "Calc. Due Date FromEnable" := TRUE;
             "Recurring Date IntervalEnable" := TRUE;
             "Wizard Contact NameEnable" := TRUE;
             NextEnable := TRUE;
             AllDayEventEnable := TRUE;
             LocationEnable := TRUE;
             DurationEnable := TRUE;
             "Ending TimeEnable" := TRUE;
             "Start TimeEnable" := TRUE;
             "Team CodeEnable" := TRUE;
             "Salesperson CodeEnable" := TRUE;
             AttendeeSubformVisible := TRUE;
             "Team CodeEditable" := TRUE;
             "Salesperson CodeEditable" := TRUE;
             WizardOpportunityDescriptionEd := TRUE;
             WizardCampaignDescriptionEdita := TRUE;
             "Wizard Contact NameEditable" := TRUE;
             TeamTodoEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 FormWidth := CancelXPos + CancelWidth + 220;
                 FrmXPos := ROUND((FrmWidth - FormWidth) / 2,1) + FrmXPos;
                 FrmYPos := 3000;
                 FrmHeight := CancelYPos + CancelHeight + 220;
                 FrmWidth := FormWidth;

                 "Wizard Contact NameEditable" := FALSE;
                 WizardCampaignDescriptionEdita := FALSE;
                 WizardOpportunityDescriptionEd := FALSE;

                 IF SalesPurchPerson.GET(GETFILTER("Salesperson Code")) THEN BEGIN
                   "Salesperson CodeEditable" := FALSE;
                   TeamTodoEditable := FALSE;
                 END;

                 IF "Team To-do" THEN BEGIN
                   "Team CodeEditable" := FALSE;
                   TeamTodoEditable := FALSE;
                 END;

                 IF "Segment Description" <> '' THEN
                   SegmentDescEditable := FALSE;

                 ShowStep(TRUE);
               END;

    OnAfterGetRecord=BEGIN
                       EnableFields;
                       WizardContactNameOnFormat(FORMAT("Wizard Contact Name"));
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 8       ;1   ;Action    ;
                      Name=Back;
                      CaptionML=[ENU=&Back;
                                 ENG=&Back];
                      Enabled=BackEnable;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 ShowStep(FALSE);
                                 PerformPrevWizardStatus;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                                 // UpdateCntrls;
                               END;
                                }
      { 9       ;1   ;Action    ;
                      Name=NextStep;
                      CaptionML=[ENU=&Next;
                                 ENG=&Next];
                      Enabled=NextEnable;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 IF "Wizard Step" = "Wizard Step"::"3" THEN BEGIN
                                   CurrPage.AttendeeSubform.PAGE.GetAttendee(AttendeeTemp);
                                   SetAttendee(AttendeeTemp);
                                 END;

                                 CheckStatus;
                                 ShowStep(FALSE);
                                 PerformNextWizardStatus;
                                 ShowStep(TRUE);
                                 CurrPage.UPDATE(TRUE);
                                 // UpdateCntrls;
                               END;
                                }
      { 10      ;1   ;Action    ;
                      Name=Finish;
                      CaptionML=[ENU=&Finish;
                                 ENG=&Finish];
                      Enabled=FinishEnable;
                      InFooterBar=Yes;
                      Image=Approve;
                      OnAction=BEGIN
                                 CurrPage.AttendeeSubform.PAGE.GetAttendee(AttendeeTemp);
                                 SetAttendee(AttendeeTemp);

                                 CheckStatus;
                                 FinishWizard;
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 43  ;1   ;Group     ;
                Name=Step2;
                CaptionML=[ENU=Step 2;
                           ENG=Step 2];
                Visible=Step2Visible;
                GroupType=Group;
                InstructionalTextML=[ENU=If you want to invite attendees, you may now select them from contacts and salespeople.;
                                     ENG=If you want to invite attendees, you may now select them from contacts and salespeople.] }

    { 48  ;2   ;Part      ;
                Name=AttendeeSubform;
                SubPageLink=To-do No.=FIELD(No.);
                PagePartID=Page5198;
                Visible=AttendeeSubformVisible }

    { 59  ;2   ;Field     ;
                CaptionML=[ENU=Send invitation(s) when I click Finish.;
                           ENG=Send invitation(s) when I click Finish.];
                SourceExpr="Send on finish" }

    { 50  ;2   ;Field     ;
                CaptionML=[ENU=Which template will you use for this e-mail invitation?;
                           ENG=Which template will you use for this e-mail invitation?];
                SourceExpr="Interaction Template Code";
                TableRelation="Interaction Template";
                OnValidate=BEGIN
                             ValidateInteractionTemplCode;
                             InteractionTemplateCodeOnAfter;
                           END;
                            }

    { 2   ;2   ;Field     ;
                SourceExpr="Language Code";
                Enabled="Language CodeEnable";
                OnValidate=BEGIN
                             ValidateLanguageCode;
                           END;

                OnLookup=BEGIN
                           LookupLanguageCode;
                         END;
                          }

    { 57  ;2   ;Field     ;
                Name=Attachment;
                AssistEdit=Yes;
                CaptionML=[ENU=Attachment;
                           ENG=Attachment];
                SourceExpr="Attachment No." > 0;
                Enabled=AttachmentEnable;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               AssistEditAttachment;
                             END;
                              }

    { 3   ;1   ;Group     ;
                Name=Step3;
                CaptionML=[ENU=Step 3;
                           ENG=Step 3];
                Visible=Step3Visible;
                GroupType=Group;
                InstructionalTextML=[ENU=You can now specify optional detailed information regarding the To-do:;
                                     ENG=You can now specify optional detailed information regarding the To-do:] }

    { 32  ;2   ;Field     ;
                Lookup=No;
                CaptionML=[ENU=To which campaign is the to-do linked?;
                           ENG=To which campaign is the to-do linked?];
                SourceExpr="Wizard Campaign Description";
                TableRelation=Campaign;
                Editable=WizardCampaignDescriptionEdita;
                OnAssistEdit=VAR
                               Campaign@1102601001 : Record 5071;
                             BEGIN
                               IF GETFILTER("Campaign No.") = '' THEN BEGIN
                                 IF Campaign.GET("Campaign No.") THEN ;
                                 IF PAGE.RUNMODAL(0,Campaign) = ACTION::LookupOK THEN BEGIN
                                   VALIDATE("Campaign No.",Campaign."No.");
                                   "Wizard Campaign Description" := Campaign.Description;
                                 END;
                               END;
                             END;
                              }

    { 35  ;2   ;Field     ;
                Lookup=No;
                CaptionML=[ENU=What is the opportunity?;
                           ENG=What is the opportunity?];
                SourceExpr="Wizard Opportunity Description";
                TableRelation=Opportunity;
                Editable=WizardOpportunityDescriptionEd;
                OnAssistEdit=VAR
                               Opp@1102601001 : Record 5092;
                             BEGIN
                               IF GETFILTER("Opportunity No.") = '' THEN BEGIN
                                 IF Opp.GET("Opportunity No.") THEN ;
                                 IF PAGE.RUNMODAL(0,Opp) = ACTION::LookupOK THEN BEGIN
                                   VALIDATE("Opportunity No.",Opp."No.");
                                   "Wizard Opportunity Description" := Opp.Description;
                                 END;
                               END;
                             END;
                              }

    { 37  ;2   ;Field     ;
                Name=SegmentDesc;
                Lookup=No;
                CaptionML=[ENU=To-dos will be created for contacts linked to segment:;
                           ENG=To-dos will be created for contacts linked to segment:];
                SourceExpr="Segment Description";
                TableRelation="Segment Header";
                Editable=SegmentDescEditable;
                OnAssistEdit=VAR
                               Segment@1102601000 : Record 5076;
                             BEGIN
                               IF GETFILTER("Segment No.") = '' THEN BEGIN
                                 IF Segment.GET("Segment No.") THEN ;
                                 IF PAGE.RUNMODAL(0,Segment) = ACTION::LookupOK THEN BEGIN
                                   VALIDATE("Segment No.",Segment."No.");
                                   "Segment Description" := Segment.Description;
                                 END;
                               END;
                             END;
                              }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=What is the priority of the to-do?;
                           ENG=What is the priority of the to-do?];
                SourceExpr=Priority }

    { 53  ;2   ;Field     ;
                Name=Location;
                CaptionML=[ENU=What is the location of the to-do?;
                           ENG=What is the location of the to-do?];
                SourceExpr=Location;
                Enabled=LocationEnable }

    { 1   ;1   ;Group     ;
                Name=Step1;
                CaptionML=[ENU=Step 1;
                           ENG=Step 1];
                Visible=Step1Visible;
                GroupType=Group;
                InstructionalTextML=[ENU=This wizard helps you to create to-dos.;
                                     ENG=This wizard helps you to create to-dos.] }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=What is the type of the to-do?;
                           ENG=What is the type of the to-do?];
                SourceExpr=Type;
                OnValidate=BEGIN
                             IF Type <> xRec.Type THEN
                               IF Type = Type::Meeting THEN BEGIN
                                 AssignDefaultAttendeeInfo;
                                 LoadTempAttachment;
                               END ELSE
                                 ClearDefaultAttendeeInfo;
                             TypeOnAfterValidate;
                           END;
                            }

    { 23  ;2   ;Field     ;
                CaptionML=[ENU=Describe your to-do.;
                           ENG=Describe your to-do.];
                SourceExpr=Description }

    { 44  ;2   ;Field     ;
                Name=AllDayEvent;
                CaptionML=[ENU=All Day Event;
                           ENG=All Day Event];
                SourceExpr="All Day Event";
                Enabled=AllDayEventEnable;
                OnValidate=BEGIN
                             AllDayEventOnAfterValidate;
                           END;
                            }

    { 12  ;2   ;Field     ;
                CaptionML=[ENU=What is the start date of the to-do?;
                           ENG=What is the start date of the to-do?];
                SourceExpr=Date }

    { 49  ;2   ;Field     ;
                Name=Start Time;
                CaptionML=[ENU=What is the start time of the to-do?;
                           ENG=What is the start time of the to-do?];
                SourceExpr="Start Time";
                Enabled="Start TimeEnable" }

    { 51  ;2   ;Field     ;
                CaptionML=[ENU=What is the duration of the to-do?;
                           ENG=What is the duration of the to-do?];
                SourceExpr=Duration;
                Enabled=DurationEnable }

    { 45  ;2   ;Field     ;
                Name=Ending Date;
                CaptionML=[ENU=What is the end date of the to-do?;
                           ENG=What is the end date of the to-do?];
                SourceExpr="Ending Date" }

    { 55  ;2   ;Field     ;
                Name=Ending Time;
                CaptionML=[ENU=What is the end time of the to-do?;
                           ENG=What is the end time of the to-do?];
                SourceExpr="Ending Time";
                Enabled="Ending TimeEnable" }

    { 29  ;2   ;Field     ;
                Name=TeamTodo;
                CaptionML=[ENU=Team to-do;
                           ENG=Team to-do];
                SourceExpr="Team To-do";
                Editable=TeamTodoEditable;
                OnValidate=BEGIN
                             IF NOT "Team To-do" THEN BEGIN
                               "Team Code" := '';
                               IF Type = Type::Meeting THEN BEGIN
                                 ClearDefaultAttendeeInfo;
                                 AssignDefaultAttendeeInfo
                               END
                             END
                           END;
                            }

    { 63  ;1   ;Group     ;
                Name=Step2NoAttendees;
                CaptionML=[ENU=Step 2 - No Attendees;
                           ENG=Step 2 - No Attendees];
                Visible=Step2NoAttendeesVisible;
                GroupType=Group;
                InstructionalTextML=[ENU=You must now record the contact, and the salesperson or the team linked to this to-do.;
                                     ENG=You must now record the contact, and the salesperson or the team linked to this to-do.] }

    { 62  ;2   ;Field     ;
                Lookup=No;
                CaptionML=[ENU=Who is the contact?;
                           ENG=Who is the contact?];
                SourceExpr="Wizard Contact Name";
                TableRelation=Contact;
                Enabled="Wizard Contact NameEnable";
                Editable="Wizard Contact NameEditable";
                OnAssistEdit=VAR
                               Cont@1102601001 : Record 5050;
                             BEGIN
                               IF (GETFILTER("Contact No.") = '') AND (GETFILTER("Contact Company No.") = '') AND ("Segment Description" = '') THEN BEGIN
                                 IF Cont.GET("Contact No.") THEN ;
                                 IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                   VALIDATE("Contact No.",Cont."No.");
                                   "Wizard Contact Name" := Cont.Name;
                                 END;
                               END;
                             END;
                              }

    { 25  ;2   ;Field     ;
                CaptionML=[ENU=Who is the salesperson responsible?;
                           ENG=Who is the salesperson responsible?];
                SourceExpr="Salesperson Code";
                Enabled="Salesperson CodeEnable";
                Editable="Salesperson CodeEditable" }

    { 30  ;2   ;Field     ;
                CaptionML=[ENU=What is the team code?;
                           ENG=What is the team code?];
                SourceExpr="Team Code";
                Enabled="Team CodeEnable";
                Editable="Team CodeEditable";
                OnValidate=BEGIN
                             IF (xRec."Team Code" <> "Team Code") AND
                                ("Team Code" <> '') AND
                                (Type = Type::Meeting)
                             THEN BEGIN
                               ClearDefaultAttendeeInfo;
                               AssignDefaultAttendeeInfo
                             END
                           END;
                            }

    { 4   ;1   ;Group     ;
                Name=Step4;
                CaptionML=[ENU=Step 4;
                           ENG=Step 4];
                Visible=Step4Visible;
                GroupType=Group;
                InstructionalTextML=[ENU=If the to-do is recurring, you can now specify optional information.;
                                     ENG=If the to-do is recurring, you can now specify optional information.] }

    { 17  ;2   ;Field     ;
                CaptionML=[ENU=Recurring to-do.;
                           ENG=Recurring to-do.];
                SourceExpr=Recurring;
                OnValidate=BEGIN
                             RecurringOnAfterValidate;
                           END;
                            }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=What is the recurring date interval?;
                           ENG=What is the recurring date interval?];
                SourceExpr="Recurring Date Interval";
                Enabled="Recurring Date IntervalEnable" }

    { 34  ;2   ;Field     ;
                CaptionML=[ENU=From which date do you want to calculate the due date?;
                           ENG=From which date do you want to calculate the due date?];
                SourceExpr="Calc. Due Date From";
                Enabled="Calc. Due Date FromEnable" }

  }
  CODE
  {
    VAR
      Text000@1025 : TextConst 'ENU=(Multiple);ENG=(Multiple)';
      Text001@1001 : TextConst 'ENU=untitled;ENG=untitled';
      Cont@1004 : Record 5050;
      SalesPurchPerson@1005 : Record 13;
      Campaign@1006 : Record 5071;
      Team@1007 : Record 5083;
      Opp@1008 : Record 5092;
      SegHeader@1009 : Record 5076;
      AttendeeTemp@1012 : TEMPORARY Record 5199;
      FormWidth@1011 : Integer;
      SalespersonFilter@1026 : Code[10];
      ContactFilter@1030 : Code[20];
      TeamTodoEditable@19073246 : Boolean INDATASET;
      "Wizard Contact NameEditable"@19024232 : Boolean INDATASET;
      WizardCampaignDescriptionEdita@19073396 : Boolean INDATASET;
      WizardOpportunityDescriptionEd@19027967 : Boolean INDATASET;
      "Salesperson CodeEditable"@19071610 : Boolean INDATASET;
      "Team CodeEditable"@19004084 : Boolean INDATASET;
      SegmentDescEditable@19045407 : Boolean INDATASET;
      CancelXPos@19007686 : Integer;
      CancelYPos@19003745 : Integer;
      CancelHeight@19054177 : Integer;
      CancelWidth@19035161 : Integer;
      FrmXPos@19006598 : Integer;
      FrmYPos@19016646 : Integer;
      FrmHeight@19058551 : Integer;
      FrmWidth@19057698 : Integer;
      Step1Visible@19067551 : Boolean INDATASET;
      Step2NoAttendeesVisible@19041656 : Boolean INDATASET;
      Step2Visible@19067406 : Boolean INDATASET;
      AttendeeSubformVisible@19047347 : Boolean INDATASET;
      Step3Visible@19067629 : Boolean INDATASET;
      Step4Visible@19067716 : Boolean INDATASET;
      "Salesperson CodeEnable"@19074307 : Boolean INDATASET;
      "Team CodeEnable"@19057977 : Boolean INDATASET;
      "Start TimeEnable"@19064228 : Boolean INDATASET;
      "Ending TimeEnable"@19019613 : Boolean INDATASET;
      DurationEnable@19035217 : Boolean INDATASET;
      LocationEnable@19013618 : Boolean INDATASET;
      AllDayEventEnable@19049519 : Boolean INDATASET;
      FinishEnable@19079943 : Boolean INDATASET;
      BackEnable@19029006 : Boolean INDATASET;
      NextEnable@19007695 : Boolean INDATASET;
      "Wizard Contact NameEnable"@19059568 : Boolean INDATASET;
      "Recurring Date IntervalEnable"@19019953 : Boolean INDATASET;
      "Calc. Due Date FromEnable"@19036769 : Boolean INDATASET;
      "Language CodeEnable"@19042658 : Boolean INDATASET;
      AttachmentEnable@19033701 : Boolean INDATASET;

    LOCAL PROCEDURE ShowStep@2(Visible@1001 : Boolean);
    BEGIN
      CASE "Wizard Step" OF
        "Wizard Step"::"1":
          BEGIN
            Step1Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := FALSE;
              BackEnable := FALSE;
              NextEnable := TRUE;
            END;
          END;
        "Wizard Step"::"2":
          BEGIN
            Step2NoAttendeesVisible := Visible;

            IF Visible THEN BEGIN
              IF "Team To-do" = FALSE THEN BEGIN
                "Salesperson CodeEnable" := Visible;
                "Team CodeEnable" := NOT Visible;
              END ELSE BEGIN
                "Salesperson CodeEnable" := NOT Visible;
                "Team CodeEnable" := Visible;
              END;
              BackEnable := TRUE;
              IF Type = Type::Meeting THEN
                "Wizard Contact NameEnable" := FALSE
              ELSE
                FinishEnable := Visible;
            END;
          END;
        "Wizard Step"::"3":
          BEGIN
            Step2Visible := Visible;
            IF NOT Visible THEN
              CurrPage.AttendeeSubform.PAGE.GetAttendee(AttendeeTemp);
            IF Visible THEN BEGIN
              GetAttendee(AttendeeTemp);
              CurrPage.AttendeeSubform.PAGE.SetAttendee(AttendeeTemp);
              CurrPage.AttendeeSubform.PAGE.SetTodoFilter(SalespersonFilter,ContactFilter);
              CurrPage.AttendeeSubform.PAGE.UpdateForm;
            END;

            IF Visible THEN BEGIN
              FinishEnable := TRUE;
              BackEnable := TRUE;
              NextEnable := TRUE;
            END;
          END;
        4:
          BEGIN
            Step3Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := TRUE;
              BackEnable := TRUE;
              NextEnable := TRUE;
            END;
          END;
        5:
          BEGIN
            Step4Visible := Visible;
            IF Visible THEN BEGIN
              FinishEnable := TRUE;
              BackEnable := TRUE;
              NextEnable := FALSE;
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE Caption@1() : Text[260];
    VAR
      CaptionStr@1000 : Text[260];
    BEGIN
      IF Cont.GET(GETFILTER("Contact Company No.")) THEN
        CaptionStr := COPYSTR(Cont."No." + ' ' + Cont.Name,1,MAXSTRLEN(CaptionStr));
      IF Cont.GET(GETFILTER("Contact No.")) THEN
        CaptionStr := COPYSTR(CaptionStr + ' ' + Cont."No." + ' ' + Cont.Name,1,MAXSTRLEN(CaptionStr));
      IF SalesPurchPerson.GET(GETFILTER("Salesperson Code")) THEN
        CaptionStr := COPYSTR(CaptionStr + ' ' + SalesPurchPerson.Code + ' ' + SalesPurchPerson.Name,1,MAXSTRLEN(CaptionStr));
      IF Team.GET(GETFILTER("Team Code")) THEN
        CaptionStr := COPYSTR(CaptionStr + ' ' + Team.Code + ' ' + Team.Name,1,MAXSTRLEN(CaptionStr));
      IF Campaign.GET(GETFILTER("Campaign No.")) THEN
        CaptionStr := COPYSTR(CaptionStr + ' ' + Campaign."No." + ' ' + Campaign.Description,1,MAXSTRLEN(CaptionStr));
      IF Opp.GET(GETFILTER("Opportunity No.")) THEN
        CaptionStr := COPYSTR(CaptionStr + ' ' + Opp."No." + ' ' + Opp.Description,1,MAXSTRLEN(CaptionStr));
      IF SegHeader.GET(GETFILTER("Segment No.")) THEN
        CaptionStr := COPYSTR(CaptionStr + ' ' + SegHeader."No." + ' ' + SegHeader.Description,1,MAXSTRLEN(CaptionStr));
      IF CaptionStr = '' THEN
        CaptionStr := Text001;

      EXIT(CaptionStr);
    END;

    LOCAL PROCEDURE EnableFields@21();
    BEGIN
      "Recurring Date IntervalEnable" := Recurring;
      "Calc. Due Date FromEnable" := Recurring;

      IF NOT Recurring THEN BEGIN
        EVALUATE("Recurring Date Interval",'');
        CLEAR("Calc. Due Date From");
      END;

      IF Type = Type::Meeting THEN BEGIN
        "Start TimeEnable" := NOT "All Day Event";
        "Ending TimeEnable" := NOT "All Day Event";
        DurationEnable := NOT "All Day Event";
        LocationEnable := TRUE;
        AllDayEventEnable := TRUE;
        "Language CodeEnable" := "Interaction Template Code" <> '';
        AttachmentEnable := "Interaction Template Code" <> '';
      END ELSE BEGIN
        "Start TimeEnable" := FALSE;
        "Ending TimeEnable" := FALSE;
        LocationEnable := FALSE;
        DurationEnable := FALSE;
        AllDayEventEnable := FALSE;
      END;
    END;

    LOCAL PROCEDURE TypeOnAfterValidate@19069045();
    BEGIN
      EnableFields;
    END;

    LOCAL PROCEDURE AllDayEventOnAfterValidate@19020274();
    BEGIN
      EnableFields;
    END;

    LOCAL PROCEDURE RecurringOnAfterValidate@19068337();
    BEGIN
      EnableFields;
    END;

    LOCAL PROCEDURE InteractionTemplateCodeOnAfter@19000597();
    BEGIN
      EnableFields
    END;

    LOCAL PROCEDURE WizardContactNameOnFormat@19031225(Text@19070643 : Text[1024]);
    BEGIN
      IF SegHeader.GET(GETFILTER("Segment No.")) THEN
        Text := Text000;
    END;

    BEGIN
    END.
  }
}

