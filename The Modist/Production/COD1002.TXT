OBJECT Codeunit 1002 Job Create-Invoice
{
  OBJECT-PROPERTIES
  {
    Date=22/12/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.44365;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Currency@1005 : Record 4;
      SalesHeader@1001 : Record 36;
      SalesHeader2@1006 : Record 36;
      SalesLine@1000 : Record 37;
      TempJobPlanningLine@1017 : TEMPORARY Record 1003;
      Text000@1008 : TextConst 'ENU=The lines were successfully transferred to an invoice.;ENG=The lines were successfully transferred to an invoice.';
      Text001@1009 : TextConst 'ENU=The lines were not transferred to an invoice.;ENG=The lines were not transferred to an invoice.';
      Text002@1010 : TextConst 'ENU=There was no %1 with a %2 larger than 0. No lines were transferred.;ENG=There was no %1 with a %2 larger than 0. No lines were transferred.';
      Text003@1011 : TextConst 'ENU=%1 may not be lower than %2 and may not exceed %3.;ENG=%1 may not be lower than %2 and may not exceed %3.';
      Text004@1015 : TextConst 'ENU=You must specify Invoice No. or New Invoice.;ENG=You must specify Invoice No. or New Invoice.';
      Text005@1014 : TextConst 'ENU=You must specify Credit Memo No. or New Invoice.;ENG=You must specify Credit Memo No. or New Invoice.';
      Text007@1012 : TextConst 'ENU=You must specify %1.;ENG=You must specify %1.';
      TransferExtendedText@1016 : Codeunit 378;
      JobInvCurrency@1002 : Boolean;
      UpdateExchangeRates@1019 : Boolean;
      Text008@1018 : TextConst 'ENU=The lines were successfully transferred to a credit memo.;ENG=The lines were successfully transferred to a credit memo.';
      Text009@1003 : TextConst 'ENU=The selected planning lines must have the same %1.;ENG=The selected planning lines must have the same %1.';
      Text010@1004 : TextConst 'ENU=The currency dates on all planning lines will be updated based on the invoice posting date because there is a difference in currency exchange rates. Recalculations will be based on the Exch. Calculation setup for the Cost and Price values for the job. Do you want to continue?;ENG=The currency dates on all planning lines will be updated based on the invoice posting date because there is a difference in currency exchange rates. Recalculations will be based on the Exch. Calculation setup for the Cost and Price values for the job. Do you want to continue?';
      Text011@1007 : TextConst 'ENU=The currency exchange rate on all planning lines will be updated based on the exchange rate on the sales invoice. Do you want to continue?;ENG=The currency exchange rate on all planning lines will be updated based on the exchange rate on the sales invoice. Do you want to continue?';
      Text012@1013 : TextConst '@@@=The Sales Invoice Header 103001 does not exist in the system anymore. A printed copy of the document was created before deletion.;ENU=The %1 %2 does not exist anymore. A printed copy of the document was created before the document was deleted.;ENG=The %1 %2 does not exist anymore. A printed copy of the document was created before the document was deleted.';
      NoOfSalesLinesCreated@1020 : Integer;

    PROCEDURE CreateSalesInvoice@9(VAR JobPlanningLine@1011 : Record 1003;CrMemo@1000 : Boolean);
    VAR
      SalesHeader@1010 : Record 36;
      GetSalesInvoiceNo@1005 : Report 1094;
      GetSalesCrMemoNo@1009 : Report 1092;
      Done@1004 : Boolean;
      NewInvoice@1003 : Boolean;
      PostingDate@1002 : Date;
      InvoiceNo@1001 : Code[20];
    BEGIN
      IF NOT CrMemo THEN BEGIN
        GetSalesInvoiceNo.SetCustomer(JobPlanningLine."Job No.");
        GetSalesInvoiceNo.RUNMODAL;
        GetSalesInvoiceNo.GetInvoiceNo(Done,NewInvoice,PostingDate,InvoiceNo);
      END ELSE BEGIN
        GetSalesCrMemoNo.SetCustomer(JobPlanningLine."Job No.");
        GetSalesCrMemoNo.RUNMODAL;
        GetSalesCrMemoNo.GetCreditMemoNo(Done,NewInvoice,PostingDate,InvoiceNo);
      END;

      IF Done THEN BEGIN
        IF (PostingDate = 0D) AND NewInvoice THEN
          ERROR(Text007,SalesHeader.FIELDCAPTION("Posting Date"));
        IF (InvoiceNo = '') AND NOT NewInvoice THEN BEGIN
          IF CrMemo THEN
            ERROR(Text005);
          ERROR(Text004);
        END;
        CreateSalesInvoiceLines(
          JobPlanningLine."Job No.",JobPlanningLine,InvoiceNo,NewInvoice,PostingDate,CrMemo);
      END;
    END;

    LOCAL PROCEDURE CreateSalesInvoiceLines@1(JobNo@1000 : Code[20];VAR JobPlanningLine@1004 : Record 1003;InvoiceNo@1007 : Code[20];NewInvoice@1001 : Boolean;PostingDate@1006 : Date;CreditMemo@1008 : Boolean);
    VAR
      Cust@1003 : Record 18;
      Job@1002 : Record 167;
      JobPlanningLineInvoice@1009 : Record 1022;
      LineCounter@1005 : Integer;
    BEGIN
      CLEARALL;
      Job.GET(JobNo);
      IF Job.Blocked = Job.Blocked::All THEN
        Job.TestBlocked;
      IF Job."Currency Code" = '' THEN
        JobInvCurrency := Job."Invoice Currency Code" <> '';
      Job.TESTFIELD("Bill-to Customer No.");
      Cust.GET(Job."Bill-to Customer No.");
      IF CreditMemo THEN
        SalesHeader2."Document Type" := SalesHeader2."Document Type"::"Credit Memo"
      ELSE
        SalesHeader2."Document Type" := SalesHeader2."Document Type"::Invoice;

      IF NOT NewInvoice THEN
        SalesHeader.GET(SalesHeader2."Document Type",InvoiceNo);

      IF JobPlanningLine.FIND('-') THEN
        REPEAT
          IF TransferLine(JobPlanningLine) THEN BEGIN
            LineCounter := LineCounter + 1;
            IF JobPlanningLine."Job No." <> JobNo THEN
              ERROR(Text009,JobPlanningLine.FIELDCAPTION("Job No."));
            IF NewInvoice THEN
              TestExchangeRate(JobPlanningLine,PostingDate)
            ELSE
              TestExchangeRate(JobPlanningLine,SalesHeader."Posting Date");
          END;
        UNTIL JobPlanningLine.NEXT = 0;

      IF LineCounter = 0 THEN
        ERROR(Text002,
          JobPlanningLine.TABLECAPTION,
          JobPlanningLine.FIELDCAPTION("Qty. to Transfer to Invoice"));

      IF NewInvoice THEN
        CreateSalesheader(Job,PostingDate)
      ELSE
        TestSalesHeader(SalesHeader,Job);
      IF JobPlanningLine.FIND('-') THEN
        REPEAT
          IF TransferLine(JobPlanningLine) THEN BEGIN
            IF JobPlanningLine.Type IN [JobPlanningLine.Type::Resource,
                                        JobPlanningLine.Type::Item,
                                        JobPlanningLine.Type::"G/L Account"]
            THEN
              JobPlanningLine.TESTFIELD("No.");
            CreateSalesLine(JobPlanningLine);

            JobPlanningLineInvoice."Job No." := JobPlanningLine."Job No.";
            JobPlanningLineInvoice."Job Task No." := JobPlanningLine."Job Task No.";
            JobPlanningLineInvoice."Job Planning Line No." := JobPlanningLine."Line No.";
            IF SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice THEN
              JobPlanningLineInvoice."Document Type" := JobPlanningLineInvoice."Document Type"::Invoice;
            IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" THEN
              JobPlanningLineInvoice."Document Type" := JobPlanningLineInvoice."Document Type"::"Credit Memo";
            JobPlanningLineInvoice."Document No." := SalesHeader."No.";
            JobPlanningLineInvoice."Line No." := SalesLine."Line No.";
            JobPlanningLineInvoice."Quantity Transferred" := JobPlanningLine."Qty. to Transfer to Invoice";
            IF NewInvoice THEN
              JobPlanningLineInvoice."Transferred Date" := PostingDate
            ELSE
              JobPlanningLineInvoice."Transferred Date" := SalesHeader."Posting Date";
            JobPlanningLineInvoice.INSERT;

            JobPlanningLine.UpdateQtyToTransfer;
            JobPlanningLine.MODIFY;
          END;
        UNTIL JobPlanningLine.NEXT = 0;

      IF NoOfSalesLinesCreated = 0 THEN
        ERROR(Text002,JobPlanningLine.TABLECAPTION,JobPlanningLine.FIELDCAPTION("Qty. to Transfer to Invoice"));

      COMMIT;

      IF CreditMemo THEN
        MESSAGE(Text008)
      ELSE
        MESSAGE(Text000);
    END;

    PROCEDURE DeleteSalesInvoiceBuffer@10();
    BEGIN
      CLEARALL;
      TempJobPlanningLine.DELETEALL;
    END;

    PROCEDURE CreateSalesInvoiceJT@7(VAR JT2@1000 : Record 1001;PostingDate@1006 : Date;InvoicePerTask@1007 : Boolean;VAR NoOfInvoices@1008 : Integer;VAR OldJobNo@1004 : Code[20];VAR OldJTNo@1009 : Code[20];LastJobTask@1010 : Boolean);
    VAR
      Cust@1003 : Record 18;
      Job@1002 : Record 167;
      JT@1011 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      JobPlanningLineInvoice@1005 : Record 1022;
    BEGIN
      CLEARALL;
      IF NOT LastJobTask THEN BEGIN
        JT := JT2;
        IF JT."Job No." = '' THEN
          EXIT;
        IF JT."Job Task No." = '' THEN
          EXIT;
        JT.FIND;
        IF JT."Job Task Type" <> JT."Job Task Type"::Posting THEN
          EXIT;
        Job.GET(JT."Job No.");
      END;
      IF LastJobTask THEN BEGIN
        IF NOT TempJobPlanningLine.FIND('-') THEN
          EXIT;
        Job.GET(TempJobPlanningLine."Job No.");
        JT.GET(TempJobPlanningLine."Job No.",TempJobPlanningLine."Job Task No.");
      END;
      Job.TESTFIELD("Bill-to Customer No.");
      IF Job.Blocked = Job.Blocked::All THEN
        Job.TestBlocked;
      IF Job."Currency Code" = '' THEN
        JobInvCurrency := Job."Invoice Currency Code" <> '';
      Cust.GET(Job."Bill-to Customer No.");

      IF CreateNewInvoice(JT,InvoicePerTask,OldJobNo,OldJTNo,LastJobTask) THEN BEGIN
        Job.GET(TempJobPlanningLine."Job No.");
        Cust.GET(Job."Bill-to Customer No.");
        NoOfInvoices := NoOfInvoices + 1;
        SalesHeader2."Document Type" := SalesHeader2."Document Type"::Invoice;
        CreateSalesheader(Job,PostingDate);
        IF TempJobPlanningLine.FIND('-') THEN
          REPEAT
            Job.GET(TempJobPlanningLine."Job No.");
            JobInvCurrency := (Job."Currency Code" = '') AND (Job."Invoice Currency Code" <> '');
            JobPlanningLine := TempJobPlanningLine;
            JobPlanningLine.FIND;
            IF JobPlanningLine.Type IN [JobPlanningLine.Type::Resource,
                                        JobPlanningLine.Type::Item,
                                        JobPlanningLine.Type::"G/L Account"]
            THEN
              JobPlanningLine.TESTFIELD("No.");
            TestExchangeRate(JobPlanningLine,PostingDate);
            CreateSalesLine(JobPlanningLine);

            JobPlanningLineInvoice."Job No." := JobPlanningLine."Job No.";
            JobPlanningLineInvoice."Job Task No." := JobPlanningLine."Job Task No.";
            JobPlanningLineInvoice."Job Planning Line No." := JobPlanningLine."Line No.";
            IF SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice THEN
              JobPlanningLineInvoice."Document Type" := JobPlanningLineInvoice."Document Type"::Invoice;
            IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" THEN
              JobPlanningLineInvoice."Document Type" := JobPlanningLineInvoice."Document Type"::"Credit Memo";
            JobPlanningLineInvoice."Document No." := SalesHeader."No.";
            JobPlanningLineInvoice."Line No." := SalesLine."Line No.";
            JobPlanningLineInvoice."Quantity Transferred" := JobPlanningLine."Qty. to Transfer to Invoice";
            JobPlanningLineInvoice."Transferred Date" := PostingDate;
            JobPlanningLineInvoice.INSERT;

            JobPlanningLine.UpdateQtyToTransfer;
            JobPlanningLine.MODIFY;
          UNTIL TempJobPlanningLine.NEXT = 0;
        TempJobPlanningLine.DELETEALL;
      END;

      IF LastJobTask THEN BEGIN
        IF NoOfSalesLinesCreated = 0 THEN
          ERROR(Text002,JobPlanningLine.TABLECAPTION,JobPlanningLine.FIELDCAPTION("Qty. to Transfer to Invoice"));
        EXIT;
      END;

      JobPlanningLine.RESET;
      JobPlanningLine.SETCURRENTKEY("Job No.","Job Task No.");
      JobPlanningLine.SETRANGE("Job No.",JT2."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JT2."Job Task No.");
      JobPlanningLine.SETFILTER("Planning Date",JT2.GETFILTER("Planning Date Filter"));

      IF JobPlanningLine.FIND('-') THEN
        REPEAT
          IF TransferLine(JobPlanningLine) THEN BEGIN
            TempJobPlanningLine := JobPlanningLine;
            TempJobPlanningLine.INSERT;
          END;
        UNTIL JobPlanningLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateNewInvoice@11(VAR JT@1003 : Record 1001;InvoicePerTask@1005 : Boolean;VAR OldJobNo@1000 : Code[20];VAR OldJTNo@1001 : Code[20];LastJobTask@1002 : Boolean) : Boolean;
    VAR
      NewInvoice@1004 : Boolean;
    BEGIN
      IF LastJobTask THEN
        NewInvoice := TRUE
      ELSE BEGIN
        IF OldJobNo <> '' THEN BEGIN
          IF InvoicePerTask THEN
            IF (OldJobNo <> JT."Job No.") OR (OldJTNo <> JT."Job Task No.") THEN
              NewInvoice := TRUE;
          IF NOT InvoicePerTask THEN
            IF OldJobNo <> JT."Job No." THEN
              NewInvoice := TRUE;
        END;
        OldJobNo := JT."Job No.";
        OldJTNo := JT."Job Task No.";
      END;
      IF NOT TempJobPlanningLine.FIND('-') THEN
        NewInvoice := FALSE;
      EXIT(NewInvoice);
    END;

    LOCAL PROCEDURE CreateSalesheader@2(Job@1004 : Record 167;PostingDate@1001 : Date);
    VAR
      SalesSetup@1003 : Record 311;
      Cust@1000 : Record 18;
    BEGIN
      CLEAR(SalesHeader);
      SalesHeader."Document Type" := SalesHeader2."Document Type";
      SalesSetup.GET;
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice THEN
        SalesSetup.TESTFIELD("Invoice Nos.");
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" THEN
        SalesSetup.TESTFIELD("Credit Memo Nos.");
      SalesHeader."Posting Date" := PostingDate;
      SalesHeader.INSERT(TRUE);
      Cust.GET(Job."Bill-to Customer No.");
      Cust.TESTFIELD("Bill-to Customer No.",'');
      SalesHeader.VALIDATE("Sell-to Customer No.",Job."Bill-to Customer No.");
      IF Job."Currency Code" <> '' THEN
        SalesHeader.VALIDATE("Currency Code",Job."Currency Code")
      ELSE
        SalesHeader.VALIDATE("Currency Code",Job."Invoice Currency Code");
      IF PostingDate <> 0D THEN
        SalesHeader.VALIDATE("Posting Date",PostingDate);
      UpdateSalesHeader(SalesHeader,Job);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLine@15(VAR JobPlanningLine@1000 : Record 1003);
    VAR
      Job@1003 : Record 167;
      DimMgt@1001 : Codeunit 408;
      Factor@1002 : Integer;
      DimSetIDArr@1004 : ARRAY [10] OF Integer;
    BEGIN
      Factor := 1;
      IF SalesHeader2."Document Type" = SalesHeader2."Document Type"::"Credit Memo" THEN
        Factor := -1;
      TestTransferred(JobPlanningLine);
      JobPlanningLine.TESTFIELD("Planning Date");
      Job.GET(JobPlanningLine."Job No.");
      CLEAR(SalesLine);
      SalesLine."Document Type" := SalesHeader2."Document Type";
      SalesLine."Document No." := SalesHeader."No.";

      IF (NOT JobInvCurrency) AND (JobPlanningLine.Type <> JobPlanningLine.Type::Text) THEN BEGIN
        SalesHeader.TESTFIELD("Currency Code",JobPlanningLine."Currency Code");
        IF Job."Currency Code" <> '' THEN BEGIN
          IF CONFIRM(Text011) THEN BEGIN
            JobPlanningLine.VALIDATE("Currency Factor",SalesHeader."Currency Factor");
            JobPlanningLine.MODIFY;
          END ELSE
            ERROR(Text001);
        END;
        SalesHeader.TESTFIELD("Currency Code",Job."Currency Code");
      END;
      IF JobPlanningLine.Type = JobPlanningLine.Type::Text THEN
        SalesLine.VALIDATE(Type,SalesLine.Type::" ");
      IF JobPlanningLine.Type = JobPlanningLine.Type::"G/L Account" THEN
        SalesLine.VALIDATE(Type,SalesLine.Type::"G/L Account");
      IF JobPlanningLine.Type = JobPlanningLine.Type::Item THEN
        SalesLine.VALIDATE(Type,SalesLine.Type::Item);
      IF JobPlanningLine.Type = JobPlanningLine.Type::Resource THEN
        SalesLine.VALIDATE(Type,SalesLine.Type::Resource);

      SalesLine.VALIDATE("No.",JobPlanningLine."No.");
      SalesLine.VALIDATE("Gen. Prod. Posting Group",JobPlanningLine."Gen. Prod. Posting Group");
      SalesLine.VALIDATE("Location Code",JobPlanningLine."Location Code");
      SalesLine.VALIDATE("Work Type Code",JobPlanningLine."Work Type Code");
      SalesLine.VALIDATE("Variant Code",JobPlanningLine."Variant Code");

      IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
        SalesLine.VALIDATE("Unit of Measure Code",JobPlanningLine."Unit of Measure Code");
        SalesLine.VALIDATE(Quantity,Factor * JobPlanningLine."Qty. to Transfer to Invoice");
        IF JobInvCurrency THEN BEGIN
          Currency.GET(SalesLine."Currency Code");
          SalesLine.VALIDATE("Unit Price",
            ROUND(JobPlanningLine."Unit Price" * SalesHeader."Currency Factor",
              Currency."Unit-Amount Rounding Precision"));
        END ELSE
          SalesLine.VALIDATE("Unit Price",JobPlanningLine."Unit Price");
        SalesLine.VALIDATE("Unit Cost (LCY)",JobPlanningLine."Unit Cost (LCY)");
        SalesLine.VALIDATE("Line Discount %",JobPlanningLine."Line Discount %");
        SalesLine."Inv. Discount Amount" := 0;
        SalesLine."Inv. Disc. Amount to Invoice" := 0;
        SalesLine.UpdateAmounts;
      END;
      IF NOT SalesHeader."Prices Including VAT" THEN
        SalesLine.VALIDATE("Job Contract Entry No.",JobPlanningLine."Job Contract Entry No.");
      SalesLine."Job No." := JobPlanningLine."Job No.";
      SalesLine."Job Task No." := JobPlanningLine."Job Task No.";
      IF SalesLine."Job Task No." <> '' THEN BEGIN
        DimSetIDArr[1] := SalesLine."Dimension Set ID";
        DimSetIDArr[2] :=
          DimMgt.CreateDimSetFromJobTaskDim(
            SalesLine."Job No.",SalesLine."Job Task No.",SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
        DimSetIDArr[3] := GetLedgEntryDimSetID(JobPlanningLine);
        DimSetIDArr[4] := GetJobLedgEntryDimSetID(JobPlanningLine);
        SalesLine."Dimension Set ID" :=
          DimMgt.GetCombinedDimensionSetID(
            DimSetIDArr,SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
      END;
      SalesLine.Description := JobPlanningLine.Description;
      SalesLine."Description 2" := JobPlanningLine."Description 2";
      SalesLine."Line No." := GetNextLineNo(SalesLine);
      SalesLine.INSERT(TRUE);
      IF SalesLine.Type <> SalesLine.Type::" " THEN
        NoOfSalesLinesCreated += 1;

      IF SalesHeader."Prices Including VAT" AND
         (SalesLine.Type <> SalesLine.Type::" ")
      THEN BEGIN
        IF SalesLine."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE
          Currency.GET(SalesLine."Currency Code");
        SalesLine."Unit Price" :=
          ROUND(
            SalesLine."Unit Price" * (1 + (SalesLine."VAT %" / 100)),
            Currency."Unit-Amount Rounding Precision");
        IF SalesLine.Quantity <> 0 THEN BEGIN
          SalesLine."Line Discount Amount" :=
            ROUND(
              SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
              Currency."Amount Rounding Precision");
          SalesLine.VALIDATE("Inv. Discount Amount",
            ROUND(
              SalesLine."Inv. Discount Amount" * (1 + (SalesLine."VAT %" / 100)),
              Currency."Amount Rounding Precision"));
        END;
        SalesLine.VALIDATE("Job Contract Entry No.",JobPlanningLine."Job Contract Entry No.");

        SalesLine.MODIFY;
        JobPlanningLine."VAT Unit Price" := SalesLine."Unit Price";
        JobPlanningLine."VAT Line Discount Amount" := SalesLine."Line Discount Amount";
        JobPlanningLine."VAT Line Amount" := SalesLine."Line Amount";
        JobPlanningLine."VAT %" := SalesLine."VAT %";
      END;
      IF TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,FALSE) THEN
        TransferExtendedText.InsertSalesExtText(SalesLine);
    END;

    LOCAL PROCEDURE TransferLine@16(VAR JobPlanningLine@1000 : Record 1003) : Boolean;
    BEGIN
      WITH JobPlanningLine DO BEGIN
        IF NOT "Contract Line" THEN
          EXIT(FALSE);
        IF Type = Type::Text THEN
          EXIT(TRUE);
        EXIT("Qty. to Transfer to Invoice" <> 0);
      END;
    END;

    LOCAL PROCEDURE GetNextLineNo@20(SalesLine@1002 : Record 37) : Integer;
    VAR
      NextLineNo@1000 : Integer;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      NextLineNo := 10000;
      IF SalesLine.FINDLAST THEN
        NextLineNo := SalesLine."Line No." + 10000;
      EXIT(NextLineNo);
    END;

    LOCAL PROCEDURE TestTransferred@3(JobPlanningLine@1000 : Record 1003);
    BEGIN
      WITH JobPlanningLine DO BEGIN
        CALCFIELDS("Qty. Transferred to Invoice");
        IF Quantity > 0 THEN BEGIN
          IF ("Qty. to Transfer to Invoice" > 0) AND ("Qty. to Transfer to Invoice" > (Quantity - "Qty. Transferred to Invoice")) OR
             ("Qty. to Transfer to Invoice" < 0)
          THEN
            ERROR(Text003,FIELDCAPTION("Qty. to Transfer to Invoice"),0,Quantity - "Qty. Transferred to Invoice");
        END ELSE BEGIN
          IF ("Qty. to Transfer to Invoice" > 0) OR
             ("Qty. to Transfer to Invoice" < 0) AND ("Qty. to Transfer to Invoice" < (Quantity - "Qty. Transferred to Invoice"))
          THEN
            ERROR(Text003,FIELDCAPTION("Qty. to Transfer to Invoice"),Quantity - "Qty. Transferred to Invoice",0);
        END;
      END;
    END;

    PROCEDURE DeleteSalesLine@4(SalesLine@1000 : Record 37);
    VAR
      JobPlanningLineInvoice@1001 : Record 1022;
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      WITH JobPlanningLineInvoice DO BEGIN
        CASE SalesLine."Document Type" OF
          SalesLine."Document Type"::Invoice:
            SETRANGE("Document Type","Document Type"::Invoice);
          SalesLine."Document Type"::"Credit Memo":
            SETRANGE("Document Type","Document Type"::"Credit Memo");
        END;
        SETRANGE("Document No.",SalesLine."Document No.");
        SETRANGE("Line No.",SalesLine."Line No.");
        IF FINDSET THEN
          REPEAT
            JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
            DELETE;
            JobPlanningLine.UpdateQtyToTransfer;
            JobPlanningLine.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE FindInvoices@13(VAR TempJobPlanningLineInvoice@1002 : TEMPORARY Record 1022;JobNo@1004 : Code[20];JobTaskNo@1005 : Code[20];JobPlanningLineNo@1006 : Integer;DetailLevel@1003 : 'All,Per Job,Per Job Task,Per Job Planning Line');
    VAR
      JobPlanningLineInvoice@1001 : Record 1022;
      RecordFound@1000 : Boolean;
    BEGIN
      CASE DetailLevel OF
        DetailLevel::All:
          BEGIN
            IF JobPlanningLineInvoice.FINDSET THEN
              TempJobPlanningLineInvoice := JobPlanningLineInvoice;
            EXIT;
          END;
        DetailLevel::"Per Job":
          JobPlanningLineInvoice.SETRANGE("Job No.",JobNo);
        DetailLevel::"Per Job Task":
          BEGIN
            JobPlanningLineInvoice.SETRANGE("Job No.",JobNo);
            JobPlanningLineInvoice.SETRANGE("Job Task No.",JobTaskNo);
          END;
        DetailLevel::"Per Job Planning Line":
          BEGIN
            JobPlanningLineInvoice.SETRANGE("Job No.",JobNo);
            JobPlanningLineInvoice.SETRANGE("Job Task No.",JobTaskNo);
            JobPlanningLineInvoice.SETRANGE("Job Planning Line No.",JobPlanningLineNo);
          END;
      END;

      TempJobPlanningLineInvoice.DELETEALL;
      IF JobPlanningLineInvoice.FINDSET THEN BEGIN
        REPEAT
          RecordFound := FALSE;
          CASE DetailLevel OF
            DetailLevel::"Per Job":
              IF TempJobPlanningLineInvoice.GET(
                   JobNo,'',0,JobPlanningLineInvoice."Document Type",JobPlanningLineInvoice."Document No.",0)
              THEN
                RecordFound := TRUE;
            DetailLevel::"Per Job Task":
              IF TempJobPlanningLineInvoice.GET(
                   JobNo,JobTaskNo,0,JobPlanningLineInvoice."Document Type",JobPlanningLineInvoice."Document No.",0)
              THEN
                RecordFound := TRUE;
            DetailLevel::"Per Job Planning Line":
              IF TempJobPlanningLineInvoice.GET(
                   JobNo,JobTaskNo,JobPlanningLineNo,JobPlanningLineInvoice."Document Type",JobPlanningLineInvoice."Document No.",0)
              THEN
                RecordFound := TRUE;
          END;

          IF RecordFound THEN BEGIN
            TempJobPlanningLineInvoice."Quantity Transferred" += JobPlanningLineInvoice."Quantity Transferred";
            TempJobPlanningLineInvoice."Invoiced Amount (LCY)" += JobPlanningLineInvoice."Invoiced Amount (LCY)";
            TempJobPlanningLineInvoice."Invoiced Cost Amount (LCY)" += JobPlanningLineInvoice."Invoiced Cost Amount (LCY)";
            TempJobPlanningLineInvoice.MODIFY;
          END ELSE BEGIN
            CASE DetailLevel OF
              DetailLevel::"Per Job":
                TempJobPlanningLineInvoice."Job No." := JobNo;
              DetailLevel::"Per Job Task":
                BEGIN
                  TempJobPlanningLineInvoice."Job No." := JobNo;
                  TempJobPlanningLineInvoice."Job Task No." := JobTaskNo;
                END;
              DetailLevel::"Per Job Planning Line":
                BEGIN
                  TempJobPlanningLineInvoice."Job No." := JobNo;
                  TempJobPlanningLineInvoice."Job Task No." := JobTaskNo;
                  TempJobPlanningLineInvoice."Job Planning Line No." := JobPlanningLineNo;
                END;
            END;
            TempJobPlanningLineInvoice."Document Type" := JobPlanningLineInvoice."Document Type";
            TempJobPlanningLineInvoice."Document No." := JobPlanningLineInvoice."Document No.";
            TempJobPlanningLineInvoice."Quantity Transferred" := JobPlanningLineInvoice."Quantity Transferred";
            TempJobPlanningLineInvoice."Invoiced Amount (LCY)" := JobPlanningLineInvoice."Invoiced Amount (LCY)";
            TempJobPlanningLineInvoice."Invoiced Cost Amount (LCY)" := JobPlanningLineInvoice."Invoiced Cost Amount (LCY)";
            TempJobPlanningLineInvoice.INSERT;
          END;
        UNTIL JobPlanningLineInvoice.NEXT = 0;
      END;
    END;

    PROCEDURE GetJobPlanningLineInvoices@14(JobPlanningLine@1000 : Record 1003);
    VAR
      JobPlanningLineInvoice@1001 : Record 1022;
    BEGIN
      CLEARALL;
      WITH JobPlanningLine DO BEGIN
        IF "Line No." = 0 THEN
          EXIT;
        TESTFIELD("Job No.");
        TESTFIELD("Job Task No.");

        JobPlanningLineInvoice.SETRANGE("Job No.","Job No.");
        JobPlanningLineInvoice.SETRANGE("Job Task No.","Job Task No.");
        JobPlanningLineInvoice.SETRANGE("Job Planning Line No.","Line No.");
        IF JobPlanningLineInvoice.COUNT = 1 THEN BEGIN
          JobPlanningLineInvoice.FINDFIRST;
          OpenSalesInvoice(JobPlanningLineInvoice);
        END ELSE
          PAGE.RUNMODAL(PAGE::"Job Invoices",JobPlanningLineInvoice);
      END;
    END;

    PROCEDURE OpenSalesInvoice@5(JobPlanningLineInvoice@1004 : Record 1022);
    VAR
      SalesHeader@1003 : Record 36;
      SalesInvHeader@1002 : Record 112;
      SalesCrMemoHeader@1001 : Record 114;
    BEGIN
      WITH JobPlanningLineInvoice DO
        CASE "Document Type" OF
          "Document Type"::Invoice:
            BEGIN
              SalesHeader.GET(SalesHeader."Document Type"::Invoice,"Document No.");
              PAGE.RUNMODAL(PAGE::"Sales Invoice",SalesHeader);
            END;
          "Document Type"::"Credit Memo":
            BEGIN
              SalesHeader.GET(SalesHeader."Document Type"::"Credit Memo","Document No.");
              PAGE.RUNMODAL(PAGE::"Sales Credit Memo",SalesHeader);
            END;
          "Document Type"::"Posted Invoice":
            BEGIN
              IF NOT SalesInvHeader.GET("Document No.") THEN
                ERROR(Text012,SalesInvHeader.TABLECAPTION,"Document No.");
              PAGE.RUNMODAL(PAGE::"Posted Sales Invoice",SalesInvHeader);
            END;
          "Document Type"::"Posted Credit Memo":
            BEGIN
              IF NOT SalesCrMemoHeader.GET("Document No.") THEN
                ERROR(Text012,SalesCrMemoHeader.TABLECAPTION,"Document No.");
              PAGE.RUNMODAL(PAGE::"Posted Sales Credit Memo",SalesCrMemoHeader);
            END;
        END;
    END;

    LOCAL PROCEDURE UpdateSalesHeader@6(VAR SalesHeader@1000 : Record 36;Job@1001 : Record 167);
    BEGIN
      SalesHeader."Bill-to Contact No." := Job."Bill-to Contact No.";
      SalesHeader."Bill-to Contact" := Job."Bill-to Contact";
      SalesHeader."Bill-to Name" := Job."Bill-to Name";
      SalesHeader."Bill-to Address" := Job."Bill-to Address";
      SalesHeader."Bill-to Address 2" := Job."Bill-to Address 2";
      SalesHeader."Bill-to City" := Job."Bill-to City";
      SalesHeader."Bill-to Post Code" := Job."Bill-to Post Code";

      SalesHeader."Sell-to Contact No." := Job."Bill-to Contact No.";
      SalesHeader."Sell-to Contact" := Job."Bill-to Contact";
      SalesHeader."Sell-to Customer Name" := Job."Bill-to Name";
      SalesHeader."Sell-to Address" := Job."Bill-to Address";
      SalesHeader."Sell-to Address 2" := Job."Bill-to Address 2";
      SalesHeader."Sell-to City" := Job."Bill-to City";
      SalesHeader."Sell-to Post Code" := Job."Bill-to Post Code";

      SalesHeader."Ship-to Contact" := Job."Bill-to Contact";
      SalesHeader."Ship-to Name" := Job."Bill-to Name";
      SalesHeader."Ship-to Address" := Job."Bill-to Address";
      SalesHeader."Ship-to Address 2" := Job."Bill-to Address 2";
      SalesHeader."Ship-to City" := Job."Bill-to City";
      SalesHeader."Ship-to Post Code" := Job."Bill-to Post Code";
    END;

    LOCAL PROCEDURE TestSalesHeader@8(VAR SalesHeader@1000 : Record 36;VAR Job@1001 : Record 167);
    BEGIN
      SalesHeader.TESTFIELD("Bill-to Customer No.",Job."Bill-to Customer No.");
      SalesHeader.TESTFIELD("Sell-to Customer No.",Job."Bill-to Customer No.");

      IF Job."Currency Code" <> '' THEN
        SalesHeader.TESTFIELD("Currency Code",Job."Currency Code")
      ELSE
        SalesHeader.TESTFIELD("Currency Code",Job."Invoice Currency Code");
    END;

    LOCAL PROCEDURE TestExchangeRate@12(VAR JobPlanningLine@1001 : Record 1003;PostingDate@1000 : Date);
    VAR
      CurrencyExchangeRate@1002 : Record 330;
    BEGIN
      IF JobPlanningLine."Currency Code" <> '' THEN
        IF (CurrencyExchangeRate.ExchangeRate(PostingDate,JobPlanningLine."Currency Code") <> JobPlanningLine."Currency Factor")
        THEN BEGIN
          IF NOT UpdateExchangeRates THEN
            UpdateExchangeRates := CONFIRM(Text010,TRUE);

          IF UpdateExchangeRates THEN BEGIN
            JobPlanningLine."Currency Date" := PostingDate;
            JobPlanningLine."Document Date" := PostingDate;
            JobPlanningLine.VALIDATE("Currency Date");
            JobPlanningLine."Last Date Modified" := TODAY;
            JobPlanningLine."User ID" := USERID;
            JobPlanningLine.MODIFY(TRUE);
          END ELSE
            ERROR('')
            ;
        END;
    END;

    LOCAL PROCEDURE GetLedgEntryDimSetID@17(JobPlanningLine@1000 : Record 1003) : Integer;
    VAR
      ResLedgEntry@1001 : Record 203;
      ItemLedgEntry@1002 : Record 32;
      GLEntry@1003 : Record 17;
    BEGIN
      IF JobPlanningLine."Ledger Entry No." = 0 THEN
        EXIT(0);

      CASE JobPlanningLine."Ledger Entry Type" OF
        JobPlanningLine."Ledger Entry Type"::Resource:
          BEGIN
            ResLedgEntry.GET(JobPlanningLine."Ledger Entry No.");
            EXIT(ResLedgEntry."Dimension Set ID");
          END;
        JobPlanningLine."Ledger Entry Type"::Item:
          BEGIN
            ItemLedgEntry.GET(JobPlanningLine."Ledger Entry No.");
            EXIT(ItemLedgEntry."Dimension Set ID");
          END;
        JobPlanningLine."Ledger Entry Type"::"G/L Account":
          BEGIN
            GLEntry.GET(JobPlanningLine."Ledger Entry No.");
            EXIT(GLEntry."Dimension Set ID");
          END;
        ELSE
          EXIT(0);
      END;
    END;

    LOCAL PROCEDURE GetJobLedgEntryDimSetID@21(JobPlanningLine@1000 : Record 1003) : Integer;
    VAR
      JobLedgerEntry@1001 : Record 169;
    BEGIN
      IF JobPlanningLine."Job Ledger Entry No." = 0 THEN
        EXIT(0);

      IF JobLedgerEntry.GET(JobPlanningLine."Job Ledger Entry No.") THEN
        EXIT(JobLedgerEntry."Dimension Set ID");

      EXIT(0);
    END;

    BEGIN
    END.
  }
}

