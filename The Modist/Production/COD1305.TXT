OBJECT Codeunit 1305 Sales-Quote to Invoice
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    TableNo=36;
    OnRun=VAR
            Cust@1008 : Record 18;
            SalesInvoiceLine@1000 : Record 37;
            SalesSetup@1001 : Record 311;
            CustCheckCrLimit@1006 : Codeunit 312;
            MiniSalesCalcDiscByType@1003 : Codeunit 1300;
          BEGIN
            TESTFIELD("Document Type","Document Type"::Quote);

            IF "Sell-to Customer No." = '' THEN
              ERROR(SpecifyCustomerErr);

            IF "Bill-to Customer No." = '' THEN
              ERROR(SpecifyBillToCustomerNoErr,FIELDCAPTION("Bill-to Customer No."));

            Cust.GET("Sell-to Customer No.");
            Cust.CheckBlockedCustOnDocs(Cust,"Document Type"::Quote,TRUE,FALSE);
            CALCFIELDS("Amount Including VAT");
            CALCFIELDS("Invoice Discount Amount");

            SalesInvoiceHeader := Rec;

            SalesInvoiceLine.LOCKTABLE;

            CreateSalesInvoiceHeader(SalesInvoiceHeader,Rec);
            CreateSalesInvoiceLines(SalesInvoiceHeader,Rec);

            MiniSalesCalcDiscByType.ApplyDefaultInvoiceDiscount("Invoice Discount Amount",SalesInvoiceHeader);

            SalesSetup.GET;
            IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN BEGIN
              SalesInvoiceHeader."Posting Date" := 0D;
              SalesInvoiceHeader.MODIFY;
            END;

            DELETELINKS;
            DELETE;

            COMMIT;
            CLEAR(CustCheckCrLimit);
          END;

  }
  CODE
  {
    VAR
      SalesInvoiceHeader@1000 : Record 36;
      SpecifyCustomerErr@1002 : TextConst 'ENU=You must select a customer before you can convert a quote to an invoice.;ENG=You must select a customer before you can convert a quote to an invoice.';
      SpecifyBillToCustomerNoErr@1003 : TextConst '@@@=%1 is Bill-To Customer No.;ENU=You must specify the %1 before you can convert a quote to an invoice.;ENG=You must specify the %1 before you can convert a quote to an invoice.';

    PROCEDURE GetSalesInvoiceHeader@1(VAR SalesHeader2@1000 : Record 36);
    BEGIN
      SalesHeader2 := SalesInvoiceHeader;
    END;

    LOCAL PROCEDURE CreateSalesInvoiceHeader@3(VAR SalesInvoiceHeader@1000 : Record 36;SalesQuoteHeader@1001 : Record 36);
    BEGIN
      WITH SalesQuoteHeader DO BEGIN
        SalesInvoiceHeader."Document Type" := SalesInvoiceHeader."Document Type"::Invoice;

        SalesInvoiceHeader."No. Printed" := 0;
        SalesInvoiceHeader.Status := SalesInvoiceHeader.Status::Open;
        SalesInvoiceHeader."No." := '';

        SalesInvoiceHeader."Quote No." := "No.";
        SalesInvoiceHeader.INSERT(TRUE);

        IF "Posting Date" <> 0D THEN
          SalesInvoiceHeader."Posting Date" := "Posting Date"
        ELSE
          SalesInvoiceHeader."Posting Date" := WORKDATE;

        SalesInvoiceHeader."Document Date" := "Document Date";
        SalesInvoiceHeader."Shipment Date" := "Shipment Date";
        SalesInvoiceHeader."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        SalesInvoiceHeader."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        SalesInvoiceHeader."Dimension Set ID" := "Dimension Set ID";

        SalesInvoiceHeader."Location Code" := "Location Code";
        SalesInvoiceHeader."Ship-to Name" := "Ship-to Name";
        SalesInvoiceHeader."Ship-to Name 2" := "Ship-to Name 2";
        SalesInvoiceHeader."Ship-to Address" := "Ship-to Address";
        SalesInvoiceHeader."Ship-to Address 2" := "Ship-to Address 2";
        SalesInvoiceHeader."Ship-to City" := "Ship-to City";
        SalesInvoiceHeader."Ship-to Post Code" := "Ship-to Post Code";
        SalesInvoiceHeader."Ship-to County" := "Ship-to County";
        SalesInvoiceHeader."Ship-to Country/Region Code" := "Ship-to Country/Region Code";
        SalesInvoiceHeader."Ship-to Contact" := "Ship-to Contact";

        SalesInvoiceHeader.MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateSalesInvoiceLines@4(SalesInvoiceHeader@1003 : Record 36;SalesQuoteHeader@1002 : Record 36);
    VAR
      SalesQuoteLine@1000 : Record 37;
      SalesInvoiceLine@1004 : Record 37;
    BEGIN
      WITH SalesQuoteHeader DO BEGIN
        SalesQuoteLine.RESET;
        SalesQuoteLine.SETRANGE("Document Type","Document Type");
        SalesQuoteLine.SETRANGE("Document No.","No.");

        IF SalesQuoteLine.FINDSET THEN
          REPEAT
            SalesInvoiceLine := SalesQuoteLine;
            SalesInvoiceLine."Document Type" := SalesInvoiceHeader."Document Type";
            SalesInvoiceLine."Document No." := SalesInvoiceHeader."No.";
            IF SalesInvoiceLine."No." <> '' THEN
              SalesInvoiceLine.DefaultDeferralCode;
            SalesInvoiceLine.INSERT;
          UNTIL SalesQuoteLine.NEXT = 0;

        MoveLineCommentsToSalesInvoice(SalesInvoiceHeader,SalesQuoteHeader);

        SalesQuoteLine.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE MoveLineCommentsToSalesInvoice@5(SalesInvoiceHeader@1001 : Record 36;SalesQuoteHeader@1000 : Record 36);
    VAR
      OldSalesCommentLine@1002 : Record 44;
      SalesCommentLine@1003 : Record 44;
      RecordLinkManagement@1004 : Codeunit 447;
    BEGIN
      WITH SalesQuoteHeader DO BEGIN
        SalesCommentLine.SETRANGE("Document Type","Document Type");
        SalesCommentLine.SETRANGE("No.","No.");
        IF NOT SalesCommentLine.ISEMPTY THEN BEGIN
          SalesCommentLine.LOCKTABLE;
          IF SalesCommentLine.FINDSET THEN
            REPEAT
              OldSalesCommentLine := SalesCommentLine;
              SalesCommentLine.DELETE;
              SalesCommentLine."Document Type" := SalesInvoiceHeader."Document Type";
              SalesCommentLine."No." := SalesInvoiceHeader."No.";
              SalesCommentLine.INSERT;
              SalesCommentLine := OldSalesCommentLine;
            UNTIL SalesCommentLine.NEXT = 0;
        END;
        RecordLinkManagement.CopyLinks(SalesQuoteHeader,SalesInvoiceHeader);
      END;
    END;

    BEGIN
    END.
  }
}

