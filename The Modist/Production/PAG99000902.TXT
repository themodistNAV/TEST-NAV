OBJECT Page 99000902 Item Availability Line List
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Item Availability Line List;
               ENG=Item Availability Line List];
    SourceTable=Table99000832;
    PageType=List;
    SourceTableTemporary=Yes;
    OnOpenPage=BEGIN
                 DELETEALL;
                 MakeWhat;
               END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr=Name }

    { 4   ;2   ;Field     ;
                SourceExpr=Quantity;
                OnDrillDown=BEGIN
                              LookupEntries;
                            END;
                             }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 Receipt;ENG=%1 Receipt';
      Text001@1001 : TextConst 'ENU=%1 Release;ENG=%1 Release';
      Text002@1002 : TextConst 'ENU=Firm planned %1;ENG=Firm planned %1';
      Text003@1003 : TextConst 'ENU=Released %1;ENG=Released %1';
      Item@1004 : Record 27;
      ItemLedgerEntry@1005 : Record 32;
      SalesLine@1006 : Record 37;
      ServLine@1007 : Record 5902;
      JobPlanningLine@1018 : Record 1003;
      PurchLine@1008 : Record 39;
      TransLine@1009 : Record 5741;
      ReqLine@1010 : Record 246;
      ProdOrderLine@1011 : Record 5406;
      ProdOrderComp@1012 : Record 5407;
      PlanningComponent@1013 : Record 99000829;
      AssemblyHeader@1020 : Record 900;
      AssemblyLine@1019 : Record 901;
      AvailType@1015 : 'Gross Requirement,Planned Order Receipt,Scheduled Order Receipt,Planned Order Release,All';
      Sign@1016 : Integer;

    PROCEDURE Init@1(NewType@1000 : 'Gross Requirement,Planned Order Receipt,Scheduled Order Receipt,Planned Order Release,All';VAR NewItem@1001 : Record 27);
    BEGIN
      AvailType := NewType;
      Item.COPY(NewItem);
    END;

    LOCAL PROCEDURE MakeEntries@2();
    BEGIN
      CASE AvailType OF
        AvailType::"Gross Requirement":
          BEGIN
            InsertEntry(
              DATABASE::"Sales Line",
              Item.FIELDNO("Qty. on Sales Order"),
              SalesLine.TABLECAPTION,
              Item."Qty. on Sales Order");
            InsertEntry(
              DATABASE::"Service Line",
              Item.FIELDNO("Qty. on Service Order"),
              ServLine.TABLECAPTION,
              Item."Qty. on Service Order");
            InsertEntry(
              DATABASE::"Job Planning Line",
              Item.FIELDNO("Qty. on Job Order"),
              JobPlanningLine.TABLECAPTION,
              Item."Qty. on Job Order");
            InsertEntry(
              DATABASE::"Prod. Order Component",
              Item.FIELDNO("Scheduled Need (Qty.)"),
              ProdOrderComp.TABLECAPTION,
              Item."Scheduled Need (Qty.)");
            InsertEntry(
              DATABASE::"Planning Component",
              Item.FIELDNO("Planning Issues (Qty.)"),
              PlanningComponent.TABLECAPTION,
              Item."Planning Issues (Qty.)");
            InsertEntry(
              DATABASE::"Transfer Line",
              Item.FIELDNO("Trans. Ord. Shipment (Qty.)"),
              Item.FIELDCAPTION("Trans. Ord. Shipment (Qty.)"),
              Item."Trans. Ord. Shipment (Qty.)");
            InsertEntry(
              DATABASE::"Purchase Line",
              0,
              PurchLine.TABLECAPTION,
              Item."Qty. on Purch. Return");
            InsertEntry(
              DATABASE::"Assembly Line",
              Item.FIELDNO("Qty. on Asm. Component"),
              AssemblyLine.TABLECAPTION,
              Item."Qty. on Asm. Component");
          END;
        AvailType::"Planned Order Receipt":
          BEGIN
            InsertEntry(
              DATABASE::"Requisition Line",
              Item.FIELDNO("Purch. Req. Receipt (Qty.)"),
              ReqLine.TABLECAPTION,
              Item."Purch. Req. Receipt (Qty.)");
            InsertEntry(
              DATABASE::"Prod. Order Line",
              Item.FIELDNO("Planned Order Receipt (Qty.)"),
              STRSUBSTNO(Text000,ProdOrderLine.TABLECAPTION),
              Item."Planned Order Receipt (Qty.)");
          END;
        AvailType::"Planned Order Release":
          BEGIN
            InsertEntry(
              DATABASE::"Requisition Line",
              Item.FIELDNO("Purch. Req. Release (Qty.)"),
              ReqLine.TABLECAPTION,
              Item."Purch. Req. Release (Qty.)");
            InsertEntry(
              DATABASE::"Prod. Order Line",
              Item.FIELDNO("Planned Order Release (Qty.)"),
              STRSUBSTNO(Text001,ProdOrderLine.TABLECAPTION),
              Item."Planned Order Release (Qty.)");
            InsertEntry(
              DATABASE::"Requisition Line",
              Item.FIELDNO("Planning Release (Qty.)"),
              ReqLine.TABLECAPTION,
              Item."Planning Release (Qty.)");
          END;
        AvailType::"Scheduled Order Receipt":
          BEGIN
            InsertEntry(
              DATABASE::"Purchase Line",
              Item.FIELDNO("Qty. on Purch. Order"),
              PurchLine.TABLECAPTION,
              Item."Qty. on Purch. Order");
            InsertEntry(
              DATABASE::"Prod. Order Line",
              Item.FIELDNO("FP Order Receipt (Qty.)"),
              STRSUBSTNO(Text002,ProdOrderLine.TABLECAPTION),
              Item."FP Order Receipt (Qty.)");
            InsertEntry(
              DATABASE::"Prod. Order Line",
              Item.FIELDNO("Rel. Order Receipt (Qty.)"),
              STRSUBSTNO(Text003,ProdOrderLine.TABLECAPTION),
              Item."Rel. Order Receipt (Qty.)");
            InsertEntry(
              DATABASE::"Transfer Line",
              Item.FIELDNO("Qty. in Transit"),
              Item.FIELDCAPTION("Qty. in Transit"),
              Item."Qty. in Transit");
            InsertEntry(
              DATABASE::"Transfer Line",
              Item.FIELDNO("Trans. Ord. Receipt (Qty.)"),
              Item.FIELDCAPTION("Trans. Ord. Receipt (Qty.)"),
              Item."Trans. Ord. Receipt (Qty.)");
            InsertEntry(
              DATABASE::"Sales Line",
              0,
              SalesLine.TABLECAPTION,
              Item."Qty. on Sales Return");
            InsertEntry(
              DATABASE::"Assembly Header",
              Item.FIELDNO("Qty. on Assembly Order"),
              AssemblyHeader.TABLECAPTION,
              Item."Qty. on Assembly Order");
          END;
      END;
    END;

    LOCAL PROCEDURE MakeWhat@4();
    BEGIN
      Sign := 1;
      IF AvailType <> AvailType::All THEN
        MakeEntries
      ELSE BEGIN
        Item.SETRANGE("Date Filter",0D,Item.GETRANGEMAX("Date Filter"));
        Item.CALCFIELDS(
          "Qty. on Purch. Order",
          "Qty. on Sales Order",
          "Qty. on Service Order",
          "Qty. on Job Order",
          "Net Change",
          "Scheduled Receipt (Qty.)",
          "Scheduled Need (Qty.)",
          "Planned Order Receipt (Qty.)",
          "FP Order Receipt (Qty.)",
          "Rel. Order Receipt (Qty.)",
          "Planned Order Release (Qty.)",
          "Purch. Req. Receipt (Qty.)",
          "Planning Issues (Qty.)",
          "Purch. Req. Release (Qty.)",
          "Qty. in Transit");
        Item.CALCFIELDS(
          "Trans. Ord. Shipment (Qty.)",
          "Trans. Ord. Receipt (Qty.)",
          "Qty. on Assembly Order",
          "Qty. on Asm. Component",
          "Qty. on Purch. Return",
          "Qty. on Sales Return");
        IF Item.Inventory <> 0 THEN BEGIN
          "Table No." := DATABASE::"Item Ledger Entry";
          QuerySource := Item.FIELDNO(Inventory);
          Name := ItemLedgerEntry.TABLECAPTION;
          Quantity := Item.Inventory;
          INSERT;
        END;
        AvailType := AvailType::"Gross Requirement";
        Sign := -1;
        MakeEntries;
        AvailType := AvailType::"Planned Order Receipt";
        Sign := 1;
        MakeEntries;
        AvailType := AvailType::"Scheduled Order Receipt";
        Sign := 1;
        MakeEntries;
        AvailType := AvailType::All;
      END;
    END;

    LOCAL PROCEDURE LookupEntries@3();
    BEGIN
      CASE "Table No." OF
        DATABASE::"Item Ledger Entry":
          BEGIN
            ItemLedgerEntry.SETCURRENTKEY("Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
            ItemLedgerEntry.SETRANGE("Item No.",Item."No.");
            ItemLedgerEntry.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
            ItemLedgerEntry.SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
            ItemLedgerEntry.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
            ItemLedgerEntry.SETFILTER("Global Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
            ItemLedgerEntry.SETFILTER("Global Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
            PAGE.RUNMODAL(0,ItemLedgerEntry);
          END;
        DATABASE::"Sales Line":
          BEGIN
            IF QuerySource > 0 THEN
              SalesLine.FindLinesWithItemToPlan(Item,SalesLine."Document Type"::Order)
            ELSE
              SalesLine.FindLinesWithItemToPlan(Item,SalesLine."Document Type"::"Return Order");
            SalesLine.SETRANGE("Drop Shipment",FALSE);
            PAGE.RUNMODAL(0,SalesLine);
          END;
        DATABASE::"Service Line":
          BEGIN
            ServLine.FindLinesWithItemToPlan(Item);
            PAGE.RUNMODAL(0,ServLine);
          END;
        DATABASE::"Job Planning Line":
          BEGIN
            JobPlanningLine.FindLinesWithItemToPlan(Item);
            PAGE.RUNMODAL(0,JobPlanningLine);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchLine.SETCURRENTKEY("Document Type",Type,"No.");
            IF QuerySource > 0 THEN
              PurchLine.FindLinesWithItemToPlan(Item,PurchLine."Document Type"::Order)
            ELSE
              PurchLine.FindLinesWithItemToPlan(Item,PurchLine."Document Type"::"Return Order");
            PurchLine.SETRANGE("Drop Shipment",FALSE);
            PAGE.RUNMODAL(0,PurchLine);
          END;
        DATABASE::"Transfer Line":
          BEGIN
            CASE QuerySource OF
              Item.FIELDNO("Trans. Ord. Shipment (Qty.)"):
                TransLine.FindLinesWithItemToPlan(Item,FALSE,FALSE);
              Item.FIELDNO("Trans. Ord. Receipt (Qty.)"),Item.FIELDNO("Qty. in Transit"):
                TransLine.FindLinesWithItemToPlan(Item,TRUE,FALSE);
            END;
            PAGE.RUNMODAL(0,TransLine);
          END;
        DATABASE::"Planning Component":
          BEGIN
            PlanningComponent.FindLinesWithItemToPlan(Item);
            PAGE.RUNMODAL(0,PlanningComponent);
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.FindLinesWithItemToPlan(Item,FALSE);
            PAGE.RUNMODAL(0,ProdOrderComp);
          END;
        DATABASE::"Requisition Line":
          BEGIN
            ReqLine.FindLinesWithItemToPlan(Item);
            CASE QuerySource OF
              Item.FIELDNO("Purch. Req. Receipt (Qty.)"):
                Item.COPYFILTER("Date Filter",ReqLine."Due Date");
              Item.FIELDNO("Purch. Req. Release (Qty.)"):
                BEGIN
                  Item.COPYFILTER("Date Filter",ReqLine."Order Date");
                  ReqLine.SETFILTER("Planning Line Origin",'%1|%2',
                    ReqLine."Planning Line Origin"::" ",ReqLine."Planning Line Origin"::Planning);
                END;
            END;
            PAGE.RUNMODAL(0,ReqLine);
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            ProdOrderLine.RESET;
            ProdOrderLine.SETCURRENTKEY(Status,"Item No.");
            CASE QuerySource OF
              Item.FIELDNO("Planned Order Receipt (Qty.)"):
                BEGIN
                  ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Planned);
                  Item.COPYFILTER("Date Filter",ProdOrderLine."Due Date");
                END;
              Item.FIELDNO("Planned Order Release (Qty.)"):
                BEGIN
                  ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Planned);
                  Item.COPYFILTER("Date Filter",ProdOrderLine."Starting Date");
                END;
              Item.FIELDNO("FP Order Receipt (Qty.)"):
                BEGIN
                  ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::"Firm Planned");
                  Item.COPYFILTER("Date Filter",ProdOrderLine."Due Date");
                END;
              Item.FIELDNO("Rel. Order Receipt (Qty.)"):
                BEGIN
                  ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
                  Item.COPYFILTER("Date Filter",ProdOrderLine."Due Date");
                END;
            END;
            ProdOrderLine.SETRANGE("Item No.",Item."No.");
            Item.COPYFILTER("Variant Filter",ProdOrderLine."Variant Code");
            Item.COPYFILTER("Location Filter",ProdOrderLine."Location Code");
            Item.COPYFILTER("Global Dimension 1 Filter",ProdOrderLine."Shortcut Dimension 1 Code");
            Item.COPYFILTER("Global Dimension 2 Filter",ProdOrderLine."Shortcut Dimension 2 Code");
            PAGE.RUNMODAL(0,ProdOrderLine);
          END;
        DATABASE::"Assembly Header":
          BEGIN
            AssemblyHeader.FindLinesWithItemToPlan(Item,AssemblyHeader."Document Type"::Order);
            PAGE.RUNMODAL(0,AssemblyHeader);
          END;
        DATABASE::"Assembly Line":
          BEGIN
            AssemblyLine.FindLinesWithItemToPlan(Item,AssemblyHeader."Document Type"::Order);
            PAGE.RUNMODAL(0,AssemblyLine);
          END;
      END;
    END;

    LOCAL PROCEDURE InsertEntry@5(Table@1000 : Integer;Field@1001 : Integer;TableName@1002 : Text[100];Qty@1003 : Decimal);
    BEGIN
      IF Qty = 0 THEN
        EXIT;

      "Table No." := Table;
      QuerySource := Field;
      Name := COPYSTR(TableName,1,MAXSTRLEN(Name));
      Quantity := Qty * Sign;
      INSERT;
    END;

    BEGIN
    END.
  }
}

