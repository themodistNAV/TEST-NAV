OBJECT Codeunit 56 Sales - Calc Discount By Type
{
  OBJECT-PROPERTIES
  {
    Date=26/11/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43897;
  }
  PROPERTIES
  {
    TableNo=37;
    OnRun=VAR
            SalesLine@1000 : Record 37;
            SalesHeader@1001 : Record 36;
          BEGIN
            SalesLine.COPY(Rec);

            IF SalesHeader.GET("Document Type","Document No.") THEN BEGIN
              ApplyDefaultInvoiceDiscount(0,SalesHeader);
              // on new order might be no line
              IF GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.") THEN;
            END;
          END;

  }
  CODE
  {
    VAR
      InvDiscBaseAmountIsZeroErr@1000 : TextConst 'ENU=There is no amount that you can apply an invoice discount to.;ENG=There is no amount that you can apply an invoice discount to.';
      InvDiscSetToZeroMsg@1001 : TextConst '@@@=%1 - Invoice discount amount, %2 Previous value of Invoice discount amount;ENU=The previous %1 was %2.\\The value is now set to zero because the total has changed. Review the new total and then re-enter the %1.;ENG=The previous %1 was %2.\\The value is now set to zero because the total has changed. Review the new total and then re-enter the %1.';
      AmountInvDiscErr@1002 : TextConst '@@@=%1 will be "Invoice Discount Amount";ENU=Manual %1 is not allowed.;ENG=Manual %1 is not allowed.';

    PROCEDURE ApplyDefaultInvoiceDiscount@70(InvoiceDiscountAmount@1000 : Decimal;VAR SalesHeader@1001 : Record 36);
    VAR
      AutoFormatManagement@1004 : Codeunit 45;
      ShowSetToZeroMessage@1002 : Boolean;
      PreviousInvoiceDiscountAmount@1003 : Decimal;
    BEGIN
      IF NOT ShouldRedistributeInvoiceDiscountAmount(SalesHeader) THEN
        EXIT;

      IF SalesHeader."Invoice Discount Calculation" = SalesHeader."Invoice Discount Calculation"::Amount THEN BEGIN
        PreviousInvoiceDiscountAmount := SalesHeader."Invoice Discount Value";
        ShowSetToZeroMessage := (InvoiceDiscountAmount = 0) AND (SalesHeader."Invoice Discount Value" <> 0);
        ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,SalesHeader);
        IF ShowSetToZeroMessage THEN
          MESSAGE(
            STRSUBSTNO(
              InvDiscSetToZeroMsg,
              SalesHeader.FIELDCAPTION("Invoice Discount Amount"),
              FORMAT(PreviousInvoiceDiscountAmount,0,AutoFormatManagement.AutoFormatTranslate(1,SalesHeader."Currency Code"))));
      END ELSE
        ApplyInvDiscBasedOnPct(SalesHeader);

      ResetRecalculateInvoiceDisc(SalesHeader);
    END;

    [TryFunction]
    PROCEDURE ApplyInvDiscBasedOnAmt@60(InvoiceDiscountAmount@1000 : Decimal;VAR SalesHeader@1005 : Record 36);
    VAR
      TempVATAmountLine@1001 : TEMPORARY Record 290;
      SalesLine@1002 : Record 37;
      InvDiscBaseAmount@1003 : Decimal;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF NOT InvoiceDiscIsAllowed("Invoice Disc. Code") THEN
          ERROR(STRSUBSTNO(AmountInvDiscErr,FIELDCAPTION("Invoice Discount Amount")));

        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE("Document Type","Document Type");

        SalesLine.CalcVATAmountLines(0,SalesHeader,SalesLine,TempVATAmountLine);

        InvDiscBaseAmount := TempVATAmountLine.GetTotalInvDiscBaseAmount(FALSE,"Currency Code");

        IF (InvDiscBaseAmount = 0) AND (InvoiceDiscountAmount > 0) THEN
          ERROR(InvDiscBaseAmountIsZeroErr);

        TempVATAmountLine.SetInvoiceDiscountAmount(InvoiceDiscountAmount,"Currency Code",
          "Prices Including VAT","VAT Base Discount %");

        SalesLine.UpdateVATOnLines(0,SalesHeader,SalesLine,TempVATAmountLine);

        "Invoice Discount Calculation" := "Invoice Discount Calculation"::Amount;
        "Invoice Discount Value" := InvoiceDiscountAmount;

        MODIFY;

        ResetRecalculateInvoiceDisc(SalesHeader);
      END;
    END;

    LOCAL PROCEDURE ApplyInvDiscBasedOnPct@73(VAR SalesHeader@1001 : Record 36);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      WITH SalesHeader DO BEGIN
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE("Document Type","Document Type");
        IF SalesLine.FINDFIRST THEN BEGIN
          CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);
          GET("Document Type","No.");
        END;
      END;
    END;

    PROCEDURE GetCustInvoiceDiscountPct@64(SalesLine@1001 : Record 37) : Decimal;
    VAR
      SalesHeader@1000 : Record 36;
      InvoiceDiscountValue@1002 : Decimal;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF NOT GET(SalesLine."Document Type",SalesLine."Document No.") THEN
          EXIT(0);

        CALCFIELDS("Invoice Discount Amount");
        IF "Invoice Discount Amount" = 0 THEN
          EXIT(0);

        CASE "Invoice Discount Calculation" OF
          "Invoice Discount Calculation"::"%":
            BEGIN
              // Only if CustInvDisc table is empty header is not updated
              IF NOT CustInvDiscRecExists("Invoice Disc. Code") THEN
                EXIT(0);

              EXIT("Invoice Discount Value");
            END;
          "Invoice Discount Calculation"::None,
          "Invoice Discount Calculation"::Amount:
            BEGIN
              CALCFIELDS("Amount Including VAT",Amount);
              IF Amount = 0 THEN
                EXIT(0);

              IF "Invoice Discount Calculation" = "Invoice Discount Calculation"::None THEN
                InvoiceDiscountValue := "Invoice Discount Amount"
              ELSE
                InvoiceDiscountValue := "Invoice Discount Value";

              IF "Prices Including VAT" THEN
                EXIT(ROUND(InvoiceDiscountValue / ("Amount Including VAT" + InvoiceDiscountValue) * 100,0.01));

              EXIT(ROUND(InvoiceDiscountValue / (Amount + InvoiceDiscountValue) * 100,0.01));
            END;
        END;
      END;

      EXIT(0);
    END;

    PROCEDURE ShouldRedistributeInvoiceDiscountAmount@101(VAR SalesHeader@1001 : Record 36) : Boolean;
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesHeader.CALCFIELDS("Recalculate Invoice Disc.");

      IF NOT SalesHeader."Recalculate Invoice Disc." THEN
        EXIT(FALSE);

      SalesReceivablesSetup.GET;
      IF (SalesHeader."Invoice Discount Calculation" = SalesHeader."Invoice Discount Calculation"::Amount) AND
         (SalesHeader."Invoice Discount Value" = 0)
      THEN
        EXIT(FALSE);

      IF (NOT SalesReceivablesSetup."Calc. Inv. Discount") AND
         (SalesHeader."Invoice Discount Calculation" = SalesHeader."Invoice Discount Calculation"::None)
      THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE ResetRecalculateInvoiceDisc@1(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.MODIFYALL("Recalculate Invoice Disc.",FALSE);
    END;

    LOCAL PROCEDURE CustInvDiscRecExists@4(InvDiscCode@1000 : Code[20]) : Boolean;
    VAR
      CustInvDisc@1001 : Record 19;
    BEGIN
      CustInvDisc.SETRANGE(Code,InvDiscCode);
      EXIT(NOT CustInvDisc.ISEMPTY);
    END;

    PROCEDURE InvoiceDiscIsAllowed@2(InvDiscCode@1001 : Code[20]) : Boolean;
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      EXIT(NOT (SalesReceivablesSetup."Calc. Inv. Discount" AND CustInvDiscRecExists(InvDiscCode)));
    END;

    BEGIN
    END.
  }
}

