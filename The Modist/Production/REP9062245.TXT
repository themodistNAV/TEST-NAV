OBJECT Report 9062245 Copy Tile
{
  OBJECT-PROPERTIES
  {
    Date=28/08/15;
    Time=[ 2:41:22 PM];
    Version List=NA2016.1;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Copy Tile;
               ENG=Copy Tile];
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  lToTileId@1000000000 : Integer;
                BEGIN
                  IF (CONFIRM(tConfirmation, TRUE, mFromTileText, mToTilePanelCode)) THEN
                    mCopyTilePanel.CopyTile(mFromTilePanelCode, mFromTileId, mToTilePanelCode, lToTileId, mToTileGroupId, FALSE);
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   mTilePanelToolkit.SingleTileGroup(mFromTilePanelCode, mFromTileGroupId);
                   mTilePanelToolkit.SingleTile(mFromTilePanelCode, mFromTileGroupId, mFromTileId);
                   mTilePanelToolkit.SingleTileGroup(mToTilePanelCode, mToTileGroupId);
                   UpdateGlobals();
                 END;

    }
    CONTROLS
    {
      { 1000000004;;Container;
                  ContainerType=ContentArea }

      { 1000000010;1;Group  ;
                  Name=nGeneral;
                  CaptionML=[ENU=General;
                             ENG=General];
                  GroupType=Group }

      { 1000000002;2;Field  ;
                  Name=nFromTilePanelCode;
                  CaptionML=[ENU=From Tile Panel;
                             ENG=From Tile Panel];
                  SourceExpr=mFromTilePanelCode;
                  TableRelation=Panel;
                  OnValidate=BEGIN
                               mFromTileGroupId := 0;
                               mFromTileId := 0;
                               mTilePanelToolkit.SingleTileGroup(mFromTilePanelCode, mFromTileGroupId);
                               mTilePanelToolkit.SingleTile(mFromTilePanelCode, mFromTileGroupId, mFromTileId);
                               UpdateGlobals();
                             END;
                              }

      { 1000000001;2;Field  ;
                  Name=nFromTileGroupText;
                  CaptionML=[ENU=From Tile Group;
                             ENG=From Tile Group];
                  SourceExpr=mFromTileGroupText;
                  OnValidate=BEGIN
                               mTilePanelToolkit.ValidateTileGroupText(mFromTilePanelCode, mFromTileGroupId, mFromTileGroupText);
                               mFromTileId := 0;
                               UpdateGlobals();
                             END;

                  OnLookup=BEGIN
                             IF (mTilePanelToolkit.TileGroupLookup(mFromTilePanelCode, mFromTileGroupId)) THEN
                             BEGIN
                               mFromTileId := 0;
                               UpdateGlobals();
                             END;
                           END;
                            }

      { 1000000000;2;Field  ;
                  Name=nFromTileText;
                  CaptionML=[ENU=From Tile;
                             ENG=From Tile];
                  SourceExpr=mFromTileText;
                  OnValidate=BEGIN
                               mTilePanelToolkit.ValidateTileText(mFromTilePanelCode, mFromTileId, mFromTileText);
                               UpdateGlobals();
                             END;

                  OnLookup=BEGIN
                             IF (mTilePanelToolkit.TileLookup(mFromTilePanelCode, mFromTileId)) THEN
                               UpdateGlobals();
                           END;
                            }

      { 1000000003;2;Field  ;
                  Name=nToTilePanelCode;
                  CaptionML=[ENU=To Tile Panel;
                             ENG=To Tile Panel];
                  SourceExpr=mToTilePanelCode;
                  TableRelation=Panel;
                  OnValidate=BEGIN
                               mToTileGroupId := 0;
                               mTilePanelToolkit.SingleTileGroup(mToTilePanelCode, mToTileGroupId);
                               UpdateGlobals();
                             END;
                              }

      { 1000000006;2;Field  ;
                  Name=nToTileGroupText;
                  CaptionML=[ENU=To Tile Group;
                             ENG=To Tile Group];
                  SourceExpr=mToTileGroupText;
                  OnValidate=BEGIN
                               mTilePanelToolkit.ValidateTileGroupText(mToTilePanelCode, mToTileGroupId, mToTileGroupText);
                               UpdateGlobals();
                             END;

                  OnLookup=BEGIN
                             IF (mTilePanelToolkit.TileGroupLookup(mToTilePanelCode, mToTileGroupId)) THEN
                               UpdateGlobals();
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      mTileGroup@1000000021 : Record 9062366;
      mTile@1000000024 : Record 9062367;
      mCopyTilePanel@1000000014 : Codeunit 9062352;
      mTilePanelToolkit@1000000013 : Codeunit 9062320;
      mFromTilePanelCode@1000000003 : Code[20];
      mFromTileGroupId@1000000023 : Integer;
      mFromTileGroupText@1000000022 : Text[250];
      mFromTileId@1000000005 : Integer;
      mFromTileText@1000000008 : Text[250];
      mToTilePanelCode@1000000000 : Code[20];
      mToTileGroupId@1000000007 : Integer;
      mToTileGroupText@1000000002 : Text[250];
      tConfirmation@1000000011 : TextConst 'ENU=Do you want to copy tile ''%1'' to panel ''%2''?;ENG=Do you want to copy tile ''%1'' to panel ''%2''?';
      tFinalMessage@1000000010 : TextConst 'ENU=Tile ''%1'' has been copied to panel ''%2''.;ENG=Tile ''%1'' has been copied to panel ''%2''.';

    PROCEDURE SetFrom@1000000000(pFromTilePanelCode@1000000004 : Code[20];pFromTileId@1000000001 : Integer);
    BEGIN
      mFromTilePanelCode := pFromTilePanelCode;
      mFromTileId := pFromTileId;
    END;

    PROCEDURE UpdateGlobals@1000000002();
    BEGIN
      mFromTileText := mTilePanelToolkit.TileText(mFromTilePanelCode, mFromTileId);
      IF ( NOT (mTile.GET(mFromTilePanelCode, mFromTileId))) THEN
        CLEAR(mTile);
      mFromTileGroupId := mTile."Tile Group ID";
      IF ( NOT (mTileGroup.GET(mFromTilePanelCode, mFromTileGroupId))) THEN
        CLEAR(mTileGroup);
      mFromTileGroupText := mTileGroup.Text;
      mToTileGroupText := mTilePanelToolkit.TileGroupText(mToTilePanelCode, mToTileGroupId);
    END;

    BEGIN
    {
      //DOC NA2015.1 JH 29/10/2013 - Created
      //DOC NA2016.1 JH 28/08/2015 - Upgraded to 2016
    }
    END.
  }
  RDLDATA
  {
  }
}

