OBJECT Codeunit 9062277 Enhanced Permissions Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EnablementSetup@1000000000 : Record 9062229;
      EnhancedPermission@1000000001 : Record 9062255;
      EnhancedPermissionGroupUser@1000000002 : Record 9062256;
      tSuperRole@1000000005 : TextConst 'ENU=SUPER;ENG=SUPER';
      tUnknownPermissionType@1000000003 : TextConst 'ENU=Unknown permission type: "%1";ENG=Unknown permission type: "%1"';
      ObjectFieldToolkit@1000000004 : Codeunit 9062343;

    LOCAL PROCEDURE "--- Panels ---"@1000000004();
    BEGIN
    END;

    PROCEDURE CheckPanelExecutePermission@1000000002(pPanel@1000000000 : Record 9062363;pUserId@1000000001 : Code[50]);
    BEGIN
      //DOC NA2016.15 - Checking panel "Execute" permission
      //  -> pPanel: The panel
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      CheckPermission(EnablementSetup."Panels Enh. Permissions", EnhancedPermission.Type::Panel, pPanel.Code,
        EnhancedPermission.FIELDNO("Execute Permission"), pUserId);
    END;

    PROCEDURE CheckPanelModifyPermission@1000000003(pPanel@1000000000 : Record 9062363;pUserId@1000000001 : Code[50]);
    BEGIN
      //DOC NA2016.15 - Checking panel "Modify" permission
      //  -> pPanel: The panel
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      CheckPermission(EnablementSetup."Panels Enh. Permissions", EnhancedPermission.Type::Panel, pPanel.Code,
        EnhancedPermission.FIELDNO("Modify Permission"), pUserId);
    END;

    PROCEDURE HasPanelExecutePermission@1000000014(pPanel@1000000000 : Record 9062363;pUserId@1000000001 : Code[50]) : Boolean;
    BEGIN
      //DOC NA2016.15 - Returning if panel "Execute" permission has been given
      //  -> pPanel: The panel
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      EXIT(HasPermission(EnablementSetup."Panels Enh. Permissions", EnhancedPermission.Type::Panel, pPanel.Code,
        EnhancedPermission.FIELDNO("Execute Permission"), pUserId));
    END;

    PROCEDURE HasPanelModifyPermission@1000000012(pPanel@1000000000 : Record 9062363;pUserId@1000000001 : Code[50]) : Boolean;
    BEGIN
      //DOC NA2016.15 - Returning if panel "Modify" permission has been given
      //  -> pPanel: The panel
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      EXIT(HasPermission(EnablementSetup."Panels Enh. Permissions", EnhancedPermission.Type::Panel, pPanel.Code,
        EnhancedPermission.FIELDNO("Modify Permission"), pUserId));
    END;

    PROCEDURE ApplyPanelPermissionFilter@1000000000(VAR pPanel@1000000000 : Record 9062363;pUserId@1000000002 : Code[50]);
    VAR
      lPermissionFilter@1000000001 : Text;
    BEGIN
      //DOC NA2016.15 - Applying panel permission filter
      //  <> pPanel: The panel recordset
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      lPermissionFilter := BuildPermissionFilter(EnablementSetup."Panels Enh. Permissions", EnhancedPermission.Type::Panel, pUserId, FALSE);
      pPanel.FILTERGROUP(2);
      IF (lPermissionFilter <> '') THEN
        pPanel.SETFILTER(Code, lPermissionFilter)
      ELSE
        pPanel.SETRANGE(Code);
      pPanel.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE "--- Planning Board ---"@1000000031();
    BEGIN
    END;

    PROCEDURE CheckPlanningBoardExecutePermission@1000000030(pPlanningBoardHeader@1000000000 : Record 9062337;pUserId@1000000001 : Code[50]);
    BEGIN
      //DOC NA2016.15 - Checking planning board "Execute" permission
      //  -> pPlanningBoardHeader: The planning board header
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      CheckPermission(EnablementSetup."Planning Boards Enh. Permiss.", EnhancedPermission.Type::"Planning Board", pPlanningBoardHeader.Code,
        EnhancedPermission.FIELDNO("Execute Permission"), pUserId);
    END;

    PROCEDURE CheckPlanningBoardModifyPermission@1000000029(pPlanningBoardHeader@1000000002 : Record 9062337;pUserId@1000000001 : Code[50]);
    BEGIN
      //DOC NA2016.15 - Checking planning board "Modify" permission
      //  -> pPlanningBoardHeader: The planning board header
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      CheckPermission(EnablementSetup."Planning Boards Enh. Permiss.", EnhancedPermission.Type::"Planning Board", pPlanningBoardHeader.Code,
        EnhancedPermission.FIELDNO("Modify Permission"), pUserId);
    END;

    PROCEDURE HasPlanningBoardExecutePermission@1000000028(pPlanningBoardHeader@1000000002 : Record 9062337;pUserId@1000000001 : Code[50]) : Boolean;
    BEGIN
      //DOC NA2016.15 - Returning if planning board "Execute" permission has been given
      //  -> pPlanningBoardHeader: The planning board header
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      EXIT(HasPermission(EnablementSetup."Planning Boards Enh. Permiss.", EnhancedPermission.Type::"Planning Board", pPlanningBoardHeader.Code,
        EnhancedPermission.FIELDNO("Execute Permission"), pUserId));
    END;

    PROCEDURE HasPlanningBoardModifyPermission@1000000027(pPlanningBoardHeader@1000000002 : Record 9062337;pUserId@1000000001 : Code[50]) : Boolean;
    BEGIN
      //DOC NA2016.15 - Returning if planning board "Modify" permission has been given
      //  -> pPlanningBoardHeader: The planning board header
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      EXIT(HasPermission(EnablementSetup."Planning Boards Enh. Permiss.", EnhancedPermission.Type::"Planning Board", pPlanningBoardHeader.Code,
        EnhancedPermission.FIELDNO("Modify Permission"), pUserId));
    END;

    PROCEDURE ApplyPlanningBoardPermissionFilter@1000000040(VAR pPlanningBoardHeader@1000000000 : Record 9062337;pUserId@1000000002 : Code[50]);
    VAR
      lPermissionFilter@1000000001 : Text;
    BEGIN
      //DOC NA2016.15 - Applying planning board permission filter
      //  <> pPlanningBoardHeader: The planning board header recordset
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      lPermissionFilter := BuildPermissionFilter(EnablementSetup."Planning Boards Enh. Permiss.", EnhancedPermission.Type::"Planning Board", pUserId, FALSE);
      pPlanningBoardHeader.FILTERGROUP(2);
      IF (lPermissionFilter <> '') THEN
        pPlanningBoardHeader.SETFILTER(Code, lPermissionFilter)
      ELSE
        pPlanningBoardHeader.SETRANGE(Code);
      pPlanningBoardHeader.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE "--- Quick Report ---"@1000000026();
    BEGIN
    END;

    PROCEDURE CheckQuickReportExecutePermission@1000000025(pQuickReportHeader@1000000000 : Record 9062697;pUserId@1000000001 : Code[50]);
    BEGIN
      //DOC NA2016.15 - Checking quick report "Execute" permission
      //  -> pQuickReportHeader: The quick report header
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      CheckPermission(EnablementSetup."Quick Reports Enh. Permissions", EnhancedPermission.Type::"Quick Report", QuickReportCode(pQuickReportHeader),
        EnhancedPermission.FIELDNO("Execute Permission"), pUserId);
    END;

    PROCEDURE CheckQuickReportModifyPermission@1000000024(pQuickReportHeader@1000000002 : Record 9062697;pUserId@1000000001 : Code[50]);
    BEGIN
      //DOC NA2016.15 - Checking quick report "Modify" permission
      //  -> pQuickReportHeader: The quick report header
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      CheckPermission(EnablementSetup."Quick Reports Enh. Permissions", EnhancedPermission.Type::"Quick Report", QuickReportCode(pQuickReportHeader),
        EnhancedPermission.FIELDNO("Modify Permission"), pUserId);
    END;

    PROCEDURE HasQuickReportExecutePermission@1000000023(pQuickReportHeader@1000000002 : Record 9062697;pUserId@1000000001 : Code[50]) : Boolean;
    BEGIN
      //DOC NA2016.15 - Returning if quick report "Execute" permission has been given
      //  -> pQuickReportHeader: The quick report header
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      EXIT(HasPermission(EnablementSetup."Quick Reports Enh. Permissions", EnhancedPermission.Type::"Quick Report", QuickReportCode(pQuickReportHeader),
        EnhancedPermission.FIELDNO("Execute Permission"), pUserId));
    END;

    PROCEDURE HasQuickReportModifyPermission@1000000022(pQuickReportHeader@1000000002 : Record 9062697;pUserId@1000000001 : Code[50]) : Boolean;
    BEGIN
      //DOC NA2016.15 - Returning if quick report "Modify" permission has been given
      //  -> pQuickReportHeader: The quick report header
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      EXIT(HasPermission(EnablementSetup."Quick Reports Enh. Permissions", EnhancedPermission.Type::"Quick Report", QuickReportCode(pQuickReportHeader),
        EnhancedPermission.FIELDNO("Modify Permission"), pUserId));
    END;

    PROCEDURE ApplyQuickReportPermissionFilter@1000000042(VAR pQuickReportHeader@1000000000 : Record 9062697;pUserId@1000000002 : Code[50]);
    VAR
      lPermissionFilter@1000000001 : Text;
    BEGIN
      //DOC NA2016.15 - Applying quick report permission filter
      //  <> pQuickReportHeader: The quick report header recordset
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      lPermissionFilter := BuildPermissionFilter(EnablementSetup."Quick Reports Enh. Permissions", EnhancedPermission.Type::"Quick Report", pUserId, FALSE);
      pQuickReportHeader.FILTERGROUP(2);
      IF (lPermissionFilter <> '') THEN
        pQuickReportHeader.SETFILTER(Code, lPermissionFilter)
      ELSE
        pQuickReportHeader.SETRANGE(Code);
      pQuickReportHeader.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE QuickReportCode@1000000041(pQuickReportHeader@1000000000 : Record 9062697) : Code[60];
    BEGIN
      //DOC NA2016.15 - Returning quick report code
      //  -> pQuickReportHeader: The quick report header
      //  <- The code

      IF (pQuickReportHeader."Temporary") THEN
        EXIT(pQuickReportHeader."Copied From")
      ELSE
        EXIT(pQuickReportHeader.Code);
    END;

    LOCAL PROCEDURE "--- Jet Report ---"@1000000021();
    BEGIN
    END;

    PROCEDURE CheckJetReportExecutePermission@1000000020(pJetReportHeader@1000000000 : Record 9062296;pUserId@1000000001 : Code[50]);
    BEGIN
      //DOC NA2016.15 - Checking jet report "Execute" permission
      //  -> pJetReportHeader: The jet report header
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      CheckPermission(EnablementSetup."Jet Reports Enh. Permissions", EnhancedPermission.Type::"Jet Report", JetReportCode(pJetReportHeader),
        EnhancedPermission.FIELDNO("Execute Permission"), pUserId);
    END;

    PROCEDURE CheckJetReportModifyPermission@1000000019(pJetReportHeader@1000000002 : Record 9062296;pUserId@1000000001 : Code[50]);
    BEGIN
      //DOC NA2016.15 - Checking jet report "Modify" permission
      //  -> pJetReportHeader: The jet report header
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      CheckPermission(EnablementSetup."Jet Reports Enh. Permissions", EnhancedPermission.Type::"Jet Report", JetReportCode(pJetReportHeader),
        EnhancedPermission.FIELDNO("Modify Permission"), pUserId);
    END;

    PROCEDURE HasJetReportExecutePermission@1000000018(pJetReportHeader@1000000002 : Record 9062296;pUserId@1000000001 : Code[50]) : Boolean;
    BEGIN
      //DOC NA2016.15 - Returning if jet report "Execute" permission has been given
      //  -> pJetReportHeader: The jet report header
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      EXIT(HasPermission(EnablementSetup."Jet Reports Enh. Permissions", EnhancedPermission.Type::"Jet Report", JetReportCode(pJetReportHeader),
        EnhancedPermission.FIELDNO("Execute Permission"), pUserId));
    END;

    PROCEDURE HasJetReportModifyPermission@1000000017(pJetReportHeader@1000000002 : Record 9062296;pUserId@1000000001 : Code[50]) : Boolean;
    BEGIN
      //DOC NA2016.15 - Returning if jet report "Modify" permission has been given
      //  -> pJetReportHeader: The jet report header
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      EXIT(HasPermission(EnablementSetup."Jet Reports Enh. Permissions", EnhancedPermission.Type::"Jet Report", JetReportCode(pJetReportHeader),
        EnhancedPermission.FIELDNO("Modify Permission"), pUserId));
    END;

    PROCEDURE ApplyJetReportPermissionFilter@1000000043(VAR pJetReportHeader@1000000000 : Record 9062296;pUserId@1000000002 : Code[50]);
    VAR
      lPermissionFilter@1000000001 : Text;
    BEGIN
      //DOC NA2016.15 - Applying jet report permission filter
      //  <> pJetReportHeader: The jet report header recordset
      //  -> pUserId: User ID (if empty - taking the current user)

      EnablementSetup.GET();
      lPermissionFilter := BuildPermissionFilter(EnablementSetup."Jet Reports Enh. Permissions", EnhancedPermission.Type::"Jet Report", pUserId, TRUE);
      pJetReportHeader.FILTERGROUP(2);
      IF (lPermissionFilter <> '') THEN
        pJetReportHeader.SETFILTER(ID, lPermissionFilter)
      ELSE
        pJetReportHeader.SETRANGE(ID);
      pJetReportHeader.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE JetReportCode@1000000039(pJetReportHeader@1000000000 : Record 9062296) : Code[60];
    BEGIN
      //DOC NA2016.15 - Returning jet report code
      //  -> pJetReportHeader: The jet report header
      //  <- The code

      EXIT(pJetReportHeader."Short Code");
    END;

    LOCAL PROCEDURE "--- General ---"@1000000005();
    BEGIN
    END;

    LOCAL PROCEDURE CheckPermission@1000000008(pPermissionsOn@1000000000 : Boolean;pType@1000000002 : Integer;pCode@1000000003 : Code[60];pPermissionType@1000000001 : Integer;pUserId@1000000004 : Code[50]);
    VAR
      eNoPermission@1000000005 : TextConst 'ENU=User "%1" doesn''t have %2 for %3 "%4";ENG=User "%1" doesn''t have %2 for %3 "%4"';
    BEGIN
      //DOC NA2016.15 - Checking permission
      //  -> pPermissionsOn: Permissions on flag (from "Enablement Setup")
      //  -> pType: Type (of parent object)
      //  -> pCode: Code (of parent object)
      //  -> pPermissionType: Permission type (ID of a field from "Enhanced Permission" table)
      //  -> pUserId: User ID (if empty - taking the current user)

      IF ( NOT (HasPermission(pPermissionsOn, pType, pCode, pPermissionType, pUserId))) THEN
      BEGIN
        EnhancedPermission.Type := pType;
        ERROR(eNoPermission, pUserId, LOWERCASE(ObjectFieldToolkit.GetFieldName(DATABASE::"Enhanced Permission", pPermissionType)),
          LOWERCASE(FORMAT(EnhancedPermission.Type)), pCode);
      END;
    END;

    LOCAL PROCEDURE HasPermission@1000000013(pPermissionsOn@1000000000 : Boolean;pType@1000000002 : Integer;pCode@1000000003 : Code[60];pPermissionType@1000000001 : Integer;VAR pUserId@1000000004 : Code[50]) : Boolean;
    VAR
      lGroupFilter@1000000005 : Text;
    BEGIN
      //DOC NA2016.15 - Responding if permission has been given
      //  -> pPermissionsOn: Permissions on flag (from "Enablement Setup")
      //  -> pType: Type (of parent object)
      //  -> pCode: Code (of parent object)
      //  -> pPermissionType: Permission type (ID of a field from "Enhanced Permission" table)
      //  <> pUserId: User ID (if empty - taking the current user)

      IF (pUserId = '') THEN
        pUserId := USERID();

      IF ( NOT (pPermissionsOn)) THEN
        EXIT(TRUE);

      IF (AllPermissionsForSuper(pUserId)) THEN
        EXIT(TRUE);

      IF (NoPermissionsDefined(pType)) THEN
        EXIT(TRUE);

      lGroupFilter := BuildUserGroupFilter(pUserId);
      IF (lGroupFilter = '') THEN
        EXIT(FALSE);

      EnhancedPermission.RESET();
      EnhancedPermission.SETFILTER("Enhanced Permission Group Code", lGroupFilter);
      EnhancedPermission.SETRANGE(Type, pType);
      EnhancedPermission.SETFILTER(Code, '''''|%1', pCode);
      CASE (pPermissionType) OF
        EnhancedPermission.FIELDNO("Execute Permission"): EnhancedPermission.SETRANGE("Execute Permission", TRUE);
        EnhancedPermission.FIELDNO("Modify Permission"): EnhancedPermission.SETRANGE("Modify Permission", TRUE);
        ELSE ERROR(tUnknownPermissionType, ObjectFieldToolkit.GetFieldName(DATABASE::"Enhanced Permission", pPermissionType));
      END;

      EXIT( NOT (EnhancedPermission.ISEMPTY()));
    END;

    LOCAL PROCEDURE BuildPermissionFilter@1000000009(pPermissionsOn@1000000004 : Boolean;pType@1000000003 : Integer;pUserId@1000000000 : Code[50];pUseId@1000000002 : Boolean) : Text;
    VAR
      lGroupFilter@1000000005 : Text;
      lPermissionFilter@1000000006 : Text;
      lFilterList@1000000001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      lFilterListContains@1000000007 : Boolean;
    BEGIN
      //DOC NA2016.15 - Building permission filter
      //  -> pPermissionsOn: Permissions on flag (from "Enablement Setup")
      //  -> pType: Type (of parent object)
      //  -> pUserId: User ID (if empty - taking the current user)
      //  -> pUseId: Flag to use ID instead of Code
      //  <- The filter

      IF (pUserId = '') THEN
        pUserId := USERID();

      IF ( NOT (pPermissionsOn)) THEN
        EXIT('');

      IF (AllPermissionsForSuper(pUserId)) THEN
        EXIT('');

      IF (NoPermissionsDefined(pType)) THEN
        EXIT('');

      lGroupFilter := BuildUserGroupFilter(pUserId);
      IF (lGroupFilter = '') THEN
        EXIT('0&1');

      EnhancedPermission.RESET();
      EnhancedPermission.SETFILTER("Enhanced Permission Group Code", lGroupFilter);
      EnhancedPermission.SETRANGE(Type, pType);
      EnhancedPermission.SETRANGE(Code, '');
      IF ( NOT (EnhancedPermission.ISEMPTY())) THEN
        EXIT('');

      lFilterList := lFilterList.List();
      EnhancedPermission.RESET();
      EnhancedPermission.SETFILTER("Enhanced Permission Group Code", lGroupFilter);
      EnhancedPermission.SETRANGE(Type, pType);
      IF (EnhancedPermission.FINDSET()) THEN
      REPEAT
        IF ((EnhancedPermission."Execute Permission") OR (EnhancedPermission."Modify Permission")) THEN
        BEGIN
          IF (pUseId) THEN
            lFilterListContains := lFilterList.Contains(EnhancedPermission.ID)
          ELSE
            lFilterListContains := lFilterList.Contains(EnhancedPermission.Code);
          IF ( NOT (lFilterListContains)) THEN
          BEGIN
            IF (lPermissionFilter <> '') THEN
              lPermissionFilter := lPermissionFilter + '|';
            IF (pUseId) THEN
            BEGIN
              lPermissionFilter := lPermissionFilter + FORMAT(EnhancedPermission.ID, 0, 1);
              lFilterList.Add(EnhancedPermission.ID);
            END
            ELSE
            BEGIN
              lPermissionFilter := lPermissionFilter + EnhancedPermission.Code;
              lFilterList.Add(EnhancedPermission.Code);
            END;
          END;
        END;
      UNTIL (EnhancedPermission.NEXT() = 0);

      IF (lPermissionFilter = '') THEN
        lPermissionFilter := '0&1';

      EXIT(lPermissionFilter);
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000001();
    BEGIN
    END;

    LOCAL PROCEDURE AllPermissionsForSuper@1000000016(pUserId@1000000000 : Code[50]) : Boolean;
    BEGIN
      //DOC NA2016.15 - Returning if all permissions have been given to SUPER user
      //  -> pUserId: The user ID
      //  <- The answer

      IF (EnablementSetup."All Enh. Permissions for SUPER") THEN
        IF (UserIsSuper(pUserId)) THEN
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE UserIsSuper@1000000006(pUserId@1000000000 : Code[50]) : Boolean;
    VAR
      lAccessControl@1000000003 : Record 2000000053;
      lUser@1000000001 : Record 2000000120;
      lIsSuper@1000000002 : Boolean;
    BEGIN
      //DOC NA2016.15 - Answering a question whether the user passed is a member of SUPER group
      //  -> pUserId: The user ID
      //  <- The answer

      lUser.RESET();
      IF (lUser.ISEMPTY()) THEN
        EXIT(TRUE);

      lIsSuper := FALSE;

      lUser.RESET();
      lUser.SETCURRENTKEY("User Name");
      lUser.SETRANGE("User Name", pUserId);
      IF (lUser.FINDFIRST()) THEN
      BEGIN
        lAccessControl.RESET();
        lAccessControl.SETRANGE("User Security ID", lUser."User Security ID");
        lAccessControl.SETFILTER("Company Name", '''''|%1', COMPANYNAME());
        lAccessControl.SETRANGE("Role ID", tSuperRole);
        lIsSuper := ( NOT (lAccessControl.ISEMPTY()));
      END;

      EXIT(lIsSuper);
    END;

    LOCAL PROCEDURE NoPermissionsDefined@1000000010(pType@1000000000 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.15 - Responsing if no permissions have been defined for given type
      //  -> pType: The type
      //  <- The answer

      EnhancedPermission.RESET();
      EnhancedPermission.SETRANGE(Type, pType);
      EXIT(EnhancedPermission.ISEMPTY());
    END;

    LOCAL PROCEDURE BuildUserGroupFilter@1000000035(pUserId@1000000000 : Code[50]) : Text;
    VAR
      lGroupFilter@1000000001 : Text;
    BEGIN
      //DOC NA2016.15 - Building group filter for given user
      //  -> pUserId: The user ID
      //  <- The answer

      EnhancedPermissionGroupUser.RESET();
      EnhancedPermissionGroupUser.SETFILTER("User ID", '''''|%1', pUserId);
      IF (EnhancedPermissionGroupUser.FINDSET()) THEN
      REPEAT
        IF (lGroupFilter <> '') THEN
          lGroupFilter := lGroupFilter + '|';
        lGroupFilter := lGroupFilter + EnhancedPermissionGroupUser."Enhanced Permission Group Code";
      UNTIL (EnhancedPermissionGroupUser.NEXT() = 0);

      EXIT(lGroupFilter);
    END;

    BEGIN
    {
      //DOC NA2016.15 JH 04/05/2016 - Created
    }
    END.
  }
}

