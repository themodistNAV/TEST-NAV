OBJECT Codeunit 9062428 Barcode Management
{
  OBJECT-PROPERTIES
  {
    Date=24/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SystemColour@1000000001 : Record 9062336;
      BlobToolkit@1000000003 : Codeunit 9062242;
      TnpToolkit@1000000002 : Codeunit 9062230;
      BarcodeImageRenderer@1000000004 : DotNet "'TheNavPeople.BarcodeGenerator.9.0.1.1, Version=9.0.1.1, Culture=neutral, PublicKeyToken=9a22de5f8e27a3da'.TheNavPeople.BarcodeGenerator.BarcodeImageRenderer";
      Ean13BarcodeTemplate@1000000000 : DotNet "'TheNavPeople.BarcodeGenerator.9.0.1.1, Version=9.0.1.1, Culture=neutral, PublicKeyToken=9a22de5f8e27a3da'.TheNavPeople.BarcodeGenerator.Ean13BarcodeTemplate";
      Code39BarcodeTemplate@1000000005 : DotNet "'TheNavPeople.BarcodeGenerator.9.0.1.1, Version=9.0.1.1, Culture=neutral, PublicKeyToken=9a22de5f8e27a3da'.TheNavPeople.BarcodeGenerator.Code39BarcodeTemplate";
      Code128BarcodeTemplate@1000000006 : DotNet "'TheNavPeople.BarcodeGenerator.9.0.1.1, Version=9.0.1.1, Culture=neutral, PublicKeyToken=9a22de5f8e27a3da'.TheNavPeople.BarcodeGenerator.Code128BarcodeTemplate";

    PROCEDURE "--- General Methods ---"@1000000015();
    BEGIN
    END;

    PROCEDURE SetupEan13Barcode@1000000010(pBarHeight@1000000002 : Integer;pBarWidth@1000000003 : Integer;pCanvasHeight@1000000004 : Integer;pCanvasWidth@1000000005 : Integer;pLongBarOffset@1000000007 : Integer;pForegroundColourCode@1000000006 : Code[20];pBackgroundColourCode@1000000001 : Code[20];pAlignment@1000000000 : Text[100];pMargin@1000000008 : Code[50];pTextOffset@1000000009 : Integer;pFontFamily@1000000010 : Text[50];pFontSize@1000000011 : Integer;pFontStyle@1000000012 : Text[100]);
    BEGIN
      //DOC NA2015.1 - Setting up EAN 13 barcode
      //  -> pBarHeight: Bar height
      //  -> pBarWidth: Bar width; it is one single bar with, not the whole barcode width
      //  -> pCanvasHeight: Canvas height; if left as 0 the barcode canvas height is calculated automatically
      //  -> pCanvasWidth: Canvas width; if left as 0 the barcode canvas width is calculated automatically
      //  -> pLongBarOffset: How much longer (down) is a long bar compared to a normal bar
      //  -> pForegroundColourCode: Foreground colour code; black is the default one
      //  -> pBackgroundColourCode: Background colour code; white is the default one
      //  -> pAlignment: Barcode alignment within its canvas; use tool functions from the bottom of this codeunit
      //  -> pMargin: A string containing or one number (for all margins) or 4 comma-separated numbers for left, right, top and bottom margin
      //              You can use tool functions from the bottom of this codeunit
      //  -> pTextOffset: Text offset; how far (down) from the barcode is its text
      //  -> pFontFamily: Font family for the barcode font
      //  -> pFontSize: Font size for the barcode font
      //  -> pFontStyle: Font style string; use the function from the bottom of this codeunit

      Ean13BarcodeTemplate := Ean13BarcodeTemplate.Ean13BarcodeTemplate();
      IF (pBarHeight > 0) THEN
        Ean13BarcodeTemplate.BarHeight := pBarHeight;
      IF (pBarWidth > 0) THEN
        Ean13BarcodeTemplate.BarWidth := pBarWidth;
      IF (pCanvasHeight > 0) THEN
        Ean13BarcodeTemplate.CanvasHeight := pCanvasHeight;
      IF (pCanvasWidth > 0) THEN
        Ean13BarcodeTemplate.CanvasWidth := pCanvasWidth;
      IF (pLongBarOffset > 0) THEN
        Ean13BarcodeTemplate.LongBarOffset := pLongBarOffset;
      IF (pForegroundColourCode <> '') THEN
        Ean13BarcodeTemplate.ForegroundColourName := SystemColour.ColourName(pForegroundColourCode);
      IF (pBackgroundColourCode <> '') THEN
        Ean13BarcodeTemplate.BackgroundColourName := SystemColour.ColourName(pBackgroundColourCode);
      IF (pAlignment <> '') THEN
        Ean13BarcodeTemplate.AlignmentString := pAlignment;
      IF (pMargin <> '') THEN
        Ean13BarcodeTemplate.MarginString := pMargin;
      IF (pTextOffset > 0) THEN
        Ean13BarcodeTemplate.TextOffset := pTextOffset;
      IF ((pFontFamily <> '') AND (pFontSize <> 0) AND (pFontStyle <> '')) THEN
        Ean13BarcodeTemplate.TextFont := Ean13BarcodeTemplate.CreateFont(pFontFamily, pFontSize, pFontStyle);
    END;

    PROCEDURE CreateEan13Barcode@1000000001(pCode@1000000000 : Code[12];VAR pBlob@1000000003 : Record 99008535);
    VAR
      lEan13Barcode@1000000001 : DotNet "'TheNavPeople.BarcodeGenerator.9.0.1.1, Version=9.0.1.1, Culture=neutral, PublicKeyToken=9a22de5f8e27a3da'.TheNavPeople.BarcodeGenerator.Ean13Barcode";
      lImage@1000000002 : DotNet "'System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image";
    BEGIN
      //DOC NA2015.1 - Creating EAN 13 barcode
      //  -> pCode: Code (barcode content)
      //  <> pBlob: Target BLOB

      IF (ISNULL(Ean13BarcodeTemplate)) THEN
        Ean13BarcodeTemplate := Ean13BarcodeTemplate.Ean13BarcodeTemplate();

      lEan13Barcode := lEan13Barcode.Ean13Barcode();
      lEan13Barcode.Code := pCode;
      lEan13Barcode.Template := Ean13BarcodeTemplate;
      lEan13Barcode.Renderer := BarcodeImageRenderer.BarcodeImageRenderer();
      lImage := lEan13Barcode.Render();

      CLEAR(pBlob);
      BlobToolkit.ImageToBlobS(lImage, pBlob);
    END;

    PROCEDURE SetupCode39Barcode@1000000000(pBarHeight@1000000002 : Integer;pBarWidth@1000000003 : Integer;pBarWidthRatio@1000000007 : Integer;pCanvasHeight@1000000004 : Integer;pCanvasWidth@1000000005 : Integer;pForegroundColourCode@1000000006 : Code[20];pBackgroundColourCode@1000000001 : Code[20];pAlignment@1000000000 : Text[100];pMargin@1000000008 : Code[50];pShowText@1000000013 : Boolean;pTextOffset@1000000009 : Integer;pFontFamily@1000000010 : Text[50];pFontSize@1000000011 : Integer;pFontStyle@1000000012 : Text[100]);
    BEGIN
      //DOC NA2015.1 - Setting up Code 39 barcode
      //  -> pBarHeight: Bar height
      //  -> pBarWidth: Bar width; it is one single bar with, not the whole barcode width
      //  -> pBarWidthRatio: Bar width ratio; narrow-to-wide bar ratio (2 or 3 for Code 39 barcode)
      //  -> pCanvasHeight: Canvas height; if left as 0 the barcode canvas height is calculated automatically
      //  -> pCanvasWidth: Canvas width; if left as 0 the barcode canvas width is calculated automatically
      //  -> pLongBarOffset: How much longer (down) is a long bar compared to a normal bar
      //  -> pForegroundColourCode: Foreground colour code; black is the default one
      //  -> pBackgroundColourCode: Bacground colour code; white is the default one
      //  -> pAlignment: Barcode alignment within its canvas; use tool functions from the bottom of this codeunit
      //  -> pMargin: A string containing or one number (for all margins) or 4 comma-separated numbers for left, right, top and bottom margin
      //              You can use tool functions from the bottom of this codeunit
      //  -> pShowText: Flag to show / hide text
      //  -> pTextOffset: Text offset; how far (down) from the barcode is its text
      //  -> pFontFamily: Font family for the barcode font
      //  -> pFontSize: Font size for the barcode font
      //  -> pFontStyle: Font style string; use the function from the bottom of this codeunit

      Code39BarcodeTemplate := Code39BarcodeTemplate.Code39BarcodeTemplate();
      IF (pBarHeight > 0) THEN
        Code39BarcodeTemplate.BarHeight := pBarHeight;
      IF (pBarWidth > 0) THEN
        Code39BarcodeTemplate.BarWidth := pBarWidth;
      IF (pBarWidthRatio IN [2, 3]) THEN
        Code39BarcodeTemplate.BarWidthRatio := pBarWidthRatio;
      IF (pCanvasHeight > 0) THEN
        Code39BarcodeTemplate.CanvasHeight := pCanvasHeight;
      IF (pCanvasWidth > 0) THEN
        Code39BarcodeTemplate.CanvasWidth := pCanvasWidth;
      IF (pForegroundColourCode <> '') THEN
        Code39BarcodeTemplate.ForegroundColourName := SystemColour.ColourName(pForegroundColourCode);
      IF (pBackgroundColourCode <> '') THEN
        Code39BarcodeTemplate.BackgroundColourName := SystemColour.ColourName(pBackgroundColourCode);
      IF (pAlignment <> '') THEN
        Code39BarcodeTemplate.AlignmentString := pAlignment;
      IF (pMargin <> '') THEN
        Code39BarcodeTemplate.MarginString := pMargin;
      Code39BarcodeTemplate.ShowText := pShowText;
      IF (pTextOffset > 0) THEN
        Code39BarcodeTemplate.TextOffset := pTextOffset;
      IF ((pFontFamily <> '') AND (pFontSize <> 0) AND (pFontStyle <> '')) THEN
        Code39BarcodeTemplate.TextFont := Ean13BarcodeTemplate.CreateFont(pFontFamily, pFontSize, pFontStyle);
    END;

    PROCEDURE Code39Barcode@1000000002(pCode@1000000001 : Code[250];VAR pBlob@1000000000 : Record 99008535);
    VAR
      lCode39Barcode@1000000002 : DotNet "'TheNavPeople.BarcodeGenerator.9.0.1.1, Version=9.0.1.1, Culture=neutral, PublicKeyToken=9a22de5f8e27a3da'.TheNavPeople.BarcodeGenerator.Code39Barcode";
      lImage@1000000003 : DotNet "'System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image";
    BEGIN
      //DOC NC2015.1 - Creating Code 39 barcode
      //  -> pCode: Code (barcode content)
      //  <> pBlob: Target BLOB

      IF (ISNULL(Code39BarcodeTemplate)) THEN
        Code39BarcodeTemplate := Code39BarcodeTemplate.Code39BarcodeTemplate();

      lCode39Barcode := lCode39Barcode.Code39Barcode();
      lCode39Barcode.Code := pCode;
      lCode39Barcode.Template := Code39BarcodeTemplate;
      lCode39Barcode.Renderer := BarcodeImageRenderer.BarcodeImageRenderer();
      lImage := lCode39Barcode.Render();

      CLEAR(pBlob);
      BlobToolkit.ImageToBlobS(lImage, pBlob);
    END;

    PROCEDURE SetupCode128Barcode@1000000021(pBarHeight@1000000002 : Integer;pBarWidth@1000000003 : Integer;pCanvasHeight@1000000004 : Integer;pCanvasWidth@1000000005 : Integer;pForegroundColourCode@1000000006 : Code[20];pBackgroundColourCode@1000000001 : Code[20];pAlignment@1000000000 : Text[100];pMargin@1000000008 : Code[50];pShowText@1000000007 : Boolean;pTextOffset@1000000009 : Integer;pFontFamily@1000000010 : Text[50];pFontSize@1000000011 : Integer;pFontStyle@1000000012 : Text[100]);
    BEGIN
      //DOC NA2015.1 - Setting up Code 39 barcode
      //  -> pBarHeight: Bar height
      //  -> pBarWidth: Bar width; it is one single bar with, not the whole barcode width
      //  -> pBarWidthRatio: Bar width ratio; narrow-to-wide bar ratio (2 or 3 for Code 39 barcode)
      //  -> pCanvasHeight: Canvas height; if left as 0 the barcode canvas height is calculated automatically
      //  -> pCanvasWidth: Canvas width; if left as 0 the barcode canvas width is calculated automatically
      //  -> pLongBarOffset: How much longer (down) is a long bar compared to a normal bar
      //  -> pForegroundColourCode: Foreground colour code; black is the default one
      //  -> pBackgroundColourCode: Bacground colour code; white is the default one
      //  -> pAlignment: Barcode alignment within its canvas; use tool functions from the bottom of this codeunit
      //  -> pMargin: A string containing or one number (for all margins) or 4 comma-separated numbers for left, right, top and bottom margin
      //              You can use tool functions from the bottom of this codeunit
      //  -> pShowText: Flag to show / hide text
      //  -> pTextOffset: Text offset; how far (down) from the barcode is its text
      //  -> pFontFamily: Font family for the barcode font
      //  -> pFontSize: Font size for the barcode font
      //  -> pFontStyle: Font style string; use the function from the bottom of this codeunit

      Code128BarcodeTemplate := Code128BarcodeTemplate.Code128BarcodeTemplate();
      IF (pBarHeight > 0) THEN
        Code128BarcodeTemplate.BarHeight := pBarHeight;
      IF (pBarWidth > 0) THEN
        Code128BarcodeTemplate.BarWidth := pBarWidth;
      IF (pCanvasHeight > 0) THEN
        Code128BarcodeTemplate.CanvasHeight := pCanvasHeight;
      IF (pCanvasWidth > 0) THEN
        Code128BarcodeTemplate.CanvasWidth := pCanvasWidth;
      IF (pForegroundColourCode <> '') THEN
        Code128BarcodeTemplate.ForegroundColourName := SystemColour.ColourName(pForegroundColourCode);
      IF (pBackgroundColourCode <> '') THEN
        Code128BarcodeTemplate.BackgroundColourName := SystemColour.ColourName(pBackgroundColourCode);
      IF (pAlignment <> '') THEN
        Code128BarcodeTemplate.AlignmentString := pAlignment;
      IF (pMargin <> '') THEN
        Code128BarcodeTemplate.MarginString := pMargin;
      Code128BarcodeTemplate.ShowText := pShowText;
      IF (pTextOffset > 0) THEN
        Code128BarcodeTemplate.TextOffset := pTextOffset;
      IF ((pFontFamily <> '') AND (pFontSize <> 0) AND (pFontStyle <> '')) THEN
        Code128BarcodeTemplate.TextFont := Ean13BarcodeTemplate.CreateFont(pFontFamily, pFontSize, pFontStyle);
    END;

    PROCEDURE Code128ABarcode@1000000003(pCode@1000000001 : Code[250];VAR pBlob@1000000000 : Record 99008535);
    VAR
      lCode128ABarcode@1000000003 : DotNet "'TheNavPeople.BarcodeGenerator.9.0.1.1, Version=9.0.1.1, Culture=neutral, PublicKeyToken=9a22de5f8e27a3da'.TheNavPeople.BarcodeGenerator.Code128ABarcode";
      lImage@1000000002 : DotNet "'System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image";
    BEGIN
      //DOC NC2015.1 - Creating Code 128 A barcode
      //  -> pCode: Code (barcode content)
      //  <> pBlob: Target BLOB

      IF (ISNULL(Code128BarcodeTemplate)) THEN
        Code128BarcodeTemplate := Code128BarcodeTemplate.Code128BarcodeTemplate();

      lCode128ABarcode := lCode128ABarcode.Code128ABarcode();
      lCode128ABarcode.Code := pCode;
      lCode128ABarcode.Template := Code128BarcodeTemplate;
      lCode128ABarcode.Renderer := BarcodeImageRenderer.BarcodeImageRenderer();
      lImage := lCode128ABarcode.Render();

      CLEAR(pBlob);
      BlobToolkit.ImageToBlobS(lImage, pBlob);
    END;

    PROCEDURE Code128BBarcode@1000000004(pCode@1000000001 : Code[250];VAR pBlob@1000000000 : Record 99008535);
    VAR
      lCode128BBarcode@1000000003 : DotNet "'TheNavPeople.BarcodeGenerator.9.0.1.1, Version=9.0.1.1, Culture=neutral, PublicKeyToken=9a22de5f8e27a3da'.TheNavPeople.BarcodeGenerator.Code128BBarcode";
      lImage@1000000002 : DotNet "'System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image";
    BEGIN
      //DOC NC2015.1 - Creating Code 128 B barcode
      //  -> pCode: Code (barcode content)
      //  <> pBlob: Target BLOB

      IF (ISNULL(Code128BarcodeTemplate)) THEN
        Code128BarcodeTemplate := Code128BarcodeTemplate.Code128BarcodeTemplate();

      lCode128BBarcode := lCode128BBarcode.Code128BBarcode();
      lCode128BBarcode.Code := pCode;
      lCode128BBarcode.Template := Code128BarcodeTemplate;

      lCode128BBarcode.Renderer := BarcodeImageRenderer.BarcodeImageRenderer();
      lImage := lCode128BBarcode.Render();

      CLEAR(pBlob);
      BlobToolkit.ImageToBlobS(lImage, pBlob);
    END;

    PROCEDURE Code128CBarcode@1000000005(pCode@1000000001 : Code[250];VAR pBlob@1000000000 : Record 99008535);
    VAR
      lCode128CBarcode@1000000003 : DotNet "'TheNavPeople.BarcodeGenerator.9.0.1.1, Version=9.0.1.1, Culture=neutral, PublicKeyToken=9a22de5f8e27a3da'.TheNavPeople.BarcodeGenerator.Code128CBarcode";
      lImage@1000000002 : DotNet "'System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image";
    BEGIN
      //DOC NC2015.1 - Creating Code 128 C barcode
      //  -> pCode: Code (barcode content)
      //  <> pBlob: Target BLOB

      IF (ISNULL(Code128BarcodeTemplate)) THEN
        Code128BarcodeTemplate := Code128BarcodeTemplate.Code128BarcodeTemplate();

      lCode128CBarcode := lCode128CBarcode.Code128CBarcode();
      lCode128CBarcode.Code := pCode;
      lCode128CBarcode.Template := Code128BarcodeTemplate;
      lCode128CBarcode.Renderer := BarcodeImageRenderer.BarcodeImageRenderer();
      lImage := lCode128CBarcode.Render();

      CLEAR(pBlob);
      BlobToolkit.ImageToBlobS(lImage, pBlob);
    END;

    PROCEDURE "--- Tool Methods ---"@1000000016();
    BEGIN
    END;

    PROCEDURE Alignment@1000000017(pHorizontalAlignment@1000000000 : Text[30];pVerticalAlignment@1000000001 : Text[30]) : Text[100];
    BEGIN
      //DOC NA2015.1 - Creating alignment string
      //  -> pHorizontalAlignment: Horizontal alignment (use one of the functions below)
      //  -> pVerticalAlignment: Vertical alignment (use one of the functions below)

      EXIT(STRSUBSTNO('%1,%2', pHorizontalAlignment, pVerticalAlignment));
    END;

    PROCEDURE HorizontalAlignmentLeft@1000000022() : Text[30];
    BEGIN
      //DOC NA2015.1 - Returning left for horizontal alignment
      //  <- The Value

      EXIT('Left');
    END;

    PROCEDURE HorizontalAlignmentCenter@1000000024() : Text[30];
    BEGIN
      //DOC NA2015.1 - Returning center for horizontal alignment
      //  <- The Value

      EXIT('Center');
    END;

    PROCEDURE HorizontalAlignmentRight@1000000023() : Text[30];
    BEGIN
      //DOC NA2015.1 - Returning right for horizontal alignment
      //  <- The Value

      EXIT('Right');
    END;

    PROCEDURE VerticalAlignmentTop@1000000027() : Text[30];
    BEGIN
      //DOC NA2015.1 - Returning top for vertical alignment
      //  <- The Value

      EXIT('Top');
    END;

    PROCEDURE VerticalAlignmentMiddle@1000000029() : Text[30];
    BEGIN
      //DOC NA2015.1 - Returning middle for vertical alignment
      //  <- The Value

      EXIT('Middle');
    END;

    PROCEDURE VerticalAlignmentBottom@1000000028() : Text[30];
    BEGIN
      //DOC NA2015.1 - Returning bottom for vertical alignment
      //  <- The Value

      EXIT('Bottom');
    END;

    PROCEDURE Margin@1000000018(pMargin@1000000000 : Integer) : Text[50];
    BEGIN
      //DOC NA2015.1 - Returning margin string for one value
      //  -> pMargin: Margin (one number)
      //  <- Margin string

      EXIT(FORMAT(pMargin, 0, 1));
    END;

    PROCEDURE Margins@1000000031(pLeft@1000000000 : Integer;pRight@1000000001 : Integer;pTop@1000000002 : Integer;pBottom@1000000003 : Integer) : Text[50];
    BEGIN
      //DOC NA2015.1 - Returning margin string for all values
      //  -> pLeft: Left margin
      //  -> pRight: Right margin
      //  -> pTop: Top margin
      //  -> pBottom: Bottom margin
      //  <- Margin string

      pLeft := TnpToolkit.MaxInteger(pLeft, 0);
      pRight := TnpToolkit.MaxInteger(pRight, 0);
      pTop := TnpToolkit.MaxInteger(pTop, 0);
      pBottom := TnpToolkit.MaxInteger(pBottom, 0);

      EXIT(STRSUBSTNO('%1,%2,%3,%4', pLeft, pRight, pTop, pBottom));
    END;

    PROCEDURE FontStyle@1000000019(pBold@1000000000 : Boolean;pItalic@1000000001 : Boolean;pUnderline@1000000002 : Boolean) : Text[100];
    VAR
      lFontStyle@1000000003 : Text[100];
    BEGIN
      //DOC NA2015.1 - Returning font style
      //  -> pBold: Bold flag
      //  -> pItalic: Italic flag
      //  -> pUnderline: Unserline flag
      //  <- Font style string

      AddToFontStyle(pBold, 'Bold', lFontStyle);
      AddToFontStyle(pItalic, 'Italic', lFontStyle);
      AddToFontStyle(pUnderline, 'Underline', lFontStyle);

      EXIT(lFontStyle);
    END;

    LOCAL PROCEDURE AddToFontStyle@1000000038(pAdd@1000000000 : Boolean;pValue@1000000001 : Text[20];VAR pFontStyle@1000000002 : Text[100]);
    BEGIN
      //DOC NA2015.1 - Adding another value to font style
      //  -> pAdd: Add flag
      //  -> pValue: Value to add
      //  <> pFontStyle: Target string

      IF (pAdd) THEN
      BEGIN
        IF (pFontStyle <> '') THEN
          pFontStyle := pFontStyle + ',';
        pFontStyle := pFontStyle + pValue;
      END;
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 19/04/2014 - Created
      //DOC NA2015.4  JH 28/01/2015 - Click-once supported
      //DOC NA2016.10 AP 23/10/2015 - Upgraded to 2016
      //DOC NA2016.16 JH 18/05/2016 - CfMD modifications (new library version)
    }
    END.
  }
}

