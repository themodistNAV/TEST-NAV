OBJECT Codeunit 86 Sales-Quote to Order
{
  OBJECT-PROPERTIES
  {
    Date=23/03/16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.45480;
  }
  PROPERTIES
  {
    TableNo=36;
    OnRun=VAR
            OldSalesCommentLine@1001 : Record 44;
            Cust@1008 : Record 18;
            ApprovalsMgmt@1002 : Codeunit 1535;
            SalesCalcDiscountByType@1003 : Codeunit 56;
            RecordLinkManagement@1000 : Codeunit 447;
            ShouldRedistributeInvoiceAmount@1004 : Boolean;
          BEGIN
            TESTFIELD("Document Type","Document Type"::Quote);
            ShouldRedistributeInvoiceAmount := SalesCalcDiscountByType.ShouldRedistributeInvoiceDiscountAmount(Rec);

            OnCheckSalesPostRestrictions;

            Cust.GET("Sell-to Customer No.");
            Cust.CheckBlockedCustOnDocs(Cust,"Document Type"::Order,TRUE,FALSE);
            CALCFIELDS("Amount Including VAT");
            SalesOrderHeader := Rec;
            IF GUIALLOWED AND NOT HideValidationDialog THEN
              CustCheckCreditLimit.SalesHeaderCheck(SalesOrderHeader);
            SalesOrderHeader."Document Type" := SalesOrderHeader."Document Type"::Order;

            CheckAvailability(Rec);
            CheckInProgressOpportunities(Rec);

            SalesOrderHeader."No. Printed" := 0;
            SalesOrderHeader.Status := SalesOrderHeader.Status::Open;
            SalesOrderHeader."No." := '';
            SalesOrderHeader."Quote No." := "No.";
            SalesOrderLine.LOCKTABLE;
            SalesOrderHeader.INSERT(TRUE);

            SalesOrderHeader."Order Date" := "Order Date";
            IF "Posting Date" <> 0D THEN
              SalesOrderHeader."Posting Date" := "Posting Date";
            SalesOrderHeader."Document Date" := "Document Date";
            SalesOrderHeader."Shipment Date" := "Shipment Date";
            SalesOrderHeader."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
            SalesOrderHeader."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
            SalesOrderHeader."Dimension Set ID" := "Dimension Set ID";

            SalesOrderHeader."Location Code" := "Location Code";
            SalesOrderHeader."Outbound Whse. Handling Time" := "Outbound Whse. Handling Time";
            SalesOrderHeader."Ship-to Name" := "Ship-to Name";
            SalesOrderHeader."Ship-to Name 2" := "Ship-to Name 2";
            SalesOrderHeader."Ship-to Address" := "Ship-to Address";
            SalesOrderHeader."Ship-to Address 2" := "Ship-to Address 2";
            SalesOrderHeader."Ship-to City" := "Ship-to City";
            SalesOrderHeader."Ship-to Post Code" := "Ship-to Post Code";
            SalesOrderHeader."Ship-to County" := "Ship-to County";
            SalesOrderHeader."Ship-to Country/Region Code" := "Ship-to Country/Region Code";
            SalesOrderHeader."Ship-to Contact" := "Ship-to Contact";

            SalesOrderHeader.Reserve := Reserve;
            SalesOrderHeader."Prepayment %" := Cust."Prepayment %";
            IF SalesOrderHeader."Posting Date" = 0D THEN
              SalesOrderHeader."Posting Date" := WORKDATE;

            SalesOrderHeader.MODIFY;
            TransferQuoteToSalesOrderLines(SalesQuoteLine,Rec,SalesOrderLine,SalesOrderHeader,Cust);

            SalesSetup.GET;
            IF SalesSetup."Archive Quotes and Orders" THEN
              ArchiveManagement.ArchSalesDocumentNoConfirm(Rec);

            IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN BEGIN
              SalesOrderHeader."Posting Date" := 0D;
              SalesOrderHeader.MODIFY;
            END;

            SalesCommentLine.SETRANGE("Document Type","Document Type");
            SalesCommentLine.SETRANGE("No.","No.");
            IF NOT SalesCommentLine.ISEMPTY THEN BEGIN
              SalesCommentLine.LOCKTABLE;
              IF SalesCommentLine.FINDSET THEN
                REPEAT
                  OldSalesCommentLine := SalesCommentLine;
                  SalesCommentLine.DELETE;
                  SalesCommentLine."Document Type" := SalesOrderHeader."Document Type";
                  SalesCommentLine."No." := SalesOrderHeader."No.";
                  SalesCommentLine.INSERT;
                  SalesCommentLine := OldSalesCommentLine;
                UNTIL SalesCommentLine.NEXT = 0;
            END;
            RecordLinkManagement.CopyLinks(Rec,SalesOrderHeader);

            ItemChargeAssgntSales.RESET;
            ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntSales.SETRANGE("Document No.","No.");
            WHILE ItemChargeAssgntSales.FINDFIRST DO BEGIN
              ItemChargeAssgntSales.DELETE;
              ItemChargeAssgntSales."Document Type" := SalesOrderHeader."Document Type";
              ItemChargeAssgntSales."Document No." := SalesOrderHeader."No.";
              IF NOT (ItemChargeAssgntSales."Applies-to Doc. Type" IN
                      [ItemChargeAssgntSales."Applies-to Doc. Type"::Shipment,
                       ItemChargeAssgntSales."Applies-to Doc. Type"::"Return Receipt"])
              THEN BEGIN
                ItemChargeAssgntSales."Applies-to Doc. Type" := SalesOrderHeader."Document Type";
                ItemChargeAssgntSales."Applies-to Doc. No." := SalesOrderHeader."No.";
              END;
              ItemChargeAssgntSales.INSERT;
            END;

            MoveWonLostOpportunites(Rec,SalesOrderHeader);

            DELETELINKS;
            DELETE;
            ApprovalsMgmt.CopyApprovalEntryQuoteToOrder(DATABASE::"Sales Header","No.",SalesOrderHeader."No.",SalesOrderHeader.RECORDID);
            ApprovalsMgmt.DeleteApprovalEntry(DATABASE::"Sales Header","Document Type","No.");

            SalesQuoteLine.DELETEALL;

            IF NOT ShouldRedistributeInvoiceAmount THEN
              SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(SalesOrderHeader);
            COMMIT;
            CLEAR(CustCheckCreditLimit);
            CLEAR(ItemCheckAvail);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst '@@@=An open Opportunity is linked to this Quote. The Opportunity has to be closed before the Quote can be converted to an Order. Do you want to close the Opportunity now and continue the conversion?;ENU=An open %1 is linked to this %2. The %1 has to be closed before the %2 can be converted to an %3. Do you want to close the %1 now and continue the conversion?;ENG=An open %1 is linked to this %2. The %1 has to be closed before the %2 can be converted to an %3. Do you want to close the %1 now and continue the conversion?';
      Text001@1001 : TextConst '@@@=An open Opportunity is still linked to this Quote. The conversion to an Order was aborted.;ENU=An open %1 is still linked to this %2. The conversion to an %3 was aborted.;ENG=An open %1 is still linked to this %2. The conversion to an %3 was aborted.';
      SalesQuoteLine@1004 : Record 37;
      SalesLine@1005 : Record 37;
      SalesOrderHeader@1006 : Record 36;
      SalesOrderLine@1007 : Record 37;
      SalesCommentLine@1008 : Record 44;
      ItemChargeAssgntSales@1009 : Record 5809;
      CustCheckCreditLimit@1011 : Codeunit 312;
      ItemCheckAvail@1012 : Codeunit 311;
      ReserveSalesLine@1013 : Codeunit 99000832;
      PrepmtMgt@1016 : Codeunit 441;
      HideValidationDialog@1014 : Boolean;
      SalesSetup@1018 : Record 311;
      ArchiveManagement@1019 : Codeunit 5063;

    PROCEDURE GetSalesOrderHeader@1(VAR SalesHeader2@1000 : Record 36);
    BEGIN
      SalesHeader2 := SalesOrderHeader;
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE CheckInProgressOpportunities@2(VAR SalesHeader@1000 : Record 36);
    VAR
      Opp@1001 : Record 5092;
      TempOpportunityEntry@1002 : TEMPORARY Record 5093;
    BEGIN
      Opp.RESET;
      Opp.SETCURRENTKEY("Sales Document Type","Sales Document No.");
      Opp.SETRANGE("Sales Document Type",Opp."Sales Document Type"::Quote);
      Opp.SETRANGE("Sales Document No.",SalesHeader."No.");
      Opp.SETRANGE(Status,Opp.Status::"In Progress");
      IF Opp.FINDFIRST THEN BEGIN
        IF NOT CONFIRM(Text000,TRUE,Opp.TABLECAPTION,Opp."Sales Document Type"::Quote,Opp."Sales Document Type"::Order) THEN
          ERROR('');
        TempOpportunityEntry.DELETEALL;
        TempOpportunityEntry.INIT;
        TempOpportunityEntry.VALIDATE("Opportunity No.",Opp."No.");
        TempOpportunityEntry."Sales Cycle Code" := Opp."Sales Cycle Code";
        TempOpportunityEntry."Contact No." := Opp."Contact No.";
        TempOpportunityEntry."Contact Company No." := Opp."Contact Company No.";
        TempOpportunityEntry."Salesperson Code" := Opp."Salesperson Code";
        TempOpportunityEntry."Campaign No." := Opp."Campaign No.";
        TempOpportunityEntry."Action Taken" := TempOpportunityEntry."Action Taken"::Won;
        TempOpportunityEntry."Wizard Step" := 1;
        TempOpportunityEntry.INSERT;
        TempOpportunityEntry.SETRANGE("Action Taken",TempOpportunityEntry."Action Taken"::Won);
        PAGE.RUNMODAL(PAGE::"Close Opportunity",TempOpportunityEntry);
        Opp.RESET;
        Opp.SETCURRENTKEY("Sales Document Type","Sales Document No.");
        Opp.SETRANGE("Sales Document Type",Opp."Sales Document Type"::Quote);
        Opp.SETRANGE("Sales Document No.",SalesHeader."No.");
        Opp.SETRANGE(Status,Opp.Status::"In Progress");
        IF Opp.FINDFIRST THEN
          ERROR(Text001,Opp.TABLECAPTION,Opp."Sales Document Type"::Quote,Opp."Sales Document Type"::Order);
        COMMIT;
        SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      END;
    END;

    LOCAL PROCEDURE MoveWonLostOpportunites@3(VAR SalesQuoteHeader@1000 : Record 36;VAR SalesOrderHeader@1001 : Record 36);
    VAR
      Opp@1002 : Record 5092;
      OpportunityEntry@1003 : Record 5093;
    BEGIN
      Opp.RESET;
      Opp.SETCURRENTKEY("Sales Document Type","Sales Document No.");
      Opp.SETRANGE("Sales Document Type",Opp."Sales Document Type"::Quote);
      Opp.SETRANGE("Sales Document No.",SalesQuoteHeader."No.");
      IF Opp.FINDFIRST THEN
        IF Opp.Status = Opp.Status::Won THEN BEGIN
          Opp."Sales Document Type" := Opp."Sales Document Type"::Order;
          Opp."Sales Document No." := SalesOrderHeader."No.";
          Opp.MODIFY;
          OpportunityEntry.RESET;
          OpportunityEntry.SETCURRENTKEY(Active,"Opportunity No.");
          OpportunityEntry.SETRANGE(Active,TRUE);
          OpportunityEntry.SETRANGE("Opportunity No.",Opp."No.");
          IF OpportunityEntry.FINDFIRST THEN BEGIN
            OpportunityEntry."Calcd. Current Value (LCY)" := OpportunityEntry.GetSalesDocValue(SalesOrderHeader);
            OpportunityEntry.MODIFY;
          END;
        END ELSE
          IF Opp.Status = Opp.Status::Lost THEN BEGIN
            Opp."Sales Document Type" := Opp."Sales Document Type"::" ";
            Opp."Sales Document No." := '';
            Opp.MODIFY;
          END;
    END;

    LOCAL PROCEDURE CheckAvailability@4(SalesQuoteHeader@1000 : Record 36);
    BEGIN
      SalesQuoteLine.SETRANGE("Document Type",SalesQuoteHeader."Document Type");
      SalesQuoteLine.SETRANGE("Document No.",SalesQuoteHeader."No.");
      SalesQuoteLine.SETRANGE(Type,SalesQuoteLine.Type::Item);
      SalesQuoteLine.SETFILTER("No.",'<>%1','');
      IF SalesQuoteLine.FINDSET THEN
        REPEAT
          IF SalesQuoteLine."Outstanding Quantity" > 0 THEN BEGIN
            SalesLine := SalesQuoteLine;
            SalesLine.VALIDATE("Reserved Qty. (Base)",0);
            SalesLine."Outstanding Quantity" -= SalesLine."Qty. to Assemble to Order";
            SalesLine."Outstanding Qty. (Base)" -= SalesLine."Qty. to Asm. to Order (Base)";
            IF GUIALLOWED AND NOT HideValidationDialog THEN
              IF ItemCheckAvail.SalesLineCheck(SalesLine) THEN
                ItemCheckAvail.RaiseUpdateInterruptedError;
          END;
        UNTIL SalesQuoteLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferQuoteToSalesOrderLines@5(VAR QuoteSalesLine@1000 : Record 37;VAR QuoteSalesHeader@1001 : Record 36;VAR OrderSalesLine@1004 : Record 37;VAR OrderSalesHeader@1005 : Record 36;Customer@1002 : Record 18);
    VAR
      ATOLink@1003 : Record 904;
    BEGIN
      QuoteSalesLine.RESET;
      QuoteSalesLine.SETRANGE("Document Type",QuoteSalesHeader."Document Type");
      QuoteSalesLine.SETRANGE("Document No.",QuoteSalesHeader."No.");
      IF QuoteSalesLine.FINDSET THEN
        REPEAT
          OrderSalesLine := QuoteSalesLine;
          OrderSalesLine."Document Type" := OrderSalesHeader."Document Type";
          OrderSalesLine."Document No." := OrderSalesHeader."No.";
          OrderSalesLine."Shortcut Dimension 1 Code" := QuoteSalesLine."Shortcut Dimension 1 Code";
          OrderSalesLine."Shortcut Dimension 2 Code" := QuoteSalesLine."Shortcut Dimension 2 Code";
          OrderSalesLine."Dimension Set ID" := QuoteSalesLine."Dimension Set ID";
          IF Customer."Prepayment %" <> 0 THEN
            OrderSalesLine."Prepayment %" := Customer."Prepayment %";
          PrepmtMgt.SetSalesPrepaymentPct(OrderSalesLine,OrderSalesHeader."Posting Date");
          OrderSalesLine.VALIDATE("Prepayment %");
          OrderSalesLine.DefaultDeferralCode;

          OrderSalesLine.INSERT;
          IF ATOLink.AsmExistsForSalesLine(QuoteSalesLine) THEN
            ATOLink.MakeAsmOrderLinkedToSalesOrderLine(QuoteSalesLine,OrderSalesLine);
          ReserveSalesLine.TransferSaleLineToSalesLine(
            QuoteSalesLine,OrderSalesLine,QuoteSalesLine."Outstanding Qty. (Base)");
          ReserveSalesLine.VerifyQuantity(OrderSalesLine,QuoteSalesLine);

          IF OrderSalesLine.Reserve = OrderSalesLine.Reserve::Always THEN
            OrderSalesLine.AutoReserve;

        UNTIL QuoteSalesLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

