OBJECT Table 9062341 Planning Board Table Relation
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Planning Board Code");
               Rec.TESTFIELD("Planning Board Table Type");
               CheckModifyPermission();
               IF (Rec.ID = 0) THEN
                 Rec.VALIDATE(ID, NewId());
               UpdateFromPlanningBoardTable();
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               CheckModifyPermission();
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               CheckModifyPermission();
               CriteriaManagement.DeleteCriteria(Rec."Relation Definition ID");
             END;

    OnRename=BEGIN
               CheckModifyPermission();
             END;

    CaptionML=[ENU=Planning Board Table Relation;
               ENG=Planning Board Table Relation];
  }
  FIELDS
  {
    { 1   ;   ;Planning Board Code ;Code20        ;TableRelation="Planning Board Header";
                                                   CaptionML=[ENU=Planning Board Code;
                                                              ENG=Planning Board Code] }
    { 2   ;   ;Planning Board Table Type;Option   ;CaptionML=[ENU=Planning Board Table Type;
                                                              ENG=Planning Board Table Type];
                                                   OptionCaptionML=[ENU=" ,Resource,Entry";
                                                                    ENG=" ,Resource,Entry"];
                                                   OptionString=[ ,Resource,Entry] }
    { 3   ;   ;ID                  ;Integer       ;CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 10  ;   ;Table ID            ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Table ID" <> xRec."Table ID") THEN
                                                                BEGIN
                                                                END;
                                                                Rec.CALCFIELDS("Table Caption");
                                                              END;

                                                   CaptionML=[ENU=Table ID;
                                                              ENG=Table ID] }
    { 11  ;   ;Table Caption       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Table),
                                                                                                                Object ID=FIELD(Table ID)));
                                                   CaptionML=[ENU=Table Caption;
                                                              ENG=Table Caption];
                                                   Editable=No }
    { 20  ;   ;Related Table ID    ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=VAR
                                                                lRelatedTableCaption@1000000000 : Text;
                                                              BEGIN
                                                                IF (RelatedTableIdValidation) THEN
                                                                  EXIT;
                                                                RelatedTableIdValidation := TRUE;
                                                                IF (Rec."Table ID" <> xRec."Table ID") THEN
                                                                BEGIN
                                                                  IF (Rec."Relation Definition ID" <> 0) THEN
                                                                  BEGIN
                                                                    CriteriaManagement.DeleteCriteria(Rec."Relation Definition ID");
                                                                    Rec."Relation Definition ID" := 0;
                                                                  END;
                                                                  IF ((Rec."Related Table ID" <> 0) AND (xRec."Related Table ID" <> 0)) THEN
                                                                  BEGIN
                                                                    lRelatedTableCaption := ObjectFieldToolkit.GetTableName(xRec."Related Table ID");
                                                                    IF (lRelatedTableCaption = Rec.Name) THEN
                                                                    BEGIN
                                                                      lRelatedTableCaption := ObjectFieldToolkit.GetTableName(Rec."Related Table ID");
                                                                      Rec.VALIDATE(Name, lRelatedTableCaption);
                                                                    END;
                                                                  END;
                                                                  UpdateRelations();
                                                                END;
                                                                Rec.CALCFIELDS("Table Caption");
                                                                RelatedTableIdValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Related Table ID;
                                                              ENG=Related Table ID] }
    { 21  ;   ;Related Table Caption;Text50       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Table),
                                                                                                                Object ID=FIELD(Related Table ID)));
                                                   CaptionML=[ENU=Related Table Caption;
                                                              ENG=Related Table Caption];
                                                   Editable=No }
    { 30  ;   ;Relation Definition ID;Integer     ;TableRelation=Criteria;
                                                   CaptionML=[ENU=Relation Definition ID;
                                                              ENG=Relation Definition ID] }
    { 31  ;   ;Relation Definition ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Criteria.Description WHERE (ID=FIELD(Relation Definition ID)));
                                                   CaptionML=[ENU=Relation Definition;
                                                              ENG=Relation Definition];
                                                   Editable=No }
    { 40  ;   ;Name                ;Text50        ;OnValidate=VAR
                                                                lRelatedTableId@1000000000 : Integer;
                                                              BEGIN
                                                                IF (NameValidation) THEN
                                                                  EXIT;
                                                                NameValidation := TRUE;
                                                                IF (Rec.Name <> xRec.Name) THEN
                                                                  IF (Rec."Related Table ID" = 0) THEN
                                                                    IF (ObjectFieldToolkit.TryToValidateTableName(lRelatedTableId, Rec.Name, FALSE)) THEN
                                                                      Rec.VALIDATE("Related Table ID", lRelatedTableId);
                                                                NameValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Planning Board Code,Planning Board Table Type,ID;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PlanningBoardHeader@1000000006 : Record 9062337;
      PlanningBoardTable@1000000003 : Record 9062338;
      PlanningBoardTableField@1000000004 : Record 9062340;
      CriteriaManagement@9062231 : Codeunit 9062462;
      ObjectFieldToolkit@1000000000 : Codeunit 9062343;
      TnpToolkit@9062230 : Codeunit 9062230;
      RelatedTableIdValidation@1000000002 : Boolean;
      NameValidation@1000000001 : Boolean;
      RecordReference@1000000005 : RecordRef;

    LOCAL PROCEDURE "--- General ---"@1000000008();
    BEGIN
    END;

    PROCEDURE InitialiseNewRecord@1000000001();
    BEGIN
      //DOC NA2016.12 - Initialising new record

      UpdateFromPlanningBoardTable();
    END;

    PROCEDURE NewId@1000000000() : Integer;
    VAR
      lPlanningBoardTableRelation@1000000000 : Record 9062341;
    BEGIN
      //DOC NA2016.12 - Returning new ID
      //  <- The ID

      lPlanningBoardTableRelation.RESET();
      lPlanningBoardTableRelation.SETRANGE("Planning Board Code", Rec."Planning Board Code");
      lPlanningBoardTableRelation.SETRANGE("Planning Board Table Type", Rec."Planning Board Table Type");
      IF (lPlanningBoardTableRelation.FINDLAST()) THEN
        EXIT(lPlanningBoardTableRelation.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE UpdateFromPlanningBoardTable@9062230();
    BEGIN
      //DOC NA2016.12 - Update record from planning board tables

      IF ( NOT (PlanningBoardTable.GET(Rec."Planning Board Code", Rec."Planning Board Table Type"))) THEN
        CLEAR(PlanningBoardTable);
      Rec.VALIDATE("Table ID", PlanningBoardTable."Table ID");
    END;

    LOCAL PROCEDURE UpdateRelations@1000000002();
    VAR
      lModify@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.12 - Updating relations

      IF (PlanningBoardTable.GET(Rec."Planning Board Code", Rec."Planning Board Table Type")) THEN
      BEGIN
        lModify := FALSE;
        IF (PlanningBoardTable."Foreground Style Relation ID" = Rec.ID) THEN
        BEGIN
          PlanningBoardTable.VALIDATE("Foreground Style Table ID", Rec."Related Table ID");
          lModify := TRUE;
        END;
        IF (PlanningBoardTable."Background Style Relation ID" = Rec.ID) THEN
        BEGIN
          PlanningBoardTable.VALIDATE("Background Style Table ID", Rec."Related Table ID");
          lModify := TRUE;
        END;
        IF (PlanningBoardTable."Border Style Relation ID" = Rec.ID) THEN
        BEGIN
          PlanningBoardTable.VALIDATE("Border Style Table ID", Rec."Related Table ID");
          lModify := TRUE;
        END;
        IF (PlanningBoardTable."Picture Relation ID" = Rec.ID) THEN
        BEGIN
          PlanningBoardTable.VALIDATE("Picture Table ID", Rec."Related Table ID");
          lModify := TRUE;
        END;
        IF (lModify) THEN
          PlanningBoardTable.MODIFY(TRUE);

        PlanningBoardTableField.RESET();
        PlanningBoardTableField.SETRANGE("Planning Board Code", Rec."Planning Board Code");
        PlanningBoardTableField.SETRANGE("Planning Board Table Type", Rec."Planning Board Table Type");
        PlanningBoardTableField.SETRANGE("Relation ID", Rec.ID);
        IF (PlanningBoardTableField.FINDSET(TRUE)) THEN
        REPEAT
          PlanningBoardTableField.VALIDATE("Table ID", Rec."Related Table ID");
          PlanningBoardTableField.MODIFY(TRUE);
        UNTIL (PlanningBoardTableField.NEXT() = 0);
      END;
    END;

    PROCEDURE ViewEditTableRelation@9062252(pEditable@1000000000 : Boolean);
    VAR
      eTableEmpty@9062229 : TextConst 'ENU=You must choose table first.;ENG=You must choose table first.';
      eRelatedTableEmpty@9062230 : TextConst 'ENU=You must choose related table first.;ENG=You must choose related table first.';
    BEGIN
      //DOC NA2016.12 - Viewing / editing table relation
      //  -> pEditable: Editable flag

      IF ( NOT (pEditable)) THEN
        EXIT;

      IF (Rec."Table ID" = 0) THEN
        ERROR(eTableEmpty);
      IF (Rec."Related Table ID" = 0) THEN
        ERROR(eRelatedTableEmpty);

      CriteriaManagement.EditCriteriaAttachedAdvanced(Rec."Relation Definition ID", Rec."Related Table ID", Rec."Table ID",
        DATABASE::"Planning Board Table Relation", Rec.GETPOSITION(FALSE), Rec.FIELDNO("Relation Definition ID"), FALSE);
      Rec.CALCFIELDS("Relation Definition");
    END;

    LOCAL PROCEDURE CheckModifyPermission@1000000039();
    VAR
      lEnhancedPermissionsMgt@1000000000 : Codeunit 9062277;
    BEGIN
      //DOC NA2016.15 - Checking modify permission for the planning board

      IF ( NOT (PlanningBoardHeader.GET(Rec."Planning Board Code"))) THEN
        EXIT;
      lEnhancedPermissionsMgt.CheckPlanningBoardModifyPermission(PlanningBoardHeader, USERID());
    END;

    LOCAL PROCEDURE "--- Record Reference ---"@1000000007();
    BEGIN
    END;

    PROCEDURE OpenRecordReference@1000000004();
    BEGIN
      //DOC NA2016.12 - Opening record reference

      Rec.TESTFIELD("Related Table ID");
      RecordReference.OPEN(Rec."Related Table ID");
    END;

    PROCEDURE GetRecordReference@1000000003(VAR pRecordReference@1000000000 : RecordRef);
    BEGIN
      //DOC NA2016.12 - Returning record reference
      //  <> pRecordReference: Target record reference

      pRecordReference := RecordReference;
    END;

    PROCEDURE GetFieldReference@1000000006(pFieldId@1000000001 : Integer;VAR pFieldReference@1000000000 : FieldRef);
    BEGIN
      //DOC NA2016.12 - Returning field reference
      //  -> pFieldId: Field ID
      //  <> pFieldReference: Target field reference

      pFieldReference := RecordReference.FIELD(pFieldId);
    END;

    PROCEDURE ResetRecordReference@1000000012();
    BEGIN
      //DOC NA2016.12 - Resetting record reference

      RecordReference.RESET();
    END;

    PROCEDURE SetRecordReferenceFilter@1000000009(pFieldId@1000000000 : Integer;pFieldValue@1000000001 : Variant);
    VAR
      lFieldReference@1000000002 : FieldRef;
    BEGIN
      //DOC NA2016.12 - Setting record reference range
      //  -> pFieldId: Field ID
      //  -> pFieldValue: Field value

      lFieldReference := RecordReference.FIELD(pFieldId);
      lFieldReference.SETFILTER(pFieldValue);
    END;

    PROCEDURE FindRecordReference@1000000011() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.12 -
      //  <- Result

      lResult := RecordReference.FINDFIRST();
      IF ( NOT (lResult)) THEN
        RecordReference.INIT();
      EXIT(lResult);
    END;

    PROCEDURE CloseRecordReference@1000000005();
    BEGIN
      //DOC NA2016.12 - Closing record reference

      RecordReference.CLOSE();
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 30/11/2015 - Created
      //DOC NA2016.15 JH 05/05/2016 - Enhanced permissions
    }
    END.
  }
}

