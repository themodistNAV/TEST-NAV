OBJECT Codeunit 1510 Notification Management
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 458=i,
                TableData 1510=r,
                TableData 1511=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SoftwareNameTxt@1000 : TextConst '@@@={Locked};ENU=Microsoft Dynamics NAV;ENG=Microsoft Dynamics NAV';
      TitleWorkflowNotificationEngineTxt@1001 : TextConst 'ENU=Workflow Notification Engine;ENG=Workflow Notification Engine';
      TitleApprovalSystemTxt@1010 : TextConst 'ENU=Microsoft Dynamics NAV Approval System;ENG=Microsoft Dynamics NAV Approval System';
      RTCHyperlinkTxt@1003 : TextConst 'ENU=To view the record in the Windows client, choose this link;ENG=To view the record in the Windows client, choose this link';
      WebHyperlinkTxt@1004 : TextConst 'ENU=Web client;ENG=Web client';
      PurchDocTypeTxt@1045 : TextConst '@@@="%1 = Document No.";ENU=Purchase %1;ENG=Purchase %1';
      SalesDocTypeTxt@1021 : TextConst '@@@="%1 = Document No.";ENU=Sales %1;ENG=Sales %1';
      CustomerTypeTxt@1012 : TextConst '@@@="%1 = Customer No.";ENU=Customer %1;ENG=Customer %1';
      ActionApproveTxt@1044 : TextConst 'ENU=requires your approval.;ENG=requires your approval.';
      ActionApprovedTxt@1013 : TextConst 'ENU=has been approved.;ENG=has been approved.';
      ActionCreateTxt@1005 : TextConst 'ENU=has been created.;ENG=has been created.';
      ActionCancelTxt@1007 : TextConst 'ENU=has been canceled.;ENG=has been cancelled.';
      ActionRejectTxt@1006 : TextConst 'ENU=has been rejected.;ENG=has been rejected.';
      ActionOverdueTxt@1008 : TextConst '@@@="%1 = date when document was due.";ENU=has a pending approval with due date %1.;ENG=has a pending approval with due date %1.';
      ActionNoTxt@1011 : TextConst '@@@="%1 = Document identifier such as ''Sales Invoice 1002''";ENU=No action is required for %1.;ENG=No action is required for %1.';
      CustomUrlAndAnchorTxt@1020 : TextConst '@@@="Translate only ""Other link"". The rest needs to stay the same. Eg. (<a href=""http://dynamics.sharepoint.com/"">Other link</a>)";ENU="(<a href=""%1"">other client</a>)";ENG="(<a href=""%1"">other client</a>)"';
      AdditionalHtmlLineTxt@1009 : TextConst '@@@={Locked};ENU="<p><span style=""font-size: 11.0pt; font-family: Calibri"">%1</span></p>";ENG="<p><span style=""font-size: 11.0pt; font-family: Calibri"">%1</span></p>"';
      CommentsHdrTxt@1002 : TextConst 'ENU=Comments:;ENG=Comments:';
      PageManagement@1022 : Codeunit 700;
      LinkNotAvailableTxt@1017 : TextConst 'ENU=There is no link for this notification entry, because the related record no longer exists.;ENG=There is no link for this notification entry, because the related record no longer exists.';
      ClientLinksTok@1025 : TextConst '@@@={Locked};ENU="<a href=""%1"">%2</a> (<a href=""%3"">%4</a>)";ENG="<a href=""%1"">%2</a> (<a href=""%3"">%4</a>)"';
      OverdueEntriesMsg@1047 : TextConst 'ENU=Overdue approval entries have been created.;ENG=Overdue approval entries have been created.';

    PROCEDURE CreateOverdueNotifications@14(WorkflowStepArgument@1002 : Record 1523);
    VAR
      UserSetup@1006 : Record 91;
      ApprovalEntry@1000 : Record 454;
      NotificationEntry@1003 : Record 1511;
    BEGIN
      IF UserSetup.FINDSET THEN
        REPEAT
          ApprovalEntry.RESET;
          ApprovalEntry.SETRANGE("Approver ID",UserSetup."User ID");
          ApprovalEntry.SETRANGE(Status,ApprovalEntry.Status::Open);
          ApprovalEntry.SETFILTER("Due Date",'<=%1',TODAY);
          IF ApprovalEntry.FINDSET THEN
            REPEAT
              NotificationEntry.CreateNew(NotificationEntry.Type::Overdue,
                UserSetup."User ID",ApprovalEntry,WorkflowStepArgument."Link Target Page",
                WorkflowStepArgument."Custom Link");
              InsertOverdueEntry(ApprovalEntry);
            UNTIL ApprovalEntry.NEXT = 0;
        UNTIL UserSetup.NEXT = 0;

      MESSAGE(OverdueEntriesMsg);
    END;

    PROCEDURE PopulateNotificationTemplateWithRecIndependentInfo@19(VAR NotificationBody@1002 : Text;NotificationEntry@1007 : Record 1511);
    VAR
      NotificationSetup@1004 : Record 1512;
      DataTypeManagement@1003 : Codeunit 701;
      RecRef@1001 : RecordRef;
      NotificationBodyString@1005 : DotNet "'mscorlib'.System.String";
      PageID@1008 : Integer;
    BEGIN
      NotificationSetup.INIT;
      NotificationSetup.SETRANGE("User ID",NotificationEntry."Recipient User ID");
      DataTypeManagement.GetRecordRef(NotificationSetup,RecRef);
      PageID := PageManagement.GetPageID(RecRef);

      NotificationBodyString := NotificationBodyString.Copy(NotificationBody);

      NotificationBodyString := NotificationBodyString.Replace('%SoftwareName%',SoftwareNameTxt);
      CASE NotificationEntry.Type OF
        NotificationEntry.Type::Approval,
        NotificationEntry.Type::Overdue:
          NotificationBodyString := NotificationBodyString.Replace('%Title%',TitleApprovalSystemTxt);
        ELSE
          NotificationBodyString := NotificationBodyString.Replace('%Title%',TitleWorkflowNotificationEngineTxt);
      END;
      NotificationBodyString := NotificationBodyString.Replace(
          '%RTCChangeSettingsHyperLink%',GETURL(CLIENTTYPE::Windows,COMPANYNAME,OBJECTTYPE::Page,PageID,RecRef,TRUE));
      NotificationBodyString := NotificationBodyString.Replace(
          '%WebChangeSettingsHyperLink%',GETURL(CLIENTTYPE::Web,COMPANYNAME,OBJECTTYPE::Page,PageID,RecRef,TRUE));

      NotificationBody := NotificationBodyString.ToString;
    END;

    PROCEDURE PopulateNotificationTemplateWithRecordInfo@12(VAR NotificationBody@1002 : Text;NotificationEntry@1001 : Record 1511);
    VAR
      DataTypeManagement@1004 : Codeunit 701;
      RecRef@1003 : RecordRef;
      NotificationBodyString@1005 : DotNet "'mscorlib'.System.String";
      ClientLinks@1006 : Text;
    BEGIN
      DataTypeManagement.GetRecordRef(NotificationEntry."Triggered By Record",RecRef);

      NotificationBodyString := NotificationBodyString.Copy(NotificationBody);

      IF RecRef.FIND THEN BEGIN
        CASE RecRef.NUMBER OF
          DATABASE::"Approval Entry":
            ReplaceTokensWithApprovalInfo(NotificationBodyString,RecRef,NotificationEntry.Type);
          ELSE
            NotificationBodyString := NotificationBodyString.Replace('%Action%',ActionCreateTxt);
        END;
        ReplaceTokensWithRecInfo(NotificationBodyString,RecRef);
        NotificationBodyString :=
          NotificationBodyString.Replace('%RTCUrl%',PageManagement.GetRTCUrl(RecRef,NotificationEntry."Link Target Page"));
        NotificationBodyString := NotificationBodyString.Replace('%RTCHyperlink%',RTCHyperlinkTxt);
        NotificationBodyString :=
          NotificationBodyString.Replace('%WebUrl%',PageManagement.GetWebUrl(RecRef,NotificationEntry."Link Target Page"));
        NotificationBodyString := NotificationBodyString.Replace('%WebHyperlink%',WebHyperlinkTxt);
        NotificationBodyString := NotificationBodyString.Replace('%CustomUrl%',GetCustomUrlAndAnchor(NotificationEntry."Custom Link"));
      END ELSE BEGIN
        ReplaceTokensWithBlanks(NotificationBodyString,FORMAT(NotificationEntry."Triggered By Record"));
        ClientLinks := STRSUBSTNO(ClientLinksTok,'%RTCUrl%','%RTCHyperlink%','%WebUrl%','%WebHyperlink%');
        NotificationBodyString := NotificationBodyString.Replace(ClientLinks,LinkNotAvailableTxt);
        NotificationBodyString := NotificationBodyString.Replace('%CustomUrl%','');
      END;

      NotificationBody := NotificationBodyString.ToString;
    END;

    LOCAL PROCEDURE ReplaceTokensWithRecInfo@38(VAR NotificationBody@1001 : DotNet "'mscorlib'.System.String";RecRef@1000 : RecordRef);
    BEGIN
      // Special Mappings
      CASE RecRef.NUMBER OF
        DATABASE::"Incoming Document":
          BEGIN
            NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(RecRef.CAPTION));
            SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'Entry No.');
          END;
        DATABASE::Customer:
          BEGIN
            NotificationBody := NotificationBody.Replace('%DocumentType%',FORMAT(RecRef.CAPTION));
            SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'No.');
            NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%',FORMAT(RecRef.CAPTION));
            SetTokenToValueOfField(NotificationBody,'%CustomerVendorNo%',RecRef,'No.');
            SetTokenToValueOfField(NotificationBody,'%CustomerVendorName%',RecRef,'Name');
            NotificationBody := NotificationBody.Replace('%CurrencyCode%','');
          END;
        DATABASE::"Approval Entry":
          BEGIN
            NotificationBody := NotificationBody.Replace('%DocumentType%','');
            SetTokenToValueOfField(NotificationBody,'%DocumentNo%',RecRef,'Record ID to Approve');
          END;
        ELSE BEGIN
          NotificationBody := NotificationBody.Replace('%DocumentType%','');
          NotificationBody := NotificationBody.Replace('%DocumentNo%',FORMAT(RecRef.RECORDID));
        END;
      END;

      // Generic Mappings
      SetTokenToCaptionOfField(NotificationBody,'%AmountCaption%',RecRef,'Amount');
      SetTokenToValueOfField(NotificationBody,'%Amount%',RecRef,'Amount');

      SetTokenToValueOfField(NotificationBody,'%CurrencyCode%',RecRef,'Currency Code');

      SetTokenToCaptionOfField(NotificationBody,'%AmountLCYCaption%',RecRef,'Amount (LCY)');
      SetTokenToValueOfField(NotificationBody,'%AmountLCY%',RecRef,'Amount (LCY)');

      SetTokenToCaptionOfField(NotificationBody,'%DueDateCaption%',RecRef,'Due Date');
      SetTokenToValueOfField(NotificationBody,'%DueDate%',RecRef,'Due Date');

      NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%','');
      NotificationBody := NotificationBody.Replace('%CustomerVendorNo%','');
      NotificationBody := NotificationBody.Replace('%CustomerVendorName%','');
    END;

    LOCAL PROCEDURE ReplaceTokensWithApprovalInfo@15(VAR NotificationBody@1000 : DotNet "'mscorlib'.System.String";RecRef@1001 : RecordRef;NotificationType@1005 : 'New Record,Approval,Overdue');
    VAR
      Customer@1007 : Record 18;
      Vendor@1008 : Record 23;
      ApprovalEntry@1004 : Record 454;
      CustVendorNo@1003 : Code[20];
      CustVendorName@1002 : Text[50];
      HtmlCommentLines@1006 : Text;
    BEGIN
      RecRef.SETTABLE(ApprovalEntry);

      HtmlCommentLines := GetApprovalCommentLines(ApprovalEntry);

      CASE NotificationType OF
        NotificationType::Approval:
          CASE ApprovalEntry.Status OF
            ApprovalEntry.Status::Open:
              NotificationBody := NotificationBody.Replace('%Action%',ActionApproveTxt);
            ApprovalEntry.Status::Canceled:
              NotificationBody := NotificationBody.Replace('%Action%',ActionCancelTxt);
            ApprovalEntry.Status::Rejected:
              NotificationBody := NotificationBody.Replace('%Action%',ActionRejectTxt);
            ApprovalEntry.Status::Created:
              NotificationBody := NotificationBody.Replace('%Action%',ActionCreateTxt);
            ApprovalEntry.Status::Approved:
              NotificationBody := NotificationBody.Replace('%Action%',ActionApprovedTxt);
          END;
        NotificationType::Overdue:
          NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionOverdueTxt,FORMAT(ApprovalEntry."Due Date",10)));
      END;

      CASE ApprovalEntry."Limit Type" OF
        ApprovalEntry."Limit Type"::"Request Limits":
          BEGIN
            NotificationBody := NotificationBody.Replace('%CreditLimitCaption%',FORMAT(ApprovalEntry.FIELDCAPTION("Amount (LCY)")));
            NotificationBody := NotificationBody.Replace('%CreditLimit%',FORMAT(ApprovalEntry."Amount (LCY)"));
          END;
        ApprovalEntry."Limit Type"::"Credit Limits":
          BEGIN
            NotificationBody :=
              NotificationBody.Replace('%CreditLimitCaption%',ApprovalEntry.FIELDCAPTION("Available Credit Limit (LCY)"));
            NotificationBody := NotificationBody.Replace('%CreditLimit%',FORMAT(ApprovalEntry."Available Credit Limit (LCY)"));
          END;
        ELSE BEGIN
          NotificationBody := NotificationBody.Replace('%CreditLimitCaption%',' ');
          NotificationBody := NotificationBody.Replace('%CreditLimit%',' ');
        END;
      END;

      ApprovalEntry.GetCustVendorDetails(CustVendorNo,CustVendorName);
      NotificationBody := NotificationBody.Replace('%CustomerVendorNo%',CustVendorNo);
      NotificationBody := NotificationBody.Replace('%CustomerVendorName%',CustVendorName);
      NotificationBody := NotificationBody.Replace('%Details%',ApprovalEntry.GetChangeRecordDetails);

      CASE ApprovalEntry."Table ID" OF
        DATABASE::"Purchase Header":
          BEGIN
            NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%',Vendor.TABLECAPTION);
            NotificationBody := NotificationBody.Replace('%DocumentType%',STRSUBSTNO(PurchDocTypeTxt,ApprovalEntry."Document Type"));
            NotificationBody := NotificationBody.Replace('%DocumentNo%',ApprovalEntry."Document No.");
          END;
        DATABASE::"Sales Header":
          BEGIN
            NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%',Customer.TABLECAPTION);
            NotificationBody := NotificationBody.Replace('%DocumentType%',STRSUBSTNO(SalesDocTypeTxt,ApprovalEntry."Document Type"));
            NotificationBody := NotificationBody.Replace('%DocumentNo%',ApprovalEntry."Document No.");
          END;
        DATABASE::Customer:
          BEGIN
            Customer.GET(ApprovalEntry."Record ID to Approve");
            NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%',Customer.TABLECAPTION);
            NotificationBody := NotificationBody.Replace('%DocumentNo%','');
            NotificationBody := NotificationBody.Replace('%DocumentType%',STRSUBSTNO(CustomerTypeTxt,Customer."No."));
            NotificationBody := NotificationBody.Replace('%CurrencyCode%','');
          END;
        DATABASE::"Gen. Journal Line":
          BEGIN
            NotificationBody := NotificationBody.Replace('%DocumentType%','');
            NotificationBody := NotificationBody.Replace('%DocumentNo%',FORMAT(ApprovalEntry."Record ID to Approve"));
          END;
        DATABASE::"Gen. Journal Batch":
          BEGIN
            NotificationBody := NotificationBody.Replace('%DocumentType%','');
            NotificationBody := NotificationBody.Replace('%DocumentNo%',FORMAT(ApprovalEntry."Record ID to Approve"));
          END;
      END;

      NotificationBody := NotificationBody.Replace('%ApprovalComments%',HtmlCommentLines);
    END;

    LOCAL PROCEDURE ReplaceTokensWithBlanks@3(VAR NotificationBody@1000 : DotNet "'mscorlib'.System.String";RecordIdentifier@1001 : Text);
    BEGIN
      NotificationBody := NotificationBody.Replace('%DocumentType%','');
      NotificationBody := NotificationBody.Replace('%DocumentNo%','');
      NotificationBody := NotificationBody.Replace('%Action%',STRSUBSTNO(ActionNoTxt,RecordIdentifier));
      NotificationBody := NotificationBody.Replace('%Details%','');

      NotificationBody := NotificationBody.Replace('%AmountCaption%','');
      NotificationBody := NotificationBody.Replace('%CurrencyCode%','');
      NotificationBody := NotificationBody.Replace('%Amount%','');

      NotificationBody := NotificationBody.Replace('%AmountLCY%','');
      NotificationBody := NotificationBody.Replace('%AmountLCYCaption%','');

      NotificationBody := NotificationBody.Replace('%CustomerVendorCaption%','');
      NotificationBody := NotificationBody.Replace('%CustomerVendorNo%','');
      NotificationBody := NotificationBody.Replace('%CustomerVendorName%','');

      NotificationBody := NotificationBody.Replace('%DueDateCaption%','');
      NotificationBody := NotificationBody.Replace('%DueDate%','');

      NotificationBody := NotificationBody.Replace('%CreditLimit%','');
      NotificationBody := NotificationBody.Replace('%CreditLimitCaption%','');
      NotificationBody := NotificationBody.Replace('%ApprovalComments%','');
    END;

    LOCAL PROCEDURE SetTokenToValueOfField@5(VAR NotificationBody@1004 : DotNet "'mscorlib'.System.String";Token@1000 : Text;RecRef@1002 : RecordRef;FieldName@1001 : Text);
    VAR
      Field@1005 : Record 2000000041;
      FieldRef@1003 : FieldRef;
      FieldValue@1006 : Text;
    BEGIN
      Field.SETRANGE(TableNo,RecRef.NUMBER);
      Field.SETRANGE(FieldName,FieldName);
      IF Field.FINDFIRST THEN BEGIN
        FieldRef := RecRef.FIELD(Field."No.");
        IF Field.Type = Field.Type::Decimal THEN
          FieldValue := FORMAT(FieldRef.VALUE,0,'<Precision,2:2><Standard Format,0>')
        ELSE
          FieldValue := FORMAT(FieldRef.VALUE);
      END;
      NotificationBody := NotificationBody.Replace(Token,FieldValue);
    END;

    LOCAL PROCEDURE SetTokenToCaptionOfField@31(VAR NotificationBody@1004 : DotNet "'mscorlib'.System.String";Token@1000 : Text;RecRef@1002 : RecordRef;FieldName@1001 : Text);
    VAR
      Field@1005 : Record 2000000041;
      FieldRef@1003 : FieldRef;
      FieldValue@1006 : Text;
    BEGIN
      Field.SETRANGE(TableNo,RecRef.NUMBER);
      Field.SETRANGE(FieldName,FieldName);
      IF Field.FINDFIRST THEN BEGIN
        FieldRef := RecRef.FIELD(Field."No.");
        FieldValue := FORMAT(FieldRef.CAPTION);
      END;
      NotificationBody := NotificationBody.Replace(Token,FieldValue);
    END;

    LOCAL PROCEDURE GetCustomUrlAndAnchor@26(CustomURL@1000 : Text) : Text;
    BEGIN
      IF CustomURL <> '' THEN
        EXIT(STRSUBSTNO(CustomUrlAndAnchorTxt,CustomURL));
      EXIT('');
    END;

    LOCAL PROCEDURE GetApprovalCommentLines@8(ApprovalEntry@1000 : Record 454) HTMLApprovalComments : Text;
    VAR
      ApprovalCommentLine@1001 : Record 455;
    BEGIN
      ApprovalEntry.CALCFIELDS(Comment);
      IF NOT ApprovalEntry.Comment THEN
        EXIT;

      ApprovalCommentLine.SETRANGE("Table ID",ApprovalEntry."Table ID");
      ApprovalCommentLine.SETRANGE("Record ID to Approve",ApprovalEntry."Record ID to Approve");
      IF ApprovalCommentLine.FINDSET THEN BEGIN
        HTMLApprovalComments := STRSUBSTNO(AdditionalHtmlLineTxt,CommentsHdrTxt);
        REPEAT
          HTMLApprovalComments += STRSUBSTNO(AdditionalHtmlLineTxt,ApprovalCommentLine.Comment);
        UNTIL ApprovalCommentLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InsertOverdueEntry@13(ApprovalEntry@1000 : Record 454);
    VAR
      User@1002 : Record 2000000120;
      OverdueApprovalEntry@1001 : Record 458;
      UserSetup@1003 : Record 91;
    BEGIN
      WITH OverdueApprovalEntry DO BEGIN
        INIT;
        "Approver ID" := ApprovalEntry."Approver ID";
        User.SETRANGE("User Name",ApprovalEntry."Approver ID");
        IF User.FINDFIRST THEN BEGIN
          "Sent to Name" := COPYSTR(User."Full Name",1,MAXSTRLEN("Sent to Name"));
          UserSetup.GET(User."User Name");
        END;

        "Table ID" := ApprovalEntry."Table ID";
        "Document Type" := ApprovalEntry."Document Type";
        "Document No." := ApprovalEntry."Document No.";
        "Sent to ID" := ApprovalEntry."Approver ID";
        "Sent Date" := TODAY;
        "Sent Time" := TIME;
        "E-Mail" := UserSetup."E-Mail";
        "Sequence No." := ApprovalEntry."Sequence No.";
        "Due Date" := ApprovalEntry."Due Date";
        "Approval Code" := ApprovalEntry."Approval Code";
        "Approval Type" := ApprovalEntry."Approval Type";
        "Limit Type" := ApprovalEntry."Limit Type";
        "Record ID to Approve" := ApprovalEntry."Record ID to Approve";
        INSERT;
      END;
    END;

    PROCEDURE CreateDefaultNotificationTemplate@2(VAR NotificationTemplate@1000 : Record 1510;NotificationType@1001 : Option);
    BEGIN
      NotificationTemplate.SETRANGE(Type,NotificationType);
      NotificationTemplate.SETRANGE(Default,TRUE);
      IF NotificationTemplate.FINDFIRST THEN
        EXIT;

      NotificationTemplate.CreateNewDefault(NotificationType);
    END;

    PROCEDURE CreateDefaultNotificationSetup@1(NotificationType@1000 : Option);
    VAR
      NotificationSetup@1001 : Record 1512;
      NotificationTemplate@1002 : Record 1510;
    BEGIN
      IF DefaultNotificationEntryExists(NotificationType) THEN
        EXIT;

      CreateDefaultNotificationTemplate(NotificationTemplate,NotificationType);

      NotificationSetup.INIT;
      NotificationSetup."User ID" := '';
      NotificationSetup.VALIDATE("Notification Type",NotificationType);
      NotificationSetup.VALIDATE("Notification Template Code",NotificationTemplate.Code);
      NotificationSetup.INSERT(TRUE);
    END;

    LOCAL PROCEDURE DefaultNotificationEntryExists@4(NotificationType@1000 : Option) : Boolean;
    VAR
      NotificationSetup@1001 : Record 1512;
    BEGIN
      NotificationSetup.SETRANGE("User ID",'');
      NotificationSetup.SETRANGE("Notification Type",NotificationType);
      EXIT(NOT NotificationSetup.ISEMPTY)
    END;

    BEGIN
    END.
  }
}

