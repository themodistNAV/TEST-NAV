OBJECT Page 9063192 POS Sales Order
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NH2016.15;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Sales Order;
               ENG=Sales Order];
    SourceTable=Table36;
    SourceTableView=WHERE(Document Type=FILTER(Order));
    PageType=Document;
    RefreshOnActivate=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Approve,Release,Posting,Prepare,Invoice,Request Approval;
                                ENG=New,Process,Report,Approve,Release,Posting,Prepare,Invoice,Request Approval];
    OnInit=BEGIN
             SetExtDocNoMandatoryCondition;
           END;

    OnOpenPage=VAR
                 CRMIntegrationManagement@1000 : Codeunit 5330;
               BEGIN
                 IF UserMgt.GetSalesFilter <> '' THEN BEGIN
                   FILTERGROUP(2);
                   SETRANGE("Responsibility Center",UserMgt.GetSalesFilter);
                   FILTERGROUP(0);
                 END;

                 SETRANGE("Date Filter",0D,WORKDATE - 1);

                 SetDocNoVisible;

                 CRMIntegrationEnabled := CRMIntegrationManagement.IsCRMIntegrationEnabled;
               END;

    OnClosePage=VAR
                  POSMgt@1000000000 : Codeunit 9062648;
                BEGIN

                  POSMgt.UpdatecCustOnPosHeader(Rec);
                END;

    OnAfterGetRecord=BEGIN

                       SetCustomerDets;

                       SetControlVisibility;
                     END;

    OnNewRecord=BEGIN
                  "Responsibility Center" := UserMgt.GetSalesFilter;
                END;

    OnInsertRecord=BEGIN
                     CheckCreditMaxBeforeInsert;
                   END;

    OnDeleteRecord=BEGIN
                     CurrPage.SAVERECORD;
                     EXIT(ConfirmDeletion);
                   END;

    OnAfterGetCurrRecord=VAR
                           CRMCouplingManagement@1000 : Codeunit 5331;
                         BEGIN
                           DynamicEditable := CurrPage.EDITABLE;
                           CRMIsCoupledToRecord := CRMIntegrationEnabled AND CRMCouplingManagement.IsRecordCoupledToCRM(RECORDID);
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 59      ;1   ;ActionGroup;
                      CaptionML=[ENU=O&rder;
                                 ENG=O&rder];
                      Image=Order }
      { 61      ;2   ;Action    ;
                      Name=Statistics;
                      ShortCutKey=F7;
                      CaptionML=[ENU=Statistics;
                                 ENG=Statistics];
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 OpenSalesOrderStatistics;
                                 SalesCalcDiscountByType.ResetRecalculateInvoiceDisc(Rec);
                               END;
                                }
      { 62      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[ENU=Card;
                                 ENG=Card];
                      RunObject=Page 21;
                      RunPageLink=No.=FIELD(Sell-to Customer No.);
                      Image=EditLines }
      { 63      ;2   ;Action    ;
                      CaptionML=[ENU=Co&mments;
                                 ENG=Co&mments];
                      RunObject=Page 67;
                      RunPageLink=Document Type=FIELD(Document Type),
                                  No.=FIELD(No.),
                                  Document Line No.=CONST(0);
                      Image=ViewComments }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 66      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 68      ;2   ;Action    ;
                      Name=CopyDocument;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Copy Document;
                                 ENG=Copy Document];
                      Promoted=Yes;
                      Image=CopyDocument;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CopySalesDoc.SetSalesHeader(Rec);
                                 CopySalesDoc.RUNMODAL;
                                 CLEAR(CopySalesDoc);
                               END;
                                }
      { 31      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Order Confirmation;
                                 ENG=&Order Confirmation];
                      Image=Email }
      { 33      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Email Confirmation;
                                 ENG=Email Confirmation];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Email;
                      PromotedCategory=New;
                      OnAction=BEGIN
                                 DocPrint.EmailSalesHeader(Rec);
                               END;
                                }
      { 1000000010;2 ;Action    ;
                      CaptionML=[ENU=View Customer;
                                 ENG=View Customer];
                      RunObject=Page 21;
                      RunPageLink=No.=FIELD(Sell-to Customer No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Customer;
                      PromotedCategory=New }
      { 1000000011;2 ;Action    ;
                      CaptionML=[ENU=Detailed Order;
                                 ENG=Detailed Order];
                      RunObject=Page 42;
                      RunPageLink=Document Type=FIELD(Document Type),
                                  No.=FIELD(No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Order;
                      PromotedCategory=New }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1000000000;1;Group  ;
                CaptionML=[ENU=Order;
                           ENG=Order];
                GroupType=Group }

    { 1000000001;2;Field  ;
                CaptionML=[ENU=E-Mail Address;
                           ENG=E-Mail Address];
                SourceExpr=CustEmail;
                OnValidate=BEGIN
                             IF CustEmail<>'' THEN FindCust;
                           END;
                            }

    { 1000000007;2;Field  ;
                CaptionML=[ENU=Post Code;
                           ENG=Post Code];
                SourceExpr=CustPostCode;
                OnValidate=VAR
                             AddCount@1000000000 : Integer;
                             NewAddress@1000000001 : TEMPORARY Record 5051;
                           BEGIN
                             PostcodeMgt.SearchByPostcode(CustPostCode,NewAddress);

                             //MESSAGE(FORMAT(NewAddress));

                             //Fill out the fields
                             CustAdd1:=NewAddress.Address;
                             CustAdd2:=NewAddress."Address 2";
                             CustCity:=NewAddress.City;
                             CustCountry:=NewAddress."Country/Region Code";
                             CustCounty:=NewAddress.County;
                             CustPostCode:=NewAddress."Post Code";

                             IF (STRLEN(CustName) > 4) AND (STRLEN(CustPostCode) >3) THEN FindCust;

                             IF PageMode=PageMode::AddCust THEN BEGIN
                               //PostcodeMgt.GetAddressByID(
                               END;

                             //New we need to create a new customer if we cant find them
                           END;
                            }

    { 1000000002;2;Field  ;
                CaptionML=[ENU=Name;
                           ENG=Name];
                SourceExpr=CustName;
                OnValidate=BEGIN
                             CustName:=String.ToSentenceCase(CustName);

                             IF (STRLEN(CustName) > 4) AND (STRLEN(CustPostCode) >3) THEN FindCust;
                           END;
                            }

    { 1000000003;2;Field  ;
                CaptionML=[ENU=Address;
                           ENG=Address];
                SourceExpr=CustAdd1 }

    { 1000000004;2;Field  ;
                CaptionML=[ENU=Address 2;
                           ENG=Address 2];
                SourceExpr=CustAdd2 }

    { 1000000005;2;Field  ;
                CaptionML=[ENU=City;
                           ENG=City];
                SourceExpr=CustCity }

    { 1000000006;2;Field  ;
                CaptionML=[ENU=County;
                           ENG=County];
                SourceExpr=CustCounty }

    { 1000000008;2;Field  ;
                CaptionML=[ENU=Country;
                           ENG=Country];
                SourceExpr=CustCountry }

    { 1000000009;2;Field  ;
                CaptionML=[ENU=Phone No;
                           ENG=Phone No];
                SourceExpr=CustPhone }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 58  ;1   ;Part      ;
                Name=SalesLines;
                CaptionML=[ENU=SalesLines;
                           ENG=SalesLines];
                SubPageLink=Document No.=FIELD(No.);
                PagePartID=Page9063193;
                Editable=DynamicEditable;
                UpdatePropagation=Both }

    { 1905885101;1;Group  ;
                CaptionML=[ENU=Invoicing;
                           ENG=Invoicing];
                Visible=False }

    { 45  ;2   ;Field     ;
                SourceExpr="Document Date";
                QuickEntry=FALSE }

    { 135 ;2   ;Field     ;
                SourceExpr="Requested Delivery Date" }

    { 137 ;2   ;Field     ;
                SourceExpr="Promised Delivery Date";
                Importance=Additional }

    { 10  ;2   ;Field     ;
                SourceExpr="Salesperson Code";
                OnValidate=BEGIN
                             SalespersonCodeOnAfterValidate;
                           END;

                QuickEntry=FALSE }

    { 14  ;2   ;Field     ;
                SourceExpr="Order Date";
                Importance=Promoted;
                QuickEntry=FALSE }

    { 16  ;2   ;Field     ;
                SourceExpr="Bill-to Customer No.";
                Importance=Promoted;
                OnValidate=BEGIN
                             BilltoCustomerNoOnAfterValidat;
                           END;
                            }

    { 159 ;2   ;Field     ;
                SourceExpr="Bill-to Contact No.";
                Importance=Additional }

    { 18  ;2   ;Field     ;
                SourceExpr="Bill-to Name" }

    { 20  ;2   ;Field     ;
                SourceExpr="Bill-to Address";
                Importance=Additional }

    { 22  ;2   ;Field     ;
                SourceExpr="Bill-to Address 2";
                Importance=Additional }

    { 1040004;2;Field     ;
                SourceExpr="Bill-to City" }

    { 1040006;2;Field     ;
                SourceExpr="Bill-to County" }

    { 89  ;2   ;Field     ;
                SourceExpr="Bill-to Post Code";
                Importance=Additional }

    { 26  ;2   ;Field     ;
                SourceExpr="Bill-to Contact";
                Importance=Additional }

    { 84  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 1 Code";
                OnValidate=BEGIN
                             ShortcutDimension1CodeOnAfterV;
                           END;
                            }

    { 92  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 2 Code";
                OnValidate=BEGIN
                             ShortcutDimension2CodeOnAfterV;
                           END;
                            }

    { 28  ;2   ;Field     ;
                SourceExpr="Payment Terms Code";
                Importance=Promoted }

    { 30  ;2   ;Field     ;
                SourceExpr="Due Date";
                Importance=Promoted }

    { 32  ;2   ;Field     ;
                SourceExpr="Payment Discount %" }

    { 34  ;2   ;Field     ;
                SourceExpr="Pmt. Discount Date" }

    { 105 ;2   ;Field     ;
                SourceExpr="Payment Method Code" }

    { 27  ;2   ;Field     ;
                SourceExpr="Direct Debit Mandate ID" }

    { 131 ;2   ;Field     ;
                SourceExpr="Prices Including VAT";
                OnValidate=BEGIN
                             PricesIncludingVATOnAfterValid;
                           END;
                            }

    { 221 ;2   ;Field     ;
                SourceExpr="VAT Bus. Posting Group" }

    { 226 ;2   ;Field     ;
                SourceExpr="Credit Card No." }

    { 253 ;2   ;Field     ;
                CaptionML=[ENU=Cr. Card Number (Last 4 Digits);
                           ENG=Cr. Card Number (Last 4 Digits)];
                SourceExpr=GetCreditcardNumber }

    { 1906801201;1;Group  ;
                CaptionML=[ENU=Shipping;
                           ENG=Shipping] }

    { 36  ;2   ;Field     ;
                SourceExpr="Ship-to Code";
                Importance=Promoted }

    { 38  ;2   ;Field     ;
                SourceExpr="Ship-to Name" }

    { 40  ;2   ;Field     ;
                SourceExpr="Ship-to Address";
                Importance=Additional }

    { 42  ;2   ;Field     ;
                SourceExpr="Ship-to Address 2";
                Importance=Additional }

    { 1040008;2;Field     ;
                SourceExpr="Ship-to City" }

    { 1040010;2;Field     ;
                SourceExpr="Ship-to County" }

    { 97  ;2   ;Field     ;
                SourceExpr="Ship-to Post Code";
                Importance=Promoted }

    { 46  ;2   ;Field     ;
                SourceExpr="Ship-to Contact";
                Importance=Additional }

    { 94  ;2   ;Field     ;
                SourceExpr="Location Code" }

    { 141 ;2   ;Field     ;
                SourceExpr="Outbound Whse. Handling Time";
                Importance=Additional }

    { 48  ;2   ;Field     ;
                SourceExpr="Shipment Method Code" }

    { 107 ;2   ;Field     ;
                SourceExpr="Shipping Agent Code";
                Importance=Additional }

    { 139 ;2   ;Field     ;
                SourceExpr="Shipping Agent Service Code";
                Importance=Additional }

    { 143 ;2   ;Field     ;
                SourceExpr="Shipping Time" }

    { 145 ;2   ;Field     ;
                SourceExpr="Late Order Shipping";
                Importance=Additional }

    { 109 ;2   ;Field     ;
                SourceExpr="Package Tracking No.";
                Importance=Additional }

    { 50  ;2   ;Field     ;
                SourceExpr="Shipment Date";
                Importance=Promoted }

    { 119 ;2   ;Field     ;
                SourceExpr="Shipping Advice";
                Importance=Promoted;
                OnValidate=BEGIN
                             IF "Shipping Advice" <> xRec."Shipping Advice" THEN
                               IF NOT CONFIRM(Text001,FALSE,FIELDCAPTION("Shipping Advice")) THEN
                                 ERROR(Text002);
                           END;
                            }

    { 1907468901;1;Group  ;
                CaptionML=[ENU=Foreign Trade;
                           ENG=Foreign Trade];
                Visible=False }

    { 111 ;2   ;Field     ;
                SourceExpr="Currency Code";
                Importance=Promoted;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                             SalesCalcDiscountByType.ApplyDefaultInvoiceDiscount(0,Rec);
                           END;

                OnAssistEdit=BEGIN
                               CLEAR(ChangeExchangeRate);
                               IF "Posting Date" <> 0D THEN
                                 ChangeExchangeRate.SetParameter("Currency Code","Currency Factor","Posting Date")
                               ELSE
                                 ChangeExchangeRate.SetParameter("Currency Code","Currency Factor",WORKDATE);
                               IF ChangeExchangeRate.RUNMODAL = ACTION::OK THEN BEGIN
                                 VALIDATE("Currency Factor",ChangeExchangeRate.GetParameter);
                                 CurrPage.UPDATE;
                               END;
                               CLEAR(ChangeExchangeRate);
                             END;
                              }

    { 52  ;2   ;Field     ;
                SourceExpr="EU 3-Party Trade" }

    { 54  ;2   ;Field     ;
                SourceExpr="Transaction Type" }

    { 103 ;2   ;Field     ;
                SourceExpr="Transaction Specification" }

    { 56  ;2   ;Field     ;
                SourceExpr="Transport Method" }

    { 99  ;2   ;Field     ;
                SourceExpr="Exit Point" }

    { 101 ;2   ;Field     ;
                SourceExpr=Area }

    { 1900201301;1;Group  ;
                CaptionML=[ENU=Prepayment;
                           ENG=Prepayment];
                Visible=False }

    { 228 ;2   ;Field     ;
                SourceExpr="Prepayment %";
                Importance=Promoted;
                OnValidate=BEGIN
                             Prepayment37OnAfterValidate;
                           END;
                            }

    { 229 ;2   ;Field     ;
                SourceExpr="Compress Prepayment" }

    { 162 ;2   ;Field     ;
                SourceExpr="Prepmt. Payment Terms Code" }

    { 239 ;2   ;Field     ;
                SourceExpr="Prepayment Due Date";
                Importance=Promoted }

    { 164 ;2   ;Field     ;
                SourceExpr="Prepmt. Payment Discount %" }

    { 70  ;2   ;Field     ;
                SourceExpr="Prepmt. Pmt. Discount Date" }

  }
  CODE
  {
    VAR
      CopySalesDoc@1001 : Report 292;
      MoveNegSalesLines@1007 : Report 6699;
      ApprovalsMgmt@1012 : Codeunit 1535;
      ReportPrint@1002 : Codeunit 228;
      DocPrint@1003 : Codeunit 229;
      ArchiveManagement@1008 : Codeunit 5063;
      SalesCalcDiscountByType@1014 : Codeunit 56;
      ChangeExchangeRate@1005 : Page 511;
      UserMgt@1006 : Codeunit 5700;
      Usage@1010 : 'Order Confirmation,Work Order,Pick Instruction';
      JobQueueVisible@1004 : Boolean INDATASET;
      Text001@1015 : TextConst 'ENU=Do you want to change %1 in all related records in the warehouse?;ENG=Do you want to change %1 in all related records in the warehouse?';
      Text002@1011 : TextConst 'ENU=The update has been interrupted to respect the warning.;ENG=The update has been interrupted to respect the warning.';
      DynamicEditable@1009 : Boolean;
      HasIncomingDocument@1020 : Boolean;
      DocNoVisible@1013 : Boolean;
      ExternalDocNoMandatory@1016 : Boolean;
      OpenApprovalEntriesExistForCurrUser@1024 : Boolean;
      OpenApprovalEntriesExist@1023 : Boolean;
      CRMIntegrationEnabled@1000 : Boolean;
      CRMIsCoupledToRecord@1017 : Boolean;
      ShowWorkflowStatus@1018 : Boolean;
      "##NewCust"@1000000000 : Integer;
      CustEmail@1000000001 : Text;
      CustName@1000000002 : Text;
      CustAdd1@1000000003 : Text;
      CustAdd2@1000000004 : Text;
      CustCity@1000000005 : Text;
      CustCounty@1000000006 : Text;
      CustPostCode@1000000007 : Text;
      CustCountry@1000000009 : Text;
      CustPhone@1000000008 : Text;
      PostcodeMgt@1000000011 : Codeunit 9062361;
      Cust@1000000016 : Record 18;
      FindStr@1000000015 : Text;
      TNPUtils@1000000014 : Codeunit 9062229;
      CustNo@1000000013 : Code[20];
      PageMode@1000000010 : 'FindCust,AddCust';
      PosUser@1000000012 : Record 9062783;
      Store@1000000017 : Record 9062786;
      String@1000000018 : Codeunit 9062236;

    LOCAL PROCEDURE Post@4(PostingCodeunitID@1000 : Integer);
    BEGIN
      SendToPosting(PostingCodeunitID);
      IF "Job Queue Status" = "Job Queue Status"::"Scheduled for Posting" THEN
        CurrPage.CLOSE;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ApproveCalcInvDisc@3();
    BEGIN
      CurrPage.SalesLines.PAGE.ApproveCalcInvDisc;
    END;

    LOCAL PROCEDURE SelltoCustomerNoOnAfterValidat@19034782();
    BEGIN
      IF GETFILTER("Sell-to Customer No.") = xRec."Sell-to Customer No." THEN
        IF "Sell-to Customer No." <> xRec."Sell-to Customer No." THEN
          SETRANGE("Sell-to Customer No.");
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE SalespersonCodeOnAfterValidate@19011896();
    BEGIN
      CurrPage.SalesLines.PAGE.UpdateForm(TRUE);
    END;

    LOCAL PROCEDURE BilltoCustomerNoOnAfterValidat@19044114();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShortcutDimension1CodeOnAfterV@19029405();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShortcutDimension2CodeOnAfterV@19008725();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE PricesIncludingVATOnAfterValid@19009096();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE Prepayment37OnAfterValidate@19040510();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE SetDocNoVisible@2();
    VAR
      DocumentNoVisibility@1000 : Codeunit 1400;
      DocType@1003 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Reminder,FinChMemo';
    BEGIN
      DocNoVisible := DocumentNoVisibility.SalesDocumentNoIsVisible(DocType::Order,"No.");
    END;

    LOCAL PROCEDURE SetExtDocNoMandatoryCondition@5();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      ExternalDocNoMandatory := SalesReceivablesSetup."Ext. Doc. No. Mandatory"
    END;

    LOCAL PROCEDURE ShowPreview@6();
    VAR
      SalesPostYesNo@1000 : Codeunit 81;
    BEGIN
      SalesPostYesNo.Preview(Rec);
    END;

    LOCAL PROCEDURE SetControlVisibility@7();
    VAR
      ApprovalsMgmt@1002 : Codeunit 1535;
    BEGIN
      JobQueueVisible := "Job Queue Status" = "Job Queue Status"::"Scheduled for Posting";
      HasIncomingDocument := "Incoming Document Entry No." <> 0;
      SetExtDocNoMandatoryCondition;

      OpenApprovalEntriesExistForCurrUser := ApprovalsMgmt.HasOpenApprovalEntriesForCurrentUser(RECORDID);
      OpenApprovalEntriesExist := ApprovalsMgmt.HasOpenApprovalEntries(RECORDID);
    END;

    LOCAL PROCEDURE "###"@1000000001();
    BEGIN
    END;

    LOCAL PROCEDURE FindCust@1000000000();
    BEGIN

      SetHideValidationDialog(TRUE);

      IF STRLEN(CustEmail) > 4 THEN BEGIN
        IF STRPOS(CustEmail,'@') > 0 THEN BEGIN
          Cust.SETCURRENTKEY("E-Mail");
          FindStr:=String.Replace(CustEmail,'@','*');
          Cust.SETFILTER("E-Mail",'%1','@*' + FindStr +'*');
          IF Cust.FINDFIRST THEN BEGIN
            Cust.SETRECFILTER;
            VALIDATE("Sell-to Customer No.",Cust."No.");
            SetHideValidationDialog(FALSE);
            UpdateCustDets(Cust);
            EXIT;
            END;
        END;
      END;

      //Can we find by post code and surname
      IF (STRLEN(CustName) > 4) AND (STRLEN(CustPostCode) >3) THEN BEGIN
      Cust.RESET;
      Cust.SETFILTER("Search Name",'%1','@*'+ CustName +'*');
      Cust.SETFILTER("Post Code",CustPostCode);
      IF Cust.FINDFIRST THEN BEGIN
        Cust.SETRECFILTER;
        VALIDATE("Sell-to Customer No.",Cust."No.");
        SetHideValidationDialog(FALSE);
        UpdateCustDets(Cust);
        END;

      END;


      CreateCustAndAddTo;
    END;

    LOCAL PROCEDURE CreateCustAndAddTo@1000000004();
    VAR
      CUSTNew@1000000000 : Record 18;
      POSSetup@1000000001 : Record 9062777;
      DefCust@1000000002 : Record 18;
      POSMgt@1000000003 : Codeunit 9062648;
      eConfirmation@1000000004 : TextConst 'ENU=Would you like to create a new customer for this order?;ENG=Would you like to create a new customer for this order?';
    BEGIN
      //We need to create a new customer

      IF (CustAdd1<>'') AND
          (CustCity<>'') AND
        (CustCountry<>'') AND
        (CustCounty<>'') AND
        (CustEmail<>'') AND
        (CustName <>'') AND
        (CustNo ='')

      THEN BEGIN
        IF CONFIRM(eConfirmation) THEN BEGIN
            CUSTNew.INIT;
            CUSTNew."No.":='';
            CUSTNew.VALIDATE(CUSTNew.Name,CustName);
            CUSTNew.VALIDATE(CUSTNew.Address,CustAdd1);
            CUSTNew.VALIDATE(CUSTNew."Address 2",CustAdd2);
            CUSTNew.VALIDATE(CUSTNew.City,CustCity);
            CUSTNew.VALIDATE(CUSTNew.County,CustCounty);
            CUSTNew.VALIDATE("Country/Region Code",CustCountry);
            CUSTNew.VALIDATE(CUSTNew."E-Mail", CustEmail);
            CUSTNew.VALIDATE(CUSTNew."Phone No.", CustPhone);
            CUSTNew.VALIDATE(CUSTNew."Post Code",CustPostCode);
            CUSTNew.INSERT(TRUE);
            POSSetup.GET();
            DefCust.GET(POSSetup."Default Customer");

            CUSTNew.VALIDATE(CUSTNew."Customer Posting Group",DefCust."Customer Posting Group");
            CUSTNew.VALIDATE(CUSTNew."Gen. Bus. Posting Group",DefCust."Gen. Bus. Posting Group");
            CUSTNew.VALIDATE(CUSTNew."VAT Bus. Posting Group",DefCust."VAT Bus. Posting Group");

            IF PosUser.GET(USERID) THEN
                    IF Store.GET(PosUser.Store) THEN
                      CUSTNew.VALIDATE("Location Code",Store."Default Sales Location");

            CUSTNew.MODIFY(TRUE);
            SetHideValidationDialog(TRUE);
            VALIDATE("Sell-to Customer No.",CUSTNew."No.");
            MODIFY;
            POSMgt.CreateContact(CUSTNew);
           UpdateCustDets(CUSTNew);

       END;
      END;
    END;

    LOCAL PROCEDURE UpdateCustDets@1000000003(CustIn@1000000000 : Record 18);
    BEGIN
      CustNo:=CustIn."No.";
      CustAdd1:=CustIn.Address;
      CustAdd2:=CustIn."Address 2";
      CustCity:=CustIn.City;
      CustCountry:=CustIn."Country/Region Code";
      CustCounty:=CustIn.County;
      CustEmail:=CustIn."E-Mail";
      CustName:=CustIn.Name;
      CustPhone:=CustIn."Phone No.";
      CustPostCode:=CustIn."Post Code";
    END;

    LOCAL PROCEDURE SetCustomerDets@1000000002();
    VAR
      FoundCust@1000000000 : Record 18;
      POSSetup@1000000001 : Record 9062777;
    BEGIN
      IF "Sell-to Customer No."='' THEN
        EXIT;

      POSSetup.GET();
      IF POSSetup."Default Customer" <> "Sell-to Customer No." THEN BEGIN
          IF FoundCust.GET("Sell-to Customer No.") THEN BEGIN
            UpdateCustDets(FoundCust);
            END;
        END;
    END;

    BEGIN
    {
      //DOC NH2016.12 AZ 11/09/2015 - Enhanced Information Factbox added
      //DOC NH2016.12 AZ 20/10/2015 - Enhanced Fields part added
      //DOC NH2016.12 JH 01/02/2016 - String references pointed to new codeunit
      //DOC NH2016.15 JH 25/04/2016 - CfMD amendments
    }
    END.
  }
}

