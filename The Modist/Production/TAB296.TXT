OBJECT Table 296 Reminder Line
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00,NAVGB9.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ReminderHeader.GET("Reminder No.");
               "Attached to Line No." := 0;
             END;

    OnModify=BEGIN
               TESTFIELD("System-Created Entry",FALSE);
             END;

    OnDelete=BEGIN
               ReminderLine.SETRANGE("Reminder No.","Reminder No.");
               ReminderLine.SETRANGE("Attached to Line No.","Line No.");
               ReminderLine.DELETEALL;
             END;

    CaptionML=[ENU=Reminder Line;
               ENG=Reminder Line];
  }
  FIELDS
  {
    { 1   ;   ;Reminder No.        ;Code20        ;TableRelation="Reminder Header";
                                                   CaptionML=[ENU=Reminder No.;
                                                              ENG=Reminder No.] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.];
                                                   NotBlank=Yes }
    { 3   ;   ;Attached to Line No.;Integer       ;TableRelation="Reminder Line"."Line No." WHERE (Reminder No.=FIELD(Reminder No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ENG=Attached to Line No.];
                                                   Editable=No }
    { 4   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  ReminderLine := Rec;
                                                                  INIT;
                                                                  Type := ReminderLine.Type;
                                                                  GetReminderHeader;
                                                                  IF Type = Type::"Line Fee" THEN BEGIN
                                                                    "Line Type" := "Line Type"::"Line Fee";
                                                                    CustPostingGr.GET(ReminderHeader."Customer Posting Group");
                                                                    IF CustPostingGr."Add. Fee per Line Account" <> '' THEN
                                                                      VALIDATE("No.",CustPostingGr."Add. Fee per Line Account");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Customer Ledger Entry,Line Fee";
                                                                    ENG=" ,G/L Account,Customer Ledger Entry,Line Fee"];
                                                   OptionString=[ ,G/L Account,Customer Ledger Entry,Line Fee] }
    { 5   ;   ;Entry No.           ;Integer       ;TableRelation="Cust. Ledger Entry";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                GetReminderHeader;
                                                                CustLedgEntry.GET("Entry No.");
                                                                CustLedgEntry.TESTFIELD(Open,TRUE);
                                                                CustLedgEntry.TESTFIELD("Customer No.",ReminderHeader."Customer No.");
                                                                IF CustLedgEntry."Currency Code" <> ReminderHeader."Currency Code" THEN
                                                                  ERROR(
                                                                    MustBeSameErr,
                                                                    ReminderHeader.FIELDCAPTION("Currency Code"),
                                                                    ReminderHeader.TABLECAPTION,CustLedgEntry.TABLECAPTION);
                                                                "Posting Date" := CustLedgEntry."Posting Date";
                                                                "Document Date" := CustLedgEntry."Document Date";
                                                                "Due Date" := CustLedgEntry."Due Date";
                                                                "Document Type" := CustLedgEntry."Document Type";
                                                                "Document No." := CustLedgEntry."Document No.";
                                                                Description := CustLedgEntry.Description;
                                                                CustLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                                                                "Original Amount" := CustLedgEntry.Amount;
                                                                "Remaining Amount" := CustLedgEntry."Remaining Amount";
                                                                "No. of Reminders" := GetNoOfReminderForCustLedgEntry("Entry No.");

                                                                CalcFinChrg;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF Type <> Type::"Customer Ledger Entry" THEN
                                                                EXIT;
                                                              SetCustLedgEntryView;
                                                              IF CustLedgEntry.GET("Entry No.") THEN;
                                                              LookupCustLedgEntry;
                                                            END;

                                                   CaptionML=[ENU=Entry No.;
                                                              ENG=Entry No.];
                                                   BlankZero=Yes }
    { 6   ;   ;No. of Reminders    ;Integer       ;OnValidate=BEGIN
                                                                IF Type = Type::"Line Fee" THEN
                                                                  VALIDATE("Applies-to Document No.");
                                                              END;

                                                   CaptionML=[ENU=No. of Reminders;
                                                              ENG=No. of Reminders] }
    { 7   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENG=Posting Date];
                                                   Editable=No }
    { 8   ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENG=Document Date];
                                                   Editable=No }
    { 9   ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENG=Due Date];
                                                   Editable=No }
    { 10  ;   ;Document Type       ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                VALIDATE("Document No.");
                                                              END;

                                                   CaptionML=[ENU=Document Type;
                                                              ENG=Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENG=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 11  ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                "Entry No." := 0;
                                                                IF "Document No." <> '' THEN BEGIN
                                                                  SetCustLedgEntryView;
                                                                  IF "Document Type" <> 0 THEN
                                                                    CustLedgEntry.SETRANGE("Document Type","Document Type");
                                                                  CustLedgEntry.SETRANGE("Document No.","Document No.");
                                                                  IF CustLedgEntry.FINDFIRST THEN
                                                                    VALIDATE("Entry No.",CustLedgEntry."Entry No.")
                                                                  ELSE
                                                                    ERROR(NoOpenEntriesErr,FORMAT(Type),FIELDCAPTION("Document No."),"Document No.");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF Type <> Type::"Customer Ledger Entry" THEN
                                                                EXIT;
                                                              SetCustLedgEntryView;
                                                              IF "Document Type" <> 0 THEN
                                                                CustLedgEntry.SETRANGE("Document Type","Document Type");
                                                              IF "Document No." <> '' THEN
                                                                CustLedgEntry.SETRANGE("Document No.","Document No.");
                                                              IF CustLedgEntry.FINDFIRST THEN;
                                                              CustLedgEntry.SETRANGE("Document Type");
                                                              CustLedgEntry.SETRANGE("Document No.");
                                                              LookupCustLedgEntry;
                                                            END;

                                                   CaptionML=[ENU=Document No.;
                                                              ENG=Document No.] }
    { 12  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 13  ;   ;Original Amount     ;Decimal       ;CaptionML=[ENU=Original Amount;
                                                              ENG=Original Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 14  ;   ;Remaining Amount    ;Decimal       ;CaptionML=[ENU=Remaining Amount;
                                                              ENG=Remaining Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 15  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Line Fee)) "G/L Account";
                                                   OnValidate=BEGIN
                                                                IF "No." <> '' THEN
                                                                  CASE Type OF
                                                                    Type::" ":
                                                                      BEGIN
                                                                        StdTxt.GET("No.");
                                                                        Description := StdTxt.Description;
                                                                      END;
                                                                    Type::"Customer Ledger Entry":
                                                                      BEGIN
                                                                        ReminderLine.Type := ReminderLine.Type::" ";
                                                                        ReminderLine2.Type := ReminderLine2.Type::"G/L Account";
                                                                        ERROR(
                                                                          MustBeErr,
                                                                          FIELDCAPTION(Type),ReminderLine.Type,ReminderLine2.Type);
                                                                      END;
                                                                    Type::"G/L Account":
                                                                      FillLineWithGLAccountData("No.");
                                                                    Type::"Line Fee":
                                                                      FillLineWithGLAccountData("No.");
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 16  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                IF Type = Type::" " THEN BEGIN
                                                                  ReminderLine.Type := ReminderLine.Type::"G/L Account";
                                                                  ReminderLine2.Type := ReminderLine.Type::"Customer Ledger Entry";
                                                                  ERROR(
                                                                    MustBeErr,
                                                                    FIELDCAPTION(Type),ReminderLine.Type,ReminderLine2.Type);
                                                                END;
                                                                IF (Type = Type::"Line Fee") AND (Amount < 0) THEN
                                                                  ERROR(MustBePositiveErr,FIELDCAPTION(Amount));

                                                                GetReminderHeader;
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    "VAT Amount" := Amount * ("VAT %" / 100);
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          ReminderHeader."Tax Area Code","Tax Group Code",ReminderHeader."Tax Liable",
                                                                          ReminderHeader."Posting Date",Amount,0,0);
                                                                      IF Amount - "VAT Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / Amount,0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                    END;
                                                                  "VAT Calculation Type"::"4":
                                                                    BEGIN
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                    END;
                                                                END;
                                                                "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ENG=Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 17  ;   ;Interest Rate       ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                TESTFIELD("Entry No.");
                                                                CalcFinChrg;
                                                              END;

                                                   CaptionML=[ENU=Interest Rate;
                                                              ENG=Interest Rate];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 18  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENG=Gen. Prod. Posting Group] }
    { 19  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ENG=VAT %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENG=VAT Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENG=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 21  ;   ;VAT Amount          ;Decimal       ;CaptionML=[ENU=VAT Amount;
                                                              ENG=VAT Amount];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 22  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENG=VAT Group Code] }
    { 23  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                GetReminderHeader;
                                                                VATPostingSetup.GET(ReminderHeader."VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                "VAT Clause Code" := VATPostingSetup."VAT Clause Code";
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                      TESTFIELD("No.",VATPostingSetup."Sales VAT Account");
                                                                    END;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          ReminderHeader."Tax Area Code","Tax Group Code",ReminderHeader."Tax Liable",
                                                                          ReminderHeader."Posting Date",Amount,0,0);
                                                                      IF Amount - "VAT Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / Amount,0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENG=VAT Prod. Posting Group] }
    { 24  ;   ;VAT Identifier      ;Code10        ;CaptionML=[ENU=VAT Identifier;
                                                              ENG=VAT Identifier];
                                                   Editable=No }
    { 25  ;   ;Line Type           ;Option        ;CaptionML=[ENU=Line Type;
                                                              ENG=Line Type];
                                                   OptionCaptionML=[ENU=Reminder Line,Not Due,Beginning Text,Ending Text,Rounding,On Hold,Additional Fee,Line Fee;
                                                                    ENG=Reminder Line,Not Due,Beginning Text,Ending Text,Rounding,On Hold,Additional Fee,Line Fee];
                                                   OptionString=Reminder Line,Not Due,Beginning Text,Ending Text,Rounding,On Hold,Additional Fee,Line Fee }
    { 26  ;   ;VAT Clause Code     ;Code10        ;TableRelation="VAT Clause";
                                                   CaptionML=[ENU=VAT Clause Code;
                                                              ENG=VAT Clause Code] }
    { 27  ;   ;Applies-to Document Type;Option    ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Line Fee");
                                                                VALIDATE("Applies-to Document No.");
                                                              END;

                                                   CaptionML=[ENU=Applies-to Document Type;
                                                              ENG=Applies-to Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENG=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 28  ;   ;Applies-to Document No.;Code20     ;OnValidate=VAR
                                                                NextLineFeeLevel@1000 : Integer;
                                                              BEGIN
                                                                TESTFIELD(Type,Type::"Line Fee");
                                                                "Entry No." := 0;
                                                                IF "Applies-to Document No." <> '' THEN BEGIN
                                                                  SetCustLedgEntryView;
                                                                  IF "Applies-to Document Type" <> 0 THEN
                                                                    CustLedgEntry.SETRANGE("Document Type","Applies-to Document Type");
                                                                  CustLedgEntry.SETRANGE("Document No.","Applies-to Document No.");
                                                                  IF NOT CustLedgEntry.FINDFIRST THEN
                                                                    ERROR(NoOpenEntriesErr,CustLedgEntry.TABLENAME,FIELDCAPTION("Document No."),"Applies-to Document No.");
                                                                  "Applies-to Document Type" := CustLedgEntry."Document Type";

                                                                  IF CustLedgEntry."Due Date" >= ReminderHeader."Document Date" THEN
                                                                    ERROR(EntryNotOverdueErr,CustLedgEntry.FIELDCAPTION("Document No."),"Applies-to Document No.",CustLedgEntry.TABLENAME);

                                                                  IF "No. of Reminders" <> 0 THEN
                                                                    NextLineFeeLevel := "No. of Reminders"
                                                                  ELSE
                                                                    NextLineFeeLevel := GetNoOfReminderForCustLedgEntry(CustLedgEntry."Entry No.");

                                                                  IF LineFeeIssuedForReminderLevel(CustLedgEntry,NextLineFeeLevel) THEN
                                                                    ERROR(LineFeeAlreadyIssuedErr,"Applies-to Document Type","Applies-to Document No.",NextLineFeeLevel);

                                                                  GetReminderHeader;
                                                                  IF CustLedgEntry."Currency Code" <> ReminderHeader."Currency Code" THEN
                                                                    ERROR(
                                                                      MustBeSameErr,
                                                                      ReminderHeader.FIELDCAPTION("Currency Code"),
                                                                      ReminderHeader.TABLECAPTION,CustLedgEntry.TABLECAPTION);

                                                                  GetReminderLevel(ReminderLevel,NextLineFeeLevel,NextLineFeeLevel);
                                                                  "Posting Date" := ReminderHeader."Posting Date";
                                                                  "Document Date" := ReminderHeader."Document Date";
                                                                  "Due Date" := ReminderHeader."Due Date";
                                                                  "No. of Reminders" := NextLineFeeLevel;

                                                                  CustLedgEntry.CALCFIELDS("Remaining Amount");
                                                                  VALIDATE(Amount,ReminderLevel.GetAdditionalFee(
                                                                      CustLedgEntry."Remaining Amount",
                                                                      ReminderHeader."Currency Code",
                                                                      TRUE,
                                                                      ReminderHeader."Posting Date"));

                                                                  Description := '';
                                                                  IF (Amount <> 0) AND (ReminderLevel."Add. Fee per Line Description" <> '') THEN
                                                                    Description := STRSUBSTNO(ReminderLevel."Add. Fee per Line Description",
                                                                        "Reminder No.",
                                                                        "No. of Reminders",
                                                                        "Document Date",
                                                                        "Posting Date",
                                                                        "No.",
                                                                        Amount,
                                                                        "Applies-to Document Type",
                                                                        "Applies-to Document No.",
                                                                        ReminderLevel."No.")
                                                                  ELSE
                                                                    IF GLAcc.GET("No.") THEN
                                                                      Description := GLAcc.Name;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF Type <> Type::"Line Fee" THEN
                                                                EXIT;
                                                              SetCustLedgEntryView;
                                                              IF "Applies-to Document Type" <> 0 THEN
                                                                CustLedgEntry.SETRANGE("Document Type","Applies-to Document Type");
                                                              IF "Applies-to Document No." <> '' THEN
                                                                CustLedgEntry.SETRANGE("Document No.","Applies-to Document No.");
                                                              IF CustLedgEntry.FINDFIRST THEN;
                                                              CustLedgEntry.SETRANGE("Document Type");
                                                              CustLedgEntry.SETRANGE("Document No.");
                                                              LookupCustLedgEntry;
                                                            END;

                                                   CaptionML=[ENU=Applies-to Document No.;
                                                              ENG=Applies-to Document No.] }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ENG=System-Created Entry];
                                                   Editable=No }
    { 10500;  ;Multiple Interest Rates Entry;Boolean;
                                                   CaptionML=[ENU=Multiple Interest Rates Entry;
                                                              ENG=Multiple Interest Rates Entry] }
  }
  KEYS
  {
    {    ;Reminder No.,Line No.                   ;SumIndexFields=Amount,VAT Amount,Remaining Amount;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Reminder No.,Type,Multiple Interest Rates Entry,Line Type;
                                                   SumIndexFields=Amount,VAT Amount,Remaining Amount;
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Reminder No.,Multiple Interest Rates Entry;
                                                   SumIndexFields=Amount,VAT Amount,Remaining Amount }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      MustBeSameErr@1000 : TextConst 'ENU=The %1 on the %2 and the %3 must be the same.;ENG=The %1 on the %2 and the %3 must be the same.';
      MustBeErr@1001 : TextConst 'ENU=%1 must be %2 or %3.;ENG=%1 must be %2 or %3.';
      FinChrgTerms@1002 : Record 5;
      ReminderTerms@1003 : Record 292;
      ReminderLevel@1004 : Record 293;
      ReminderHeader@1005 : Record 295;
      ReminderLine@1006 : Record 296;
      ReminderLine2@1007 : Record 296;
      ReminderEntry@1008 : Record 300;
      CustLedgEntry@1009 : Record 21;
      Currency@1011 : Record 4;
      VATPostingSetup@1012 : Record 325;
      CustPostingGr@1013 : Record 92;
      GLAcc@1014 : Record 15;
      StdTxt@1015 : Record 7;
      GenProdPostingGrp@1016 : Record 251;
      SalesTaxCalculate@1017 : Codeunit 398;
      InterestCalcDate@1018 : Date;
      CalcInterest@1019 : Boolean;
      NoOpenEntriesErr@1010 : TextConst '@@@="%1 = Table name, %2 = Document Type, %3 = Document No.";ENU=There is no open %1 with %2 %3.;ENG=There is no open %1 with %2 %3.';
      EntryNotOverdueErr@1020 : TextConst '@@@="%1 = Document Type, %2 = Document No., %3 = Table name";ENU=%1 %2 in %3 is not overdue.;ENG=%1 %2 in %3 is not overdue.';
      LineFeeAlreadyIssuedErr@1021 : TextConst '@@@="%1 = Document TYpe, %2 = Document No, %3 = Level number";ENU=The Line Fee for %1 %2 on reminder level %3 has already been issued.;ENG=The Line Fee for %1 %2 on reminder level %3 has already been issued.';
      MustBePositiveErr@1022 : TextConst 'ENU=%1 must be positive.;ENG=%1 must be positive.';
      Text003@1080000 : TextConst 'ENU=There is not enough space to insert lines with additional interest rates;ENG=There is not enough space to insert lines with additional interest rates';
      NrOfLinesToInsert@1080002 : Integer;
      Text004@1040000 : TextConst 'ENU=Create interest rate with start date prior to %1.;ENG=Create interest rate with start date prior to %1.';

    LOCAL PROCEDURE CalcFinChrg@6();
    VAR
      FinChrgInterestRates@1080008 : Record 10555;
      ExtraReminderLine@1080007 : Record 296;
      UseDueDate@1080006 : Date;
      UseCalcDate@1080005 : Date;
      CurrInterestRateStartDate@1040000 : Date;
      LineSpacing@1080003 : Integer;
      NextLineNo@1080002 : Integer;
      UseInterestRate@1080001 : Decimal;
      LastRateFound@1080000 : Boolean;
      CumAmount@1080009 : Decimal;
      InsertedLines@1080010 : Boolean;
      UseInterestPeriod@1080011 : Integer;
    BEGIN
      GetReminderHeader;
      "Interest Rate" := 0;
      Amount := 0;
      "VAT Amount" := 0;
      "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
      "Gen. Prod. Posting Group" := '';
      "VAT Prod. Posting Group" := '';
      CustLedgEntry.GET("Entry No.");
      IF (CustLedgEntry."On Hold" <> '') OR ("Due Date" >= ReminderHeader."Document Date") THEN
        EXIT;

      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
      IF ReminderHeader."Use Header Level" THEN
        ReminderLevel.SETRANGE("No.",1,ReminderHeader."Reminder Level")
      ELSE
        ReminderLevel.SETRANGE("No.",1,"No. of Reminders");
      IF NOT ReminderLevel.FINDLAST THEN
        ReminderLevel.INIT;
      IF (NOT ReminderLevel."Calculate Interest") OR (ReminderHeader."Fin. Charge Terms Code" = '') THEN
        EXIT;
      FinChrgTerms.GET(ReminderHeader."Fin. Charge Terms Code");

      UseDueDate := CustLedgEntry."Due Date";
      UseInterestRate := FinChrgTerms."Interest Rate";
      UseCalcDate := 0D;
      NrOfLinesToInsert := 0;

      FinChrgInterestRates.INIT;
      FinChrgInterestRates.SETRANGE("Fin. Charge Terms Code",ReminderHeader."Fin. Charge Terms Code");
      FinChrgInterestRates."Fin. Charge Terms Code" := ReminderHeader."Fin. Charge Terms Code";
      IF FinChrgTerms."Interest Calculation Method" = FinChrgTerms."Interest Calculation Method"::"Average Daily Balance" THEN
        FinChrgInterestRates."Start Date" := CALCDATE('<+1D>',CustLedgEntry."Due Date")
      ELSE
        FinChrgInterestRates."Start Date" := ReminderHeader."Document Date";
      NrOfLinesToInsert := 0;
      LastRateFound := FALSE;
      IF FinChrgInterestRates.FIND('=<') THEN BEGIN
        UseInterestRate := FinChrgInterestRates."Interest Rate";
        IF FinChrgTerms."Interest Calculation Method" = FinChrgTerms."Interest Calculation Method"::"Average Daily Balance" THEN
          REPEAT
            IF FinChrgInterestRates."Start Date" <= ReminderHeader."Document Date" THEN
              NrOfLinesToInsert := NrOfLinesToInsert + 1
            ELSE
              LastRateFound := TRUE;
          UNTIL LastRateFound OR (FinChrgInterestRates.NEXT = 0);
        IF UseCalcDate = 0D THEN BEGIN
          FinChrgInterestRates.NEXT(-1);
          UseCalcDate := FinChrgInterestRates."Start Date";
        END;
      END ELSE
        IF FinChrgInterestRates.COUNT > 0 THEN
          ERROR(Text004,FinChrgInterestRates."Start Date");

      IF (UseCalcDate = 0D) OR (UseCalcDate < ReminderHeader."Document Date") THEN
        UseCalcDate := ReminderHeader."Document Date";
      "Interest Rate" := UseInterestRate;
      CASE FinChrgTerms."Interest Calculation Method" OF
        FinChrgTerms."Interest Calculation Method"::"Average Daily Balance":
          BEGIN
            CalcInterest := FALSE;
            IF NrOfLinesToInsert = 0 THEN
              FinChrgTerms.TESTFIELD("Interest Period (Days)")
            ELSE
              FinChrgInterestRates.TESTFIELD("Interest Period (Days)");
            InterestCalcDate := CustLedgEntry."Due Date";
            ReminderEntry.SETCURRENTKEY("Customer Entry No.");
            ReminderEntry.SETRANGE("Customer Entry No.","Entry No.");
            ReminderEntry.SETRANGE(Type,ReminderEntry.Type::Reminder);
            ReminderEntry.SETRANGE("Interest Posted",TRUE);
            IF ReminderEntry.FINDLAST THEN
              InterestCalcDate := ReminderEntry."Document Date";

            ReminderEntry.SETRANGE(Type,ReminderEntry.Type::"Finance Charge Memo");
            ReminderEntry.SETRANGE("Interest Posted");
            IF ReminderEntry.FINDLAST THEN
              IF ReminderEntry."Document Date" > InterestCalcDate THEN
                InterestCalcDate := ReminderEntry."Document Date";

            IF (InterestCalcDate < ReminderHeader."Document Date") AND (NrOfLinesToInsert = 0) THEN
              IF NrOfLinesToInsert = 0 THEN
                CumulateDetailedEntries(Amount,UseDueDate,UseCalcDate,UseInterestRate,FinChrgTerms."Interest Period (Days)")
              ELSE
                CumulateDetailedEntries(Amount,UseDueDate,UseCalcDate,UseInterestRate,FinChrgInterestRates."Interest Period (Days)")
                ;

            IF (NrOfLinesToInsert > 0) AND (FinChrgTerms."Interest Calculation Method" =
                                            FinChrgTerms."Interest Calculation Method"::"Average Daily Balance")
            THEN BEGIN
              ExtraReminderLine.RESET;
              ExtraReminderLine.SETRANGE("Reminder No.","Reminder No.");
              ExtraReminderLine := Rec;
              IF ExtraReminderLine.FIND('>') THEN BEGIN
                LineSpacing := (ExtraReminderLine."Line No." - "Line No.") DIV
                  (1 + NrOfLinesToInsert);
                IF LineSpacing = 0 THEN
                  ERROR(Text003);
              END ELSE
                LineSpacing := 10000;
              NextLineNo := "Line No." + LineSpacing;
              FinChrgInterestRates.INIT;
              FinChrgInterestRates.SETRANGE("Fin. Charge Terms Code",ReminderHeader."Fin. Charge Terms Code");
              FinChrgInterestRates."Fin. Charge Terms Code" := ReminderHeader."Fin. Charge Terms Code";
              FinChrgInterestRates."Start Date" := CALCDATE('<+1D>',CustLedgEntry."Due Date");
              IF FinChrgInterestRates.FIND('=<') THEN
                REPEAT
                  FinChrgInterestRates.TESTFIELD("Interest Period (Days)");
                  UseInterestPeriod := FinChrgInterestRates."Interest Period (Days)";
                  UseDueDate := CALCDATE('<-1D>',FinChrgInterestRates."Start Date");
                  CurrInterestRateStartDate := FinChrgInterestRates."Start Date";
                  UseInterestRate := FinChrgInterestRates."Interest Rate";
                  IF FinChrgInterestRates.NEXT <> 0 THEN BEGIN
                    IF FinChrgInterestRates."Start Date" <= ReminderHeader."Document Date" THEN
                      UseCalcDate := CALCDATE('<-1D>',FinChrgInterestRates."Start Date")
                    ELSE
                      UseCalcDate := ReminderHeader."Document Date";
                  END ELSE
                    UseCalcDate := ReminderHeader."Document Date";

                  ExtraReminderLine := Rec;
                  ExtraReminderLine."Line No." := NextLineNo;
                  ExtraReminderLine."Due Date" := CALCDATE('<+1D>',InterestCalcDate);
                  IF CurrInterestRateStartDate > ExtraReminderLine."Due Date" THEN
                    ExtraReminderLine."Due Date" := CurrInterestRateStartDate;
                  ExtraReminderLine."Interest Rate" := UseInterestRate;
                  CumulateDetailedEntries(ExtraReminderLine.Amount,UseDueDate,UseCalcDate,UseInterestRate,UseInterestPeriod);
                  IF ExtraReminderLine.Amount <> 0 THEN BEGIN
                    CumAmount := CumAmount + ExtraReminderLine.Amount;
                    ExtraReminderLine."Multiple Interest Rates Entry" := TRUE;
                    ExtraReminderLine.INSERT;
                    InsertedLines := TRUE;
                    NextLineNo := ExtraReminderLine."Line No." + LineSpacing;
                  END;
                  NrOfLinesToInsert := NrOfLinesToInsert - 1;
                UNTIL NrOfLinesToInsert = 0;
            END;
            IF CumAmount <> 0 THEN
              VALIDATE(Amount,CumAmount);
          END;
        FinChrgTerms."Interest Calculation Method"::"Balance Due":
          IF "Due Date" < ReminderHeader."Document Date" THEN
            Amount := "Remaining Amount" * "Interest Rate" / 100;
      END;
      IF Amount <> 0 THEN BEGIN
        CustPostingGr.GET(ReminderHeader."Customer Posting Group");
        CustPostingGr.TESTFIELD("Interest Account");
        GLAcc.GET(CustPostingGr."Interest Account");
        GLAcc.TESTFIELD("Gen. Prod. Posting Group");
        VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
        VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
      END;
    END;

    LOCAL PROCEDURE SetCustLedgEntryView@9();
    BEGIN
      GetReminderHeader;
      CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
      CustLedgEntry.SETRANGE("Customer No.",ReminderHeader."Customer No.");
      CustLedgEntry.SETRANGE(Open,TRUE);
    END;

    LOCAL PROCEDURE LookupCustLedgEntry@12();
    BEGIN
      IF PAGE.RUNMODAL(0,CustLedgEntry) = ACTION::LookupOK THEN
        IF Type = Type::"Line Fee" THEN BEGIN
          VALIDATE("Applies-to Document Type",CustLedgEntry."Document Type");
          VALIDATE("Applies-to Document No.",CustLedgEntry."Document No.");
        END ELSE
          VALIDATE("Entry No.",CustLedgEntry."Entry No.");
    END;

    LOCAL PROCEDURE GetReminderHeader@2();
    BEGIN
      IF "Reminder No." <> ReminderHeader."No." THEN BEGIN
        ReminderHeader.GET("Reminder No.");
        ProcessReminderHeader;
      END;
    END;

    LOCAL PROCEDURE ProcessReminderHeader@1();
    BEGIN
      ReminderHeader.TESTFIELD("Customer No.");
      ReminderHeader.TESTFIELD("Document Date");
      ReminderHeader.TESTFIELD("Customer Posting Group");
      ReminderHeader.TESTFIELD("Reminder Terms Code");
      ReminderTerms.GET(ReminderHeader."Reminder Terms Code");
      IF ReminderHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(ReminderHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    PROCEDURE GetCurrencyCodeFromHeader@4() : Code[10];
    VAR
      ReminderHeader@1000 : Record 295;
    BEGIN
      IF "Reminder No." = ReminderHeader."No." THEN
        EXIT(ReminderHeader."Currency Code");

      IF ReminderHeader.GET("Reminder No.") THEN
        EXIT(ReminderHeader."Currency Code");

      EXIT('');
    END;

    LOCAL PROCEDURE FillLineWithGLAccountData@1023(GLAccountNo@1000 : Code[20]);
    BEGIN
      GLAcc.GET(GLAccountNo);
      GLAcc.CheckGLAcc;
      IF NOT "System-Created Entry" THEN
        GLAcc.TESTFIELD("Direct Posting",TRUE);
      GLAcc.TESTFIELD("Gen. Prod. Posting Group");
      IF Description = '' THEN
        Description := GLAcc.Name;
      GetReminderHeader;
      "Tax Group Code" := GLAcc."Tax Group Code";
      VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
      VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
    END;

    LOCAL PROCEDURE GetNoOfReminderForCustLedgEntry@1024(EntryNo@1002 : Integer) : Integer;
    VAR
      CustLedgerEntry@1000 : Record 21;
      NoOfReminders@1001 : Integer;
    BEGIN
      CustLedgerEntry.GET(EntryNo);
      NoOfReminders := 0;
      ReminderEntry.RESET;
      ReminderEntry.SETCURRENTKEY("Customer Entry No.");
      ReminderEntry.SETRANGE("Customer Entry No.",EntryNo);
      ReminderEntry.SETRANGE(Type,ReminderEntry.Type::Reminder);
      IF ReminderEntry.FINDLAST THEN
        NoOfReminders := ReminderEntry."Reminder Level";
      IF (CustLedgerEntry."On Hold" = '') AND (CustLedgerEntry."Due Date" < ReminderHeader."Document Date") THEN
        NoOfReminders := NoOfReminders + 1;

      EXIT(NoOfReminders);
    END;

    LOCAL PROCEDURE LineFeeIssuedForReminderLevel@1025(VAR CustLedgEntry@1002 : Record 21;IssuedNoOfReminders@1000 : Integer) : Boolean;
    VAR
      IssuedReminderLine@1001 : Record 298;
    BEGIN
      IssuedReminderLine.SETRANGE("Applies-To Document Type",CustLedgEntry."Document Type");
      IssuedReminderLine.SETRANGE("Applies-To Document No.",CustLedgEntry."Document No.");
      IssuedReminderLine.SETRANGE(Type,IssuedReminderLine.Type::"Line Fee");
      IssuedReminderLine.SETRANGE("No. of Reminders",IssuedNoOfReminders);
      EXIT(IssuedReminderLine.FINDFIRST);
    END;

    LOCAL PROCEDURE GetReminderLevel@1026(VAR ReminderLevel@1001 : Record 293;LevelStart@1000 : Integer;LevelEnd@1002 : Integer);
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderHeader."Reminder Terms Code");
      IF ReminderHeader."Use Header Level" THEN
        ReminderLevel.SETRANGE("No.",LevelStart,ReminderHeader."Reminder Level")
      ELSE
        ReminderLevel.SETRANGE("No.",LevelStart,LevelEnd);
      IF NOT ReminderLevel.FINDLAST THEN
        ReminderLevel.INIT;
    END;

    LOCAL PROCEDURE CumulateDetailedEntries@1080001(VAR CumAmount@1080000 : Decimal;UseDueDate@1080003 : Date;UseCalcDate@1080004 : Date;UseInterestRate@1080005 : Decimal;UseInterestPeriod@1080006 : Decimal);
    VAR
      DtldCLE@1080001 : Record 379;
      IssuedReminderHeader@1004 : Record 297;
      InterestStartDate@1080002 : Date;
      LineFee@1003 : Decimal;
    BEGIN
      CalcInterest := TRUE;
      DtldCLE.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type","Posting Date");
      DtldCLE.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
      DtldCLE.SETFILTER("Entry Type",'%1|%2|%3|%4|%5',
        DtldCLE."Entry Type"::"Initial Entry",
        DtldCLE."Entry Type"::Application,
        DtldCLE."Entry Type"::"Payment Tolerance",
        DtldCLE."Entry Type"::"Payment Discount Tolerance (VAT Excl.)",
        DtldCLE."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)");
      DtldCLE.SETRANGE("Posting Date",0D,ReminderHeader."Document Date");
      CumAmount := 0;
      IF DtldCLE.FIND('-') THEN
        REPEAT
          IF DtldCLE."Entry Type" = DtldCLE."Entry Type"::"Initial Entry" THEN
            InterestStartDate := UseDueDate
          ELSE
            IF UseDueDate < DtldCLE."Posting Date" THEN
              InterestStartDate := DtldCLE."Posting Date";
          IF InterestCalcDate > InterestStartDate THEN
            InterestStartDate := InterestCalcDate;
          IF InterestStartDate < UseCalcDate THEN
            CumAmount := CumAmount + (DtldCLE.Amount * (UseCalcDate - InterestStartDate));
        UNTIL DtldCLE.NEXT = 0;
      IF NOT FinChrgTerms."Add. Line Fee in Interest" THEN
        IF CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Reminder THEN
          IF IssuedReminderHeader.GET(CustLedgEntry."Document No.") THEN BEGIN
            IssuedReminderHeader.CALCFIELDS("Add. Fee per Line");
            LineFee := IssuedReminderHeader."Add. Fee per Line" + IssuedReminderHeader.CalculateLineFeeVATAmount;
            CumAmount := CumAmount - LineFee * (ReminderHeader."Document Date" - InterestStartDate);
            IF CumAmount < 0 THEN
              CumAmount := 0;
          END;
      IF CalcInterest THEN
        CumAmount := ROUND(CumAmount / UseInterestPeriod * UseInterestRate / 100,
            Currency."Amount Rounding Precision")
      ELSE
        CumAmount := 0;
    END;

    BEGIN
    END.
  }
}

