OBJECT Codeunit 50100 Web Integration Management
{
  OBJECT-PROPERTIES
  {
    Date=06/11/17;
    Time=[ 4:28:22 AM];
    Modified=Yes;
    Version List=OP9031,IN38893,IN41925,TM0200;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            MESSAGE(CatalogFileName);
          END;

  }
  CODE
  {

    PROCEDURE CatalogFileName@1000000000() : Text;
    VAR
      ModisSetup@1000000000 : Record 50000;
      TEXT001@1000000002 : TextConst 'ENU=%1_%2_%3.xml;ENG=%1_%2_%3.xml';
      FileName@1000000001 : Text;
      CompanyInfo@1000000003 : Record 79;
      FileManagement@1000000004 : Codeunit 419;
      IntegrationProcessingGroup@1000000005 : Record 50007;
      TEXT002@1000000006 : TextConst 'ENU=%1_%2_%3_%4.xml;ENG=%1_%2_%3_%4.xml';
      DateTimeString@1000000007 : Text;
      TEXT003@1000000008 : TextConst 'ENU=masterCatalog_TheModist.xml;ENG=masterCatalog_TheModist.xml';
    BEGIN
      //DOC OP9031 LF 10/10/2016 -
      //This function builds the file name of the Demandware product catalog integration file and appends it to the path to the working directory
      ModisSetup.GET;
      IntegrationProcessingGroup.GET(ModisSetup."Demandware Integration Type",ModisSetup."Demandware Catalogue Group");
      CompanyInfo.GET;

      DateTimeString := FORMAT(CURRENTDATETIME,0,'<year4>-<month,2>-<day,2>-<Hours24,2><Minutes,2>');

      {
      IF IntegrationProcessingGroup."Timestamp Filename" THEN
        FileName := STRSUBSTNO(TEXT002,IntegrationProcessingGroup."File Prefix",COMPANYNAME,CompanyInfo."Country/Region Code",DateTimeString)
      ELSE
        FileName := STRSUBSTNO(TEXT001,IntegrationProcessingGroup."File Prefix",COMPANYNAME,CompanyInfo."Country/Region Code");
      }

      FileName := TEXT003;

      EXIT(FileManagement.CombinePath(IntegrationProcessingGroup."Working Location",FileName));
      //DOC OP9031 LF 10/10/2016 -+
    END;

    PROCEDURE InventoryFileName@1000000001() : Text;
    VAR
      ModisSetup@1000000000 : Record 50000;
      TEXT001@1000000002 : TextConst 'ENU=inventory_%1_%2.xml;ENG=inventory_%1_%2.xml';
      FileName@1000000001 : Text;
      CompanyInfo@1000000003 : Record 79;
      FileManagement@1000000004 : Codeunit 419;
      IntegrationProcessingGroup@1000000005 : Record 50007;
      TEXT002@1000000006 : TextConst 'ENU=inventory_%1_%2_%3.xml;ENG=inventory_%1_%2_%3.xml';
      DateTimeString@1000000007 : Text;
      TEXT003@1000000008 : TextConst 'ENU=InventoryFull_%1.xml;ENG=InventoryFull_%1.xml';
    BEGIN
      //DOC OP9031 LF 11/10/2016 -
      //This function builds the file name of the inventory integration file and appends it to the path to the working directory
      ModisSetup.GET;
      IntegrationProcessingGroup.GET(ModisSetup."Demandware Integration Type",ModisSetup."Demandware Inventory Group");
      CompanyInfo.GET;

      DateTimeString := FORMAT(CURRENTDATETIME,0,'<year4>-<month,2>-<day,2>-<Hours24,2><Minutes,2>');

      FileName := STRSUBSTNO(TEXT003,DateTimeString);
      FileName := CONVERTSTR(FileName,' ','-');

      EXIT(FileManagement.CombinePath(IntegrationProcessingGroup."Working Location",FileName));
      //DOC OP9031 LF 11/10/2016 -+
    END;

    PROCEDURE InventoryDeltaFileName@1000000019() : Text;
    VAR
      ModisSetup@1000000000 : Record 50000;
      FileName@1000000001 : Text;
      CompanyInfo@1000000003 : Record 79;
      FileManagement@1000000004 : Codeunit 419;
      IntegrationProcessingGroup@1000000005 : Record 50007;
      DateTimeString@1000000007 : Text;
      TEXT003@1000000008 : TextConst 'ENU=Inventory_%1.xml;ENG=Inventory_%1.xml';
    BEGIN
      //DOC OP9031 LF 06/02/2017 -
      //This function builds the file name of the inventory Delta integration file and appends it to the path to the working directory
      ModisSetup.GET;
      IntegrationProcessingGroup.GET(ModisSetup."Demandware Integration Type",ModisSetup."Demandware Inventory Group");
      CompanyInfo.GET;

      DateTimeString := FORMAT(CURRENTDATETIME,0,'<year4>-<month,2>-<day,2>-<Hours24,2><Minutes,2>');

      FileName := STRSUBSTNO(TEXT003,DateTimeString);
      FileName := CONVERTSTR(FileName,' ','-');

      EXIT(FileManagement.CombinePath(IntegrationProcessingGroup."Working Location",FileName));
      //DOC OP9031 LF 11/10/2016 -+
    END;

    PROCEDURE PricebookFileName@1000000002(pCurrCode@1000000005 : Code[10];pGroupCode@1000000006 : Code[10]) : Text;
    VAR
      ModisSetup@1000000000 : Record 50000;
      TEXT001@1000000002 : TextConst 'ENU=Pricebook_%1_%2_%3_%4.xml;ENG=Pricebook_%1_%2_%3_%4.xml';
      FileName@1000000001 : Text;
      CompanyInfo@1000000003 : Record 79;
      FileManagement@1000000004 : Codeunit 419;
      IntegrationProcessingGroup@1000000007 : Record 50007;
      DateTimeString@1000000008 : Text;
      TEXT002@1000000009 : TextConst 'ENU=Pricebook_%1_%2_%3_%4_%5.xml;ENG=Pricebook_%1_%2_%3_%4_%5.xml';
    BEGIN
      //DOC OP9031 LF 11/10/2016 -
      //This function builds the file name of the inventory integration file and appends it to the path to the working directory
      ModisSetup.GET;
      IntegrationProcessingGroup.GET(ModisSetup."Demandware Integration Type",ModisSetup."Demandware PriceBook Group");
      CompanyInfo.GET;
      //DOC OP9031 RK 19/01/17 -
      //FileName := STRSUBSTNO(TEXT001,COMPANYNAME,CompanyInfo."Country/Region Code",pCurrCode,pGroupCode);
      DateTimeString := FORMAT(CURRENTDATETIME,0,'<year4>-<month,2>-<day,2>-<Hours24,2><Minutes,2>');
      IF IntegrationProcessingGroup."Timestamp Filename" THEN
        FileName := STRSUBSTNO(TEXT002,COMPANYNAME,CompanyInfo."Country/Region Code",pCurrCode,pGroupCode,DateTimeString)
      ELSE
        FileName := STRSUBSTNO(TEXT001,COMPANYNAME,CompanyInfo."Country/Region Code",pCurrCode,pGroupCode);
      //DOC OP9031 RK 19/01/17 +
      EXIT(FileManagement.CombinePath(IntegrationProcessingGroup."Working Location",FileName));
      //DOC OP9031 LF 11/10/2016 -+
    END;

    [TryFunction]
    PROCEDURE RenameFiles@1000000020(FolderPath@1000000001 : Text;fromExtension@1000000002 : Text;toExtension@1000000003 : Text);
    VAR
      FileRec@1000000000 : Record 2000000022;
      FileName@1000000004 : Text;
      FileMgmnt@1000000005 : Codeunit 419;
      Path@1000000006 : DotNet "'mscorlib'.System.IO.Path";
      RenamedFile@1000000007 : Text;
    BEGIN
      //DOC OP9031 RK 12/10/16 -
      IF COPYSTR(FolderPath,STRLEN(FolderPath)) <> '\' THEN
        FolderPath := FolderPath + '\';
      IF COPYSTR(fromExtension,1,1) <> '.' THEN
        fromExtension := '.' + fromExtension;
      IF COPYSTR(toExtension,1,1) <> '.' THEN
        toExtension := '.' + toExtension;
      FileRec.SETRANGE(Path,FolderPath);
      FileRec.SETRANGE("Is a file",TRUE);
      FileRec.SETFILTER(Name,'%1','*' + fromExtension);
      IF FileRec.FINDFIRST THEN BEGIN
        REPEAT
          RENAME(FolderPath + FileRec.Name,COPYSTR(FolderPath + FileRec.Name,1,STRLEN(FolderPath + FileRec.Name) - STRLEN(fromExtension)) + toExtension);
        UNTIL FileRec.NEXT = 0;
      END;
      //DOC OP9031 RK 12/10/16 +
    END;

    [TryFunction]
    PROCEDURE UploadftpFiles@1000000010(FolderPath@1000000003 : Text;ArchivePath@1000000004 : Text;fromExtension@1000000006 : Text;toExtension@1000000005 : Text;sftpServerCode@1000000007 : Code[20];ftpFolderPath@1000000008 : Text;Renameonftp@1000000009 : Boolean);
    VAR
      FileRec@1000000000 : Record 2000000022;
      sftpServer@1000000002 : Record 9062267;
      sftpIntegration@1000000001 : Codeunit 9062505;
    BEGIN
      //DOC OP9031 RK 12/10/16 -
      IF COPYSTR(fromExtension,1,1) <> '.' THEN
        fromExtension := '.' + fromExtension;
      IF COPYSTR(toExtension,1,1) <> '.' THEN
        toExtension := '.' + toExtension;
      IF COPYSTR(FolderPath,STRLEN(FolderPath)) <> '\' THEN
        FolderPath := FolderPath + '\';
      IF COPYSTR(ftpFolderPath,STRLEN(ftpFolderPath)) <> '/' THEN
        ftpFolderPath := ftpFolderPath + '/';
      FileRec.SETRANGE(Path,FolderPath);
      FileRec.SETRANGE("Is a file",TRUE);
      FileRec.SETFILTER(Name,'%1','*' + fromExtension);
      IF FileRec.FINDFIRST THEN BEGIN
        sftpServer.GET(sftpServerCode);
        sftpIntegration.Connect(sftpServer.Address,sftpServer.Port,sftpServer.Login,sftpServer.Password);
        REPEAT
          sftpIntegration.UploadFile(FolderPath + FileRec.Name,ftpFolderPath + FileRec.Name);
          IF Renameonftp THEN
            sftpIntegration.MoveFile(ftpFolderPath + FileRec.Name,ftpFolderPath + COPYSTR(FileRec.Name,1,STRLEN(FileRec.Name) - STRLEN(fromExtension)) + toExtension);
          RENAME(FolderPath + FileRec.Name,ArchivePath + FileRec.Name);
        UNTIL FileRec.NEXT = 0;
        sftpIntegration.Disconnect();
        CLEAR(sftpIntegration);
      END;
      //DOC OP9031 RK 12/10/16 +
    END;

    [TryFunction]
    PROCEDURE DownloadftpFiles@1000000008(FolderPath@1000000005 : Text;sftpServerCode@1000000004 : Code[20];ftpFolderPath@1000000003 : Text);
    VAR
      sftpServer@1000000001 : Record 9062267;
      sftpIntegration@1000000000 : Codeunit 9062505;
      FileListBuffer@1000000002 : TEMPORARY Record 9062730;
      FTPIntegrationLog@1000000006 : Record 50030;
    BEGIN
      //DOC OP9031 RK 03/11/16 -
      IF COPYSTR(ftpFolderPath,STRLEN(ftpFolderPath)) <> '/' THEN
        ftpFolderPath := ftpFolderPath + '/';
      IF COPYSTR(FolderPath,STRLEN(FolderPath)) <> '\' THEN
        FolderPath := FolderPath + '\';
      sftpServer.GET(sftpServerCode);
      CLEAR(sftpIntegration);
      sftpIntegration.SetBufferSize(sftpServer."Buffer Size");
      sftpIntegration.Connect(sftpServer.Address,sftpServer.Port,sftpServer.Login,sftpServer.Password);
      FileListBuffer.DELETEALL;
      sftpIntegration.ListFiles(ftpFolderPath,FileListBuffer);
      FileListBuffer.RESET;
      FileListBuffer.SETFILTER(Name,'<>@*.filepart'); //DOC IN38893 NC 23/05/17 +-
      IF FileListBuffer.FINDFIRST THEN
        REPEAT
          sftpIntegration.DownloadFile(ftpFolderPath + FileListBuffer.Name,FolderPath + FileListBuffer.Name);
          //DOC IN41925 EI 26/07/2017 -
          IF FTPIntegrationLog.READPERMISSION THEN BEGIN
            CLEAR(FTPIntegrationLog);
            FTPIntegrationLog.FTPFilename := FileListBuffer.Name;
            FTPIntegrationLog.FilenameDateTime:= CURRENTDATETIME;
            FTPIntegrationLog.FTPAction := 'Download';
            FTPIntegrationLog.INSERT;
          END;
          //DOC IN41925 EI 26/07/2017 +
          sftpIntegration.DeleteFile(ftpFolderPath + FileListBuffer.Name);

        UNTIL FileListBuffer.NEXT = 0;
      sftpIntegration.Disconnect;
      CLEAR(sftpIntegration);
      //DOC OP9031 RK 03/11/16 +
    END;

    PROCEDURE OrderUpdateFileName@1000000003() : Text;
    VAR
      ModisSetup@1000000000 : Record 50000;
      FileName@1000000001 : Text;
      CompanyInfo@1000000003 : Record 79;
      FileManagement@1000000004 : Codeunit 419;
      TEXT001@1000000006 : TextConst 'ENU=salesOrderUpdate_%1_%2.xml;ENG=salesOrderUpdate_%1_%2.xml';
      DateTimeString@1000000002 : Text;
      IntegrationProcessingGroup@1000000007 : Record 50007;
      TEXT002@1000000008 : TextConst 'ENU=salesOrderUpdate_%1_%2_%3.xml;ENG=salesOrderUpdate_%1_%2_%3.xml';
    BEGIN
      //DOC OP9031 LF 11/10/2016 -
      //This function builds the file name of the Order Update integration file and appends it to the path to the working directory
      ModisSetup.GET;

      IntegrationProcessingGroup.GET(ModisSetup."Demandware Integration Type",ModisSetup."Demandware Order Update Group");

      CompanyInfo.GET;

      DateTimeString := FORMAT(CURRENTDATETIME,0,'<year4>-<month,2>-<day,2>-<Hours24,2><Minutes,2>');

      //FileName := STRSUBSTNO(TEXT001,COMPANYNAME,CompanyInfo."Country/Region Code",DateTimeString);

      IF IntegrationProcessingGroup."Timestamp Filename" THEN
        FileName := STRSUBSTNO(TEXT002,COMPANYNAME,CompanyInfo."Country/Region Code",DateTimeString)
      ELSE
        FileName := STRSUBSTNO(TEXT001,COMPANYNAME,CompanyInfo."Country/Region Code");

      EXIT(FileManagement.CombinePath(IntegrationProcessingGroup."Working Location",FileName));
      //DOC OP9031 LF 11/10/2016 +
    END;

    PROCEDURE ItemStatusDescription@1000000004(ItemStatus@1000000000 : ' ,Processing,Picked,Shipped,Cancelled') : Text;
    BEGIN
      //DOC OP9031 LF 03/11/2016 -
      //This function returns a full status description for the option paramater
      CASE ItemStatus OF
        ItemStatus::Cancelled  : EXIT('This item has been cancelled');
        ItemStatus::Shipped    : EXIT('This item has been shipped');
        ItemStatus::Picked     : EXIT('This item is being Picked');
        ItemStatus::Processing : EXIT('This item is being Procesed');
        ELSE EXIT('');
      END;
      //DOC OP9031 LF 03/11/2016 +
    END;

    PROCEDURE Nav3PLCatalogFileName@1000000005() : Text;
    VAR
      ModisSetup@1000000000 : Record 50000;
      TEXT001@1000000002 : TextConst 'ENU=nav3pl_catalogue_%1_%2.xml;ENG=nav3pl_catalogue_%1_%2.xml';
      FileName@1000000001 : Text;
      CompanyInfo@1000000003 : Record 79;
      FileManagement@1000000004 : Codeunit 419;
      IntegrationProcessingGroup@1000000005 : Record 50007;
      DateTimeString@1000000006 : Text;
      TEXT002@1000000007 : TextConst 'ENU=nav3pl_catalogue_%1_%2_%3.xml;ENG=nav3pl_catalogue_%1_%2_%3.xml';
    BEGIN
      //DOC OP9031 LF 07/11/2016 -
      //This function builds the file name of the product catalog integration file and appends it to the path to the working directory
      ModisSetup.GET;

      IntegrationProcessingGroup.GET(ModisSetup."3PL Integration Type",ModisSetup."3PL Catalogue Group");

      CompanyInfo.GET;

      DateTimeString := FORMAT(CURRENTDATETIME,0,'<year4>-<month,2>-<day,2>-<Hours24><Minutes,2>');

      IF IntegrationProcessingGroup."Timestamp Filename" THEN
        FileName := STRSUBSTNO(TEXT002,COMPANYNAME,CompanyInfo."Country/Region Code",DateTimeString)
      ELSE
        FileName := STRSUBSTNO(TEXT001,COMPANYNAME,CompanyInfo."Country/Region Code");

      EXIT(FileManagement.CombinePath(IntegrationProcessingGroup."Working Location",FileName));
      //DOC OP9031 LF 10/10/2016 -+
    END;

    PROCEDURE Nav3PLASNFileName@1000000006() : Text;
    VAR
      ModisSetup@1000000000 : Record 50000;
      TEXT001@1000000002 : TextConst 'ENU=nav3pl_ASN_%1_%2.xml;ENG=nav3pl_ASN_%1_%2.xml';
      FileName@1000000001 : Text;
      CompanyInfo@1000000003 : Record 79;
      FileManagement@1000000004 : Codeunit 419;
      IntegrationProcessingGroup@1000000005 : Record 50007;
      DateTimeString@1000000006 : Text;
      TEXT002@1000000007 : TextConst 'ENU=nav3pl_ASN_%1_%2_%3.xml;ENG=nav3pl_ASN_%1_%2_%3.xml';
    BEGIN
      //DOC OP9031 LF 10/11/2016 -
      //This function builds the file name of the ASN integration file and appends it to the path to the working directory
      ModisSetup.GET;

      IntegrationProcessingGroup.GET(ModisSetup."3PL Integration Type",ModisSetup."3PL ASN Group");

      CompanyInfo.GET;

      DateTimeString := FORMAT(CURRENTDATETIME,0,'<year4>-<month,2>-<day,2>-<Hours24><Minutes,2><Seconds,2>');

      IF IntegrationProcessingGroup."Timestamp Filename" THEN
        FileName := STRSUBSTNO(TEXT002,COMPANYNAME,CompanyInfo."Country/Region Code",DateTimeString)
      ELSE
        FileName := STRSUBSTNO(TEXT001,COMPANYNAME,CompanyInfo."Country/Region Code");

      EXIT(FileManagement.CombinePath(IntegrationProcessingGroup."Working Location",FileName));
      //DOC OP9031 LF 10/10/2016 -+
    END;

    PROCEDURE Nav3PLOrderFileName@1000000007() : Text;
    VAR
      ModisSetup@1000000000 : Record 50000;
      FileName@1000000001 : Text;
      CompanyInfo@1000000003 : Record 79;
      FileManagement@1000000004 : Codeunit 419;
      TEXT001@1000000006 : TextConst 'ENU=orders_%1_%2.xml;ENG=orders_%1_%2.xml';
      DateTimeString@1000000002 : Text;
      IntegrationProcessingGroup@1000000007 : Record 50007;
      TEXT002@1000000005 : TextConst 'ENU=orders_%1_%2_%3.xml;ENG=orders_%1_%2_%3.xml';
    BEGIN
      //This function builds the file name of the 3PL order file and appends it to the path to the working directory
      ModisSetup.GET;

      IntegrationProcessingGroup.GET(ModisSetup."3PL Integration Type",ModisSetup."3PL Order Group");

      CompanyInfo.GET;

      DateTimeString := FORMAT(CURRENTDATETIME,0,'<year4>-<month,2>-<day,2>-<Hours24><Minutes,2><Seconds,2>');

      IF IntegrationProcessingGroup."Timestamp Filename" THEN
        FileName := STRSUBSTNO(TEXT002,COMPANYNAME,CompanyInfo."Country/Region Code",DateTimeString)
      ELSE
        FileName := STRSUBSTNO(TEXT001,COMPANYNAME,CompanyInfo."Country/Region Code");


      EXIT(FileManagement.CombinePath(IntegrationProcessingGroup."Working Location",FileName));
    END;

    PROCEDURE Nav3PLPurchReturnFileName@1000000009() : Text;
    VAR
      ModisSetup@1000000000 : Record 50000;
      FileName@1000000001 : Text;
      CompanyInfo@1000000003 : Record 79;
      FileManagement@1000000004 : Codeunit 419;
      TEXT001@1000000006 : TextConst 'ENU=purchreturn_%1_%2.xml;ENG=purchreturn_%1_%2.xml';
      DateTimeString@1000000002 : Text;
      IntegrationProcessingGroup@1000000007 : Record 50007;
      TEXT002@1000000005 : TextConst 'ENU=purchreturn_%1_%2_%3.xml;ENG=purchreturn_%1_%2_%3.xml';
    BEGIN
      //This function builds the file name of the 3PL purchase return order file and appends it to the path to the working directory
      ModisSetup.GET;

      IntegrationProcessingGroup.GET(ModisSetup."3PL Integration Type",ModisSetup."3PL Purchase Return Group");

      CompanyInfo.GET;

      DateTimeString := FORMAT(CURRENTDATETIME,0,'<year4>-<month,2>-<day,2>-<Hours24><Minutes,2><Seconds,2>');

      IF IntegrationProcessingGroup."Timestamp Filename" THEN
        FileName := STRSUBSTNO(TEXT002,COMPANYNAME,CompanyInfo."Country/Region Code",DateTimeString)
      ELSE
        FileName := STRSUBSTNO(TEXT001,COMPANYNAME,CompanyInfo."Country/Region Code");

      //FileName := STRSUBSTNO(TEXT001,COMPANYNAME,CompanyInfo."Country/Region Code",DateTimeString);

      EXIT(FileManagement.CombinePath(IntegrationProcessingGroup."Working Location",FileName));
    END;

    PROCEDURE Nav3PLTransferOrderFileName@1000000011() : Text;
    VAR
      ModisSetup@1000000000 : Record 50000;
      TEXT001@1000000002 : TextConst 'ENU=nav3pl_TransferOrder_%1_%2.xml;ENG=nav3pl_TransferOrder_%1_%2.xml';
      FileName@1000000001 : Text;
      CompanyInfo@1000000003 : Record 79;
      FileManagement@1000000004 : Codeunit 419;
      IntegrationProcessingGroup@1000000005 : Record 50007;
      TEXT002@1000000006 : TextConst 'ENU=nav3pl_TransferOrder_%1_%2_%3.xml;ENG=nav3pl_TransferOrder_%1_%2_%3.xml';
      DateTimeString@1000000007 : Text;
    BEGIN
      //DOC OP9031 LF 08/12/2016 -
      //This function builds the file name of the Transfer Order integration file and appends it to the path to the working directory
      ModisSetup.GET;

      IntegrationProcessingGroup.GET(ModisSetup."3PL Integration Type",ModisSetup."3PL Transfer Order Group");

      CompanyInfo.GET;

      DateTimeString := FORMAT(CURRENTDATETIME,0,'<year4>-<month,2>-<day,2>-<Hours24><Minutes,2>');

      IF IntegrationProcessingGroup."Timestamp Filename" THEN
        FileName := STRSUBSTNO(TEXT002,COMPANYNAME,CompanyInfo."Country/Region Code",DateTimeString)
      ELSE
        FileName := STRSUBSTNO(TEXT001,COMPANYNAME,CompanyInfo."Country/Region Code");

      EXIT(FileManagement.CombinePath(IntegrationProcessingGroup."Working Location",FileName));
      //DOC OP9031 LF 08/12/2016 -+
    END;

    [TryFunction]
    PROCEDURE TransferFTPfiles@1000000012(FolderPath@1000000003 : Text;ArchivePath@1000000004 : Text;fromExtension@1000000006 : Text;toExtension@1000000005 : Text;sftpServerCode@1000000007 : Code[20];ftpFolderPath@1000000008 : Text;ftpArchiveFolderPath@1000000015 : Text;Renameonftp@1000000009 : Boolean);
    VAR
      FileRec@1000000000 : Record 2000000022;
      sftpServer@1000000002 : Record 9062267;
      sftpIntegration@1000000001 : Codeunit 9062505;
      FileMgmnt@1000000011 : Codeunit 419;
      Path@1000000010 : DotNet "'mscorlib'.System.IO.Path";
      TempSFTPFileName@1000000012 : Text;
      FullFileName@1000000013 : Text;
      FullSFTPFileName@1000000014 : Text;
      FullArchiveFileName@1000000016 : Text;
      SFTPArchiveFileName@1000000017 : Text;
      TimestampedFilename@1000000018 : Text;
      FTPArchive@1000000019 : Boolean;
      ModisSetup@1000000021 : Record 50000;
      IntegrationProcessingGroup@1000000020 : Record 50007;
      IntegrationFunctions@1000000022 : Codeunit 50008;
    BEGIN
      //DOC OP9031 RK 12/10/16 -
      ModisSetup.GET;

      IntegrationProcessingGroup.GET(ModisSetup."3PL Integration Type",ModisSetup."3PL Transfer Order Group");

      IF COPYSTR(fromExtension,1,1) <> '.' THEN
        fromExtension := '.' + fromExtension;
      IF COPYSTR(toExtension,1,1) <> '.' THEN
        toExtension := '.' + toExtension;
      FileRec.SETRANGE(Path,FolderPath);
      FileRec.SETRANGE("Is a file",TRUE);
      FileRec.SETFILTER(Name,'%1','*' + fromExtension);
      IF FileRec.FINDFIRST THEN BEGIN
        sftpServer.GET(sftpServerCode);
        CLEAR(sftpIntegration);
        sftpIntegration.SetBufferSize(sftpServer."Buffer Size");
        sftpIntegration.Connect(sftpServer.Address,sftpServer.Port,sftpServer.Login,sftpServer.Password);

        REPEAT
          FullArchiveFileName:='';
          SFTPArchiveFileName:='';
          TimestampedFilename:='';
          FTPArchive:=FALSE;
          FullFileName     := FileMgmnt.CombinePath(FolderPath,FileRec.Name); //local file path and filename to transfer
          FullSFTPFileName := CombineUnixPaths(ftpFolderPath,FileRec.Name);   //remote file path and filename with .xml extension for use on sftp server
          TempSFTPFileName := Path.ChangeExtension(FullSFTPFileName,toExtension); //remote file path and filename with temp extension
          IF ArchivePath <> '' THEN BEGIN
            IF NOT IntegrationProcessingGroup."Timestamp Filename" THEN
              TimestampedFilename := DateStampFile(FileRec.Name) //change the filename to include timestamp in name
            ELSE
              TimestampedFilename := FileRec.Name; //the file name is already timestamped

            FullArchiveFileName := FileMgmnt.CombinePath(ArchivePath,TimestampedFilename); //local archive path with filename stamped with datetime
            IF ftpArchiveFolderPath <> '' THEN
              SFTPArchiveFileName := CombineUnixPaths(ftpArchiveFolderPath,TimestampedFilename); //create the remote archive filename and path
            FTPArchive:=(SFTPArchiveFileName<>'');
          END;

          //upload file to SFTP server (with .tmp extension)
          sftpIntegration.UploadFile(FullFileName,TempSFTPFileName); //upload the local file to the sftp server as file with .temp extension

          IF Renameonftp THEN BEGIN
            IF sftpIntegration.FileExists(ftpFolderPath,FileRec.Name) THEN //if the file exists on the sftp server then we will delete it
              sftpIntegration.DeleteFile(FullSFTPFileName); //if there is a file in the remote folder we will delete it ahead of moving the file

            sftpIntegration.MoveFile(TempSFTPFileName,FullSFTPFileName); //switch the file with temp extension to .xml extension
          END;

          //upload the file to sftp archive
          IF FTPArchive THEN
            sftpIntegration.UploadFile(FullFileName,SFTPArchiveFileName);

          //Archive the file on the local server and delete original file
          IF FullArchiveFileName <> '' THEN BEGIN
            IntegrationFunctions.MoveFile(FullFileName,FullArchiveFileName);
          END;

        UNTIL FileRec.NEXT = 0;
        //clean up
        sftpIntegration.Disconnect();
        CLEAR(sftpIntegration);
      END;
      //DOC OP9031 RK 12/10/16 +
    END;

    PROCEDURE CombineUnixPaths@1000000013(FilePath@1000000000 : Text;FileName@1000000001 : Text) : Text;
    VAR
      Path@1000000002 : DotNet "'mscorlib'.System.IO.Path";
      TempPath@1000000003 : DotNet "'mscorlib'.System.String";
    BEGIN
      //This function combines a path and filename in the unix format
      //for use with SFTP and FTP operations
        TempPath := Path.Combine(FilePath,FileName);
        TempPath := TempPath.Replace('\','/');
      EXIT(TempPath.ToString);
    END;

    PROCEDURE DateStampFile@1000000016(Filename@1000000000 : Text) : Text;
    VAR
      DateTimeVar@1000000001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      Extension@1000000002 : Text;
      Path@1000000003 : DotNet "'mscorlib'.System.IO.Path";
      TempFile@1000000004 : Text;
    BEGIN
      //This function converts a filename to include a stimestamp in the name
      Extension := Path.GetExtension(Filename);
      TempFile := Path.GetFileNameWithoutExtension(Filename) + '-' + FORMAT(CURRENTDATETIME,0,'<Year4><Month,2><Day,2><Hours24,2><Minutes,2>') + Extension;
      EXIT(TempFile);
    END;

    PROCEDURE ItemJnlDocumentNo@1000000014() : Text;
    BEGIN
      EXIT('ITM'+ FORMAT(CURRENTDATETIME,0,'<year4><month,2><day,2><Hours24><Minutes,2><Seconds,2>'));
    END;

    PROCEDURE ReclassJnlDocumentNo@1000000015() : Text;
    BEGIN
      EXIT('ITM'+ FORMAT(CURRENTDATETIME,0,'<year4><month,2><day,2><Hours24><Minutes,2><Seconds,2>'));
    END;

    PROCEDURE PhysInvJnlDocumentNo@1000000018() : Text;
    BEGIN
      EXIT('PHSINV'+ FORMAT(CURRENTDATETIME,0,'<year4><month,2><day,2><Hours24><Minutes,2><Seconds,2>'));
    END;

    PROCEDURE Nav3PLGRNFileName@1000000017() : Text;
    VAR
      ModisSetup@1000000000 : Record 50000;
      TEXT001@1000000002 : TextConst 'ENU=TEMP-GRN_%1_%2.xml;ENG=TEMP-GRN_%1_%2.xml';
      FileName@1000000001 : Text;
      CompanyInfo@1000000003 : Record 79;
      FileManagement@1000000004 : Codeunit 419;
      IntegrationProcessingGroup@1000000005 : Record 50007;
      DateTimeString@1000000006 : Text;
      TEXT002@1000000007 : TextConst 'ENU=TEMP-GRN_%1_%2_%3.xml;ENG=TEMP-GRN_%1_%2_%3.xml';
    BEGIN
      //DOC OP9031 LF 10/11/2016 -
      //This function builds the file name of the ASN integration file and appends it to the path to the working directory
      ModisSetup.GET;

      IntegrationProcessingGroup.GET(ModisSetup."3PL Integration Type",ModisSetup."3PL GRN Group");

      CompanyInfo.GET;

      DateTimeString := FORMAT(CURRENTDATETIME,0,'<year4>-<month,2>-<day,2>-<Hours24><Minutes,2><Seconds,2>');

      FileName := STRSUBSTNO(TEXT002,COMPANYNAME,CompanyInfo."Country/Region Code",DateTimeString);

      EXIT(FileManagement.CombinePath(IntegrationProcessingGroup."Working Location",FileName));
      //DOC OP9031 LF 10/10/2016 -+
    END;

    [TryFunction]
    PROCEDURE DownloadFTPFiles2@1000000021(FolderPath@1000000005 : Text;sftpServerCode@1000000004 : Code[20];ftpFolderPath@1000000003 : Text;ftpArchFolderPath@1000000007 : Text);
    VAR
      sftpServer@1000000001 : Record 9062267;
      sftpIntegration@1000000000 : Codeunit 9062505;
      FileListBuffer@1000000002 : TEMPORARY Record 9062730;
      FTPIntegrationLog@1000000006 : Record 50030;
    BEGIN
      //DOC OP9031 RK 03/11/16 -
      IF COPYSTR(ftpFolderPath,STRLEN(ftpFolderPath)) <> '/' THEN
        ftpFolderPath := ftpFolderPath + '/';
      IF COPYSTR(FolderPath,STRLEN(FolderPath)) <> '\' THEN
        FolderPath := FolderPath + '\';
      sftpServer.GET(sftpServerCode);
      CLEAR(sftpIntegration);
      sftpIntegration.SetBufferSize(sftpServer."Buffer Size");
      sftpIntegration.Connect(sftpServer.Address,sftpServer.Port,sftpServer.Login,sftpServer.Password);
      FileListBuffer.DELETEALL;
      sftpIntegration.ListFiles(ftpFolderPath,FileListBuffer);
      FileListBuffer.RESET;
      FileListBuffer.SETFILTER(Name,'<>@*.filepart'); //DOC IN38893 NC 23/05/17 +-
      IF FileListBuffer.FINDFIRST THEN
        REPEAT
          sftpIntegration.DownloadFile(ftpFolderPath + FileListBuffer.Name,FolderPath + FileListBuffer.Name);
          //DOC IN41925 EI 26/07/2017 -
          IF FTPIntegrationLog.READPERMISSION THEN BEGIN
            CLEAR(FTPIntegrationLog);
            FTPIntegrationLog.FTPFilename := FileListBuffer.Name;
            FTPIntegrationLog.FilenameDateTime:= CURRENTDATETIME;
            FTPIntegrationLog.FTPAction := 'Download';
            FTPIntegrationLog.INSERT;
          END;
          //DOC IN41925 EI 26/07/2017 +

          //sftpIntegration.DeleteFile(ftpFolderPath + FileListBuffer.Name);
          IF ftpArchFolderPath <> '' THEN
            sftpIntegration.MoveFile(ftpFolderPath + FileListBuffer.Name,ftpArchFolderPath + '\' + FileListBuffer.Name);

        UNTIL FileListBuffer.NEXT = 0;
      sftpIntegration.Disconnect;
      CLEAR(sftpIntegration);
      //DOC OP9031 RK 03/11/16 +
    END;

    [TryFunction]
    PROCEDURE TransferFTPfiles2@1170000000(FolderPath@1000000003 : Text;ArchivePath@1000000004 : Text;fromExtension@1000000006 : Text;toExtension@1000000005 : Text;sftpServerCode@1000000007 : Code[20];ftpFolderPath@1000000008 : Text;ftpArchiveFolderPath@1000000015 : Text;Renameonftp@1000000009 : Boolean);
    VAR
      FileRec@1000000000 : Record 2000000022;
      sftpServer@1000000002 : Record 9062267;
      sftpIntegration@1000000001 : Codeunit 9062505;
      FileMgmnt@1000000011 : Codeunit 419;
      Path@1000000010 : DotNet "'mscorlib'.System.IO.Path";
      TempSFTPFileName@1000000012 : Text;
      FullFileName@1000000013 : Text;
      FullSFTPFileName@1000000014 : Text;
      FullArchiveFileName@1000000016 : Text;
      SFTPArchiveFileName@1000000017 : Text;
      TimestampedFilename@1000000018 : Text;
      FTPArchive@1000000019 : Boolean;
      ModisSetup@1000000021 : Record 50000;
      IntegrationProcessingGroup@1000000020 : Record 50007;
      IntegrationFunctions@1000000022 : Codeunit 50008;
    BEGIN
      //DOC OP9031 RK 12/10/16 -
      ModisSetup.GET;

      IntegrationProcessingGroup.GET(ModisSetup."3PL Integration Type",ModisSetup."3PL Transfer Order Group");

      IF COPYSTR(fromExtension,1,1) <> '.' THEN
        fromExtension := '.' + fromExtension;
      IF COPYSTR(toExtension,1,1) <> '.' THEN
        toExtension := '.' + toExtension;
      FileRec.SETRANGE(Path,FolderPath);
      FileRec.SETRANGE("Is a file",TRUE);
      FileRec.SETFILTER(Name,'%1','*' + fromExtension);
      IF FileRec.FINDFIRST THEN BEGIN
        sftpServer.GET(sftpServerCode);
        CLEAR(sftpIntegration);
        sftpIntegration.SetBufferSize(sftpServer."Buffer Size");
        sftpIntegration.Connect(sftpServer.Address,sftpServer.Port,sftpServer.Login,sftpServer.Password);

        REPEAT
          FullArchiveFileName:='';
          SFTPArchiveFileName:='';
          TimestampedFilename:='';
          FTPArchive:=FALSE;
          FullFileName     := FileMgmnt.CombinePath(FolderPath,FileRec.Name); //local file path and filename to transfer
          FullSFTPFileName := CombineUnixPaths(ftpFolderPath,FileRec.Name);   //remote file path and filename with .xml extension for use on sftp server
          TempSFTPFileName := Path.ChangeExtension(FullSFTPFileName,toExtension); //remote file path and filename with temp extension
          IF ArchivePath <> '' THEN BEGIN
            IF NOT IntegrationProcessingGroup."Timestamp Filename" THEN
              TimestampedFilename := DateStampFile(FileRec.Name) //change the filename to include timestamp in name
            ELSE
              TimestampedFilename := FileRec.Name; //the file name is already timestamped

            FullArchiveFileName := FileMgmnt.CombinePath(ArchivePath,TimestampedFilename); //local archive path with filename stamped with datetime
            IF ftpArchiveFolderPath <> '' THEN
              SFTPArchiveFileName := CombineUnixPaths(ftpArchiveFolderPath,TimestampedFilename); //create the remote archive filename and path
            FTPArchive:=(SFTPArchiveFileName<>'');
          END;

          //upload file to SFTP server (with .tmp extension)
          sftpIntegration.UploadFile(FullFileName,TempSFTPFileName); //upload the local file to the sftp server as file with .temp extension

          IF Renameonftp THEN BEGIN
            IF sftpIntegration.FileExists(ftpFolderPath,FileRec.Name) THEN; //if the file exists on the sftp server then we will delete it
              //sftpIntegration.DeleteFile(FullSFTPFileName); //if there is a file in the remote folder we will delete it ahead of moving the file

            sftpIntegration.MoveFile(TempSFTPFileName,FullSFTPFileName); //switch the file with temp extension to .xml extension
          END;

          //upload the file to sftp archive
          IF FTPArchive THEN
            sftpIntegration.UploadFile(FullFileName,SFTPArchiveFileName);

          //Archive the file on the local server and delete original file
          IF FullArchiveFileName <> '' THEN BEGIN
            IntegrationFunctions.MoveFile(FullFileName,FullArchiveFileName);
          END;

        UNTIL FileRec.NEXT = 0;
        //clean up
        sftpIntegration.Disconnect();
        CLEAR(sftpIntegration);
      END;
      //DOC OP9031 RK 12/10/16 +
    END;

    BEGIN
    {
      //DOC OP9031 LF 10/10/2016 - Created - General managment codeunit to contain shared functionality related to the integration with the Web platform
      //DOC OP9031 RK 12/10/16 - New functions to rename and upload files to ftp.
      //DOC OP9031 RK 03/11/16 - New functions to download files from ftp.
      //DOC OP9031 RK 19/01/17 - Timestamp pricebook files.
      //DOC IN38893 NC 23/05/17 - Exclude download files from FTP that are incompleted. (.filepart)
      //DOC IN41925 EI 26/07/2017 -duplicate orders FTP Inegration Log
    }
    END.
  }
}

