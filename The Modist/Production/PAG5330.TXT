OBJECT Page 5330 CRM Connection Setup
{
  OBJECT-PROPERTIES
  {
    Date=23/10/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43402;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Microsoft Dynamics CRM Connection Setup;
               ENG=Microsoft Dynamics CRM Connection Setup];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table5330;
    PromotedActionCategoriesML=[ENU=New,Connection,Mapping,Synchronization,Encryption;
                                ENG=New,Connection,Mapping,Synchronisation,Encryption];
    ShowFilter=No;
    OnOpenPage=BEGIN
                 IF NOT GET THEN BEGIN
                   INIT;
                   INSERT;
                 END;

                 UpdateIsEnabledState;
                 IF NOT ConnectionEnabled THEN
                   EXIT;
               END;

    OnClosePage=BEGIN
                  CRMIntegrationManagement.Clear;
                END;

    OnAfterGetRecord=BEGIN
                       IF HasPassword THEN
                         NewPassword := 'Password Dots';
                       RefreshData;
                       CurrPageIsEditable := CurrPage.EDITABLE;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           IsEditable := NOT "Is Enabled";
                         END;

    ActionList=ACTIONS
    {
      { 4       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 5       ;1   ;Action    ;
                      Name=Test Connection;
                      CaptionML=[@@@=Test is a verb.;
                                 ENU=Test Connection;
                                 ENG=Test Connection];
                      ToolTipML=[ENU=Tests the connection to Microsoft Dynamics CRM using the specified settings.;
                                 ENG=Tests the connection to Microsoft Dynamics CRM using the specified settings.];
                      Promoted=Yes;
                      Image=ValidateEmailLoggingSetup;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PerformTestConnection;
                               END;
                                }
      { 13      ;1   ;Action    ;
                      Name=ResetConfiguration;
                      CaptionML=[ENU=Use Default Synchronization Setup;
                                 ENG=Use Default Synchronisation Setup];
                      ToolTipML=[ENU=Resets the integration table mappings and synchronization jobs to the default values for a connection with Microsoft Dynamics CRM. All current mappings are deleted.;
                                 ENG=Resets the integration table mappings and synchronisation jobs to the default values for a connection with Microsoft Dynamics CRM. All current mappings are deleted.];
                      Enabled="Is Enabled";
                      Image=ResetStatus;
                      OnAction=VAR
                                 CRMSetupDefaults@1000 : Codeunit 5334;
                               BEGIN
                                 IF CONFIRM(ResetIntegrationTableMappingConfirmQst,FALSE) THEN
                                   CRMSetupDefaults.ResetConfiguration(TRUE);
                                 RefreshDataFromCRM;
                               END;
                                }
      { 10      ;1   ;Action    ;
                      Name=StartInitialSynchAction;
                      CaptionML=[ENU=Run Full Synchronization;
                                 ENG=Run Full Synchronisation];
                      Enabled=IsConnectionEnabledForCurrentUser;
                      Image=RefreshLines;
                      OnAction=BEGIN
                                 PerformInitialSynch;
                               END;
                                }
      { 17      ;1   ;Action    ;
                      Name=Reset Web Client URL;
                      CaptionML=[ENU=Reset Web Client URL;
                                 ENG=Reset Web Client URL];
                      Enabled=CRMSolutionInstalled AND IsConnectionEnabledForCurrentUser;
                      Image=ResetStatus;
                      OnAction=BEGIN
                                 PerformWebClientUrlReset;
                               END;
                                }
      { 23      ;1   ;Action    ;
                      Name=SynchronizeNow;
                      CaptionML=[ENU=Synchronize Modified Records;
                                 ENG=Synchronise Modified Records];
                      Promoted=Yes;
                      Enabled=IsConnectionEnabledForCurrentUser;
                      PromotedIsBig=Yes;
                      Image=Refresh;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 IntegrationSynchJobList@1000 : Page 5338;
                               BEGIN
                                 IF NOT CONFIRM(SynchronizeModifiedQst) THEN
                                   EXIT;

                                 SynchronizeNow(FALSE);
                                 MESSAGE(SyncNowSuccessMsg,IntegrationSynchJobList.CAPTION);
                               END;
                                }
      { 9       ;1   ;Action    ;
                      Name=Generate Integration IDs;
                      CaptionML=[ENU=Generate Integration IDs;
                                 ENG=Generate Integration IDs];
                      Image=Reconcile;
                      OnAction=VAR
                                 IntegrationManagement@1000 : Codeunit 5150;
                               BEGIN
                                 IF CONFIRM(ConfirmGenerateIntegrationIdsQst,TRUE) THEN BEGIN
                                   IntegrationManagement.SetupIntegrationTables;
                                   MESSAGE(GenerateIntegrationIdsSuccessMsg);
                                 END;
                               END;
                                }
      { 14      ;    ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 19      ;1   ;Action    ;
                      Name=Integration Table Mappings;
                      CaptionML=[ENU=Integration Table Mappings;
                                 ENG=Integration Table Mappings];
                      RunObject=Page 5335;
                      Promoted=Yes;
                      Image=Relationship;
                      PromotedCategory=Report;
                      RunPageMode=Edit }
      { 12      ;1   ;Action    ;
                      Name=Synch. Job Queue Entries;
                      CaptionML=[ENU=Synch. Job Queue Entries;
                                 ENG=Synch. Job Queue Entries];
                      Promoted=Yes;
                      Image=JobListSetup;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 JobQueueEntry@1000 : Record 472;
                               BEGIN
                                 JobQueueEntry.FILTERGROUP := 2;
                                 JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
                                 JobQueueEntry.SETFILTER("Object ID to Run",'%1|%2',CODEUNIT::"Integration Synch. Job Runner",CODEUNIT::"CRM Statistics Job");
                                 JobQueueEntry.FILTERGROUP := 0;

                                 PAGE.RUN(PAGE::"Job Queue Entries",JobQueueEntry);
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=EncryptionManagement;
                      CaptionML=[ENU=Encryption Management;
                                 ENG=Encryption Management];
                      RunObject=Page 9905;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=EncryptionKeys;
                      PromotedCategory=Category5;
                      RunPageMode=View }
    }
  }
  CONTROLS
  {
    { 1900000001;;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=NAVToCRM;
                CaptionML=[ENU=Connection from Dynamics NAV to Dynamics CRM;
                           ENG=Connection from Dynamics NAV to Dynamics CRM];
                GroupType=Group }

    { 2   ;2   ;Field     ;
                SourceExpr="Server Address";
                Editable=IsEditable;
                OnValidate=VAR
                             CRMSetupDefaults@1003 : Codeunit 5334;
                             UriHelper@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
                             UriHelper2@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
                             UriKindHelper@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.UriKind";
                             UriPartialHelper@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.UriPartial";
                             ProposedUri@1004 : Text[250];
                           BEGIN
                             IF ("Server Address" = '') OR ("Server Address" = '@@test@@') THEN
                               EXIT;

                             "Server Address" := DELCHR("Server Address",'<>');

                             IF NOT UriHelper.TryCreate("Server Address",UriKindHelper.Absolute,UriHelper2) THEN
                               IF NOT UriHelper.TryCreate('https://' + "Server Address",UriKindHelper.Absolute,UriHelper2) THEN
                                 ERROR(InvalidUriErr);

                             IF UriHelper2.Scheme <> 'https' THEN BEGIN
                               IF NOT CRMSetupDefaults.GetAllowNonSecureConnections THEN
                                 ERROR(MustUseHttpsErr);
                               IF UriHelper2.Scheme <> 'http' THEN
                                 ERROR(STRSUBSTNO(MustUseHttpOrHttpsErr,UriHelper2.Scheme))
                             END;

                             ProposedUri := UriHelper2.GetLeftPart(UriPartialHelper.Authority);

                             IF LOWERCASE("Server Address") <> LOWERCASE(ProposedUri) THEN BEGIN
                               IF CONFIRM(STRSUBSTNO(ReplaceServerAddressQst,"Server Address",ProposedUri)) THEN
                                 "Server Address" := ProposedUri;
                             END;
                           END;
                            }

    { 3   ;2   ;Field     ;
                SourceExpr="User Name";
                Editable=IsEditable;
                OnValidate=BEGIN
                             "User Name" := DELCHR("User Name",'<>');
                           END;
                            }

    { 7   ;2   ;Field     ;
                Name=Password;
                ExtendedDatatype=Masked;
                SourceExpr=NewPassword;
                Enabled=IsEditable;
                Editable=CurrPageIsEditable;
                OnValidate=BEGIN
                             SetPassword(NewPassword);
                             COMMIT;
                             IF (NewPassword <> '') AND (NOT ENCRYPTIONENABLED) THEN
                               IF CONFIRM(EncryptionIsNotActivatedQst) THEN
                                 PAGE.RUN(PAGE::"Data Encryption Management")
                           END;
                            }

    { 11  ;2   ;Field     ;
                CaptionML=[@@@=Name of tickbox which shows whether the connection is enabled or disabled;
                           ENU=Enabled;
                           ENG=Enabled];
                SourceExpr="Is Enabled";
                OnValidate=VAR
                             IntegrationTableMapping@1000 : Record 5335;
                             IntegrationRecord@1002 : Record 5151;
                             IntegrationManagement@1001 : Codeunit 5150;
                             CRMSetupDefaults@1004 : Codeunit 5334;
                           BEGIN
                             IsEditable := NOT "Is Enabled";
                             IF ConnectionEnabled AND "Is Enabled" THEN
                               EXIT;

                             IF NOT UnregisterConnection THEN
                               CLEARLASTERROR;

                             IF "Is Enabled" THEN BEGIN
                               // set enabled to false and commit to save all changes before enabling.
                               "Is Enabled" := FALSE;
                               MODIFY(TRUE);
                               COMMIT;
                               "Is Enabled" := TRUE;

                               IF ("Server Address" = '') OR ("User Name" = '') OR (NOT HasPassword) THEN
                                 ERROR(DetailsMissingErr);

                               IF NOT TestConnection THEN
                                 ERROR(ConnectionErr,CRMIntegrationManagement.GetLastErrorMessage);

                               RegisterUserConnection;

                               // Connection is valid and registered
                               MODIFY(TRUE);
                               COMMIT;

                               IF IntegrationTableMapping.ISEMPTY THEN
                                 IF CONFIRM(CreateIntegrationTableMappingQst,FALSE) THEN
                                   CRMSetupDefaults.ResetConfiguration(TRUE);
                               IF IntegrationRecord.COUNT = 0 THEN
                                 IntegrationManagement.SetupIntegrationTables;
                               IntegrationManagement.SetConnectorIsEnabledForSession(TRUE);

                               // Additional Configuration has been done
                               COMMIT;
                             END ELSE
                               UnregisterConnection;

                             UpdateIsEnabledState;
                             RefreshData;
                           END;
                            }

    { 22  ;2   ;Field     ;
                Name=ScheduledSynchJobsActive;
                CaptionML=[ENU=Active scheduled synchronization jobs;
                           ENG=Active scheduled synchronisation jobs];
                SourceExpr=ScheduledSynchJobsRunning;
                Editable=false;
                StyleExpr=ScheduledSynchJobsRunningMsgStyleExpr;
                OnDrillDown=BEGIN
                              MESSAGE(ScheduledSynchJobsRunningMsg);
                            END;
                             }

    { 8   ;1   ;Group     ;
                Name=CRMToNAV;
                CaptionML=[ENU=Connection from Dynamics CRM to Dynamics NAV;
                           ENG=Connection from Dynamics CRM to Dynamics NAV];
                Visible="Is Enabled";
                GroupType=Group }

    { 15  ;2   ;Field     ;
                Name=CRMSolutionInstalled;
                CaptionML=[ENU=Dynamics NAV Integration Solution Imported;
                           ENG=Dynamics NAV Integration Solution Imported];
                SourceExpr=CRMSolutionInstalled;
                Editable=FALSE;
                StyleExpr=CRMSolutionInstalledStyleExpr;
                OnDrillDown=BEGIN
                              IF CRMSolutionInstalled THEN
                                MESSAGE(FavorableCRMSolutionInstalledMsg)
                              ELSE
                                MESSAGE(UnfavorableCRMSolutionInstalledMsg);
                            END;
                             }

    { 16  ;2   ;Field     ;
                Name=NAVURL;
                CaptionML=[ENU=Dynamics NAV Web Client URL;
                           ENG=Dynamics NAV Web Client URL];
                SourceExpr=NAVURL;
                Enabled=CRMSolutionInstalled;
                Editable=CurrPageIsEditable;
                OnValidate=BEGIN
                             CRMIntegrationManagement.SetCRMNAVConnectionUrl(NAVURL);
                           END;
                            }

    { 20  ;1   ;Group     ;
                Name=CRMSettings;
                CaptionML=[ENU=Dynamics CRM Settings;
                           ENG=Dynamics CRM Settings];
                Visible="Is Enabled";
                GroupType=Group }

    { 25  ;2   ;Field     ;
                CaptionML=[ENU=Version;
                           ENG=Version];
                SourceExpr=CRMSettingVersion;
                Editable=FALSE;
                StyleExpr=CRMSettingVersionStyleExpr;
                OnDrillDown=BEGIN
                              IF CRMSettingVersionStyleExpr = FavorableStyleExprTxt THEN
                                MESSAGE(FavorableCRMVersionMsg)
                              ELSE
                                MESSAGE(UnfavorableCRMVersionMsg);
                            END;
                             }

    { 28  ;2   ;Field      }

    { 29  ;2   ;Field     ;
                CaptionML=[ENU=Dynamics CRM Connection User is Integration User;
                           ENG=Dynamics CRM Connection User is Integration User];
                SourceExpr=CRMSettingIsConnectionUserIntegrationUser;
                Editable=FALSE;
                StyleExpr=CRMSettingIsConnectionUserIntegrationUserStyleExpr;
                OnDrillDown=BEGIN
                              IF NOT CRMSettingIsConnectionUserIntegrationUser THEN
                                SetUserAsIntegrationUser;

                              RefreshDataFromCRM;

                              IF CRMSettingIsConnectionUserIntegrationUser THEN
                                MESSAGE(FavorableSetUserNameIsIntegrationMsg)
                            END;
                             }

    { 21  ;2   ;Field     ;
                DrillDown=Yes;
                CaptionML=[ENU=Sales Order Integration Enabled;
                           ENG=Sales Order Integration Enabled];
                SourceExpr=CRMSettingIsSOPEnabled;
                Editable=FALSE;
                StyleExpr=CRMSettingIsSOPEnabledStyleExpr;
                OnDrillDown=BEGIN
                              IF NOT CRMSettingIsSOPEnabled THEN
                                SetCRMSOPEnabled;

                              RefreshDataFromCRM;

                              IF CRMSettingIsSOPEnabled THEN
                                MESSAGE(SetCRMSOPEnableConfirmMsg);
                            END;
                             }

    { 26  ;1   ;Group     ;
                Name=AdvancedSettings;
                CaptionML=[ENU=Advanced Settings;
                           ENG=Advanced Settings];
                Visible="Is Enabled";
                GroupType=Group }

    { 27  ;2   ;Field     ;
                SourceExpr="Is User Mapping Required";
                OnValidate=BEGIN
                             COMMIT;
                             UpdateAllConnectionRegistrations;
                             UpdateIsEnabledState;
                             UpdateUserIsMappedState;
                           END;
                            }

    { 18  ;2   ;Field     ;
                Name=CurrentUserIsMappedToCRMUser;
                CaptionML=[ENU=Current Dynamics NAV User is Mapped to a Dynamics CRM User;
                           ENG=Current Dynamics NAV User is Mapped to a Dynamics CRM User];
                SourceExpr=CurrentUserIsMappedToCRMUser;
                Enabled=CurrentUserIsMappedToCRMUserIsVisible;
                Editable=false;
                StyleExpr=CurrentUserIsMappedToCRMUserStyleExpr;
                OnDrillDown=BEGIN
                              IF CurrentUserIsMappedToCRMUser THEN
                                MESSAGE(CurrentuserIsMappedToCRMUserMsg,USERID)
                              ELSE
                                MESSAGE(CurrentuserIsNotMappedToCRMUserMsg,USERID)
                            END;
                             }

    { 30  ;2   ;Field      }

  }
  CODE
  {
    VAR
      CRMIntegrationManagement@1055 : Codeunit 5330;
      NAVURL@1015 : Text[250];
      NewPassword@1000 : Text;
      ConnectionSuccessMsg@1001 : TextConst 'ENU=The connection test was successful. The settings are valid.;ENG=The connection test was successful. The settings are valid.';
      ConnectionSuccessNotEnabledForCurrentUserMsg@1026 : TextConst '@@@="%1 = Current User ID";ENU=The connection test was successful. The settings are valid.\\However, because the Dynamics NAV Users Must Map to Dynamics CRM Users field is set, Dynamics CRM integration is not enabled for %1.;ENG=The connection test was successful. The settings are valid.\\However, because the Dynamics NAV Users Must Map to Dynamics CRM Users field is set, Dynamics CRM integration is not enabled for %1.';
      ConnectionErr@1017 : TextConst '@@@=%1 Error message from the provider (.NET exception message);ENU=The connection setup cannot be validated. Verify the settings and try again.\Detailed error description: %1.;ENG=The connection setup cannot be validated. Verify the settings and try again.\Detailed error description: %1.';
      DetailsMissingErr@1002 : TextConst 'ENU=A Dynamics CRM URL, user name and password are required to enable a connection.;ENG=A Dynamics CRM URL, user name and password are required to enable a connection.';
      ResetIntegrationTableMappingConfirmQst@1003 : TextConst 'ENU=This will delete all existing integration table mappings and Dynamics CRM synchronization jobs and install the default integration table mappings and jobs for Dynamics CRM synchronization.\\Are you sure that you want to continue?;ENG=This will delete all existing integration table mappings and Dynamics CRM synchronisation jobs and install the default integration table mappings and jobs for Dynamics CRM synchronisation.\\Are you sure that you want to continue?';
      CreateIntegrationTableMappingQst@1004 : TextConst 'ENU=Synchronization between Microsoft Dynamics CRM and Microsoft Dynamics NAV is currently not set up. Synchronization ensures that common data in Dynamics CRM and Dynamics NAV is the same. Do you want to use the default synchronization setup?;ENG=Synchronisation between Microsoft Dynamics CRM and Microsoft Dynamics NAV is currently not set up. Synchronisation ensures that common data in Dynamics CRM and Dynamics NAV is the same. Do you want to use the default synchronisation setup?';
      ConfirmGenerateIntegrationIdsQst@1006 : TextConst 'ENU=You are about to add integration data to tables. This process may take several minutes. Do you want to continue?;ENG=You are about to add integration data to tables. This process may take several minutes. Do you want to continue?';
      GenerateIntegrationIdsSuccessMsg@1005 : TextConst 'ENU=The integration data has been added to the tables.;ENG=The integration data has been added to the tables.';
      ConnectionEnabled@1007 : Boolean;
      IsEditable@1009 : Boolean;
      InvalidUriErr@1010 : TextConst 'ENU=The value entered is not a valid URL.;ENG=The value entered is not a valid URL.';
      MustUseHttpsErr@1011 : TextConst 'ENU=The application is set up to support secure connections (HTTPS) to Dynamics CRM only. You cannot use HTTP.;ENG=The application is set up to support secure connections (HTTPS) to Dynamics CRM only. You cannot use HTTP.';
      MustUseHttpOrHttpsErr@1012 : TextConst '@@@=%1 is a URI scheme, such as FTP, HTTP, chrome or file;ENU=%1 is not a valid URI scheme for Dynamics CRM connections. You can only use HTTPS or HTTP as the scheme in the URL.;ENG=%1 is not a valid URI scheme for Dynamics CRM connections. You can only use HTTPS or HTTP as the scheme in the URL.';
      ReplaceServerAddressQst@1008 : TextConst '@@@=%1 and %2 are URLs;ENU=The URL you entered cannot be used as is. Do you want to replace it by the suggested version below?\\Entered URL: "%1".\Suggested URL: "%2".;ENG=The URL you entered cannot be used as is. Do you want to replace it by the suggested version below?\\Entered URL: "%1".\Suggested URL: "%2".';
      EncryptionIsNotActivatedQst@1016 : TextConst 'ENU=Data encryption is currently not enabled. We recommend that you encrypt data. \Do you want to open the Data Encryption Management window?;ENG=Data encryption is currently not enabled. We recommend that you encrypt data. \Do you want to open the Data Encryption Management window?';
      CurrentUserIsMappedToCRMUser@1025 : Boolean;
      CurrentUserIsMappedToCRMUserIsVisible@1052 : Boolean;
      CRMSolutionInstalled@1013 : Boolean;
      WebClientUrlResetMsg@1014 : TextConst 'ENU=The NAV Web Client URL has been reset to its default value.;ENG=The NAV Web Client URL has been reset to its default value.';
      SyncNowSuccessMsg@1018 : TextConst '@@@="%1 = Page 5338 Caption";ENU=Synchronize Modified Records completed.\See the %1 window for details.;ENG=Synchronise Modified Records completed.\See the %1 window for details.';
      IsConnectionEnabledForCurrentUser@1027 : Boolean;
      CRMSettingIsSOPEnabled@1028 : Boolean;
      CRMSettingIsConnectionUserIntegrationUser@1029 : Boolean;
      CurrPageIsEditable@1056 : Boolean;
      CurrentUserIsMappedToCRMUserStyleExpr@1043 : Text;
      CRMSettingVersion@1019 : Text;
      SetCRMSOPEnableQst@1020 : TextConst 'ENU=Enabling Sales Order Integration will allow you to create Dynamics NAV Sales Orders from Dynamics CRM.\\To enable this setting, you must provide Dynamics CRM administrator credentials (user name and password).\\Do you want to continue?;ENG=Enabling Sales Order Integration will allow you to create Dynamics NAV Sales Orders from Dynamics CRM.\\To enable this setting, you must provide Dynamics CRM administrator credentials (user name and password).\\Do you want to continue?';
      SetCRMSOPEnableConfirmMsg@1021 : TextConst 'ENU=Dynamics CRM Sales Order Integration is enabled.;ENG=Dynamics CRM Sales Order Integration is enabled.';
      SetUserNameIsIntegrationUserQst@1022 : TextConst 'ENU=If you set the Dynamics CRM Connection User to be an Integration User it will affect how the account can be used.\\To enable this setting, you must provide Dynamics CRM administrator credentials (user name and password).\\Do you want to continue?;ENG=If you set the Dynamics CRM Connection User to be an Integration User it will affect how the account can be used.\\To enable this setting, you must provide Dynamics CRM administrator credentials (user name and password).\\Do you want to continue?';
      FavorableSetUserNameIsIntegrationMsg@1023 : TextConst 'ENU=The Dynamics CRM Connection User has been set as an Integration User.;ENG=The Dynamics CRM Connection User has been set as an Integration User.';
      StartInitialSynchQst@1024 : TextConst 'ENU=This will synchronize records in all Integration Table Mappings including uncoupled records.\\Before running full synchronization, you should couple all Dynamics NAV Salespeople to Dynamics CRM Users.\\To prevent data duplication, it is also recommended to couple and synchronize other existing records in advance.\\Do you want to continue?;ENG=This will synchronise records in all Integration Table Mappings including uncoupled records.\\Before running full synchronisation, you should couple all Dynamics NAV Salespeople to Dynamics CRM Users.\\To prevent data duplication, it is also recommended to couple and synchronise other existing records in advance.\\Do you want to continue?';
      CRMSettingVersionStyleExpr@1030 : Text;
      CRMSettingIsSOPEnabledStyleExpr@1032 : Text;
      CRMSettingIsConnectionUserIntegrationUserStyleExpr@1031 : Text;
      AllowNewUncoupledItemsToBeSynchronizedQst@1041 : TextConst '@@@="%1 = Page 5338 Caption";ENU=Full Synchronization completed.\See the %1 window for details.\\Do you want to allow all scheduled synchronization jobs to create new records?;ENG=Full synchronisation completed.\See the %1 window for details.\\Do you want to allow all scheduled synchronisation jobs to create new records?';
      UnfavorableCRMVersionMsg@1033 : TextConst 'ENU=This version of Dynamics CRM might not work correctly with Dynamics NAV. We recommend you upgrade to a supported version.;ENG=This version of Dynamics CRM might not work correctly with Dynamics NAV. We recommend you upgrade to a supported version.';
      FavorableCRMVersionMsg@1034 : TextConst 'ENU=The version of Dynamics CRM is valid.;ENG=The version of Dynamics CRM is valid.';
      CRMSolutionInstalledStyleExpr@1035 : Text;
      UnfavorableCRMSolutionInstalledMsg@1036 : TextConst 'ENU=The Dynamics NAV Integration Solution was not detected.;ENG=The Dynamics NAV Integration Solution was not detected.';
      FavorableCRMSolutionInstalledMsg@1037 : TextConst 'ENU=The Dynamics NAV Integration Solution is installed in Dynamics CRM.;ENG=The Dynamics NAV Integration Solution is installed in Dynamics CRM.';
      FavorableStyleExprTxt@1039 : TextConst '@@@={Locked} Style Expression;ENU=Favorable;ENG=Favorable';
      UnFavorableStyleExprTxt@1040 : TextConst '@@@={Locked} Style Expression;ENU=Unfavorable;ENG=Unfavorable';
      AmbiguousStyleExprTxt@1047 : TextConst '@@@={Locked} Style Expression;ENU=Ambiguous;ENG=Ambiguous';
      ProcessDialogMapTitleMsg@1042 : TextConst '@@@=@1 Progress dialog map no.;ENU=Synchronizing @1;ENG=Synchronising @1';
      SynchronizeModifiedQst@1038 : TextConst 'ENU=This will synchronize all modified records in all Integration Table Mappings.\\Do you want to continue?;ENG=This will synchronise all modified records in all Integration Table Mappings.\\Do you want to continue?';
      ScheduledSynchJobsRunning@1051 : Text;
      ScheduledSynchJobsRunningMsg@1044 : Text;
      AllScheduledJobsAreRunningMsg@1045 : TextConst 'ENU=An job queue is started and all scheduled synchronization jobs are ready or already processing.;ENG=An job queue is started and all scheduled synchronisation jobs are ready or already processing.';
      PartialScheduledJobsAreRunningMsg@1046 : TextConst '@@@="%1 = Count of scheduled job queue entries in ready or in process state, %2 count of all scheduled jobs";ENU=An ative job queue is available but only %1 of the %2 scheduled synchronization jobs are ready or in process.;ENG=An active job queue is available but only %1 of the %2 scheduled synchronisation jobs are ready or in process.';
      JobQueueIsNotRunningMsg@1048 : TextConst 'ENU=There is no job queue started. Scheduled synchronization jobs require an active job queue to process jobs.\\Contact your administrator to get a job queue configured and started.;ENG=There is no job queue started. Scheduled synchronisation jobs require an active job queue to process jobs.\\Contact your administrator to get a job queue configured and started.';
      ReadyScheduledSynchJobsTok@1049 : TextConst '@@@="%1 = Count of scheduled job queue entries in ready or in process state, %2 count of all scheduled jobs";ENU=%1 of %2;ENG=%1 of %2';
      ScheduledSynchJobsRunningMsgStyleExpr@1050 : Text;
      CurrentuserIsMappedToCRMUserMsg@1053 : TextConst '@@@="%1 = Current User ID";ENU=Dynamics NAV user (%1) is mapped to a Dynamics CRM user.;ENG=Dynamics NAV user (%1) is mapped to a Dynamics CRM user.';
      CurrentuserIsNotMappedToCRMUserMsg@1054 : TextConst '@@@="%1 = Current User ID";ENU=Because the Dynamics NAV Users Must Map to Dynamics CRM Users field is set, Dynamics CRM integration is not enabled for %1.\\To enable Dynamics CRM integration for Dynamics NAV user %1, the authentication e-mail must match the primary e-mail of a Dynamics CRM user.;ENG=Because the Dynamics NAV Users Must Map to Dynamics CRM Users field is set, Dynamics CRM integration is not enabled for %1.\\To enable Dynamics CRM integration for Dynamics NAV user %1, the authentication e-mail must match the primary e-mail of a Dynamics CRM user.';

    LOCAL PROCEDURE RefreshData@19();
    BEGIN
      RefreshDataFromCRM;
      RefreshDataFromNAV;
    END;

    LOCAL PROCEDURE RefreshDataFromNAV@20();
    VAR
      JobQueue@1000 : Record 470;
      JobQueueEntry@1001 : Record 472;
      TotalJobEntryCount@1002 : Integer;
    BEGIN
      IF NOT "Is Enabled" THEN BEGIN
        ScheduledSynchJobsRunning := STRSUBSTNO(ReadyScheduledSynchJobsTok,0,0);
        ScheduledSynchJobsRunningMsg := JobQueueIsNotRunningMsg;
        ScheduledSynchJobsRunningMsgStyleExpr := UnFavorableStyleExprTxt;
        EXIT;
      END;

      CurrentUserIsMappedToCRMUserIsVisible := "Is User Mapping Required";

      IF CRMSolutionInstalled THEN
        JobQueueEntry.SETFILTER("Object ID to Run",'%1|%2',CODEUNIT::"Integration Synch. Job Runner",CODEUNIT::"CRM Statistics Job")
      ELSE
        JobQueueEntry.SETRANGE("Object ID to Run",CODEUNIT::"Integration Synch. Job Runner");
      TotalJobEntryCount := JobQueueEntry.COUNT;
      JobQueueEntry.SETFILTER(Status,'%1|%2',JobQueueEntry.Status::Ready,JobQueueEntry.Status::"In Process");

      JobQueue.SETRANGE(Started,TRUE);

      IF JobQueue.COUNT = 0 THEN BEGIN
        ScheduledSynchJobsRunning := STRSUBSTNO(ReadyScheduledSynchJobsTok,0,TotalJobEntryCount);
        ScheduledSynchJobsRunningMsg := JobQueueIsNotRunningMsg;
        ScheduledSynchJobsRunningMsgStyleExpr := UnFavorableStyleExprTxt;
      END ELSE BEGIN
        ScheduledSynchJobsRunning := STRSUBSTNO(ReadyScheduledSynchJobsTok,JobQueueEntry.COUNT,TotalJobEntryCount);
        IF (JobQueueEntry.COUNT = 0) OR (JobQueueEntry.COUNT < TotalJobEntryCount) THEN BEGIN
          ScheduledSynchJobsRunningMsg := STRSUBSTNO(PartialScheduledJobsAreRunningMsg,JobQueueEntry.COUNT,TotalJobEntryCount);
          ScheduledSynchJobsRunningMsgStyleExpr := AmbiguousStyleExprTxt;
        END ELSE BEGIN
          ScheduledSynchJobsRunningMsg := AllScheduledJobsAreRunningMsg;
          ScheduledSynchJobsRunningMsgStyleExpr := FavorableStyleExprTxt;
        END;
      END;
    END;

    LOCAL PROCEDURE RefreshDataFromCRM@8();
    VAR
      TempCRMConnectionSetup@1000 : TEMPORARY Record 5330;
      ConnectionName@1001 : Text;
    BEGIN
      IF NOT "Is Enabled" THEN BEGIN
        CRMSettingVersion := '';
        CRMSettingVersionStyleExpr := UnFavorableStyleExprTxt;

        CRMSettingIsConnectionUserIntegrationUser := FALSE;
        CRMSettingIsConnectionUserIntegrationUserStyleExpr := UnFavorableStyleExprTxt;

        CRMSettingIsSOPEnabled := FALSE;
        CRMSettingVersionStyleExpr := UnFavorableStyleExprTxt;

        CRMSolutionInstalled := FALSE;
        CRMSolutionInstalledStyleExpr := UnFavorableStyleExprTxt;

        CurrentUserIsMappedToCRMUser := FALSE;
        CurrentUserIsMappedToCRMUserStyleExpr := UnFavorableStyleExprTxt;

        EXIT;
      END;

      IF "Is User Mapping Required" THEN BEGIN
        ConnectionName := FORMAT(CREATEGUID);
        CreateTempNoDelegateConnection(TempCRMConnectionSetup);
        TempCRMConnectionSetup.RegisterConnectionWithName(ConnectionName);
        SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::CRM,ConnectionName,TRUE);

        UpdateUserIsMappedState
      END;

      RefreshFromCRMConnectionInformation;
      IF TryRefreshCRMSettings THEN;

      IF ConnectionName <> '' THEN
        TempCRMConnectionSetup.UnregisterConnectionWithName(ConnectionName);
    END;

    LOCAL PROCEDURE RefreshFromCRMConnectionInformation@1();
    VAR
      CRMNAVConnection@1001 : Record 5368;
    BEGIN
      CRMSolutionInstalled := CRMIntegrationManagement.IsCRMSolutionInstalled;

      IF CRMSolutionInstalled THEN BEGIN
        CRMSolutionInstalledStyleExpr := FavorableStyleExprTxt;
        IF CRMNAVConnection.FINDFIRST THEN
          NAVURL := CRMNAVConnection."Dynamics NAV URL";
      END ELSE
        CRMSolutionInstalledStyleExpr := UnFavorableStyleExprTxt;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryRefreshCRMSettings@7();
    VAR
      CRMSystemuser@1000 : Record 5340;
      CRMOrganization@1001 : Record 5363;
      Version@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Version";
    BEGIN
      GetCrmVersion(CRMSettingVersion);
      CRMSettingVersionStyleExpr := UnFavorableStyleExprTxt;
      IF CRMSettingVersion <> '' THEN BEGIN
        IF Version.TryParse(CRMSettingVersion,Version) THEN
          IF (Version.Major > 6) AND NOT ((Version.Major = 7) AND (Version.Minor = 1)) THEN
            CRMSettingVersionStyleExpr := FavorableStyleExprTxt;
      END;
      CRMSystemuser.SETRANGE(InternalEMailAddress,"User Name");
      IF CRMSystemuser.FINDFIRST THEN
        CRMSettingIsConnectionUserIntegrationUser := CRMSystemuser.IsIntegrationUser
      ELSE
        CRMSettingIsConnectionUserIntegrationUser := FALSE;

      IF CRMSettingIsConnectionUserIntegrationUser THEN
        CRMSettingIsConnectionUserIntegrationUserStyleExpr := FavorableStyleExprTxt
      ELSE
        CRMSettingIsConnectionUserIntegrationUserStyleExpr := UnFavorableStyleExprTxt;

      IF CRMOrganization.FINDFIRST THEN
        CRMSettingIsSOPEnabled := CRMOrganization.IsSOPIntegrationEnabled
      ELSE
        CRMSettingIsSOPEnabled := FALSE;

      IF CRMSettingIsSOPEnabled THEN
        CRMSettingIsSOPEnabledStyleExpr := FavorableStyleExprTxt
      ELSE
        CRMSettingIsSOPEnabledStyleExpr := UnFavorableStyleExprTxt;
    END;

    LOCAL PROCEDURE SetUserAsIntegrationUser@2();
    VAR
      CRMSystemuser@1000 : Record 5340;
      TempCRMConnectionSetup@1001 : TEMPORARY Record 5330;
      ConnectionName@1002 : Text;
    BEGIN
      IF NOT CONFIRM(SetUserNameIsIntegrationUserQst) THEN
        EXIT;

      CreateTempAdminConnection(TempCRMConnectionSetup);
      ConnectionName := FORMAT(CREATEGUID);
      TempCRMConnectionSetup.RegisterConnectionWithName(ConnectionName);
      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::CRM,ConnectionName,TRUE);

      CRMSystemuser.SETRANGE(InternalEMailAddress,"User Name");
      CRMSystemuser.FINDFIRST;

      IF (CRMSystemuser.InviteStatusCode <> CRMSystemuser.InviteStatusCode::InvitationAccepted) OR
         (NOT CRMSystemuser.IsIntegrationUser)
      THEN BEGIN
        CRMSystemuser.InviteStatusCode := CRMSystemuser.InviteStatusCode::InvitationAccepted;
        CRMSystemuser.IsIntegrationUser := TRUE;
        CRMSystemuser.MODIFY(TRUE);
      END;

      TempCRMConnectionSetup.UnregisterConnectionWithName(ConnectionName);
    END;

    LOCAL PROCEDURE SetCRMSOPEnabled@4();
    VAR
      CRMOrganization@1000 : Record 5363;
      TempCRMConnectionSetup@1001 : TEMPORARY Record 5330;
      ConnectionName@1002 : Text;
    BEGIN
      IF NOT CONFIRM(SetCRMSOPEnableQst) THEN
        EXIT;

      CreateTempAdminConnection(TempCRMConnectionSetup);
      ConnectionName := FORMAT(CREATEGUID);
      TempCRMConnectionSetup.RegisterConnectionWithName(ConnectionName);
      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::CRM,ConnectionName,TRUE);

      CRMOrganization.FINDFIRST;
      IF NOT CRMOrganization.IsSOPIntegrationEnabled THEN BEGIN
        CRMOrganization.IsSOPIntegrationEnabled := TRUE;
        CRMOrganization.MODIFY(TRUE);
      END;

      TempCRMConnectionSetup.UnregisterConnectionWithName(ConnectionName);
    END;

    LOCAL PROCEDURE PerformInitialSynch@11();
    VAR
      JobQueueEntry@1000 : Record 472;
      IntegrationTableMapping@1001 : Record 5335;
      TempActiveQueuesNameValueBuffer@1002 : TEMPORARY Record 823;
      TempCoupledOnlyMappingsNameValueBuffer@1003 : TEMPORARY Record 823;
      IntegrationSynchJobList@1004 : Page 5338;
    BEGIN
      IF NOT CONFIRM(StartInitialSynchQst) THEN
        EXIT;

      JobQueueEntry.SETRANGE("Object ID to Run",CODEUNIT::"Integration Synch. Job Runner");
      JobQueueEntry.SETRANGE(Status,JobQueueEntry.Status::Ready);
      IF JobQueueEntry.FINDSET THEN
        REPEAT
          TempActiveQueuesNameValueBuffer.AddNewEntry(JobQueueEntry.ID,'');
        UNTIL JobQueueEntry.NEXT = 0;
      JobQueueEntry.MODIFYALL(Status,JobQueueEntry.Status::"On Hold",TRUE);

      IntegrationTableMapping.SETRANGE("Parent Name",'''''');
      IntegrationTableMapping.SETRANGE("Synch. Only Coupled Records",TRUE);
      IF IntegrationTableMapping.FINDSET THEN
        REPEAT
          TempCoupledOnlyMappingsNameValueBuffer.AddNewEntry(IntegrationTableMapping.Name,'');
        UNTIL IntegrationTableMapping.NEXT = 0;
      IntegrationTableMapping.MODIFYALL("Synch. Only Coupled Records",FALSE,TRUE);

      SynchronizeNow(TRUE);

      IF NOT CONFIRM(STRSUBSTNO(AllowNewUncoupledItemsToBeSynchronizedQst,IntegrationSynchJobList.CAPTION)) THEN
        IF TempCoupledOnlyMappingsNameValueBuffer.FINDSET THEN
          REPEAT
            IntegrationTableMapping.GET(TempCoupledOnlyMappingsNameValueBuffer.Name);
            IntegrationTableMapping."Synch. Only Coupled Records" := TRUE;
            IntegrationTableMapping.MODIFY(TRUE);
          UNTIL TempCoupledOnlyMappingsNameValueBuffer.NEXT = 0;

      IF TempActiveQueuesNameValueBuffer.FINDSET THEN
        REPEAT
          JobQueueEntry.GET(TempActiveQueuesNameValueBuffer.Name);
          JobQueueEntry.SetStatus(JobQueueEntry.Status::Ready);
        UNTIL TempActiveQueuesNameValueBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE SynchronizeNow@12(DoFullSynch@1000 : Boolean);
    VAR
      IntegrationTableMapping@1006 : Record 5335;
      TempNameValueBuffer@1005 : TEMPORARY Record 823;
      CRMSetupDefaults@1004 : Codeunit 5334;
      ProgressWindow@1003 : Dialog;
      MappingCount@1002 : Integer;
      CurrentMappingIndex@1001 : Integer;
    BEGIN
      CRMSetupDefaults.GetPrioritizedMappingList(TempNameValueBuffer);
      TempNameValueBuffer.ASCENDING(TRUE);
      TempNameValueBuffer.FINDSET;

      CurrentMappingIndex := 0;
      MappingCount := TempNameValueBuffer.COUNT;
      ProgressWindow.OPEN(ProcessDialogMapTitleMsg,CurrentMappingIndex);
      REPEAT
        CurrentMappingIndex := CurrentMappingIndex + 1;
        ProgressWindow.UPDATE(1,ROUND(CurrentMappingIndex / MappingCount * 10000,1));
        IF IntegrationTableMapping.GET(TempNameValueBuffer.Value) THEN
          IntegrationTableMapping.SynchronizeNow(DoFullSynch);
      UNTIL TempNameValueBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateIsEnabledState@3();
    BEGIN
      ConnectionEnabled := "Is Enabled";
      IF NOT ConnectionEnabled THEN
        IsConnectionEnabledForCurrentUser := FALSE
      ELSE
        IsConnectionEnabledForCurrentUser :=
          ConnectionEnabled AND
          ((NOT "Is User Mapping Required") OR ("Is User Mapping Required" AND IsCurrentUserMappedToCrmSystemUser));

      UpdateUserIsMappedState;
    END;

    LOCAL PROCEDURE PerformTestConnection@9();
    BEGIN
      IF ("User Name" = '') OR (NewPassword = '') OR ("Server Address" = '') THEN
        ERROR(DetailsMissingErr);

      CRMIntegrationManagement.Clear;

      IF NOT TestConnection THEN
        ERROR(ConnectionErr,CRMIntegrationManagement.GetLastErrorMessage);

      RegisterUserConnection;

      IF "Is User Mapping Required" THEN
        IF NOT IsCurrentUserMappedToCrmSystemUser THEN BEGIN
          MESSAGE(ConnectionSuccessNotEnabledForCurrentUserMsg,USERID);
          EXIT;
        END;

      MESSAGE(ConnectionSuccessMsg);
    END;

    LOCAL PROCEDURE PerformWebClientUrlReset@13();
    VAR
      TempCRMConnectionSetup@1000 : TEMPORARY Record 5330;
      CRMSetupDefaults@1002 : Codeunit 5334;
      ConnectionName@1001 : Text;
    BEGIN
      CreateTempNoDelegateConnection(TempCRMConnectionSetup);
      ConnectionName := FORMAT(CREATEGUID);
      TempCRMConnectionSetup.RegisterConnectionWithName(ConnectionName);
      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::CRM,ConnectionName,TRUE);

      CRMSetupDefaults.ResetCRMNAVConnectionUrl;

      TempCRMConnectionSetup.UnregisterConnectionWithName(ConnectionName);

      RefreshDataFromCRM;
      MESSAGE(WebClientUrlResetMsg);
    END;

    LOCAL PROCEDURE CreateTempAdminConnection@5(VAR CRMConnectionSetup@1000 : Record 5330);
    BEGIN
      CreateTempNoDelegateConnection(CRMConnectionSetup);
      CRMConnectionSetup."Primary Key" := COPYSTR('TEMP' + "Primary Key",1,MAXSTRLEN(CRMConnectionSetup."Primary Key"));
      CRMConnectionSetup."User Name" := '';
      CLEAR(CRMConnectionSetup."User Password Key");
    END;

    LOCAL PROCEDURE CreateTempNoDelegateConnection@10(VAR CRMConnectionSetup@1000 : Record 5330);
    BEGIN
      CRMConnectionSetup.INIT;
      CRMConnectionSetup.TRANSFERFIELDS(Rec);
      CRMConnectionSetup."Primary Key" := COPYSTR('TEMP' + "Primary Key",1,MAXSTRLEN(CRMConnectionSetup."Primary Key"));
      CRMConnectionSetup."Is Enabled" := TRUE;
      CRMConnectionSetup."Is User Mapping Required" := FALSE;
    END;

    LOCAL PROCEDURE UpdateUserIsMappedState@6();
    BEGIN
      CurrentUserIsMappedToCRMUserIsVisible := "Is User Mapping Required";

      CurrentUserIsMappedToCRMUser := IsCurrentUserMappedToCrmSystemUser;
      IF CurrentUserIsMappedToCRMUser THEN
        CurrentUserIsMappedToCRMUserStyleExpr := FavorableStyleExprTxt
      ELSE
        CurrentUserIsMappedToCRMUserStyleExpr := UnFavorableStyleExprTxt;
    END;

    BEGIN
    END.
  }
}

