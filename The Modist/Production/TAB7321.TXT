OBJECT Table 7321 Warehouse Shipment Line
{
  OBJECT-PROPERTIES
  {
    Date=05/10/16;
    Time=[ 1:25:26 PM];
    Version List=NAVW19.00.00.45480,NS2016.16;
  }
  PROPERTIES
  {
    OnDelete=VAR
               ItemTrackingMgt@1001 : Codeunit 6500;
               OrderStatus@1000 : Option;
             BEGIN
               TestReleased;

               IF "Assemble to Order" THEN
                 VALIDATE("Qty. to Ship",0);

               IF "Qty. Shipped" < "Qty. Picked" THEN
                 IF NOT CONFIRM(
                      STRSUBSTNO(
                        Text007,
                        FIELDCAPTION("Qty. Picked"),"Qty. Picked",FIELDCAPTION("Qty. Shipped"),
                        "Qty. Shipped",TABLECAPTION),FALSE)
                 THEN
                   ERROR('');

               ItemTrackingMgt.SetDeleteReservationEntries(TRUE);
               ItemTrackingMgt.DeleteWhseItemTrkgLines(
                 DATABASE::"Warehouse Shipment Line",0,"No.",'',0,"Line No.","Location Code",TRUE);

               OrderStatus :=
                 WhseShptHeader.GetDocumentStatus("Line No.");
               IF OrderStatus <> WhseShptHeader."Document Status" THEN BEGIN
                 WhseShptHeader.VALIDATE("Document Status",OrderStatus);
                 WhseShptHeader.MODIFY;
               END;
             END;

    OnRename=BEGIN
               ERROR(Text008,TABLECAPTION);
             END;

    CaptionML=[ENU=Warehouse Shipment Line;
               ENG=Warehouse Shipment Line];
    LookupPageID=Page7341;
    DrillDownPageID=Page7341;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ENG=No.];
                                                   Editable=No }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.];
                                                   Editable=No }
    { 3   ;   ;Source Type         ;Integer       ;CaptionML=[ENU=Source Type;
                                                              ENG=Source Type];
                                                   Editable=No }
    { 4   ;   ;Source Subtype      ;Option        ;CaptionML=[ENU=Source Subtype;
                                                              ENG=Source Subtype];
                                                   OptionCaptionML=[ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                                    ENG=0,1,2,3,4,5,6,7,8,9,10];
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10;
                                                   Editable=No }
    { 6   ;   ;Source No.          ;Code20        ;CaptionML=[ENU=Source No.;
                                                              ENG=Source No.];
                                                   Editable=No }
    { 7   ;   ;Source Line No.     ;Integer       ;CaptionML=[ENU=Source Line No.;
                                                              ENG=Source Line No.];
                                                   Editable=No }
    { 9   ;   ;Source Document     ;Option        ;CaptionML=[ENU=Source Document;
                                                              ENG=Source Document];
                                                   OptionCaptionML=[ENU=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,,Outbound Transfer,,,,,,,,Service Order;
                                                                    ENG=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,,Outbound Transfer,,,,,,,,Service Order];
                                                   OptionString=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,,Outbound Transfer,,,,,,,,Service Order;
                                                   Editable=No }
    { 10  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code];
                                                   Editable=No }
    { 11  ;   ;Shelf No.           ;Code10        ;CaptionML=[ENU=Shelf No.;
                                                              ENG=Shelf No.] }
    { 12  ;   ;Bin Code            ;Code20        ;TableRelation=IF (Zone Code=FILTER('')) Bin.Code WHERE (Location Code=FIELD(Location Code))
                                                                 ELSE IF (Zone Code=FILTER(<>'')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                  Zone Code=FIELD(Zone Code));
                                                   OnValidate=VAR
                                                                Bin@1000 : Record 7354;
                                                                WhseIntegrationMgt@1001 : Codeunit 7317;
                                                              BEGIN
                                                                TestReleased;
                                                                IF xRec."Bin Code" <> "Bin Code" THEN
                                                                  IF "Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Warehouse Shipment Line",
                                                                      FIELDCAPTION("Bin Code"),
                                                                      "Location Code",
                                                                      "Bin Code",0);
                                                                    IF Location."Directed Put-away and Pick" THEN BEGIN
                                                                      Bin.GET("Location Code","Bin Code");
                                                                      "Zone Code" := Bin."Zone Code";
                                                                      CheckBin(0,0);
                                                                    END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ENG=Bin Code] }
    { 13  ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                TestReleased;
                                                                IF xRec."Zone Code" <> "Zone Code" THEN BEGIN
                                                                  IF "Zone Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  END;
                                                                  "Bin Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Zone Code;
                                                              ENG=Zone Code] }
    { 14  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              ENG=Item No.];
                                                   Editable=No }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                OrderStatus@1000 : Integer;
                                                              BEGIN
                                                                IF Quantity <= 0 THEN
                                                                  FIELDERROR(Quantity,Text003);
                                                                TestReleased;
                                                                CheckSourceDocLineQty;

                                                                IF Quantity < "Qty. Picked" THEN
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text001,"Qty. Picked"));
                                                                IF Quantity < "Qty. Shipped" THEN
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text001,"Qty. Shipped"));

                                                                InitOutstandingQtys;
                                                                "Qty. (Base)" := CalcBaseQty(Quantity);
                                                                "Completely Picked" := (Quantity = "Qty. Picked") OR ("Qty. (Base)" = "Qty. Picked (Base)");

                                                                GetLocation("Location Code");
                                                                IF Location."Directed Put-away and Pick" THEN
                                                                  CheckBin(xRec.Cubage,xRec.Weight);

                                                                Status := CalcStatusShptLine;
                                                                IF Status <> xRec.Status THEN BEGIN
                                                                  GetWhseShptHeader("No.");
                                                                  OrderStatus := WhseShptHeader.GetDocumentStatus(0);
                                                                  IF OrderStatus <> WhseShptHeader."Document Status" THEN BEGIN
                                                                    WhseShptHeader.VALIDATE("Document Status",OrderStatus);
                                                                    WhseShptHeader.MODIFY;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENG=Quantity];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 16  ;   ;Qty. (Base)         ;Decimal       ;CaptionML=[ENU=Qty. (Base);
                                                              ENG=Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 19  ;   ;Qty. Outstanding    ;Decimal       ;OnValidate=VAR
                                                                WMSMgt@1000 : Codeunit 7302;
                                                              BEGIN
                                                                GetLocation("Location Code");
                                                                "Qty. Outstanding (Base)" := CalcBaseQty("Qty. Outstanding");
                                                                IF Location."Require Pick" THEN BEGIN
                                                                  IF "Assemble to Order" THEN
                                                                    VALIDATE("Qty. to Ship",0)
                                                                  ELSE
                                                                    VALIDATE("Qty. to Ship","Qty. Picked" - (Quantity - "Qty. Outstanding"));
                                                                END ELSE
                                                                  VALIDATE("Qty. to Ship","Qty. Outstanding");

                                                                IF Location."Directed Put-away and Pick" THEN
                                                                  WMSMgt.CalcCubageAndWeight(
                                                                    "Item No.","Unit of Measure Code","Qty. Outstanding",Cubage,Weight);
                                                              END;

                                                   CaptionML=[ENU=Qty. Outstanding;
                                                              ENG=Qty. Outstanding];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;Qty. Outstanding (Base);Decimal    ;CaptionML=[ENU=Qty. Outstanding (Base);
                                                              ENG=Qty. Outstanding (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 21  ;   ;Qty. to Ship        ;Decimal       ;OnValidate=VAR
                                                                ATOLink@1001 : Record 904;
                                                                Confirmed@1000 : Boolean;
                                                              BEGIN
                                                                GetLocation("Location Code");
                                                                IF ("Qty. to Ship" > "Qty. Picked" - "Qty. Shipped") AND
                                                                   Location."Require Pick" AND
                                                                   NOT "Assemble to Order"
                                                                THEN
                                                                  FIELDERROR("Qty. to Ship",
                                                                    STRSUBSTNO(Text002,"Qty. Picked" - "Qty. Shipped"));

                                                                IF "Qty. to Ship" > "Qty. Outstanding" THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    "Qty. Outstanding");

                                                                Confirmed := TRUE;
                                                                IF (CurrFieldNo = FIELDNO("Qty. to Ship")) AND
                                                                   ("Shipping Advice" = "Shipping Advice"::Complete) AND
                                                                   ("Qty. to Ship" <> "Qty. Outstanding") AND
                                                                   ("Qty. to Ship" > 0)
                                                                THEN
                                                                  Confirmed :=
                                                                    CONFIRM(
                                                                      Text009 +
                                                                      Text010,
                                                                      FALSE,
                                                                      FIELDCAPTION("Shipping Advice"),
                                                                      "Shipping Advice",
                                                                      FIELDCAPTION("Qty. to Ship"),
                                                                      "Qty. Outstanding");

                                                                IF NOT Confirmed THEN
                                                                  ERROR('');

                                                                IF CurrFieldNo <> FIELDNO("Qty. to Ship (Base)") THEN
                                                                  "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");

                                                                IF "Assemble to Order" THEN
                                                                  ATOLink.UpdateQtyToAsmFromWhseShptLine(Rec);
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship;
                                                              ENG=Qty. to Ship];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 22  ;   ;Qty. to Ship (Base) ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Qty. to Ship",CalcQty("Qty. to Ship (Base)"));
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship (Base);
                                                              ENG=Qty. to Ship (Base)];
                                                   DecimalPlaces=0:5 }
    { 23  ;   ;Qty. Picked         ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                "Qty. Picked (Base)" := CalcBaseQty("Qty. Picked");
                                                              END;

                                                   CaptionML=[ENU=Qty. Picked;
                                                              ENG=Qty. Picked];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 24  ;   ;Qty. Picked (Base)  ;Decimal       ;CaptionML=[ENU=Qty. Picked (Base);
                                                              ENG=Qty. Picked (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 25  ;   ;Qty. Shipped        ;Decimal       ;CaptionML=[ENU=Qty. Shipped;
                                                              ENG=Qty. Shipped];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 26  ;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=[ENU=Qty. Shipped (Base);
                                                              ENG=Qty. Shipped (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Pick Qty.           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding" WHERE (Activity Type=CONST(Pick),
                                                                                                                       Whse. Document Type=CONST(Shipment),
                                                                                                                       Whse. Document No.=FIELD(No.),
                                                                                                                       Whse. Document Line No.=FIELD(Line No.),
                                                                                                                       Unit of Measure Code=FIELD(Unit of Measure Code),
                                                                                                                       Action Type=FILTER(' '|Place),
                                                                                                                       Original Breakbulk=CONST(No),
                                                                                                                       Breakbulk No.=CONST(0),
                                                                                                                       Assemble to Order=CONST(No)));
                                                   CaptionML=[ENU=Pick Qty.;
                                                              ENG=Pick Qty.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 28  ;   ;Pick Qty. (Base)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE (Activity Type=CONST(Pick),
                                                                                                                              Whse. Document Type=CONST(Shipment),
                                                                                                                              Whse. Document No.=FIELD(No.),
                                                                                                                              Whse. Document Line No.=FIELD(Line No.),
                                                                                                                              Action Type=FILTER(' '|Place),
                                                                                                                              Original Breakbulk=CONST(No),
                                                                                                                              Breakbulk No.=CONST(0),
                                                                                                                              Assemble to Order=CONST(No)));
                                                   CaptionML=[ENU=Pick Qty. (Base);
                                                              ENG=Pick Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 29  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENG=Unit of Measure Code];
                                                   Editable=No }
    { 30  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENG=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 31  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ENG=Variant Code];
                                                   Editable=No }
    { 32  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description];
                                                   Editable=No }
    { 33  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENG=Description 2];
                                                   Editable=No }
    { 34  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=" ,Partially Picked,Partially Shipped,Completely Picked,Completely Shipped";
                                                                    ENG=" ,Partially Picked,Partially Shipped,Completely Picked,Completely Shipped"];
                                                   OptionString=[ ,Partially Picked,Partially Shipped,Completely Picked,Completely Shipped];
                                                   Editable=No }
    { 35  ;   ;Sorting Sequence No.;Integer       ;CaptionML=[ENU=Sorting Sequence No.;
                                                              ENG=Sorting Sequence No.];
                                                   Editable=No }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENG=Due Date] }
    { 39  ;   ;Destination Type    ;Option        ;CaptionML=[ENU=Destination Type;
                                                              ENG=Destination Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Location";
                                                                    ENG=" ,Customer,Vendor,Location"];
                                                   OptionString=[ ,Customer,Vendor,Location];
                                                   Editable=No }
    { 40  ;   ;Destination No.     ;Code20        ;TableRelation=IF (Destination Type=CONST(Customer)) Customer.No.
                                                                 ELSE IF (Destination Type=CONST(Vendor)) Vendor.No.
                                                                 ELSE IF (Destination Type=CONST(Location)) Location.Code;
                                                   CaptionML=[ENU=Destination No.;
                                                              ENG=Destination No.];
                                                   Editable=No }
    { 41  ;   ;Cubage              ;Decimal       ;CaptionML=[ENU=Cubage;
                                                              ENG=Cubage];
                                                   DecimalPlaces=0:5 }
    { 42  ;   ;Weight              ;Decimal       ;CaptionML=[ENU=Weight;
                                                              ENG=Weight];
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;Shipping Advice     ;Option        ;CaptionML=[ENU=Shipping Advice;
                                                              ENG=Shipping Advice];
                                                   OptionCaptionML=[ENU=Partial,Complete;
                                                                    ENG=Partial,Complete];
                                                   OptionString=Partial,Complete;
                                                   Editable=No }
    { 45  ;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              ENG=Shipment Date] }
    { 46  ;   ;Completely Picked   ;Boolean       ;CaptionML=[ENU=Completely Picked;
                                                              ENG=Completely Picked];
                                                   Editable=No }
    { 48  ;   ;Not upd. by Src. Doc. Post.;Boolean;CaptionML=[ENU=Not upd. by Src. Doc. Post.;
                                                              ENG=Not upd. by Src. Doc. Post.];
                                                   Editable=No }
    { 49  ;   ;Posting from Whse. Ref.;Integer    ;CaptionML=[ENU=Posting from Whse. Ref.;
                                                              ENG=Posting from Whse. Ref.];
                                                   Editable=No }
    { 900 ;   ;Assemble to Order   ;Boolean       ;AccessByPermission=TableData 90=R;
                                                   CaptionML=[ENU=Assemble to Order;
                                                              ENG=Assemble to Order];
                                                   Editable=No }
    { 9087000;;VIP Order           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Header".VIP WHERE (No.=FIELD(Source No.)));
                                                   CaptionML=[ENU=VIP Order;
                                                              ENG=VIP Order];
                                                   Description=NS2015.1;
                                                   Editable=No }
    { 9087001;;Quality Inspection %;Decimal       ;OnValidate=VAR
                                                                lItemQualityInspectionMgt@1000000000 : Codeunit 9087014;
                                                              BEGIN
                                                                Rec."Quality Inspection Quantity" := lItemQualityInspectionMgt.InspectionPctToQty(Rec."Quality Inspection %", Rec.Quantity);
                                                                lItemQualityInspectionMgt.WhseShptLineToQInspLine(Rec);
                                                                Rec.CALCFIELDS("Quality Inspection Finished", "Qty. of Items to Inspect");
                                                              END;

                                                   CaptionML=[ENU=Quality Inspection %;
                                                              ENG=Quality Inspection %];
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Description=NS2015.1 }
    { 9087002;;Quality Inspection Quantity;Decimal;OnValidate=VAR
                                                                lItemQualityInspectionMgt@1000000000 : Codeunit 9087014;
                                                              BEGIN
                                                                Rec."Quality Inspection %" := lItemQualityInspectionMgt.InspectionQtyToPct(Rec."Quality Inspection Quantity", Rec.Quantity, TRUE, Rec.FIELDCAPTION(Quantity));
                                                                lItemQualityInspectionMgt.WhseShptLineToQInspLine(Rec);
                                                                Rec.CALCFIELDS("Quality Inspection Finished", "Qty. of Items to Inspect");
                                                              END;

                                                   CaptionML=[ENU=Quality Inspection Quantity;
                                                              ENG=Quality Inspection Quantity];
                                                   Description=NS2015.1 }
    { 9087003;;Quality Inspection Finished;Boolean;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Quality Inspection Line".Finished WHERE (Document Type=CONST(Warehouse Shipment),
                                                                                                                     Document No.=FIELD(No.),
                                                                                                                     Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Quality Inspection Finished;
                                                              ENG=Quality Inspection Finished];
                                                   Description=NS2015.1;
                                                   Editable=No }
    { 9087004;;Quality Inspection Failed;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Quality Inspection Line"."Inspection Failed" WHERE (Document Type=CONST(Warehouse Shipment),
                                                                                                                                Document No.=FIELD(No.),
                                                                                                                                Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Quality Inspection Failed;
                                                              ENG=Quality Inspection Failed];
                                                   Description=NS2015.1;
                                                   Editable=No }
    { 9087005;;Quality Inspection Required;Boolean;OnValidate=BEGIN
                                                                UpdateQualityInspection();
                                                              END;

                                                   CaptionML=[ENU=Quality Inspection Required;
                                                              ENG=Quality Inspection Required];
                                                   Description=NS2015.1 }
    { 9087006;;Qty. of Inspected Items;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Quality Inspection Line"."Qty. of Inspected Items" WHERE (Document Type=CONST(Warehouse Shipment),
                                                                                                                                      Document No.=FIELD(No.),
                                                                                                                                      Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. of Inspected Items;
                                                              ENG=Qty. of Inspected Items];
                                                   Description=NS2015.1;
                                                   Editable=No }
    { 9087007;;Qty. of Items to Inspect;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Quality Inspection Line"."Outstanding Quantity" WHERE (Document Type=CONST(Warehouse Shipment),
                                                                                                                                   Document No.=FIELD(No.),
                                                                                                                                   Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. of Items to Inspect;
                                                              ENG=Qty. of Items to Inspect];
                                                   Description=NS2015.1;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.,Line No.                            ;Clustered=Yes }
    {    ;No.,Sorting Sequence No.                ;MaintainSQLIndex=No }
    {    ;No.,Item No.                            ;MaintainSQLIndex=No }
    {    ;No.,Source Document,Source No.          ;MaintainSQLIndex=No }
    {    ;No.,Shelf No.                           ;MaintainSQLIndex=No }
    {    ;No.,Bin Code                            ;MaintainSQLIndex=No }
    {    ;No.,Due Date                            ;MaintainSQLIndex=No }
    {    ;No.,Destination Type,Destination No.    ;MaintainSQLIndex=No }
    {    ;Source Type,Source Subtype,Source No.,Source Line No.,Assemble to Order;
                                                   SumIndexFields=Qty. Outstanding,Qty. Outstanding (Base);
                                                   MaintainSIFTIndex=No }
    {    ;No.,Source Type,Source Subtype,Source No.,Source Line No.;
                                                   MaintainSQLIndex=No }
    {    ;Item No.,Location Code,Variant Code,Due Date;
                                                   SumIndexFields=Qty. Outstanding (Base),Qty. Picked (Base),Qty. Shipped (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Bin Code,Location Code                  ;SumIndexFields=Cubage,Weight;
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot handle more than the outstanding %1 units.;ENG=You cannot handle more than the outstanding %1 units.';
      Location@1001 : Record 14;
      Item@1016 : Record 27;
      WhseShptHeader@1002 : Record 7320;
      Text001@1003 : TextConst 'ENU=must not be less than %1 units;ENG=must not be less than %1 units';
      Text002@1004 : TextConst 'ENU=must not be greater than %1 units;ENG=must not be greater than %1 units';
      Text003@1005 : TextConst 'ENU=must be greater than zero;ENG=must be greater than zero';
      Text005@1007 : TextConst 'ENU=The picked quantity is not enough to ship all lines.;ENG=The picked quantity is not enough to ship all lines.';
      HideValidationDialog@1008 : Boolean;
      Text007@1010 : TextConst '@@@="Qty. Picked = 2 is greater than Qty. Shipped = 0. If you delete the Warehouse Shipment Line, the items will remain in the shipping area until you put them away.\Related Item Tracking information defined during pick will be deleted.\Do you still want to delete the Warehouse Shipment Line?";ENU="%1 = %2 is greater than %3 = %4. If you delete the %5, the items will remain in the shipping area until you put them away.\Related Item Tracking information defined during pick will be deleted.\Do you still want to delete the %5?";ENG="%1 = %2 is greater than %3 = %4. If you delete the %5, the items will remain in the shipping area until you put them away.\Related Item Tracking information defined during pick will be deleted.\Do you still want to delete the %5?"';
      Text008@1011 : TextConst 'ENU=You cannot rename a %1.;ENG=You cannot rename a %1.';
      Text009@1013 : TextConst 'ENU=%1 is set to %2. %3 should be %4.\\;ENG=%1 is set to %2. %3 should be %4.\\';
      Text010@1012 : TextConst 'ENU=Accept the entered value?;ENG=Accept the entered value?';
      Text011@1014 : TextConst 'ENU=Nothing to handle.;ENG=Nothing to handle.';
      IgnoreErrors@1006 : Boolean;
      ErrorOccured@1017 : Boolean;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE CalcQty@5(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetLocation@1(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE TestReleased@37();
    BEGIN
      TESTFIELD("No.");
      GetWhseShptHeader("No.");
      WhseShptHeader.TESTFIELD(Status,WhseShptHeader.Status::Open);
    END;

    PROCEDURE CheckBin@9(DeductCubage@1000 : Decimal;DeductWeight@1001 : Decimal);
    VAR
      Bin@1005 : Record 7354;
      BinContent@1004 : Record 7302;
    BEGIN
      IF "Bin Code" <> '' THEN BEGIN
        GetLocation("Location Code");
        IF NOT Location."Directed Put-away and Pick" THEN
          EXIT;

        IF BinContent.GET(
             "Location Code","Bin Code",
             "Item No.","Variant Code","Unit of Measure Code")
        THEN BEGIN
          IF NOT BinContent.CheckIncreaseBinContent(
               "Qty. Outstanding","Qty. Outstanding",
               DeductCubage,DeductWeight,Cubage,Weight,FALSE,IgnoreErrors)
          THEN
            ErrorOccured := TRUE;
        END ELSE BEGIN
          Bin.GET("Location Code","Bin Code");
          IF NOT Bin.CheckIncreaseBin(
               "Bin Code","Item No.","Qty. Outstanding",
               DeductCubage,DeductWeight,Cubage,Weight,FALSE,IgnoreErrors)
          THEN
            ErrorOccured := TRUE;
        END;
      END;
      IF ErrorOccured THEN
        "Bin Code" := '';
    END;

    PROCEDURE CheckSourceDocLineQty@3();
    VAR
      WhseShptLine@1005 : Record 7321;
      SalesLine@1002 : Record 37;
      PurchaseLine@1003 : Record 39;
      TransferLine@1004 : Record 5741;
      ServiceLine@1007 : Record 5902;
      WhseQtyOutstandingBase@1006 : Decimal;
      QtyOutstandingBase@1000 : Decimal;
      QuantityBase@1001 : Decimal;
    BEGIN
      IF "Qty. (Base)" = 0 THEN
        QuantityBase := CalcBaseQty(Quantity)
      ELSE
        QuantityBase := "Qty. (Base)";
      WhseShptLine.SETCURRENTKEY("Source Type");
      WhseShptLine.SETRANGE("Source Type","Source Type");
      WhseShptLine.SETRANGE("Source Subtype","Source Subtype");
      WhseShptLine.SETRANGE("Source No.","Source No.");
      WhseShptLine.SETRANGE("Source Line No.","Source Line No.");
      WhseShptLine.CALCSUMS("Qty. Outstanding (Base)");
      IF WhseShptLine.FIND('-') THEN
        REPEAT
          IF (WhseShptLine."No." <> "No.") OR
             (WhseShptLine."Line No." <> "Line No.")
          THEN
            WhseQtyOutstandingBase := WhseQtyOutstandingBase + WhseShptLine."Qty. Outstanding (Base)";
        UNTIL WhseShptLine.NEXT = 0;

      CASE "Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.GET("Source Subtype","Source No.","Source Line No.");
            IF ABS(SalesLine."Outstanding Qty. (Base)") < WhseQtyOutstandingBase + QuantityBase THEN
              FIELDERROR(Quantity,STRSUBSTNO(Text002,CalcQty(SalesLine."Outstanding Qty. (Base)" - WhseQtyOutstandingBase)));
            QtyOutstandingBase := ABS(SalesLine."Outstanding Qty. (Base)");
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchaseLine.GET("Source Subtype","Source No.","Source Line No.");
            IF ABS(PurchaseLine."Outstanding Qty. (Base)") < WhseQtyOutstandingBase + QuantityBase THEN
              FIELDERROR(Quantity,STRSUBSTNO(Text002,CalcQty(ABS(PurchaseLine."Outstanding Qty. (Base)") - WhseQtyOutstandingBase)));
            QtyOutstandingBase := ABS(PurchaseLine."Outstanding Qty. (Base)");
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TransferLine.GET("Source No.","Source Line No.");
            IF TransferLine."Outstanding Qty. (Base)" < WhseQtyOutstandingBase + QuantityBase THEN
              FIELDERROR(Quantity,STRSUBSTNO(Text002,CalcQty(TransferLine."Outstanding Qty. (Base)" - WhseQtyOutstandingBase)));
            QtyOutstandingBase := TransferLine."Outstanding Qty. (Base)";
          END;
        DATABASE::"Service Line":
          BEGIN
            ServiceLine.GET("Source Subtype","Source No.","Source Line No.");
            IF ABS(ServiceLine."Outstanding Qty. (Base)") < WhseQtyOutstandingBase + QuantityBase THEN
              FIELDERROR(Quantity,STRSUBSTNO(Text002,CalcQty(ServiceLine."Outstanding Qty. (Base)" - WhseQtyOutstandingBase)));
            QtyOutstandingBase := ABS(ServiceLine."Outstanding Qty. (Base)");
          END;
      END;
      IF QuantityBase > QtyOutstandingBase THEN
        FIELDERROR(Quantity,STRSUBSTNO(Text002,FIELDCAPTION("Qty. Outstanding")));
    END;

    PROCEDURE CalcStatusShptLine@4() : Integer;
    BEGIN
      IF (Quantity = "Qty. Shipped") OR ("Qty. (Base)" = "Qty. Shipped (Base)") THEN
        EXIT(Status::"Completely Shipped");
      IF "Qty. Shipped" > 0 THEN
        EXIT(Status::"Partially Shipped");
      IF (Quantity = "Qty. Picked") OR ("Qty. (Base)" = "Qty. Picked (Base)") THEN
        EXIT(Status::"Completely Picked");
      IF "Qty. Picked" > 0 THEN
        EXIT(Status::"Partially Picked");
      EXIT(Status::" ");
    END;

    PROCEDURE AutofillQtyToHandle@10(VAR WhseShptLine@1000 : Record 7321);
    VAR
      NotEnough@1001 : Boolean;
    BEGIN
      WITH WhseShptLine DO BEGIN
        NotEnough := FALSE;
        SetHideValidationDialog(TRUE);
        IF FIND('-') THEN
          REPEAT
            GetLocation("Location Code");
            IF Location."Require Pick" THEN
              VALIDATE("Qty. to Ship (Base)","Qty. Picked (Base)" - "Qty. Shipped (Base)")
            ELSE
              VALIDATE("Qty. to Ship (Base)","Qty. Outstanding (Base)");
            MODIFY;
            IF NOT NotEnough THEN
              IF ("Qty. to Ship (Base)" < "Qty. Outstanding (Base)") AND
                 ("Shipping Advice" = "Shipping Advice"::Complete)
              THEN
                NotEnough := TRUE;
          UNTIL NEXT = 0;
        SetHideValidationDialog(FALSE);
        IF NotEnough THEN
          MESSAGE(Text005);
      END;
    END;

    PROCEDURE DeleteQtyToHandle@11(VAR WhseShptLine@1000 : Record 7321);
    BEGIN
      WITH WhseShptLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            VALIDATE("Qty. to Ship",0);
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE SetHideValidationDialog@8(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetWhseShptHeader@6(WhseShptNo@1000 : Code[20]);
    BEGIN
      IF WhseShptHeader."No." <> WhseShptNo THEN
        WhseShptHeader.GET(WhseShptNo);
    END;

    PROCEDURE CreatePickDoc@7(VAR WhseShptLine@1000 : Record 7321;WhseShptHeader2@1001 : Record 7320);
    VAR
      CreatePickFromWhseShpt@1002 : Report 7318;
    BEGIN
      WhseShptHeader2.TESTFIELD(Status,WhseShptHeader.Status::Released);
      WhseShptLine.SETFILTER(Quantity,'>0');
      WhseShptLine.SETRANGE("Completely Picked",FALSE);
      IF WhseShptLine.FIND('-') THEN BEGIN
        CreatePickFromWhseShpt.SetWhseShipmentLine(WhseShptLine,WhseShptHeader2);
        CreatePickFromWhseShpt.SetHideValidationDialog(HideValidationDialog);
        CreatePickFromWhseShpt.USEREQUESTPAGE(NOT HideValidationDialog);
        CreatePickFromWhseShpt.RUNMODAL;
        CreatePickFromWhseShpt.GetResultMessage;
        CLEAR(CreatePickFromWhseShpt);
      END ELSE
        IF NOT HideValidationDialog THEN
          MESSAGE(Text011);
    END;

    LOCAL PROCEDURE GetItem@15();
    BEGIN
      IF Item."No." <> "Item No." THEN
        Item.GET("Item No.");
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      PurchaseLine@1000 : Record 39;
      SalesLine@1001 : Record 37;
      ServiceLine@1009 : Record 5902;
      TransferLine@1002 : Record 5741;
      ReservePurchLine@1003 : Codeunit 99000834;
      ReserveSalesLine@1004 : Codeunit 99000832;
      ReserveTransferLine@1005 : Codeunit 99000836;
      ServiceLineReserve@1008 : Codeunit 99000842;
      SecondSourceQtyArray@1007 : ARRAY [3] OF Decimal;
      Direction@1006 : 'Outbound,Inbound';
    BEGIN
      TESTFIELD("No.");
      TESTFIELD("Qty. (Base)");

      GetItem;
      Item.TESTFIELD("Item Tracking Code");

      SecondSourceQtyArray[1] := DATABASE::"Warehouse Receipt Line";
      SecondSourceQtyArray[2] := "Qty. to Ship (Base)";
      SecondSourceQtyArray[3] := 0;

      CASE "Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            IF SalesLine.GET("Source Subtype","Source No.","Source Line No.") THEN
              ReserveSalesLine.CallItemTracking2(SalesLine,SecondSourceQtyArray);
          END;
        DATABASE::"Service Line":
          BEGIN
            IF ServiceLine.GET("Source Subtype","Source No.","Source Line No.") THEN
              ServiceLineReserve.CallItemTracking(ServiceLine);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            IF PurchaseLine.GET("Source Subtype","Source No.","Source Line No.") THEN
              ReservePurchLine.CallItemTracking2(PurchaseLine,SecondSourceQtyArray);
          END;
        DATABASE::"Transfer Line":
          BEGIN
            Direction := Direction::Outbound;
            IF TransferLine.GET("Source No.","Source Line No.") THEN
              ReserveTransferLine.CallItemTracking2(TransferLine,Direction,SecondSourceQtyArray);
          END
      END;
    END;

    PROCEDURE SetIgnoreErrors@12();
    BEGIN
      IgnoreErrors := TRUE;
    END;

    PROCEDURE HasErrorOccured@13() : Boolean;
    BEGIN
      EXIT(ErrorOccured);
    END;

    PROCEDURE GetATOAndNonATOLines@16(VAR ATOWhseShptLine@1001 : Record 7321;VAR NonATOWhseShptLine@1002 : Record 7321;VAR ATOLineFound@1004 : Boolean;VAR NonATOLineFound@1003 : Boolean);
    VAR
      WhseShptLine@1000 : Record 7321;
    BEGIN
      WhseShptLine.COPY(Rec);
      WhseShptLine.SETRANGE("Source Type","Source Type");
      WhseShptLine.SETRANGE("Source Subtype","Source Subtype");
      WhseShptLine.SETRANGE("Source No.","Source No.");
      WhseShptLine.SETRANGE("Source Line No.","Source Line No.");

      NonATOWhseShptLine.COPY(WhseShptLine);
      NonATOWhseShptLine.SETRANGE("Assemble to Order",FALSE);
      NonATOLineFound := NonATOWhseShptLine.FINDFIRST;

      ATOWhseShptLine.COPY(WhseShptLine);
      ATOWhseShptLine.SETRANGE("Assemble to Order",TRUE);
      ATOLineFound := ATOWhseShptLine.FINDFIRST;
    END;

    PROCEDURE FullATOPosted@21() : Boolean;
    VAR
      SalesLine@1001 : Record 37;
      ATOWhseShptLine@1002 : Record 7321;
    BEGIN
      IF "Source Document" <> "Source Document"::"Sales Order" THEN
        EXIT(TRUE);
      SalesLine.SETRANGE("Document Type","Source Subtype");
      SalesLine.SETRANGE("Document No.","Source No.");
      SalesLine.SETRANGE("Line No.","Source Line No.");
      IF NOT SalesLine.FINDFIRST THEN
        EXIT(TRUE);
      IF SalesLine."Qty. Shipped (Base)" >= SalesLine."Qty. to Asm. to Order (Base)" THEN
        EXIT(TRUE);
      ATOWhseShptLine.SETRANGE("No.","No.");
      ATOWhseShptLine.SETRANGE("Source Type","Source Type");
      ATOWhseShptLine.SETRANGE("Source Subtype","Source Subtype");
      ATOWhseShptLine.SETRANGE("Source No.","Source No.");
      ATOWhseShptLine.SETRANGE("Source Line No.","Source Line No.");
      ATOWhseShptLine.SETRANGE("Assemble to Order",TRUE);
      ATOWhseShptLine.CALCSUMS("Qty. to Ship (Base)");
      EXIT((SalesLine."Qty. Shipped (Base)" + ATOWhseShptLine."Qty. to Ship (Base)") >= SalesLine."Qty. to Asm. to Order (Base)");
    END;

    PROCEDURE InitOutstandingQtys@2();
    BEGIN
      VALIDATE("Qty. Outstanding",Quantity - "Qty. Shipped");
      "Qty. Outstanding (Base)" := "Qty. (Base)" - "Qty. Shipped (Base)";
    END;

    PROCEDURE GetWhseShptLine@17(VAR WhseShptLine@1000 : Record 7321;WhseShptHeaderNo@1004 : Code[20];SourceType@1001 : Integer;SourceSubtype@1002 : Option;SourceNo@1003 : Code[20];SourceLineNo@1005 : Integer);
    BEGIN
      WhseShptLine.SETRANGE("No.",WhseShptHeaderNo);
      WhseShptLine.SETRANGE("Source Type",SourceType);
      WhseShptLine.SETRANGE("Source Subtype",SourceSubtype);
      WhseShptLine.SETRANGE("Source No.",SourceNo);
      WhseShptLine.SETRANGE("Source Line No.",SourceLineNo);
      WhseShptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE "--- NS.F ---"@1000000000();
    BEGIN
    END;

    PROCEDURE DeleteQualityInspection@1000000002();
    VAR
      lItemQualityInspectionLine@1000000000 : Record 9087040;
    BEGIN
      //DOC NS2016.16 - Deleting quality inspection

      lItemQualityInspectionLine.RESET();
      lItemQualityInspectionLine.SETCURRENTKEY("Document Type", "Document No.", "Document Line No.");
      lItemQualityInspectionLine.SETRANGE("Document Type", lItemQualityInspectionLine."Document Type"::"Warehouse Shipment");
      lItemQualityInspectionLine.SETRANGE("Document No.", Rec."No.");
      lItemQualityInspectionLine.SETRANGE("Document Line No.", Rec."Line No.");
      lItemQualityInspectionLine.DELETEALL(TRUE);
    END;

    PROCEDURE UpdateQualityInspection@1000000001();
    VAR
      lCustomer@1000000005 : Record 18;
      lVendor@1000000004 : Record 23;
      lItem@1000000003 : Record 27;
      lPurchaseLine@1000000002 : Record 39;
      lSalesLine@1000000001 : Record 37;
      lQualityInspectionPercent@1000000000 : Decimal;
    BEGIN
      //DOC NS2016.16 - Updating quality inspection

      lQualityInspectionPercent := 0;
      IF (Rec."Quality Inspection Required") THEN
      BEGIN
        CASE (Rec."Source Type") OF
          DATABASE::"Purchase Line":
            IF (lPurchaseLine.GET(Rec."Source Subtype", Rec."Source No.",
                Rec."Source Line No.")) THEN
            BEGIN
              lVendor.GET(lPurchaseLine."Buy-from Vendor No.");
              lQualityInspectionPercent := lVendor."Quality Inspection %";
            END;
          DATABASE::"Sales Line":
            IF (lSalesLine.GET(Rec."Source Subtype", Rec."Source No.",
                Rec."Source Line No.")) THEN
            BEGIN
              lCustomer.GET(lSalesLine."Sell-to Customer No.");
              lQualityInspectionPercent := lCustomer."Quality Inspection %";
            END;
        END;
        IF (Rec."Item No." <> '') THEN
        BEGIN
          lItem.GET(Rec."Item No.");
          IF (lItem."Quality Inspection %" > lQualityInspectionPercent) THEN
            lQualityInspectionPercent := lItem."Quality Inspection %";
        END;
      END;
      Rec.VALIDATE("Quality Inspection %", lQualityInspectionPercent);
    END;

    BEGIN
    {
      //DOC NS2015.1  SD 22/01/2014 - New fields added
      //DOC NS2016.16 JH 05/10/2016 - nSemble 2016
    }
    END.
  }
}

