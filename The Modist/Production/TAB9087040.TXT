OBJECT Table 9087040 Item Quality Inspection Line
{
  OBJECT-PROPERTIES
  {
    Date=05/10/16;
    Time=12:28:47 PM;
    Version List=NS2016.16;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Document Type");
               Rec.TESTFIELD("Document No.");
               UpdateWarehouseActivityType();
             END;

    OnRename=BEGIN
               UpdateWarehouseActivityType();
             END;

    CaptionML=[ENU=Item Quality Inspection Line;
               ENG=Item Quality Inspection Line];
    LookupPageID=Page9062652;
    DrillDownPageID=Page9062652;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Entry No.;
                                                              ENG=Entry No.] }
    { 10  ;   ;Document Type       ;Option        ;OnValidate=BEGIN
                                                                UpdateWarehouseActivityType();
                                                              END;

                                                   CaptionML=[ENU=Document Type;
                                                              ENG=Document Type];
                                                   OptionCaptionML=[ENU=" ,Warehouse Receipt,Warehouse Shipment,Put-away,Pick";
                                                                    ENG=" ,Warehouse Receipt,Warehouse Shipment,Put-away,Pick"];
                                                   OptionString=[ ,Warehouse Receipt,Warehouse Shipment,Put-away,Pick] }
    { 11  ;   ;Document No.        ;Code20        ;TableRelation=IF (Document Type=CONST(Warehouse Receipt)) "Warehouse Receipt Header"
                                                                 ELSE IF (Document Type=CONST(Warehouse Shipment)) "Warehouse Shipment Header";
                                                   CaptionML=[ENU=Document No.;
                                                              ENG=Document No.] }
    { 12  ;   ;Document Line No.   ;Integer       ;TableRelation=IF (Document Type=CONST(Warehouse Receipt)) "Warehouse Receipt Line"."Line No." WHERE (No.=FIELD(Document No.))
                                                                 ELSE IF (Document Type=CONST(Warehouse Shipment)) "Warehouse Shipment Line"."Line No." WHERE (No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Document Line No.;
                                                              ENG=Document Line No.] }
    { 20  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Item No." <> xRec."Item No.") THEN
                                                                  Rec.VALIDATE("Variant Code", '');
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ENG=Item No.] }
    { 21  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> '') THEN BEGIN
                                                                  IF ("Variant Code" = '') THEN BEGIN
                                                                    Item.GET("Item No.");
                                                                    Description := Item.Description;
                                                                    "Description 2" := Item."Description 2";
                                                                  END ELSE BEGIN
                                                                    Itemvariant.GET("Item No.", "Variant Code");
                                                                    Description := Itemvariant.Description;
                                                                    "Description 2" := Itemvariant."Description 2";
                                                                  END;
                                                                END ELSE BEGIN
                                                                  Description := '';
                                                                  "Description 2" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ENG=Variant Code] }
    { 30  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 31  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENG=Description 2] }
    { 40  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code] }
    { 50  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF (Rec.Quantity < Rec."Qty. of Inspected Items") THEN
                                                                  ERROR(tCantBeLowerThan, Rec.FIELDCAPTION(Quantity), Rec.FIELDCAPTION("Qty. of Inspected Items"));
                                                                UpdateQuantities();
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENG=Quantity];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 51  ;   ;Qty. to Receive     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Warehouse Receipt Line"."Qty. to Receive" WHERE (No.=FIELD(Document No.),
                                                                                                                        Line No.=FIELD(Document Line No.)));
                                                   CaptionML=[ENU=Qty. to Receive;
                                                              ENG=Qty. to Receive];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 52  ;   ;Outstanding Quantity;Decimal       ;CaptionML=[ENU=Outstanding Quantity;
                                                              ENG=Outstanding Quantity];
                                                   Editable=No }
    { 60  ;   ;Qty. of Valid Items ;Decimal       ;OnValidate=BEGIN
                                                                 UpdateQuantities();
                                                              END;

                                                   CaptionML=[ENU=Qty. of Valid Items;
                                                              ENG=Qty. of Valid Items];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 61  ;   ;Qty. of Faulty Items;Decimal       ;OnValidate=BEGIN
                                                                 UpdateQuantities();
                                                              END;

                                                   CaptionML=[ENU=Qty. of Faulty Items;
                                                              ENG=Qty. of Faulty Items];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 62  ;   ;Qty. of Inspected Items;Decimal    ;OnValidate=BEGIN
                                                                 IF (Rec."Qty. of Inspected Items" > Rec.Quantity) THEN
                                                                   ERROR(tCantBeGreaterThan, Rec.FIELDCAPTION("Qty. of Inspected Items"), Rec.FIELDCAPTION(Quantity));

                                                                 "Outstanding Quantity" := Quantity - "Qty. of Inspected Items";
                                                                 IF ("Outstanding Quantity" < 0) THEN
                                                                   "Outstanding Quantity" := 0;
                                                              END;

                                                   CaptionML=[ENU=Qty. of Inspected Items;
                                                              ENG=Qty. of Inspected Items];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 70  ;   ;Finished            ;Boolean       ;OnValidate=BEGIN
                                                                 Rec.VALIDATE(Outstanding, NOT (Rec.Finished));
                                                              END;

                                                   CaptionML=[ENU=Finished;
                                                              ENG=Finished] }
    { 71  ;   ;Outstanding         ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Outstanding;
                                                              ENG=Outstanding] }
    { 80  ;   ;Inspection Failed   ;Boolean       ;CaptionML=[ENU=Failed;
                                                              ENG=Failed] }
    { 90  ;   ;Warehouse Activity Type;Option     ;CaptionML=[ENU=Warehouse Activity Type;
                                                              ENG=Warehouse Activity Type];
                                                   OptionCaptionML=[ENU=" ,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Invt. Movement";
                                                                    ENG=" ,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Invt. Movement"];
                                                   OptionString=[ ,Put-away,Pick,Movement,Invt. Put-away,Invt. Pick,Invt. Movement];
                                                   Editable=No }
    { 100 ;   ;Picture             ;BLOB          ;CaptionML=[ENU=Picture;
                                                              ENG=Picture];
                                                   SubType=Bitmap }
  }
  KEYS
  {
    {    ;Entry No.                                }
    {    ;Document Type,Document No.,Document Line No.;
                                                   SumIndexFields=Quantity,Qty. of Valid Items,Qty. of Faulty Items,Qty. of Inspected Items;
                                                   Clustered=Yes }
    {    ;Warehouse Activity Type,Document No.,Document Line No.;
                                                   SumIndexFields=Quantity,Qty. of Valid Items,Qty. of Faulty Items,Qty. of Inspected Items }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      tCantBeLowerThan@1000000000 : TextConst 'ENU="""%1"" can''t be lower than ""%2"".";ENG="""%1"" can''t be lower than ""%2""."';
      tCantBeGreaterThan@1000000001 : TextConst 'ENU="""%1"" can''t be greater than ""%2"".";ENG="""%1"" can''t be greater than ""%2""."';
      tCantBeFound@1000000002 : TextConst 'ENU=%1 "%2" can''t be found;ENG=%1 "%2" can''t be found';
      mItemQualityInspectionMgt@1000000003 : Codeunit 9087014;
      Item@1000000004 : Record 27;
      Itemvariant@1000000005 : Record 5401;

    PROCEDURE UpdateWarehouseActivityType@1000000005();
    BEGIN
      Rec.VALIDATE("Warehouse Activity Type", mItemQualityInspectionMgt.ItemQualityInspDocTypeToWhseActType(Rec."Document Type"));
    END;

    LOCAL PROCEDURE UpdateQuantities@1000000000();
    VAR
      lWarehouseReceiptHeader@1000000004 : Record 7316;
      lWarehouseReceiptLine@1000000001 : Record 7317;
      lWarehouseShipmentHeader@1000000002 : Record 7320;
      lWarehouseShipmentLine@1000000003 : Record 7321;
      lWarehouseActivityHeader@1000000000 : Record 5766;
      lWarehouseActivityLine@1000000005 : Record 5767;
      lInspectionline@1000000007 : Record 9087040;
      lActivityType@1000000006 : Integer;
      lDocInspectionFinished@1000000008 : Boolean;
      lDocInspectionFailed@1000000009 : Boolean;
    BEGIN
      VALIDATE("Qty. of Inspected Items", "Qty. of Valid Items" + "Qty. of Faulty Items");
      "Inspection Failed" := ("Qty. of Faulty Items" > 0);
      Finished := (Rec."Qty. of Inspected Items" >= Rec.Quantity);
    END;

    PROCEDURE ShowDocument@1000000003();
    VAR
      lWarehouseReceiptHeader@1000000000 : Record 7316;
      lPostedWhseReceiptHeader@1000000002 : Record 7318;
      lWarehouseShipmentHeader@1000000001 : Record 7320;
      lPostedWhseShipmentHeader@1000000003 : Record 7322;
      lWarehouseActivityHeader@1000000005 : Record 5766;
    BEGIN
      Rec.TESTFIELD("Document Type");
      Rec.TESTFIELD("Document No.");
      CASE (Rec."Document Type") OF
        Rec."Document Type"::"Warehouse Receipt":
          IF (lWarehouseReceiptHeader.GET(Rec."Document No.")) THEN
            PAGE.RUN(PAGE::"Warehouse Receipt", lWarehouseReceiptHeader)
          ELSE
          BEGIN
            lPostedWhseReceiptHeader.RESET();
            lPostedWhseReceiptHeader.SETCURRENTKEY("Whse. Receipt No.");
            lPostedWhseReceiptHeader.SETRANGE("Whse. Receipt No.", Rec."Document No.");
            IF (lPostedWhseReceiptHeader.FINDFIRST()) THEN
              PAGE.RUN(PAGE::"Posted Whse. Receipt", lPostedWhseReceiptHeader)
            ELSE
              ERROR(tCantBeFound, FORMAT(Rec."Document Type"), Rec."Document No.");
          END;
        Rec."Document Type"::"Warehouse Shipment":
          IF (lWarehouseShipmentHeader.GET(Rec."Document No.")) THEN
            PAGE.RUN(PAGE::"Warehouse Shipment", lWarehouseShipmentHeader)
          ELSE
          BEGIN
            lPostedWhseShipmentHeader.RESET();
            lPostedWhseShipmentHeader.SETCURRENTKEY("Whse. Shipment No.");
            lPostedWhseShipmentHeader.SETRANGE("Whse. Shipment No.", Rec."Document No.");
            IF (lPostedWhseShipmentHeader.FINDFIRST()) THEN
              PAGE.RUN(PAGE::"Posted Whse. Shipment", lPostedWhseShipmentHeader)
            ELSE
              ERROR(tCantBeFound, FORMAT(Rec."Document Type"), Rec."Document No.");
          END;
        Rec."Document Type"::"Put-away":
          ShowWarehouseActivity(lWarehouseActivityHeader.Type::"Put-away", PAGE::"Warehouse Put-away", PAGE::"Registered Put-away");
        Rec."Document Type"::Pick:
          ShowWarehouseActivity(lWarehouseActivityHeader.Type::Pick, PAGE::"Warehouse Pick", PAGE::"Registered Pick");
      END;
    END;

    LOCAL PROCEDURE ShowWarehouseActivity@1000000002(pType@1000000000 : Integer;pPageId@1000000003 : Integer;pPostedPageId@1000000004 : Integer);
    VAR
      lWarehouseActivityHeader@1000000002 : Record 5766;
      lRegisteredWhseActivityHdr@1000000001 : Record 5772;
    BEGIN
      IF (lWarehouseActivityHeader.GET(pType, Rec."Document No.")) THEN
        PAGE.RUN(pPageId, lWarehouseActivityHeader)
      ELSE
      BEGIN
        lRegisteredWhseActivityHdr.RESET();
        lRegisteredWhseActivityHdr.SETCURRENTKEY("Whse. Activity No.");
        lRegisteredWhseActivityHdr.SETRANGE(Type, pType);
        lRegisteredWhseActivityHdr.SETRANGE("Whse. Activity No.", Rec."Document No.");
        IF (lRegisteredWhseActivityHdr.FINDFIRST()) THEN
          PAGE.RUN(pPostedPageId, lRegisteredWhseActivityHdr)
        ELSE
        BEGIN
          lRegisteredWhseActivityHdr.Type := pType;
          ERROR(tCantBeFound, FORMAT(lRegisteredWhseActivityHdr.Type), Rec."Document No.");
        END;
      END;
    END;

    BEGIN
    {
      //DOC NS2015.1  AZ 17/01/2014 - Created
      //DOC NS2015.1  JH 19/02/2014 - Primary key redesigned
      //DOC NS2016.16 JH 05/09/2016 - nSemble 2016
    }
    END.
  }
}

