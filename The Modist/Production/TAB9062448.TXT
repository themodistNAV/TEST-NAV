OBJECT Table 9062448 Consignment Line
{
  OBJECT-PROPERTIES
  {
    Date=23/09/16;
    Time=[ 9:25:16 AM];
    Version List=NH2016.15,NS2016.16;
  }
  PROPERTIES
  {
    OnDelete=VAR
               eUsedFor@1000000002 : TextConst 'ENU=Consignment "%1" line %2 has ben used to create warehouse receipt "%3" line %4. It can''t be deleted.;ENG=Consignment "%1" line %2 has ben used to create warehouse receipt "%3" line %4. It can''t be deleted.';
             BEGIN
               TestStatusOpen();
             END;

    CaptionML=[ENU=Consignment Line;
               ENG=Consignment Line];
  }
  FIELDS
  {
    { 1   ;   ;Consignment No.     ;Code20        ;TableRelation="Consignment Header";
                                                   OnValidate=BEGIN
                                                                ConsignmentHeader.GET("Consignment No.");
                                                                "Vendor No." := ConsignmentHeader."Vendor No.";
                                                              END;

                                                   CaptionML=[ENU=Consignment No.;
                                                              ENG=Consignment No.] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
    { 3   ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor No.;
                                                              ENG=Vendor No.] }
    { 4   ;   ;Purchase Order No.  ;Code20        ;TableRelation=IF (Vendor No.=FILTER(<>'')) "Purchase Header".No. WHERE (Document Type=CONST(Order),
                                                                                                                           Buy-from Vendor No.=FIELD(Vendor No.))
                                                                                                                           ELSE IF (Vendor No.=FILTER('')) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=[ENU=Purchase Order No.;
                                                              ENG=Purchase Order No.] }
    { 5   ;   ;Purchase Order Line No.;Integer    ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                   Document No.=FIELD(Purchase Order No.));
                                                   OnValidate=BEGIN
                                                                IF (PurchaseLine.GET(PurchaseLine."Document Type"::Order, "Purchase Order No.", "Purchase Order Line No.")) THEN BEGIN
                                                                  ConsignmentMgt.CopyFieldsFromPurchLine(Rec, PurchaseLine);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Purchase Order Line No.;
                                                              ENG=Purchase Order Line No.] }
    { 6   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF ("Item No." <> xRec."Item No.") THEN
                                                                  VALIDATE("Variant Code", '');

                                                                IF ("Item No." <> '') THEN BEGIN
                                                                  Item.GET("Item No.");
                                                                  Description := Item.Description;
                                                                  "Description 2" := Item."Description 2";
                                                                END ELSE BEGIN
                                                                  Description := Item.Description;
                                                                  "Description 2" := Item."Description 2";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ENG=Item No.];
                                                   Editable=No }
    { 7   ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                IF "Qty. Per Unit of Measure" = 0 THEN BEGIN
                                                                  "Quantity (Base)" := Quantity;
                                                                END ELSE BEGIN
                                                                  "Quantity (Base)" := Quantity * "Qty. Per Unit of Measure";
                                                                END;
                                                                Rec.VALIDATE("Cost Amount", Rec.Quantity * Rec."Landed Cost");
                                                                QuantityChanged(FALSE);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENG=Quantity];
                                                   DecimalPlaces=0:5 }
    { 8   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description];
                                                   Editable=No }
    { 9   ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENG=Description 2] }
    { 10  ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                IF "Qty. Per Unit of Measure" = 0 THEN
                                                                  Quantity := "Quantity (Base)"
                                                                ELSE
                                                                  Quantity := "Quantity (Base)" / "Qty. Per Unit of Measure";
                                                                Rec.VALIDATE("Cost Amount", Rec.Quantity * Rec."Landed Cost");
                                                                QuantityChanged(FALSE);
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ENG=Quantity (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 11  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                Rec.VALIDATE("Landed Cost", Rec."Direct Unit Cost" + Rec."Overhead Rate");
                                                              END;

                                                   CaptionML=[ENU=Direct Unit Cost;
                                                              ENG=Direct Unit Cost] }
    { 12  ;   ;Cost Amount         ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Cost Amount;
                                                              ENG=Cost Amount];
                                                   Editable=No }
    { 13  ;   ;Unit of Measure     ;Code20        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure;
                                                              ENG=Unit of Measure];
                                                   Editable=No }
    { 14  ;   ;Qty. Per Unit of Measure;Decimal   ;CaptionML=[ENU=Qty. Per Unit of Measure;
                                                              ENG=Qty. Per Unit of Measure];
                                                   Editable=No }
    { 15  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ENG=Variant Code];
                                                   Editable=No }
    { 16  ;   ;Overhead Rate       ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                OverheadRateValidation := TRUE;
                                                                Rec.VALIDATE("Landed Cost", Rec."Direct Unit Cost" + Rec."Overhead Rate");
                                                                IF (NOT(OverheadAmountValidation)) THEN
                                                                  Rec.VALIDATE("Overhead Amount", Rec.Quantity * Rec."Overhead Rate");
                                                                Rec.VALIDATE("Landed Cost", Rec."Direct Unit Cost" + Rec."Overhead Rate");
                                                                OverheadRateValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Overhead Rate;
                                                              ENG=Overhead Rate] }
    { 17  ;   ;Overhead Amount     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                OverheadAmountValidation := TRUE;
                                                                IF (NOT(OverheadRateValidation)) THEN
                                                                BEGIN
                                                                  Currency.InitRoundingPrecision();
                                                                  IF (Rec.Quantity <> 0) THEN
                                                                    Rec.VALIDATE("Overhead Rate", ROUND(Rec."Overhead Amount" / Rec.Quantity, Currency."Unit-Amount Rounding Precision"))
                                                                  ELSE
                                                                    Rec.VALIDATE("Overhead Rate", 0);
                                                                END;
                                                                OverheadAmountValidation := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Overhead Amount;
                                                              ENG=Overhead Amount] }
    { 18  ;   ;Landed Cost         ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen();
                                                                Rec.VALIDATE("Cost Amount", Rec.Quantity * Rec."Landed Cost");
                                                              END;

                                                   CaptionML=[ENU=Landed Cost;
                                                              ENG=Landed Cost] }
    { 19  ;   ;Outstanding Order Quantity;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purchase Line"."Outstanding Quantity" WHERE (Document Type=CONST(Order),
                                                                                                                    Document No.=FIELD(Purchase Order No.),
                                                                                                                    Line No.=FIELD(Purchase Order Line No.)));
                                                   CaptionML=[ENU=Outstanding Order Quantity;
                                                              ENG=Outstanding Order Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;Vendor Item No.     ;Text20        ;CaptionML=[ENU=Vendor Item No.;
                                                              ENG=Vendor Item No.] }
    { 21  ;   ;Quantity Received   ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Received (Base)" := CalcBaseQty("Quantity Received");
                                                                UpdateOutstandingQty();
                                                              END;

                                                   CaptionML=[ENU=Quantity Received;
                                                              ENG=Quantity Received];
                                                   Editable=No }
    { 22  ;   ;Qty. Received (Base);Decimal       ;OnValidate=BEGIN
                                                                "Quantity Received" := CalcQty("Qty. Received (Base)");
                                                                UpdateOutstandingQty();
                                                              END;

                                                   CaptionML=[ENU=Qty. Received (Base);
                                                              ENG=Qty. Received (Base)];
                                                   Editable=No }
    { 23  ;   ;Outstanding Quantity;Decimal       ;OnValidate=BEGIN
                                                                "Outstanding Qty. (Base)" := CalcBaseQty("Outstanding Quantity");
                                                              END;

                                                   CaptionML=[ENU=Outstanding Quantity;
                                                              ENG=Outstanding Quantity];
                                                   Editable=No }
    { 24  ;   ;Outstanding Qty. (Base);Decimal    ;OnValidate=BEGIN
                                                                "Outstanding Quantity" := CalcQty("Outstanding Qty. (Base)");
                                                              END;

                                                   CaptionML=[ENU=Outstanding Qty. (Base);
                                                              ENG=Outstanding Qty. (Base)];
                                                   Editable=No }
    { 27  ;   ;Sequence            ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Variant".Field9062240 WHERE (Item No.=FIELD(Item No.),
                                                                                                         Code=FIELD(Variant Code)));
                                                   CaptionML=[ENU=Sequence;
                                                              ENG=Sequence];
                                                   Editable=No }
    { 9087000;;Store Allocation Code;Code20       ;OnValidate=BEGIN
                                                                IF (Rec."Store Allocation Code" <> xRec."Store Allocation Code") THEN
                                                                  UpdateStoreAllocationCode();
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowStoreAllocations();
                                                            END;

                                                   CaptionML=[ENU=Store Allocation Code;
                                                              ENG=Store Allocation Code];
                                                   Description=NS2016.16 }
    { 9087001;;Quantity Allocated  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Store Allocation Line".Quantity WHERE (Store Allocation Code=FIELD(Store Allocation Code),
                                                                                                           Item No.=FIELD(Item No.),
                                                                                                           Variant Code=FIELD(Variant Code)));
                                                   OnLookup=BEGIN
                                                              ShowStoreAllocations();
                                                            END;

                                                   CaptionML=[ENU=Quantity Allocated;
                                                              ENG=Quantity Allocated];
                                                   DecimalPlaces=0:5;
                                                   Description=NS2016.16;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Consignment No.,Line No.                ;SumIndexFields=Quantity,Quantity (Base);
                                                   Clustered=Yes }
    {    ;Purchase Order No.,Purchase Order Line No.;
                                                   SumIndexFields=Quantity,Quantity (Base) }
    {    ;Item No.                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ConsignmentHeader@1000000000 : Record 9062447;
      PurchaseLine@1000000002 : Record 39;
      Item@1000000001 : Record 27;
      Currency@1000000005 : Record 4;
      ConsignmentMgt@1000000006 : Codeunit 9062357;
      OverheadRateValidation@1000000003 : Boolean;
      OverheadAmountValidation@1000000004 : Boolean;
      DisableStatusCheck@1000000007 : Boolean;
      "--- NS.M ---"@1000000009 : Integer;
      StoreAllocationSender@1000000010 : Integer;

    PROCEDURE TestStatusOpen@1000000001();
    BEGIN
      IF (NOT(DisableStatusCheck)) THEN BEGIN
        ConsignmentHeader.GET(Rec."Consignment No.");
        ConsignmentHeader.TestStatusOpen();
      END;
    END;

    PROCEDURE TestStatusReleased@1000000002();
    BEGIN
      IF (NOT(DisableStatusCheck)) THEN BEGIN
        ConsignmentHeader.GET(Rec."Consignment No.");
        ConsignmentHeader.TestStatusReleased();
      END;
    END;

    PROCEDURE QuantityChanged@1000000000(LineDeleted@1000000000 : Boolean);
    BEGIN
      UpdateOutstandingQty();
    END;

    PROCEDURE UpdateOutstandingQty@1000000003();
    BEGIN
      "Outstanding Quantity" := Quantity - "Quantity Received";
      "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Received (Base)";
    END;

    PROCEDURE CalcBaseQty@1000000004(Qty@1000000000 : Decimal) : Decimal;
    BEGIN
      IF "Qty. Per Unit of Measure" = 0 THEN
        EXIT(Qty);
      EXIT(Qty * "Qty. Per Unit of Measure");
    END;

    PROCEDURE CalcQty@1000000006(Qty@1000000000 : Decimal) : Decimal;
    BEGIN
      IF "Qty. Per Unit of Measure" = 0 THEN
        EXIT(Qty);
      EXIT(Qty / "Qty. Per Unit of Measure");
    END;

    PROCEDURE SetDisableStatusCheck@1000000005(NewValue@1000000000 : Boolean);
    BEGIN
      DisableStatusCheck := NewValue;
    END;

    PROCEDURE ShowItem@1000000010();
    VAR
      lItem@1000000000 : Record 27;
    BEGIN
      //DOC NS2015.1 - Showing item

      Rec.TESTFIELD("Item No.");
      lItem.GET(Rec."Item No.");
      PAGE.RUN(PAGE::"Item Card", lItem);
    END;

    PROCEDURE ShowPurchaseOrder@1000000011();
    VAR
      lPurchaseHeader@1000000000 : Record 38;
    BEGIN
      //DOC NS2015.1 - Showing purchase order

      Rec.TESTFIELD("Purchase Order No.");
      lPurchaseHeader.GET(lPurchaseHeader."Document Type"::Order, Rec."Purchase Order No.");
      PAGE.RUN(PAGE::"Purchase Order", lPurchaseHeader);
    END;

    LOCAL PROCEDURE "--- NS.F ---"@1000000007();
    BEGIN
    END;

    PROCEDURE SetStoreAllocationSender@1000000012(pStoreAllocationSender@1000000000 : Integer);
    BEGIN
      //DOC NS2015.1 - Setting store allocation sender
      //  -> pStoreAllocationSender: The sender

      StoreAllocationSender := pStoreAllocationSender;
    END;

    PROCEDURE UpdateStoreAllocationCode@1000000009();
    VAR
      lPurchaseSummaryLine@1000000000 : Record 9087030;
    BEGIN
      //DOC NS2015.1 - Updating store allocation code

      IF ((Rec."Purchase Order No." = '') OR (Rec."Item No." = '')) THEN
        EXIT;

      IF (StoreAllocationSender <> DATABASE::"Purchase Summary Line") THEN
      BEGIN
        lPurchaseSummaryLine.RESET();
        lPurchaseSummaryLine.SETRANGE("Document Type", lPurchaseSummaryLine."Document Type"::Order);
        lPurchaseSummaryLine.SETRANGE("Document No.", Rec."Purchase Order No.");
        lPurchaseSummaryLine.SETRANGE(Type, lPurchaseSummaryLine.Type::Item);
        lPurchaseSummaryLine.SETRANGE("No.", Rec."Item No.");
        IF (lPurchaseSummaryLine.FINDSET(TRUE)) THEN
        REPEAT
          lPurchaseSummaryLine.SetStoreAllocationSender(DATABASE::"Consignment Line");
          lPurchaseSummaryLine.VALIDATE("Store Allocation Code", Rec."Store Allocation Code");
          lPurchaseSummaryLine.SetStoreAllocationSender(0);
          lPurchaseSummaryLine.MODIFY(TRUE);
        UNTIL (lPurchaseSummaryLine.NEXT() = 0);
      END;
    END;

    PROCEDURE ShowStoreAllocations@1000000008();
    VAR
      lConsignmentLine@1000000001 : Record 9062448;
      lStoreAllocationManagement@1000000000 : Codeunit 9087015;
    BEGIN
      //DOC NS2015.1 - Showing store allocations

      Rec.TESTFIELD("Item No.");

      IF (lStoreAllocationManagement.VerifyStoreAllocationCode(Rec."Store Allocation Code")) THEN
      BEGIN
        lConsignmentLine.RESET();
        lConsignmentLine.SETRANGE("Consignment No.", Rec."Consignment No.");
        lConsignmentLine.SETRANGE("Item No.", Rec."Item No.");
        lConsignmentLine.MODIFYALL("Store Allocation Code", Rec."Store Allocation Code", TRUE);
        COMMIT;
      END;

      Rec.TESTFIELD("Store Allocation Code");

      lConsignmentLine.RESET();
      lConsignmentLine.SETRANGE("Consignment No.", Rec."Consignment No.");
      lConsignmentLine.SETRANGE("Item No.", Rec."Item No.");

      lStoreAllocationManagement.ShowStoreAllocationMatrix(Rec."Store Allocation Code", DATABASE::"Consignment Line", lConsignmentLine.GETVIEW(FALSE),
        lConsignmentLine.FIELDNO("Item No."), lConsignmentLine.FIELDNO("Variant Code"), lConsignmentLine.FIELDNO(Description),
        lConsignmentLine.FIELDNO(Quantity), lConsignmentLine.FIELDNO("Quantity Allocated"), lConsignmentLine.FIELDNO(Sequence), FALSE);
    END;

    BEGIN
    {
      //DOC NH2016.11 PC 05/11/2015 - Migrated from 2015
      //DOC NH2016.15 JH 15/04/2016 - CfMD amendments
      //DOC NS2016.16 JH 23/09/2016 - Store allocations
    }
    END.
  }
}

