OBJECT Codeunit 9062303 KeyRef Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=11/10/15;
    Time=[ 2:50:03 PM];
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      rr@9062229 : RecordRef;

    PROCEDURE "--- General ---"@1000000010();
    BEGIN
    END;

    PROCEDURE CalculateKeyText@9062253(pTableID@9062234 : Integer;pKeyIndex@9062235 : Integer) : Text;
    VAR
      lRecordRef@9062229 : RecordRef;
      lKeyRef@9062230 : KeyRef;
      lKeyText@9062233 : Text;
      lFieldRef@9062231 : FieldRef;
      lFieldIndex@9062232 : Integer;
    BEGIN
      //DOC NA2016.12 - Calculating table key text
      //  -> pTableID: Table ID
      //  -> pKeyIndex: Key index
      //  <- The text

      lKeyText := '';

      IF ((pTableID <> 0) AND (pKeyIndex <> 0)) THEN
      BEGIN
        lRecordRef.OPEN(pTableID);
        IF (pKeyIndex <= lRecordRef.KEYCOUNT()) THEN
        BEGIN
          lKeyRef := lRecordRef.KEYINDEX(pKeyIndex);
          FOR lFieldIndex := 1 TO lKeyRef.FIELDCOUNT DO
          BEGIN
            lFieldRef := lKeyRef.FIELDINDEX(lFieldIndex);
            IF (lKeyText <> '') THEN
              lKeyText := lKeyText + ', ';
            lKeyText := lKeyText + lFieldRef.NAME;
          END;
        END;
        lRecordRef.CLOSE();
      END;

      EXIT(lKeyText);
    END;

    PROCEDURE KeyLookup@9062230(pTableId@9062229 : Integer;VAR pKeyIndex@9062230 : Integer) : Boolean;
    VAR
      lKeyBuffer@9062232 : TEMPORARY Record 9062730;
      lRecordRef@9062234 : RecordRef;
      lKeyRef@9062233 : KeyRef;
      lKeyIndex@9062231 : Integer;
      lResult@9062235 : Boolean;
      eNoKey@1000000000 : TextConst 'ENU=(No Key);ENG=(No Key)';
    BEGIN
      //DOC NA2016.12 - Performing key lookup
      //  -> pTableID: Table ID
      //  <> pKeyIndex: Source / target key index
      //  <- Lookup result

      lResult := FALSE;

      lKeyBuffer.ID := 0;
      lKeyBuffer.Name := eNoKey;
      lKeyBuffer.INSERT();

      lRecordRef.OPEN(pTableId);
      FOR lKeyIndex := 1 TO lRecordRef.KEYCOUNT DO
      BEGIN
        lKeyBuffer.ID := lKeyIndex;
        lKeyBuffer.Name := CalculateKeyText(pTableId, lKeyIndex);
        lKeyBuffer.INSERT();
      END;
      lRecordRef.CLOSE();

      IF ( NOT (lKeyBuffer.GET(pKeyIndex))) THEN
        IF (lKeyBuffer.FINDFIRST()) THEN;

      IF (PAGE.RUNMODAL(PAGE::"Name Value Buffer", lKeyBuffer) = ACTION::LookupOK) THEN
      BEGIN
        pKeyIndex := lKeyBuffer.ID;
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE ApplyKeyToRecordRef@1000000000(VAR pRecordRef@1000000002 : RecordRef;pKeyIndex@1000000001 : Integer);
    VAR
      lRecordRefView@1000000009 : Text;
      lRecordRefViewBefore@1000000010 : Text;
      lRecordRefViewAfter@1000000011 : Text;
      lKeyRef@1000000003 : KeyRef;
      lKeyText@1000000006 : Text;
      lFieldRef@1000000005 : FieldRef;
      lFieldIndex@1000000007 : Integer;
      lRegex@1000000008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      lMatch@1000000013 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";
    BEGIN
      //DOC NA2016.12 - Applying key to recordref
      //  <> pRecordRef: Recordref
      //  -> pKeyIndex: Key index

      IF (pKeyIndex = 0) THEN
        EXIT;

      lKeyRef := pRecordRef.KEYINDEX(pKeyIndex);

      lKeyText := '';
      FOR lFieldIndex := 1 TO lKeyRef.FIELDCOUNT DO
      BEGIN
        lFieldRef := lKeyRef.FIELDINDEX(lFieldIndex);
        IF (lKeyText <> '') THEN
          lKeyText := lKeyText + ', ';
        lKeyText := lKeyText + 'Field' + FORMAT(lFieldRef.NUMBER, 0, 1);
      END;

      lRecordRefView := pRecordRef.GETVIEW(FALSE);
      CLEAR(lRecordRefViewBefore);
      CLEAR(lRecordRefViewAfter);
      IF (lRecordRefView <> '') THEN
      BEGIN
        lRegex := lRegex.Regex('(.*SORTING\()[a-zA-Z0-9,]*(\).*)');
        lMatch := lRegex.Match(lRecordRefView);
        IF (lMatch.Success) THEN
        BEGIN
          lRecordRefViewBefore := GetRegexMatchGroupValue(lMatch, 1);
          lRecordRefViewAfter := GetRegexMatchGroupValue(lMatch, 2);
        END
        ELSE
        BEGIN
          lRecordRefViewBefore := 'SORTING(';
          lRecordRefViewAfter := ') ' + lRecordRefView;
        END;
      END
      ELSE
      BEGIN
        lRecordRefViewBefore := 'SORTING(';
        lRecordRefViewAfter := ')';
      END;

      lRecordRefView := lRecordRefViewBefore + lKeyText + lRecordRefViewAfter;
      pRecordRef.SETVIEW(lRecordRefView);
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000009();
    BEGIN
    END;

    LOCAL PROCEDURE GetRegexMatchGroupValue@1000000012(pMatch@1000000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";pGroupIndex@1000000000 : Integer) : Text;
    VAR
      lGroupCollection@1000000002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.GroupCollection";
      lGroup@1000000003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Group";
      lValue@1000000004 : Text;
    BEGIN
      //DOC NA2016.12 - Returning regex match group value using group index
      //  -> pMatch: The match
      //  -> pGroupIndex: Group index
      //  <- Group value

      CLEAR(lValue);

      IF ( NOT (ISNULL(pMatch))) THEN
      BEGIN
        lGroupCollection := pMatch.Groups;
        IF ( NOT (ISNULL(lGroupCollection))) THEN
          IF (lGroupCollection.Count > pGroupIndex) THEN
          BEGIN
            lGroup := lGroupCollection.Item(pGroupIndex);
            lValue := lGroup.Value;
          END;
      END;

      EXIT(lValue);
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 27/09/2015 - Created
    }
    END.
  }
}

