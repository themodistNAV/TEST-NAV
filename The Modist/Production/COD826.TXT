OBJECT Codeunit 826 DO Payment Integration Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 824=rimd,
                TableData 828=r,
                TableData 829=m;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU="Error Code = %1; Message = %2.";ENG="Error Code = %1; Message = %2."';
      Text002@1002 : TextConst 'ENU=Failed to read parent transaction ID.;ENG=Failed to read parent transaction ID.';
      Text003@1003 : TextConst 'ENU=You must complete Microsoft Dynamics ERP Payment Services Connection Setup before you use Payment Services.;ENG=You must complete Microsoft Dynamics ERP Payment Services Connection Setup before you use Payment Services.';
      Text004@1004 : TextConst 'ENU=Microsoft Dynamics ERP Payment Services has not been enabled.;ENG=Microsoft Dynamics ERP Payment Services has not been enabled.';
      Text005@1005 : TextConst 'ENU=Credit card authorization in progress...;ENG=Credit card authorisation in progress...';
      Text006@1006 : TextConst 'ENU=Failed to refresh the transaction status.\;ENG=Failed to refresh the transaction status.\';
      Text007@1007 : TextConst 'ENU=Microsoft Dynamics ERP Payment Services Signup was canceled.;ENG=Microsoft Dynamics ERP Payment Services Signup was cancelled.';
      Text008@1008 : TextConst 'ENU=Sign-up process must be completed before you can select a service.;ENG=Sign-up process must be completed before you can select a service.';
      Text009@1009 : TextConst 'ENU=Sign-up process succeeded. Select a valid service ID.;ENG=Sign-up process succeeded. Select a valid service ID.';
      CreateKeyBeforeSignupError@1000 : TextConst 'ENU=You must create an encryption key before starting sign-up process.;ENG=You must create an encryption key before starting sign-up process.';
      DOPaymentTransLogMgt@1101 : Codeunit 829;

    PROCEDURE AuthorizePayment@1(VAR ParentDOPaymentTransLogEntry@1001 : Record 829;CreditCardNo@1002 : Code[20];VAR PaymentInfo@1003 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IBasicPaymentInfo";SourceType@1004 : ' ,Order,Invoice,Payment,Refund';SourceNo@1005 : Code[20]) : Integer;
    BEGIN
      EXIT(
        CreatePayment(
          ParentDOPaymentTransLogEntry,
          CreditCardNo,
          PaymentInfo,
          SourceType,
          SourceNo,
          ParentDOPaymentTransLogEntry."Transaction Type"::Authorization));
    END;

    PROCEDURE VoidPayment@2(VAR DOPaymentTransLogEntry@1000 : Record 829;CreditCardNo@1001 : Code[20];VAR PaymentInfo@1002 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IBasicPaymentInfo";SourceType@1003 : ' ,Order,Invoice,Payment,Refund';SourceNo@1004 : Code[20]) : Integer;
    BEGIN
      EXIT(
        CreatePayment(
          DOPaymentTransLogEntry,
          CreditCardNo,
          PaymentInfo,
          SourceType,
          SourceNo,
          DOPaymentTransLogEntry."Transaction Type"::Void));
    END;

    PROCEDURE CapturePayment@3(VAR DOPaymentTransLogEntry@1000 : Record 829;CreditCardNo@1001 : Code[20];VAR PaymentInfo@1002 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IBasicPaymentInfo";SourceType@1003 : ' ,Order,Invoice,Payment,Refund';SourceNo@1004 : Code[20]) : Integer;
    BEGIN
      EXIT(
        CreatePayment(
          DOPaymentTransLogEntry,
          CreditCardNo,
          PaymentInfo,
          SourceType,
          SourceNo,
          DOPaymentTransLogEntry."Transaction Type"::Capture));
    END;

    PROCEDURE RefundPayment@4(VAR ParentDOPaymentTransLogEntry@1000 : Record 829;CreditCardNo@1001 : Code[20];VAR PaymentInfo@1002 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IBasicPaymentInfo";SourceType@1003 : ' ,Order,Invoice,Payment,Refund';SourceNo@1004 : Code[20]) : Integer;
    BEGIN
      EXIT(
        CreatePayment(
          ParentDOPaymentTransLogEntry,
          CreditCardNo,
          PaymentInfo,
          SourceType,
          SourceNo,
          ParentDOPaymentTransLogEntry."Transaction Type"::Refund));
    END;

    LOCAL PROCEDURE CreateProxyContext@5(VAR ProxyContext@1000 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IProxyContext");
    VAR
      DOPaymentConnectionSetup@1001 : Record 825;
    BEGIN
      IF NOT DOPaymentConnectionSetup.GET THEN
        ERROR(Text003);
      IF NOT DOPaymentConnectionSetup.Active THEN
        ERROR(Text004);
      IF NOT CreateNewProxyContext(DOPaymentConnectionSetup,ProxyContext) THEN
        ERROR(Text003);
    END;

    PROCEDURE RefreshTransactionStatus@9(VAR DOPaymentTransLogEntry@1000 : Record 829);
    VAR
      TransactionResult@1100 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.ITransactionResult";
      ProxyContext@1101 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IProxyContext";
      PaymentHandler@1102 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Payment";
    BEGIN
      IF DOPaymentTransLogEntry.ISEMPTY THEN
        DOPaymentTransLogEntry.FIELDERROR("Transaction GUID");

      CreateProxyContext(ProxyContext);

      PaymentHandler := PaymentHandler.Payment;

      TransactionResult := PaymentHandler.RetrieveTransactionResult(FORMAT(DOPaymentTransLogEntry."Transaction GUID"),ProxyContext);

      IF NOT TransactionResult.IsSuccess THEN
        ERROR(Text006 + FORMAT(Text001,TransactionResult.LastErrorCode,COPYSTR(TransactionResult.LastErrorMessage,1,250)));

      IF TransactionResult.IsRefunded THEN
        DOPaymentTransLogEntry."Transaction Status" := DOPaymentTransLogEntry."Transaction Status"::Refunded;

      IF TransactionResult.IsCaptured THEN
        DOPaymentTransLogEntry."Transaction Status" := DOPaymentTransLogEntry."Transaction Status"::Captured;

      IF TransactionResult.IsVoided THEN
        DOPaymentTransLogEntry."Transaction Status" := DOPaymentTransLogEntry."Transaction Status"::Voided;

      DOPaymentTransLogEntry.MODIFY;
    END;

    LOCAL PROCEDURE CreateCreditCardObject@10(CreditCardNo@1000 : Code[20];VAR CreditCardInfo@1001 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.ICreditCardInfo");
    VAR
      DOPaymentCreditCard@1100 : Record 827;
      DOPaymentCreditCardNo@1101 : Record 828;
      Contact@1102 : Record 5050;
      NewCreditCardInfo@1103 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.CreditCardInfo";
      Int@1004 : Integer;
    BEGIN
      DOPaymentCreditCard.GET(CreditCardNo);
      DOPaymentCreditCardNo.GET(CreditCardNo);
      Contact.GET(DOPaymentCreditCard."Contact No.");

      NewCreditCardInfo := NewCreditCardInfo.CreditCardInfo;
      CreditCardInfo := NewCreditCardInfo;
      CreditCardInfo.AccountholderName := DOPaymentCreditCard."Card Holder Name";
      CreditCardInfo.AccountNumber := DOPaymentCreditCardNo.GetData;
      CreditCardInfo.CardVerificationValue := FORMAT(DOPaymentCreditCard."Cvc No.");

      EVALUATE(Int,COPYSTR(DOPaymentCreditCard."Expiry Date",1,2));
      CreditCardInfo.ExpirationMonth := Int;
      EVALUATE(Int,COPYSTR(DOPaymentCreditCard."Expiry Date",3,2));
      CreditCardInfo.ExpirationYear := Int;

      CreditCardInfo.StreetAddress := Contact.Address;
      CreditCardInfo.PostalCode := Contact."Post Code";
      CreditCardInfo.City := Contact.City;
      CreditCardInfo.CountryOrRegion := Contact."Country/Region Code";
    END;

    PROCEDURE CreateBasicPaymentInfo@20(VAR PaymentInfo@1000 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IBasicPaymentInfo";CustomerId@1001 : Code[20];Description@1002 : Text[1024];InvoiceNo@1003 : Code[20];CurrencyCode@1004 : Code[10];Amount@1005 : Decimal);
    VAR
      NewBasicPaymentInfo@1100 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.BasicPaymentInfo";
    BEGIN
      NewBasicPaymentInfo := NewBasicPaymentInfo.BasicPaymentInfo;
      NewBasicPaymentInfo.CustomerId := CustomerId;
      NewBasicPaymentInfo.Description := Description;
      NewBasicPaymentInfo.InvoiceNumber := InvoiceNo;
      NewBasicPaymentInfo.CurrencyCode := CurrencyCode;
      NewBasicPaymentInfo.Amount := Amount;
      PaymentInfo := NewBasicPaymentInfo;
    END;

    LOCAL PROCEDURE CreatePayment@11(VAR ParentDOPaymentTransLogEntry@1000 : Record 829;CreditCardNo@1001 : Code[20];PaymentInfo@1002 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IBasicPaymentInfo";SourceType@1003 : ' ,Order,Invoice,Payment,Refund';SourceNo@1004 : Code[20];TransactionType@1005 : 'Authorization,Void,Capture,Refund') : Integer;
    VAR
      DOPaymentTransLogEntry@1100 : Record 829;
      TransactionResult@1101 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.ITransactionResult";
      CreditCardInfo@1102 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.ICreditCardInfo";
      ProxyContext@1103 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IProxyContext";
      PaymentHandler@1104 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Payment";
      Window@1105 : Dialog;
      TransactionLogEntryNo@1106 : Integer;
      ParentTransGuid@1107 : GUID;
    BEGIN
      IF NOT ParentDOPaymentTransLogEntry.ISEMPTY THEN
        ParentTransGuid := ParentDOPaymentTransLogEntry."Transaction GUID";

      TransactionLogEntryNo :=
        DOPaymentTransLogMgt.InitializeTransactionLogEntry(
          DOPaymentTransLogEntry,
          CreditCardNo,
          SourceType,
          SourceNo,
          PaymentInfo.CustomerId,
          TransactionType,
          ParentDOPaymentTransLogEntry);

      CreateProxyContext(ProxyContext);

      CreateCreditCardObject(CreditCardNo,CreditCardInfo);
      PaymentInfo.ReferenceId := DOPaymentTransLogEntry."Reference GUID";

      PaymentHandler := PaymentHandler.Payment;

      CASE TransactionType OF
        TransactionType::Authorization:
          BEGIN
            Window.OPEN(Text005);
            TransactionResult := PaymentHandler.Authorize(PaymentInfo,CreditCardInfo,ProxyContext);
            Window.CLOSE;
          END;
        TransactionType::Capture:
          TransactionResult := PaymentHandler.Capture(PaymentInfo,FORMAT(ParentTransGuid),ProxyContext);
        TransactionType::Void:
          BEGIN
            IF ISNULLGUID(ParentTransGuid) THEN
              ERROR(Text002);
            TransactionResult := PaymentHandler.VoidAuthorization(PaymentInfo,FORMAT(ParentTransGuid),ProxyContext);
          END;
        TransactionType::Refund:
          TransactionResult := PaymentHandler.Refund(PaymentInfo,ParentTransGuid,CreditCardInfo,ProxyContext);
      END;

      DOPaymentTransLogMgt.CompleteTransLogEntry(DOPaymentTransLogEntry,TransactionResult);

      // Fix to keep amount when voiding and amount
      IF DOPaymentTransLogEntry.Amount = 0 THEN BEGIN
        DOPaymentTransLogEntry.Amount := PaymentInfo.Amount;
        DOPaymentTransLogEntry.MODIFY;
      END;

      EXIT(TransactionLogEntryNo);
    END;

    PROCEDURE ServiceBoarding@30();
    VAR
      DOPaymentConnectionSetup@1100 : Record 825;
      DOPaymentConnectionDetails@1101 : Record 824;
      Language@1102 : Record 2000000045;
      DOEncryptionMgt@1003 : Codeunit 824;
      UserManagement@1103 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.UserManagement" RUNONCLIENT;
      ClientBoardingResult@1104 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IBoardingResult" RUNONCLIENT;
      ServerBoardingResult@1002 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IBoardingResult";
      ClientProxyContext@1000 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.ProxyContext" RUNONCLIENT;
      ServerProxyContext@1001 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IProxyContext";
      UserNameInS@1106 : InStream;
    BEGIN
      IF NOT DOEncryptionMgt.HasKey THEN
        ERROR(CreateKeyBeforeSignupError);

      Language.GET(WINDOWSLANGUAGE);
      DOPaymentConnectionSetup.GET;
      // Server Side creation
      CreateNewProxyContext(DOPaymentConnectionSetup,ServerProxyContext);
      // Serialize data to the client
      ClientProxyContext := ServerProxyContext;

      UserManagement := UserManagement.UserManagement;
      ClientBoardingResult :=
        UserManagement.ServiceOnBoarding(COMPANYNAME,'PaymentService',Language."Abbreviated Name",SERIALNUMBER,ClientProxyContext);

      // Serialize data to the server
      ServerBoardingResult := ClientBoardingResult;

      IF ServerBoardingResult.IsSuccess THEN BEGIN
        IF NOT DOPaymentConnectionSetup.GET THEN
          DOPaymentConnectionSetup.CreateDefaultSetup;
        IF NOT DOPaymentConnectionDetails.GET THEN BEGIN
          DOPaymentConnectionDetails.INIT;
          DOPaymentConnectionDetails."Primary Key" := DOPaymentConnectionSetup."Primary Key";
          DOPaymentConnectionDetails.INSERT;
        END;

        DOPaymentConnectionSetup.OrganizationId := ServerBoardingResult.OrganizationId;
        DOPaymentConnectionSetup.ServiceGroupId := ServerBoardingResult.ServiceGroupId;
        DOPaymentConnectionSetup.MODIFY;

        DOPaymentConnectionDetails.UserName.CREATEINSTREAM(UserNameInS);
        ServerBoardingResult.WriteUserName(UserNameInS);

        DOPaymentConnectionDetails.SetPasswordData(ServerBoardingResult.Password);

        DOPaymentConnectionDetails.MODIFY;
      END ELSE BEGIN
        IF ServerBoardingResult.LastErrorCode = 1000000 THEN
          ERROR(Text007);
        ERROR(Text001,ServerBoardingResult.LastErrorCode,COPYSTR(ServerBoardingResult.LastErrorMessage,1,250));
      END;

      MESSAGE(Text009);
    END;

    PROCEDURE Disassociate@32();
    VAR
      DOPaymentConnectionSetup@1001 : Record 825;
      UserManagement@1101 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.UserManagement";
      ProxyContext@1102 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IProxyContext";
      DisassociateResult@1103 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.ISimpleResult";
    BEGIN
      IF NOT DOPaymentConnectionSetup.GET THEN
        ERROR(Text003);
      IF NOT CreateNewProxyContext(DOPaymentConnectionSetup,ProxyContext) THEN
        ERROR(Text003);

      UserManagement := UserManagement.UserManagement;
      DisassociateResult := UserManagement.Unassociate(COMPANYNAME,ProxyContext);
      IF DisassociateResult.IsSuccess THEN BEGIN
        DOPaymentConnectionSetup.DELETEALL(TRUE);
        DOPaymentConnectionSetup.CreateDefaultSetup
      END ELSE
        ERROR(Text001,DisassociateResult.LastErrorCode,DisassociateResult.LastErrorMessage);
    END;

    PROCEDURE SelectServiceId@31(VAR ServiceId@1000 : GUID);
    VAR
      NameValueBuffer@1100 : Record 823;
      DOPaymentConnectionSetup@1101 : Record 825;
      NameValueLookup@1102 : Page 823;
      ProxyContext@1103 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IProxyContext";
      UserManagement@1104 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.UserManagement";
      Enumerator@1105 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.ServiceSubscriptionDetailsList";
      ServiceDetails@1106 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IServiceSubscriptionDetails";
      SubscriptionDetailsResult@1107 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.ISubscriptionDetailsResult";
    BEGIN
      IF NOT DOPaymentConnectionSetup.GET THEN
        ERROR(Text003);
      IF NOT CreateNewProxyContext(DOPaymentConnectionSetup,ProxyContext) THEN
        ERROR(Text003);
      IF NOT (ProxyContext.Password <> '') THEN
        ERROR(Text008);
      UserManagement := UserManagement.UserManagement;
      SubscriptionDetailsResult := UserManagement.GetServiceIds(ProxyContext,'PaymentService');

      IF NOT SubscriptionDetailsResult.IsSuccess THEN
        ERROR(Text001,SubscriptionDetailsResult.LastErrorCode,SubscriptionDetailsResult.LastErrorMessage);

      Enumerator := SubscriptionDetailsResult.SubscriptionDetails;
      IF NOT ISNULL(Enumerator) THEN BEGIN
        Enumerator.Reset;
        WHILE Enumerator.MoveNext DO BEGIN
          ServiceDetails := Enumerator.Current;
          IF NOT ISNULL(ServiceDetails) THEN
            IF ServiceDetails.ServiceGroupId = DOPaymentConnectionSetup.ServiceGroupId THEN BEGIN
              NameValueLookup.AddItem(
                COPYSTR(ServiceDetails.Name,1,MAXSTRLEN(NameValueBuffer.Name)),
                '{' + COPYSTR(ServiceDetails.SubscriptionId,1,MAXSTRLEN(NameValueBuffer.Value) - 2) + '}');
              IF ServiceDetails.SubscriptionId = FORMAT(ServiceId) THEN BEGIN
                NameValueBuffer.Name := COPYSTR(ServiceDetails.Name,1,MAXSTRLEN(NameValueBuffer.Name));
                NameValueBuffer.Value := '{' + COPYSTR(ServiceDetails.SubscriptionId,1,MAXSTRLEN(NameValueBuffer.Value) - 2) + '}';
              END;
            END;
        END;

        NameValueLookup.SETRECORD(NameValueBuffer);
        NameValueLookup.LOOKUPMODE := TRUE;
        IF NameValueLookup.RUNMODAL = ACTION::LookupOK THEN BEGIN
          NameValueLookup.GETRECORD(NameValueBuffer);
          IF NameValueBuffer.Value <> '' THEN
            EVALUATE(ServiceId,NameValueBuffer.Value);
        END;
      END;
    END;

    LOCAL PROCEDURE CreateNewProxyContext@50(VAR DOPaymentConnectionSetup@1000 : Record 825;VAR ProxyContext@1001 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.IProxyContext") IncludesDetails : Boolean;
    VAR
      DOPaymentConnectionDetails@1100 : Record 824;
      NewProxyContext@1101 : DotNet "'Microsoft.Dynamics.Nav.DO.ClientProxyWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.DynamicsOnline.Types.ProxyContext";
      UserNameInS@1102 : InStream;
    BEGIN
      NewProxyContext := NewProxyContext.ProxyContext;
      NewProxyContext.ApplicationName := 'Microsoft Dynamics NAV';
      NewProxyContext.EnvironmentName := DOPaymentConnectionSetup.Environment;
      NewProxyContext.RunInTestMode := DOPaymentConnectionSetup."Run in Test Mode";
      NewProxyContext.ServiceIdentifier := DOPaymentConnectionSetup."Service ID";
      NewProxyContext.OrganizationId := DOPaymentConnectionSetup.OrganizationId;
      NewProxyContext.ServiceGroupId := DOPaymentConnectionSetup.ServiceGroupId;

      IncludesDetails := FALSE;
      IF DOPaymentConnectionDetails.GET THEN BEGIN
        DOPaymentConnectionDetails.CALCFIELDS(UserName);
        DOPaymentConnectionDetails.CALCFIELDS(Password);
        IF DOPaymentConnectionDetails.UserName.HASVALUE THEN BEGIN
          DOPaymentConnectionDetails.UserName.CREATEINSTREAM(UserNameInS);
          NewProxyContext.ReadUserName(UserNameInS);
          IncludesDetails := TRUE;
        END;
        NewProxyContext.Password := DOPaymentConnectionDetails.GetPasswordData;
      END;

      ProxyContext := NewProxyContext;
    END;

    [EventSubscriber(Table,1400,OnRegisterServiceConnection)]
    PROCEDURE HandleDOLRegisterServiceConnection@14(VAR ServiceConnection@1000 : Record 1400);
    VAR
      DOPaymentConnectionSetup@1001 : Record 825;
      RecRef@1002 : RecordRef;
    BEGIN
      IF NOT DOPaymentConnectionSetup.GET THEN
        EXIT;

      RecRef.GETTABLE(DOPaymentConnectionSetup);

      IF DOPaymentConnectionSetup.Active THEN
        ServiceConnection.Status := ServiceConnection.Status::Enabled
      ELSE
        ServiceConnection.Status := ServiceConnection.Status::Disabled;

      WITH DOPaymentConnectionSetup DO
        ServiceConnection.InsertServiceConnection(
          ServiceConnection,RecRef.RECORDID,TABLECAPTION,'',PAGE::"DO Payment Connection Setup");
    END;

    BEGIN
    END.
  }
}

