OBJECT Codeunit 7150 Update Item Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00,NAVGB7.00;
  }
  PROPERTIES
  {
    TableNo=7152;
    Permissions=TableData 7152=rm,
                TableData 7153=r,
                TableData 7154=rimd,
                TableData 7156=rimd;
    OnRun=BEGIN
            IF Code <> '' THEN BEGIN
              InitLastEntryNo;
              LOCKTABLE;
              FIND;
              PeriodFormMgt.SetCalendarSource("Calendar Source");
              UpdateOne(Rec,2,"Last Entry No." < LastValueEntryNo - 1000);
            END;
          END;

  }
  CODE
  {
    VAR
      Text005@1001 : TextConst 'ENU=Analysis View     #1############################\\;ENG=Analysis View     #1############################\\';
      Text006@1002 : TextConst 'ENU=Updating table    #2############################\;ENG=Updating table    #2############################\';
      Text007@1003 : TextConst 'ENU=Speed: (Entries/s)#4########\;ENG=Speed: (Entries/s)#4########\';
      Text008@1004 : TextConst 'ENU=Average Speed     #5########;ENG=Average Speed     #5########';
      ItemAnalysisView@1005 : Record 7152;
      GLSetup@1035 : Record 98;
      ValueEntry@1006 : Record 5802;
      ItemBudgetEntry@1007 : Record 7134;
      ItemAnalysisViewEntry@1008 : Record 7154;
      ItemAnalysisViewBudgetEntry@1009 : Record 7156;
      ItemAnalysisViewFilter@1036 : Record 7153;
      TempItemAnalysisViewEntry@1010 : TEMPORARY Record 7154;
      TempItemAnalysisViewBudgEntry@1011 : TEMPORARY Record 7156;
      TempDimBuf@1013 : TEMPORARY Record 360;
      DimSetEntry@1034 : Record 480;
      TempDimSetEntry@1016 : TEMPORARY Record 480;
      TempDimEntryBuffer@1015 : TEMPORARY Record 373;
      PeriodFormMgt@1040000 : Codeunit 359;
      ItemAnalysisViewSource@1000 : Query 7150;
      FilterIsInitialized@1014 : Boolean;
      FiltersExist@1012 : Boolean;
      NoOfEntries@1019 : Integer;
      Window@1020 : Dialog;
      ShowProgressWindow@1021 : Boolean;
      WinLastEntryNo@1022 : Integer;
      WinUpdateCounter@1024 : Integer;
      WinTotalCounter@1025 : Integer;
      WinTime0@1026 : Time;
      WinTime1@1027 : Time;
      WinTime2@1028 : Time;
      Text009@1030 : TextConst 'ENU=#6############### @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\;ENG=#6############### @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\';
      Text010@1031 : TextConst 'ENU=Summarizing;ENG=Summarising';
      Text011@1032 : TextConst 'ENU=Updating Database;ENG=Updating Database';
      LastValueEntryNo@1033 : Integer;
      LastItemBudgetEntryNo@1029 : Integer;
      LastEntryNoIsInitialized@1037 : Boolean;

    PROCEDURE InitLastEntryNo@20();
    BEGIN
      ValueEntry.RESET;
      ItemBudgetEntry.RESET;
      IF LastEntryNoIsInitialized THEN
        EXIT;
      LastEntryNoIsInitialized := TRUE;
      COMMIT;
      WITH ValueEntry DO BEGIN
        LOCKTABLE;
        IF FINDLAST THEN
          LastValueEntryNo := "Entry No.";
      END;
      COMMIT;
      WITH ItemBudgetEntry DO BEGIN
        LOCKTABLE;
        IF FINDLAST THEN
          LastItemBudgetEntryNo := "Entry No.";
      END;
      COMMIT;
    END;

    PROCEDURE UpdateAll@15(Which@1000 : 'Ledger Entries,Budget Entries,Both';DirectlyFromPosting@1001 : Boolean);
    VAR
      ItemAnalysisView2@1002 : Record 7152;
    BEGIN
      ItemAnalysisView2.SETRANGE(Blocked,FALSE);
      IF DirectlyFromPosting THEN
        ItemAnalysisView2.SETRANGE("Update on Posting",TRUE);

      IF ItemAnalysisView2.ISEMPTY THEN
        EXIT;

      InitLastEntryNo;

      IF DirectlyFromPosting THEN
        ItemAnalysisView2.SETFILTER("Last Entry No.",'<%1',LastValueEntryNo);

      ItemAnalysisView2.LOCKTABLE;
      IF ItemAnalysisView2.FINDSET THEN
        REPEAT
          UpdateOne(ItemAnalysisView2,Which,ItemAnalysisView2."Last Entry No." < LastValueEntryNo - 1000);
        UNTIL ItemAnalysisView2.NEXT = 0;
    END;

    PROCEDURE Update@23(VAR NewItemAnalysisView@1000 : Record 7152;Which@1001 : 'Ledger Entries,Budget Entries,Both';ShowWindow@1002 : Boolean);
    BEGIN
      NewItemAnalysisView.LOCKTABLE;
      NewItemAnalysisView.FIND;
      UpdateOne(NewItemAnalysisView,Which,ShowWindow);
    END;

    LOCAL PROCEDURE UpdateOne@11(VAR NewItemAnalysisView@1000 : Record 7152;Which@1001 : 'Ledger Entries,Budget Entries,Both';ShowWindow@1002 : Boolean);
    VAR
      Updated@1003 : Boolean;
    BEGIN
      ItemAnalysisView := NewItemAnalysisView;
      ItemAnalysisView.TESTFIELD(Blocked,FALSE);
      ShowProgressWindow := ShowWindow;
      IF ShowProgressWindow THEN
        InitWindow;

      IF Which IN [Which::"Ledger Entries",Which::Both] THEN BEGIN
        IF LastValueEntryNo > ItemAnalysisView."Last Entry No." THEN BEGIN
          IF ShowProgressWindow THEN
            UpdateWindowHeader(DATABASE::"Item Analysis View Entry",ValueEntry."Entry No.");
          UpdateEntries;
          ItemAnalysisView."Last Entry No." := LastValueEntryNo;
          Updated := TRUE;
        END;
      END;

      IF (Which IN [Which::"Budget Entries",Which::Both]) AND
         ItemAnalysisView."Include Budgets"
      THEN BEGIN
        IF LastItemBudgetEntryNo > ItemAnalysisView."Last Budget Entry No." THEN BEGIN
          IF ShowProgressWindow THEN
            UpdateWindowHeader(DATABASE::"Item Analysis View Budg. Entry",ItemBudgetEntry."Entry No.");
          ItemBudgetEntry.RESET;
          ItemBudgetEntry.SETRANGE("Entry No.",ItemAnalysisView."Last Budget Entry No." + 1,LastItemBudgetEntryNo);
          UpdateBudgetEntries(ItemAnalysisView."Last Budget Entry No." + 1);
          ItemAnalysisView."Last Budget Entry No." := LastItemBudgetEntryNo;
          Updated := TRUE;
        END;
      END;

      IF Updated THEN BEGIN
        ItemAnalysisView."Last Date Updated" := TODAY;
        ItemAnalysisView.MODIFY;
      END;
      IF ShowProgressWindow THEN
        Window.CLOSE;
    END;

    LOCAL PROCEDURE UpdateEntries@9();
    VAR
      ItemLedgerEntry@1001 : Record 32;
      ProgressIndicator@1000 : Integer;
    BEGIN
      GLSetup.GET;
      FilterIsInitialized := FALSE;
      ItemAnalysisViewSource.SETRANGE(AnalysisArea,ItemAnalysisView."Analysis Area");
      ItemAnalysisViewSource.SETRANGE(AnalysisViewCode,ItemAnalysisView.Code);
      ItemAnalysisViewSource.SETRANGE(EntryNo,ItemAnalysisView."Last Entry No." + 1,LastValueEntryNo);
      IF ItemAnalysisView."Item Filter" <> '' THEN
        ItemAnalysisViewSource.SETFILTER(ItemNo,ItemAnalysisView."Item Filter");

      IF ItemAnalysisView."Location Filter" <> '' THEN
        ItemAnalysisViewSource.SETFILTER(LocationCode,ItemAnalysisView."Location Filter");

      ItemAnalysisViewSource.OPEN;

      WITH ItemAnalysisViewSource DO
        WHILE READ DO BEGIN
          ProgressIndicator := ProgressIndicator + 1;
          IF DimSetIDInFilter(DimensionSetID,ItemAnalysisView) THEN BEGIN
            UpdateAnalysisViewEntry(DimVal1,DimVal2,DimVal3,ItemLedgerEntryType);
            IF (ItemAnalysisView."Analysis Area" = ItemAnalysisView."Analysis Area"::Sales) AND
               (ItemLedgerEntryType = ItemLedgerEntryType::Purchase) AND
               (CostAmountNonInvtbl <> 0) AND
               (ItemChargeNo <> '' )
            THEN BEGIN // purchase invoice for item charge can belong to sales - Cost Amount (Non-Invtbl.)
              ItemLedgerEntry.GET(ItemLedgerEntryNo);
              IF ItemLedgerEntry."Entry Type" = ItemLedgerEntry."Entry Type"::Sale THEN
                UpdateAnalysisViewEntry(DimVal1,DimVal2,DimVal3,ItemLedgerEntryType::Sale);
            END;
          END;
          IF ShowProgressWindow THEN
            UpdateWindowCounter(ProgressIndicator);
        END;
      ItemAnalysisViewSource.CLOSE;

      IF ShowProgressWindow THEN
        UpdateWindowCounter(ProgressIndicator);
      FlushAnalysisViewEntry;
    END;

    LOCAL PROCEDURE UpdateBudgetEntries@10(DeleteFromEntry@1000 : Integer);
    BEGIN
      ItemAnalysisViewBudgetEntry.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
      ItemAnalysisViewBudgetEntry.SETRANGE("Analysis View Code",ItemAnalysisView.Code);
      ItemAnalysisViewBudgetEntry.SETFILTER("Entry No.",'>%1',DeleteFromEntry);
      ItemAnalysisViewBudgetEntry.DELETEALL;
      ItemAnalysisViewBudgetEntry.RESET;

      IF ItemAnalysisView."Item Filter" <> '' THEN
        ItemBudgetEntry.SETFILTER("Item No.",ItemAnalysisView."Item Filter");
      IF ItemAnalysisView."Location Filter" <> '' THEN
        ItemBudgetEntry.SETFILTER("Location Code",ItemAnalysisView."Location Filter");
      IF ItemBudgetEntry.ISEMPTY THEN
        EXIT;
      ItemBudgetEntry.FINDSET(TRUE);

      REPEAT
        IF DimSetIDInFilter(ItemBudgetEntry."Dimension Set ID",ItemAnalysisView) THEN
          UpdateAnalysisViewBudgetEntry(
            GetDimVal(ItemAnalysisView."Dimension 1 Code",ItemBudgetEntry."Dimension Set ID"),
            GetDimVal(ItemAnalysisView."Dimension 2 Code",ItemBudgetEntry."Dimension Set ID"),
            GetDimVal(ItemAnalysisView."Dimension 3 Code",ItemBudgetEntry."Dimension Set ID"));
        IF ShowProgressWindow THEN
          UpdateWindowCounter(ItemBudgetEntry."Entry No.");
      UNTIL ItemBudgetEntry.NEXT = 0;
      IF ShowProgressWindow THEN
        UpdateWindowCounter(ItemBudgetEntry."Entry No.");
      FlushAnalysisViewBudgetEntry;
    END;

    LOCAL PROCEDURE UpdateAnalysisViewEntry@3(DimValue1@1000 : Code[20];DimValue2@1001 : Code[20];DimValue3@1002 : Code[20];EntryType@1003 : Option);
    VAR
      PostingDate@1004 : Date;
      EntryNo@1005 : Integer;
    BEGIN
      PostingDate := ItemAnalysisViewSource.PostingDate;
      IF PostingDate < ItemAnalysisView."Starting Date" THEN BEGIN
        PostingDate := ItemAnalysisView."Starting Date" - 1;
        EntryNo := 0;
      END ELSE BEGIN
        PostingDate := CalculatePeriodStart(PostingDate,ItemAnalysisView."Date Compression");
        IF PostingDate < ItemAnalysisView."Starting Date" THEN
          PostingDate := ItemAnalysisView."Starting Date";
        IF ItemAnalysisView."Date Compression" <> ItemAnalysisView."Date Compression"::None THEN
          EntryNo := 0;
      END;
      TempItemAnalysisViewEntry.INIT;
      TempItemAnalysisViewEntry."Analysis Area" := ItemAnalysisView."Analysis Area";
      TempItemAnalysisViewEntry."Analysis View Code" := ItemAnalysisView.Code;
      TempItemAnalysisViewEntry."Item No." := ItemAnalysisViewSource.ItemNo;
      TempItemAnalysisViewEntry."Source Type" := ItemAnalysisViewSource.SourceType;
      TempItemAnalysisViewEntry."Source No." := ItemAnalysisViewSource.SourceNo;
      TempItemAnalysisViewEntry."Entry Type" := ItemAnalysisViewSource.EntryType;
      TempItemAnalysisViewEntry."Item Ledger Entry Type" := EntryType;

      TempItemAnalysisViewEntry."Location Code" := ItemAnalysisViewSource.LocationCode;
      TempItemAnalysisViewEntry."Posting Date" := PostingDate;
      TempItemAnalysisViewEntry."Dimension 1 Value Code" := DimValue1;
      TempItemAnalysisViewEntry."Dimension 2 Value Code" := DimValue2;
      TempItemAnalysisViewEntry."Dimension 3 Value Code" := DimValue3;
      TempItemAnalysisViewEntry."Entry No." := EntryNo;

      IF TempItemAnalysisViewEntry.FIND THEN BEGIN
        IF (ItemAnalysisViewSource.EntryType = ItemAnalysisViewSource.EntryType::"Direct Cost") AND
           (ItemAnalysisViewSource.ItemChargeNo = '')
        THEN
          AddValue(TempItemAnalysisViewEntry.Quantity,ItemAnalysisViewSource.ILEQuantity);
        AddValue(TempItemAnalysisViewEntry."Invoiced Quantity",ItemAnalysisViewSource.InvoicedQuantity);

        AddValue(TempItemAnalysisViewEntry."Sales Amount (Actual)",ItemAnalysisViewSource.SalesAmountActual);
        AddValue(TempItemAnalysisViewEntry."Cost Amount (Actual)",ItemAnalysisViewSource.CostAmountActual);
        AddValue(TempItemAnalysisViewEntry."Cost Amount (Non-Invtbl.)",ItemAnalysisViewSource.CostAmountNonInvtbl);

        AddValue(TempItemAnalysisViewEntry."Sales Amount (Expected)",ItemAnalysisViewSource.SalesAmountExpected);
        AddValue(TempItemAnalysisViewEntry."Cost Amount (Expected)",ItemAnalysisViewSource.CostAmountExpected);
        TempItemAnalysisViewEntry.MODIFY;
      END ELSE BEGIN
        IF (ItemAnalysisViewSource.EntryType = ItemAnalysisViewSource.EntryType::"Direct Cost") AND
           (ItemAnalysisViewSource.ItemChargeNo = '')
        THEN
          TempItemAnalysisViewEntry.Quantity := ItemAnalysisViewSource.ILEQuantity;
        TempItemAnalysisViewEntry."Invoiced Quantity" := ItemAnalysisViewSource.InvoicedQuantity;

        TempItemAnalysisViewEntry."Sales Amount (Actual)" := ItemAnalysisViewSource.SalesAmountActual;
        TempItemAnalysisViewEntry."Cost Amount (Actual)" := ItemAnalysisViewSource.CostAmountActual;
        TempItemAnalysisViewEntry."Cost Amount (Non-Invtbl.)" := ItemAnalysisViewSource.CostAmountNonInvtbl;

        TempItemAnalysisViewEntry."Sales Amount (Expected)" := ItemAnalysisViewSource.SalesAmountExpected;
        TempItemAnalysisViewEntry."Cost Amount (Expected)" := ItemAnalysisViewSource.CostAmountExpected;
        TempItemAnalysisViewEntry.INSERT;
        NoOfEntries := NoOfEntries + 1;
      END;
      IF NoOfEntries >= 10000 THEN
        FlushAnalysisViewEntry;
    END;

    LOCAL PROCEDURE UpdateAnalysisViewBudgetEntry@18(DimValue1@1000 : Code[20];DimValue2@1001 : Code[20];DimValue3@1002 : Code[20]);
    BEGIN
      TempItemAnalysisViewBudgEntry."Analysis Area" := ItemAnalysisView."Analysis Area";
      TempItemAnalysisViewBudgEntry."Analysis View Code" := ItemAnalysisView.Code;
      TempItemAnalysisViewBudgEntry."Budget Name" := ItemBudgetEntry."Budget Name";
      TempItemAnalysisViewBudgEntry."Location Code" := ItemBudgetEntry."Location Code";
      TempItemAnalysisViewBudgEntry."Item No." := ItemBudgetEntry."Item No.";
      TempItemAnalysisViewBudgEntry."Source Type" := ItemBudgetEntry."Source Type";
      TempItemAnalysisViewBudgEntry."Source No." := ItemBudgetEntry."Source No.";

      IF ItemBudgetEntry.Date < ItemAnalysisView."Starting Date" THEN
        TempItemAnalysisViewBudgEntry."Posting Date" := ItemAnalysisView."Starting Date" - 1
      ELSE BEGIN
        TempItemAnalysisViewBudgEntry."Posting Date" :=
          CalculatePeriodStart(ItemBudgetEntry.Date,ItemAnalysisView."Date Compression");
        IF TempItemAnalysisViewBudgEntry."Posting Date" < ItemAnalysisView."Starting Date" THEN
          TempItemAnalysisViewBudgEntry."Posting Date" := ItemAnalysisView."Starting Date";
      END;
      TempItemAnalysisViewBudgEntry."Dimension 1 Value Code" := DimValue1;
      TempItemAnalysisViewBudgEntry."Dimension 2 Value Code" := DimValue2;
      TempItemAnalysisViewBudgEntry."Dimension 3 Value Code" := DimValue3;
      TempItemAnalysisViewBudgEntry."Entry No." := ItemBudgetEntry."Entry No.";

      IF TempItemAnalysisViewBudgEntry.FIND THEN BEGIN
        AddValue(TempItemAnalysisViewBudgEntry."Sales Amount",ItemBudgetEntry."Sales Amount");
        AddValue(TempItemAnalysisViewBudgEntry."Cost Amount",ItemBudgetEntry."Cost Amount");
        AddValue(TempItemAnalysisViewBudgEntry.Quantity,ItemBudgetEntry.Quantity);
        TempItemAnalysisViewBudgEntry.MODIFY;
      END ELSE BEGIN
        TempItemAnalysisViewBudgEntry."Sales Amount" := ItemBudgetEntry."Sales Amount";
        TempItemAnalysisViewBudgEntry."Cost Amount" := ItemBudgetEntry."Cost Amount";
        TempItemAnalysisViewBudgEntry.Quantity := ItemBudgetEntry.Quantity;
        TempItemAnalysisViewBudgEntry.INSERT;
        NoOfEntries := NoOfEntries + 1;
      END;
      IF NoOfEntries >= 10000 THEN
        FlushAnalysisViewBudgetEntry;
    END;

    LOCAL PROCEDURE CalculatePeriodStart@4(PostingDate@1000 : Date;DateCompression@1001 : Integer) : Date;
    VAR
      Calendar@1040001 : Record 2000000007;
      DateFormula@1040000 : DateFormula;
    BEGIN
      IF PostingDate = CLOSINGDATE(PostingDate) THEN
        EXIT(PostingDate);

      CASE DateCompression OF
        ItemAnalysisView."Date Compression"::Week:
          BEGIN
            EVALUATE(DateFormula,'<-CW>');
            PeriodFormMgt.CalcDate2(DateFormula,PostingDate,Calendar);
          END;
        ItemAnalysisView."Date Compression"::Month:
          BEGIN
            EVALUATE(DateFormula,'<-CM>');
            PeriodFormMgt.CalcDate2(DateFormula,PostingDate,Calendar);
          END;
        ItemAnalysisView."Date Compression"::Quarter:
          BEGIN
            EVALUATE(DateFormula,'<-CQ>');
            PeriodFormMgt.CalcDate2(DateFormula,PostingDate,Calendar);
          END;
        ItemAnalysisView."Date Compression"::Year:
          BEGIN
            EVALUATE(DateFormula,'<-CY>');
            PeriodFormMgt.CalcDate2(DateFormula,PostingDate,Calendar);
          END;
      END;
      EXIT(PostingDate);
    END;

    LOCAL PROCEDURE FlushAnalysisViewEntry@5();
    BEGIN
      IF ShowProgressWindow THEN
        Window.UPDATE(6,Text011);
      IF TempItemAnalysisViewEntry.FINDSET THEN
        REPEAT
          ItemAnalysisViewEntry.INIT;
          ItemAnalysisViewEntry := TempItemAnalysisViewEntry;

          IF ((ItemAnalysisView."Analysis Area" = ItemAnalysisView."Analysis Area"::Sales) AND
              ((ItemAnalysisViewEntry."Item Ledger Entry Type" <> ItemAnalysisViewEntry."Item Ledger Entry Type"::Sale) OR
               (ItemAnalysisViewEntry."Entry Type" = ItemAnalysisViewEntry."Entry Type"::Revaluation))) OR
             ((ItemAnalysisView."Analysis Area" = ItemAnalysisView."Analysis Area"::Purchase) AND
              (ItemAnalysisViewEntry."Item Ledger Entry Type" <> ItemAnalysisViewEntry."Item Ledger Entry Type"::Purchase)) OR
             ((ItemAnalysisView."Analysis Area" = ItemAnalysisView."Analysis Area"::Inventory) AND
              (ItemAnalysisViewEntry."Item Ledger Entry Type" = ItemAnalysisViewEntry."Item Ledger Entry Type"::" "))
          THEN BEGIN
            IF ItemAnalysisViewEntry.FIND THEN
              ItemAnalysisViewEntry.DELETE;
          END ELSE
            IF NOT ItemAnalysisViewEntry.INSERT THEN BEGIN
              ItemAnalysisViewEntry.FIND;
              AddValue(ItemAnalysisViewEntry.Quantity,TempItemAnalysisViewEntry.Quantity);
              AddValue(ItemAnalysisViewEntry."Invoiced Quantity",TempItemAnalysisViewEntry."Invoiced Quantity");

              AddValue(ItemAnalysisViewEntry."Sales Amount (Actual)",TempItemAnalysisViewEntry."Sales Amount (Actual)");
              AddValue(ItemAnalysisViewEntry."Cost Amount (Actual)",TempItemAnalysisViewEntry."Cost Amount (Actual)");
              AddValue(ItemAnalysisViewEntry."Cost Amount (Non-Invtbl.)",TempItemAnalysisViewEntry."Cost Amount (Non-Invtbl.)");

              AddValue(ItemAnalysisViewEntry."Sales Amount (Expected)",TempItemAnalysisViewEntry."Sales Amount (Expected)");
              AddValue(ItemAnalysisViewEntry."Cost Amount (Expected)",TempItemAnalysisViewEntry."Cost Amount (Expected)");
              AddValue(ItemAnalysisViewEntry."Cost Amount (Non-Invtbl.)",TempItemAnalysisViewEntry."Cost Amount (Non-Invtbl.)");

              ItemAnalysisViewEntry.MODIFY;
            END;
        UNTIL TempItemAnalysisViewEntry.NEXT = 0;
      TempItemAnalysisViewEntry.DELETEALL;
      NoOfEntries := 0;
      IF ShowProgressWindow THEN
        Window.UPDATE(6,Text010);
    END;

    LOCAL PROCEDURE FlushAnalysisViewBudgetEntry@25();
    BEGIN
      IF ShowProgressWindow THEN
        Window.UPDATE(6,Text011);
      IF TempItemAnalysisViewBudgEntry.FINDSET THEN
        REPEAT
          ItemAnalysisViewBudgetEntry.INIT;
          ItemAnalysisViewBudgetEntry := TempItemAnalysisViewBudgEntry;
          IF NOT ItemAnalysisViewBudgetEntry.INSERT THEN BEGIN
            ItemAnalysisViewBudgetEntry.FIND;
            AddValue(ItemAnalysisViewBudgetEntry."Sales Amount",TempItemAnalysisViewBudgEntry."Sales Amount");
            AddValue(ItemAnalysisViewBudgetEntry."Sales Amount",TempItemAnalysisViewBudgEntry."Cost Amount");
            AddValue(ItemAnalysisViewBudgetEntry."Sales Amount",TempItemAnalysisViewBudgEntry.Quantity);
            ItemAnalysisViewBudgetEntry.MODIFY;
          END;
        UNTIL TempItemAnalysisViewBudgEntry.NEXT = 0;
      TempItemAnalysisViewBudgEntry.DELETEALL;
      NoOfEntries := 0;
      IF ShowProgressWindow THEN
        Window.UPDATE(6,Text010);
    END;

    LOCAL PROCEDURE GetDimVal@24(DimCode@1000 : Code[20];DimSetID@1001 : Integer) : Code[20];
    BEGIN
      IF TempDimSetEntry.GET(DimSetID,DimCode) THEN
        EXIT(TempDimSetEntry."Dimension Value Code");
      IF DimSetEntry.GET(DimSetID,DimCode) THEN
        TempDimSetEntry := DimSetEntry
      ELSE BEGIN
        TempDimSetEntry."Dimension Set ID" := DimSetID;
        TempDimSetEntry."Dimension Code" := DimCode;
        TempDimSetEntry."Dimension Value Code" := '';
      END;
      TempDimSetEntry.INSERT;
      EXIT(TempDimSetEntry."Dimension Value Code");
    END;

    LOCAL PROCEDURE InitWindow@1();
    BEGIN
      Window.OPEN(
        Text005 +
        Text006 +
        Text009 +
        Text007 +
        Text008);
      Window.UPDATE(6,Text010);
    END;

    LOCAL PROCEDURE UpdateWindowCounter@7(EntryNo@1000 : Integer);
    BEGIN
      WinUpdateCounter := WinUpdateCounter + 1;
      WinTime2 := TIME;
      IF (WinTime2 > WinTime1 + 1000) OR (EntryNo = WinLastEntryNo) THEN BEGIN
        IF WinLastEntryNo <> 0 THEN
          Window.UPDATE(3,ROUND(EntryNo / WinLastEntryNo * 10000,1));
        WinTotalCounter := WinTotalCounter + WinUpdateCounter;
        IF WinTime2 <> WinTime1 THEN
          Window.UPDATE(4,ROUND(WinUpdateCounter * (1000 / (WinTime2 - WinTime1)),1));
        IF WinTime2 <> WinTime0 THEN
          Window.UPDATE(5,ROUND(WinTotalCounter * (1000 / (WinTime2 - WinTime0)),1));
        WinTime1 := WinTime2;
        WinUpdateCounter := 0;
      END;
    END;

    LOCAL PROCEDURE UpdateWindowHeader@13(TableID@1000 : Integer;EntryNo@1001 : Integer);
    VAR
      Object@1002 : Record 2000000001;
    BEGIN
      WinLastEntryNo := EntryNo;
      WinTotalCounter := 0;
      Object.GET(Object.Type::Table,'',TableID);
      Window.UPDATE(1,ItemAnalysisView.Code);
      Window.UPDATE(2,Object.Name);
      Window.UPDATE(3,0);
      Window.UPDATE(4,0);
      Window.UPDATE(5,0);
      WinTime0 := TIME;
      WinTime1 := WinTime0;
      WinTime2 := WinTime0;
    END;

    PROCEDURE SetLastBudgetEntryNo@16(NewLastBudgetEntryNo@1000 : Integer);
    VAR
      ItemAnalysisView2@1001 : Record 7152;
    BEGIN
      ItemAnalysisView.SETRANGE("Last Budget Entry No.",NewLastBudgetEntryNo + 1,2147483647);
      ItemAnalysisView.SETRANGE("Include Budgets",TRUE);
      IF ItemAnalysisView.FINDSET(TRUE,TRUE) THEN
        REPEAT
          ItemAnalysisView2 := ItemAnalysisView;
          ItemAnalysisView2."Last Budget Entry No." := NewLastBudgetEntryNo;
          ItemAnalysisView2.MODIFY;
        UNTIL ItemAnalysisView.NEXT = 0;
    END;

    LOCAL PROCEDURE AddValue@19(VAR ToValue@1000 : Decimal;FromValue@1001 : Decimal);
    BEGIN
      ToValue := ToValue + FromValue;
    END;

    LOCAL PROCEDURE IsValueIncludedInFilter@28(DimValue@1002 : Code[20];DimFilter@1000 : Code[250]) : Boolean;
    BEGIN
      WITH TempDimBuf DO BEGIN
        RESET;
        DELETEALL;
        INIT;
        "Dimension Value Code" := DimValue;
        INSERT;
        SETFILTER("Dimension Value Code",DimFilter);
        EXIT(FINDFIRST);
      END;
    END;

    PROCEDURE DimSetIDInFilter@2(DimSetID@1000 : Integer;VAR ItemAnalysisView@1002 : Record 7152) : Boolean;
    VAR
      InFilters@1001 : Boolean;
    BEGIN
      IF NOT FilterIsInitialized THEN BEGIN
        TempDimEntryBuffer.DELETEALL;
        FilterIsInitialized := TRUE;
        ItemAnalysisViewFilter.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
        ItemAnalysisViewFilter.SETRANGE("Analysis View Code",ItemAnalysisView.Code);
        FiltersExist := NOT ItemAnalysisViewFilter.ISEMPTY;
      END;

      IF NOT FiltersExist THEN
        EXIT(TRUE);

      IF TempDimEntryBuffer.GET(DimSetID) THEN  // cashed value?
        EXIT(TempDimEntryBuffer."Dimension Entry No." <> 0);

      InFilters := TRUE;
      IF ItemAnalysisViewFilter.FINDSET THEN
        REPEAT
          IF DimSetEntry.GET(DimSetID,ItemAnalysisViewFilter."Dimension Code") THEN
            InFilters :=
              InFilters AND
              IsValueIncludedInFilter(
                DimSetEntry."Dimension Value Code",ItemAnalysisViewFilter."Dimension Value Filter")
          ELSE
            InFilters :=
              InFilters AND IsValueIncludedInFilter('',ItemAnalysisViewFilter."Dimension Value Filter");
        UNTIL (ItemAnalysisViewFilter.NEXT = 0) OR NOT InFilters;
      TempDimEntryBuffer."No." := DimSetID;
      IF InFilters THEN
        TempDimEntryBuffer."Dimension Entry No." := 1
      ELSE
        TempDimEntryBuffer."Dimension Entry No." := 0;
      TempDimEntryBuffer.INSERT;
      EXIT(InFilters);
    END;

    BEGIN
    END.
  }
}

