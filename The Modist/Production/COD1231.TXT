OBJECT Codeunit 1231 SEPA DD-Fill Export Buffer
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    TableNo=1226;
    Permissions=TableData 1226=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      HasErrorsErr@1002 : TextConst 'ENU=The file export has one or more errors. For each of the lines to be exported, resolve any errors that are displayed in the File Export Errors FactBox.;ENG=The file export has one or more errors. For each of the lines to be exported, resolve any errors that are displayed in the File Export Errors FactBox.';

    PROCEDURE FillExportBuffer@3(VAR DirectDebitCollectionEntry@1013 : Record 1208;VAR PaymentExportData@1001 : Record 1226);
    VAR
      BankAccount@1010 : Record 270;
      BankExportImportSetup@1003 : Record 1200;
      Customer@1009 : Record 18;
      CustomerBankAccount@1006 : Record 287;
      DirectDebitCollection@1004 : Record 1207;
      GLSetup@1005 : Record 98;
      SEPADirectDebitMandate@1002 : Record 1230;
      TempDirectDebitCollectionEntry@1000 : TEMPORARY Record 1208;
    BEGIN
      TempDirectDebitCollectionEntry.COPYFILTERS(DirectDebitCollectionEntry);
      CODEUNIT.RUN(CODEUNIT::"SEPA DD-Prepare Source",TempDirectDebitCollectionEntry);

      TempDirectDebitCollectionEntry.SETAUTOCALCFIELDS("Applies-to Entry Document No.","Applies-to Entry Description");

      IF NOT TempDirectDebitCollectionEntry.FINDSET THEN
        EXIT;

      DirectDebitCollection.GET(TempDirectDebitCollectionEntry."Direct Debit Collection No.");
      BankAccount.GET(DirectDebitCollection."To Bank Account No.");
      BankAccount.GetDDExportImportSetup(BankExportImportSetup);
      BankExportImportSetup.TESTFIELD("Check Export Codeunit");
      REPEAT
        CODEUNIT.RUN(BankExportImportSetup."Check Export Codeunit",TempDirectDebitCollectionEntry);
      UNTIL TempDirectDebitCollectionEntry.NEXT = 0;

      IF DirectDebitCollection.HasPaymentFileErrors THEN BEGIN
        COMMIT;
        ERROR(HasErrorsErr);
      END;

      GLSetup.GET;
      GLSetup.TESTFIELD("LCY Code");

      TempDirectDebitCollectionEntry.FINDSET;
      WITH PaymentExportData DO BEGIN
        RESET;
        IF FINDLAST THEN;
        REPEAT
          INIT;
          "Entry No." += 1;
          SetPreserveNonLatinCharacters(BankExportImportSetup."Preserve Non-Latin Characters");
          SetBankAsSenderBank(BankAccount);
          SetCreditorIdentifier(BankAccount);
          "SEPA Direct Debit Mandate ID" := TempDirectDebitCollectionEntry."Mandate ID";
          SEPADirectDebitMandate.GET(TempDirectDebitCollectionEntry."Mandate ID");
          "SEPA DD Mandate Signed Date" := SEPADirectDebitMandate."Date of Signature";

          TempDirectDebitCollectionEntry."Sequence Type" :=
            UpdateSourceEntrySequenceType(TempDirectDebitCollectionEntry);

          VALIDATE("SEPA Direct Debit Seq. Type",TempDirectDebitCollectionEntry."Sequence Type");
          "Transfer Date" := TempDirectDebitCollectionEntry."Transfer Date";
          "Document No." := TempDirectDebitCollectionEntry."Applies-to Entry Document No.";
          Amount := TempDirectDebitCollectionEntry."Transfer Amount";
          "Currency Code" := GLSetup.GetCurrencyCode(TempDirectDebitCollectionEntry."Currency Code");

          Customer.GET(TempDirectDebitCollectionEntry."Customer No.");
          CustomerBankAccount.GET(Customer."No.",SEPADirectDebitMandate."Customer Bank Account Code");
          SetCustomerAsRecipient(Customer,CustomerBankAccount);

          VALIDATE("SEPA Partner Type",Customer."Partner Type");
          VALIDATE("SEPA Instruction Priority","SEPA Instruction Priority"::NORMAL);
          VALIDATE("SEPA Payment Method","SEPA Payment Method"::TRF);
          VALIDATE("SEPA Charge Bearer","SEPA Charge Bearer"::SLEV);

          "SEPA Batch Booking" := FALSE;
          "Message ID" := DirectDebitCollection."Message ID";
          "Payment Information ID" := TempDirectDebitCollectionEntry."Transaction ID";
          "End-to-End ID" := TempDirectDebitCollectionEntry."Transaction ID";
          "Message to Recipient 1" := TempDirectDebitCollectionEntry."Applies-to Entry Description";
          INSERT(TRUE);
        UNTIL TempDirectDebitCollectionEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateSourceEntrySequenceType@1(TempDirectDebitCollectionEntry@1000 : TEMPORARY Record 1208) SequenceType : Integer;
    VAR
      DirectDebitCollectionEntry@1001 : Record 1208;
      SEPADirectDebitMandate@1002 : Record 1230;
    BEGIN
      IF TempDirectDebitCollectionEntry.Status <> TempDirectDebitCollectionEntry.Status::New THEN
        EXIT(TempDirectDebitCollectionEntry."Sequence Type");

      WITH SEPADirectDebitMandate DO BEGIN
        GET(TempDirectDebitCollectionEntry."Mandate ID");
        SequenceType := GetSequenceType;
        UpdateCounter;
      END;

      DirectDebitCollectionEntry := TempDirectDebitCollectionEntry;
      WITH DirectDebitCollectionEntry DO
        IF FIND THEN BEGIN
          "Sequence Type" := SequenceType;
          MODIFY;
        END;
    END;

    BEGIN
    END.
  }
}

