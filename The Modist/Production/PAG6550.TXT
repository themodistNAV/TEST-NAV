OBJECT Page 6550 Whse. Item Tracking Lines
{
  OBJECT-PROPERTIES
  {
    Date=29/01/16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.44974;
  }
  PROPERTIES
  {
    Permissions=TableData 6550=rimd;
    CaptionML=[ENU=Whse. Item Tracking Lines;
               ENG=Whse. Item Tracking Lines];
    SourceTable=Table6550;
    DelayedInsert=Yes;
    PopulateAllFields=Yes;
    DataCaptionFields=Item No.,Variant Code,Description;
    PageType=Worksheet;
    OnInit=BEGIN
             "Expiration DateEditable" := TRUE;
             "New Expiration DateEditable" := TRUE;
             "New Lot No.Editable" := TRUE;
             "New Serial No.Editable" := TRUE;
             "Qty. to Handle (Base)Editable" := TRUE;
             ButtonLineVisible := TRUE;
             "Qty. to Handle (Base)Visible" := TRUE;
             Handle3Visible := TRUE;
             Handle2Visible := TRUE;
             Handle1Visible := TRUE;
           END;

    OnOpenPage=BEGIN
                 UpdateUndefinedQty;
                 SaveItemTrkgLine(TempInitialTrkgLine);
               END;

    OnClosePage=BEGIN
                  IF FormUpdated THEN
                    IF NOT UpdateUndefinedQty THEN
                      RestoreInitialTrkgLine
                    ELSE
                      IF NOT CopyToReservEntry THEN
                        RestoreInitialTrkgLine;
                END;

    OnAfterGetRecord=BEGIN
                       ExpirationDateOnFormat;
                     END;

    OnInsertRecord=VAR
                     WhseItemTrackingLine2@1000 : Record 6550;
                   BEGIN
                     FormUpdated := TRUE;
                     IF ("Serial No." = '') AND ("Lot No." = '') THEN
                       EXIT(FALSE);
                     IF WhseItemTrackingLine2.FINDLAST THEN;
                     "Entry No." := WhseItemTrackingLine2."Entry No." + 1;
                     EXIT(TRUE);
                   END;

    OnModifyRecord=BEGIN
                     FormUpdated := TRUE;
                   END;

    OnDeleteRecord=BEGIN
                     FormUpdated := TRUE;
                     DELETE; // to ensure correct recalculation
                     CalculateSums;
                   END;

    OnQueryClosePage=BEGIN
                       IF FormUpdated THEN
                         IF NOT UpdateUndefinedQty THEN
                           EXIT(CONFIRM(Text002));
                     END;

    OnAfterGetCurrRecord=BEGIN
                           UpdateExpDateEditable;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 34      ;1   ;ActionGroup;
                      Name=ButtonLineReclass;
                      CaptionML=[ENU=&Line;
                                 ENG=&Line];
                      Visible=ButtonLineReclassVisible;
                      Image=Line }
      { 37      ;2   ;Action    ;
                      Name=Reclass_SerialNoInfoCard;
                      CaptionML=[ENU=Serial No. Information Card;
                                 ENG=Serial No. Information Card];
                      RunObject=Page 6509;
                      RunPageLink=Item No.=FIELD(Item No.),
                                  Variant Code=FIELD(Variant Code),
                                  Serial No.=FIELD(Serial No.);
                      Image=SNInfo;
                      OnAction=BEGIN
                                 TESTFIELD("Serial No.");
                               END;
                                }
      { 42      ;2   ;Action    ;
                      Name=Reclass_LotNoInfoCard;
                      CaptionML=[ENU=Lot No. Information Card;
                                 ENG=Lot No. Information Card];
                      RunObject=Page 6508;
                      RunPageLink=Item No.=FIELD(Item No.),
                                  Variant Code=FIELD(Variant Code),
                                  Lot No.=FIELD(Lot No.);
                      Image=LotInfo;
                      OnAction=BEGIN
                                 TESTFIELD("Lot No.");
                               END;
                                }
      { 44      ;2   ;Separator  }
      { 45      ;2   ;Action    ;
                      CaptionML=[ENU=New S&erial No. Information;
                                 ENG=New S&erial No. Information];
                      Image=NewSerialNoProperties;
                      OnAction=VAR
                                 SerialNoInfoForm@1001 : Page 6504;
                                 SerialNoInfoNew@1000 : Record 6504;
                               BEGIN
                                 TESTFIELD("New Serial No.");

                                 CLEAR(SerialNoInfoForm);
                                 SerialNoInfoForm.InitWhse(Rec);

                                 SerialNoInfoNew.SETRANGE("Item No.","Item No.");
                                 SerialNoInfoNew.SETRANGE("Variant Code","Variant Code");
                                 SerialNoInfoNew.SETRANGE("Serial No.","New Serial No.");

                                 SerialNoInfoForm.SETTABLEVIEW(SerialNoInfoNew);
                                 SerialNoInfoForm.RUN;
                               END;
                                }
      { 55      ;2   ;Action    ;
                      CaptionML=[ENU=New L&ot No. Information;
                                 ENG=New L&ot No. Information];
                      RunPageOnRec=No;
                      Image=NewLotProperties;
                      OnAction=VAR
                                 LotNoInfoForm@1001 : Page 6505;
                                 LotNoInfoNew@1002 : Record 6505;
                               BEGIN
                                 TESTFIELD("New Lot No.");

                                 CLEAR(LotNoInfoForm);
                                 LotNoInfoForm.InitWhse(Rec);

                                 LotNoInfoNew.SETRANGE("Item No.","Item No.");
                                 LotNoInfoNew.SETRANGE("Variant Code","Variant Code");
                                 LotNoInfoNew.SETRANGE("Lot No.","New Lot No.");

                                 LotNoInfoForm.SETTABLEVIEW(LotNoInfoNew);
                                 LotNoInfoForm.RUN;
                               END;
                                }
      { 20      ;1   ;ActionGroup;
                      Name=ButtonLine;
                      CaptionML=[ENU=&Line;
                                 ENG=&Line];
                      Visible=ButtonLineVisible;
                      Image=Line }
      { 21      ;2   ;Action    ;
                      Name=Line_SerialNoInfoCard;
                      CaptionML=[ENU=Serial No. Information Card;
                                 ENG=Serial No. Information Card];
                      RunObject=Page 6509;
                      RunPageLink=Item No.=FIELD(Item No.),
                                  Variant Code=FIELD(Variant Code),
                                  Serial No.=FIELD(Serial No.);
                      Image=SNInfo;
                      OnAction=BEGIN
                                 TESTFIELD("Serial No.");
                               END;
                                }
      { 33      ;2   ;Action    ;
                      Name=Line_LotNoInforCard;
                      CaptionML=[ENU=Lot No. Information Card;
                                 ENG=Lot No. Information Card];
                      RunObject=Page 6508;
                      RunPageLink=Item No.=FIELD(Item No.),
                                  Variant Code=FIELD(Variant Code),
                                  Lot No.=FIELD(Lot No.);
                      Image=LotInfo;
                      OnAction=BEGIN
                                 TESTFIELD("Lot No.");
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 59  ;1   ;Group      }

    { 1903651101;2;Group  ;
                GroupType=FixedLayout }

    { 1903866701;3;Group  ;
                CaptionML=[ENU=Source;
                           ENG=Source] }

    { 38  ;4   ;Field     ;
                SourceExpr=TextCaption;
                Editable=FALSE }

    { 29  ;4   ;Field     ;
                CaptionML=[ENU=Quantity;
                           ENG=Quantity];
                DecimalPlaces=0:5;
                SourceExpr=SourceQuantityArray[1];
                Editable=FALSE }

    { 31  ;4   ;Field     ;
                Name=Handle1;
                CaptionML=[ENU=Qty. to Handle;
                           ENG=Qty. to Handle];
                DecimalPlaces=0:5;
                SourceExpr=SourceQuantityArray[2];
                Visible=Handle1Visible;
                Editable=FALSE }

    { 1901742101;3;Group  ;
                CaptionML=[ENU=Item Tracking;
                           ENG=Item Tracking] }

    { 51  ;4   ;Field     ;
                SourceExpr=Text003;
                Visible=FALSE }

    { 35  ;4   ;Field     ;
                CaptionML=[ENU=Quantity;
                           ENG=Quantity];
                DecimalPlaces=0:5;
                SourceExpr=TotalWhseItemTrackingLine."Quantity (Base)";
                Editable=FALSE }

    { 36  ;4   ;Field     ;
                Name=Handle2;
                CaptionML=[ENU=Qty. to Ship/Receive;
                           ENG=Qty. to Ship/Receive];
                DecimalPlaces=0:5;
                SourceExpr=TotalWhseItemTrackingLine."Qty. to Handle (Base)";
                Visible=Handle2Visible;
                Editable=FALSE }

    { 1903866601;3;Group  ;
                CaptionML=[ENU=Undefined;
                           ENG=Undefined] }

    { 52  ;4   ;Field     ;
                SourceExpr=Text003;
                Visible=FALSE }

    { 40  ;4   ;Field     ;
                Name=Quantity3;
                BlankZero=Yes;
                SourceExpr=UndefinedQtyArray[1];
                Editable=FALSE }

    { 41  ;4   ;Field     ;
                Name=Handle3;
                BlankZero=Yes;
                SourceExpr=UndefinedQtyArray[2];
                Visible=Handle3Visible;
                Editable=FALSE }

    { 43  ;1   ;Group      }

    { 503 ;2   ;Field     ;
                Lookup=Yes;
                CaptionML=[ENU=Item Tracking Code;
                           ENG=Item Tracking Code];
                SourceExpr=ItemTrackingCode.Code;
                Editable=FALSE;
                OnLookup=BEGIN
                           PAGE.RUNMODAL(0,ItemTrackingCode);
                         END;
                          }

    { 505 ;2   ;Field     ;
                CaptionML=[ENU=Description;
                           ENG=Description];
                SourceExpr=ItemTrackingCode.Description;
                Editable=FALSE }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 22  ;2   ;Field     ;
                SourceExpr="Serial No.";
                OnValidate=BEGIN
                             SerialNoOnAfterValidate;
                           END;

                OnAssistEdit=VAR
                               MaxQuantity@1106000000 : Decimal;
                             BEGIN
                               IF ColorOfQuantityArray[1] = 0 THEN
                                 MaxQuantity := UndefinedQtyArray[1] + ("Quantity (Base)" - "Quantity Handled (Base)");

                               LookUpTrackingSummary(Rec,0,MaxQuantity,-1,TRUE);
                               CurrPage.UPDATE;
                               CalculateSums;
                             END;
                              }

    { 10  ;2   ;Field     ;
                SourceExpr="New Serial No.";
                Visible="New Serial No.Visible";
                Editable="New Serial No.Editable" }

    { 24  ;2   ;Field     ;
                SourceExpr="Lot No.";
                OnValidate=BEGIN
                             LotNoOnAfterValidate;
                           END;

                OnAssistEdit=VAR
                               MaxQuantity@1106000000 : Decimal;
                             BEGIN
                               IF ColorOfQuantityArray[1] = 0 THEN
                                 MaxQuantity := UndefinedQtyArray[1] + ("Quantity (Base)" - "Quantity Handled (Base)");

                               LookUpTrackingSummary(Rec,1,MaxQuantity,-1,TRUE);
                               CurrPage.UPDATE;
                               CalculateSums;
                             END;
                              }

    { 46  ;2   ;Field     ;
                SourceExpr="New Lot No.";
                Visible="New Lot No.Visible";
                Editable="New Lot No.Editable" }

    { 53  ;2   ;Field     ;
                SourceExpr="Expiration Date";
                Visible=FALSE;
                Editable="Expiration DateEditable" }

    { 16  ;2   ;Field     ;
                SourceExpr="New Expiration Date";
                Visible="New Expiration DateVisible";
                Editable="New Expiration DateEditable" }

    { 48  ;2   ;Field     ;
                SourceExpr="Warranty Date";
                Visible=FALSE }

    { 2   ;2   ;Field     ;
                SourceExpr="Item No.";
                Visible=FALSE;
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr="Variant Code";
                Visible=FALSE;
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr=Description;
                Visible=FALSE;
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr="Location Code";
                Visible=FALSE;
                Editable=FALSE }

    { 12  ;2   ;Field     ;
                Name=Quantity;
                SourceExpr="Quantity (Base)";
                OnValidate=BEGIN
                             QuantityBaseOnAfterValidate;
                           END;
                            }

    { 14  ;2   ;Field     ;
                SourceExpr="Qty. to Handle (Base)";
                Visible="Qty. to Handle (Base)Visible";
                Editable="Qty. to Handle (Base)Editable";
                OnValidate=BEGIN
                             QtytoHandleBaseOnAfterValidate;
                           END;
                            }

    { 18  ;2   ;Field     ;
                SourceExpr="Quantity Handled (Base)";
                Visible=FALSE;
                Editable=FALSE }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      WhseWorksheetLine@1007 : Record 7326;
      TotalWhseItemTrackingLine@1002 : Record 6550;
      TempInitialTrkgLine@1009 : TEMPORARY Record 6550;
      Item@1005 : Record 27;
      ItemTrackingCode@1006 : Record 6502;
      ItemTrackingMgt@1010 : Codeunit 6500;
      UndefinedQtyArray@1001 : ARRAY [2] OF Decimal;
      SourceQuantityArray@1000 : ARRAY [2] OF Decimal;
      ColorOfQuantityArray@1003 : ARRAY [2] OF Integer;
      Text001@1004 : TextConst 'ENU=Line;ENG=Line';
      Text002@1008 : TextConst 'ENU=The corrections cannot be saved as excess quantity has been defined.\Close the form anyway?;ENG=The corrections cannot be saved as excess quantity has been defined.\Close the form anyway?';
      FormSourceType@1011 : Integer;
      FormUpdated@1012 : Boolean;
      Reclass@1014 : Boolean;
      Text003@1013 : TextConst 'ENU=Placeholder;ENG=Placeholder';
      Handle1Visible@19064734 : Boolean INDATASET;
      Handle2Visible@19067235 : Boolean INDATASET;
      Handle3Visible@19058196 : Boolean INDATASET;
      "Qty. to Handle (Base)Visible"@19036968 : Boolean INDATASET;
      "New Serial No.Visible"@19031772 : Boolean INDATASET;
      "New Lot No.Visible"@19006815 : Boolean INDATASET;
      "New Expiration DateVisible"@19041101 : Boolean INDATASET;
      ButtonLineReclassVisible@19076729 : Boolean INDATASET;
      ButtonLineVisible@19043118 : Boolean INDATASET;
      "Qty. to Handle (Base)Editable"@19075992 : Boolean INDATASET;
      "New Serial No.Editable"@19030864 : Boolean INDATASET;
      "New Lot No.Editable"@19020282 : Boolean INDATASET;
      "New Expiration DateEditable"@19056874 : Boolean INDATASET;
      "Expiration DateEditable"@19023942 : Boolean INDATASET;

    LOCAL PROCEDURE TextCaption@1() : Text[30];
    VAR
      PostedWhseRcptLine@1000 : Record 7319;
      WhseShipmentLine@1001 : Record 7321;
    BEGIN
      CASE "Source Type" OF
        DATABASE::"Posted Whse. Receipt Line":
          EXIT(PostedWhseRcptLine.TABLECAPTION);
        DATABASE::"Warehouse Shipment Line":
          EXIT(WhseShipmentLine.TABLECAPTION);
        ELSE
          EXIT(Text001);
      END;
    END;

    PROCEDURE SetSource@3(WhseWrkshLine@1000 : Record 7326;SourceType@1001 : Integer);
    VAR
      Controls@1002 : 'Handle,Reclass,Expiration';
      WhseSNRequired@1003 : Boolean;
      WhseLNRequired@1004 : Boolean;
    BEGIN
      FormUpdated := FALSE;
      FormSourceType := SourceType;
      WhseWorksheetLine := WhseWrkshLine;
      GetItem(WhseWorksheetLine."Item No.");
      ItemTrackingMgt.CheckWhseItemTrkgSetup(
        WhseWorksheetLine."Item No.",WhseSNRequired,WhseLNRequired,TRUE);

      IF SourceType = DATABASE::"Warehouse Journal Line" THEN
        SetControls(Controls::Handle,FALSE)
      ELSE
        SetControls(Controls::Handle,TRUE);

      Reclass := IsReclass(SourceType,WhseWorksheetLine."Worksheet Template Name");
      SetControls(Controls::Reclass,Reclass);

      SetFilters(Rec,FormSourceType);
      SourceQuantityArray[1] := ABS(WhseWorksheetLine."Qty. (Base)");
      SourceQuantityArray[2] := ABS(WhseWorksheetLine."Qty. to Handle (Base)");
      CalculateSums;
    END;

    PROCEDURE SetFilters@12(VAR WhseItemTrkgLine2@1000 : Record 6550;SourceType@1001 : Integer);
    BEGIN
      WITH WhseItemTrkgLine2 DO BEGIN
        FILTERGROUP := 2;
        SETRANGE("Source Type",SourceType);
        SETRANGE("Location Code",WhseWorksheetLine."Location Code");
        SETRANGE("Item No.",WhseWorksheetLine."Item No.");
        SETRANGE("Variant Code",WhseWorksheetLine."Variant Code");
        SETRANGE("Qty. per Unit of Measure",WhseWorksheetLine."Qty. per Unit of Measure");

        CASE SourceType OF
          DATABASE::"Posted Whse. Receipt Line",
          DATABASE::"Warehouse Shipment Line",
          DATABASE::"Whse. Internal Put-away Line",
          DATABASE::"Whse. Internal Pick Line",
          DATABASE::"Assembly Line",
          DATABASE::"Internal Movement Line":
            BEGIN
              SETRANGE("Source ID",WhseWorksheetLine."Whse. Document No.");
              SETRANGE("Source Ref. No.",WhseWorksheetLine."Whse. Document Line No.");
            END;
          DATABASE::"Prod. Order Component":
            BEGIN
              SETRANGE("Source Subtype",WhseWorksheetLine."Source Subtype");
              SETRANGE("Source ID",WhseWorksheetLine."Source No.");
              SETRANGE("Source Prod. Order Line",WhseWorksheetLine."Source Line No.");
              SETRANGE("Source Ref. No.",WhseWorksheetLine."Source Subline No.");
            END;
          DATABASE::"Whse. Worksheet Line",
          DATABASE::"Warehouse Journal Line":
            BEGIN
              SETRANGE("Source Batch Name",WhseWorksheetLine."Worksheet Template Name");
              SETRANGE("Source ID",WhseWorksheetLine.Name);
              SETRANGE("Source Ref. No.",WhseWorksheetLine."Line No.");
            END;
        END;
        FILTERGROUP := 0;
      END;
    END;

    LOCAL PROCEDURE SetControls@13(Controls@1002 : 'Handle,Reclass';SetAccess@1001 : Boolean);
    BEGIN
      CASE Controls OF
        Controls::Handle:
          BEGIN
            Handle1Visible := SetAccess;
            Handle2Visible := SetAccess;
            Handle3Visible := SetAccess;
            "Qty. to Handle (Base)Visible" := SetAccess;
            "Qty. to Handle (Base)Editable" := SetAccess;
          END;
        Controls::Reclass:
          BEGIN
            "New Serial No.Visible" := SetAccess;
            "New Serial No.Editable" := SetAccess;
            "New Lot No.Visible" := SetAccess;
            "New Lot No.Editable" := SetAccess;
            "New Expiration DateVisible" := SetAccess;
            "New Expiration DateEditable" := SetAccess;
            ButtonLineReclassVisible := SetAccess;
            ButtonLineVisible := NOT SetAccess;
          END;
      END;
    END;

    LOCAL PROCEDURE UpdateExpDateColor@41();
    BEGIN
      IF BlockExpDate THEN;
    END;

    LOCAL PROCEDURE UpdateExpDateEditable@42();
    BEGIN
      "Expiration DateEditable" := NOT BlockExpDate;
    END;

    LOCAL PROCEDURE BlockExpDate@15() : Boolean;
    BEGIN
      EXIT(
        ("Buffer Status2" = "Buffer Status2"::"ExpDate blocked") OR
        (WhseWorksheetLine."Qty. (Base)" < 0) OR
        Reclass OR
        (FormSourceType IN
         [DATABASE::"Whse. Worksheet Line",
          DATABASE::"Posted Whse. Receipt Line",
          DATABASE::"Whse. Internal Put-away Line"]));
    END;

    LOCAL PROCEDURE CalculateSums@2();
    BEGIN
      WITH TotalWhseItemTrackingLine DO BEGIN
        SETCURRENTKEY(
          "Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.");
        SETRANGE("Source Type",FormSourceType);
        SETRANGE("Location Code",WhseWorksheetLine."Location Code");

        CASE FormSourceType OF
          DATABASE::"Posted Whse. Receipt Line",
          DATABASE::"Warehouse Shipment Line",
          DATABASE::"Whse. Internal Put-away Line",
          DATABASE::"Whse. Internal Pick Line",
          DATABASE::"Assembly Line",
          DATABASE::"Internal Movement Line":
            BEGIN
              SETRANGE("Source ID",WhseWorksheetLine."Whse. Document No.");
              SETRANGE("Source Ref. No.",WhseWorksheetLine."Whse. Document Line No.");
            END;
          DATABASE::"Prod. Order Component":
            BEGIN
              SETRANGE("Source Subtype",WhseWorksheetLine."Source Subtype");
              SETRANGE("Source ID",WhseWorksheetLine."Source No.");
              SETRANGE("Source Prod. Order Line",WhseWorksheetLine."Source Line No.");
              SETRANGE("Source Ref. No.",WhseWorksheetLine."Source Subline No.");
            END;
          DATABASE::"Whse. Worksheet Line",
          DATABASE::"Warehouse Journal Line":
            BEGIN
              SETRANGE("Source Batch Name",WhseWorksheetLine."Worksheet Template Name");
              SETRANGE("Source ID",WhseWorksheetLine.Name);
              SETRANGE("Source Ref. No.",WhseWorksheetLine."Line No.");
            END;
        END;
        CALCSUMS("Quantity (Base)","Qty. to Handle (Base)");
      END;

      UpdateUndefinedQty;
    END;

    LOCAL PROCEDURE UpdateUndefinedQty@5() QtyIsValid@1000 : Boolean;
    BEGIN
      UndefinedQtyArray[1] := SourceQuantityArray[1] - TotalWhseItemTrackingLine."Quantity (Base)";
      UndefinedQtyArray[2] := SourceQuantityArray[2] - TotalWhseItemTrackingLine."Qty. to Handle (Base)";

      IF ABS(SourceQuantityArray[1]) < ABS(TotalWhseItemTrackingLine."Quantity (Base)") THEN BEGIN
        ColorOfQuantityArray[1] := 255;
        QtyIsValid := FALSE;
      END ELSE BEGIN
        ColorOfQuantityArray[1] := 0;
        QtyIsValid := TRUE;
      END;

      IF ABS(SourceQuantityArray[2]) < ABS(TotalWhseItemTrackingLine."Qty. to Handle (Base)") THEN
        ColorOfQuantityArray[2] := 255
      ELSE
        ColorOfQuantityArray[2] := 0;
    END;

    LOCAL PROCEDURE GetItem@4(ItemNo@1000 : Code[20]);
    BEGIN
      IF Item."No." <> ItemNo THEN BEGIN
        Item.GET(ItemNo);
        Item.TESTFIELD("Item Tracking Code");
        IF ItemTrackingCode.Code <> Item."Item Tracking Code" THEN
          ItemTrackingCode.GET(Item."Item Tracking Code");
      END;
    END;

    LOCAL PROCEDURE SaveItemTrkgLine@6(VAR TempWhseItemTrkgLine@1001 : TEMPORARY Record 6550);
    VAR
      WhseItemTrkgLine2@1000 : Record 6550;
    BEGIN
      SetFilters(WhseItemTrkgLine2,FormSourceType);
      TempWhseItemTrkgLine.RESET;
      TempWhseItemTrkgLine.DELETEALL;
      IF WhseItemTrkgLine2.FIND('-') THEN
        REPEAT
          TempWhseItemTrkgLine := WhseItemTrkgLine2;
          TempWhseItemTrkgLine.INSERT;
        UNTIL WhseItemTrkgLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE RestoreInitialTrkgLine@9();
    VAR
      WhseItemTrkgLine2@1000 : Record 6550;
    BEGIN
      SetFilters(WhseItemTrkgLine2,FormSourceType);
      WhseItemTrkgLine2.DELETEALL;
      IF TempInitialTrkgLine.FIND('-') THEN
        REPEAT
          WhseItemTrkgLine2 := TempInitialTrkgLine;
          WhseItemTrkgLine2.INSERT;
        UNTIL TempInitialTrkgLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyToReservEntry@10() : Boolean;
    VAR
      WhseItemTrkgLine2@1000 : Record 6550;
      SourceWhseItemTrkgLine@1006 : TEMPORARY Record 6550;
      WhseShptLine@1002 : Record 7321;
      ProdOrderComp@1003 : Record 5407;
      QuantityBase@1005 : Decimal;
      DueDate@1004 : Date;
      Updated@1001 : Boolean;
    BEGIN
      SetFilters(WhseItemTrkgLine2,FormSourceType);

      IF WhseItemTrkgLine2.FIND('-') THEN
        SourceWhseItemTrkgLine := WhseItemTrkgLine2
      ELSE
        IF TempInitialTrkgLine.FIND('-') THEN
          SourceWhseItemTrkgLine := TempInitialTrkgLine
        ELSE
          EXIT(TRUE);

      CASE FormSourceType OF
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.GET(SourceWhseItemTrkgLine."Source Subtype",SourceWhseItemTrkgLine."Source ID",
              SourceWhseItemTrkgLine."Source Prod. Order Line",SourceWhseItemTrkgLine."Source Ref. No.");
            QuantityBase := ProdOrderComp."Expected Qty. (Base)";
            DueDate := ProdOrderComp."Due Date";
            Updated := UpdateReservEntry(
                SourceWhseItemTrkgLine."Source Type",
                SourceWhseItemTrkgLine."Source Subtype",
                SourceWhseItemTrkgLine."Source ID",
                SourceWhseItemTrkgLine."Source Prod. Order Line",
                SourceWhseItemTrkgLine."Source Ref. No.",
                SourceWhseItemTrkgLine,QuantityBase,DueDate);
          END;
        DATABASE::"Warehouse Shipment Line":
          BEGIN
            WhseShptLine.GET(SourceWhseItemTrkgLine."Source ID",SourceWhseItemTrkgLine."Source Ref. No.");
            QuantityBase := WhseShptLine."Qty. (Base)";
            DueDate := WhseShptLine."Due Date";
            Updated := UpdateReservEntry(
                WhseShptLine."Source Type",
                WhseShptLine."Source Subtype",
                WhseShptLine."Source No.",
                0,
                WhseShptLine."Source Line No.",
                SourceWhseItemTrkgLine,QuantityBase,DueDate);
          END;
        ELSE
          EXIT(TRUE);
      END;
      EXIT(Updated)
    END;

    LOCAL PROCEDURE UpdateReservEntry@7(SourceType@1000 : Integer;SourceSubtype@1001 : Integer;SourceID@1002 : Code[20];SourceProdOrderLine@1003 : Integer;SourceRefNo@1004 : Integer;SourceWhseItemTrkgLine@1005 : TEMPORARY Record 6550;QuantityBase@1013 : Decimal;DueDate@1012 : Date) : Boolean;
    VAR
      TempTrkgSpec@1006 : TEMPORARY Record 336;
      SourceSpecification@1009 : Record 336;
      WhseItemTrkgLine2@1014 : Record 6550;
      ItemTrackingMgt@1007 : Codeunit 6500;
      LastEntryNo@1008 : Integer;
    BEGIN
      IF TempInitialTrkgLine.FIND('-') THEN
        REPEAT
          TempTrkgSpec.TRANSFERFIELDS(TempInitialTrkgLine);
          TempTrkgSpec."Quantity (Base)" *= -1;
          TempTrkgSpec."Entry No." := LastEntryNo + 1;
          TempTrkgSpec.INSERT;
          LastEntryNo := TempTrkgSpec."Entry No.";
        UNTIL TempInitialTrkgLine.NEXT = 0;

      SetFilters(WhseItemTrkgLine2,FormSourceType);
      IF WhseItemTrkgLine2.FIND('-') THEN
        REPEAT
          TempTrkgSpec.TRANSFERFIELDS(WhseItemTrkgLine2);
          TempTrkgSpec."Entry No." := LastEntryNo + 1;
          TempTrkgSpec.INSERT;
          LastEntryNo := TempTrkgSpec."Entry No.";
        UNTIL WhseItemTrkgLine2.NEXT = 0;

      SourceSpecification."Source Type" := SourceType;
      SourceSpecification."Source Subtype" := SourceSubtype;
      SourceSpecification."Source ID" := SourceID;
      SourceSpecification."Source Batch Name" := '';
      SourceSpecification."Source Prod. Order Line" := SourceProdOrderLine;
      SourceSpecification."Source Ref. No." := SourceRefNo;
      SourceSpecification."Quantity (Base)" := QuantityBase;
      SourceSpecification."Item No." := SourceWhseItemTrkgLine."Item No.";
      SourceSpecification."Variant Code" := SourceWhseItemTrkgLine."Variant Code";
      SourceSpecification."Location Code" := SourceWhseItemTrkgLine."Location Code";
      SourceSpecification.Description := SourceWhseItemTrkgLine.Description;
      SourceSpecification."Qty. per Unit of Measure" := SourceWhseItemTrkgLine."Qty. per Unit of Measure";
      ItemTrackingMgt.SetGlobalParameters(SourceSpecification,TempTrkgSpec,DueDate);
      EXIT(ItemTrackingMgt.RUN);
    END;

    PROCEDURE InsertItemTrackingLine@8(WhseWrkshLine@1004 : Record 7326;SerialNo@1000 : Code[20];LotNo@1001 : Code[20];ExpirationDate@1005 : Date;QtyToEmpty@1002 : Decimal);
    VAR
      WhseItemTrackingLine2@1003 : Record 6550;
    BEGIN
      UpdateUndefinedQty;
      SaveItemTrkgLine(TempInitialTrkgLine);
      "Lot No." := LotNo;
      "Serial No." := SerialNo;
      "Expiration Date" := ExpirationDate;
      "Qty. per Unit of Measure" := WhseWrkshLine."Qty. per Unit of Measure";
      VALIDATE("Quantity (Base)",QtyToEmpty);
      "Source Type" := FormSourceType;
      "Source ID" := WhseWorksheetLine."Whse. Document No.";
      "Source Ref. No." := WhseWorksheetLine."Whse. Document Line No.";
      "Source Batch Name" := WhseWrkshLine."Worksheet Template Name";
      "Location Code" := WhseWorksheetLine."Location Code";
      "Item No." := WhseWorksheetLine."Item No.";
      "Variant Code" := WhseWrkshLine."Variant Code";
      IF ("Expiration Date" <> 0D) AND (FormSourceType = DATABASE::"Internal Movement Line") THEN
        InitExpirationDate;
      IF WhseItemTrackingLine2.FINDLAST THEN;
      "Entry No." := WhseItemTrackingLine2."Entry No." + 1;
      INSERT;
    END;

    LOCAL PROCEDURE SerialNoOnAfterValidate@19074494();
    BEGIN
      UpdateExpDateEditable;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE LotNoOnAfterValidate@19045288();
    BEGIN
      UpdateExpDateEditable;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE QuantityBaseOnAfterValidate@19029188();
    BEGIN
      CurrPage.UPDATE;
      CalculateSums;
    END;

    LOCAL PROCEDURE QtytoHandleBaseOnAfterValidate@19004517();
    BEGIN
      CurrPage.UPDATE;
      CalculateSums;
    END;

    LOCAL PROCEDURE ExpirationDateOnFormat@19045111();
    BEGIN
      UpdateExpDateColor;
    END;

    BEGIN
    {
      Function button Line exist in two overlayed versions to make dynamic show/hide/enable of
      individual menu items possible.
    }
    END.
  }
}

