OBJECT Page 504 Available - Item Ledg. Entries
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 32=rm;
    Editable=No;
    CaptionML=[ENU=Available - Item Ledg. Entries;
               ENG=Available - Item Ledg. Entries];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table32;
    DataCaptionExpr=CaptionText;
    SourceTableView=SORTING(Item No.,Open);
    PageType=List;
    OnOpenPage=BEGIN
                 ReservEntry.TESTFIELD("Source Type");

                 RESET;
                 SETRANGE("Item No.",ReservEntry."Item No.");
                 SETRANGE("Variant Code",ReservEntry."Variant Code");
                 SETRANGE("Location Code",ReservEntry."Location Code");
                 SETRANGE("Drop Shipment",FALSE);
                 SETRANGE(Open,TRUE);
                 IF ReservMgt.FieldFilterNeeded2(ReservEntry,ReservMgt.IsPositive,0) THEN
                   SETFILTER("Lot No.",ReservMgt.GetFieldFilter);
                 IF ReservMgt.FieldFilterNeeded2(ReservEntry,ReservMgt.IsPositive,1) THEN
                   SETFILTER("Serial No.",ReservMgt.GetFieldFilter);
                 IF ReservMgt.IsPositive THEN BEGIN
                   SETRANGE(Positive,TRUE);
                   SETFILTER("Remaining Quantity",'>0');
                 END ELSE BEGIN
                   SETRANGE(Positive,FALSE);
                   SETFILTER("Remaining Quantity",'<0');
                 END;
               END;

    OnAfterGetRecord=BEGIN
                       ReservMgt.ItemLedgEntryUpdateValues(Rec,QtyToReserve,QtyReservedThisLine);
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 50      ;1   ;ActionGroup;
                      CaptionML=[ENU=Ent&ry;
                                 ENG=Ent&ry];
                      Image=Entry }
      { 51      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 22      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 23      ;2   ;Action    ;
                      Name=Reserve;
                      CaptionML=[ENU=&Reserve;
                                 ENG=&Reserve];
                      Image=Reserve;
                      OnAction=VAR
                                 NewQtyReservedThisLine2@1000 : Decimal;
                               BEGIN
                                 ReservEntry.LOCKTABLE;
                                 UpdateReservMgt;
                                 ReservMgt.ItemLedgEntryUpdateValues(Rec,QtyToReserve,QtyReservedThisLine);
                                 ReservMgt.CalculateRemainingQty(NewQtyReservedThisLine2,NewQtyReservedThisLine);
                                 IF MaxQtyDefined AND (ABS(MaxQtyToReserve) < ABS(NewQtyReservedThisLine)) THEN
                                   NewQtyReservedThisLine := MaxQtyToReserve;

                                 ReservMgt.CopySign(NewQtyReservedThisLine,QtyToReserve);
                                 IF NewQtyReservedThisLine <> 0 THEN BEGIN
                                   IF ABS(NewQtyReservedThisLine) > ABS(QtyToReserve) THEN BEGIN
                                     CreateReservation(QtyToReserve);
                                     MaxQtyToReserve := MaxQtyToReserve - QtyToReserve;
                                   END ELSE BEGIN
                                     CreateReservation(NewQtyReservedThisLine);
                                     MaxQtyToReserve := MaxQtyToReserve - NewQtyReservedThisLine;
                                   END;
                                   IF MaxQtyToReserve < 0 THEN
                                     MaxQtyToReserve := 0;
                                 END ELSE
                                   ERROR(Text000);
                               END;
                                }
      { 24      ;2   ;Action    ;
                      AccessByPermission=TableData 27=R;
                      CaptionML=[ENU=&Cancel Reservation;
                                 ENG=&Cancel Reservation];
                      Image=Cancel;
                      OnAction=BEGIN
                                 IF NOT CONFIRM(Text001,FALSE) THEN
                                   EXIT;

                                 ReservMgt.ItemLedgEntryUpdateValues(Rec,QtyToReserve,QtyReservedThisLine);

                                 ReservEntry2.COPY(ReservEntry);
                                 IF ReservMgt.IsPositive THEN
                                   ReserveItemLedgEntry.FilterReservFor(ReservEntry2,Rec)
                                 ELSE
                                   ERROR(Text99000000);
                                 ReservEntry2.SETRANGE("Expected Receipt Date");
                                 IF ReservEntry2.FIND('-') THEN BEGIN
                                   UpdateReservMgt;
                                   REPEAT
                                     ReservEngineMgt.CancelReservation(ReservEntry2);
                                   UNTIL ReservEntry2.NEXT = 0;

                                   TotalAvailQty := TotalAvailQty + QtyReservedThisLine;
                                   MaxQtyToReserve := MaxQtyToReserve + QtyReservedThisLine;
                                   UpdateReservFrom;
                                 END;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr="Entry Type" }

    { 4   ;2   ;Field     ;
                SourceExpr="Document No." }

    { 21  ;2   ;Field     ;
                SourceExpr="Serial No.";
                Visible=FALSE }

    { 26  ;2   ;Field     ;
                SourceExpr="Lot No.";
                Visible=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr="Location Code" }

    { 8   ;2   ;Field     ;
                SourceExpr="Posting Date" }

    { 10  ;2   ;Field     ;
                SourceExpr="Remaining Quantity" }

    { 12  ;2   ;Field     ;
                SourceExpr="Reserved Quantity";
                Editable=FALSE }

    { 17  ;2   ;Field     ;
                CaptionML=[ENU=Available Quantity;
                           ENG=Available Quantity];
                DecimalPlaces=0:5;
                SourceExpr=QtyToReserve;
                Editable=FALSE }

    { 19  ;2   ;Field     ;
                CaptionML=[ENU=Current Reserved Quantity;
                           ENG=Current Reserved Quantity];
                DecimalPlaces=0:5;
                SourceExpr=ReservedThisLine;
                OnDrillDown=BEGIN
                              ReservEntry2.RESET;
                              ReserveItemLedgEntry.FilterReservFor(ReservEntry2,Rec);
                              ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
                              ReservMgt.MarkReservConnection(ReservEntry2,ReservEntry);
                              PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry2);
                              UpdateReservFrom;
                              CurrPage.UPDATE;
                            END;
                             }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Fully reserved.;ENG=Fully reserved.';
      Text001@1001 : TextConst 'ENU=Do you want to cancel the reservation?;ENG=Do you want to cancel the reservation?';
      Text002@1031 : TextConst 'ENU=Reservation cannot be carried out because the available quantity is already allocated in a warehouse.;ENG=Reservation cannot be carried out because the available quantity is already allocated in a warehouse.';
      Text99000000@1002 : TextConst 'ENU=You can only cancel reservations to inventory.;ENG=You can only cancel reservations to inventory.';
      ReservEntry@1003 : Record 337;
      ReservEntry2@1004 : Record 337;
      SalesLine@1005 : Record 37;
      PurchLine@1006 : Record 39;
      ReqLine@1008 : Record 246;
      ProdOrderLine@1009 : Record 5406;
      ProdOrderComp@1010 : Record 5407;
      PlanningComponent@1011 : Record 99000829;
      TransLine@1012 : Record 5741;
      ServiceLine@1013 : Record 5902;
      JobPlanningLine@1035 : Record 1003;
      AssemblyLine@1036 : Record 901;
      AssemblyHeader@1037 : Record 900;
      ReservMgt@1014 : Codeunit 99000845;
      ReservEngineMgt@1015 : Codeunit 99000831;
      ReserveSalesLine@1016 : Codeunit 99000832;
      ReserveReqLine@1017 : Codeunit 99000833;
      ReservePurchLine@1018 : Codeunit 99000834;
      ReserveProdOrderLine@1020 : Codeunit 99000837;
      ReserveProdOrderComp@1021 : Codeunit 99000838;
      ReservePlanningComponent@1022 : Codeunit 99000840;
      ReserveItemLedgEntry@1023 : Codeunit 99000841;
      ReserveTransLine@1024 : Codeunit 99000836;
      ReserveServiceLine@1025 : Codeunit 99000842;
      JobPlanningLineReserve@1034 : Codeunit 1032;
      AssemblyLineReserve@1038 : Codeunit 926;
      AssemblyHeaderReserve@1039 : Codeunit 925;
      QtyToReserve@1026 : Decimal;
      QtyReservedThisLine@1027 : Decimal;
      NewQtyReservedThisLine@1028 : Decimal;
      TotalAvailQty@1030 : Decimal;
      MaxQtyToReserve@1032 : Decimal;
      MaxQtyDefined@1033 : Boolean;
      CaptionText@1029 : Text[80];

    PROCEDURE SetSalesLine@24(VAR CurrentSalesLine@1000 : Record 37;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentSalesLine.TESTFIELD(Type,CurrentSalesLine.Type::Item);
      SalesLine := CurrentSalesLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetSalesLine(SalesLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveSalesLine.FilterReservFor(ReservEntry,SalesLine);
      CaptionText := ReserveSalesLine.Caption(SalesLine);
    END;

    PROCEDURE SetReqLine@23(VAR CurrentReqLine@1000 : Record 246;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ReqLine := CurrentReqLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetReqLine(ReqLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveReqLine.FilterReservFor(ReservEntry,ReqLine);
      CaptionText := ReserveReqLine.Caption(ReqLine);
    END;

    PROCEDURE SetPurchLine@22(VAR CurrentPurchLine@1000 : Record 39;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentPurchLine.TESTFIELD(Type,CurrentPurchLine.Type::Item);
      PurchLine := CurrentPurchLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPurchLine(PurchLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReservePurchLine.FilterReservFor(ReservEntry,PurchLine);
      CaptionText := ReservePurchLine.Caption(PurchLine);
    END;

    PROCEDURE SetProdOrderLine@19(VAR CurrentProdOrderLine@1000 : Record 5406;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ProdOrderLine := CurrentProdOrderLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderLine(ProdOrderLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveProdOrderLine.FilterReservFor(ReservEntry,ProdOrderLine);
      CaptionText := ReserveProdOrderLine.Caption(ProdOrderLine);
    END;

    PROCEDURE SetProdOrderComponent@18(VAR CurrentProdOrderComp@1000 : Record 5407;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ProdOrderComp := CurrentProdOrderComp;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderComponent(ProdOrderComp);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
      CaptionText := ReserveProdOrderComp.Caption(ProdOrderComp);
    END;

    PROCEDURE SetPlanningComponent@15(VAR CurrentPlanningComponent@1000 : Record 99000829;CurrentReservEntry@1001 : Record 337);
    BEGIN
      PlanningComponent := CurrentPlanningComponent;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPlanningComponent(PlanningComponent);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReservePlanningComponent.FilterReservFor(ReservEntry,PlanningComponent);
      CaptionText := ReservePlanningComponent.Caption(PlanningComponent);
    END;

    PROCEDURE SetTransferLine@16(VAR CurrentTransLine@1000 : Record 5741;CurrentReservEntry@1001 : Record 337;Direction@1002 : 'Outbound,Inbound');
    BEGIN
      TransLine := CurrentTransLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetTransferLine(TransLine,Direction);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,Direction);
      CaptionText := ReserveTransLine.Caption(TransLine);
    END;

    PROCEDURE SetServiceLine@8(VAR CurrentServiceLine@1000 : Record 5902;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentServiceLine.TESTFIELD(Type,CurrentServiceLine.Type::Item);
      ServiceLine := CurrentServiceLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetServLine(ServiceLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveServiceLine.FilterReservFor(ReservEntry,ServiceLine);
      CaptionText := ReserveServiceLine.Caption(ServiceLine);
    END;

    PROCEDURE SetJobPlanningLine@5(VAR CurrentJobPlanningLine@1000 : Record 1003;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentJobPlanningLine.TESTFIELD(Type,CurrentJobPlanningLine.Type::Item);
      JobPlanningLine := CurrentJobPlanningLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetJobPlanningLine(JobPlanningLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      JobPlanningLineReserve.FilterReservFor(ReservEntry,JobPlanningLine);
      CaptionText := JobPlanningLineReserve.Caption(JobPlanningLine);
    END;

    PROCEDURE SetTotalAvailQty@1(TotalAvailQty2@1000 : Decimal);
    BEGIN
      TotalAvailQty := TotalAvailQty2;
    END;

    PROCEDURE SetMaxQtyToReserve@3(NewMaxQtyToReserve@1000 : Decimal);
    BEGIN
      MaxQtyToReserve := NewMaxQtyToReserve;
      MaxQtyDefined := TRUE;
    END;

    PROCEDURE SetAssemblyLine@4(VAR CurrentAsmLine@1002 : Record 901;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentAsmLine.TESTFIELD(Type,CurrentAsmLine.Type::Item);
      AssemblyLine := CurrentAsmLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetAssemblyLine(AssemblyLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      AssemblyLineReserve.FilterReservFor(ReservEntry,AssemblyLine);
      CaptionText := AssemblyLineReserve.Caption(AssemblyLine);
    END;

    PROCEDURE SetAssemblyHeader@7(VAR CurrentAsmHeader@1000 : Record 900;CurrentReservEntry@1001 : Record 337);
    BEGIN
      AssemblyHeader := CurrentAsmHeader;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetAssemblyHeader(AssemblyHeader);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      AssemblyHeaderReserve.FilterReservFor(ReservEntry,AssemblyHeader);
      CaptionText := AssemblyHeaderReserve.Caption(AssemblyHeader);
    END;

    LOCAL PROCEDURE CreateReservation@14(VAR ReserveQuantity@1000 : Decimal);
    VAR
      TrackingSpecification@1001 : Record 336;
    BEGIN
      TESTFIELD("Drop Shipment",FALSE);
      TESTFIELD("Item No.",ReservEntry."Item No.");
      TESTFIELD("Variant Code",ReservEntry."Variant Code");
      TESTFIELD("Location Code",ReservEntry."Location Code");

      IF TotalAvailQty < 0 THEN BEGIN
        ReserveQuantity := 0;
        EXIT;
      END;

      IF TotalAvailQty < ReserveQuantity THEN
        ReserveQuantity := TotalAvailQty;
      TotalAvailQty := TotalAvailQty - ReserveQuantity;

      IF (TotalAvailQty = 0) AND
         (ReserveQuantity = 0) AND
         (QtyToReserve <> 0)
      THEN
        ERROR(Text002);

      UpdateReservMgt;
      ReservMgt.CreateTrackingSpecification(TrackingSpecification,
        DATABASE::"Item Ledger Entry",0,'','',0,"Entry No.",
        "Variant Code","Location Code","Serial No.","Lot No.","Qty. per Unit of Measure");
      ReservMgt.CreateReservation(
        ReservEntry.Description,0D,0,ReserveQuantity,TrackingSpecification);
      UpdateReservFrom;
    END;

    LOCAL PROCEDURE UpdateReservFrom@17();
    BEGIN
      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.FIND;
            SetSalesLine(SalesLine,ReservEntry);
          END;
        DATABASE::"Requisition Line":
          BEGIN
            ReqLine.FIND;
            SetReqLine(ReqLine,ReservEntry);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchLine.FIND;
            SetPurchLine(PurchLine,ReservEntry);
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            ProdOrderLine.FIND;
            SetProdOrderLine(ProdOrderLine,ReservEntry);
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.FIND;
            SetProdOrderComponent(ProdOrderComp,ReservEntry);
          END;
        DATABASE::"Planning Component":
          BEGIN
            PlanningComponent.FIND;
            SetPlanningComponent(PlanningComponent,ReservEntry);
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TransLine.FIND;
            SetTransferLine(TransLine,ReservEntry,ReservEntry."Source Subtype");
          END;
        DATABASE::"Service Line":
          BEGIN
            ServiceLine.FIND;
            SetServiceLine(ServiceLine,ReservEntry);
          END;
        DATABASE::"Job Planning Line":
          BEGIN
            JobPlanningLine.FIND;
            SetJobPlanningLine(JobPlanningLine,ReservEntry);
          END;
        DATABASE::"Assembly Line":
          BEGIN
            AssemblyLine.FIND;
            SetAssemblyLine(AssemblyLine,ReservEntry);
          END;
        DATABASE::"Assembly Header":
          BEGIN
            AssemblyHeader.FIND;
            SetAssemblyHeader(AssemblyHeader,ReservEntry);
          END;
      END;
    END;

    LOCAL PROCEDURE UpdateReservMgt@13();
    BEGIN
      CLEAR(ReservMgt);
      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          ReservMgt.SetSalesLine(SalesLine);
        DATABASE::"Requisition Line":
          ReservMgt.SetReqLine(ReqLine);
        DATABASE::"Purchase Line":
          ReservMgt.SetPurchLine(PurchLine);
        DATABASE::"Prod. Order Line":
          ReservMgt.SetProdOrderLine(ProdOrderLine);
        DATABASE::"Prod. Order Component":
          ReservMgt.SetProdOrderComponent(ProdOrderComp);
        DATABASE::"Planning Component":
          ReservMgt.SetPlanningComponent(PlanningComponent);
        DATABASE::"Transfer Line":
          ReservMgt.SetTransferLine(TransLine,ReservEntry."Source Subtype");
        DATABASE::"Service Line":
          ReservMgt.SetServLine(ServiceLine);
        DATABASE::"Job Planning Line":
          ReservMgt.SetJobPlanningLine(JobPlanningLine);
        DATABASE::"Assembly Line":
          ReservMgt.SetAssemblyLine(AssemblyLine);
        DATABASE::"Assembly Header":
          ReservMgt.SetAssemblyHeader(AssemblyHeader);
      END;
      ReservMgt.SetSerialLotNo(ReservEntry."Serial No.",ReservEntry."Lot No.");
    END;

    LOCAL PROCEDURE ReservedThisLine@2() : Decimal;
    BEGIN
      ReservEntry2.RESET;
      ReserveItemLedgEntry.FilterReservFor(ReservEntry2,Rec);
      ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
      EXIT(ReservMgt.MarkReservConnection(ReservEntry2,ReservEntry));
    END;

    BEGIN
    END.
  }
}

