OBJECT Codeunit 1531 Workflow Change Rec Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 1525=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WorkflowBlockingManagement@1001 : Codeunit 1504;
      ValueMismatchMsg@1002 : TextConst 'ENU=The current value of the field is different from the value before the change.;ENG=The current value of the field is different from the value before the change.';
      NoRecordChangesFoundMsg@1000 : TextConst 'ENU=No record changes exist to apply the saved values to using the current options.;ENG=No record changes exist to apply the saved values to using the current options.';

    PROCEDURE RevertValueForField@51(VAR Variant@1000 : Variant;xVariant@1001 : Variant;WorkflowStepInstance@1002 : Record 1504);
    BEGIN
      IF NOT TryRevertValueForField(Variant,xVariant,WorkflowStepInstance) THEN BEGIN
        WorkflowBlockingManagement.UnblockEngine;
        ERROR(GETLASTERRORTEXT);
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryRevertValueForField@73(VAR Variant@1000 : Variant;xVariant@1001 : Variant;WorkflowStepInstance@1002 : Record 1504);
    VAR
      WorkflowStepArgument@1004 : Record 1523;
      WorkflowRecordChange@1008 : Record 1525;
      RecRef@1003 : RecordRef;
      OldValue@1005 : Text;
      NewValue@1006 : Text;
    BEGIN
      RecRef.GETTABLE(Variant);

      WorkflowStepArgument.GET(WorkflowStepInstance.Argument);

      OldValue := GetValueFromField(xVariant,WorkflowStepArgument."Field No.");
      NewValue := GetValueFromField(Variant,WorkflowStepArgument."Field No.");

      IF OldValue = NewValue THEN
        EXIT;

      WorkflowBlockingManagement.BlockEngineFor(RecRef.NUMBER);

      CreateChangeRecord(RecRef,OldValue,NewValue,WorkflowStepArgument."Field No.",WorkflowStepInstance,WorkflowRecordChange);

      OldValue := WorkflowRecordChange.GetFormattedOldValue(FALSE);
      SetValueForField(RecRef,WorkflowStepArgument."Field No.",OldValue);

      RecRef.MODIFY(TRUE);

      RecRef.SETTABLE(Variant);

      WorkflowBlockingManagement.UnblockEngine;
    END;

    PROCEDURE ApplyNewValues@65(Variant@1000 : Variant;WorkflowStepInstance@1002 : Record 1504);
    BEGIN
      IF NOT TryApplyNewValues(Variant,WorkflowStepInstance) THEN BEGIN
        WorkflowBlockingManagement.UnblockEngine;
        ERROR(GETLASTERRORTEXT);
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryApplyNewValues@67(Variant@1000 : Variant;WorkflowStepInstance@1002 : Record 1504);
    VAR
      ApprovalEntry@1004 : Record 454;
      WorkflowRecordChange@1003 : Record 1525;
      WorkflowStepArgument@1005 : Record 1523;
      RecRef@1001 : RecordRef;
      BlockedRecRef@1006 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry.GET(RecRef.RECORDID);
            BlockedRecRef.GET(ApprovalEntry."Record ID to Approve");
            WorkflowBlockingManagement.BlockEngineFor(BlockedRecRef.NUMBER);

            WorkflowRecordChange.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
            WorkflowRecordChange.SETRANGE("Record ID",ApprovalEntry."Record ID to Approve");
            WorkflowRecordChange.SETRANGE(Inactive,FALSE);
          END;
        DATABASE::"Workflow - Record Change":
          BEGIN
            WorkflowRecordChange.GET(RecRef.RECORDID);
            BlockedRecRef.GET(WorkflowRecordChange."Record ID");
            WorkflowBlockingManagement.BlockEngineFor(BlockedRecRef.NUMBER);

            WorkflowRecordChange.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
            WorkflowRecordChange.SETRANGE("Record ID",WorkflowRecordChange."Record ID");
            WorkflowRecordChange.SETRANGE(Inactive,FALSE);
          END;
        ELSE BEGIN
          WorkflowBlockingManagement.BlockEngineFor(RecRef.NUMBER);

          WorkflowRecordChange.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
          WorkflowRecordChange.SETRANGE("Record ID",RecRef.RECORDID);
          WorkflowRecordChange.SETRANGE(Inactive,FALSE);
        END
      END;

      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        IF WorkflowStepArgument."Field No." <> 0 THEN BEGIN
          WorkflowRecordChange.SETRANGE("Table No.",WorkflowStepArgument."Table No.");
          WorkflowRecordChange.SETRANGE("Field No.",WorkflowStepArgument."Field No.");
        END;

      IF WorkflowRecordChange.FINDSET THEN
        REPEAT
          ApplyNewValueFromChangeRecord(WorkflowRecordChange);
        UNTIL WorkflowRecordChange.NEXT = 0
      ELSE
        MESSAGE(NoRecordChangesFoundMsg);
      WorkflowBlockingManagement.UnblockEngine;
    END;

    PROCEDURE DiscardNewValues@1(Variant@1001 : Variant;WorkflowStepInstance@1000 : Record 1504);
    VAR
      ApprovalEntry@1004 : Record 454;
      WorkflowRecordChange@1002 : Record 1525;
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry.GET(RecRef.RECORDID);
            RecRef.GET(ApprovalEntry."Record ID to Approve");
          END;
        DATABASE::"Workflow - Record Change":
          BEGIN
            WorkflowRecordChange.GET(RecRef.RECORDID);
            RecRef.GET(WorkflowRecordChange."Record ID");
          END;
      END;

      WorkflowRecordChange.SETRANGE("Table No.",RecRef.NUMBER);
      WorkflowRecordChange.SETRANGE("Record ID",RecRef.RECORDID);
      WorkflowRecordChange.SETRANGE("Workflow Step Instance ID",WorkflowStepInstance.ID);
      WorkflowRecordChange.MODIFYALL(Inactive,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateChangeRecord@49(RecRef@1001 : RecordRef;OldValue@1002 : Text;NewValue@1006 : Text;FieldNo@1004 : Integer;WorkflowStepInstance@1005 : Record 1504;VAR WorkflowRecordChange@1003 : Record 1525);
    BEGIN
      CLEAR(WorkflowRecordChange);
      WorkflowRecordChange."Table No." := RecRef.NUMBER;
      WorkflowRecordChange."Field No." := FieldNo;
      WorkflowRecordChange."Old Value" := COPYSTR(OldValue,1,250);
      WorkflowRecordChange."New Value" := COPYSTR(NewValue,1,250);
      WorkflowRecordChange."Record ID" := RecRef.RECORDID;
      WorkflowRecordChange."Workflow Step Instance ID" := WorkflowStepInstance.ID;
      WorkflowRecordChange.INSERT(TRUE);
    END;

    LOCAL PROCEDURE ApplyNewValueFromChangeRecord@70(WorkflowRecordChange@1000 : Record 1525);
    VAR
      RecRef@1001 : RecordRef;
      NewValue@1002 : Text;
    BEGIN
      RecRef.GET(WorkflowRecordChange."Record ID");

      IF WorkflowRecordChange."Old Value" = GetValueFromField(RecRef,WorkflowRecordChange."Field No.") THEN BEGIN
        NewValue := WorkflowRecordChange.GetFormattedNewValue(FALSE);
        SetValueForField(RecRef,WorkflowRecordChange."Field No.",NewValue);
        RecRef.MODIFY(TRUE);
        WorkflowRecordChange.Inactive := TRUE;
        WorkflowRecordChange.MODIFY(TRUE);
      END ELSE
        MESSAGE(ValueMismatchMsg);
    END;

    LOCAL PROCEDURE GetValueFromField@61(Variant@1000 : Variant;FieldId@1001 : Integer) : Text;
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      FieldRef := RecRef.FIELD(FieldId);
      EXIT(FORMAT(FieldRef.VALUE,0,9));
    END;

    LOCAL PROCEDURE SetValueForField@33(VAR RecRef@1001 : RecordRef;FieldId@1002 : Integer;NewValue@1000 : Text);
    VAR
      FieldRef@1004 : FieldRef;
    BEGIN
      FieldRef := RecRef.FIELD(FieldId);
      FieldRef.VALUE := NewValue;
    END;

    BEGIN
    END.
  }
}

