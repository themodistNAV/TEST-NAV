OBJECT Table 9062374 Migration Line
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Migration Code");
               IF (Rec.ID = 0) THEN
                 Rec.VALIDATE(ID, NewId());
               IF (Rec.Sequence = 0) THEN
                 Rec.VALIDATE(Sequence, NewSequence());
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               IF (Rec.ID <> 0) THEN
               BEGIN
                 MigrationLine.RESET();
                 MigrationLine.SETCURRENTKEY("Migration Code", "Parent ID");
                 MigrationLine.SETRANGE("Migration Code", Rec."Migration Code");
                 MigrationLine.SETRANGE("Parent ID", Rec.ID);
                 MigrationLine.DELETEALL(TRUE);
               END;

               CriteriaManagement.DeleteCriteria(Rec."Table Filter ID");
             END;

    CaptionML=[ENU=Migration Line;
               ENG=Migration Line];
  }
  FIELDS
  {
    { 1   ;   ;Migration Code      ;Code20        ;TableRelation="Migration Header";
                                                   CaptionML=[ENU=Migration Code;
                                                              ENG=Migration Code] }
    { 2   ;   ;ID                  ;Integer       ;CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 10  ;   ;Type                ;Option        ;InitValue=Group;
                                                   OnValidate=VAR
                                                                eCantChangeType@1000000000 : TextConst 'ENU="You can''t change type because the line has child lines; please remove them or detach from the current line before deleting it.";ENG="You can''t change type because the line has child lines; please remove them or detach from the current line before deleting it."';
                                                              BEGIN
                                                                IF (Rec.Type <> xRec.Type) THEN
                                                                BEGIN
                                                                  IF (Rec.Type = Rec.Type::Group) THEN
                                                                  BEGIN
                                                                    MigrationLine.RESET();
                                                                    MigrationLine.SETCURRENTKEY("Migration Code", "Parent ID");
                                                                    MigrationLine.SETRANGE("Migration Code", Rec."Migration Code");
                                                                    MigrationLine.SETRANGE("Parent ID", Rec.ID);
                                                                    IF ( NOT (MigrationLine.ISEMPTY())) THEN
                                                                      ERROR(eCantChangeType);
                                                                  END;
                                                                  Rec.VALIDATE(Description, '');
                                                                  Rec.VALIDATE("XMLport ID", 0);
                                                                  Rec.VALIDATE("Table ID", 0);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=" ,Group,XMLport";
                                                                    ENG=" ,Group,XMLport"];
                                                   OptionString=[ ,Group,XMLport] }
    { 11  ;   ;Sequence            ;Integer       ;OnValidate=BEGIN
                                                                Rec.VALIDATE(Hash, TreeToolkit.IntegerToHash(Rec.Sequence));
                                                              END;

                                                   CaptionML=[ENU=Sequence;
                                                              ENG=Sequence] }
    { 12  ;   ;Hash                ;Text6         ;OnValidate=BEGIN
                                                                IF (Rec."Parent ID" <> 0) THEN
                                                                BEGIN
                                                                  Rec.CALCFIELDS("Parent Full Hash");
                                                                  Rec.VALIDATE("Full Hash", Rec."Parent Full Hash" + Rec.Hash);
                                                                END
                                                                ELSE
                                                                  Rec.VALIDATE("Full Hash", Rec.Hash);
                                                              END;

                                                   CaptionML=[ENU=Hash;
                                                              ENG=Hash] }
    { 13  ;   ;Full Hash           ;Text250       ;OnValidate=BEGIN
                                                                UpdateChildLines(Rec.FIELDNO("Full Hash"));
                                                              END;

                                                   CaptionML=[ENU=Full Hash;
                                                              ENG=Full Hash] }
    { 14  ;   ;Parent ID           ;Integer       ;TableRelation="Migration Line".ID WHERE (Migration Code=FIELD(Migration Code));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Parent ID" <> xRec."Parent ID") THEN
                                                                BEGIN
                                                                  IF (Rec."Parent ID" <> 0) THEN
                                                                  BEGIN
                                                                    MigrationLine.GET(Rec."Migration Code", Rec."Parent ID");
                                                                    Rec.VALIDATE(Indentation, MigrationLine.Indentation + 1);
                                                                    Rec.VALIDATE("Full Hash", MigrationLine."Full Hash" + Rec.Hash);
                                                                  END
                                                                  ELSE
                                                                  BEGIN
                                                                    Rec.VALIDATE(Indentation, 0);
                                                                    Rec.VALIDATE("Full Hash", Rec.Hash);
                                                                  END;
                                                                  Rec.VALIDATE(Sequence, NewSequence());
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Parent ID;
                                                              ENG=Parent ID] }
    { 15  ;   ;Parent Full Hash    ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Migration Line"."Full Hash" WHERE (Migration Code=FIELD(Migration Code),
                                                                                                          ID=FIELD(Parent ID)));
                                                   CaptionML=[ENU=Parent Full Hash;
                                                              ENG=Parent Full Hash];
                                                   Editable=No }
    { 16  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 17  ;   ;XMLport ID          ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(XMLport));
                                                   OnValidate=BEGIN
                                                                Rec.CALCFIELDS("XMLport Caption");
                                                                IF (Rec."XMLport ID" <> 0) THEN
                                                                BEGIN
                                                                  Rec.TESTFIELD(Type, Rec.Type::XMLport);
                                                                  Rec.VALIDATE(Description, Rec."XMLport Caption");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=XMLport ID;
                                                              ENG=XMLport ID];
                                                   BlankZero=Yes }
    { 18  ;   ;XMLport Caption     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(XMLport),
                                                                                                                Object ID=FIELD(XMLport ID)));
                                                   CaptionML=[ENU=XMLport Caption;
                                                              ENG=XMLport Caption];
                                                   Editable=No }
    { 19  ;   ;Indentation         ;Integer       ;OnValidate=BEGIN
                                                                UpdateChildLines(Rec.FIELDNO(Indentation));
                                                              END;

                                                   CaptionML=[ENU=Indentation;
                                                              ENG=Indentation] }
    { 20  ;   ;Add                 ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Add;
                                                              ENG=Add];
                                                   OptionCaptionML=[ENU=,To the Current Line,At Root Level;
                                                                    ENG=,To the Current Line,At Root Level];
                                                   OptionString=,To the Current Line,At Root Level }
    { 21  ;   ;Enabled             ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                IF (Rec.Enabled <> xRec.Enabled) THEN
                                                                BEGIN
                                                                  IF ( NOT (EnabledDownBlocked)) THEN
                                                                    IF (Rec.Type = Rec.Type::Group) THEN
                                                                    BEGIN
                                                                      MigrationLine.RESET();
                                                                      MigrationLine.SETCURRENTKEY("Migration Code", "Parent ID");
                                                                      MigrationLine.SETRANGE("Migration Code", Rec."Migration Code");
                                                                      MigrationLine.SETRANGE("Parent ID", Rec.ID);
                                                                      IF (MigrationLine.FINDSET(TRUE)) THEN
                                                                      REPEAT
                                                                        MigrationLine.SetEnabledUpBlocked(TRUE);
                                                                        MigrationLine.VALIDATE(Enabled, Rec.Enabled);
                                                                        MigrationLine.MODIFY(TRUE);
                                                                        MigrationLine.SetEnabledUpBlocked(FALSE);
                                                                      UNTIL (MigrationLine.NEXT() = 0);
                                                                    END;

                                                                  IF ( NOT (EnabledUpBlocked)) THEN
                                                                    IF ((Rec.Enabled) AND (Rec."Parent ID" <> 0)) THEN
                                                                      IF (MigrationLine.GET(Rec."Migration Code", Rec."Parent ID")) THEN
                                                                        IF ( NOT (MigrationLine.Enabled)) THEN
                                                                        BEGIN
                                                                          MigrationLine.SetEnabledDownBlocked(TRUE);
                                                                          MigrationLine.VALIDATE(Enabled, TRUE);
                                                                          MigrationLine.MODIFY(TRUE);
                                                                          MigrationLine.SetEnabledDownBlocked(FALSE);
                                                                        END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Enabled;
                                                              ENG=Enabled] }
    { 22  ;   ;Table ID            ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Table ID" <> xRec."Table ID") THEN
                                                                  IF (Rec."Table Filter ID" <> 0) THEN
                                                                  BEGIN
                                                                    CriteriaManagement.DeleteCriteria(Rec."Table Filter ID");
                                                                    Rec.VALIDATE("Table Filter ID", 0);
                                                                  END;
                                                                Rec.CALCFIELDS("Table Caption");
                                                              END;

                                                   CaptionML=[ENU=Table ID;
                                                              ENG=Table ID] }
    { 23  ;   ;Table Caption       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Table),
                                                                                                                Object ID=FIELD(Table ID)));
                                                   CaptionML=[ENU=Table Caption;
                                                              ENG=Table Caption];
                                                   Editable=No }
    { 24  ;   ;Table Filter ID     ;Integer       ;TableRelation=Criteria;
                                                   OnValidate=BEGIN
                                                                Rec.CALCFIELDS("Table Filter");
                                                              END;

                                                   CaptionML=[ENU=Table Filter ID;
                                                              ENG=Table Filter ID] }
    { 25  ;   ;Table Filter        ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Criteria.Description WHERE (ID=FIELD(Table Filter ID)));
                                                   CaptionML=[ENU=Table Filter;
                                                              ENG=Table Filter];
                                                   Editable=No }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Migration Code,ID                       ;Clustered=Yes }
    {    ;Migration Code,Parent ID,Sequence        }
    {    ;Migration Code,Full Hash                 }
    {    ;Migration Code,Enabled,Full Hash         }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      MigrationLine@1000000002 : Record 9062374;
      UserMigrationLineView@1000000005 : Record 9062375;
      CriteriaManagement@1000000008 : Codeunit 9062462;
      MigrationManagement@1000000001 : Codeunit 9062328;
      ObjectFieldToolkit@1000000003 : Codeunit 9062343;
      TnpToolkit@1000000000 : Codeunit 9062230;
      TreeToolkit@1000000004 : Codeunit 9062669;
      EnabledUpBlocked@1000000006 : Boolean;
      EnabledDownBlocked@1000000007 : Boolean;

    PROCEDURE InitRecord@1000000004();
    BEGIN
      //DOC NA2016.11 - Initialising new record

      Rec.VALIDATE(Sequence, NewSequence());
    END;

    PROCEDURE NewId@1000000001() : Integer;
    VAR
      lMigrationLine@1000000000 : Record 9062374;
    BEGIN
      //DOC NA2016.11 - Returning new ID
      //  <- The ID

      lMigrationLine.RESET();
      lMigrationLine.SETRANGE("Migration Code", Rec."Migration Code");
      IF (lMigrationLine.FINDLAST()) THEN
        EXIT(lMigrationLine.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE NewSequence@1000000003() : Integer;
    VAR
      lMigrationLine@1000000000 : Record 9062374;
    BEGIN
      //DOC NA2016.11 - Returning new sequence
      //  <- The sequence

      lMigrationLine.RESET();
      lMigrationLine.SETCURRENTKEY("Migration Code", "Parent ID", Sequence);
      lMigrationLine.SETRANGE("Migration Code", Rec."Migration Code");
      lMigrationLine.SETRANGE("Parent ID", Rec."Parent ID");
      IF (lMigrationLine.FINDLAST()) THEN
        EXIT(lMigrationLine.Sequence + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE ValidateDescriptionText@1000000000(VAR pDescriptionText@1000000000 : Text);
    VAR
      lXmlPortId@1000000001 : Integer;
    BEGIN
      //DOC NA2016.11 - Validating description text
      //  <> pDescriptionText: The description text

      CASE (Rec.Type) OF
        Rec.Type::Group:
          Rec.VALIDATE(Description, pDescriptionText);
        Rec.Type::XMLport:
          BEGIN
            IF (ObjectFieldToolkit.TryToValidateXmlPortName(lXmlPortId, pDescriptionText, FALSE)) THEN
              Rec.VALIDATE("XMLport ID", lXmlPortId);
            Rec.Description := pDescriptionText;
          END;
        ELSE
          CLEAR(pDescriptionText);
      END;
    END;

    PROCEDURE DescriptionLookup@1000000002();
    BEGIN
      //DOC NA2016.11 - Lookup for description

      IF (Rec.Type = Rec.Type::XMLport) THEN
      BEGIN
        ObjectFieldToolkit.XmlPortLookup(Rec."XMLport ID");
        Rec.CALCFIELDS("XMLport Caption");
        Rec.Description := Rec."XMLport Caption";
      END;
    END;

    LOCAL PROCEDURE UpdateChildLines@1000000005(pFieldId@1000000000 : Integer);
    BEGIN
      //DOC NA2016.11 - Updating child lines
      //  -> pFieldId: Field ID (the update was called from)

      IF (Rec.ID = 0) THEN
        EXIT;

      MigrationLine.RESET();
      MigrationLine.SETCURRENTKEY("Migration Code", "Parent ID");
      MigrationLine.SETRANGE("Migration Code", Rec."Migration Code");
      MigrationLine.SETRANGE("Parent ID", Rec.ID);
      IF (MigrationLine.FINDSET(TRUE)) THEN
      REPEAT
        CASE (pFieldId) OF
          Rec.FIELDNO("Full Hash"):
            MigrationLine.VALIDATE("Full Hash", Rec."Full Hash" + MigrationLine.Hash);
          Rec.FIELDNO(Indentation):
            MigrationLine.VALIDATE(Indentation, Rec.Indentation + 1);
        END;
        MigrationLine.MODIFY(TRUE);
      UNTIL (MigrationLine.NEXT() = 0);
    END;

    PROCEDURE GetStyle@1000000006() : Text;
    BEGIN
      //DOC NA2016.11 - Returning style
      //  <- The style

      CASE (Rec.Type) OF
        Rec.Type::Group:
          IF (Rec.Enabled) THEN
            EXIT('Strong')
          ELSE
            EXIT('StrongAccent');
        Rec.Type::XMLport:
          IF (Rec.Enabled) THEN
            EXIT('Standard')
          ELSE
            EXIT('StandardAccent');
        ELSE
          EXIT('Subordinate');
      END;
    END;

    PROCEDURE SetEnabledUpBlocked@1000000009(pEnabledUpBlocked@1000000000 : Boolean);
    BEGIN
      //DOC NA2016.11 - Setting "Enabled Up Blocked" flag
      //  -> pEnabledUpBlocked: The flag

      EnabledUpBlocked := pEnabledUpBlocked;
    END;

    PROCEDURE SetEnabledDownBlocked@1000000011(pEnabledDownBlocked@1000000000 : Boolean);
    BEGIN
      //DOC NA2016.11 - Setting "Enabled Down Blocked" flag
      //  -> pEnabledDownBlocked: The flag

      EnabledDownBlocked := pEnabledDownBlocked;
    END;

    PROCEDURE EditTableFilter@1000000012();
    BEGIN
      //DOC NA2016.11 - Editing table filter (criteria)

      Rec.TESTFIELD("Table ID");
      CriteriaManagement.EditCriteriaAttachedAdvanced(Rec."Table Filter ID", Rec."Table ID", 0, DATABASE::"Migration Line",
        Rec.GETPOSITION(FALSE), Rec.FIELDNO("Table Filter ID"), FALSE);
    END;

    BEGIN
    {
      //DOC NA2016.11 JH 24/11/2015 - Created
      //DOC NA2016.12 JH 17/12/2015 - Tree toolkit moved to a different ID
      //DOC NA2016.12 JH 27/12/2015 - Criteria references changed
      //DOC NA2016.14 JH 02/03/2016 - Bugfixes
      //DOC NA2016.15 JH 06/05/2016 - CfMD amendments
    }
    END.
  }
}

