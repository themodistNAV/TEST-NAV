OBJECT Page 9086529 QC Test Answer Matrix
{
  OBJECT-PROPERTIES
  {
    Date=14/07/16;
    Time=12:37:08 PM;
    Version List=NH2016.16;
  }
  PROPERTIES
  {
    CaptionML=[ENU=QC Test Answer Matrix;
               ENG=QC Test Answer Matrix];
    SourceTable=Table9062877;
    SourceTableTemporary=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Navigate;
                                ENG=New,Process,Report,Navigate];
    OnOpenPage=BEGIN
                 InitPage(QCTestCode);
               END;

    OnAfterGetRecord=VAR
                       i@1000000000 : Integer;
                     BEGIN
                       i := 0;
                       REPEAT
                         i += 1;
                         Description_Style := GetDescription_Style;
                         GetCellInfo(i,FALSE);
                         IF NOT MODIFY THEN;
                       UNTIL i = 10
                     END;

    ActionList=ACTIONS
    {
      { 1000000021;0 ;ActionContainer;
                      ActionContainerType=NewDocumentItems }
      { 1000000022;1 ;Action    ;
                      Name=Create Tests for All Records;
                      CaptionML=[ENU=Create Tests for All Records;
                                 ENG=Create Tests for All Records];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CreateForm;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF NOT CONFIRM(Text020) THEN
                                   EXIT;
                                 CreateTestInstances(CurrTestCode);
                                 ColumnOffset := 0;
                                 LoadColumns(CurrTestCode,ColumnOffset);
                               END;
                                }
      { 1000000023;1 ;Action    ;
                      Name=Register Completed Tests;
                      CaptionML=[ENU=Register Completed Tests;
                                 ENG=Register Completed Tests];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Close;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CASE STRMENU(Text021,3,Text022) OF
                                   1 : RegisterTests(FALSE); //All Tests
                                   2 : RegisterTests(TRUE); //Visible Only
                                   3 : EXIT; //Cancel
                                 END;
                               END;
                                }
      { 1000000000;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000020;1 ;ActionGroup;
                      CaptionML=[ENU=Navigate;
                                 ENG=Navigate];
                      ActionContainerType=NewDocumentItems }
      { 1000000001;2 ;Action    ;
                      Name=Prev. Set;
                      CaptionML=[ENU=Prev. Set;
                                 ENG=Prev. Set];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ChangeColumnOffset(-10);
                               END;
                                }
      { 1000000019;2 ;Action    ;
                      Name=Prev. Record;
                      CaptionML=[ENU=Prev. Record;
                                 ENG=Prev. Record];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousRecord;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ChangeColumnOffset(-1);
                               END;
                                }
      { 1000000018;2 ;Action    ;
                      Name=Next. Record;
                      CaptionML=[ENU=Next. Record;
                                 ENG=Next. Record];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextRecord;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ChangeColumnOffset(+1);
                               END;
                                }
      { 1000000017;2 ;Action    ;
                      Name=Next. Set;
                      CaptionML=[ENU=Next. Set;
                                 ENG=Next. Set];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ChangeColumnOffset(+10);
                               END;
                                }
      { 1000000024;2 ;Action    ;
                      Name=Refresh;
                      CaptionML=[ENU=Refresh;
                                 ENG=Refresh];
                      Promoted=Yes;
                      PromotedIsBig=No;
                      Image=Refresh;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 LoadColumns(CurrTestCode,ColumnOffset);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000016;0;Container;
                ContainerType=ContentArea }

    { 1000000015;1;Group  ;
                Name=Group;
                CaptionML=[ENU=Group;
                           ENG=Group];
                GroupType=Repeater }

    { 1000000014;2;Field  ;
                SourceExpr="Test Code";
                Visible=FALSE }

    { 1000000013;2;Field  ;
                SourceExpr="Line No.";
                Visible=FALSE }

    { 1000000012;2;Field  ;
                SourceExpr=Description;
                StyleExpr=Description_Style }

    { 1000000011;2;Field  ;
                SourceExpr="Answer - Col 1";
                CaptionClass=ColumnInfo_Name(1);
                Visible=ColumnVisible1;
                StyleExpr=CellStyle1;
                OnValidate=BEGIN
                             SetCellAnswer(1,"Answer - Col 1");
                           END;

                OnDrillDown=BEGIN
                              CellDrillDown(1);
                            END;
                             }

    { 1000000010;2;Field  ;
                SourceExpr="Answer - Col 2";
                CaptionClass=ColumnInfo_Name(2);
                Visible=ColumnVisible2;
                StyleExpr=CellStyle2;
                OnValidate=BEGIN
                             SetCellAnswer(2,"Answer - Col 2");
                           END;

                OnDrillDown=BEGIN
                              CellDrillDown(2);
                            END;
                             }

    { 1000000009;2;Field  ;
                SourceExpr="Answer - Col 3";
                CaptionClass=ColumnInfo_Name(3);
                Visible=ColumnVisible3;
                StyleExpr=CellStyle3;
                OnValidate=BEGIN
                             SetCellAnswer(3,"Answer - Col 3");
                           END;

                OnDrillDown=BEGIN
                              CellDrillDown(3);
                            END;
                             }

    { 1000000008;2;Field  ;
                SourceExpr="Answer - Col 4";
                CaptionClass=ColumnInfo_Name(4);
                Visible=ColumnVisible4;
                StyleExpr=CellStyle4;
                OnValidate=BEGIN
                             SetCellAnswer(4,"Answer - Col 4");
                           END;

                OnDrillDown=BEGIN
                              CellDrillDown(4);
                            END;
                             }

    { 1000000007;2;Field  ;
                SourceExpr="Answer - Col 5";
                CaptionClass=ColumnInfo_Name(5);
                Visible=ColumnVisible5;
                StyleExpr=CellStyle5;
                OnValidate=BEGIN
                             SetCellAnswer(5,"Answer - Col 5");
                           END;

                OnDrillDown=BEGIN
                              CellDrillDown(5);
                            END;
                             }

    { 1000000006;2;Field  ;
                SourceExpr="Answer - Col 6";
                CaptionClass=ColumnInfo_Name(6);
                Visible=ColumnVisible6;
                StyleExpr=CellStyle6;
                OnValidate=BEGIN
                             SetCellAnswer(6,"Answer - Col 6");
                           END;

                OnDrillDown=BEGIN
                              CellDrillDown(6);
                            END;
                             }

    { 1000000005;2;Field  ;
                SourceExpr="Answer - Col 7";
                CaptionClass=ColumnInfo_Name(7);
                Visible=ColumnVisible7;
                StyleExpr=CellStyle7;
                OnValidate=BEGIN
                             SetCellAnswer(7,"Answer - Col 7");
                           END;

                OnDrillDown=BEGIN
                              CellDrillDown(7);
                            END;
                             }

    { 1000000004;2;Field  ;
                SourceExpr="Answer - Col 8";
                CaptionClass=ColumnInfo_Name(8);
                Visible=ColumnVisible8;
                StyleExpr=CellStyle8;
                OnValidate=BEGIN
                             SetCellAnswer(8,"Answer - Col 8");
                           END;

                OnDrillDown=BEGIN
                              CellDrillDown(8);
                            END;
                             }

    { 1000000003;2;Field  ;
                SourceExpr="Answer - Col 9";
                CaptionClass=ColumnInfo_Name(9);
                Visible=ColumnVisible9;
                StyleExpr=CellStyle9;
                OnValidate=BEGIN
                             SetCellAnswer(9,"Answer - Col 9");
                           END;

                OnDrillDown=BEGIN
                              CellDrillDown(9);
                            END;
                             }

    { 1000000002;2;Field  ;
                SourceExpr="Answer - Col 10";
                CaptionClass=ColumnInfo_Name(10);
                Visible=ColumnVisible10;
                StyleExpr=CellStyle10;
                OnValidate=BEGIN
                             SetCellAnswer(10,"Answer - Col 10");
                           END;

                OnDrillDown=BEGIN
                              CellDrillDown(10);
                            END;
                             }

  }
  CODE
  {
    VAR
      ColumnRecord@1000000031 : ARRAY [10] OF Variant;
      NoColumns@1000000030 : Integer;
      NoQuestions@1000000029 : Integer;
      ColumnVisible1@1000000028 : Boolean INDATASET;
      ColumnVisible2@1000000027 : Boolean INDATASET;
      ColumnVisible3@1000000026 : Boolean INDATASET;
      ColumnVisible4@1000000025 : Boolean INDATASET;
      ColumnVisible5@1000000024 : Boolean INDATASET;
      ColumnVisible6@1000000023 : Boolean INDATASET;
      ColumnVisible7@1000000022 : Boolean INDATASET;
      ColumnVisible8@1000000021 : Boolean INDATASET;
      ColumnVisible9@1000000020 : Boolean INDATASET;
      ColumnVisible10@1000000019 : Boolean INDATASET;
      CellStyle1@1000000018 : Text;
      CellStyle2@1000000017 : Text;
      CellStyle3@1000000016 : Text;
      CellStyle4@1000000015 : Text;
      CellStyle5@1000000014 : Text;
      CellStyle6@1000000013 : Text;
      CellStyle7@1000000012 : Text;
      CellStyle8@1000000011 : Text;
      CellStyle9@1000000010 : Text;
      CellStyle10@1000000009 : Text;
      Description_Style@1000000008 : Text;
      Records@1000000007 : RecordRef;
      TNPUtils@1000000006 : Codeunit 9062229;
      RecordView@1000000005 : Text;
      QCTestCode@1000000004 : Code[20];
      ShowClosed@1000000003 : Boolean;
      ShowOnlyExistingTests@1000000002 : Boolean;
      LastColNo@1000000001 : Integer;
      CurrTestCode@1000000000 : Code[20];
      ColumnOffset@1000000032 : Integer;
      Text001@1000000033 : TextConst 'ENU=Test Created;ENG=Test Created';
      Text002@1000000034 : TextConst 'ENU=Status;ENG=Status';
      Text003@1000000035 : TextConst 'ENU=Closed;ENG=Closed';
      Text004@1000000036 : TextConst 'ENU=View Closed Tests;ENG=View Closed Tests';
      Text005@1000000037 : TextConst 'ENU=This field is not editable;ENG=This field is not editable';
      Text006@1000000038 : TextConst 'ENU=Multiple Answers are Required, pleased Click on the Assist Edit to give answers;ENG=Multiple Answers are Required, pleased Click on the Assist Edit to give answers';
      Text007@1000000039 : TextConst 'ENU=The Column %1 has not been set;ENG=The Column %1 has not been set';
      Text008@1000000040 : TextConst 'ENU=This Question Line does not exist for the Test Instance created for this record;ENG=This Question Line does not exist for the Test Instance created for this record';
      Text009@1000000041 : TextConst 'ENU=[WARNING];ENG=[WARNING]';
      Text010@1000000042 : TextConst 'ENU=%1 Test(s);ENG=%1 Test(s)';
      Text011@1000000043 : TextConst 'ENU=Attention;ENG=Attention';
      Text012@1000000044 : TextConst 'ENU=Standard;ENG=Standard';
      Text013@1000000045 : TextConst 'ENU=Favorable;ENG=Favorable';
      Text014@1000000046 : TextConst 'ENU=Unfavorable;ENG=Unfavorable';
      Text015@1000000047 : TextConst 'ENU=Ambiguous;ENG=Ambiguous';
      Text016@1000000048 : TextConst 'ENU=Are you sure you want to Register these results?;ENG=Are you sure you want to Register these results?';
      Text017@1000000049 : TextConst 'ENU=Strong;ENG=Strong';
      Text018@1000000050 : TextConst 'ENU=This Question does not exist for the current version of this QC Test;ENG=This Question does not exist for the current version of this QC Test';
      Text019@1000000051 : TextConst 'ENU=This Question is different in the current version of the QC Test;ENG=This Question is different in the current version of the QC Test';
      Text020@1000000052 : TextConst 'ENU=Are you sure you want to create Test Instances for all records?;ENG=Are you sure you want to create Test Instances for all records?';
      Text021@1000000053 : TextConst 'ENU=All Completed Tests,This Set Only,Cancel;ENG=All Completed Tests,This Set Only,Cancel';
      Text022@1000000054 : TextConst 'ENU=Which Tests would you like to Register?;ENG=Which Tests would you like to Register?';

    PROCEDURE InitPage@1000000001(TestCode@1000000000 : Code[20]);
    VAR
      QCTestLine@1000000002 : Record 9062857;
    BEGIN
      CurrTestCode := TestCode;
      InitPage_Questions(TestCode);
      InitPage_Columns(TestCode);
    END;

    PROCEDURE InitPage_Questions@1000000000(TestCode@1000000000 : Code[20]);
    VAR
      QCTest@1000000001 : Record 9062856;
      QCTestLine@1000000002 : Record 9062857;
    BEGIN
      QCTestLine.SETRANGE("Test Code",TestCode);
      IF QCTestLine.FINDSET THEN BEGIN
        NoQuestions := QCTestLine.COUNT;
        REPEAT
          INIT;
          "Test Code" := QCTestLine."Test Code";
          "Line No." := QCTestLine."Line No.";
          "Line Type" := "Line Type"::Question;
          Type := QCTestLine.Type;
          Description := QCTestLine.Description;
          INSERT(TRUE);
        UNTIL QCTestLine.NEXT = 0;
      END;

      //Blank
      INIT;
      "Test Code" := QCTestLine."Test Code";
      "Line No." := 999994;
      "Line Type" := "Line Type"::Blank;
      INSERT(TRUE);

      //DateTime Created
      INIT;
      "Test Code" := QCTestLine."Test Code";
      "Line No." := 999995;
      "Line Type" := "Line Type"::DateTimeCreated;
      Description := Text001;
      INSERT(TRUE);

      //Status
      INIT;
      "Test Code" := QCTestLine."Test Code";
      "Line No." := 999996;
      "Line Type" := "Line Type"::Status;
      Description := Text002;
      INSERT(TRUE);

      //Closed
      INIT;
      "Test Code" := QCTestLine."Test Code";
      "Line No." := 999997;
      "Line Type" := "Line Type"::Closed;
      Description := Text003;
      INSERT(TRUE);

      //Blank
      INIT;
      "Test Code" := QCTestLine."Test Code";
      "Line No." := 999998;
      "Line Type" := "Line Type"::Blank;
      INSERT(TRUE);

      //View Tests
      INIT;
      "Test Code" := QCTestLine."Test Code";
      "Line No." := 999999;
      "Line Type" := "Line Type"::ViewClosedlTests;
      Description := Text004;
      INSERT(TRUE);
    END;

    PROCEDURE InitPage_Columns@1000000002(TestCode@1000000001 : Code[20]);
    BEGIN
      ColumnOffset := 0;
      LoadColumns(TestCode,ColumnOffset);
    END;

    PROCEDURE CreateTestInstances@1000000017(TestCode@1000000001 : Code[20]);
    VAR
      i@1000000000 : Integer;
      QCTest@1000000002 : Record 9062856;
      lRecord@1000000003 : RecordRef;
      TestInstance@1000000004 : Record 9062858;
      j@1000000006 : Integer;
      CriteriaMgmt@1000000007 : Codeunit 9062462;
    BEGIN
      QCTest.GET(TestCode);
      Records.OPEN(QCTest."Related Table No.");
      IF RecordView = '' THEN
        CriteriaMgmt.ApplyCriteriaToRecRef(QCTest."Record Criteria ID",Records)
      ELSE
        Records.SETVIEW(RecordView);

      IF Records.FINDSET THEN BEGIN
        REPEAT
            lRecord.OPEN(Records.NUMBER);
            lRecord.SETPOSITION(Records.GETPOSITION);
            lRecord.SETRECFILTER;
            lRecord.FINDFIRST;

            CreateTestInstance(lRecord);

            lRecord.CLOSE;
        UNTIL Records.NEXT = 0;
      END;
      Records.CLOSE;
    END;

    PROCEDURE LoadColumns@1000000020(TestCode@1000000001 : Code[20];StartFrom@1000000005 : Integer);
    VAR
      i@1000000000 : Integer;
      QCTest@1000000002 : Record 9062856;
      lRecord@1000000003 : RecordRef;
      TestInstance@1000000004 : Record 9062858;
      j@1000000006 : Integer;
      CriteriaMgmt@1000000007 : Codeunit 9062462;
    BEGIN
      //Clear Existing Column Data
      FOR i := 1 TO 10 DO BEGIN
        CLEAR(ColumnRecord[i]);
      END;

      NoColumns := 0;

      QCTest.GET(TestCode);
      Records.OPEN(QCTest."Related Table No.");
      IF RecordView = '' THEN
        CriteriaMgmt.ApplyCriteriaToRecRef(QCTest."Record Criteria ID",Records)
      ELSE
        Records.SETVIEW(RecordView);

      IF Records.FINDSET THEN BEGIN
        j := -StartFrom;
        i := 0;
        REPEAT
          i += 1;
          NoColumns := i;
          lRecord.OPEN(Records.NUMBER);
          lRecord.SETPOSITION(Records.GETPOSITION);
          lRecord.SETRECFILTER;
          lRecord.FINDFIRST;

          ColumnRecord[i] := lRecord;
          IF (GetTestInstance(i,FALSE,TestInstance) = 0) AND ShowOnlyExistingTests THEN BEGIN
            i -= 1;
            NoColumns := i;
          END ELSE BEGIN
            j += 1;
            IF j > 0 THEN BEGIN
              SetColumnVisible(i);
              CreateTestInstance_ForColumn(i);
            END ELSE BEGIN
              i -= 1;
              NoColumns := i;
            END;
          END;
          lRecord.CLOSE;
        UNTIL (Records.NEXT = 0) OR (i = 10);
        LastColNo := i + StartFrom;
        CurrTestCode := TestCode;
      END;
      Records.CLOSE;
    END;

    PROCEDURE SetColumnVisible@1000000004(ColumnNo@1000000000 : Integer);
    BEGIN
      CASE ColumnNo OF
        1 : ColumnVisible1 := TRUE;
        2 : ColumnVisible2 := TRUE;
        3 : ColumnVisible3 := TRUE;
        4 : ColumnVisible4 := TRUE;
        5 : ColumnVisible5 := TRUE;
        6 : ColumnVisible6 := TRUE;
        7 : ColumnVisible7 := TRUE;
        8 : ColumnVisible8 := TRUE;
        9 : ColumnVisible9 := TRUE;
        10 : ColumnVisible10 := TRUE;

      END;
    END;

    PROCEDURE ColumnInfo_Name@1000000007(ColumnNo@1000000000 : Integer) : Text;
    VAR
      lRecord@1000000002 : RecordRef;
      TestInstance@1000000001 : Record 9062858;
    BEGIN
      IF ColumnNo > NoColumns THEN
        EXIT('');

      lRecord := ColumnRecord[ColumnNo];
      //EXIT(TNPUtils.GetRecordDescription(lRecord.NUMBER,lRecord.GETPOSITION));
      IF GetTestInstance(ColumnNo,FALSE,TestInstance) <> 0 THEN
        EXIT(TestInstance."Related Rec. Description")
      ELSE
        EXIT(TNPUtils.GetRecordDescription(lRecord.NUMBER,lRecord.GETPOSITION));
    END;

    PROCEDURE SetCellAnswer@1000000003(ColumnNo@1000000000 : Integer;Answer@1000000001 : Text);
    VAR
      TestInstance@1000000002 : Record 9062858;
      TestAnswer@1000000003 : Record 9062859;
      QCTest@1000000005 : Record 9062856;
      lRecord@1000000004 : RecordRef;
      TestLine@1000000006 : Record 9062857;
    BEGIN
      IF GetCellWarning(ColumnNo,TRUE) THEN BEGIN
        GetCellInfo_Answer(ColumnNo,FALSE);
        CurrPage.UPDATE;
        EXIT;
      END;

      IF "Line Type" <> "Line Type"::Question THEN
        ERROR(Text005);

      TestLine.GET("Test Code","Line No.");
      IF TestLine."No. Answers Required" > 1 THEN
        ERROR(Text006);


      IF ColumnNo > NoColumns THEN
        ERROR(Text007,ColumnNo);

      lRecord := ColumnRecord[ColumnNo];

      IF GetTestInstance(ColumnNo,FALSE,TestInstance) = 0 THEN
        EXIT;

      IF NOT TestAnswer.GET(TestInstance."Test Code",TestInstance."Instance No.","Line No.") THEN
        ERROR(Text008);

      TestAnswer.VALIDATE(Answer,Answer);
      TestAnswer.MODIFY(TRUE);

      TestAnswer.UpdateCalculations;

      GetCellInfo(ColumnNo,TRUE);
      IF NOT MODIFY THEN;
    END;

    PROCEDURE GetCellInfo@1000000006(ColumnNo@1000000000 : Integer;InsertIfMissing@1000000001 : Boolean);
    BEGIN
      CASE ColumnNo OF
        1 : "Answer - Col 1" := GetCellInfo_Answer(ColumnNo,InsertIfMissing);
        2 : "Answer - Col 2" := GetCellInfo_Answer(ColumnNo,InsertIfMissing);
        3 : "Answer - Col 3" := GetCellInfo_Answer(ColumnNo,InsertIfMissing);
        4 : "Answer - Col 4" := GetCellInfo_Answer(ColumnNo,InsertIfMissing);
        5 : "Answer - Col 5" := GetCellInfo_Answer(ColumnNo,InsertIfMissing);
        6 : "Answer - Col 6" := GetCellInfo_Answer(ColumnNo,InsertIfMissing);
        7 : "Answer - Col 7" := GetCellInfo_Answer(ColumnNo,InsertIfMissing);
        8 : "Answer - Col 8" := GetCellInfo_Answer(ColumnNo,InsertIfMissing);
        9 : "Answer - Col 9" := GetCellInfo_Answer(ColumnNo,InsertIfMissing);
        10 : "Answer - Col 10" := GetCellInfo_Answer(ColumnNo,InsertIfMissing);
      END;

      CASE ColumnNo OF
        1 : CellStyle1 := GetCellInfo_Style(ColumnNo,InsertIfMissing);
        2 : CellStyle2 := GetCellInfo_Style(ColumnNo,InsertIfMissing);
        3 : CellStyle3 := GetCellInfo_Style(ColumnNo,InsertIfMissing);
        4 : CellStyle4 := GetCellInfo_Style(ColumnNo,InsertIfMissing);
        5 : CellStyle5 := GetCellInfo_Style(ColumnNo,InsertIfMissing);
        6 : CellStyle6 := GetCellInfo_Style(ColumnNo,InsertIfMissing);
        7 : CellStyle7 := GetCellInfo_Style(ColumnNo,InsertIfMissing);
        8 : CellStyle8 := GetCellInfo_Style(ColumnNo,InsertIfMissing);
        9 : CellStyle9 := GetCellInfo_Style(ColumnNo,InsertIfMissing);
        10 : CellStyle10 := GetCellInfo_Style(ColumnNo,InsertIfMissing);
      END;
    END;

    PROCEDURE GetCellInfo_Answer@1000000005(ColumnNo@1000000001 : Integer;InsertIfMissing@1000000000 : Boolean) : Text;
    VAR
      TestInstance@1000000005 : Record 9062858;
      TestAnswer@1000000004 : Record 9062859;
      QCTest@1000000002 : Record 9062856;
      lRecord@1000000003 : RecordRef;
    BEGIN
      IF ColumnNo > NoColumns THEN
        EXIT('');

      lRecord := ColumnRecord[ColumnNo];

      IF GetTestInstance(ColumnNo,FALSE,TestInstance) = 0 THEN
        EXIT;

      CASE "Line Type" OF
        "Line Type"::Question :
          BEGIN
            IF GetCellWarning(ColumnNo,FALSE) THEN
              EXIT(Text009);

            TestAnswer.GET(TestInstance."Test Code",TestInstance."Instance No.","Line No.");
            EXIT(TestAnswer.Answer);

          END;
        "Line Type"::Status :
          BEGIN
            EXIT(FORMAT(TestInstance.Status));
          END;
        "Line Type"::Closed :
          BEGIN
            EXIT(FORMAT(TestInstance.Closed));
          END;
        "Line Type"::ViewClosedlTests :
          BEGIN
            TestInstance.RESET;
            TestInstance.SETRANGE("Test Code","Test Code");
            TestInstance.SETFILTER("Related Rec. PK 1",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,1));
            TestInstance.SETFILTER("Related Rec. PK 2",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,2));
            TestInstance.SETFILTER("Related Rec. PK 3",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,3));
            TestInstance.SETFILTER("Related Rec. PK 4",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,4));
            TestInstance.SETFILTER("Related Rec. PK 5",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,5));

            TestInstance.SETRANGE(Closed,TRUE);
            EXIT(STRSUBSTNO(Text010,TestInstance.COUNT));
          END;
        "Line Type"::DateTimeCreated :
          BEGIN
            EXIT(FORMAT(TestInstance."DateTime Created"));
          END;
      END;
    END;

    PROCEDURE GetCellInfo_Style@1000000010(ColumnNo@1000000001 : Integer;InsertIfMissing@1000000000 : Boolean) : Text;
    VAR
      TestInstance@1000000005 : Record 9062858;
      TestAnswer@1000000004 : Record 9062859;
      QCTest@1000000002 : Record 9062856;
      lRecord@1000000006 : RecordRef;
    BEGIN
      IF ColumnNo > NoColumns THEN EXIT('');

      lRecord := ColumnRecord[ColumnNo];

      IF GetTestInstance(ColumnNo,FALSE,TestInstance) = 0 THEN EXIT;

      CASE "Line Type" OF
        "Line Type"::Question :
          BEGIN
            IF GetCellWarning(ColumnNo,FALSE) THEN
              EXIT(Text011);

            TestAnswer.GET(TestInstance."Test Code",TestInstance."Instance No.","Line No.");

            CASE TestAnswer.Status OF
              TestAnswer.Status::"Not Answered" : EXIT(Text012);
              TestAnswer.Status::Passed : EXIT(Text013);
              TestAnswer.Status::Failed : EXIT(Text014);
              TestAnswer.Status::Warning : EXIT(Text015);
            END;
          END;
        "Line Type"::Status :
          BEGIN
            CASE TestInstance.Status OF
              TestInstance.Status::"Not Answered" : EXIT(Text012);
              TestInstance.Status::Passed : EXIT(Text013);
              TestInstance.Status::Failed : EXIT(Text014);
            END;
          END;
        "Line Type"::Closed :
          BEGIN
            IF TestInstance.Closed THEN EXIT(Text013) ELSE EXIT(Text014);
          END;
      END;
    END;

    PROCEDURE CellDrillDown@1000000016(ColumnNo@1000000001 : Integer) : Text;
    VAR
      TestInstance@1000000005 : Record 9062858;
      TestAnswer@1000000004 : Record 9062859;
      QCTest@1000000002 : Record 9062856;
      TestInstanceList@1000000000 : Page 9086490;
      lRecord@1000000003 : RecordRef;
      TestInstanceCard@1000000006 : Page 9086487;
      TestAnswerList@1000000007 : Page 9086497;
      TestAnswerLine@1000000008 : Record 9062860;
    BEGIN
      IF ColumnNo > NoColumns THEN EXIT('');

      lRecord := ColumnRecord[ColumnNo];

      CASE "Line Type" OF
        "Line Type"::Question :
          BEGIN
            IF GetCellWarning(ColumnNo,TRUE) THEN BEGIN
              IF GetTestInstance(ColumnNo,FALSE,TestInstance) = 0 THEN
                EXIT;
              TestInstanceCard.SETRECORD(TestInstance);
              TestInstanceCard.RUN;
              EXIT;
            END;


            IF GetTestInstance(ColumnNo,FALSE,TestInstance) = 0 THEN
              EXIT;
            TestAnswerLine.SETRANGE("Test Code",TestInstance."Test Code");
            TestAnswerLine.SETRANGE("Instance No.",TestInstance."Instance No.");
            TestAnswerLine.SETRANGE("Line No.","Line No.");
            TestAnswerList.SETTABLEVIEW(TestAnswerLine);
            TestAnswerList.RUNMODAL;
            CurrPage.UPDATE;
          END;
        "Line Type"::ViewClosedlTests :
          BEGIN
            TestInstance.SETRANGE("Test Code","Test Code");
            TestInstance.SETRANGE(Closed,TRUE);
            TestInstance.SETFILTER("Related Rec. PK 1",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,1));
            TestInstance.SETFILTER("Related Rec. PK 2",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,2));
            TestInstance.SETFILTER("Related Rec. PK 3",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,3));
            TestInstance.SETFILTER("Related Rec. PK 4",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,4));
            TestInstance.SETFILTER("Related Rec. PK 5",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,5));

            TestInstanceList.SETTABLEVIEW(TestInstance);
            TestInstanceList.RUN;
          END;
        "Line Type"::DateTimeCreated, "Line Type"::Status :
          BEGIN
            IF GetTestInstance(ColumnNo,FALSE,TestInstance) = 0 THEN
              EXIT;
            TestInstanceCard.SETRECORD(TestInstance);
            TestInstanceCard.RUN;

          END;

        "Line Type"::Closed :
          BEGIN
            IF GetTestInstance(ColumnNo,FALSE,TestInstance) = 0 THEN
              EXIT;

            IF CONFIRM(Text016) THEN BEGIN
              TestInstance.CarryOutResultActions;
              TestInstance.MODIFY(TRUE);

              LoadColumns(CurrTestCode,ColumnOffset);
            END;
          END;
      END;
    END;

    PROCEDURE GetDescription_Style@1000000011() : Text;
    VAR
      TestLine@1000000000 : Record 9062857;
    BEGIN
      CASE "Line Type" OF
        "Line Type"::Question :
          BEGIN
            TestLine.GET("Test Code","Line No.");
            IF TestLine."No. Answers Required" > 1 THEN
              EXIT(Text011)
            ELSE
              EXIT(Text012);
          END;
        "Line Type"::Status, "Line Type"::Closed, "Line Type"::DateTimeCreated : EXIT(Text017);
      END;
    END;

    LOCAL PROCEDURE GetCellWarning@1000000023(ColumnNo@1000000000 : Integer;MessageDialog@1000000003 : Boolean) : Boolean;
    VAR
      TestAnswer@1000000001 : Record 9062859;
      TestInstance@1000000002 : Record 9062858;
    BEGIN
      IF GetTestInstance(ColumnNo,FALSE,TestInstance) = 0 THEN EXIT;

      CASE "Line Type" OF
        "Line Type"::Question :
          BEGIN
            IF NOT TestAnswer.GET(TestInstance."Test Code",TestInstance."Instance No.","Line No.") THEN BEGIN
              IF MessageDialog THEN
                MESSAGE(Text018);
              EXIT(TRUE);
            END;

            IF NOT TestAnswer.IsSameAsCurrentVersion THEN BEGIN
              IF MessageDialog THEN
                MESSAGE(Text019);
              EXIT(TRUE);
            END;
          END;
      END;
    END;

    PROCEDURE RegisterTests@1000000008(VisibleOnly@1000000003 : Boolean);
    VAR
      i@1000000000 : Integer;
      TestInstance@1000000001 : Record 9062858;
      lRecord@1000000002 : RecordRef;
      QCTest@1000000004 : Record 9062856;
      CriteriaMgmt@1000000005 : Codeunit 9062462;
    BEGIN
      QCTest.GET(CurrTestCode);

      IF NOT VisibleOnly THEN BEGIN
        Records.OPEN(QCTest."Related Table No.");
        IF RecordView = '' THEN
          CriteriaMgmt.ApplyCriteriaToRecRef(QCTest."Record Criteria ID",Records)
        ELSE
          Records.SETVIEW(RecordView);

        IF Records.FINDSET THEN BEGIN
          REPEAT
            lRecord.OPEN(Records.NUMBER);
            lRecord.SETPOSITION(Records.GETPOSITION);
            lRecord.SETRECFILTER;
            IF lRecord.FINDFIRST THEN BEGIN
              REPEAT
                TestInstance.SETRANGE("Test Code",QCTest.Code);
                TestInstance.SETRANGE(Closed,FALSE);
                TestInstance.SETFILTER(Status,'<>%1',TestInstance.Status::"Not Answered");
                TestInstance.SETFILTER("Related Rec. PK 1",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,1));
                TestInstance.SETFILTER("Related Rec. PK 2",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,2));
                TestInstance.SETFILTER("Related Rec. PK 3",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,3));
                TestInstance.SETFILTER("Related Rec. PK 4",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,4));
                TestInstance.SETFILTER("Related Rec. PK 5",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,5));

                IF TestInstance.FINDFIRST THEN BEGIN
                  REPEAT
                    TestInstance.CarryOutResultActions;
                    TestInstance.MODIFY(TRUE);
                  UNTIL TestInstance.NEXT = 0;
                END;
              UNTIL lRecord.NEXT = 0;
            END;
            lRecord.CLOSE;
          UNTIL Records.NEXT = 0;
        END;
        Records.CLOSE;
      END ELSE BEGIN
        i := 0;
        REPEAT
          i += 1;
          lRecord := ColumnRecord[i];

          TestInstance.SETRANGE("Test Code","Test Code");
          TestInstance.SETRANGE(Closed,FALSE);
          TestInstance.SETFILTER(Status,'<>%1',TestInstance.Status::"Not Answered");
          TestInstance.SETFILTER("Related Rec. PK 1",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,1));
          TestInstance.SETFILTER("Related Rec. PK 2",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,2));
          TestInstance.SETFILTER("Related Rec. PK 3",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,3));
          TestInstance.SETFILTER("Related Rec. PK 4",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,4));
          TestInstance.SETFILTER("Related Rec. PK 5",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,5));

          IF TestInstance.FINDFIRST THEN BEGIN
            REPEAT
              TestInstance.CarryOutResultActions;
              TestInstance.MODIFY(TRUE);
            UNTIL TestInstance.NEXT = 0;
          END;

        UNTIL i = NoColumns;
      END;

      LoadColumns(QCTest.Code,ColumnOffset);
    END;

    PROCEDURE IsEditable@1000000009() : Boolean;
    BEGIN
      CASE "Line Type" OF
        "Line Type"::Question : EXIT(TRUE);
        "Line Type"::Status : EXIT(FALSE);
        "Line Type"::Closed : EXIT(FALSE);
      END;
    END;

    PROCEDURE CreateTestInstance_ForColumn@1000000013(ColumnNo@1000000000 : Integer);
    VAR
      TestInstance@1000000003 : Record 9062858;
      QCTest@1000000001 : Record 9062856;
      lRecord@1000000004 : RecordRef;
    BEGIN
      lRecord := ColumnRecord[ColumnNo];

      CreateTestInstance(lRecord);
    END;

    PROCEDURE CreateTestInstance@1000000018(VAR pRecord@1000000002 : RecordRef);
    VAR
      TestInstance@1000000003 : Record 9062858;
      QCTest@1000000001 : Record 9062856;
    BEGIN
      TestInstance.SETRANGE("Test Code","Test Code");
      TestInstance.SETRANGE(Closed,ShowClosed);
      TestInstance.SETFILTER("Related Rec. PK 1",TNPUtils.GetPrimaryKey(pRecord.NUMBER,pRecord.GETPOSITION,1));
      TestInstance.SETFILTER("Related Rec. PK 2",TNPUtils.GetPrimaryKey(pRecord.NUMBER,pRecord.GETPOSITION,2));
      TestInstance.SETFILTER("Related Rec. PK 3",TNPUtils.GetPrimaryKey(pRecord.NUMBER,pRecord.GETPOSITION,3));
      TestInstance.SETFILTER("Related Rec. PK 4",TNPUtils.GetPrimaryKey(pRecord.NUMBER,pRecord.GETPOSITION,4));
      TestInstance.SETFILTER("Related Rec. PK 5",TNPUtils.GetPrimaryKey(pRecord.NUMBER,pRecord.GETPOSITION,5));
      IF NOT TestInstance.FINDFIRST THEN BEGIN
        QCTest.GET("Test Code");
        QCTest.CreateInstance(TestInstance,pRecord.GETPOSITION);
      END;
    END;

    PROCEDURE GetTestInstance@1000000012(ColumnNo@1000000001 : Integer;InsertIfMissing@1000000002 : Boolean;VAR TestInstance@1000000005 : Record 9062858) InstanceNo : Integer;
    VAR
      lRecord@1000000000 : RecordRef;
      QCTest@1000000004 : Record 9062856;
    BEGIN
      IF ColumnNo > NoColumns THEN EXIT(0);

      lRecord := ColumnRecord[ColumnNo];

      TestInstance.SETRANGE("Test Code","Test Code");
      TestInstance.SETRANGE(Closed,ShowClosed);
      TestInstance.SETFILTER("Related Rec. PK 1",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,1));
      TestInstance.SETFILTER("Related Rec. PK 2",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,2));
      TestInstance.SETFILTER("Related Rec. PK 3",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,3));
      TestInstance.SETFILTER("Related Rec. PK 4",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,4));
      TestInstance.SETFILTER("Related Rec. PK 5",TNPUtils.GetPrimaryKey(lRecord.NUMBER,lRecord.GETPOSITION,5));

      IF NOT TestInstance.FINDFIRST THEN BEGIN
        IF NOT InsertIfMissing OR ShowClosed THEN EXIT;
        QCTest.GET("Test Code");
        QCTest.CreateInstance(TestInstance,lRecord.GETPOSITION);
      END;

      EXIT(TestInstance."Instance No.");
    END;

    PROCEDURE PresetPage@1000000014(pTestCode@1000000000 : Code[20];pRecordsView@1000000001 : Text;pShowClosed@1000000002 : Boolean;pShowOnlyExistingTests@1000000003 : Boolean);
    BEGIN
      QCTestCode := pTestCode;
      RecordView := pRecordsView;
      ShowClosed := pShowClosed;
      ShowOnlyExistingTests := pShowOnlyExistingTests;
    END;

    LOCAL PROCEDURE ChangeColumnOffset@1000000036(ChangeBy@1000000000 : Integer);
    BEGIN
      IF ChangeBy > NoColumns THEN
        EXIT;

      ColumnOffset += ChangeBy;
      IF ColumnOffset < 0 THEN
        ColumnOffset := 0;

      LoadColumns(CurrTestCode,ColumnOffset);
    END;

    BEGIN
    {
      //DOC NH2016.15 PC 05/07/2016 - Created
    }
    END.
  }
}

