OBJECT Codeunit 225 Gen. Jnl.-Apply
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    TableNo=81;
    OnRun=BEGIN
            GenJnlLine.COPY(Rec);

            WITH GenJnlLine DO BEGIN
              GetCurrency;
              IF "Bal. Account Type" IN
                 ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]
              THEN BEGIN
                AccType := "Bal. Account Type";
                AccNo := "Bal. Account No.";
              END ELSE BEGIN
                AccType := "Account Type";
                AccNo := "Account No.";
              END;
              CASE AccType OF
                AccType::Customer:
                  BEGIN
                    CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
                    CustLedgEntry.SETRANGE("Customer No.",AccNo);
                    CustLedgEntry.SETRANGE(Open,TRUE);
                    IF "Applies-to ID" = '' THEN
                      "Applies-to ID" := "Document No.";
                    IF "Applies-to ID" = '' THEN
                      ERROR(
                        Text000,
                        FIELDCAPTION("Document No."),FIELDCAPTION("Applies-to ID"));
                    ApplyCustEntries.SetGenJnlLine(GenJnlLine,FIELDNO("Applies-to ID"));
                    ApplyCustEntries.SETRECORD(CustLedgEntry);
                    ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
                    ApplyCustEntries.LOOKUPMODE(TRUE);
                    OK := ApplyCustEntries.RUNMODAL = ACTION::LookupOK;
                    CLEAR(ApplyCustEntries);
                    IF NOT OK THEN
                      EXIT;
                    CustLedgEntry.RESET;
                    CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
                    CustLedgEntry.SETRANGE("Customer No.",AccNo);
                    CustLedgEntry.SETRANGE(Open,TRUE);
                    CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
                    IF CustLedgEntry.FIND('-') THEN BEGIN
                      CurrencyCode2 := CustLedgEntry."Currency Code";
                      IF Amount = 0 THEN BEGIN
                        REPEAT
                          PaymentToleranceMgt.DelPmtTolApllnDocNo(GenJnlLine,CustLedgEntry."Document No.");
                          CheckAgainstApplnCurrency(CurrencyCode2,CustLedgEntry."Currency Code",AccType::Customer,TRUE);
                          CustLedgEntry.CALCFIELDS("Remaining Amount");
                          CustLedgEntry."Remaining Amount" :=
                            CurrExchRate.ExchangeAmount(
                              CustLedgEntry."Remaining Amount",
                              CustLedgEntry."Currency Code","Currency Code","Posting Date");
                          CustLedgEntry."Remaining Amount" :=
                            ROUND(CustLedgEntry."Remaining Amount",Currency."Amount Rounding Precision");
                          CustLedgEntry."Remaining Pmt. Disc. Possible" :=
                            CurrExchRate.ExchangeAmount(
                              CustLedgEntry."Remaining Pmt. Disc. Possible",
                              CustLedgEntry."Currency Code","Currency Code","Posting Date");
                          CustLedgEntry."Remaining Pmt. Disc. Possible" :=
                            ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible",Currency."Amount Rounding Precision");
                          CustLedgEntry."Amount to Apply" :=
                            CurrExchRate.ExchangeAmount(
                              CustLedgEntry."Amount to Apply",
                              CustLedgEntry."Currency Code","Currency Code","Posting Date");
                          CustLedgEntry."Amount to Apply" :=
                            ROUND(CustLedgEntry."Amount to Apply",Currency."Amount Rounding Precision");

                          IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(Rec,CustLedgEntry,0,FALSE) AND
                             (ABS(CustLedgEntry."Amount to Apply") >=
                              ABS(CustLedgEntry."Remaining Amount" - CustLedgEntry."Remaining Pmt. Disc. Possible"))
                          THEN
                            Amount := Amount - (CustLedgEntry."Amount to Apply" - CustLedgEntry."Remaining Pmt. Disc. Possible")
                          ELSE
                            Amount := Amount - CustLedgEntry."Amount to Apply";
                        UNTIL CustLedgEntry.NEXT = 0;
                        IF ("Bal. Account Type" = "Bal. Account Type"::Customer) OR
                           ("Bal. Account Type" = "Bal. Account Type"::Vendor)
                        THEN
                          Amount := -Amount;
                        VALIDATE(Amount);
                      END ELSE
                        REPEAT
                          CheckAgainstApplnCurrency(CurrencyCode2,CustLedgEntry."Currency Code",AccType::Customer,TRUE);
                        UNTIL CustLedgEntry.NEXT = 0;
                      IF "Currency Code" <> CurrencyCode2 THEN
                        IF Amount = 0 THEN BEGIN
                          IF NOT
                             CONFIRM(
                               Text001 +
                               Text002,TRUE,
                               FIELDCAPTION("Currency Code"),TABLECAPTION,"Currency Code",
                               CustLedgEntry."Currency Code")
                          THEN
                            ERROR(Text003);
                          "Currency Code" := CustLedgEntry."Currency Code"
                        END ELSE
                          CheckAgainstApplnCurrency("Currency Code",CustLedgEntry."Currency Code",AccType::Customer,TRUE);
                      "Applies-to Doc. Type" := 0;
                      "Applies-to Doc. No." := '';
                    END ELSE
                      "Applies-to ID" := '';
                    MODIFY;
                    // Check Payment Tolerance
                    IF  Rec.Amount <> 0 THEN
                      IF NOT PaymentToleranceMgt.PmtTolGenJnl(GenJnlLine) THEN
                        EXIT;
                  END;
                AccType::Vendor:
                  BEGIN
                    VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
                    VendLedgEntry.SETRANGE("Vendor No.",AccNo);
                    VendLedgEntry.SETRANGE(Open,TRUE);
                    IF "Applies-to ID" = '' THEN
                      "Applies-to ID" := "Document No.";
                    IF "Applies-to ID" = '' THEN
                      ERROR(
                        Text000,
                        FIELDCAPTION("Document No."),FIELDCAPTION("Applies-to ID"));
                    ApplyVendEntries.SetGenJnlLine(GenJnlLine,FIELDNO("Applies-to ID"));
                    ApplyVendEntries.SETRECORD(VendLedgEntry);
                    ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
                    ApplyVendEntries.LOOKUPMODE(TRUE);
                    OK := ApplyVendEntries.RUNMODAL = ACTION::LookupOK;
                    CLEAR(ApplyVendEntries);
                    IF NOT OK THEN
                      EXIT;
                    VendLedgEntry.RESET;
                    VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
                    VendLedgEntry.SETRANGE("Vendor No.",AccNo);
                    VendLedgEntry.SETRANGE(Open,TRUE);
                    VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
                    IF VendLedgEntry.FIND('-') THEN BEGIN
                      CurrencyCode2 := VendLedgEntry."Currency Code";
                      IF Amount = 0 THEN BEGIN
                        REPEAT
                          PaymentToleranceMgt.DelPmtTolApllnDocNo(GenJnlLine,VendLedgEntry."Document No.");
                          CheckAgainstApplnCurrency(CurrencyCode2,VendLedgEntry."Currency Code",AccType::Vendor,TRUE);
                          VendLedgEntry.CALCFIELDS("Remaining Amount");
                          VendLedgEntry."Remaining Amount" :=
                            CurrExchRate.ExchangeAmount(
                              VendLedgEntry."Remaining Amount",
                              VendLedgEntry."Currency Code","Currency Code","Posting Date");
                          VendLedgEntry."Remaining Amount" :=
                            ROUND(VendLedgEntry."Remaining Amount",Currency."Amount Rounding Precision");
                          VendLedgEntry."Remaining Pmt. Disc. Possible" :=
                            CurrExchRate.ExchangeAmount(
                              VendLedgEntry."Remaining Pmt. Disc. Possible",
                              VendLedgEntry."Currency Code","Currency Code","Posting Date");
                          VendLedgEntry."Remaining Pmt. Disc. Possible" :=
                            ROUND(VendLedgEntry."Remaining Pmt. Disc. Possible",Currency."Amount Rounding Precision");
                          VendLedgEntry."Amount to Apply" :=
                            CurrExchRate.ExchangeAmount(
                              VendLedgEntry."Amount to Apply",
                              VendLedgEntry."Currency Code","Currency Code","Posting Date");
                          VendLedgEntry."Amount to Apply" :=
                            ROUND(VendLedgEntry."Amount to Apply",Currency."Amount Rounding Precision");

                          IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(Rec,VendLedgEntry,0,FALSE) AND
                             (ABS(VendLedgEntry."Amount to Apply") >=
                              ABS(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible"))
                          THEN
                            Amount := Amount - (VendLedgEntry."Amount to Apply" - VendLedgEntry."Remaining Pmt. Disc. Possible")
                          ELSE
                            Amount := Amount - VendLedgEntry."Amount to Apply";

                        UNTIL VendLedgEntry.NEXT = 0;
                        IF ("Bal. Account Type" = "Bal. Account Type"::Customer) OR
                           ("Bal. Account Type" = "Bal. Account Type"::Vendor)
                        THEN
                          Amount := -Amount;
                        VALIDATE(Amount);
                      END ELSE
                        REPEAT
                          CheckAgainstApplnCurrency(CurrencyCode2,VendLedgEntry."Currency Code",AccType::Vendor,TRUE);
                        UNTIL VendLedgEntry.NEXT = 0;
                      IF "Currency Code" <> CurrencyCode2 THEN
                        IF Amount = 0 THEN BEGIN
                          IF NOT
                             CONFIRM(
                               Text001 +
                               Text002,TRUE,
                               FIELDCAPTION("Currency Code"),TABLECAPTION,"Currency Code",
                               VendLedgEntry."Currency Code")
                          THEN
                            ERROR(Text003);
                          "Currency Code" := VendLedgEntry."Currency Code"
                        END ELSE
                          CheckAgainstApplnCurrency("Currency Code",VendLedgEntry."Currency Code",AccType::Vendor,TRUE);
                      "Applies-to Doc. Type" := 0;
                      "Applies-to Doc. No." := '';
                    END ELSE
                      "Applies-to ID" := '';
                    MODIFY;
                    // Check Payment Tolerance
                    IF  Rec.Amount <> 0 THEN
                      IF NOT PaymentToleranceMgt.PmtTolGenJnl(GenJnlLine) THEN
                        EXIT;
                  END;
                ELSE
                  ERROR(
                    Text005,
                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
              END;
            END;

            Rec := GenJnlLine;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You must specify %1 or %2.;ENG=You must specify %1 or %2.';
      Text001@1001 : TextConst 'ENU=The %1 in the %2 will be changed from %3 to %4.\;ENG=The %1 in the %2 will be changed from %3 to %4.\';
      Text002@1002 : TextConst 'ENU=Do you wish to continue?;ENG=Do you wish to continue?';
      Text003@1003 : TextConst 'ENU=The update has been interrupted to respect the warning.;ENG=The update has been interrupted to respect the warning.';
      Text005@1004 : TextConst 'ENU=The %1 or %2 must be Customer or Vendor.;ENG=The %1 or %2 must be Customer or Vendor.';
      Text006@1005 : TextConst 'ENU=All entries in one application must be in the same currency.;ENG=All entries in one application must be in the same currency.';
      Text007@1006 : TextConst 'ENU="All entries in one application must be in the same currency or one or more of the EMU currencies. ";ENG="All entries in one application must be in the same currency or one or more of the EMU currencies. "';
      GenJnlLine@1008 : Record 81;
      CustLedgEntry@1009 : Record 21;
      VendLedgEntry@1010 : Record 25;
      GLSetup@1011 : Record 98;
      Currency@1012 : Record 4;
      CurrExchRate@1020 : Record 330;
      PaymentToleranceMgt@1007 : Codeunit 426;
      ApplyCustEntries@1013 : Page 232;
      ApplyVendEntries@1014 : Page 233;
      AccNo@1016 : Code[20];
      CurrencyCode2@1017 : Code[10];
      OK@1018 : Boolean;
      AccType@1019 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';

    PROCEDURE CheckAgainstApplnCurrency@1(ApplnCurrencyCode@1000 : Code[10];CompareCurrencyCode@1001 : Code[10];AccType@1002 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';Message@1003 : Boolean) : Boolean;
    VAR
      Currency@1004 : Record 4;
      Currency2@1005 : Record 4;
      SalesSetup@1006 : Record 311;
      PurchSetup@1007 : Record 312;
      CurrencyAppln@1009 : 'No,EMU,All';
    BEGIN
      IF ApplnCurrencyCode = CompareCurrencyCode THEN
        EXIT(TRUE);

      CASE AccType OF
        AccType::Customer:
          BEGIN
            SalesSetup.GET;
            CurrencyAppln := SalesSetup."Appln. between Currencies";
            CASE CurrencyAppln OF
              CurrencyAppln::No:
                BEGIN
                  IF ApplnCurrencyCode <> CompareCurrencyCode THEN
                    IF Message THEN
                      ERROR(Text006)
                    ELSE
                      EXIT(FALSE);
                END;
              CurrencyAppln::EMU:
                BEGIN
                  GLSetup.GET;
                  IF NOT Currency.GET(ApplnCurrencyCode) THEN
                    Currency."EMU Currency" := GLSetup."EMU Currency";
                  IF NOT Currency2.GET(CompareCurrencyCode) THEN
                    Currency2."EMU Currency" := GLSetup."EMU Currency";
                  IF NOT Currency."EMU Currency" OR NOT Currency2."EMU Currency" THEN
                    IF Message THEN
                      ERROR(Text007)
                    ELSE
                      EXIT(FALSE);
                END;
            END;
          END;
        AccType::Vendor:
          BEGIN
            PurchSetup.GET;
            CurrencyAppln := PurchSetup."Appln. between Currencies";
            CASE CurrencyAppln OF
              CurrencyAppln::No:
                BEGIN
                  IF ApplnCurrencyCode <> CompareCurrencyCode THEN
                    IF Message THEN
                      ERROR(Text006)
                    ELSE
                      EXIT(FALSE);
                END;
              CurrencyAppln::EMU:
                BEGIN
                  GLSetup.GET;
                  IF NOT Currency.GET(ApplnCurrencyCode) THEN
                    Currency."EMU Currency" := GLSetup."EMU Currency";
                  IF NOT Currency2.GET(CompareCurrencyCode) THEN
                    Currency2."EMU Currency" := GLSetup."EMU Currency";
                  IF NOT Currency."EMU Currency" OR NOT Currency2."EMU Currency" THEN
                    IF Message THEN
                      ERROR(Text007)
                    ELSE
                      EXIT(FALSE);
                END;
            END;
          END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetCurrency@2();
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
      END;
    END;

    BEGIN
    END.
  }
}

