OBJECT Table 7317 Warehouse Receipt Line
{
  OBJECT-PROPERTIES
  {
    Date=10/05/18;
    Time=[ 2:09:12 PM];
    Modified=Yes;
    Version List=NAVW19.00.00.45480,NS2016.16,OP9031,IN43121;
  }
  PROPERTIES
  {
    OnDelete=VAR
               WhseRcptHeader@1000 : Record 7316;
               OrderStatus@1001 : Option;
             BEGIN
               IF (Quantity <> "Qty. Outstanding") AND ("Qty. Outstanding" <> 0) THEN
                 IF NOT CONFIRM(Text004,FALSE,TABLECAPTION,"Line No.") THEN
                   ERROR(Text003);

               WhseRcptHeader.GET("No.");
               OrderStatus := WhseRcptHeader.GetHeaderStatus("Line No.");
               IF OrderStatus <> WhseRcptHeader."Document Status" THEN BEGIN
                 WhseRcptHeader.VALIDATE("Document Status",OrderStatus);
                 WhseRcptHeader.MODIFY;
               END;
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Warehouse Receipt Line;
               ENG=Warehouse Receipt Line];
    LookupPageID=Page7342;
    DrillDownPageID=Page7342;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ENG=No.];
                                                   Editable=No }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.];
                                                   Editable=No }
    { 3   ;   ;Source Type         ;Integer       ;CaptionML=[ENU=Source Type;
                                                              ENG=Source Type];
                                                   Editable=No }
    { 4   ;   ;Source Subtype      ;Option        ;CaptionML=[ENU=Source Subtype;
                                                              ENG=Source Subtype];
                                                   OptionCaptionML=[ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                                    ENG=0,1,2,3,4,5,6,7,8,9,10];
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10;
                                                   Editable=No }
    { 6   ;   ;Source No.          ;Code20        ;CaptionML=[ENU=Source No.;
                                                              ENG=Source No.];
                                                   Editable=No }
    { 7   ;   ;Source Line No.     ;Integer       ;CaptionML=[ENU=Source Line No.;
                                                              ENG=Source Line No.];
                                                   Editable=No }
    { 9   ;   ;Source Document     ;Option        ;CaptionML=[ENU=Source Document;
                                                              ENG=Source Document];
                                                   OptionCaptionML=[ENU=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer;
                                                                    ENG=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer];
                                                   OptionString=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer;
                                                   Editable=No }
    { 10  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code];
                                                   Editable=No }
    { 11  ;   ;Shelf No.           ;Code10        ;CaptionML=[ENU=Shelf No.;
                                                              ENG=Shelf No.] }
    { 12  ;   ;Bin Code            ;Code20        ;TableRelation=IF (Zone Code=FILTER('')) Bin.Code WHERE (Location Code=FIELD(Location Code))
                                                                 ELSE IF (Zone Code=FILTER(<>'')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                  Zone Code=FIELD(Zone Code));
                                                   OnValidate=VAR
                                                                Bin@1000 : Record 7354;
                                                                WhseIntegrationMgt@1001 : Codeunit 7317;
                                                              BEGIN
                                                                IF xRec."Bin Code" <> "Bin Code" THEN
                                                                  IF "Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Warehouse Receipt Line",
                                                                      FIELDCAPTION("Bin Code"),
                                                                      "Location Code",
                                                                      "Bin Code",0);
                                                                    IF Location."Directed Put-away and Pick" THEN BEGIN
                                                                      Bin.GET("Location Code","Bin Code");
                                                                      "Zone Code" := Bin."Zone Code";
                                                                      CheckBin(FALSE);
                                                                    END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ENG=Bin Code] }
    { 13  ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF xRec."Zone Code" <> "Zone Code" THEN BEGIN
                                                                  IF "Zone Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  END;
                                                                  "Bin Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Zone Code;
                                                              ENG=Zone Code] }
    { 14  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              ENG=Item No.];
                                                   Editable=No }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                InitOutstandingQtys;
                                                                "Qty. (Base)" := CalcBaseQty(Quantity);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENG=Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 16  ;   ;Qty. (Base)         ;Decimal       ;CaptionML=[ENU=Qty. (Base);
                                                              ENG=Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 19  ;   ;Qty. Outstanding    ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Outstanding (Base)" := CalcBaseQty("Qty. Outstanding");
                                                                VALIDATE("Qty. to Receive","Qty. Outstanding");
                                                              END;

                                                   CaptionML=[ENU=Qty. Outstanding;
                                                              ENG=Qty. Outstanding];
                                                   DecimalPlaces=0:5 }
    { 20  ;   ;Qty. Outstanding (Base);Decimal    ;CaptionML=[ENU=Qty. Outstanding (Base);
                                                              ENG=Qty. Outstanding (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 21  ;   ;Qty. to Receive     ;Decimal       ;OnValidate=VAR
                                                                WMSMgt@1000 : Codeunit 7302;
                                                              BEGIN
                                                                IF "Qty. to Receive" > "Qty. Outstanding" THEN
                                                                  ERROR(
                                                                    Text002,
                                                                    "Qty. Outstanding");

                                                                GetLocation("Location Code");
                                                                IF Location."Directed Put-away and Pick" THEN BEGIN
                                                                  WMSMgt.CalcCubageAndWeight(
                                                                    "Item No.","Unit of Measure Code","Qty. to Receive",Cubage,Weight);

                                                                  IF (CurrFieldNo <> 0) AND ("Qty. to Receive" > 0) THEN
                                                                    CheckBin(TRUE);
                                                                END;

                                                                "Qty. to Cross-Dock" := 0;
                                                                "Qty. to Cross-Dock (Base)" := 0;
                                                                "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");

                                                                Item.CheckSerialNoQty("Item No.",FIELDCAPTION("Qty. to Receive (Base)"),"Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive;
                                                              ENG=Qty. to Receive];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 22  ;   ;Qty. to Receive (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Receive","Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive (Base);
                                                              ENG=Qty. to Receive (Base)];
                                                   DecimalPlaces=0:5 }
    { 23  ;   ;Qty. Received       ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Received (Base)" := CalcBaseQty("Qty. Received");
                                                              END;

                                                   CaptionML=[ENU=Qty. Received;
                                                              ENG=Qty. Received];
                                                   DecimalPlaces=0:5 }
    { 24  ;   ;Qty. Received (Base);Decimal       ;CaptionML=[ENU=Qty. Received (Base);
                                                              ENG=Qty. Received (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 29  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENG=Unit of Measure Code];
                                                   Editable=No }
    { 30  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENG=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 31  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ENG=Variant Code];
                                                   Editable=No }
    { 32  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description];
                                                   Editable=No }
    { 33  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENG=Description 2];
                                                   Editable=No }
    { 34  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=" ,Partially Received,Completely Received";
                                                                    ENG=" ,Partially Received,Completely Received"];
                                                   OptionString=[ ,Partially Received,Completely Received];
                                                   Editable=No }
    { 35  ;   ;Sorting Sequence No.;Integer       ;CaptionML=[ENU=Sorting Sequence No.;
                                                              ENG=Sorting Sequence No.];
                                                   Editable=No }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENG=Due Date] }
    { 37  ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              ENG=Starting Date] }
    { 38  ;   ;Cubage              ;Decimal       ;CaptionML=[ENU=Cubage;
                                                              ENG=Cubage];
                                                   DecimalPlaces=0:5 }
    { 39  ;   ;Weight              ;Decimal       ;CaptionML=[ENU=Weight;
                                                              ENG=Weight];
                                                   DecimalPlaces=0:5 }
    { 48  ;   ;Not upd. by Src. Doc. Post.;Boolean;CaptionML=[ENU=Not upd. by Src. Doc. Post.;
                                                              ENG=Not upd. by Src. Doc. Post.];
                                                   Editable=No }
    { 49  ;   ;Posting from Whse. Ref.;Integer    ;CaptionML=[ENU=Posting from Whse. Ref.;
                                                              ENG=Posting from Whse. Ref.];
                                                   Editable=No }
    { 50  ;   ;Qty. to Cross-Dock  ;Decimal       ;OnValidate=BEGIN
                                                                CrossDockMgt.GetUseCrossDock(UseCrossDock,"Location Code","Item No.");
                                                                IF NOT UseCrossDock THEN
                                                                  ERROR(Text006,Item.TABLECAPTION,Location.TABLECAPTION);
                                                                IF "Qty. to Cross-Dock" > "Qty. to Receive" THEN
                                                                  ERROR(
                                                                    Text005,
                                                                    "Qty. to Receive");

                                                                "Qty. to Cross-Dock (Base)" := CalcBaseQty("Qty. to Cross-Dock");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Cross-Dock;
                                                              ENG=Qty. to Cross-Dock];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 51  ;   ;Qty. to Cross-Dock (Base);Decimal  ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Cross-Dock","Qty. to Cross-Dock (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Cross-Dock (Base);
                                                              ENG=Qty. to Cross-Dock (Base)];
                                                   DecimalPlaces=0:5 }
    { 52  ;   ;Cross-Dock Zone Code;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code),
                                                                                  Cross-Dock Bin Zone=CONST(Yes));
                                                   CaptionML=[ENU=Cross-Dock Zone Code;
                                                              ENG=Cross-Dock Zone Code] }
    { 53  ;   ;Cross-Dock Bin Code ;Code20        ;TableRelation=IF (Cross-Dock Zone Code=FILTER('')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                      Cross-Dock Bin=CONST(Yes))
                                                                                                                      ELSE IF (Cross-Dock Zone Code=FILTER(<>'')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                  Zone Code=FIELD(Cross-Dock Zone Code),
                                                                                                                                                                                  Cross-Dock Bin=CONST(Yes));
                                                   CaptionML=[ENU=Cross-Dock Bin Code;
                                                              ENG=Cross-Dock Bin Code] }
    { 50010;  ;Airway Bill No.     ;Code50        ;CaptionML=[ENU=Airway Bill No.;
                                                              ENG=Airway Bill No.];
                                                   Description=OP9031 }
    { 50020;  ;Aggregate Qty       ;Decimal       ;Description=OP9031 }
    { 50021;  ;Vendor Style No.    ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Style."Vendor Style No." WHERE (No.=FIELD(Style No.)));
                                                   CaptionML=[ENU=Vendor Style No.;
                                                              ENG=Vendor Style No.];
                                                   Description=IN43121;
                                                   Editable=No }
    { 50022;  ;Style No.           ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item."Style No." WHERE (No.=FIELD(Item No.)));
                                                   CaptionML=[ENU=Style No.;
                                                              ENG=Style No.];
                                                   Description=IN43121;
                                                   Editable=No }
    { 50200;  ;Vendor Color Code   ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item."Vendor Colour Code" WHERE (No.=FIELD(Item No.)));
                                                   Editable=No }
    { 50210;  ;Direct Unit Cost    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item."Unit Cost" WHERE (No.=FIELD(Item No.)));
                                                   Editable=No }
    { 9087000;;Store Allocation Code;Code20       ;CaptionML=[ENU=Store Allocation Code;
                                                              ENG=Store Allocation Code];
                                                   Description=NS2015.6 }
    { 9087001;;Quantity Allocated  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Store Allocation Line".Quantity WHERE (Store Allocation Code=FIELD(Store Allocation Code),
                                                                                                           Item No.=FIELD(Item No.),
                                                                                                           Variant Code=FIELD(Variant Code)));
                                                   OnLookup=VAR
                                                              lAllocMgmnt@1000000000 : Codeunit 9087015;
                                                            BEGIN
                                                              ShowStoreAllocations();
                                                            END;

                                                   CaptionML=[ENU=Quantity Allocated;
                                                              ENG=Quantity Allocated];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=NS2015.1;
                                                   Editable=No }
    { 9087002;;Quality Inspection %;Decimal       ;OnValidate=VAR
                                                                lItemQualityInspectionMgt@1000000000 : Codeunit 9087014;
                                                              BEGIN
                                                                Rec."Quality Inspection Quantity" := lItemQualityInspectionMgt.InspectionPctToQty(Rec."Quality Inspection %", Rec.Quantity);
                                                                lItemQualityInspectionMgt.WhseRcptLineToQInspLine(Rec);
                                                                Rec.CALCFIELDS("Quality Inspection Finished", "Qty. of Items to Inspect");
                                                              END;

                                                   CaptionML=[ENU=Quality Inspection %;
                                                              ENG=Quality Inspection %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   BlankZero=Yes;
                                                   Description=NS2015.1 }
    { 9087003;;Quality Inspection Quantity;Decimal;OnValidate=VAR
                                                                lItemQualityInspectionMgt@1000000000 : Codeunit 9087014;
                                                              BEGIN
                                                                Rec."Quality Inspection %" := lItemQualityInspectionMgt.InspectionQtyToPct(Rec."Quality Inspection Quantity", Rec.Quantity, TRUE, Rec.FIELDCAPTION(Quantity));
                                                                lItemQualityInspectionMgt.WhseRcptLineToQInspLine(Rec);
                                                                Rec.CALCFIELDS("Quality Inspection Finished", "Qty. of Items to Inspect");
                                                              END;

                                                   CaptionML=[ENU=Quality Inspection Quantity;
                                                              ENG=Quality Inspection Quantity];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=NS2015.1 }
    { 9087004;;Quality Inspection Finished;Boolean;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Quality Inspection Line".Finished WHERE (Document Type=CONST(Warehouse Receipt),
                                                                                                                     Document No.=FIELD(No.),
                                                                                                                     Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Quality Inspection Finished;
                                                              ENG=Quality Inspection Finished];
                                                   Description=NS2015.1;
                                                   Editable=No }
    { 9087005;;Quality Inspection Failed;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Quality Inspection Line"."Inspection Failed" WHERE (Document Type=CONST(Warehouse Receipt),
                                                                                                                                Document No.=FIELD(No.),
                                                                                                                                Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Quality Inspection Failed;
                                                              ENG=Quality Inspection Failed];
                                                   Description=NS2015.1;
                                                   Editable=No }
    { 9087006;;Quality Inspection Required;Boolean;OnValidate=BEGIN
                                                                UpdateQualityInspection();
                                                              END;

                                                   CaptionML=[ENU=Quality Inspection Required;
                                                              ENG=Quality Inspection Required];
                                                   Description=NS2015.1 }
    { 9087007;;Qty. of Inspected Items;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Quality Inspection Line"."Qty. of Inspected Items" WHERE (Document Type=CONST(Warehouse Receipt),
                                                                                                                                      Document No.=FIELD(No.),
                                                                                                                                      Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. of Inspected Items;
                                                              ENG=Qty. of Inspected Items];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=NS2015.1;
                                                   Editable=No }
    { 9087008;;Qty. of Items to Inspect;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Quality Inspection Line"."Outstanding Quantity" WHERE (Document Type=CONST(Warehouse Receipt),
                                                                                                                                   Document No.=FIELD(No.),
                                                                                                                                   Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. of Items to Inspect;
                                                              ENG=Qty. of Items to Inspect];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Description=NS2015.1;
                                                   Editable=No }
    { 9087009;;Consignment No.     ;Code20        ;TableRelation="Consignment Header";
                                                   CaptionML=[ENU=Consignment No.;
                                                              ENG=Consignment No.];
                                                   Description=NS2015.1 }
    { 9087010;;Consignment Line No.;Integer       ;TableRelation="Consignment Line"."Line No." WHERE (Consignment No.=FIELD(Consignment No.));
                                                   CaptionML=[ENU=Consignment Line No.;
                                                              ENG=Consignment Line No.];
                                                   Description=NS2015.1 }
  }
  KEYS
  {
    {    ;No.,Line No.                            ;SumIndexFields=Qty. to Receive (Base);
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Source Type,Source Subtype,Source No.,Source Line No.;
                                                   SumIndexFields=Qty. Outstanding (Base);
                                                   MaintainSIFTIndex=No }
    {    ;No.,Source Type,Source Subtype,Source No.,Source Line No.;
                                                   MaintainSQLIndex=No }
    {    ;No.,Sorting Sequence No.                ;MaintainSQLIndex=No }
    {    ;No.,Shelf No.                           ;MaintainSQLIndex=No }
    {    ;No.,Item No.                            ;MaintainSQLIndex=No }
    {    ;No.,Source Document,Source No.          ;MaintainSQLIndex=No }
    {    ;No.,Due Date                            ;MaintainSQLIndex=No }
    {    ;No.,Bin Code                            ;MaintainSQLIndex=No }
    {    ;Item No.,Location Code,Variant Code     ;SumIndexFields=Qty. Outstanding (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Bin Code,Location Code                  ;SumIndexFields=Cubage,Weight;
                                                   MaintainSIFTIndex=No }
    {    ;Consignment No.,Consignment Line No.     }
    {    ;Store Allocation Code,Item No.           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1002 : Record 14;
      Item@1012 : Record 27;
      Bin@1009 : Record 7354;
      CrossDockMgt@1005 : Codeunit 5780;
      UseCrossDock@1006 : Boolean;
      Text001@1022 : TextConst 'ENU=You cannot rename a %1.;ENG=You cannot rename a %1.';
      Text002@1021 : TextConst 'ENU=You cannot handle more than the outstanding %1 units.;ENG=You cannot handle more than the outstanding %1 units.';
      Text003@1001 : TextConst 'ENU=Cancelled.;ENG=Cancelled.';
      Text004@1004 : TextConst 'ENU=%1 %2 is not completely received.\Do you really want to delete the %1?;ENG=%1 %2 is not completely received.\Do you really want to delete the %1?';
      Text005@1008 : TextConst 'ENU=You cannot Cross-Dock  more than the %1 units to be received.;ENG=You cannot Cross-Dock  more than the %1 units to be received.';
      Text006@1007 : TextConst 'ENU=Cross-Docking is disabled for this %1 and/or %2;ENG=Cross-Docking is disabled for this %1 and/or %2';
      IgnoreErrors@1003 : Boolean;
      ErrorOccured@1010 : Boolean;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE CalcQty@5(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE AutofillQtyToReceive@10(VAR WhseReceiptLine@1000 : Record 7317);
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            VALIDATE("Qty. to Receive","Qty. Outstanding");
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE DeleteQtyToReceive@11(VAR WhseReceiptLine@1000 : Record 7317);
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            VALIDATE("Qty. to Receive",0);
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetItem@15();
    BEGIN
      IF Item."No." <> "Item No." THEN
        Item.GET("Item No.");
    END;

    PROCEDURE GetLineStatus@1() : Integer;
    BEGIN
      IF "Qty. Outstanding" = 0 THEN
        Status := Status::"Completely Received"
      ELSE
        IF Quantity = "Qty. Outstanding" THEN
          Status := Status::" "
        ELSE
          Status := Status::"Partially Received";

      EXIT(Status);
    END;

    LOCAL PROCEDURE GetLocation@2(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@4(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      GetLocation(LocationCode);
      IF NOT Location."Bin Mandatory" THEN
        CLEAR(Bin)
      ELSE
        IF (Bin."Location Code" <> LocationCode) OR
           (Bin.Code <> BinCode)
        THEN
          Bin.GET(LocationCode,BinCode);
    END;

    LOCAL PROCEDURE CheckBin@3(CalledFromQtytoReceive@1002 : Boolean);
    VAR
      BinContent@1001 : Record 7302;
      DeductCubage@1006 : Decimal;
      DeductWeight@1005 : Decimal;
    BEGIN
      IF CalledFromQtytoReceive THEN BEGIN
        DeductCubage := xRec.Cubage;
        DeductWeight := xRec.Weight;
      END;

      IF BinContent.GET(
           "Location Code","Bin Code",
           "Item No.","Variant Code","Unit of Measure Code")
      THEN BEGIN
        IF NOT BinContent.CheckIncreaseBinContent(
             "Qty. to Receive",xRec."Qty. to Receive",
             DeductCubage,DeductWeight,Cubage,Weight,FALSE,IgnoreErrors)
        THEN
          ErrorOccured := TRUE;
      END ELSE BEGIN
        GetBin("Location Code","Bin Code");
        IF NOT Bin.CheckIncreaseBin(
             "Bin Code","Item No.","Qty. to Receive",
             DeductCubage,DeductWeight,Cubage,Weight,FALSE,IgnoreErrors)
        THEN
          ErrorOccured := TRUE;
      END;
      IF ErrorOccured THEN
        "Bin Code" := '';
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      PurchaseLine@1000 : Record 39;
      SalesLine@1001 : Record 37;
      TransferLine@1002 : Record 5741;
      ReservePurchLine@1003 : Codeunit 99000834;
      ReserveSalesLine@1004 : Codeunit 99000832;
      ReserveTransferLine@1005 : Codeunit 99000836;
      SecondSourceQtyArray@1007 : ARRAY [3] OF Decimal;
      Direction@1006 : 'Outbound,Inbound';
    BEGIN
      TESTFIELD("No.");
      TESTFIELD("Qty. (Base)");

      GetItem;
      Item.TESTFIELD("Item Tracking Code");

      SecondSourceQtyArray[1] := DATABASE::"Warehouse Receipt Line";
      SecondSourceQtyArray[2] := "Qty. to Receive (Base)";
      SecondSourceQtyArray[3] := 0;

      CASE "Source Type" OF
        DATABASE::"Purchase Line":
          BEGIN
            IF PurchaseLine.GET("Source Subtype","Source No.","Source Line No.") THEN
              ReservePurchLine.CallItemTracking2(PurchaseLine,SecondSourceQtyArray);
          END;
        DATABASE::"Sales Line":
          BEGIN
            IF SalesLine.GET("Source Subtype","Source No.","Source Line No.") THEN
              ReserveSalesLine.CallItemTracking2(SalesLine,SecondSourceQtyArray);
          END;
        DATABASE::"Transfer Line":
          BEGIN
            Direction := Direction::Inbound;
            IF TransferLine.GET("Source No.","Source Line No.") THEN
              ReserveTransferLine.CallItemTracking2(TransferLine,Direction,SecondSourceQtyArray);
          END
      END;
    END;

    PROCEDURE SetIgnoreErrors@6();
    BEGIN
      IgnoreErrors := TRUE;
    END;

    PROCEDURE HasErrorOccured@7() : Boolean;
    BEGIN
      EXIT(ErrorOccured);
    END;

    PROCEDURE InitOutstandingQtys@8();
    BEGIN
      VALIDATE("Qty. Outstanding",Quantity - "Qty. Received");
      "Qty. Outstanding (Base)" := "Qty. (Base)" - "Qty. Received (Base)";
    END;

    PROCEDURE GetWhseRcptLine@9(VAR WhseRcptLine@1000 : Record 7317;WhseRcptHeaderNo@1001 : Code[20];SourceType@1002 : Integer;SourceSubType@1003 : Option;SourceNo@1004 : Code[20];SourceLineNo@1005 : Integer);
    BEGIN
      WhseRcptLine.SETRANGE("No.",WhseRcptHeaderNo);
      WhseRcptLine.SETRANGE("Source Type",SourceType);
      WhseRcptLine.SETRANGE("Source Subtype",SourceSubType);
      WhseRcptLine.SETRANGE("Source No.",SourceNo);
      WhseRcptLine.SETRANGE("Source Line No.",SourceLineNo);
      WhseRcptLine.FINDFIRST;
    END;

    PROCEDURE "--- NS.F ---"@1000000002();
    BEGIN
    END;

    PROCEDURE DeleteQualityInspection@1000000001();
    VAR
      lItemQualityInspectionLine@1000000000 : Record 9087040;
    BEGIN
      //DOC NS2016.16 - Deleting quality inspection

      lItemQualityInspectionLine.RESET();
      lItemQualityInspectionLine.SETCURRENTKEY("Document Type", "Document No.", "Document Line No.");
      lItemQualityInspectionLine.SETRANGE("Document Type", lItemQualityInspectionLine."Document Type"::"Warehouse Receipt");
      lItemQualityInspectionLine.SETRANGE("Document No.", Rec."No.");
      lItemQualityInspectionLine.SETRANGE("Document Line No.", Rec."Line No.");
      lItemQualityInspectionLine.DELETEALL(TRUE);
    END;

    PROCEDURE UpdateQualityInspection@1000000000();
    VAR
      lCustomer@1000000005 : Record 18;
      lVendor@1000000004 : Record 23;
      lItem@1000000003 : Record 27;
      lPurchaseLine@1000000002 : Record 39;
      lSalesLine@1000000001 : Record 37;
      lQualityInspectionPercent@1000000000 : Decimal;
    BEGIN
      //DOC NS2016.16 - Updating quality inspection

      lQualityInspectionPercent := 0;
      IF (Rec."Quality Inspection Required") THEN
      BEGIN
        CASE (Rec."Source Type") OF
          DATABASE::"Purchase Line":
            IF (lPurchaseLine.GET(Rec."Source Subtype", Rec."Source No.",
                Rec."Source Line No.")) THEN
            BEGIN
              lVendor.GET(lPurchaseLine."Buy-from Vendor No.");
              lQualityInspectionPercent := lVendor."Quality Inspection %";
            END;
          DATABASE::"Sales Line":
            IF (lSalesLine.GET(Rec."Source Subtype", Rec."Source No.",
                Rec."Source Line No.")) THEN
            BEGIN
              lCustomer.GET(lSalesLine."Sell-to Customer No.");
              lQualityInspectionPercent := lCustomer."Quality Inspection %";
            END;
        END;
        IF (Rec."Item No." <> '') THEN
        BEGIN
          lItem.GET(Rec."Item No.");
          IF (lItem."Quality Inspection %" > lQualityInspectionPercent) THEN
            lQualityInspectionPercent := lItem."Quality Inspection %";
        END;
      END;
      Rec.VALIDATE("Quality Inspection %", lQualityInspectionPercent);
    END;

    PROCEDURE ShowStoreAllocations@1000000007();
    VAR
      lWarehouseReceiptLine@1000000001 : Record 7317;
      lStoreAllocationManagement@1000000000 : Codeunit 9087015;
    BEGIN
      //DOC NS2015.1 - Showing store allocations

      Rec.TESTFIELD("Item No.");

      IF (lStoreAllocationManagement.VerifyStoreAllocationCode(Rec."Store Allocation Code")) THEN
      BEGIN
        Rec.VALIDATE("Store Allocation Code");
        COMMIT;
      END;

      Rec.TESTFIELD("Store Allocation Code");

      lWarehouseReceiptLine.RESET();
      lWarehouseReceiptLine.SETRANGE("No.", Rec."No.");
      lWarehouseReceiptLine.SETRANGE("Item No.", Rec."Item No.");

      lStoreAllocationManagement.ShowStoreAllocationMatrix(Rec."Store Allocation Code", DATABASE::"Warehouse Receipt Line",
        lWarehouseReceiptLine.GETVIEW(FALSE), lWarehouseReceiptLine.FIELDNO("Item No."), lWarehouseReceiptLine.FIELDNO("Variant Code"),
        lWarehouseReceiptLine.FIELDNO(Description), lWarehouseReceiptLine.FIELDNO(Quantity), lWarehouseReceiptLine.FIELDNO("Quantity Allocated"), 0, FALSE);
    END;

    BEGIN
    {
      //DOC NS2015.1  SD 22/01/2014 - New fields added
      //DOC NS2015.1  AZ 24/01/2014 - Consignments fields and modifications
      //DOC NS2015.1  AZ 27/01/2014 - Quality Inspection
      //DOC NS2015.1  JH 03/02/2014 - New key: "Consignment No.,Consignment Line No.",
      //DOC NS2015.1  JH 03/02/2014 - New key: "Stock Allocation Code,Item No."
      //DOC NS2015.6  JH 09/04/2015 - "Stock Alocations" renamed to "Store Allocations"
      //DOC NS2016.16 JH 05/10/2016 - nSemble 2016
      //DOC OP9031 LF Added "Airway Bill No."
    }
    END.
  }
}

