OBJECT Report 1192 Suggest Res. Price Chg.(Price)
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Suggest Res. Price Chg.(Price);
               ENG=Suggest Res. Price Chg.(Price)];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  RoundingMethod.SETRANGE(Code,RoundingMethod.Code);
                  IF ToCurrency.Code <> '' THEN
                    ToCurrency.FIND;
                END;

  }
  DATASET
  {
    { 9832;    ;DataItem;                    ;
               DataItemTable=Table201;
               DataItemTableView=SORTING(Type,Code,Work Type Code,Currency Code);
               OnPreDataItem=BEGIN
                               Window.OPEN(
                                 Text001 +
                                 Text002 +
                                 Text003);
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1,Type);
                                  Window.UPDATE(2,Code);
                                  ResPriceChg.Type := Type;
                                  ResPriceChg.Code := Code;

                                  IF ToCurrency.Code = '' THEN BEGIN
                                    ResPriceChg."Currency Code" := "Currency Code";
                                    SETRANGE("Currency Code",'');
                                  END ELSE
                                    ResPriceChg."Currency Code" := ToCurrency.Code;

                                  IF ToWorkType.Code = '' THEN
                                    ResPriceChg."Work Type Code" := "Work Type Code"
                                  ELSE
                                    ResPriceChg."Work Type Code" := ToWorkType.Code;

                                  ResPriceChg."New Unit Price" := "Unit Price";

                                  IF ResPriceChg."Currency Code" <> "Currency Code" THEN BEGIN
                                    IF "Currency Code" <> '' THEN
                                      ResPriceChg."New Unit Price" :=
                                        CurrExchRate.ExchangeAmtFCYToLCY(
                                          WORKDATE,"Currency Code",ResPriceChg."New Unit Price",
                                          CurrExchRate.ExchangeRate(
                                            WORKDATE,"Currency Code"));
                                    IF ResPriceChg."Currency Code" <> '' THEN
                                      ResPriceChg."New Unit Price" :=
                                        CurrExchRate.ExchangeAmtLCYToFCY(
                                          WORKDATE,ResPriceChg."Currency Code",
                                          ResPriceChg."New Unit Price",
                                          CurrExchRate.ExchangeRate(
                                            WORKDATE,ResPriceChg."Currency Code"));
                                  END;

                                  IF ResPriceChg."Currency Code" = '' THEN
                                    Currency2.InitRoundingPrecision
                                  ELSE BEGIN
                                    Currency2.GET(ResPriceChg."Currency Code");
                                    Currency2.TESTFIELD("Unit-Amount Rounding Precision");
                                  END;

                                  ResPriceChg."New Unit Price" :=
                                    ROUND(ResPriceChg."New Unit Price",Currency2."Unit-Amount Rounding Precision");

                                  IF ResPriceChg."New Unit Price" > PriceLowerLimit THEN
                                    ResPriceChg."New Unit Price" := ResPriceChg."New Unit Price" * UnitPricefactor;

                                  IF RoundingMethod.Code <> '' THEN BEGIN
                                    RoundingMethod."Minimum Amount" := ResPriceChg."New Unit Price";
                                    IF RoundingMethod.FIND('=<') THEN BEGIN
                                      ResPriceChg."New Unit Price" := ResPriceChg."New Unit Price" + RoundingMethod."Amount Added Before";
                                      IF RoundingMethod.Precision > 0 THEN
                                        ResPriceChg."New Unit Price" :=
                                          ROUND(ResPriceChg."New Unit Price",
                                            RoundingMethod.Precision,COPYSTR('=><',RoundingMethod.Type + 1,1));
                                      ResPriceChg."New Unit Price" := ResPriceChg."New Unit Price" + RoundingMethod."Amount Added After";
                                    END;
                                  END;

                                  ResPrice.SETRANGE("Work Type Code",ResPriceChg."Work Type Code");
                                  ResPrice.SETRANGE(Code,ResPriceChg.Code);
                                  ResPrice.SETRANGE(Type,ResPriceChg.Type);
                                  ResPrice.SETRANGE("Currency Code",ResPriceChg."Currency Code");
                                  IF ResPrice.FINDLAST THEN BEGIN
                                    ResPriceChg."Current Unit Price" := ResPrice."Unit Price";
                                    PriceAlreadyExists := TRUE;
                                  END ELSE BEGIN
                                    ResPriceChg."Current Unit Price" := 0;
                                    PriceAlreadyExists := FALSE;
                                  END;
                                  IF PriceAlreadyExists OR CreateNewPrices THEN BEGIN
                                    ResPriceChg2 := ResPriceChg;
                                    IF ResPriceChg2.FIND('=') THEN
                                      ResPriceChg.MODIFY
                                    ELSE
                                      ResPriceChg.INSERT;
                                  END;
                                END;

               ReqFilterFields=Type,Code,Work Type Code,Currency Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF UnitPricefactor = 0 THEN BEGIN
                     UnitPricefactor := 1;
                     CreateNewPrices := TRUE;
                   END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 15  ;2   ;Group     ;
                  CaptionML=[ENU=Copy to Res. Price Change...;
                             ENG=Copy to Res. Price Change...] }

      { 7   ;3   ;Field     ;
                  CaptionML=[ENU=Currency Code;
                             ENG=Currency Code];
                  SourceExpr=ToCurrency.Code;
                  TableRelation=Currency }

      { 6   ;3   ;Field     ;
                  CaptionML=[ENU=Work Type;
                             ENG=Work Type];
                  SourceExpr=ToWorkType.Code;
                  TableRelation="Work Type" }

      { 16  ;2   ;Field     ;
                  CaptionML=[ENU=Only Prices Above;
                             ENG=Only Prices Above];
                  DecimalPlaces=2:5;
                  SourceExpr=PriceLowerLimit }

      { 13  ;2   ;Field     ;
                  CaptionML=[ENU=Adjustment Factor;
                             ENG=Adjustment Factor];
                  DecimalPlaces=0:5;
                  SourceExpr=UnitPricefactor;
                  MinValue=0 }

      { 9   ;2   ;Field     ;
                  CaptionML=[ENU=Rounding Method;
                             ENG=Rounding Method];
                  SourceExpr=RoundingMethod.Code;
                  TableRelation="Rounding Method" }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Create New Prices;
                             ENG=Create New Prices];
                  SourceExpr=CreateNewPrices }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=Processing resources...\\;ENG=Processing resources...\\';
      Text002@1002 : TextConst 'ENU=Type         #1##########\;ENG=Type         #1##########\';
      Text003@1003 : TextConst 'ENU=Code         #2##########\;ENG=Code         #2##########\';
      RoundingMethod@1008 : Record 42;
      ToCurrency@1007 : Record 4;
      CurrExchRate@1006 : Record 330;
      ToWorkType@1016 : Record 200;
      ResPriceChg@1015 : Record 335;
      ResPriceChg2@1014 : Record 335;
      Currency2@1013 : Record 4;
      ResPrice@1009 : Record 201;
      Window@1005 : Dialog;
      CreateNewPrices@1010 : Boolean;
      UnitPricefactor@1011 : Decimal;
      PriceLowerLimit@1012 : Decimal;
      PriceAlreadyExists@1019 : Boolean;

    PROCEDURE InitializeCopyToResPrice@3(CurrencyCode@1000 : Code[10];WorkTypeCode@1002 : Code[10]);
    BEGIN
      ToCurrency.Code := CurrencyCode;
      ToWorkType.Code := WorkTypeCode;
    END;

    PROCEDURE InitializeRequest@2(PriceLowerLimitFrom@1003 : Decimal;UnitPriceFactorFrom@1004 : Decimal;RoundingMethodCode@1005 : Code[10];CreateNewPricesFrom@1006 : Boolean);
    BEGIN
      PriceLowerLimit := PriceLowerLimitFrom;
      UnitPricefactor := UnitPriceFactorFrom;
      RoundingMethod.Code := RoundingMethodCode;
      CreateNewPrices := CreateNewPricesFrom;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

