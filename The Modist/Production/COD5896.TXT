OBJECT Codeunit 5896 Calc. Inventory Adjmt. - Order
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    Permissions=TableData 5896=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Item@1000 : Record 27;

    PROCEDURE Calculate@5(SourceInvtAdjmtEntryOrder@1000 : Record 5896;VAR InvtAdjmtBuf@1001 : Record 5895);
    VAR
      ActInvtAdjmtEntryOrder@1002 : Record 5896;
      OutputQty@1003 : Decimal;
    BEGIN
      IF NOT Item.GET(SourceInvtAdjmtEntryOrder."Item No.") THEN
        Item.INIT;

      OutputQty := CalcOutputQty(SourceInvtAdjmtEntryOrder,FALSE);
      CalcActualUsageCosts(SourceInvtAdjmtEntryOrder,OutputQty,ActInvtAdjmtEntryOrder);
      CalcActualVariances(SourceInvtAdjmtEntryOrder,OutputQty,ActInvtAdjmtEntryOrder);
      CalcOutputEntryCostAdjmts(SourceInvtAdjmtEntryOrder,OutputQty,ActInvtAdjmtEntryOrder,InvtAdjmtBuf);
    END;

    PROCEDURE CalcActualUsageCosts@2(SourceInvtAdjmtEntryOrder@1000 : Record 5896;OutputQty@1003 : Decimal;VAR InvtAdjmtEntryOrder@1001 : Record 5896);
    BEGIN
      InvtAdjmtEntryOrder := SourceInvtAdjmtEntryOrder;
      InvtAdjmtEntryOrder.RoundCosts(0);

      CalcActualMaterialCosts(InvtAdjmtEntryOrder);
      CalcActualCapacityCosts(InvtAdjmtEntryOrder);
      InvtAdjmtEntryOrder.RoundCosts(1);

      InvtAdjmtEntryOrder.CalcOvhdCost(OutputQty);
      InvtAdjmtEntryOrder.RoundCosts(1);

      InvtAdjmtEntryOrder.CalcDirectCostFromCostShares;
      InvtAdjmtEntryOrder.CalcIndirectCostFromCostShares;
      InvtAdjmtEntryOrder.CalcUnitCost;
    END;

    LOCAL PROCEDURE CalcActualVariances@7(SourceInvtAdjmtEntryOrder@1001 : Record 5896;OutputQty@1003 : Decimal;VAR VarianceInvtAdjmtEntryOrder@1000 : Record 5896);
    VAR
      StdCostInvtAdjmtEntryOrder@1002 : Record 5896;
    BEGIN
      StdCostInvtAdjmtEntryOrder := SourceInvtAdjmtEntryOrder;

      IF Item."Costing Method" = Item."Costing Method"::Standard THEN BEGIN
        CalcStandardCost(StdCostInvtAdjmtEntryOrder,OutputQty);
        VarianceInvtAdjmtEntryOrder.CalcDiff(StdCostInvtAdjmtEntryOrder,TRUE);
      END ELSE
        VarianceInvtAdjmtEntryOrder.CalcDiff(VarianceInvtAdjmtEntryOrder,TRUE);
    END;

    LOCAL PROCEDURE CalcOutputEntryCostAdjmts@88(SourceInvtAdjmtEntryOrder@1001 : Record 5896;OutputQty@1003 : Decimal;ActInvtAdjmtEntryOrder@1004 : Record 5896;VAR InvtAdjmtBuf@1002 : Record 5895);
    VAR
      TempItemLedgEntry@1005 : TEMPORARY Record 32;
      OldActInvtAdjmtEntryOrder@1006 : Record 5896;
      NewActInvtAdjmtEntryOrder@1009 : Record 5896;
      NewNegActInvtAdjmtEntryOrder@1016 : Record 5896;
      RemActInvtAdjmtEntryOrder@1010 : Record 5896;
      RemNegActInvtAdjmtEntryOrder@1015 : Record 5896;
      ActNegInvtAdjmtEntryOrder@1012 : Record 5896;
      RemOutputQty@1007 : Decimal;
      RemNegOutputQty@1014 : Decimal;
      GrossOutputQty@1008 : Decimal;
      ReversedQty@1013 : Decimal;
      IsPositiveOutputs@1000 : Boolean;
    BEGIN
      OutputItemLedgEntryExist(SourceInvtAdjmtEntryOrder,TempItemLedgEntry);
      GrossOutputQty := CalcOutputQty(SourceInvtAdjmtEntryOrder,TRUE);
      IF GrossOutputQty <> OutputQty THEN BEGIN
        ActNegInvtAdjmtEntryOrder := ActInvtAdjmtEntryOrder;
        IF OutputQty = 0 THEN
          ActNegInvtAdjmtEntryOrder.RoundCosts(-1)
        ELSE
          ActNegInvtAdjmtEntryOrder.RoundCosts(-(GrossOutputQty - OutputQty) / OutputQty);
      END;

      FOR IsPositiveOutputs := TRUE DOWNTO FALSE DO
        WITH TempItemLedgEntry DO
          IF FIND('-') THEN BEGIN
            IF IsPositiveOutputs THEN BEGIN
              RemOutputQty := OutputQty;
              RemActInvtAdjmtEntryOrder := ActInvtAdjmtEntryOrder;
              RemNegOutputQty := -(GrossOutputQty - OutputQty);
              RemNegActInvtAdjmtEntryOrder := ActNegInvtAdjmtEntryOrder;
            END ELSE BEGIN
              RemOutputQty := -(GrossOutputQty - OutputQty);
              RemActInvtAdjmtEntryOrder := ActNegInvtAdjmtEntryOrder;
              RemNegOutputQty := 0;
            END;

            REPEAT
              IF Positive = IsPositiveOutputs THEN BEGIN
                ReversedQty := CalcExactCostReversingQty(TempItemLedgEntry);

                OldActInvtAdjmtEntryOrder.INIT;
                CalcActualOutputCosts(OldActInvtAdjmtEntryOrder,"Entry No.");

                NewActInvtAdjmtEntryOrder := RemActInvtAdjmtEntryOrder;
                IF RemOutputQty * (Quantity + ReversedQty) <> 0 THEN BEGIN
                  // Calculate cost for gross output
                  NewActInvtAdjmtEntryOrder.RoundCosts((Quantity + ReversedQty) / RemOutputQty);

                  RemOutputQty -= (Quantity + ReversedQty);
                  RemActInvtAdjmtEntryOrder.CalcDiff(NewActInvtAdjmtEntryOrder,FALSE);
                  RemActInvtAdjmtEntryOrder.RoundCosts(-1);
                END ELSE
                  NewActInvtAdjmtEntryOrder.RoundCosts(0);

                IF RemNegOutputQty * ReversedQty <> 0 THEN BEGIN
                  // Calculate cost for negative output
                  NewNegActInvtAdjmtEntryOrder := RemNegActInvtAdjmtEntryOrder;
                  NewNegActInvtAdjmtEntryOrder.RoundCosts(ReversedQty / RemNegOutputQty);

                  RemNegOutputQty -= ReversedQty;
                  RemNegActInvtAdjmtEntryOrder.CalcDiff(NewNegActInvtAdjmtEntryOrder,FALSE);
                  RemNegActInvtAdjmtEntryOrder.RoundCosts(-1);

                  // Gross + Negative Outputs
                  NewActInvtAdjmtEntryOrder.CalcDiff(NewNegActInvtAdjmtEntryOrder,FALSE);
                  NewActInvtAdjmtEntryOrder.RoundCosts(-1);
                END;

                // Compute difference to post
                NewActInvtAdjmtEntryOrder.CalcDiff(OldActInvtAdjmtEntryOrder,FALSE);
                NewActInvtAdjmtEntryOrder.RoundCosts(-1);

                UpdateOutputAdjmtBuf(TempItemLedgEntry,NewActInvtAdjmtEntryOrder,InvtAdjmtBuf);
                DELETE;
              END;
            UNTIL NEXT = 0;
          END;
    END;

    LOCAL PROCEDURE UpdateOutputAdjmtBuf@91(ItemLedgEntry@1002 : Record 32;InvtAdjmtEntryOrder@1001 : Record 5896;VAR InvtAdjmtBuffer@1000 : Record 5895);
    BEGIN
      WITH InvtAdjmtEntryOrder DO BEGIN
        IF HasNewCost("Direct Cost","Direct Cost (ACY)") OR NOT "Completely Invoiced" THEN
          InvtAdjmtBuffer.AddOrderCost(
            ItemLedgEntry."Entry No.",InvtAdjmtBuffer."Entry Type"::"Direct Cost",0,"Direct Cost","Direct Cost (ACY)");
        IF HasNewCost("Indirect Cost","Indirect Cost (ACY)") THEN
          InvtAdjmtBuffer.AddOrderCost(
            ItemLedgEntry."Entry No.",InvtAdjmtBuffer."Entry Type"::"Indirect Cost",0,"Indirect Cost","Indirect Cost (ACY)");

        IF Item."Costing Method" <> Item."Costing Method"::Standard THEN
          EXIT;

        IF HasNewCost("Single-Level Material Cost","Single-Lvl Material Cost (ACY)") THEN
          InvtAdjmtBuffer.AddOrderCost(ItemLedgEntry."Entry No.",
            InvtAdjmtBuffer."Entry Type"::Variance,InvtAdjmtBuffer."Variance Type"::Material,
            "Single-Level Material Cost","Single-Lvl Material Cost (ACY)");

        IF HasNewCost("Single-Level Capacity Cost","Single-Lvl Capacity Cost (ACY)") THEN
          InvtAdjmtBuffer.AddOrderCost(ItemLedgEntry."Entry No.",
            InvtAdjmtBuffer."Entry Type"::Variance,InvtAdjmtBuffer."Variance Type"::Capacity,
            "Single-Level Capacity Cost","Single-Lvl Capacity Cost (ACY)");

        IF HasNewCost("Single-Level Cap. Ovhd Cost","Single-Lvl Cap. Ovhd Cost(ACY)") THEN
          InvtAdjmtBuffer.AddOrderCost(ItemLedgEntry."Entry No.",
            InvtAdjmtBuffer."Entry Type"::Variance,InvtAdjmtBuffer."Variance Type"::"Capacity Overhead",
            "Single-Level Cap. Ovhd Cost","Single-Lvl Cap. Ovhd Cost(ACY)");

        IF HasNewCost("Single-Level Mfg. Ovhd Cost","Single-Lvl Mfg. Ovhd Cost(ACY)") THEN
          InvtAdjmtBuffer.AddOrderCost(ItemLedgEntry."Entry No.",
            InvtAdjmtBuffer."Entry Type"::Variance,InvtAdjmtBuffer."Variance Type"::"Manufacturing Overhead",
            "Single-Level Mfg. Ovhd Cost","Single-Lvl Mfg. Ovhd Cost(ACY)");

        IF HasNewCost("Single-Level Subcontrd. Cost","Single-Lvl Subcontrd Cost(ACY)") THEN
          InvtAdjmtBuffer.AddOrderCost(ItemLedgEntry."Entry No.",
            InvtAdjmtBuffer."Entry Type"::Variance,InvtAdjmtBuffer."Variance Type"::Subcontracted,
            "Single-Level Subcontrd. Cost","Single-Lvl Subcontrd Cost(ACY)");
      END;
    END;

    LOCAL PROCEDURE CalcStandardCost@1(VAR InvtAdjmtEntryOrder@1001 : Record 5896;OutputQty@1000 : Decimal);
    BEGIN
      IF NOT InvtAdjmtEntryOrder.FIND OR NOT InvtAdjmtEntryOrder."Completely Invoiced" THEN
        InvtAdjmtEntryOrder.GetCostsFromItem(OutputQty)
      ELSE BEGIN
        InvtAdjmtEntryOrder.RoundCosts(OutputQty);
        InvtAdjmtEntryOrder.CalcDirectCostFromCostShares;
        InvtAdjmtEntryOrder.CalcIndirectCostFromCostShares;
        InvtAdjmtEntryOrder.CalcUnitCost;
      END;
    END;

    LOCAL PROCEDURE CalcActualOutputCosts@3(VAR InvtAdjmtEntryOrder@1001 : Record 5896;ItemLedgerEntryNo@1006 : Integer);
    VAR
      OutputValueEntry@1004 : Record 5802;
    BEGIN
      WITH OutputValueEntry DO BEGIN
        SETRANGE("Item Ledger Entry No.",ItemLedgerEntryNo);
        IF FIND('-') THEN
          REPEAT
            CASE "Entry Type" OF
              "Entry Type"::"Direct Cost":
                InvtAdjmtEntryOrder.AddDirectCost("Cost Amount (Actual)","Cost Amount (Actual) (ACY)");
              "Entry Type"::"Indirect Cost":
                InvtAdjmtEntryOrder.AddIndirectCost("Cost Amount (Actual)","Cost Amount (Actual) (ACY)");
              "Entry Type"::Variance:
                CASE "Variance Type" OF
                  "Variance Type"::Material:
                    InvtAdjmtEntryOrder.AddSingleLvlMaterialCost("Cost Amount (Actual)","Cost Amount (Actual) (ACY)");
                  "Variance Type"::Capacity:
                    InvtAdjmtEntryOrder.AddSingleLvlCapacityCost("Cost Amount (Actual)","Cost Amount (Actual) (ACY)");
                  "Variance Type"::"Capacity Overhead":
                    InvtAdjmtEntryOrder.AddSingleLvlCapOvhdCost("Cost Amount (Actual)","Cost Amount (Actual) (ACY)");
                  "Variance Type"::"Manufacturing Overhead":
                    InvtAdjmtEntryOrder.AddSingleLvlMfgOvhdCost("Cost Amount (Actual)","Cost Amount (Actual) (ACY)");
                  "Variance Type"::Subcontracted:
                    InvtAdjmtEntryOrder.AddSingleLvlSubcontrdCost("Cost Amount (Actual)","Cost Amount (Actual) (ACY)");
                END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CalcActualMaterialCosts@43(VAR InvtAdjmtEntryOrder@1006 : Record 5896);
    VAR
      ItemLedgEntry@1003 : Record 32;
      ValueEntry@1000 : Record 5802;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type");
        SETRANGE("Order Type",InvtAdjmtEntryOrder."Order Type");
        SETRANGE("Order No.",InvtAdjmtEntryOrder."Order No.");
        SETFILTER("Entry Type",'%1|%2',
          "Entry Type"::Consumption,
          "Entry Type"::"Assembly Consumption");
        IF InvtAdjmtEntryOrder."Order Type" = InvtAdjmtEntryOrder."Order Type"::Production THEN
          SETRANGE("Order Line No.",InvtAdjmtEntryOrder."Order Line No.");
        IF FIND('-') THEN
          REPEAT
            ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
            ValueEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
            ValueEntry.SETFILTER("Entry Type",'<>%1',ValueEntry."Entry Type"::Rounding);
            ValueEntry.CALCSUMS("Cost Amount (Actual)","Cost Amount (Actual) (ACY)");
            InvtAdjmtEntryOrder.AddSingleLvlMaterialCost(-ValueEntry."Cost Amount (Actual)",-ValueEntry."Cost Amount (Actual) (ACY)");
            IF Positive THEN
              AdjustForRevNegCon(InvtAdjmtEntryOrder,"Entry No.");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AdjustForRevNegCon@42(VAR InvtAdjmtEntryOrder@1004 : Record 5896;ItemLedgEntryNo@1002 : Integer);
    VAR
      ValueEntry@1003 : Record 5802;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
        SETRANGE("Entry Type","Entry Type"::Revaluation);
        IF FINDSET THEN
          REPEAT
            InvtAdjmtEntryOrder.AddSingleLvlMaterialCost("Cost Amount (Actual)","Cost Amount (Actual) (ACY)");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CalcActualCapacityCosts@44(VAR InvtAdjmtEntryOrder@1000 : Record 5896);
    VAR
      CapLedgEntry@1002 : Record 5832;
      ShareOfTotalCapCost@1001 : Decimal;
    BEGIN
      ShareOfTotalCapCost := CalcShareOfCapCost(InvtAdjmtEntryOrder);

      WITH CapLedgEntry DO BEGIN
        SETCURRENTKEY("Order Type","Order No.","Order Line No.","Routing No.","Routing Reference No.");
        SETRANGE("Order Type",InvtAdjmtEntryOrder."Order Type");
        SETRANGE("Order No.",InvtAdjmtEntryOrder."Order No.");
        SETRANGE("Routing No.",InvtAdjmtEntryOrder."Routing No.");
        SETRANGE("Routing Reference No.",InvtAdjmtEntryOrder."Routing Reference No.");
        IF FIND('-') THEN
          REPEAT
            CALCFIELDS("Direct Cost","Direct Cost (ACY)","Overhead Cost","Overhead Cost (ACY)");
            IF Subcontracting THEN
              InvtAdjmtEntryOrder.AddSingleLvlSubcontrdCost("Direct Cost" * ShareOfTotalCapCost,"Direct Cost (ACY)" *
                ShareOfTotalCapCost)
            ELSE
              InvtAdjmtEntryOrder.AddSingleLvlCapacityCost(
                "Direct Cost" * ShareOfTotalCapCost,"Direct Cost (ACY)" * ShareOfTotalCapCost);
            InvtAdjmtEntryOrder.AddSingleLvlCapOvhdCost(
              "Overhead Cost" * ShareOfTotalCapCost,"Overhead Cost (ACY)" * ShareOfTotalCapCost);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcOutputQty@4(InvtAdjmtEntryOrder@1002 : Record 5896;OnlyInbounds@1000 : Boolean) OutputQty : Decimal;
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        SETCURRENTKEY("Order Type","Order No.","Order Line No.");
        SETRANGE("Order Type",InvtAdjmtEntryOrder."Order Type");
        SETRANGE("Order No.",InvtAdjmtEntryOrder."Order No.");
        SETFILTER("Entry Type",'%1|%2',
          "Entry Type"::Output,
          "Entry Type"::"Assembly Output");
        IF InvtAdjmtEntryOrder."Order Type" = InvtAdjmtEntryOrder."Order Type"::Production THEN
          SETRANGE("Order Line No.",InvtAdjmtEntryOrder."Order Line No.");
        IF FIND('-') THEN
          REPEAT
            OutputQty += Quantity;
            IF OnlyInbounds AND NOT Positive THEN
              OutputQty -= Quantity;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CalcShareOfCapCost@11(InvtAdjmtEntryOrder@1002 : Record 5896) ShareOfCapCost : Decimal;
    VAR
      CapLedgEntry@1003 : Record 5832;
    BEGIN
      IF InvtAdjmtEntryOrder."Order Type" = InvtAdjmtEntryOrder."Order Type"::Assembly THEN
        EXIT(1);

      WITH CapLedgEntry DO BEGIN
        SETCURRENTKEY("Order Type","Order No.");
        SETRANGE("Order Type",InvtAdjmtEntryOrder."Order Type");
        SETRANGE("Order No.",InvtAdjmtEntryOrder."Order No.");
        SETRANGE("Order Line No.",InvtAdjmtEntryOrder."Order Line No.");
        SETRANGE("Routing No.",InvtAdjmtEntryOrder."Routing No.");
        SETRANGE("Routing Reference No.",InvtAdjmtEntryOrder."Routing Reference No.");
        CALCSUMS("Output Quantity");
        ShareOfCapCost := "Output Quantity";

        IF InvtAdjmtEntryOrder."Order Type" = InvtAdjmtEntryOrder."Order Type"::Production THEN
          SETRANGE("Order Line No.");
        CALCSUMS("Output Quantity");
        IF "Output Quantity" <> 0 THEN
          ShareOfCapCost := ShareOfCapCost / "Output Quantity"
        ELSE
          ShareOfCapCost := 1;
      END;
    END;

    LOCAL PROCEDURE CopyILEToILE@6(VAR FromItemLedgEntry@1000 : Record 32;VAR ToItemLedgEntry@1001 : Record 32);
    BEGIN
      WITH ToItemLedgEntry DO BEGIN
        RESET;
        DELETEALL;
        IF FromItemLedgEntry.FINDSET THEN
          REPEAT
            ToItemLedgEntry := FromItemLedgEntry;
            INSERT;
          UNTIL FromItemLedgEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE OutputItemLedgEntryExist@10(SourceInvtAdjmtEntryOrder@1000 : Record 5896;VAR ToItemLedgEntry@1001 : Record 32) : Boolean;
    VAR
      FromItemLedgEntry@1002 : Record 32;
    BEGIN
      WITH FromItemLedgEntry DO BEGIN
        SETCURRENTKEY("Order Type","Order No.","Order Line No.","Entry Type");
        SETRANGE("Order Type",SourceInvtAdjmtEntryOrder."Order Type");
        SETRANGE("Order No.",SourceInvtAdjmtEntryOrder."Order No.");
        SETFILTER("Entry Type",'%1|%2',"Entry Type"::Output,"Entry Type"::"Assembly Output");
        IF SourceInvtAdjmtEntryOrder."Order Type" = SourceInvtAdjmtEntryOrder."Order Type"::Production THEN
          SETRANGE("Order Line No.",SourceInvtAdjmtEntryOrder."Order Line No.");
        CopyILEToILE(FromItemLedgEntry,ToItemLedgEntry);
        EXIT(ToItemLedgEntry.FINDFIRST);
      END;
    END;

    LOCAL PROCEDURE CalcExactCostReversingQty@8(ItemLedgEntry@1000 : Record 32) Qty : Decimal;
    VAR
      OutbndItemLedgEntry@1002 : Record 32;
      ItemApplnEntry@1001 : Record 339;
      TempItemLedgEntryInChain@1003 : TEMPORARY Record 32;
    BEGIN
      ItemApplnEntry.GetVisitedEntries(ItemLedgEntry,TempItemLedgEntryInChain,TRUE);
      WITH TempItemLedgEntryInChain DO BEGIN
        SETRANGE("Order Type",ItemLedgEntry."Order Type");
        SETRANGE("Order No.",ItemLedgEntry."Order No.");
        SETRANGE("Order Line No.",ItemLedgEntry."Order Line No.");
        SETRANGE("Entry Type",ItemLedgEntry."Entry Type");
        SETRANGE(Positive,FALSE);
        IF FINDSET THEN
          REPEAT
            OutbndItemLedgEntry.GET("Entry No.");
            IF OutbndItemLedgEntry."Applies-to Entry" <> 0 THEN
              Qty += OutbndItemLedgEntry.Quantity;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE HasNewCost@54(NewCost@1000 : Decimal;NewCostACY@1001 : Decimal) : Boolean;
    BEGIN
      EXIT((NewCost <> 0) OR (NewCostACY <> 0));
    END;

    BEGIN
    END.
  }
}

