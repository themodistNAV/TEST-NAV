OBJECT Page 5522 Order Planning
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Order Planning;
               ENG=Order Planning];
    InsertAllowed=No;
    SourceTable=Table246;
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             DemandOrderFilterCtrlEnable := TRUE;
             SupplyFromEditable := TRUE;
             ReserveEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 IF NOT MfgUserTempl.GET(USERID) THEN BEGIN
                   MfgUserTempl.INIT;
                   MfgUserTempl."User ID" := USERID;
                   MfgUserTempl."Make Orders" := MfgUserTempl."Make Orders"::"The Active Order";
                   MfgUserTempl."Create Purchase Order" := MfgUserTempl."Create Purchase Order"::"Make Purch. Orders";
                   MfgUserTempl."Create Production Order" := MfgUserTempl."Create Production Order"::"Firm Planned";
                   MfgUserTempl."Create Transfer Order" := MfgUserTempl."Create Transfer Order"::"Make Trans. Orders";
                   MfgUserTempl."Create Assembly Order" := MfgUserTempl."Create Assembly Order"::"Make Assembly Orders";
                   MfgUserTempl.INSERT;
                 END;

                 InitTempRec;
               END;

    OnAfterGetRecord=BEGIN
                       DescriptionIndent := 0;
                       StatusText := FORMAT(Status);
                       StatusTextOnFormat(StatusText);
                       DemandTypeText := FORMAT("Demand Type");
                       DemandTypeTextOnFormat(DemandTypeText);
                       DemandSubtypeText := FORMAT("Demand Subtype");
                       DemandSubtypeTextOnFormat(DemandSubtypeText);
                       DemandOrderNoOnFormat;
                       DescriptionOnFormat;
                       DemandQuantityOnFormat;
                       DemandQtyAvailableOnFormat;
                       ReplenishmentSystemOnFormat;
                       QuantityOnFormat;
                       ReserveOnFormat;
                     END;

    OnModifyRecord=VAR
                     ReqLine@1000 : Record 246;
                   BEGIN
                     ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.");
                     ReqLine.TRANSFERFIELDS(Rec,FALSE);
                     ReqLine.MODIFY(TRUE);
                   END;

    OnDeleteRecord=VAR
                     xReqLine@1000 : Record 246;
                   BEGIN
                     xReqLine := Rec;
                     WHILE (NEXT <> 0) AND (Level > xReqLine.Level) DO
                       DELETE(TRUE);
                     Rec := xReqLine;
                     xReqLine.DELETE(TRUE);
                     DELETE;
                     EXIT(FALSE);
                   END;

    OnAfterGetCurrRecord=BEGIN
                           IF ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.") THEN BEGIN
                             Rec := ReqLine;
                             MODIFY
                           END ELSE
                             IF GET("Worksheet Template Name","Journal Batch Name","Line No.") THEN
                               DELETE;

                           UpdateSupplyFrom;
                           CalcItemAvail;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 99      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Line;
                                 ENG=&Line];
                      Image=Line }
      { 18      ;2   ;Action    ;
                      CaptionML=[ENU=Show Document;
                                 ENG=Show Document];
                      Image=View;
                      OnAction=BEGIN
                                 ShowDemandOrder;
                               END;
                                }
      { 63      ;2   ;Separator  }
      { 42      ;2   ;Action    ;
                      CaptionML=[ENU=Components;
                                 ENG=Components];
                      RunObject=Page 99000862;
                      RunPageLink=Worksheet Template Name=FIELD(Worksheet Template Name),
                                  Worksheet Batch Name=FIELD(Journal Batch Name),
                                  Worksheet Line No.=FIELD(Line No.);
                      Image=Components }
      { 47      ;2   ;Action    ;
                      CaptionML=[ENU=Ro&uting;
                                 ENG=Ro&uting];
                      RunObject=Page 99000863;
                      RunPageLink=Worksheet Template Name=FIELD(Worksheet Template Name),
                                  Worksheet Batch Name=FIELD(Journal Batch Name),
                                  Worksheet Line No.=FIELD(Line No.);
                      Image=Route }
      { 101     ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 100     ;1   ;ActionGroup;
                      CaptionML=[ENU=&Item;
                                 ENG=&Item];
                      Image=Item }
      { 19      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[ENU=Card;
                                 ENG=Card];
                      Image=EditLines;
                      OnAction=VAR
                                 Item@1000 : Record 27;
                               BEGIN
                                 TESTFIELD(Type,Type::Item);
                                 TESTFIELD("No.");
                                 Item."No." := "No.";
                                 PAGE.RUNMODAL(PAGE::"Item Card",Item);
                               END;
                                }
      { 105     ;2   ;ActionGroup;
                      CaptionML=[ENU=&Item Availability by;
                                 ENG=&Item Availability by];
                      Image=ItemAvailability }
      { 3       ;3   ;Action    ;
                      CaptionML=[ENU=Event;
                                 ENG=Event];
                      Image=Event;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByEvent);
                               END;
                                }
      { 106     ;3   ;Action    ;
                      CaptionML=[ENU=Period;
                                 ENG=Period];
                      Image=Period;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByPeriod);
                               END;
                                }
      { 107     ;3   ;Action    ;
                      CaptionML=[ENU=Variant;
                                 ENG=Variant];
                      Image=ItemVariant;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByVariant);
                               END;
                                }
      { 108     ;3   ;Action    ;
                      AccessByPermission=TableData 14=R;
                      CaptionML=[ENU=Location;
                                 ENG=Location];
                      Image=Warehouse;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByLocation);
                               END;
                                }
      { 5       ;3   ;Action    ;
                      CaptionML=[ENU=BOM Level;
                                 ENG=BOM Level];
                      Image=BOMLevel;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByBOM);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 39      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 37      ;2   ;Action    ;
                      Name=CalculatePlan;
                      CaptionML=[ENU=&Calculate Plan;
                                 ENG=&Calculate Plan];
                      Promoted=Yes;
                      Image=CalculatePlan;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CalcPlan;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 48      ;2   ;Separator  }
      { 66      ;2   ;Action    ;
                      CaptionML=[ENU=&Reserve;
                                 ENG=&Reserve];
                      Image=Reserve;
                      OnAction=BEGIN
                                 CurrPage.SAVERECORD;
                                 ShowReservation;
                               END;
                                }
      { 67      ;2   ;Action    ;
                      Name=OrderTracking;
                      CaptionML=[ENU=Order &Tracking;
                                 ENG=Order &Tracking];
                      Image=OrderTracking;
                      OnAction=VAR
                                 TrackingForm@1001 : Page 99000822;
                               BEGIN
                                 TrackingForm.SetReqLine(Rec);
                                 TrackingForm.RUNMODAL;
                               END;
                                }
      { 77      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Refresh &Planning Line;
                                 ENG=Refresh &Planning Line];
                      Image=RefreshPlanningLine;
                      OnAction=VAR
                                 ReqLine2@1000 : Record 246;
                               BEGIN
                                 ReqLine2.SETRANGE("Worksheet Template Name","Worksheet Template Name");
                                 ReqLine2.SETRANGE("Journal Batch Name","Journal Batch Name");
                                 ReqLine2.SETRANGE("Line No.","Line No.");

                                 REPORT.RUNMODAL(REPORT::"Refresh Planning Demand",TRUE,FALSE,ReqLine2);
                               END;
                                }
      { 36      ;2   ;Separator  }
      { 55      ;1   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Make &Orders;
                                 ENG=Make &Orders];
                      Promoted=Yes;
                      Image=NewOrder;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MakeSupplyOrders@1001 : Codeunit 5521;
                               BEGIN
                                 MakeSupplyOrders.SetManufUserTemplate(MfgUserTempl);
                                 MakeSupplyOrders.RUN(Rec);

                                 IF MakeSupplyOrders.ActionMsgCarriedOut THEN BEGIN
                                   RefreshTempTable;
                                   SetRecFilters;
                                   CurrPage.UPDATE(FALSE);
                                 END;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 78  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 80  ;2   ;Field     ;
                Name=DemandOrderFilterCtrl;
                CaptionML=[ENU=Show Demand as;
                           ENG=Show Demand as];
                OptionCaptionML=[ENU=All Demand,Production Demand,Sales Demand,Service Demand,Job Demand,Assembly Demand;
                                 ENG=All Demand,Production Demand,Sales Demand,Service Demand,Job Demand,Assembly Demand];
                SourceExpr=DemandOrderFilter;
                Enabled=DemandOrderFilterCtrlEnable;
                OnValidate=BEGIN
                             DemandOrderFilterOnAfterValida;
                           END;
                            }

    { 1   ;1   ;Group     ;
                IndentationColumnName=DescriptionIndent;
                IndentationControls=Description;
                ShowAsTree=Yes;
                GroupType=Repeater }

    { 14  ;2   ;Field     ;
                SourceExpr="Demand Date" }

    { 72  ;2   ;Field     ;
                SourceExpr=StatusText;
                CaptionClass=FIELDCAPTION(Status);
                Editable=FALSE;
                HideValue=StatusHideValue }

    { 43  ;2   ;Field     ;
                Lookup=No;
                SourceExpr=DemandTypeText;
                CaptionClass=FIELDCAPTION("Demand Type");
                Editable=FALSE;
                HideValue=DemandTypeHideValue;
                Style=Strong;
                StyleExpr=DemandTypeEmphasize }

    { 46  ;2   ;Field     ;
                SourceExpr=DemandSubtypeText;
                CaptionClass=FIELDCAPTION("Demand Subtype");
                Visible=FALSE;
                Editable=FALSE }

    { 57  ;2   ;Field     ;
                CaptionML=[ENU=Order No.;
                           ENG=Order No.];
                SourceExpr="Demand Order No.";
                HideValue=DemandOrderNoHideValue;
                Style=Strong;
                StyleExpr=DemandOrderNoEmphasize }

    { 87  ;2   ;Field     ;
                SourceExpr="Demand Line No.";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=Item No.;
                           ENG=Item No.];
                SourceExpr="No.";
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr="Variant Code";
                Visible=FALSE;
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                SourceExpr="Location Code";
                Visible=FALSE;
                Editable=FALSE }

    { 6   ;2   ;Field     ;
                SourceExpr=Description;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=DescriptionEmphasize }

    { 10  ;2   ;Field     ;
                SourceExpr="Demand Quantity";
                Visible=FALSE;
                HideValue=DemandQuantityHideValue }

    { 95  ;2   ;Field     ;
                SourceExpr="Demand Qty. Available";
                Visible=FALSE;
                HideValue=DemandQtyAvailableHideValue }

    { 2   ;2   ;Field     ;
                SourceExpr="Needed Quantity";
                Visible=TRUE }

    { 24  ;2   ;Field     ;
                SourceExpr="Replenishment System";
                HideValue=ReplenishmentSystemHideValue;
                OnValidate=BEGIN
                             ReplenishmentSystemOnAfterVali;
                           END;
                            }

    { 26  ;2   ;Field     ;
                SourceExpr="Supply From";
                Editable=SupplyFromEditable }

    { 62  ;2   ;Field     ;
                SourceExpr=Reserve;
                Editable=ReserveEditable }

    { 28  ;2   ;Field     ;
                CaptionML=[ENU=Qty. to Order;
                           ENG=Qty. to Order];
                SourceExpr=Quantity;
                HideValue=QuantityHideValue }

    { 12  ;2   ;Field     ;
                SourceExpr="Unit of Measure Code";
                Visible=FALSE }

    { 32  ;2   ;Field     ;
                SourceExpr="Order Date" }

    { 74  ;2   ;Field     ;
                SourceExpr="Starting Date";
                Visible=FALSE }

    { 30  ;2   ;Field     ;
                SourceExpr="Due Date" }

    { 34  ;2   ;Field     ;
                SourceExpr="Unit Cost";
                Visible=FALSE }

    { 53  ;2   ;Field     ;
                SourceExpr="Direct Unit Cost";
                Visible=FALSE }

    { 51  ;2   ;Field     ;
                SourceExpr="Currency Code";
                Visible=FALSE }

    { 49  ;2   ;Field     ;
                SourceExpr="Purchasing Code";
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 1 Code";
                Visible=FALSE }

    { 22  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 2 Code";
                Visible=FALSE }

    { 38  ;1   ;Group      }

    { 1902204901;2;Group  ;
                GroupType=FixedLayout }

    { 1901313001;3;Group  ;
                CaptionML=[ENU=Available for Transfer;
                           ENG=Available for Transfer] }

    { 60  ;4   ;Field     ;
                Name=AvailableForTransfer;
                CaptionML=[ENU=Available For Transfer;
                           ENG=Available For Transfer];
                DecimalPlaces=0:5;
                SourceExpr=QtyOnOtherLocations;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               OrderPlanningMgt.InsertAltSupplyLocation(Rec);
                             END;
                              }

    { 1901741901;3;Group  ;
                CaptionML=[ENU=Substitutes Exist;
                           ENG=Substitutes Exist] }

    { 58  ;4   ;Field     ;
                Lookup=No;
                DrillDown=No;
                CaptionML=[ENU=Substitutes Exist;
                           ENG=Substitutes Exist];
                SourceExpr=SubstitionAvailable;
                Editable=FALSE;
                OnAssistEdit=VAR
                               ReqLine2@1001 : Record 246;
                               xReqLine@1002 : Record 246;
                               ReqLine3@1003 : Record 246;
                             BEGIN
                               ReqLine3 := Rec;
                               OrderPlanningMgt.InsertAltSupplySubstitution(ReqLine3);
                               Rec := ReqLine3;
                               MODIFY;

                               IF OrderPlanningMgt.DeleteLine THEN BEGIN
                                 xReqLine := Rec;
                                 ReqLine2.SETCURRENTKEY("User ID","Demand Type","Demand Subtype","Demand Order No.");
                                 ReqLine2.SETRANGE("User ID",USERID);
                                 ReqLine2.SETRANGE("Demand Type","Demand Type");
                                 ReqLine2.SETRANGE("Demand Subtype","Demand Subtype");
                                 ReqLine2.SETRANGE("Demand Order No.","Demand Order No.");
                                 ReqLine2.SETRANGE(Level,Level,Level + 1);
                                 ReqLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                                 IF NOT ReqLine2.FINDFIRST THEN BEGIN // No other children
                                   ReqLine2.SETRANGE("Line No.");
                                   ReqLine2.SETRANGE(Level,0);
                                   IF ReqLine2.FINDFIRST THEN BEGIN // Find and delete parent
                                     Rec := ReqLine2;
                                     DELETE;
                                   END;
                                 END;

                                 Rec := xReqLine;
                                 DELETE;
                                 CurrPage.UPDATE(FALSE);
                               END ELSE
                                 CurrPage.UPDATE(TRUE);
                             END;
                              }

    { 1901741801;3;Group  ;
                CaptionML=[ENU=Quantity Available;
                           ENG=Quantity Available] }

    { 68  ;4   ;Field     ;
                Name=QuantityAvailable;
                Lookup=No;
                DrillDown=No;
                CaptionML=[ENU=Quantity Available;
                           ENG=Quantity Available];
                DecimalPlaces=0:5;
                SourceExpr=QtyATP;
                Editable=FALSE }

    { 1901312901;3;Group  ;
                CaptionML=[ENU=Earliest Date Available;
                           ENG=Earliest Date Available] }

    { 70  ;4   ;Field     ;
                Lookup=No;
                DrillDown=No;
                CaptionML=[ENU=Earliest Date Available;
                           ENG=Earliest Date Available];
                SourceExpr=EarliestShptDateAvailable;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      ReqLine@1001 : Record 246;
      SalesHeader@1000 : Record 36;
      ProdOrder@1006 : Record 5405;
      AsmHeader@1013 : Record 900;
      ServHeader@1004 : Record 5900;
      Job@1010 : Record 167;
      MfgUserTempl@1015 : Record 5525;
      OrderPlanningMgt@1002 : Codeunit 5522;
      ItemAvailFormsMgt@1003 : Codeunit 353;
      DemandOrderFilter@1007 : 'All Demands,Production Demand,Sales Demand,Service Demand,Job Demand,Assembly Demand';
      Text001@1008 : TextConst 'ENU=Sales;ENG=Sales';
      Text002@1009 : TextConst 'ENU=Production;ENG=Production';
      Text003@1011 : TextConst 'ENU=Service;ENG=Service';
      Text004@1012 : TextConst 'ENU=Jobs;ENG=Jobs';
      StatusHideValue@19077886 : Boolean INDATASET;
      StatusText@19037117 : Text[1024] INDATASET;
      DemandTypeHideValue@19039011 : Boolean INDATASET;
      DemandTypeEmphasize@19074322 : Boolean INDATASET;
      DemandTypeText@19010028 : Text[1024] INDATASET;
      DemandSubtypeText@19017088 : Text[1024] INDATASET;
      DemandOrderNoHideValue@19045269 : Boolean INDATASET;
      DemandOrderNoEmphasize@19029891 : Boolean INDATASET;
      DescriptionEmphasize@19010547 : Boolean INDATASET;
      DescriptionIndent@19057867 : Integer INDATASET;
      DemandQuantityHideValue@19062899 : Boolean INDATASET;
      DemandQtyAvailableHideValue@19060213 : Boolean INDATASET;
      ReplenishmentSystemHideValue@19034362 : Boolean INDATASET;
      QuantityHideValue@19060207 : Boolean INDATASET;
      SupplyFromEditable@19071852 : Boolean INDATASET;
      ReserveEditable@1016 : Boolean INDATASET;
      DemandOrderFilterCtrlEnable@19066621 : Boolean INDATASET;
      Text005@1014 : TextConst 'ENU=Assembly;ENG=Assembly';
      QtyOnOtherLocations@1005 : Decimal;
      SubstitionAvailable@1017 : Boolean;
      QtyATP@1018 : Decimal;
      EarliestShptDateAvailable@1019 : Date;

    PROCEDURE SetSalesOrder@2(SalesHeader2@1001 : Record 36);
    BEGIN
      SalesHeader := SalesHeader2;
      DemandOrderFilter := DemandOrderFilter::"Sales Demand";
      DemandOrderFilterCtrlEnable := FALSE;
    END;

    PROCEDURE SetProdOrder@3(ProdOrder2@1000 : Record 5405);
    BEGIN
      ProdOrder := ProdOrder2;
      DemandOrderFilter := DemandOrderFilter::"Production Demand";
      DemandOrderFilterCtrlEnable := FALSE;
    END;

    PROCEDURE SetAsmOrder@23(AsmHeader2@1001 : Record 900);
    BEGIN
      AsmHeader := AsmHeader2;
      DemandOrderFilter := DemandOrderFilter::"Assembly Demand";
      DemandOrderFilterCtrlEnable := FALSE;
    END;

    PROCEDURE SetServOrder@19(ServHeader2@1001 : Record 5900);
    BEGIN
      ServHeader := ServHeader2;
      DemandOrderFilter := DemandOrderFilter::"Service Demand";
      DemandOrderFilterCtrlEnable := FALSE;
    END;

    PROCEDURE SetJobOrder@21(Job2@1001 : Record 167);
    BEGIN
      Job := Job2;
      DemandOrderFilter := DemandOrderFilter::"Job Demand";
      DemandOrderFilterCtrlEnable := FALSE;
    END;

    LOCAL PROCEDURE InitTempRec@12();
    VAR
      ReqLine@1000 : Record 246;
      ReqLineWithCursor@1001 : Record 246;
    BEGIN
      DELETEALL;

      ReqLine.RESET;
      ReqLine.COPYFILTERS(Rec);
      ReqLine.SETRANGE("User ID",USERID);
      ReqLine.SETRANGE("Worksheet Template Name",'');
      IF ReqLine.FINDSET THEN
        REPEAT
          Rec := ReqLine;
          INSERT;
          IF ReqLine.Level = 0 THEN
            FindReqLineForCursor(ReqLineWithCursor,ReqLine);
        UNTIL ReqLine.NEXT = 0;

      IF FINDFIRST THEN
        IF ReqLineWithCursor."Line No." > 0 THEN
          Rec := ReqLineWithCursor;

      SetRecFilters;
    END;

    LOCAL PROCEDURE FindReqLineForCursor@22(VAR ReqLineWithCursor@1000 : Record 246;ActualReqLine@1001 : Record 246);
    BEGIN
      IF ProdOrder."No." = '' THEN
        EXIT;

      IF (ActualReqLine."Demand Type" = DATABASE::"Prod. Order Component") AND
         (ActualReqLine."Demand Subtype" = ProdOrder.Status) AND
         (ActualReqLine."Demand Order No." = ProdOrder."No.")
      THEN
        ReqLineWithCursor := ActualReqLine;
    END;

    LOCAL PROCEDURE RefreshTempTable@14();
    VAR
      TempReqLine2@1001 : Record 246;
      ReqLine@1000 : Record 246;
    BEGIN
      TempReqLine2.COPY(Rec);

      RESET;
      IF FIND('-') THEN
        REPEAT
          ReqLine := Rec;
          IF NOT ReqLine.FIND OR
             ((Level = 0) AND ((ReqLine.NEXT = 0) OR (ReqLine.Level = 0)))
          THEN BEGIN
            IF Level = 0 THEN BEGIN
              ReqLine := Rec;
              ReqLine.FIND;
              ReqLine.DELETE(TRUE);
            END;
            DELETE
          END;
        UNTIL NEXT = 0;

      COPY(TempReqLine2);
    END;

    PROCEDURE SetRecFilters@5();
    BEGIN
      RESET;
      FILTERGROUP(2);
      SETRANGE("User ID",USERID);
      SETRANGE("Worksheet Template Name",'');

      CASE DemandOrderFilter OF
        DemandOrderFilter::"All Demands":
          BEGIN
            SETRANGE("Demand Type");
            SETCURRENTKEY("User ID","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
        DemandOrderFilter::"Sales Demand":
          BEGIN
            SETRANGE("Demand Type",DATABASE::"Sales Line");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
        DemandOrderFilter::"Production Demand":
          BEGIN
            SETRANGE("Demand Type",DATABASE::"Prod. Order Component");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
        DemandOrderFilter::"Assembly Demand":
          BEGIN
            SETRANGE("Demand Type",DATABASE::"Assembly Line");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
        DemandOrderFilter::"Service Demand":
          BEGIN
            SETRANGE("Demand Type",DATABASE::"Service Line");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
        DemandOrderFilter::"Job Demand":
          BEGIN
            SETRANGE("Demand Type",DATABASE::"Job Planning Line");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          END;
      END;
      FILTERGROUP(0);

      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ShowDemandOrder@15();
    VAR
      SalesHeader@1001 : Record 36;
      ProdOrder@1000 : Record 5405;
      ServHeader@1002 : Record 5900;
      Job@1003 : Record 167;
      AsmHeader@1004 : Record 900;
    BEGIN
      CASE "Demand Type" OF
        DATABASE::"Sales Line":
          BEGIN
            SalesHeader.GET("Demand Subtype","Demand Order No.");
            CASE SalesHeader."Document Type" OF
              SalesHeader."Document Type"::Order:
                PAGE.RUN(PAGE::"Sales Order",SalesHeader);
              SalesHeader."Document Type"::"Return Order":
                PAGE.RUN(PAGE::"Sales Return Order",SalesHeader);
            END;
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrder.GET("Demand Subtype","Demand Order No.");
            CASE ProdOrder.Status OF
              ProdOrder.Status::Planned:
                PAGE.RUN(PAGE::"Planned Production Order",ProdOrder);
              ProdOrder.Status::"Firm Planned":
                PAGE.RUN(PAGE::"Firm Planned Prod. Order",ProdOrder);
              ProdOrder.Status::Released:
                PAGE.RUN(PAGE::"Released Production Order",ProdOrder);
            END;
          END;
        DATABASE::"Assembly Line":
          BEGIN
            AsmHeader.GET("Demand Subtype","Demand Order No.");
            CASE AsmHeader."Document Type" OF
              AsmHeader."Document Type"::Order:
                PAGE.RUN(PAGE::"Assembly Order",AsmHeader);
            END;
          END;
        DATABASE::"Service Line":
          BEGIN
            ServHeader.GET("Demand Subtype","Demand Order No.");
            CASE ServHeader."Document Type" OF
              ServHeader."Document Type"::Order:
                PAGE.RUN(PAGE::"Service Order",ServHeader);
            END;
          END;
        DATABASE::"Job Planning Line":
          BEGIN
            Job.GET("Demand Order No.");
            CASE Job.Status OF
              Job.Status::Order:
                PAGE.RUN(PAGE::"Job Card",Job);
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE CalcItemAvail@16();
    BEGIN
      QtyOnOtherLocations := CalcQtyOnOtherLocations;
      SubstitionAvailable := CalcSubstitionAvailable;
      QtyATP := CalcQtyATP;
      EarliestShptDateAvailable := CalcEarliestShptDateAvailable;
    END;

    LOCAL PROCEDURE CalcQtyOnOtherLocations@6() : Decimal;
    VAR
      QtyOnOtherLocation@1000 : Decimal;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      QtyOnOtherLocation := OrderPlanningMgt.AvailQtyOnOtherLocations(Rec); // Base Unit
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      QtyOnOtherLocation := ROUND(QtyOnOtherLocation / "Qty. per Unit of Measure",0.00001);

      EXIT(QtyOnOtherLocation);
    END;

    LOCAL PROCEDURE CalcQtyATP@8() : Decimal;
    VAR
      QtyATP@1000 : Decimal;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      QtyATP := OrderPlanningMgt.CalcATPQty("No.","Variant Code","Location Code","Demand Date"); // Base Unit
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      QtyATP := ROUND(QtyATP / "Qty. per Unit of Measure",0.00001);

      EXIT(QtyATP);
    END;

    LOCAL PROCEDURE CalcEarliestShptDateAvailable@9() : Date;
    VAR
      Item@1000 : Record 27;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      Item.GET("No.");
      IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." THEN
        EXIT;

      EXIT(OrderPlanningMgt.CalcATPEarliestDate("No.","Variant Code","Location Code","Demand Date","Quantity (Base)"));
    END;

    LOCAL PROCEDURE CalcSubstitionAvailable@11() : Boolean;
    BEGIN
      IF "No." = '' THEN
        EXIT;

      EXIT(OrderPlanningMgt.SubstitutionPossible(Rec));
    END;

    LOCAL PROCEDURE CalcPlan@13();
    VAR
      ReqLine@1001 : Record 246;
    BEGIN
      RESET;
      DELETEALL;

      CLEAR(OrderPlanningMgt);
      CASE DemandOrderFilter OF
        DemandOrderFilter::"Sales Demand":
          OrderPlanningMgt.SetSalesOrder;
        DemandOrderFilter::"Assembly Demand":
          OrderPlanningMgt.SetAsmOrder;
        DemandOrderFilter::"Production Demand":
          OrderPlanningMgt.SetProdOrder;
        DemandOrderFilter::"Service Demand":
          OrderPlanningMgt.SetServOrder;
        DemandOrderFilter::"Job Demand":
          OrderPlanningMgt.SetJobOrder;
      END;
      OrderPlanningMgt.GetOrdersToPlan(ReqLine);

      InitTempRec;
    END;

    LOCAL PROCEDURE UpdateSupplyFrom@17();
    BEGIN
      SupplyFromEditable := NOT ("Replenishment System" IN ["Replenishment System"::"Prod. Order",
                                                            "Replenishment System"::Assembly]);
    END;

    LOCAL PROCEDURE DemandOrderFilterOnAfterValida@19021326();
    BEGIN
      CurrPage.SAVERECORD;
      SetRecFilters;
    END;

    LOCAL PROCEDURE ReplenishmentSystemOnAfterVali@19026301();
    BEGIN
      UpdateSupplyFrom;
    END;

    LOCAL PROCEDURE StatusTextOnFormat@19078586(VAR Text@19010365 : Text[1024]);
    BEGIN
      IF "Demand Line No." = 0 THEN
        CASE "Demand Type" OF
          DATABASE::"Prod. Order Component":
            BEGIN
              ProdOrder.Status := Status;
              Text := FORMAT(ProdOrder.Status);
            END;
          DATABASE::"Sales Line":
            BEGIN
              SalesHeader.Status := Status;
              Text := FORMAT(SalesHeader.Status);
            END;
          DATABASE::"Service Line":
            BEGIN
              ServHeader.INIT;
              ServHeader.Status := Status;
              Text := FORMAT(ServHeader.Status);
            END;
          DATABASE::"Job Planning Line":
            BEGIN
              Job.INIT;
              Job.Status := Status;
              Text := FORMAT(Job.Status);
            END;
          DATABASE::"Assembly Line":
            BEGIN
              AsmHeader.Status := Status;
              Text := FORMAT(AsmHeader.Status);
            END;
        END;

      StatusHideValue := "Demand Line No." <> 0;
    END;

    LOCAL PROCEDURE DemandTypeTextOnFormat@19059433(VAR Text@19044954 : Text[1024]);
    BEGIN
      IF "Demand Line No." = 0 THEN
        CASE "Demand Type" OF
          DATABASE::"Sales Line":
            Text := Text001;
          DATABASE::"Prod. Order Component":
            Text := Text002;
          DATABASE::"Service Line":
            Text := Text003;
          DATABASE::"Job Planning Line":
            Text := Text004;
          DATABASE::"Assembly Line":
            Text := Text005;
        END;

      DemandTypeHideValue := "Demand Line No." <> 0;
      DemandTypeEmphasize := Level = 0;
    END;

    LOCAL PROCEDURE DemandSubtypeTextOnFormat@19071287(VAR Text@19000137 : Text[1024]);
    BEGIN
      CASE "Demand Type" OF
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrder.Status := Status;
            Text := FORMAT(ProdOrder.Status);
          END;
        DATABASE::"Sales Line":
          BEGIN
            SalesHeader."Document Type" := "Demand Subtype";
            Text := FORMAT(SalesHeader."Document Type");
          END;
        DATABASE::"Service Line":
          BEGIN
            ServHeader."Document Type" := "Demand Subtype";
            Text := FORMAT(ServHeader."Document Type");
          END;
        DATABASE::"Job Planning Line":
          BEGIN
            Job.Status := Status;
            Text := FORMAT(Job.Status);
          END;
        DATABASE::"Assembly Line":
          BEGIN
            AsmHeader."Document Type" := "Demand Subtype";
            Text := FORMAT(AsmHeader."Document Type");
          END;
      END
    END;

    LOCAL PROCEDURE DemandOrderNoOnFormat@19021785();
    BEGIN
      DemandOrderNoHideValue := "Demand Line No." <> 0;
      DemandOrderNoEmphasize := Level = 0;
    END;

    LOCAL PROCEDURE DescriptionOnFormat@19023855();
    BEGIN
      DescriptionIndent := Level + "Planning Level";
      DescriptionEmphasize := Level = 0;
    END;

    LOCAL PROCEDURE DemandQuantityOnFormat@19031262();
    BEGIN
      DemandQuantityHideValue := Level = 0;
    END;

    LOCAL PROCEDURE DemandQtyAvailableOnFormat@19015974();
    BEGIN
      DemandQtyAvailableHideValue := Level = 0;
    END;

    LOCAL PROCEDURE ReplenishmentSystemOnFormat@19008444();
    BEGIN
      ReplenishmentSystemHideValue := "Replenishment System" = "Replenishment System"::" ";
    END;

    LOCAL PROCEDURE QuantityOnFormat@19071269();
    BEGIN
      QuantityHideValue := Level = 0;
    END;

    LOCAL PROCEDURE ReserveOnFormat@26();
    BEGIN
      ReserveEditable := Level <> 0;
    END;

    LOCAL PROCEDURE ShowMessage@24(MessageText@1000 : Text[1024];ModuleText@1001 : Text[30];SubmoduleText@1002 : Text[30];DocNo@1003 : Code[20]);
    BEGIN
      MESSAGE(
        STRSUBSTNO(
          MessageText,
          ModuleText,
          SubmoduleText,
          DocNo));
    END;

    BEGIN
    END.
  }
}

