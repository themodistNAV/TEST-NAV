OBJECT Report 1496 Suggest Bank Acc. Recon. Lines
{
  OBJECT-PROPERTIES
  {
    Date=22/12/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.44365,NAVGB9.00.00.44365;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Suggest Bank Acc. Recon. Lines;
               ENG=Suggest Bank Acc. Recon. Lines];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   IF BankAccReconLine.FINDLAST THEN
                     LastBankAccReconStmtLineNo := BankAccReconLine."Statement Line No."
                 END;

  }
  DATASET
  {
    { 4558;    ;DataItem;                    ;
               DataItemTable=Table270;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF EndDate = 0D THEN
                                 ERROR(Text000);

                               BankAccReconLine.FilterBankRecLines(BankAccRecon);
                               IF NOT BankAccReconLine.FINDLAST THEN BEGIN
                                 BankAccReconLine."Statement Type" := BankAccRecon."Statement Type";
                                 BankAccReconLine."Bank Account No." := BankAccRecon."Bank Account No.";
                                 BankAccReconLine."Statement No." := BankAccRecon."Statement No.";
                                 BankAccReconLine."Statement Line No." := 0;
                               END;
                               LastBankAccReconStmtLineNo := BankAccReconLine."Statement Line No.";
                               SETRANGE("No.",BankAccRecon."Bank Account No.");
                             END;

               OnAfterGetRecord=BEGIN
                                  EOFBankAccLedgEntries := TRUE;
                                  EOFCheckLedgEntries := TRUE;
                                  EOFBACSLedgEntries := TRUE;

                                  BankAccLedgEntry.RESET;
                                  BankAccLedgEntry.SETCURRENTKEY("Bank Account No.","Posting Date");
                                  BankAccLedgEntry.SETRANGE("Bank Account No.","No.");
                                  BankAccLedgEntry.SETRANGE("Posting Date",StartDate,EndDate);
                                  BankAccLedgEntry.SETRANGE(Open,TRUE);
                                  BankAccLedgEntry.SETRANGE("Statement Status",BankAccLedgEntry."Statement Status"::Open);
                                  EOFBankAccLedgEntries := NOT BankAccLedgEntry.FIND('-');

                                  IF IncludeChecks THEN BEGIN
                                    CheckLedgEntry.RESET;
                                    CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Check Date");
                                    CheckLedgEntry.SETRANGE("Bank Account No.","No.");
                                    CheckLedgEntry.SETRANGE("Check Date",StartDate,EndDate);
                                    CheckLedgEntry.SETFILTER(
                                      "Entry Status",'%1|%2',CheckLedgEntry."Entry Status"::Posted,
                                      CheckLedgEntry."Entry Status"::"Financially Voided");
                                    CheckLedgEntry.SETRANGE(Open,TRUE);
                                    CheckLedgEntry.SETRANGE("Statement Status",BankAccLedgEntry."Statement Status"::Open);
                                    EOFCheckLedgEntries := NOT CheckLedgEntry.FIND('-');
                                  END;

                                  IF TypeOfBACSEntry <> TypeOfBACSEntry::No THEN BEGIN
                                    BACSLedgEntry.RESET;
                                    BACSLedgEntry.SETCURRENTKEY("Bal. Account No.","BACS Date");
                                    BACSLedgEntry.SETRANGE("Bal. Account No.","No.");
                                    BACSLedgEntry.SETRANGE("BACS Date",StartDate,EndDate);
                                    BACSLedgEntry.SETFILTER(
                                      "Entry Status",'%1|%2',BACSLedgEntry."Entry Status"::Posted,
                                      BACSLedgEntry."Entry Status"::"Financially Voided");
                                    BACSLedgEntry.SETRANGE(Open,TRUE);
                                    BACSLedgEntry.SETRANGE("Statement Status",BankAccLedgEntry."Statement Status"::Open);
                                    EOFBACSLedgEntries := NOT BACSLedgEntry.FIND('-');
                                  END;

                                  WHILE (NOT EOFBankAccLedgEntries) OR (IncludeChecks AND (NOT EOFCheckLedgEntries))
                                        OR ((TypeOfBACSEntry <> TypeOfBACSEntry::No) AND (NOT EOFBACSLedgEntries))
                                  DO
                                    CASE TRUE OF
                                      (NOT IncludeChecks) AND (TypeOfBACSEntry = TypeOfBACSEntry::No):
                                        BEGIN
                                          EnterBankAccLine(BankAccLedgEntry);
                                          EOFBankAccLedgEntries := BankAccLedgEntry.NEXT = 0;
                                        END;
                                      (NOT EOFBankAccLedgEntries) AND (NOT EOFCheckLedgEntries) AND
                                      (BankAccLedgEntry."Posting Date" <= CheckLedgEntry."Check Date"):
                                        BEGIN
                                          CheckLedgEntry2.RESET;
                                          CheckLedgEntry2.SETCURRENTKEY("Bank Account Ledger Entry No.");
                                          CheckLedgEntry2.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
                                          CheckLedgEntry2.SETRANGE(Open,TRUE);

                                          IF NOT CheckLedgEntry2.FINDFIRST THEN BEGIN
                                            BACSLedgEntry2.RESET;
                                            BACSLedgEntry2.SETCURRENTKEY("Bank Account Ledger Entry No.");
                                            BACSLedgEntry2.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
                                            BACSLedgEntry2.SETRANGE(Open,TRUE);
                                            IF NOT BACSLedgEntry2.FINDFIRST THEN
                                              EnterBankAccLine(BankAccLedgEntry);
                                          END;

                                          EOFBankAccLedgEntries := BankAccLedgEntry.NEXT = 0;
                                        END;
                                      (NOT EOFBankAccLedgEntries) AND (NOT EOFCheckLedgEntries) AND
                                      (BankAccLedgEntry."Posting Date" > CheckLedgEntry."Check Date"):
                                        BEGIN
                                          EnterCheckLine(CheckLedgEntry);
                                          EOFCheckLedgEntries := CheckLedgEntry.NEXT = 0;
                                        END;
                                      (NOT EOFBankAccLedgEntries) AND EOFCheckLedgEntries:
                                        BEGIN
                                          CheckLedgEntry2.RESET;
                                          CheckLedgEntry2.SETCURRENTKEY("Bank Account Ledger Entry No.");
                                          CheckLedgEntry2.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
                                          CheckLedgEntry2.SETRANGE(Open,TRUE);

                                          IF NOT CheckLedgEntry2.FINDFIRST THEN BEGIN
                                            BACSLedgEntry2.RESET;
                                            BACSLedgEntry2.SETCURRENTKEY("Bank Account Ledger Entry No.");
                                            BACSLedgEntry2.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
                                            BACSLedgEntry2.SETRANGE(Open,TRUE);
                                            IF NOT BACSLedgEntry2.FINDFIRST THEN
                                              EnterBankAccLine(BankAccLedgEntry);
                                          END;

                                          EOFBankAccLedgEntries := BankAccLedgEntry.NEXT = 0;
                                        END;
                                      EOFBankAccLedgEntries AND (NOT EOFCheckLedgEntries):
                                        BEGIN
                                          EnterCheckLine(CheckLedgEntry);
                                          EOFCheckLedgEntries := CheckLedgEntry.NEXT = 0;
                                        END;
                                      EOFBankAccLedgEntries AND EOFCheckLedgEntries AND (NOT EOFBACSLedgEntries): // BACS
                                        BEGIN
                                          EnterBACSLine(BACSLedgEntry);
                                          EOFBACSLedgEntries := BACSLedgEntry.NEXT = 0;
                                        END;
                                    END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 5   ;2   ;Group     ;
                  CaptionML=[ENU=Statement Period;
                             ENG=Statement Period] }

      { 1   ;3   ;Field     ;
                  Name=StartingDate;
                  CaptionML=[ENU=Starting Date;
                             ENG=Starting Date];
                  SourceExpr=StartDate }

      { 3   ;3   ;Field     ;
                  Name=EndingDate;
                  CaptionML=[ENU=Ending Date;
                             ENG=Ending Date];
                  SourceExpr=EndDate }

      { 8   ;2   ;Field     ;
                  CaptionML=[ENU=Include Checks;
                             ENG=Include Cheques];
                  SourceExpr=IncludeChecks }

      { 1040001;2;Field     ;
                  Name=IncludeBACS;
                  CaptionML=[ENU=Include BACS;
                             ENG=Include BACS];
                  OptionCaptionML=[ENU=No,BACS Ledger Entries,BACS Registers;
                                   ENG=No,BACS Ledger Entries,BACS Registers];
                  SourceExpr=TypeOfBACSEntry }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Enter the Ending Date.;ENG=Enter the Ending Date.';
      BankAccLedgEntry@1001 : Record 271;
      CheckLedgEntry@1002 : Record 272;
      CheckLedgEntry2@1003 : Record 272;
      BACSLedgEntry@1040000 : Record 10550;
      BACSLedgEntry2@1040001 : Record 10550;
      BankAccRecon@1004 : Record 273;
      BankAccReconLine@1005 : Record 274;
      BankAccSetStmtNo@1006 : Codeunit 375;
      CheckSetStmtNo@1007 : Codeunit 376;
      BACSSetStmtNo@1040002 : Codeunit 10551;
      StartDate@1008 : Date;
      EndDate@1009 : Date;
      IncludeChecks@1010 : Boolean;
      EOFBankAccLedgEntries@1011 : Boolean;
      EOFCheckLedgEntries@1012 : Boolean;
      EOFBACSLedgEntries@1040003 : Boolean;
      TypeOfBACSEntry@1040005 : 'No,BACS Ledger Entries,BACS Registers';
      Text1040006@1040004 : TextConst 'ENU=BACS Register %1;ENG=BACS Register %1';
      LastBankAccReconStmtLineNo@1040006 : Integer;

    PROCEDURE SetStmt@1(VAR BankAccRecon2@1000 : Record 273);
    BEGIN
      BankAccRecon := BankAccRecon2;
      EndDate := BankAccRecon."Statement Date";
    END;

    LOCAL PROCEDURE EnterBankAccLine@2(VAR BankAccLedgEntry2@1000 : Record 271);
    BEGIN
      BankAccReconLine.INIT;
      BankAccReconLine."Statement Line No." := LastBankAccReconStmtLineNo + 10000;
      BankAccReconLine."Transaction Date" := BankAccLedgEntry2."Posting Date";
      BankAccReconLine.Description := BankAccLedgEntry2.Description;
      BankAccReconLine."Document No." := BankAccLedgEntry2."Document No.";
      BankAccReconLine."Statement Amount" := BankAccLedgEntry2."Remaining Amount";
      BankAccReconLine."Applied Amount" := BankAccReconLine."Statement Amount";
      BankAccReconLine.Type := BankAccReconLine.Type::"Bank Account Ledger Entry";
      BankAccReconLine."Applied Entries" := 1;
      BankAccSetStmtNo.SetReconNo(BankAccLedgEntry2,BankAccReconLine);
      BankAccReconLine.INSERT;
      LastBankAccReconStmtLineNo := BankAccReconLine."Statement Line No.";
    END;

    LOCAL PROCEDURE EnterCheckLine@3(VAR CheckLedgEntry3@1000 : Record 272);
    BEGIN
      BankAccReconLine.INIT;
      BankAccReconLine."Statement Line No." := LastBankAccReconStmtLineNo + 10000;
      BankAccReconLine."Transaction Date" := CheckLedgEntry3."Check Date";
      BankAccReconLine.Description := CheckLedgEntry3.Description;
      BankAccReconLine."Statement Amount" := -CheckLedgEntry3.Amount;
      BankAccReconLine."Applied Amount" := BankAccReconLine."Statement Amount";
      BankAccReconLine.Type := BankAccReconLine.Type::"Check Ledger Entry";
      BankAccReconLine."Check No." := CheckLedgEntry3."Check No.";
      BankAccReconLine."Applied Entries" := 1;
      CheckSetStmtNo.SetReconNo(CheckLedgEntry3,BankAccReconLine);
      BankAccReconLine.INSERT;
      LastBankAccReconStmtLineNo := BankAccReconLine."Statement Line No.";
    END;

    PROCEDURE InitializeRequest@4(NewStartDate@1000 : Date;NewEndDate@1001 : Date;NewIncludeChecks@1002 : Boolean;NewTypeOfBACSEntry@1040000 : Option);
    BEGIN
      StartDate := NewStartDate;
      EndDate := NewEndDate;
      IncludeChecks := NewIncludeChecks;
      TypeOfBACSEntry := NewTypeOfBACSEntry;
    END;

    LOCAL PROCEDURE EnterBACSLine@1041000(VAR BACSLedgEntry3@1040006 : Record 10550);
    BEGIN
      IF (TypeOfBACSEntry = TypeOfBACSEntry::"BACS Registers") AND (BACSLedgEntry3."Register No." <> 0) THEN BEGIN
        IF BACSSetStmtNo.GroupReconNo(BACSLedgEntry3,BankAccReconLine) THEN BEGIN
          BankAccReconLine."Applied Amount" := BankAccReconLine."Statement Amount";
          BankAccReconLine.MODIFY;
        END ELSE BEGIN
          BankAccReconLine.INIT;
          BankAccReconLine."Statement Line No." := LastBankAccReconStmtLineNo + 10000;
          BankAccReconLine."Transaction Date" := BACSLedgEntry3."BACS Date";
          BankAccReconLine.Description := STRSUBSTNO(Text1040006,BACSLedgEntry3."Register No.");
          BankAccReconLine."Statement Amount" := -BACSLedgEntry3.Amount;
          BankAccReconLine."Applied Amount" := BankAccReconLine."Statement Amount";
          BankAccReconLine.Type := BankAccReconLine.Type::"BACS Register";
          BankAccReconLine."Document No." := FORMAT(BACSLedgEntry3."Register No.");
          BankAccReconLine."Applied Entries" := 1;
          BACSSetStmtNo.SetReconNo(BACSLedgEntry3,BankAccReconLine);
          BankAccReconLine.INSERT;
          LastBankAccReconStmtLineNo := BankAccReconLine."Statement Line No.";
        END;
      END ELSE BEGIN
        BankAccReconLine.INIT;
        BankAccReconLine."Statement Line No." := BankAccReconLine."Statement Line No." + 10000;
        BankAccReconLine."Transaction Date" := BACSLedgEntry3."BACS Date";
        BankAccReconLine.Description := BACSLedgEntry3.Description;
        BankAccReconLine."Statement Amount" := -BACSLedgEntry3.Amount;
        BankAccReconLine."Applied Amount" := BankAccReconLine."Statement Amount";
        BankAccReconLine.Type := BankAccReconLine.Type::"BACS Ledger Entry";
        BankAccReconLine."Document No." := BACSLedgEntry3."Document No.";
        BankAccReconLine."Applied Entries" := 1;
        BACSSetStmtNo.SetReconNo(BACSLedgEntry3,BankAccReconLine);
        BankAccReconLine.INSERT;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

