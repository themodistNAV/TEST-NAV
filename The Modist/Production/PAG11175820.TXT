OBJECT Page 11175820 OM - Navigate
{
  OBJECT-PROPERTIES
  {
    Date=19/11/15;
    Time=12:00:00 PM;
    Version List=OMA10.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Navigate;
               ENU=Navigate;
               ESP=Navigate;
               FRA=Navigate;
               NLD=Navigeren;
               DEA=Navigate];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table2000000026;
    DataCaptionExpr=GetCaptionText;
    PageType=ListPlus;
    SourceTableTemporary=Yes;
    OnOpenPage=BEGIN
                 AddFieldRelation(DATABASE::"OM - Project Object", 2, 3);
                 AddFieldRelation(DATABASE::"OM - Modification", 2, 3);
                 AddFieldValueRelation(DATABASE::"OM - Action", 5, 20, 0, Object.Type::Table);
                 AddFieldValueRelation(DATABASE::"OM - Action", 5, 20, 1, Object.Type::Table);
                 AddFieldValueRelation(DATABASE::"OM - Action", 5, 20, 2, Object.Type::Table);
                 AddFieldValueRelation(DATABASE::"OM - Action", 5, 20, 3, Object.Type::Table);
                 AddFieldValueRelation(DATABASE::"OM - Action", 5, 20, 4, Object.Type::Report);
                 AddFieldValueRelation(DATABASE::"OM - Action", 5, 20, 5, Object.Type::Codeunit);
                 AddFieldValueRelation(DATABASE::"OM - Action", 5, 20, 6, Object.Type::"4");
                 AddFieldValueRelation(DATABASE::"OM - Action", 5, 20, 8, Object.Type::Report);
                 AddFieldValueRelation(DATABASE::"OM - Action", 5, 20, 9, Object.Type::Table);
                 AddConstRelation(DATABASE::"OM - Action", 24, Object.Type::Table);
                 AddConstRelation(DATABASE::"OM - Action Field", 6, Object.Type::Table);
                 AddConstRelation(DATABASE::"OM - Action Field", 10, Object.Type::Table);
                 AddFieldRelation(DATABASE::"OM - Project Permissions", 4, 5);
                 AddFieldRelation(DATABASE::"OM - C/AL History Object", 4, 5);
                 AddFieldRelation(DATABASE::"OM - Object Lock", 1, 2);
                 AddFieldRelation(DATABASE::"OM - Where Used Object", 1, 2);
                 AddConstRelation(DATABASE::"OM - Where Used Object", 14, Object.Type::Table);
                 AddFieldRelation(DATABASE::"OM - Where Used Object Line", 2, 3);
                 AddFieldRelation(DATABASE::"OM - Where Used Status", 1, 2);
                 AddFieldRelation(DATABASE::"OM - Where Used In", 2, 3);
                 AddFieldRelation(DATABASE::"OM - Object to Renumber", 1, 2);
                 AddFieldRelation(DATABASE::"OM - Object to Update Vars", 1, 2);
                 AddConstRelation(DATABASE::"OM - Field Compare Line", 1, Object.Type::Table);
                 AddFieldRelation(DATABASE::"OM - Translation Tool Line", 8, 9);
                 AddFieldRelation(DATABASE::"OM - Known Object Export Error", 1, 2);
                 AddConstRelation(DATABASE::"OM - Field to Renumber", 1, Object.Type::Table);
                 AddFieldRelation(DATABASE::"OM - Element to Renumber", 2, 3);
                 AddFieldRelation(DATABASE::"OM - Relation", 2, 3);
                 AddConstRelation(DATABASE::"OM - Relation", 5, Object.Type::Table);
                 AddFieldRelation(DATABASE::"OM - Object Import Line", 3, 4);
                 AddFieldRelation(DATABASE::"OM - Object Import Line", 3, 31);
                 AddFieldRelation(DATABASE::"OM - Check Guidelines Object", 1, 2);
                 AddFieldRelation(DATABASE::"OM - Check Guidelines Comment", 2, 3);
                 AddConstRelation(DATABASE::"OM - Check Transferfields Obj.", 1, Object.Type::Table);
                 AddConstRelation(DATABASE::"OM - Check Transferfields Obj.", 3, Object.Type::Table);
                 AddConstRelation(DATABASE::"OM - Check Transferfields Fld.", 1, Object.Type::Table);
                 AddConstRelation(DATABASE::"OM - Check Transferfields Fld.", 2, Object.Type::Table);
                 AddFieldRelation(DATABASE::"OM - Repository Log", 6, 7);
                 AddConstRelation(DATABASE::"OM - Test", 4, Object.Type::Codeunit);
                 AddConstRelation(DATABASE::"OM - MenuSuite Node", 3, Object.Type::MenuSuite);
                 AddFieldRelation(DATABASE::"OM - MenuSuite Node", 13, 14);

                 CalculateEntries;
               END;

    OnAfterGetCurrRecord=BEGIN
                           ShowEnabled := Number <> 0;
                         END;

    ActionList=ACTIONS
    {
      { 15      ;0   ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 14      ;1   ;ActionGroup;
                      Name=Process;
                      CaptionML=[DEU=Process;
                                 ENU=Process;
                                 ESP=Process;
                                 FRA=Process;
                                 NLD=Verwerken;
                                 DEA=Process] }
      { 13      ;2   ;Action    ;
                      Name=Show;
                      CaptionML=[DEU=&Show Related Entries;
                                 ENU=&Show Related Entries;
                                 ESP=&Show Related Entries;
                                 FRA=&Show Related Entries;
                                 NLD=&Verwante posten weergeven;
                                 DEA=&Show Related Entries];
                      Promoted=Yes;
                      Enabled=ShowEnabled;
                      PromotedIsBig=Yes;
                      Image=ViewDocumentLine;
                      PromotedCategory=Process;
                      RunPageMode=View;
                      OnAction=BEGIN
                                 ShowRecords;
                               END;
                                }
      { 12      ;2   ;Action    ;
                      Name=Find;
                      CaptionML=[DEU=Fi&nd;
                                 ENU=Fi&nd;
                                 ESP=Fi&nd;
                                 FRA=Fi&nd;
                                 NLD=Zoeke&n;
                                 DEA=Fi&nd];
                      Promoted=Yes;
                      Enabled=FiltersChanged;
                      PromotedIsBig=Yes;
                      Image=Find;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CalculateEntries;
                                 FiltersChanged := FALSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                ContainerType=ContentArea }

    { 4   ;1   ;Group     ;
                CaptionML=[DEU=Object;
                           ENU=Object;
                           ESP=Object;
                           FRA=Object;
                           NLD=Object;
                           DEA=Object];
                GroupType=Group }

    { 2   ;2   ;Field     ;
                CaptionML=[DEU=Type;
                           ENU=Type;
                           ESP=Type;
                           FRA=Type;
                           NLD=Soort;
                           DEA=Type];
                SourceExpr=Object.Type;
                OnValidate=BEGIN
                             FiltersChanged := TRUE;
                           END;
                            }

    { 3   ;2   ;Field     ;
                CaptionML=[DEU=No.;
                           ENU=No.;
                           ESP=No.;
                           FRA=No.;
                           NLD=Nr.;
                           DEA=No.];
                SourceExpr=ObjectNo;
                OnValidate=BEGIN
                             FiltersChanged := TRUE;
                           END;
                            }

    { 5   ;1   ;Group     ;
                GroupType=Repeater }

    { 7   ;2   ;Field     ;
                CaptionML=[DEU=Related Entries;
                           ENU=Related Entries;
                           ESP=Related Entries;
                           FRA=Related Entries;
                           NLD=Verwante posten;
                           DEA=Related Entries];
                SourceExpr=GetTableCaption }

    { 6   ;2   ;Field     ;
                DrillDown=Yes;
                CaptionML=[DEU=No. of Entries;
                           ENU=No. of Entries;
                           ESP=No. of Entries;
                           FRA=No. of Entries;
                           NLD=Aantal posten;
                           DEA=No. of Entries];
                SourceExpr=GetNoOfEntries;
                OnDrillDown=BEGIN
                              ShowRecords;
                            END;
                             }

  }
  CODE
  {
    VAR
      Object@1000 : Record 2000000001;
      FieldValues@1001 : ARRAY [50] OF Integer;
      NoOfEntriesArray@1002 : ARRAY [50] OF Integer;
      NoOfRecords@1003 : Integer;
      NoOfRelations@1004 : Integer;
      ObjectNo@1005 : Integer;
      ObjectNoArray@1006 : ARRAY [50] OF Integer;
      ObjectNoFieldNos@1007 : ARRAY [50] OF Integer;
      ObjectTypeFieldNos@1008 : ARRAY [50] OF Integer;
      ObjectTypes@1009 : ARRAY [50] OF Integer;
      RelationTypes@1010 : ARRAY [50] OF Integer;
      TableNos@1011 : ARRAY [50] OF Integer;
      RelationType@1012 : 'Field,Const,Field Value';
      FiltersChanged@1013 : Boolean;
      ShowEnabled@1014 : Boolean INDATASET;

    LOCAL PROCEDURE GetCaptionText@48() : Text;
    VAR
      Object2@1000 : Record 2000000001;
      PageCaptionTxt@1001 : TextConst 'DEU=Selected - %1;ENU=Selected - %1;ESP=Selected - %1;FRA=Selected - %1;NLD=Geselecteerd - %1;DEA=Selected - %1';
    BEGIN
      IF Object2.GET(Object2.Type::Table, '', Number) THEN BEGIN
        Object2.CALCFIELDS(Caption);
        EXIT(STRSUBSTNO(PageCaptionTxt, Object2.Caption));
      END;

      EXIT('');
    END;

    LOCAL PROCEDURE CalculateEntries@2();
    VAR
      RecRef@1000 : RecordRef;
      i@1001 : Integer;
    BEGIN
      DELETEALL;
      NoOfRecords := 0;

      FiltersChanged := FALSE;

      FOR i := 1 TO NoOfRelations DO BEGIN
        RecRef.OPEN(TableNos[i]);
        IF FilterRecRef(RecRef, i) THEN
          AddEntry(TableNos[i], RecRef.COUNT);
        RecRef.CLOSE;
      END;
      IF FINDSET THEN
        ;
    END;

    LOCAL PROCEDURE GetTableCaption@3() : Text;
    VAR
      Object2@1000 : Record 2000000001;
    BEGIN
      IF Object2.GET(Object.Type::Table, '', Number) THEN BEGIN
        Object2.CALCFIELDS(Caption);
        EXIT(Object2.Caption);
      END;
    END;

    LOCAL PROCEDURE GetNoOfEntries@4() : Integer;
    VAR
      i@1000 : Integer;
    BEGIN
      FOR i := 1 TO NoOfRecords DO
        IF ObjectNoArray[i] = Number THEN
          EXIT(NoOfEntriesArray[i]);
    END;

    LOCAL PROCEDURE FilterRecRef@13(VAR RecRef@1000 : RecordRef;RelationNo@1001 : Integer) : Boolean;
    BEGIN
      CASE RelationTypes[RelationNo] OF
        RelationType::Field :
          EXIT(FilterRecRefField(RecRef, RelationNo));

        RelationType::Const :
          EXIT(FilterRecRefConst(RecRef, RelationNo));

        RelationType::"Field Value" :
          EXIT(FilterRecRefFieldValue(RecRef, RelationNo));

      END;
    END;

    LOCAL PROCEDURE FilterRecRefField@5(VAR RecRef@1000 : RecordRef;RelationNo@1001 : Integer) : Boolean;
    VAR
      FldRef@1002 : FieldRef;
    BEGIN
      RecRef.RESET;

      FldRef := RecRef.FIELD(ObjectTypeFieldNos[RelationNo]);
      FldRef.SETRANGE(Object.Type);

      FldRef := RecRef.FIELD(ObjectNoFieldNos[RelationNo]);
      FldRef.SETRANGE(ObjectNo);

      EXIT(NOT RecRef.ISEMPTY);
    END;

    LOCAL PROCEDURE FilterRecRefConst@11(VAR RecRef@1000 : RecordRef;RelationNo@1001 : Integer) : Boolean;
    VAR
      FldRef@1002 : FieldRef;
    BEGIN
      RecRef.RESET;

      IF ObjectTypes[RelationNo] <> Object.Type THEN
        EXIT;

      FldRef := RecRef.FIELD(ObjectNoFieldNos[RelationNo]);
      FldRef.SETRANGE(ObjectNo);

      EXIT(NOT RecRef.ISEMPTY);
    END;

    LOCAL PROCEDURE FilterRecRefFieldValue@10(VAR RecRef@1000 : RecordRef;RelationNo@1001 : Integer) : Boolean;
    VAR
      FldRef@1002 : FieldRef;
    BEGIN
      RecRef.RESET;

      IF ObjectTypes[RelationNo] <> Object.Type THEN
        EXIT;

      FldRef := RecRef.FIELD(ObjectTypeFieldNos[RelationNo]);
      FldRef.SETRANGE(FieldValues[RelationNo]);

      FldRef := RecRef.FIELD(ObjectNoFieldNos[RelationNo]);
      FldRef.SETRANGE(ObjectNo);

      EXIT(NOT RecRef.ISEMPTY);
    END;

    LOCAL PROCEDURE AddEntry@6(TableNo@1000 : Integer;NoOfEntries@1001 : Integer);
    VAR
      i@1002 : Integer;
    BEGIN
      FOR i := 1 TO NoOfRecords DO
        IF ObjectNoArray[i] = TableNo THEN BEGIN
          NoOfEntriesArray[NoOfRecords] += NoOfEntries;
          EXIT;
        END;

      Number := TableNo;
      INSERT;

      NoOfRecords += 1;
      ObjectNoArray[NoOfRecords] := TableNo;
      NoOfEntriesArray[NoOfRecords] := NoOfEntries;
    END;

    LOCAL PROCEDURE AddFieldRelation@7(TableNo@1000 : Integer;ObjectTypeFieldNo@1001 : Integer;ObjectNoFieldNo@1002 : Integer);
    BEGIN
      NoOfRelations += 1;
      RelationTypes[NoOfRelations] := RelationType::Field;
      TableNos[NoOfRelations] := TableNo;
      ObjectTypeFieldNos[NoOfRelations] := ObjectTypeFieldNo;
      ObjectNoFieldNos[NoOfRelations] := ObjectNoFieldNo;
    END;

    LOCAL PROCEDURE AddFieldValueRelation@8(TableNo@1000 : Integer;ObjectTypeFieldNo@1001 : Integer;ObjectNoFieldNo@1002 : Integer;FieldValue@1003 : Integer;ObjectType2@1004 : Integer);
    BEGIN
      NoOfRelations += 1;
      RelationTypes[NoOfRelations] := RelationType::"Field Value";
      TableNos[NoOfRelations] := TableNo;
      ObjectTypeFieldNos[NoOfRelations] := ObjectTypeFieldNo;
      ObjectNoFieldNos[NoOfRelations] := ObjectNoFieldNo;
      FieldValues[NoOfRelations] := FieldValue;
      ObjectTypes[NoOfRelations] := ObjectType2;
    END;

    LOCAL PROCEDURE AddConstRelation@9(TableNo@1000 : Integer;ObjectNoFieldNo@1001 : Integer;ObjectType2@1002 : Integer);
    BEGIN
      NoOfRelations += 1;
      RelationTypes[NoOfRelations] := RelationType::Const;
      TableNos[NoOfRelations] := TableNo;
      ObjectNoFieldNos[NoOfRelations] := ObjectNoFieldNo;
      ObjectTypes[NoOfRelations] := ObjectType2;
    END;

    LOCAL PROCEDURE ShowRecords@1();
    VAR
      ProjectObject@1000 : Record 11102037;
      TmpProjectObject@1001 : TEMPORARY Record 11102037;
      Modification@1002 : Record 11102042;
      TmpModification@1003 : TEMPORARY Record 11102042;
      ProjectPermissions@1004 : Record 11102050;
      TmpProjectPermissions@1005 : TEMPORARY Record 11102050;
      CALHistoryObject@1006 : Record 11102052;
      TmpCALHistoryObject@1007 : TEMPORARY Record 11102052;
      ObjectLock@1008 : Record 11102054;
      TmpObjectLock@1009 : TEMPORARY Record 11102054;
      TmpWhereUsedObject@1010 : TEMPORARY Record 11102057;
      WhereUsedObject@1011 : Record 11102057;
      TmpWhereUsedObjectLine@1012 : TEMPORARY Record 11102058;
      WhereUsedObjectLine@1013 : Record 11102058;
      ObjectToRenumber@1014 : Record 11102063;
      TmpObjectToRenumber@1015 : TEMPORARY Record 11102063;
      ObjectToUpdateVars@1016 : Record 11102064;
      TmpObjectToUpdateVars@1017 : TEMPORARY Record 11102064;
      FieldCompareLine@1018 : Record 11102067;
      TmpFieldCompareLine@1019 : TEMPORARY Record 11102067;
      TmpTranslationToolLine@1020 : TEMPORARY Record 11102068;
      TranslationToolLine@1021 : Record 11102068;
      KnownObjectExportError@1022 : Record 11102073;
      TmpKnownObjectExportError@1023 : TEMPORARY Record 11102073;
      FieldToRenumber@1024 : Record 11102074;
      TmpFieldToRenumber@1025 : TEMPORARY Record 11102074;
      ElementToRenumber@1026 : Record 11102076;
      TmpElementToRenumber@1027 : TEMPORARY Record 11102076;
      Relation@1028 : Record 11102078;
      TmpRelation@1029 : TEMPORARY Record 11102078;
      ObjectImportLine@1030 : Record 11102079;
      TmpObjectImportLine@1031 : TEMPORARY Record 11102079;
      CheckGuidelinesObject@1032 : Record 11102080;
      TmpCheckGuidelinesObject@1033 : TEMPORARY Record 11102080;
      CheckGuidelinesComment@1034 : Record 11102081;
      TmpCheckGuidelinesComment@1035 : TEMPORARY Record 11102081;
      CheckTransferfieldsObj@1036 : Record 11102083;
      TmpCheckTransferfieldsObj@1037 : TEMPORARY Record 11102083;
      CheckTransferfieldsFld@1038 : Record 11102084;
      TmpCheckTransferfieldsFld@1039 : TEMPORARY Record 11102084;
      RepositoryLog@1040 : Record 11102086;
      TmpRepositoryLog@1041 : TEMPORARY Record 11102086;
      Test@1042 : Record 11102089;
      TmpTest@1043 : TEMPORARY Record 11102089;
      MenuSuiteNode@1044 : Record 11102092;
      TmpMenuSuiteNode@1045 : TEMPORARY Record 11102092;
      RecRef@1046 : RecordRef;
      TempTableNeeded2@1047 : Boolean;
      ctCannotDrillDown@1048 : TextConst 'DEU=Drilldown not possible for table %1.;ENU=Drilldown not possible for table %1.;ESP=Drilldown not possible for table %1.;FRA=Drilldown not possible for table %1.;NLD=Drilldown niet mogelijk voor tabel %1.;DEA=Drilldown not possible for table %1.';
    BEGIN
      TempTableNeeded2 := TempTableNeeded;
      IF NOT TempTableNeeded2 THEN
        FilterRecRefCombined(RecRef);

      CASE Number OF

        DATABASE::"OM - Project Object":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpProjectObject);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpProjectObject);
          END ELSE BEGIN
            RecRef.SETTABLE(ProjectObject);
            PAGE.RUNMODAL(0, ProjectObject);
          END;

        DATABASE::"OM - Modification":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpModification);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpModification);
          END ELSE BEGIN
            RecRef.SETTABLE(Modification);
            PAGE.RUNMODAL(0, Modification);
          END;

        DATABASE::"OM - Project Permissions":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpProjectPermissions);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpProjectPermissions);
          END ELSE BEGIN
            RecRef.SETTABLE(ProjectPermissions);
            PAGE.RUNMODAL(0, ProjectPermissions);
          END;

        DATABASE::"OM - C/AL History Object":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpCALHistoryObject);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpCALHistoryObject);
          END ELSE BEGIN
            RecRef.SETTABLE(CALHistoryObject);
            PAGE.RUNMODAL(0, CALHistoryObject);
          END;

        DATABASE::"OM - Object Lock":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpObjectLock);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpObjectLock);
          END ELSE BEGIN
            RecRef.SETTABLE(ObjectLock);
            PAGE.RUNMODAL(0, ObjectLock);
          END;

        DATABASE::"OM - Where Used Object":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpWhereUsedObject);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpWhereUsedObject);
          END ELSE BEGIN
            RecRef.SETTABLE(WhereUsedObject);
            PAGE.RUNMODAL(0, WhereUsedObject);
          END;

        DATABASE::"OM - Where Used Object Line":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpWhereUsedObjectLine);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpWhereUsedObjectLine);
          END ELSE BEGIN
            RecRef.SETTABLE(WhereUsedObjectLine);
            PAGE.RUNMODAL(0, WhereUsedObjectLine);
          END;

        DATABASE::"OM - Object to Renumber":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpObjectToRenumber);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpObjectToRenumber);
          END ELSE BEGIN
            RecRef.SETTABLE(ObjectToRenumber);
            PAGE.RUNMODAL(0, ObjectToRenumber);
          END;

        DATABASE::"OM - Object to Update Vars":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpObjectToUpdateVars);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpObjectToUpdateVars);
          END ELSE BEGIN
            RecRef.SETTABLE(ObjectToUpdateVars);
            PAGE.RUNMODAL(0, ObjectToUpdateVars);
          END;

        DATABASE::"OM - Field Compare Line":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpFieldCompareLine);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpFieldCompareLine);
          END ELSE BEGIN
            RecRef.SETTABLE(FieldCompareLine);
            PAGE.RUNMODAL(0, FieldCompareLine);
          END;

        DATABASE::"OM - Translation Tool Line":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpTranslationToolLine);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpTranslationToolLine);
          END ELSE BEGIN
            RecRef.SETTABLE(TranslationToolLine);
            PAGE.RUNMODAL(0, TranslationToolLine);
          END;

        DATABASE::"OM - Known Object Export Error":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpKnownObjectExportError);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpKnownObjectExportError);
          END ELSE BEGIN
            RecRef.SETTABLE(KnownObjectExportError);
            PAGE.RUNMODAL(0, KnownObjectExportError);
          END;

        DATABASE::"OM - Field to Renumber":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpFieldToRenumber);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpFieldToRenumber);
          END ELSE BEGIN
            RecRef.SETTABLE(FieldToRenumber);
            PAGE.RUNMODAL(0, FieldToRenumber);
          END;

        DATABASE::"OM - Element to Renumber":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpElementToRenumber);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpElementToRenumber);
          END ELSE BEGIN
            RecRef.SETTABLE(ElementToRenumber);
            PAGE.RUNMODAL(0, ElementToRenumber);
          END;

        DATABASE::"OM - Relation":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpRelation);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpRelation);
          END ELSE BEGIN
            RecRef.SETTABLE(Relation);
            PAGE.RUNMODAL(0, Relation);
          END;

        DATABASE::"OM - Object Import Line":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpObjectImportLine);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpObjectImportLine);
          END ELSE BEGIN
            RecRef.SETTABLE(ObjectImportLine);
            PAGE.RUNMODAL(0, ObjectImportLine);
          END;

        DATABASE::"OM - Check Guidelines Object":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpCheckGuidelinesObject);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpCheckGuidelinesObject);
          END ELSE BEGIN
            RecRef.SETTABLE(CheckGuidelinesObject);
            PAGE.RUNMODAL(0, CheckGuidelinesObject);
          END;

        DATABASE::"OM - Check Guidelines Comment":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpCheckGuidelinesComment);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpCheckGuidelinesComment);
          END ELSE BEGIN
            RecRef.SETTABLE(CheckGuidelinesComment);
            PAGE.RUNMODAL(0, CheckGuidelinesComment);
          END;

        DATABASE::"OM - Check Transferfields Obj.":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpCheckTransferfieldsObj);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpCheckTransferfieldsObj);
          END ELSE BEGIN
            RecRef.SETTABLE(CheckTransferfieldsObj);
            PAGE.RUNMODAL(0, CheckTransferfieldsObj);
          END;

        DATABASE::"OM - Check Transferfields Fld.":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpCheckTransferfieldsFld);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpCheckTransferfieldsFld);
          END ELSE BEGIN
            RecRef.SETTABLE(CheckTransferfieldsFld);
            PAGE.RUNMODAL(0, CheckTransferfieldsFld);
          END;

        DATABASE::"OM - Repository Log":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpRepositoryLog);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpRepositoryLog);
          END ELSE BEGIN
            RecRef.SETTABLE(RepositoryLog);
            PAGE.RUNMODAL(0, RepositoryLog);
          END;

        DATABASE::"OM - Test":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpTest);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpTest);
          END ELSE BEGIN
            RecRef.SETTABLE(Test);
            PAGE.RUNMODAL(0, Test);
          END;

        DATABASE::"OM - MenuSuite Node":
          IF TempTableNeeded2 THEN BEGIN
            RecRef.GETTABLE(TmpMenuSuiteNode);
            FillRecRefTemporary(RecRef);
            PAGE.RUNMODAL(0, TmpMenuSuiteNode);
          END ELSE BEGIN
            RecRef.SETTABLE(MenuSuiteNode);
            PAGE.RUNMODAL(0, MenuSuiteNode);
          END;

        ELSE
          MESSAGE(ctCannotDrillDown, Number);

      END;
    END;

    LOCAL PROCEDURE FilterRecRefCombined@12(VAR RecRef@1000 : RecordRef);
    VAR
      i@1001 : Integer;
    BEGIN
      RecRef.OPEN(Number);
      FOR i := 1 TO NoOfRelations DO
        IF TableNos[i] = Number THEN
          IF FilterRecRef(RecRef, i) THEN
            EXIT;
    END;

    LOCAL PROCEDURE FillRecRefTemporary@19(VAR RecRef@1000 : RecordRef);
    VAR
      Fld@1001 : Record 2000000041;
      RecRef2@1002 : RecordRef;
      FldRef@1003 : FieldRef;
      FldRef2@1004 : FieldRef;
      i@1005 : Integer;
    BEGIN
      FOR i := 1 TO NoOfRelations DO
        IF TableNos[i] = Number THEN BEGIN
          RecRef2.OPEN(Number);
          IF FilterRecRef(RecRef2, i) THEN
            IF RecRef2.FINDSET THEN
              REPEAT
                Fld.SETRANGE(TableNo, RecRef.NUMBER);
                SetFieldTypeFilter(Fld);
                IF Fld.FINDSET THEN
                  REPEAT
                    FldRef := RecRef2.FIELD(Fld."No.");
                    FldRef2 := RecRef.FIELD(Fld."No.");
                    FldRef2.VALUE := FldRef.VALUE;
                  UNTIL Fld.NEXT = 0;
                IF RecRef.INSERT THEN
                  ;
              UNTIL RecRef2.NEXT = 0;
          RecRef2.CLOSE;
        END;
    END;

    LOCAL PROCEDURE TempTableNeeded@15() : Boolean;
    VAR
      RecRef@1000 : RecordRef;
      i@1001 : Integer;
      NoOfRelationsWithRecords@1002 : Integer;
    BEGIN
      RecRef.OPEN(Number);
      FOR i := 1 TO NoOfRelations DO
        IF TableNos[i] = Number THEN
          IF NoOfRelationsWithRecords <= 1 THEN
            IF FilterRecRef(RecRef, i) THEN
              NoOfRelationsWithRecords += 1;

      EXIT(NoOfRelationsWithRecords = 2);
    END;

    LOCAL PROCEDURE SetFieldTypeFilter@14(VAR Fld@1000 : Record 2000000041);
    VAR
      Filter@1001 : Text;
    BEGIN
      Filter :=
        FORMAT(Fld.Type::RecordID) + '|' +
        FORMAT(Fld.Type::Text) + '|' +
        FORMAT(Fld.Type::Code) + '|' +
        FORMAT(Fld.Type::GUID) + '|' +
        FORMAT(Fld.Type::Date) + '|' +
        FORMAT(Fld.Type::Time) + '|' +
        FORMAT(Fld.Type::DateFormula) + '|' +
        FORMAT(Fld.Type::Decimal) + '|' +
        FORMAT(Fld.Type::Integer) + '|' +
        FORMAT(Fld.Type::Option) + '|' +
        FORMAT(Fld.Type::Boolean) + '|' +
        FORMAT(Fld.Type::BigInteger) + '|' +
        FORMAT(Fld.Type::Duration) + '|' +
        FORMAT(Fld.Type::DateTime);

      Fld.SETFILTER(Type, Filter);
      Fld.SETRANGE(Class, Fld.Class::Normal);
    END;

    PROCEDURE SetObject@16(Object2@1000 : Record 2000000001);
    BEGIN
      Object.Type := Object2.Type;
      ObjectNo := Object2.ID;
    END;

    BEGIN
    END.
  }
}

