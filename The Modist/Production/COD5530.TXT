OBJECT Codeunit 5530 Calc. Item Availability
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempInvtEventBuf@1005 : TEMPORARY Record 5530;
      EntryNo@1000 : Integer;
      Text0000@1001 : TextConst 'ENU=Table %1 is not supported by the ShowDocument function.;ENG=Table %1 is not supported by the ShowDocument function.';

    PROCEDURE CalcNewInvtEventBuf@5(VAR Item@1008 : Record 27;ForecastName@1001 : Code[10];IncludeBlanketOrders@1006 : Boolean;ExcludeForecastBefore@1005 : Date;IncludePlan@1002 : Boolean);
    BEGIN
      IF Item.Type <> Item.Type::Inventory THEN
        EXIT;
      TempInvtEventBuf.RESET;
      TempInvtEventBuf.DELETEALL;

      GetDocumentEntries(TempInvtEventBuf,Item);
      IF (ForecastName <> '') OR IncludeBlanketOrders OR IncludePlan THEN
        GetAnticipatedDemand(TempInvtEventBuf,Item,ForecastName,ExcludeForecastBefore,IncludeBlanketOrders);
      IF IncludePlan THEN
        GetPlanningEntries(TempInvtEventBuf,Item);
    END;

    PROCEDURE GetInvEventBuffer@10(VAR RequestInvtEventBuf@1000 : Record 5530);
    BEGIN
      TempInvtEventBuf.RESET;
      TempInvtEventBuf.SETCURRENTKEY("Availability Date",Type);
      IF TempInvtEventBuf.FIND('-') THEN
        REPEAT
          RequestInvtEventBuf := TempInvtEventBuf;
          RequestInvtEventBuf.INSERT;
        UNTIL TempInvtEventBuf.NEXT = 0;
    END;

    LOCAL PROCEDURE GetDocumentEntries@1(VAR InvtEventBuf@1000 : Record 5530;VAR Item@1001 : Record 27);
    BEGIN
      GetSalesOrdersDemandEntries(InvtEventBuf,Item);
      GetServOrdersDemandEntries(InvtEventBuf,Item);
      GetJobOrdersDemandEntries(InvtEventBuf,Item);
      GetPurchRetOrderDemandEntries(InvtEventBuf,Item);
      GetProdOrderCompDemandEntries(InvtEventBuf,Item);
      GetTransOrderDemandEntries(InvtEventBuf,Item);
      GetQtyOnInventory(InvtEventBuf,Item);
      GetPurchOrderSupplyEntries(InvtEventBuf,Item);
      GetSalesRetOrderSupplyEntries(InvtEventBuf,Item);
      GetProdOrderSupplyEntries(InvtEventBuf,Item);
      GetTransferOrderSupplyEntries(InvtEventBuf,Item);
      GetAsmOrderDemandEntries(InvtEventBuf,Item);
      GetAsmOrderSupllyEntries(InvtEventBuf,Item);
    END;

    LOCAL PROCEDURE GetAnticipatedDemand@8(VAR InvtEventBuf@1003 : Record 5530;VAR Item@1002 : Record 27;ForecastName@1001 : Code[10];ExcludeForecastBefore@1000 : Date;IncludeBlanketOrders@1004 : Boolean);
    BEGIN
      IF ForecastName <> '' THEN
        GetRemainingForecast(InvtEventBuf,Item,ForecastName,ExcludeForecastBefore);
      IF IncludeBlanketOrders THEN
        GetBlanketSalesOrders(InvtEventBuf,Item);
    END;

    LOCAL PROCEDURE GetPlanningEntries@15(VAR InvtEventBuf@1001 : Record 5530;VAR Item@1000 : Record 27);
    BEGIN
      GetPlanningLines(InvtEventBuf,Item);
      GetPlanningComponents(InvtEventBuf,Item);
      GetPlanningTransDemand(InvtEventBuf,Item);
    END;

    LOCAL PROCEDURE GetQtyOnInventory@14(VAR InvtEventBuf@1001 : Record 5530;VAR Item@1000 : Record 27);
    VAR
      ItemLedgEntry@1002 : Record 32;
      FilterItemLedgEntry@1004 : Record 32;
      IncludeLocation@1003 : Boolean;
    BEGIN
      IF ItemLedgEntry.FindLinesWithItemToPlan(Item,FALSE) THEN BEGIN
        FilterItemLedgEntry.COPY(ItemLedgEntry);
        REPEAT
          IF ItemLedgEntry."Location Code" = '' THEN
            IncludeLocation := TRUE
          ELSE
            IncludeLocation := NOT IsInTransitLocation(ItemLedgEntry."Location Code");

          ItemLedgEntry.SETRANGE("Variant Code",ItemLedgEntry."Variant Code");
          ItemLedgEntry.SETRANGE("Location Code",ItemLedgEntry."Location Code");

          IF IncludeLocation THEN BEGIN
            ItemLedgEntry.CALCSUMS("Remaining Quantity");
            IF ItemLedgEntry."Remaining Quantity" <> 0 THEN BEGIN
              InvtEventBuf.TransferInventoryQty(ItemLedgEntry);
              InsertEntry(InvtEventBuf);
            END;
          END;

          ItemLedgEntry.FIND('+');
          ItemLedgEntry.COPYFILTERS(FilterItemLedgEntry);
        UNTIL ItemLedgEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetPurchOrderSupplyEntries@1018(VAR InvtEventBuf@1002 : Record 5530;VAR Item@1000 : Record 27);
    VAR
      PurchLine@1001 : Record 39;
    BEGIN
      IF PurchLine.FindLinesWithItemToPlan(Item,PurchLine."Document Type"::Order) THEN
        REPEAT
          InvtEventBuf.TransferFromPurchase(PurchLine);
          InsertEntry(InvtEventBuf);
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetSalesRetOrderSupplyEntries@1015(VAR InvtEventBuf@1002 : Record 5530;VAR Item@1001 : Record 27);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      IF SalesLine.FindLinesWithItemToPlan(Item,SalesLine."Document Type"::"Return Order") THEN
        REPEAT
          InvtEventBuf.TransferFromSalesReturn(SalesLine);
          InsertEntry(InvtEventBuf);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetProdOrderSupplyEntries@1014(VAR InvtEventBuf@1002 : Record 5530;VAR Item@1001 : Record 27);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      IF ProdOrderLine.FindLinesWithItemToPlan(Item,TRUE) THEN
        REPEAT
          InvtEventBuf.TransferFromProdOrder(ProdOrderLine);
          InsertEntry(InvtEventBuf);
        UNTIL ProdOrderLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetTransferOrderSupplyEntries@1012(VAR InvtEventBuf@1002 : Record 5530;VAR Item@1000 : Record 27);
    VAR
      TransLine@1001 : Record 5741;
    BEGIN
      IF TransLine.FindLinesWithItemToPlan(Item,TRUE,FALSE) THEN
        REPEAT
          InvtEventBuf.TransferFromInboundTransOrder(TransLine);
          InsertEntry(InvtEventBuf);
        UNTIL TransLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetSalesOrdersDemandEntries@1017(VAR InvtEventBuf@1002 : Record 5530;VAR Item@1000 : Record 27);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      IF SalesLine.FindLinesWithItemToPlan(Item,SalesLine."Document Type"::Order) THEN
        REPEAT
          InvtEventBuf.TransferFromSales(SalesLine);
          InsertEntry(InvtEventBuf);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetServOrdersDemandEntries@3(VAR InvtEventBuf@1002 : Record 5530;VAR Item@1000 : Record 27);
    VAR
      ServLine@1001 : Record 5902;
    BEGIN
      IF ServLine.FindLinesWithItemToPlan(Item) THEN
        REPEAT
          InvtEventBuf.TransferFromServiceNeed(ServLine);
          InsertEntry(InvtEventBuf);
        UNTIL ServLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetJobOrdersDemandEntries@4(VAR InvtEventBuf@1002 : Record 5530;VAR Item@1000 : Record 27);
    VAR
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      IF JobPlanningLine.FindLinesWithItemToPlan(Item) THEN
        REPEAT
          InvtEventBuf.TransferFromJobNeed(JobPlanningLine);
          InsertEntry(InvtEventBuf);
        UNTIL JobPlanningLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetPurchRetOrderDemandEntries@1016(VAR InvtEventBuf@1002 : Record 5530;VAR Item@1000 : Record 27);
    VAR
      PurchLine@1001 : Record 39;
    BEGIN
      IF PurchLine.FindLinesWithItemToPlan(Item,PurchLine."Document Type"::"Return Order") THEN
        REPEAT
          InvtEventBuf.TransferFromPurchReturn(PurchLine);
          InsertEntry(InvtEventBuf);
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetProdOrderCompDemandEntries@1013(VAR InvtEventBuf@1002 : Record 5530;VAR Item@1000 : Record 27);
    VAR
      ProdOrderComp@1001 : Record 5407;
    BEGIN
      IF ProdOrderComp.FindLinesWithItemToPlan(Item,TRUE) THEN
        REPEAT
          InvtEventBuf.TransferFromProdComp(ProdOrderComp);
          InsertEntry(InvtEventBuf);
        UNTIL ProdOrderComp.NEXT = 0;
    END;

    LOCAL PROCEDURE GetTransOrderDemandEntries@1011(VAR InvtEventBuf@1002 : Record 5530;VAR Item@1000 : Record 27);
    VAR
      TransLine@1001 : Record 5741;
    BEGIN
      IF TransLine.FindLinesWithItemToPlan(Item,FALSE,FALSE) THEN
        REPEAT
          InvtEventBuf.TransferFromOutboundTransOrder(TransLine);
          InsertEntry(InvtEventBuf);
        UNTIL TransLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetAsmOrderDemandEntries@20(VAR InvtEventBuf@1001 : Record 5530;VAR Item@1000 : Record 27);
    VAR
      AsmLine@1002 : Record 901;
    BEGIN
      IF AsmLine.FindLinesWithItemToPlan(Item,AsmLine."Document Type"::Order) THEN
        REPEAT
          InvtEventBuf.TransferFromAsmOrderLine(AsmLine);
          InsertEntry(InvtEventBuf);
        UNTIL AsmLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetAsmOrderSupllyEntries@21(VAR InvtEventBuf@1001 : Record 5530;VAR Item@1000 : Record 27);
    VAR
      AsmHeader@1002 : Record 900;
    BEGIN
      IF AsmHeader.FindLinesWithItemToPlan(Item,AsmHeader."Document Type"::Order) THEN
        REPEAT
          InvtEventBuf.TransferFromAsmOrder(AsmHeader);
          InsertEntry(InvtEventBuf);
        UNTIL AsmHeader.NEXT = 0;
    END;

    LOCAL PROCEDURE GetRemainingForecast@7(VAR InvtEventBuf@1001 : Record 5530;VAR Item@1000 : Record 27;ForecastName@1002 : Code[10];ExcludeForecastBefore@1010 : Date);
    VAR
      ItemLedgEntry@1014 : Record 32;
      MfgSetup@1004 : Record 99000765;
      ProdForecastEntry@1003 : Record 99000852;
      ProdForecastEntry2@1012 : Record 99000852;
      CopyOfInvtEventBuf@1018 : Record 5530;
      FromDate@1017 : Date;
      ToDate@1015 : Date;
      ForecastPeriodEndDate@1019 : Date;
      RemainingForecastQty@1016 : Decimal;
      ModuleLoop@1009 : Integer;
      ReplenishmentLocation@1008 : Code[10];
      LocationMandatory@1013 : Boolean;
      Module@1006 : Boolean;
    BEGIN
      // Include Forecast consumption
      CopyOfInvtEventBuf.COPY(InvtEventBuf);
      IF FORMAT(Item."Date Filter") <> '' THEN BEGIN
        FromDate := Item.GETRANGEMIN("Date Filter");
        ToDate := Item.GETRANGEMAX("Date Filter");
      END;
      IF FromDate = 0D THEN
        FromDate := WORKDATE;
      IF ToDate = 0D THEN
        ToDate := DMY2DATE(30,12,9999);

      MfgSetup.GET;
      IF NOT MfgSetup."Use Forecast on Locations" THEN BEGIN
        IF NOT FindReplishmentLocation(ReplenishmentLocation,Item,LocationMandatory) THEN
          ReplenishmentLocation := MfgSetup."Components at Location";
        IF LocationMandatory AND
           (ReplenishmentLocation = '')
        THEN
          EXIT;

        ProdForecastEntry.SETCURRENTKEY(
          "Production Forecast Name","Item No.","Component Forecast","Forecast Date","Location Code");
      END ELSE
        ProdForecastEntry.SETCURRENTKEY(
          "Production Forecast Name","Item No.","Location Code","Forecast Date","Component Forecast");

      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Location Code");

      ProdForecastEntry.SETRANGE("Production Forecast Name",ForecastName);
      ProdForecastEntry.SETRANGE("Forecast Date",ExcludeForecastBefore,ToDate);
      ProdForecastEntry.SETRANGE("Item No.",Item."No.");

      ProdForecastEntry2.COPY(ProdForecastEntry);
      Item.COPYFILTER("Location Filter",ProdForecastEntry2."Location Code");

      FOR ModuleLoop := 1 TO 2 DO BEGIN
        Module := ModuleLoop = 2;
        ProdForecastEntry.SETRANGE("Component Forecast",Module);
        ProdForecastEntry2.SETRANGE("Component Forecast",Module);
        IF ProdForecastEntry2.FINDSET THEN
          REPEAT
            IF MfgSetup."Use Forecast on Locations" THEN BEGIN
              ProdForecastEntry2.SETRANGE("Location Code",ProdForecastEntry2."Location Code");
              ItemLedgEntry.SETRANGE("Location Code",ProdForecastEntry2."Location Code");
              InvtEventBuf.SETRANGE("Location Code",ProdForecastEntry2."Location Code");
            END ELSE BEGIN
              Item.COPYFILTER("Location Filter",ProdForecastEntry2."Location Code");
              Item.COPYFILTER("Location Filter",ItemLedgEntry."Location Code");
              Item.COPYFILTER("Location Filter",InvtEventBuf."Location Code");
            END;
            ProdForecastEntry2.FINDLAST;
            ProdForecastEntry2.COPYFILTER("Location Code",ProdForecastEntry."Location Code");
            Item.COPYFILTER("Location Filter",ProdForecastEntry2."Location Code");

            IF ForecastExist(ProdForecastEntry,ExcludeForecastBefore,FromDate,ToDate) THEN
              REPEAT
                ProdForecastEntry.SETRANGE("Forecast Date",ProdForecastEntry."Forecast Date");
                ProdForecastEntry.FIND('+');
                ProdForecastEntry.CALCSUMS("Forecast Quantity (Base)");
                RemainingForecastQty := ProdForecastEntry."Forecast Quantity (Base)";
                ForecastPeriodEndDate := FindForecastPeriodEndDate(ProdForecastEntry,ToDate);

                ItemLedgEntry.SETRANGE("Item No.",Item."No.");
                ItemLedgEntry.SETRANGE(Positive,FALSE);
                ItemLedgEntry.SETRANGE(Open);
                ItemLedgEntry.SETRANGE(
                  "Posting Date",ProdForecastEntry."Forecast Date",ForecastPeriodEndDate);
                Item.COPYFILTER("Variant Filter",ItemLedgEntry."Variant Code");
                IF Module THEN BEGIN
                  ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Consumption);
                  IF ItemLedgEntry.FINDSET THEN
                    REPEAT
                      RemainingForecastQty += ItemLedgEntry.Quantity;
                    UNTIL ItemLedgEntry.NEXT = 0;
                END ELSE BEGIN
                  ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Sale);
                  IF ItemLedgEntry.FINDSET THEN BEGIN
                    REPEAT
                      IF NOT ItemLedgEntry."Derived from Blanket Order" THEN
                        RemainingForecastQty += ItemLedgEntry.Quantity;
                    UNTIL ItemLedgEntry.NEXT = 0;
                    // Undo shipment shall neutralize consumption from sales
                    RemainingForecastQty += AjustForUndoneShipments(ItemLedgEntry);
                  END;
                END;

                InvtEventBuf.SETRANGE("Item No.",ProdForecastEntry."Item No.");
                InvtEventBuf.SETRANGE(
                  "Availability Date",ProdForecastEntry."Forecast Date",ForecastPeriodEndDate);
                IF Module THEN
                  InvtEventBuf.SETRANGE(Type,InvtEventBuf.Type::Component)
                ELSE
                  InvtEventBuf.SETFILTER(Type,'%1|%2',InvtEventBuf.Type::Sale,InvtEventBuf.Type::Service);
                IF InvtEventBuf.FIND('-') THEN
                  REPEAT
                    IF NOT (InvtEventBuf.Positive OR InvtEventBuf."Derived from Blanket Order")
                    THEN
                      RemainingForecastQty += InvtEventBuf."Remaining Quantity (Base)";
                  UNTIL (InvtEventBuf.NEXT = 0) OR (RemainingForecastQty < 0);

                IF RemainingForecastQty < 0 THEN
                  RemainingForecastQty := 0;

                InvtEventBuf.TransferFromForecast(ProdForecastEntry,RemainingForecastQty,MfgSetup."Use Forecast on Locations");
                InsertEntry(InvtEventBuf);

                ProdForecastEntry.SETRANGE("Forecast Date",ExcludeForecastBefore,ToDate);
              UNTIL ProdForecastEntry.NEXT = 0;
          UNTIL ProdForecastEntry2.NEXT = 0;
      END;
      InvtEventBuf.COPY(CopyOfInvtEventBuf);
    END;

    LOCAL PROCEDURE GetBlanketSalesOrders@38(VAR InvtEventBuf@1006 : Record 5530;VAR Item@1004 : Record 27);
    VAR
      BlanketSalesLine@1003 : Record 37;
      CopyOfInvtEventBuf@1000 : Record 5530;
      QtyReleased@1005 : Decimal;
    BEGIN
      CopyOfInvtEventBuf.COPY(InvtEventBuf);

      WITH BlanketSalesLine DO BEGIN
        IF FindLinesWithItemToPlan(Item,"Document Type"::"Blanket Order") THEN
          REPEAT
            InvtEventBuf.SETRANGE(Type,InvtEventBuf.Type::Sale);
            InvtEventBuf.SETRANGE("Derived from Blanket Order",TRUE);
            InvtEventBuf.SETRANGE("Ref. Order No.","Document No.");
            InvtEventBuf.SETRANGE("Ref. Order Line No.","Line No.");
            IF InvtEventBuf.FIND('-') THEN
              REPEAT
                QtyReleased -= InvtEventBuf."Remaining Quantity (Base)";
              UNTIL InvtEventBuf.NEXT = 0;
            SETRANGE("Document No.","Document No.");
            SETRANGE("Line No.","Line No.");
            REPEAT
              IF "Outstanding Qty. (Base)" > QtyReleased THEN BEGIN
                InvtEventBuf.TransferFromSalesBlanketOrder(
                  BlanketSalesLine,"Outstanding Qty. (Base)" - QtyReleased);
                InsertEntry(InvtEventBuf);
                QtyReleased := 0;
              END ELSE
                QtyReleased -= "Outstanding Qty. (Base)";
            UNTIL NEXT = 0;
            SETRANGE("Document No.");
            SETRANGE("Line No.");
          UNTIL NEXT = 0;
      END;

      InvtEventBuf.COPY(CopyOfInvtEventBuf);
    END;

    LOCAL PROCEDURE GetPlanningLines@11(VAR InvtEventBuf@1000 : Record 5530;VAR Item@1001 : Record 27);
    VAR
      ReqLine@1002 : Record 246;
      RecRef@1003 : RecordRef;
    BEGIN
      // Planning suggestions
      WITH ReqLine DO BEGIN
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",Item."No.");
        SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
        SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
        IF FINDSET THEN
          REPEAT
            RecRef.GETTABLE(ReqLine);
            CASE "Action Message" OF
              "Action Message"::New:
                BEGIN
                  InvtEventBuf.TransferFromReqLine(ReqLine,"Location Code","Due Date","Quantity (Base)",RecRef.RECORDID);
                  InsertEntry(InvtEventBuf);
                END;
              "Action Message"::"Change Qty.":
                BEGIN
                  InvtEventBuf.TransferFromReqLine(ReqLine,"Location Code","Due Date",-GetOriginalQtyBase,RecRef.RECORDID);
                  InsertEntry(InvtEventBuf);

                  InvtEventBuf.TransferFromReqLine(ReqLine,"Location Code","Due Date","Quantity (Base)",RecRef.RECORDID);
                  InsertEntry(InvtEventBuf);
                END;
              "Action Message"::Reschedule:
                BEGIN
                  InvtEventBuf.TransferFromReqLine(ReqLine,"Location Code","Original Due Date",-"Quantity (Base)",RecRef.RECORDID);
                  InsertEntry(InvtEventBuf);

                  InvtEventBuf.TransferFromReqLine(ReqLine,"Location Code","Due Date","Quantity (Base)",RecRef.RECORDID);
                  InsertEntry(InvtEventBuf);
                END;
              "Action Message"::"Resched. & Chg. Qty.":
                BEGIN
                  InvtEventBuf.TransferFromReqLine(ReqLine,"Location Code","Original Due Date",-GetOriginalQtyBase,RecRef.RECORDID);
                  InsertEntry(InvtEventBuf);

                  InvtEventBuf.TransferFromReqLine(ReqLine,"Location Code","Due Date","Quantity (Base)",RecRef.RECORDID);
                  InsertEntry(InvtEventBuf);
                END;
              "Action Message"::Cancel:
                BEGIN
                  InvtEventBuf.TransferFromReqLine(ReqLine,"Location Code","Due Date",-GetOriginalQtyBase,RecRef.RECORDID);
                  InsertEntry(InvtEventBuf);
                END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetPlanningComponents@13(VAR InvtEventBuf@1001 : Record 5530;VAR Item@1000 : Record 27);
    VAR
      PlanningComp@1002 : Record 99000829;
      CopyOfInvtEventBuf@1003 : Record 5530;
      CameFromInvtEventBuf@1004 : Record 5530;
      ParentActionMessage@1005 : Option;
    BEGIN
      // Neutralize Prod. Orders Components as they might be replaced by planning components
      CopyOfInvtEventBuf.COPY(InvtEventBuf);
      InvtEventBuf.SETRANGE(Type,InvtEventBuf.Type::Component);
      InvtEventBuf.SETRANGE("Action Message",InvtEventBuf."Action Message"::" ");
      IF InvtEventBuf.FIND('-') THEN
        REPEAT
          CameFromInvtEventBuf.COPY(InvtEventBuf);
          IF ParentIsInPlanning(InvtEventBuf,ParentActionMessage) THEN BEGIN
            InvtEventBuf.PlanRevertEntry(InvtEventBuf,ParentActionMessage);
            InsertEntry(InvtEventBuf);
          END;
          InvtEventBuf.COPY(CameFromInvtEventBuf);
        UNTIL InvtEventBuf.NEXT = 0;
      InvtEventBuf.COPY(CopyOfInvtEventBuf);

      // Insert possible replacements
      IF PlanningComp.FindLinesWithItemToPlan(Item) THEN
        REPEAT
          InvtEventBuf.TransferFromPlanProdComp(PlanningComp);
          InsertEntry(InvtEventBuf);
        UNTIL PlanningComp.NEXT = 0;
    END;

    LOCAL PROCEDURE GetPlanningTransDemand@16(VAR InvtEventBuf@1001 : Record 5530;VAR Item@1000 : Record 27);
    VAR
      TransferReqLine@1002 : Record 246;
      TransLine@1003 : Record 5741;
    BEGIN
      TransferReqLine.SETCURRENTKEY("Replenishment System",Type,"No.","Variant Code","Transfer-from Code","Transfer Shipment Date");
      TransferReqLine.SETRANGE("Replenishment System",TransferReqLine."Replenishment System"::Transfer);
      TransferReqLine.SETRANGE(Type,TransferReqLine.Type::Item);
      TransferReqLine.SETRANGE("No.",Item."No.");
      Item.COPYFILTER("Location Filter",TransferReqLine."Transfer-from Code");
      Item.COPYFILTER("Variant Filter",TransferReqLine."Variant Code");
      Item.COPYFILTER("Date Filter",TransferReqLine."Transfer Shipment Date");
      IF TransferReqLine.FINDSET THEN
        REPEAT
          IF TransferReqLine."Action Message" <> TransferReqLine."Action Message"::New THEN BEGIN
            // Neutralize demand from the related document
            FindTransDemandToReplace(TransferReqLine,TransLine);
            InvtEventBuf.TransferFromOutboundTransOrder(TransLine);
            InvtEventBuf.PlanRevertEntry(InvtEventBuf,TransferReqLine."Action Message");
            InsertEntry(InvtEventBuf);
          END;
          InvtEventBuf.TransferFromReqLineTransDemand(TransferReqLine);
          InsertEntry(InvtEventBuf);
        UNTIL TransferReqLine.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertEntry@1034(VAR NewInvtEventBuffer@1000 : Record 5530);
    BEGIN
      NewInvtEventBuffer."Entry No." := NextEntryNo;
      NewInvtEventBuffer.INSERT;
    END;

    LOCAL PROCEDURE NextEntryNo@64() : Integer;
    BEGIN
      EntryNo += 1;
      EXIT(EntryNo);
    END;

    LOCAL PROCEDURE FindForecastPeriodEndDate@2(VAR ProdForecastEntry@1000 : Record 99000852;ToDate@1002 : Date) : Date;
    VAR
      NextProdForecastEntry@1001 : Record 99000852;
      NextForecastExist@1003 : Boolean;
    BEGIN
      NextProdForecastEntry.COPY(ProdForecastEntry);
      NextProdForecastEntry.SETRANGE("Forecast Date",ProdForecastEntry."Forecast Date" + 1,ToDate);
      IF NextProdForecastEntry.FINDFIRST THEN
        REPEAT
          NextProdForecastEntry.SETRANGE("Forecast Date",NextProdForecastEntry."Forecast Date");
          NextProdForecastEntry.CALCSUMS("Forecast Quantity (Base)");
          IF NextProdForecastEntry."Forecast Quantity (Base)" = 0 THEN BEGIN
            NextProdForecastEntry.SETRANGE("Forecast Date",NextProdForecastEntry."Forecast Date" + 1,ToDate);
            IF NOT NextProdForecastEntry.FINDLAST THEN
              NextProdForecastEntry."Forecast Date" := ToDate + 1;
          END ELSE
            NextForecastExist := TRUE;
        UNTIL (NextProdForecastEntry."Forecast Date" = ToDate + 1) OR NextForecastExist
      ELSE
        NextProdForecastEntry."Forecast Date" := ToDate + 1;
      EXIT(NextProdForecastEntry."Forecast Date" - 1);
    END;

    LOCAL PROCEDURE AjustForUndoneShipments@6(VAR ItemLedgEntry@1000 : Record 32) AdjustQty : Decimal;
    VAR
      CorItemLedgEntry@1001 : Record 32;
    BEGIN
      CorItemLedgEntry.COPY(ItemLedgEntry);
      CorItemLedgEntry.SETRANGE(Positive,TRUE);
      CorItemLedgEntry.SETRANGE(Correction,TRUE);
      IF CorItemLedgEntry.FINDSET THEN
        REPEAT
          IF NOT CorItemLedgEntry."Derived from Blanket Order" THEN
            AdjustQty += CorItemLedgEntry.Quantity;
        UNTIL CorItemLedgEntry.NEXT = 0;
      ItemLedgEntry.SETRANGE(Correction);
    END;

    LOCAL PROCEDURE ParentIsInPlanning@12(InvtEventBuf@1000 : Record 5530;VAR ParentActionMessage@1004 : Option) : Boolean;
    VAR
      ReqLine@1001 : Record 246;
      ProdOrderComp@1003 : Record 5407;
      RecRef@1005 : RecordRef;
      RecordID@1002 : RecordID;
    BEGIN
      // Check if the parent of a component line is represented with a planning suggestion
      RecordID := InvtEventBuf."Source Line ID";
      RecRef := RecordID.GETRECORD;
      RecRef.SETTABLE(ProdOrderComp);
      ReqLine.SETCURRENTKEY("Ref. Order Type","Ref. Order Status","Ref. Order No.","Ref. Line No.");
      ReqLine.SETRANGE("Ref. Order Type",ReqLine."Ref. Order Type"::"Prod. Order");
      ReqLine.SETRANGE("Ref. Order Status",ProdOrderComp.Status);
      ReqLine.SETRANGE("Ref. Order No.",ProdOrderComp."Prod. Order No.");
      ReqLine.SETRANGE("Ref. Line No.",ProdOrderComp."Prod. Order Line No.");
      ReqLine.SETRANGE("Operation No.",'');
      IF ReqLine.FINDFIRST THEN BEGIN
        ParentActionMessage := ReqLine."Action Message";
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE FindTransDemandToReplace@19(ReqLine@1001 : Record 246;VAR TransLine@1000 : Record 5741);
    BEGIN
      TransLine.GET(ReqLine."Ref. Order No.",ReqLine."Ref. Line No.");
    END;

    LOCAL PROCEDURE FindReplishmentLocation@42(VAR ReplenishmentLocation@1000 : Code[10];VAR Item@1003 : Record 27;VAR LocationMandatory@1004 : Boolean) : Boolean;
    VAR
      SKU@1001 : Record 5700;
      InvtSetup@1002 : Record 313;
    BEGIN
      InvtSetup.GET;
      LocationMandatory := InvtSetup."Location Mandatory";

      ReplenishmentLocation := '';
      SKU.SETCURRENTKEY("Item No.","Location Code","Variant Code");
      SKU.SETRANGE("Item No.",Item."No.");
      Item.COPYFILTER("Location Filter",SKU."Location Code");
      Item.COPYFILTER("Variant Filter",SKU."Variant Code");
      SKU.SETRANGE("Replenishment System",Item."Replenishment System"::Purchase,Item."Replenishment System"::"Prod. Order");
      SKU.SETFILTER("Reordering Policy",'<>%1',SKU."Reordering Policy"::" ");
      IF SKU.FIND('-') THEN
        IF SKU.NEXT = 0 THEN
          ReplenishmentLocation := SKU."Location Code";
      EXIT(ReplenishmentLocation <> '');
    END;

    LOCAL PROCEDURE IsInTransitLocation@17(LocationCode@1000 : Code[10]) : Boolean;
    VAR
      Location@1001 : Record 14;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Use As In-Transit");
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ForecastExist@36(VAR ProdForecastEntry@1000 : Record 99000852;ExcludeForecastBefore@1004 : Date;FromDate@1001 : Date;ToDate@1002 : Date) : Boolean;
    VAR
      ForecastExist@1003 : Boolean;
    BEGIN
      WITH ProdForecastEntry DO BEGIN
        SETRANGE("Forecast Date",ExcludeForecastBefore,FromDate);
        IF FIND('+') THEN
          REPEAT
            SETRANGE("Forecast Date","Forecast Date");
            CALCSUMS("Forecast Quantity (Base)");
            IF "Forecast Quantity (Base)" <> 0 THEN
              ForecastExist := TRUE
            ELSE
              SETRANGE("Forecast Date",ExcludeForecastBefore,"Forecast Date" - 1);
          UNTIL (NOT FIND('+')) OR ForecastExist;

        IF NOT ForecastExist THEN BEGIN
          IF ExcludeForecastBefore > FromDate THEN
            SETRANGE("Forecast Date",ExcludeForecastBefore,ToDate)
          ELSE
            SETRANGE("Forecast Date",FromDate + 1,ToDate);
          IF FIND('-') THEN
            REPEAT
              SETRANGE("Forecast Date","Forecast Date");
              CALCSUMS("Forecast Quantity (Base)");
              IF "Forecast Quantity (Base)" <> 0 THEN
                ForecastExist := TRUE
              ELSE
                SETRANGE("Forecast Date","Forecast Date" + 1,ToDate);
            UNTIL (NOT FIND('-')) OR ForecastExist
        END;
      END;
      EXIT(ForecastExist);
    END;

    PROCEDURE GetSourceReferences@18(FromRecordID@1000 : RecordID;TransferDirection@1002 : 'Outbound,Inbound';VAR SourceType@1010 : Integer;VAR SourceSubtype@1011 : '0,1,2,3,4,5,6,7,8,9,10';VAR SourceID@1012 : Code[20];VAR SourceBatchName@1013 : Code[10];VAR SourceProdOrderLine@1015 : Integer;VAR SourceRefNo@1016 : Integer) : Boolean;
    VAR
      ItemLedgEntry@1022 : Record 32;
      SalesLine@1021 : Record 37;
      PurchLine@1014 : Record 39;
      TransLine@1008 : Record 5741;
      ProdOrderLine@1005 : Record 5406;
      ProdOrderComp@1006 : Record 5407;
      PlngComp@1007 : Record 99000829;
      ProdForecastEntry@1004 : Record 99000852;
      ReqLine@1003 : Record 246;
      ServiceLine@1009 : Record 5902;
      JobPlngLine@1017 : Record 1003;
      AssemblyHeader@1018 : Record 900;
      AssemblyLine@1019 : Record 901;
      RecRef@1001 : RecordRef;
    BEGIN
      SourceType := 0;
      SourceSubtype := 0;
      SourceID := '';
      SourceBatchName := '';
      SourceProdOrderLine := 0;
      SourceRefNo := 0;

      RecRef := FromRecordID.GETRECORD;

      CASE FromRecordID.TABLENO OF
        DATABASE::"Item Ledger Entry":
          BEGIN
            RecRef.SETTABLE(ItemLedgEntry);
            SourceType := DATABASE::"Item Ledger Entry";
            SourceRefNo := ItemLedgEntry."Entry No.";
          END;
        DATABASE::"Sales Line":
          BEGIN
            RecRef.SETTABLE(SalesLine);
            SourceType := DATABASE::"Sales Line";
            SourceSubtype := SalesLine."Document Type";
            SourceID := SalesLine."Document No.";
            SourceRefNo := SalesLine."Line No.";
          END;
        DATABASE::"Purchase Line":
          BEGIN
            RecRef.SETTABLE(PurchLine);
            SourceType := DATABASE::"Purchase Line";
            SourceSubtype := PurchLine."Document Type";
            SourceID := PurchLine."Document No.";
            SourceRefNo := PurchLine."Line No.";
          END;
        DATABASE::"Transfer Line":
          BEGIN
            RecRef.SETTABLE(TransLine);
            SourceType := DATABASE::"Transfer Line";
            SourceSubtype := TransferDirection;
            TransLine.GET(TransLine."Document No.",TransLine."Line No.");
            SourceID := TransLine."Document No.";
            SourceProdOrderLine := TransLine."Derived From Line No.";
            SourceRefNo := TransLine."Line No.";
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            RecRef.SETTABLE(ProdOrderLine);
            SourceType := DATABASE::"Prod. Order Line";
            SourceSubtype := ProdOrderLine.Status;
            SourceID := ProdOrderLine."Prod. Order No.";
            SourceProdOrderLine := ProdOrderLine."Line No.";
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            RecRef.SETTABLE(ProdOrderComp);
            SourceType := DATABASE::"Prod. Order Component";
            SourceSubtype := ProdOrderComp.Status;
            SourceID := ProdOrderComp."Prod. Order No.";
            SourceProdOrderLine := ProdOrderComp."Prod. Order Line No.";
            SourceRefNo := ProdOrderComp."Line No.";
          END;
        DATABASE::"Planning Component":
          BEGIN
            RecRef.SETTABLE(PlngComp);
            SourceType := DATABASE::"Planning Component";
            SourceID := PlngComp."Worksheet Template Name";
            SourceBatchName := PlngComp."Worksheet Batch Name";
            SourceProdOrderLine := PlngComp."Worksheet Line No.";
            SourceRefNo := PlngComp."Line No.";
          END;
        DATABASE::"Requisition Line":
          BEGIN
            RecRef.SETTABLE(ReqLine);
            SourceType := DATABASE::"Requisition Line";
            SourceSubtype := TransferDirection;
            SourceID := ReqLine."Worksheet Template Name";
            SourceBatchName := ReqLine."Journal Batch Name";
            SourceRefNo := ReqLine."Line No.";
          END;
        DATABASE::"Service Line":
          BEGIN
            RecRef.SETTABLE(ServiceLine);
            SourceType := DATABASE::"Service Line";
            SourceSubtype := ServiceLine."Document Type";
            SourceID := ServiceLine."Document No.";
            SourceRefNo := ServiceLine."Line No.";
          END;
        DATABASE::"Job Planning Line":
          BEGIN
            RecRef.SETTABLE(JobPlngLine);
            SourceType := DATABASE::"Job Planning Line";
            JobPlngLine.GET(JobPlngLine."Job No.",JobPlngLine."Job Task No.",JobPlngLine."Line No.");
            SourceSubtype := JobPlngLine.Status;
            SourceID := JobPlngLine."Job No.";
            SourceRefNo := JobPlngLine."Job Contract Entry No.";
          END;
        DATABASE::"Production Forecast Entry":
          BEGIN
            RecRef.SETTABLE(ProdForecastEntry);
            SourceType := DATABASE::"Production Forecast Entry";
            SourceRefNo := ProdForecastEntry."Entry No.";
          END;
        DATABASE::"Assembly Header":
          BEGIN
            RecRef.SETTABLE(AssemblyHeader);
            SourceType := DATABASE::"Assembly Header";
            SourceSubtype := AssemblyHeader."Document Type";
            SourceID := AssemblyHeader."No.";
          END;
        DATABASE::"Assembly Line":
          BEGIN
            RecRef.SETTABLE(AssemblyLine);
            SourceType := DATABASE::"Assembly Line";
            SourceSubtype := AssemblyLine."Document Type";
            SourceID := AssemblyLine."Document No.";
            SourceRefNo := AssemblyLine."Line No.";
          END
        ELSE
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ShowDocument@9(RecordID@1006 : RecordID);
    VAR
      ItemLedgEntry@1035 : Record 32;
      SalesHeader@1034 : Record 36;
      SalesShptHeader@1033 : Record 110;
      SalesInvHeader@1032 : Record 112;
      SalesCrMemoHeader@1031 : Record 114;
      ServShptHeader@1030 : Record 5990;
      ServInvHeader@1029 : Record 5992;
      ServCrMemoHeader@1028 : Record 5994;
      PurchHeader@1027 : Record 38;
      PurchRcptHeader@1026 : Record 120;
      PurchInvHeader@1025 : Record 122;
      PurchCrMemoHdr@1024 : Record 124;
      ReturnShptHeader@1023 : Record 6650;
      ReturnRcptHeader@1022 : Record 6660;
      TransferHeader@1021 : Record 5740;
      TransShptHeader@1020 : Record 5744;
      TransRcptHeader@1019 : Record 5746;
      ProductionOrder@1018 : Record 5405;
      ProdForecastName@1017 : Record 99000851;
      RequisitionLine@1016 : Record 246;
      PlanningComponent@1002 : Record 99000829;
      AssemblyHeader@1000 : Record 900;
      AssemblyLine@1001 : Record 901;
      ReqWkshTemplate@1004 : Record 244;
      ProdForecastPage@1015 : Page 99000919;
      PlanningWorksheet@1003 : Page 99000852;
      RecRef@1014 : RecordRef;
    BEGIN
      IF FORMAT(RecordID) = '' THEN
        EXIT;

      RecRef := RecordID.GETRECORD;

      CASE RecordID.TABLENO OF
        DATABASE::"Item Ledger Entry":
          BEGIN
            RecRef.SETTABLE(ItemLedgEntry);
            ItemLedgEntry.GET(ItemLedgEntry."Entry No.");
            ItemLedgEntry.SETRANGE("Item No.",ItemLedgEntry."Item No.");
            IF ItemLedgEntry."Location Code" <> '' THEN
              ItemLedgEntry.SETRANGE("Location Code",ItemLedgEntry."Location Code");
            IF ItemLedgEntry."Variant Code" <> '' THEN
              ItemLedgEntry.SETRANGE("Variant Code",ItemLedgEntry."Variant Code");
            PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry);
          END;
        DATABASE::"Sales Header":
          BEGIN
            RecRef.SETTABLE(SalesHeader);
            CASE SalesHeader."Document Type" OF
              SalesHeader."Document Type"::Order:
                PAGE.RUNMODAL(PAGE::"Sales Order",SalesHeader);
              SalesHeader."Document Type"::Invoice:
                PAGE.RUNMODAL(PAGE::"Sales Invoice",SalesHeader);
              SalesHeader."Document Type"::"Credit Memo":
                PAGE.RUNMODAL(PAGE::"Sales Credit Memo",SalesHeader);
              SalesHeader."Document Type"::"Blanket Order":
                PAGE.RUNMODAL(PAGE::"Blanket Sales Orders",SalesHeader);
              SalesHeader."Document Type"::"Return Order":
                PAGE.RUNMODAL(PAGE::"Sales Return Order",SalesHeader);
            END;
          END;
        DATABASE::"Sales Shipment Header":
          BEGIN
            RecRef.SETTABLE(SalesShptHeader);
            PAGE.RUNMODAL(PAGE::"Posted Sales Shipment",SalesShptHeader);
          END;
        DATABASE::"Sales Invoice Header":
          BEGIN
            RecRef.SETTABLE(SalesInvHeader);
            PAGE.RUNMODAL(PAGE::"Posted Sales Invoice",SalesInvHeader);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(SalesCrMemoHeader);
            PAGE.RUNMODAL(PAGE::"Posted Sales Credit Memo",SalesCrMemoHeader);
          END;
        DATABASE::"Service Shipment Header":
          BEGIN
            RecRef.SETTABLE(ServShptHeader);
            PAGE.RUNMODAL(PAGE::"Posted Service Shipment",ServShptHeader);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            RecRef.SETTABLE(ServInvHeader);
            PAGE.RUNMODAL(PAGE::"Posted Service Invoice",ServInvHeader);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(ServCrMemoHeader);
            PAGE.RUNMODAL(PAGE::"Posted Service Credit Memo",ServCrMemoHeader);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            RecRef.SETTABLE(PurchHeader);
            CASE PurchHeader."Document Type" OF
              PurchHeader."Document Type"::Order:
                PAGE.RUNMODAL(PAGE::"Purchase Order",PurchHeader);
              PurchHeader."Document Type"::Invoice:
                PAGE.RUNMODAL(PAGE::"Purchase Invoice",PurchHeader);
              PurchHeader."Document Type"::"Credit Memo":
                PAGE.RUNMODAL(PAGE::"Purchase Credit Memo",PurchHeader);
              PurchHeader."Document Type"::"Blanket Order":
                PAGE.RUNMODAL(PAGE::"Blanket Purchase Order",PurchHeader);
              PurchHeader."Document Type"::"Return Order":
                PAGE.RUNMODAL(PAGE::"Purchase Return Order",PurchHeader);
            END;
          END;
        DATABASE::"Purch. Rcpt. Header":
          BEGIN
            RecRef.SETTABLE(PurchRcptHeader);
            PAGE.RUNMODAL(PAGE::"Posted Purchase Receipt",PurchRcptHeader);
          END;
        DATABASE::"Purch. Inv. Header":
          BEGIN
            RecRef.SETTABLE(PurchInvHeader);
            PAGE.RUNMODAL(PAGE::"Posted Purchase Invoice",PurchInvHeader);
          END;
        DATABASE::"Purch. Cr. Memo Hdr.":
          BEGIN
            RecRef.SETTABLE(PurchCrMemoHdr);
            PAGE.RUNMODAL(PAGE::"Posted Purchase Credit Memo",PurchCrMemoHdr);
          END;
        DATABASE::"Return Shipment Header":
          BEGIN
            RecRef.SETTABLE(ReturnShptHeader);
            PAGE.RUNMODAL(PAGE::"Posted Return Shipment",ReturnShptHeader);
          END;
        DATABASE::"Return Receipt Header":
          BEGIN
            RecRef.SETTABLE(ReturnRcptHeader);
            PAGE.RUNMODAL(PAGE::"Posted Return Receipt",ReturnRcptHeader);
          END;
        DATABASE::"Transfer Header":
          BEGIN
            RecRef.SETTABLE(TransferHeader);
            PAGE.RUNMODAL(PAGE::"Transfer Order",TransferHeader);
          END;
        DATABASE::"Transfer Shipment Header":
          BEGIN
            RecRef.SETTABLE(TransShptHeader);
            PAGE.RUNMODAL(PAGE::"Posted Transfer Shipment",TransShptHeader);
          END;
        DATABASE::"Transfer Receipt Header":
          BEGIN
            RecRef.SETTABLE(TransRcptHeader);
            PAGE.RUNMODAL(PAGE::"Posted Transfer Receipt",TransRcptHeader);
          END;
        DATABASE::"Production Order":
          BEGIN
            RecRef.SETTABLE(ProductionOrder);
            CASE ProductionOrder.Status OF
              ProductionOrder.Status::Planned:
                PAGE.RUNMODAL(PAGE::"Planned Production Order",ProductionOrder);
              ProductionOrder.Status::"Firm Planned":
                PAGE.RUNMODAL(PAGE::"Firm Planned Prod. Order",ProductionOrder);
              ProductionOrder.Status::Released:
                PAGE.RUNMODAL(PAGE::"Released Production Order",ProductionOrder);
              ProductionOrder.Status::Finished:
                PAGE.RUNMODAL(PAGE::"Finished Production Order",ProductionOrder);
            END;
          END;
        DATABASE::"Production Forecast Name":
          BEGIN
            RecRef.SETTABLE(ProdForecastName);
            ProdForecastPage.SetProductionForecastName(ProdForecastName.Name);
            ProdForecastPage.RUNMODAL;
          END;
        DATABASE::"Requisition Line":
          BEGIN
            RecRef.SETTABLE(RequisitionLine);
            ReqWkshTemplate.GET(RequisitionLine."Worksheet Template Name");
            ReqWkshTemplate.TESTFIELD("Page ID");
            PAGE.RUNMODAL(ReqWkshTemplate."Page ID",RequisitionLine);
          END;
        DATABASE::"Planning Component":
          BEGIN
            RecRef.SETTABLE(PlanningComponent);

            RequisitionLine.GET(
              PlanningComponent."Worksheet Template Name",PlanningComponent."Worksheet Batch Name",
              PlanningComponent."Worksheet Line No.");
            PlanningWorksheet.SETTABLEVIEW(RequisitionLine);
            PlanningWorksheet.SETRECORD(RequisitionLine);
            PlanningWorksheet.RUN;

            PlanningWorksheet.OpenPlanningComponent(PlanningComponent);
          END;
        DATABASE::"Assembly Header":
          BEGIN
            RecRef.SETTABLE(AssemblyHeader);
            PAGE.RUNMODAL(PAGE::"Assembly Order",AssemblyHeader);
          END;
        DATABASE::"Assembly Line":
          BEGIN
            RecRef.SETTABLE(AssemblyLine);
            AssemblyHeader.GET(AssemblyLine."Document Type",AssemblyLine."Document No.");
            PAGE.RUNMODAL(PAGE::"Assembly Order",AssemblyHeader);
          END
        ELSE
          ERROR(Text0000,RecordID.TABLENO);
      END;
    END;

    BEGIN
    END.
  }
}

