OBJECT Codeunit 9062308 Planning Board Style Caching
{
  OBJECT-PROPERTIES
  {
    Date=21/11/15;
    Time=11:04:10 PM;
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PlanningBoardStyleCache@1000000000 : Record 9062348;

    PROCEDURE "--- Foreground ---"@1000000004();
    BEGIN
    END;

    PROCEDURE FlushForegroundCache@1000000008(pPlanningBoardCode@1000000001 : Code[20];pPlanningBoardTableType@1000000000 : Integer);
    BEGIN
      //DOC NA2016.12 - Flushing foreground cache (removing its content if it has been invalidated)
      //  -> pPlanningBoardCode: Planning board code
      //  -> pPlanningBoardTableType: Planning board table type

      FlushCache(pPlanningBoardCode, pPlanningBoardTableType, PlanningBoardStyleCache."Style Application"::Foreground);
    END;

    PROCEDURE GetForegroundStyle@1000000001(pPlanningBoardCode@1000000001 : Code[20];pPlanningBoardTableType@1000000002 : Integer;pValue@1000000000 : Text;VAR pColourCode@1000000003 : Code[20];VAR pFontSize@1000000004 : '0';VAR pFontStyle@1000000005 : '0') : Boolean;
    BEGIN
      //DOC NA2016.12 - Trying to retrieve foreground style
      //  -> pPlanningBoardCode: Planning board code
      //  -> pPlanningBoardTableType: Planning board table type
      //  -> pValue: Value
      //  <> pColourCode: Target colour code
      //  <> pFontSize: Target font size
      //  <> pFontStyle: Target font style
      //  <- TRUE = Style retrived, FALSE = Style not found

      IF (PlanningBoardStyleCache.GET(pPlanningBoardCode, pPlanningBoardTableType, PlanningBoardStyleCache."Style Application"::Foreground, pValue)) THEN
      BEGIN
        pColourCode := PlanningBoardStyleCache."Colour Code";
        pFontSize := PlanningBoardStyleCache."Font Size";
        pFontStyle := PlanningBoardStyleCache."Font Style";
        EXIT(TRUE);
      END
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE AddForegroundStyle@1000000002(pPlanningBoardCode@1000000005 : Code[20];pPlanningBoardTableType@1000000004 : Integer;pValue@1000000003 : Text;pColourCode@1000000002 : Code[20];pFontSize@1000000001 : Integer;pFontStyle@1000000000 : Integer);
    BEGIN
      //DOC NA2016.12 - Adding foreground style to cache
      //  -> pPlanningBoardCode: Planning board code
      //  -> pPlanningBoardTableType: Planning board table type
      //  -> pValue: Value
      //  -> pColourCode: Colour code
      //  -> pFontSize: Font size
      //  -> pFontStyle: Font style

      AddToCache(pPlanningBoardCode, pPlanningBoardTableType, PlanningBoardStyleCache."Style Application"::Foreground, pValue, pColourCode, pFontSize,
        pFontStyle, 0, PlanningBoardStyleCache."Line Style"::" ");
    END;

    PROCEDURE "--- Background ---"@1000000011();
    BEGIN
    END;

    PROCEDURE FlushBackgroundCache@1000000021(pPlanningBoardCode@1000000001 : Code[20];pPlanningBoardTableType@1000000000 : Integer);
    BEGIN
      //DOC NA2016.12 - Flushing background cache (removing its content if it has been invalidated)
      //  -> pPlanningBoardCode: Planning board code
      //  -> pPlanningBoardTableType: Planning board table type

      FlushCache(pPlanningBoardCode, pPlanningBoardTableType, PlanningBoardStyleCache."Style Application"::Background);
    END;

    PROCEDURE GetBackgroundStyle@1000000010(pPlanningBoardCode@1000000001 : Code[20];pPlanningBoardTableType@1000000002 : Integer;pValue@1000000000 : Text;VAR pColourCode@1000000003 : Code[20]) : Boolean;
    BEGIN
      //DOC NA2016.12 - Trying to retrieve background style
      //  -> pPlanningBoardCode: Planning board code
      //  -> pPlanningBoardTableType: Planning board table type
      //  -> pValue: Value
      //  <> pColourCode: Target colour code
      //  <- TRUE = Style retrived, FALSE = Style not found

      IF (PlanningBoardStyleCache.GET(pPlanningBoardCode, pPlanningBoardTableType, PlanningBoardStyleCache."Style Application"::Background, pValue)) THEN
      BEGIN
        pColourCode := PlanningBoardStyleCache."Colour Code";
        EXIT(TRUE);
      END
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE AddBackgroundStyle@1000000009(pPlanningBoardCode@1000000005 : Code[20];pPlanningBoardTableType@1000000004 : Integer;pValue@1000000003 : Text;pColourCode@1000000002 : Code[20]);
    BEGIN
      //DOC NA2016.12 - Adding background style to cache
      //  -> pPlanningBoardCode: Planning board code
      //  -> pPlanningBoardTableType: Planning board table type
      //  -> pValue: Value
      //  -> pColourCode: Colour code

      AddToCache(pPlanningBoardCode, pPlanningBoardTableType, PlanningBoardStyleCache."Style Application"::Background, pValue, pColourCode, 0,
        PlanningBoardStyleCache."Font Style"::" ", 0, PlanningBoardStyleCache."Line Style"::" ");
    END;

    PROCEDURE "--- Border ---"@1000000014();
    BEGIN
    END;

    PROCEDURE FlushBorderCache@1000000024(pPlanningBoardCode@1000000001 : Code[20];pPlanningBoardTableType@1000000000 : Integer);
    BEGIN
      //DOC NA2016.12 - Flushing border cache (emptying if it has been invalidated)
      //  -> pPlanningBoardCode: Planning board code
      //  -> pPlanningBoardTableType: Planning board table type

      FlushCache(pPlanningBoardCode, pPlanningBoardTableType, PlanningBoardStyleCache."Style Application"::Border);
    END;

    PROCEDURE GetBorderStyle@1000000013(pPlanningBoardCode@1000000001 : Code[20];pPlanningBoardTableType@1000000002 : Integer;pValue@1000000000 : Text;VAR pColourCode@1000000003 : Code[20];VAR pLineWidth@1000000004 : '0';VAR pLineStyle@1000000005 : '0') : Boolean;
    BEGIN
      //DOC NA2016.12 - Trying to retrieve border style
      //  -> pPlanningBoardCode: Planning board code
      //  -> pPlanningBoardTableType: Planning board table type
      //  -> pValue: Value
      //  <> pColourCode: Target colour code
      //  <> pLineWidth: Target line width
      //  <> pLineStyle: Target line style
      //  <- TRUE = Style retrived, FALSE = Style not found

      IF (PlanningBoardStyleCache.GET(pPlanningBoardCode, pPlanningBoardTableType, PlanningBoardStyleCache."Style Application"::Border, pValue)) THEN
      BEGIN
        pColourCode := PlanningBoardStyleCache."Colour Code";
        pLineWidth := PlanningBoardStyleCache."Line Width";
        pLineStyle := PlanningBoardStyleCache."Line Style";
        EXIT(TRUE);
      END
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE AddBorderStyle@1000000012(pPlanningBoardCode@1000000005 : Code[20];pPlanningBoardTableType@1000000004 : Integer;pValue@1000000003 : Text;pColourCode@1000000002 : Code[20];pLineWidth@1000000001 : Integer;pLineStyle@1000000000 : Integer);
    BEGIN
      //DOC NA2016.12 - Adding border style to cache
      //  -> pPlanningBoardCode: Planning board code
      //  -> pPlanningBoardTableType: Planning board table type
      //  -> pValue: Value
      //  -> pColourCode: Colour code
      //  -> pLineWidth: Line width
      //  -> pLineStyle: Line style

      AddToCache(pPlanningBoardCode, pPlanningBoardTableType, PlanningBoardStyleCache."Style Application"::Border, pValue, pColourCode, 0,
        PlanningBoardStyleCache."Font Style"::" ", pLineWidth, pLineStyle);
    END;

    PROCEDURE "--- Internal ---"@1000000005();
    BEGIN
    END;

    LOCAL PROCEDURE IsCacheInvalidated@9062232(pPlanningBoardCode@9062232 : Code[20];pPlanningBoardTableType@9062231 : Integer;pStyleApplication@9062230 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning if given cache has been invalidated
      //  -> pPlanningBoardCode: Planning board code
      //  -> pPlanningBoardTableType: Planning board table type
      //  -> pStyleApplication: Style application
      //  <- Response

      PlanningBoardStyleCache.RESET();
      PlanningBoardStyleCache.SETCURRENTKEY("Planning Board Code", "Planning Board Table Type", "Style Application", Invalidated);
      PlanningBoardStyleCache.SETRANGE("Planning Board Code", pPlanningBoardCode);
      PlanningBoardStyleCache.SETRANGE("Planning Board Table Type", pPlanningBoardTableType);
      PlanningBoardStyleCache.SETRANGE("Style Application", pStyleApplication);
      PlanningBoardStyleCache.SETRANGE(Invalidated, TRUE);
      EXIT( NOT (PlanningBoardStyleCache.ISEMPTY()));
    END;

    PROCEDURE InvalidateCache@1000000003(pPlanningBoardCode@1000000002 : Code[20];pPlanningBoardTableType@1000000001 : Integer;pStyleApplication@1000000000 : Integer);
    BEGIN
      //DOC NA2016.12 - Invalidating cache
      //  -> pPlanningBoardCode: Planning board code
      //  -> pPlanningBoardTableType: Planning board table type
      //  -> pStyleApplication: Style application

      IF ( NOT (IsCacheInvalidated(pPlanningBoardCode, pPlanningBoardTableType, pStyleApplication))) THEN
      BEGIN
        IF (PlanningBoardStyleCache.GET(pPlanningBoardCode, pPlanningBoardTableType, pStyleApplication, '')) THEN
        BEGIN
          PlanningBoardStyleCache.Invalidated := TRUE;
          PlanningBoardStyleCache.MODIFY();
        END
        ELSE
        BEGIN
          CLEAR(PlanningBoardStyleCache);
          PlanningBoardStyleCache.INIT();
          PlanningBoardStyleCache."Planning Board Code" := pPlanningBoardCode;
          PlanningBoardStyleCache."Planning Board Table Type" := pPlanningBoardTableType;
          PlanningBoardStyleCache."Style Application" := pStyleApplication;
          PlanningBoardStyleCache.Invalidated := TRUE;
          PlanningBoardStyleCache.INSERT();
        END;
      END;
    END;

    LOCAL PROCEDURE FlushCache@1000000016(pPlanningBoardCode@1000000002 : Code[20];pPlanningBoardTableType@1000000001 : Integer;pStyleApplication@1000000000 : Integer);
    BEGIN
      //DOC NA2016.12 - Flushing cache (emptying if it has been invalidated)
      //  -> pPlanningBoardCode: Planning board code
      //  -> pPlanningBoardTableType: Planning board table type
      //  -> pStyleApplication: Style application

      IF (IsCacheInvalidated(pPlanningBoardCode, pPlanningBoardTableType, pStyleApplication)) THEN
      BEGIN
        PlanningBoardStyleCache.RESET();
        PlanningBoardStyleCache.SETRANGE("Planning Board Code", pPlanningBoardCode);
        PlanningBoardStyleCache.SETRANGE("Planning Board Table Type", pPlanningBoardTableType);
        PlanningBoardStyleCache.SETRANGE("Style Application", pStyleApplication);
        PlanningBoardStyleCache.DELETEALL();
      END;
    END;

    LOCAL PROCEDURE AddToCache@1000000006(pPlanningBoardCode@1000000005 : Code[20];pPlanningBoardTableType@1000000004 : Integer;pStyleApplication@1000000006 : Integer;pValue@1000000003 : Text;pColourCode@1000000002 : Code[20];pFontSize@1000000001 : Integer;pFontStyle@1000000000 : '0';pLineWidth@1000000008 : Integer;pLineStyle@1000000007 : '0');
    BEGIN
      //DOC NA2016.12 - Adding an entry to cache
      //  -> pPlanningBoardCode: Planning board code
      //  -> pPlanningBoardTableType: Planning board table type
      //  -> pStyleApplication: Style application
      //  -> pValue: Value
      //  -> pColourCode: Colour code
      //  -> pFontSize: Font size
      //  -> pFontStyle: Font style

      CLEAR(PlanningBoardStyleCache);
      PlanningBoardStyleCache.INIT();
      PlanningBoardStyleCache."Planning Board Code" := pPlanningBoardCode;
      PlanningBoardStyleCache."Planning Board Table Type" := pPlanningBoardTableType;
      PlanningBoardStyleCache."Style Application" := pStyleApplication;
      PlanningBoardStyleCache.Value := pValue;
      PlanningBoardStyleCache."Colour Code" := pColourCode;
      PlanningBoardStyleCache."Font Size" := pFontSize;
      PlanningBoardStyleCache."Font Style" := pFontStyle;
      PlanningBoardStyleCache."Line Width" := pLineWidth;
      PlanningBoardStyleCache."Line Style" := pLineStyle;
      PlanningBoardStyleCache.INSERT();
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 11/10/2015 - Created
    }
    END.
  }
}

