OBJECT Page 402 Sales Order Statistics
{
  OBJECT-PROPERTIES
  {
    Date=23/10/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43402;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Sales Order Statistics;
               ENG=Sales Order Statistics];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table36;
    PageType=Card;
    OnOpenPage=BEGIN
                 SalesSetup.GET;
                 AllowInvDisc := NOT (SalesSetup."Calc. Inv. Discount" AND CustInvDiscRecExists("Invoice Disc. Code"));
                 AllowVATDifference :=
                   SalesSetup."Allow VAT Difference" AND
                   NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
                 VATLinesFormIsEditable := AllowVATDifference OR AllowInvDisc;
                 CurrPage.EDITABLE := VATLinesFormIsEditable;
               END;

    OnAfterGetRecord=BEGIN
                       RefreshOnAfterGetRecord;
                     END;

    OnQueryClosePage=BEGIN
                       GetVATSpecification(PrevTab);
                       IF TempVATAmountLine1.GetAnyLineModified OR TempVATAmountLine2.GetAnyLineModified THEN
                         UpdateVATOnSalesLines;
                       EXIT(TRUE);
                     END;

    OnAfterGetCurrRecord=BEGIN
                           DynamicEditable := CurrPage.EDITABLE;
                         END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 39  ;2   ;Field     ;
                Name=LineAmountGeneral;
                SourceExpr=TotalSalesLine[1]."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,FALSE);
                Editable=FALSE }

    { 30  ;2   ;Field     ;
                Name=InvDiscountAmount_General;
                CaptionML=[ENU=Inv. Discount Amount;
                           ENG=Inv. Discount Amount];
                SourceExpr=TotalSalesLine[1]."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=DynamicEditable;
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::General;
                             UpdateInvDiscAmount(1);
                           END;
                            }

    { 20  ;2   ;Field     ;
                SourceExpr=TotalAmount1[1];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,FALSE);
                Editable=DynamicEditable;
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::General;
                             UpdateTotalAmount(1);
                           END;
                            }

    { 16  ;2   ;Field     ;
                Name=VATAmount;
                CaptionML=[ENU=VAT Amount;
                           ENG=VAT Amount];
                SourceExpr=VATAmount[1];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT(VATAmountText[1]);
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                SourceExpr=TotalAmount2[1];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,TRUE);
                Editable=FALSE;
                OnValidate=BEGIN
                             TotalAmount21OnAfterValidate;
                           END;
                            }

    { 7   ;2   ;Field     ;
                CaptionML=[ENU=Sales (LCY);
                           ENG=Sales (LCY)];
                SourceExpr=TotalSalesLineLCY[1].Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 32  ;2   ;Field     ;
                CaptionML=[ENU=Original Profit (LCY);
                           ENG=Original Profit (LCY)];
                SourceExpr=ProfitLCY[1];
                AutoFormatType=1;
                Editable=FALSE }

    { 46  ;2   ;Field     ;
                CaptionML=[ENU=Adjusted Profit (LCY);
                           ENG=Adjusted Profit (LCY)];
                SourceExpr=AdjProfitLCY[1];
                AutoFormatType=1;
                Editable=FALSE }

    { 24  ;2   ;Field     ;
                CaptionML=[ENU=Original Profit %;
                           ENG=Original Profit %];
                DecimalPlaces=1:1;
                SourceExpr=ProfitPct[1];
                Editable=FALSE }

    { 52  ;2   ;Field     ;
                CaptionML=[ENU=Adjusted Profit %;
                           ENG=Adjusted Profit %];
                DecimalPlaces=1:1;
                SourceExpr=AdjProfitPct[1];
                Editable=FALSE }

    { 22  ;2   ;Field     ;
                CaptionML=[ENU=Quantity;
                           ENG=Quantity];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[1].Quantity;
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                CaptionML=[ENU=Parcels;
                           ENG=Parcels];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[1]."Units per Parcel";
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Net Weight;
                           ENG=Net Weight];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[1]."Net Weight";
                Editable=FALSE }

    { 11  ;2   ;Field     ;
                CaptionML=[ENU=Gross Weight;
                           ENG=Gross Weight];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[1]."Gross Weight";
                Editable=FALSE }

    { 2   ;2   ;Field     ;
                CaptionML=[ENU=Volume;
                           ENG=Volume];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[1]."Unit Volume";
                Editable=FALSE }

    { 37  ;2   ;Field     ;
                CaptionML=[ENU=Original Cost (LCY);
                           ENG=Original Cost (LCY)];
                SourceExpr=TotalSalesLineLCY[1]."Unit Cost (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 35  ;2   ;Field     ;
                CaptionML=[ENU=Adjusted Cost (LCY);
                           ENG=Adjusted Cost (LCY)];
                SourceExpr=TotalAdjCostLCY[1];
                AutoFormatType=1;
                Editable=FALSE }

    { 120 ;2   ;Field     ;
                CaptionML=[ENU=Cost Adjmt. Amount (LCY);
                           ENG=Cost Adjmt. Amount (LCY)];
                SourceExpr=TotalAdjCostLCY[1] - TotalSalesLineLCY[1]."Unit Cost (LCY)";
                AutoFormatType=1;
                Editable=FALSE;
                OnLookup=BEGIN
                           LookupAdjmtValueEntries(0);
                         END;
                          }

    { 119 ;2   ;Field     ;
                Name=NoOfVATLines_General;
                DrillDown=Yes;
                CaptionML=[ENU=No. of VAT Lines;
                           ENG=No. of VAT Lines];
                SourceExpr=TempVATAmountLine1.COUNT;
                OnDrillDown=BEGIN
                              VATLinesDrillDown(TempVATAmountLine1,FALSE);
                              UpdateHeaderInfo(1,TempVATAmountLine1);
                            END;
                             }

    { 1905885101;1;Group  ;
                CaptionML=[ENU=Invoicing;
                           ENG=Invoicing] }

    { 71  ;2   ;Field     ;
                Name=AmountInclVAT_Invoicing;
                SourceExpr=TotalSalesLine[2]."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,FALSE);
                Editable=FALSE }

    { 51  ;2   ;Field     ;
                Name=InvDiscountAmount_Invoicing;
                CaptionML=[ENU=Inv. Discount Amount;
                           ENG=Inv. Discount Amount];
                SourceExpr=TotalSalesLine[2]."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=DynamicEditable;
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::Invoicing;
                             UpdateInvDiscAmount(2);
                           END;
                            }

    { 50  ;2   ;Field     ;
                Name=TotalInclVAT_Invoicing;
                SourceExpr=TotalAmount1[2];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,FALSE);
                Editable=DynamicEditable;
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::Invoicing;
                             UpdateTotalAmount(2);
                           END;
                            }

    { 49  ;2   ;Field     ;
                Name=VATAmount_Invoicing;
                SourceExpr=VATAmount[2];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT(VATAmountText[2]);
                Editable=FALSE }

    { 48  ;2   ;Field     ;
                Name=TotalExclVAT_Invoicing;
                SourceExpr=TotalAmount2[2];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,TRUE);
                Editable=FALSE }

    { 69  ;2   ;Field     ;
                CaptionML=[ENU=Sales (LCY);
                           ENG=Sales (LCY)];
                SourceExpr=TotalSalesLineLCY[2].Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 67  ;2   ;Field     ;
                CaptionML=[ENU=Original Profit (LCY);
                           ENG=Original Profit (LCY)];
                SourceExpr=ProfitLCY[2];
                AutoFormatType=1;
                Editable=FALSE }

    { 75  ;2   ;Field     ;
                CaptionML=[ENU=Adjusted Profit (LCY);
                           ENG=Adjusted Profit (LCY)];
                SourceExpr=AdjProfitLCY[2];
                AutoFormatType=1;
                Editable=FALSE }

    { 66  ;2   ;Field     ;
                CaptionML=[ENU=Original Profit %;
                           ENG=Original Profit %];
                DecimalPlaces=1:1;
                SourceExpr=ProfitPct[2];
                Editable=FALSE }

    { 79  ;2   ;Field     ;
                CaptionML=[ENU=Adjusted Profit %;
                           ENG=Adjusted Profit %];
                DecimalPlaces=1:1;
                SourceExpr=AdjProfitPct[2];
                Editable=FALSE }

    { 65  ;2   ;Field     ;
                CaptionML=[ENU=Quantity;
                           ENG=Quantity];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[2].Quantity;
                Editable=FALSE }

    { 62  ;2   ;Field     ;
                CaptionML=[ENU=Parcels;
                           ENG=Parcels];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[2]."Units per Parcel";
                Editable=FALSE }

    { 64  ;2   ;Field     ;
                CaptionML=[ENU=Net Weight;
                           ENG=Net Weight];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[2]."Net Weight";
                Editable=FALSE }

    { 63  ;2   ;Field     ;
                CaptionML=[ENU=Gross Weight;
                           ENG=Gross Weight];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[2]."Gross Weight";
                Editable=FALSE }

    { 61  ;2   ;Field     ;
                CaptionML=[ENU=Volume;
                           ENG=Volume];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[2]."Unit Volume";
                Editable=FALSE }

    { 68  ;2   ;Field     ;
                CaptionML=[ENU=Original Cost (LCY);
                           ENG=Original Cost (LCY)];
                SourceExpr=TotalSalesLineLCY[2]."Unit Cost (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 17  ;2   ;Field     ;
                CaptionML=[ENU=Adjusted Cost (LCY);
                           ENG=Adjusted Cost (LCY)];
                SourceExpr=TotalAdjCostLCY[2];
                AutoFormatType=1;
                Editable=FALSE }

    { 122 ;2   ;Field     ;
                CaptionML=[ENU=Cost Adjmt. Amount (LCY);
                           ENG=Cost Adjmt. Amount (LCY)];
                SourceExpr=TotalAdjCostLCY[2] - TotalSalesLineLCY[2]."Unit Cost (LCY)";
                AutoFormatType=1;
                Editable=FALSE;
                OnLookup=BEGIN
                           LookupAdjmtValueEntries(1);
                         END;
                          }

    { 125 ;2   ;Field     ;
                Name=NoOfVATLines_Invoicing;
                DrillDown=Yes;
                CaptionML=[ENU=No. of VAT Lines;
                           ENG=No. of VAT Lines];
                SourceExpr=TempVATAmountLine2.COUNT;
                OnDrillDown=BEGIN
                              ActiveTab := ActiveTab::Invoicing;
                              VATLinesDrillDown(TempVATAmountLine2,TRUE);
                              UpdateHeaderInfo(2,TempVATAmountLine2);

                              IF TempVATAmountLine2.GetAnyLineModified THEN BEGIN
                                UpdateVATOnSalesLines;
                                RefreshOnAfterGetRecord;
                              END;
                            END;
                             }

    { 1906801201;1;Group  ;
                CaptionML=[ENU=Shipping;
                           ENG=Shipping] }

    { 105 ;2   ;Field     ;
                SourceExpr=TotalSalesLine[3]."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,FALSE);
                Editable=FALSE }

    { 83  ;2   ;Field     ;
                CaptionML=[ENU=Inv. Discount Amount;
                           ENG=Inv. Discount Amount];
                SourceExpr=TotalSalesLine[3]."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE }

    { 82  ;2   ;Field     ;
                SourceExpr=TotalAmount1[3];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,FALSE);
                Editable=FALSE }

    { 81  ;2   ;Field     ;
                SourceExpr=VATAmount[3];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT(VATAmountText[3]);
                Editable=FALSE }

    { 80  ;2   ;Field     ;
                SourceExpr=TotalAmount2[3];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,TRUE);
                Editable=FALSE }

    { 103 ;2   ;Field     ;
                CaptionML=[ENU=Sales (LCY);
                           ENG=Sales (LCY)];
                SourceExpr=TotalSalesLineLCY[3].Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 102 ;2   ;Field     ;
                CaptionML=[ENU=Cost (LCY);
                           ENG=Cost (LCY)];
                SourceExpr=TotalSalesLineLCY[3]."Unit Cost (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 101 ;2   ;Field     ;
                CaptionML=[ENU=Profit (LCY);
                           ENG=Profit (LCY)];
                SourceExpr=ProfitLCY[3];
                AutoFormatType=1;
                Editable=FALSE }

    { 100 ;2   ;Field     ;
                CaptionML=[ENU=Profit %;
                           ENG=Profit %];
                DecimalPlaces=1:1;
                SourceExpr=ProfitPct[3];
                Editable=FALSE }

    { 99  ;2   ;Field     ;
                CaptionML=[ENU=Quantity;
                           ENG=Quantity];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[3].Quantity;
                Editable=FALSE }

    { 94  ;2   ;Field     ;
                CaptionML=[ENU=Parcels;
                           ENG=Parcels];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[3]."Units per Parcel";
                Editable=FALSE }

    { 98  ;2   ;Field     ;
                CaptionML=[ENU=Net Weight;
                           ENG=Net Weight];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[3]."Net Weight";
                Editable=FALSE }

    { 97  ;2   ;Field     ;
                CaptionML=[ENU=Gross Weight;
                           ENG=Gross Weight];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[3]."Gross Weight";
                Editable=FALSE }

    { 93  ;2   ;Field     ;
                CaptionML=[ENU=Volume;
                           ENG=Volume];
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine[3]."Unit Volume";
                Editable=FALSE }

    { 127 ;2   ;Field     ;
                DrillDown=Yes;
                CaptionML=[ENU=No. of VAT Lines;
                           ENG=No. of VAT Lines];
                SourceExpr=TempVATAmountLine3.COUNT;
                OnDrillDown=BEGIN
                              VATLinesDrillDown(TempVATAmountLine3,FALSE);
                            END;
                             }

    { 1900201301;1;Group  ;
                CaptionML=[ENU=Prepayment;
                           ENG=Prepayment] }

    { 95  ;2   ;Field     ;
                SourceExpr=PrepmtTotalAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text006,FALSE);
                Editable=DynamicEditable;
                OnValidate=BEGIN
                             ActiveTab := ActiveTab::Prepayment;
                             UpdatePrepmtAmount;
                           END;
                            }

    { 115 ;2   ;Field     ;
                CaptionML=[ENU=Prepayment Amount Invoiced;
                           ENG=Prepayment Amount Invoiced];
                SourceExpr=PrepmtVATAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT(PrepmtVATAmountText);
                Editable=FALSE }

    { 117 ;2   ;Field     ;
                SourceExpr=PrepmtTotalAmount2;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text006,TRUE);
                Editable=FALSE }

    { 109 ;2   ;Field     ;
                SourceExpr=TotalSalesLine[1]."Prepmt. Amt. Inv.";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text007,FALSE);
                Editable=FALSE }

    { 110 ;2   ;Field     ;
                ExtendedDatatype=Ratio;
                CaptionML=[ENU=Invoiced % of Prepayment Amt.;
                           ENG=Invoiced % of Prepayment Amt.];
                ToolTipML=[ENU=Invoiced % of Prepayment Amt.;
                           ENG=Invoiced % of Prepayment Amt.];
                SourceExpr=PrepmtInvPct }

    { 107 ;2   ;Field     ;
                SourceExpr=TotalSalesLine[1]."Prepmt Amt Deducted";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text008,FALSE);
                Editable=FALSE }

    { 108 ;2   ;Field     ;
                ExtendedDatatype=Ratio;
                CaptionML=[ENU=Deducted % of Prepayment Amt. to Deduct;
                           ENG=Deducted % of Prepayment Amt. to Deduct];
                ToolTipML=[ENU=Deducted % of Prepayment Amt. to Deduct;
                           ENG=Deducted % of Prepayment Amt. to Deduct];
                SourceExpr=PrepmtDeductedPct }

    { 96  ;2   ;Field     ;
                SourceExpr=TotalSalesLine[1]."Prepmt Amt to Deduct";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text009,FALSE);
                Editable=FALSE }

    { 130 ;2   ;Field     ;
                DrillDown=Yes;
                CaptionML=[ENU=No. of VAT Lines;
                           ENG=No. of VAT Lines];
                SourceExpr=TempVATAmountLine4.COUNT;
                OnDrillDown=BEGIN
                              VATLinesDrillDown(TempVATAmountLine4,TRUE);
                            END;
                             }

    { 1903289601;1;Group  ;
                CaptionML=[ENU=Customer;
                           ENG=Customer] }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=Balance (LCY);
                           ENG=Balance (LCY)];
                SourceExpr=Cust."Balance (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 28  ;2   ;Field     ;
                CaptionML=[ENU=Credit Limit (LCY);
                           ENG=Credit Limit (LCY)];
                SourceExpr=Cust."Credit Limit (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 36  ;2   ;Field     ;
                ExtendedDatatype=Ratio;
                CaptionML=[ENU=Expended % of Credit Limit (LCY);
                           ENG=Expended % of Credit Limit (LCY)];
                ToolTipML=[ENU=Expended % of Credit Limit (LCY);
                           ENG=Expended % of Credit Limit (LCY)];
                SourceExpr=CreditLimitLCYExpendedPct }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Sales %1 Statistics;ENG=Sales %1 Statistics';
      Text001@1001 : TextConst 'ENU=Total;ENG=Total';
      Text002@1002 : TextConst 'ENU=Amount;ENG=Amount';
      Text003@1003 : TextConst 'ENU=%1 must not be 0.;ENG=%1 must not be 0.';
      Text004@1004 : TextConst 'ENU=%1 must not be greater than %2.;ENG=%1 must not be greater than %2.';
      Text005@1005 : TextConst 'ENU=You cannot change the invoice discount because a customer invoice discount with the code %1 exists.;ENG=You cannot change the invoice discount because a customer invoice discount with the code %1 exists.';
      TotalSalesLine@1006 : ARRAY [3] OF Record 37;
      TotalSalesLineLCY@1007 : ARRAY [3] OF Record 37;
      Cust@1008 : Record 18;
      TempVATAmountLine1@1009 : TEMPORARY Record 290;
      TempVATAmountLine2@1010 : TEMPORARY Record 290;
      TempVATAmountLine3@1011 : TEMPORARY Record 290;
      TempVATAmountLine4@1034 : TEMPORARY Record 290;
      SalesSetup@1012 : Record 311;
      SalesPost@1013 : Codeunit 80;
      TotalAmount1@1014 : ARRAY [3] OF Decimal;
      TotalAmount2@1015 : ARRAY [3] OF Decimal;
      VATAmount@1016 : ARRAY [3] OF Decimal;
      PrepmtTotalAmount@1037 : Decimal;
      PrepmtVATAmount@1038 : Decimal;
      PrepmtTotalAmount2@1040 : Decimal;
      VATAmountText@1017 : ARRAY [3] OF Text[30];
      PrepmtVATAmountText@1039 : Text[30];
      ProfitLCY@1018 : ARRAY [3] OF Decimal;
      ProfitPct@1019 : ARRAY [3] OF Decimal;
      AdjProfitLCY@1031 : ARRAY [3] OF Decimal;
      AdjProfitPct@1030 : ARRAY [3] OF Decimal;
      TotalAdjCostLCY@1029 : ARRAY [3] OF Decimal;
      CreditLimitLCYExpendedPct@1020 : Decimal;
      PrepmtInvPct@1036 : Decimal;
      PrepmtDeductedPct@1035 : Decimal;
      i@1021 : Integer;
      PrevNo@1022 : Code[20];
      ActiveTab@1023 : 'General,Invoicing,Shipping,Prepayment';
      PrevTab@1024 : 'General,Invoicing,Shipping,Prepayment';
      VATLinesFormIsEditable@1026 : Boolean;
      AllowInvDisc@1027 : Boolean;
      AllowVATDifference@1028 : Boolean;
      Text006@1033 : TextConst 'ENU=Prepmt. Amount;ENG=Prepmt. Amount';
      Text007@1041 : TextConst 'ENU=Prepmt. Amt. Invoiced;ENG=Prepmt. Amt. Invoiced';
      Text008@1042 : TextConst 'ENU=Prepmt. Amt. Deducted;ENG=Prepmt. Amt. Deducted';
      Text009@1043 : TextConst 'ENU=Prepmt. Amt. to Deduct;ENG=Prepmt. Amt. to Deduct';
      VATLinesForm@1044 : Page 9401;
      DynamicEditable@1025 : Boolean;
      UpdateInvDiscountQst@1056 : TextConst 'ENU=There are one or more invoiced lines.\Do you want to update the invoice discount?;ENG=There are one or more invoiced lines.\Do you want to update the invoice discount?';

    LOCAL PROCEDURE RefreshOnAfterGetRecord@10();
    VAR
      SalesLine@1003 : Record 37;
      TempSalesLine@1002 : TEMPORARY Record 37;
      SalesPostPrepayments@1001 : Codeunit 442;
    BEGIN
      CurrPage.CAPTION(STRSUBSTNO(Text000,"Document Type"));

      IF PrevNo = "No." THEN
        EXIT;
      PrevNo := "No.";
      FILTERGROUP(2);
      SETRANGE("No.",PrevNo);
      FILTERGROUP(0);

      CLEAR(SalesLine);
      CLEAR(TotalSalesLine);
      CLEAR(TotalSalesLineLCY);

      FOR i := 1 TO 3 DO BEGIN
        TempSalesLine.DELETEALL;
        CLEAR(TempSalesLine);
        CLEAR(SalesPost);
        SalesPost.GetSalesLines(Rec,TempSalesLine,i - 1);
        CLEAR(SalesPost);
        CASE i OF
          1:
            SalesLine.CalcVATAmountLines(0,Rec,TempSalesLine,TempVATAmountLine1);
          2:
            SalesLine.CalcVATAmountLines(0,Rec,TempSalesLine,TempVATAmountLine2);
          3:
            SalesLine.CalcVATAmountLines(0,Rec,TempSalesLine,TempVATAmountLine3);
        END;

        SalesPost.SumSalesLinesTemp(
          Rec,TempSalesLine,i - 1,TotalSalesLine[i],TotalSalesLineLCY[i],
          VATAmount[i],VATAmountText[i],ProfitLCY[i],ProfitPct[i],TotalAdjCostLCY[i]);

        IF i = 3 THEN
          TotalAdjCostLCY[i] := TotalSalesLineLCY[i]."Unit Cost (LCY)";

        AdjProfitLCY[i] := TotalSalesLineLCY[i].Amount - TotalAdjCostLCY[i];
        IF TotalSalesLineLCY[i].Amount <> 0 THEN
          AdjProfitPct[i] := ROUND(AdjProfitLCY[i] / TotalSalesLineLCY[i].Amount * 100,0.1);

        IF "Prices Including VAT" THEN BEGIN
          TotalAmount2[i] := TotalSalesLine[i].Amount;
          TotalAmount1[i] := TotalAmount2[i] + VATAmount[i];
          TotalSalesLine[i]."Line Amount" := TotalAmount1[i] + TotalSalesLine[i]."Inv. Discount Amount";
        END ELSE BEGIN
          TotalAmount1[i] := TotalSalesLine[i].Amount;
          TotalAmount2[i] := TotalSalesLine[i]."Amount Including VAT";
        END;
      END;
      TempSalesLine.DELETEALL;
      CLEAR(TempSalesLine);
      SalesPostPrepayments.GetSalesLines(Rec,0,TempSalesLine);
      SalesPostPrepayments.SumPrepmt(
        Rec,TempSalesLine,TempVATAmountLine4,PrepmtTotalAmount,PrepmtVATAmount,PrepmtVATAmountText);
      PrepmtInvPct :=
        Pct(TotalSalesLine[1]."Prepmt. Amt. Inv.",PrepmtTotalAmount);
      PrepmtDeductedPct :=
        Pct(TotalSalesLine[1]."Prepmt Amt Deducted",TotalSalesLine[1]."Prepmt. Amt. Inv.");
      IF "Prices Including VAT" THEN BEGIN
        PrepmtTotalAmount2 := PrepmtTotalAmount;
        PrepmtTotalAmount := PrepmtTotalAmount + PrepmtVATAmount;
      END ELSE
        PrepmtTotalAmount2 := PrepmtTotalAmount + PrepmtVATAmount;

      IF Cust.GET("Bill-to Customer No.") THEN
        Cust.CALCFIELDS("Balance (LCY)")
      ELSE
        CLEAR(Cust);

      CASE TRUE OF
        Cust."Credit Limit (LCY)" = 0:
          CreditLimitLCYExpendedPct := 0;
        Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" < 0:
          CreditLimitLCYExpendedPct := 0;
        Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" > 1:
          CreditLimitLCYExpendedPct := 10000;
        ELSE
          CreditLimitLCYExpendedPct := ROUND(Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" * 10000,1);
      END;

      TempVATAmountLine1.MODIFYALL(Modified,FALSE);
      TempVATAmountLine2.MODIFYALL(Modified,FALSE);
      TempVATAmountLine3.MODIFYALL(Modified,FALSE);
      TempVATAmountLine4.MODIFYALL(Modified,FALSE);

      PrevTab := -1;

      UpdateHeaderInfo(2,TempVATAmountLine2);
    END;

    LOCAL PROCEDURE UpdateHeaderInfo@5(IndexNo@1000 : Integer;VAR VATAmountLine@1001 : Record 290);
    VAR
      CurrExchRate@1002 : Record 330;
      UseDate@1003 : Date;
    BEGIN
      TotalSalesLine[IndexNo]."Inv. Discount Amount" := VATAmountLine.GetTotalInvDiscAmount;
      TotalAmount1[IndexNo] :=
        TotalSalesLine[IndexNo]."Line Amount" - TotalSalesLine[IndexNo]."Inv. Discount Amount";
      VATAmount[IndexNo] := VATAmountLine.GetTotalVATAmount;
      IF "Prices Including VAT" THEN BEGIN
        TotalAmount1[IndexNo] := VATAmountLine.GetTotalAmountInclVAT;
        TotalAmount2[IndexNo] := TotalAmount1[IndexNo] - VATAmount[IndexNo];
        TotalSalesLine[IndexNo]."Line Amount" :=
          TotalAmount1[IndexNo] + TotalSalesLine[IndexNo]."Inv. Discount Amount";
      END ELSE
        TotalAmount2[IndexNo] := TotalAmount1[IndexNo] + VATAmount[IndexNo];

      IF "Prices Including VAT" THEN
        TotalSalesLineLCY[IndexNo].Amount := TotalAmount2[IndexNo]
      ELSE
        TotalSalesLineLCY[IndexNo].Amount := TotalAmount1[IndexNo];
      IF "Currency Code" <> '' THEN
        IF "Posting Date" = 0D THEN
          UseDate := WORKDATE
        ELSE
          UseDate := "Posting Date";

      TotalSalesLineLCY[IndexNo].Amount :=
        CurrExchRate.ExchangeAmtFCYToLCY(
          UseDate,"Currency Code",TotalSalesLineLCY[IndexNo].Amount,"Currency Factor");

      ProfitLCY[IndexNo] := TotalSalesLineLCY[IndexNo].Amount - TotalSalesLineLCY[IndexNo]."Unit Cost (LCY)";
      IF TotalSalesLineLCY[IndexNo].Amount = 0 THEN
        ProfitPct[IndexNo] := 0
      ELSE
        ProfitPct[IndexNo] := ROUND(100 * ProfitLCY[IndexNo] / TotalSalesLineLCY[IndexNo].Amount,0.01);

      AdjProfitLCY[IndexNo] := TotalSalesLineLCY[IndexNo].Amount - TotalAdjCostLCY[IndexNo];
      IF TotalSalesLineLCY[IndexNo].Amount = 0 THEN
        AdjProfitPct[IndexNo] := 0
      ELSE
        AdjProfitPct[IndexNo] := ROUND(100 * AdjProfitLCY[IndexNo] / TotalSalesLineLCY[IndexNo].Amount,0.01);
    END;

    LOCAL PROCEDURE GetVATSpecification@21(QtyType@1000 : 'General,Invoicing,Shipping');
    BEGIN
      CASE QtyType OF
        QtyType::General:
          BEGIN
            VATLinesForm.GetTempVATAmountLine(TempVATAmountLine1);
            UpdateHeaderInfo(1,TempVATAmountLine1);
          END;
        QtyType::Invoicing:
          BEGIN
            VATLinesForm.GetTempVATAmountLine(TempVATAmountLine2);
            UpdateHeaderInfo(2,TempVATAmountLine2);
          END;
        QtyType::Shipping:
          VATLinesForm.GetTempVATAmountLine(TempVATAmountLine3);
      END;
    END;

    LOCAL PROCEDURE UpdateTotalAmount@16(IndexNo@1000 : Integer);
    VAR
      SaveTotalAmount@1001 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      IF "Prices Including VAT" THEN BEGIN
        SaveTotalAmount := TotalAmount1[IndexNo];
        UpdateInvDiscAmount(IndexNo);
        TotalAmount1[IndexNo] := SaveTotalAmount;
      END;

      WITH TotalSalesLine[IndexNo] DO
        "Inv. Discount Amount" := "Line Amount" - TotalAmount1[IndexNo];
      UpdateInvDiscAmount(IndexNo);
    END;

    LOCAL PROCEDURE UpdateInvDiscAmount@3(ModifiedIndexNo@1000 : Integer);
    VAR
      PartialInvoicing@1001 : Boolean;
      MaxIndexNo@1002 : Integer;
      IndexNo@1003 : ARRAY [2] OF Integer;
      i@1004 : Integer;
      InvDiscBaseAmount@1005 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      IF NOT (ModifiedIndexNo IN [1,2]) THEN
        EXIT;

      IF InvoicedLineExists THEN
        IF NOT CONFIRM(UpdateInvDiscountQst,FALSE) THEN
          ERROR('');

      IF ModifiedIndexNo = 1 THEN
        InvDiscBaseAmount := TempVATAmountLine1.GetTotalInvDiscBaseAmount(FALSE,"Currency Code")
      ELSE
        InvDiscBaseAmount := TempVATAmountLine2.GetTotalInvDiscBaseAmount(FALSE,"Currency Code");

      IF InvDiscBaseAmount = 0 THEN
        ERROR(Text003,TempVATAmountLine2.FIELDCAPTION("Inv. Disc. Base Amount"));

      IF TotalSalesLine[ModifiedIndexNo]."Inv. Discount Amount" / InvDiscBaseAmount > 1 THEN
        ERROR(
          Text004,
          TotalSalesLine[ModifiedIndexNo].FIELDCAPTION("Inv. Discount Amount"),
          TempVATAmountLine2.FIELDCAPTION("Inv. Disc. Base Amount"));

      PartialInvoicing := (TotalSalesLine[1]."Line Amount" <> TotalSalesLine[2]."Line Amount");

      IndexNo[1] := ModifiedIndexNo;
      IndexNo[2] := 3 - ModifiedIndexNo;
      IF (ModifiedIndexNo = 2) AND PartialInvoicing THEN
        MaxIndexNo := 1
      ELSE
        MaxIndexNo := 2;

      IF NOT PartialInvoicing THEN
        IF ModifiedIndexNo = 1 THEN
          TotalSalesLine[2]."Inv. Discount Amount" := TotalSalesLine[1]."Inv. Discount Amount"
        ELSE
          TotalSalesLine[1]."Inv. Discount Amount" := TotalSalesLine[2]."Inv. Discount Amount";

      FOR i := 1 TO MaxIndexNo DO
        WITH TotalSalesLine[IndexNo[i]] DO BEGIN
          IF (i = 1) OR NOT PartialInvoicing THEN
            IF IndexNo[i] = 1 THEN BEGIN
              TempVATAmountLine1.SetInvoiceDiscountAmount(
                "Inv. Discount Amount","Currency Code","Prices Including VAT","VAT Base Discount %");
            END ELSE
              TempVATAmountLine2.SetInvoiceDiscountAmount(
                "Inv. Discount Amount","Currency Code","Prices Including VAT","VAT Base Discount %");

          IF (i = 2) AND PartialInvoicing THEN
            IF IndexNo[i] = 1 THEN BEGIN
              InvDiscBaseAmount := TempVATAmountLine2.GetTotalInvDiscBaseAmount(FALSE,"Currency Code");
              IF InvDiscBaseAmount = 0 THEN
                TempVATAmountLine1.SetInvoiceDiscountPercent(
                  0,"Currency Code","Prices Including VAT",FALSE,"VAT Base Discount %")
              ELSE
                TempVATAmountLine1.SetInvoiceDiscountPercent(
                  100 * TempVATAmountLine2.GetTotalInvDiscAmount / InvDiscBaseAmount,
                  "Currency Code","Prices Including VAT",FALSE,"VAT Base Discount %");
            END ELSE BEGIN
              InvDiscBaseAmount := TempVATAmountLine1.GetTotalInvDiscBaseAmount(FALSE,"Currency Code");
              IF InvDiscBaseAmount = 0 THEN
                TempVATAmountLine2.SetInvoiceDiscountPercent(
                  0,"Currency Code","Prices Including VAT",FALSE,"VAT Base Discount %")
              ELSE
                TempVATAmountLine2.SetInvoiceDiscountPercent(
                  100 * TempVATAmountLine1.GetTotalInvDiscAmount / InvDiscBaseAmount,
                  "Currency Code","Prices Including VAT",FALSE,"VAT Base Discount %");
            END;
        END;

      UpdateHeaderInfo(1,TempVATAmountLine1);
      UpdateHeaderInfo(2,TempVATAmountLine2);

      IF ModifiedIndexNo = 1 THEN
        VATLinesForm.SetTempVATAmountLine(TempVATAmountLine1)
      ELSE
        VATLinesForm.SetTempVATAmountLine(TempVATAmountLine2);

      "Invoice Discount Calculation" := "Invoice Discount Calculation"::Amount;
      "Invoice Discount Value" := TotalSalesLine[1]."Inv. Discount Amount";
      MODIFY;

      UpdateVATOnSalesLines;
    END;

    LOCAL PROCEDURE UpdatePrepmtAmount@9();
    VAR
      TempSalesLine@1001 : TEMPORARY Record 37;
      SalesPostPrepmt@1000 : Codeunit 442;
    BEGIN
      SalesPostPrepmt.UpdatePrepmtAmountOnSaleslines(Rec,PrepmtTotalAmount);
      SalesPostPrepmt.GetSalesLines(Rec,0,TempSalesLine);
      SalesPostPrepmt.SumPrepmt(
        Rec,TempSalesLine,TempVATAmountLine4,PrepmtTotalAmount,PrepmtVATAmount,PrepmtVATAmountText);
      PrepmtInvPct :=
        Pct(TotalSalesLine[1]."Prepmt. Amt. Inv.",PrepmtTotalAmount);
      PrepmtDeductedPct :=
        Pct(TotalSalesLine[1]."Prepmt Amt Deducted",TotalSalesLine[1]."Prepmt. Amt. Inv.");
      IF "Prices Including VAT" THEN BEGIN
        PrepmtTotalAmount2 := PrepmtTotalAmount;
        PrepmtTotalAmount := PrepmtTotalAmount + PrepmtVATAmount;
      END ELSE
        PrepmtTotalAmount2 := PrepmtTotalAmount + PrepmtVATAmount;
      MODIFY;
    END;

    LOCAL PROCEDURE GetCaptionClass@2(FieldCaption@1000 : Text[100];ReverseCaption@1001 : Boolean) : Text[80];
    BEGIN
      IF "Prices Including VAT" XOR ReverseCaption THEN
        EXIT('2,1,' + FieldCaption);
      EXIT('2,0,' + FieldCaption);
    END;

    LOCAL PROCEDURE UpdateVATOnSalesLines@1();
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      GetVATSpecification(ActiveTab);
      IF TempVATAmountLine1.GetAnyLineModified THEN
        SalesLine.UpdateVATOnLines(0,Rec,SalesLine,TempVATAmountLine1);
      IF TempVATAmountLine2.GetAnyLineModified THEN
        SalesLine.UpdateVATOnLines(1,Rec,SalesLine,TempVATAmountLine2);
      PrevNo := '';
    END;

    LOCAL PROCEDURE CustInvDiscRecExists@4(InvDiscCode@1000 : Code[20]) : Boolean;
    VAR
      CustInvDisc@1001 : Record 19;
    BEGIN
      CustInvDisc.SETRANGE(Code,InvDiscCode);
      EXIT(CustInvDisc.FINDFIRST);
    END;

    LOCAL PROCEDURE CheckAllowInvDisc@8();
    BEGIN
      IF NOT AllowInvDisc THEN
        ERROR(Text005,"Invoice Disc. Code");
    END;

    LOCAL PROCEDURE Pct@6(Numerator@1001 : Decimal;Denominator@1000 : Decimal) : Decimal;
    BEGIN
      IF Denominator = 0 THEN
        EXIT(0);
      EXIT(ROUND(Numerator / Denominator * 10000,1));
    END;

    LOCAL PROCEDURE VATLinesDrillDown@7(VAR VATLinesToDrillDown@1000 : Record 290;ThisTabAllowsVATEditing@1001 : Boolean);
    BEGIN
      CLEAR(VATLinesForm);
      VATLinesForm.SetTempVATAmountLine(VATLinesToDrillDown);
      VATLinesForm.InitGlobals(
        "Currency Code",AllowVATDifference,AllowVATDifference AND ThisTabAllowsVATEditing,
        "Prices Including VAT",AllowInvDisc,"VAT Base Discount %");
      VATLinesForm.RUNMODAL;
      VATLinesForm.GetTempVATAmountLine(VATLinesToDrillDown);
    END;

    LOCAL PROCEDURE TotalAmount21OnAfterValidate@19074760();
    BEGIN
      WITH TotalSalesLine[1] DO BEGIN
        IF "Prices Including VAT" THEN
          "Inv. Discount Amount" := "Line Amount" - "Amount Including VAT"
        ELSE
          "Inv. Discount Amount" := "Line Amount" - Amount;
      END;
      UpdateInvDiscAmount(1);
    END;

    BEGIN
    END.
  }
}

