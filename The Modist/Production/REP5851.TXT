OBJECT Report 5851 Suggest Item Standard Cost
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Suggest Item Standard Cost;
               ENG=Suggest Item Standard Cost];
    ProcessingOnly=Yes;
    OnInitReport=VAR
                   i@1000 : Integer;
                 BEGIN
                   FOR i := 1 TO ARRAYLEN(AmtAdjustFactor) DO
                     IF AmtAdjustFactor[i] = 0 THEN
                       AmtAdjustFactor[i] := 1;
                 END;

    OnPreReport=VAR
                  StdCostWkshName@1002 : Record 5840;
                BEGIN
                  IF ToStdCostWkshName = '' THEN
                    ERROR(STRSUBSTNO(Text004));
                  StdCostWkshName.GET(ToStdCostWkshName);

                  ToStdCostWksh.LOCKTABLE
                END;

  }
  DATASET
  {
    { 8129;    ;DataItem;                    ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               WindowUpdateDateTime := CURRENTDATETIME;
                               Window.OPEN(Text007 + Text008);
                             END;

               OnAfterGetRecord=BEGIN
                                  InsertStdCostWksh("No.");
                                  IF CURRENTDATETIME - WindowUpdateDateTime >= 750 THEN BEGIN
                                    Window.UPDATE(1,"No.");
                                    WindowUpdateDateTime := CURRENTDATETIME;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;
                              END;

               ReqFilterFields=No.,Vendor No.,Replenishment System,Costing Method }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=VAR
                   i@1000 : Integer;
                 BEGIN
                   FOR i := 1 TO ARRAYLEN(AmtAdjustFactor) DO
                     IF AmtAdjustFactor[i] = 0 THEN
                       AmtAdjustFactor[i] := 1;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 33  ;2   ;Group     ;
                  CaptionML=[ENU=Standard Cost;
                             ENG=Standard Cost] }

      { 18  ;3   ;Field     ;
                  CaptionML=[ENU=Adjustment Factor;
                             ENG=Adjustment Factor];
                  DecimalPlaces=0:5;
                  NotBlank=Yes;
                  SourceExpr=AmtAdjustFactor[1];
                  MinValue=0 }

      { 14  ;3   ;Field     ;
                  CaptionML=[ENU=Rounding Method;
                             ENG=Rounding Method];
                  SourceExpr=RoundingMethod[1];
                  TableRelation="Rounding Method" }

      { 35  ;2   ;Group     ;
                  CaptionML=[ENU=Indirect Cost %;
                             ENG=Indirect Cost %] }

      { 1   ;3   ;Field     ;
                  CaptionML=[ENU=Adjustment Factor;
                             ENG=Adjustment Factor];
                  DecimalPlaces=0:5;
                  NotBlank=Yes;
                  SourceExpr=AmtAdjustFactor[2];
                  MinValue=0 }

      { 2   ;3   ;Field     ;
                  CaptionML=[ENU=Rounding Method;
                             ENG=Rounding Method];
                  SourceExpr=RoundingMethod[2];
                  TableRelation="Rounding Method" }

      { 36  ;2   ;Group     ;
                  CaptionML=[ENU=Overhead Rate;
                             ENG=Overhead Rate] }

      { 3   ;3   ;Field     ;
                  CaptionML=[ENU=Adjustment Factor;
                             ENG=Adjustment Factor];
                  DecimalPlaces=0:5;
                  NotBlank=Yes;
                  SourceExpr=AmtAdjustFactor[3];
                  MinValue=0 }

      { 4   ;3   ;Field     ;
                  CaptionML=[ENU=Rounding Method;
                             ENG=Rounding Method];
                  SourceExpr=RoundingMethod[3];
                  TableRelation="Rounding Method" }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text004@1003 : TextConst 'ENU=You must specify a worksheet name to copy to.;ENG=You must specify a worksheet name to copy to.';
      Text007@1006 : TextConst 'ENU=Copying worksheet...\\;ENG=Copying worksheet...\\';
      Text008@1007 : TextConst 'ENU=Item No. #1####################\;ENG=Item No. #1####################\';
      ToStdCostWksh@1010 : Record 5841;
      ToStdCostWkshName@1026 : Code[10];
      RoundingMethod@1015 : ARRAY [3] OF Code[10];
      AmtAdjustFactor@1031 : ARRAY [3] OF Decimal;
      Window@1011 : Dialog;
      WindowUpdateDateTime@1002 : DateTime;

    LOCAL PROCEDURE InsertStdCostWksh@2(No2@1000 : Code[20]);
    BEGIN
      WITH ToStdCostWksh DO BEGIN
        INIT;
        VALIDATE("Standard Cost Worksheet Name",ToStdCostWkshName);
        VALIDATE(Type,Type::Item);
        VALIDATE("No.",No2);

        VALIDATE(
          "New Standard Cost",
          RoundAndAdjustAmt("Standard Cost",RoundingMethod[1],AmtAdjustFactor[1]));
        VALIDATE(
          "New Indirect Cost %",
          RoundAndAdjustAmt("Indirect Cost %",RoundingMethod[2],AmtAdjustFactor[2]));
        VALIDATE(
          "New Overhead Rate",
          RoundAndAdjustAmt("Overhead Rate",RoundingMethod[3],AmtAdjustFactor[3]));

        IF NOT INSERT(TRUE) THEN
          MODIFY(TRUE);
      END;
    END;

    PROCEDURE RoundAndAdjustAmt@4(Amt@1000 : Decimal;RoundingMethodCode@1001 : Code[10];AmtAdjustFactor@1005 : Decimal) : Decimal;
    VAR
      RoundingMethod@1002 : Record 42;
      Sign@1004 : Decimal;
    BEGIN
      IF Amt = 0 THEN
        EXIT(Amt);

      Amt := ROUND(Amt * AmtAdjustFactor,0.00001);

      IF RoundingMethodCode <> '' THEN
        WITH RoundingMethod DO BEGIN
          IF Amt >= 0 THEN
            Sign := 1
          ELSE
            Sign := -1;

          SETRANGE(Code,RoundingMethodCode);
          Code := RoundingMethodCode;
          "Minimum Amount" := ABS(Amt);
          IF FIND('=<') THEN BEGIN
            Amt := Amt + Sign * "Amount Added Before";
            IF Precision > 0 THEN
              Amt := Sign * ROUND(ABS(Amt),Precision,COPYSTR('=><',Type + 1,1));
            Amt := Amt + Sign * "Amount Added After";
          END;
        END;

      EXIT(Amt);
    END;

    PROCEDURE SetCopyToWksh@3(ToStdCostWkshName2@1001 : Code[10]);
    BEGIN
      ToStdCostWkshName := ToStdCostWkshName2;
    END;

    PROCEDURE Initialize@1(ToStdCostWkshName2@1004 : Code[10];AmtAdjustFactor1@1007 : Decimal;AmtAdjustFactor2@1000 : Decimal;AmtAdjustFactor3@1001 : Decimal;RoundingMethod1@1008 : Code[10];RoundingMethod2@1002 : Code[10];RoundingMethod3@1003 : Code[10]);
    BEGIN
      ToStdCostWkshName := ToStdCostWkshName2;
      AmtAdjustFactor[1] := AmtAdjustFactor1;
      AmtAdjustFactor[2] := AmtAdjustFactor2;
      AmtAdjustFactor[3] := AmtAdjustFactor3;
      RoundingMethod[1] := RoundingMethod1;
      RoundingMethod[2] := RoundingMethod2;
      RoundingMethod[3] := RoundingMethod3;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

