OBJECT Codeunit 9087001 nSemble Sequence Management
{
  OBJECT-PROPERTIES
  {
    Date=08/09/16;
    Time=[ 9:08:24 AM];
    Version List=NS2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      nSembleSetup@1000000000 : Record 9087000;
      SequenceToolkit@1000000005 : Codeunit 9062519;
      Range@1000000002 : Integer;
      Step@1000000001 : Integer;
      Loop@1000000004 : Boolean;
      Sequence@1000000003 : Integer;

    PROCEDURE "--- Set Sequence Methods ---"@1000000006();
    BEGIN
    END;

    PROCEDURE SetSizeGroupSequence@1000000007(VAR pSizeGroup@1000000000 : Record 9087001;VAR pSizeGroupSelected@1000000001 : Record 9087001) : Boolean;
    VAR
      lSizeGroup@1000000008 : Record 9087001;
      lSizeGroupTmp@1000000007 : TEMPORARY Record 9087001;
    BEGIN
      //DOC NS2015.1 - Setting size group sequence
      //  <> pSizeGroup: Size group recordset
      //  <> pSizeGroupSelected: Size group selected recordset
      //  <- TRUE = Sequences set, FALSE = Not

      lSizeGroup.RESET();

      IF ( NOT (GetParameters(lSizeGroup.COUNT, pSizeGroupSelected.COUNT))) THEN
        EXIT(FALSE);

      CASE (Range) OF
        nSembleSetup.Range::Selected:
          Loop := pSizeGroupSelected.FINDSET();
        nSembleSetup.Range::All:
          Loop := lSizeGroup.FINDSET();
      END;

      WHILE (Loop) DO
      BEGIN
        CASE (Range) OF
          nSembleSetup.Range::Selected:
            lSizeGroupTmp := pSizeGroupSelected;
          nSembleSetup.Range::All:
            lSizeGroupTmp := lSizeGroup;
        END;
        lSizeGroupTmp.Sequence := SequencePlusStep();
        lSizeGroupTmp.INSERT();
        CASE (Range) OF
          nSembleSetup.Range::Selected:
            Loop := (pSizeGroupSelected.NEXT() <> 0);
          nSembleSetup.Range::All:
            Loop := (lSizeGroup.NEXT() <> 0);
        END;
      END;

      lSizeGroupTmp.RESET();
      IF (lSizeGroupTmp.FINDSET()) THEN
      REPEAT
        lSizeGroup.GET(lSizeGroupTmp.Code);
        lSizeGroup.VALIDATE(Sequence, lSizeGroupTmp.Sequence);
        lSizeGroup.MODIFY(TRUE);
      UNTIL (lSizeGroupTmp.NEXT() = 0);

      EXIT(TRUE);
    END;

    PROCEDURE SetSizeSequence@1000000000(VAR pSize@1000000000 : Record 9087002;VAR pSizeSelected@1000000001 : Record 9087002) : Boolean;
    VAR
      lSize@1000000008 : Record 9087002;
      lSizeTmp@1000000007 : TEMPORARY Record 9087002;
    BEGIN
      //DOC NS2015.1 - Setting size sequence
      //  <> pSize: Size recordset
      //  <> pSizeSelected: Size selected recordset
      //  <- TRUE = Sequences set, FALSE = Not

      lSize.RESET();
      lSize.SETRANGE("Size Group Code", pSize."Size Group Code");

      IF ( NOT (GetParameters(lSize.COUNT, pSizeSelected.COUNT))) THEN
        EXIT(FALSE);

      CASE (Range) OF
        nSembleSetup.Range::Selected:
          Loop := pSizeSelected.FINDSET();
        nSembleSetup.Range::All:
          Loop := lSize.FINDSET();
      END;

      WHILE (Loop) DO
      BEGIN
        CASE (Range) OF
          nSembleSetup.Range::Selected:
            lSizeTmp := pSizeSelected;
          nSembleSetup.Range::All:
            lSizeTmp := lSize;
        END;
        lSizeTmp.Sequence := SequencePlusStep();
        lSizeTmp.INSERT();
        CASE (Range) OF
          nSembleSetup.Range::Selected:
            Loop := (pSizeSelected.NEXT() <> 0);
          nSembleSetup.Range::All:
            Loop := (lSize.NEXT() <> 0);
        END;
      END;

      lSizeTmp.RESET();
      IF (lSizeTmp.FINDSET()) THEN
      REPEAT
        lSize.GET(lSizeTmp."Size Group Code", lSizeTmp.Code);
        lSize.VALIDATE(Sequence, lSizeTmp.Sequence);
        lSize.MODIFY(TRUE);
      UNTIL (lSizeTmp.NEXT() = 0);

      EXIT(TRUE);
    END;

    PROCEDURE SetColourSequence@1000000009(VAR pColour@1000000000 : Record 9087003;VAR pColourSelected@1000000001 : Record 9087003) : Boolean;
    VAR
      lColour@1000000008 : Record 9087003;
      lColourTmp@1000000007 : TEMPORARY Record 9087003;
    BEGIN
      //DOC NS2015.1 - Setting colour sequence
      //  <> pColour: Colour recordset
      //  <> pColourSelected: Colour selected recordset
      //  <- TRUE = Sequences set, FALSE = Not

      lColour.RESET();

      IF ( NOT (GetParameters(lColour.COUNT, pColourSelected.COUNT))) THEN
        EXIT(FALSE);

      CASE (Range) OF
        nSembleSetup.Range::Selected:
          Loop := pColourSelected.FINDSET();
        nSembleSetup.Range::All:
          Loop := lColour.FINDSET();
      END;

      WHILE (Loop) DO
      BEGIN
        CASE (Range) OF
          nSembleSetup.Range::Selected:
            lColourTmp := pColourSelected;
          nSembleSetup.Range::All:
            lColourTmp := lColour;
        END;
        lColourTmp.Sequence := SequencePlusStep();
        lColourTmp.INSERT();
        CASE (Range) OF
          nSembleSetup.Range::Selected:
            Loop := (pColourSelected.NEXT() <> 0);
          nSembleSetup.Range::All:
            Loop := (lColour.NEXT() <> 0);
        END;
      END;

      lColourTmp.RESET();
      IF (lColourTmp.FINDSET()) THEN
      REPEAT
        lColour.GET(lColourTmp.Code);
        lColour.VALIDATE(Sequence, lColourTmp.Sequence);
        lColour.MODIFY(TRUE);
      UNTIL (lColourTmp.NEXT() = 0);

      EXIT(TRUE);
    END;

    PROCEDURE "--- Moving Size Group ---"@1000000002();
    BEGIN
    END;

    PROCEDURE MoveSizeGroupDown@1000000008(VAR pSizeGroup@1000000000 : Record 9087001) : Boolean;
    BEGIN
      //DOC NS2015.1 - Moving size group down
      //  <> pSizeGroup: Size group to amend
      //  <- TRUE = Size group moved, FALSE = Not really

      EXIT(MoveSizeGroup(pSizeGroup, SequenceToolkit.Down()));
    END;

    PROCEDURE MoveSizeGroupUp@1000000010(VAR pSizeGroup@1000000000 : Record 9087001) : Boolean;
    BEGIN
      //DOC NS2015.1 - Moving size group up
      //  <> pSizeGroup: Size group to amend
      //  <- TRUE = Size group moved, FALSE = Not really

      EXIT(MoveSizeGroup(pSizeGroup, SequenceToolkit.Up()));
    END;

    LOCAL PROCEDURE MoveSizeGroup@1000000019(VAR pSizeGroup@1000000000 : Record 9087001;pDirection@1000000001 : Option) : Boolean;
    VAR
      lSizeGroupVariant@1000000002 : Variant;
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NS2015.1 - Moving size group up / down
      //  <> pSizeGroup: Size group to amend
      //  -> pDirection: Direction (up / down); see "SequenceToolkit" for functions
      //  <- TRUE = Size group moved, FALSE = Not really

      lSizeGroupVariant := pSizeGroup;
      lResult := SequenceToolkit.SequenceUpDown(lSizeGroupVariant, DATABASE::"Size Group", pSizeGroup.FIELDNO(Sequence), pDirection);
      pSizeGroup := lSizeGroupVariant;
      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Moving Size ---"@1000000017();
    BEGIN
    END;

    PROCEDURE MoveSizeDown@1000000014(VAR pSize@1000000000 : Record 9087002) : Boolean;
    BEGIN
      //DOC NS2015.1 - Moving size down
      //  <> pSize: Size to amend
      //  <- TRUE = Size moved, FALSE = Not really

      EXIT(MoveSize(pSize, SequenceToolkit.Down()));
    END;

    PROCEDURE MoveSizeUp@1000000013(VAR pSize@1000000000 : Record 9087002) : Boolean;
    BEGIN
      //DOC NS2015.1 - Moving size up
      //  <> pSize: Size to amend
      //  <- TRUE = Size moved, FALSE = Not really

      EXIT(MoveSize(pSize, SequenceToolkit.Up()));
    END;

    LOCAL PROCEDURE MoveSize@1000000005(VAR pSize@1000000000 : Record 9087002;pDirection@1000000001 : Integer) : Boolean;
    VAR
      lSizeVariant@1000000002 : Variant;
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NS2015.1 - Moving size up / down
      //  <> pSize: Size to amend
      //  -> pDirection: Direction (up / down); see "SequenceToolkit" for functions
      //  <- TRUE = Size moved, FALSE = Not really

      lSizeVariant := pSize;
      lResult := SequenceToolkit.SequenceUpDown(lSizeVariant, DATABASE::Size, pSize.FIELDNO(Sequence), pDirection);
      pSize := lSizeVariant;
      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Moving Colour ---"@1000000022();
    BEGIN
    END;

    PROCEDURE MoveColourDown@1000000024(VAR pColour@1000000000 : Record 9087003) : Boolean;
    BEGIN
      //DOC NS2015.1 - Moving colour down
      //  <> pColour: Colour to amend
      //  <- TRUE = Size moved, FALSE = Not really

      EXIT(MoveColour(pColour, SequenceToolkit.Down()));
    END;

    PROCEDURE MoveColourUp@1000000023(VAR pColour@1000000000 : Record 9087003) : Boolean;
    VAR
      lColourVariant@1000000002 : Variant;
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NS2015.1 - Moving colour up
      //  <> pColour: Colour to amend
      //  <- TRUE = Size moved, FALSE = Not really

      EXIT(MoveColour(pColour, SequenceToolkit.Up()));
    END;

    LOCAL PROCEDURE MoveColour@1000000020(VAR pColour@1000000000 : Record 9087003;pDirection@1000000001 : Integer) : Boolean;
    VAR
      lColourVariant@1000000002 : Variant;
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NS2015.1 - Moving colour up / down
      //  <> pColour: Colour to amend
      //  -> pDirection: Direction (up / down); see "SequenceToolkit" for functions
      //  <- TRUE = Size moved, FALSE = Not really

      lColourVariant := pColour;
      lResult := SequenceToolkit.SequenceUpDown(lColourVariant, DATABASE::Colour, pColour.FIELDNO(Sequence), pDirection);
      pColour := lColourVariant;
      EXIT(lResult);
    END;

    PROCEDURE "--- Tools ---"@1000000001();
    BEGIN
    END;

    LOCAL PROCEDURE GetParameters@1000000003(pSelectedLines@1000000001 : Integer;pAllLines@1000000002 : Integer) : Boolean;
    VAR
      lSetSequence@1000000000 : Report 9087006;
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NS2015.1 - Getting parameters regarding to sequence setting
      //  -> pSelectedLines: Count of selected lines
      //  -> pAllLines: Count of all lines
      //  <- TRUE = Parameters established, FALSE = user cancelled

      Range := nSembleSetup.Range::Selected;
      Step := 10;
      Sequence := 0;

      CLEAR(lSetSequence);
      lSetSequence.Initialise(Range, pSelectedLines, pAllLines);
      lSetSequence.RUNMODAL();
      IF (lSetSequence.OK) THEN
      BEGIN
        Range := lSetSequence.GetRange();
        Step := lSetSequence.GetStep();
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE SequencePlusStep@1000000004() : Integer;
    BEGIN
      //DOC NS2015.1 - Adding step to sequence and returning it
      //  <- The sequence increased by step

      Sequence += Step;
      EXIT(Sequence);
    END;

    BEGIN
    {
      //DOC NS2015.1  JH 12/02/2014 - Created
      //DOC NS2016.16 JH 07/09/2016 - nSemble 2016
    }
    END.
  }
}

