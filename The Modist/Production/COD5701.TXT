OBJECT Codeunit 5701 Item Subst.
{
  OBJECT-PROPERTIES
  {
    Date=26/11/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43897;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This substitute item has a different sale unit of measure.;ENG=This substitute item has a different sale unit of measure.';
      Item@1001 : Record 27;
      ItemSubstitution@1002 : Record 5715;
      TempItemSubstitution@1003 : TEMPORARY Record 5715;
      SalesHeader@1004 : Record 36;
      NonStockItem@1006 : Record 5718;
      TempSalesLine@1023 : TEMPORARY Record 37;
      ServInvLine@1007 : Record 5902;
      ItemUnitOfMeasure@1026 : Record 5404;
      CompanyInfo@1008 : Record 79;
      NonstockItemMgt@1011 : Codeunit 5703;
      AvailToPromise@1012 : Codeunit 5790;
      ItemCheckAvail@1005 : Codeunit 311;
      SaveDropShip@1013 : Boolean;
      SetupDataIsPresent@1014 : Boolean;
      GrossReq@1015 : Decimal;
      SchedRcpt@1016 : Decimal;
      SaveQty@1017 : Decimal;
      SaveItemNo@1018 : Code[20];
      SaveVariantCode@1019 : Code[10];
      SaveLocation@1020 : Code[10];
      OldSalesUOM@1021 : Code[10];
      Text001@1022 : TextConst 'ENU=An Item Substitution with the specified variant does not exist for Item No. ''%1''.;ENG=An Item Substitution with the specified variant does not exist for Item No. ''%1''.';
      Text002@1025 : TextConst 'ENU=An Item Substitution does not exist for Item No. ''%1'';ENG=An Item Substitution does not exist for Item No. ''%1''';

    PROCEDURE ItemSubstGet@3(VAR SalesLine@1000 : Record 37) : Code[10];
    BEGIN
      TempSalesLine := SalesLine;
      IF (TempSalesLine.Type <> TempSalesLine.Type::Item) OR
         (TempSalesLine."Document Type" IN
          [TempSalesLine."Document Type"::"Return Order",TempSalesLine."Document Type"::"Credit Memo"])
      THEN
        EXIT;

      SaveItemNo := TempSalesLine."No.";
      SaveVariantCode := TempSalesLine."Variant Code";

      Item.GET(TempSalesLine."No.");
      Item.SETFILTER("Location Filter",TempSalesLine."Location Code");
      Item.SETFILTER("Variant Filter",TempSalesLine."Variant Code");
      Item.SETRANGE("Date Filter",0D,TempSalesLine."Shipment Date");
      Item.CALCFIELDS(Inventory);
      Item.CALCFIELDS("Qty. on Sales Order");
      Item.CALCFIELDS("Qty. on Service Order");
      OldSalesUOM := Item."Sales Unit of Measure";

      ItemSubstitution.RESET;
      ItemSubstitution.SETRANGE(Type,ItemSubstitution.Type::Item);
      ItemSubstitution.SETRANGE("No.",TempSalesLine."No.");
      ItemSubstitution.SETRANGE("Variant Code",TempSalesLine."Variant Code");
      ItemSubstitution.SETRANGE("Location Filter",TempSalesLine."Location Code");
      IF ItemSubstitution.FIND('-') THEN BEGIN
        CalcCustPrice(TempSalesLine);
        TempItemSubstitution.RESET;
        TempItemSubstitution.SETRANGE("No.",TempSalesLine."No.");
        TempItemSubstitution.SETRANGE("Variant Code",TempSalesLine."Variant Code");
        TempItemSubstitution.SETRANGE("Location Filter",TempSalesLine."Location Code");
        IF PAGE.RUNMODAL(PAGE::"Item Substitution Entries",TempItemSubstitution) =
           ACTION::LookupOK
        THEN BEGIN
          IF TempItemSubstitution."Substitute Type" =
             TempItemSubstitution."Substitute Type"::"Nonstock Item"
          THEN BEGIN
            NonStockItem.GET(TempItemSubstitution."Substitute No.");
            IF NonStockItem."Item No." = '' THEN BEGIN
              NonstockItemMgt.CreateItemFromNonstock(NonStockItem);
              NonStockItem.GET(TempItemSubstitution."Substitute No.");
            END;
            TempItemSubstitution."Substitute No." := NonStockItem."Item No."
          END;
          TempSalesLine."No." := TempItemSubstitution."Substitute No.";
          TempSalesLine."Variant Code" := TempItemSubstitution."Substitute Variant Code";
          SaveQty := TempSalesLine.Quantity;
          SaveLocation := TempSalesLine."Location Code";
          SaveDropShip := TempSalesLine."Drop Shipment";
          TempSalesLine.Quantity := 0;
          TempSalesLine.VALIDATE("No.",TempItemSubstitution."Substitute No.");
          TempSalesLine.VALIDATE("Variant Code",TempItemSubstitution."Substitute Variant Code");
          TempSalesLine."Originally Ordered No." := SaveItemNo;
          TempSalesLine."Originally Ordered Var. Code" := SaveVariantCode;
          TempSalesLine."Location Code" := SaveLocation;
          TempSalesLine."Drop Shipment" := SaveDropShip;
          TempSalesLine.VALIDATE(Quantity,SaveQty);
          TempSalesLine.VALIDATE("Unit of Measure Code",OldSalesUOM);
          COMMIT;
          IF ItemCheckAvail.SalesLineCheck(TempSalesLine) THEN
            TempSalesLine := SalesLine;
        END;
      END ELSE
        ERROR(Text001,TempSalesLine."No.");

      SalesLine := TempSalesLine;
    END;

    LOCAL PROCEDURE CalcCustPrice@1(SalesLine@1000 : Record 37);
    BEGIN
      TempItemSubstitution.RESET;
      TempItemSubstitution.DELETEALL;
      SalesHeader.GET(TempSalesLine."Document Type",TempSalesLine."Document No.");
      IF ItemSubstitution.FIND('-') THEN
        REPEAT
          TempItemSubstitution."No." := ItemSubstitution."No.";
          TempItemSubstitution."Variant Code" := ItemSubstitution."Variant Code";
          TempItemSubstitution."Substitute No." := ItemSubstitution."Substitute No.";
          TempItemSubstitution."Substitute Variant Code" := ItemSubstitution."Substitute Variant Code";
          TempItemSubstitution.Description := ItemSubstitution.Description;
          TempItemSubstitution.Interchangeable := ItemSubstitution.Interchangeable;
          TempItemSubstitution."Location Filter" := ItemSubstitution."Location Filter";
          TempItemSubstitution.Condition := ItemSubstitution.Condition;
          TempItemSubstitution."Shipment Date" := TempSalesLine."Shipment Date";
          IF ItemSubstitution."Substitute Type" = ItemSubstitution."Substitute Type"::Item THEN BEGIN
            Item.GET(ItemSubstitution."Substitute No.");
            IF NOT SetupDataIsPresent THEN
              GetSetupData;
            TempItemSubstitution."Quantity Avail. on Shpt. Date" :=
              AvailToPromise.QtyAvailabletoPromise(
                Item,GrossReq,SchedRcpt,
                Item.GETRANGEMAX("Date Filter"),CompanyInfo."Check-Avail. Time Bucket",
                CompanyInfo."Check-Avail. Period Calc.");
            Item.CALCFIELDS(Inventory);
            TempItemSubstitution.Inventory := Item.Inventory;
          END ELSE BEGIN
            TempItemSubstitution."Substitute Type" := TempItemSubstitution."Substitute Type"::"Nonstock Item";
            TempItemSubstitution."Quantity Avail. on Shpt. Date" := 0;
            TempItemSubstitution.Inventory := 0;
          END;
          TempItemSubstitution.INSERT;
        UNTIL ItemSubstitution.NEXT = 0;
    END;

    LOCAL PROCEDURE AssemblyCalcCustPrice@14(AssemblyLine@1000 : Record 901);
    VAR
      AssemblyHeader@1001 : Record 900;
    BEGIN
      TempItemSubstitution.RESET;
      TempItemSubstitution.DELETEALL;
      AssemblyHeader.GET(AssemblyLine.Type,AssemblyLine."Document No.");
      IF ItemSubstitution.FIND('-') THEN
        REPEAT
          TempItemSubstitution."No." := ItemSubstitution."No.";
          TempItemSubstitution."Variant Code" := ItemSubstitution."Variant Code";
          TempItemSubstitution."Substitute No." := ItemSubstitution."Substitute No.";
          TempItemSubstitution."Substitute Variant Code" := ItemSubstitution."Substitute Variant Code";
          TempItemSubstitution.Description := ItemSubstitution.Description;
          TempItemSubstitution.Interchangeable := ItemSubstitution.Interchangeable;
          TempItemSubstitution."Location Filter" := ItemSubstitution."Location Filter";
          TempItemSubstitution.Condition := ItemSubstitution.Condition;
          TempItemSubstitution."Shipment Date" := TempSalesLine."Shipment Date";
          IF ItemSubstitution."Substitute Type" = ItemSubstitution."Substitute Type"::Item THEN BEGIN
            Item.GET(ItemSubstitution."Substitute No.");
            IF NOT SetupDataIsPresent THEN
              GetSetupData;
            TempItemSubstitution."Quantity Avail. on Shpt. Date" :=
              AvailToPromise.QtyAvailabletoPromise(
                Item,GrossReq,SchedRcpt,
                Item.GETRANGEMAX("Date Filter"),CompanyInfo."Check-Avail. Time Bucket",
                CompanyInfo."Check-Avail. Period Calc.");
            Item.CALCFIELDS(Inventory);
            TempItemSubstitution.Inventory := Item.Inventory;
          END ELSE BEGIN
            TempItemSubstitution."Substitute Type" := TempItemSubstitution."Substitute Type"::"Nonstock Item";
            TempItemSubstitution."Quantity Avail. on Shpt. Date" := 0;
            TempItemSubstitution.Inventory := 0;
          END;
          TempItemSubstitution.INSERT;
        UNTIL ItemSubstitution.NEXT = 0;
    END;

    PROCEDURE ItemServiceSubstGet@4(VAR ServInvLine2@1000 : Record 5902) : Code[10];
    BEGIN
      ServInvLine := ServInvLine2;
      IF ServInvLine.Type <> ServInvLine.Type::Item THEN
        EXIT;

      SaveItemNo := ServInvLine."No.";
      SaveVariantCode := ServInvLine."Variant Code";
      Item.GET(ServInvLine."No.");
      Item.SETFILTER("Location Filter",ServInvLine."Location Code");
      Item.SETFILTER("Variant Filter",ServInvLine."Variant Code");
      Item.SETRANGE("Date Filter",0D,ServInvLine."Order Date");
      Item.CALCFIELDS(Inventory);
      Item.CALCFIELDS("Qty. on Sales Order");
      Item.CALCFIELDS("Qty. on Service Order");
      OldSalesUOM := Item."Sales Unit of Measure";

      ItemSubstitution.RESET;
      ItemSubstitution.SETRANGE("No.",ServInvLine."No.");
      ItemSubstitution.SETRANGE("Variant Code",ServInvLine."Variant Code");
      ItemSubstitution.SETRANGE("Location Filter",ServInvLine."Location Code");
      IF ItemSubstitution.FIND('-') THEN BEGIN
        TempItemSubstitution.DELETEALL;
        InsertInSubstServiceList(ServInvLine."No.",ItemSubstitution,1);
        TempItemSubstitution.RESET;
        IF TempItemSubstitution.FIND('-') THEN;
        IF PAGE.RUNMODAL(PAGE::"Service Item Substitutions",TempItemSubstitution) =
           ACTION::LookupOK
        THEN BEGIN
          IF TempItemSubstitution."Substitute Type" =
             TempItemSubstitution."Substitute Type"::"Nonstock Item"
          THEN BEGIN
            NonStockItem.GET(TempItemSubstitution."Substitute No.");
            IF NonStockItem."Item No." <> '' THEN
              TempItemSubstitution."Substitute No." := NonStockItem."Item No."
            ELSE BEGIN
              ServInvLine."No." := TempItemSubstitution."Substitute No.";
              ServInvLine."Variant Code" := TempItemSubstitution."Substitute Variant Code";
              NonstockItemMgt.NonStockFSM(ServInvLine);
              TempItemSubstitution."Substitute No." := ServInvLine."No.";
            END;
          END;
          ServInvLine."No." := TempItemSubstitution."Substitute No.";
          ServInvLine."Variant Code" := TempItemSubstitution."Substitute Variant Code";
          SaveQty := ServInvLine.Quantity;
          SaveLocation := ServInvLine."Location Code";
          ServInvLine.Quantity := 0;
          ServInvLine.VALIDATE("No.",TempItemSubstitution."Substitute No.");
          ServInvLine.VALIDATE("Variant Code",TempItemSubstitution."Substitute Variant Code");
          ServInvLine."Location Code" := SaveLocation;
          ServInvLine.VALIDATE(Quantity,SaveQty);
          ServInvLine.VALIDATE("Unit of Measure Code",OldSalesUOM);
          COMMIT;
          IF ItemCheckAvail.ServiceInvLineCheck(ServInvLine) THEN
            ServInvLine := ServInvLine2;
          IF Item.GET(ServInvLine."No.") AND
             (Item."Sales Unit of Measure" <> OldSalesUOM)
          THEN
            MESSAGE(Text000);
        END;
      END ELSE
        ERROR(Text001,ServInvLine."No.");

      ServInvLine2 := ServInvLine;
    END;

    LOCAL PROCEDURE InsertInSubstServiceList@5(OrgNo@1000 : Code[20];VAR ItemSubstitution3@1001 : Record 5715;RelationsLevel@1002 : Integer);
    VAR
      ItemSubstitution@1003 : Record 5715;
      ItemSubstitution2@1004 : Record 5715;
      NonStockItem@1005 : Record 5718;
      RelatLevel@1006 : Integer;
    BEGIN
      ItemSubstitution.COPY(ItemSubstitution3);
      RelatLevel := RelationsLevel;

      IF ItemSubstitution.FIND('-') THEN
        REPEAT
          CLEAR(TempItemSubstitution);
          TempItemSubstitution.Type := ItemSubstitution.Type;
          TempItemSubstitution."No." := ItemSubstitution."No.";
          TempItemSubstitution."Variant Code" := ItemSubstitution."Variant Code";
          TempItemSubstitution."Substitute Type" := ItemSubstitution."Substitute Type";
          TempItemSubstitution."Substitute No." := ItemSubstitution."Substitute No.";
          TempItemSubstitution."Substitute Variant Code" := ItemSubstitution."Substitute Variant Code";
          TempItemSubstitution.Description := ItemSubstitution.Description;
          TempItemSubstitution.Interchangeable := ItemSubstitution.Interchangeable;
          TempItemSubstitution."Location Filter" := ItemSubstitution."Location Filter";
          TempItemSubstitution."Relations Level" := RelatLevel;

          IF TempItemSubstitution."Substitute Type" = TempItemSubstitution.Type::Item THEN BEGIN
            Item.GET(ItemSubstitution."Substitute No.");
            IF NOT SetupDataIsPresent THEN
              GetSetupData;
            TempItemSubstitution."Quantity Avail. on Shpt. Date" :=
              AvailToPromise.QtyAvailabletoPromise(
                Item,GrossReq,SchedRcpt,
                Item.GETRANGEMAX("Date Filter"),2,
                CompanyInfo."Check-Avail. Period Calc.");
            Item.CALCFIELDS(Inventory);
            TempItemSubstitution.Inventory := Item.Inventory;
          END;

          IF TempItemSubstitution.INSERT AND
             (ItemSubstitution."Substitute No." <> '')
          THEN BEGIN
            ItemSubstitution2.SETRANGE(Type,ItemSubstitution.Type);
            ItemSubstitution2.SETRANGE("No.",ItemSubstitution."Substitute No.");
            ItemSubstitution2.SETFILTER("Substitute No.",'<>%1&<>%2',ItemSubstitution."No.",OrgNo);
            ItemSubstitution.COPYFILTER("Variant Code",ItemSubstitution2."Variant Code");
            ItemSubstitution.COPYFILTER("Location Filter",ItemSubstitution2."Location Filter");
            IF ItemSubstitution2.FINDFIRST THEN
              InsertInSubstServiceList(OrgNo,ItemSubstitution2,(RelatLevel + 1));
          END ELSE BEGIN
            TempItemSubstitution.FIND;
            IF RelatLevel < TempItemSubstitution."Relations Level" THEN BEGIN
              TempItemSubstitution."Relations Level" := RelatLevel;
              TempItemSubstitution.MODIFY;
            END;
          END;

          IF (ItemSubstitution."Substitute Type" = ItemSubstitution."Substitute Type"::"Nonstock Item") AND
             (ItemSubstitution."Substitute No." <> '') AND
             NonStockItem.GET(ItemSubstitution."Substitute No.") AND
             (NonStockItem."Item No." <> '')
          THEN BEGIN
            CLEAR(TempItemSubstitution);
            TempItemSubstitution.Type := ItemSubstitution.Type;
            TempItemSubstitution."No." := ItemSubstitution."No.";
            TempItemSubstitution."Variant Code" := ItemSubstitution."Variant Code";
            TempItemSubstitution."Substitute Type" := TempItemSubstitution."Substitute Type"::Item;
            TempItemSubstitution."Substitute No." := NonStockItem."Item No.";
            TempItemSubstitution."Substitute Variant Code" := '';
            TempItemSubstitution.Description := ItemSubstitution.Description;
            TempItemSubstitution.Interchangeable := ItemSubstitution.Interchangeable;
            TempItemSubstitution."Location Filter" := ItemSubstitution."Location Filter";
            TempItemSubstitution."Relations Level" := RelatLevel;
            IF TempItemSubstitution.INSERT THEN BEGIN
              ItemSubstitution2.SETRANGE(Type,ItemSubstitution2.Type::"Nonstock Item");
              ItemSubstitution2.SETRANGE("No.",NonStockItem."Item No.");
              ItemSubstitution2.SETFILTER("Substitute No.",'<>%1&<>%2',NonStockItem."Item No.",OrgNo);
              ItemSubstitution.COPYFILTER("Variant Code",ItemSubstitution2."Variant Code");
              ItemSubstitution.COPYFILTER("Location Filter",ItemSubstitution2."Location Filter");
              IF ItemSubstitution2.FINDFIRST THEN
                InsertInSubstServiceList(OrgNo,ItemSubstitution2,(RelatLevel + 1));
            END ELSE BEGIN
              TempItemSubstitution.FIND;
              IF RelatLevel < TempItemSubstitution."Relations Level" THEN BEGIN
                TempItemSubstitution."Relations Level" := RelatLevel;
                TempItemSubstitution.MODIFY;
              END;
            END;
          END;
        UNTIL ItemSubstitution.NEXT = 0;
    END;

    LOCAL PROCEDURE GetSetupData@7();
    BEGIN
      CompanyInfo.GET;
      SetupDataIsPresent := TRUE;
    END;

    PROCEDURE GetCompSubst@8(VAR ProdOrderComp@1001 : Record 5407) : Code[10];
    BEGIN
      IF NOT PrepareSubstList(
           ProdOrderComp."Item No.",
           ProdOrderComp."Variant Code",
           ProdOrderComp."Location Code",
           ProdOrderComp."Due Date",
           TRUE)
      THEN
        ErrorMessage(ProdOrderComp."Item No.",ProdOrderComp."Variant Code");

      TempItemSubstitution.RESET;
      TempItemSubstitution.SETRANGE("Variant Code",ProdOrderComp."Variant Code");
      TempItemSubstitution.SETRANGE("Location Filter",ProdOrderComp."Location Code");
      IF TempItemSubstitution.FIND('-') THEN;
      IF PAGE.RUNMODAL(PAGE::"Item Substitution Entries",TempItemSubstitution) = ACTION::LookupOK THEN
        UpdateComponent(ProdOrderComp,TempItemSubstitution."Substitute No.",TempItemSubstitution."Substitute Variant Code");
    END;

    PROCEDURE UpdateComponent@12(VAR ProdOrderComp@1000 : Record 5407;SubstItemNo@1002 : Code[20];SubstVariantCode@1003 : Code[10]);
    VAR
      TempProdOrderComp@1001 : TEMPORARY Record 5407;
    BEGIN
      TempProdOrderComp := ProdOrderComp;

      WITH TempProdOrderComp DO BEGIN
        SaveQty := "Quantity per";

        "Item No." := SubstItemNo;
        "Variant Code" := SubstVariantCode;
        "Location Code" := ProdOrderComp."Location Code";
        "Quantity per" := 0;
        VALIDATE("Item No.");
        VALIDATE("Variant Code");

        "Original Item No." := ProdOrderComp."Item No.";
        "Original Variant Code" := ProdOrderComp."Variant Code";

        IF ProdOrderComp."Qty. per Unit of Measure" <> 1 THEN BEGIN
          IF ItemUnitOfMeasure.GET(Item."No.",ProdOrderComp."Unit of Measure Code") AND
             (ItemUnitOfMeasure."Qty. per Unit of Measure" = ProdOrderComp."Qty. per Unit of Measure")
          THEN
            VALIDATE("Unit of Measure Code",ProdOrderComp."Unit of Measure Code")
          ELSE
            SaveQty := ROUND(ProdOrderComp."Quantity per" * ProdOrderComp."Qty. per Unit of Measure",0.00001);
        END;
        VALIDATE("Quantity per",SaveQty);
      END;

      ProdOrderComp := TempProdOrderComp;
    END;

    PROCEDURE PrepareSubstList@9(ItemNo@1003 : Code[20];VariantCode@1002 : Code[10];LocationCode@1001 : Code[10];DemandDate@1000 : Date;CalcATP@1004 : Boolean) : Boolean;
    BEGIN
      Item.GET(ItemNo);
      Item.SETFILTER("Location Filter",LocationCode);
      Item.SETFILTER("Variant Filter",VariantCode);
      Item.SETRANGE("Date Filter",0D,DemandDate);

      ItemSubstitution.RESET;
      ItemSubstitution.SETRANGE(Type,ItemSubstitution.Type::Item);
      ItemSubstitution.SETRANGE("No.",ItemNo);
      ItemSubstitution.SETRANGE("Variant Code",VariantCode);
      ItemSubstitution.SETRANGE("Location Filter",LocationCode);
      IF ItemSubstitution.FIND('-') THEN BEGIN
        TempItemSubstitution.DELETEALL;
        CreateSubstList(ItemNo,ItemSubstitution,1,DemandDate,CalcATP);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateSubstList@11(OrgNo@1000 : Code[20];VAR ItemSubstitution3@1001 : Record 5715;RelationsLevel@1002 : Integer;DemandDate@1007 : Date;CalcATP@1008 : Boolean);
    VAR
      ItemSubstitution@1003 : Record 5715;
      ItemSubstitution2@1004 : Record 5715;
      RelationsLevel2@1006 : Integer;
      ODF@1009 : DateFormula;
    BEGIN
      ItemSubstitution.COPY(ItemSubstitution3);
      RelationsLevel2 := RelationsLevel;

      IF ItemSubstitution.FIND('-') THEN
        REPEAT
          CLEAR(TempItemSubstitution);
          TempItemSubstitution.Type := ItemSubstitution.Type;
          TempItemSubstitution."No." := ItemSubstitution."No.";
          TempItemSubstitution."Variant Code" := ItemSubstitution."Variant Code";
          TempItemSubstitution."Substitute Type" := ItemSubstitution."Substitute Type";
          TempItemSubstitution."Substitute No." := ItemSubstitution."Substitute No.";
          TempItemSubstitution."Substitute Variant Code" := ItemSubstitution."Substitute Variant Code";
          TempItemSubstitution.Description := ItemSubstitution.Description;
          TempItemSubstitution.Interchangeable := ItemSubstitution.Interchangeable;
          TempItemSubstitution."Location Filter" := ItemSubstitution."Location Filter";
          TempItemSubstitution."Relations Level" := RelationsLevel2;
          TempItemSubstitution."Shipment Date" := DemandDate;

          IF CalcATP THEN BEGIN
            Item.GET(ItemSubstitution."Substitute No.");
            TempItemSubstitution."Quantity Avail. on Shpt. Date" :=
              AvailToPromise.QtyAvailabletoPromise(
                Item,GrossReq,SchedRcpt,
                Item.GETRANGEMAX("Date Filter"),2,ODF);
            Item.CALCFIELDS(Inventory);
            TempItemSubstitution.Inventory := Item.Inventory;
          END;

          IF IsSubstitutionInserted(TempItemSubstitution,ItemSubstitution) THEN BEGIN
            ItemSubstitution2.SETRANGE(Type,ItemSubstitution.Type);
            ItemSubstitution2.SETRANGE("No.",ItemSubstitution."Substitute No.");
            ItemSubstitution2.SETFILTER("Substitute No.",'<>%1&<>%2',ItemSubstitution."No.",OrgNo);
            ItemSubstitution.COPYFILTER("Variant Code",ItemSubstitution2."Variant Code");
            ItemSubstitution.COPYFILTER("Location Filter",ItemSubstitution2."Location Filter");
            IF ItemSubstitution2.FINDFIRST THEN
              CreateSubstList(OrgNo,ItemSubstitution2,RelationsLevel2 + 1,DemandDate,CalcATP);
          END ELSE BEGIN
            TempItemSubstitution.RESET;
            IF TempItemSubstitution.FIND THEN
              IF RelationsLevel2 < TempItemSubstitution."Relations Level" THEN BEGIN
                TempItemSubstitution."Relations Level" := RelationsLevel2;
                TempItemSubstitution.MODIFY;
              END;
          END;
        UNTIL ItemSubstitution.NEXT = 0;
    END;

    PROCEDURE GetTempItemSubstList@10(VAR TempItemSubstitutionList@1000 : TEMPORARY Record 5715);
    BEGIN
      TempItemSubstitutionList.DELETEALL;

      TempItemSubstitution.RESET;
      IF TempItemSubstitution.FIND('-') THEN
        REPEAT
          TempItemSubstitutionList := TempItemSubstitution;
          TempItemSubstitutionList.INSERT;
        UNTIL TempItemSubstitution.NEXT = 0;
    END;

    PROCEDURE ErrorMessage@2(ItemNo@1001 : Code[20];VariantCode@1000 : Code[10]);
    BEGIN
      IF VariantCode <> '' THEN
        ERROR(Text001,ItemNo);

      ERROR(Text002,ItemNo);
    END;

    PROCEDURE ItemAssemblySubstGet@13(VAR AssemblyLine@1000 : Record 901);
    VAR
      TempAssemblyLine@1001 : TEMPORARY Record 901;
    BEGIN
      TempAssemblyLine := AssemblyLine;
      IF TempAssemblyLine.Type <> TempAssemblyLine.Type::Item THEN
        EXIT;

      SaveItemNo := TempAssemblyLine."No.";
      SaveVariantCode := TempAssemblyLine."Variant Code";

      Item.GET(TempAssemblyLine."No.");
      Item.SETFILTER("Location Filter",TempAssemblyLine."Location Code");
      Item.SETFILTER("Variant Filter",TempAssemblyLine."Variant Code");
      Item.SETRANGE("Date Filter",0D,TempAssemblyLine."Due Date");
      Item.CALCFIELDS(Inventory);
      Item.CALCFIELDS("Qty. on Sales Order");
      Item.CALCFIELDS("Qty. on Service Order");
      OldSalesUOM := Item."Sales Unit of Measure";

      ItemSubstitution.RESET;
      ItemSubstitution.SETRANGE(Type,ItemSubstitution.Type::Item);
      ItemSubstitution.SETRANGE("No.",TempAssemblyLine."No.");
      ItemSubstitution.SETRANGE("Variant Code",TempAssemblyLine."Variant Code");
      ItemSubstitution.SETRANGE("Location Filter",TempAssemblyLine."Location Code");
      IF ItemSubstitution.FIND('-') THEN BEGIN
        AssemblyCalcCustPrice(TempAssemblyLine);
        TempItemSubstitution.RESET;
        TempItemSubstitution.SETRANGE(Type,TempItemSubstitution.Type::Item);
        TempItemSubstitution.SETRANGE("No.",TempAssemblyLine."No.");
        TempItemSubstitution.SETRANGE("Variant Code",TempAssemblyLine."Variant Code");
        TempItemSubstitution.SETRANGE("Location Filter",TempAssemblyLine."Location Code");
        IF PAGE.RUNMODAL(PAGE::"Item Substitution Entries",TempItemSubstitution) =
           ACTION::LookupOK
        THEN BEGIN
          TempAssemblyLine."No." := TempItemSubstitution."Substitute No.";
          TempAssemblyLine."Variant Code" := TempItemSubstitution."Substitute Variant Code";
          SaveQty := TempAssemblyLine.Quantity;
          SaveLocation := TempAssemblyLine."Location Code";
          TempAssemblyLine.Quantity := 0;
          TempAssemblyLine.VALIDATE("No.",TempItemSubstitution."Substitute No.");
          TempAssemblyLine.VALIDATE("Variant Code",TempItemSubstitution."Substitute Variant Code");
          TempAssemblyLine."Location Code" := SaveLocation;
          TempAssemblyLine.VALIDATE(Quantity,SaveQty);
          TempAssemblyLine.VALIDATE("Unit of Measure Code",OldSalesUOM);
          COMMIT;
          IF ItemCheckAvail.AssemblyLineCheck(TempAssemblyLine) THEN
            TempAssemblyLine := AssemblyLine;
        END;
      END ELSE
        ERROR(Text001,TempAssemblyLine."No.");

      AssemblyLine := TempAssemblyLine;
    END;

    LOCAL PROCEDURE IsSubstitutionInserted@15(VAR ItemSubstitutionToCheck@1000 : Record 5715;ItemSubstitution@1004 : Record 5715) : Boolean;
    BEGIN
      IF ItemSubstitution."Substitute No." <> '' THEN
        WITH ItemSubstitutionToCheck DO BEGIN
          RESET;
          SETRANGE("Substitute Type",ItemSubstitution."Substitute Type");
          SETRANGE("Substitute No.",ItemSubstitution."Substitute No.");
          SETRANGE("Substitute Variant Code",ItemSubstitution."Substitute Variant Code");
          IF ISEMPTY THEN
            EXIT(INSERT);
        END;
      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

