OBJECT Table 5802 Value Entry
{
  OBJECT-PROPERTIES
  {
    Date=28/12/17;
    Time=[ 1:32:57 PM];
    Modified=Yes;
    Version List=NAVW19.00,NAVGB9.00,NS2016.16;
  }
  PROPERTIES
  {
    OnInsert=VAR
               GenJnlPostPreview@1000 : Codeunit 19;
             BEGIN
               GenJnlPostPreview.SaveValueEntry(Rec);
             END;

    CaptionML=[ENU=Value Entry;
               ENG=Value Entry];
    LookupPageID=Page5802;
    DrillDownPageID=Page5802;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              ENG=Entry No.] }
    { 2   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              ENG=Item No.] }
    { 3   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENG=Posting Date] }
    { 4   ;   ;Item Ledger Entry Type;Option      ;CaptionML=[ENU=Item Ledger Entry Type;
                                                              ENG=Item Ledger Entry Type];
                                                   OptionCaptionML=[ENU=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output;
                                                                    ENG=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output];
                                                   OptionString=Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output, ,Assembly Consumption,Assembly Output }
    { 5   ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type=CONST(Item)) Item;
                                                   CaptionML=[ENU=Source No.;
                                                              ENG=Source No.] }
    { 6   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ENG=Document No.] }
    { 7   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 8   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code] }
    { 9   ;   ;Inventory Posting Group;Code10     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              ENG=Inventory Posting Group] }
    { 10  ;   ;Source Posting Group;Code10        ;TableRelation=IF (Source Type=CONST(Customer)) "Customer Posting Group"
                                                                 ELSE IF (Source Type=CONST(Vendor)) "Vendor Posting Group"
                                                                 ELSE IF (Source Type=CONST(Item)) "Inventory Posting Group";
                                                   CaptionML=[ENU=Source Posting Group;
                                                              ENG=Source Posting Group] }
    { 11  ;   ;Item Ledger Entry No.;Integer      ;TableRelation="Item Ledger Entry";
                                                   CaptionML=[ENU=Item Ledger Entry No.;
                                                              ENG=Item Ledger Entry No.] }
    { 12  ;   ;Valued Quantity     ;Decimal       ;CaptionML=[ENU=Valued Quantity;
                                                              ENG=Valued Quantity];
                                                   DecimalPlaces=0:5 }
    { 13  ;   ;Item Ledger Entry Quantity;Decimal ;CaptionML=[ENU=Item Ledger Entry Quantity;
                                                              ENG=Item Ledger Entry Quantity];
                                                   DecimalPlaces=0:5 }
    { 14  ;   ;Invoiced Quantity   ;Decimal       ;CaptionML=[ENU=Invoiced Quantity;
                                                              ENG=Invoiced Quantity];
                                                   DecimalPlaces=0:5 }
    { 15  ;   ;Cost per Unit       ;Decimal       ;CaptionML=[ENU=Cost per Unit;
                                                              ENG=Cost per Unit];
                                                   AutoFormatType=2 }
    { 17  ;   ;Sales Amount (Actual);Decimal      ;CaptionML=[ENU=Sales Amount (Actual);
                                                              ENG=Sales Amount (Actual)];
                                                   AutoFormatType=1 }
    { 22  ;   ;Salespers./Purch. Code;Code10      ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Salespers./Purch. Code;
                                                              ENG=Salespers./Purch. Code] }
    { 23  ;   ;Discount Amount     ;Decimal       ;CaptionML=[ENU=Discount Amount;
                                                              ENG=Discount Amount];
                                                   AutoFormatType=1 }
    { 24  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              ENG=User ID] }
    { 25  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ENG=Source Code] }
    { 28  ;   ;Applies-to Entry    ;Integer       ;CaptionML=[ENU=Applies-to Entry;
                                                              ENG=Applies-to Entry] }
    { 33  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENG=Global Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 34  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENG=Global Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 41  ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              ENG=Source Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Item";
                                                                    ENG=" ,Customer,Vendor,Item"];
                                                   OptionString=[ ,Customer,Vendor,Item] }
    { 43  ;   ;Cost Amount (Actual);Decimal       ;CaptionML=[ENU=Cost Amount (Actual);
                                                              ENG=Cost Amount (Actual)];
                                                   AutoFormatType=1 }
    { 45  ;   ;Cost Posted to G/L  ;Decimal       ;CaptionML=[ENU=Cost Posted to G/L;
                                                              ENG=Cost Posted to G/L];
                                                   AutoFormatType=1 }
    { 46  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Reason Code;
                                                              ENG=Reason Code] }
    { 47  ;   ;Drop Shipment       ;Boolean       ;CaptionML=[ENU=Drop Shipment;
                                                              ENG=Drop Shipment] }
    { 48  ;   ;Journal Batch Name  ;Code10        ;TestTableRelation=No;
                                                   CaptionML=[ENU=Journal Batch Name;
                                                              ENG=Journal Batch Name] }
    { 57  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENG=Gen. Bus. Posting Group] }
    { 58  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENG=Gen. Prod. Posting Group] }
    { 60  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENG=Document Date] }
    { 61  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENG=External Document No.] }
    { 68  ;   ;Cost Amount (Actual) (ACY);Decimal ;CaptionML=[ENU=Cost Amount (Actual) (ACY);
                                                              ENG=Cost Amount (Actual) (ACY)];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 70  ;   ;Cost Posted to G/L (ACY);Decimal   ;AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Cost Posted to G/L (ACY);
                                                              ENG=Cost Posted to G/L (ACY)];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 72  ;   ;Cost per Unit (ACY) ;Decimal       ;AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Cost per Unit (ACY);
                                                              ENG=Cost per Unit (ACY)];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 79  ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENG=Document Type];
                                                   OptionCaptionML=[ENU=" ,Sales Shipment,Sales Invoice,Sales Return Receipt,Sales Credit Memo,Purchase Receipt,Purchase Invoice,Purchase Return Shipment,Purchase Credit Memo,Transfer Shipment,Transfer Receipt,Service Shipment,Service Invoice,Service Credit Memo,Posted Assembly";
                                                                    ENG=" ,Sales Shipment,Sales Invoice,Sales Return Receipt,Sales Credit Memo,Purchase Receipt,Purchase Invoice,Purchase Return Shipment,Purchase Credit Memo,Transfer Shipment,Transfer Receipt,Service Shipment,Service Invoice,Service Credit Memo,Posted Assembly"];
                                                   OptionString=[ ,Sales Shipment,Sales Invoice,Sales Return Receipt,Sales Credit Memo,Purchase Receipt,Purchase Invoice,Purchase Return Shipment,Purchase Credit Memo,Transfer Shipment,Transfer Receipt,Service Shipment,Service Invoice,Service Credit Memo,Posted Assembly] }
    { 80  ;   ;Document Line No.   ;Integer       ;CaptionML=[ENU=Document Line No.;
                                                              ENG=Document Line No.] }
    { 90  ;   ;Order Type          ;Option        ;CaptionML=[ENU=Order Type;
                                                              ENG=Order Type];
                                                   OptionCaptionML=[ENU=" ,Production,Transfer,Service,Assembly";
                                                                    ENG=" ,Production,Transfer,Service,Assembly"];
                                                   OptionString=[ ,Production,Transfer,Service,Assembly];
                                                   Editable=No }
    { 91  ;   ;Order No.           ;Code20        ;CaptionML=[ENU=Order No.;
                                                              ENG=Order No.];
                                                   Editable=No }
    { 92  ;   ;Order Line No.      ;Integer       ;CaptionML=[ENU=Order Line No.;
                                                              ENG=Order Line No.];
                                                   Editable=No }
    { 98  ;   ;Expected Cost       ;Boolean       ;CaptionML=[ENU=Expected Cost;
                                                              ENG=Expected Cost] }
    { 99  ;   ;Item Charge No.     ;Code20        ;TableRelation="Item Charge";
                                                   CaptionML=[ENU=Item Charge No.;
                                                              ENG=Item Charge No.] }
    { 100 ;   ;Valued By Average Cost;Boolean     ;CaptionML=[ENU=Valued By Average Cost;
                                                              ENG=Valued By Average Cost] }
    { 102 ;   ;Partial Revaluation ;Boolean       ;CaptionML=[ENU=Partial Revaluation;
                                                              ENG=Partial Revaluation] }
    { 103 ;   ;Inventoriable       ;Boolean       ;CaptionML=[ENU=Inventoriable;
                                                              ENG=Inventoriable] }
    { 104 ;   ;Valuation Date      ;Date          ;CaptionML=[ENU=Valuation Date;
                                                              ENG=Valuation Date] }
    { 105 ;   ;Entry Type          ;Option        ;CaptionML=[ENU=Entry Type;
                                                              ENG=Entry Type];
                                                   OptionCaptionML=[ENU=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance;
                                                                    ENG=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance];
                                                   OptionString=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance;
                                                   Editable=No }
    { 106 ;   ;Variance Type       ;Option        ;CaptionML=[ENU=Variance Type;
                                                              ENG=Variance Type];
                                                   OptionCaptionML=[ENU=" ,Purchase,Material,Capacity,Capacity Overhead,Manufacturing Overhead,Subcontracted";
                                                                    ENG=" ,Purchase,Material,Capacity,Capacity Overhead,Manufacturing Overhead,Subcontracted"];
                                                   OptionString=[ ,Purchase,Material,Capacity,Capacity Overhead,Manufacturing Overhead,Subcontracted];
                                                   Editable=No }
    { 148 ;   ;Purchase Amount (Actual);Decimal   ;CaptionML=[ENU=Purchase Amount (Actual);
                                                              ENG=Purchase Amount (Actual)];
                                                   AutoFormatType=1 }
    { 149 ;   ;Purchase Amount (Expected);Decimal ;AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Purchase Amount (Expected);
                                                              ENG=Purchase Amount (Expected)];
                                                   AutoFormatType=1 }
    { 150 ;   ;Sales Amount (Expected);Decimal    ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Sales Amount (Expected);
                                                              ENG=Sales Amount (Expected)];
                                                   AutoFormatType=1 }
    { 151 ;   ;Cost Amount (Expected);Decimal     ;CaptionML=[ENU=Cost Amount (Expected);
                                                              ENG=Cost Amount (Expected)];
                                                   AutoFormatType=1 }
    { 152 ;   ;Cost Amount (Non-Invtbl.);Decimal  ;AccessByPermission=TableData 5800=R;
                                                   CaptionML=[ENU=Cost Amount (Non-Invtbl.);
                                                              ENG=Cost Amount (Non-Invtbl.)];
                                                   AutoFormatType=1 }
    { 156 ;   ;Cost Amount (Expected) (ACY);Decimal;
                                                   CaptionML=[ENU=Cost Amount (Expected) (ACY);
                                                              ENG=Cost Amount (Expected) (ACY)];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 157 ;   ;Cost Amount (Non-Invtbl.)(ACY);Decimal;
                                                   AccessByPermission=TableData 5800=R;
                                                   CaptionML=[ENU=Cost Amount (Non-Invtbl.)(ACY);
                                                              ENG=Cost Amount (Non-Invtbl.)(ACY)];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 158 ;   ;Expected Cost Posted to G/L;Decimal;CaptionML=[ENU=Expected Cost Posted to G/L;
                                                              ENG=Expected Cost Posted to G/L];
                                                   AutoFormatType=1 }
    { 159 ;   ;Exp. Cost Posted to G/L (ACY);Decimal;
                                                   CaptionML=[ENU=Exp. Cost Posted to G/L (ACY);
                                                              ENG=Exp. Cost Posted to G/L (ACY)];
                                                   AutoFormatType=1 }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENG=Dimension Set ID];
                                                   Editable=No }
    { 1000;   ;Job No.             ;Code20        ;TableRelation=Job.No.;
                                                   CaptionML=[ENU=Job No.;
                                                              ENG=Job No.] }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=[ENU=Job Task No.;
                                                              ENG=Job Task No.] }
    { 1002;   ;Job Ledger Entry No.;Integer       ;TableRelation="Job Ledger Entry"."Entry No.";
                                                   CaptionML=[ENU=Job Ledger Entry No.;
                                                              ENG=Job Ledger Entry No.];
                                                   BlankZero=Yes }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              ENG=Variant Code] }
    { 5818;   ;Adjustment          ;Boolean       ;CaptionML=[ENU=Adjustment;
                                                              ENG=Adjustment];
                                                   Editable=No }
    { 5819;   ;Average Cost Exception;Boolean     ;CaptionML=[ENU=Average Cost Exception;
                                                              ENG=Average Cost Exception] }
    { 5831;   ;Capacity Ledger Entry No.;Integer  ;TableRelation="Capacity Ledger Entry";
                                                   CaptionML=[ENU=Capacity Ledger Entry No.;
                                                              ENG=Capacity Ledger Entry No.] }
    { 5832;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=Work Centre,Machine Centre, ,Resource;
                                                                    ENG=Work Centre,Machine Centre, ,Resource];
                                                   OptionString=Work Center,Machine Center, ,Resource }
    { 5834;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Machine Center)) "Machine Center"
                                                                 ELSE IF (Type=CONST(Work Center)) "Work Center"
                                                                 ELSE IF (Type=CONST(Resource)) Resource;
                                                   CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 6602;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=[ENU=Return Reason Code;
                                                              ENG=Return Reason Code] }
    { 50000;  ;Intercompany        ;Boolean        }
    { 9087000;;Season Code         ;Code20        ;TableRelation=Season;
                                                   CaptionML=[ENU=Season Code;
                                                              ENG=Season Code];
                                                   Description=NS2015.1 }
    { 9087001;;Brand Code          ;Code20        ;TableRelation="Brand Vendor"."Brand Code" WHERE (Vendor No.=FIELD(Vendor No.));
                                                   CaptionML=[ENU=Brand Code;
                                                              ENG=Brand Code];
                                                   Description=NS2015.1 }
    { 9087002;;Division Code       ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Division));
                                                   CaptionML=[ENU=Division Code;
                                                              ENG=Division Code];
                                                   Description=NS2015.1 }
    { 9087003;;Department Code     ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Department),
                                                                                              Division Code=FIELD(Division Code));
                                                   CaptionML=[ENU=Department Code;
                                                              ENG=Department Code];
                                                   Description=NS2015.1 }
    { 9087004;;Group Code          ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Group),
                                                                                              Division Code=FIELD(Division Code),
                                                                                              Department Code=FIELD(Department Code));
                                                   CaptionML=[ENU=Group Code;
                                                              ENG=Group Code];
                                                   Description=NS2015.1 }
    { 9087005;;Category Code       ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Category),
                                                                                              Division Code=FIELD(Division Code),
                                                                                              Department Code=FIELD(Department Code),
                                                                                              Group Code=FIELD(Group Code));
                                                   CaptionML=[ENU=Category Code;
                                                              ENG=Category Code];
                                                   Description=NS2015.1 }
    { 9087006;;Sub-Category Code   ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Category),
                                                                                              Division Code=FIELD(Division Code),
                                                                                              Department Code=FIELD(Department Code),
                                                                                              Group Code=FIELD(Group Code),
                                                                                              Category Code=FIELD(Category Code));
                                                   CaptionML=[ENU=Sub-Category Code;
                                                              ENG=Sub-Category Code];
                                                   Description=NS2015.1 }
    { 9087007;;Size Group Code     ;Code20        ;TableRelation="Size Group";
                                                   OnValidate=VAR
                                                                SizeGroup@1000000000 : Record 9087001;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Size Group Code;
                                                              ENG=Size Group Code];
                                                   Description=NS2015.1 }
    { 9087008;;Size Code           ;Code20        ;TableRelation=Size.Code WHERE (Size Group Code=FIELD(Size Group Code));
                                                   OnValidate=VAR
                                                                Size@1000000000 : Record 9087002;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Size Code;
                                                              ENG=Size Code];
                                                   Description=NS2015.1 }
    { 9087009;;Standard Size Group Code;Code20    ;TableRelation="Size Group";
                                                   CaptionML=[ENU=Standard Size Group Code;
                                                              ENG=Standard Size Group Code];
                                                   Description=NS2015.1 }
    { 9087010;;Standard Size Code  ;Code20        ;TableRelation=Size.Code WHERE (Size Group Code=FIELD(Standard Size Group Code));
                                                   CaptionML=[ENU=Standard Size Code;
                                                              ENG=Standard Size Code];
                                                   Description=NS2015.1 }
    { 9087011;;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor No.;
                                                              ENG=Vendor No.];
                                                   Description=NS2015.1 }
    { 9087012;;Style No.           ;Code20        ;TableRelation=Style;
                                                   CaptionML=[ENU=Style No.;
                                                              ENG=Style No.];
                                                   Description=NS2015.1 }
    { 9087013;;Sub-Season Code     ;Code20        ;TableRelation=Sub-Season.Code WHERE (Season Code=FIELD(Season Code));
                                                   CaptionML=[ENU=Sub-Season Code;
                                                              ENG=Sub-Season Code];
                                                   Description=NS2015.1 }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Item Ledger Entry No.,Entry Type        ;SumIndexFields=Invoiced Quantity,Sales Amount (Expected),Sales Amount (Actual),Cost Amount (Expected),Cost Amount (Actual),Cost Amount (Non-Invtbl.),Cost Amount (Expected) (ACY),Cost Amount (Actual) (ACY),Cost Amount (Non-Invtbl.)(ACY),Purchase Amount (Actual),Purchase Amount (Expected);
                                                   MaintainSIFTIndex=No }
    {    ;Item Ledger Entry No.,Document No.,Document Line No.;
                                                   MaintainSQLIndex=No }
    {    ;Item No.,Posting Date,Item Ledger Entry Type,Entry Type,Variance Type,Item Charge No.,Location Code,Variant Code;
                                                   SumIndexFields=Invoiced Quantity,Sales Amount (Expected),Sales Amount (Actual),Cost Amount (Expected),Cost Amount (Actual),Cost Amount (Non-Invtbl.),Purchase Amount (Actual),Expected Cost Posted to G/L,Cost Posted to G/L,Item Ledger Entry Quantity }
    {    ;Item No.,Posting Date,Item Ledger Entry Type,Entry Type,Variance Type,Item Charge No.,Location Code,Variant Code,Global Dimension 1 Code,Global Dimension 2 Code,Source Type,Source No.;
                                                   SumIndexFields=Invoiced Quantity,Sales Amount (Expected),Sales Amount (Actual),Cost Amount (Expected),Cost Amount (Actual),Cost Amount (Non-Invtbl.),Purchase Amount (Actual),Expected Cost Posted to G/L,Cost Posted to G/L,Item Ledger Entry Quantity }
    {    ;Document No.                             }
    {    ;Item No.,Valuation Date,Location Code,Variant Code;
                                                   SumIndexFields=Cost Amount (Expected),Cost Amount (Actual),Cost Amount (Expected) (ACY),Cost Amount (Actual) (ACY),Item Ledger Entry Quantity }
    {    ;Source Type,Source No.,Item No.,Posting Date,Entry Type,Adjustment,Item Ledger Entry Type;
                                                   SumIndexFields=Discount Amount,Cost Amount (Non-Invtbl.),Cost Amount (Actual),Cost Amount (Expected),Sales Amount (Actual),Sales Amount (Expected),Invoiced Quantity }
    {    ;Item Charge No.,Inventory Posting Group,Item No. }
    {    ;Capacity Ledger Entry No.,Entry Type    ;SumIndexFields=Cost Amount (Actual),Cost Amount (Actual) (ACY);
                                                   MaintainSIFTIndex=No }
    {    ;Order Type,Order No.,Order Line No.      }
    {    ;Source Type,Source No.,Global Dimension 1 Code,Global Dimension 2 Code,Item No.,Posting Date,Entry Type,Adjustment;
                                                   SumIndexFields=Discount Amount,Cost Amount (Non-Invtbl.),Cost Amount (Actual),Cost Amount (Expected),Sales Amount (Actual),Sales Amount (Expected),Invoiced Quantity }
    {    ;Job No.,Job Task No.,Document No.        }
    {    ;Item Ledger Entry Type,Posting Date,Item No.,Inventory Posting Group,Dimension Set ID;
                                                   SumIndexFields=Invoiced Quantity,Sales Amount (Actual),Purchase Amount (Actual) }
    {    ;Item Ledger Entry No.,Expected Cost,Document No.,Partial Revaluation,Entry Type,Variance Type }
    {    ;Item Ledger Entry No.,Valuation Date     }
    {    ;Item Ledger Entry Type,Brand Code,Season Code,Division Code,Department Code,Group Code,Category Code,Sub-Category Code,Global Dimension 1 Code,Global Dimension 2 Code,Location Code,Posting Date;
                                                   SumIndexFields=Purchase Amount (Actual),Sales Amount (Actual) }
    {    ;Item No.,Variant Code,Location Code     ;SumIndexFields=Cost Amount (Expected),Cost Amount (Actual),Cost Amount (Expected) (ACY),Cost Amount (Actual) (ACY),Item Ledger Entry Quantity }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Entry No.,Item Ledger Entry Type,Item Ledger Entry No.,Item No.,Posting Date,Source No.,Document No. }
  }
  CODE
  {
    VAR
      GLSetup@1000 : Record 98;
      GLSetupRead@1002 : Boolean;
      DimMgt@1001 : Codeunit 408;

    LOCAL PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
      EXIT(GLSetup."Additional Reporting Currency");
    END;

    PROCEDURE GetValuationDate@55() : Date;
    BEGIN
      IF "Valuation Date" < "Posting Date" THEN
        EXIT("Posting Date");
      EXIT("Valuation Date");
    END;

    PROCEDURE AddCost@3(InvtAdjmtBuffer@1000 : Record 5895);
    BEGIN
      "Cost Amount (Expected)" := "Cost Amount (Expected)" + InvtAdjmtBuffer."Cost Amount (Expected)";
      "Cost Amount (Expected) (ACY)" := "Cost Amount (Expected) (ACY)" + InvtAdjmtBuffer."Cost Amount (Expected) (ACY)";
      "Cost Amount (Actual)" := "Cost Amount (Actual)" + InvtAdjmtBuffer."Cost Amount (Actual)";
      "Cost Amount (Actual) (ACY)" := "Cost Amount (Actual) (ACY)" + InvtAdjmtBuffer."Cost Amount (Actual) (ACY)";
    END;

    PROCEDURE SumCostsTillValuationDate@4(VAR ValueEntry@1000 : Record 5802);
    VAR
      AccountingPeriod@1002 : Record 10560;
      PrevValueEntrySum@1008 : Record 5802;
      Item@1010 : Record 27;
      FromDate@1005 : Date;
      ToDate@1006 : Date;
      CostCalcIsChanged@1004 : Boolean;
      QtyFactor@1009 : Decimal;
    BEGIN
      Item.GET(ValueEntry."Item No.");
      IF Item."Costing Method" = Item."Costing Method"::Average THEN
        ToDate := GetAvgToDate(ValueEntry."Valuation Date")
      ELSE
        ToDate := ValueEntry."Valuation Date";

      REPEAT
        IF Item."Costing Method" = Item."Costing Method"::Average THEN
          FromDate := GetAvgFromDate(ToDate,AccountingPeriod,CostCalcIsChanged)
        ELSE
          FromDate := 0D;

        QtyFactor := 1;
        RESET;
        SETCURRENTKEY("Item No.","Valuation Date","Location Code","Variant Code");
        SETRANGE("Item No.",ValueEntry."Item No.");
        SETRANGE("Valuation Date",FromDate,ToDate);
        IF (AccountingPeriod."Average Cost Calc. Type" =
            AccountingPeriod."Average Cost Calc. Type"::"Item & Location & Variant") OR
           (Item."Costing Method" <> Item."Costing Method"::Average)
        THEN BEGIN
          SETRANGE("Location Code",ValueEntry."Location Code");
          SETRANGE("Variant Code",ValueEntry."Variant Code");
        END ELSE
          IF CostCalcIsChanged THEN
            QtyFactor := ValueEntry.CalcQtyFactor(FromDate,ToDate);

        CALCSUMS(
          "Item Ledger Entry Quantity",
          "Cost Amount (Actual)","Cost Amount (Actual) (ACY)",
          "Cost Amount (Expected)","Cost Amount (Expected) (ACY)");

        "Item Ledger Entry Quantity" :=
          ROUND("Item Ledger Entry Quantity" * QtyFactor,0.00001) + PrevValueEntrySum."Item Ledger Entry Quantity";
        "Cost Amount (Actual)" :=
          "Cost Amount (Actual)" * QtyFactor + PrevValueEntrySum."Cost Amount (Actual)";
        "Cost Amount (Expected)" :=
          "Cost Amount (Expected)" * QtyFactor + PrevValueEntrySum."Cost Amount (Expected)";
        "Cost Amount (Expected) (ACY)" :=
          "Cost Amount (Expected) (ACY)" * QtyFactor + PrevValueEntrySum."Cost Amount (Expected) (ACY)";
        "Cost Amount (Actual) (ACY)" :=
          "Cost Amount (Actual) (ACY)" * QtyFactor + PrevValueEntrySum."Cost Amount (Actual) (ACY)";
        PrevValueEntrySum := Rec;

        IF FromDate <> 0D THEN
          ToDate := CALCDATE('<-1D>',FromDate);
      UNTIL FromDate = 0D;
    END;

    PROCEDURE CalcItemLedgEntryCost@5(ItemLedgEntryNo@1000 : Integer;Expected@1001 : Boolean);
    VAR
      ItemLedgEntryQty@1006 : Decimal;
      CostAmtActual@1002 : Decimal;
      CostAmtActualACY@1003 : Decimal;
      CostAmtExpected@1004 : Decimal;
      CostAmtExpectedACY@1005 : Decimal;
    BEGIN
      RESET;
      SETCURRENTKEY("Item Ledger Entry No.");
      SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
      IF FIND('-') THEN
        REPEAT
          IF "Expected Cost" = Expected THEN BEGIN
            ItemLedgEntryQty := ItemLedgEntryQty + "Item Ledger Entry Quantity";
            CostAmtActual := CostAmtActual + "Cost Amount (Actual)";
            CostAmtActualACY := CostAmtActualACY + "Cost Amount (Actual) (ACY)";
            CostAmtExpected := CostAmtExpected + "Cost Amount (Expected)";
            CostAmtExpectedACY := CostAmtExpectedACY + "Cost Amount (Expected) (ACY)";
          END;
        UNTIL NEXT = 0;

      "Item Ledger Entry Quantity" := ItemLedgEntryQty;
      "Cost Amount (Actual)" := CostAmtActual;
      "Cost Amount (Actual) (ACY)" := CostAmtActualACY;
      "Cost Amount (Expected)" := CostAmtExpected;
      "Cost Amount (Expected) (ACY)" := CostAmtExpectedACY;
    END;

    PROCEDURE NotInvdRevaluationExists@7(ItemLedgEntryNo@1000 : Integer) : Boolean;
    BEGIN
      RESET;
      SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
      SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
      SETRANGE("Entry Type","Entry Type"::Revaluation);
      SETRANGE("Applies-to Entry",0);
      EXIT(FINDSET);
    END;

    PROCEDURE CalcQtyFactor@8(FromDate@1000 : Date;ToDate@1002 : Date) QtyFactor : Decimal;
    VAR
      ValueEntry2@1001 : Record 5802;
    BEGIN
      ValueEntry2.SETCURRENTKEY("Item No.","Valuation Date","Location Code","Variant Code");
      ValueEntry2.SETRANGE("Item No.","Item No.");
      ValueEntry2.SETRANGE("Valuation Date",FromDate,ToDate);
      ValueEntry2.SETRANGE("Location Code","Location Code");
      ValueEntry2.SETRANGE("Variant Code","Variant Code");
      ValueEntry2.CALCSUMS("Item Ledger Entry Quantity");
      QtyFactor := ValueEntry2."Item Ledger Entry Quantity";

      ValueEntry2.SETRANGE("Location Code");
      ValueEntry2.SETRANGE("Variant Code");
      ValueEntry2.CALCSUMS("Item Ledger Entry Quantity");
      IF ValueEntry2."Item Ledger Entry Quantity" <> 0 THEN
        QtyFactor := QtyFactor / ValueEntry2."Item Ledger Entry Quantity";

      EXIT(QtyFactor);
    END;

    PROCEDURE ShowGL@9();
    VAR
      GLItemLedgRelation@1000 : Record 5823;
      GLEntry@1002 : Record 17;
      TempGLEntry@1001 : TEMPORARY Record 17;
    BEGIN
      GLItemLedgRelation.SETCURRENTKEY("Value Entry No.");
      GLItemLedgRelation.SETRANGE("Value Entry No.","Entry No.");
      IF GLItemLedgRelation.FINDSET THEN
        REPEAT
          GLEntry.GET(GLItemLedgRelation."G/L Entry No.");
          TempGLEntry.INIT;
          TempGLEntry := GLEntry;
          TempGLEntry.INSERT;
        UNTIL GLItemLedgRelation.NEXT = 0;

      PAGE.RUNMODAL(0,TempGLEntry);
    END;

    PROCEDURE IsAvgCostException@10(IsAvgCostCalcTypeItem@1000 : Boolean) : Boolean;
    VAR
      ItemApplnEntry@1001 : Record 339;
      ItemLedgEntry@1002 : Record 32;
      TempItemLedgEntry@1005 : TEMPORARY Record 32;
    BEGIN
      IF "Partial Revaluation" THEN
        EXIT(TRUE);
      IF "Item Charge No." <> '' THEN
        EXIT(TRUE);

      ItemLedgEntry.GET("Item Ledger Entry No.");
      IF ItemLedgEntry.Positive THEN
        EXIT(FALSE);

      ItemApplnEntry.GetVisitedEntries(ItemLedgEntry,TempItemLedgEntry,TRUE);
      TempItemLedgEntry.SETCURRENTKEY("Item No.",Positive,"Location Code","Variant Code");
      TempItemLedgEntry.SETRANGE("Item No.","Item No.");
      TempItemLedgEntry.SETRANGE(Positive,TRUE);
      IF NOT IsAvgCostCalcTypeItem THEN BEGIN
        TempItemLedgEntry.SETRANGE("Location Code","Location Code");
        TempItemLedgEntry.SETRANGE("Variant Code","Variant Code");
      END;
      EXIT(NOT TempItemLedgEntry.ISEMPTY);
    END;

    PROCEDURE ShowDimensions@11();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"Entry No."));
    END;

    PROCEDURE GetAvgToDate@2(ToDate@1002 : Date) : Date;
    VAR
      CalendarPeriod@1000 : Record 2000000007;
      AvgCostAdjmtEntryPoint@1001 : Record 5804;
    BEGIN
      CalendarPeriod."Period Start" := ToDate;
      AvgCostAdjmtEntryPoint."Valuation Date" := ToDate;
      AvgCostAdjmtEntryPoint.GetValuationPeriod(CalendarPeriod);
      EXIT(CalendarPeriod."Period End");
    END;

    PROCEDURE GetAvgFromDate@6(ToDate@1002 : Date;VAR AccountingPeriod@1007 : Record 10560;VAR CostCalcIsChanged@1001 : Boolean) FromDate : Date;
    VAR
      PrevAccountingPeriod@1000 : Record 10560;
    BEGIN
      FromDate := ToDate;
      AccountingPeriod.SETRANGE("Period Start",0D,ToDate);
      AccountingPeriod.SETRANGE("Period Type",AccountingPeriod."Period Type"::Year);
      IF NOT AccountingPeriod.FIND('+') THEN BEGIN
        AccountingPeriod.SETRANGE("Period Start");
        AccountingPeriod.FIND('-');
      END;

      WHILE (FromDate = ToDate) AND (FromDate <> 0D) DO BEGIN
        PrevAccountingPeriod := AccountingPeriod;
        CASE TRUE OF
          AccountingPeriod."Average Cost Calc. Type" = AccountingPeriod."Average Cost Calc. Type"::Item:
            FromDate := 0D;
          AccountingPeriod.NEXT(-1) = 0:
            FromDate := 0D;
          AccountingPeriod."Average Cost Calc. Type" <> PrevAccountingPeriod."Average Cost Calc. Type":
            BEGIN
              AccountingPeriod := PrevAccountingPeriod;
              FromDate := PrevAccountingPeriod."Period Start";
              CostCalcIsChanged := TRUE;
              EXIT;
            END;
        END;
      END;
      AccountingPeriod := PrevAccountingPeriod;
    END;

    BEGIN
    {
      //DOC NS2015.1 AZ 15/01/2014 - nSemble fields and modifications
      //DOC NS2015.1 JH 23/01/2014 - New key "Item Ledger Entry Type,Brand Code,Season Code,Division Code,Department Code,Group Code,Category Code,..
      //DOC NS2015.1 JH 23/01/2014 - "...Sub-Category Code,Global Dimension 1 Code,Global Dimension 2 Code,Location Code,Posting Date"
    }
    END.
  }
}

