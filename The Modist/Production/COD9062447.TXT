OBJECT Codeunit 9062447 Document Printout Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CurrencyText@1000000008 : Text[100];
      LineIndex@1000000004 : Integer;
      SummaryAmount@1000000001 : Decimal;
      SummaryAmountInclVat@1000000002 : Decimal;
      tCopy@1000000006 : TextConst 'ENU=COPY;ENG=COPY';
      VatAmountLine@1000000000 : TEMPORARY Record 290;
      String@1000000010 : Codeunit 9062236;
      TnpToolkit@1000000005 : Codeunit 9062230;
      DateTemplate@1000000003 : Text;
      TimeTemplate@1000000009 : Text;
      DateTimeTemplate@1000000007 : Text;

    PROCEDURE "--- System-Wide ---"@1000000029();
    BEGIN
    END;

    PROCEDURE CompanyShortAddress@1000000046(VAR pCompanyShortAddress@1000000000 : ARRAY [2] OF Text[250]);
    VAR
      lCompanyInformation@1000000001 : Record 79;
    BEGIN
      //DOC TMPM1.04 - Creating company short address
      //  <> pCompanyShortAddress: Target array

      lCompanyInformation.GET();

      pCompanyShortAddress[1] := JoinTexts8(lCompanyInformation.Name, lCompanyInformation."Name 2", lCompanyInformation.Address,
        lCompanyInformation."Address 2", lCompanyInformation.City, lCompanyInformation.County, lCompanyInformation."Post Code",
        lCompanyInformation."Country/Region Code", '; ');
      pCompanyShortAddress[2] := JoinTexts4(
        TnpToolkit.IIFText(lCompanyInformation."Phone No." <> '', JoinTexts(lCompanyInformation.FIELDCAPTION("Phone No."), lCompanyInformation."Phone No.", ': '), ''),
        TnpToolkit.IIFText(lCompanyInformation."Fax No." <> '', JoinTexts(lCompanyInformation.FIELDCAPTION("Fax No."), lCompanyInformation."Fax No.", ': '), ''),
        TnpToolkit.IIFText(lCompanyInformation."E-Mail" <> '', JoinTexts(lCompanyInformation.FIELDCAPTION("E-Mail"), lCompanyInformation."E-Mail", ': '), ''),
        TnpToolkit.IIFText(lCompanyInformation."Home Page" <> '', JoinTexts(lCompanyInformation.FIELDCAPTION("Home Page"), lCompanyInformation."Home Page", ': '), ''),
        '; ');
    END;

    PROCEDURE ReportImages@1000000050(VAR pImage@1000000000 : Record 99008535;pAlternative@1000000002 : Boolean);
    VAR
      lSystemImage@1000000001 : Record 9062240;
    BEGIN
      //DOC TMPM1.04 - Returning report images
      //  <> pImage: Target image
      //  -> pAlternative: Flag to load alternative images

      CLEAR(pImage);
      IF (lSystemImage.GET('REPORT')) THEN
      BEGIN
        lSystemImage.CALCFIELDS(Image, "Alternative Image");
        IF (pAlternative) THEN
          pImage.Blob := lSystemImage."Alternative Image"
        ELSE
          pImage.Blob := lSystemImage.Image;
      END;
    END;

    PROCEDURE "--- General Information ---"@1000000017();
    BEGIN
    END;

    PROCEDURE CurrencyInformation@1000000028(pCurrencyCode@1000000000 : Code[10];pCurrencyFactor@1000000001 : Decimal;VAR pCurrencyText@1000000002 : Text[100];VAR pCurrencyFactorText@1000000003 : Text[100];VAR pAmountCaption@1000000005 : Text[100];VAR pAmountInclVatCaption@1000000006 : Text[100]);
    VAR
      lGeneralLedgerSetup@1000000004 : Record 98;
      eAmountCaption@1000000010 : TextConst 'ENU=%1 Amount;ENG=%1 Amount';
      eAmountInclVatCaption@1000000009 : TextConst 'ENU=%1 Amount with VAT;ENG=%1 Amount with VAT';
    BEGIN
      //DOC TMPM1.04 - Preparing currency information
      //  -> pCurrencyCode: Currency code
      //  -> pCurrencyFactor: Currency factor
      //  <> pCurrencyText: Target currency text
      //  <> pCurrencyFactorText: Target currency factor text
      //  <> pAmountCaption: Target amount caption (including currency)
      //  <> pAmountInclVatCaption: Target amount including vat caption (including currency)

      pCurrencyText := pCurrencyCode;
      IF (pCurrencyText = '') THEN
      BEGIN
        lGeneralLedgerSetup.GET();
        pCurrencyText := lGeneralLedgerSetup."LCY Code";
        pCurrencyFactorText := '';
      END
      ELSE
        pCurrencyFactorText := FORMAT(ROUND(pCurrencyFactor, 0.0001), 0, 1);

      pAmountCaption := STRSUBSTNO(eAmountCaption, pCurrencyText);
      pAmountInclVatCaption := STRSUBSTNO(eAmountInclVatCaption, pCurrencyText);

      CurrencyText := pCurrencyText;
    END;

    PROCEDURE ContactInformation@1000000056(pContactNo@1000000001 : Code[20];pContactName@1000000004 : Text[50];pGeneralContact@1000000002 : Record 5050;VAR pContact@1000000000 : Record 5050);
    BEGIN
      //DOC NH2015.4 - Returning contact information
      //  -> pContactNo: Contact no.
      //  -> pContactName: Contact name
      //  -> pGeneralContact: General contact
      //  <> pContact: Target contact record

      IF (pContactNo <> '') THEN
        IF ( NOT (pContact.GET(pContactNo))) THEN
          CLEAR(pContact);

      IF (pContact."No." = '') THEN
      BEGIN
        pContact.Name := pContactName;
        pContact."Phone No." := pGeneralContact."Phone No.";
        pContact."Fax No." := pGeneralContact."Fax No.";
        pContact."E-Mail" := pGeneralContact."E-Mail";
        pContact."Home Page" := pGeneralContact."Home Page";
      END;
    END;

    LOCAL PROCEDURE "--- Texts ---"@1000000020();
    BEGIN
    END;

    PROCEDURE SalespersonPurchaserText@1000000023(pSalespersonPurchaserCode@1000000000 : Code[10]) : Text;
    VAR
      lSalespersonPurchaser@1000000002 : Record 13;
      lSalespersonPurchaserText@1000000001 : Text;
    BEGIN
      //DOC TMPM1.00 - Returning salesperson / purchaser text
      //  -> pSalespersonPurchaserCode: Salesperson / purchaser code
      //  <- The text

      lSalespersonPurchaserText := '';
      IF (lSalespersonPurchaser.GET(pSalespersonPurchaserCode)) THEN
        lSalespersonPurchaserText := lSalespersonPurchaser.Name;
      IF (lSalespersonPurchaserText = '') THEN
        lSalespersonPurchaserText := pSalespersonPurchaserCode;

      EXIT(lSalespersonPurchaserText);
    END;

    PROCEDURE PaymentTermsText@1000000027(pPaymentTermsCode@1000000000 : Code[10]) : Text;
    VAR
      lPaymentTerms@1000000001 : Record 3;
      lPaymentTermsText@1000000002 : Text;
    BEGIN
      //DOC TMPM1.00 - Returning payment terms text
      //  -> pPaymentTermsCode: Payment terms code
      //  <- The text

      lPaymentTermsText := '';
      IF (lPaymentTerms.GET(pPaymentTermsCode)) THEN
        lPaymentTermsText := lPaymentTerms.Description;
      IF (lPaymentTermsText = '') THEN
        lPaymentTermsText := pPaymentTermsCode;

      EXIT(lPaymentTermsText);
    END;

    PROCEDURE PaymentMethodText@1000000025(pPaymentMethodCode@1000000000 : Code[10]) : Text;
    VAR
      lPaymentMethod@1000000001 : Record 289;
      lPaymentMethodText@1000000002 : Text;
    BEGIN
      //DOC TMPM1.00 - Returning payment method text
      //  -> pPaymentMethodCode: Payment method code
      //  <- The text

      lPaymentMethodText := '';
      IF (lPaymentMethod.GET(pPaymentMethodCode)) THEN
        lPaymentMethodText := lPaymentMethod.Description;
      IF (lPaymentMethodText = '') THEN
        lPaymentMethodText := pPaymentMethodCode;

      EXIT(lPaymentMethodText);
    END;

    PROCEDURE ShipmentMethodText@1000000024(pShipmentMethodCode@1000000000 : Code[10]) : Text;
    VAR
      lShipmentMethod@1000000001 : Record 10;
      lShipmentMethodText@1000000002 : Text;
    BEGIN
      //DOC TMPM1.00 - Returning shipment method text
      //  -> pShipmentMethodCode: Shipment method code
      //  <- The text

      lShipmentMethodText := '';
      IF (lShipmentMethod.GET(pShipmentMethodCode)) THEN
        lShipmentMethodText := lShipmentMethod.Description;
      IF (lShipmentMethodText = '') THEN
        lShipmentMethodText := pShipmentMethodCode;

      EXIT(lShipmentMethodText);
    END;

    PROCEDURE ShippingAgentText@1000000032(pShippingAgentCode@1000000000 : Code[10]) : Text;
    VAR
      lShippingAgent@1000000001 : Record 291;
      lShippingAgentText@1000000002 : Text;
    BEGIN
      //DOC TMPM1.00 - Returning shipping agent text
      //  -> pShippingAgentCode: Shipping agent code
      //  <- The text

      lShippingAgentText := '';
      IF (lShippingAgent.GET(pShippingAgentCode)) THEN
        lShippingAgentText := lShippingAgent.Name;
      IF (lShippingAgentText = '') THEN
        lShippingAgentText := pShippingAgentCode;

      EXIT(lShippingAgentText);
    END;

    PROCEDURE ShippingAgentServiceText@1000000034(pShippingAgentCode@1000000000 : Code[10];pShippingAgentServiceCode@1000000003 : Code[10]) : Text;
    VAR
      lShippingAgentService@1000000001 : Record 5790;
      lShippingAgentServiceText@1000000002 : Text;
      eText@1000000004 : TextConst 'ENU=%1 - %2;ENG=%1 - %2';
    BEGIN
      //DOC TMPM1.00 - Returning shipping agent service text
      //  -> pShippingAgentCode: Shipping agent code
      //  -> pShippingAgentServiceCode: Shipping agent service code
      //  <- The text

      lShippingAgentServiceText := '';
      IF (lShippingAgentService.GET(pShippingAgentCode, pShippingAgentServiceCode)) THEN
        lShippingAgentServiceText := lShippingAgentService.Description;
      IF ((lShippingAgentServiceText = '') AND (pShippingAgentCode <> '') AND (pShippingAgentServiceCode <> '')) THEN
        lShippingAgentServiceText := STRSUBSTNO(eText, pShippingAgentCode, pShippingAgentServiceCode);

      EXIT(lShippingAgentServiceText);
    END;

    PROCEDURE UserText@1000000018(pUserId@1000000000 : Code[50]) : Text;
    VAR
      lUser@1000000001 : Record 2000000120;
      lUserText@1000000002 : Text;
      lIndex@1000000003 : Integer;
    BEGIN
      //DOC NH2015.4 - Returning user text
      //  -> pUserId: User ID
      //  <- User text

      lUserText := '';
      lUser.RESET();
      lUser.SETCURRENTKEY("User Name");
      lUser.SETRANGE("User Name", pUserId);
      IF (lUser.FINDFIRST()) THEN
        lUserText := lUser."Full Name";
      IF (lUserText = '') THEN
      BEGIN
        lUserText := pUserId;
        lIndex := STRPOS(lUserText, '\');
        IF (lIndex > 0) THEN
          lUserText := COPYSTR(lUserText, lIndex + 1, STRLEN(lUserText) - lIndex + 1);
      END;

      EXIT(lUserText);
    END;

    PROCEDURE "--- Copy Tools ---"@1000000012();
    BEGIN
    END;

    PROCEDURE FilterCopy@1000000016(pCopies@1000000000 : Integer;VAR pCopy@1000000001 : Record 2000000026);
    BEGIN
      //DOC TMPM1.00 - Filtering copies recordset (Integer)
      //  -> pCopies: Number of copies
      //  <> pCopy: Copies recordset (Integer) to filter

      IF (pCopies > 0) THEN
        pCopy.SETRANGE(Number, 1, pCopies + 1)
      ELSE
        pCopy.SETRANGE(Number, 1);
    END;

    PROCEDURE NextCopy@1000000019(pCopy@1000000000 : Record 2000000026;VAR pCopyText@1000000001 : Text[10]);
    BEGIN
      //DOC TMPM1.00 - Next copy
      //  -> pCopy: Copy record (Integer)
      //  <> pCopyText: Target copy text

      IF (pCopy.Number = 1) THEN
        pCopyText := ''
      ELSE
        pCopyText := tCopy;
    END;

    PROCEDURE "--- Line Tools ---"@1000000002();
    BEGIN
    END;

    PROCEDURE ClearLineIndex@1000000007();
    BEGIN
      //DOC TMPM1.00 - Clearing line index

      CLEAR(LineIndex);
    END;

    PROCEDURE NextLineIndex@1000000006(pType@1000000000 : Integer;VAR pLineIndex@1000000001 : Integer;VAR pLineIndexText@1000000002 : Text[10]);
    BEGIN
      //DOC TMPM1.00 - Processing line index
      //  -> pType: Type (from the line)
      //  <> pLineIndex: Target line index
      //  <> pLineIndexText: Target line index text

      IF (pType > 0) THEN
      BEGIN
        LineIndex += 1;
        pLineIndex := LineIndex;
        pLineIndexText := FORMAT(LineIndex, 0, 1);
      END
      ELSE
      BEGIN
        pLineIndex := LineIndex;
        pLineIndexText := '';
      END;
    END;

    PROCEDURE LineDescription@1000000010(pDescription@1000000000 : Text;pDescription2@1000000001 : Text) : Text;
    BEGIN
      //DOC NH2015.4 - Returning line description
      //  -> pDescription: Description
      //  -> pDescription2: Description s
      //  <- Joined description

      EXIT(JoinTexts(pDescription, pDescription2, ' '));
    END;

    PROCEDURE LineInternalInformation@1000000036(pShowInternalInformation@1000000003 : Boolean;VAR pType@1000000000 : ' ,G/L Account';VAR pNo@1000000001 : Code[20]);
    BEGIN
      //DOC NH2015.2 - Amending line internal information
      //  -> pShowInternalInformation: Show internal information flag
      //  <> pType: Source / target type (like "Sales Line"."Type"; we assume all table "Type" fields have compatible option lists)
      //  <> pNo: Source / target no. (like "Sales Line"."No.")

      IF ( NOT (pShowInternalInformation)) THEN
        IF (pType = pType::"G/L Account") THEN
        BEGIN
          pType := pType::" ";
          pNo := '';
        END;
    END;

    PROCEDURE "--- Summary Tools ---"@1000000000();
    BEGIN
    END;

    PROCEDURE SetSummary@1000000005(VAR pVatAmountLine@1000000000 : Record 290);
    BEGIN
      //DOC NH2015.4 - Setting summary (temporary records)
      //  <> pVatAmountLine: The recordset

      VatAmountLine.RESET();
      VatAmountLine.DELETEALL();

      VatAmountLine.COPY(pVatAmountLine, TRUE);
    END;

    PROCEDURE ClearSummary@1000000001();
    BEGIN
      //DOC TMPM1.00 - Clearing summary

      CLEAR(SummaryAmount);
      CLEAR(SummaryAmountInclVat);

      VatAmountLine.RESET();
      VatAmountLine.DELETEALL();
    END;

    PROCEDURE AddLineToSummary@1000000003(pVatIdentifier@1000000000 : Code[10];pVatCalculationType@1000000001 : Integer;pTaxGroupCode@1000000002 : Code[10];pVatPercent@1000000003 : Decimal;pAmount@1000000004 : Decimal;pAmountInclVat@1000000005 : Decimal;pLineAmount@1000000006 : Decimal;pAllowInvoiceDisc@1000000007 : Boolean;pInvDiscountAmount@1000000008 : Decimal;pVatClauseCode@1000000009 : Code[10]);
    BEGIN
      //DOC TMPM1.00 - Adding to summary
      //  -> pVatIdentifier: VAT identifier
      //  -> pVatCalculationType: VAT calculation type
      //  -> pTaxGroupCode: Tax group code
      //  -> pVatPercent: VAT %
      //  -> pAmount: Amount (VAT base)
      //  -> pAmountInclVat: Amount including VAT
      //  -> pLineAmount: Line amount
      //  -> pAllowInvoiceDisc: Allow invoice discount flag
      //  -> pInvDiscountAmount: Invoice discount amount
      //  -> pVatClauseCode: VAT clause code

      SummaryAmount += pAmount;
      SummaryAmountInclVat += pAmountInclVat;

      IF (pAmount <> 0) THEN
      BEGIN
        CLEAR(VatAmountLine);
        VatAmountLine.INIT();
        VatAmountLine.VALIDATE("VAT Identifier", pVatIdentifier);
        VatAmountLine.VALIDATE("VAT Calculation Type", pVatCalculationType);
        VatAmountLine.VALIDATE("Tax Group Code", pTaxGroupCode);
        VatAmountLine.VALIDATE("VAT %", pVatPercent);
        VatAmountLine.VALIDATE("VAT Base", pAmount);
        VatAmountLine.VALIDATE("Amount Including VAT", pAmountInclVat);
        VatAmountLine.VALIDATE("Line Amount", pLineAmount);
        IF (pAllowInvoiceDisc) THEN
        BEGIN
          VatAmountLine.VALIDATE("Inv. Disc. Base Amount", pLineAmount);
          IF ((pLineAmount <> 0) AND (pInvDiscountAmount <> 0)) THEN
            VatAmountLine.VALIDATE("Invoice Discount Amount", pInvDiscountAmount);
        END;
        VatAmountLine.VALIDATE("VAT Clause Code", pVatClauseCode);
        VatAmountLine.InsertLine();
      END;
    END;

    PROCEDURE GetSummaryAmounts@1000000009(VAR pSummaryAmount@1000000000 : Decimal;VAR pSummaryAmountInclVat@1000000001 : Decimal;VAR pAmountInWordsText@1000000002 : Text);
    BEGIN
      //DOC TMPM1.00 - Returning summary amounts
      //  <> pSummaryAmount: Target summary amount
      //  <> pSummaryAmountInclVat: Target summary amount including VAT
      //  <> pAmountInWordsText: Target summary amount in words

      pSummaryAmount := SummaryAmount;
      pSummaryAmountInclVat := SummaryAmountInclVat;
      pAmountInWordsText := AmountInWords(SummaryAmountInclVat);
    END;

    PROCEDURE FilterSummary@1000000014(VAR pSummary@1000000000 : Record 2000000026);
    BEGIN
      //DOC TMPM1.00 - Filtering summary
      //  <> pSummary: Summary recordset (Integer)
      //  <- Result

      VatAmountLine.RESET();
      IF (VatAmountLine.ISEMPTY) THEN
      BEGIN
        CLEAR(VatAmountLine);
        VatAmountLine.INIT();
        VatAmountLine.INSERT();
      END;

      pSummary.SETRANGE(Number, 1, VatAmountLine.COUNT);
    END;

    PROCEDURE NextSummary@1000000015(pSummary@1000000000 : Record 2000000026;VAR pVatAmountLine@1000000001 : Record 290;VAR pVatIdentifierText@1000000003 : Text[100]) : Boolean;
    VAR
      lResult@1000000002 : Boolean;
      eVatIdentifier@1000000005 : TextConst 'ENU=VAT %1%2 (%3);ENG=VAT %1%2 (%3)';
      eVatIdentifierEmptyVat@1000000004 : TextConst 'ENU=VAT %1%2;ENG=VAT %1%2';
    BEGIN
      //DOC TMPM1.00 - Dooing NEXT on buffer
      //  -> pSummary: Current summary record (Integer)
      //  <> pVatAmountLine: Target VAT amount line
      //  <- Result (TRUE = Next summary buffer retrieved, FALSE = No more records)

      IF (pSummary.Number = 1) THEN
        lResult := VatAmountLine.FINDSET()
      ELSE
        lResult := (VatAmountLine.NEXT() <> 0);

      IF (lResult) THEN
      BEGIN
        pVatAmountLine := VatAmountLine;
        IF (VatAmountLine."VAT Identifier" <> '') THEN
          pVatIdentifierText := STRSUBSTNO(eVatIdentifier, VatAmountLine."VAT %", '%', VatAmountLine."VAT Identifier")
        ELSE
          pVatIdentifierText := STRSUBSTNO(eVatIdentifierEmptyVat, VatAmountLine."VAT %", '%');
      END
      ELSE
      BEGIN
        CLEAR(pVatAmountLine);
        CLEAR(pVatIdentifierText);
      END;

      EXIT(lResult);
    END;

    PROCEDURE AmountInWords@1000000004(pAmount@1000000001 : Decimal) : Text;
    VAR
      eAmountInWords@1000000000 : TextConst 'ENU=%1 %2;ENG=%1 %2';
      lAmountInWords@1000000002 : Codeunit 9062446;
    BEGIN
      //DOC NH2015.4 - Returning amount in words
      //  -> pAmount: Amount
      //  <- Amount in words

      EXIT(STRSUBSTNO(eAmountInWords, lAmountInWords.AmountInWords(pAmount), CurrencyText));
    END;

    LOCAL PROCEDURE "--- Formatting ---"@1000000021();
    BEGIN
    END;

    PROCEDURE FormatDate@1000000022(pDate@1000000000 : Date) : Text;
    BEGIN
      //DOC NH2015.4 - Formatting date
      //  -> pDate: Date to format
      //  <- Formatted date

      IF (pDate <> 0D) THEN
      BEGIN
        IF (DateTemplate = '') THEN
          DateTemplate := BuildDateTemplate();
        EXIT(FORMAT(pDate, 0, DateTemplate));
      END
      ELSE
        EXIT('');
    END;

    PROCEDURE FormatTime@1000000030(pTime@1000000000 : Time) : Text;
    BEGIN
      //DOC NH2015.4 - Formatting time
      //  -> pTime: Time to format
      //  <- Formatted time

      IF (pTime <> 0T) THEN
      BEGIN
        IF (TimeTemplate = '') THEN
          TimeTemplate := BuildTimeTemplate();
        EXIT(FORMAT(pTime, 0, TimeTemplate));
      END
      ELSE
        EXIT('');
    END;

    PROCEDURE FormatDateTime@1000000031(pDateTime@1000000000 : DateTime) : Text;
    BEGIN
      //DOC NH2015.4 - Formatting datetime
      //  -> pDateTime: Datetime to format
      //  <- Formatted datetime

      IF (pDateTime <> 0DT) THEN
      BEGIN
        IF (DateTimeTemplate = '') THEN
          DateTimeTemplate := BuildDateTimeTemplate();
        EXIT(FORMAT(pDateTime, 0, TimeTemplate));
      END
      ELSE
        EXIT('');
    END;

    LOCAL PROCEDURE BuildDateTemplate@1000000049() : Text;
    VAR
      lDate@1000000001 : Date;
      lDateText@1000000000 : Text;
      lDateTemplate@1000000002 : Text;
    BEGIN
      //DOC NH2015.4 - Building date template
      //  <- The template

      lDate := DMY2DATE(22, 11, 3333);

      lDateTemplate := FORMAT(lDate, 0, 1);
      lDateTemplate := String.Replace(lDateTemplate, '22', '<Day,2>');
      lDateTemplate := String.Replace(lDateTemplate, '11', '<Month,2>');
      lDateTemplate := String.Replace(lDateTemplate, '3333', '<Year4>');
      lDateTemplate := String.Replace(lDateTemplate, '33', '<Year4>');

      EXIT(lDateTemplate);
    END;

    LOCAL PROCEDURE BuildTimeTemplate@1000000052() : Text;
    BEGIN
      //DOC NH2015.4 - Building time template
      //  <- The template

      EXIT('<Hours24>:<Minutes,2>');
    END;

    LOCAL PROCEDURE BuildDateTimeTemplate@1000000054() : Text;
    BEGIN
      //DOC NH2015.4 - Building datetime template
      //  <- The template

      EXIT(BuildDateTemplate() + ' ' + BuildTimeTemplate());
    END;

    PROCEDURE "--- Tools ---"@1000000013();
    BEGIN
    END;

    PROCEDURE JoinTexts@1000000026(pText1@1000000000 : Text;pText2@1000000001 : Text;pSeparator@1000000003 : Text) : Text;
    VAR
      lText@1000000002 : Text;
    BEGIN
      //DOC TMPM1.00 - Joining 2 texts together
      //  -> pText1..pText2: Text 1 to 2
      //  -> pSeparator: Separator
      //  <- Joined text

      lText := pText1;
      IF ((pText1 <> '') AND (pText2 <> '')) THEN
        lText := lText + pSeparator;
      lText := lText + pText2;

      EXIT(lText);
    END;

    PROCEDURE JoinTexts4@1000000053(pText1@1000000002 : Text;pText2@1000000001 : Text;pText3@1000000008 : Text;pText4@1000000007 : Text;pSeparator@1000000000 : Text) : Text;
    VAR
      lText@1000000009 : Text;
      lTextPart@1000000003 : ARRAY [2] OF Text;
    BEGIN
      //DOC TMPM1.04 - Joining 4 texts together
      //  -> pText1..pText4: Text 1 to 4
      //  -> pSeparator: Separator
      //  <- Joined text

      lTextPart[1] := JoinTexts(pText1, pText2, pSeparator);
      lTextPart[2] := JoinTexts(pText3, pText4, pSeparator);

      lText := JoinTexts(lTextPart[1], lTextPart[2], pSeparator);

      EXIT(lText);
    END;

    PROCEDURE JoinTexts8@1000000051(pText1@1000000002 : Text;pText2@1000000001 : Text;pText3@1000000008 : Text;pText4@1000000007 : Text;pText5@1000000006 : Text;pText6@1000000005 : Text;pText7@1000000004 : Text;pText8@1000000003 : Text;pSeparator@1000000000 : Text) : Text;
    VAR
      lText@1000000009 : Text;
      lTextPart@1000000010 : ARRAY [2] OF Text;
    BEGIN
      //DOC TMPM1.04 - Joining 8 texts together
      //  -> pText1..pText8: Text 1 to 8
      //  -> pSeparator: Separator
      //  <- Joined text

      lTextPart[1] := JoinTexts4(pText1, pText2, pText3, pText4, pSeparator);
      lTextPart[2] := JoinTexts4(pText5, pText6, pText7, pText8, pSeparator);

      lText := JoinTexts(lTextPart[1], lTextPart[2], pSeparator);

      EXIT(lText);
    END;

    PROCEDURE SystemText@1000000044() : Text;
    BEGIN
      //DOC NH2015.4 - Returning system text
      //  <- The text

      EXIT('Microsoft Dynamics NAV 2015');
    END;

    PROCEDURE nAblementText@1000000047() : Text;
    BEGIN
      //DOC NH2015.4 - Returning nAblement text
      //  <- The text

      EXIT('The NAV People nAblement');
    END;

    PROCEDURE LocationToContact@1000000008(pLocation@1000000000 : Record 14;VAR pContact@1000000001 : Record 5050);
    BEGIN
      //DOC NH2015.4 - Transfering location information to contact
      //  -> pLocation: Source location
      //  <> pContact: Target contact

      pContact.Name := pLocation.Contact;
      pContact.Address := pLocation.Address;
      pContact."Address 2" := pLocation."Address 2";
      pContact.City := pLocation.City;
      pContact.County := pLocation.County;
      pContact."Post Code" := pLocation."Post Code";
      pContact."Country/Region Code" := pLocation."Country/Region Code";
      pContact."Phone No." := pLocation."Phone No.";
      pContact."Mobile Phone No." := pLocation."Phone No. 2";
      pContact."Fax No." := pLocation."Fax No.";
      pContact."E-Mail" := pLocation."E-Mail";
      pContact."Home Page" := pLocation."Home Page";
    END;

    PROCEDURE LocationAddress@1000000011(pLocation@1000000000 : Record 14;VAR pAddress@1000000009 : ARRAY [8] OF Text[90]);
    VAR
      lFormatAddress@1000000001 : Codeunit 365;
    BEGIN
      //DOC NH2015.4 - Returning location address
      //  -> pLocation: Source location
      //  <> pAddress: Address array (like in "Format Address" codeunit)

      lFormatAddress.FormatAddr(pAddress, pLocation.Name, pLocation."Name 2", pLocation.Contact, pLocation.Address,
        pLocation."Address 2", pLocation.City, pLocation."Post Code", pLocation.County, pLocation."Country/Region Code");
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 27/05/2014 - Created
      //DOC NA2015.4  JH 07/12/2014 - Purchase documents support added
      //DOC NA2016.4  JH 23/09/2015 - Upgraded to 2016
      //DOC NA2016.12 JH 28/01/2016 - New string codeunit
      //DOC NA2016.15 JH 09/05/2016 - CfMD modifications
    }
    END.
  }
}

