OBJECT Report 699 Calculate Plan - Req. Wksh.
{
  OBJECT-PROPERTIES
  {
    Date=23/09/13;
    Time=12:00:00 PM;
    Version List=NAVW17.10;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Calculate Plan - Req. Wksh.;
               ENG=Calculate Plan - Req. Wksh.];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  Counter := 0;
                  IF FromDate = 0D THEN
                    ERROR(Text002);
                  IF ToDate = 0D THEN
                    ERROR(Text003);
                  PeriodLength := ToDate - FromDate + 1;
                  IF PeriodLength <= 0 THEN
                    ERROR(Text004);

                  IF (Item.GETFILTER("Variant Filter") <> '') AND
                     (MfgSetup."Current Production Forecast" <> '')
                  THEN BEGIN
                    ForecastEntry.SETCURRENTKEY("Production Forecast Name","Item No.","Location Code","Forecast Date","Component Forecast");
                    ForecastEntry.SETRANGE("Production Forecast Name",MfgSetup."Current Production Forecast");
                    Item.COPYFILTER("No.",ForecastEntry."Item No.");
                    IF MfgSetup."Use Forecast on Locations" THEN
                      Item.COPYFILTER("Location Filter",ForecastEntry."Location Code");
                    IF ForecastEntry.FINDFIRST THEN
                      ERROR(Text005);
                  END;

                  ReqLine.SETRANGE("Worksheet Template Name",CurrTemplateName);
                  ReqLine.SETRANGE("Journal Batch Name",CurrWorksheetName);

                  Window.OPEN(
                    Text006 +
                    Text007);
                END;

  }
  DATASET
  {
    { 8129;    ;DataItem;                    ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(Low-Level Code)
                                 WHERE(Type=CONST(Inventory));
               OnPreDataItem=BEGIN
                               SKU.SETCURRENTKEY("Item No.");
                               COPYFILTER("Variant Filter",SKU."Variant Code");
                               COPYFILTER("Location Filter",SKU."Location Code");

                               COPYFILTER("Variant Filter",PlanningAssignment."Variant Code");
                               COPYFILTER("Location Filter",PlanningAssignment."Location Code");
                               PlanningAssignment.SETRANGE(Inactive,FALSE);
                               PlanningAssignment.SETRANGE("Net Change Planning",TRUE);

                               ReqLineExtern.SETCURRENTKEY(Type,"No.","Variant Code","Location Code");
                               COPYFILTER("Variant Filter",ReqLineExtern."Variant Code");
                               COPYFILTER("Location Filter",ReqLineExtern."Location Code");

                               PurchReqLine.SETCURRENTKEY(
                                 Type,"No.","Variant Code","Location Code","Sales Order No.","Planning Line Origin","Due Date");
                               PurchReqLine.SETRANGE(Type,PurchReqLine.Type::Item);
                               COPYFILTER("Variant Filter",PurchReqLine."Variant Code");
                               COPYFILTER("Location Filter",PurchReqLine."Location Code");
                               PurchReqLine.SETFILTER("Worksheet Template Name",ReqWkshTemplateFilter);
                               PurchReqLine.SETFILTER("Journal Batch Name",ReqWkshFilter);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Counter MOD 5 = 0 THEN
                                    Window.UPDATE(1,"No.");
                                  Counter := Counter + 1;

                                  IF SkipPlanningForItemOnReqWksh(Item) THEN
                                    CurrReport.SKIP;

                                  PlanningAssignment.SETRANGE("Item No.","No.");

                                  ReqLine.LOCKTABLE;
                                  ActionMessageEntry.LOCKTABLE;

                                  PurchReqLine.SETRANGE("No.","No.");
                                  PurchReqLine.MODIFYALL("Accept Action Message",FALSE);
                                  PurchReqLine.DELETEALL(TRUE);

                                  ReqLineExtern.SETRANGE(Type,ReqLine.Type::Item);
                                  ReqLineExtern.SETRANGE("No.","No.");
                                  IF ReqLineExtern.FIND('-') THEN
                                    REPEAT
                                      ReqLineExtern.DELETE(TRUE);
                                    UNTIL ReqLineExtern.NEXT = 0;

                                  InvtProfileOffsetting.SetParm(UseForecast,ExcludeForecastBefore,CurrWorksheetType);
                                  InvtProfileOffsetting.CalculatePlanFromWorksheet(
                                    Item,
                                    MfgSetup,
                                    CurrTemplateName,
                                    CurrWorksheetName,
                                    FromDate,
                                    ToDate,
                                    TRUE,
                                    RespectPlanningParm);

                                  IF PlanningAssignment.FIND('-') THEN
                                    REPEAT
                                      IF PlanningAssignment."Latest Date" <= ToDate THEN BEGIN
                                        PlanningAssignment.Inactive := TRUE;
                                        PlanningAssignment.MODIFY;
                                      END;
                                    UNTIL PlanningAssignment.NEXT = 0;

                                  COMMIT;

                                  TempItemList := Item;
                                  TempItemList.INSERT;
                                END;

               ReqFilterFields=No.,Search Description,Location Filter }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   MfgSetup.GET;
                   UseForecast := MfgSetup."Current Production Forecast";
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 1   ;2   ;Field     ;
                  Name=StartingDate;
                  CaptionML=[ENU=Starting Date;
                             ENG=Starting Date];
                  SourceExpr=FromDate }

      { 3   ;2   ;Field     ;
                  Name=EndingDate;
                  CaptionML=[ENU=Ending Date;
                             ENG=Ending Date];
                  SourceExpr=ToDate }

      { 6   ;2   ;Field     ;
                  CaptionML=[ENU=Use Forecast;
                             ENG=Use Forecast];
                  SourceExpr=UseForecast;
                  TableRelation="Production Forecast Name".Name }

      { 7   ;2   ;Field     ;
                  CaptionML=[ENU=Exclude Forecast Before;
                             ENG=Exclude Forecast Before];
                  SourceExpr=ExcludeForecastBefore }

      { 4   ;2   ;Field     ;
                  CaptionML=[ENU=Respect Planning Parameters for Supply Triggered by Safety Stock;
                             ENG=Respect Planning Parameters for Supply Triggered by Safety Stock];
                  SourceExpr=RespectPlanningParm }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text002@1000 : TextConst 'ENU=Enter a starting date.;ENG=Enter a starting date.';
      Text003@1001 : TextConst 'ENU=Enter an ending date.;ENG=Enter an ending date.';
      Text004@1002 : TextConst 'ENU=The ending date must not be before the order date.;ENG=The ending date must not be before the order date.';
      Text005@1003 : TextConst 'ENU=You must not use a variant filter when calculating MPS from a forecast.;ENG=You must not use a variant filter when calculating MPS from a forecast.';
      Text006@1004 : TextConst 'ENU=Calculating the plan...\\;ENG=Calculating the plan...\\';
      Text007@1005 : TextConst 'ENU=Item No.  #1##################;ENG=Item No.  #1##################';
      ReqLine@1006 : Record 246;
      ActionMessageEntry@1007 : Record 99000849;
      ReqLineExtern@1008 : Record 246;
      PurchReqLine@1009 : Record 246;
      SKU@1010 : Record 5700;
      PlanningAssignment@1012 : Record 99000850;
      ForecastEntry@1015 : Record 99000852;
      MfgSetup@1018 : Record 99000765;
      TempItemList@1019 : TEMPORARY Record 27;
      InvtProfileOffsetting@1020 : Codeunit 99000854;
      CurrWorksheetType@1022 : 'Requisition,Planning';
      Window@1023 : Dialog;
      PeriodLength@1024 : Integer;
      CurrTemplateName@1025 : Code[10];
      CurrWorksheetName@1026 : Code[10];
      FromDate@1027 : Date;
      ToDate@1028 : Date;
      ReqWkshTemplateFilter@1030 : Code[50];
      ReqWkshFilter@1031 : Code[50];
      Counter@1032 : Integer;
      UseForecast@1014 : Code[10];
      ExcludeForecastBefore@1013 : Date;
      RespectPlanningParm@1011 : Boolean;

    PROCEDURE SetTemplAndWorksheet@2(TemplateName@1000 : Code[10];WorksheetName@1001 : Code[10]);
    BEGIN
      CurrTemplateName := TemplateName;
      CurrWorksheetName := WorksheetName;
    END;

    PROCEDURE InitializeRequest@1(StartDate@1000 : Date;EndDate@1001 : Date);
    BEGIN
      FromDate := StartDate;
      ToDate := EndDate;
    END;

    LOCAL PROCEDURE SkipPlanningForItemOnReqWksh@3(Item@1000 : Record 27) : Boolean;
    BEGIN
      WITH Item DO
        IF (CurrWorksheetType = CurrWorksheetType::Requisition) AND
           ("Replenishment System" = "Replenishment System"::Purchase) AND
           ("Reordering Policy" <> "Reordering Policy"::" ")
        THEN
          EXIT(FALSE);

      WITH SKU DO BEGIN
        SETRANGE("Item No.",Item."No.");
        IF FIND('-') THEN
          REPEAT
            IF (CurrWorksheetType = CurrWorksheetType::Requisition) AND
               ("Replenishment System" IN ["Replenishment System"::Purchase,
                                           "Replenishment System"::Transfer]) AND
               ("Reordering Policy" <> "Reordering Policy"::" ")
            THEN
              EXIT(FALSE);
          UNTIL NEXT = 0;
      END;

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

