OBJECT Codeunit 9062402 Ask nOra - Function Processing
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    TableNo=9062522;
    OnRun=BEGIN
            IF NOT ANFunction.GET("Curr. Function") THEN ERROR(tUnknownFunction,"Curr. Function");

            //If this is a custom Function, run the specified codeunit
            IF ANFunction."Codeunit to Run" <> 0 THEN BEGIN
              CODEUNIT.RUN(ANFunction."Codeunit to Run",Rec);
              EXIT;
            END;

            CASE ANFunction.Code OF
              'FIRSTUSE' : VALIDATE("Last Function Success",Function_FIRSTUSE(Rec));
              'HELLO' : VALIDATE("Last Function Success",Function_HELLO(Rec));
              'FORGET IT' : VALIDATE("Last Function Success",Function_FORGETIT(Rec));
              'INFOSET' : VALIDATE("Last Function Success",Function_INFOSET(Rec));
              'ACTION' : VALIDATE("Last Function Success",Function_ACTION(Rec));
              'TEXTSNIPPET' : VALIDATE("Last Function Success",Function_TEXTSNIPPET(Rec));
              'ANSWERQUEST_EXISTING' : VALIDATE("Last Function Success",Function_ANSWERQUEST_EXISTING(Rec));
              'ANSWERQUEST_NEW' : VALIDATE("Last Function Success",Function_ANSWERQUEST_NEW(Rec));
              ELSE ERROR(tFunctionNotWritten,ANFunction.Code);
            END;

            MODIFY(TRUE);
          END;

  }
  CODE
  {
    VAR
      tUnknownFunction@1000000006 : TextConst 'ENU=Sorry, I didn''t find a function to do;ENG=Sorry, I didn''t find a function to do';
      ANFunction@1000000000 : Record 9062521;
      tFunctionNotWritten@1000000001 : TextConst 'ENU=Sorry, it looks like I haven''t been told how to do the function "%1";ENG=Sorry, it looks like I haven''t been told how to do the function "%1"';
      ConvMgt@1000000002 : Codeunit 9062400;
      FunctionSuccess@1000000003 : Boolean;
      TNPUtils@1000000004 : Codeunit 9062229;
      tICouldntFindAnything@1000000005 : TextConst 'ENU=I couldn''t find anything in what you said that tells me what action to do;ENG=I couldn''t find anything in what you said that tells me what action to do';

    PROCEDURE Function_FIRSTUSE@1000000003(VAR Rec@1000000000 : Record 9062522) Success : Boolean;
    VAR
      eOdd@1000000002 : TextConst 'ENU=Odd... I''m %1-ing too today;ENG=Odd... I''m %1-ing too today';
      eWhatAreYouUpTo@1000000001 : TextConst 'ENU=What are you up to today?;ENG=What are you up to today?';
    BEGIN
      WITH Rec DO BEGIN
        //This is turned off at the moment
        EXIT(FALSE);

        //If we're waiting for an answer to a question skip this function
        IF "Need Answer to Question" <> 0 THEN BEGIN
          EXIT(FALSE);
        END;

        //What is the user doing today? >>
        //They've already answered
        IF "Question Text Answer" <> '' THEN BEGIN
          ConvMgt.nOraResponse(STRSUBSTNO(eOdd, "Question Text Answer"));
          "Question Text Answer" := '';
          MODIFY(TRUE);
          EXIT(TRUE);
        END ELSE BEGIN
          //We need to ask them
          ConvMgt.nOraResponse_AskQuestion(
            Rec,
            ConvMgt.CreateQuestion(Rec.ID,eWhatAreYouUpTo)
          );
          EXIT(TRUE);
        END;

        //What is the user doing today? <<
      END;
    END;

    PROCEDURE Function_HELLO@1000000002(VAR Rec@1000000000 : Record 9062522) Success : Boolean;
    VAR
      SearchMgt@1000000002 : Codeunit 9062405;
      SearchResultsSummary@1000000001 : Record 9062523;
      SearchID@1000000003 : Integer;
      NumberOfResults@1000000004 : Integer;
      nAblementUser@1000000005 : Record 9062729;
      Contact@1000000006 : Record 5050;
      FirstName@1000000007 : Text;
      eHi@1000000008 : TextConst 'ENU=Hi;ENG=Hi';
      eNoraRude@1000000009 : TextConst 'ENU=I know it''s nice to be polite, but we already said hello, do you actually need anything?;ENG=I know it''s nice to be polite, but we already said hello, do you actually need anything?';
    BEGIN
      WITH Rec DO BEGIN


        SearchID := SearchMgt.CreateSearch("Curr. Sentence ID",FORMAT(DATABASE::"Ask nOra - Function"),'',FALSE,TRUE,FALSE,TRUE,FALSE,FALSE,FALSE,'HELLO',1,0,0);
        SearchMgt.AddSearchTableFilter(SearchID,DATABASE::"Ask nOra - Function",1,'HELLO');
        SearchMgt.AddDefaultFields_toSearch(SearchID,DATABASE::"Ask nOra - Function");
        NumberOfResults := SearchMgt.ExecuteSearch(SearchID,SearchResultsSummary);

        IF NumberOfResults = 0 THEN EXIT(FALSE);

        IF NOT "Said Hello" OR (DT2DATE("Said Hello DateTime") <> TODAY) THEN BEGIN
          IF nAblementUser.GET("User ID") THEN BEGIN
            IF Contact.GET(nAblementUser."Contact No.") THEN BEGIN
              FirstName := Contact."First Name";
              IF FirstName = '' THEN BEGIN
                IF STRPOS(Contact.Name,' ') <> 0 THEN
                 FirstName := COPYSTR(Contact.Name,1,STRPOS(Contact.Name,' '))
                ELSE
                 FirstName := Contact.Name;
              END;
            END;
          END;
          IF FirstName = '' THEN
            ConvMgt.nOraResponse(eHi)
          ELSE
            ConvMgt.nOraResponse(eHi + ' ' + FirstName);

          "Said Hello" := TRUE;
          "Said Hello DateTime" := CURRENTDATETIME;
          MODIFY(TRUE);
          EXIT(TRUE);
        END ELSE BEGIN
          ConvMgt.nOraResponse(eNoraRude);
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE Function_FORGETIT@1000000004(VAR Rec@1000000000 : Record 9062522) Success : Boolean;
    VAR
      SearchMgt@1000000002 : Codeunit 9062405;
      SearchResultsSummary@1000000001 : Record 9062523;
      SearchID@1000000003 : Integer;
      NumberOfResults@1000000004 : Integer;
      eLetsStartOver@1000000005 : TextConst 'ENU=Ok, lets start over;ENG=Ok, lets start over';
    BEGIN
      WITH Rec DO BEGIN
        SearchID := SearchMgt.CreateSearch("Curr. Sentence ID",FORMAT(DATABASE::"Ask nOra - Function"),'',FALSE,TRUE,FALSE,TRUE,FALSE,FALSE,TRUE,'FORGETIT',1,0,0);
        SearchMgt.AddSearchTableFilter(SearchID,DATABASE::"Ask nOra - Function",1,'FORGET IT');
        SearchMgt.AddDefaultFields_toSearch(SearchID,DATABASE::"Ask nOra - Function");
        NumberOfResults := SearchMgt.ExecuteSearch(SearchID,SearchResultsSummary);

        IF NumberOfResults = 0 THEN EXIT(FALSE);
        Success := ConvMgt.ResetConversation(Rec);
        ConvMgt.nOraResponse(eLetsStartOver);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE Function_INFOSET@1000000001(VAR Rec@1000000002 : Record 9062522) Success : Boolean;
    VAR
      SearchMgt@1000000001 : Codeunit 9062405;
      SearchResultsSummary@1000000004 : Record 9062523;
      QuickReportHeader@1000000000 : Record 9062697;
      MoreRecords@1000000003 : Boolean;
      eChecking@1000000005 : TextConst 'ENU=I''m just going to check if you mentioned a quick report;ENG=I''m just going to check if you mentioned a quick report';
      eYouDidntMention@1000000006 : TextConst 'ENU=You didn''t mention a quick report;ENG=You didn''t mention a quick report';
      eMultipleQuickReports@1000000007 : TextConst 'ENU=I found multiple quick reports, but I''m not showing any as you need to be more specific;ENG=I found multiple quick reports, but I''m not showing any as you need to be more specific';
      eShowingQuickReport@1000000008 : TextConst 'ENU=I found quick report %1, so I''ll show it to you now;ENG=I found quick report %1, so I''ll show it to you now';
      eHereIsTheReport@1000000009 : TextConst 'ENU=Here is the report "%1";ENG=Here is the report "%1"';
      eClickHereToSeeAllRecords@1000000010 : TextConst 'ENU=Click here to see all records;ENG=Click here to see all records';
    BEGIN
      WITH Rec DO BEGIN
        ConvMgt.nOraResponse_Debug(eChecking);
        //Look for a Quick Report in the Sentence
        IF SearchMgt.QuickSearch("Curr. Sentence ID",FORMAT(DATABASE::"Quick Report Header"),'',TRUE,FALSE,FALSE,TRUE,FALSE,TRUE,'INFOSET',1,SearchResultsSummary) = 0 THEN BEGIN
          //Didn't find an Information Set
          ConvMgt.nOraResponse_Debug(eYouDidntMention);
          EXIT(FALSE);
        END;

        IF SearchResultsSummary.COUNT > 0 THEN BEGIN
          SearchResultsSummary.FINDSET(TRUE,TRUE);
          REPEAT
            QuickReportHeader.SETPOSITION(SearchResultsSummary."Position Text");
            QuickReportHeader.SETRECFILTER;
            IF QuickReportHeader.FINDFIRST THEN BEGIN
              IF QuickReportHeader."Temporary" THEN SearchResultsSummary.DELETE(TRUE);
            END;
          UNTIL SearchResultsSummary.NEXT = 0;
        END;

        IF SearchResultsSummary.COUNT > 1 THEN BEGIN
          //Found multiple Information Sets
          ConvMgt.nOraResponse_Debug(eMultipleQuickReports);
          EXIT(FALSE)
        END;

        //Found one information set
        SearchResultsSummary.FINDFIRST;
        SearchMgt.UseSearchResult(SearchResultsSummary);
        ConvMgt.nOraResponse_Debug(STRSUBSTNO(eShowingQuickReport,SearchResultsSummary."Position Text"));
        QuickReportHeader.SETPOSITION(SearchResultsSummary."Position Text");
        QuickReportHeader.SETRECFILTER();
        QuickReportHeader.FINDFIRST();
        ConvMgt.nOraResponse_QuickReport(STRSUBSTNO(eHereIsTheReport, QuickReportHeader.Name), QuickReportHeader.Code, eClickHereToSeeAllRecords);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE Function_ACTION@1000000000(VAR Rec@1000000000 : Record 9062522) Success : Boolean;
    VAR
      SearchMgt@1000000002 : Codeunit 9062405;
      SearchResultsSummary@1000000001 : Record 9062523;
      ANActions@1000000003 : Record 9062520;
      ActionProcessing@1000000004 : Codeunit 9062403;
      NumActions@1000000005 : Integer;
      QuestionChoice@1000000006 : Record 9062513;
      eChecking@1000000007 : TextConst 'ENU=I''m going to check if you asked me to perform an action;ENG=I''m going to check if you asked me to perform an action';
      eIKnowActionAlready@1000000008 : TextConst 'ENU=First, I''m looking to see if I already know what action you want me to do;ENG=First, I''m looking to see if I already know what action you want me to do';
      eDoingAnAction@1000000009 : TextConst 'ENU=I do! So I''m going to do the action %1;ENG=I do! So I''m going to do the action %1';
      eIDidntKnowTheAction@1000000010 : TextConst 'ENU=I didn''t already know the action you wanted, so I''m going to see if you just told me what to do;ENG=I didn''t already know the action you wanted, so I''m going to see if you just told me what to do';
      eActionFound@1000000011 : TextConst 'ENU=I managed to find 1 action (%1) from what you just said, so I''ll use that;ENG=I managed to find 1 action (%1) from what you just said, so I''ll use that';
      eActionsFound@1000000012 : TextConst 'ENU=I found %1 actions in what you said, so I''m going to try each one until I find one that works;ENG=I found %1 actions in what you said, so I''m going to try each one until I find one that works';
      ePreviousAction@1000000013 : TextConst 'ENU=I didn''t find any mention of an action to do, so I''m going to try doing the previous action;ENG=I didn''t find any mention of an action to do, so I''m going to try doing the previous action';
    BEGIN
      WITH Rec DO BEGIN
        ConvMgt.nOraResponse_Debug(eChecking);

        //Do we already have an action set?
        ConvMgt.nOraResponse_Debug(eIKnowActionAlready);
        IF "Curr. Action" <> '' THEN BEGIN
          ConvMgt.nOraResponse_Debug(STRSUBSTNO(eDoingAnAction,"Curr. Action"));
          ActionProcessing.RUN(Rec);
          EXIT(ActionProcessing.WasSuccess);
        END;

        //We don't have an Action at the moment
        ConvMgt.nOraResponse_Debug(eIDidntKnowTheAction);

        //Does the current sentence mention one?
        NumActions := SearchMgt.QuickSearch("Curr. Sentence ID",FORMAT(DATABASE::"Ask nOra - Action"),'',TRUE,FALSE,TRUE,TRUE,FALSE,TRUE,'ACTION',1,SearchResultsSummary);

        //The current sentence mentions exactly 1 Action - so we should use that
        IF NumActions = 1 THEN BEGIN
          SearchResultsSummary.FINDFIRST;
          ANActions.SETPOSITION(SearchResultsSummary."Position Text");
          ANActions.SETRECFILTER;
          ANActions.FINDFIRST;

          ConvMgt.nOraResponse_Debug(STRSUBSTNO(eActionFound,ANActions.Code));
          SearchMgt.UseSearchResult(SearchResultsSummary);
          VALIDATE("Curr. Action",ANActions.Code);
          MODIFY(TRUE);

          ActionProcessing.RUN(Rec);
          IF ActionProcessing.WasSuccess THEN BEGIN
            IF ANActions."Don't Repeat Action" THEN BEGIN
              VALIDATE("Curr. Action",'');
              MODIFY(TRUE);
            END;

            EXIT(TRUE);
          END ELSE BEGIN
            VALIDATE("Curr. Action",'');
            MODIFY(TRUE);
            EXIT(FALSE);
          END;
        END;

        //Multiple actions found - do them until one succeeds
        IF NumActions > 1 THEN BEGIN
          ConvMgt.nOraResponse_Debug(STRSUBSTNO(eActionsFound,SearchResultsSummary.COUNT));
          SearchResultsSummary.FINDSET;
          REPEAT
            VALIDATE("Curr. Action",ANActions.Code);
            SearchMgt.UseSearchResult(SearchResultsSummary);
            MODIFY(TRUE);
            ActionProcessing.RUN(Rec);

            IF ActionProcessing.WasSuccess THEN BEGIN
              IF ANActions."Don't Repeat Action" THEN BEGIN
                VALIDATE("Curr. Action",'');
                MODIFY(TRUE);
              END;

              EXIT(TRUE);
            END;

            VALIDATE("Curr. Action",'');
            MODIFY(TRUE);
            SearchMgt.UnUseSearchResult(SearchResultsSummary);

          UNTIL SearchResultsSummary.NEXT = 0;
          EXIT(FALSE);
        END;

        IF "Curr. Action" <> '' THEN BEGIN
          ActionProcessing.RUN(Rec);
          IF ActionProcessing.WasSuccess THEN BEGIN
            IF ANActions."Don't Repeat Action" THEN BEGIN
              VALIDATE("Curr. Action",'');
              MODIFY(TRUE);
            END;

            EXIT(TRUE)
          END  ELSE BEGIN
            VALIDATE("Curr. Action",'');
            MODIFY(TRUE);
            EXIT(FALSE);
          END;

        END ELSE BEGIN
           IF ("Prev. Action" <> '') THEN BEGIN
             ConvMgt.nOraResponse_Debug(ePreviousAction);
             VALIDATE("Curr. Action","Prev. Action");
             MODIFY(TRUE);
             ActionProcessing.RUN(Rec);
             IF ActionProcessing.WasSuccess THEN BEGIN
              IF ANActions."Don't Repeat Action" THEN BEGIN
                VALIDATE("Curr. Action",'');
                MODIFY(TRUE);
              END;

               EXIT(TRUE)
             END ELSE BEGIN
               VALIDATE("Curr. Action",'');
               MODIFY(TRUE);
             END;

           END;
        END;
        //We're out of options
        ConvMgt.nOraResponse_Debug(tICouldntFindAnything);
        EXIT(FALSE);
      END;
    END;

    PROCEDURE Function_TEXTSNIPPET@1000000006(VAR Rec@1000000000 : Record 9062522) Success : Boolean;
    VAR
      SearchMgt@1000000002 : Codeunit 9062405;
      SearchResultsSummary@1000000001 : Record 9062523;
      NumSnippets@1000000005 : Integer;
      ANTextSnippet@1000000003 : Record 9062596;
      ANTextSnippetLines@1000000004 : TEMPORARY Record 9062597;
      ConvEntry@1000000006 : Record 9062511;
      Sentence@1000000007 : Record 9062517;
      eChecking@1000000008 : TextConst 'ENU=I''m going to check if you ask for a text snippet;ENG=I''m going to check if you ask for a text snippet';
      eTextSnippetFound@1000000009 : TextConst 'ENU=I managed to find a text snippet (%1) from what you just said, so I''ll use that;ENG=I managed to find a text snippet (%1) from what you just said, so I''ll use that';
      eNoTextInTextSnippet@1000000010 : TextConst 'ENU=There doesn''t seem to be any text in the text snippet "%1";ENG=There doesn''t seem to be any text in the text snippet "%1"';
      eIDontKnowWhatToSay@1000000011 : TextConst 'ENU=I don''t know what to say to that;ENG=I don''t know what to say to that';
    BEGIN
      WITH Rec DO BEGIN
        ConvMgt.nOraResponse_Debug(eChecking);

        //Does the current sentence mention a text snippet?
        NumSnippets := SearchMgt.QuickSearch("Curr. Sentence ID",FORMAT(DATABASE::"Ask nOra - Text Snippets"),'',TRUE,FALSE,TRUE,TRUE,FALSE,TRUE,'TEXTSNIPPET',1,SearchResultsSummary);

        //The current sentence mentions exactly 1 Text Snippet - so we should use that
        IF NumSnippets = 1 THEN BEGIN
          SearchResultsSummary.FINDFIRST;
          ANTextSnippet.SETPOSITION(SearchResultsSummary."Position Text");
          ANTextSnippet.SETRECFILTER;
          ANTextSnippet.FINDFIRST;

          ConvMgt.nOraResponse_Debug(STRSUBSTNO(eTextSnippetFound,ANTextSnippet.Code));
          SearchMgt.UseSearchResult(SearchResultsSummary);
          MODIFY(TRUE);

          ANTextSnippet.GetLines(ANTextSnippetLines);
          IF ANTextSnippetLines.FINDSET THEN BEGIN
            ConvEntry.GET(ID,ConvMgt.CreateEntry(Rec,ConvEntry.Direction::"nOra -> User",ConvEntry."Entry Type"::Text,FALSE,FALSE));
            REPEAT
              ConvMgt.CreateSentence_Simple(ConvEntry,ANTextSnippetLines."Line Text");
            UNTIL ANTextSnippetLines.NEXT = 0;
          END ELSE BEGIN
            ConvMgt.nOraResponse_Debug(STRSUBSTNO(eNoTextInTextSnippet,ANTextSnippet.Code));
            ConvMgt.nOraResponse_Error(eIDontKnowWhatToSay);
          END;

          ConvMgt.ResetConversation(Rec);
          EXIT(TRUE)
        END;

        //We're out of options
        ConvMgt.nOraResponse_Debug(tICouldntFindAnything);
        EXIT(FALSE);
      END;
    END;

    PROCEDURE Function_ANSWERQUEST_EXISTING@1000000007(VAR Rec@1000000000 : Record 9062522) Success : Boolean;
    VAR
      AsknOraDevAPI@1000000001 : Codeunit 9062514;
      Result@1000000002 : 'Success,Failure,QuestionAsked';
      QuestInstance@1000000003 : Record 9062704;
      eChecking@1000000004 : TextConst 'ENU=I''m going to check if mentioned a questionnaire instance;ENG=I''m going to check if mentioned a questionnaire instance';
      eYouDidntMention@1000000005 : TextConst 'ENU=You didn''t mention a questionnaire instance;ENG=You didn''t mention a questionnaire instance';
      eFound@1000000006 : TextConst 'ENU=I found the questionnaire instance %1 for you to answer;ENG=I found the questionnaire instance %1 for you to answer';
    BEGIN
      //DOC PC NA2015.7 05/06/2015
      WITH Rec DO BEGIN
        ConvMgt.nOraResponse_Debug(eChecking);

        Success := AsknOraDevAPI.FindRecord(Rec,Result,FORMAT(DATABASE::Questionnaire));
        IF Result <> Result::Success THEN BEGIN
          ConvMgt.nOraResponse_Debug(eYouDidntMention);
          EXIT(FALSE);
        END;

        QuestInstance.SETPOSITION("Curr. Rec. Position");
        QuestInstance.SETRECFILTER;
        QuestInstance.FINDFIRST;

        ConvMgt.nOraResponse_Debug(STRSUBSTNO(eFound,QuestInstance."Questionnaire No."));
        ConvMgt.nOraResponse_Questionnaire_Set(Rec,QuestInstance."Questionnaire No.");
        ConvMgt.nOraResponse_Questionnaire_AskNextQuestion(Rec);

        EXIT(TRUE);
      END;
    END;

    PROCEDURE Function_ANSWERQUEST_NEW@1000000005(VAR Rec@1000000000 : Record 9062522) Success : Boolean;
    VAR
      AsknOraDevAPI@1000000001 : Codeunit 9062514;
      Result@1000000002 : 'Success,Failure,QuestionAsked';
      QuestInstance@1000000003 : Record 9062704;
      Questionnaire@1000000004 : Record 9062702;
      TNPQuestionnaireManagement@1000000005 : Codeunit 9062540;
      eChecking@1000000006 : TextConst 'ENU=I''m going to check if mentioned a questionnaire;ENG=I''m going to check if mentioned a questionnaire';
      eYouDidntMention@1000000007 : TextConst 'ENU=You didn''t mention a questionnaire;ENG=You didn''t mention a questionnaire';
      eFound@1000000008 : TextConst 'ENU=I found the questionnaire %1 for you to answer;ENG=I found the questionnaire %1 for you to answer';
    BEGIN
      //DOC PC NA2015.7 05/06/2015
      WITH Rec DO BEGIN
        ConvMgt.nOraResponse_Debug(eChecking);

        Success := AsknOraDevAPI.FindRecord(Rec,Result,FORMAT(DATABASE::"Questionnaire Template"));
        IF Result <> Result::Success THEN BEGIN
          ConvMgt.nOraResponse_Debug(eYouDidntMention);
          EXIT(FALSE);
        END;

        Questionnaire.SETPOSITION("Curr. Rec. Position");
        Questionnaire.SETRECFILTER;
        Questionnaire.FINDFIRST;

        ConvMgt.nOraResponse_Debug(STRSUBSTNO(eFound,QuestInstance."Questionnaire No."));
        TNPQuestionnaireManagement.CreateInstanceOfQuest(Questionnaire,QuestInstance);

        ConvMgt.nOraResponse_Questionnaire_Set(Rec,QuestInstance."Questionnaire No.");
        ConvMgt.nOraResponse_Questionnaire_AskNextQuestion(Rec);

        EXIT(TRUE);
      END;
    END;

    BEGIN
    {
      //DOC NA2015.7  PC 05/06/2015 - Change Information Set references to Quick Reports
      //DOC NA2015.7  PC 05/06/2015 - Added Questionnaire Functionality
      //DOC NA2015.8  PC 13/07/2015 - Ignore Temp. Quick Reports
      //DOC NA2016.8  JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.15 JH 18/04/2016 - CfMD amendments
    }
    END.
  }
}

