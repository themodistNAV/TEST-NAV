OBJECT Codeunit 9062258 Enhanced Workflow Management
{
  OBJECT-PROPERTIES
  {
    Date=07/07/16;
    Time=[ 9:34:39 AM];
    Version List=NA2016.16;
  }
  PROPERTIES
  {
    OnRun=VAR
            sdate@1000000000 : Date;
            edate@1000000001 : Date;
            stime@1000000002 : Time;
            etime@1000000003 : Time;
            pstart@1000000004 : Time;
            pend@1000000005 : Time;
          BEGIN
            ProcessAutoResponses();
            PopulateAllResponseOptions();
          END;

  }
  CODE
  {
    VAR
      TempField@1000000001 : TEMPORARY Record 2000000041;
      Text000@1000000003 : TextConst 'ENU=All Files (*.*)|*.*;ENG=All Files (*.*)|*.*';
      Text001@1000000002 : TextConst 'ENU="Import Attachment ";ENG="Import Attachment "';
      Text002@1000000000 : TextConst 'ENU=" user setup has no Contact ";ENG=" user setup has no Contact "';
      Text003@1000000004 : TextConst 'ENU=" User Setuphas no Person Code";ENG=" User Setuphas no Person Code"';
      Text004@1000000005 : TextConst 'ENU=WFlow Group Header does not exists .. this error was caused by CreateGroupWFlow being called with an invalid Group;ENG=WFlow Group Header does not exists .. this error was caused by CreateGroupWFlow being called with an invalid Group';
      TNL001@1000000006 : TextConst 'ENU=You (%1) do not have permission to Respond to this WFlow;ENG=You (%1) do not have permission to Respond to this WFlow';
      Text005@1000000007 : TextConst 'ENU=No WFlow set for this status change;ENG=No WFlow set for this status change';
      Text006@1000000008 : TextConst 'ENU=WFlow type %1 does not exist;ENG=WFlow type %1 does not exist';
      Text007@1000000009 : TextConst 'ENU=WFlow Setup does not exist;ENG=WFlow Setup does not exist';
      Text008@1000000010 : TextConst 'ENU=WFlow Group Header %1 does not exist;ENG=WFlow Group Header %1 does not exist';
      SysB@1000000011 : Record 9062230;
      Text009@1000000012 : TextConst 'ENU=Cannot Auto Respond to workflow group %1 as there is no activity line for the Auto Response Contact No. set in the Workflow Setup table;ENG=Cannot Auto Respond to workflow group %1 as there is no activity line for the Auto Response Contact No. set in the Workflow Setup table';
      Text010@1000000013 : TextConst 'ENU=Cannot Auto Respond to workflow group %1 as there is not Response set as Auto Response for Workflow Type %2;ENG=Cannot Auto Respond to workflow group %1 as there is not Response set as Auto Response for Workflow Type %2';
      Text011@1000000014 : TextConst 'ENU=Cannot Auto Respond to workflows as the Auto Response user in Workflow Setup does not exist in User Setup;ENG=Cannot Auto Respond to workflows as the Auto Response user in Workflow Setup does not exist in User Setup';
      Text012@1000000015 : TextConst 'ENU=Cannot Auto Respond to workflows as the Auto Response user (%1) has no Contact No. specified in the User Setup table;ENG=Cannot Auto Respond to workflows as the Auto Response user (%1) has no Contact No. specified in the User Setup table';
      NewTableID@1000000016 : Integer;
      NewPageID@1000000017 : Integer;
      NewFormID@1000000018 : Integer;
      Logger@1000000019 : Record 9062280;
      WSMgmt@1000000020 : Codeunit 9062246;
      TNLUtils@1000001021 : Codeunit 9062229;
      tWorkflowsNotEnabledInSB@1000000021 : TextConst 'ENU=Workflows are not enabled in System Behaviour.;ENG=Workflows are not enabled in System Behaviour.';
      tUnknownWorkflow@1000000022 : TextConst 'ENU=Unknown workflow "%1".;ENG=Unknown workflow "%1".';
      tWorkflowDisabled@1000000023 : TextConst 'ENU=Workflow "%1" is disabled.;ENG=Workflow "%1" is disabled.';
      tOneWorkflowOnly@1000000024 : TextConst 'ENU=Not creating group workflow for "%1" as workflow "%2" has been set to one workflow only.;ENG=Not creating group workflow for "%1" as workflow "%2" has been set to one workflow only.';
      tAutoResponse@1000000025 : TextConst 'ENU=Auto response has been used to close group workflow "%1".;ENG=Auto response has been used to close group workflow "%1".';
      tNoRecipients@1000000026 : TextConst 'ENU=No recipients have been defined for group workflow "%1".;ENG=No recipients have been defined for group workflow "%1".';
      FileSystem@1000000027 : Codeunit 9062264;
      SkipWorkflowResponseTable@1000000029 : Boolean;
      EnhFieldMgt@1000000028 : Codeunit 9062298;
      UniVar@1000000030 : Codeunit 9062232;
      tInvalidOption@1000000031 : TextConst 'ENU="""%1"" is not a valid option for the Field %1 in table %2";ENG="""%1"" is not a valid option for the Field %1 in table %2"';
      tRestrictedRecord@9062229 : TextConst 'ENU=The Enhanced Workflow "%1" has restricted this record;ENG=The Enhanced Workflow "%1" has restricted this record';
      tCriteriaNotMatched@9062230 : TextConst 'ENU=Not creating group workflow as the Record "%1" did not match the Criteria "%2";ENG=Not creating group workflow as the Record "%1" did not match the Criteria "%2"';
      apprResponseWorkflow@9062231 : TextConst 'ENU=RESPONSE;ENG=RESPONSE';
      apprApproved@9062232 : TextConst 'ENU=Approved;ENG=Approved';
      apprDenied@9062233 : TextConst 'ENU=Denied;ENG=Denied';
      apprCancel@9062234 : TextConst 'ENU=Cancel;ENG=Cancel';
      apprResponsesExist@9062235 : TextConst 'ENU=Responses already exist for the Workflow %1, do you want them to be replaced?;ENG=Responses already exist for the Workflow %1, do you want them to be replaced?';
      apprCreateEnhancedField@9062236 : TextConst 'ENU=No Status or Approval Status field was found, would you like to create an Enhanced Field?;ENG=No Status or Approval Status field was found, would you like to create an Enhanced Field?';
      apprEnhancedFieldName@9062237 : TextConst 'ENU=Approval Status;ENG=Approval Status';
      apprDecisionFirst@1000000032 : TextConst 'ENU=FIRST;ENG=FIRST';
      chklstResponsesExist@1000000033 : TextConst 'ENU=Responses already exist for the Workflow %1, do you want them to be replaced?;ENG=Responses already exist for the Workflow %1, do you want them to be replaced?';
      chklstDone@1000000034 : TextConst 'ENU=Done;ENG=Done';
      chklstCancel@1000000035 : TextConst 'ENU=Cancel;ENG=Cancel';
      chklstGroupDecisionAll@1000000036 : TextConst 'ENU=ALL;ENG=ALL';
      ResponseWorkflowCreation@1000000037 : Boolean;
      ObjectFieldToolkit@1000000038 : Codeunit 9062343;

    PROCEDURE ModifyWFlowEntry@1000000001() : Boolean;
    VAR
      WFlowsRec@1000000000 : Record 9062266;
    BEGIN
      IF WFlowsRec.READPERMISSION THEN
        EXIT(TRUE);
    END;

    PROCEDURE InsertWFlow@1000000006(WFlowTo@1000000000 : Code[20];WFlowNo@1000000006 : Code[20];PrimKeyCode@1000000001 : Code[250];Description@1000000003 : Text[80];CompleteDateTime@1000000005 : DateTime;Information@1000000013 : Text[250];VAR UniqueReference@1000000014 : Text[100];PrimFilter@1000000024 : Text[250];"Previous Grp WFlow"@1000000027 : Code[20];"Amount Parameter"@1000000031 : Decimal;"Routing Parameter"@1000000034 : Code[100];GroupNo@1000000033 : Code[20];SequenceNo@1000000022 : Integer;AttachmentPath@1000000023 : Text[250];LineType@1000000016 : ' ,Split Decision,Escalation';CC@1000000026 : Boolean;WFlowContactRecLineNo@1000000037 : Integer) OK : Boolean;
    VAR
      TxtNotCreated@1000000039 : TextConst 'ENU=Workflow activity line not created for Contact %1 in Group Workflow %2 as an open Activity Line (%3) already exists;ENG=Workflow activity line not created for Contact %1 in Group Workflow %2 as an open Activity Line (%3) already exists';
      TxtSplitDecision@1000000040 : TextConst 'ENU=SPLIT DECISION: %1 %2;ENG=SPLIT DECISION: %1 %2';
      TxtEscalation@1000000041 : TextConst 'ENU=ESCALATION: %1 %2;ENG=ESCALATION: %1 %2';
      InvalidWFlowType@1000000009 : TextConst 'ENU=The WFlow Type of [%1] could not be found in the WFlow Type table.;ENG=The WFlow Type of [%1] could not be found in the WFlow Type table.';
      WFlow@1000000021 : Record 9062258;
      PreviousGrpWFlowRec@1000000028 : Record 9062265;
      WFlowActivity2@1000000020 : Record 9062266;
      WFlowActivity3@1000000019 : Record 9062266;
      WFlowActivity4@1000000018 : Record 9062266;
      WFlowContact@1000000032 : Record 9062264;
      WFlowNotMgt@1000000012 : Codeunit 9062261;
      AttachmentStr@1000000011 : Text[250];
      BodyStr@1000000010 : Text[1024];
      UrlCode@1000000008 : Text[250];
      BuiltURL@1000000007 : Code[250];
      WFlowSetup@1000000004 : Record 9062229;
      CCName@1000000002 : Text[250];
      Contact@1000000017 : Record 5050;
      Escalated@1000000025 : Boolean;
      WFlowTeam@1000000029 : Record 9062263;
      WFlowTeamContact@1000000030 : Record 5050;
      WFlowHol@1000000035 : Record 9062263;
      GroupHeader@1000000015 : Record 9062265;
      NotificationType@1000000036 : 'E-Mail,PopUp';
      SendToEmail@1000000038 : Text[250];
      TxtNotCreating@1000000042 : TextConst 'ENU=Not creating WFlow Activity Line for Group %1 for Contact %2 as Contact is Originator and Workflow %3 has "Originator is Recipient Action" set to %4;ENG=Not creating WFlow Activity Line for Group %1 for Contact %2 as Contact is Originator and Workflow %3 has "Originator is Recipient Action" set to %4';
      TxtAdvancedWorkflowsDisabled@1000000043 : TextConst 'ENU=Did not create WFlow Notifications as ADVANCED_WORKFLOWS is disabled in System Behaviour table;ENG=Did not create WFlow Notifications as ADVANCED_WORKFLOWS is disabled in System Behaviour table';
      TxtBlankContact@1000000044 : TextConst 'ENU=Did not create WFlow Notifications as the Contact No. given was blank;ENG=Did not create WFlow Notifications as the Contact No. given was blank';
      TxtClosed@1000000045 : TextConst 'ENU=Closed wflow activity line "%1" as WFlow Type "%2" is set to Notification Only;ENG=Closed wflow activity line "%1" as WFlow Type "%2" is set to Notification Only';
      eNoEmail@1000000046 : TextConst 'ENU="Contact ""%1"" doesn''t have an e-mail; workflow notifications can''t be sent.";ENG="Contact ""%1"" doesn''t have an e-mail; workflow notifications can''t be sent."';
    BEGIN
      //If there's no matching WFlow Type, insert an error record and exit...
      IF NOT IsWFlowActive(WFlowNo) THEN EXIT(FALSE);

      WFlowActivity2.SETRANGE("Group Workflow No.",GroupNo);
      WFlowActivity2.SETRANGE("Contact No.",WFlowTo);
      WFlowActivity2.SETRANGE(Status,WFlowActivity2.Status::Open);
      IF WFlowActivity2.FINDSET THEN BEGIN
        Logger.Log('WFLOWMGT', Logger.Type::Warning, STRSUBSTNO(TxtNotCreated, WFlowTo, GroupNo, WFlowActivity2."GUID No."), USERID);
        EXIT(FALSE);
      END;
      WFlowActivity2.RESET;

      WFlowActivity2.INIT;

      IF NOT WFlow.GET(WFlowNo) THEN BEGIN
        WFlowActivity2."Workflow No." := '';
        WFlowActivity2."Has Error" := TRUE;
        WFlowActivity2."Error Description" := FORMAT(CURRENTDATETIME) + ' - ' + InvalidWFlowType;
        WFlowActivity2."GUID No." := CREATEGUID;
        WFlowActivity2.INSERT(TRUE);
        EXIT(FALSE);
      END;

      //Populate the main fields of the WFlows table...
      WFlowActivity2."GUID No." := CREATEGUID;
      WFlowActivity2.Status := WFlowActivity2.Status::Open;
      WFlowActivity2."Workflow Description" := WFlow.Description;
      WFlowActivity2."Get Position Text" := PrimFilter;
      WFlowActivity2."Attachment Path" := AttachmentPath;

      UniqueReference := WFlowActivity2."GUID No.";
      WFlowActivity2."Workflow No." := WFlowNo;
      WFlowActivity2."Primary Code" := PrimKeyCode;

      SplitPrimaryCode(WFlowActivity2);

      IF COPYSTR(Description, 1, 1) = '+' THEN BEGIN
        Description := COPYSTR(Description, 2);
        WFlowActivity2."Action Required" := WFlow."Default Action Text" + ' ' + Description
      END ELSE
        WFlowActivity2."Action Required" := Description;

      IF Description = '' THEN
          WFlowActivity2."Action Required" := WFlow."Default Action Text";

      WFlowActivity2."Raised DateTime" := CURRENTDATETIME;

      WFlowActivity2."Complete By DateTime" := CompleteDateTime;

      IF LineType = LineType::"Split Decision" THEN
        WFlowActivity2."Information Text" := STRSUBSTNO(TxtSplitDecision, WFlow."Information Text", Information);

      IF LineType = LineType::Escalation THEN
        WFlowActivity2."Information Text" := STRSUBSTNO(TxtEscalation, WFlow."Information Text", Information);

      IF LineType = LineType::" " THEN
        WFlowActivity2."Information Text" := Information;

      WFlowActivity2."Table Id" := 0;
      WFlowActivity2."Field Id"  := 0;
      WFlowActivity2."Get Position Text" := PrimFilter;

      WFlowActivity2."Group Workflow No." := GroupNo;
      WFlowActivity2."Routing Parameter" := "Routing Parameter";
      WFlowActivity2."Amount Parameter" := "Amount Parameter";
      WFlowActivity2.Sequence := SequenceNo;

      IF NOT GroupHeader.GET(GroupNo) THEN ERROR(Text008);
      WFlowActivity2."Email Record Links as Attach." := GroupHeader."Email Record Links as Attach.";
      WFlowActivity2."DOCS Entry ID to Send" := GroupHeader."DOCS Entry ID to Send";
      WFlowActivity2."Email HTML Param 1" := GroupHeader."Email HTML Param 1";
      WFlowActivity2."Email HTML Param 2" := GroupHeader."Email HTML Param 2";
      WFlowActivity2."Email HTML Param 3" := GroupHeader."Email HTML Param 3";
      WFlowActivity2."Email HTML Param 4" := GroupHeader."Email HTML Param 4";
      WFlowActivity2."Email HTML Param 5" := GroupHeader."Email HTML Param 5";
      WFlowActivity2."Workflow Grouping 1" := GroupHeader."Workflow Grouping 1";
      WFlowActivity2."Workflow Grouping 2" := GroupHeader."Workflow Grouping 2";
      WFlowActivity2."Include Weekends" := GroupHeader."Include Weekends";
      WFlowActivity2."Work Day Starts" := GroupHeader."Work Day Starts";
      WFlowActivity2."Work Day Ends" := GroupHeader."Work Day Ends";
      WFlowActivity2."Est. Duration" := GroupHeader."Est. Duration";
      WFlowActivity2."Auto Response" := GroupHeader."Auto Response";
      WFlowActivity2.Originator := GroupHeader.Originator;
      WFlowActivity2.Nudged := GroupHeader.Nudged;
      WFlowActivity2.CC := CC;
      WFlowActivity2."Table Id" := GroupHeader."Table ID";
      WFlowActivity2."Page ID" := GroupHeader."Page ID";
      WFlowActivity2."Company Name" := GroupHeader."Company Name";
      WFlowActivity2."Notification Only" := GroupHeader."Notification Only";
      WFlowActivity2."Checklist Type" := GroupHeader."Checklist Type"; //DOC NA2016.10 PC
      WFlowActivity2."Checklist Code" := GroupHeader."Checklist Code"; //DOC NA2016.10 PC

      //In case WFlowTo is a User or Person code find the contact no.
      WFlowTo := FindContact(WFlowTo);

      IF GroupHeader.Originator = WFlowTo THEN BEGIN
        IF WFlow."Originator is Recipient Action" = WFlow."Originator is Recipient Action"::"Don't Ask" THEN BEGIN
          Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtNotCreating, GroupHeader."No.", WFlowTo, WFlow."No.", WFlow."Originator is Recipient Action"),
            GroupHeader.Originator);
          EXIT(FALSE);
        END;
      END;

      //WFlow holidays
      IF SysB.GetBoolean('ADVANCED_WORKFLOWS') THEN BEGIN
        //Set WFlow holiday filters to be for this user and apply to this date
        WFlowHol.SETFILTER("From Date",'..%1',TODAY);
        WFlowHol.SETFILTER("To Date",'%1..',TODAY);
        WFlowHol.SETFILTER("Contact No.",WFlowTo);

        //If WFlow holiday exists for this user and WFlow no then use
        WFlowHol.SETRANGE("Workflow No.",WFlowNo);
        IF WFlowHol.FINDSET THEN BEGIN
          IF WFlowHol."Do Not Workflow" THEN EXIT(FALSE);
          IF WFlowHol."Forward to Contact No." <> '' THEN BEGIN
            WFlowActivity4.SETRANGE("Group Workflow No.",GroupNo);
            WFlowActivity4.SETRANGE("Contact No.",WFlowHol."Forward to Contact No.");
            WFlowActivity4.SETRANGE(Status,WFlowActivity4.Status::Open);
            IF NOT WFlowActivity4.FINDSET THEN BEGIN
              EXIT(InsertWFlow(WFlowHol."Forward to Contact No.",WFlowNo,PrimKeyCode,Description,CompleteDateTime
              ,Information,UniqueReference,PrimFilter
              ,"Previous Grp WFlow","Amount Parameter","Routing Parameter",GroupNo
              ,SequenceNo,AttachmentPath,LineType,CC,0));
            END ELSE
              EXIT(FALSE);
          END;
        END ELSE BEGIN
        //If WFlow holiday exists for the user with a blank WFlow no then use
          WFlowHol.SETRANGE("Workflow No.",'');
          IF WFlowHol.FINDSET THEN BEGIN
            IF WFlowHol."Do Not Workflow" THEN EXIT(FALSE);
            IF WFlowHol."Forward to Contact No." <> '' THEN BEGIN
              WFlowActivity4.SETRANGE("Group Workflow No.",GroupNo);
              WFlowActivity4.SETRANGE("Contact No.",WFlowHol."Forward to Contact No.");
              WFlowActivity4.SETRANGE(Status,WFlowActivity4.Status::Open);
              IF NOT WFlowActivity4.FINDSET THEN BEGIN
                EXIT(InsertWFlow(WFlowHol."Forward to Contact No.",WFlowNo,PrimKeyCode,Description,CompleteDateTime
                ,Information,UniqueReference,PrimFilter
                ,"Previous Grp WFlow","Amount Parameter","Routing Parameter",GroupNo
                ,SequenceNo,AttachmentPath,LineType,CC,0));
              END ELSE
                EXIT(FALSE);
            END;
          END;
        END;
      END;
      //WFlow holidays

      IF "Previous Grp WFlow" <> '' THEN
        BEGIN
          PreviousGrpWFlowRec.GET("Previous Grp WFlow");
          WFlowActivity2."Action Required" := COPYSTR(WFlowActivity2."Action Required" + ' ' + PreviousGrpWFlowRec.Response,1,250);
          WFlowActivity2."Previous Workflow" := "Previous Grp WFlow";
        END;

      WFlowActivity2.VALIDATE("Contact No.", WFlowTo);

      //Workflow Licence Check
      IF (WFlowActivity2."Contact No." <> '') AND SysB.GetBoolean('ADVANCED_WORKFLOWS') THEN BEGIN

        IF WFlowContactRecLineNo <> 0 THEN BEGIN
          WFlowContact.GET(WFlowNo,WFlowContactRecLineNo);
          IF WFlowContact."E-mail Notification" THEN BEGIN
            Contact.GET(WFlowContact."Contact No.");
            SendToEmail := Contact."E-Mail";
            IF (SendToEmail = '') THEN
              Logger.Log('WFLOWMGT', Logger.Type::Error, STRSUBSTNO(eNoEmail, WFlowContact."Contact No."), USERID);
          END;
        END ELSE BEGIN
          Contact.GET(WFlowActivity2."Contact No.");
          SendToEmail := Contact."E-Mail";
          IF (SendToEmail = '') THEN
            Logger.Log('WFLOWMGT', Logger.Type::Warning, STRSUBSTNO(eNoEmail, Contact."No."), USERID);
        END;

        IF SendToEmail <> '' THEN BEGIN
          WFlowNotMgt.InsertNewMessage(SendToEmail,'',
                COPYSTR(WFlowActivity2."Workflow Description" + ' : ' + WFlowActivity2."Information Text",1,250) //DOC PC NA2015.1 03/04/2014
                ,BodyStr,WFlowNo,UniqueReference,WFlowActivity2."Email Record Links as Attach.",
                WFlowActivity2."Primary Code",NotificationType::"E-Mail",WFlowActivity2."DOCS Entry ID to Send");
        END;

        IF WFlow."Send Popup Notification" THEN BEGIN
          WFlowNotMgt.InsertNewMessage(WFlowActivity2."Contact No.",'',
              WFlow.Description,COPYSTR(WFlowActivity2."Workflow Description" + ' : ' + WFlowActivity2."Information Text",1,250) //DOC PC NA2015.1 03/04/2014
              ,WFlowNo,UniqueReference,WFlowActivity2."Email Record Links as Attach.",
              WFlowActivity2."Primary Code",NotificationType::PopUp,WFlowActivity2."DOCS Entry ID to Send");
        END;
      END ELSE BEGIN
        IF NOT SysB.GetBoolean('ADVANCED_WORKFLOWS') THEN
          Logger.Log('WFLOWMGT', Logger.Type::Warning, TxtAdvancedWorkflowsDisabled, USERID)
        ELSE
          Logger.Log('WFLOWMGT', Logger.Type::Warning, TxtBlankContact, USERID)
      END;
      WFlowActivity2.INSERT(TRUE);

      // Call the Additional Code (This may be empty and have nothing to do)
      IF SysB.GetBoolean('ADVANCED_WORKFLOWS') THEN
        IF (WFlow."Insert Logic Codeunit ID" <> 0) THEN
          CODEUNIT.RUN(WFlow."Insert Logic Codeunit ID",WFlowActivity2);

      IF WFlowActivity2."Notification Only" THEN BEGIN
        WFlowActivity2.Status := WFlowActivity2.Status::Closed;
        WFlowActivity2.MODIFY;
        Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtClosed, WFlowActivity2."GUID No.", WFlowActivity2."Workflow No."), USERID);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE OpenForm@1000000004(P_UrlCode@1000000000 : Code[250]);
    BEGIN
      HYPERLINK(P_UrlCode);
    END;

    PROCEDURE ReplaceDollar@1000000002(VAR PassedText@1000000000 : Text[250];PrimKeyStr@1000000003 : Text[100]);
    VAR
      SearchCode@1000000001 : Code[2];
      TempKeyCode@1000000004 : Text[100];
      i@1000000002 : Integer;
      DelimiterPos@1000000005 : Integer;
    BEGIN
      //This takes a PassedText in with $ in and replaces the $'s with the primary key information from the action record
      IF PassedText = '' THEN
        EXIT;
      SearchCode := '$';
      IF STRPOS(PassedText,SearchCode) = 0 THEN
        EXIT;

      i:=1;
      SearchCode := '$1';
      REPEAT
        DelimiterPos := STRPOS(PrimKeyStr,'+');
        IF DelimiterPos <> 0 THEN BEGIN
          TempKeyCode := COPYSTR(PrimKeyStr,1,DelimiterPos-1);  //copy first part of Primkeystr up to '+'
          PrimKeyStr := COPYSTR(PrimKeyStr,DelimiterPos+1);     //Cut out first Part of Primkeystr up to and including '+'
        END ELSE
          TempKeyCode := PrimKeyStr;

      //replace $i with primary key code
        PassedText := COPYSTR(PassedText,1,STRPOS(PassedText,SearchCode)) +    //Bit of Passedtext up to $i
                   TempKeyCode +
                   COPYSTR(PassedText,STRPOS(PassedText,SearchCode) + STRLEN(SearchCode)); //Bit of Passedtext after $i
        i+=1;
        SearchCode := '$' + FORMAT(i);
      UNTIL STRPOS(PassedText,SearchCode) = 0;

      PassedText := DELCHR(PassedText, '<>','$');
      PassedText := DELCHR(PassedText, '=','$');
    END;

    PROCEDURE CalcIfOverDue@1000000010(VAR P_WFlow@1000000000 : Record 9062266);
    VAR
      WFlowType@1000000001 : Record 9062258;
      NoOfDays@1000000002 : Duration;
      OverWeekend@1000000004 : Boolean;
      DTClosed@1000000005 : DateTime;
      DTComplete@1000000006 : DateTime;
    BEGIN
      DTClosed := P_WFlow."Closed DateTime";
      DTComplete := P_WFlow."Complete By DateTime";
    END;

    PROCEDURE CalcTimeTaken@1000000013(VAR P_WFlow@1000000000 : Record 9062266);
    VAR
      RaisedDT@1000000001 : DateTime;
      ClosedDT@1000000002 : DateTime;
    BEGIN
      ClosedDT := P_WFlow."Closed DateTime";
      RaisedDT := P_WFlow."Raised DateTime";
      P_WFlow."Time Taken to Complete" := ClosedDT - RaisedDT;
    END;

    PROCEDURE IsWFlowActive@1000000014(WFlowNo@1000000001 : Code[20]) : Boolean;
    VAR
      WFlow@1000000000 : Record 9062258;
      WFlowSetup@1000000003 : Record 9062229;
    BEGIN
      //IsWFlowActive
      WFlowSetup.GET;
      IF WFlowSetup."Enable Workflows" = TRUE THEN BEGIN
          IF WFlow.GET(WFlowNo) THEN BEGIN
            IF WFlow.Enabled = TRUE THEN
              EXIT(TRUE)
          END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsNormalField@12(TableNumber@1001 : Integer;FieldNumber@1002 : Integer) : Boolean;
    VAR
      Field@1000 : Record 2000000041;
    BEGIN
      //IsNormalField

      GetField(TableNumber,FieldNumber,Field);
      EXIT(Field.Class = TempField.Class::Normal);
    END;

    LOCAL PROCEDURE HasValue@10(Value@1000 : Variant) : Boolean;
    VAR
      HasValue@1001 : Boolean;
      Int@1002 : Integer;
      Dec@1003 : Decimal;
      D@1007 : Date;
      T@1008 : Time;
    BEGIN
      //HasValue
      CASE TRUE OF
        Value.ISBOOLEAN :
          HasValue := Value;
        Value.ISOPTION :
          HasValue := TRUE;
        Value.ISINTEGER :
          BEGIN
            Int := Value;
            HasValue := Int <> 0;
          END;
        Value.ISDECIMAL :
          BEGIN
            Dec := Value;
            HasValue := Dec <> 0;
          END;
        Value.ISDATE :
          BEGIN
            D := Value;
            HasValue := D <> 0D;
          END;
        Value.ISTIME :
          BEGIN
            T := Value;
            HasValue := T <> 0T;
          END;
        Value.ISBINARY :
          HasValue := FALSE;
        ELSE
          HasValue := FORMAT(Value) <> '';
      END;
      EXIT(HasValue);
    END;

    LOCAL PROCEDURE GetField@7(TableNumber@1001 : Integer;FieldNumber@1002 : Integer;VAR Field2@1003 : Record 2000000041);
    VAR
      Field@1000 : Record 2000000041;
    BEGIN
      //GetField

      IF NOT TempField.GET(TableNumber,FieldNumber) THEN BEGIN
        Field.GET(TableNumber,FieldNumber);
        TempField := Field;
        TempField.INSERT;
      END;
      Field2 := TempField;
    END;

    PROCEDURE ImportAttachment@1000000018(WFlow@1000000007 : Record 9062258);
    VAR
      FilePathName@1000000005 : Text[250];
      TmpString@1000000000 : Text[250];
      i@1000000001 : Integer;
      DestFilePath@1000000002 : Text[250];
    BEGIN
      //ImportAttachment

      CLEAR(FilePathName);
      CLEAR(TmpString);
      FileSystem.UploadWithInteraction(FileSystem.Client(), '', DestFilePath, '', FilePathName);
      IF FilePathName = '' THEN
        EXIT;

      TmpString := FilePathName;
      REPEAT
        CLEAR(i);
        i := STRPOS(TmpString, '\');
        IF i <> 0 THEN
          TmpString := DELSTR(TmpString, 1, i);
      UNTIL i =0;

      //Gets File Name - Start at the begin of the string and delete all char before each \ till the file name is left
      IF WFlow."Attached File" =  FALSE THEN BEGIN
        WFlow."Attachment File Name" := TmpString;
        WFlow."Attached File" := TRUE;
        WFlow.Attachment.IMPORT(FilePathName);
        WFlow.MODIFY(TRUE);
      END;
    END;

    PROCEDURE RemoveAttachment@1000000019(WFlow@1000000007 : Record 9062258);
    BEGIN
      //RemoveAttachment

      IF WFlow."Attached File" =  TRUE THEN BEGIN
        CLEAR(WFlow.Attachment);
        WFlow."Attached File" := FALSE;
        WFlow."Attachment File Name" := '';
        WFlow.MODIFY(TRUE);
      END;
    END;

    PROCEDURE FindContact@1000000020(WFlowTo@1000000000 : Code[50]) : Code[20];
    VAR
      Contact@1000000001 : Record 5050;
      nAblementUser@1000000002 : Record 9062729;
    BEGIN
      //It's already a contact
      IF (Contact.GET(COPYSTR(WFlowTo, 1, MAXSTRLEN(Contact."No.")))) THEN
        EXIT(Contact."No.");

      //Maybe it is salesperson?
      nAblementUser.RESET();
      nAblementUser.SETCURRENTKEY("Salesperson/Purchaser Code");
      nAblementUser.SETRANGE("Salesperson/Purchaser Code", COPYSTR(WFlowTo, 1, MAXSTRLEN(nAblementUser."Salesperson/Purchaser Code")));
      IF (nAblementUser.FINDFIRST()) THEN
        EXIT(nAblementUser."Contact No.");

      //Maybe it is a vendor?
      nAblementUser.RESET();
      nAblementUser.SETCURRENTKEY("Vendor No.");
      nAblementUser.SETRANGE("Vendor No.", COPYSTR(WFlowTo, 1, MAXSTRLEN(nAblementUser."Vendor No.")));
      IF (nAblementUser.FINDFIRST()) THEN
        EXIT(nAblementUser."Contact No.");

      //Or maybe a resource?
      nAblementUser.RESET();
      nAblementUser.SETCURRENTKEY("Resource No.");
      nAblementUser.SETRANGE("Resource No.", COPYSTR(WFlowTo, 1, MAXSTRLEN(nAblementUser."Resource No.")));
      IF (nAblementUser.FINDFIRST()) THEN
        EXIT(nAblementUser."Contact No.");

      //Or maybe an employee?
      nAblementUser.RESET();
      nAblementUser.SETCURRENTKEY("Employee No.");
      nAblementUser.SETRANGE("Employee No.", COPYSTR(WFlowTo, 1, MAXSTRLEN(nAblementUser."Employee No.")));
      IF (nAblementUser.FINDFIRST()) THEN
        EXIT(nAblementUser."Contact No.");

      //Maybe it is just a user
      IF (nAblementUser.GET(COPYSTR(WFlowTo, 1, MAXSTRLEN(nAblementUser."User ID")))) THEN
        EXIT(nAblementUser."Contact No.");

      EXIT('');
    END;

    PROCEDURE FindContact_FromEmail@1000000030(EmailAdd@1000000000 : Text[250]) : Code[20];
    VAR
      Contact@1000000001 : Record 5050;
    BEGIN
      Contact.SETCURRENTKEY("E-Mail");
      Contact.SETRANGE("E-Mail", COPYSTR(EmailAdd, 1, MAXSTRLEN(Contact."E-Mail")));
      IF Contact.FINDSET THEN
        EXIT(Contact."No.")
      ELSE
        EXIT('');
    END;

    PROCEDURE ProcessWFlowResponseFieldTable@1000000025(WFlowResponse@1000000000 : Record 9062259;GroupWFlowHeader@1000000015 : Record 9062265);
    VAR
      PrimaryKeyText@1000000013 : Text[250];
      WFlow@1000000012 : Record 9062258;
      RecRef@1000000010 : RecordRef;
      FldRef@1000000009 : FieldRef;
      PrimVal@1000000008 : Text[250];
      Int@1000000007 : Integer;
      Dec@1000000006 : Decimal;
      VariantVal@1000000005 : Variant;
      Customer@1000000004 : Record 18;
      FieldValue@1000000003 : Text[250];
      nAblementUser@1000000002 : Record 9062729;
      HighestSequence@1000000001 : Integer;
      BooVal@1000000014 : Boolean;
      eSettingField@1000000011 : TextConst 'ENU=Setting "%1"."%2" field to %3;ENG=Setting "%1"."%2" field to %3';
      i@1000000016 : Integer;
      EnhFieldMgt@1000000017 : Codeunit 9062298;
      eSettingEnhancedField@1000000018 : TextConst 'ENU=Setting "%1"."%2" enhanced field to %3;ENG=Setting "%1"."%2" enhanced field to %3';
    BEGIN
      //Process the the Field/Table update based on the WFlow Response Record

      IF (SkipWorkflowResponseTable) THEN
        EXIT;

      FieldValue := WFlowResponse."Field Value";   //Use the Value from the Response

      nAblementUser.GET(TNLUtils.CurrentUser);
      IF WFlowResponse."Update Field with" > 0 THEN  //Check if should override the Value with the User
        CASE WFlowResponse."Update Field with" OF
          WFlowResponse."Update Field with"::"User ID":
            FieldValue := TNLUtils.CurrentUser;
          WFlowResponse."Update Field with"::"Contact No":
              IF nAblementUser."Contact No." <> '' THEN
                FieldValue := nAblementUser."Contact No." ELSE
                ERROR(TNLUtils.CurrentUser + Text002);
          WFlowResponse."Update Field with"::Person:
              IF nAblementUser."Salesperson/Purchaser Code" <> '' THEN
                FieldValue := nAblementUser."Salesperson/Purchaser Code" ELSE
                ERROR(TNLUtils.CurrentUser + Text003);
          WFlowResponse."Update Field with"::"Response Value":
            FieldValue := GroupWFlowHeader.Response;
          WFlowResponse."Update Field with"::"Field Value" :
            BEGIN
              RecRef.OPEN(WFlowResponse."Table ID",FALSE, COMPANYNAME);
              RecRef.SETPOSITION(GroupWFlowHeader."Get Position Text");
              RecRef.GET(RecRef.RECORDID);

              FieldValue := EnhFieldMgt.GetFieldValue(RecRef,WFlowResponse."Use Field Name");
              RecRef.CLOSE;
            END;
        END;

      IF WFlowResponse."Field Type" = WFlowResponse."Field Type"::Field THEN BEGIN

        RecRef.OPEN(WFlowResponse."Table ID",FALSE, COMPANYNAME);
        RecRef.SETPOSITION(GroupWFlowHeader."Get Position Text");

        RecRef.GET(RecRef.RECORDID);
        FldRef := RecRef.FIELD(WFlowResponse."Field ID");

        Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(eSettingField, RecRef.CAPTION, FldRef.CAPTION, FieldValue), USERID);
        TNLUtils.SetFieldValueFromText(FldRef,FieldValue,TRUE);

        RecRef := FldRef.RECORD;

        RecRef.MODIFY(TRUE);
        RecRef.CLOSE;
      END ELSE BEGIN
        Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(eSettingField, ObjectFieldToolkit.GetTableName(WFlowResponse."Table ID"),
          EnhFieldMgt.GetFieldName(WFlowResponse."Table ID", WFlowResponse."Field ID"), FieldValue), USERID);
        EnhFieldMgt.SetFieldValue(WFlowResponse."Table ID",WFlowResponse."Field ID",GroupWFlowHeader."Get Position Text",COPYSTR(FieldValue,1,250));
      END;
    END;

    PROCEDURE SplitPrimaryCode@1000000026(VAR ActivityLines2@1000000001 : Record 9062266);
    VAR
      PrimaryKeyCodeIn@1000000000 : Text[250];
      NextSeperatorPos@1000000002 : Integer;
    BEGIN
      ActivityLines2."Primary Code Field 1" := '';
      ActivityLines2."Primary Code Field 2" := '';
      ActivityLines2."Primary Code Field 3" := '';
      ActivityLines2."Primary Code Field 4" := '';

      PrimaryKeyCodeIn := ActivityLines2."Primary Code";

      IF STRPOS(PrimaryKeyCodeIn,'+') = 0 THEN BEGIN
        ActivityLines2."Primary Code Field 1" := PrimaryKeyCodeIn;
        EXIT;
      END ELSE BEGIN
        NextSeperatorPos := STRPOS(PrimaryKeyCodeIn,'+');
        ActivityLines2."Primary Code Field 1" := COPYSTR(PrimaryKeyCodeIn,1,NextSeperatorPos-1);
        PrimaryKeyCodeIn := COPYSTR(PrimaryKeyCodeIn,NextSeperatorPos+1,STRLEN(PrimaryKeyCodeIn));
      END;

      IF STRPOS(PrimaryKeyCodeIn,'+') = 0 THEN BEGIN
        ActivityLines2."Primary Code Field 2" := PrimaryKeyCodeIn;
        EXIT;
      END ELSE BEGIN
        NextSeperatorPos := STRPOS(PrimaryKeyCodeIn,'+');
        ActivityLines2."Primary Code Field 2" := COPYSTR(PrimaryKeyCodeIn,1,NextSeperatorPos-1);
        PrimaryKeyCodeIn := COPYSTR(PrimaryKeyCodeIn,NextSeperatorPos+1,STRLEN(PrimaryKeyCodeIn));
      END;

      IF STRPOS(PrimaryKeyCodeIn,'+') = 0 THEN BEGIN
        ActivityLines2."Primary Code Field 3" := PrimaryKeyCodeIn;
        EXIT;
      END ELSE BEGIN
        NextSeperatorPos := STRPOS(PrimaryKeyCodeIn,'+');
        ActivityLines2."Primary Code Field 3" := COPYSTR(PrimaryKeyCodeIn,1,NextSeperatorPos-1);
        PrimaryKeyCodeIn := COPYSTR(PrimaryKeyCodeIn,NextSeperatorPos+1,STRLEN(PrimaryKeyCodeIn));
      END;

      IF STRPOS(PrimaryKeyCodeIn,'+') = 0 THEN BEGIN
        ActivityLines2."Primary Code Field 4" := COPYSTR(PrimaryKeyCodeIn,1,20); //Only Copy 20 chars from remaining as field is Text 20
        EXIT;
      END ELSE BEGIN
        NextSeperatorPos := STRPOS(PrimaryKeyCodeIn,'+');
        ActivityLines2."Primary Code Field 4" := COPYSTR(PrimaryKeyCodeIn,1,NextSeperatorPos-1);
        PrimaryKeyCodeIn := COPYSTR(PrimaryKeyCodeIn,NextSeperatorPos+1,STRLEN(PrimaryKeyCodeIn));
      END;
    END;

    PROCEDURE AllowedToRespond@1000000027(pWFlowResponseUser@1000000000 : Code[50];pWFlowAssignedTo@1000000002 : Code[50]);
    VAR
      WFlowResponseContact@1000000001 : Code[20];
      WFlowAssignedContact@1000000003 : Code[20];
      WFlowTeamMember@1000000004 : Record 9062263;
    BEGIN
      IF UPPERCASE(SysB.GetText('AUTONAV_USER')) = UPPERCASE(USERID) THEN EXIT;

      WFlowResponseContact := FindContact(pWFlowResponseUser);
      WFlowAssignedContact := FindContact(pWFlowAssignedTo);

      WFlowTeamMember.SETRANGE("Contact No.", WFlowAssignedContact);
      WFlowTeamMember.SETRANGE("Workflow No.", WFlowResponseContact);
      IF NOT WFlowTeamMember.FINDFIRST THEN BEGIN
        IF WFlowResponseContact <> WFlowAssignedContact THEN
          ERROR(TNL001,WFlowResponseContact);
      END;
    END;

    PROCEDURE CalcGroupResponse@1000000029(WFlowActivityLine@1000000000 : Record 9062266) Response : Code[10];
    VAR
      GroupHeader@1000000001 : Record 9062265;
      WFlowActivityLines@1000000002 : Record 9062266;
      WFlowType@1000000003 : Record 9062258;
      WFlowResponse@1000000004 : Record 9062259;
      WFlowResponses@1000000005 : Record 9062259;
      CountOfResponse@1000000007 : Integer;
      "No. Responses"@1000000008 : Integer;
      "Resp. Required"@1000000006 : Integer;
      TxtWorkflowNotFound@1000000009 : TextConst 'ENU=WFlow No. %1 not found;ENG=WFlow No. %1 not found';
      TxtWorkflowResponseNotFound@1000000010 : TextConst 'ENU=WFlow Response %1 for WFlow %2 not found;ENG=WFlow Response %1 for WFlow %2 not found';
      NoActivityLines@1000000011 : Integer;
    BEGIN
      //Get the WFlow type and see how we decide when the WFlow 'decision' has been made
      IF NOT(WFlowType.GET(WFlowActivityLine."Workflow No.")) THEN ERROR(TxtWorkflowNotFound,WFlowActivityLine."Workflow No.");

      //Get the WFlow response
      IF NOT(WFlowResponse.GET(WFlowActivityLine."Workflow No.",WFlowActivityLine.Response)) THEN
        ERROR(TxtWorkflowResponseNotFound,WFlowActivityLine.Response,WFlowActivityLine."Workflow No.");

      //If Split Decision response then use it
      IF WFlowActivityLine."Line Type" = WFlowActivityLine."Line Type"::"Split Decision" THEN
        EXIT(WFlowActivityLine.Response);

      //Calc how many responses are required
      WFlowActivityLines.SETFILTER("Group Workflow No.",WFlowActivityLine."Group Workflow No.");

      WFlowActivityLines.SETRANGE(Sequence,WFlowActivityLine.Sequence);

      IF WFlowType."All Responses Required" THEN
        "Resp. Required" := WFlowActivityLines.COUNT
      ELSE BEGIN
        IF WFlowActivityLines.COUNT < WFlowType."Min. Responses Required" THEN
          "Resp. Required" := WFlowActivityLines.COUNT
        ELSE
          "Resp. Required" := WFlowType."Min. Responses Required";
      END;

      WFlowActivityLines.SETFILTER(Abstained,'<>%1',TRUE);

      //Return the first response given
      CASE WFlowType."Group Decision Method" OF
        'ALL' :
        BEGIN
          WFlowActivityLines.SETFILTER(Abstained,'<>%1',TRUE);
          "Resp. Required" := WFlowActivityLines.COUNT;

          WFlowActivityLines.SETFILTER("GUID No.",'<>%1',WFlowActivityLine."GUID No.");
          WFlowActivityLines.SETFILTER(Response,'<>%1','');
          "No. Responses" := WFlowActivityLines.COUNT + 1;
          IF "No. Responses" = "Resp. Required" THEN
            EXIT(WFlowResponse.Code);
        END;

        'FIRST' :
          BEGIN
            EXIT(WFlowResponse.Code)
          END;

        //if we're looking for a majority decision then
        // - look at WFlow type and see how many answers we need
        // - if we dont have enough answers yet then return empty string and exit
        // - if this one has met our min resp number then see if we have a majority decision (one response is given over 50%)
        // - if no majority then return default response
        'MAJORITY' :
          BEGIN
            WFlowActivityLines.SETFILTER("GUID No.",'<>%1',WFlowActivityLine."GUID No.");
            WFlowActivityLines.SETFILTER(Abstained,'%1',FALSE);
            WFlowActivityLines.SETFILTER(Response,'<>%1','');
            WFlowActivityLines.SETFILTER(CC,'%1',FALSE);
            "No. Responses" := WFlowActivityLines.COUNT + 1; //Number of Responses Given

            WFlowActivityLines.SETFILTER("GUID No.",'<>%1',WFlowActivityLine."GUID No.");
            WFlowActivityLines.SETFILTER(Abstained,'%1',FALSE);
            WFlowActivityLines.SETFILTER(CC,'%1',FALSE);
            NoActivityLines := WFlowActivityLines.COUNT; //Number of Contacts asked

            IF "No. Responses" >= "Resp. Required" THEN BEGIN
              WFlowResponses.SETRANGE("Workflow No.",WFlowActivityLine."Workflow No.");
              IF WFlowResponses.FINDFIRST THEN BEGIN
                REPEAT
                  CountOfResponse := 0;
                  WFlowActivityLines.SETFILTER(Response,WFlowResponses.Code);
                  IF WFlowActivityLines.FINDFIRST THEN BEGIN
                    REPEAT
                      CountOfResponse := CountOfResponse + 1;
                    UNTIL WFlowActivityLines.NEXT = 0;
                  END;
                  IF WFlowActivityLine.Response = WFlowResponses.Code THEN BEGIN
                    CountOfResponse := CountOfResponse + 1;
                  END;

                  IF CountOfResponse > (NoActivityLines / 2) THEN //This Answer has reach a majority
                    EXIT(WFlowResponses.Code);

                  IF (CountOfResponse = (NoActivityLines / 2)) AND ("No. Responses" = NoActivityLines) THEN //Everyone has responded and this answer has half the votes
                    EXIT('!SPLIT!');

                UNTIL WFlowResponses.NEXT = 0;
              END;
            END ELSE EXIT('');
          END;

          //If the response is negative, then use that. If not, check if we've had enough responses,
          //if so then return the response code
          'ONE NEGATIVE' :
          BEGIN
            "Resp. Required" := WFlowActivityLines.COUNT;
            IF WFlowResponse."Response Type" = WFlowResponse."Response Type"::Negative THEN
              EXIT(WFlowResponse.Code);

            WFlowActivityLines.SETFILTER("GUID No.",'<>%1',WFlowActivityLine."GUID No.");
            WFlowActivityLines.SETFILTER(Response,'<>%1','');
            "No. Responses" := WFlowActivityLines.COUNT + 1;

            IF "No. Responses" >= "Resp. Required" THEN BEGIN
              IF WFlowActivityLines.FINDFIRST THEN
                EXIT(WFlowActivityLines.Response);
            END ELSE EXIT('');
          END;

          //If the response is positive, then use that. If not, check if we've had enough responses,
          //if so then return the response code
          'ONE POSITIVE' :
          BEGIN
            "Resp. Required" := WFlowActivityLines.COUNT;
            IF WFlowResponse."Response Type" = WFlowResponse."Response Type"::Positive THEN
              EXIT(WFlowResponse.Code);

            WFlowActivityLines.SETFILTER("GUID No.",'<>%1',WFlowActivityLine."GUID No.");
            WFlowActivityLines.SETFILTER(Response,'<>%1','');
            "No. Responses" := WFlowActivityLines.COUNT + 1;

            IF "No. Responses" >= "Resp. Required" THEN BEGIN
              IF WFlowActivityLines.FINDFIRST THEN
                EXIT(WFlowActivityLines.Response);
            END ELSE EXIT('');

          END;

      END;
    END;

    PROCEDURE CreateGroupWFlow@1000000031("WFlow To"@1000000007 : Code[20];"Use Default Contacts"@1000000008 : Boolean;"WFlow No."@1000000000 : Code[20];"Information Text"@1000000009 : Text[250];GetPositionText@1000000003 : Text[100];Amount@1000000004 : Decimal;"Routing Param"@1000000011 : Code[100];"Prev WFlow"@1000000014 : Text[38];SendNow@1000000020 : Boolean) Code : Code[20];
    BEGIN
      EXIT(CreateGroupWFlowFull("WFlow To", "Use Default Contacts", "WFlow No.", "Information Text", GetPositionText, Amount, "Routing Param",
        "Prev WFlow", SendNow, ''));
    END;

    PROCEDURE CreateGroupWFlowFull@1000000045("WFlow To"@1000000007 : Code[20];"Use Default Contacts"@1000000008 : Boolean;"WFlow No."@1000000000 : Code[20];"Information Text"@1000000009 : Text[250];GetPositionText@1000000003 : Text[100];Amount@1000000004 : Decimal;"Routing Param"@1000000011 : Code[100];"Prev WFlow"@1000000014 : Text[38];SendNow@1000000020 : Boolean;Originator@1000000001 : Code[20]) Code : Code[20];
    VAR
      UniqueRef@1000000002 : Text[100];
      GroupHeader@1000000005 : Record 9062265;
      WFlowContacts@1000000006 : Record 9062264;
      SkipContact@1000000010 : Boolean;
      WFlowType@1000000012 : Record 9062258;
      GroupHeader2@1000000015 : Record 9062265;
      WFlowActLines@1000000017 : Record 9062266;
      WFlowResp@1000000018 : Record 9062259;
      PrevWFlowRec@1000000019 : Record 9062265;
      RecRef@1000000021 : RecordRef;
      FieldRef@1000000022 : FieldRef;
      FieldIndex@1000000023 : Integer;
      GotPrevWFlow@1000000024 : Boolean;
      NumWFACt@1000000025 : Integer;
      WFResult@1000000026 : Code[20];
      TxtClosed@1000000013 : TextConst 'ENU=Closed wflow group header %1 as WFlow Type %2 is set to Notification Only;ENG=Closed wflow group header %1 as WFlow Type %2 is set to Notification Only';
      SeqNo@1000000016 : Integer;
      CriteriaManagement@9062229 : Codeunit 9062462;
      nAblementSetup@1000000027 : Record 9062229;
      eDemoMode@1000000028 : TextConst 'ENU=Sending workflow to contact "%1" only as in demo mode;ENG=Sending workflow to contact "%1" only as in demo mode';
      eCreatedGroupWorkflow@1000000029 : TextConst 'ENU=Created group workflow %1 of type %2 for record %3;ENG=Created group workflow %1 of type %2 for record %3';
    BEGIN
      nAblementSetup.GET();
      IF (( NOT (ResponseWorkflowCreation)) AND (USERID() <> nAblementSetup."Auto Response User ID")) THEN
        IF SysB.GetBoolean('WF_DEMO_MODE') THEN BEGIN
          "WFlow To" := TNLUtils.CurrentContact;
          "Use Default Contacts" := FALSE;
          Logger.Log('WFLOWMGT',Logger.Type::Information,STRSUBSTNO(eDemoMode,"WFlow To"),USERID);
        END;

      IF NOT (SysB.GetBoolean('BASIC_WORKFLOWS') OR SysB.GetBoolean('ADVANCED_WORKFLOWS')) THEN BEGIN
        Logger.Log('WFLOWMGT',Logger.Type::Warning,tWorkflowsNotEnabledInSB,USERID);
        EXIT;
      END;

      // Sometime Workflow can be called with nothing to do
      IF "WFlow No." = '' THEN EXIT;

      //If WFlow Type does not exist then error
      IF NOT WFlowType.GET("WFlow No.") THEN BEGIN
        Logger.Log('WFLOWMGT',Logger.Type::Warning,STRSUBSTNO(tUnknownWorkflow,"WFlow No."),USERID);
        EXIT;
      END;

      //If one WFlow only, then check if group header exist and exit if found
      IF WFlowType."One Workflow Only" THEN BEGIN
        CLEAR(GroupHeader2);
        GroupHeader2.RESET;
        GroupHeader2.SETCURRENTKEY("Workflow No.","Primary Key",Status);
        GroupHeader2.SETRANGE("Workflow No.", "WFlow No.");
        GroupHeader2.SETRANGE("Get Position Text",GetPositionText);
        GroupHeader2.SETRANGE(Status,GroupHeader2.Status::Open);
        IF NewTableID <> 0 THEN
          GroupHeader2.SETRANGE("Table ID",NewTableID)
        ELSE
          GroupHeader2.SETRANGE("Table ID",WFlowType."Table ID");

        IF GroupHeader2.FINDSET THEN BEGIN
          //Logger.Log('WFLOWMGT',Logger.Type::Warning,STRSUBSTNO(tOneWorkflowOnly, GroupHeader2."No.", "WFlow No."),USERID);
          EXIT('!ONE_WFLOW_ONLY');
        END;

      END;

      //Check record matches Workflow Criteria
      IF NewTableID <> 0 THEN
        GroupHeader2."Table ID" := NewTableID
      ELSE
        GroupHeader2."Table ID" := WFlowType."Table ID";

      IF (WFlowType."Record Criteria ID" <> 0) AND (WFlowType."Table ID" = GroupHeader2."Table ID") THEN BEGIN
        IF NOT CriteriaManagement.RecordInFilter(WFlowType."Record Criteria ID",GroupHeader2."Table ID",GetPositionText) THEN BEGIN
          WFlowType.CALCFIELDS(WFlowType."Record Criteria Description");
          Logger.Log('WFLOWMGT',Logger.Type::Information,STRSUBSTNO(tCriteriaNotMatched, GetPositionText, WFlowType."Record Criteria Description"),USERID);
          EXIT('!CRITERIA');
        END;
      END;

      //Create the Group WFlow header
      GroupHeader.INIT;
      GroupHeader.INSERT(TRUE);
      Logger.Log('WFLOWMGT', Logger.Type::Information, STRSUBSTNO(eCreatedGroupWorkflow, GroupHeader."No.", "WFlow No.", GetPositionText), USERID);
      GroupHeader."Company Name" := COMPANYNAME;
      GroupHeader."Workflow No." := "WFlow No.";
      GroupHeader."Raised DateTime" := CURRENTDATETIME;
      GroupHeader."Amount Parameter" := Amount;
      GroupHeader."Routing Parameter" := "Routing Param";
      GroupHeader."Workflow Description" := WFlowType.Description;
      GroupHeader."Workflow To" := "WFlow To";
      IF (Originator = '') THEN BEGIN
        Originator := TNLUtils.CurrentContact;
        IF Originator = '' THEN Originator := FindContact(TNLUtils.CurrentUser);
      END;
      GroupHeader.Originator := Originator;
      GroupHeader."Use Default Contacts" := "Use Default Contacts";
      GroupHeader."Unique Ref" := UniqueRef;
      GroupHeader."Get Position Text" := GetPositionText;
      GroupHeader."Prev Workflow" := "Prev WFlow";
      GotPrevWFlow := FALSE;
      IF "Prev WFlow" <> '' THEN BEGIN
        PrevWFlowRec.GET("Prev WFlow");
        GotPrevWFlow := TRUE;
      END;

      GroupHeader."Email Record Links as Attach." := WFlowType."Email Record Links as Attach.";
      GroupHeader."DOCS Entry ID to Send" := WFlowType."DOCS Entry ID to Send";
      GroupHeader."Is Hold Workflow" := WFlowType."Is Hold Workflow";
      GroupHeader."Auto Response" := WFlowType."Auto Response";
      GroupHeader."Notification Only" := WFlowType."Notification Only";
      IF NewTableID <> 0 THEN
        GroupHeader."Table ID" := NewTableID
      ELSE BEGIN
        IF GotPrevWFlow AND (WFlowType."Table ID" = 0) THEN
          GroupHeader."Table ID" := PrevWFlowRec."Table ID"
        ELSE
          GroupHeader."Table ID" := WFlowType."Table ID";
      END;
      IF NewPageID <> 0 THEN
        GroupHeader."Page ID" := NewPageID
      ELSE BEGIN
        IF GotPrevWFlow AND (WFlowType."Page ID" = 0) THEN
          GroupHeader."Page ID" := PrevWFlowRec."Page ID"
        ELSE
          GroupHeader."Page ID" := WFlowType."Page ID";
      END;

      GroupHeader.VALIDATE("Get Position Text",GroupHeader."Get Position Text");

      GroupHeader."Workflow Grouping 1" := WFlowType."Workflow Grouping 1";
      GroupHeader."Workflow Grouping 2" := WFlowType."Workflow Grouping 2";
      GroupHeader."Include Weekends" := WFlowType."Include Weekends";
      GroupHeader."Work Day Starts" := WFlowType."Work Day Starts";
      GroupHeader."Work Day Ends" := WFlowType."Work Day Ends";
      GroupHeader."Est. Duration" := WFlowType."Est. Duration";
      GroupHeader."Complete By DateTime" := CalcDueDateTime(CURRENTDATETIME,
                                                            WFlowType."Est. Duration",
                                                            WFlowType."Work Day Starts",
                                                            WFlowType."Work Day Ends",
                                                            WFlowType."Include Weekends");

      GroupHeader."Record No." := TNLUtils.GetRecordNo(GroupHeader."Table ID", GetPositionText);

      IF "Prev WFlow" <> '' THEN BEGIN
        PrevWFlowRec.GET("Prev WFlow");
        IF ((STRPOS(PrevWFlowRec."Information Text", "Information Text") = 0) AND
            (STRPOS("Information Text", PrevWFlowRec."Information Text") = 0)) THEN
          GroupHeader."Information Text" := PrevWFlowRec."Information Text" + "Information Text"
        ELSE
          GroupHeader."Information Text" := "Information Text";
      END ELSE
        GroupHeader."Information Text" := "Information Text";

      //DOC NA2016.15 PC 11/05/2016 >>>
      IF WFlowType."Jet Report ID" <> 0 THEN
        IF WFlowType."Generate Jet Report" = WFlowType."Generate Jet Report"::Always THEN
          GroupHeader.VALIDATE("Jet Report Status",GroupHeader."Jet Report Status"::Waiting)
        ELSE
          GroupHeader.VALIDATE("Jet Report Status",GroupHeader."Jet Report Status"::"Waiting for Notification");
      //DOC NA2016.15 PC 11/05/2016 <<<

      GroupHeader.MODIFY;

      OnStartActions_Get(GroupHeader);
      OnStartActions_Create(GroupHeader);
      GroupHeader.MODIFY;

      IF SendNow THEN BEGIN
        //If WFlow Type is inactive then do nothing
        IF NOT WFlowType.Enabled THEN BEGIN
          Logger.Log('WFLOWMGT',Logger.Type::Warning,STRSUBSTNO(tWorkflowDisabled, "WFlow No."),USERID);
          WFResult := '!TYPE_DISABLED';
        END ELSE BEGIN
          IF GroupHeader."Workflow To" <> '' THEN
            SeqNo := 1
          ELSE
            SeqNo := GetNextSequence(GroupHeader,0);

          REPEAT
            NumWFACt := SendGroupWFlow(GroupHeader,SeqNo);
            IF NumWFACt = 0 THEN SeqNo := GetNextSequence(GroupHeader,SeqNo);
          UNTIL (NumWFACt <> 0) OR (SeqNo = -1);

          IF NumWFACt > 0 THEN BEGIN
            IF GroupHeader."Notification Only" THEN BEGIN
              GroupHeader.VALIDATE(Status,GroupHeader.Status::Closed);
              GroupHeader.MODIFY;
              Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtClosed, GroupHeader."No.", GroupHeader."Workflow No."), USERID);

              WFResult := '!NOTIF_ONLY';
            END;

            //DOC NA2016.15 PC 20160516 >>>
            OnStartActions_Set(GroupHeader);
            GroupHeader.MODIFY;
            CanIAutoRespond(GroupHeader, GroupHeader.Originator);
            WFResult := GroupHeader."No."; //Now always returns Group Workflow No., not '!AUTO_CLOSED

            //Prevous code left to show original flow
            //IF CanIAutoRespond(GroupHeader, GroupHeader.Originator) THEN
            //  WFResult := '!AUTO_CLOSED'
            //ELSE BEGIN
            //  WFResult := GroupHeader."No.";

            //  //Perform "On Start" actions
            //  OnStartActions_Set(GroupHeader);
            //  GroupHeader.MODIFY;
            //END;
            //DOC NA2016.15 PC 20160516 <<<

          END ELSE BEGIN
            Logger.Log('WFLOWMGT',Logger.Type::Warning,STRSUBSTNO(tNoRecipients, GroupHeader."No."),USERID);
            WFResult := '!NO_RECIPIENTS';
          END;
        END;
        Code := GroupHeader."No.";//DOC NA2016.16 PC 03/06/2016
        HandleResult(GroupHeader,WFResult);
      END;

      //DOC NA2016.16 PC 03/06/2016 >>>
      //EXIT(WFResult);
      EXIT(Code);
      //DOC NA2016.16 PC 03/06/2016 <<<
    END;

    PROCEDURE SendGroupWFlow@1000000028(VAR GroupHeader@1000000000 : Record 9062265;SequenceNo@1000000003 : Integer) LinesCreated : Integer;
    VAR
      WFlowContacts@1000000001 : Record 9062264;
      ActLinesCreated@1000000002 : Integer;
      WFlowSetup@1000000004 : Record 9062229;
      TxtCreating@1000000005 : TextConst 'ENU=Creating WFlow Act Lines for Group WFlow %1;ENG=Creating WFlow Act Lines for Group WFlow %1';
      TxtCreatedForAutoResp@1000000006 : TextConst 'ENU=Created WFlow Act Line for Contact %1 for Group WFlow %2 as is set Auto Response;ENG=Created WFlow Act Line for Contact %1 for Group WFlow %2 as is set Auto Response';
      TxtCreated@1000000007 : TextConst 'ENU=Created WFlow Act Line for Contact %1 for Group WFlow %2 as Contact Specified on insert statement;ENG=Created WFlow Act Line for Contact %1 for Group WFlow %2 as Contact Specified on insert statement';
      TxtUsingDefaultContacts@1000000008 : TextConst 'ENU=Using default contacts for group workflow "%1";ENG=Using default contacts for group workflow "%1"';
      TxtCreatedDefaultContacts@1000000009 : TextConst 'ENU=Created WFlow Act Line for Contact %1 for Group WFlow %2 from Default Contacts;ENG=Created WFlow Act Line for Contact %1 for Group WFlow %2 from Default Contacts';
      TxtNoDefaultContacts@1000000010 : TextConst 'ENU=No Default Contacts found for Group WFlow %1 matching filters: %2;ENG=No Default Contacts found for Group WFlow %1 matching filters: %2';
      WFlowContactTmp@1000000011 : TEMPORARY Record 9062264;
      InsertNow@1000000012 : Boolean;
      TxtCreatedForOrig@1000000013 : TextConst 'ENU=Created WFlow Act Line for Originator Contact %1 for Group WFlow %2 as is Response Workflow;ENG=Created WFlow Act Line for Originator Contact %1 for Group WFlow %2 as is Response Workflow';
    BEGIN
      Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtCreating, GroupHeader."No."), USERID);
      ActLinesCreated := 0;
      WFlowSetup.GET;
      WITH GroupHeader DO BEGIN
        SETFILTER("No.","No.");
        IF "Auto Response" THEN BEGIN
          IF InsertWFlow(WFlowSetup."Auto Response User ID",
                      "Workflow No.",
                      "Primary Key",
                      "Action Required",
                      "Complete By DateTime",
                      "Information Text",
                      "Unique Ref",
                      "Get Position Text",
                      "Prev Workflow",
                      "Amount Parameter",
                      "Routing Parameter",
                      "No.",
                      SequenceNo,
                      "Attachment Path",
                      0,FALSE,0) THEN BEGIN
            ActLinesCreated +=1;
            Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtCreatedForAutoResp, WFlowSetup."Auto Response User ID", GroupHeader."No."), USERID);
          END;
        END;

        IF ("Workflow To" <> '') AND (SequenceNo <= 1) THEN BEGIN   //DOC IH 140812
          IF InsertWFlow("Workflow To",
                      "Workflow No.",
                      "Primary Key",
                      "Action Required",
                      "Complete By DateTime",
                      "Information Text",
                      "Unique Ref",
                      "Get Position Text",
                      "Prev Workflow",
                      "Amount Parameter",
                      "Routing Parameter",
                      "No.",
                      SequenceNo, //Sequence
                      "Attachment Path",
                      0,FALSE,0) THEN BEGIN
            ActLinesCreated +=1;
            Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtCreated, "Workflow To", GroupHeader."No."), USERID);
          END;
        END;

        IF ResponseWorkflowCreation THEN BEGIN
          IF InsertWFlow(GroupHeader.Originator,
                      "Workflow No.",
                      "Primary Key",
                      "Action Required",
                      "Complete By DateTime",
                      "Information Text",
                      "Unique Ref",
                      "Get Position Text",
                      "Prev Workflow",
                      "Amount Parameter",
                      "Routing Parameter",
                      "No.",
                      SequenceNo, //Sequence
                      "Attachment Path",
                      0,FALSE,0) THEN BEGIN
            ActLinesCreated +=1;
            Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtCreatedForOrig, GroupHeader.Originator, GroupHeader."No."), USERID);
          END;
        END;

        IF "Use Default Contacts" THEN BEGIN
          Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtUsingDefaultContacts, GroupHeader."No."), USERID);
          //find out who the WFlows need to go to - based on amount and routing parameter and create an WFlow for each one
          WFlowContacts.RESET;
          WFlowContacts.SETFILTER("Workflow No.","Workflow No.");
          WFlowContacts.SETFILTER(Sequence,'%1',SequenceNo);
          WFlowContacts.SETFILTER("Workflow Amount From",'<=%1',"Amount Parameter");
          WFlowContacts.SETFILTER("Workflow Amount To",'>=%1',"Amount Parameter");
          WFlowContacts.SETFILTER("Contact No.",'<>%1','');

          IF "Routing Parameter" <> '' THEN
          BEGIN
            WFlowContactTmp.RESET();
            WFlowContactTmp.DELETEALL();
            WFlowContactTmp."Routing Parameter" := GroupHeader."Routing Parameter";
            WFlowContactTmp.INSERT();
          END;
          IF WFlowContacts.FINDSET THEN BEGIN
            REPEAT
              IF "Routing Parameter" <> '' THEN
              BEGIN
                IF (WFlowContacts."Routing Parameter" <> '') THEN
                BEGIN
                  WFlowContactTmp.SETFILTER("Routing Parameter", WFlowContacts."Routing Parameter");
                  InsertNow := NOT WFlowContactTmp.ISEMPTY;
                END
                ELSE
                  InsertNow := TRUE;
              END
              ELSE
                InsertNow := TRUE;
              IF (InsertNow) THEN
              BEGIN
                IF InsertWFlow(WFlowContacts."Contact No.","Workflow No.","Primary Key","Action Required","Complete By DateTime",
                          "Information Text","Unique Ref","Get Position Text",
                          "Prev Workflow","Amount Parameter","Routing Parameter","No.",WFlowContacts.Sequence,"Attachment Path",0,
                          WFlowContacts.CC,WFlowContacts."Line No.") THEN
                BEGIN
                  ActLinesCreated +=1;
                  Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtCreatedDefaultContacts, WFlowContacts."Contact No.", GroupHeader."No."), USERID);
                END;
              END;

            UNTIL WFlowContacts.NEXT = 0;
          END ELSE BEGIN
            Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtNoDefaultContacts, GroupHeader."No.", WFlowContacts.GETFILTERS), USERID);
          END;
        END;
      END;

      EXIT(ActLinesCreated);
    END;

    PROCEDURE ProcessResponse@1000000032(WFlowActivityLine@1000000000 : Record 9062266) Close : Boolean;
    VAR
      ResponseCode@1000000001 : Code[10];
      GroupWFlowActivityLine@1000000002 : Record 9062266;
      WFlowResponse@1000000003 : Record 9062259;
      GroupHeader@1000000004 : Record 9062265;
      UniqueRef@1000000005 : Text[100];
      KeepGroupAlive@1000000006 : Boolean;
      WFlowType@1000000007 : Record 9062258;
      NextSeq@1000000008 : Integer;
      TxtWFlowResponseDoesNotExist@1000000009 : TextConst 'ENU=The WFlow response %1 does not exist for %2;ENG=The WFlow response %1 does not exist for %2';
      TxtGroupWFlowDoesNotExist@1000000010 : TextConst 'ENU=The group WFlow does not exist;ENG=The group WFlow does not exist';
      TxtSequence@1000000011 : TextConst 'ENU=Current sequence for group workflow "%1" is %2. Maximal sequence is %3.;ENG=Current sequence for group workflow "%1" is %2. Maximal sequence is %3.';
      TxtProblemFindingSequence@1000000012 : TextConst 'ENU=There was a problem finding the next sequence for group workflow "%1";ENG=There was a problem finding the next sequence for group workflow "%1"';
      CurrSeq@1000000013 : Integer;
      SentWorkflowCounter@1000000014 : Integer;
      eBeforeProcessReturnedFalse@1000000015 : TextConst 'ENU="""Before Process"" of workflow activity ""%1"" returned false so workflow response processing has been cancelled";ENG="""Before Process"" of workflow activity ""%1"" returned false so workflow response processing has been cancelled"';
      lCancel@1000000016 : Boolean;
    BEGIN
      BeforeProcessResponse(WFlowActivityLine, lCancel);
      IF (lCancel) THEN
      BEGIN
        Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(eBeforeProcessReturnedFalse, WFlowActivityLine."Workflow No."), USERID);
        EXIT(FALSE);
      END;

      ResponseCode := CalcGroupResponse(WFlowActivityLine);
      IF ResponseCode = '' THEN EXIT(FALSE);
      IF ResponseCode <> '!SPLIT!' THEN BEGIN
        IF NOT WFlowResponse.GET(WFlowActivityLine."Workflow No.",ResponseCode) THEN
          ERROR(TxtWFlowResponseDoesNotExist,ResponseCode, WFlowActivityLine."Workflow No.");
      END;

      IF NOT GroupHeader.GET(WFlowActivityLine."Group Workflow No.") THEN ERROR(TxtGroupWFlowDoesNotExist);

      WFlowType.GET(WFlowActivityLine."Workflow No.");
      IF NOT ((WFlowResponse."Response Type" = WFlowResponse."Response Type"::Negative) AND
              (WFlowType."Close if Seq. Answer is Neg.")) THEN BEGIN


        GroupHeader.CALCFIELDS("Current Sequence No.","Max Sequence No.");

        //Close Activities in previous sequences before creating new activities >>
        GroupWFlowActivityLine.SETFILTER("Group Workflow No.",GroupHeader."No.");
        GroupWFlowActivityLine.SETFILTER(Response,'');
        GroupWFlowActivityLine.SETFILTER(Status, '<>%1', GroupWFlowActivityLine.Status::Closed);
        GroupWFlowActivityLine.SETFILTER("GUID No.", '<>%1',WFlowActivityLine."GUID No.");
        GroupWFlowActivityLine.SETFILTER(Sequence,'<=%1',GroupHeader."Current Sequence No.");
        IF GroupWFlowActivityLine.FINDFIRST THEN BEGIN
          REPEAT
            GroupWFlowActivityLine.VALIDATE(Status,GroupWFlowActivityLine.Status::Closed);
            GroupWFlowActivityLine."Closed DateTime" := CURRENTDATETIME;
            GroupWFlowActivityLine."Time Taken to Complete" := 0;
            GroupWFlowActivityLine.MODIFY;
          UNTIL GroupWFlowActivityLine.NEXT = 0;
        END;

        Logger.Log('WFLOW', Logger.Type::Debug, STRSUBSTNO(TxtSequence, GroupHeader."No.", GroupHeader."Current Sequence No.", GroupHeader."Max Sequence No."), USERID);
        IF (GroupHeader."Current Sequence No." < GroupHeader."Max Sequence No.") AND (NOT WFlowResponse."Cancelled Response") THEN BEGIN
          CurrSeq := GroupHeader."Current Sequence No.";
          REPEAT
            CurrSeq := GetNextSequence(GroupHeader,CurrSeq);
            IF CurrSeq = -1 THEN ERROR(TxtProblemFindingSequence,GroupHeader."No.");

            SentWorkflowCounter := SendGroupWFlow(GroupHeader,CurrSeq);

            IF (SentWorkflowCounter > 0) THEN
              EXIT(FALSE);

          UNTIL CurrSeq >= GroupHeader."Max Sequence No.";
        END;
      END;

      TakeResponseActions(GroupHeader,ResponseCode,WFlowActivityLine."GUID No.");

      EXIT(TRUE);
    END;

    PROCEDURE TakeResponseActions@1000000044(VAR GroupHeader@1000000000 : Record 9062265;ResponseCode@1000000003 : Code[20];SetByGUID@1000000005 : Text[38]);
    VAR
      WFlowResponse@1000000001 : Record 9062259;
      WFlowType@1000000002 : Record 9062258;
      GroupWFlowActivityLine@1000000004 : Record 9062266;
      TxtWFlowTypeDoesNotExist@1000000006 : TextConst 'ENU=WFlow type %1 does not exist;ENG=WFlow type %1 does not exist';
      TxtResponse@1000000007 : TextConst 'ENU=" - Response: %1";ENG=" - Response: %1"';
      RecRef@9062229 : RecordRef;
      RecordRestrictionMgt@9062230 : Codeunit 1550;
    BEGIN
      //do nothing if no response set
      IF ResponseCode = '' THEN EXIT;

      IF ResponseCode = '!SPLIT!' THEN BEGIN
        AddContactToWFlowGroup(GroupHeader."No.",
                              WFlowType."Split Decision Contact No.",
                              FALSE,
                              GroupWFlowActivityLine."Line Type"::"Split Decision");

        EXIT;
      END;

      //if we've got here then close WFlow group
      GroupHeader.VALIDATE(Response,ResponseCode);
      GroupHeader.Status := GroupHeader.Status::Closed;
      GroupHeader."Closed DateTime" := CURRENTDATETIME;
      GroupHeader."Time Taken to Complete" := CalcTakenDateTime(GroupHeader."Raised DateTime",
                                                                GroupHeader."Closed DateTime",
                                                                GroupHeader."Work Day Starts",
                                                                GroupHeader."Work Day Ends",
                                                                GroupHeader."Include Weekends");
      GroupHeader."SLA Difference" := GroupHeader."Time Taken to Complete" - GroupHeader."Est. Duration";
      GroupHeader.MODIFY;


      WFlowResponse.GET(GroupHeader."Workflow No.",GroupHeader.Response);

      //If we have a response then decision is made - close all activity lines
      GroupWFlowActivityLine.SETFILTER("Group Workflow No.",GroupHeader."No.");
      GroupWFlowActivityLine.SETFILTER(Response,'');
      GroupWFlowActivityLine.SETFILTER(Status, '<>%1', GroupWFlowActivityLine.Status::Closed);
      GroupWFlowActivityLine.SETFILTER("GUID No.", '<>%1',SetByGUID);
      IF GroupWFlowActivityLine.FINDFIRST THEN BEGIN
        REPEAT
          GroupWFlowActivityLine.VALIDATE(Status,GroupWFlowActivityLine.Status::Closed);
          GroupWFlowActivityLine."Closed DateTime" := CURRENTDATETIME;
          GroupWFlowActivityLine."Time Taken to Complete" := 0;
          GroupWFlowActivityLine.MODIFY;
        UNTIL GroupWFlowActivityLine.NEXT = 0;
      END;

      //Get Record Ref
      RecRef.OPEN(GroupHeader."Table ID");
      RecRef.SETPOSITION(GroupHeader."Get Position Text");
      IF RecRef.GET(RecRef.RECORDID) THEN BEGIN
        //Restrict Record
        IF WFlowResponse."Restrict Record" THEN
          RecordRestrictionMgt.RestrictRecordUsage(RecRef.RECORDID,STRSUBSTNO(tRestrictedRecord,GroupHeader."Workflow Description"));

        //Unrestrict Record
        IF WFlowResponse."Unrestrict Record" THEN
          RecordRestrictionMgt.AllowRecordUsage(RecRef.RECORDID);

        //Release Record
        IF WFlowResponse."Release Record" THEN
          ReleaseReopenRecord(RecRef.NUMBER,RecRef.GETPOSITION,TRUE);

        //Reopen Record
        IF WFlowResponse."Reopen Record" THEN
          ReleaseReopenRecord(RecRef.NUMBER,RecRef.GETPOSITION,FALSE);
      END;

      //if has table/field id the make changes
      IF NOT ((WFlowResponse."Table ID" = 0) OR (WFlowResponse."Field ID" = 0)) THEN
      ProcessWFlowResponseFieldTable(WFlowResponse,GroupHeader);

      //if has response WFlow code then create it
      IF NOT UniVar.GetBooleanVar('WF_AUTORESP') THEN BEGIN
        IF WFlowResponse."Response Workflow No." <> '' THEN BEGIN
          WITH GroupHeader DO BEGIN
            ResponseWorkflowCreation := TRUE;
            CreateGroupWFlowFull('', TRUE, WFlowResponse."Response Workflow No.", STRSUBSTNO(TxtResponse, WFlowResponse.Code), //DOC PC NA2016.14 04/03/2016
              "Get Position Text", "Amount Parameter", "Routing Parameter", "No.", TRUE, Originator);
            ResponseWorkflowCreation := FALSE;
          END;
        END;
      END;
      //if has next WFlow no then create it
      IF WFlowResponse."Next Workflow No." <> '' THEN BEGIN
        WITH GroupHeader DO BEGIN
          CreateGroupWFlowFull('', TRUE, WFlowResponse."Next Workflow No.", '',
            "Get Position Text", "Amount Parameter", "Routing Parameter" , "No.", TRUE, Originator);
          END;
      END;


      //Run additional response logic
      IF SysB.GetBoolean('ADVANCED_WORKFLOWS') THEN BEGIN
        IF NOT WFlowType.GET(GroupHeader."Workflow No.") THEN
          ERROR(TxtWFlowTypeDoesNotExist,GroupHeader."Workflow No.");
        IF (WFlowType."Resp. Logic Codeunit ID" <> 0) THEN
          CODEUNIT.RUN(WFlowType."Resp. Logic Codeunit ID",GroupHeader);
      END;
    END;

    PROCEDURE AddContactToWFlowGroup@1000000022(GroupWorkflow@1000000000 : Code[20];ContactNo@1000000001 : Code[20];CloseMyWFlow@1000000007 : Boolean;LineType@1000000008 : ' ,Split Decision,Escalation') OK : Boolean;
    VAR
      GroupHeader@1000000002 : Record 9062265;
      Contact@1000000003 : Record 5050;
      WFlowActLine@1000000004 : Record 9062266;
      WFlowActLine2@1000000005 : Record 9062266;
      NewWFlowGUID@1000000006 : Text[100];
      TxtGroupWflowDoesNotExist@1000000010 : TextConst 'ENU=Group WFlow %1 does not exist;ENG=Group WFlow %1 does not exist';
      TxtWFlowClosed@1000000011 : TextConst 'ENU=Contact cannot be added as Group WFlow %1 is closed;ENG=Contact cannot be added as Group WFlow %1 is closed';
      TxtForwardedTo@1000000009 : TextConst 'ENU=Forwarded to %1;ENG=Forwarded to %1';
      TxtNotTheirWFlow@1000000012 : TextConst 'ENU=Contact cannot be added to Group WFlow %1 as your Contact (%2) is not a recipient of this workflow;ENG=Contact cannot be added to Group WFlow %1 as your Contact (%2) is not a recipient of this workflow';
    BEGIN
      IF NOT GroupHeader.GET(GroupWorkflow) THEN
        ERROR(TxtGroupWflowDoesNotExist,GroupWorkflow);

      WFlowActLine.SETRANGE("Group Workflow No.",GroupHeader."No.");
      WFlowActLine.SETRANGE("Company Name",GroupHeader."Company Name");
      WFlowActLine.SETRANGE("Contact No.",TNLUtils.GetUserContactNo(USERID));
      IF NOT WFlowActLine.FINDFIRST THEN ERROR(TxtNotTheirWFlow,GroupHeader."No.",TNLUtils.GetUserContactNo(USERID));

      IF GroupHeader.Status = GroupHeader.Status::Closed THEN
        ERROR(TxtWFlowClosed,WFlowActLine."Group Workflow No.");

      WFlowActLine2.SETRANGE("Group Workflow No.",WFlowActLine."Group Workflow No.");
      WFlowActLine2.SETRANGE("Contact No.",ContactNo);
      WFlowActLine2.SETRANGE(Status,WFlowActLine2.Status::Open);
      IF NOT WFlowActLine2.FINDSET THEN BEGIN
        IF (InsertWFlow(ContactNo,WFlowActLine."Workflow No.",WFlowActLine."Primary Code",
                  WFlowActLine."Action Required",WFlowActLine."Complete By DateTime"
                  ,WFlowActLine."Information Text",
                  NewWFlowGUID,WFlowActLine."Get Position Text",
                  WFlowActLine."Previous Workflow",WFlowActLine."Amount Parameter",
                  WFlowActLine."Routing Parameter",WFlowActLine."Group Workflow No.",
                  WFlowActLine.Sequence,WFlowActLine."Attachment Path",LineType,FALSE,0)) THEN BEGIN

          IF CloseMyWFlow THEN BEGIN
            WFlowActLine.Response := 'FORWARDED';
            WFlowActLine."Response Value" := STRSUBSTNO(TxtForwardedTo, ContactNo);
            WFlowActLine.Status := WFlowActLine.Status::Closed;
            WFlowActLine.Abstained := TRUE;
            WFlowActLine.MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE GetNextSequence@1000000023(GroupHeader@1000000000 : Record 9062265;CurrSeq@1000000001 : Integer) Seq : Integer;
    VAR
      WFlowContacts@1000000002 : Record 9062264;
      NextSeq@1000000003 : Integer;
    BEGIN
      NextSeq := -1;
      WFlowContacts.SETFILTER("Workflow No.",GroupHeader."Workflow No.");
      WFlowContacts.SETFILTER(Sequence,'>%1',CurrSeq);
      IF WFlowContacts.FINDSET THEN BEGIN
        REPEAT
          IF (NextSeq = -1)  OR (WFlowContacts.Sequence < NextSeq) THEN
            NextSeq := WFlowContacts.Sequence
        UNTIL WFlowContacts.NEXT = 0;
      END;

      EXIT(NextSeq);
    END;

    PROCEDURE GroupParam_EmailLinks@1000000024(GroupCode@1000000000 : Code[10];SendLinks@1000000001 : Boolean);
    VAR
      GroupHeader@1000000002 : Record 9062265;
    BEGIN
      IF NOT GroupHeader.GET(GroupCode) THEN ERROR(Text008);
      IF GroupHeader."Email Record Links as Attach." <> SendLinks THEN BEGIN
        GroupHeader."Email Record Links as Attach." := SendLinks;
        GroupHeader.MODIFY;
      END;
    END;

    PROCEDURE RecordHasHoldWFlow@1000000000(TableID@1000000000 : Integer;"RecordNo."@1000000001 : Code[20]) : Boolean;
    VAR
      WFlowGroup@1000000002 : Record 9062265;
    BEGIN
      WFlowGroup.SETRANGE("Table ID",TableID);
      WFlowGroup.SETRANGE("Record No.","RecordNo.");
      WFlowGroup.SETRANGE(Status,WFlowGroup.Status::Open);

      EXIT(WFlowGroup.FINDSET);
    END;

    PROCEDURE PopulateResponseOption@1000000003("Workflow No."@1000000000 : Code[10];"Resp Code"@1000000008 : Code[10]);
    VAR
      RespOption@1000000001 : Record 9062260;
      RecRef@1000000002 : RecordRef;
      FieldRef@1000000003 : FieldRef;
      WFlow@1000000004 : Record 9062258;
      Resp@1000000005 : Record 9062259;
      i@1000000006 : Integer;
      DateVar@1000000007 : Date;
    BEGIN
      RespOption.SETRANGE("Workflow No.","Workflow No.");
      RespOption.SETRANGE("Response Code","Resp Code");
      IF RespOption.FINDSET THEN RespOption.DELETEALL;

      IF NOT Resp.GET("Workflow No.","Resp Code") THEN EXIT;
      IF Resp."Resp. Option Table ID" = 0 THEN EXIT;
      IF Resp."Resp. Option Value Field ID" = 0 THEN EXIT;
      IF Resp."Resp. Option Desc. Field ID" = 0 THEN EXIT;
      RecRef.OPEN(Resp."Resp. Option Table ID");
      IF RecRef.FINDSET THEN BEGIN
        REPEAT
          RespOption.INIT;
          RespOption.VALIDATE("Workflow No.","Workflow No.");
          RespOption.VALIDATE("Response Code",Resp.Code);
          FieldRef := RecRef.FIELD(Resp."Resp. Option Value Field ID");
          RespOption.VALIDATE(Value,FORMAT(FieldRef.VALUE));
          FieldRef := RecRef.FIELD(Resp."Resp. Option Desc. Field ID");
          RespOption.VALIDATE(Description,FORMAT(FieldRef.VALUE));
          IF NOT RespOption.INSERT THEN;
        UNTIL RecRef.NEXT = 0;
      END;
      RecRef.CLOSE;
    END;

    PROCEDURE PopulateWFlowResponseOption@1000000009("Workflow No."@1000000001 : Code[10]);
    VAR
      wflowresp@1000000000 : Record 9062259;
    BEGIN
      wflowresp.SETRANGE("Workflow No.","Workflow No.");
      IF wflowresp.FINDSET THEN BEGIN
        REPEAT
          PopulateResponseOption("Workflow No.",wflowresp.Code);
        UNTIL wflowresp.NEXT = 0;
      END;
    END;

    PROCEDURE PopulateAllResponseOptions@1000000005();
    VAR
      Resp@1000000000 : Record 9062259;
    BEGIN
      Resp.SETFILTER("Resp. Option Table ID",'<>0');
      Resp.SETFILTER("Resp. Option Value Field ID",'<>0');
      Resp.SETFILTER("Resp. Option Desc. Field ID",'<>0');
      IF Resp.FINDSET THEN BEGIN
        REPEAT
          PopulateResponseOption(Resp."Workflow No.",Resp.Code);
        UNTIL Resp.NEXT = 0;
      END;
    END;

    PROCEDURE CalcDueDateTime@1000000007(dt@1000000000 : DateTime;dur@1000000001 : Duration;perStart@1000000002 : Time;perEnd@1000000003 : Time;incWeekends@1000000004 : Boolean) : DateTime;
    VAR
      result@1000000005 : DateTime;
      rTime@1000000006 : Time;
      rDate@1000000007 : Date;
    BEGIN
      IF dur = 0 THEN EXIT(dt);
      result := dt + dur;
      rTime := DT2TIME(result);
      rDate := DT2DATE(result);
      IF rTime < perStart THEN rTime := perStart;
      IF rTime > perEnd THEN BEGIN
        rTime := perStart + (rTime-perEnd);
        rDate := DT2DATE(result) + 1;
      END;
      result := CREATEDATETIME(rDate,rTime);
      EXIT(result);
    END;

    PROCEDURE CalcTakenDateTime@1000000008(dtStart@1000000000 : DateTime;dtEnd@1000000001 : DateTime;perStart@1000000002 : Time;perEnd@1000000003 : Time;incWeekends@1000000004 : Boolean) : Duration;
    VAR
      dateStarted@1000000005 : Date;
      dateEnded@1000000006 : Date;
      timeStarted@1000000007 : Time;
      timeEnded@1000000008 : Time;
      return@1000000009 : Duration;
      tmpDur@1000000010 : Duration;
      tmpDaysInt@1000000011 : Integer;
      tmpDays@1000000012 : Duration;
      i@1000000013 : Integer;
    BEGIN
      dateStarted := DT2DATE(dtStart);
      dateEnded := DT2DATE(dtEnd);
      timeStarted := DT2TIME(dtStart);
      timeEnded := DT2TIME(dtEnd);

      IF timeEnded < timeStarted THEN BEGIN
        EVALUATE(tmpDur,'24h');
        return := tmpDur - (timeStarted - timeEnded);
      END ELSE
        return := timeEnded - timeStarted;

      i := dateEnded - dateStarted;

      IF i > 0 THEN BEGIN
        REPEAT
          IF incWeekends THEN
            tmpDaysInt += 1
          ELSE
            IF (DATE2DWY(dateEnded-i,1) <> 6) AND
               (DATE2DWY(dateEnded-i,1) <> 7) THEN tmpDaysInt += 1;
          i -= 1;
        UNTIL i = 0;
      END ELSE tmpDaysInt := 0;

      EVALUATE(tmpDays,FORMAT(tmpDaysInt) + 'd');
      return += tmpDays;
      EXIT(return);
    END;

    PROCEDURE CalcTakenDateTime_WFlow@1000000011(wflowactline@1000000000 : Record 9062266;ClosedDateTime@1000000002 : DateTime) : Duration;
    VAR
      m@1000000001 : Codeunit 9062258;
    BEGIN
      WITH wflowactline DO BEGIN
        EXIT(CalcTakenDateTime("Raised DateTime",
                               ClosedDateTime,
                               "Work Day Starts",
                               "Work Day Ends",
                               "Include Weekends"));
      END;
    END;

    PROCEDURE ProcessAutoResponses@1000000012();
    VAR
      GroupWFlow@1000000000 : Record 9062265;
      WFlowAct@1000000001 : Record 9062266;
      WFlowRes@1000000002 : Record 9062259;
      WFlowSetup@1000000003 : Record 9062229;
      nAblementUser@1000000004 : Record 9062729;
    BEGIN
      GroupWFlow.SETFILTER(Status,'%1',GroupWFlow.Status::Open);
      GroupWFlow.SETFILTER("Auto Response",'%1',TRUE);
      IF GroupWFlow.FINDSET THEN BEGIN
        WFlowSetup.GET;
        IF NOT nAblementUser.GET(WFlowSetup."Auto Response User ID") THEN
          ERROR(Text011);
        IF nAblementUser."Contact No." = '' THEN
          ERROR(Text012,nAblementUser."User ID");

        REPEAT
          WFlowAct.SETRANGE("Group Workflow No.",GroupWFlow."No.");
          WFlowAct.SETRANGE("Contact No.",nAblementUser."Contact No.");
          IF NOT WFlowAct.FINDSET THEN ERROR(Text009,GroupWFlow."No.");
          WFlowRes.SETRANGE("Workflow No.",GroupWFlow."Workflow No.");
          WFlowRes.SETFILTER("Auto Response",'%1',TRUE);
          IF NOT WFlowRes.FINDSET THEN ERROR(Text010,GroupWFlow."No.",GroupWFlow."Workflow No.");

          WFlowAct.DontConfirm;
          WFlowAct.SetUserID(nAblementUser."User ID");
          WFlowAct.VALIDATE(Response,WFlowRes.Code);
          WFlowAct.MODIFY;

        UNTIL GroupWFlow.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateWorkflowActFromHoliday@1000000015(WflowHoliday@1000000000 : Record 9062263);
    VAR
      WflowAct@1000000001 : Record 9062266;
      WflowAct2@1000000002 : Record 9062266;
      Counter@1000000003 : Integer;
      TxtRedirected@1000000004 : TextConst 'ENU=%1 Workflow Activity Lines redirected;ENG=%1 Workflow Activity Lines redirected';
    BEGIN
      WflowAct.SETRANGE("Contact No.",WflowHoliday."Contact No.");
      WflowAct.SETRANGE(Status,WflowAct.Status::Open);
      IF WflowHoliday."Workflow No." <> '' THEN
        WflowAct.SETRANGE("Workflow No.",WflowHoliday."Workflow No.");

      IF WflowAct.FINDSET THEN BEGIN
        REPEAT
          IF WflowHoliday."Forward to Contact No." <> '' THEN BEGIN
            AddContactToWFlowGroup(WflowAct."GUID No.",
                                   WflowHoliday."Forward to Contact No.",
                                   TRUE,
                                   0);
            Counter += 1;
          END;
        UNTIL WflowAct.NEXT = 0;
      END;
      MESSAGE(TxtRedirected,Counter);
    END;

    PROCEDURE PreSetParams@1000000016(theTableID@1000000000 : Integer;thePageID@1000000001 : Integer;theFormID@1000000002 : Integer);
    BEGIN
      NewTableID := theTableID;
      NewPageID := thePageID;
      NewFormID := theFormID;
    END;

    PROCEDURE CancelWorkflows@1000000017(pTableId@1000000000 : Integer;pPosition@1000000001 : Text[250];pWorkflowNo@1000000005 : Code[20]);
    VAR
      lGroupWorkflow@1000000002 : Record 9062265;
      lGroupWorkflowToCancel@1000000003 : Record 9062265;
      lWorkflowTmp@1000000004 : TEMPORARY Record 9062258;
    BEGIN
      //DOC NA2015.1 - Cancelling all workflows for the given table ID and position
      //  -> pTableId: The table ID
      //  -> pPosition: Position

      lGroupWorkflow.SETRANGE("Table ID", pTableId);
      lGroupWorkflow.SETRANGE("Get Position Text", pPosition);
      lGroupWorkflow.SETRANGE(Status, lGroupWorkflow.Status::Open);
      IF pWorkflowNo <> '' THEN
        lGroupWorkflow.SETRANGE("Workflow No.",pWorkflowNo);
      IF (lGroupWorkflow.FINDSET(TRUE, TRUE)) THEN
      REPEAT
        lGroupWorkflowToCancel.GET(lGroupWorkflow."No.");
        lGroupWorkflowToCancel.SetSkipWorkflowResponseTable(SkipWorkflowResponseTable);
        lGroupWorkflowToCancel.CancelWFlow();
        lGroupWorkflowToCancel.SetSkipWorkflowResponseTable(FALSE);

        IF ( NOT (lWorkflowTmp.GET(lGroupWorkflow."Workflow No."))) THEN
        BEGIN
          lWorkflowTmp."No." := lGroupWorkflow."Workflow No.";
          lWorkflowTmp.INSERT();
        END;
      UNTIL (lGroupWorkflow.NEXT() = 0);

      lWorkflowTmp.RESET();
      IF (lWorkflowTmp.FINDSET()) THEN
      REPEAT
        SetWorkflowCancelledResponse(lWorkflowTmp."No.", pPosition);
      UNTIL (lWorkflowTmp.NEXT() = 0);
    END;

    PROCEDURE CancelWorkflowsAndSetStatus@1000000052(pTableId@1000000001 : Integer;pPosition@1000000000 : Text[250];pWorkflowNo@1000000002 : Code[20]);
    BEGIN
      //DOC NA2015.1 - Cancelling workflows for the given table ID and position and clering status for the given workflow
      //  -> pTableId: The table ID
      //  -> pPosition: Position
      //  -> pWorkflowNo: Workflow number

      CancelWorkflows(pTableId, pPosition, pWorkflowNo);
      SetWorkflowCancelledResponse(pWorkflowNo, pPosition);
    END;

    PROCEDURE SetWorkflowCancelledResponse@1000000051(pWorkflowNo@1000000000 : Code[20];pPosition@1000000006 : Text) : Boolean;
    VAR
      lWorkflow@1000000005 : Record 9062258;
      lWorkflowResponse@1000000001 : Record 9062259;
      lRecordRef@1000000003 : RecordRef;
      lFieldRef@1000000002 : FieldRef;
      lTnpUtils@1000000004 : Codeunit 9062229;
      lResult@1000000007 : Boolean;
      EnhancedFieldManagement@1000000008 : Codeunit 9062298;
      eWorkflowResponseFieldZero@1000000009 : TextConst 'ENU=Workflow %1 response %2 field is zero.;ENG=Workflow %1 response %2 field is zero.';
    BEGIN
      //DOC NA2015.1 - Setting workflow cancelled response
      //  -> pWorkflowNo: Workflow number
      //  -> pPosition: Position
      //  <- TRUE: Workflow response applied, FALSE: Not

      lResult := FALSE;

      IF ((pWorkflowNo = '') OR (pPosition = '')) THEN
        EXIT(lResult);

      IF ( NOT (lWorkflow.GET(pWorkflowNo))) THEN
        EXIT(lResult);

      IF (lWorkflow."Table ID" = 0) THEN
        EXIT(lResult);

      lWorkflowResponse.RESET();
      lWorkflowResponse.SETRANGE("Workflow No.", pWorkflowNo);
      lWorkflowResponse.SETRANGE("Cancelled Response", TRUE);
      IF (lWorkflowResponse.FINDFIRST()) THEN
        IF (lWorkflowResponse."Field ID" <> 0) THEN
          CASE (lWorkflowResponse."Field Type") OF
            lWorkflowResponse."Field Type"::Field:
              BEGIN
                lRecordRef.OPEN(lWorkflow."Table ID");
                lRecordRef.SETPOSITION(pPosition);
                lRecordRef.SETRECFILTER();
                IF (lRecordRef.FINDFIRST()) THEN
                  IF (lRecordRef.FIELDEXIST(lWorkflowResponse."Field ID")) THEN
                  BEGIN
                    lFieldRef := lRecordRef.FIELD(lWorkflowResponse."Field ID");
                    TNLUtils.SetFieldValueFromText(lFieldRef,lWorkflowResponse."Field Value",TRUE);
                    lRecordRef.MODIFY(TRUE);
                    lResult := TRUE;
                  END;
                lRecordRef.CLOSE();
              END;
            lWorkflowResponse."Field Type"::"Enhanced Field":
              EnhancedFieldManagement.SetFieldValue(lWorkflow."Table ID",lWorkflowResponse."Field ID",pPosition,lWorkflowResponse."Field Value");
          END
        ELSE
          Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(eWorkflowResponseFieldZero, lWorkflowResponse."Workflow No.",
            lWorkflowResponse.Code), USERID());

      EXIT(lResult);
    END;

    PROCEDURE CancelWorkflow@1000000040(pWorkflowNo@1000000000 : Code[20];pPosition@1000000001 : Text[1024]);
    VAR
      lWorkflow@1000000002 : Record 9062258;
    BEGIN
      //DOC NA2015.1 - Canceling a workflow
      //  -> pWorkflowNo: Workflow number
      //  -> pPosition: Position

      IF ( NOT (lWorkflow.GET(pWorkflowNo))) THEN
        EXIT;
      IF (lWorkflow."Table ID" = 0) THEN
        EXIT;

      CancelWorkflows(lWorkflow."Table ID", pPosition, pWorkflowNo);
    END;

    PROCEDURE CancelWorkflowActivityLines@1000000041(VAR pWorkflowActivityLine@1000000000 : Record 9062266;pWithInteraction@1000000002 : Boolean) : Boolean;
    VAR
      lWorkflowActivityLine@1000000001 : Record 9062266;
      xNoLinesToCancel@1000000004 : TextConst 'ENU=There are no lines to cancel.;ENG=There are no lines to cancel.';
      xConfirmation@1000000003 : TextConst 'ENU=Do you want to cancel %1 workflow activity lines?;ENG=Do you want to cancel %1 workflow activity lines?';
      lWorkflowActivityLineTmp@1000000005 : TEMPORARY Record 9062266;
      xFinalMessage@1000000006 : TextConst 'ENU=Workflow activity lines have been cancelled.;ENG=Workflow activity lines have been cancelled.';
    BEGIN
      //DOC NA2015.1 - Canceling workflow activity lines
      //  We use WHILE .. DO loop inside because cancellation function is fired actually on group workflow header
      //  and can affect more than one activity line)
      //  <> pWorkflowActivityLine: The lines to cancel
      //  -> pWithInteraction: With / without user interaction
      //  <- TRUE: Lines cancelled (or no lines to cancel), FALSE: Action cancelled

      pWithInteraction := ((pWithInteraction) AND (GUIALLOWED()));

      // Applying filters and checking if there are lines to cancel
      lWorkflowActivityLine.COPY(pWorkflowActivityLine);
      lWorkflowActivityLine.COPYFILTERS(pWorkflowActivityLine);
      lWorkflowActivityLine.SETFILTER("Workflow No.", '<>''''');
      lWorkflowActivityLine.SETFILTER("Get Position Text", '<>''''');
      IF (lWorkflowActivityLine.ISEMPTY) THEN
        IF (pWithInteraction) THEN
          ERROR(xNoLinesToCancel)
        ELSE
          EXIT(TRUE);

      // Agreeing with user
      IF (pWithInteraction) THEN
        IF ( NOT (CONFIRM(xConfirmation, TRUE, lWorkflowActivityLine.COUNT()))) THEN
          EXIT(FALSE);

      // Collecting all lines in temporary table groupped by workflow & position text
      lWorkflowActivityLineTmp.RESET();
      lWorkflowActivityLineTmp.DELETEALL();
      IF (lWorkflowActivityLine.FINDSET()) THEN
      REPEAT
        lWorkflowActivityLineTmp.SETRANGE("Workflow No.", lWorkflowActivityLine."Workflow No.");
        lWorkflowActivityLineTmp.SETRANGE("Get Position Text", lWorkflowActivityLine."Get Position Text");
        IF (lWorkflowActivityLineTmp.ISEMPTY()) THEN
        BEGIN
          lWorkflowActivityLineTmp := lWorkflowActivityLine;
          lWorkflowActivityLineTmp.INSERT();
        END;
      UNTIL (lWorkflowActivityLine.NEXT() = 0);

      // Cancelling groupped lines
      lWorkflowActivityLineTmp.RESET();
      IF (lWorkflowActivityLineTmp.FINDSET()) THEN
      REPEAT
        pWorkflowActivityLine.GET(lWorkflowActivityLineTmp."GUID No.");
        pWorkflowActivityLine.Cancel();
      UNTIL (lWorkflowActivityLineTmp.NEXT() = 0);

      IF (pWithInteraction) THEN
        MESSAGE(xFinalMessage);

      EXIT(TRUE);
    END;

    PROCEDURE GetJetReport@1000000033(GroupWFlowCode@1000000000 : Code[20];Reload@1000000009 : Boolean) JetPath : Text[250];
    VAR
      WFlow@1000000003 : Record 9062258;
      JetAuto@1000000001 : Record 9062296;
      GroupWFlow@1000000002 : Record 9062265;
      PK1@1000000004 : Text[30];
      PK2@1000000005 : Text[30];
      PK3@1000000006 : Text[30];
      RecRef@1000000007 : RecordRef;
      i@1000000010 : Integer;
      lTempBlob@1000000008 : Record 99008535;
      JetPath2@1000000012 : Text[250];
      TxtCouldntFindReport@1000000013 : TextConst 'ENU=Couldn''t find report %1;ENG=Couldn''t find report %1';
    BEGIN
      GroupWFlow.GET(GroupWFlowCode);
      WFlow.GET(GroupWFlow."Workflow No.");
      IF WFlow."Jet Report ID" =0 THEN EXIT('');
      IF NOT JetAuto.GET(WFlow."Jet Report ID") THEN ERROR(TxtCouldntFindReport,WFlow."Jet Report ID");
      GroupWFlow.CALCFIELDS("Jet Report BLOB");
      IF (GroupWFlow."Jet Report BLOB".HASVALUE) AND (NOT Reload) THEN BEGIN
        i := 0;
        REPEAT
          i +=1 ;
          JetPath := TEMPORARYPATH + FORMAT(i) + '\' + GroupWFlow."Jet Report Filename";
        UNTIL NOT FileSystem.FileExists(FileSystem.Client(), JetPath);
        FileSystem.CreateFolderStructure(FileSystem.Client(), TEMPORARYPATH + FORMAT(i));
        JetPath := GroupWFlow."Jet Report BLOB".EXPORT(JetPath);
        EXIT(JetPath);
      END ELSE BEGIN
        IF GroupWFlow."Jet Report BLOB".HASVALUE THEN BEGIN
          CLEAR(GroupWFlow."Jet Report BLOB");
          GroupWFlow."Jet Report Filename" := '';
          GroupWFlow.MODIFY;
        END;
        JetPath := JetAuto.QuickRun(JetAuto."Short Code",
                         JetAuto."Output Folder Path",
                         JetAuto."Output File Name",
                         '',
                         WFlow."Jet Report Parameter 1",
                         GetPrimaryKey(GroupWFlow."No.",1),
                         WFlow."Jet Report Parameter 2",
                         GetPrimaryKey(GroupWFlow."No.",2),
                         WFlow."Jet Report Parameter 3",
                         GetPrimaryKey(GroupWFlow."No.",3),TRUE);
        IF COPYSTR(JetPath,1,1) = '!' THEN BEGIN
          EXIT('');
        END ELSE BEGIN
          FileSystem.ImportFileToBlobSilent(FileSystem.Client(), JetPath, lTempBlob);
          GroupWFlow."Jet Report BLOB" := lTempBlob.Blob;
          GroupWFlow."Jet Report Filename" := FileSystem.GetFileName(FileSystem.Client(),JetPath); //DOC PC 050413
          GroupWFlow.VALIDATE("Jet Report Status",GroupWFlow."Jet Report Status"::Generated); //DOC NA2016.15 PC 11/05/2016
          GroupWFlow.MODIFY;
          EXIT(JetPath);
        END;
      END;
    END;

    PROCEDURE GetPrimaryKey@1000000036(GroupWFlowCode@1000000000 : Code[20];KeyNum@1000000001 : Integer) KeyValue : Text[30];
    VAR
      GroupWFlow@1000000003 : Record 9062265;
      RecRef@1000000002 : RecordRef;
      FieldRef@1000000004 : FieldRef;
      KeyRef@1000000005 : KeyRef;
    BEGIN
      GroupWFlow.GET(GroupWFlowCode);
      RecRef.OPEN(GroupWFlow."Table ID");
      RecRef.SETPOSITION(GroupWFlow."Get Position Text");

      KeyRef := RecRef.KEYINDEX(1);
      IF KeyRef.FIELDCOUNT < KeyNum THEN EXIT('');
      FieldRef := KeyRef.FIELDINDEX(KeyNum);
      EXIT(FORMAT(FieldRef.VALUE));
    END;

    PROCEDURE ProcessResponseViaWS@1000000034(CompanyName@1000000006 : Text[250];WFlowGUID@1000000000 : GUID;Response@1000000001 : Code[20];ResponseVal@1000000004 : Text[1024]) OK : Boolean;
    VAR
      xmldoc@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      WSMgmt@1000000003 : Codeunit 9062246;
      WSAdd@1000000005 : Text[1024];
    BEGIN
      WSAdd := WSMgmt.GetWSAddress(CompanyName);
      IF WSMgmt.WSCall(WSAdd,
           'RespondToWorkflow',
           'urn:microsoft-dynamics-schemas/codeunit/WorkflowService',
           '<gUID>' + FORMAT(WFlowGUID) + '</gUID>' +
           '<response>' + Response + '</response>' +
           '<responseText>' + ResponseVal + '</responseText>',
           xmldoc) THEN BEGIN

        EXIT(WSMgmt.WSGetReturnValue(xmldoc,'return_value') = 'true');

      END ELSE EXIT(FALSE);
    END;

    PROCEDURE CanIAutoRespond@1000000035(VAR GroupWFlow@1000000000 : Record 9062265;ContactNo@1000000001 : Code[20]) : Boolean;
    VAR
      WFlow@1000000004 : Record 9062258;
      WFActLine@1000000002 : Record 9062266;
      WFResp@1000000003 : Record 9062259;
      AutoAnswer@1000000005 : Boolean;
      AutoAnswerPositive@1000000006 : Boolean;
      TxtCheckingAutoRespond@1000000007 : TextConst 'ENU=Checking AutoRespond for Contact %1 for GrpWFlow %2;ENG=Checking AutoRespond for Contact %1 for GrpWFlow %2';
      TxtFoundActLine@1000000008 : TextConst 'ENU=Found WFlow Act Line for Contact %1 for GrpWFlow %2;ENG=Found WFlow Act Line for Contact %1 for GrpWFlow %2';
      TxtFoundAutoResponse@1000000009 : TextConst 'ENU=Found AutoResponse Response for WFlow Type %1;ENG=Found AutoResponse Response for WFlow Type %1';
      TxtNoAutoResponse@1000000010 : TextConst 'ENU=No AutoRepsonse Response found for WFlow Type %1;ENG=No AutoRepsonse Response found for WFlow Type %1';
      TxtNoActLine@1000000011 : TextConst 'ENU=No WFlow Act Line found for Contact %1 for GrpWFlow %2;ENG=No WFlow Act Line found for Contact %1 for GrpWFlow %2';
    BEGIN
      Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtCheckingAutoRespond, ContactNo, GroupWFlow."No."), ContactNo);
      WFActLine.SETRANGE("Group Workflow No.",GroupWFlow."No.");
      WFActLine.SETRANGE("Contact No.",ContactNo);
      IF WFActLine.FINDSET THEN BEGIN
        Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtFoundActLine, ContactNo, GroupWFlow."No."), ContactNo);
        WFlow.GET(GroupWFlow."Workflow No.");
        CASE WFlow."Originator is Recipient Action" OF
          WFlow."Originator is Recipient Action"::"Ask Anyway" : EXIT(FALSE);
          WFlow."Originator is Recipient Action"::"Don't Ask" :; //Should never get here
          WFlow."Originator is Recipient Action"::"Answer Positive" :
            BEGIN
              AutoAnswer := TRUE;
              AutoAnswerPositive := TRUE;
            END;
          WFlow."Originator is Recipient Action"::"Answer Negative" :
          BEGIN
            AutoAnswer := TRUE;
            AutoAnswerPositive := FALSE;
          END;

        END;

        IF AutoAnswer THEN BEGIN
          WFResp.SETRANGE("Workflow No.",WFActLine."Workflow No.");
          IF AutoAnswerPositive THEN
            WFResp.SETRANGE("Response Type",WFResp."Response Type"::Positive)
          ELSE
            WFResp.SETRANGE("Response Type",WFResp."Response Type"::Negative);
          WFResp.SETRANGE("Update Field with",0,4);
          IF WFResp.FINDSET THEN BEGIN
            Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtFoundAutoResponse, WFActLine."Workflow No."), USERID);
            UniVar.SetSingleUse(TRUE);
            UniVar.SetBooleanVar('WF_AUTORESP', TRUE);
            WFActLine.SetUserID(ContactNo);
            WFActLine.DontConfirm;
            WFActLine.VALIDATE(Response,WFResp.Code);
            WFActLine.ProcessResponse;
            EXIT(TRUE);
          END ELSE BEGIN
            Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtNoAutoResponse, WFActLine."Workflow No."), USERID);
            EXIT(FALSE);
          END;
        END;
      END ELSE BEGIN
        Logger.Log('WFLOWMGT', Logger.Type::Debug, STRSUBSTNO(TxtNoActLine, ContactNo, GroupWFlow."No."), ContactNo);
        EXIT(FALSE);
      END;
    END;

    PROCEDURE CopyWorkflow@1000000038(pSourceWorkflowNo@1000000000 : Code[20];pDestinationWorkflowNo@1000000001 : Code[20];pWithInteraction@1000000002 : Boolean) : Boolean;
    VAR
      xEmptySourceWorkflowNo@1000000003 : TextConst 'ENU=Empty source workflow no.;ENG=Empty source workflow no.';
      xEmptyDestinationWorkflowNo@1000000004 : TextConst 'ENU=Empty destination workflow no.;ENG=Empty destination workflow no.';
      xCantBeCopiedToItself@1000000005 : TextConst 'ENU=Workflow "%1" can''t be copied to itself.;ENG=Workflow "%1" can''t be copied to itself.';
      lSourceWorkflow@1000000006 : Record 9062258;
      lSourceWorkflowContact@1000000009 : Record 9062264;
      lSourceWorkflowResponse@1000000011 : Record 9062259;
      lDestinationWorkflow@1000000007 : Record 9062258;
      xDestinationWorkflowExistsAlready@1000000008 : TextConst 'ENU=Destination workflow (%1) exists already.;ENG=Destination workflow (%1) exists already.';
      lDestinationWorkflowContact@1000000010 : Record 9062264;
      lDestinationWorkflowResponse@1000000012 : Record 9062259;
      xFinalMessage@1000000013 : TextConst 'ENU=Workflow "%1" has been copied to "%2".;ENG=Workflow "%1" has been copied to "%2".';
      lCopyWorkflow@1000000014 : Page 9062296;
    BEGIN
      //DOC NA2015.1 - Copying a workflow
      //  -> pSourceWorkflowNo: Source workflow number
      //  -> pDestinationWorkflowNo: Destination workflow number
      //  -> pWithInteraction: With / without interaction
      //  <- TRUE: Copied, FALSE: Cancelled

      pWithInteraction := ((pWithInteraction) AND (GUIALLOWED()));
      IF (pWithInteraction) THEN
      BEGIN
        CLEAR(lCopyWorkflow);
        lCopyWorkflow.Set(pSourceWorkflowNo);
        IF (lCopyWorkflow.RUNMODAL() <> ACTION::OK) THEN
          EXIT(FALSE);
        lCopyWorkflow.Get(pDestinationWorkflowNo);
      END;

      IF (pSourceWorkflowNo = '') THEN
        ERROR(xEmptySourceWorkflowNo);
      IF (pDestinationWorkflowNo = '') THEN
        ERROR(xEmptyDestinationWorkflowNo);
      IF (pSourceWorkflowNo = pDestinationWorkflowNo) THEN
        ERROR(xCantBeCopiedToItself, pSourceWorkflowNo);
      IF (lDestinationWorkflow.GET(pDestinationWorkflowNo)) THEN
        ERROR(xDestinationWorkflowExistsAlready, pDestinationWorkflowNo);

      lSourceWorkflow.GET(pSourceWorkflowNo);
      lDestinationWorkflow := lSourceWorkflow;
      lDestinationWorkflow.VALIDATE("No.", pDestinationWorkflowNo);
      lDestinationWorkflow.INSERT(TRUE);

      lDestinationWorkflow.VALIDATE("Workflow Type",lSourceWorkflow."Workflow Type");
      lDestinationWorkflow.MODIFY(TRUE);

      lSourceWorkflowContact.RESET();
      lSourceWorkflowContact.SETRANGE("Workflow No.", pSourceWorkflowNo);
      IF (lSourceWorkflowContact.FINDSET()) THEN
      REPEAT
        IF ( NOT (lDestinationWorkflowContact.GET(pDestinationWorkflowNo, lSourceWorkflowContact."Line No."))) THEN
        BEGIN
          lDestinationWorkflowContact := lSourceWorkflowContact;
          lDestinationWorkflowContact.VALIDATE("Workflow No.", pDestinationWorkflowNo);
          lDestinationWorkflowContact.INSERT(TRUE);
        END;
      UNTIL (lSourceWorkflowContact.NEXT() = 0);

      lSourceWorkflowResponse.RESET();
      lSourceWorkflowResponse.SETRANGE("Workflow No.", pSourceWorkflowNo);
      IF (lSourceWorkflowResponse.FINDSET()) THEN
      REPEAT
        lDestinationWorkflowResponse := lSourceWorkflowResponse;
        lDestinationWorkflowResponse.VALIDATE("Workflow No.", pDestinationWorkflowNo);
        lDestinationWorkflowResponse.INSERT(TRUE);
      UNTIL (lSourceWorkflowResponse.NEXT() = 0);

      IF (pWithInteraction) THEN
        MESSAGE(xFinalMessage, pSourceWorkflowNo, pDestinationWorkflowNo);

      EXIT(TRUE);
    END;

    PROCEDURE GetAutoNavLogEntry@1000000039(VAR pAutoNavLogEntry@1000000000 : Record 9062280);
    BEGIN
      //DOC NA2015.1 - Returning AutoNAV Log Entry variable
      //  <> pAutoNavLogEntry: Target variable

      pAutoNavLogEntry := Logger;
    END;

    PROCEDURE SetSkipWorkflowResponseTable@1000000042(pSkipWorkflowResponseTable@1000000000 : Boolean);
    BEGIN
      //DOC NA2015.1 - Flag to skip workflow response table
      //  -> pSkipWorkflowResponseTable: The flag

      SkipWorkflowResponseTable := pSkipWorkflowResponseTable;
    END;

    PROCEDURE HandleResult@1000000043(VAR GrpWFlowHeader@1000000000 : Record 9062265;ResultCode@1000000002 : Code[20]);
    VAR
      WFlow@1000000001 : Record 9062258;
    BEGIN
      WFlow.GET(GrpWFlowHeader."Workflow No.");

      CASE ResultCode OF
        '!NO_RECIPIENTS' :
          BEGIN
            CASE WFlow."OnErr: No Recipients" OF
              WFlow."OnErr: No Recipients"::"Do Nothing" : ;
              WFlow."OnErr: No Recipients"::"Use Response" : TakeResponseActions(GrpWFlowHeader,WFlow."OnErr: No Recipients Resp.",'');
              WFlow."OnErr: No Recipients"::Error : ERROR(WFlow."OnErr: No Recipients Err. Msg");
            END;
          END;
        '!TYPE_DISABLED' :
          BEGIN
            CASE WFlow."OnErr: WFlow Disabled" OF
              WFlow."OnErr: WFlow Disabled"::"Do Nothing" : ;
              WFlow."OnErr: WFlow Disabled"::"Use Response" : TakeResponseActions(GrpWFlowHeader,WFlow."OnErr: WFlow Disabled Resp.",'');
              WFlow."OnErr: WFlow Disabled"::Error : ERROR(WFlow."OnErr: WFlow Disabled Err. Msg");
            END;
          END;
        '!CHECKLIST' :
          BEGIN
            TakeResponseActions(GrpWFlowHeader,chklstDone,'');
          END;
      END;
    END;

    PROCEDURE OnStartActions_Set@1000000046(GroupWFlow@1000000000 : Record 9062265);
    VAR
      WFlowType@1000000003 : Record 9062258;
      RecRef@1000000004 : RecordRef;
      FldRef@1000000005 : FieldRef;
      Dec@1000000008 : Decimal;
      Int@1000000009 : Integer;
      VariantVal@1000000010 : Variant;
      BooVal@1000000011 : Boolean;
      FieldValue@1000000001 : Text;
    BEGIN
      WFlowType.GET(GroupWFlow."Workflow No.");
      IF WFlowType."Table ID" <> GroupWFlow."Table ID" THEN EXIT;

      //Get the RecRef >>
      RecRef.OPEN(GroupWFlow."Table ID");
      RecRef.SETPOSITION(GroupWFlow."Get Position Text");
      IF NOT RecRef.GET(RecRef.RECORDID) THEN EXIT;
      //Get the RecRef <<

      //Set Field Value >>
      CASE WFlowType."On Start Set Field Value Type" OF
        WFlowType."On Start Set Field Value Type"::Hardcoded : FieldValue := WFlowType."On Start Set Field Value";
        WFlowType."On Start Set Field Value Type"::"Today's Date" : FieldValue := FORMAT(TODAY);
        WFlowType."On Start Set Field Value Type"::"Current User ID" : FieldValue := TNLUtils.CurrentUser; //DOC NA2015.3
      END;

      IF FieldValue <> '' THEN BEGIN
        IF WFlowType."On Start Set Field Type" = WFlowType."On Start Set Field Type"::Field THEN BEGIN
          IF WFlowType."On Start Set Field No." = 0 THEN EXIT;
          FldRef := RecRef.FIELD(WFlowType."On Start Set Field No.");

          TNLUtils.SetFieldValueFromText(FldRef,FieldValue,TRUE);
          RecRef.MODIFY(TRUE);
        END ELSE BEGIN
          EnhFieldMgt.SetFieldValue(GroupWFlow."Table ID",WFlowType."On Start Set Field No.",GroupWFlow."Get Position Text",FieldValue);
        END;
      END;
      //Set Field Value <<
    END;

    PROCEDURE OnStartActions_Get@1000000050(VAR GroupWFlow@1000000000 : Record 9062265);
    VAR
      WFlowType@1000000001 : Record 9062258;
      RecRef@1000000002 : RecordRef;
      FieldRef@1000000003 : FieldRef;
      RecordRestrictionMgt@9062229 : Codeunit 1550;
    BEGIN
      WFlowType.GET(GroupWFlow."Workflow No.");
      IF WFlowType."Table ID" <> GroupWFlow."Table ID" THEN EXIT;

      //Release Record >>
      IF WFlowType."On Start Release Record" THEN BEGIN
        ReleaseReopenRecord(GroupWFlow."Table ID",GroupWFlow."Get Position Text",TRUE);
      END;
      //Release Record <<

      //Get the RecRef >>
      RecRef.OPEN(GroupWFlow."Table ID");
      RecRef.SETPOSITION(GroupWFlow."Get Position Text");
      IF NOT RecRef.GET(RecRef.RECORDID) THEN EXIT;
      //Get the RecRef <<

      //Restrict Record >>
      IF WFlowType."On Start Restrict Record" THEN //DOC NA2016.16 PC 03/06/2016
        RecordRestrictionMgt.RestrictRecordUsage(RecRef.RECORDID,STRSUBSTNO(tRestrictedRecord,GroupWFlow."Workflow Description"));
      //Restrict Record <<

      //Get Amount Param >>
      IF (GroupWFlow."Amount Parameter" = 0) AND (WFlowType."On Start Amount Field No." <> 0) THEN
        EVALUATE(GroupWFlow."Amount Parameter",EnhFieldMgt.GetFieldValue(RecRef,WFlowType."On Start Amount Field Name"));
      //Get Amount Param <<

      //Get Routing Param >>
      IF (GroupWFlow."Routing Parameter" = '') AND (WFlowType."On Start Routing Field No." <> 0) THEN
        GroupWFlow."Routing Parameter" := EnhFieldMgt.GetFieldValue(RecRef,WFlowType."On Start Routing Field Name");
      //Get Routing Param <<

      //Get InfoText >>
      IF (GroupWFlow."Information Text" = '') AND ((WFlowType."On Start InfoText Field No." <> 0) OR (WFlowType."On Start InfoText Concat Def." <> '')) THEN BEGIN
        CASE WFlowType."On Start InfoText Field Type" OF
          WFlowType."On Start InfoText Field Type"::Field :
            BEGIN
              FieldRef := RecRef.FIELD(WFlowType."On Start InfoText Field No.");
              GroupWFlow."Information Text" := COPYSTR(FORMAT(FieldRef.VALUE),1,MAXSTRLEN(GroupWFlow."Information Text"));  //DOC PC NA2015.2
            END;
          WFlowType."On Start InfoText Field Type"::"Enhanced Field" :
            BEGIN
              GroupWFlow."Information Text" := COPYSTR(EnhFieldMgt.GetFieldValue(RecRef,WFlowType."On Start InfoText Field Name"),1,MAXSTRLEN(GroupWFlow."Information Text")); //DOC PC NA2015.2
            END;
          WFlowType."On Start InfoText Field Type"::"Concatenated Fields" :
            BEGIN
              GroupWFlow."Information Text" := COPYSTR(TNLUtils.ConcatenateFieldValues(WFlowType."On Start InfoText Concat Def.",RecRef),1,MAXSTRLEN(GroupWFlow."Information Text"));
            END;
        END;
      END;
      //Get InfoText <<

      //Set Workflow To >>
      IF (GroupWFlow."Workflow To" = '') AND (WFlowType."On Start Person Field No." <> 0) THEN BEGIN
        CASE WFlowType."On Start Person Field Type" OF
          WFlowType."On Start Person Field Type"::Field :
            BEGIN
              FieldRef := RecRef.FIELD(WFlowType."On Start Person Field No.");
              GroupWFlow."Workflow To" := FORMAT(FieldRef.VALUE);
            END;
          WFlowType."On Start Person Field Type"::"Enhanced Field" :
            BEGIN
              GroupWFlow."Workflow To" := EnhFieldMgt.GetFieldValue(RecRef,WFlowType."On Start Person Field Name");
            END;
        END;
      END;
      //Set Workflow To <<
    END;

    LOCAL PROCEDURE OnStartActions_Create@1000000062(VAR GroupWFlow@1000000000 : Record 9062265);
    VAR
      WFlowType@1000000001 : Record 9062258;
      CheckListTemplate@1000000003 : Record 9062436;
      Checklist@1000000002 : Record 9062434;
    BEGIN
      //DOC NA2016.10

      WFlowType.GET(GroupWFlow."Workflow No.");
      //Create a Checklist >>>
      IF WFlowType."Checklist Type" <> '' THEN BEGIN
        CheckListTemplate.GET(WFlowType."Checklist Type");
        CheckListTemplate.CreateNewChecklist(Checklist);
        Checklist.VALIDATE(Checklist."Related Position Text",GroupWFlow."Get Position Text");
        Checklist.MODIFY;

        GroupWFlow.VALIDATE(GroupWFlow."Checklist Type",Checklist."Checklist Type");
        GroupWFlow.VALIDATE(GroupWFlow."Checklist Code",Checklist.Code);
      END;
      //Create a Checklist <<<
    END;

    PROCEDURE ReleaseRecordFunctionAvailable@1000000047(TableNo@1000000000 : Integer) : Boolean;
    BEGIN
      CASE TableNo OF
        DATABASE::"Expenses Header",
        DATABASE::"Sales Header",
        DATABASE::"Purchase Header",
        DATABASE::Customer,
        DATABASE::Vendor,
        DATABASE::"Gen. Journal Batch" : EXIT(TRUE);
        ELSE EXIT(FALSE);
      END;
    END;

    PROCEDURE ReleaseReopenRecord@1000000049(TableNo@1000000000 : Integer;PositionText@1000000001 : Text;Release@1000000006 : Boolean);
    VAR
      SalesHeader@1000000002 : Record 36;
      ReleaseSalesDoc@1000000003 : Codeunit 414;
      PurchaseHeader@1000000004 : Record 38;
      ReleasePurchDoc@1000000005 : Codeunit 415;
      TxtSalesReleased@1000000007 : TextConst 'ENU=Sales document "%1" released;ENG=Sales document "%1" released';
      TxtSalesReopened@1000000008 : TextConst 'ENU=Sales document "%1" reopened;ENG=Sales document "%1" reopened';
      TxtPurchaseReleased@1000000009 : TextConst 'ENU=Purchase document "%1" released;ENG=Purchase document "%1" released';
      TxtPurchaseReopened@1000000010 : TextConst 'ENU=Purchase document "%1" reopened;ENG=Purchase document "%1" reopened';
      GenericRelease@1000000011 : Codeunit 9062233;
      Customer@1000000012 : Record 18;
      Vendor@1000000013 : Record 23;
      TxtCustomerReleased@1000000014 : TextConst 'ENU=Customer "%1" released;ENG=Customer "%1" released';
      TxtCustomerReopened@1000000015 : TextConst 'ENU=Customer "%1" reopened;ENG=Customer "%1" reopened';
      TxtVendorReleased@1000000016 : TextConst 'ENU=Vendor "%1" released;ENG=Vendor "%1" released';
      TxtVendorReopened@1000000017 : TextConst 'ENU=Vendor "%1" reopened;ENG=Vendor "%1" reopened';
      GenJournalBatch@1000000018 : Record 232;
      TxtGenJournalBatchReleased@1000000019 : TextConst 'ENU=General Journal Batch "%1, %2" released;ENG=General Journal Batch "%1, %2" released';
      TxtGenJournalBatchReopened@1000000020 : TextConst 'ENU=General Journal Batch "%1, %2" reopened;ENG=General Journal Batch "%1, %2" reopened';
    BEGIN
      IF NOT ReleaseRecordFunctionAvailable(TableNo) THEN EXIT;

      CASE TableNo OF
        DATABASE::Customer :
          BEGIN
            Customer.SETPOSITION(PositionText);
            IF NOT (Customer.GETPOSITION = PositionText) THEN EXIT;
            Customer.GET(Customer."No.");
            IF Release THEN BEGIN
              GenericRelease.Release_Customer(Customer);
              Logger.Log('WFLOWMGT',Logger.Type::Debug,STRSUBSTNO(TxtCustomerReleased,Customer."No."),USERID);
            END ELSE BEGIN
              GenericRelease.Reopen_Customer(Customer);
              Logger.Log('WFLOWMGT',Logger.Type::Debug,STRSUBSTNO(TxtCustomerReopened,Customer."No."),USERID);
            END;
          END;
        DATABASE::Vendor :
          BEGIN
            Vendor.SETPOSITION(PositionText);
            IF NOT (Vendor.GETPOSITION = PositionText) THEN EXIT;
            Vendor.GET(Vendor."No.");
            IF Release THEN BEGIN
              GenericRelease.Release_Vendor(Vendor);
              Logger.Log('WFLOWMGT',Logger.Type::Debug,STRSUBSTNO(TxtVendorReleased,Vendor."No."),USERID);
            END ELSE BEGIN
              GenericRelease.Reopen_Vendor(Vendor);
              Logger.Log('WFLOWMGT',Logger.Type::Debug,STRSUBSTNO(TxtVendorReopened,Vendor."No."),USERID);
            END;
          END;
        DATABASE::"Sales Header" :
          BEGIN
            SalesHeader.SETPOSITION(PositionText);
            IF NOT (SalesHeader.GETPOSITION = PositionText) THEN EXIT;
            SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
            IF Release THEN BEGIN
              ReleaseSalesDoc.PerformManualRelease(SalesHeader);
              Logger.Log('WFLOWMGT',Logger.Type::Debug,STRSUBSTNO(TxtSalesReleased,SalesHeader.GETPOSITION),USERID);
            END ELSE BEGIN
              ReleaseSalesDoc.Reopen(SalesHeader); //DOC NA2016.10 PC
              Logger.Log('WFLOWMGT',Logger.Type::Debug,STRSUBSTNO(TxtSalesReopened,SalesHeader.GETPOSITION),USERID);
            END;
          END;

        DATABASE::"Purchase Header" :
          BEGIN
            PurchaseHeader.SETPOSITION(PositionText);
            IF NOT (PurchaseHeader.GETPOSITION = PositionText) THEN EXIT;
            PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
            IF Release THEN BEGIN
              ReleasePurchDoc.PerformManualRelease(PurchaseHeader);
              Logger.Log('WFLOWMGT',Logger.Type::Debug,STRSUBSTNO(TxtPurchaseReleased,PurchaseHeader.GETPOSITION),USERID);
            END ELSE BEGIN
              ReleasePurchDoc.Reopen(PurchaseHeader); //DOC NA2016.10 PC
              Logger.Log('WFLOWMGT',Logger.Type::Debug,STRSUBSTNO(TxtPurchaseReopened,PurchaseHeader.GETPOSITION),USERID);
            END;
          END;

        DATABASE::"Gen. Journal Batch" :
          BEGIN
            GenJournalBatch.SETPOSITION(PositionText);
            IF NOT (GenJournalBatch.GETPOSITION = PositionText) THEN EXIT;
            GenJournalBatch.GET(GenJournalBatch."Journal Template Name",GenJournalBatch.Name);
            IF Release THEN BEGIN
              GenericRelease.Release_GenJnlBatch(GenJournalBatch);
              Logger.Log('WFLOWMGT',Logger.Type::Debug,STRSUBSTNO(TxtGenJournalBatchReleased,PurchaseHeader.GETPOSITION),USERID);
            END ELSE BEGIN
              GenericRelease.Reopen_GenJnlBatch(GenJournalBatch);
              Logger.Log('WFLOWMGT',Logger.Type::Debug,STRSUBSTNO(TxtGenJournalBatchReopened,PurchaseHeader.GETPOSITION),USERID);
            END;
          END;
      END;
    END;

    PROCEDURE RecordIsMissingApproval@1000000048(TableNo@1000000000 : Integer;PositionText@1000000001 : Text[1024]) : Boolean;
    VAR
      WFlow@1000000004 : Record 9062258;
      GroupWFlow@1000000005 : Record 9062265;
      WFlowResponse@1000000006 : Record 9062259;
      nAblementSetup@1000000008 : Record 9062229;
    BEGIN
      IF NOT nAblementSetup.GET THEN EXIT(FALSE); //Approval isn't missing as no nAblement/Workflow is set up
      IF NOT nAblementSetup."Enable Workflows" THEN EXIT(FALSE); //Approval isn't missing as the Workflow system isn't enabled

      WFlow.SETRANGE(Enabled,TRUE);
      WFlow.SETRANGE("Required for Approval",TRUE);
      IF NOT WFlow.FINDSET THEN EXIT(FALSE); //Approval isn't missing if there's not a related Workflow

      REPEAT
        GroupWFlow.SETRANGE("Workflow No.",WFlow."No.");
        GroupWFlow.SETRANGE("Get Position Text",PositionText);
        IF NOT GroupWFlow.FINDLAST THEN EXIT(TRUE); //Approval IS missing if there are no Group Workflows as that means the Workflow hasn't even been sent

        IF GroupWFlow.Status = GroupWFlow.Status::Open THEN EXIT(TRUE); //Approval IS missing as the workflow is still awaiting responses

        WFlowResponse.GET(GroupWFlow."Workflow No.",GroupWFlow.Response);
        IF WFlowResponse."Response Type" <> WFlowResponse."Response Type"::Positive THEN EXIT(TRUE); //Approval IS missing as the response wasn't positive
      UNTIL WFlow.NEXT = 0;

      EXIT(FALSE); //At this point there must have been workflows, all of which were closed positively
    END;

    PROCEDURE CreateStandardApprovalResponses@1000000037(pWorkflow@1000000000 : Record 9062258) : Boolean;
    VAR
      lCreateWorkflowApprovalResp@1000000004 : Report 9062282;
    BEGIN
      //DOC NA2015.4 - Creating standard approval responses
      //  -> pWorkflow: The workflow to create responses for
      //  -> pInteraction: Interaction flag
      //  <- TRUE = Created, FALSE = Cancelled

      pWorkflow.TESTFIELD("No.");

      CLEAR(lCreateWorkflowApprovalResp);
      lCreateWorkflowApprovalResp.Initialise(pWorkflow);
      lCreateWorkflowApprovalResp.RUNMODAL();
      IF ( NOT (lCreateWorkflowApprovalResp.OK)) THEN
        EXIT(FALSE);

      CreateStandardApprovalResponsesAdv(pWorkflow, lCreateWorkflowApprovalResp.GetResponseWorkflowNo(), lCreateWorkflowApprovalResp.GetTableId(),
        lCreateWorkflowApprovalResp.GetFieldId());

      EXIT(TRUE);
    END;

    PROCEDURE CreateStandardApprovalResponsesAdv@1000000021(pWorkflow@1000000000 : Record 9062258;pResponseWorkflowNo@1000000006 : Code[20];pTableId@1000000002 : Integer;pFieldId@1000000003 : Integer);
    VAR
      lWorkflowResponse@1000000004 : Record 9062259;
      eNotProvided@1000000005 : TextConst 'ENU="""%1"" hasn''t been provided; responses can''t be created.";ENG="""%1"" hasn''t been provided; responses can''t be created."';
    BEGIN
      //DOC NA2015.4 - Creating standard approval responses (advanced version)
      //  -> pWorkflow: The workflow to create responses for
      //  -> pTableId: Table ID
      //  -> pFieldId: Field ID

      pWorkflow.TESTFIELD("No.");
      IF (pTableId = 0) THEN
        ERROR(eNotProvided, lWorkflowResponse.FIELDCAPTION("Table ID"));
      IF (pFieldId = 0) THEN
        ERROR(eNotProvided, lWorkflowResponse.FIELDCAPTION("Field ID"));

      CreateWorkflowResponse(pWorkflow, 'APPROVE', lWorkflowResponse."Response Type"::Positive, FALSE, pTableId, pFieldId, 'APPROVED', pResponseWorkflowNo);
      CreateWorkflowResponse(pWorkflow, 'CANCEL', lWorkflowResponse."Response Type"::Neutral, TRUE, pTableId, pFieldId, '', pResponseWorkflowNo);
      CreateWorkflowResponse(pWorkflow, 'REJECT', lWorkflowResponse."Response Type"::Negative, FALSE, pTableId, pFieldId, 'REJECTED', pResponseWorkflowNo);
    END;

    LOCAL PROCEDURE CreateWorkflowResponse@1000000053(pWorkflow@1000000000 : Record 9062258;pCode@1000000002 : Code[20];pResponseType@1000000007 : Integer;pCancelledResponse@1000000003 : Boolean;pTableId@1000000008 : Integer;pFieldId@1000000009 : Integer;pFieldValue@1000000010 : Code[20];pResponseWorkflowNo@1000000006 : Code[20]) : Boolean;
    VAR
      lWorkflowResponse@1000000001 : Record 9062259;
      lTnpToolkit@1000000004 : Codeunit 9062230;
      lDescription@1000000005 : Text[50];
    BEGIN
      //DOC NA2015.4 - Creating one workflow response
      //  -> pWorkflow: The workflow to create the response for
      //  -> pCode: (Response) code
      //  -> pResponseType: Response type
      //  -> pCancelledResponse: Flag if it is cancelled response to be created
      //  -> pTableId: Table ID
      //  -> pFieldId: Field ID
      //  -> pFieldValue: Field value
      //  -> pResponseWorkflowNo: Response workflow number
      //  <- TRUE = Response created, FALSE = Response exists already

      IF (lWorkflowResponse.GET(pWorkflow."No.", pCode)) THEN
        EXIT(FALSE);

      lTnpToolkit.CodeToName(pCode, lDescription);

      CLEAR(lWorkflowResponse);
      lWorkflowResponse.INIT();
      lWorkflowResponse.VALIDATE("Workflow No.", pWorkflow."No.");
      lWorkflowResponse.VALIDATE(Code, pCode);
      lWorkflowResponse.VALIDATE("Response Description", lDescription);
      lWorkflowResponse.VALIDATE("Response Type", pResponseType);
      lWorkflowResponse.VALIDATE("Cancelled Response", pCancelledResponse);
      lWorkflowResponse.VALIDATE("Table ID", pTableId);
      lWorkflowResponse.VALIDATE("Field ID", pFieldId);
      lWorkflowResponse.VALIDATE("Field Value", pFieldValue);
      lWorkflowResponse.VALIDATE("Response Workflow No.", pResponseWorkflowNo);
      lWorkflowResponse.INSERT(TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE IsWorkflowValid@1000000054(WorkflowNo@1000000000 : Code[20];VAR ResponseText@1000000001 : Text) IsValid : Boolean;
    VAR
      WarningsText@1000000004 : Text;
      ErrorsText@1000000003 : Text;
      Workflow@1000000002 : Record 9062258;
      WorkflowResponse@1000000005 : Record 9062259;
      eWorkflowDoesNotExist@1000000006 : TextConst 'ENU=Workflow %1 does not exist;ENG=Workflow %1 does not exist';
      eWorkflowDescriptionBlank@1000000007 : TextConst 'ENU=The workflow description is blank;ENG=The workflow description is blank';
      eSetTo@1000000008 : TextConst 'ENU="""%1"" is set to ""%2"", however no value has been set in ""%3""''";ENG="""%1"" is set to ""%2"", however no value has been set in ""%3""''"';
      eSetToNoResponse@1000000009 : TextConst 'ENU="""%1"" is set to ""%2"", however the response specified (""%3"") does not exist";ENG="""%1"" is set to ""%2"", however the response specified (""%3"") does not exist"';
      eSetToNoValue@1000000010 : TextConst 'ENU="""%1"" is set to ""%2"", however no value has been set in ""%3""";ENG="""%1"" is set to ""%2"", however no value has been set in ""%3"""';
      eValid@1000000011 : TextConst 'ENU=The Workflow %1 (%2) is valid;ENG=The Workflow %1 (%2) is valid';
      eNotValid@1000000012 : TextConst 'ENU=The workflow %1 (%2) is not valid;ENG=The workflow %1 (%2) is not valid';
      eStars@1000000015 : TextConst 'ENU=***%1***;ENG=***%1***';
      eErrors@1000000013 : TextConst 'ENU=Errors;ENG=Errors';
      eNoErrors@1000000014 : TextConst 'ENU=No Errors;ENG=No Errors';
      eWarnings@1000000016 : TextConst 'ENU=Warnings;ENG=Warnings';
      eNoWarnings@1000000017 : TextConst 'ENU=No Warnings;ENG=No Warnings';
    BEGIN
      IF NOT Workflow.GET(WorkflowNo) THEN BEGIN
        ResponseText := STRSUBSTNO(eWorkflowDoesNotExist,WorkflowNo);
        EXIT(FALSE);
      END;

      //General Setup for this Workflow - Warnings >>
      IF Workflow.Description = '' THEN WarningsText += '\' + ' - ' + eWorkflowDescriptionBlank;
      //General Setup for this Workflow - Warnings <<

      //General Setup for this Workflow - Errors >>
      //General Setup for this Workflow - Errors <<

      //What if theres a problem starting the workflow - Warnings >>
      //What if theres a problem starting the workflow - Warnings <<

      //What if theres a problem starting the workflow - Errors >>
      IF Workflow."OnErr: WFlow Disabled" = Workflow."OnErr: WFlow Disabled"::"Use Response" THEN BEGIN
        IF Workflow."OnErr: WFlow Disabled Resp." = '' THEN BEGIN
          ErrorsText += '\' + STRSUBSTNO(' - ' + eSetTo, Workflow.FIELDCAPTION("OnErr: WFlow Disabled"), Workflow."OnErr: WFlow Disabled",
            Workflow.FIELDCAPTION("OnErr: WFlow Disabled Resp."));
        END ELSE BEGIN
          IF NOT WorkflowResponse.GET(Workflow."No.",Workflow."OnErr: WFlow Disabled Resp.") THEN BEGIN
            ErrorsText += '\' + STRSUBSTNO(' - ' + eSetToNoResponse, Workflow.FIELDCAPTION("OnErr: WFlow Disabled"), Workflow."OnErr: WFlow Disabled",
              Workflow."OnErr: WFlow Disabled Resp.");
          END;
        END;
      END;

      IF Workflow."OnErr: No Recipients" = Workflow."OnErr: No Recipients"::"Use Response" THEN BEGIN
        IF Workflow."OnErr: No Recipients Resp." = '' THEN BEGIN
          ErrorsText += '\' + STRSUBSTNO(' - ' + eSetToNoValue, Workflow.FIELDCAPTION("OnErr: No Recipients"), Workflow."OnErr: No Recipients",
            Workflow.FIELDCAPTION("OnErr: No Recipients Resp."));
        END ELSE BEGIN
          IF NOT WorkflowResponse.GET(Workflow."No.",Workflow."OnErr: No Recipients Resp.") THEN BEGIN
            ErrorsText += '\' + STRSUBSTNO(' - ' + eSetToNoResponse, Workflow.FIELDCAPTION("OnErr: No Recipients"), Workflow."OnErr: No Recipients",
              Workflow."OnErr: No Recipients Resp.");
          END;
        END;
      END;
      //What if theres a problem starting the workflow - Errors <<

      //Things to do when the workflow is started - Warnings >>
      //Things to do when the workflow is started - Warnings <<

      //Things to do when the workflow is started - Errors >>
      //Things to do when the workflow is started - Errors <<

      //Who to send the workflow to - Warnings >>
      //Who to send the workflow to - Warnings <<

      //Who to send the workflow to - Errors >>
      //Who to send the workflow to - Errors <<

      //End
      IsValid := ErrorsText = '';

      IF IsValid THEN BEGIN
        ResponseText := STRSUBSTNO(eValid,Workflow."No.",Workflow.Description);
      END ELSE BEGIN
        ResponseText := STRSUBSTNO(eNotValid,Workflow."No.",Workflow.Description);
      END;

      IF ErrorsText <> '' THEN BEGIN
        ResponseText += '\\' + STRSUBSTNO(eStars, eErrors);
        ResponseText += ErrorsText;
      END ELSE BEGIN
        ResponseText += '\\' + STRSUBSTNO(eStars, eNoErrors);
      END;

      IF WarningsText <> '' THEN BEGIN
        ResponseText += '\\' + STRSUBSTNO(eStars, eWarnings);
        ResponseText += WarningsText;

      END ELSE BEGIN
        ResponseText += '\\' + STRSUBSTNO(eStars, eNoWarnings);
      END;
    END;

    PROCEDURE IsResponsePositive@1000000059(pWorkflow@1000000002 : Record 9062258;pResponseStatus@1000000000 : Text[100]) : Boolean;
    VAR
      lWorkflowResponse@1000000001 : Record 9062259;
    BEGIN
      //DOC NA2015.6 - Checking if response is positive
      //  -> pWorkflow: The workflow to examine
      //  -> pResponseStatus: Response status
      //  <- Answer

      EXIT(HasResponseType(pWorkflow, pResponseStatus, lWorkflowResponse."Response Type"::Positive));
    END;

    PROCEDURE IsResponseNegative@1000000058(pWorkflow@1000000000 : Record 9062258;pResponseStatus@1000000002 : Text[100]) : Boolean;
    VAR
      lWorkflowResponse@1000000001 : Record 9062259;
    BEGIN
      //DOC NA2015.6 - Checking if response is negative
      //  -> pWorkflow: The workflow to examine
      //  -> pResponseStatus: Response status
      //  <- Answer

      EXIT(HasResponseType(pWorkflow, pResponseStatus, lWorkflowResponse."Response Type"::Negative));
    END;

    PROCEDURE IsResponseNutral@1000000057(pWorkflow@1000000000 : Record 9062258;pResponseStatus@1000000002 : Text[100]) : Boolean;
    VAR
      lWorkflowResponse@1000000001 : Record 9062259;
    BEGIN
      //DOC NA2015.6 - Checking if response is neutral
      //  -> pWorkflow: The workflow to examine
      //  -> pResponseStatus: Response status
      //  <- Answer

      EXIT(HasResponseType(pWorkflow, pResponseStatus, lWorkflowResponse."Response Type"::Neutral));
    END;

    PROCEDURE IsResponseCancelled@1000000056(pWorkflow@1000000001 : Record 9062258;pResponseStatus@1000000002 : Text[100]) : Boolean;
    VAR
      lWorkflowResponse@1000000000 : Record 9062259;
    BEGIN
      //DOC NA2015.6 - Checking if response is cancelled
      //  -> pWorkflow: The workflow to examine
      //  -> pResponseStatus: Response status
      //  <- Answer

      lWorkflowResponse.RESET();
      lWorkflowResponse.SETRANGE("Workflow No.", pWorkflow."No.");
      lWorkflowResponse.SETRANGE("Field Value", pResponseStatus);
      IF (lWorkflowResponse.FINDFIRST()) THEN
        EXIT(lWorkflowResponse."Cancelled Response")
      ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE HasResponseType@1000000055(pWorkflow@1000000001 : Record 9062258;pResponseStatus@1000000003 : Text[100];pResponseType@1000000002 : Integer) : Boolean;
    VAR
      lWorkflowResponse@1000000000 : Record 9062259;
    BEGIN
      //DOC NA2015.6 - Returning if response has given type
      //  -> pWorkflow: The workflow to examine
      //  -> pResponseStatus: Response status
      //  -> pResponseType: Response type
      //  <- Answer

      lWorkflowResponse.RESET();
      lWorkflowResponse.SETRANGE("Workflow No.", pWorkflow."No.");
      lWorkflowResponse.SETRANGE("Field Value", pResponseStatus);
      IF (lWorkflowResponse.FINDFIRST()) THEN
        EXIT(lWorkflowResponse."Response Type" = pResponseType)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE MakeApprovalWorkflow@9062229(VAR Workflow@9062229 : Record 9062258);
    VAR
      UseRecordRestrictions@9062230 : Boolean;
      UsedEnhancedFields@1000000000 : Boolean;
      Field@1000000001 : Record 2000000041;
    BEGIN
      //DOC NA2016.10

      WITH Workflow DO BEGIN
        //Basic Settings
        VALIDATE("Workflow Type","Workflow Type"::Approval);
        VALIDATE("Group Decision Method",apprDecisionFirst);

        //try to find information text field
        Workflow.VALIDATE("On Start InfoText Field Type", Workflow."On Start InfoText Field Type"::Field);
        Field.RESET();
        Field.SETRANGE(TableNo, Workflow."Table ID");
        Field.SETRANGE(FieldName, 'Name');
        IF (Field.FINDFIRST()) THEN
          Workflow.VALIDATE("On Start InfoText Field No.", Field."No.")
        ELSE BEGIN
          Field.SETRANGE(FieldName, 'Description');
          IF (Field.FINDFIRST()) THEN
            Workflow.VALIDATE("On Start InfoText Field No.", Field."No.");
        END;

        MODIFY(TRUE);

        //Approval Field
        UsedEnhancedFields := MakeApprovalWorkflow_ApprovalField(Workflow);

        //Record Restrictions
        UseRecordRestrictions := MakeApprovalWorkflow_RestrictRecord(Workflow);

        //Approval Responses
        MakeApprovalWorkflow_ApprovalResponses(Workflow,UseRecordRestrictions,UsedEnhancedFields);

        //Create Standard Workflow (if Appropriate)
        MakeApprovalWorkflow_CreateStandardWorkflow(Workflow);
      END;
    END;

    LOCAL PROCEDURE MakeApprovalWorkflow_ApprovalField@9062230(VAR Workflow@9062229 : Record 9062258) UsedEnhancedFields : Boolean;
    VAR
      RecRef@9062235 : RecordRef;
      FieldRef@9062234 : FieldRef;
      Field@9062233 : Record 2000000041;
      SalesHeader@9062232 : Record 36;
      FoundStatusField@9062231 : Boolean;
      EnhancedFieldDefinition@9062230 : Record 9062327;
      eRequested@1000000000 : TextConst 'ENU=REQUESTED;ENG=REQUESTED';
    BEGIN
      //DOC NA2016.10

      WITH Workflow DO BEGIN
        RecRef.OPEN("Table ID");

        //Look for Status field with "Status::Pending Approval"
        Field.SETRANGE(TableNo,"Table ID");
        Field.SETRANGE(FieldName,SalesHeader.FIELDNAME(Status));
        Field.SETRANGE(Type,Field.Type::Option);
        IF Field.FINDSET THEN BEGIN
          REPEAT
            FieldRef := RecRef.FIELD(Field."No.");
            FieldRef.VALUE := SalesHeader.Status::"Pending Approval";
            IF FORMAT(FieldRef.VALUE) = FORMAT(SalesHeader.Status::"Pending Approval") THEN BEGIN
              VALIDATE("On Start Set Field Type","On Start Set Field Type"::Field);
              VALIDATE("On Start Set Field No.",FieldRef.NUMBER);
              VALIDATE("On Start Set Field Value",FORMAT(SalesHeader.Status::"Pending Approval"));

              FoundStatusField := TRUE;
            END;
          UNTIL (FoundStatusField) OR (Field.NEXT = 0);
        END;

        //Look for code / option "Approval Status" field
        IF NOT FoundStatusField THEN BEGIN
          Field.SETRANGE(TableNo,"Table ID");
          Field.SETRANGE(FieldName, 'Approval Status');
          Field.SETFILTER(Type,'%1|%2',Field.Type::Code,Field.Type::Option);
          IF Field.FINDFIRST() THEN BEGIN
            VALIDATE("On Start Set Field Type","On Start Set Field Type"::Field);
            VALIDATE("On Start Set Field No.",Field."No.");
            VALIDATE("On Start Set Field Value",eRequested);

            FoundStatusField := TRUE;
          END;
        END;

        IF NOT FoundStatusField THEN
          UsedEnhancedFields := TRUE;

        IF NOT FoundStatusField THEN BEGIN
          EnhancedFieldDefinition.SETRANGE("Table No.","Table ID");
          EnhancedFieldDefinition.SETRANGE(Name,apprEnhancedFieldName);
          IF EnhancedFieldDefinition.FINDFIRST THEN BEGIN
            VALIDATE("On Start Set Field Type","On Start Set Field Type"::"Enhanced Field");
            VALIDATE("On Start Set Field No.",EnhancedFieldDefinition."Enhanced Field No.");
            VALIDATE("On Start Set Field Value",FORMAT(SalesHeader.Status::"Pending Approval"));

            FoundStatusField := TRUE;
          END;
        END;

        IF NOT FoundStatusField THEN BEGIN
          IF CONFIRM(apprCreateEnhancedField) THEN BEGIN
            EnhancedFieldDefinition.INIT;
            EnhancedFieldDefinition.VALIDATE("Table No.","Table ID");
            EnhancedFieldDefinition.INSERT(TRUE);
            EnhancedFieldDefinition.VALIDATE(Name,apprEnhancedFieldName);
            EnhancedFieldDefinition.MODIFY(TRUE);

            VALIDATE("On Start Set Field Type","On Start Set Field Type"::"Enhanced Field");
            VALIDATE("On Start Set Field No.",EnhancedFieldDefinition."Enhanced Field No.");
            VALIDATE("On Start Set Field Value",FORMAT(SalesHeader.Status::"Pending Approval"));

            FoundStatusField := TRUE;
          END;
        END;

        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE MakeApprovalWorkflow_RestrictRecord@9062234(VAR Workflow@9062229 : Record 9062258) UseRecordRestrictions : Boolean;
    BEGIN
      WITH Workflow DO BEGIN
        VALIDATE("On Start Restrict Record",TRUE);
        MODIFY(TRUE);
        EXIT("On Start Restrict Record");
      END;
    END;

    LOCAL PROCEDURE MakeApprovalWorkflow_ApprovalResponses@9062232(Workflow@9062229 : Record 9062258;UseRecordRestrictions@9062232 : Boolean;UseEnhancedFields@1000000000 : Boolean);
    VAR
      Responses@9062230 : Record 9062259;
      WorkflowManagement@9062231 : Codeunit 9062258;
      SalesHeader@9062233 : Record 36;
      GroupWorkflow@9062234 : Record 9062265;
      ResponseWorkflow@9062235 : Code[20];
      UseRelease@9062236 : Boolean;
    BEGIN
      //DOC NA2016.10

      Responses.SETRANGE("Workflow No.",Workflow."No.");
      IF Responses.FINDSET THEN BEGIN
        IF NOT CONFIRM(STRSUBSTNO(apprResponsesExist,Workflow."No.")) THEN
          EXIT;
        Responses.DELETEALL(TRUE);
      END;

      UseRelease := ReleaseRecordFunctionAvailable(Workflow."Table ID");

      IF GroupWorkflow.GET(apprResponseWorkflow) THEN
        ResponseWorkflow := apprResponseWorkflow;

      //APPROVED
      MakeApprovalWorkflow_ApprovalResponse(Workflow, apprApproved, UseRecordRestrictions, UseRelease, FALSE,
        Responses."Response Type"::Positive, ResponseWorkflow, FALSE, FORMAT(SalesHeader.Status::Released));
      //DENIED
      MakeApprovalWorkflow_ApprovalResponse(Workflow, apprDenied, (UseRecordRestrictions AND (NOT UseEnhancedFields)), FALSE, UseRelease,
        Responses."Response Type"::Negative, ResponseWorkflow, FALSE, FORMAT(SalesHeader.Status::Open));
      //CANCEL
      MakeApprovalWorkflow_ApprovalResponse(Workflow, apprCancel, UseRecordRestrictions, FALSE, UseRelease,
        Responses."Response Type"::Neutral, '', TRUE, FORMAT(SalesHeader.Status::Open));

      //DOC NA2016.10 PC <<<
    END;

    LOCAL PROCEDURE MakeApprovalWorkflow_ApprovalResponse@1000000063(Workflow@9062229 : Record 9062258;Code@1000000001 : Code[20];UseRecordRestrictions@9062232 : Boolean;UseRelease@1000000000 : Boolean;UseReopen@1000000004 : Boolean;ResponseType@1000000002 : Integer;ResponseWorkflow@1000000005 : Code[20];CancelledResponse@1000000003 : Boolean;FieldValue@1000000006 : Text[250]);
    VAR
      Responses@9062230 : Record 9062259;
    BEGIN
      //DOC NA2016.10

      Responses.INIT;
      Responses.VALIDATE("Workflow No.",Workflow."No.");
      Responses.VALIDATE(Code,Code);
      Responses.VALIDATE("Response Description",Code);
      Responses.VALIDATE("Response Type",ResponseType);
      IF UseRecordRestrictions THEN
        Responses.VALIDATE("Unrestrict Record",TRUE);
      IF UseRelease THEN
        Responses.VALIDATE("Release Record",TRUE);
      IF UseReopen THEN
        Responses.VALIDATE("Reopen Record",TRUE);
      Responses.VALIDATE("Response Workflow No.",ResponseWorkflow);
      Responses.VALIDATE("Cancelled Response",CancelledResponse);
      IF (Workflow."On Start Set Field No." <> 0) THEN
      BEGIN
        Responses.VALIDATE("Field Type", Workflow."On Start Set Field Type");
        Responses.VALIDATE("Field ID", Workflow."On Start Set Field No.");
        Responses.VALIDATE("Field Value", FieldValue);
      END;
      Responses.INSERT(TRUE);
    END;

    LOCAL PROCEDURE MakeApprovalWorkflow_CreateStandardWorkflow@9062231(VAR Workflow@9062230 : Record 9062258);
    VAR
      EnhancedWorkflowStdUtils@1000000000 : Codeunit 9062614;
    BEGIN
      //DOC NA2016.11 PC >>>
      IF MakeApprovalWorkflow_StandardWorkflowSupported(Workflow."Table ID") THEN
        EnhancedWorkflowStdUtils.CreateStandardWorkflowForEnhancedWorkflow(Workflow);
      //DOC NA2016.11 PC <<<
    END;

    LOCAL PROCEDURE MakeApprovalWorkflow_StandardWorkflowSupported@1000000064(TableID@1000000000 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.11 PC >>>
      CASE TableID OF
        DATABASE::"Purchase Header",
        DATABASE::"Sales Header",
        DATABASE::"Gen. Journal Batch",
        DATABASE::"Gen. Journal Line",
        DATABASE::Customer,
        DATABASE::"Incoming Document" : EXIT(TRUE);
        ELSE
          EXIT(FALSE);
      END;
      //DOC NA2016.11 PC <<<
    END;

    PROCEDURE Checklist_MakeChecklistWorkflow@1000000060(VAR Workflow@1000000000 : Record 9062258);
    VAR
      Responses@1000000002 : Record 9062259;
    BEGIN
      //DOC NA2016.10 PC >>>

      //Create the "DONE" and "CANCEL" response
      Responses.SETRANGE(Responses."Workflow No.",Workflow."No.");
      IF Responses.FINDSET THEN BEGIN
        IF NOT CONFIRM(STRSUBSTNO(chklstResponsesExist,Workflow."No.")) THEN
          EXIT;

        Responses.DELETEALL(FALSE);
      END;

      //DONE
      Responses.INIT;
      Responses.VALIDATE("Workflow No.",Workflow."No.");
      Responses.VALIDATE(Code,chklstDone);
      Responses.VALIDATE("Response Description",chklstDone);
      Responses.VALIDATE("Response Type",Responses."Response Type"::Positive);
      Responses.INSERT(FALSE);

      //CANCEL
      Responses.INIT;
      Responses.VALIDATE("Workflow No.",Workflow."No.");
      Responses.VALIDATE(Code,chklstCancel);
      Responses.VALIDATE("Response Description",chklstCancel);
      Responses.VALIDATE("Response Type",Responses."Response Type"::Neutral);
      Responses.VALIDATE(Responses."Cancelled Response",TRUE);
      Responses.INSERT(FALSE);

      //Set the Group Response to ALL
      Workflow.VALIDATE("Group Decision Method",chklstGroupDecisionAll);
      Workflow.VALIDATE(Workflow."Send E-Mail Notification",FALSE);

      //DOC NA2016.10 PC <<<
    END;

    [EventSubscriber(Table,9062434,OnChecklistBecomeComplete)]
    LOCAL PROCEDURE Checklist_BecameComplete@1000000061(VAR Sender@1000000000 : Record 9062434);
    VAR
      GroupWorkflow@1000000001 : Record 9062265;
    BEGIN
      //DOC NA2016.10 PC >>>
      GroupWorkflow.SETCURRENTKEY(GroupWorkflow."Checklist Type",GroupWorkflow."Checklist Code");
      GroupWorkflow.SETRANGE(GroupWorkflow."Checklist Type",Sender."Checklist Type");
      GroupWorkflow.SETRANGE(GroupWorkflow."Checklist Code",Sender.Code);
      IF GroupWorkflow.FINDSET THEN
        REPEAT
          HandleResult(GroupWorkflow,'!CHECKLIST');
        UNTIL GroupWorkflow.NEXT = 0;

      //DOC NA2016.10 PC <<<
    END;

    PROCEDURE GetRelatedWorkflows@1000000065(VAR Workflows_Temp@1000000000 : TEMPORARY Record 9062258;TableNo@1000000001 : Integer;PositionText@1000000002 : Text;ApprovalOnly@1000000003 : Boolean) NoWorkflows : Integer;
    VAR
      Workflow@1000000004 : Record 9062258;
      WorkflowNoFilter@9062229 : Text;
      CriteriaManagement@9062230 : Codeunit 9062462;
      UseWorkflow@9062231 : Boolean;
      TNPUtils@9062232 : Codeunit 9062229;
    BEGIN
      //DOC NA2016.12 >>
      Workflows_Temp.DELETEALL(FALSE);

      Workflow.RESET();
      Workflow.SETRANGE("Table ID", TableNo);
      Workflow.SETRANGE(Enabled, TRUE);
      IF ApprovalOnly THEN
        Workflow.SETRANGE(Workflow."Workflow Type",Workflow."Workflow Type"::Approval);

      IF Workflow.FINDSET THEN BEGIN
        REPEAT
          IF Workflow."Record Criteria ID" = 0 THEN
            UseWorkflow := TRUE
          ELSE
            UseWorkflow :=
              CriteriaManagement.RecordInFilter(
                Workflow."Record Criteria ID",
                TableNo,
                PositionText);

          IF UseWorkflow THEN BEGIN
            Workflows_Temp.INIT;
            Workflows_Temp.TRANSFERFIELDS(Workflow);
            Workflows_Temp.INSERT(FALSE);
          END;

        UNTIL Workflow.NEXT = 0;

      END;

      EXIT(Workflows_Temp.COUNT);
      //DOC NA2016.12 <<
    END;

    LOCAL PROCEDURE "--- Events ---"@1000000066();
    BEGIN
    END;

    [Business]
    LOCAL PROCEDURE BeforeProcessResponse@1000000067(VAR pEnhancedWorkflowActivityLn@1000000000 : Record 9062266;VAR pCancel@1000000001 : Boolean);
    BEGIN
      //DOC NA2016.16 - Event fired before processing of workflow response
      //  <> pEnhancedWorkflowActivityLn: Workflow activity line
      //  <> pCancel: You set it to TRUE to cancel workflow response processing
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 10/08/2012 - Migrated to 2013, error handling amended
      //DOC NA2015.1  PC 21/01/2013 - Changed AutoNAV Log Errors to Warnings when trying to create a group workflow fails due to setup
      //DOC NA2015.1  IH 14/08/2012 - Added check on Sequence No. to be <= 1 to avoid multiple sendings to contact specified in wflow statement
      //DOC NA2015.1  PC 24/08/2012 - Changed CreateGroupWFlow to get min sequence number from WFlow Contacts as opposed to default to Sequence 1
      //DOC NA2015.1  PC 25/01/2013 - Added a check in InsertWFlow to exit if the contact already has an open Activity Line for that workflow
      //DOC NA2015.1  PC 29/01/2013 - Added RecordIsApproved function
      //DOC NA2015.1  PC 31/01/2013 - Move RecordIsApproved function to Workflow Interface codeunit
      //DOC NA2015.1  JH 11/07/2013 - Workflows improvements and bugfixes
      //DOC NA2015.1  AP 12/11/2013 - Added smarter filters for Workflow contacts routing parameters
      //DOC NA2015.1  PC 03/04/2014 - Fixed issue with Information Text being longer than 250 chars
      //DOC NA2015.2  PC 09/07/2014 - Change to point at which Activity Lines from ended sequences are closed
      //DOC NA2015.3  JH 04/08/2014 - Bugfixes
      //DOC NA2015.4  JH 28/12/2014 - System behaviours renamed
      //DOC NA2015.4  JH 02/01/2015 - Standard approval responses function added
      //DOC NA2015.4  AP 21/01/2015 - Added nHance fields support for cancel workflows
      //DOC NA2015.4  PC 30/01/2015 - Added Release functions for General Journal Batch
      //DOC NA2015.6  PC 05/04/2015 - Changed Routing Parameter length to 100
      //DOC NA2015.6  JH 30/04/2015 - Workflow response functions
      //DOC NA2015.7  PC 11/06/2015 - Changed "ProcessResponse" to look at all Sequences, instead of just the first next sequence
      //DOC NA2016.10 JH 26/08/2015 - Upgraded to 2016
      //DOC NA2016.10 PC 25/09/2015 - Added support for Record Restrictions and Release/Reopen as a result of Response
      //DOC NA2016.10 PC 25/09/2015 - Added functions to create "Approval Workflows"
      //DOC NA2016.10 PC 09/10/2015 - Added Checklist Functionality
      //DOC NA2016.11 PC 11/11/2015 - Extended Approval Workflow functions to support Standard Workflow Integration
      //DOC NA2016.11 PC 11/11/2015 - Changes to "MakeApprovalWorkflow" functionality to support additional Record Types (Gen. Journal, Customer, Incoming Document)
      //DOC NA2016.11 PC 11/11/2015 - Changed length of PrimFilter param on InsertWFlow from 80 to 250 chars
      //DOC NA2016.12 JH 07/12/2015 - "Approval Status" added to possible fields to handle workflows
      //DOC NA2016.12 JH 10/12/2015 - Workflow "Record No." retrieval moved to "TNP Utils" and fixed
      //DOC NA2016.12 JH 15/12/2015 - Bugfixes
      //DOC NA2016.12 JH 27/12/2015 - Criteria references changed
      //DOC NA2016.12 PC 29/12/2015 - GetRelatedWorkflows function added to return No. Workflows related to a particular record
      //DOC NA2016.12 JH 14/01/2016 - "FindContact" searching using contact, salesperson, vendor, resource, employee and user
      //DOC NA2016.14 PC 01/03/2016 - Added code to Validate "Get Position Text" on Group Workflow Header
      //DOC NA2016.14 PC 04/03/2016 - Change to Response Workflow creation so that Originator is sent workflow *in addition* to other Contacts on Workflow Setup
      //DOC NA2016.15 JH 18/04/2016 - CfMD amendments
      //DOC NA2016.15 PC 11/05/2016 - Added code to set "Jet Report Status" where appropriate
      //DOC NA2016.15 PC 16/05/2016 - Change to Auto Response code to process in different order and always return a "Success" status no !AUTO_CLOSED
      //DOC NA2016.16 PC 03/06/2016 - Change to either return Group Workflow No. or Blank from CreateGroupWorkflowFull function to prevent NO_RECIPIENTS etc being treated as errors
      //DOC NA2016.16 PC 03/06/2016 - Only Restrict Record On Start of Workflow if is specified on Workflow
      //DOC NA2016.16 JH 07/07/2016 - Event before workflow response processing
    }
    END.
  }
}

