OBJECT Table 9086950 nF. Setup
{
  OBJECT-PROPERTIES
  {
    Date=30/10/16;
    Time=11:18:02 AM;
    Version List=NF2016.17;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               NfRecordAuditToolkit.UpdateCreated(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               NfRecordAuditToolkit.UpdateModified(Rec."Modified By", Rec."Modified Date Time");
             END;

    CaptionML=[ENU=nForcement Setup;
               ENG=nForcement Setup];
    LookupPageID=Page459;
    DrillDownPageID=Page459;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              ENG=Primary Key] }
    { 10  ;   ;Activity            ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Activity;
                                                              ENG=Activity];
                                                   OptionCaptionML=[ENU=" ,Insert,Modify,Delete,Rename";
                                                                    ENG=" ,Insert,Modify,Delete,Rename"];
                                                   OptionString=[ ,Insert,Modify,Delete,Rename] }
    { 20  ;   ;Update Users On Page Open;Boolean  ;InitValue=Yes;
                                                   CaptionML=[ENU=Update Users On Page Open;
                                                              ENG=Update Users On Page Open] }
    { 21  ;   ;Update Users On Triggers;Boolean   ;InitValue=Yes;
                                                   CaptionML=[ENU=Update Users On Triggers;
                                                              ENG=Update Users On Triggers] }
    { 30  ;   ;Show All Companies  ;Boolean       ;CaptionML=[ENU=Show All Companies;
                                                              ENG=Show All Companies] }
    { 40  ;   ;User Text in Matrixes;Option       ;InitValue=User Name;
                                                   CaptionML=[ENU=User Text in Matrixes;
                                                              ENG=User Text in Matrixes];
                                                   OptionCaptionML=[ENU=" ,Short User ID,User ID,User Name,Short User ID + User Name,User ID + User Name";
                                                                    ENG=" ,Short User ID,User ID,User Name,Short User ID + User Name,User ID + User Name"];
                                                   OptionString=[ ,Short User ID,User ID,User Name,Short User ID + User Name,User ID + User Name] }
    { 50  ;   ;Hide User Domain    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Hide User Domain;
                                                              ENG=Hide User Domain] }
    { 60  ;   ;Permissions System  ;Option        ;InitValue=Basic;
                                                   OnValidate=VAR
                                                                lNfUserGroupMember@1000000000 : Record 9086956;
                                                                lNfPermissionGroupMember@1000000001 : Record 9086961;
                                                                lMembersExist@1000000002 : Boolean;
                                                                eConfirmation@1000000003 : TextConst 'ENU=If you change "%1", all assignments between users, user groups and permission groups will be deleted. Do you want to continue?;ENG=If you change "%1", all assignments between users, user groups and permission groups will be deleted. Do you want to continue?';
                                                                eConfirmation2@1000000004 : TextConst 'ENU=Are you ABSOLUTELY SURE you want to change "%1"?. All assignments between users, user groups and permission groups will be deleted.;ENG=Are you ABSOLUTELY SURE you want to change "%1"?. All assignments between users, user groups and permission groups will be deleted.';
                                                              BEGIN
                                                                IF (Rec."Permissions System" <> xRec."Permissions System") THEN
                                                                BEGIN
                                                                  lMembersExist := FALSE;
                                                                  IF ( NOT (lMembersExist)) THEN
                                                                    lMembersExist := ( NOT (lNfUserGroupMember.ISEMPTY()));
                                                                  IF ( NOT (lMembersExist)) THEN
                                                                    lMembersExist := ( NOT (lNfPermissionGroupMember.ISEMPTY()));
                                                                  IF (lMembersExist) THEN
                                                                    IF (GUIALLOWED()) THEN
                                                                    BEGIN
                                                                      IF ( NOT (CONFIRM(eConfirmation, FALSE, Rec.FIELDCAPTION("Permissions System")))) THEN
                                                                        ERROR('');
                                                                      IF ( NOT (CONFIRM(eConfirmation2, FALSE, Rec.FIELDCAPTION("Permissions System")))) THEN
                                                                        ERROR('');
                                                                    END;
                                                                  lNfUserGroupMember.DELETEALL(TRUE);
                                                                  lNfPermissionGroupMember.DELETEALL(TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Permissions System;
                                                              ENG=Permissions System];
                                                   OptionCaptionML=[ENU=" ,Basic,Advanced";
                                                                    ENG=" ,Basic,Advanced"];
                                                   OptionString=[ ,Basic,Advanced] }
    { 72  ;   ;MenuSuite Mapping   ;Option        ;CaptionML=[ENU=MenuSuite Mapping;
                                                              ENG=MenuSuite Mapping];
                                                   OptionCaptionML=[ENU=" ,One Level,Two Levels,Three Levels,All Levels";
                                                                    ENG=" ,One Level,Two Levels,Three Levels,All Levels"];
                                                   OptionString=[ ,One Level,Two Levels,Three Levels,All Levels] }
    { 80  ;   ;Permission Sets No. Ser. Code;Code10;
                                                   TableRelation="No. Series";
                                                   CaptionML=[ENU=Permission Sets No. Series Code;
                                                              ENG=Permission Sets No. Series Code] }
    { 90  ;   ;Auto-Clear Log Older Than;DateFormula;
                                                   CaptionML=[ENU=Auto-Clear Log Older Than;
                                                              ENG=Auto-Clear Log Older Than] }
    { 900 ;   ;Direction           ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Direction;
                                                              ENG=Direction];
                                                   OptionCaptionML=[ENU=" ,Up,Down";
                                                                    ENG=" ,Up,Down"];
                                                   OptionString=[ ,Up,Down] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              NfRecordAuditToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              NfRecordAuditToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NfRecordAuditToolkit@1000000001 : Codeunit 9086951;
      NfNoSeriesToolkit@1000000002 : Codeunit 9086977;

    PROCEDURE VerifyAndGet@1000000000();
    BEGIN
      ///<summary>creating it with default values) and setting to it</summary>

      Rec.RESET();
      IF ( NOT (Rec.GET())) THEN
      BEGIN
        Rec.INIT();
        EVALUATE(Rec."Auto-Clear Log Older Than", '<3M>');
        Rec.INSERT(TRUE);
      END;

      GetPermissionSetsNoSeriesCode();
    END;

    PROCEDURE GetActivityText@1000000001(pActivity@1000000003 : Option) : Text;
    VAR
      eInserted@1000000002 : TextConst 'ENU=inserted;ENG=inserted';
      eModified@1000000001 : TextConst 'ENU=modified;ENG=modified';
      eDeleted@1000000000 : TextConst 'ENU=deleted;ENG=deleted';
      lActivityText@1000000004 : Text;
    BEGIN
      ///<summary>Returning activity text</summary>
      ///<param name="pActivity">The activity</param>
      ///<returns>The text</returns>

      lActivityText := '';

      CASE (pActivity) OF
        Rec.Activity::Insert: lActivityText := eInserted;
        Rec.Activity::Modify: lActivityText := eModified;
        Rec.Activity::Delete: lActivityText := eDeleted;
      END;

      EXIT(lActivityText);
    END;

    PROCEDURE GetPermissionSetsNoSeriesCode@1000000002() : Code[10];
    VAR
      eCode@1000000000 : TextConst 'ENU=PERM SET;ENG=PERM SET';
      eDescription@1000000001 : TextConst 'ENU=Permission Sets;ENG=Permission Sets';
      eStartingNo@1000000002 : TextConst 'ENU=PS0001;ENG=PS0001';
    BEGIN
      ///<summary>Returning permission sets no. series code</summary>
      ///<returns>The code</returns>

      IF (Rec."Permission Sets No. Ser. Code" = '') THEN
      BEGIN
        NfNoSeriesToolkit.CreateNoSeriesAdv(eCode, eDescription, TRUE, FALSE, eStartingNo);
        Rec.VALIDATE("Permission Sets No. Ser. Code", eCode);
        Rec.MODIFY(TRUE);
      END;

      EXIT(Rec."Permission Sets No. Ser. Code");
    END;

    BEGIN
    {
      ///<summary>General nForcement setup table</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-04-22">Created</change>
    }
    END.
  }
}

