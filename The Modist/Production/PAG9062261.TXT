OBJECT Page 9062261 SFTP Tester
{
  OBJECT-PROPERTIES
  {
    Date=01/06/16;
    Time=[ 7:00:24 PM];
    Version List=NA2016.16;
  }
  PROPERTIES
  {
    CaptionML=[ENU=SFTP Tester;
               ENG=SFTP Tester];
    PromotedActionCategoriesML=[ENU=New,Process,Reports,Action;
                                ENG=New,Process,Reports,Action];
    OnInit=BEGIN
             Mode := Mode::Upload;
           END;

    OnOpenPage=BEGIN
                 UpdateGlobals();
               END;

    ActionList=ACTIONS
    {
      { 1000000007;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000008;1 ;Action    ;
                      Name=UploadModeAction;
                      CaptionML=[ENU=Upload Mode;
                                 ENG=Upload Mode];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Export;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 SetMode(Mode::Upload);
                               END;
                                }
      { 1000000009;1 ;Action    ;
                      Name=DownloadModeAction;
                      CaptionML=[ENU=Download Mode;
                                 ENG=Download Mode];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Import;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 SetMode(Mode::Download);
                               END;
                                }
      { 1000000006;1 ;Separator  }
      { 1000000011;1 ;Action    ;
                      Name=UploadAction;
                      CaptionML=[ENU=Upload;
                                 ENG=Upload];
                      Promoted=Yes;
                      Enabled=UploadEnabled;
                      PromotedIsBig=Yes;
                      Image=Export;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ExecuteUpload();
                               END;
                                }
      { 1000000012;1 ;Action    ;
                      Name=DownloadAction;
                      CaptionML=[ENU=Download;
                                 ENG=Download];
                      Promoted=Yes;
                      Enabled=DownloadEnabled;
                      PromotedIsBig=Yes;
                      Image=Import;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 ExecuteDownload();
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;;Container;
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=ServerGroup;
                CaptionML=[ENU=Server;
                           ENG=Server];
                GroupType=Group }

    { 1000000002;2;Field  ;
                Name=SftpServerCodeField;
                CaptionML=[ENU=SFTP Server Code;
                           ENG=SFTP Server Code];
                SourceExpr=SftpServerCode;
                TableRelation="SFTP Server";
                OnValidate=BEGIN
                             UpdateGlobals();
                           END;
                            }

    { 1000000010;2;Field  ;
                Name=ModeField;
                CaptionML=[ENU=Mode;
                           ENG=Mode];
                SourceExpr=Mode;
                Editable=FALSE }

    { 1000000003;1;Group  ;
                Name=FilesGroup;
                CaptionML=[ENU=Files;
                           ENG=Files];
                GroupType=Group }

    { 1000000004;2;Field  ;
                Name=LocalFilePathField;
                CaptionML=[ENU=Local File Path;
                           ENG=Local File Path];
                SourceExpr=LocalFilePath;
                OnValidate=BEGIN
                             UpdateGlobals();
                           END;

                OnAssistEdit=VAR
                               FileManagement@1000000000 : Codeunit 419;
                             BEGIN
                               CASE (Mode) OF
                                 Mode::Upload: LocalFilePath := FileManagement.OpenFileDialog('', '', '');
                                 Mode::Download: LocalFilePath := FileManagement.SaveFileDialog('', '', '');
                               END;
                             END;
                              }

    { 1000000005;2;Field  ;
                Name=RemoteFilePathField;
                CaptionML=[ENU=Remote File Path;
                           ENG=Remote File Path];
                SourceExpr=RemoteFilePath;
                OnValidate=BEGIN
                             UpdateGlobals();
                           END;
                            }

  }
  CODE
  {
    VAR
      SftpServer@1000000003 : Record 9062267;
      FileSystem@1000000009 : Codeunit 9062264;
      SftpIntegration@1000000010 : Codeunit 9062505;
      SftpServerCode@1000000002 : Code[10];
      LocalFilePath@1000000000 : Text;
      RemoteFilePath@1000000001 : Text;
      Mode@1000000007 : ' ,Upload,Download';
      tUploading@1000000005 : TextConst 'ENU=Uploading...;ENG=Uploading...';
      tDownloading@1000000006 : TextConst 'ENU=Downloading...;ENG=Downloading...';
      UploadEnabled@1000000004 : Boolean INDATASET;
      DownloadEnabled@1000000008 : Boolean INDATASET;
      Dlg@1000000011 : Dialog;

    PROCEDURE Initialise@1000000000(pSftpServer@1000000000 : Record 9062267);
    BEGIN
      SftpServerCode := pSftpServer.Code;
    END;

    LOCAL PROCEDURE SetMode@1000000003(pMode@1000000000 : Integer);
    BEGIN
      Mode := pMode;
      LocalFilePath := '';
      RemoteFilePath := '';
      UpdateGlobals();
    END;

    LOCAL PROCEDURE GetSftpServer@1000000005();
    BEGIN
      SftpServer.GET(SftpServerCode);
      SftpServer.TESTFIELD(Address);
      SftpServer.TESTFIELD(Port);
      SftpServer.TESTFIELD(Login);
    END;

    LOCAL PROCEDURE GetServerFilePath@1000000007() : Text;
    VAR
      lFileName@1000000000 : Text;
    BEGIN
      lFileName := FileSystem.GetFileName(FileSystem.Client(), LocalFilePath);
      EXIT(FileSystem.GetTempPathForFile(FALSE, lFileName));
    END;

    LOCAL PROCEDURE InitialiseSftpSession@1000000004();
    BEGIN
      CLEAR(SftpIntegration);
      SftpIntegration.SetTimeout(SftpServer.Timeout);
      SftpIntegration.SetBufferSize(SftpServer."Buffer Size");
      SftpIntegration.Connect(SftpServer.Address, SftpServer.Port, SftpServer.Login, SftpServer.Password);
      CLEARLASTERROR();
    END;

    LOCAL PROCEDURE FinaliseSftpSession@1000000006();
    BEGIN
      SftpIntegration.Disconnect();
      CLEAR(SftpIntegration);
    END;

    LOCAL PROCEDURE ExecuteUpload@1000000024();
    VAR
      lServerFilePath@1000000000 : Text;
      eFinalMessage@1000000001 : TextConst 'ENU=File "%1" has been uploaded to "%2".;ENG=File "%1" has been uploaded to "%2".';
      lErrorMessage@1000000002 : Text;
    BEGIN
      GetSftpServer();

      Dlg.OPEN(tUploading);

      lServerFilePath := GetServerFilePath();
      FileSystem.UploadSilent(FileSystem.Client(), LocalFilePath, lServerFilePath);

      InitialiseSftpSession();
      IF ( NOT (TryToUpload(lServerFilePath))) THEN
        lErrorMessage := GETLASTERRORTEXT();
      FinaliseSftpSession();

      Dlg.CLOSE();

      IF (lErrorMessage <> '') THEN
        MESSAGE(lErrorMessage)
      ELSE
        MESSAGE(eFinalMessage, LocalFilePath, RemoteFilePath);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryToUpload@1000000002(pServerFilePath@1000000000 : Text);
    BEGIN
      SftpIntegration.UploadFile(pServerFilePath, RemoteFilePath);
    END;

    LOCAL PROCEDURE ExecuteDownload@1000000025();
    VAR
      lServerFilePath@1000000000 : Text;
      eFinalMessage@1000000001 : TextConst 'ENU=File "%1" has been downloaded to "%2".;ENG=File "%1" has been downloaded to "%2".';
      lErrorMessage@1000000002 : Text;
    BEGIN
      GetSftpServer();

      Dlg.OPEN(tDownloading);

      lServerFilePath := GetServerFilePath();

      InitialiseSftpSession();
      IF ( NOT (TryToDownload(lServerFilePath))) THEN
        lErrorMessage := GETLASTERRORTEXT();
      FinaliseSftpSession();

      FileSystem.DownloadSilent(FileSystem.Client(), lServerFilePath, LocalFilePath);

      Dlg.CLOSE();

      IF (lErrorMessage <> '') THEN
        MESSAGE(lErrorMessage)
      ELSE
        MESSAGE(eFinalMessage, RemoteFilePath, LocalFilePath);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryToDownload@1000000008(pServerFilePath@1000000000 : Text);
    BEGIN
      SftpIntegration.DownloadFile(RemoteFilePath, pServerFilePath);
    END;

    LOCAL PROCEDURE UpdateGlobals@1000000018();
    BEGIN
      UploadEnabled := ((SftpServerCode <> '') AND (Mode = Mode::Upload) AND (LocalFilePath <> '') AND (RemoteFilePath <> ''));
      DownloadEnabled := ((SftpServerCode <> '') AND (Mode = Mode::Download) AND (LocalFilePath <> '') AND (RemoteFilePath <> ''));
    END;

    BEGIN
    {
      //DOC NA2016.16 JH 02/06/2016 - Created
    }
    END.
  }
}

