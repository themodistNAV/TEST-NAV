OBJECT Codeunit 9062653 Incident Example Data
{
  OBJECT-PROPERTIES
  {
    Date=27/12/15;
    Time=[ 5:59:20 PM];
    Version List=NH2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      IncidentPriority@9062233 : Record 9062310;
      IncidentSla@9062232 : Record 9062306;
      IncidentStatus@9062234 : Record 9062304;
      IncidentType@9062230 : Record 9062303;
      tNotEmpty@9062231 : TextConst 'ENU="""%1"" table is not empty; do you still want to create example data?";ENG="""%1"" table is not empty; do you still want to create example data?"';
      tIncidentTypeEmergencyCall@9062238 : TextConst 'ENU=EMERGENCY CALL;ENG=EMERGENCY CALL';
      tIncidentTypeSupportCall@9062237 : TextConst 'ENU=SUPPORT CALL;ENG=SUPPORT CALL';
      tIncidentTypeSalesQuery@9062236 : TextConst 'ENU=SALES QUERY;ENG=SALES QUERY';
      tIncidentTypeGeneralQuery@9062235 : TextConst 'ENU=GENERAL QUERY;ENG=GENERAL QUERY';
      tIncidentSlaEmergency@9062241 : TextConst 'ENU=EMERGENCY;ENG=EMERGENCY';
      tIncidentSlaCall@9062240 : TextConst 'ENU=CALL;ENG=CALL';
      tIncidentSlaQuery@9062239 : TextConst 'ENU=QUERY;ENG=QUERY';
      IncidentLinkType@1000000000 : Record 9062308;
      GeneralLookup@1000000001 : Record 9062232;
      IncidentToolkit@1000000002 : Codeunit 9062654;

    LOCAL PROCEDURE "--- Incident Types ---"@9062234();
    BEGIN
    END;

    PROCEDURE CreateExampleIncidentTypes@9062231(pInteraction@9062230 : Boolean) : Boolean;
    VAR
      eConfirmation@9062231 : TextConst 'ENU=Do you want to create example incident types?;ENG=Do you want to create example incident types?';
    BEGIN
      //DOC NH2016.11 - Creating example incident types
      //  -> pInteraction: Interaction flag
      //  <- TRUE = Created, FALSE = Cancelled

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
          EXIT(FALSE);

      IncidentType.RESET();
      IF ( NOT (IncidentType.ISEMPTY())) THEN
        IF ( NOT (CONFIRM(tNotEmpty, FALSE, IncidentType.TABLECAPTION()))) THEN
          EXIT(FALSE);

      CreateIncidentType(tIncidentTypeEmergencyCall, tIncidentSlaEmergency, IncidentType."Owned By Area"::"Customer Services");
      CreateIncidentType(tIncidentTypeSupportCall, tIncidentSlaCall, IncidentType."Owned By Area"::"Customer Services");
      CreateIncidentType(tIncidentTypeSalesQuery, tIncidentSlaQuery, IncidentType."Owned By Area"::Sales);
      CreateIncidentType(tIncidentTypeGeneralQuery, tIncidentSlaQuery, IncidentType."Owned By Area"::"Customer Services");

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateIncidentType@9062235(pCode@9062230 : Code[20];pIncidentSlaCode@9062231 : Code[20];pOwnedBy@9062232 : Integer);
    BEGIN
      //DOC NH2016.11 - Creating incident type
      //  -> pCode: Incident type code
      //  -> pIncidentSlaCode: Incident SLA code
      //  -> pOwnedBy: Owned by

      IF (IncidentType.GET(pCode)) THEN
        EXIT;

      CLEAR(IncidentType);
      IncidentType.INIT();
      IncidentType.VALIDATE(Code, pCode);
      IF (pIncidentSlaCode <> '') THEN
        IF (IncidentSla.GET(pIncidentSlaCode)) THEN
          IncidentType.VALIDATE(SLA, pIncidentSlaCode);
      IncidentType.VALIDATE("Owned By Area", pOwnedBy);
      IncidentType.VALIDATE("Log Status Change", TRUE);
      IncidentType.INSERT(TRUE);
    END;

    LOCAL PROCEDURE "--- Incident SLAs ---"@9062233();
    BEGIN
    END;

    PROCEDURE CreateExampleIncidentSlas@9062232(pInteraction@9062230 : Boolean) : Boolean;
    VAR
      eConfirmation@9062231 : TextConst 'ENU=Do you want to create example incident SLAs?;ENG=Do you want to create example incident SLAs?';
    BEGIN
      //DOC NH2016.11 - Creating example incident SLAs
      //  -> pInteraction: Interaction flag
      //  <- TRUE = Created, FALSE = Cancelled

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
          EXIT(FALSE);

      IncidentSla.RESET();
      IF ( NOT (IncidentSla.ISEMPTY())) THEN
        IF ( NOT (CONFIRM(tNotEmpty, FALSE, IncidentSla.TABLECAPTION()))) THEN
          EXIT(FALSE);

      CreateIncidentSla(tIncidentSlaEmergency, '4h', '4h', TRUE);
      CreateIncidentSla(tIncidentSlaCall, '8h', '8h', FALSE);
      CreateIncidentSla(tIncidentSlaQuery, '16h', '16h', FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateIncidentSla@9062230(pCode@9062230 : Code[20];pResolutionDurationText@9062231 : Text;pClosureDurationText@9062232 : Text;pIncludeWeekends@9062233 : Boolean);
    VAR
      lResolutionDuration@9062234 : Duration;
      lClosureDuration@9062235 : Duration;
    BEGIN
      //DOC NH2016.11 - Creating incident SLA
      //  -> pCode: Incident SLA code
      //  -> pResolutionDurationText: Resolution duration text
      //  -> pClosureDurationText: Closure duration text
      //  -> pIncludeWeekends: Flag to include weekends

      IF (IncidentSla.GET(pCode)) THEN
        EXIT;

      IF ( NOT (EVALUATE(lResolutionDuration, pResolutionDurationText))) THEN
        CLEAR(lResolutionDuration);
      IF ( NOT (EVALUATE(lClosureDuration, pClosureDurationText))) THEN
        CLEAR(lClosureDuration);

      CLEAR(IncidentSla);
      IncidentSla.INIT();
      IncidentSla.VALIDATE(Code, pCode);
      IncidentSla.VALIDATE("Resolution Duration", lResolutionDuration);
      IncidentSla.VALIDATE("Closure Duration", lClosureDuration);
      IncidentSla.VALIDATE("Include Weekends", pIncludeWeekends);
      IncidentSla.VALIDATE("Day Start Time", 090000T);
      IncidentSla.VALIDATE("Day End Time", 173000T);
      IncidentSla.INSERT(TRUE);
    END;

    LOCAL PROCEDURE "--- Incident Priorities ---"@9062242();
    BEGIN
    END;

    PROCEDURE CreateExampleIncidentPriorities@9062244(pInteraction@9062230 : Boolean) : Boolean;
    VAR
      eConfirmation@9062231 : TextConst 'ENU=Do you want to create example incident priorities?;ENG=Do you want to create example incident priorities?';
      eVeryLow@9062236 : TextConst 'ENU=VERY LOW;ENG=VERY LOW';
      eLow@9062235 : TextConst 'ENU=LOW;ENG=LOW';
      eMedium@9062234 : TextConst 'ENU=MEDIUM;ENG=MEDIUM';
      eHigh@9062233 : TextConst 'ENU=HIGH;ENG=HIGH';
      eVeryHigh@9062232 : TextConst 'ENU=VERY HIGH;ENG=VERY HIGH';
    BEGIN
      //DOC NH2016.11 - Creating example incident priorities
      //  -> pInteraction: Interaction flag
      //  <- TRUE = Created, FALSE = Cancelled

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
          EXIT(FALSE);

      IncidentPriority.RESET();
      IF ( NOT (IncidentPriority.ISEMPTY())) THEN
        IF ( NOT (CONFIRM(tNotEmpty, FALSE, IncidentPriority.TABLECAPTION()))) THEN
          EXIT(FALSE);

      CreateIncidentPriority(eVeryLow);
      CreateIncidentPriority(eLow);
      CreateIncidentPriority(eMedium);
      CreateIncidentPriority(eHigh);
      CreateIncidentPriority(eVeryHigh);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateIncidentPriority@9062243(pCode@9062230 : Code[20]);
    BEGIN
      //DOC NH2016.11 - Creating incident priority
      //  -> pCode: Incident priority code

      IF (IncidentPriority.GET(pCode)) THEN
        EXIT;

      CLEAR(IncidentPriority);
      IncidentPriority.INIT();
      IncidentPriority.VALIDATE(Code, pCode);
      IncidentPriority.INSERT(TRUE);
    END;

    LOCAL PROCEDURE "--- Incident Statuses ---"@9062239();
    BEGIN
    END;

    PROCEDURE CreateExampleIncidentStatuses@9062238(pInteraction@9062230 : Boolean) : Boolean;
    VAR
      eConfirmation@9062231 : TextConst 'ENU=Do you want to create example incident statuses?;ENG=Do you want to create example incident statuses?';
      eLogged@9062235 : TextConst 'ENU=LOGGED;ENG=LOGGED';
      eConfirmed@9062233 : TextConst 'ENU=CONFIRMED;ENG=CONFIRMED';
      eInProgress@9062236 : TextConst 'ENU=IN PROGRESS;ENG=IN PROGRESS';
      eResolved@9062232 : TextConst 'ENU=RESOLVED;ENG=RESOLVED';
      eClosed@9062234 : TextConst 'ENU=CLOSED;ENG=CLOSED';
    BEGIN
      //DOC NH2016.11 - Creating example incident statuses
      //  -> pInteraction: Interaction flag
      //  <- TRUE = Created, FALSE = Cancelled

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
          EXIT(FALSE);

      IncidentStatus.RESET();
      IF ( NOT (IncidentStatus.ISEMPTY())) THEN
        IF ( NOT (CONFIRM(tNotEmpty, FALSE, IncidentStatus.TABLECAPTION()))) THEN
          EXIT(FALSE);

      CreateIncidentStatus(tIncidentTypeEmergencyCall, eLogged, TRUE, FALSE, FALSE, IncidentStatus."Sets Currently With to"::Us);
      CreateIncidentStatus(tIncidentTypeEmergencyCall, eConfirmed, FALSE, FALSE, FALSE, IncidentStatus."Sets Currently With to"::Us);
      CreateIncidentStatus(tIncidentTypeEmergencyCall, eInProgress, FALSE, FALSE, FALSE, IncidentStatus."Sets Currently With to"::Us);
      CreateIncidentStatus(tIncidentTypeEmergencyCall, eResolved, FALSE, TRUE, FALSE, IncidentStatus."Sets Currently With to"::Us);
      CreateIncidentStatus(tIncidentTypeEmergencyCall, eClosed, FALSE, FALSE, TRUE, IncidentStatus."Sets Currently With to"::Contact);

      CreateIncidentStatus(tIncidentTypeSupportCall, eLogged, TRUE, FALSE, FALSE, IncidentStatus."Sets Currently With to"::Us);
      CreateIncidentStatus(tIncidentTypeSupportCall, eConfirmed, FALSE, FALSE, FALSE, IncidentStatus."Sets Currently With to"::Us);
      CreateIncidentStatus(tIncidentTypeSupportCall, eInProgress, FALSE, FALSE, FALSE, IncidentStatus."Sets Currently With to"::Us);
      CreateIncidentStatus(tIncidentTypeSupportCall, eResolved, FALSE, TRUE, FALSE, IncidentStatus."Sets Currently With to"::Us);
      CreateIncidentStatus(tIncidentTypeSupportCall, eClosed, FALSE, FALSE, TRUE, IncidentStatus."Sets Currently With to"::Contact);

      CreateIncidentStatus(tIncidentTypeSalesQuery, eLogged, TRUE, FALSE, FALSE, IncidentStatus."Sets Currently With to"::Us);
      CreateIncidentStatus(tIncidentTypeSalesQuery, eInProgress, FALSE, FALSE, FALSE, IncidentStatus."Sets Currently With to"::Us);
      CreateIncidentStatus(tIncidentTypeSalesQuery, eResolved, FALSE, TRUE, FALSE, IncidentStatus."Sets Currently With to"::Us);
      CreateIncidentStatus(tIncidentTypeSalesQuery, eClosed, FALSE, FALSE, TRUE, IncidentStatus."Sets Currently With to"::Contact);

      CreateIncidentStatus(tIncidentTypeGeneralQuery, eLogged, TRUE, FALSE, FALSE, IncidentStatus."Sets Currently With to"::Us);
      CreateIncidentStatus(tIncidentTypeGeneralQuery, eInProgress, FALSE, FALSE, FALSE, IncidentStatus."Sets Currently With to"::Us);
      CreateIncidentStatus(tIncidentTypeGeneralQuery, eResolved, FALSE, TRUE, FALSE, IncidentStatus."Sets Currently With to"::Us);
      CreateIncidentStatus(tIncidentTypeGeneralQuery, eClosed, FALSE, FALSE, TRUE, IncidentStatus."Sets Currently With to"::Contact);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateIncidentStatus@9062237(pIncidentTypeCode@9062236 : Code[20];pCode@9062230 : Code[20];pInitial@9062234 : Boolean;pResolvesIncident@9062233 : Boolean;pClosesIncident@9062232 : Boolean;pSetsCurrentlyWithTo@9062231 : Integer);
    BEGIN
      //DOC NH2016.11 - Creating incident status
      //  -> pIncidentTypeCode: Incident type code
      //  -> pCode: Incident status code
      //  -> pInitial: Initial flag
      //  -> pResolvesIncident: Flag telling the status resolves incident
      //  -> pClosesIncident: Flag telling the status closed incident
      //  -> pSetsCurrentlyWithTo: Sets "Currently With" to something

      IF ( NOT (IncidentType.GET(pIncidentTypeCode))) THEN
        EXIT;
      IF (IncidentStatus.GET(pIncidentTypeCode, pCode)) THEN
        EXIT;

      CLEAR(IncidentStatus);
      IncidentStatus.INIT();
      IncidentStatus.VALIDATE(Type, pIncidentTypeCode);
      IncidentStatus.VALIDATE(Code, pCode);
      IncidentStatus.VALIDATE(Initial, pInitial);
      IncidentStatus.VALIDATE("Resolves Incident", pResolvesIncident);
      IncidentStatus.VALIDATE("Closes Incident", pClosesIncident);
      IncidentStatus.VALIDATE("Sets Currently With to", pSetsCurrentlyWithTo);
      IncidentStatus.INSERT(TRUE);
    END;

    LOCAL PROCEDURE "--- Incident Link Types ---"@1000000000();
    BEGIN
    END;

    PROCEDURE CreateExampleIncidentLinkTypes@1000000003(pInteraction@1000000000 : Boolean) : Boolean;
    VAR
      eConfirmation@1000000001 : TextConst 'ENU=Do you want to create example incident link types?;ENG=Do you want to create example incident link types?';
      ePerson@1000000002 : TextConst 'ENU=PERSON;ENG=PERSON';
      eSupplier@1000000003 : TextConst 'ENU=SUPPLIER;ENG=SUPPLIER';
      eCampaign@1000000004 : TextConst 'ENU=CAMPAIGN;ENG=CAMPAIGN';
      lContact@1000000005 : Record 5050;
      lVendor@1000000006 : Record 23;
    BEGIN
      //DOC NA2016.11 - Creating example incident link types
      //  -> pInteraction: Interaction flag
      //  <- TRUE = Created, FALSE = Cancelled

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
          EXIT(FALSE);

      IncidentLinkType.RESET();
      IF ( NOT (IncidentLinkType.ISEMPTY())) THEN
        IF ( NOT (CONFIRM(tNotEmpty, FALSE, IncidentLinkType.TABLECAPTION()))) THEN
          EXIT(FALSE);

      CreateIncidentLinkType(ePerson, DATABASE::Contact, lContact.FIELDNO(Type), FORMAT(lContact.Type::Person, 0, 2), 0, '', 0, '');
      CreateIncidentLinkType(eSupplier, DATABASE::Vendor, lVendor.FIELDNO(Blocked), FORMAT(lVendor.Blocked::" ", 0, 2), 0, '', 0, '');
      CreateIncidentLinkType(eCampaign, DATABASE::Campaign, 0, '', 0, '', 0, '');

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateIncidentLinkType@1000000004(pCode@1000000000 : Code[20];pTableId@1000000001 : Integer;pTableFilterField1Id@1000000002 : Integer;pTableFilterField1Value@1000000003 : Text;pTableFilterField2Id@1000000005 : Integer;pTableFilterField2Value@1000000004 : Text;pTableFilterField3Id@1000000007 : Integer;pTableFilterField3Value@1000000006 : Text);
    VAR
      lCriteria@1000000010 : Record 9062626;
      lCriteriaManagement@1000000008 : Codeunit 9062462;
      lCriteriaId@1000000009 : Integer;
    BEGIN
      //DOC NA2016.11 - Create one incident link type
      //  -> pCode: Link type code
      //  -> pTableId: Table ID
      //  -> pTableFilterField1Id: Table filter field 1 ID
      //  -> pTableFilterField1Value: Table filter field 1 value
      //  -> pTableFilterField2Id: Table filter field 2 ID
      //  -> pTableFilterField2Value: Table filter field 2 value
      //  -> pTableFilterField3Id: Table filter field 3 ID
      //  -> pTableFilterField3Value: Table filter field 3 value

      CLEAR(IncidentLinkType);
      IncidentLinkType.INIT();
      IncidentLinkType.VALIDATE(Code, pCode);
      IncidentLinkType.VALIDATE("Table ID", pTableId);
      IncidentLinkType.INSERT(TRUE);

      IF ((pTableFilterField1Id <> 0) OR (pTableFilterField2Id <> 0) OR (pTableFilterField3Id <> 0)) THEN
      BEGIN
        lCriteriaId := lCriteriaManagement.CreateCriteriaAttached(DATABASE::"Incident Link Type", IncidentLinkType.GETPOSITION(FALSE),
          IncidentLinkType.FIELDNO("Table Criteria ID"), FALSE);
        lCriteria.GET(lCriteriaId);
        lCriteria.VALIDATE("Table ID", pTableId);
        lCriteria.MODIFY(TRUE);
        lCriteriaManagement.CreateCriteriaField(lCriteriaId, pTableFilterField1Id, pTableFilterField1Value);
        lCriteriaManagement.CreateCriteriaField(lCriteriaId, pTableFilterField2Id, pTableFilterField2Value);
        lCriteriaManagement.CreateCriteriaField(lCriteriaId, pTableFilterField3Id, pTableFilterField3Value);
        IncidentLinkType.VALIDATE("Table Criteria ID", lCriteriaId);
        IncidentLinkType.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE "--- Incident Categorisation ---"@1000000001();
    BEGIN
    END;

    PROCEDURE CreateExampleIncidentCategories@1000000011(pInteraction@9062230 : Boolean) : Boolean;
    VAR
      eConfirmation@9062231 : TextConst 'ENU=Do you want to create example incident categories?;ENG=Do you want to create example incident categories?';
      lType@1000000000 : Code[20];
      eFinancialManagement@1000000001 : TextConst 'ENU=FINANCIAL MANAGEMENT;ENG=FINANCIAL MANAGEMENT';
      eSalesAndMarketing@1000000002 : TextConst 'ENU=SALES & MARKETING;ENG=SALES & MARKETING';
      ePurchase@1000000003 : TextConst 'ENU=PURCHASE;ENG=PURCHASE';
      eWarehouse@1000000004 : TextConst 'ENU=WAREHOUSE;ENG=WAREHOUSE';
      eManufacturing@1000000005 : TextConst 'ENU=MANUFACTURING;ENG=MANUFACTURING';
      eJobs@1000000008 : TextConst 'ENU=JOBS;ENG=JOBS';
      eResourcePlanning@1000000009 : TextConst 'ENU=RESOURCE PLANNING;ENG=RESOURCE PLANNING';
      eService@1000000007 : TextConst 'ENU=SERVICE;ENG=SERVICE';
      eHumanResources@1000000006 : TextConst 'ENU=HUMAN RESOURCES;ENG=HUMAN RESOURCES';
      lSequence@1000000010 : Integer;
      ePhoneCall@1000000011 : TextConst 'ENU=PHONE CALL;ENG=PHONE CALL';
      eEMail@1000000012 : TextConst 'ENU=E-MAIL;ENG=E-MAIL';
      eFax@1000000013 : TextConst 'ENU=FAX;ENG=FAX';
      eWorkshop@1000000014 : TextConst 'ENU=WORKSHOP;ENG=WORKSHOP';
      eOnSite@1000000015 : TextConst 'ENU=ON SITE;ENG=ON SITE';
      eSupportConsultant@1000000016 : TextConst 'ENU=SUPPORT CONSULTANT;ENG=SUPPORT CONSULTANT';
      eConsultant@1000000018 : TextConst 'ENU=CONSULTANT;ENG=CONSULTANT';
      eLeadConsultant@1000000019 : TextConst 'ENU=LEAD CONSULTANT;ENG=LEAD CONSULTANT';
      eDeveloper@1000000017 : TextConst 'ENU=DEVELOPER;ENG=DEVELOPER';
      eLeadDeveloper@1000000020 : TextConst 'ENU=LEAD DEVELOPER;ENG=LEAD DEVELOPER';
      eAccountManager@1000000021 : TextConst 'ENU=ACCOUNT MANAGER;ENG=ACCOUNT MANAGER';
    BEGIN
      //DOC NH2016.11 - Creating example incident categories
      //  -> pInteraction: Interaction flag
      //  <- TRUE = Created, FALSE = Cancelled

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
          EXIT(FALSE);

      GeneralLookup.RESET();
      GeneralLookup.SETFILTER(Type, '%1|%2|%3', IncidentToolkit.GetIncidentClass1GenLkp(), IncidentToolkit.GetIncidentClass2GenLkp(),
        IncidentToolkit.GetIncidentClass3GenLkp());
      IF ( NOT (IncidentPriority.ISEMPTY())) THEN
        IF ( NOT (CONFIRM(tNotEmpty, FALSE, IncidentPriority.TABLECAPTION()))) THEN
          EXIT(FALSE);

      lType := IncidentToolkit.GetIncidentClass1GenLkp();
      CLEAR(lSequence);
      CreateIncidentCategory(lType, eFinancialManagement, lSequence);
      CreateIncidentCategory(lType, eSalesAndMarketing, lSequence);
      CreateIncidentCategory(lType, ePurchase, lSequence);
      CreateIncidentCategory(lType, eWarehouse, lSequence);
      CreateIncidentCategory(lType, eManufacturing, lSequence);
      CreateIncidentCategory(lType, eJobs, lSequence);
      CreateIncidentCategory(lType, eResourcePlanning, lSequence);
      CreateIncidentCategory(lType, eService, lSequence);
      CreateIncidentCategory(lType, eHumanResources, lSequence);

      lType := IncidentToolkit.GetIncidentClass2GenLkp();
      CLEAR(lSequence);
      CreateIncidentCategory(lType, ePhoneCall, lSequence);
      CreateIncidentCategory(lType, eEMail, lSequence);
      CreateIncidentCategory(lType, eFax, lSequence);
      CreateIncidentCategory(lType, eWorkshop, lSequence);
      CreateIncidentCategory(lType, eOnSite, lSequence);

      lType := IncidentToolkit.GetIncidentClass3GenLkp();
      CLEAR(lSequence);
      CreateIncidentCategory(lType, eSupportConsultant, lSequence);
      CreateIncidentCategory(lType, eConsultant, lSequence);
      CreateIncidentCategory(lType, eLeadConsultant, lSequence);
      CreateIncidentCategory(lType, eDeveloper, lSequence);
      CreateIncidentCategory(lType, eLeadDeveloper, lSequence);
      CreateIncidentCategory(lType, eAccountManager, lSequence);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateIncidentCategory@1000000010(pType@1000000000 : Code[20];pCode@9062230 : Code[20];VAR pSequence@1000000001 : Integer);
    BEGIN
      //DOC NH2016.11 - Creating incident category
      //  -> pType: Type
      //  -> pCode: Incident priority code
      //  <> pSequence: Sequence

      IF (GeneralLookup.GET(pType, pCode)) THEN
        EXIT;

      pSequence += 10;

      CLEAR(GeneralLookup);
      GeneralLookup.INIT();
      GeneralLookup.VALIDATE(Type, pType);
      GeneralLookup.VALIDATE(Code, pCode);
      GeneralLookup.VALIDATE(Sequence, pSequence);
      GeneralLookup.INSERT(TRUE);
    END;

    BEGIN
    {
      //DOC NH2016.11 JH 10/11/2015 - Created
      //DOC NH2016.12 JH 27/12/2015 - Criteria references changed
    }
    END.
  }
}

