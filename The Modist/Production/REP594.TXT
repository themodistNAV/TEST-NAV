OBJECT Report 594 Get Item Ledger Entries
{
  OBJECT-PROPERTIES
  {
    Date=26/02/16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.45243,NAVGB9.00.00.45243;
  }
  PROPERTIES
  {
    Permissions=TableData 252=imd;
    CaptionML=[ENU=Get Item Ledger Entries;
               ENG=Get Item Ledger Entries];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   CompanyInfo.FINDFIRST;
                 END;

    OnPreReport=BEGIN
                  IntrastatJnlLine.SETRANGE("Journal Template Name",IntrastatJnlLine."Journal Template Name");
                  IntrastatJnlLine.SETRANGE("Journal Batch Name",IntrastatJnlLine."Journal Batch Name");
                  IntrastatJnlLine.LOCKTABLE;
                  IF IntrastatJnlLine.FINDLAST THEN;

                  IntrastatJnlBatch.GET(IntrastatJnlLine."Journal Template Name",IntrastatJnlLine."Journal Batch Name");
                  IntrastatJnlBatch.TESTFIELD(Reported,FALSE);

                  GetGLSetup;
                  IF IntrastatJnlBatch."Amounts in Add. Currency" THEN BEGIN
                    GLSetup.TESTFIELD("Additional Reporting Currency");
                    AddCurrencyFactor :=
                      CurrExchRate.ExchangeRate(EndDate,GLSetup."Additional Reporting Currency");
                  END;
                END;

  }
  DATASET
  {
    { 1170000000;;DataItem;                  ;
               DataItemTable=Table9;
               DataItemTableView=SORTING(EU Country/Region Code)
                                 WHERE(EU Country/Region Code=FILTER(<>'')) }

    { 7209;1   ;DataItem;                    ;
               DataItemTable=Table32;
               DataItemTableView=SORTING(Country/Region Code,Entry Type,Posting Date)
                                 WHERE(Entry Type=FILTER(Purchase|Sale|Transfer),
                                       Correction=CONST(No));
               OnPreDataItem=BEGIN
                               SETRANGE("Posting Date",StartDate,EndDate);

                               IF ("Country/Region".Code = CompanyInfo."Country/Region Code") OR
                                  ((CompanyInfo."Country/Region Code" = '') AND NOT ShowBlank)
                               THEN BEGIN
                                 ShowBlank := TRUE;
                                 SETFILTER("Country/Region Code",'%1|%2',"Country/Region".Code,'');
                               END ELSE
                                 SETRANGE("Country/Region Code","Country/Region".Code);

                               IntrastatJnlLine2.SETCURRENTKEY("Source Type","Source Entry No.");
                               IntrastatJnlLine2.SETRANGE("Source Type",IntrastatJnlLine2."Source Type"::"Item Entry");

                               WITH ValueEntry DO BEGIN
                                 SETCURRENTKEY("Item Ledger Entry No.");
                                 SETRANGE("Entry Type","Entry Type"::"Direct Cost");
                                 SETFILTER(
                                   "Item Ledger Entry Type",'%1|%2|%3',
                                   "Item Ledger Entry Type"::Sale,
                                   "Item Ledger Entry Type"::Purchase,
                                   "Item Ledger Entry Type"::Transfer);
                               END;
                             END;

               OnAfterGetRecord=VAR
                                  ItemLedgEntry@1001 : Record 32;
                                BEGIN
                                  IntrastatJnlLine2.SETRANGE("Source Entry No.","Entry No.");
                                  IF IntrastatJnlLine2.FINDFIRST THEN
                                    CurrReport.SKIP;

                                  IF NOT HasCrossedBorder("Item Ledger Entry") OR IsService("Item Ledger Entry") THEN
                                    CurrReport.SKIP;

                                  IF "Entry Type" IN ["Entry Type"::Sale,"Entry Type"::Purchase] THEN BEGIN
                                    ItemLedgEntry.RESET;
                                    ItemLedgEntry.SETCURRENTKEY("Document No.","Document Type");
                                    ItemLedgEntry.SETRANGE("Document No.","Document No.");
                                    ItemLedgEntry.SETRANGE("Item No.","Item No.");
                                    ItemLedgEntry.SETRANGE(Correction,TRUE);
                                    IF "Document Type" IN ["Document Type"::"Sales Shipment","Document Type"::"Sales Return Receipt",
                                                           "Document Type"::"Purchase Receipt","Document Type"::"Purchase Return Shipment"]
                                    THEN BEGIN
                                      ItemLedgEntry.SETRANGE("Document Type","Document Type");
                                      IF ItemLedgEntry.FINDSET THEN
                                        REPEAT
                                          IF IsItemLedgerEntryCorrected(ItemLedgEntry,"Entry No.") THEN
                                            CurrReport.SKIP;
                                        UNTIL ItemLedgEntry.NEXT = 0;
                                    END;
                                  END;

                                  CalculateTotals("Item Ledger Entry");

                                  IF (TotalAmt = 0) AND SkipZeroAmounts THEN
                                    CurrReport.SKIP;

                                  InsertItemJnlLine;
                                END;
                                 }

    { 5612;1   ;DataItem;                    ;
               DataItemTable=Table169;
               DataItemTableView=SORTING(Type,Entry Type,Country/Region Code,Source Code,Posting Date)
                                 WHERE(Type=CONST(Item),
                                       Source Code=FILTER(<>''),
                                       Entry Type=CONST(Usage));
               OnPreDataItem=BEGIN
                               SETRANGE("Posting Date",StartDate,EndDate);
                               IntrastatJnlLine2.SETCURRENTKEY("Source Type","Source Entry No.");
                               IntrastatJnlLine2.SETRANGE("Source Type",IntrastatJnlLine2."Source Type"::"Job Entry");
                             END;

               OnAfterGetRecord=BEGIN
                                  IntrastatJnlLine2.SETRANGE("Source Entry No.","Entry No.");
                                  IF IntrastatJnlLine2.FINDFIRST OR (CompanyInfo."Country/Region Code" = "Country/Region Code") THEN
                                    CurrReport.SKIP;

                                  IF IsJobService("Job Ledger Entry") THEN
                                    CurrReport.SKIP;

                                  InsertJobLedgerLine;
                                END;

               DataItemLink=Country/Region Code=FIELD(Code) }

    { 8894;    ;DataItem;                    ;
               DataItemTable=Table5802;
               DataItemTableView=SORTING(Entry No.);
               OnPreDataItem=BEGIN
                               SETRANGE("Posting Date",StartDate,EndDate);
                               SETFILTER("Item Charge No.",'<> %1','');
                               "Item Ledger Entry".SETRANGE("Posting Date");

                               IntrastatJnlLine2.SETRANGE("Journal Batch Name",IntrastatJnlBatch.Name);
                               IntrastatJnlLine2.SETCURRENTKEY("Source Type","Source Entry No.");
                               IntrastatJnlLine2.SETRANGE("Source Type",IntrastatJnlLine2."Source Type"::"Item Entry");
                             END;

               OnAfterGetRecord=BEGIN
                                  IF ShowItemCharges THEN BEGIN
                                    IntrastatJnlLine2.SETRANGE("Source Entry No.","Item Ledger Entry No.");
                                    IF IntrastatJnlLine2.FINDFIRST THEN
                                      CurrReport.SKIP;

                                    IF "Item Ledger Entry".GET("Item Ledger Entry No.")
                                    THEN BEGIN
                                      IF "Item Ledger Entry"."Posting Date" IN [StartDate..EndDate] THEN
                                        CurrReport.SKIP;
                                      IF "Country/Region".GET("Item Ledger Entry"."Country/Region Code") THEN
                                        IF "Country/Region"."EU Country/Region Code" = '' THEN
                                          CurrReport.SKIP;
                                      IF NOT HasCrossedBorder("Item Ledger Entry") THEN
                                        CurrReport.SKIP;
                                      InsertValueEntryLine;
                                    END;
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IntraJnlTemplate.GET(IntrastatJnlLine."Journal Template Name");
                   IntrastatJnlBatch.GET(IntrastatJnlLine."Journal Template Name",IntrastatJnlLine."Journal Batch Name");
                   IntrastatJnlBatch.TESTFIELD("Statistics Period");
                   Century := DATE2DMY(WORKDATE,3) DIV 100;
                   EVALUATE(Year,COPYSTR(IntrastatJnlBatch."Statistics Period",3,2));
                   Year := Year + Century * 100;
                   EVALUATE(Month,COPYSTR(IntrastatJnlBatch."Statistics Period",1,2));
                   StartDate := DMY2DATE(1,Month,Year);
                   EndDate := CALCDATE('<+1M-1D>',StartDate);
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 1   ;2   ;Field     ;
                  Name=StartingDate;
                  CaptionML=[ENU=Starting Date;
                             ENG=Starting Date];
                  SourceExpr=StartDate }

      { 2   ;2   ;Field     ;
                  Name=EndingDate;
                  CaptionML=[ENU=Ending Date;
                             ENG=Ending Date];
                  SourceExpr=EndDate }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Cost Regulation %;
                             ENG=Cost Regulation %];
                  DecimalPlaces=0:5;
                  SourceExpr=IndirectCostPctReq }

      { 6   ;1   ;Group     ;
                  CaptionML=[ENU=Additional;
                             ENG=Additional];
                  GroupType=Group }

      { 4   ;2   ;Field     ;
                  Name=SkipRecalcForZeros;
                  CaptionML=[ENU=Skip Recalculation for Zero Amounts;
                             ENG=Skip Recalculation for Zero Amounts];
                  SourceExpr=SkipRecalcZeroAmounts }

      { 5   ;2   ;Field     ;
                  Name=SkipZeros;
                  CaptionML=[ENU=Skip Zero Amounts;
                             ENG=Skip Zero Amounts];
                  SourceExpr=SkipZeroAmounts }

      { 7   ;2   ;Field     ;
                  Name=ShowingItemCharges;
                  CaptionML=[ENU=Show Item Charge Entries;
                             ENG=Show Item Charge Entries];
                  SourceExpr=ShowItemCharges }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Prices including VAT cannot be calculated when %1 is %2.;ENG=Prices including VAT cannot be calculated when %1 is %2.';
      IntraJnlTemplate@1002 : Record 261;
      IntrastatJnlBatch@1003 : Record 262;
      IntrastatJnlLine@1004 : Record 263;
      IntrastatJnlLine2@1005 : Record 263;
      Item@1006 : Record 27;
      ValueEntry@1007 : Record 5802;
      GLSetup@1009 : Record 98;
      CurrExchRate@1010 : Record 330;
      CompanyInfo@1011 : Record 79;
      Currency@1024 : Record 4;
      StartDate@1013 : Date;
      EndDate@1014 : Date;
      IndirectCostPctReq@1015 : Decimal;
      TotalAmt@1017 : Decimal;
      Century@1018 : Integer;
      Year@1019 : Integer;
      Month@1020 : Integer;
      AddCurrencyFactor@1021 : Decimal;
      AverageCost@1022 : Decimal;
      AverageCostACY@1023 : Decimal;
      GLSetupRead@1001 : Boolean;
      ShowBlank@1012 : Boolean;
      TotalIndirectCost@1040000 : Decimal;
      TotalIndirectCostExpected@1040001 : Decimal;
      TotalIndirectCostAmt@1040002 : Decimal;
      TotalIndirectCostAmtExpected@1040003 : Decimal;
      SkipRecalcZeroAmounts@1008 : Boolean;
      SkipZeroAmounts@1016 : Boolean;
      ShowItemCharges@1025 : Boolean;

    PROCEDURE SetIntrastatJnlLine@1(NewIntrastatJnlLine@1000 : Record 263);
    BEGIN
      IntrastatJnlLine := NewIntrastatJnlLine;
    END;

    LOCAL PROCEDURE InsertItemJnlLine@2();
    VAR
      Location@1000 : Record 14;
    BEGIN
      GetGLSetup;
      WITH IntrastatJnlLine DO BEGIN
        INIT;
        "Line No." := "Line No." + 10000;
        Date := "Item Ledger Entry"."Posting Date";
        "Country/Region Code" := "Item Ledger Entry"."Country/Region Code";
        "Transaction Type" := "Item Ledger Entry"."Transaction Type";
        "Transport Method" := "Item Ledger Entry"."Transport Method";
        "Source Entry No." := "Item Ledger Entry"."Entry No.";
        Quantity := "Item Ledger Entry".Quantity;
        "Document No." := "Item Ledger Entry"."Document No.";
        "Item No." := "Item Ledger Entry"."Item No.";
        "Entry/Exit Point" := "Item Ledger Entry"."Entry/Exit Point";
        Area := "Item Ledger Entry".Area;
        "Transaction Specification" := "Item Ledger Entry"."Transaction Specification";
        "Shipment Method Code" := "Item Ledger Entry"."Shipment Method Code";
        Amount := ROUND(ABS(TotalAmt),1);

        IF Quantity < 0 THEN
          Type := Type::Shipment
        ELSE
          Type := Type::Receipt;

        IF ("Country/Region Code" = '') OR
           ("Country/Region Code" = CompanyInfo."Country/Region Code")
        THEN
          IF "Item Ledger Entry"."Location Code" = '' THEN
            "Country/Region Code" := CompanyInfo."Ship-to Country/Region Code"
          ELSE BEGIN
            Location.GET("Item Ledger Entry"."Location Code");
            "Country/Region Code" := Location."Country/Region Code"
          END;

        VALIDATE("Item No.");
        "Source Type" := "Source Type"::"Item Entry";
        VALIDATE(Quantity,ROUND(ABS(Quantity),0.00001));

        IF TotalIndirectCost <> 0 THEN
          VALIDATE("Indirect Cost",ROUND(ABS(TotalIndirectCost),1))
        ELSE
          VALIDATE("Cost Regulation %",IndirectCostPctReq);

        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertJobLedgerLine@3();
    BEGIN
      WITH IntrastatJnlLine DO BEGIN
        INIT;
        "Line No." := "Line No." + 10000;

        Date := "Job Ledger Entry"."Posting Date";
        "Country/Region Code" := "Job Ledger Entry"."Country/Region Code";
        "Transaction Type" := "Job Ledger Entry"."Transaction Type";
        "Transport Method" := "Job Ledger Entry"."Transport Method";
        Quantity := "Job Ledger Entry"."Quantity (Base)";
        IF Quantity > 0 THEN
          Type := Type::Shipment
        ELSE
          Type := Type::Receipt;
        IF IntrastatJnlBatch."Amounts in Add. Currency" THEN
          Amount := "Job Ledger Entry"."Add.-Currency Line Amount"
        ELSE
          Amount := "Job Ledger Entry"."Line Amount (LCY)";
        "Source Entry No." := "Job Ledger Entry"."Entry No.";
        "Document No." := "Job Ledger Entry"."Document No.";
        "Item No." := "Job Ledger Entry"."No.";
        "Entry/Exit Point" := "Job Ledger Entry"."Entry/Exit Point";
        Area := "Job Ledger Entry".Area;
        "Transaction Specification" := "Job Ledger Entry"."Transaction Specification";
        "Shipment Method Code" := "Job Ledger Entry"."Shipment Method Code";

        IF IntrastatJnlBatch."Amounts in Add. Currency" THEN
          Amount := ROUND(ABS(Amount),Currency."Amount Rounding Precision")
        ELSE
          Amount := ROUND(ABS(Amount),GLSetup."Amount Rounding Precision");

        VALIDATE("Item No.");
        "Source Type" := "Source Type"::"Job Entry";
        VALIDATE(Quantity,ROUND(ABS(Quantity),0.00001));

        VALIDATE("Cost Regulation %",IndirectCostPctReq);

        INSERT;
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        IF GLSetup."Additional Reporting Currency" <> '' THEN
          Currency.GET(GLSetup."Additional Reporting Currency");
      END;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE CalculateAverageCost@5801(VAR AverageCost@1001 : Decimal;VAR AverageCostACY@1002 : Decimal) : Boolean;
    VAR
      ValueEntry@1003 : Record 5802;
      ItemLedgEntry@1000 : Record 32;
      AverageQty@1004 : Decimal;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        SETCURRENTKEY("Item No.","Entry Type");
        SETRANGE("Item No.","Item Ledger Entry"."Item No.");
        SETRANGE("Entry Type","Item Ledger Entry"."Entry Type");
        CALCSUMS(Quantity);
      END;

      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item No.","Posting Date","Item Ledger Entry Type");
        SETRANGE("Item No.","Item Ledger Entry"."Item No.");
        SETRANGE("Item Ledger Entry Type","Item Ledger Entry"."Entry Type");
        CALCSUMS(
          "Cost Amount (Actual)",
          "Cost Amount (Expected)");
        "Cost Amount (Actual) (ACY)" :=
          CurrExchRate.ExchangeAmtLCYToFCY(
            EndDate,GLSetup."Additional Reporting Currency","Cost Amount (Actual)",AddCurrencyFactor);
        "Cost Amount (Expected) (ACY)" :=
          CurrExchRate.ExchangeAmtLCYToFCY(
            EndDate,GLSetup."Additional Reporting Currency","Cost Amount (Expected)",AddCurrencyFactor);
        AverageQty := ItemLedgEntry.Quantity;
        AverageCost := "Cost Amount (Actual)" + "Cost Amount (Expected)";
        AverageCostACY := "Cost Amount (Actual) (ACY)" + "Cost Amount (Expected) (ACY)";
      END;
      IF AverageQty <> 0 THEN BEGIN
        AverageCost := AverageCost / AverageQty;
        AverageCostACY := AverageCostACY / AverageQty;
        IF (AverageCost < 0) OR (AverageCostACY < 0) THEN BEGIN
          AverageCost := 0;
          AverageCostACY := 0;
        END;
      END ELSE BEGIN
        AverageCost := 0;
        AverageCostACY := 0;
      END;

      EXIT(AverageQty >= 0);
    END;

    LOCAL PROCEDURE CountryOfOrigin@6(CountryRegionCode@1000 : Code[20]) : Boolean;
    VAR
      CountryRegion@1002 : Record 9;
    BEGIN
      IF ("Item Ledger Entry"."Country/Region Code" IN [CompanyInfo."Country/Region Code",'']) =
         (CountryRegionCode IN [CompanyInfo."Country/Region Code",''])
      THEN
        EXIT(FALSE);

      IF CountryRegionCode <> '' THEN BEGIN
        CountryRegion.GET(CountryRegionCode);
        IF CountryRegion."Intrastat Code" = '' THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE HasCrossedBorder@5(ItemLedgEntry@1003 : Record 32) : Boolean;
    VAR
      ItemLedgEntry2@1002 : Record 32;
      Location@1001 : Record 14;
      Include@1000 : Boolean;
    BEGIN
      WITH ItemLedgEntry DO
        CASE TRUE OF
          "Drop Shipment":
            BEGIN
              IF ("Country/Region Code" = CompanyInfo."Country/Region Code") OR
                 ("Country/Region Code" = '')
              THEN
                EXIT(FALSE);
              IF "Applies-to Entry" = 0 THEN BEGIN
                ItemLedgEntry2.SETCURRENTKEY("Item No.","Posting Date");
                ItemLedgEntry2.SETRANGE("Item No.","Item No.");
                ItemLedgEntry2.SETRANGE("Posting Date","Posting Date");
                ItemLedgEntry2.SETRANGE("Applies-to Entry","Entry No.");
                ItemLedgEntry2.FINDFIRST;
              END ELSE
                ItemLedgEntry2.GET("Applies-to Entry");
              IF (ItemLedgEntry2."Country/Region Code" <> CompanyInfo."Country/Region Code") AND
                 (ItemLedgEntry2."Country/Region Code" <> '')
              THEN
                EXIT(FALSE);
            END;
          "Entry Type" = "Entry Type"::Transfer:
            BEGIN
              IF ("Country/Region Code" = CompanyInfo."Country/Region Code") OR
                 ("Country/Region Code" = '')
              THEN
                EXIT(FALSE);
              IF ("Order Type" <> "Order Type"::Transfer) OR ("Order No." = '') THEN BEGIN
                Location.GET("Location Code");
                IF (Location."Country/Region Code" <> '') AND
                   (Location."Country/Region Code" <> CompanyInfo."Country/Region Code")
                THEN
                  EXIT(FALSE);
              END ELSE BEGIN
                ItemLedgEntry2.SETCURRENTKEY("Order Type","Order No.");
                ItemLedgEntry2.SETRANGE("Order Type","Order Type"::Transfer);
                ItemLedgEntry2.SETRANGE("Order No.","Order No.");
                ItemLedgEntry2.SETFILTER("Country/Region Code",'%1 | %2','',CompanyInfo."Country/Region Code");
                IF ItemLedgEntry2.FINDSET THEN
                  REPEAT
                    Location.GET(ItemLedgEntry2."Location Code");
                    IF Location."Use As In-Transit" THEN
                      Include := TRUE;
                  UNTIL Include OR (ItemLedgEntry2.NEXT = 0);
                IF NOT Include THEN
                  EXIT(FALSE);
              END;
            END;
          "Location Code" <> '':
            BEGIN
              Location.GET("Location Code");
              IF NOT CountryOfOrigin(Location."Country/Region Code") THEN
                EXIT(FALSE);
            END;
          ELSE BEGIN
            IF "Entry Type" = "Entry Type"::Purchase THEN
              IF NOT CountryOfOrigin(CompanyInfo."Ship-to Country/Region Code") THEN
                EXIT(FALSE);
            IF "Entry Type" = "Entry Type"::Sale THEN
              IF NOT CountryOfOrigin(CompanyInfo."Country/Region Code") THEN
                EXIT(FALSE);
          END;
        END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InsertValueEntryLine@8();
    VAR
      Location@1000 : Record 14;
    BEGIN
      GetGLSetup;
      WITH IntrastatJnlLine DO BEGIN
        INIT;
        "Line No." := "Line No." + 10000;
        Date := "Value Entry"."Posting Date";
        "Country/Region Code" := "Item Ledger Entry"."Country/Region Code";
        "Transaction Type" := "Item Ledger Entry"."Transaction Type";
        "Transport Method" := "Item Ledger Entry"."Transport Method";
        "Source Entry No." := "Item Ledger Entry"."Entry No.";
        Quantity := "Item Ledger Entry".Quantity;
        "Document No." := "Value Entry"."Document No.";
        "Item No." := "Item Ledger Entry"."Item No.";
        "Entry/Exit Point" := "Item Ledger Entry"."Entry/Exit Point";
        Area := "Item Ledger Entry".Area;
        "Transaction Specification" := "Item Ledger Entry"."Transaction Specification";
        Amount := ROUND(ABS("Value Entry"."Sales Amount (Actual)"),1);

        IF Quantity < 0 THEN
          Type := Type::Shipment
        ELSE
          Type := Type::Receipt;

        IF ("Country/Region Code" = '') OR
           ("Country/Region Code" = CompanyInfo."Country/Region Code")
        THEN
          IF "Item Ledger Entry"."Location Code" = '' THEN
            "Country/Region Code" := CompanyInfo."Ship-to Country/Region Code"
          ELSE BEGIN
            Location.GET("Item Ledger Entry"."Location Code");
            "Country/Region Code" := Location."Country/Region Code"
          END;

        VALIDATE("Item No.");
        "Source Type" := "Source Type"::"Item Entry";
        VALIDATE(Quantity,ROUND(ABS(Quantity),0.00001));
        VALIDATE("Cost Regulation %",IndirectCostPctReq);

        INSERT;
      END;
    END;

    LOCAL PROCEDURE IsService@4(ItemLedgEntry@1000 : Record 32) : Boolean;
    VAR
      SalesShipmentLine@1006 : Record 111;
      ReturnReceiptLine@1005 : Record 6661;
      SalesCrMemoLine@1102601001 : Record 115;
      SalesInvLine@1102601002 : Record 113;
      PurchRcptLine@1004 : Record 121;
      ReturnShipmentLine@1003 : Record 6651;
      PurchInvLine@1102601003 : Record 123;
      PurchCrMemoLine@1102601004 : Record 125;
      ServiceShipmentLine@1002 : Record 5991;
      ServiceCrMemoLine@1001 : Record 5995;
      ServiceInvLine@1102601005 : Record 5993;
      VATPostingSetup@1102601000 : Record 325;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        CASE TRUE OF
          "Document Type" = "Document Type"::"Sales Shipment":
            IF SalesShipmentLine.GET("Document No.","Document Line No.") THEN
              IF VATPostingSetup.GET(SalesShipmentLine."VAT Bus. Posting Group",SalesShipmentLine."VAT Prod. Posting Group") THEN;
          "Document Type" = "Document Type"::"Sales Return Receipt":
            IF ReturnReceiptLine.GET("Document No.","Document Line No.") THEN
              IF VATPostingSetup.GET(ReturnReceiptLine."VAT Bus. Posting Group",ReturnReceiptLine."VAT Prod. Posting Group") THEN;
          "Document Type" = "Document Type"::"Sales Invoice":
            IF SalesInvLine.GET("Document No.","Document Line No.") THEN
              IF VATPostingSetup.GET(SalesInvLine."VAT Bus. Posting Group",SalesInvLine."VAT Prod. Posting Group") THEN;
          "Document Type" = "Document Type"::"Sales Credit Memo":
            IF SalesCrMemoLine.GET("Document No.","Document Line No.") THEN
              IF VATPostingSetup.GET(SalesCrMemoLine."VAT Bus. Posting Group",SalesCrMemoLine."VAT Prod. Posting Group") THEN;
          "Document Type" = "Document Type"::"Purchase Receipt":
            IF PurchRcptLine.GET("Document No.","Document Line No.") THEN
              IF VATPostingSetup.GET(PurchRcptLine."VAT Bus. Posting Group",PurchRcptLine."VAT Prod. Posting Group") THEN;
          "Document Type" = "Document Type"::"Purchase Return Shipment":
            IF ReturnShipmentLine.GET("Document No.","Document Line No.") THEN
              IF VATPostingSetup.GET(ReturnShipmentLine."VAT Bus. Posting Group",ReturnShipmentLine."VAT Prod. Posting Group") THEN;
          "Document Type" = "Document Type"::"Purchase Invoice":
            IF PurchInvLine.GET("Document No.","Document Line No.") THEN
              IF VATPostingSetup.GET(PurchInvLine."VAT Bus. Posting Group",PurchInvLine."VAT Prod. Posting Group") THEN;
          "Document Type" = "Document Type"::"Purchase Credit Memo":
            IF PurchCrMemoLine.GET("Document No.","Document Line No.") THEN
              IF VATPostingSetup.GET(PurchCrMemoLine."VAT Bus. Posting Group",PurchCrMemoLine."VAT Prod. Posting Group") THEN;
          "Document Type" = "Document Type"::"Service Shipment":
            IF ServiceShipmentLine.GET("Document No.","Document Line No.") THEN
              IF VATPostingSetup.GET(ServiceShipmentLine."VAT Bus. Posting Group",ServiceShipmentLine."VAT Prod. Posting Group") THEN;
          "Document Type" = "Document Type"::"Service Credit Memo":
            IF ServiceCrMemoLine.GET("Document No.","Document Line No.") THEN
              IF VATPostingSetup.GET(ServiceCrMemoLine."VAT Bus. Posting Group",ServiceCrMemoLine."VAT Prod. Posting Group") THEN;
          "Document Type" = "Document Type"::"Service Invoice":
            IF ServiceInvLine.GET("Document No.","Document Line No.") THEN
              IF VATPostingSetup.GET(ServiceInvLine."VAT Bus. Posting Group",ServiceInvLine."VAT Prod. Posting Group") THEN;
        END;
        EXIT(VATPostingSetup."EU Service");
      END;
    END;

    PROCEDURE CalculateTotals@1102601001(ItemLedgerEntry@1102601005 : Record 32);
    VAR
      VATPostingSetup@1102601000 : Record 325;
      TotalInvoicedQty@1102601001 : Decimal;
      TotalCostAmt@1102601002 : Decimal;
      TotalAmtExpected@1102601003 : Decimal;
      TotalCostAmtExpected@1102601004 : Decimal;
      IncludeItemCharge@1102601006 : Boolean;
      ValueEntry2@1102601008 : Record 5802;
      ItemCharge@1102601007 : Record 5800;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        TotalInvoicedQty := 0;
        TotalAmt := 0;
        TotalAmtExpected := 0;
        TotalCostAmt := 0;
        TotalCostAmtExpected := 0;

        TotalIndirectCost := 0;
        TotalIndirectCostExpected := 0;
        TotalIndirectCostAmt := 0;
        TotalIndirectCostAmtExpected := 0;

        ValueEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
        IF ValueEntry.FIND('-') THEN
          REPEAT
            IncludeItemCharge := FALSE;
            ValueEntry2.SETCURRENTKEY("Item Ledger Entry No.");
            IF ValueEntry."Item Charge No." <> '' THEN BEGIN
              ItemCharge.GET(ValueEntry."Item Charge No.");
              IF ItemCharge."Freight/Insurance" THEN BEGIN
                ValueEntry2.SETRANGE("Item Ledger Entry No.","Entry No.");
                ValueEntry2.SETRANGE("Document No.",ValueEntry."Document No.");
                ValueEntry2.SETRANGE("Item Charge No.",'');
                IncludeItemCharge := ValueEntry2.FINDFIRST;
              END;
            END;
            TotalInvoicedQty := TotalInvoicedQty + ValueEntry."Invoiced Quantity";
            IF NOT IntrastatJnlBatch."Amounts in Add. Currency" THEN BEGIN
              IF ValueEntry."Item Charge No." = '' THEN BEGIN
                TotalAmt := TotalAmt + ValueEntry."Sales Amount (Actual)";
                TotalCostAmt := TotalCostAmt + ValueEntry."Cost Amount (Actual)";
                TotalAmtExpected := TotalAmtExpected + ValueEntry."Sales Amount (Expected)";
                TotalCostAmtExpected := TotalCostAmtExpected + ValueEntry."Cost Amount (Expected)";
              END ELSE
                IF IncludeItemCharge THEN BEGIN
                  TotalIndirectCost := TotalIndirectCost + ValueEntry."Sales Amount (Actual)";
                  TotalIndirectCostAmt := TotalIndirectCostAmt + ValueEntry."Cost Amount (Actual)";
                  TotalIndirectCostExpected := TotalIndirectCostExpected + ValueEntry."Sales Amount (Expected)";
                  TotalIndirectCostAmtExpected := TotalIndirectCostAmtExpected + ValueEntry."Cost Amount (Expected)";
                END;
            END ELSE BEGIN
              IF ValueEntry."Item Charge No." = '' THEN BEGIN
                TotalCostAmt := TotalCostAmt + ValueEntry."Cost Amount (Actual) (ACY)";
                TotalCostAmtExpected := TotalCostAmtExpected + ValueEntry."Cost Amount (Expected) (ACY)";
              END ELSE
                IF IncludeItemCharge THEN BEGIN
                  TotalIndirectCostAmt := TotalIndirectCostAmt + ValueEntry."Cost Amount (Actual) (ACY)";
                  TotalIndirectCostAmtExpected := TotalIndirectCostAmtExpected + ValueEntry."Cost Amount (Expected) (ACY)";
                END;
              IF ValueEntry."Cost per Unit" <> 0 THEN BEGIN
                IF ValueEntry."Item Charge No." = '' THEN BEGIN
                  TotalAmt :=
                    TotalAmt +
                    ValueEntry."Sales Amount (Actual)" * ValueEntry."Cost per Unit (ACY)" / ValueEntry."Cost per Unit";
                  TotalAmtExpected :=
                    TotalAmtExpected +
                    ValueEntry."Sales Amount (Expected)" * ValueEntry."Cost per Unit (ACY)" / ValueEntry."Cost per Unit";
                END ELSE
                  IF IncludeItemCharge THEN BEGIN
                    TotalIndirectCost :=
                      TotalIndirectCost +
                      ValueEntry."Sales Amount (Actual)" * ValueEntry."Cost per Unit (ACY)" / ValueEntry."Cost per Unit";
                    TotalIndirectCostExpected :=
                      TotalIndirectCostExpected +
                      ValueEntry."Sales Amount (Expected)" * ValueEntry."Cost per Unit (ACY)" / ValueEntry."Cost per Unit";
                  END;
              END ELSE
                IF ValueEntry."Item Charge No." = '' THEN BEGIN
                  TotalAmt :=
                    TotalAmt +
                    CurrExchRate.ExchangeAmtLCYToFCY(
                      ValueEntry."Posting Date",GLSetup."Additional Reporting Currency",
                      ValueEntry."Sales Amount (Actual)",AddCurrencyFactor);
                  TotalAmtExpected :=
                    TotalAmtExpected +
                    CurrExchRate.ExchangeAmtLCYToFCY(
                      ValueEntry."Posting Date",GLSetup."Additional Reporting Currency",
                      ValueEntry."Sales Amount (Expected)",AddCurrencyFactor);
                END ELSE
                  IF IncludeItemCharge THEN BEGIN
                    TotalIndirectCost :=
                      TotalIndirectCost +
                      CurrExchRate.ExchangeAmtLCYToFCY(
                        ValueEntry."Posting Date",GLSetup."Additional Reporting Currency",
                        ValueEntry."Sales Amount (Actual)",AddCurrencyFactor);
                    TotalIndirectCostExpected :=
                      TotalIndirectCostExpected +
                      CurrExchRate.ExchangeAmtLCYToFCY(
                        ValueEntry."Posting Date",GLSetup."Additional Reporting Currency",
                        ValueEntry."Sales Amount (Expected)",AddCurrencyFactor);
                  END;
            END;
          UNTIL ValueEntry.NEXT = 0;

        IF Quantity <> TotalInvoicedQty THEN BEGIN
          TotalAmt := TotalAmt + TotalAmtExpected;
          TotalCostAmt := TotalCostAmt + TotalCostAmtExpected;
          TotalIndirectCost := TotalIndirectCostExpected;
          TotalIndirectCostAmt := TotalIndirectCostAmtExpected;
        END;

        IF "Entry Type" IN ["Entry Type"::Purchase,"Entry Type"::Transfer] THEN BEGIN
          IF TotalCostAmt = 0 THEN BEGIN
            CalculateAverageCost(AverageCost,AverageCostACY);
            IF IntrastatJnlBatch."Amounts in Add. Currency" THEN
              TotalCostAmt :=
                TotalCostAmt + Quantity * AverageCostACY
            ELSE
              TotalCostAmt :=
                TotalCostAmt + Quantity * AverageCost;
          END;
          TotalAmt := TotalCostAmt;
        END;

        IF (TotalAmt = 0) AND ("Entry Type" = "Entry Type"::Sale) THEN BEGIN
          IF Item."No." <> "Item No." THEN
            Item.GET("Item No.");
          IF IntrastatJnlBatch."Amounts in Add. Currency" THEN
            Item."Unit Price" :=
              CurrExchRate.ExchangeAmtLCYToFCY(
                EndDate,GLSetup."Additional Reporting Currency",
                Item."Unit Price",AddCurrencyFactor);
          IF Item."Price Includes VAT" THEN BEGIN
            VATPostingSetup.GET(Item."VAT Bus. Posting Gr. (Price)",Item."VAT Prod. Posting Group");
            CASE VATPostingSetup."VAT Calculation Type" OF
              VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                VATPostingSetup."VAT %" := 0;
              VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                ERROR(
                  Text000,
                  VATPostingSetup.FIELDCAPTION("VAT Calculation Type"),
                  VATPostingSetup."VAT Calculation Type");
            END;
            TotalAmt :=
              TotalAmt + Quantity *
              (Item."Unit Price" / (1 + (VATPostingSetup."VAT %" / 100)));
          END ELSE
            TotalAmt := TotalAmt + Quantity * Item."Unit Price";
        END;
      END;
    END;

    PROCEDURE IsJobService@1102601000(JobLedgEntry@1102601000 : Record 169) : Boolean;
    VAR
      Job@1102601001 : Record 167;
      Customer@1102601002 : Record 18;
      VATPostingSetup@1102601003 : Record 325;
    BEGIN
      IF Job.GET(JobLedgEntry."Job No.") THEN
        IF Customer.GET(Job."Bill-to Customer No.") THEN;
      IF Item.GET(JobLedgEntry."No.") THEN
        IF VATPostingSetup.GET(Customer."VAT Bus. Posting Group",Item."VAT Prod. Posting Group") THEN
          IF VATPostingSetup."EU Service" THEN
            EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE InitializeRequest@10(NewStartDate@1000 : Date;NewEndDate@1001 : Date;NewIndirectCostPctReq@1002 : Decimal);
    BEGIN
      StartDate := NewStartDate;
      EndDate := NewEndDate;
      IndirectCostPctReq := NewIndirectCostPctReq;
    END;

    LOCAL PROCEDURE IsItemLedgerEntryCorrected@20(ItemLedgerEntryCorrection@1003 : Record 32;ItemLedgerEntryNo@1000 : Integer) : Boolean;
    VAR
      ItemApplicationEntry@1001 : Record 339;
    BEGIN
      ItemApplicationEntry.SETRANGE("Item Ledger Entry No.",ItemLedgerEntryCorrection."Entry No.");
      CASE ItemLedgerEntryCorrection."Document Type" OF
        ItemLedgerEntryCorrection."Document Type"::"Sales Shipment",
        ItemLedgerEntryCorrection."Document Type"::"Purchase Return Shipment":
          ItemApplicationEntry.SETRANGE("Outbound Item Entry No.",ItemLedgerEntryNo);
        ItemLedgerEntryCorrection."Document Type"::"Purchase Receipt",
        ItemLedgerEntryCorrection."Document Type"::"Sales Return Receipt":
          ItemApplicationEntry.SETRANGE("Inbound Item Entry No.",ItemLedgerEntryNo);
      END;
      EXIT(NOT ItemApplicationEntry.ISEMPTY);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

