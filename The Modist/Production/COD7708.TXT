OBJECT Codeunit 7708 Miniform Pick Activity List
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    TableNo=7700;
    OnRun=VAR
            MiniformMgmt@1000 : Codeunit 7702;
          BEGIN
            MiniformMgmt.Initialize(
              MiniformHeader,Rec,DOMxmlin,ReturnedNode,
              RootNode,XMLDOMMgt,ADCSCommunication,ADCSUserId,
              CurrentCode,StackCode,WhseEmpId,LocationFilter);

            IF Code <> CurrentCode THEN
              PrepareData
            ELSE
              ProcessSelection;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      MiniformHeader@1023 : Record 7700;
      MiniformHeader2@1027 : Record 7700;
      XMLDOMMgt@1003 : Codeunit 6224;
      ADCSCommunication@1020 : Codeunit 7701;
      ADCSMgt@1026 : Codeunit 7700;
      ReturnedNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DOMxmlin@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      RootNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Text000@1008 : TextConst 'ENU=Function not Found.;ENG=Function not Found.';
      Text006@1010 : TextConst 'ENU=No input Node found.;ENG=No input Node found.';
      TextValue@1001 : Text[250];
      ADCSUserId@1000 : Text[250];
      WhseEmpId@1009 : Text[250];
      LocationFilter@1019 : Text[250];
      CurrentCode@1005 : Text[250];
      PreviousCode@1012 : Text[250];
      StackCode@1013 : Text[250];
      Remark@1002 : Text[250];
      ActiveInputField@1011 : Integer;
      Text009@1015 : TextConst 'ENU=No Documents found.;ENG=No Documents found.';
      RecRef@1014 : RecordRef;

    LOCAL PROCEDURE ProcessSelection@8();
    VAR
      RecId@1001 : RecordID;
      WhseActivityHeader@1002 : Record 5766;
      FuncGroup@1003 : Record 7702;
      TableNo@1000 : Integer;
    BEGIN
      IF XMLDOMMgt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
        TextValue := ReturnedNode.InnerText
      ELSE
        ERROR(Text006);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);
      EVALUATE(RecId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      IF RecRef.GET(RecId) THEN BEGIN
        RecRef.SETTABLE(WhseActivityHeader);
        WhseActivityHeader.SETCURRENTKEY(Type,"No.");
        WhseActivityHeader.SETRANGE(Type,WhseActivityHeader.Type);
        WhseActivityHeader.SETRANGE("Assigned User ID",WhseEmpId);
        WhseActivityHeader.SETFILTER("Location Code",LocationFilter);
        RecRef.GETTABLE(WhseActivityHeader);
        ADCSCommunication.SetRecRef(RecRef);
      END ELSE BEGIN
        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        EXIT;
      END;

      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);
      ActiveInputField := 1;

      CASE FuncGroup.KeyDef OF
        FuncGroup.KeyDef::Esc:
          ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        FuncGroup.KeyDef::First:
          ADCSCommunication.FindRecRef(RecRef,0,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::LnDn:
          IF NOT ADCSCommunication.FindRecRef(RecRef,1,MiniformHeader."No. of Records in List") THEN
            Remark := Text009;
        FuncGroup.KeyDef::LnUp:
          ADCSCommunication.FindRecRef(RecRef,2,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Last:
          ADCSCommunication.FindRecRef(RecRef,3,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::PgDn:
          IF NOT ADCSCommunication.FindRecRef(RecRef,4,MiniformHeader."No. of Records in List") THEN
            Remark := Text009;
        FuncGroup.KeyDef::PgUp:
          ADCSCommunication.FindRecRef(RecRef,5,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Input:
          BEGIN
            ADCSCommunication.IncreaseStack(DOMxmlin,MiniformHeader.Code);
            ADCSCommunication.GetNextMiniForm(MiniformHeader,MiniformHeader2);
            MiniformHeader2.SaveXMLin(DOMxmlin);
            CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
          END;
        ELSE
          ERROR(Text000);
      END;

      IF NOT (FuncGroup.KeyDef IN [FuncGroup.KeyDef::Esc,FuncGroup.KeyDef::Input]) THEN
        SendForm(ActiveInputField);
    END;

    LOCAL PROCEDURE PrepareData@4();
    VAR
      WhseActivityHeader@1001 : Record 5766;
    BEGIN
      WITH WhseActivityHeader DO BEGIN
        RESET;
        SETRANGE(Type,Type::Pick);
        IF WhseEmpId <> '' THEN BEGIN
          SETRANGE("Assigned User ID",WhseEmpId);
          SETFILTER("Location Code",LocationFilter);
        END;
        IF NOT FINDFIRST THEN BEGIN
          IF ADCSCommunication.GetNodeAttribute(ReturnedNode,'RunReturn') = '0' THEN BEGIN
            ADCSMgt.SendError(Text009);
            EXIT;
          END;
          ADCSCommunication.DecreaseStack(DOMxmlin,PreviousCode);
          MiniformHeader2.GET(PreviousCode);
          MiniformHeader2.SaveXMLin(DOMxmlin);
          CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
        END ELSE BEGIN
          RecRef.GETTABLE(WhseActivityHeader);
          ADCSCommunication.SetRecRef(RecRef);
          ActiveInputField := 1;
          SendForm(ActiveInputField);
        END;
      END;
    END;

    LOCAL PROCEDURE SendForm@1(InputField@1000 : Integer);
    BEGIN
      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,InputField,Remark,ADCSUserId);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSMgt.SendXMLReply(DOMxmlin);
    END;

    BEGIN
    END.
  }
}

