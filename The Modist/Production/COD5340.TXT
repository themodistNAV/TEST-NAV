OBJECT Codeunit 5340 CRM Integration Table Synch.
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    TableNo=5335;
    OnRun=VAR
            CRMConnectionSetup@1002 : Record 5330;
            TempCRMConnectionSetup@1000 : TEMPORARY Record 5330;
            ConnectionName@1001 : Text;
          BEGIN
            CRMConnectionSetup.GET;
            IF NOT CRMConnectionSetup."Is Enabled" THEN
              ERROR(ConnectionNotEnabledErr);

            ConnectionName := RegisterTempConnectionIfNeeded(CRMConnectionSetup,TempCRMConnectionSetup);
            IF ConnectionName <> '' THEN
              SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::CRM,ConnectionName,TRUE);

            IF Direction IN [Direction::ToIntegrationTable,Direction::Bidirectional] THEN
              PerformScheduledSynchToIntegrationTable(Rec);
            IF Direction IN [Direction::FromIntegrationTable,Direction::Bidirectional] THEN
              PerformScheduledSynchFromIntegrationTable(CRMConnectionSetup,Rec);

            IF ConnectionName <> '' THEN
              TempCRMConnectionSetup.UnregisterConnectionWithName(ConnectionName);
          END;

  }
  CODE
  {
    VAR
      ConnectionNotEnabledErr@1005 : TextConst 'ENU=The Microsoft Dynamics CRM connection is not enabled.;ENG=The Microsoft Dynamics CRM connection is not enabled.';
      RecordNotFoundErr@1006 : TextConst '@@@="%1 = Source table caption, %2 = The lookup value when searching for the source record";ENU=Cannot find %1 record %2.;ENG=Cannot find %1 record %2.';
      SourceRecordIsNotInMappingErr@1007 : TextConst '@@@=%1 Integration Table Mapping caption, %2 Integration Table Mapping Name;ENU=Cannot find the mapping %2 in table %1.;ENG=Cannot find the mapping %2 in table %1.';
      CannotDetermineSourceOriginErr@1009 : TextConst '@@@=%1 the value of the source id;ENU=Cannot determine the source origin: %1.;ENG=Cannot determine the source origin: %1.';
      CannotResolveUserFromConnectionSetupErr@1000 : TextConst 'ENU=The Dynamics CRM user that is specified in the CRM connection setup does not exist.;ENG=The Dynamics CRM user that is specified in the CRM connection setup does not exist.';
      SynchronizeEmptySetErr@1001 : TextConst 'ENU=Attempted to synchronize an empty set of records.;ENG=Attempted to synchronise an empty set of records.';

    PROCEDURE SynchRecord@1(IntegrationTableMapping@1002 : Record 5335;SourceID@1000 : Variant;IgnoreChanges@1003 : Boolean;IgnoreSynchOnlyCoupledRecords@1011 : Boolean) : GUID;
    VAR
      CRMConnectionSetup@1001 : Record 5330;
      TempCRMConnectionSetup@1012 : TEMPORARY Record 5330;
      IntegrationTableSynch@1010 : Codeunit 5335;
      RecordRef@1008 : RecordRef;
      IntegrationRecordRef@1009 : RecordRef;
      RecordID@1006 : RecordID;
      CRMID@1005 : GUID;
      JobID@1014 : GUID;
      SynchDirection@1007 : Option;
      ConnectionName@1013 : Text;
    BEGIN
      CRMConnectionSetup.GET;
      IF NOT CRMConnectionSetup."Is Enabled" THEN
        ERROR(ConnectionNotEnabledErr);

      IF SourceID.ISRECORDID THEN BEGIN
        RecordID := SourceID;
        SynchDirection := IntegrationTableMapping.Direction::ToIntegrationTable;
        IF RecordID.TABLENO = 0 THEN
          ERROR(CannotDetermineSourceOriginErr,SourceID);
      END ELSE
        IF SourceID.ISGUID THEN BEGIN
          CRMID := SourceID;
          SynchDirection := IntegrationTableMapping.Direction::FromIntegrationTable;
          IF ISNULLGUID(CRMID) THEN
            ERROR(CannotDetermineSourceOriginErr,SourceID);
        END ELSE
          ERROR(CannotDetermineSourceOriginErr,SourceID);

      IF SynchDirection = IntegrationTableMapping.Direction::ToIntegrationTable THEN BEGIN
        IF NOT (RecordID.TABLENO = IntegrationTableMapping."Table ID") THEN
          ERROR(SourceRecordIsNotInMappingErr,IntegrationTableMapping.TABLECAPTION,IntegrationTableMapping.Name);

        RecordRef.CLOSE;
        IF NOT RecordRef.GET(RecordID) THEN
          ERROR(RecordNotFoundErr,RecordRef.CAPTION,FORMAT(RecordID,0,1));
      END ELSE
        IF NOT IntegrationTableMapping.GetRecordRef(CRMID,IntegrationRecordRef) THEN
          ERROR(RecordNotFoundErr,IntegrationTableMapping.GetExtendedIntegrationTableCaption,CRMID);

      ConnectionName := RegisterTempConnectionIfNeeded(CRMConnectionSetup,TempCRMConnectionSetup);
      IF ConnectionName <> '' THEN
        SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::CRM,ConnectionName,TRUE);

      // Start process
      IntegrationTableSynch.BeginIntegrationSynchJob(TABLECONNECTIONTYPE::CRM,IntegrationTableMapping);
      IF SynchDirection = IntegrationTableMapping.Direction::ToIntegrationTable THEN
        IntegrationTableSynch.Synchronize(RecordRef,IntegrationRecordRef,IgnoreChanges,IgnoreSynchOnlyCoupledRecords)
      ELSE
        IntegrationTableSynch.Synchronize(IntegrationRecordRef,RecordRef,IgnoreChanges,IgnoreSynchOnlyCoupledRecords);
      JobID := IntegrationTableSynch.EndIntegrationSynchJob;

      IF ConnectionName <> '' THEN
        TempCRMConnectionSetup.UnregisterConnectionWithName(ConnectionName);

      EXIT(JobID);
    END;

    PROCEDURE SynchRecordsToIntegrationTable@6(IntegrationTableMapping@1003 : Record 5335;RecordsToSynchRecordRef@1002 : RecordRef;IgnoreChanges@1001 : Boolean;IgnoreSynchOnlyCoupledRecords@1000 : Boolean) : GUID;
    VAR
      CRMConnectionSetup@1011 : Record 5330;
      TempCRMConnectionSetup@1005 : TEMPORARY Record 5330;
      IntegrationTableSynch@1010 : Codeunit 5335;
      IntegrationRecordRef@1008 : RecordRef;
      ConnectionName@1004 : Text;
    BEGIN
      IF RecordsToSynchRecordRef.COUNT = 0 THEN
        ERROR(SynchronizeEmptySetErr);

      CRMConnectionSetup.GET;
      IF NOT CRMConnectionSetup."Is Enabled" THEN
        ERROR(ConnectionNotEnabledErr);

      ConnectionName := RegisterTempConnectionIfNeeded(CRMConnectionSetup,TempCRMConnectionSetup);
      IF ConnectionName <> '' THEN
        SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::CRM,ConnectionName,TRUE);

      IntegrationTableSynch.BeginIntegrationSynchJob(TABLECONNECTIONTYPE::CRM,IntegrationTableMapping);
      REPEAT
        IntegrationTableSynch.Synchronize(RecordsToSynchRecordRef,IntegrationRecordRef,IgnoreChanges,IgnoreSynchOnlyCoupledRecords)
      UNTIL RecordsToSynchRecordRef.NEXT = 0;

      IF ConnectionName <> '' THEN
        TempCRMConnectionSetup.UnregisterConnectionWithName(ConnectionName);

      EXIT(IntegrationTableSynch.EndIntegrationSynchJob);
    END;

    LOCAL PROCEDURE PerformScheduledSynchToIntegrationTable@3(VAR IntegrationTableMapping@1000 : Record 5335);
    VAR
      IntegrationRecord@1005 : Record 5151;
      ModifiedOnIntegrationRecord@1004 : Record 5151;
      CRMIntegrationRecord@1003 : Record 5331;
      IntegrationTableSynch@1006 : Codeunit 5335;
      SourceRecordRef@1002 : RecordRef;
      DestinationRecordRef@1007 : RecordRef;
      SourceLookupRecordRef@1011 : RecordRef;
      LatestModifiedOn@1009 : DateTime;
      TableFilter@1008 : Text;
      Found@1012 : Boolean;
      IgnoreRecord@1010 : Boolean;
    BEGIN
      SourceRecordRef.OPEN(IntegrationTableMapping."Table ID");

      IntegrationRecord.SETRANGE("Table ID",IntegrationTableMapping."Table ID");
      IF IntegrationTableMapping."Synch. Modified On Filter" <> 0DT THEN
        IntegrationRecord.SETFILTER("Modified On",'>%1',IntegrationTableMapping."Synch. Modified On Filter");

      // Enhancement opportunity: Filter on items changed by others than the integration user

      // Peform synch.
      IntegrationTableSynch.BeginIntegrationSynchJob(TABLECONNECTIONTYPE::CRM,IntegrationTableMapping);

      LatestModifiedOn := 0DT;
      IF NOT IntegrationRecord.FINDSET THEN BEGIN
        IntegrationTableSynch.EndIntegrationSynchJob;
        EXIT;
      END;

      SourceLookupRecordRef.OPEN(IntegrationTableMapping."Table ID");
      TableFilter := IntegrationTableMapping.GetTableFilter;
      IF TableFilter <> '' THEN
        SourceLookupRecordRef.SETVIEW(TableFilter);

      REPEAT
        Found := FALSE;
        IgnoreRecord := FALSE;

        IF NOT IntegrationTableMapping."Synch. Only Coupled Records" THEN
          IF SourceRecordRef.GET(IntegrationRecord."Record ID") THEN
            IF TableFilter <> '' THEN BEGIN
              // Verify record is in the source lookup filtered view
              Found := FALSE;
              IF SourceLookupRecordRef.FINDSET THEN
                REPEAT
                  IF SourceLookupRecordRef.RECORDID = SourceRecordRef.RECORDID THEN BEGIN
                    OnQueryPostFilterIgnoreRecord(IntegrationTableMapping,SourceRecordRef,IgnoreRecord);
                    IF NOT IgnoreRecord THEN
                      Found := TRUE;
                  END;
                UNTIL (Found OR IgnoreRecord OR (SourceLookupRecordRef.NEXT = 0))
            END ELSE
              Found := TRUE;

        IF (NOT Found) AND (NOT IgnoreRecord) THEN
          IF CRMIntegrationRecord.IsRecordCoupled(IntegrationRecord."Record ID") THEN BEGIN
            SourceRecordRef.GET(IntegrationRecord."Record ID");
            Found := TRUE;
          END;

        IF Found THEN
          IF IntegrationTableSynch.Synchronize(SourceRecordRef,DestinationRecordRef,FALSE,FALSE) THEN BEGIN
            ModifiedOnIntegrationRecord.FindByRecordId(SourceRecordRef.RECORDID);
            IF ModifiedOnIntegrationRecord."Modified On" > LatestModifiedOn THEN
              LatestModifiedOn := ModifiedOnIntegrationRecord."Modified On";
          END;
      UNTIL (IntegrationRecord.NEXT = 0);

      IntegrationTableSynch.EndIntegrationSynchJob;

      IF (LatestModifiedOn <> 0DT) AND (LatestModifiedOn > IntegrationTableMapping."Synch. Modified On Filter") THEN BEGIN
        IntegrationTableMapping."Synch. Modified On Filter" := LatestModifiedOn;
        IntegrationTableMapping.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE PerformScheduledSynchFromIntegrationTable@4(CRMConnectionSetup@1005 : Record 5330;VAR IntegrationTableMapping@1000 : Record 5335);
    VAR
      CRMSystemuser@1003 : Record 5340;
      TempCRMIntegrationRecord@1011 : TEMPORARY Record 5331;
      CRMIntegrationRecord@1014 : Record 5331;
      Field@1010 : Record 2000000041;
      IntegrationTableSynch@1004 : Codeunit 5335;
      SourceRecordRef@1002 : RecordRef;
      DestinationRecordRef@1001 : RecordRef;
      SourceFieldRef@1009 : FieldRef;
      IntegrationUserId@1012 : GUID;
      ModifiedOn@1006 : DateTime;
      LatestModifiedOn@1007 : DateTime;
      TableFilter@1013 : Text;
      DoIgnoreRecord@1008 : Boolean;
    BEGIN
      SourceRecordRef.OPEN(IntegrationTableMapping."Integration Table ID");

      // Set Filter
      TableFilter := IntegrationTableMapping.GetIntegrationTableFilter;
      IF TableFilter <> '' THEN
        SourceRecordRef.SETVIEW(TableFilter);

      // Add filter by last modified date
      IF IntegrationTableMapping."Synch. Int. Tbl. Mod. On Fltr." <> 0DT THEN BEGIN
        SourceFieldRef := SourceRecordRef.FIELD(IntegrationTableMapping."Int. Tbl. Modified On Fld. No.");
        SourceFieldRef.SETFILTER('>%1',IntegrationTableMapping."Synch. Int. Tbl. Mod. On Fltr.");
      END;

      // Add filter on items changed by others than the integration user
      Field.SETRANGE(TableNo,IntegrationTableMapping."Integration Table ID");
      // All CRM objects sould have the same ModifiedBy field
      Field.SETRANGE(FieldName,CRMSystemuser.FIELDNAME(ModifiedBy));
      Field.FINDFIRST;
      IntegrationUserId := CRMConnectionSetup.GetIntegrationUserID;
      IF ISNULLGUID(IntegrationUserId) THEN
        ERROR(CannotResolveUserFromConnectionSetupErr);
      SourceFieldRef := SourceRecordRef.FIELD(Field."No.");
      SourceFieldRef.SETFILTER('<>%1',IntegrationUserId);

      CreateCRMIntegrationRecordClone(IntegrationTableMapping."Table ID",TempCRMIntegrationRecord);

      // Peform synch.
      IntegrationTableSynch.BeginIntegrationSynchJob(TABLECONNECTIONTYPE::CRM,IntegrationTableMapping);

      LatestModifiedOn := 0DT;
      IF SourceRecordRef.FINDSET THEN
        REPEAT
          DoIgnoreRecord := FALSE;
          OnQueryPostFilterIgnoreRecord(IntegrationTableMapping,SourceRecordRef,DoIgnoreRecord);
          IF NOT DoIgnoreRecord THEN BEGIN
            SourceFieldRef := SourceRecordRef.FIELD(IntegrationTableMapping."Integration Table UID Fld. No.");
            TempCRMIntegrationRecord.RESET;
            TempCRMIntegrationRecord.SETRANGE("CRM ID",FORMAT(SourceFieldRef.VALUE));
            IF TempCRMIntegrationRecord.FINDFIRST THEN
              TempCRMIntegrationRecord.DELETE
            ELSE
              IF IntegrationTableMapping."Synch. Only Coupled Records" THEN
                DoIgnoreRecord := TRUE;
            IF NOT DoIgnoreRecord THEN
              IF IntegrationTableSynch.Synchronize(SourceRecordRef,DestinationRecordRef,FALSE,FALSE) THEN BEGIN
                ModifiedOn := IntegrationTableSynch.GetRowLastModifiedOn(IntegrationTableMapping,SourceRecordRef);
                IF ModifiedOn > LatestModifiedOn THEN
                  LatestModifiedOn := ModifiedOn;
              END;
          END;
        UNTIL (SourceRecordRef.NEXT = 0);

      SourceRecordRef.RESET;
      SourceFieldRef := SourceRecordRef.FIELD(IntegrationTableMapping."Integration Table UID Fld. No.");
      IF TempCRMIntegrationRecord.FINDSET THEN
        REPEAT
          SourceFieldRef.SETRANGE(TempCRMIntegrationRecord."CRM ID");
          IF NOT SourceRecordRef.FINDFIRST THEN
            CRMIntegrationRecord.RemoveCouplingToCRMID(TempCRMIntegrationRecord."CRM ID",IntegrationTableMapping."Table ID");
        UNTIL TempCRMIntegrationRecord.NEXT = 0;

      IntegrationTableSynch.EndIntegrationSynchJob;

      IF (LatestModifiedOn <> 0DT) AND (LatestModifiedOn > IntegrationTableMapping."Synch. Int. Tbl. Mod. On Fltr.") THEN BEGIN
        IntegrationTableMapping."Synch. Int. Tbl. Mod. On Fltr." := LatestModifiedOn;
        IntegrationTableMapping.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateCRMIntegrationRecordClone@5(ForTable@1000 : Integer;VAR TempCRMIntegrationRecord@1001 : TEMPORARY Record 5331);
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
    BEGIN
      TempCRMIntegrationRecord.RESET;
      TempCRMIntegrationRecord.DELETEALL;

      CRMIntegrationRecord.SETRANGE("Table ID",ForTable);
      IF NOT CRMIntegrationRecord.FINDSET THEN
        EXIT;

      REPEAT
        TempCRMIntegrationRecord.COPY(CRMIntegrationRecord,FALSE);
        TempCRMIntegrationRecord.INSERT;
      UNTIL CRMIntegrationRecord.NEXT = 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnQueryPostFilterIgnoreRecord@2(IntegrationTableMapping@1000 : Record 5335;SourceRecordRef@1001 : RecordRef;VAR IgnoreRecord@1002 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE RegisterTempConnectionIfNeeded@7(CRMConnectionSetup@1000 : Record 5330;VAR TempCRMConnectionSetup@1001 : TEMPORARY Record 5330) ConnectionName : Text;
    BEGIN
      IF CRMConnectionSetup."Is User Mapping Required" THEN BEGIN
        ConnectionName := FORMAT(CREATEGUID);
        TempCRMConnectionSetup.TRANSFERFIELDS(CRMConnectionSetup);
        TempCRMConnectionSetup."Is User Mapping Required" := FALSE;
        TempCRMConnectionSetup.RegisterConnectionWithName(ConnectionName);
      END;
    END;

    BEGIN
    END.
  }
}

