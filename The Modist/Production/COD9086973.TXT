OBJECT Codeunit 9086973 nF. Variant Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=[ 2:01:37 PM];
    Version List=NF2016.17;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Record@1000000000 : Variant;
      RecordModified@1000000002 : Boolean;
      RecRef@1000000001 : RecordRef;
      FldRef@1000000003 : FieldRef;

    PROCEDURE IsEmpty@1000000004(pVariant@1000000000 : Variant) : Boolean;
    VAR
      lBooleanValue@1000000005 : Boolean;
      lIntegerValue@1000000006 : Integer;
      lDecimalValue@1000000007 : Decimal;
      lTextValue@1000000008 : Text;
      lDateValue@1000000013 : Date;
      lTimeValue@1000000014 : Time;
      lDateTimeValue@1000000012 : DateTime;
      lDateFormulaValue@1000000011 : DateFormula;
      lDurationValue@1000000010 : Duration;
      lGuidValue@1000000009 : GUID;
      lEmptyDateFormula@1000000001 : DateFormula;
      lEmptyDuration@1000000002 : Duration;
      lEmptyGuid@1000000003 : GUID;
      eNotSupported@1000000004 : TextConst 'ENU=Function "IsEmpty" is not supported for variant "%1";ENG=Function "IsEmpty" is not supported for variant "%1"';
    BEGIN
      ///<summary>Returning if variant is empty</summary>
      ///<param name="pVariant">The variant</param>
      ///<returns>The answer</returns>

      CASE (TRUE) OF
        pVariant.ISBOOLEAN():
          BEGIN
            lBooleanValue := pVariant;
            EXIT(lBooleanValue = FALSE);
          END;
        pVariant.ISBIGINTEGER(),
        pVariant.ISINTEGER(),
        pVariant.ISOPTION(),
        pVariant.ISCHAR():
          BEGIN
            lIntegerValue := pVariant;
            EXIT(lIntegerValue = 0);
          END;
        pVariant.ISDECIMAL():
          BEGIN
            lDecimalValue := pVariant;
            EXIT(lDecimalValue = 0);
          END;
        pVariant.ISCODE(),
        pVariant.ISTEXT():
          BEGIN
            lTextValue := pVariant;
            EXIT(lTextValue = '');
          END;
        pVariant.ISDATE():
          BEGIN
            lDateValue := pVariant;
            EXIT(lDateValue = 0D);
          END;
        pVariant.ISTIME():
          BEGIN
            lTimeValue := pVariant;
            EXIT(lTimeValue = 0T);
          END;
        pVariant.ISDATETIME():
          BEGIN
            lDateTimeValue := pVariant;
            EXIT(lDateTimeValue = 0DT);
          END;
        pVariant.ISDATEFORMULA():
          BEGIN
            lDateFormulaValue := pVariant;
            EXIT(lDateFormulaValue = lEmptyDateFormula);
          END;
        pVariant.ISDURATION():
          BEGIN
            lDurationValue := pVariant;
            EXIT(lDurationValue = lEmptyDuration);
          END;
        pVariant.ISGUID():
          BEGIN
            lGuidValue := pVariant;
            EXIT(lGuidValue = lEmptyGuid);
          END;
        ELSE
          ERROR(eNotSupported, FORMAT(pVariant));
      END;
    END;

    PROCEDURE GetEmptyValue@1000000053(pVariant@1000000001 : Variant;VAR pValue@1000000000 : Variant);
    VAR
      eNotSupported@1000000005 : TextConst 'ENU=Function "GetVariantEmptyValue" is not supported for variant "%1";ENG=Function "GetVariantEmptyValue" is not supported for variant "%1"';
      lEmptyDateFormula@1000000004 : DateFormula;
      lEmptyDuration@1000000003 : Duration;
      lEmptyGuid@1000000002 : GUID;
    BEGIN
      ///<summary>Returning empty value</summary>
      ///<param name="pVariant">The variant</param>
      ///<param name="pValue">Target value</param>

      CASE (TRUE) OF
        pVariant.ISBOOLEAN():
          pValue := FALSE;
        pVariant.ISBIGINTEGER(),
        pVariant.ISINTEGER(),
        pVariant.ISOPTION(),
        pVariant.ISCHAR():
          pValue := 0;
        pVariant.ISDECIMAL():
          pValue := 0.0;
        pVariant.ISCODE(),
        pVariant.ISTEXT():
          pValue := '';
        pVariant.ISDATE():
          pValue := 0D;
        pVariant.ISTIME():
          pValue := 0T;
        pVariant.ISDATETIME():
          pValue := 0DT;
        pVariant.ISDATEFORMULA():
          pValue := lEmptyDateFormula;
        pVariant.ISDURATION():
          pValue := lEmptyDuration;
        pVariant.ISGUID():
          pValue := lEmptyGuid;
        ELSE
          ERROR(eNotSupported, FORMAT(pVariant));
      END;
    END;

    PROCEDURE AreEqual@1000000055(VAR pVariant1@1000000000 : Variant;VAR pVariant2@1000000001 : Variant) : Boolean;
    BEGIN
      ///<summary>Answering if two variants are equal</summary>
      ///<param name="pVariant1">First variant</param>
      ///<param name="pVariant2">Second variant</param>
      ///<returns>The answer</returns>

      IF (((pVariant1.ISACTION()) AND (pVariant2.ISACTION())) OR
          ((pVariant1.ISAUTOMATION()) AND (pVariant2.ISAUTOMATION())) OR
          ((pVariant1.ISBIGINTEGER()) AND (pVariant2.ISBIGINTEGER())) OR
          ((pVariant1.ISBINARY()) AND (pVariant2.ISBINARY())) OR
          ((pVariant1.ISBOOLEAN()) AND (pVariant2.ISBOOLEAN())) OR
          ((pVariant1.ISCHAR()) AND (pVariant2.ISCHAR())) OR
          ((pVariant1.ISCLIENTTYPE()) AND (pVariant2.ISCLIENTTYPE())) OR
          ((pVariant1.ISCODE()) AND (pVariant2.ISCODE())) OR
          ((pVariant1.ISCODEUNIT()) AND (pVariant2.ISCODEUNIT())) OR
          ((pVariant1.ISDATE()) AND (pVariant2.ISDATE())) OR
          ((pVariant1.ISDATEFORMULA()) AND (pVariant2.ISDATEFORMULA())) OR
          ((pVariant1.ISDATETIME()) AND (pVariant2.ISDATETIME())) OR
          ((pVariant1.ISDECIMAL()) AND (pVariant2.ISDECIMAL())) OR
          ((pVariant1.ISDEFAULTLAYOUT()) AND (pVariant2.ISDEFAULTLAYOUT())) OR
          ((pVariant1.ISDOTNET()) AND (pVariant2.ISDOTNET())) OR
          ((pVariant1.ISDURATION()) AND (pVariant2.ISDURATION())) OR
          ((pVariant1.ISEXECUTIONMODE()) AND (pVariant2.ISEXECUTIONMODE())) OR
          ((pVariant1.ISFIELDREF()) AND (pVariant2.ISFIELDREF())) OR
          ((pVariant1.ISFILE()) AND (pVariant2.ISFILE())) OR
          ((pVariant1.ISFILTERPAGEBUILDER()) AND (pVariant2.ISFILTERPAGEBUILDER())) OR
          ((pVariant1.ISGUID()) AND (pVariant2.ISGUID())) OR
          ((pVariant1.ISINSTREAM()) AND (pVariant2.ISINSTREAM())) OR
          ((pVariant1.ISINTEGER()) AND (pVariant2.ISINTEGER())) OR
          ((pVariant1.ISOBJECTTYPE()) AND (pVariant2.ISOBJECTTYPE())) OR
          ((pVariant1.ISOPTION()) AND (pVariant2.ISOPTION())) OR
          ((pVariant1.ISOUTSTREAM()) AND (pVariant2.ISOUTSTREAM())) OR
          ((pVariant1.ISRECORD()) AND (pVariant2.ISRECORD())) OR
          ((pVariant1.ISRECORDID()) AND (pVariant2.ISRECORDID())) OR
          ((pVariant1.ISRECORDREF()) AND (pVariant2.ISRECORDREF())) OR
          ((pVariant1.ISREPORTFORMAT()) AND (pVariant2.ISREPORTFORMAT())) OR
          ((pVariant1.ISSECURITYFILTERING()) AND (pVariant2.ISSECURITYFILTERING())) OR
          ((pVariant1.ISTABLECONNECTIONTYPE()) AND (pVariant2.ISTABLECONNECTIONTYPE())) OR
          ((pVariant1.ISTEXT()) AND (pVariant2.ISTEXT())) OR
          ((pVariant1.ISTEXTENCODING()) AND (pVariant2.ISTEXTENCODING())) OR
          ((pVariant1.ISTIME()) AND (pVariant2.ISTIME())) OR
          ((pVariant1.ISTRANSACTIONTYPE()) AND (pVariant2.ISTRANSACTIONTYPE())) OR
          ((pVariant1.ISWIDECHAR()) AND (pVariant2.ISWIDECHAR()))) THEN
        EXIT(FORMAT(pVariant1, 0, 1) = FORMAT(pVariant2, 0, 1))
      ELSE
        EXIT(FALSE);
    END;

    BEGIN
    {
      ///<summary>ECom tool functions</summary>
      ///<remarks>These functions shouldn't be here. They should be replaced by references to existing nHanced NAV functions</remarks>
      ///<change version="NF2016.17" initials="JH" date="2016-10-2410">Created</change>
    }
    END.
  }
}

