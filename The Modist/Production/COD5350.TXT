OBJECT Codeunit 5350 CRM Statistics Job
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=BEGIN
            IF NOT CreateOrUpdateCRMAccountStatisticsForCoupledCustomers THEN
              SetErrorMessage(GETLASTERRORTEXT);
          END;

  }
  CODE
  {
    VAR
      OneOrMoreFailuresErr@1000 : TextConst '@@@="%1 = Error messages";ENU=One or more failures occurred while updating customer statistics in CRM. \%1.;ENG=One or more failures occurred while updating customer statistics in CRM. \%1.';

    [TryFunction]
    LOCAL PROCEDURE CreateOrUpdateCRMAccountStatisticsForCoupledCustomers@1();
    VAR
      IntegrationRecord@1000 : Record 5151;
      CRMIntegrationRecord@1001 : Record 5331;
      CustomerRecordID@1003 : RecordID;
      CRMID@1002 : GUID;
      Errors@1004 : Text;
    BEGIN
      IntegrationRecord.SETRANGE("Table ID",DATABASE::Customer);
      IntegrationRecord.SETRANGE("Deleted On",0DT);
      IF NOT IntegrationRecord.FINDSET THEN
        EXIT;

      REPEAT
        CustomerRecordID := IntegrationRecord."Record ID";
        IF CRMIntegrationRecord.FindIDFromRecordID(CustomerRecordID,CRMID) THEN
          IF NOT CreateOrUpdateCRMAccountStatisticsForCoupledCustomer(CustomerRecordID,CRMID) THEN
            Errors := Errors + '\' + GETLASTERRORTEXT;
      UNTIL IntegrationRecord.NEXT = 0;
      IF Errors <> '' THEN
        ERROR(OneOrMoreFailuresErr,Errors);
    END;

    [TryFunction]
    LOCAL PROCEDURE CreateOrUpdateCRMAccountStatisticsForCoupledCustomer@2(CustomerRecordID@1000 : RecordID;CRMAccountID@1004 : GUID);
    VAR
      Customer@1001 : Record 18;
      CRMAccount@1005 : Record 5341;
    BEGIN
      Customer.GET(CustomerRecordID);
      CRMAccount.GET(CRMAccountID);
      CreateOrUpdateCRMAccountStatistics(Customer,CRMAccount);
    END;

    PROCEDURE CreateOrUpdateCRMAccountStatistics@3(Customer@1001 : Record 18;VAR CRMAccount@1000 : Record 5341);
    VAR
      CRMAccountStatistics@1002 : Record 5367;
      CRMIntegrationRecord@1003 : Record 5331;
      LcyCRMTransactioncurrency@1004 : Record 5345;
      CRMSynchHelper@1005 : Codeunit 5342;
    BEGIN
      CRMSynchHelper.GetOrCreateNAVLCYInCRM(LcyCRMTransactioncurrency);

      IF ISNULLGUID(CRMAccount.AccountStatiticsId) THEN BEGIN
        WITH CRMAccountStatistics DO BEGIN
          INIT;
          AccountStatisticsId := CREATEGUID;
          Name := CRMAccount.Name;

          // Set all Money type fields to 1 temporarily, because if they have always been zero they show as '--' in CRM
          "Balance (LCY)" := 1;
          "Outstanding Orders (LCY)" := 1;
          "Shipped Not Invoiced (LCY)" := 1;
          "Outstanding Invoices (LCY)" := 1;
          "Outstanding Serv Orders (LCY)" := 1;
          "Serv Shipped Not Invd (LCY)" := 1;
          "Outstd Serv Invoices (LCY)" := 1;
          "Total (LCY)" := 1;
          "Credit Limit (LCY)" := 1;
          "Overdue Amounts (LCY)" := 1;
          "Total Sales (LCY)" := 1;
          "Invd Prepayment Amount (LCY)" := 1;

          INSERT;
        END;

        // Relate the Account to the Account Statistics, without changing whether is it perceived as modified since last synch
        CRMAccount.AccountStatiticsId := CRMAccountStatistics.AccountStatisticsId;
        IF NOT CRMIntegrationRecord.IsModifiedAfterLastSynchonizedCRMRecord(
             CRMAccount.AccountId,DATABASE::Customer,CRMAccount.ModifiedOn)
        THEN BEGIN
          CRMAccount.MODIFY;
          CRMIntegrationRecord.SetLastSynchCRMModifiedOn(CRMAccount.AccountId,DATABASE::Customer,CRMAccount.ModifiedOn);
        END ELSE
          CRMAccount.MODIFY;
      END ELSE BEGIN
        CRMAccountStatistics.SETRANGE(AccountStatisticsId,CRMAccount.AccountStatiticsId);
        CRMAccountStatistics.FINDFIRST;
      END;

      // Update customer statistics
      Customer.CALCFIELDS("Balance (LCY)","Outstanding Orders (LCY)","Shipped Not Invoiced (LCY)",
        "Outstanding Invoices (LCY)","Outstanding Serv. Orders (LCY)","Serv Shipped Not Invoiced(LCY)",
        "Outstanding Serv.Invoices(LCY)");
      WITH CRMAccountStatistics DO BEGIN
        "Customer No" := Customer."No.";
        "Balance (LCY)" := Customer."Balance (LCY)";
        "Outstanding Orders (LCY)" := Customer."Outstanding Orders (LCY)";
        "Shipped Not Invoiced (LCY)" := Customer."Shipped Not Invoiced (LCY)";
        "Outstanding Invoices (LCY)" := Customer."Outstanding Invoices (LCY)";
        "Outstanding Serv Orders (LCY)" := Customer."Outstanding Serv. Orders (LCY)";
        "Serv Shipped Not Invd (LCY)" := Customer."Serv Shipped Not Invoiced(LCY)";
        "Outstd Serv Invoices (LCY)" := Customer."Outstanding Serv.Invoices(LCY)";
        "Total (LCY)" := Customer.GetTotalAmountLCY;
        "Credit Limit (LCY)" := Customer."Credit Limit (LCY)";
        "Overdue Amounts (LCY)" := Customer.CalcOverdueBalance;
        "Overdue Amounts As Of Date" := WORKDATE;
        "Total Sales (LCY)" := Customer.GetSalesLCY;
        "Invd Prepayment Amount (LCY)" := Customer.GetInvoicedPrepmtAmountLCY;
        TransactionCurrencyId := LcyCRMTransactioncurrency.TransactionCurrencyId;
        MODIFY;
      END;
    END;

    BEGIN
    END.
  }
}

