OBJECT Codeunit 9650 Edit MS Word Report Layout
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    TableNo=9650;
    OnRun=BEGIN
            EditReportLayout(Rec);
          END;

  }
  CODE
  {
    VAR
      LoadDocQst@1000 : TextConst 'ENU=The report layout document has been edited in Word.\\Do you want to import the changes?;ENG=The report layout document has been edited in Word.\\Do you want to import the changes?';
      WordNotFoundErr@1003 : TextConst 'ENU=You cannot edit the report layout because Microsoft Word is not available on your computer. To edit the report layout, you must install a supported version of Word.;ENG=You cannot edit the report layout because Microsoft Word is not available on your computer. To edit the report layout, you must install a supported version of Word.';
      WaitMsg@1001 : TextConst 'ENU=Please wait while the report layout opens in Word.\After the report layout opens in Word, make changes to the layout,\and then close the Word document to continue.;ENG=Please wait while the report layout opens in Word.\After the report layout opens in Word, make changes to the layout,\and then close the Word document to continue.';
      Window@1002 : Dialog;

    LOCAL PROCEDURE EditReportLayout@4(VAR CustomReportLayout@1015 : Record 9650);
    VAR
      TempBlob@1009 : Record 99008535;
      FileMgt@1005 : Codeunit 419;
      WordApplication@1001 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1000 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      WdWindowState@1006 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.WdWindowState" RUNONCLIENT;
      WordHelper@1016 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHelper" RUNONCLIENT;
      WordHandler@1007 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHandler" RUNONCLIENT;
      FileName@1003 : Text;
      NewFileName@1008 : Text;
      ErrorMessage@1004 : Text;
      LoadModifiedDoc@1002 : Boolean;
    BEGIN
      CustomReportLayout.CALCFIELDS(Layout);
      CustomReportLayout.TESTFIELD(Layout);

      IF NOT CANLOADTYPE(WordApplication) THEN
        ERROR(WordNotFoundErr);

      Window.OPEN(WaitMsg);

      TempBlob.INIT;
      TempBlob.Blob := CustomReportLayout.Layout;
      FileName := FileMgt.BLOBExport(TempBlob,FileName,FALSE);

      WordApplication := WordHelper.GetApplication(ErrorMessage);
      IF ISNULL(WordApplication) THEN
        ERROR(WordNotFoundErr);

      // Open word and wait for the document to be closed
      WordHandler := WordHandler.WordHandler;
      WordDocument := WordHelper.CallOpen(WordApplication,FileName,FALSE,FALSE);
      WordDocument.ActiveWindow.Caption := CustomReportLayout."Report Name" + ' ' + CustomReportLayout.Description;
      WordDocument.Application.Visible := TRUE; // Visible before WindowState KB176866 - http://support.microsoft.com/kb/176866
      WordDocument.ActiveWindow.WindowState := WdWindowState.wdWindowStateNormal;

      // Push the word app to foreground
      WordApplication.WindowState := WdWindowState.wdWindowStateMinimize;
      WordApplication.Visible := TRUE;
      WordApplication.Activate;
      WordApplication.WindowState := WdWindowState.wdWindowStateNormal;

      WordDocument.Saved := TRUE;
      WordDocument.Application.Activate;

      NewFileName := WordHandler.WaitForDocument(WordDocument);
      Window.CLOSE;
      CLEAR(WordApplication);

      LoadModifiedDoc := CONFIRM(LoadDocQst);

      IF LoadModifiedDoc THEN BEGIN
        FileMgt.BLOBImport(TempBlob,NewFileName);
        CustomReportLayout.ImportLayoutBlob(TempBlob,'');
      END;

      FileMgt.DeleteClientFile(FileName);
      IF FileName <> NewFileName THEN
        FileMgt.DeleteClientFile(NewFileName);
    END;

    BEGIN
    END.
  }
}

