OBJECT Table 9087043 Replenishment Line
{
  OBJECT-PROPERTIES
  {
    Date=05/10/16;
    Time=12:28:48 PM;
    Version List=NS2016.16;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Replenishment Template Code");
               Rec.TESTFIELD("Replenishment Batch Code");
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    CaptionML=[ENU=Replenishment Line;
               ENG=Replenishment Line];
  }
  FIELDS
  {
    { 1   ;   ;Replenishment Template Code;Code20 ;TableRelation="Replenishment Template";
                                                   CaptionML=[ENU=Replenishment Template Code;
                                                              ENG=Replenishment Template Code] }
    { 2   ;   ;Replenishment Batch Code;Code20    ;TableRelation="Replenishment Batch".Code WHERE (Replenishment Template Code=FIELD(Replenishment Template Code));
                                                   CaptionML=[ENU=Replenishment Batch Code;
                                                              ENG=Replenishment Batch Code] }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
    { 20  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=VAR
                                                                lItemUnitOfMeasure@1000000000 : Record 5404;
                                                              BEGIN
                                                                IF (Rec."Item No." <> xRec."Item No.") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Variant Code", '');
                                                                  IF (Rec."Item No." <> '') THEN
                                                                  BEGIN
                                                                    Item.GET(Rec."Item No.");
                                                                    Item.TESTFIELD(Blocked, FALSE);
                                                                    Item.TESTFIELD("Base Unit of Measure");
                                                                  END
                                                                  ELSE
                                                                    CLEAR(Item);
                                                                  Rec.VALIDATE("Unit of Measure Code", Item."Base Unit of Measure");
                                                                  UpdateDescription();
                                                                END;
                                                                Rec.CALCFIELDS("Item Description");
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ENG=Item No.] }
    { 21  ;   ;Item Description    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item.Description WHERE (No.=FIELD(Item No.)));
                                                   CaptionML=[ENU=Item Description;
                                                              ENG=Item Description];
                                                   Editable=No }
    { 30  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Variant Code" <> xRec."Variant Code") THEN
                                                                  UpdateDescription();
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ENG=Variant Code] }
    { 40  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 41  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENG=Description 2] }
    { 50  ;   ;From Location Code  ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=From Location Code;
                                                              ENG=From Location Code] }
    { 60  ;   ;To Location Code    ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=To Location Code;
                                                              ENG=To Location Code] }
    { 70  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENG=Unit of Measure Code] }
    { 80  ;   ;Required Quantity   ;Decimal       ;CaptionML=[ENU=Required Quantity;
                                                              ENG=Required Quantity];
                                                   DecimalPlaces=0:5 }
    { 82  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ENG=Quantity];
                                                   DecimalPlaces=0:5 }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Replenishment Template Code,Replenishment Batch Code,Line No.;
                                                   Clustered=Yes }
    {    ;Replenishment Template Code,Replenishment Batch Code,From Location Code,To Location Code }
    {    ;Replenishment Template Code,Replenishment Batch Code,Item No.,Variant Code,From Location Code,To Location Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ReplenishmentTemplate@1000000003 : Record 9087041;
      ReplenishmentBatch@1000000004 : Record 9087042;
      ReplenishmentParameter@1000000005 : Record 9087047;
      Style@1000000006 : Record 9087012;
      Item@1000000001 : Record 27;
      ItemVariant@1000000002 : Record 5401;
      Location@1000000007 : Record 14;
      TnpToolkit@1000000000 : Codeunit 9062230;

    LOCAL PROCEDURE UpdateDescription@1000000002();
    BEGIN
      //DOC NS2016.16 - Updating description

      IF ((Rec."Item No." <> '') AND (Rec."Variant Code" <> '')) THEN
      BEGIN
        ItemVariant.GET(Rec."Item No.", Rec."Variant Code");
        Rec.VALIDATE(Description, ItemVariant.Description);
        Rec.VALIDATE("Description 2", ItemVariant."Description 2");
      END
      ELSE IF (Rec."Item No." <> '') THEN
      BEGIN
        Item.GET(Rec."Item No.");
        Rec.VALIDATE(Description, Item.Description);
        Rec.VALIDATE("Description 2", Item."Description 2");
      END
      ELSE
      BEGIN
        Rec.VALIDATE(Description, '');
        Rec.VALIDATE("Description 2", '');
      END;
    END;

    PROCEDURE ShowTemplate@1000000001();
    BEGIN
      //DOC NS2016.16 - Showing template

      Rec.TESTFIELD("Replenishment Template Code");
      ReplenishmentTemplate.GET(Rec."Replenishment Template Code");
      PAGE.RUN(0, ReplenishmentTemplate);
    END;

    PROCEDURE ShowBatch@1000000000();
    BEGIN
      //DOC NS2016.16 - Showing batch

      Rec.TESTFIELD("Replenishment Template Code");
      Rec.TESTFIELD("Replenishment Batch Code");
      ReplenishmentBatch.GET(Rec."Replenishment Template Code", Rec."Replenishment Batch Code");
      PAGE.RUN(0, ReplenishmentBatch);
    END;

    PROCEDURE ShowParameters@1000000003();
    BEGIN
      //DOC NS2016.16 - Showing parameters

      Rec.TESTFIELD("Replenishment Template Code");
      Rec.TESTFIELD("Replenishment Batch Code");
      ReplenishmentParameter.RESET();
      ReplenishmentParameter.FILTERGROUP(2);
      ReplenishmentParameter.SETRANGE("Replenishment Template Code", Rec."Replenishment Template Code");
      ReplenishmentParameter.SETRANGE("Replenishment Batch Code", Rec."Replenishment Batch Code");
      ReplenishmentParameter.FILTERGROUP(0);
      PAGE.RUN(0, ReplenishmentParameter);
    END;

    PROCEDURE ShowStyle@1000000011();
    BEGIN
      //DOC NS2016.16 - Showing style

      Rec.TESTFIELD("Item No.");
      Item.GET(Rec."Item No.");
      Item.TESTFIELD("Style No.");
      Style.GET(Item."Style No.");
      PAGE.RUN(PAGE::"Style Card", Style);
    END;

    PROCEDURE ShowItem@1000000010();
    BEGIN
      //DOC NS2016.16 - Showing item

      Rec.TESTFIELD("Item No.");
      Item.GET(Rec."Item No.");
      PAGE.RUN(PAGE::"Item Card", Item);
    END;

    PROCEDURE ShowItemVariants@1000000009();
    BEGIN
      //DOC NS2016.16 - Showing item variants

      Rec.TESTFIELD("Item No.");
      ItemVariant.RESET();
      ItemVariant.FILTERGROUP(2);
      ItemVariant.SETRANGE("Item No.", Rec."Item No.");
      ItemVariant.FILTERGROUP(0);
      IF (ItemVariant.GET(Rec."Item No.", Rec."Variant Code")) THEN;
      PAGE.RUN(0, ItemVariant);
    END;

    PROCEDURE ShowFromLocation@1000000008();
    BEGIN
      //DOC NS2016.16 - Showing "from" location

      Rec.TESTFIELD("From Location Code");
      Location.GET(Rec."From Location Code");
      PAGE.RUN(PAGE::"Location Card", Location);
    END;

    PROCEDURE ShowToLocation@1000000007();
    BEGIN
      //DOC NS2016.16 - Showing "to" location

      Rec.TESTFIELD("To Location Code");
      Location.GET(Rec."To Location Code");
      PAGE.RUN(PAGE::"Location Card", Location);
    END;

    BEGIN
    {
      //DOC NS2016.16 JH 09/09/2016 - Created
    }
    END.
  }
}

