OBJECT Codeunit 7701 ADCS Communication
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ADCSUser@1000 : Record 7710;
      XMLDOMMgt@1010 : Codeunit 6224;
      RecRef@1006 : RecordRef;
      XMLDOM@1009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Text000@1004 : TextConst 'ENU=Failed to add a node.;ENG=Failed to add a node.';
      Text001@1020 : TextConst 'ENU=Failed to add the element: %1.;ENG=Failed to add the element: %1.';
      Comment@1023 : Text[250];
      TableNo@1026 : Text[250];
      RecID@1030 : Text[250];
      Text002@1038 : TextConst 'ENU=Failed to add the attribute: %1.;ENG=Failed to add the attribute: %1.';
      ActiveInput@1003 : Integer;
      InputCounter@1005 : Integer;
      RecRefRunning@1007 : Boolean;
      Text003@1011 : TextConst 'ENU=%1 is not a valid value for the %2 field.;ENG=%1 is not a valid value for the %2 field.';
      Text004@1012 : TextConst '@@@=The field [Field Caption] in the record [Record Caption] [Field Caption] can only contain [Field Length] characters. ([Attempted value to set]).;ENU=The field %2 in the record %1 can only contain %3 characters. (%4).;ENG=The field %2 in the record %1 can only contain %3 characters. (%4).';
      InputIsHidden@1008 : Boolean;
      Text005@1001 : TextConst 'ENU=Miniform %1 not found.;ENG=Miniform %1 not found.';
      Text006@1002 : TextConst 'ENU=There must be one miniform that is set to %1.;ENG=There must be one miniform that is set to %1.';
      Text007@1013 : TextConst 'ENU=<%1> not used.;ENG=<%1> not used.';

    PROCEDURE EncodeMiniForm@9(MiniFormHdr@1002 : Record 7700;StackCode@1013 : Code[250];VAR XMLDOMin@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";ActiveInputField@1005 : Integer;cMessage@1011 : Text[250];ADCSUserId@1012 : Text[250]);
    VAR
      CurrNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NewChild@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FunctionNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ReturnedNode@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      oAttributes@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      AttributeNode@1010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      iAttributeCounter@1008 : Integer;
      iCounter@1009 : Integer;
    BEGIN
      XMLDOM := XMLDOMin;
      ActiveInput := ActiveInputField;
      InputCounter := 0;
      Comment := cMessage;

      // get the incoming header before we create the empty Container..
      XMLDOMMgt.FindNode(XMLDOM.DocumentElement ,'Header',ReturnedNode);

      // Now create an empty root node... this must always be done before we use this object!!
      XMLDOM.LoadXml('<ADCS/>');

      // Set the current node to the root node
      CurrNode := XMLDOM.DocumentElement;

      // add a header node to the ADCS node
      IF XMLDOMMgt.AddElement(CurrNode,'Header','','',NewChild) > 0 THEN
        ERROR(Text000);

      // Add all the header fields from the incoming XMLDOM
      oAttributes := ReturnedNode.Attributes;
      iAttributeCounter := oAttributes.Count;
      iCounter := 0;
      WHILE iCounter < iAttributeCounter DO BEGIN
        AttributeNode := oAttributes.Item(iCounter);
        AddAttribute(NewChild,AttributeNode.Name,AttributeNode.Value);

        iCounter := iCounter + 1;
      END;

      // Now add the UserId to the Header
      IF ADCSUserId <> '' THEN BEGIN
        AddAttribute(NewChild,'LoginID',ADCSUserId);
        SetUserNo(ADCSUserId);
      END ELSE
        CLEAR(ADCSUser);

      // now add the input to the Header

      AddAttribute(NewChild,'UseCaseCode',MiniFormHdr.Code);
      AddAttribute(NewChild,'StackCode',StackCode);
      AddAttribute(NewChild,'RunReturn','0');
      AddAttribute(NewChild,'FormTypeOpt',FORMAT(MiniFormHdr."Form Type"));
      AddAttribute(NewChild,'NoOfLines',FORMAT(MiniFormHdr."No. of Records in List"));
      AddAttribute(NewChild,'InputIsHidden','0');
      InputIsHidden := FALSE;

      XMLDOMMgt.AddElement(NewChild,'Comment',Comment,'',FunctionNode);

      // add the Function List to the Mini Form
      IF XMLDOMMgt.AddElement(NewChild,'Functions','','',FunctionNode) = 0 THEN
        EncodeFunctions(MiniFormHdr,FunctionNode);

      EncodeLines(MiniFormHdr,CurrNode);

      IF InputIsHidden THEN BEGIN
        XMLDOMMgt.FindNode(XMLDOM.DocumentElement,'Header',ReturnedNode);
        SetNodeAttribute(ReturnedNode,'InputIsHidden','1');
      END;

      XMLDOMin := XMLDOM;
    END;

    LOCAL PROCEDURE EncodeFunctions@11(MiniFormHdr@1001 : Record 7700;VAR CurrNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      FunctionLine@1002 : Record 7703;
      NewChild@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      // Add the Function List to the XML Document
      FunctionLine.RESET;
      FunctionLine.SETRANGE("Miniform Code",MiniFormHdr.Code);

      IF FunctionLine.FIND('-') THEN
        REPEAT
          XMLDOMMgt.AddElement(CurrNode,'Function',FORMAT(FunctionLine."Function Code"),'',NewChild);
        UNTIL FunctionLine.NEXT = 0
    END;

    LOCAL PROCEDURE EncodeLines@1(MiniFormHdr@1001 : Record 7700;VAR CurrNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      MiniFormLine@1003 : Record 7701;
      MiniFormLine2@1004 : Record 7701;
      LinesNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      AreaNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DataLineNode@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      CurrentOption@1002 : Integer;
      LineCounter@1008 : Integer;
    BEGIN
      // add a lines node to the ADCS node
      IF XMLDOMMgt.AddElement(CurrNode,'Lines','','',LinesNode) > 0 THEN
        ERROR(Text000);

      CurrentOption := -1;
      LineCounter := 0;

      MiniFormLine.RESET;
      MiniFormLine.SETCURRENTKEY(Area);
      MiniFormLine.SETRANGE("Miniform Code",MiniFormHdr.Code);
      IF MiniFormLine.FIND('-') THEN
        REPEAT
          IF CurrentOption <> MiniFormLine.Area THEN BEGIN
            CurrentOption := MiniFormLine.Area;
            IF XMLDOMMgt.AddElement(LinesNode,FORMAT(MiniFormLine.Area),'','',AreaNode) > 0 THEN
              ERROR(Text000);
          END;

          IF MiniFormLine.Area = MiniFormLine.Area::Body THEN
            IF MiniFormHdr."Form Type" <> MiniFormHdr."Form Type"::Card THEN BEGIN
              WHILE MiniFormHdr."No. of Records in List" > LineCounter DO BEGIN
                IF ((MiniFormHdr."Form Type" = MiniFormHdr."Form Type"::"Data List") OR
                    (MiniFormHdr."Form Type" = MiniFormHdr."Form Type"::"Data List Input"))
                THEN BEGIN
                  MiniFormLine2.SETCURRENTKEY(Area);
                  MiniFormLine2.SETRANGE("Miniform Code",MiniFormLine."Miniform Code");
                  MiniFormLine2.SETRANGE(Area,MiniFormLine.Area);
                  IF MiniFormLine2.FIND('-') THEN BEGIN
                    SendLineNo(MiniFormLine2,AreaNode,DataLineNode,LineCounter);
                    REPEAT
                      SendComposition(MiniFormHdr,MiniFormLine2,DataLineNode);
                    UNTIL MiniFormLine2.NEXT = 0;
                    IF GetNextRecord(MiniFormLine2) = 0 THEN
                      LineCounter := MiniFormHdr."No. of Records in List";
                  END;
                END ELSE BEGIN
                  SendLineNo(MiniFormLine,AreaNode,DataLineNode,LineCounter);
                  SendComposition(MiniFormHdr,MiniFormLine,DataLineNode);
                  IF MiniFormLine.NEXT = 0 THEN
                    LineCounter := MiniFormHdr."No. of Records in List"
                  ELSE
                    IF MiniFormLine.Area <> MiniFormLine.Area::Body THEN BEGIN
                      MiniFormLine.FIND('<');
                      LineCounter := MiniFormHdr."No. of Records in List";
                    END;
                END;
                LineCounter := LineCounter + 1;
              END
            END ELSE
              SendComposition(MiniFormHdr,MiniFormLine,AreaNode)
          ELSE
            SendComposition(MiniFormHdr,MiniFormLine,AreaNode);
        UNTIL MiniFormLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SendComposition@7(MiniFormHdr@1003 : Record 7700;MiniFormLine@1001 : Record 7701;VAR CurrNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      NewChild@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      // add a data node to the area node

      AddElement(CurrNode,'Field',GetFieldValue(MiniFormLine),'',NewChild);

      // add the field name as an attribute..
      IF MiniFormLine."Field Type" <> MiniFormLine."Field Type"::Text THEN
        AddAttribute(NewChild,'FieldID',FORMAT(MiniFormLine."Field No."));

      // What type of field is this ?
      IF MiniFormLine."Field Type" IN [MiniFormLine."Field Type"::Input,MiniFormLine."Field Type"::Asterisk] THEN BEGIN
        InputCounter := InputCounter + 1;
        IF InputCounter = ActiveInput THEN BEGIN
          AddAttribute(NewChild,'Type','Input');
          InputIsHidden := MiniFormLine."Field Type" = MiniFormLine."Field Type"::Asterisk;
        END ELSE
          AddAttribute(NewChild,'Type','OutPut');
      END ELSE
        AddAttribute(NewChild,'Type',FORMAT(MiniFormLine."Field Type"));

      IF MiniFormLine."Field Type" = MiniFormLine."Field Type"::Text THEN
        MiniFormLine."Field Length" := STRLEN(MiniFormLine.Text);
      AddAttribute(NewChild,'MaxLen',FORMAT(MiniFormLine."Field Length"));

      // The Data Description
      IF MiniFormLine."Field Type" <> MiniFormLine."Field Type"::Text THEN
        AddAttribute(NewChild,'Descrip',MiniFormLine.Text);
    END;

    LOCAL PROCEDURE SendLineNo@14(MiniFormLine@1000 : Record 7701;VAR CurrNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR RetNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";LineNo@1004 : Integer);
    VAR
      NewChild@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF MiniFormLine.Area = MiniFormLine.Area::Body THEN
        AddElement(CurrNode,'Line','','',NewChild)
      ELSE
        NewChild := CurrNode;

      IF RecRefRunning THEN BEGIN
        TableNo := FORMAT(RecRef.NUMBER);
        RecID := FORMAT(RecRef.RECORDID);
      END;
      AddAttribute(NewChild,'No',FORMAT(LineNo));
      AddAttribute(NewChild,'TableNo',TableNo);
      AddAttribute(NewChild,'RecordID',RecID);

      RetNode := NewChild;
    END;

    LOCAL PROCEDURE AddElement@23(VAR CurrNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ElemName@1001 : Text[30];ElemValue@1002 : Text[250];NameSpace@1004 : Text[30];VAR NewChild@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      IF XMLDOMMgt.AddElement(CurrNode,ElemName,ElemValue,NameSpace,NewChild) > 0 THEN
        ERROR(Text001,ElemName);
    END;

    LOCAL PROCEDURE AddAttribute@10(VAR NewChild@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";AttribName@1001 : Text[250];AttribValue@1002 : Text[250]);
    BEGIN
      IF XMLDOMMgt.AddAttribute(NewChild,AttribName,AttribValue) > 0 THEN
        ERROR(Text002,AttribName);
    END;

    PROCEDURE SetRecRef@34(VAR NewRecRef@1001 : RecordRef);
    BEGIN
      RecRef := NewRecRef.DUPLICATE;
      RecRefRunning := TRUE;
    END;

    LOCAL PROCEDURE GetNextRecord@35(MiniFormLine@1000 : Record 7701) : Integer;
    BEGIN
      EXIT(RecRef.NEXT);
    END;

    PROCEDURE FindRecRef@6(VAR RecRef2@1000 : RecordRef;SelectOption@1001 : Integer;NoOfLines@1004 : Integer) : Boolean;
    VAR
      i@1003 : Integer;
    BEGIN
      CASE SelectOption OF
        0:
          EXIT(RecRef.FIND('-'));
        1:
          EXIT(RecRef.FIND('>'));
        2:
          EXIT(RecRef.FIND('<'));
        3:
          EXIT(RecRef.FIND('+'));
        4:
          BEGIN
            FOR i := 0 TO NoOfLines - 1 DO
              IF NOT RecRef.FIND('>') THEN
                EXIT(FALSE);
            EXIT(TRUE);
          END;
        5:
          BEGIN
            FOR i := 0 TO NoOfLines - 1 DO
              IF NOT RecRef.FIND('<') THEN
                EXIT(FALSE);
            EXIT(TRUE);
          END;
        ELSE
          EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE GetFieldValue@36(MiniFormLine@1000 : Record 7701) : Text[250];
    VAR
      Field@1001 : Record 2000000041;
      FldRef@1002 : FieldRef;
    BEGIN
      IF (MiniFormLine."Table No." = 0) OR (MiniFormLine."Field No." = 0) THEN
        EXIT(MiniFormLine.Text);

      Field.GET(MiniFormLine."Table No.",MiniFormLine."Field No.");

      IF RecRefRunning THEN BEGIN
        FldRef := RecRef.FIELD(MiniFormLine."Field No.");
        IF Field.Class = Field.Class::FlowField THEN
          FldRef.CALCFIELD;

        EXIT(FORMAT(FldRef));
      END;
      EXIT('');
    END;

    PROCEDURE FieldSetvalue@37(VAR NewRecRef@1000 : RecordRef;FldNo@1001 : Integer;Text@1002 : Text[80]) : Boolean;
    VAR
      FldRef@1003 : FieldRef;
    BEGIN
      FldRef := NewRecRef.FIELD(FldNo);

      IF NOT FieldHandleEvaluate(FldRef,Text) THEN
        ERROR(Text003,Text,FldRef.CAPTION);

      FldRef.VALIDATE;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FieldHandleEvaluate@38(VAR FldRef@1000 : FieldRef;Text@1005 : Text[250]) : Boolean;
    VAR
      Field@1004 : Record 2000000041;
      RecordRef@1008 : RecordRef;
      OptionNo@1001 : Option;
      OptionString@1002 : Text[1024];
      CurrOptionString@1006 : Text[1024];
      Date@1015 : Date;
      DateTime@1014 : DateTime;
      Integer@1013 : Integer;
      BigInteger@1012 : BigInteger;
      Duration@1011 : Duration;
      DateFormula@1010 : DateFormula;
      Decimal@1009 : Decimal;
      Code@1007 : Code[250];
      Boolean@1003 : Boolean;
    BEGIN
      EVALUATE(Field.Type,FORMAT(FldRef.TYPE));

      IF Text = '' THEN
        EXIT(TRUE);

      CASE Field.Type OF
        Field.Type::Option:
          BEGIN
            IF Text = '' THEN BEGIN
              FldRef.VALUE := 0;
              EXIT(TRUE);
            END;
            OptionString := FldRef.OPTIONCAPTION;
            WHILE OptionString <> '' DO BEGIN
              IF STRPOS(OptionString,',') = 0 THEN BEGIN
                CurrOptionString := OptionString;
                OptionString := '';
              END ELSE BEGIN
                CurrOptionString := COPYSTR(OptionString,1,STRPOS(OptionString,',') - 1);
                OptionString := COPYSTR(OptionString,STRPOS(OptionString,',') + 1);
              END;
              IF Text = CurrOptionString THEN BEGIN
                FldRef.VALUE := OptionNo;
                EXIT(TRUE);
              END;
              OptionNo := OptionNo + 1;
            END;
          END;
        Field.Type::Text:
          BEGIN
            RecordRef := FldRef.RECORD;
            Field.GET(RecordRef.NUMBER,FldRef.NUMBER);
            IF STRLEN(Text) > Field.Len THEN
              ERROR(Text004,FldRef.RECORD.CAPTION,FldRef.CAPTION,Field.Len,Text);
            FldRef.VALUE := Text;
            EXIT(TRUE);
          END;
        Field.Type::Code:
          BEGIN
            Code := Text;
            RecordRef := FldRef.RECORD;
            Field.GET(RecordRef.NUMBER,FldRef.NUMBER);
            IF STRLEN(Code) > Field.Len THEN
              ERROR(Text004,FldRef.RECORD.CAPTION,FldRef.CAPTION,Field.Len,Code);
            FldRef.VALUE := Code;
            EXIT(TRUE);
          END;
        Field.Type::Date:
          BEGIN
            IF Text <> '' THEN BEGIN
              EVALUATE(Date,Text);
              FldRef.VALUE := Date;
            END;
            EXIT(TRUE);
          END;
        Field.Type::DateTime:
          BEGIN
            EVALUATE(DateTime,Text);
            FldRef.VALUE := DateTime;
            EXIT(TRUE);
          END;
        Field.Type::Integer:
          BEGIN
            EVALUATE(Integer,Text);
            FldRef.VALUE := Integer;
            EXIT(TRUE);
          END;
        Field.Type::BigInteger:
          BEGIN
            EVALUATE(BigInteger,Text);
            FldRef.VALUE := BigInteger;
            EXIT(TRUE);
          END;
        Field.Type::Duration:
          BEGIN
            EVALUATE(Duration,Text);
            FldRef.VALUE := Duration;
            EXIT(TRUE);
          END;
        Field.Type::Decimal:
          BEGIN
            EVALUATE(Decimal,Text);
            FldRef.VALUE := Decimal;
            EXIT(TRUE);
          END;
        Field.Type::DateFormula:
          BEGIN
            EVALUATE(DateFormula,Text);
            FldRef.VALUE := DateFormula;
            EXIT(TRUE);
          END;
        Field.Type::Boolean:
          BEGIN
            EVALUATE(Boolean,Text);
            FldRef.VALUE := Boolean;
            EXIT(TRUE);
          END;
        Field.Type::BLOB,Field.Type::Binary:
          BEGIN
            Field.GET(FldRef.RECORD.NUMBER,FldRef.NUMBER);
            Field.FIELDERROR(Type);
          END;
        ELSE BEGIN
          Field.GET(FldRef.RECORD.NUMBER,FldRef.NUMBER);
          Field.FIELDERROR(Type);
        END;
      END;
    END;

    PROCEDURE SetXMLDOMS@4(VAR oXMLDOM@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    BEGIN
      XMLDOM := oXMLDOM;
    END;

    PROCEDURE GetReturnXML@5(VAR xmlout@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    BEGIN
      xmlout := XMLDOM;
    END;

    PROCEDURE GetNodeAttribute@33(CurrNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";AttributeName@1003 : Text[250]) AttribValue@1001 : Text[250];
    VAR
      oTempNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodeAttributes@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
    BEGIN
      NodeAttributes := CurrNode.Attributes;
      oTempNode := NodeAttributes.GetNamedItem(AttributeName);

      IF NOT ISNULL(oTempNode) THEN
        AttribValue := oTempNode.Value
      ELSE
        AttribValue := '';
    END;

    PROCEDURE SetNodeAttribute@39(CurrNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";AttributeName@1003 : Text[250];AttribValue@1001 : Text[250]);
    VAR
      oTempNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodeAttributes@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
    BEGIN
      NodeAttributes := CurrNode.Attributes;
      oTempNode := NodeAttributes.GetNamedItem(AttributeName);
      oTempNode.Value := AttribValue;
    END;

    PROCEDURE SetUserNo@2(uNo@1000 : Text[250]);
    BEGIN
      ADCSUser.GET(uNo)
    END;

    PROCEDURE GetWhseEmployee@22(ADCSLoginId@1000 : Text[250];VAR WhseEmpId@1003 : Text[250];VAR LocationFilter@1002 : Text[250]) : Boolean;
    VAR
      WhseEmployee@1001 : Record 7301;
      ADCSUserRec@1004 : Record 7710;
    BEGIN
      IF ADCSLoginId <> '' THEN BEGIN
        WhseEmpId := '';
        LocationFilter := '';

        IF NOT ADCSUserRec.GET(ADCSLoginId) THEN
          EXIT(FALSE);

        WhseEmployee.SETRANGE("ADCS User",ADCSUserRec.Name);
        IF NOT WhseEmployee.FIND('-') THEN
          EXIT(FALSE);

        WhseEmpId := WhseEmployee."User ID";
        REPEAT
          LocationFilter := LocationFilter + WhseEmployee."Location Code" + '|';
        UNTIL WhseEmployee.NEXT = 0;
        LocationFilter := COPYSTR(LocationFilter,1,(STRLEN(LocationFilter) - 1));
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetNextMiniForm@40(ActualMiniFormHeader@1002 : Record 7700;VAR MiniformHeader2@1001 : Record 7700);
    BEGIN
      IF NOT MiniformHeader2.GET(ActualMiniFormHeader."Next Miniform") THEN
        ERROR(Text005,ActualMiniFormHeader.Code);
    END;

    PROCEDURE GetCallMiniForm@41(MiniFormCode@1003 : Code[20];VAR MiniformHeader2@1001 : Record 7700;ReturnTextValue@1002 : Text[250]);
    VAR
      MiniformLine@1000 : Record 7701;
    BEGIN
      MiniformLine.RESET;
      MiniformLine.SETRANGE("Miniform Code",MiniFormCode);
      MiniformLine.SETRANGE(Text,ReturnTextValue);
      MiniformLine.FINDFIRST;
      MiniformLine.TESTFIELD("Call Miniform");
      MiniformHeader2.GET(MiniformLine."Call Miniform");
    END;

    PROCEDURE RunPreviousMiniform@17(VAR DOMxmlin@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      MiniformHeader2@1003 : Record 7700;
      PreviousCode@1001 : Text[20];
    BEGIN
      DecreaseStack(DOMxmlin,PreviousCode);
      MiniformHeader2.GET(PreviousCode);
      MiniformHeader2.SaveXMLin(DOMxmlin);
      CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
    END;

    PROCEDURE IncreaseStack@42(VAR DOMxmlin@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";NextElement@1001 : Text[250]);
    VAR
      ReturnedNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      StackCode@1004 : Text[250];
    BEGIN
      RootNode := DOMxmlin.DocumentElement;
      XMLDOMMgt.FindNode(RootNode,'Header',ReturnedNode);
      StackCode := GetNodeAttribute(ReturnedNode,'StackCode');

      IF StackCode = '' THEN
        StackCode := NextElement
      ELSE
        StackCode := STRSUBSTNO('%1|%2',StackCode,NextElement);

      SetNodeAttribute(ReturnedNode,'StackCode',StackCode);
      SetNodeAttribute(ReturnedNode,'RunReturn','0');
    END;

    PROCEDURE DecreaseStack@43(VAR DOMxmlin@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR PreviousElement@1001 : Text[250]);
    VAR
      ReturnedNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      StackCode@1004 : Text[250];
      p@1005 : Integer;
      pos@1006 : Integer;
    BEGIN
      RootNode := DOMxmlin.DocumentElement;
      XMLDOMMgt.FindNode(RootNode,'Header',ReturnedNode);
      StackCode := GetNodeAttribute(ReturnedNode,'StackCode');

      IF StackCode = '' THEN BEGIN
        PreviousElement := GetNodeAttribute(ReturnedNode,'UseCaseCode');
        EXIT;
      END;

      FOR p := STRLEN(StackCode) DOWNTO 1 DO
        IF StackCode[p] = '|' THEN BEGIN
          pos := p;
          p := 1;
        END;

      IF pos > 1 THEN BEGIN
        PreviousElement := COPYSTR(StackCode,pos + 1,STRLEN(StackCode) - pos);
        StackCode := COPYSTR(StackCode,1,pos - 1);
      END ELSE BEGIN
        PreviousElement := StackCode;
        StackCode := '';
      END;

      SetNodeAttribute(ReturnedNode,'StackCode',StackCode);
      SetNodeAttribute(ReturnedNode,'RunReturn','1');
    END;

    LOCAL PROCEDURE GetPreviousCode@44(VAR DOMxmlin@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Text[250];
    VAR
      ReturnedNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      StackCode@1003 : Text[250];
      PreviousElement@1004 : Text[250];
      p@1005 : Integer;
      pos@1006 : Integer;
    BEGIN
      RootNode := DOMxmlin.DocumentElement;
      XMLDOMMgt.FindNode(RootNode,'Header',ReturnedNode);
      StackCode := GetNodeAttribute(ReturnedNode,'StackCode');

      IF StackCode = '' THEN
        EXIT('');

      FOR p := STRLEN(StackCode) DOWNTO 1 DO
        IF StackCode[p] = '|' THEN BEGIN
          pos := p;
          p := 1;
        END;

      IF pos > 1 THEN
        PreviousElement := COPYSTR(StackCode,pos + 1,STRLEN(StackCode) - pos)
      ELSE
        PreviousElement := StackCode;

      EXIT(PreviousElement);
    END;

    PROCEDURE GetFunctionKey@45(MiniformCode@1001 : Code[20];InputValue@1002 : Text[30]) : Integer;
    VAR
      MiniformFunction@1003 : Record 7703;
      MiniformFunctionGroup@1004 : Record 7702;
    BEGIN
      IF MiniformFunctionGroup.GET(InputValue) THEN BEGIN
        IF NOT MiniformFunction.GET(MiniformCode,InputValue) THEN
          ERROR(Text007,InputValue);

        EXIT(MiniformFunctionGroup.KeyDef);
      END;
      EXIT(0);
    END;

    PROCEDURE GetActiveInputNo@46(MiniformCode@1000 : Code[20];FieldID@1001 : Integer) : Integer;
    VAR
      MiniFormLine@1002 : Record 7701;
      CurrField@1003 : Integer;
    BEGIN
      IF FieldID = 0 THEN
        EXIT(1);

      MiniFormLine.SETRANGE("Miniform Code",MiniformCode);
      MiniFormLine.SETRANGE("Field Type",MiniFormLine."Field Type"::Input);
      IF MiniFormLine.FIND('-') THEN
        REPEAT
          CurrField += 1;
          IF MiniFormLine."Field No." = FieldID THEN
            EXIT(CurrField);
        UNTIL MiniFormLine.NEXT = 0;

      EXIT(1);
    END;

    PROCEDURE LastEntryField@47(MiniformCode@1000 : Code[20];FieldID@1001 : Integer) : Boolean;
    VAR
      MiniFormLine@1002 : Record 7701;
    BEGIN
      IF FieldID = 0 THEN
        EXIT(FALSE);

      MiniFormLine.SETRANGE("Miniform Code",MiniformCode);
      MiniFormLine.SETFILTER("Field Type",'%1|%2',MiniFormLine."Field Type"::Input,MiniFormLine."Field Type"::Asterisk);
      IF MiniFormLine.FINDLAST AND (MiniFormLine."Field No." = FieldID) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetLoginFormCode@48() : Code[20];
    VAR
      MiniformHeader@1000 : Record 7700;
    BEGIN
      MiniformHeader.SETRANGE("Start Miniform",TRUE);
      IF MiniformHeader.FINDFIRST THEN
        EXIT(MiniformHeader.Code);
      ERROR(Text006,MiniformHeader.FIELDCAPTION("Start Miniform"));
    END;

    BEGIN
    END.
  }
}

