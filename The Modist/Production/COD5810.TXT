OBJECT Codeunit 5810 Change Average Cost Setting
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00,NAVGB9.00;
  }
  PROPERTIES
  {
    TableNo=313;
    OnRun=BEGIN
            WindowUpdateDateTime := CURRENTDATETIME;
            WindowIsOpen := FALSE;

            AvgCostAdjmtEntryPoint.LOCKTABLE;
            LOCKTABLE;
            AccPeriod.LOCKTABLE;

            MODIFY;

            AccPeriod.SETRANGE("Period Type",AccPeriod."Period Type"::Year);
            AccPeriod.FIND('-');
            IF AccPeriod.Closed THEN BEGIN
              AccPeriod.SETRANGE(Closed,FALSE);
              AccPeriod.FIND('-');
              StartingValuationDate := AccPeriod."Period Start";
            END;
            REPEAT
              AccPeriod."Average Cost Period" := "Average Cost Period";
              AccPeriod."Average Cost Calc. Type" := "Average Cost Calc. Type";
              AccPeriod.MODIFY;
            UNTIL AccPeriod.NEXT = 0;

            ProcessItemsFromDate(StartingValuationDate);

            IF WindowIsOpen THEN
              Window.CLOSE;

            COMMIT;
          END;

  }
  CODE
  {
    VAR
      AccPeriod@1011 : Record 10560;
      ValueEntry@1007 : Record 5802;
      Item@1006 : Record 27;
      InvtSetup@1005 : Record 313;
      AvgCostAdjmtEntryPoint@1012 : Record 5804;
      Window@1004 : Dialog;
      StartingValuationDate@1013 : Date;
      WindowIsOpen@1003 : Boolean;
      WindowNo@1002 : Text[20];
      WindowPostingDate@1001 : Date;
      WindowUpdateDateTime@1000 : DateTime;
      Text000@1010 : TextConst 'ENU=Processing Item...\\;ENG=Processing Item...\\';
      Text001@1009 : TextConst 'ENU=Item No.       #1######\;ENG=Item No.       #1######\';
      Text002@1008 : TextConst 'ENU=Valuation Date #2######;ENG=Valuation Date #2######';

    PROCEDURE UpdateAvgCostFromAccPeriodChg@1(VAR AccPeriod@1004 : Record 10560;PrevAccPeriod@1008 : Record 10560;UpdateType@1000 : ' ,Insert,Modify,Delete,Rename');
    VAR
      AccPeriod2@1006 : Record 10560;
      StartingValuationDate@1002 : Date;
    BEGIN
      IF NOT InvtSetup.GET THEN
        EXIT;

      WITH AccPeriod DO BEGIN
        IF NOT ((("Period Type" = "Period Type"::Year) OR (PrevAccPeriod."Period Type" = "Period Type"::Year) OR
                 (InvtSetup."Average Cost Period" = InvtSetup."Average Cost Period"::"Accounting Period")))
        THEN
          EXIT;

        StartingValuationDate := 0D;
        AccPeriod2 := AccPeriod;
        CASE UpdateType OF
          UpdateType::Insert:
            INSERT;
          UpdateType::Delete:
            DELETE;
          UpdateType::Modify:
            MODIFY;
          UpdateType::Rename:
            BEGIN
              INSERT;
              PrevAccPeriod.DELETE;
              IF (PrevAccPeriod."Period Start" < "Period Start") AND
                 (PrevAccPeriod."Period Start" <> 0D)
              THEN
                AccPeriod2 := PrevAccPeriod;
            END;
        END;

        IF AccPeriod2.NEXT(-1) <> 0 THEN
          StartingValuationDate := AccPeriod2."Period Start";
        ProcessItemsFromDate(StartingValuationDate);

        CASE UpdateType OF
          UpdateType::Insert:
            DELETE;
          UpdateType::Delete:
            INSERT;
          UpdateType::Rename:
            BEGIN
              DELETE;
              PrevAccPeriod.INSERT;
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE ProcessItemsFromDate@3(StartingValuationDate@1000 : Date);
    BEGIN
      IF Item.FIND('-') THEN
        REPEAT
          IF Item."Costing Method" = Item."Costing Method"::Average THEN
            ProcessItemAvgCostPoint(Item,StartingValuationDate);
        UNTIL Item.NEXT = 0;
    END;

    LOCAL PROCEDURE ProcessItemAvgCostPoint@6(VAR Item@1000 : Record 27;StartingValuationDate@1001 : Date);
    BEGIN
      InvtSetup.GET;
      AvgCostAdjmtEntryPoint.RESET;
      AvgCostAdjmtEntryPoint.SETRANGE("Item No.",Item."No.");
      AvgCostAdjmtEntryPoint.SETFILTER("Valuation Date",'>=%1',StartingValuationDate);
      AvgCostAdjmtEntryPoint.DELETEALL;

      WITH ValueEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Item No.","Valuation Date","Location Code","Variant Code");

        SETRANGE("Item No.",Item."No.");
        SETFILTER("Valuation Date",'>=%1',StartingValuationDate);
        IF FIND('-') THEN BEGIN
          REPEAT
            UpDateWindow("Item No.","Valuation Date");

            AvgCostAdjmtEntryPoint.UpdateValuationDate(ValueEntry);

            SETRANGE("Valuation Date",AvgCostAdjmtEntryPoint."Valuation Date");
            IF InvtSetup."Average Cost Calc. Type" =
               InvtSetup."Average Cost Calc. Type"::"Item & Location & Variant"
            THEN BEGIN
              SETRANGE("Location Code","Location Code");
              SETRANGE("Variant Code","Variant Code");
            END;
            IF FIND('+') THEN;
            SETRANGE("Valuation Date");
            SETRANGE("Location Code");
            SETRANGE("Variant Code");
          UNTIL NEXT = 0;
          Item."Cost is Adjusted" := FALSE;
          Item.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE OpenWindow@59();
    BEGIN
      Window.OPEN(
        Text000 +
        Text001 +
        Text002);
      WindowIsOpen := TRUE;
      WindowUpdateDateTime := CURRENTDATETIME;
    END;

    LOCAL PROCEDURE UpDateWindow@56(NewWindowNo@1001 : Code[20];NewWindowPostingDate@1000 : Date);
    BEGIN
      WindowNo := NewWindowNo;
      WindowPostingDate := NewWindowPostingDate;

      IF IsTimeForUpdate THEN BEGIN
        IF NOT WindowIsOpen THEN
          OpenWindow;
        Window.UPDATE(1,WindowNo);
        Window.UPDATE(2,WindowPostingDate);
      END;
    END;

    LOCAL PROCEDURE IsTimeForUpdate@69() : Boolean;
    BEGIN
      IF WindowUpdateDateTime = 0DT THEN
        WindowUpdateDateTime := CURRENTDATETIME;
      IF CURRENTDATETIME - WindowUpdateDateTime >= 1000 THEN BEGIN
        WindowUpdateDateTime := CURRENTDATETIME;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

