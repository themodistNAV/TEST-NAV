OBJECT Codeunit 1521 Workflow Response Handling
{
  OBJECT-PROPERTIES
  {
    Date=23/10/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43402;
  }
  PROPERTIES
  {
    Permissions=TableData 36=rm,
                TableData 38=rm,
                TableData 1511=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NotSupportedResponseErr@1004 : TextConst 'ENU=Response %1 is not supported in the workflow.;ENG=Response %1 is not supported in the workflow.';
      CreateNotifEntryTxt@1014 : TextConst '@@@=Create a notification for NAVUser.;ENU=Create a notification for %1.;ENG=Create a notification for %1.';
      CreatePmtLineAsyncTxt@1013 : TextConst '@@@=Create a payment journal line in the background for journal template GENERAL and journal batch DEFAULT.;ENU=Create a payment journal line in the background for journal template %1 and journal batch %2.;ENG=Create a payment journal line in the background for journal template %1 and journal batch %2.';
      CreatePmtLineTxt@1000 : TextConst '@@@=Create a payment journal line for journal template GENERAL and journal batch DEFAULT.;ENU=Create a payment journal line for journal template %1 and journal batch %2.;ENG=Create a payment journal line for journal template %1 and journal batch %2.';
      DoNothingTxt@1012 : TextConst 'ENU=Do nothing.;ENG=Do nothing.';
      CreateApprovalRequestsTxt@1030 : TextConst '@@@=Create an approval request for the record using approver type Approver and approver limit type Direct Approver.;ENU=Create an approval request for the record using approver type %1 and %2.;ENG=Create an approval request for the record using approver type %1 and %2.';
      CreateApprovalWorkflowGroupTxt@1028 : TextConst '@@@="%1 = Workflow user group code";ENU=workflow user group code %1;ENG=workflow user group code %1';
      CreateApprovalApprovalLimitTxt@1027 : TextConst '@@@="%1 = Approval limit type";ENU=approver limit type %1;ENG=approver limit type %1';
      GetApprovalCommentTxt@1010 : TextConst 'ENU=Open Approval Comments page.;ENG=Open Approval Comments page.';
      OpenDocumentTxt@1009 : TextConst 'ENU=Reopen the document.;ENG=Reopen the document.';
      ReleaseDocumentTxt@1008 : TextConst 'ENU=Release the document.;ENG=Release the document.';
      SendApprReqForApprovalTxt@1007 : TextConst 'ENU=Send approval request for the record and create a notification.;ENG=Send approval request for the record and create a notification.';
      ApproveAllApprReqTxt@1038 : TextConst 'ENU=Approve the approval request for the record.;ENG=Approve the approval request for the record.';
      RejectAllApprReqTxt@1006 : TextConst 'ENU=Reject the approval request for the record and create a notification.;ENG=Reject the approval request for the record and create a notification.';
      CancelAllAppReqTxt@1005 : TextConst 'ENU=Cancel the approval request for the record and create a notification.;ENG=Cancel the approval request for the record and create a notification.';
      PostDocumentTxt@1015 : TextConst 'ENU=Post the sales or purchase document.;ENG=Post the sales or purchase document.';
      BackgroundDocumentPostTxt@1016 : TextConst 'ENU=Post the sales or purchase document in the background.;ENG=Post the sales or purchase document in the background.';
      BackgroundOCRReceiveIncomingDocTxt@1043 : TextConst 'ENU=Receive the incoming document from OCR in the background.;ENG=Receive the incoming document from OCR in the background.';
      BackgroundOCRSendIncomingDocTxt@1044 : TextConst 'ENU=Send the incoming document to OCR in the background.;ENG=Send the incoming document to OCR in the background.';
      CheckCustomerCreditLimitTxt@1003 : TextConst 'ENU=Check if the customer credit limit is exceeded.;ENG=Check if the customer credit limit is exceeded.';
      CheckGeneralJournalBatchBalanceTxt@1032 : TextConst 'ENU=Check if the general journal batch is balanced.;ENG=Check if the general journal batch is balanced.';
      CreateApproveApprovalRequestAutomaticallyTxt@1021 : TextConst 'ENU=Create and approve an approval request automatically.;ENG=Create and approve an approval request automatically.';
      SetStatusToPendingApprovalTxt@1025 : TextConst 'ENU=Set document status to Pending Approval.;ENG=Set document status to Pending Approval.';
      UserIDTok@1019 : TextConst 'ENU=<User>;ENG=<User>';
      TemplateTok@1018 : TextConst 'ENU=<Template>;ENG=<Template>';
      GenJnlBatchTok@1017 : TextConst 'ENU=<Batch>;ENG=<Batch>';
      UnsupportedRecordTypeErr@1020 : TextConst '@@@=Record type Customer is not supported by this workflow response.;ENU=Record type %1 is not supported by this workflow response.;ENG=Record type %1 is not supported by this workflow response.';
      CreateOverdueNotifTxt@1022 : TextConst 'ENU=Create notification for overdue approval requests.;ENG=Create notification for overdue approval requests.';
      ResponseAlreadyExistErr@1023 : TextConst 'ENU=A response with description %1 already exists.;ENG=A response with description %1 already exists.';
      ApproverTypeTok@1002 : TextConst 'ENU=<Approver Type>;ENG=<Approver Type>';
      ApproverLimitTypeTok@1024 : TextConst 'ENU=<Approver Limit Type>;ENG=<Approver Limit Type>';
      WorkflowUserGroupTok@1011 : TextConst 'ENU=<Workflow User Group Code>;ENG=<Workflow User Group Code>';
      ShowMessageTxt@1033 : TextConst '@@@="%1 = The message to be shown";ENU=Show message "%1".;ENG=Show message "%1".';
      ShowMessagePlaceholderMsg@1034 : TextConst '@@@=Locked;ENU=%1;ENG=%1';
      MessageTok@1029 : TextConst 'ENU=<Message>;ENG=<Message>';
      RestrictRecordUsageTxt@1035 : TextConst 'ENU=Add record restriction.;ENG=Add record restriction.';
      AllowRecordUsageTxt@1036 : TextConst 'ENU=Remove record restriction.;ENG=Remove record restriction.';
      RestrictUsageDetailsTxt@1037 : TextConst '@@@=The restriction was imposed by the PIW workflow, Purchase Invoice Workflow.;ENU=The restriction was imposed by the %1 workflow, %2.;ENG=The restriction was imposed by the %1 workflow, %2.';
      MarkReadyForOCRTxt@1031 : TextConst 'ENU=Mark the incoming document ready for OCR.;ENG=Mark the incoming document ready for OCR.';
      SendToOCRTxt@1040 : TextConst 'ENU=Send the incoming document to OCR.;ENG=Send the incoming document to OCR.';
      ReceiveFromOCRTxt@1042 : TextConst 'ENU=Receive the incoming document from OCR.;ENG=Receive the incoming document from OCR.';
      CreateDocFromIncomingDocTxt@1045 : TextConst 'ENU=Create a purchase invoice from an incoming document.;ENG=Create a purchase invoice from an incoming document.';
      CreateReleasedDocFromIncomingDocTxt@1047 : TextConst 'ENU=Create a released purchase invoice from an incoming document.;ENG=Create a released purchase invoice from an incoming document.';
      CreateJournalFromIncomingDocTxt@1046 : TextConst 'ENU=Create journal line from incoming document.;ENG=Create journal line from incoming document.';
      RevertRecordValueTxt@1026 : TextConst '@@@=Revert the value of the Credit Limit (LCY) field on the record and save the change.;ENU=Revert the value of the %1 field on the record and save the change.;ENG=Revert the value of the %1 field on the record and save the change.';
      RevertRecordFieldValueTok@1039 : TextConst 'ENU=<Field>;ENG=<Field>';
      ApplyNewValuesTxt@1041 : TextConst 'ENU=Apply the new values.;ENG=Apply the new values.';
      DiscardNewValuesTxt@1001 : TextConst 'ENU=Discard the new values.;ENG=Discard the new values.';

    PROCEDURE CreateResponsesLibrary@25();
    BEGIN
      AddResponseToLibrary(DoNothingCode,0,DoNothingTxt,'GROUP 0');
      AddResponseToLibrary(CreateNotificationEntryCode,0,CreateNotifEntryTxt,'GROUP 3');
      AddResponseToLibrary(ReleaseDocumentCode,0,ReleaseDocumentTxt,'GROUP 0');
      AddResponseToLibrary(OpenDocumentCode,0,OpenDocumentTxt,'GROUP 0');
      AddResponseToLibrary(SetStatusToPendingApprovalCode,0,SetStatusToPendingApprovalTxt,'GROUP 0');
      AddResponseToLibrary(GetApprovalCommentCode,0,GetApprovalCommentTxt,'GROUP 0');
      AddResponseToLibrary(CreateApprovalRequestsCode,0,CreateApprovalRequestsTxt,'GROUP 5');
      AddResponseToLibrary(SendApprovalRequestForApprovalCode,0,SendApprReqForApprovalTxt,'GROUP 2');
      AddResponseToLibrary(ApproveAllApprovalRequestsCode,0,ApproveAllApprReqTxt,'GROUP 0');
      AddResponseToLibrary(RejectAllApprovalRequestsCode,0,RejectAllApprReqTxt,'GROUP 2');
      AddResponseToLibrary(CancelAllApprovalRequestsCode,0,CancelAllAppReqTxt,'GROUP 2');
      AddResponseToLibrary(PostDocumentCode,0,PostDocumentTxt,'GROUP 0');
      AddResponseToLibrary(PostDocumentAsyncCode,0,BackgroundDocumentPostTxt,'GROUP 0');

      AddResponseToLibrary(CreatePmtLineForPostedPurchaseDocAsyncCode,DATABASE::"Purch. Inv. Header",CreatePmtLineAsyncTxt,'GROUP 1');
      AddResponseToLibrary(CreatePmtLineForPostedPurchaseDocCode,DATABASE::"Purch. Inv. Header",CreatePmtLineTxt,'GROUP 1');

      AddResponseToLibrary(CreateOverdueNotificationCode,0,CreateOverdueNotifTxt,'GROUP 2');
      AddResponseToLibrary(CheckCustomerCreditLimitCode,0,CheckCustomerCreditLimitTxt,'GROUP 0');
      AddResponseToLibrary(CheckGeneralJournalBatchBalanceCode,0,CheckGeneralJournalBatchBalanceTxt,'GROUP 0');
      AddResponseToLibrary(CreateAndApproveApprovalRequestAutomaticallyCode,0,CreateApproveApprovalRequestAutomaticallyTxt,'GROUP 0');
      AddResponseToLibrary(ShowMessageCode,0,ShowMessageTxt,'GROUP 4');
      AddResponseToLibrary(RestrictRecordUsageCode,0,RestrictRecordUsageTxt,'GROUP 0');
      AddResponseToLibrary(AllowRecordUsageCode,0,AllowRecordUsageTxt,'GROUP 0');

      AddResponseToLibrary(GetMarkReadyForOCRCode,0,MarkReadyForOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetSendToOCRCode,0,SendToOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetReceiveFromOCRCode,0,ReceiveFromOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetSendToOCRAsyncCode,0,BackgroundOCRSendIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetReceiveFromOCRAsyncCode,0,BackgroundOCRReceiveIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetSendToOCRCode,0,SendToOCRTxt,'GROUP 0');
      AddResponseToLibrary(GetCreateDocFromIncomingDocCode,0,CreateDocFromIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetCreateReleasedDocFromIncomingDocCode,0,CreateReleasedDocFromIncomingDocTxt,'GROUP 0');
      AddResponseToLibrary(GetCreateJournalFromIncomingDocCode,0,CreateJournalFromIncomingDocTxt,'GROUP 0');

      AddResponseToLibrary(RevertValueForFieldCode,0,RevertRecordValueTxt,'GROUP 6');
      AddResponseToLibrary(ApplyNewValuesCode,0,ApplyNewValuesTxt,'GROUP 7');
      AddResponseToLibrary(DiscardNewValuesCode,0,DiscardNewValuesTxt,'GROUP 0');

      OnAddWorkflowResponsesToLibrary;
    END;

    LOCAL PROCEDURE AddResponsePredecessors@33(ResponseFunctionName@1002 : Code[128]);
    VAR
      WorkflowEventHandling@1000 : Codeunit 1520;
    BEGIN
      CASE ResponseFunctionName OF
        SetStatusToPendingApprovalCode:
          BEGIN
            AddResponsePredecessor(SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddResponsePredecessor(SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
            AddResponsePredecessor(SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode);
            AddResponsePredecessor(
              SetStatusToPendingApprovalCode,WorkflowEventHandling.RunWorkflowOnCustomerCreditLimitNotExceededCode);
          END;
        CreateApprovalRequestsCode:
          BEGIN
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnVendorChangedCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnItemChangedCode);
            AddResponsePredecessor(
              CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddResponsePredecessor(
              CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddResponsePredecessor(CreateApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnGeneralJournalBatchBalancedCode);
          END;
        SendApprovalRequestForApprovalCode:
          BEGIN
            AddResponsePredecessor(
              SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendPurchaseDocForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
            AddResponsePredecessor(
              SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendIncomingDocForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendVendorForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnVendorChangedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnSendItemForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnItemChangedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,
              WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,
              WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
            AddResponsePredecessor(
              SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnGeneralJournalBatchBalancedCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);
            AddResponsePredecessor(SendApprovalRequestForApprovalCode,WorkflowEventHandling.RunWorkflowOnDelegateApprovalRequestCode);
          END;
        ReleaseDocumentCode:
          BEGIN
            AddResponsePredecessor(ReleaseDocumentCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);
            AddResponsePredecessor(ReleaseDocumentCode,WorkflowEventHandling.RunWorkflowOnCustomerCreditLimitNotExceededCode);
          END;
        RejectAllApprovalRequestsCode:
          AddResponsePredecessor(RejectAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode);
        OpenDocumentCode:
          BEGIN
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelPurchaseApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelSalesApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelIncomingDocApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelCustomerApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelVendorApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelItemApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode);
            AddResponsePredecessor(OpenDocumentCode,WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode);
          END;
        CancelAllApprovalRequestsCode:
          BEGIN
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelPurchaseApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelSalesApprovalRequestCode);
            AddResponsePredecessor(
              CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelIncomingDocApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelCustomerApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelVendorApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,WorkflowEventHandling.RunWorkflowOnCancelItemApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,
              WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalLineApprovalRequestCode);
            AddResponsePredecessor(CancelAllApprovalRequestsCode,
              WorkflowEventHandling.RunWorkflowOnCancelGeneralJournalBatchApprovalRequestCode);
          END;
        RevertValueForFieldCode:
          BEGIN
            AddResponsePredecessor(RevertValueForFieldCode,WorkflowEventHandling.RunWorkflowOnCustomerChangedCode);
            AddResponsePredecessor(RevertValueForFieldCode,WorkflowEventHandling.RunWorkflowOnVendorChangedCode);
            AddResponsePredecessor(RevertValueForFieldCode,WorkflowEventHandling.RunWorkflowOnItemChangedCode);
          END;
        ApplyNewValuesCode:
          AddResponsePredecessor(ApplyNewValuesCode,WorkflowEventHandling.RunWorkflowOnApproveApprovalRequestCode);
        DiscardNewValuesCode:
          AddResponsePredecessor(DiscardNewValuesCode,WorkflowEventHandling.RunWorkflowOnRejectApprovalRequestCode);
        GetMarkReadyForOCRCode:
          AddResponsePredecessor(GetMarkReadyForOCRCode,WorkflowEventHandling.RunWorkflowOnBinaryFileAttachedCode);
        CreateOverdueNotificationCode:
          AddResponsePredecessor(CreateOverdueNotificationCode,WorkflowEventHandling.RunWorkflowOnSendOverdueNotificationsCode);
        PostDocumentAsyncCode:
          AddResponsePredecessor(PostDocumentAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterReleasePurchaseDocCode);
        PostDocumentCode:
          AddResponsePredecessor(PostDocumentCode,WorkflowEventHandling.RunWorkflowOnAfterReleasePurchaseDocCode);
        CreatePmtLineForPostedPurchaseDocAsyncCode:
          AddResponsePredecessor(
            CreatePmtLineForPostedPurchaseDocAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterPostPurchaseDocCode);
        CreatePmtLineForPostedPurchaseDocCode:
          AddResponsePredecessor(CreatePmtLineForPostedPurchaseDocCode,WorkflowEventHandling.RunWorkflowOnAfterPostPurchaseDocCode);
        CheckGeneralJournalBatchBalanceCode:
          AddResponsePredecessor(CheckGeneralJournalBatchBalanceCode,
            WorkflowEventHandling.RunWorkflowOnSendGeneralJournalBatchForApprovalCode);
        CheckCustomerCreditLimitCode:
          AddResponsePredecessor(CheckCustomerCreditLimitCode,WorkflowEventHandling.RunWorkflowOnSendSalesDocForApprovalCode);
        CreateAndApproveApprovalRequestAutomaticallyCode:
          AddResponsePredecessor(CreateAndApproveApprovalRequestAutomaticallyCode,
            WorkflowEventHandling.RunWorkflowOnCustomerCreditLimitNotExceededCode);
        GetReceiveFromOCRCode:
          AddResponsePredecessor(GetReceiveFromOCRCode,WorkflowEventHandling.RunWorkflowOnAfterSendToOCRIncomingDocCode);
        GetReceiveFromOCRAsyncCode:
          AddResponsePredecessor(GetReceiveFromOCRAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterSendToOCRIncomingDocCode);
        GetSendToOCRCode:
          AddResponsePredecessor(GetSendToOCRCode,WorkflowEventHandling.RunWorkflowOnAfterReadyForOCRIncomingDocCode);
        GetSendToOCRAsyncCode:
          AddResponsePredecessor(GetSendToOCRAsyncCode,WorkflowEventHandling.RunWorkflowOnAfterReadyForOCRIncomingDocCode);
      END;
      OnAddWorkflowResponsePredecessorsToLibrary(ResponseFunctionName);
    END;

    [Integration]
    LOCAL PROCEDURE OnAddWorkflowResponsesToLibrary@1();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAddWorkflowResponsePredecessorsToLibrary@49(ResponseFunctionName@1000 : Code[128]);
    BEGIN
    END;

    PROCEDURE ExecuteResponse@2(VAR Variant@1000 : Variant;ResponseWorkflowStepInstance@1001 : Record 1504;xVariant@1004 : Variant);
    VAR
      WorkflowResponse@1002 : Record 1521;
      WorkflowChangeRecMgt@1007 : Codeunit 1531;
      ResponseExecuted@1003 : Boolean;
    BEGIN
      IF WorkflowResponse.GET(ResponseWorkflowStepInstance."Function Name") THEN
        CASE WorkflowResponse."Function Name" OF
          DoNothingCode:
            DoNothing;
          CreateNotificationEntryCode:
            CreateNotificationEntry(Variant,ResponseWorkflowStepInstance);
          ReleaseDocumentCode:
            ReleaseDocument(Variant);
          OpenDocumentCode:
            OpenDocument(Variant);
          SetStatusToPendingApprovalCode:
            SetStatusToPendingApproval(Variant);
          GetApprovalCommentCode:
            GetApprovalComment(Variant);
          CreateApprovalRequestsCode:
            CreateApprovalRequests(Variant,ResponseWorkflowStepInstance);
          SendApprovalRequestForApprovalCode:
            SendApprovalRequestForApproval(Variant,ResponseWorkflowStepInstance);
          ApproveAllApprovalRequestsCode:
            ApproveAllApprovalRequests(Variant,ResponseWorkflowStepInstance);
          RejectAllApprovalRequestsCode:
            RejectAllApprovalRequests(Variant,ResponseWorkflowStepInstance);
          CancelAllApprovalRequestsCode:
            CancelAllApprovalRequests(Variant,ResponseWorkflowStepInstance);
          PostDocumentCode:
            PostDocument(Variant);
          PostDocumentAsyncCode:
            PostDocumentAsync(Variant);
          CreatePmtLineForPostedPurchaseDocAsyncCode:
            CreatePmtLineForPostedPurchaseDocAsync(ResponseWorkflowStepInstance);
          CreatePmtLineForPostedPurchaseDocCode:
            CreatePmtLineForPostedPurchaseDoc(ResponseWorkflowStepInstance);
          CreateOverdueNotificationCode:
            CreateOverdueNotifications(ResponseWorkflowStepInstance);
          CheckCustomerCreditLimitCode:
            CheckCustomerCreditLimit(Variant);
          CheckGeneralJournalBatchBalanceCode:
            CheckGeneralJournalBatchBalance(Variant);
          CreateAndApproveApprovalRequestAutomaticallyCode:
            CreateAndApproveApprovalRequestAutomatically(Variant,ResponseWorkflowStepInstance);
          ShowMessageCode:
            ShowMessage(ResponseWorkflowStepInstance);
          RestrictRecordUsageCode:
            RestrictRecordUsage(Variant,ResponseWorkflowStepInstance);
          AllowRecordUsageCode:
            AllowRecordUsage(Variant);
          GetMarkReadyForOCRCode:
            MarkReadyForOCR(Variant);
          GetSendToOCRCode:
            SendToOCR(Variant);
          GetSendToOCRAsyncCode:
            SendToOCRAsync(Variant);
          GetReceiveFromOCRCode:
            ReceiveFromOCR(Variant);
          GetReceiveFromOCRAsyncCode:
            ReceiveFromOCRAsync(Variant);
          GetCreateDocFromIncomingDocCode:
            CreateDocFromIncomingDoc(Variant);
          GetCreateReleasedDocFromIncomingDocCode:
            CreateReleasedDocFromIncomingDoc(Variant);
          GetCreateJournalFromIncomingDocCode:
            CreateJournalFromIncomingDoc(Variant);
          RevertValueForFieldCode:
            WorkflowChangeRecMgt.RevertValueForField(Variant,xVariant,ResponseWorkflowStepInstance);
          ApplyNewValuesCode:
            WorkflowChangeRecMgt.ApplyNewValues(Variant,ResponseWorkflowStepInstance);
          DiscardNewValuesCode:
            WorkflowChangeRecMgt.DiscardNewValues(Variant,ResponseWorkflowStepInstance);
          ELSE BEGIN
            OnExecuteWorkflowResponse(ResponseExecuted,Variant,xVariant,ResponseWorkflowStepInstance);
            IF NOT ResponseExecuted THEN
              ERROR(NotSupportedResponseErr,WorkflowResponse."Function Name");
          END;
        END;
    END;

    [Integration]
    LOCAL PROCEDURE OnExecuteWorkflowResponse@47(VAR ResponseExecuted@1000 : Boolean;Variant@1002 : Variant;xVariant@1003 : Variant;ResponseWorkflowStepInstance@1001 : Record 1504);
    BEGIN
    END;

    PROCEDURE DoNothingCode@30() : Code[128];
    BEGIN
      EXIT(UPPERCASE('DoNothing'));
    END;

    PROCEDURE CreateNotificationEntryCode@34() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateNotificationEntry'));
    END;

    PROCEDURE ReleaseDocumentCode@35() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ReleaseDocument'));
    END;

    PROCEDURE OpenDocumentCode@36() : Code[128];
    BEGIN
      EXIT(UPPERCASE('OpenDocument'));
    END;

    PROCEDURE SetStatusToPendingApprovalCode@24() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SetStatusToPendingApproval'));
    END;

    PROCEDURE GetApprovalCommentCode@38() : Code[128];
    BEGIN
      EXIT(UPPERCASE('GetApprovalComment'));
    END;

    PROCEDURE CreateApprovalRequestsCode@39() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateApprovalRequests'));
    END;

    PROCEDURE SendApprovalRequestForApprovalCode@40() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SendApprovalRequestForApproval'));
    END;

    PROCEDURE ApproveAllApprovalRequestsCode@59() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ApproveAllApprovalRequests'));
    END;

    PROCEDURE RejectAllApprovalRequestsCode@42() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RejectAllApprovalRequests'));
    END;

    PROCEDURE CancelAllApprovalRequestsCode@43() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CancelAllApprovalRequests'));
    END;

    PROCEDURE PostDocumentAsyncCode@44() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundPostApprovedPurchaseDoc'));
    END;

    PROCEDURE PostDocumentCode@45() : Code[128];
    BEGIN
      EXIT(UPPERCASE('PostDocument'));
    END;

    PROCEDURE CreatePmtLineForPostedPurchaseDocAsyncCode@46() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundCreatePmtLineForPostedDocument'));
    END;

    PROCEDURE CreatePmtLineForPostedPurchaseDocCode@22() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreatePmtLineForPostedDocument'));
    END;

    PROCEDURE CreateOverdueNotificationCode@16() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateOverdueNotifications'));
    END;

    PROCEDURE CheckCustomerCreditLimitCode@20() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CheckCustomerCreditLimit'));
    END;

    PROCEDURE CheckGeneralJournalBatchBalanceCode@50() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CheckGeneralJournalBatchBalance'));
    END;

    PROCEDURE CreateAndApproveApprovalRequestAutomaticallyCode@21() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateAndApproveApprovalRequestAutomatically'));
    END;

    PROCEDURE ShowMessageCode@52() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ShowMessage'));
    END;

    PROCEDURE RestrictRecordUsageCode@58() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RestrictRecordUsage'));
    END;

    PROCEDURE AllowRecordUsageCode@55() : Code[128];
    BEGIN
      EXIT(UPPERCASE('AllowRecordUsage'));
    END;

    PROCEDURE GetMarkReadyForOCRCode@41() : Code[128];
    BEGIN
      EXIT(UPPERCASE('MarkReadyForOCR'));
    END;

    PROCEDURE GetSendToOCRAsyncCode@68() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundSendToOCR'));
    END;

    PROCEDURE GetSendToOCRCode@65() : Code[128];
    BEGIN
      EXIT(UPPERCASE('SendToOCR'));
    END;

    PROCEDURE GetReceiveFromOCRAsyncCode@69() : Code[128];
    BEGIN
      EXIT(UPPERCASE('BackgroundReceiveFromOCR'));
    END;

    PROCEDURE GetReceiveFromOCRCode@66() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ReceiveFromOCR'));
    END;

    PROCEDURE GetCreateDocFromIncomingDocCode@83() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateDocFromIncomingDoc'));
    END;

    PROCEDURE GetCreateReleasedDocFromIncomingDocCode@70() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateReleasedDocFromIncomingDoc'));
    END;

    PROCEDURE GetCreateJournalFromIncomingDocCode@63() : Code[128];
    BEGIN
      EXIT(UPPERCASE('CreateJournalFromIncomingDoc'));
    END;

    PROCEDURE RevertValueForFieldCode@64() : Code[128];
    BEGIN
      EXIT(UPPERCASE('RevertValueForField'));
    END;

    PROCEDURE ApplyNewValuesCode@32() : Code[128];
    BEGIN
      EXIT(UPPERCASE('ApplyNewValues'));
    END;

    PROCEDURE DiscardNewValuesCode@18() : Code[128];
    BEGIN
      EXIT(UPPERCASE('DiscardNewValues'));
    END;

    LOCAL PROCEDURE DoNothing@3();
    BEGIN
    END;

    LOCAL PROCEDURE CreateNotificationEntry@4(Variant@1001 : Variant;WorkflowStepInstance@1003 : Record 1504);
    VAR
      WorkflowStepArgument@1000 : Record 1523;
      NotificationEntry@1004 : Record 1511;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN;
      NotificationEntry.CreateNew(NotificationEntry.Type::"New Record",
        WorkflowStepArgument."Notification User ID",Variant,WorkflowStepArgument."Link Target Page",
        WorkflowStepArgument."Custom Link");
    END;

    LOCAL PROCEDURE ReleaseDocument@5(VAR Variant@1001 : Variant);
    VAR
      ApprovalEntry@1000 : Record 454;
      ReleasePurchaseDocument@1006 : Codeunit 415;
      ReleaseSalesDocument@1005 : Codeunit 414;
      ReleaseIncomingDocument@1009 : Codeunit 132;
      RecRef@1004 : RecordRef;
      TargetRecRef@1008 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            TargetRecRef.GET(ApprovalEntry."Record ID to Approve");
            Variant := TargetRecRef;
            ReleaseDocument(Variant);
          END;
        DATABASE::"Purchase Header":
          ReleasePurchaseDocument.PerformManualRelease(Variant);
        DATABASE::"Sales Header":
          ReleaseSalesDocument.PerformManualRelease(Variant);
        DATABASE::"Incoming Document":
          ReleaseIncomingDocument.PerformManualRelease(Variant);
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    LOCAL PROCEDURE OpenDocument@6(VAR Variant@1000 : Variant);
    VAR
      ApprovalEntry@1005 : Record 454;
      ReleasePurchaseDocument@1001 : Codeunit 415;
      ReleaseSalesDocument@1006 : Codeunit 414;
      ReleaseIncomingDocument@1008 : Codeunit 132;
      RecRef@1002 : RecordRef;
      TargetRecRef@1007 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            TargetRecRef.GET(ApprovalEntry."Record ID to Approve");
            Variant := TargetRecRef;
            OpenDocument(Variant);
          END;
        DATABASE::"Purchase Header":
          ReleasePurchaseDocument.Reopen(Variant);
        DATABASE::"Sales Header":
          ReleaseSalesDocument.Reopen(Variant);
        DATABASE::"Incoming Document":
          ReleaseIncomingDocument.Reopen(Variant);
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    PROCEDURE SetStatusToPendingApproval@31(VAR Variant@1000 : Variant);
    VAR
      ApprovalsMgmt@1001 : Codeunit 1535;
    BEGIN
      ApprovalsMgmt.SetStatusToPendingApproval(Variant);
    END;

    LOCAL PROCEDURE GetApprovalComment@8(Variant@1000 : Variant);
    VAR
      ApprovalsMgmt@1001 : Codeunit 1535;
    BEGIN
      ApprovalsMgmt.GetApprovalComment(Variant);
    END;

    LOCAL PROCEDURE CreateApprovalRequests@29(Variant@1000 : Variant;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalsMgmt@1004 : Codeunit 1535;
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);
      ApprovalsMgmt.CreateApprovalRequests(RecRef,WorkflowStepInstance);
    END;

    LOCAL PROCEDURE BuildTheCreateApprovalReqDescription@124(WorkflowResponse@1001 : Record 1521;WorkflowStepArgument@1000 : Record 1523) : Text[250];
    VAR
      ApproverLimitDesc@1002 : Text;
      WorkflowUserGroupDesc@1003 : Text;
    BEGIN
      ApproverLimitDesc := STRSUBSTNO(CreateApprovalApprovalLimitTxt,
          GetTokenValue(ApproverLimitTypeTok,FORMAT(WorkflowStepArgument."Approver Limit Type")));
      WorkflowUserGroupDesc := STRSUBSTNO(CreateApprovalWorkflowGroupTxt,
          GetTokenValue(WorkflowUserGroupTok,FORMAT(WorkflowStepArgument."Workflow User Group Code")));

      IF GetTokenValue(ApproverTypeTok,FORMAT(WorkflowStepArgument."Approver Type")) = ApproverTypeTok THEN
        EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,ApproverTypeTok,
              STRSUBSTNO('%1/%2',ApproverLimitDesc,WorkflowUserGroupDesc)),1,250));

      IF WorkflowStepArgument."Approver Type" <> WorkflowStepArgument."Approver Type"::"Workflow User Group" THEN
        EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
              GetTokenValue(ApproverTypeTok,FORMAT(WorkflowStepArgument."Approver Type")),
              ApproverLimitDesc),1,250));

      EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
            GetTokenValue(ApproverTypeTok,FORMAT(WorkflowStepArgument."Approver Type")),
            WorkflowUserGroupDesc),1,250));
    END;

    LOCAL PROCEDURE SendApprovalRequestForApproval@9(Variant@1000 : Variant;WorkflowStepInstance@1002 : Record 1504);
    VAR
      ApprovalsMgmt@1003 : Codeunit 1535;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          ApprovalsMgmt.SendApprovalRequestFromApprovalEntry(Variant,WorkflowStepInstance);
        ELSE
          ApprovalsMgmt.SendApprovalRequestFromRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE ApproveAllApprovalRequests@60(Variant@1000 : Variant;WorkflowStepInstance@1004 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalsMgmt@1006 : Codeunit 1535;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            ApproveAllApprovalRequests(RecRef,WorkflowStepInstance);
          END;
        ELSE
          ApprovalsMgmt.ApproveApprovalRequestsForRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE RejectAllApprovalRequests@11(Variant@1000 : Variant;WorkflowStepInstance@1004 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalsMgmt@1006 : Codeunit 1535;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            RejectAllApprovalRequests(RecRef,WorkflowStepInstance);
          END;
        ELSE
          ApprovalsMgmt.RejectApprovalRequestsForRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE CancelAllApprovalRequests@12(Variant@1000 : Variant;WorkflowStepInstance@1004 : Record 1504);
    VAR
      ApprovalEntry@1001 : Record 454;
      ApprovalsMgmt@1006 : Codeunit 1535;
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            ApprovalEntry := Variant;
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            CancelAllApprovalRequests(RecRef,WorkflowStepInstance);
          END;
        ELSE
          ApprovalsMgmt.CancelApprovalRequestsForRecord(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE PostDocumentAsync@13(Variant@1000 : Variant);
    VAR
      JobQueueEntry@1001 : Record 472;
      PurchaseHeader@1002 : Record 38;
      SalesHeader@1003 : Record 36;
      RecRef@1004 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          BEGIN
            PurchaseHeader := Variant;
            PurchaseHeader.TESTFIELD(Status,PurchaseHeader.Status::Released);
            JobQueueEntry.ScheduleJobQueueEntry(CODEUNIT::"Purchase Post via Job Queue",PurchaseHeader.RECORDID);
          END;
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader := Variant;
            SalesHeader.TESTFIELD(Status,SalesHeader.Status::Released);
            JobQueueEntry.ScheduleJobQueueEntry(CODEUNIT::"Sales Post via Job Queue",SalesHeader.RECORDID);
          END;
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    LOCAL PROCEDURE PostDocument@14(Variant@1000 : Variant);
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Purchase Header":
          CODEUNIT.RUN(CODEUNIT::"Purch.-Post",Variant);
        DATABASE::"Sales Header":
          CODEUNIT.RUN(CODEUNIT::"Sales-Post",Variant);
        ELSE
          ERROR(UnsupportedRecordTypeErr,RecRef.CAPTION);
      END;
    END;

    LOCAL PROCEDURE CreatePmtLineForPostedPurchaseDocAsync@15(WorkflowStepInstance@1000 : Record 1504);
    VAR
      JobQueueEntry@1001 : Record 472;
      WorkflowStepArgument@1002 : Record 1523;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        JobQueueEntry.ScheduleJobQueueEntry(CODEUNIT::"Workflow Create Payment Line",WorkflowStepArgument.RECORDID);
    END;

    LOCAL PROCEDURE CreatePmtLineForPostedPurchaseDoc@17(WorkflowStepInstance@1000 : Record 1504);
    VAR
      WorkflowStepArgument@1002 : Record 1523;
      WorkflowCreatePaymentLine@1001 : Codeunit 1512;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        WorkflowCreatePaymentLine.CreatePmtLine(WorkflowStepArgument);
    END;

    LOCAL PROCEDURE CheckCustomerCreditLimit@53(Variant@1000 : Variant);
    VAR
      SalesHeader@1003 : Record 36;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeader := Variant;
            SalesHeader.CheckAvailableCreditLimit;
          END;
      END;
    END;

    LOCAL PROCEDURE CheckGeneralJournalBatchBalance@48(Variant@1000 : Variant);
    VAR
      GenJournalBatch@1002 : Record 232;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Gen. Journal Batch":
          BEGIN
            GenJournalBatch := Variant;
            GenJournalBatch.CheckBalance;
          END;
      END;
    END;

    LOCAL PROCEDURE CreateAndApproveApprovalRequestAutomatically@23(Variant@1000 : Variant;WorkflowStepInstance@1001 : Record 1504);
    VAR
      ApprovalsMgmt@1002 : Codeunit 1535;
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          ApprovalsMgmt.CreateAndAutomaticallyApproveRequest(RecRef,WorkflowStepInstance);
        DATABASE::Customer:
          ApprovalsMgmt.CreateAndAutomaticallyApproveRequest(RecRef,WorkflowStepInstance);
      END;
    END;

    LOCAL PROCEDURE ShowMessage@54(WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1002 : Record 1523;
    BEGIN
      WorkflowStepArgument.GET(WorkflowStepInstance.Argument);
      MESSAGE(STRSUBSTNO(ShowMessagePlaceholderMsg,WorkflowStepArgument.Message));
    END;

    LOCAL PROCEDURE RestrictRecordUsage@56(Variant@1000 : Variant;WorkflowStepInstance@1003 : Record 1504);
    VAR
      Workflow@1004 : Record 1501;
      RecordRestrictionMgt@1002 : Codeunit 1550;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      Workflow.GET(WorkflowStepInstance."Workflow Code");
      RecordRestrictionMgt.RestrictRecordUsage(RecRef.RECORDID,STRSUBSTNO(RestrictUsageDetailsTxt,Workflow.Code,Workflow.Description));
    END;

    LOCAL PROCEDURE AllowRecordUsage@57(Variant@1000 : Variant);
    VAR
      ApprovalEntry@1004 : Record 454;
      GenJournalBatch@1003 : Record 232;
      RecordRestrictionMgt@1002 : Codeunit 1550;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Variant);

      CASE RecRef.NUMBER OF
        DATABASE::"Approval Entry":
          BEGIN
            RecordRestrictionMgt.AllowRecordUsage(RecRef.RECORDID);
            RecRef.SETTABLE(ApprovalEntry);
            RecRef.GET(ApprovalEntry."Record ID to Approve");
            AllowRecordUsage(RecRef);
          END;
        DATABASE::"Gen. Journal Batch":
          BEGIN
            RecRef.SETTABLE(GenJournalBatch);
            RecordRestrictionMgt.AllowGenJournalBatchUsage(GenJournalBatch);
          END
        ELSE
          RecordRestrictionMgt.AllowRecordUsage(RecRef.RECORDID);
      END;
    END;

    PROCEDURE AddResponseToLibrary@26(FunctionName@1002 : Code[128];TableID@1001 : Integer;Description@1000 : Text[250];ResponseOptionGroup@1004 : Code[20]);
    VAR
      WorkflowResponse@1003 : Record 1521;
    BEGIN
      IF WorkflowResponse.GET(FunctionName) THEN
        EXIT;

      WorkflowResponse.SETRANGE(Description,Description);
      IF WorkflowResponse.FINDFIRST THEN
        ERROR(ResponseAlreadyExistErr,Description);

      WorkflowResponse.INIT;
      WorkflowResponse."Function Name" := FunctionName;
      WorkflowResponse."Table ID" := TableID;
      WorkflowResponse.Description := Description;
      WorkflowResponse."Response Option Group" := ResponseOptionGroup;
      WorkflowResponse.INSERT;

      AddResponsePredecessors(WorkflowResponse."Function Name");
    END;

    PROCEDURE AddResponsePredecessor@61(FunctionName@1000 : Code[128];PredecessorFunctionName@1001 : Code[128]);
    VAR
      WFEventResponseCombination@1002 : Record 1509;
    BEGIN
      WFEventResponseCombination.INIT;
      WFEventResponseCombination.Type := WFEventResponseCombination.Type::Response;
      WFEventResponseCombination."Function Name" := FunctionName;
      WFEventResponseCombination."Predecessor Type" := WFEventResponseCombination."Predecessor Type"::"Event";
      WFEventResponseCombination."Predecessor Function Name" := PredecessorFunctionName;
      IF WFEventResponseCombination.INSERT THEN;
    END;

    PROCEDURE GetDescription@28(WorkflowStepArgument@1000 : Record 1523) : Text[250];
    VAR
      WorkflowResponse@1001 : Record 1521;
    BEGIN
      IF NOT WorkflowResponse.GET(WorkflowStepArgument."Response Function Name") THEN
        EXIT('');
      CASE WorkflowResponse."Function Name" OF
        CreateNotificationEntryCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                GetTokenValue(UserIDTok,WorkflowStepArgument."Notification User ID")),1,250));
        ShowMessageCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                GetTokenValue(MessageTok,WorkflowStepArgument.Message)),1,250));
        CreatePmtLineForPostedPurchaseDocAsyncCode,
        CreatePmtLineForPostedPurchaseDocCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                GetTokenValue(TemplateTok,WorkflowStepArgument."General Journal Template Name"),
                GetTokenValue(GenJnlBatchTok,WorkflowStepArgument."General Journal Batch Name")),1,250));
        CreateApprovalRequestsCode:
          EXIT(BuildTheCreateApprovalReqDescription(WorkflowResponse,WorkflowStepArgument));
        SendApprovalRequestForApprovalCode,
        RejectAllApprovalRequestsCode,
        CancelAllApprovalRequestsCode,
        CreateOverdueNotificationCode:
          EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description),1,250));
        RevertValueForFieldCode:
          BEGIN
            WorkflowStepArgument.CALCFIELDS("Field Caption");
            EXIT(COPYSTR(STRSUBSTNO(WorkflowResponse.Description,
                  GetTokenValue(RevertRecordFieldValueTok,WorkflowStepArgument."Field Caption")),1,250));
          END;
        ELSE
          EXIT(WorkflowResponse.Description);
      END;
    END;

    LOCAL PROCEDURE GetTokenValue@27(TokenValue@1001 : Text;FieldValue@1000 : Text) : Text;
    BEGIN
      IF FieldValue <> '' THEN
        EXIT(FieldValue);

      EXIT(TokenValue);
    END;

    PROCEDURE IsArgumentMandatory@10(ResponseFunctionName@1000 : Code[128]) : Boolean;
    BEGIN
      IF ResponseFunctionName IN
         [CreateNotificationEntryCode,CreatePmtLineForPostedPurchaseDocAsyncCode,CreateApprovalRequestsCode,
          CreatePmtLineForPostedPurchaseDocCode,CreateOverdueNotificationCode]
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE HasRequiredArguments@19(WorkflowStep@1001 : Record 1502) : Boolean;
    VAR
      WorkflowStepArgument@1000 : Record 1523;
    BEGIN
      IF NOT IsArgumentMandatory(WorkflowStep."Function Name") THEN
        EXIT(TRUE);

      IF NOT WorkflowStepArgument.GET(WorkflowStep.Argument) THEN
        EXIT(FALSE);

      CASE WorkflowStep."Function Name" OF
        CreatePmtLineForPostedPurchaseDocAsyncCode,
        CreatePmtLineForPostedPurchaseDocCode:
          IF (WorkflowStepArgument."General Journal Template Name" = '') OR
             (WorkflowStepArgument."General Journal Batch Name" = '')
          THEN
            EXIT(FALSE);
        CreateApprovalRequestsCode:
          IF WorkflowStepArgument."Approver Type" = WorkflowStepArgument."Approver Type"::"Workflow User Group" THEN
            IF WorkflowStepArgument."Workflow User Group Code" = '' THEN
              EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateOverdueNotifications@7(WorkflowStepInstance@1001 : Record 1504);
    VAR
      WorkflowStepArgument@1003 : Record 1523;
      NotificationManagement@1002 : Codeunit 1510;
    BEGIN
      IF WorkflowStepArgument.GET(WorkflowStepInstance.Argument) THEN
        NotificationManagement.CreateOverdueNotifications(WorkflowStepArgument);
    END;

    LOCAL PROCEDURE MarkReadyForOCR@37(Variant@1000 : Variant);
    VAR
      IncomingDocumentAttachment@1001 : Record 133;
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocumentAttachment := Variant;
      IncomingDocument.GET(IncomingDocumentAttachment."Incoming Document Entry No.");
      IncomingDocument.SendToJobQueue(FALSE);
    END;

    LOCAL PROCEDURE SendToOCRAsync@71(Variant@1000 : Variant);
    VAR
      JobQueueEntry@1001 : Record 472;
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.TESTFIELD(Status,IncomingDocument.Status::Released);
      IncomingDocument.TESTFIELD("OCR Status",IncomingDocument."OCR Status"::Ready);
      JobQueueEntry.ScheduleJobQueueEntry(CODEUNIT::"OCR Inc. Doc. via Job Queue",IncomingDocument.RECORDID);
    END;

    LOCAL PROCEDURE SendToOCR@81(Variant@1000 : Variant);
    VAR
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.SendToOCR(FALSE);
    END;

    LOCAL PROCEDURE ReceiveFromOCRAsync@72(Variant@1000 : Variant);
    VAR
      IncomingDocument@1002 : Record 130;
      OCRIncDocViaJobQueue@1003 : Codeunit 137;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.TESTFIELD(Status,IncomingDocument.Status::Released);
      IncomingDocument.TESTFIELD("OCR Status",IncomingDocument."OCR Status"::Sent);
      OCRIncDocViaJobQueue.EnqueueIncomingDoc(IncomingDocument);
    END;

    LOCAL PROCEDURE ReceiveFromOCR@82(Variant@1000 : Variant);
    VAR
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.RetrieveFromOCR(FALSE);
    END;

    LOCAL PROCEDURE CreateDocFromIncomingDoc@51(Variant@1000 : Variant);
    VAR
      IncomingDocument@1001 : Record 130;
      ErrorMessage@1003 : Record 700;
      ErrorMsg@1002 : Text;
    BEGIN
      IncomingDocument := Variant;
      IF NOT IncomingDocument.TryCreateDocumentWithDataExchange THEN BEGIN
        ErrorMsg := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN(ErrorMessage.Description));
        ErrorMessage.SetContext(IncomingDocument);
        ErrorMessage.LogSimpleMessage(ErrorMessage."Message Type"::Error,ErrorMsg);
        CLEARLASTERROR;
      END;
    END;

    LOCAL PROCEDURE CreateReleasedDocFromIncomingDoc@67(Variant@1000 : Variant);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      IncomingDocument := Variant;
      IncomingDocument.CreateReleasedDocumentWithDataExchange;
    END;

    LOCAL PROCEDURE CreateJournalFromIncomingDoc@62(Variant@1000 : Variant);
    VAR
      IncomingDocument@1001 : Record 130;
      ErrorMessage@1003 : Record 700;
      ErrorMsg@1002 : Text;
    BEGIN
      IncomingDocument := Variant;
      IF NOT IncomingDocument.TryCreateGeneralJournalLineWithDataExchange THEN BEGIN
        ErrorMsg := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN(ErrorMessage.Description));
        ErrorMessage.SetContext(IncomingDocument);
        ErrorMessage.LogSimpleMessage(ErrorMessage."Message Type"::Error,ErrorMsg);
        CLEARLASTERROR;
      END;
    END;

    BEGIN
    END.
  }
}

