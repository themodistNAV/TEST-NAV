OBJECT Table 9021607 Field Update from Web
{
  OBJECT-PROPERTIES
  {
    Date=13/07/16;
    Time=[ 1:49:59 PM];
    Version List=EC2016.6;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Field Update from Web;
               ENG=Field Update from Web];
    LookupPageID=Page9021112;
    DrillDownPageID=Page9021112;
  }
  FIELDS
  {
    { 1   ;   ;NavFieldUpdateGuID  ;Text38        ;CaptionML=[ENU=NavFieldUpdateGuID;
                                                              ENG=NavFieldUpdateGuID] }
    { 20  ;   ;Label Code          ;Code10        ;TableRelation=Label;
                                                   CaptionML=[ENU=Label Code;
                                                              ENG=Label Code] }
    { 24  ;   ;Table Name          ;Text50        ;CaptionML=[ENU=Table Name;
                                                              ENG=Table Name] }
    { 26  ;   ;Field Name          ;Text50        ;CaptionML=[ENU=Field Name;
                                                              ENG=Field Name] }
    { 28  ;   ;Table Primary Key   ;Text100       ;CaptionML=[ENU=Table Primary Key;
                                                              ENG=Table Primary Key] }
    { 30  ;   ;DateTimeInsertedModified;DateTime  ;CaptionML=[ENU=DateTimeInsertedModified;
                                                              ENG=DateTimeInsertedModified] }
    { 50  ;   ;Old Value           ;Text250       ;CaptionML=[ENU=Old Value;
                                                              ENG=Old Value] }
    { 52  ;   ;New Value Integer   ;Integer       ;CaptionML=[ENU=New Value Integer;
                                                              ENG=New Value Integer] }
    { 54  ;   ;New Value Text      ;Text250       ;CaptionML=[ENU=New Value Text;
                                                              ENG=New Value Text] }
    { 56  ;   ;New Value Boolean   ;Boolean       ;CaptionML=[ENU=New Value Boolean;
                                                              ENG=New Value Boolean] }
    { 58  ;   ;New Value DateTime  ;DateTime      ;CaptionML=[ENU=New Value DateTime;
                                                              ENG=New Value DateTime] }
    { 60  ;   ;New Value Float     ;Decimal       ;CaptionML=[ENU=New Value Float;
                                                              ENG=New Value Float] }
    { 62  ;   ;Data Type           ;Text10        ;CaptionML=[ENU=Data Type;
                                                              ENG=Data Type] }
    { 100 ;   ;NAV Processing Status;Option       ;CaptionML=[ENU=NAV Processing Status;
                                                              ENG=NAV Processing Status];
                                                   OptionCaptionML=[ENU=" ,Processed,Error";
                                                                    ENG=" ,Processed,Error"];
                                                   OptionString=[ ,Processed,Error];
                                                   Description=For NAV processing not injected. }
    { 102 ;   ;Error in Data Type  ;Boolean       ;CaptionML=[ENU=Error in Data Type;
                                                              ENG=Error in Data Type] }
    { 104 ;   ;Error Message       ;Text250       ;CaptionML=[ENU=Error Message;
                                                              ENG=Error Message] }
    { 106 ;   ;DateTime NAV Auto Updated;DateTime ;CaptionML=[ENU=DateTime NAV Auto Updated;
                                                              ENG=DateTime NAV Auto Updated] }
    { 110 ;   ;First Primary Key   ;Text38        ;CaptionML=[ENU=First Primary Key;
                                                              ENG=First Primary Key] }
    { 112 ;   ;Second Primary Key  ;Text38        ;CaptionML=[ENU=Second Primary Key;
                                                              ENG=Second Primary Key] }
    { 114 ;   ;Third Primary Key   ;Text38        ;CaptionML=[ENU=Third Primary Key;
                                                              ENG=Third Primary Key] }
    { 120 ;   ;Manually Processed By;Code40       ;CaptionML=[ENU=Manually Processed By;
                                                              ENG=Manually Processed By] }
    { 122 ;   ;DateTime Manually Processed;DateTime;
                                                   CaptionML=[ENU=DateTime Manually Processed;
                                                              ENG=DateTime Manually Processed] }
  }
  KEYS
  {
    {    ;NavFieldUpdateGuID                      ;Clustered=Yes }
    {    ;NAV Processing Status,DateTimeInsertedModified }
    {    ;Label Code,Table Name,First Primary Key,Second Primary Key,Third Primary Key }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1190000005 : TextConst 'ENU=A %1 of %2 is not valid. (0);ENG=A %1 of %2 is not valid. (0)';
      Processed@1190000006 : Boolean;
      ShipTo@1190000007 : Record 222;
      Text001@1190000008 : TextConst 'ENU=Found Primary Key separator in Table Primary Key when there should be none. (1);ENG=Found Primary Key separator in Table Primary Key when there should be none. (1)';
      Text002@1190000009 : TextConst 'ENU=Code not designed to handle more than 3 fields in Primary Key. (2);ENG=Code not designed to handle more than 3 fields in Primary Key. (2)';
      Text003@1190000010 : TextConst 'ENU=Could not found first Primary Key Separator in Table Primary Key when there should be %1. (3);ENG=Could not found first Primary Key Separator in Table Primary Key when there should be %1. (3)';
      Text004@1190000011 : TextConst 'ENU=Only found %1 Primary Key Separators in Table Primary Key when there should be %2. (4);ENG=Only found %1 Primary Key Separators in Table Primary Key when there should be %2. (4)';
      Text005@1190000012 : TextConst 'ENU=There were too many Primary Key Separators in the Table Primary Key. (5);ENG=There were too many Primary Key Separators in the Table Primary Key. (5)';
      Text006@1190000013 : TextConst 'ENU=Could not find %1 with Key Fields %2, %3. (6);ENG=Could not find %1 with Key Fields %2, %3. (6)';
      InternetOrder@1190000014 : Record 9021666;
      SalesHeader@1190000015 : Record 36;
      SalesCommentLine@1040002 : Record 44;
      WebCommentLine@1040004 : Record 9021665;
      ResultCode@1190000017 : Code[10];
      Text007@1190000018 : TextConst 'ENU=Could not find %1 Document Type %2, Document No. %3 to update %4. (7);ENG=Could not find %1 Document Type %2, Document No. %3 to update %4. (7)';
      Text008@1190000019 : TextConst 'ENU=Error Processing %1 Document Type %2, Document No. %3 to update Shipment Date. (8);ENG=Error Processing %1 Document Type %2, Document No. %3 to update Shipment Date. (8)';
      Text009@1190000020 : TextConst 'ENU=You cannot try to Process an already processed Field Update. (9);ENG=You cannot try to Process an already processed Field Update. (9)';
      Text010@1190000021 : TextConst 'ENU=Do you want to mark this as processed? (10);ENG=Do you want to mark this as processed? (10)';
      Text011@1190000022 : TextConst 'ENU=Primary Key(s) were not determined.  This needs correcting first. (11);ENG=Primary Key(s) were not determined.  This needs correcting first. (11)';
      Text012@1190000023 : TextConst 'ENU=Wrong Data Type. (12);ENG=Wrong Data Type. (12)';
      Text013@1040000 : TextConst 'ENU=A Table Name of %1 is not valid for Label Code %2. (13);ENG=A Table Name of %1 is not valid for Label Code %2. (13)';
      Text014@1040001 : TextConst 'ENU=Error Processing %1 Document Type %2, Document No. %3 to update Shipment Date as Sales %1 not Open. (8);ENG=Error Processing %1 Document Type %2, Document No. %3 to update Shipment Date as Sales %1 not Open. (8)';
      LineNo@1040003 : Integer;
      Text015@1040006 : TextConst 'ENU=Was blanked from web.;ENG=Was blanked from web.';
      Text016@1040007 : TextConst 'ENU=See Comments in Web Comment Lines.;ENG=See Comments in Web Comment Lines.';
      Text017@1000000000 : TextConst 'ENU=Are you sure you want to process this as it may overwrite later changes?;ENG=Are you sure you want to process this as it may overwrite later changes?';
      Text018@1000000001 : TextConst 'ENU=Processing Abandonned.;ENG=Processing Abandonned.';

    PROCEDURE Process@1190000005() : Boolean;
    VAR
      TxtNewCommentFromWeb@1000000000 : TextConst 'ENU=New comment from web;ENG=New comment from web';
      TxtErrorMessage@1000000001 : TextConst 'ENU=Internet Automation encountered untrapped error trying to Process Field Update. (45);ENG=Internet Automation encountered untrapped error trying to Process Field Update. (45)';
    BEGIN
      IF "NAV Processing Status" = "NAV Processing Status"::Processed THEN
        ERROR(Text009);

      IF "NAV Processing Status" = "NAV Processing Status"::Error THEN BEGIN
        IF GUIALLOWED THEN BEGIN
          IF CONFIRM(Text017) THEN BEGIN
            "NAV Processing Status" := "NAV Processing Status"::" ";
            "Error in Data Type" := FALSE;
            "Error Message" := '';
          END ELSE
            ERROR(Text018);
        END ELSE
          EXIT;
      END;

      Processed := FALSE;
      IF ("Data Type" <> 'Date') AND
        ("Data Type" <> 'Text') THEN BEGIN
        ErrorInDataType(STRSUBSTNO(Text000,'Data Type',"Data Type"));
      END ELSE BEGIN
        CASE "Table Name" OF
          'ShopSalesHeader' :
            BEGIN
              IF NOT BuildPrimaryKey(1) THEN BEGIN
                "NAV Processing Status" := "NAV Processing Status"::Error;
              END ELSE BEGIN
                IF NOT InternetOrder.GET(FORMAT("First Primary Key")) THEN BEGIN
                  //Set back to blank so it is processed next time around.
                  "NAV Processing Status" := "NAV Processing Status"::" ";
                  Processed := TRUE;
                END ELSE BEGIN
                  CASE "Field Name" OF
                    'ShipmentDate' :
                      BEGIN
                        IF "Data Type" = 'Date' THEN BEGIN
                          IF "New Value DateTime" = 0DT THEN BEGIN
                            ErrorInDataType(STRSUBSTNO(Text000,'New DateTime','blank'));
                          END ELSE BEGIN
                            IF InternetOrder.Status = InternetOrder.Status::Converted THEN BEGIN
                              IF SalesHeader.GET(InternetOrder."Converted-To Document Type",
                                                  InternetOrder."Converted-To Document No.") THEN BEGIN
                                IF SalesHeader.Status = SalesHeader.Status::Open THEN BEGIN
                                  SalesHeader.VALIDATE("Shipment Date",DT2DATE("New Value DateTime"));
                                  SalesHeader.MODIFY;
                                  Processed := TRUE;
                                  //Also update Internet Order
                                  InternetOrder."Shipment Date" := DT2DATE("New Value DateTime");
                                  InternetOrder.MODIFY;
                                END ELSE BEGIN
                                  "NAV Processing Status" := "NAV Processing Status"::Error;
                                  "Error Message" := STRSUBSTNO(Text014,'Sales Header',
                                                      FORMAT(InternetOrder."Converted-To Document Type"),
                                                      FORMAT(InternetOrder."Converted-To Document No."));
                                END;
                              END ELSE BEGIN
                                "NAV Processing Status" := "NAV Processing Status"::Error;
                                "Error Message" := STRSUBSTNO(Text007,'Sales Header',
                                                    FORMAT(InternetOrder."Converted-To Document Type"),
                                                    FORMAT(InternetOrder."Converted-To Document No."),
                                                    InternetOrder.FIELDCAPTION("Shipment Date"));
                              END;
                            END ELSE BEGIN
                              //If not converted just update Internet Order.
                              InternetOrder."Shipment Date" := DT2DATE("New Value DateTime");
                              InternetOrder.MODIFY;
                              Processed := TRUE;
                            END;
                          END;
                        END ELSE
                          ErrorInDataType(STRSUBSTNO(Text000,'Data Type',"Data Type"))
                      END;  //END of 'ShipmentDate'
                    'HeaderComment' :
                      BEGIN
                        IF "Data Type" = 'Text' THEN BEGIN
                          IF "New Value Text" = '' THEN
                            "New Value Text" := Text015;
                            //ErrorInDataType(STRSUBSTNO(Text000,'New Value Text','blank'));
                          //END ELSE BEGIN
                            IF InternetOrder.Status = InternetOrder.Status::Converted THEN BEGIN
                              IF SalesHeader.GET(InternetOrder."Converted-To Document Type",
                                                  InternetOrder."Converted-To Document No.") THEN BEGIN
                                SalesCommentLine.RESET;
                                SalesCommentLine.SETRANGE("Document Type",InternetOrder."Converted-To Document Type");
                                SalesCommentLine.SETRANGE("No.",InternetOrder."Converted-To Document No.");
                                IF SalesCommentLine.FIND('+') THEN
                                  LineNo := SalesCommentLine."Line No."
                                ELSE
                                  LineNo := 0;
                                CLEAR(SalesCommentLine);
                                SalesCommentLine.INIT;
                                SalesCommentLine."Document Type" := InternetOrder."Converted-To Document Type";
                                SalesCommentLine."No." := InternetOrder."Converted-To Document No.";
                                LineNo := LineNo + 10000;
                                SalesCommentLine."Line No." := LineNo;
                                SalesCommentLine.Date := TODAY;
                                SalesCommentLine.Comment := TxtNewCommentFromWeb;
                                SalesCommentLine.INSERT;
                                SalesCommentLine.INIT;
                                SalesCommentLine."Document Type" := InternetOrder."Converted-To Document Type";
                                SalesCommentLine."No." := InternetOrder."Converted-To Document No.";
                                LineNo := LineNo + 10000;
                                SalesCommentLine."Line No." := LineNo;
                                SalesCommentLine.Comment := "New Value Text";
                                SalesCommentLine.INSERT;
                                Processed := TRUE;
                              END ELSE BEGIN
                                "NAV Processing Status" := "NAV Processing Status"::Error;
                                "Error Message" := STRSUBSTNO(Text007,'Sales Header',
                                                    FORMAT(InternetOrder."Converted-To Document Type"),
                                                    FORMAT(InternetOrder."Converted-To Document No."),
                                                    InternetOrder.FIELDCAPTION(Comment));
                              END;
                              //Update Internet Order Comments
                              UpdateInternetOrderComments;
                            END ELSE BEGIN
                              //If not converted update Internet Order.
                              //If there are comments in the Internet Order, take them out and
                              //put them in WebCommentLines.
                              UpdateInternetOrderComments;
                              Processed := TRUE;
                            END;
                          //END;
                        END ELSE
                          ErrorInDataType(STRSUBSTNO(Text000,'Data Type',"Data Type"))
                      END;  //END of 'HeaderComment'
                    'CustomerPONumber' :
                      BEGIN
                        IF "Data Type" = 'Text' THEN BEGIN
                          IF "New Value Text" = '' THEN
                            "New Value Text" := Text015;
                          IF InternetOrder.Status = InternetOrder.Status::Converted THEN BEGIN
                            IF SalesHeader.GET(InternetOrder."Converted-To Document Type",
                                                InternetOrder."Converted-To Document No.") THEN BEGIN
                              IF SalesHeader.Status = SalesHeader.Status::Open THEN BEGIN
                                SalesHeader."Your Reference" := "New Value Text";
                                SalesHeader.MODIFY;

                                Processed := TRUE;
                                //Also update Internet Order
                                InternetOrder."Your Reference" := "New Value Text";
                                InternetOrder.MODIFY;
                              END ELSE BEGIN
                                "NAV Processing Status" := "NAV Processing Status"::Error;
                                "Error Message" := STRSUBSTNO(Text014,'Sales Header',
                                                    FORMAT(InternetOrder."Converted-To Document Type"),
                                                    FORMAT(InternetOrder."Converted-To Document No."));
                              END;
                            END ELSE BEGIN
                              "NAV Processing Status" := "NAV Processing Status"::Error;
                              "Error Message" := STRSUBSTNO(Text007,'Sales Header',
                                                  FORMAT(InternetOrder."Converted-To Document Type"),
                                                  FORMAT(InternetOrder."Converted-To Document No."),
                                                  InternetOrder.FIELDCAPTION("Your Reference"));
                            END;
                          END ELSE BEGIN
                            //If not converted just update Internet Order.
                            InternetOrder."Your Reference" := "New Value Text";
                            InternetOrder.MODIFY;
                            Processed := TRUE;
                          END;
                        END ELSE
                          ErrorInDataType(STRSUBSTNO(Text000,'Data Type',"Data Type"))
                      END;  //END of 'CustomerPONumber'
                    ELSE
                      ErrorInDataType(STRSUBSTNO(Text000,'Field Name',"Field Name"));  //Not Valid FieldName
                  END;  //END of CASE Statement
                END;  //END of GET Internet Order Header.
              END;  //END of BuildPrimaryKey(1)
            END; //END of 'ShopSalesHeader'
          'ShippingAddressB2B' :
            BEGIN
              CASE "Field Name" OF
                'ContactName' :
                  BEGIN
                    IF "Data Type" = 'Text' THEN BEGIN
                      IF "New Value Text" = '' THEN
                        "New Value Text" := Text015;
                        //ErrorInDataType(STRSUBSTNO(Text000,'New Text','blank'));
                      //END ELSE BEGIN
                        IF BuildPrimaryKey(2) THEN BEGIN
                          IF ShipTo.GET(FORMAT("First Primary Key"),FORMAT("Second Primary Key")) THEN BEGIN
                            ShipTo.Contact := COPYSTR("New Value Text",1,MAXSTRLEN(ShipTo.Contact));
                            ShipTo.MODIFY;
                            Processed := TRUE;
                          END ELSE BEGIN
                            "NAV Processing Status" := "NAV Processing Status"::Error;
                            "Error Message" := STRSUBSTNO(Text006,'Ship-to Address',
                                               FORMAT("First Primary Key"),FORMAT("Second Primary Key"));
                          END;
                        END ELSE
                          "NAV Processing Status" := "NAV Processing Status"::Error;
                      //END;
                    END ELSE
                      ErrorInDataType(STRSUBSTNO(Text000,'Data Type',"Data Type"))
                  END;
                'PhoneNo' :
                  BEGIN
                    IF "Data Type" = 'Text' THEN BEGIN
                      IF "New Value Text" = '' THEN
                        "New Value Text" := Text015;
                      IF BuildPrimaryKey(2) THEN BEGIN
                        IF ShipTo.GET(FORMAT("First Primary Key"),FORMAT("Second Primary Key")) THEN BEGIN
                          ShipTo."Phone No." := COPYSTR("New Value Text",1,MAXSTRLEN(ShipTo."Phone No."));
                          ShipTo.MODIFY;
                          Processed := TRUE;
                        END ELSE BEGIN
                          "NAV Processing Status" := "NAV Processing Status"::Error;
                          "Error Message" := STRSUBSTNO(Text006,'Ship-to Address',
                                              FORMAT("First Primary Key"),FORMAT("Second Primary Key"));
                        END;
                      END ELSE
                        "NAV Processing Status" := "NAV Processing Status"::Error;
                    END ELSE
                      ErrorInDataType(STRSUBSTNO(Text000,'Data Type',"Data Type"))
                  END;
                ELSE
                  ErrorInDataType(STRSUBSTNO(Text000,'Field Name',"Field Name"));
              END;
            END;
          'WasteMgmtHeader' :
            BEGIN
              IF "Label Code" = 'WARD' THEN BEGIN
                IF NOT BuildPrimaryKey(1) THEN BEGIN
                  "NAV Processing Status" := "NAV Processing Status"::Error;
                END ELSE BEGIN
                  CASE "Field Name" OF
                    'HeaderComment' :
                      BEGIN
                        IF "Data Type" = 'Text' THEN BEGIN
                          IF "New Value Text" = '' THEN
                            "New Value Text" := Text015;
                        END ELSE BEGIN
                          ErrorInDataType(STRSUBSTNO(Text000,'Data Type',"Data Type"));
                        END;
                      END;  //END of FieldName 'HeaderComment'
                    'ShipmentDate' :
                      BEGIN
                        IF "Data Type" = 'Date' THEN BEGIN
                          IF "New Value DateTime" = 0DT THEN BEGIN
                              ErrorInDataType(STRSUBSTNO(Text000,'New DateTime','blank'));
                          END
                        END ELSE BEGIN
                          ErrorInDataType(STRSUBSTNO(Text000,'Data Type',"Data Type"));
                        END;
                      END;  //END of FieldName 'ShipmentDate'
                    'YourReference' :
                      BEGIN
                        IF "Data Type" = 'Text' THEN BEGIN
                          IF "New Value Text" = '' THEN
                            "New Value Text" := Text015;
                        END ELSE BEGIN
                          ErrorInDataType(STRSUBSTNO(Text000,'Data Type',"Data Type"));
                        END;
                      END; //END of FieldName 'YourReference'
                    'CustomerPONumber' :
                      BEGIN
                        IF "Data Type" = 'Text' THEN BEGIN
                          IF "New Value Text" = '' THEN
                            "New Value Text" := Text015;
                        END ELSE BEGIN
                          ErrorInDataType(STRSUBSTNO(Text000,'Data Type',"Data Type"));
                        END;
                      END;  //END of FieldName 'CustomerPONumber'
                    ELSE
                      ErrorInDataType(STRSUBSTNO(Text000,'Field Name',"Field Name")); //Not Valid FieldName
                  END;  //END of "Field Name" CASE Statement
                END;  //END of BuildPrimaryKey
              END ELSE BEGIN
                ErrorInDataType(STRSUBSTNO(Text013,"Table Name","Label Code"));
              END;  //END of IF "Label Code" = WARD
            END;  //END of TableName 'WasteMgmtHeader'
          ELSE
            ErrorInDataType(STRSUBSTNO(Text000,'Table Name',"Table Name"));
        END;
      END;

      IF Processed THEN BEGIN
        "NAV Processing Status" := "NAV Processing Status"::Processed;
        IF "Error Message" = TxtErrorMessage THEN
          "Error Message" := '';
        "DateTime NAV Auto Updated" := CURRENTDATETIME;
      END;
      MODIFY;
      EXIT(Processed);
    END;

    PROCEDURE ErrorInDataType@1190000006(ErrorText@1190000005 : Text[250]);
    BEGIN
      "NAV Processing Status" := "NAV Processing Status"::Error;
      "Error in Data Type" := TRUE;
      "Error Message" := ErrorText;
    END;

    PROCEDURE BuildPrimaryKey@1190000007(NoOfFieldsInPrimaryKey@1190000005 : Integer) : Boolean;
    VAR
      KeySeparator@1190000006 : Text[1];
      PosKeySeparator@1190000007 : Integer;
      RemainingPrimaryKeyString@1190000008 : Text[100];
    BEGIN
      KeySeparator := ',';
      CASE NoOfFieldsInPrimaryKey OF
        1 :
          BEGIN
            IF "First Primary Key" <> '' THEN
              EXIT(TRUE);
            IF STRPOS("Table Primary Key",KeySeparator) > 0 THEN BEGIN
              "Error Message" := Text001;
              EXIT(FALSE);
            END ELSE
              "First Primary Key" := "Table Primary Key";
          END;
        2 :
          BEGIN
            IF ("First Primary Key" <> '') AND
               ("Second Primary Key" <> '') THEN
              EXIT(TRUE);
            PosKeySeparator := STRPOS("Table Primary Key",KeySeparator);
            IF PosKeySeparator = 0 THEN BEGIN
              "Error Message" := STRSUBSTNO(Text003,1);
              EXIT(FALSE);
            END ELSE BEGIN
              "First Primary Key" := COPYSTR("Table Primary Key",1,(PosKeySeparator - 1));
              RemainingPrimaryKeyString := COPYSTR("Table Primary Key",(PosKeySeparator + 1));
              IF STRPOS(RemainingPrimaryKeyString,KeySeparator) > 0 THEN BEGIN
                "Error Message" := Text005;
                EXIT(FALSE);
              END ELSE
                "Second Primary Key" := RemainingPrimaryKeyString;
            END;
          END;
        3 :
          BEGIN
            IF ("First Primary Key" <> '') AND
               ("Second Primary Key" <> '') AND
               ("Third Primary Key" <> '') THEN
              EXIT(TRUE);
            PosKeySeparator := STRPOS("Table Primary Key",KeySeparator);
            IF PosKeySeparator = 0 THEN BEGIN
              "Error Message" := STRSUBSTNO(Text003,1);
              EXIT(FALSE);
            END ELSE BEGIN
              "First Primary Key" := COPYSTR("Table Primary Key",1,(PosKeySeparator - 1));
              RemainingPrimaryKeyString := COPYSTR("Table Primary Key",(PosKeySeparator + 1));
              PosKeySeparator := STRPOS(RemainingPrimaryKeyString,KeySeparator);
              IF PosKeySeparator = 0 THEN BEGIN
                "Error Message" := STRSUBSTNO(Text004,1,2);
                EXIT(FALSE);
              END ELSE BEGIN
                "Second Primary Key" := COPYSTR("Table Primary Key",1,(PosKeySeparator - 1));
                RemainingPrimaryKeyString := COPYSTR(RemainingPrimaryKeyString,(PosKeySeparator + 1));
                PosKeySeparator := STRPOS(RemainingPrimaryKeyString,KeySeparator);
                IF PosKeySeparator > 0 THEN BEGIN
                  "Error Message" := Text005;
                  EXIT(FALSE);
                END ELSE
                  "Third Primary Key" := RemainingPrimaryKeyString;
              END;
            END;
          END;
        ELSE BEGIN
          "Error Message" := Text002;
          EXIT(FALSE);
        END;
      END;
      MODIFY;
      COMMIT;
      EXIT(TRUE);
    END;

    PROCEDURE GoToDetail@1190000008();
    VAR
      LocalFieldUpdate@1190000005 : Record 9021607;
      IntOrderHeadRec@1190000006 : Record 9021666;
      ShipTo@1190000007 : Record 222;
      VersionCalls@1000000000 : Codeunit 9021662;
      TxtFormNotFound@1000000001 : TextConst 'ENU=Form not found in FieldUpdateFromWeb function GoToDetail for WasteMgmtHeader;ENG=Form not found in FieldUpdateFromWeb function GoToDetail for WasteMgmtHeader';
    BEGIN
      LocalFieldUpdate := Rec;
      CASE "Table Name" OF
        'ShopSalesHeader' :
          BEGIN
            IF ("First Primary Key" = '') THEN BEGIN
              ERROR(Text011);
            END ELSE BEGIN
              IntOrderHeadRec.GET("First Primary Key");
              VersionCalls.ShowIntOrder(IntOrderHeadRec);  //DOC EC2013.4.00
            END;
          END;
        'ShipToAddress' :
          BEGIN
            IF ("First Primary Key" = '') OR
               ("Second Primary Key" = '') THEN BEGIN
              ERROR(Text011);
            END ELSE BEGIN
              ShipTo.GET(FORMAT("First Primary Key"),FORMAT("Second Primary Key"));
              VersionCalls.ShowShipToAddress(ShipTo);  //DOC EC2013.4.00
            END;
          END;
        'WasteMgmtHeader' :
          BEGIN
            ERROR(TxtFormNotFound);
          END;
        ELSE
          ERROR(Text012);
      END;
      IF "NAV Processing Status" <> "NAV Processing Status"::Processed THEN BEGIN
        IF CONFIRM(Text010,TRUE) THEN BEGIN
          LocalFieldUpdate."NAV Processing Status" :=
            LocalFieldUpdate."NAV Processing Status"::Processed ;
          LocalFieldUpdate."Manually Processed By" := USERID;
          LocalFieldUpdate."DateTime Manually Processed" := CURRENTDATETIME;
          LocalFieldUpdate.MODIFY;
        END;
      END;
    END;

    PROCEDURE UpdateInternetOrderComments@1040000();
    VAR
      TxtCopiedFromInternetHeader@1000000000 : TextConst 'ENU=Copied from Internet Header;ENG=Copied from Internet Header';
      TxtNewCommentFromWeb@1000000001 : TextConst 'ENU=New Comment From Web;ENG=New Comment From Web';
    BEGIN
      WebCommentLine.RESET;
      WebCommentLine.SETCURRENTKEY("Header Guid","Line No.");
      WebCommentLine.SETRANGE("Header Guid",InternetOrder."Order Guid");
      IF WebCommentLine.FIND('+') THEN
        LineNo := WebCommentLine."Line No."
      ELSE
        LineNo := 0;
      CLEAR(WebCommentLine);
      IF (InternetOrder.Comment <> '') AND
        (InternetOrder.Comment <> Text016) THEN BEGIN
        WebCommentLine.INIT;
        //DOC EC2013.3.30 InternetShopMgt.Randomize;
        //DOC EC2013.3.30 WebCommentLine."Comment Line Guid" := InternetShopMgt.GenerateGuid;
        WebCommentLine."Comment Line Guid" := CREATEGUID;  //DOC EC2013.3.30
        WebCommentLine."Header Guid" := InternetOrder."Order Guid";
        LineNo := LineNo + 10000;
        WebCommentLine."Line No." := LineNo;
        WebCommentLine."DateTime Inserted Modified" := CURRENTDATETIME;  //DOC EC2013.4.00 replaced TODAY with CurrDT
        WebCommentLine."Label Code" := "Label Code";
        WebCommentLine.Comment := TxtCopiedFromInternetHeader;
        WebCommentLine.INSERT;

        WebCommentLine.INIT;
        //DOC EC2013.3.30 InternetShopMgt.Randomize;
        //DOC EC2013.3.30 WebCommentLine."Comment Line Guid" := InternetShopMgt.GenerateGuid;
        WebCommentLine."Comment Line Guid" := CREATEGUID; //DOC EC2013.3.30
        WebCommentLine."Header Guid" := InternetOrder."Order Guid";
        LineNo := LineNo + 10000;
        WebCommentLine."Line No." := LineNo;
        WebCommentLine."Label Code" := "Label Code";
        WebCommentLine.Comment := InternetOrder.Comment;
        WebCommentLine.INSERT;
      END;
      WebCommentLine.INIT;
      //DOC EC2013.3.30 InternetShopMgt.Randomize;
      //DOC EC2013.3.30 WebCommentLine."Comment Line Guid" := InternetShopMgt.GenerateGuid;
      WebCommentLine."Comment Line Guid" := CREATEGUID; //DOC EC2013.3.30
      WebCommentLine."Header Guid" := InternetOrder."Order Guid";
      LineNo := LineNo + 10000;
      WebCommentLine."Line No." := LineNo;
      WebCommentLine."DateTime Inserted Modified" := CURRENTDATETIME;  //DOC EC2013.4.00 replaced TODAY with CurrDT
      WebCommentLine."Label Code" := "Label Code";
      WebCommentLine.Comment := TxtNewCommentFromWeb;
      WebCommentLine.INSERT;

      WebCommentLine.INIT;
      //DOC EC2013.3.30 InternetShopMgt.Randomize;
      //DOC EC2013.3.30 WebCommentLine."Comment Line Guid" := InternetShopMgt.GenerateGuid;
      WebCommentLine."Comment Line Guid" := CREATEGUID;  //DOC EC2013.3.30
      WebCommentLine."Header Guid" := InternetOrder."Order Guid";
      LineNo := LineNo + 10000;
      WebCommentLine."Line No." := LineNo;
      WebCommentLine."Label Code" := "Label Code";
      WebCommentLine.Comment := "New Value Text";
      WebCommentLine.INSERT;
      InternetOrder.Comment := Text016;
      InternetOrder.MODIFY;
    END;

    BEGIN
    {
      //DOC EC2009.2.70 MQ 20/10/2011 - GW111020 Various changes to make live.; And WARD specific code
      //DOC EC2013.3.30 MQ 16/11/2012 - GW121116 Update
      //DOC EC2013.3.30 MQ 06/12/2012 - GW121206 now use CREATEGUID
      //DOC EC2013.4.00 MQ 04/11/2013 - GW131104 RTC
      //DOC EC2013.4.00 MQ 11/12/2013 - GW131211 replaced TODAY with CurrDT on WebCommentLine
      //DOC EC2013.4.00 MQ 10/01/2014 - GW140110 Increased UserID field to C40
      //DOC EC2016.6    JH 05/10/2016 - ECom 2016
    }
    END.
  }
}

