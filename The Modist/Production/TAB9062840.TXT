OBJECT Table 9062840 Item Import Worksheet Line
{
  OBJECT-PROPERTIES
  {
    Date=24/05/16;
    Time=12:00:00 PM;
    Version List=NH2016.16;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Batch No.");
               Rec.VALIDATE("Postion Text", Rec.GETPOSITION(FALSE));
             END;

    OnModify=BEGIN
               IF ( NOT (GetSystemActivity())) THEN
                 Rec.Status := Rec.Status::Loaded;
             END;

    OnDelete=BEGIN
               ImportErrorManagement.DeleteErrorsAndWarnings(DATABASE::"Item Import Worksheet Line", Rec.GETPOSITION(FALSE));
               ImportToolkit.DeleteEnhancedFields(Rec);
             END;

    OnRename=BEGIN
               Rec.VALIDATE("Postion Text", Rec.GETPOSITION(FALSE));
             END;

    CaptionML=[ENU=Item Import Worksheet Line;
               ENG=Item Import Worksheet Line];
  }
  FIELDS
  {
    { 1   ;   ;Batch No.           ;Code20        ;TableRelation="Item Import Worksheet Header";
                                                   CaptionML=[ENU=Batch No.;
                                                              ENG=Batch No.] }
    { 3   ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=" ,Loaded,Ready,Warning,Processed,Error";
                                                                    ENG=" ,Loaded,Ready,Warning,Processed,Error"];
                                                   OptionString=[ ,Loaded,Ready,Warning,Processed,Error] }
    { 4   ;   ;No. of Warnings     ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Import Error Line" WHERE (Type=CONST(Warning),
                                                                                                Table ID=CONST(9062840),
                                                                                                Table Position=FIELD(Postion Text)));
                                                   CaptionML=[ENU=No. of Warnings;
                                                              ENG=No. of Warnings];
                                                   Editable=No }
    { 5   ;   ;No. of Errors       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Import Error Line" WHERE (Type=CONST(Error),
                                                                                                Table ID=CONST(9062840),
                                                                                                Table Position=FIELD(Postion Text)));
                                                   CaptionML=[ENU=No. of Errors;
                                                              ENG=No. of Errors];
                                                   Editable=No }
    { 6   ;   ;Postion Text        ;Text250       ;CaptionML=[ENU=Postion Text;
                                                              ENG=Postion Text] }
    { 99  ;   ;System Activity     ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=System Activity;
                                                              ENG=System Activity] }
    { 100 ;   ;No.                 ;Code20        ;TableRelation=Item;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 101 ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 102 ;   ;Base Unit of Measure Code;Code10   ;TableRelation="Unit of Measure";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Base Unit of Measure Code;
                                                              ENG=Base Unit of Measure Code] }
    { 103 ;   ;Unit of Measure 2 Code;Code10      ;TableRelation="Unit of Measure";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Unit of Measure 2 Code;
                                                              ENG=Unit of Measure 2 Code] }
    { 104 ;   ;Qty per Unit of Measure 2;Decimal  ;InitValue=1;
                                                   CaptionML=[ENU=Qty per Unit of Measure 2;
                                                              ENG=Qty per Unit of Measure 2];
                                                   DecimalPlaces=0:5 }
    { 105 ;   ;Unit of Measure 3 Code;Code10      ;TableRelation="Unit of Measure";
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Unit of Measure 3 Code;
                                                              ENG=Unit of Measure 3 Code] }
    { 106 ;   ;Qty per Unit of Measure 3;Decimal  ;InitValue=1;
                                                   CaptionML=[ENU=Qty per Unit of Measure 3;
                                                              ENG=Qty per Unit of Measure 3];
                                                   DecimalPlaces=0:5 }
    { 107 ;   ;Inventory Posting Group;Code10     ;TableRelation="Inventory Posting Group";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              ENG=Inventory Posting Group] }
    { 108 ;   ;Item Discount Group Code;Code20    ;TableRelation="Item Discount Group";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Item Discount Group Code;
                                                              ENG=Item Discount Group Code] }
    { 109 ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENG=Gen. Prod. Posting Group] }
    { 110 ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENG=VAT Prod. Posting Group] }
    { 111 ;   ;Unit Price (Base UoM);Decimal      ;CaptionML=[ENU=Unit Price (Base UoM);
                                                              ENG=Unit Price (Base UoM)];
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 112 ;   ;Unit Price (UoM 2)  ;Decimal       ;CaptionML=[ENU=Unit Price (UoM 2);
                                                              ENG=Unit Price (UoM 2)];
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 113 ;   ;Unit Price (UoM 3)  ;Decimal       ;CaptionML=[ENU=Unit Price (UoM 3);
                                                              ENG=Unit Price (UoM 3)];
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 114 ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Vendor No.;
                                                              ENG=Vendor No.] }
    { 115 ;   ;Vendor Item No.     ;Text20        ;CaptionML=[ENU=Vendor Item No.;
                                                              ENG=Vendor Item No.] }
    { 116 ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENG=Gross Weight];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 117 ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENG=Net Weight];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 118 ;   ;Global Dimension 1 Code;Code20     ;OnLookup=BEGIN
                                                              ImportToolkit.DimensionValueLookup(1, Rec."Global Dimension 1 Code");
                                                            END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENG=Global Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 119 ;   ;Global Dimension 2 Code;Code20     ;OnLookup=BEGIN
                                                              ImportToolkit.DimensionValueLookup(2, Rec."Global Dimension 2 Code");
                                                            END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENG=Global Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 120 ;   ;Shortcut Dimension 3 Code;Code20   ;OnLookup=BEGIN
                                                              ImportToolkit.DimensionValueLookup(3, Rec."Shortcut Dimension 3 Code");
                                                            END;

                                                   CaptionML=[ENU=Shortcut Dimension 3 Code;
                                                              ENG=Shortcut Dimension 3 Code];
                                                   CaptionClass='1,1,3' }
    { 121 ;   ;Shortcut Dimension 4 Code;Code20   ;OnLookup=BEGIN
                                                              ImportToolkit.DimensionValueLookup(4, Rec."Shortcut Dimension 4 Code");
                                                            END;

                                                   CaptionML=[ENU=Shortcut Dimension 4 Code;
                                                              ENG=Shortcut Dimension 4 Code];
                                                   CaptionClass='1,1,4' }
    { 122 ;   ;Shortcut Dimension 5 Code;Code20   ;OnLookup=BEGIN
                                                              ImportToolkit.DimensionValueLookup(5, Rec."Shortcut Dimension 5 Code");
                                                            END;

                                                   CaptionML=[ENU=Shortcut Dimension 5 Code;
                                                              ENG=Shortcut Dimension 5 Code];
                                                   CaptionClass='1,1,5' }
    { 123 ;   ;Shortcut Dimension 6 Code;Code20   ;OnLookup=BEGIN
                                                              ImportToolkit.DimensionValueLookup(6, Rec."Shortcut Dimension 6 Code");
                                                            END;

                                                   CaptionML=[ENU=Shortcut Dimension 6 Code;
                                                              ENG=Shortcut Dimension 6 Code];
                                                   CaptionClass='1,1,6' }
    { 124 ;   ;Shortcut Dimension 7 Code;Code20   ;OnLookup=BEGIN
                                                              ImportToolkit.DimensionValueLookup(7, Rec."Shortcut Dimension 7 Code");
                                                            END;

                                                   CaptionML=[ENU=Shortcut Dimension 7 Code;
                                                              ENG=Shortcut Dimension 7 Code];
                                                   CaptionClass='1,1,7' }
    { 125 ;   ;Shortcut Dimension 8 Code;Code20   ;OnLookup=BEGIN
                                                              ImportToolkit.DimensionValueLookup(8, Rec."Shortcut Dimension 8 Code");
                                                            END;

                                                   CaptionML=[ENU=Shortcut Dimension 8 Code;
                                                              ENG=Shortcut Dimension 8 Code];
                                                   CaptionClass='1,1,8' }
    { 126 ;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENG=Item Category Code] }
    { 127 ;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENG=Product Group Code] }
    { 128 ;   ;Item Tracking Code  ;Code10        ;TableRelation="Item Tracking Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Item Tracking Code;
                                                              ENG=Item Tracking Code] }
    { 129 ;   ;Tariff No.          ;Code20        ;TableRelation="Tariff Number";
                                                   CaptionML=[ENU=Commodity Code;
                                                              ENG=Commodity Code] }
    { 130 ;   ;Costing Method      ;Option        ;CaptionML=[ENU=Costing Method;
                                                              ENG=Costing Method];
                                                   OptionCaptionML=[ENU=" ,FIFO,LIFO,Specific,Average,Standard";
                                                                    ENG=" ,FIFO,LIFO,Specific,Average,Standard"];
                                                   OptionString=[ ,FIFO,LIFO,Specific,Average,Standard] }
    { 131 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENG=Unit Cost];
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 132 ;   ;Is Service          ;Boolean       ;CaptionML=[ENU=Is Service;
                                                              ENG=Is Service] }
    { 200 ;   ;Barcode 1 No.       ;Code20        ;TableRelation="Item Cross Reference"."Cross-Reference No." WHERE (Item No.=FIELD(No.),
                                                                                                                     Cross-Reference Type=CONST(Bar Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Barcode 1 No.;
                                                              ENG=Barcode 1 No.];
                                                   NotBlank=Yes }
    { 201 ;   ;Barcode 2 No.       ;Code20        ;TableRelation="Item Cross Reference"."Cross-Reference No." WHERE (Item No.=FIELD(No.),
                                                                                                                     Cross-Reference Type=CONST(Bar Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Barcode 2 No.;
                                                              ENG=Barcode 2 No.];
                                                   NotBlank=Yes }
    { 202 ;   ;Barcode 3 No.       ;Code20        ;TableRelation="Item Cross Reference"."Cross-Reference No." WHERE (Item No.=FIELD(No.),
                                                                                                                     Cross-Reference Type=CONST(Bar Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Barcode 3 No.;
                                                              ENG=Barcode 3 No.];
                                                   NotBlank=Yes }
  }
  KEYS
  {
    {    ;Batch No.,No.                           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ItemImportWorksheetHeader@1000000003 : Record 9062839;
      ImportErrorManagement@1000000001 : Codeunit 9062708;
      ImportToolkit@1000000000 : Codeunit 9062701;

    PROCEDURE GetSystemActivity@1000000004() : Boolean;
    VAR
      lSystemActivity@1000000000 : Boolean;
    BEGIN
      Rec.FILTERGROUP(2);
      IF (Rec.GETFILTER("System Activity") <> '') THEN
        lSystemActivity := Rec.GETRANGEMIN("System Activity");
      Rec.FILTERGROUP(0);
      EXIT(lSystemActivity);
    END;

    PROCEDURE SetSystemActivity@1000000002(pSystemActivity@1000000000 : Boolean);
    BEGIN
      Rec.FILTERGROUP(2);
      IF (pSystemActivity) THEN
        Rec.SETRANGE("System Activity", TRUE)
      ELSE
        Rec.SETRANGE("System Activity");
      Rec.FILTERGROUP(0);
    END;

    PROCEDURE GetErrorMessage@1000000000() : Text;
    BEGIN
      EXIT(ImportErrorManagement.GetErrorMessage(DATABASE::"Item Import Worksheet Line", Rec.GETPOSITION(FALSE)));
    END;

    PROCEDURE ShowErrors@1000000001();
    BEGIN
      ImportErrorManagement.ShowErrors(DATABASE::"Item Import Worksheet Line", Rec.GETPOSITION(FALSE), TRUE);
    END;

    PROCEDURE ViewItem@1000000003();
    VAR
      lItem@1000000000 : Record 27;
    BEGIN
      Rec.TESTFIELD("No.");
      lItem.GET(Rec."No.");
      PAGE.RUN(PAGE::"Item Card", lItem);
    END;

    PROCEDURE FilterSimpleFields@1000000005(VAR pField@1000000000 : Record 2000000041);
    VAR
      lFilterToolkit@1000000001 : Codeunit 9062251;
      lFilter@1000000002 : Text;
    BEGIN
      //DOC NH2016.14 - Filtering simple fields
      //  <> pField: Target recordset

      lFilterToolkit.AddIntegerValue(Rec.FIELDNO("No."));
      lFilterToolkit.AddIntegerValue(Rec.FIELDNO(Description));
      lFilterToolkit.AddIntegerValue(Rec.FIELDNO("Base Unit of Measure Code"));
      lFilterToolkit.AddIntegerValue(Rec.FIELDNO("Unit Price (Base UoM)"));
      lFilterToolkit.AddIntegerValue(Rec.FIELDNO("Unit Cost"));
      lFilterToolkit.AddIntegerValue(Rec.FIELDNO("Vendor No."));
      lFilterToolkit.AddIntegerValue(Rec.FIELDNO("Vendor Item No."));
      lFilterToolkit.AddIntegerValue(Rec.FIELDNO("Item Category Code"));
      lFilterToolkit.AddIntegerValue(Rec.FIELDNO("Product Group Code"));
      lFilterToolkit.AddIntegerValue(Rec.FIELDNO("Costing Method"));

      lFilter := lFilterToolkit.GetIntegerFilter();
      IF (lFilter <> '') THEN
        pField.SETFILTER("No.", lFilter)
      ELSE
        pField.SETRANGE("No.");
    END;

    BEGIN
    {
      //DOC NH2016.14 JH 07/03/2016 - Created
      //DOC NH2016.15 JH 06/05/2016 - CfMD amendments
      //DOC NH2016.16 JH 24/05/2016 - Bugfixes
    }
    END.
  }
}

