OBJECT Codeunit 9062446 Amount in Words
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      mDivisor@1000000004 : TEMPORARY Record 9062730;
      mNumber@1000000003 : TEMPORARY Record 9062730;
      mTemplateValue@1000000000 : ARRAY [100] OF Decimal;
      mTemplateText@1000000001 : ARRAY [100] OF Text;
      tMinus@1000000002 : TextConst 'ENU=Minus;ENG=Minus';
      tAnd@1000000005 : TextConst 'ENU=and;ENG=and';
      tZero@1000000036 : TextConst 'ENU=Zero;ENG=Zero';
      tOne@1000000035 : TextConst 'ENU=One;ENG=One';
      tTwo@1000000034 : TextConst 'ENU=Two;ENG=Two';
      tThree@1000000033 : TextConst 'ENU=Three;ENG=Three';
      tFour@1000000032 : TextConst 'ENU=Four;ENG=Four';
      tFive@1000000031 : TextConst 'ENU=Five;ENG=Five';
      tSix@1000000030 : TextConst 'ENU=Six;ENG=Six';
      tSeven@1000000029 : TextConst 'ENU=Seven;ENG=Seven';
      tEight@1000000028 : TextConst 'ENU=Eight;ENG=Eight';
      tNine@1000000027 : TextConst 'ENU=Nine;ENG=Nine';
      tTen@1000000026 : TextConst 'ENU=Ten;ENG=Ten';
      tEleven@1000000025 : TextConst 'ENU=Eleven;ENG=Eleven';
      tTwelve@1000000024 : TextConst 'ENU=Twelve;ENG=Twelve';
      tThirteen@1000000023 : TextConst 'ENU=Thirteen;ENG=Thirteen';
      tFourteen@1000000022 : TextConst 'ENU=Fourteen;ENG=Fourteen';
      tFiveteen@1000000021 : TextConst 'ENU=Fiveteen;ENG=Fiveteen';
      tSixteen@1000000020 : TextConst 'ENU=Sixteen;ENG=Sixteen';
      tSeventeen@1000000019 : TextConst 'ENU=eSeventeen;ENG=eSeventeen';
      tEighteen@1000000018 : TextConst 'ENU=Eighteen;ENG=Eighteen';
      tNineteen@1000000017 : TextConst 'ENU=Nineteen;ENG=Nineteen';
      tTwenty@1000000016 : TextConst 'ENU=Twenty;ENG=Twenty';
      tThirty@1000000015 : TextConst 'ENU=Thirty;ENG=Thirty';
      tFourty@1000000014 : TextConst 'ENU=Fourty;ENG=Fourty';
      tFifty@1000000013 : TextConst 'ENU=Fifty;ENG=Fifty';
      tSixty@1000000012 : TextConst 'ENU=Sixty;ENG=Sixty';
      tSeventy@1000000011 : TextConst 'ENU=Seventy;ENG=Seventy';
      tEighty@1000000010 : TextConst 'ENU=Eighty;ENG=Eighty';
      tNinety@1000000009 : TextConst 'ENU=Ninety;ENG=Ninety';
      tHundred@1000000008 : TextConst 'ENU=Hundred;ENG=Hundred';
      tThousand@1000000007 : TextConst 'ENU=Thousand;ENG=Thousand';
      tMillion@1000000006 : TextConst 'ENU=Million;ENG=Million';
      tBillion@1000000037 : TextConst 'ENU=Billion;ENG=Billion';

    PROCEDURE AmountInWords@1000000000(pAmount@1000000000 : Decimal) : Text;
    VAR
      lAmount@1000000001 : Integer;
      lDecimals@1000000002 : Integer;
      lWords@1000000003 : Text;
      eDecimals@1000000004 : TextConst 'ENU=1 / %1;ENG=1 / %1';
    BEGIN
      CreateDivisors();
      CreateNumbers();

      lAmount := ROUND(pAmount, 1, '<');
      lDecimals := ROUND(pAmount - lAmount, 0.01) * 100;

      lWords := DELCHR(AmountInWordsInternal(lAmount, TRUE), '<>', ' ');

      IF (lDecimals <> 0) THEN
        lWords := lWords + ' ' + STRSUBSTNO(eDecimals, lDecimals);

      EXIT(lWords);
    END;

    LOCAL PROCEDURE AmountInWordsInternal@1000000014(pAmount@1000000000 : Integer;pUseAnd@1000000009 : Boolean) : Text;
    VAR
      lLastDivisor@1000000001 : Integer;
      lDividing@1000000003 : Boolean;
      lDividedAmount@1000000004 : Integer;
      lDivisorName@1000000007 : Text;
      lDivisorPosition@1000000008 : Text;
      lWords@1000000002 : Text;
    BEGIN
      IF (pAmount = 0) THEN
      BEGIN
        mNumber.GET(0);
        EXIT(mNumber.Name);
      END;

      IF (pAmount < 0) THEN
        EXIT(tMinus + ' ' + AmountInWordsInternal(ABS(pAmount), TRUE));

      lLastDivisor := 0;
      lDividing := TRUE;
      WHILE (lDividing) DO
      BEGIN
        mDivisor.RESET();
        IF (lLastDivisor <> 0) THEN
          mDivisor.SETFILTER(ID, '<%1', lLastDivisor);
        IF (mDivisor.FINDLAST()) THEN
        BEGIN
          lDividedAmount := pAmount DIV mDivisor.ID;
          IF (lDividedAmount > 0) THEN
          BEGIN
            lDivisorName := mDivisor.Name;
            lDivisorPosition := mDivisor.GETPOSITION(FALSE);
            lWords := lWords + AmountInWordsInternal(lDividedAmount, FALSE) + ' ' + lDivisorName;
            mDivisor.SETPOSITION(lDivisorPosition);
            pAmount := pAmount MOD mDivisor.ID;
          END;
          lLastDivisor := mDivisor.ID;
        END
        ELSE
          lDividing := FALSE;
      END;

      IF (pAmount > 0) THEN
      BEGIN
        IF ((pUseAnd) AND (lWords <> '') AND (tAnd <> '')) THEN
          lWords := lWords + ' ' + tAnd;
        WHILE (pAmount > 0) DO
        BEGIN
          mNumber.RESET();
          mNumber.SETFILTER(ID, '<=%1', pAmount);
          IF (mNumber.FINDLAST()) THEN
          BEGIN
            lWords := lWords + ' ' + mNumber.Name;
            pAmount -= mNumber.ID;
          END
          ELSE
            pAmount := 0;
        END;
      END;

      EXIT(lWords);
    END;

    LOCAL PROCEDURE CreateDivisors@1000000015();
    BEGIN
      mDivisor.RESET();
      mDivisor.DELETEALL();

      AddToBuffer(100, tHundred, mDivisor);
      AddToBuffer(1000, tThousand, mDivisor);
      AddToBuffer(1000000, tMillion, mDivisor);
      AddToBuffer(1000000000, tBillion, mDivisor);
    END;

    LOCAL PROCEDURE CreateNumbers@1000000005();
    BEGIN
      mNumber.RESET();
      mNumber.DELETEALL();

      AddToBuffer(0, tZero, mNumber);
      AddToBuffer(1, tOne, mNumber);
      AddToBuffer(2, tTwo, mNumber);
      AddToBuffer(3, tThree, mNumber);
      AddToBuffer(4, tFour, mNumber);
      AddToBuffer(5, tFive, mNumber);
      AddToBuffer(6, tSix, mNumber);
      AddToBuffer(7, tSeven, mNumber);
      AddToBuffer(8, tEight, mNumber);
      AddToBuffer(9, tNine, mNumber);

      AddToBuffer(10, tTen, mNumber);
      AddToBuffer(11, tEleven, mNumber);
      AddToBuffer(12, tTwelve, mNumber);
      AddToBuffer(13, tThirteen, mNumber);
      AddToBuffer(14, tFourteen, mNumber);
      AddToBuffer(15, tFiveteen, mNumber);
      AddToBuffer(16, tSixteen, mNumber);
      AddToBuffer(17, tSeventeen, mNumber);
      AddToBuffer(18, tEighteen, mNumber);
      AddToBuffer(19, tNineteen, mNumber);

      AddToBuffer(20, tTwenty, mNumber);
      AddToBuffer(30, tThirty, mNumber);
      AddToBuffer(40, tFourty, mNumber);
      AddToBuffer(50, tFifty, mNumber);
      AddToBuffer(60, tSixty, mNumber);
      AddToBuffer(70, tSeventy, mNumber);
      AddToBuffer(80, tEighty, mNumber);
      AddToBuffer(90, tNinety, mNumber);
    END;

    LOCAL PROCEDURE AddToBuffer@1000000003(pValue@1000000000 : Decimal;pText@1000000001 : Text;VAR pBuffer@1000000002 : Record 9062730);
    BEGIN
      pBuffer.ID := pValue;
      pBuffer.Name := pText;
      pBuffer.INSERT();
    END;

    BEGIN
    {
      //DOC NA2015.2  JH 11/05/2014 - Created
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.15 JH 09/05/2016 - CfMD modifications
    }
    END.
  }
}

