OBJECT Codeunit 11102038 OM - Action Management
{
  OBJECT-PROPERTIES
  {
    Date=19/11/15;
    Time=12:00:00 PM;
    Version List=OMA10.00;
  }
  PROPERTIES
  {
    Permissions=TableData 17=rimd,
                TableData 21=rimd,
                TableData 25=rimd,
                TableData 32=rimd,
                TableData 45=rimd,
                TableData 46=rimd,
                TableData 86=rimd,
                TableData 87=rimd,
                TableData 110=rimd,
                TableData 111=rimd,
                TableData 112=rimd,
                TableData 113=rimd,
                TableData 114=rimd,
                TableData 115=rimd,
                TableData 120=rimd,
                TableData 121=rimd,
                TableData 122=rimd,
                TableData 123=rimd,
                TableData 124=rimd,
                TableData 125=rimd,
                TableData 169=rimd,
                TableData 203=rimd,
                TableData 238=rimd,
                TableData 239=rimd,
                TableData 240=rimd,
                TableData 241=rimd,
                TableData 253=rimd,
                TableData 254=rimd,
                TableData 271=rimd,
                TableData 272=rimd,
                TableData 275=rimd,
                TableData 276=rimd,
                TableData 281=rimd,
                TableData 297=rimd,
                TableData 298=rimd,
                TableData 300=rimd,
                TableData 304=rimd,
                TableData 305=rimd,
                TableData 339=rimd,
                TableData 379=rimd,
                TableData 380=rimd,
                TableData 405=rimd,
                TableData 454=rimd,
                TableData 456=rimd,
                TableData 457=rimd,
                TableData 458=rimd,
                TableData 1005=rimd,
                TableData 1015=rimd,
                TableData 5601=rimd,
                TableData 5617=rimd,
                TableData 5772=rimd,
                TableData 5773=rimd,
                TableData 5802=rimd,
                TableData 5811=rimd,
                TableData 5823=rimd,
                TableData 6507=rimd,
                TableData 6508=rimd,
                TableData 6509=rimd,
                TableData 6550=rimd,
                TableData 6650=rimd,
                TableData 6651=rimd,
                TableData 6660=rimd,
                TableData 6661=rimd,
                TableData 7312=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      oFile2@1000 : File;
      MainFileName@1001 : Text;
      MaxFabSize@1002 : Integer;
      SkipConfirm@1003 : Boolean;

    PROCEDURE Start@1(VAR Actions@1000 : Record 11102048;VAR ActionField@1001 : Record 11102049);
    VAR
      Progressbar@1002 : Codeunit 11102044;
      NoOfActions@1003 : Integer;
      TableDeleteSelectedFields@1004 : Integer;
      TablesDeleteComplete@1005 : Integer;
      ctAnd@1006 : TextConst 'DEU=\And\;ENU=\And\;ESP=\And\;FRA=\And\;NLD=\En\;DEA=\And\';
      ctConfirm@1007 : TextConst 'DEU=\\Are you sure?;ENU=\\Are you sure?;ESP=\\Are you sure?;FRA=\\Are you sure?;NLD=Weet u het zeker?;DEA=\\Are you sure?';
      ctExecuteAction@1008 : TextConst 'DEU=%1 action will be executed.;ENU=%1 action will be executed.;ESP=%1 action will be executed.;FRA=%1 action will be executed.;NLD=%1 actie zal worden uitgevoerd.;DEA=%1 action will be executed.';
      ctExecuteActions@1009 : TextConst 'DEU=%1 actions will be executed.;ENU=%1 actions will be executed.;ESP=%1 actions will be executed.;FRA=%1 actions will be executed.;NLD=%1 acties zullen worden uitgevoerd.;DEA=%1 actions will be executed.';
      ctExecutingRecords@1010 : TextConst 'DEU=Executing actions...;ENU=Executing actions...;ESP=Executing actions...;FRA=Executing actions...;NLD=Acties uitvoeren...;DEA=Executing actions...';
      ctNothingSelected@1011 : TextConst 'DEU=Nothing selected.;ENU=Nothing selected.;ESP=Nothing selected.;FRA=Nothing selected.;NLD=U heeft niets geselecteerd.;DEA=Nothing selected.';
      ctTableComplete@1012 : TextConst 'DEU=Data of %1 tables will be lost.;ENU=Data of %1 tables will be lost.;ESP=Data of %1 tables will be lost.;FRA=Data of %1 tables will be lost.;NLD=De data van %1 tabellen zal worden verwijderd.;DEA=Data of %1 tables will be lost.';
      ctTableSelectedFields@1013 : TextConst 'DEU=Selected fields of %1 tables will be lost.;ENU=Selected fields of %1 tables will be lost.;ESP=Selected fields of %1 tables will be lost.;FRA=Selected fields of %1 tables will be lost.;NLD=Geselecteerde velden van %1 tabellen zullen worden leeggemaakt.;DEA=Selected fields of %1 tables will be lost.';
    BEGIN
      GLOBALLANGUAGE := 1033;

      IF NOT Actions.FINDSET THEN BEGIN
        MESSAGE(ctNothingSelected);
        EXIT;
      END;

      CheckIndirectPermissions(Actions);

      Actions.FINDSET;
      REPEAT
        IF Actions."Action Type" = Actions."Action Type"::"Delete Data" THEN
          IF Actions.Fields = Actions.Fields::All THEN
            TablesDeleteComplete += 1
          ELSE
            TableDeleteSelectedFields += 1;
        NoOfActions += 1;
      UNTIL Actions.NEXT = 0;

      IF NOT SkipConfirm THEN
        CASE TRUE OF

          (TablesDeleteComplete > 0) AND (TableDeleteSelectedFields = 0) :
            IF NOT CONFIRM(ctTableComplete + ctConfirm, TRUE, TablesDeleteComplete) THEN
              EXIT;

          (TablesDeleteComplete = 0) AND (TableDeleteSelectedFields > 0) :
            IF NOT CONFIRM(ctTableSelectedFields + ctConfirm, TRUE, TableDeleteSelectedFields) THEN
              EXIT;

          (TablesDeleteComplete > 0) AND (TableDeleteSelectedFields > 0) :
            IF NOT
               CONFIRM(
                 STRSUBSTNO(ctTableComplete, TablesDeleteComplete) + ctAnd +
                 STRSUBSTNO(ctTableSelectedFields, TableDeleteSelectedFields) + ctConfirm, TRUE)
            THEN
              EXIT;

          NoOfActions = 1 :
            IF NOT CONFIRM(ctExecuteAction + ctConfirm, TRUE, NoOfActions) THEN
              EXIT;

          ELSE
            IF NOT CONFIRM(ctExecuteActions + ctConfirm, TRUE, NoOfActions) THEN
              EXIT;

        END;

      Progressbar.Open(ctExecutingRecords, 2);
      Progressbar.BarSize := 0;
      Actions.FINDSET;
      REPEAT
        Progressbar.BarSize := Progressbar.GetBarSize + CountActionRecords(Actions);
      UNTIL Actions.NEXT = 0;

      Actions.FINDSET;
      REPEAT
        ActionField.SETRANGE(Type, Actions.Type);
        ActionField.SETRANGE("No.", Actions."No.");
        ActionField.SETRANGE("Sub Type", Actions."Sub Type");
        ActionField.SETRANGE("Line No.", Actions."Line No.");
        ExecuteAction(Actions, ActionField, Progressbar);
      UNTIL Actions.NEXT = 0;

      Progressbar.Close;
    END;

    LOCAL PROCEDURE CountActionRecords@2(VAR Actions@1000 : Record 11102048) ReturnValue : Integer;
    VAR
      TmpFromCompany@1001 : TEMPORARY Record 2000000006;
      TmpToCompany@1002 : TEMPORARY Record 2000000006;
      AllObj@1003 : Record 2000000038;
      TableFilterMgt@1004 : Codeunit 11102100;
      RecRef@1005 : RecordRef;
    BEGIN
      WITH Actions DO
        CASE "Action Type" OF

          "Action Type"::"Copy Data" :
            BEGIN
              SetCompanyRange(TmpFromCompany, "Company Name", '');
              IF TmpFromCompany.FINDSET THEN
                REPEAT
                  SetCompanyRange(TmpToCompany, "Into Company Name", TmpFromCompany.Name);
                  IF AllObj.GET(AllObj."Object Type"::Table, "Object No.") THEN BEGIN
                    RecRef.OPEN("Object No.", FALSE, TmpFromCompany.Name);
                    IF FORMAT(Filter) <> '' THEN
                      TableFilterMgt.FilterRecRef(RecRef, FORMAT(Filter), "Key Index");
                    ReturnValue += RecRef.COUNT * TmpToCompany.COUNT;
                    RecRef.CLOSE;
                  END;
                UNTIL TmpFromCompany.NEXT = 0;
            END;

          "Action Type"::"Delete Data" :
            BEGIN
              SetCompanyRange(TmpFromCompany, "Company Name", '');
              ReturnValue := TmpFromCompany.COUNT;

              IF Fields = Fields::Selected THEN
                IF TmpFromCompany.FINDSET THEN
                  REPEAT
                    IF AllObj.GET(AllObj."Object Type"::Table, "Object No.") THEN BEGIN
                      RecRef.OPEN("Object No.", FALSE, TmpFromCompany.Name);
                      IF FORMAT(Filter) <> '' THEN
                        TableFilterMgt.FilterRecRef(RecRef, FORMAT(Filter), "Key Index");
                      ReturnValue += RecRef.COUNT;
                      RecRef.CLOSE;
                    END;
                  UNTIL TmpFromCompany.NEXT = 0;
            END;

          "Action Type"::"Fill Fields", "Action Type"::"Rename Data",
          "Action Type"::"Renumber Object", "Action Type"::"Renumber Field" :
            BEGIN
              SetCompanyRange(TmpFromCompany, "Company Name", '');
              IF TmpFromCompany.FINDSET THEN
                REPEAT
                  IF AllObj.GET(AllObj."Object Type"::Table, "Object No.") THEN BEGIN
                    RecRef.OPEN("Object No.", FALSE, TmpFromCompany.Name);
                    IF FORMAT(Filter) <> '' THEN
                      TableFilterMgt.FilterRecRef(RecRef, FORMAT(Filter), "Key Index");
                    ReturnValue += RecRef.COUNT;
                    RecRef.CLOSE;
                  END;
                UNTIL TmpFromCompany.NEXT = 0;
            END;

          "Action Type"::"Add Record" :
            BEGIN
              SetCompanyRange(TmpFromCompany, "Company Name", '');
              ReturnValue := TmpFromCompany.COUNT;
            END;

          "Action Type"::"Run Report" :
            ReturnValue := 1;

          "Action Type"::"Run Codeunit" :
            ReturnValue := 1;

          "Action Type"::"Execute SQL Query" :
            BEGIN
              SetCompanyRange(TmpFromCompany, "Company Name", '');
              ReturnValue := TmpFromCompany.COUNT;
            END;

          "Action Type"::"Execute DOS Command" :
            ReturnValue := 1;

        END;
    END;

    LOCAL PROCEDURE ExecuteAction@3(VAR Actions@1000 : Record 11102048;VAR ActionField@1001 : Record 11102049;VAR Progressbar@1002 : Codeunit 11102044);
    BEGIN
      WITH Actions DO BEGIN
        CASE "Action Type" OF

          "Action Type"::"Copy Data" :
            CopyData(Actions, ActionField, Progressbar);

          "Action Type"::"Delete Data" :
            DeleteData(Actions, ActionField, Progressbar);

          "Action Type"::"Fill Fields" :
            FillFields(Actions, ActionField, Progressbar);

          "Action Type"::"Run Report" :
            REPORT.RUN("Object No.", FALSE, FALSE);

          "Action Type"::"Run Codeunit" :
            CODEUNIT.RUN("Object No.");

          "Action Type"::"Add Record" :
            AddRecordToDatabase(Actions, ActionField, Progressbar);

          "Action Type"::"Rename Data", "Action Type"::"Renumber Object", "Action Type"::"Renumber Field" :
            RenameData(Actions, ActionField, Progressbar);

          "Action Type"::"Execute SQL Query" :
            ExecuteSQLQuery(Actions, Progressbar);

          "Action Type"::"Execute DOS Command" :
            ExecuteDOSCommand(Actions);

        END;

        IF "Commit Type" <> "Commit Type"::" " THEN
          COMMIT;

      END;
    END;

    LOCAL PROCEDURE CopyData@4(VAR Actions@1000 : Record 11102048;VAR ActionField@1001 : Record 11102049;VAR Progressbar@1002 : Codeunit 11102044);
    VAR
      TmpFromCompany@1003 : TEMPORARY Record 2000000006;
      TmpToCompany@1004 : TEMPORARY Record 2000000006;
      AllObject@1005 : Record 2000000038;
      TableFilterMgt@1006 : Codeunit 11102100;
      NewRecRef@1007 : RecordRef;
      RecRef@1008 : RecordRef;
      FldRef@1009 : FieldRef;
      NewFldRef@1010 : FieldRef;
      CommitCounter@1011 : Integer;
      IntoTableNo@1012 : Integer;
      SkipModify@1013 : Boolean;
      ctCopy@1014 : TextConst 'DEU=Copy %1;ENU=Copy %1;ESP=Copy %1;FRA=Copy %1;NLD=Kopieren %1;DEA=Copy %1';
    BEGIN
      IF Actions.Type = Actions.Type::"Temporary" THEN
        IF ActionField.ISEMPTY THEN
          GetFields(Actions, ActionField);

      SetCompanyRange(TmpFromCompany, Actions."Company Name", '');
      IF TmpFromCompany.FINDSET THEN
        REPEAT
          SetCompanyRange(TmpToCompany, Actions."Into Company Name", TmpFromCompany.Name);
          IF TmpToCompany.FINDSET THEN
            REPEAT

              IF AllObject.GET(AllObject."Object Type"::Table, Actions."Object No.") THEN BEGIN

                Progressbar.Text1 := STRSUBSTNO(ctCopy, AllObject."Object Name");
                Progressbar.Text2 := TmpFromCompany.Name;

                RecRef.OPEN(Actions."Object No.", FALSE, TmpFromCompany.Name);

                ActionField.SETRANGE("Line No.", Actions."Line No.");

                IF FORMAT(Actions.Filter) <> '' THEN
                  TableFilterMgt.FilterRecRef(RecRef, FORMAT(Actions.Filter), Actions."Key Index");

                IF Actions."Into Table No." = 0 THEN
                  IntoTableNo := Actions."Object No."
                ELSE
                  IntoTableNo := Actions."Into Table No.";

                NewRecRef.OPEN(IntoTableNo, FALSE, TmpToCompany.Name);

                IF Actions."DELETEALL;" THEN BEGIN
                  TableFilterMgt.FilterRecRef(NewRecRef, FORMAT(Actions.Filter), Actions."Key Index");
                  NewRecRef.DELETEALL;
                END;

                IF Actions."IF INSERT THEN;" OR Actions."IF MODIFY THEN;" THEN
                  IF RecRef.FINDSET THEN
                    REPEAT

                      Progressbar.AddToBar(1);

                      IF Actions."INIT;" THEN
                        NewRecRef.INIT;

                      ActionField.SETFILTER("Import Action", '%1|%2',
                        ActionField."Import Action"::Fill, ActionField."Import Action"::Validate);

                      IF Actions.Fields = Actions.Fields::Selected THEN
                        ActionField.SETRANGE(Selected, TRUE);

                      ActionField.SETCURRENTKEY(Sorting);
                      IF Actions."IF FIND('=') THEN;" THEN BEGIN
                        IF ActionField.FINDSET THEN
                          REPEAT

                            FldRef := RecRef.FIELD(ActionField."Field No.");
                            NewFldRef := NewRecRef.FIELD(ActionField."Into Field No.");

                            CASE FORMAT(NewFldRef.TYPE) OF

                              'TableFilter' :
                                EVALUATE(NewFldRef, FORMAT(FldRef.VALUE));

                              ELSE
                                NewFldRef.VALUE := FldRef.VALUE;
                            END;

                          UNTIL ActionField.NEXT = 0;
                        IF NewRecRef.FIND('=') THEN
                          ;
                      END;

                      IF ActionField.FINDSET THEN
                        REPEAT

                          FldRef := RecRef.FIELD(ActionField."Field No.");
                          NewFldRef := NewRecRef.FIELD(ActionField."Into Field No.");

                          IF (FORMAT(FldRef.TYPE) = 'BLOB') OR (FORMAT(FldRef.CLASS) = 'FlowField') THEN
                            FldRef.CALCFIELD;

                          CASE FORMAT(NewFldRef.TYPE) OF

                            'TableFilter' :
                              EVALUATE(NewFldRef, FORMAT(FldRef.VALUE));

                            ELSE
                              NewFldRef.VALUE := FldRef.VALUE;
                          END;

                          IF ActionField."Import Action" = ActionField."Import Action"::Validate THEN
                            NewFldRef.VALIDATE;

                        UNTIL ActionField.NEXT = 0;

                      SkipModify := FALSE;

                      IF Actions."IF INSERT THEN;" THEN
                        IF NewRecRef.INSERT THEN
                          SkipModify := TRUE;

                      IF Actions."IF MODIFY THEN;" AND NOT SkipModify THEN
                        IF NewRecRef.MODIFY THEN
                          ;

                      CommitCounter += 1;
                      CASE Actions."Commit Type" OF

                        Actions."Commit Type"::"After Each Record" :
                          COMMIT;

                        Actions."Commit Type"::"After 100 Records" :
                          IF CommitCounter MOD 100 = 0 THEN
                            COMMIT;
                      END;

                    UNTIL RecRef.NEXT = 0;

                RecRef.CLOSE;
                NewRecRef.CLOSE;
              END;

            UNTIL TmpToCompany.NEXT = 0;
        UNTIL TmpFromCompany.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteData@5(VAR Actions@1000 : Record 11102048;VAR ActionField@1001 : Record 11102049;VAR Progressbar@1002 : Codeunit 11102044);
    VAR
      TmpActionField@1003 : TEMPORARY Record 11102049;
      TmpCompany@1004 : TEMPORARY Record 2000000006;
      AllObject@1005 : Record 2000000038;
      Field@1006 : Record 2000000041;
      TableFilterMgt@1007 : Codeunit 11102100;
      EmptyRecRef@1008 : RecordRef;
      RecRef@1009 : RecordRef;
      EmptyFldRef@1010 : FieldRef;
      FldRef@1011 : FieldRef;
      CommitCounter@1012 : Integer;
      ctActionTablesCannotBeDeleted@1013 : TextConst 'DEU=The records in the action tables can only be deleted manually.;ENU=The records in the action tables can only be deleted manually.;ESP=The records in the action tables can only be deleted manually.;FRA=The records in the action tables can only be deleted manually.;NLD=De records in de actietabellen kunnen alleen handmatig verwijderd worden.;DEA=The records in the action tables can only be deleted manually.';
      ctDeletingData@1014 : TextConst 'DEU=Deleting data;ENU=Deleting data;ESP=Deleting data;FRA=Deleting data;NLD=Data verwijderen;DEA=Deleting data';
    BEGIN
      SetCompanyRange(TmpCompany, Actions."Company Name", '');

      IF NOT SkipConfirm THEN
        IF (Actions."Object No." >= DATABASE::"OM - Action Group") AND
           (Actions."Object No." <= DATABASE::"OM - Action Field")
        THEN BEGIN
          MESSAGE(ctActionTablesCannotBeDeleted);
          EXIT;
        END;

      IF TmpCompany.FINDSET THEN
        REPEAT

          IF AllObject.GET(AllObject."Object Type"::Table, Actions."Object No.") THEN BEGIN

            Progressbar.Text1 := STRSUBSTNO(ctDeletingData, AllObject."Object Name");
            Progressbar.Text2 := TmpCompany.Name;
            Progressbar.AddToBar(1);

            RecRef.OPEN(Actions."Object No.", FALSE, TmpCompany.Name);

            IF FORMAT(Actions.Filter) <> '' THEN
              TableFilterMgt.FilterRecRef(RecRef, FORMAT(Actions.Filter), Actions."Key Index");

            EmptyRecRef.OPEN(Actions."Object No.");

            IF Actions.Fields = Actions.Fields::All THEN
              RecRef.DELETEALL
            ELSE BEGIN

              TmpActionField.DELETEALL;

              ActionField.RESET;
              ActionField.SETRANGE("No.", Actions."No.");
              ActionField.SETRANGE("Line No.", Actions."Line No.");
              ActionField.SETRANGE(Selected, TRUE);
              IF ActionField.FINDSET THEN
                REPEAT
                  IF Field.GET(Actions."Object No.", ActionField."Field No.") THEN BEGIN
                    TmpActionField := ActionField;
                    TmpActionField.INSERT;
                  END;
                UNTIL ActionField.NEXT = 0;

              IF RecRef.FINDSET THEN
                REPEAT
                  Progressbar.AddToBar(1);

                  IF TmpActionField.FINDSET THEN
                    REPEAT
                      FldRef := RecRef.FIELD(TmpActionField."Field No.");
                      EmptyFldRef := EmptyRecRef.FIELD(TmpActionField."Field No.");
                      FldRef.VALUE := EmptyFldRef.VALUE;
                    UNTIL TmpActionField.NEXT = 0;

                  IF NOT RecRef.MODIFY THEN
                    RecRef.DELETE;

                  CommitCounter += 1;
                  CASE Actions."Commit Type" OF

                    Actions."Commit Type"::"After Each Record" :
                      COMMIT;

                    Actions."Commit Type"::"After 100 Records" :
                      IF CommitCounter MOD 100 = 0 THEN
                        COMMIT;
                  END;

                UNTIL RecRef.NEXT = 0;

            END;

            RecRef.CLOSE;
            EmptyRecRef.CLOSE;
          END;

        UNTIL TmpCompany.NEXT = 0;
    END;

    LOCAL PROCEDURE FillFields@6(VAR Actions@1000 : Record 11102048;VAR ActionField@1001 : Record 11102049;VAR Progressbar@1002 : Codeunit 11102044);
    VAR
      TmpCompany@1003 : TEMPORARY Record 2000000006;
      AllObject@1004 : Record 2000000038;
      Fld@1005 : Record 2000000041;
      TableFilterMgt@1006 : Codeunit 11102100;
      RecRef@1007 : RecordRef;
      FldRef@1008 : FieldRef;
      GetFldRef@1009 : FieldRef;
      ValueToFill@1010 : Text;
      CommitCounter@1011 : Integer;
      GetFieldNo@1012 : Integer;
      ctFillFields@1013 : TextConst 'DEU=Fill fields %1;ENU=Fill fields %1;ESP=Fill fields %1;FRA=Fill fields %1;NLD=Velden vullen %1;DEA=Fill fields %1';
    BEGIN
      SetCompanyRange(TmpCompany, Actions."Company Name", '');
      IF TmpCompany.FINDSET THEN
        REPEAT

          IF AllObject.GET(AllObject."Object Type"::Table, Actions."Object No.") THEN BEGIN

            Progressbar.Text1 := STRSUBSTNO(ctFillFields, AllObject."Object Name");
            Progressbar.Text2 := TmpCompany.Name;

            RecRef.OPEN(Actions."Object No.", FALSE, TmpCompany.Name);

            IF FORMAT(Actions.Filter) <> '' THEN
              TableFilterMgt.FilterRecRef(RecRef, FORMAT(Actions.Filter), Actions."Key Index");

            IF RecRef.FINDSET THEN
              REPEAT

                Progressbar.AddToBar(1);

                ActionField.SETRANGE(Selected, TRUE);
                ActionField.SETCURRENTKEY(Sorting);

                IF ActionField.FINDSET THEN
                  REPEAT

                    ValueToFill := ActionField.Value;

                    IF COPYSTR(ValueToFill, 1, 5) = 'Field' THEN
                      IF EVALUATE(GetFieldNo, COPYSTR(ValueToFill, 6)) THEN BEGIN
                        GetFldRef := RecRef.FIELD(GetFieldNo);
                        ValueToFill := FORMAT(GetFldRef.VALUE);
                      END;

                    FldRef := RecRef.FIELD(ActionField."Field No.");
                    Fld.GET(Actions."Object No.", ActionField."Field No.");
                    EvaluateFieldRefValue(FldRef, Fld.Type, ValueToFill, FALSE);
                    IF ActionField."Import Action" = ActionField."Import Action"::Validate THEN
                      FldRef.VALIDATE;

                  UNTIL ActionField.NEXT = 0;

                IF RecRef.MODIFY THEN
                  ;

                CommitCounter += 1;
                CASE Actions."Commit Type" OF

                  Actions."Commit Type"::"After Each Record" :
                    COMMIT;

                  Actions."Commit Type"::"After 100 Records" :
                    IF CommitCounter MOD 100 = 0 THEN
                      COMMIT;
                END;

              UNTIL RecRef.NEXT = 0;

            RecRef.CLOSE;
          END;

        UNTIL TmpCompany.NEXT = 0;
    END;

    LOCAL PROCEDURE AddRecordToDatabase@40(VAR Actions@1000 : Record 11102048;VAR ActionField@1001 : Record 11102049;VAR Progressbar@1002 : Codeunit 11102044);
    VAR
      TmpCompany@1003 : TEMPORARY Record 2000000006;
      AllObject@1004 : Record 2000000038;
      Fld@1005 : Record 2000000041;
      RecRef@1006 : RecordRef;
      FldRef@1007 : FieldRef;
      GetFldRef@1008 : FieldRef;
      ValueToFill@1009 : Text;
      CommitCounter@1010 : Integer;
      GetFieldNo@1011 : Integer;
      SkipModify@1012 : Boolean;
      ctFillFields@1013 : TextConst 'DEU=Fill fields %1;ENU=Fill fields %1;ESP=Fill fields %1;FRA=Fill fields %1;NLD=Velden vullen %1;DEA=Fill fields %1';
    BEGIN
      SetCompanyRange(TmpCompany, Actions."Company Name", '');
      IF TmpCompany.FINDSET THEN
        REPEAT

          IF AllObject.GET(AllObject."Object Type"::Table, Actions."Object No.") THEN BEGIN

            Progressbar.Text1 := STRSUBSTNO(ctFillFields, AllObject."Object Name");
            Progressbar.Text2 := TmpCompany.Name;

            RecRef.OPEN(Actions."Object No.", FALSE, TmpCompany.Name);

            Progressbar.AddToBar(1);

            IF Actions."INIT;" THEN
              RecRef.INIT;

            ActionField.SETRANGE(Selected, TRUE);
            ActionField.SETCURRENTKEY(Sorting);

            IF ActionField.FINDSET THEN
              REPEAT

                ValueToFill := ActionField.Value;

                IF COPYSTR(ValueToFill, 1, 5) = 'Field' THEN
                  IF EVALUATE(GetFieldNo, COPYSTR(ValueToFill, 6)) THEN BEGIN
                    GetFldRef := RecRef.FIELD(GetFieldNo);
                    ValueToFill := FORMAT(GetFldRef.VALUE);
                  END;

                FldRef := RecRef.FIELD(ActionField."Field No.");
                Fld.GET(Actions."Object No.", ActionField."Field No.");
                EvaluateFieldRefValue(FldRef, Fld.Type, ValueToFill, FALSE);
                IF ActionField."Import Action" = ActionField."Import Action"::Validate THEN
                  FldRef.VALIDATE;

              UNTIL ActionField.NEXT = 0;

            SkipModify := FALSE;
            IF Actions."IF INSERT THEN;" THEN
              IF RecRef.INSERT THEN
                SkipModify := TRUE;

            IF Actions."IF MODIFY THEN;" AND NOT SkipModify THEN
              IF RecRef.MODIFY THEN
                ;

            CommitCounter += 1;
            IF Actions."Commit Type" = Actions."Commit Type"::"After Each Record" THEN
              COMMIT;

            RecRef.CLOSE;
          END;

        UNTIL TmpCompany.NEXT = 0;
    END;

    LOCAL PROCEDURE RenameData@7(VAR Actions@1000 : Record 11102048;VAR ActionField@1001 : Record 11102049;VAR Progressbar@1002 : Codeunit 11102044);
    VAR
      TmpFieldToRenumber@1003 : TEMPORARY Record 11102074;
      Object@1004 : Record 2000000001;
      TmpCompany@1005 : TEMPORARY Record 2000000006;
      AllObject@1006 : Record 2000000038;
      Fld@1007 : Record 2000000041;
      RenumberFieldMgt@1008 : Codeunit 11102054;
      TableFilterMgt@1009 : Codeunit 11102100;
      RecRef@1010 : RecordRef;
      RecRef2@1011 : RecordRef;
      RecRef3@1012 : RecordRef;
      FldRef@1013 : ARRAY [10] OF FieldRef;
      FldRef2@1014 : FieldRef;
      KeyRef@1015 : KeyRef;
      CommitCounter@1016 : Integer;
      i@1017 : Integer;
      ctRenameData@1018 : TextConst 'DEU=Rename data %1;ENU=Rename data %1;ESP=Rename data %1;FRA=Rename data %1;NLD=Data hernoemen %1;DEA=Rename data %1';
    BEGIN
      SetCompanyRange(TmpCompany, Actions."Company Name", '');
      IF TmpCompany.FINDSET THEN
        REPEAT

          IF AllObject.GET(AllObject."Object Type"::Table, Actions."Object No.") THEN BEGIN

            Progressbar.Text1 := STRSUBSTNO(ctRenameData, AllObject."Object Name");
            Progressbar.Text2 := TmpCompany.Name;

            RecRef.OPEN(Actions."Object No.", FALSE, TmpCompany.Name);

            IF FORMAT(Actions.Filter) <> '' THEN
              TableFilterMgt.FilterRecRef(RecRef, FORMAT(Actions.Filter), Actions."Key Index");

            IF RecRef.FINDSET THEN
              REPEAT

                Progressbar.AddToBar(1);

                RecRef2 := RecRef.DUPLICATE;

                KeyRef := RecRef2.KEYINDEX(1);
                FOR i := 1 TO KeyRef.FIELDCOUNT DO
                  FldRef[i] := KeyRef.FIELDINDEX(i);

                ActionField.SETRANGE(Selected, TRUE);
                ActionField.SETCURRENTKEY(Sorting);

                IF ActionField.FINDSET THEN
                  REPEAT

                    FOR i := 1 TO KeyRef.FIELDCOUNT DO
                      IF FldRef[i].NUMBER = ActionField."Field No." THEN BEGIN
                        Fld.GET(Actions."Object No.", ActionField."Field No.");
                        EvaluateFieldRefValue(FldRef[i], Fld.Type, ActionField.Value, FALSE);
                        IF ActionField."Import Action" = ActionField."Import Action"::Validate THEN
                          FldRef[1].VALIDATE;
                      END;

                  UNTIL ActionField.NEXT = 0;

                RecRef3 := RecRef.DUPLICATE;

                CASE Actions."Object No." OF
                  DATABASE::Field :
                    BEGIN

                      TmpFieldToRenumber.RESET;
                      TmpFieldToRenumber.DELETEALL;
                      FldRef2 := RecRef.FIELD(Fld.FIELDNO(TableNo));

                      EVALUATE(TmpFieldToRenumber."Table No.", FORMAT(FldRef2.VALUE));
                      EVALUATE(TmpFieldToRenumber."Field No.", FORMAT(RecRef.FIELD(Fld.FIELDNO("No.")).VALUE));
                      EVALUATE(TmpFieldToRenumber."New Number", FORMAT(FldRef[2].VALUE));
                      TmpFieldToRenumber.INSERT;
                      RenumberFieldMgt.SetRunType(4);
                      RenumberFieldMgt.RenumberFields(TmpFieldToRenumber);
                    END;

                  DATABASE::Object :
                    BEGIN
                      RecRef3.SETTABLE(Object);
                      Object.RENAME(FldRef[1].VALUE, FldRef[2].VALUE, FldRef[3].VALUE);
                    END;

                  ELSE
                    RenameRecord(KeyRef, RecRef3, FldRef);
                END;

                CommitCounter += 1;
                CASE Actions."Commit Type" OF

                  Actions."Commit Type"::"After Each Record" :
                    COMMIT;

                  Actions."Commit Type"::"After 100 Records" :
                    IF CommitCounter MOD 100 = 0 THEN
                      COMMIT;
                END;

              UNTIL RecRef.NEXT = 0;

            RecRef.CLOSE;
          END;

        UNTIL TmpCompany.NEXT = 0;
    END;

    LOCAL PROCEDURE RenameRecord@8(VAR KeyRef@1000 : KeyRef;VAR RecRef3@1001 : RecordRef;VAR FldRef@1002 : ARRAY [10] OF FieldRef);
    VAR
      ctMoreThan10@1003 : TextConst 'DEU=a key with more than 10 fields cannot be renamed.;ENU=a key with more than 10 fields cannot be renamed.;ESP=a key with more than 10 fields cannot be renamed.;FRA=a key with more than 10 fields cannot be renamed.;NLD=Een sleutel met meer dan 10 velden kan niet worden hernoemt.;DEA=a key with more than 10 fields cannot be renamed.';
    BEGIN
      CASE KeyRef.FIELDCOUNT OF
        1 : RecRef3.RENAME(FldRef[1].VALUE);
        2 : RecRef3.RENAME(FldRef[1].VALUE, FldRef[2].VALUE);
        3 : RecRef3.RENAME(FldRef[1].VALUE, FldRef[2].VALUE, FldRef[3].VALUE);
        4 : RecRef3.RENAME(FldRef[1].VALUE, FldRef[2].VALUE, FldRef[3].VALUE, FldRef[4].VALUE);
        5 : RecRef3.RENAME(FldRef[1].VALUE, FldRef[2].VALUE, FldRef[3].VALUE, FldRef[4].VALUE, FldRef[5].VALUE);
        6 : RecRef3.RENAME(FldRef[1].VALUE, FldRef[2].VALUE, FldRef[3].VALUE, FldRef[4].VALUE, FldRef[5].VALUE, FldRef[6].VALUE);

        7 :
          RecRef3.RENAME(
            FldRef[1].VALUE, FldRef[2].VALUE, FldRef[3].VALUE, FldRef[4].VALUE, FldRef[5].VALUE,
            FldRef[6].VALUE, FldRef[7].VALUE);
        8 :
          RecRef3.RENAME(
            FldRef[1].VALUE, FldRef[2].VALUE, FldRef[3].VALUE, FldRef[4].VALUE, FldRef[5].VALUE,
            FldRef[6].VALUE, FldRef[7].VALUE, FldRef[8].VALUE);
        9 :
          RecRef3.RENAME(
            FldRef[1].VALUE, FldRef[2].VALUE, FldRef[3].VALUE, FldRef[4].VALUE, FldRef[5].VALUE,
            FldRef[6].VALUE, FldRef[7].VALUE, FldRef[8].VALUE, FldRef[9].VALUE);
        10 :
          RecRef3.RENAME(
            FldRef[1].VALUE, FldRef[2].VALUE, FldRef[3].VALUE, FldRef[4].VALUE, FldRef[5].VALUE,
            FldRef[6].VALUE, FldRef[7].VALUE, FldRef[8].VALUE, FldRef[9].VALUE, FldRef[10].VALUE);
        ELSE
          ERROR(ctMoreThan10);

      END;
    END;

    LOCAL PROCEDURE ExecuteSQLQuery@9(VAR Actions@1000 : Record 11102048;VAR Progressbar@1001 : Codeunit 11102044);
    VAR
      TmpCompany@1002 : TEMPORARY Record 2000000006;
      SQLMgt@1003 : Codeunit 11102075;
      InStr@1004 : InStream;
      CrLf@1005 : Text;
      SqlLine@1006 : Text;
      SqlString@1007 : Text;
      ctExecutingQuery@1008 : TextConst 'DEU=Executing SQL query...;ENU=Executing SQL query...;ESP=Executing SQL query...;FRA=Executing SQL query...;NLD=SQL-query uitvoeren...;DEA=Executing SQL query...';
    BEGIN
      WITH Actions DO BEGIN

        CrLf[1] := 13;
        CrLf[2] := 10;

        CALCFIELDS("SQL Query Blob");
        IF "SQL Query Blob".HASVALUE THEN BEGIN

          SetCompanyRange(TmpCompany, "Company Name", '');
          IF TmpCompany.FINDSET THEN
            REPEAT

              Progressbar.Text1 := ctExecutingQuery;
              Progressbar.Text2 := "SQL Query";

              Progressbar.AddToBar(1);

              "SQL Query Blob".CREATEINSTREAM(InStr);
              WHILE NOT InStr.EOS DO BEGIN
                InStr.READTEXT(SqlLine);
                SqlString := SqlString + SqlLine + CrLf;
              END;

              SqlString := ReplaceCompanyName(SqlString, TmpCompany.Name);
              SQLMgt.ExecuteNonQuery(SqlString);

            UNTIL TmpCompany.NEXT = 0;

        END;
      END;
    END;

    LOCAL PROCEDURE ExecuteDOSCommand@10(VAR Actions@1000 : Record 11102048);
    VAR
      Process@1001 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process";
    BEGIN
      WITH Actions DO
        IF "DOS Command" <> '' THEN BEGIN
          Process := Process.Start("DOS Command");
          Process.WaitForExit(500);
        END;
    END;

    LOCAL PROCEDURE ReplaceCompanyName@11(SQLLine@1000 : Text;CompanyName2@1001 : Text) : Text;
    VAR
      CompanyNamePos@1002 : Integer;
    BEGIN
      CompanyNamePos := STRPOS(LOWERCASE(SQLLine), 'companyname');
      IF CompanyNamePos > 0 THEN
        SQLLine := INSSTR(DELSTR(SQLLine, CompanyNamePos, 11), CONVERTSTR(CompanyName2, '."\/''', '_____'), CompanyNamePos);

      EXIT(SQLLine);
    END;

    PROCEDURE ImportFile@12(FileName@1000 : Text;UseWorkSheet@1001 : Boolean);
    VAR
      Progressbar@1002 : Codeunit 11102044;
      oFile@1003 : File;
      InStr@1004 : InStream;
      ctImportingFile@1005 : TextConst 'DEU=Importing file...;ENU=Importing file...;ESP=Importing file...;FRA=Importing file...;NLD=Bestand importeren...;DEA=Importing file...';
    BEGIN
      GLOBALLANGUAGE := 1033;

      oFile.OPEN(FileName);
      oFile.CREATEINSTREAM(InStr);

      Progressbar.NoOfBars := 2;
      Progressbar.Open(ctImportingFile, 1);
      ImportInstream(InStr, UseWorkSheet, Progressbar, oFile.LEN);
      Progressbar.Close;
      oFile.CLOSE;
    END;

    PROCEDURE ImportInstream@13(VAR InStr@1000 : InStream;UseWorkSheet@1001 : Boolean;VAR Progressbar@1002 : Codeunit 11102044;StreamLength@1003 : BigInteger);
    VAR
      Actions@1004 : Record 11102048;
      TmpImportAction@1005 : TEMPORARY Record 11102048;
      TmpImportActionField@1006 : TEMPORARY Record 11102049;
      Object@1007 : Record 2000000001;
      TmpBlob@1008 : TEMPORARY Record 2000000001;
      Company@1009 : Record 2000000006;
      TmpCompany@1010 : TEMPORARY Record 2000000006;
      AllObj@1011 : Record 2000000038;
      Fld@1012 : Record 2000000041;
      Mgt@1013 : Codeunit 11102035;
      ImExportMgt@1014 : Codeunit 11102043;
      TableFilterMgt@1015 : Codeunit 11102100;
      Worksheet@1016 : Page 11102063;
      RecRef@1017 : RecordRef;
      FldRef@1018 : FieldRef;
      OutStr@1019 : OutStream;
      BLOBSizeText@1020 : Text;
      SplitLine@1021 : ARRAY [2500] OF Text[250];
      ReadChar@1022 : Char;
      CharacterCounter@1023 : BigInteger;
      MaxProgressBar@1024 : BigInteger;
      BLOBCounter@1025 : Integer;
      BLOBSize@1026 : Integer;
      CommitCounter@1027 : Integer;
      CurrentLineNo@1028 : Integer;
      CurrentTableNo@1029 : Integer;
      FieldCounter@1030 : Integer;
      FieldSorting@1031 : Integer;
      i@1032 : Integer;
      IntoTableNo@1033 : Integer;
      StreamCounter@1034 : Integer;
      CurrentCommitType@1035 : Option;
      DefinitionFinished@1036 : Boolean;
      IsBLOBField@1037 : ARRAY [500] OF Boolean;
      SkipModify@1038 : Boolean;
      SkipThisTable@1039 : Boolean;
      ctFilter@1040 : TextConst 'DEU=Table%1: %2;ENU=Table%1: %2;ESP=Table%1: %2;FRA=Table%1: %2;NLD=Table%1: %2;DEA=Table%1: %2';
      ctImporting@1041 : TextConst 'DEU=Importing...;ENU=Importing...;ESP=Importing...;FRA=Importing...;NLD=Importeren...;DEA=Importing...';
      ctNoValidFab@1042 : TextConst 'DEU=Not a valid fab.;ENU=Not a valid fab.;ESP=Not a valid fab.;FRA=Not a valid fab.;NLD=Geen geldige fab.;DEA=Not a valid fab.';
    BEGIN
      GLOBALLANGUAGE := 1033;

      FieldCounter := 1;

      ImExportMgt.CheckObjectManagerVersion(InStr, 'FAB');

      Progressbar.BarSize := StreamLength;

      WHILE (InStr.READ(ReadChar) > 0) AND NOT DefinitionFinished DO BEGIN

        CharacterCounter += 1;
        IF CharacterCounter MOD 250 = 0 THEN
          Progressbar.AddToBar(250);

        CASE ReadChar OF
          9 :
            FieldCounter += 1;
          10 :
            ;
          13 :
            BEGIN
              CASE TRUE OF
                SplitLine[1] = 'Definition' :
                  BEGIN

                    WITH TmpImportAction DO BEGIN
                      INIT;
                      EVALUATE(CurrentTableNo, SplitLine[5]);

                      RESET;

                      EVALUATE("Line No.", SplitLine[2]);
                      EVALUATE("Action Type", SplitLine[3]);
                      "Company Name" := SplitLine[4];
                      "Object No." := CurrentTableNo;
                      "Object Name" := SplitLine[6];
                      IF SplitLine[7] = '' THEN
                        EVALUATE(Filter, '')
                      ELSE
                        EVALUATE(Filter, STRSUBSTNO(ctFilter, "Object No.", SplitLine[7]));

                      EVALUATE("Into Table No.", SplitLine[8]);
                      "Into Company Name" := SplitLine[9];
                      EVALUATE("DELETEALL;", SplitLine[10]);
                      EVALUATE("INIT;", SplitLine[11]);
                      EVALUATE("IF FIND('=') THEN;", SplitLine[12]);
                      EVALUATE("IF INSERT THEN;", SplitLine[13]);
                      EVALUATE("IF MODIFY THEN;", SplitLine[14]);
                      EVALUATE("Commit Type", SplitLine[15]);
                      EVALUATE(Fields, SplitLine[16]);
                      EVALUATE("Key Index", SplitLine[17]);
                      EVALUATE("Export FlowFields", SplitLine[18]);
                      EVALUATE("SQL Query", SplitLine[19]);
                      EVALUATE("DOS Command", SplitLine[20]);

                      IF "Action Type" = "Action Type"::"Copy Data" THEN
                        CASE "Into Company Name" OF

                          '', ActiveCompanyText :
                            "Into Company Name" := COMPANYNAME;

                          AllCompaniesText, SameCompanyText :
                            ;

                          ELSE
                            IF Company.GET("Company Name") THEN
                              "Into Company Name" := "Company Name"
                            ELSE
                              "Into Company Name" := COMPANYNAME;
                        END;

                      IF "Into Table No." = 0 THEN BEGIN

                        Object.SETCURRENTKEY(Type, Name);
                        Object.SETRANGE(Type, Object.Type::Table);
                        Object.SETRANGE(Name, "Object Name");
                        IF Object.FINDFIRST THEN
                          "Into Table No." := Object.ID
                        ELSE

                          IF Mgt.GetTableByName(AllObj, "Object Name") THEN
                            "Into Table No." := AllObj."Object ID"
                          ELSE
                            IF EVALUATE("Into Table No.", "Object Name") THEN
                              ;

                      END;
                      INSERT;

                    END;

                    FieldSorting := 0;
                    FOR i := 21 TO FieldCounter DO
                      IF i MOD 5 = 1 THEN BEGIN
                        TmpImportActionField."Line No." := TmpImportAction."Line No.";
                        TmpImportActionField."Table No." := TmpImportAction."Object No.";
                        EVALUATE(TmpImportActionField."Field No.", SplitLine[i]);
                        TmpImportActionField."Field Name" := SplitLine[i + 1];
                        EVALUATE(TmpImportActionField."Import Action", SplitLine[i + 2]);
                        EVALUATE(TmpImportActionField.Value, SplitLine[i + 3]);
                        EVALUATE(TmpImportActionField."Into Field No.", SplitLine[i + 4]);
                        FieldSorting += 1;
                        TmpImportActionField.Sorting := FieldSorting;
                        TmpImportActionField.Selected := TRUE;
                        TmpImportActionField.INSERT;
                      END;

                    IF TmpImportAction."Into Table No." <> 0 THEN
                      TmpImportAction.FillDefaultFieldMapActions(TmpImportActionField);

                  END;

                SplitLine[1] = 'SQL Query' :
                  BEGIN
                    InStr.READ(ReadChar);
                    InStr.READTEXT(BLOBSizeText, 20);
                    EVALUATE(BLOBSize, '0' + DELCHR(FORMAT(BLOBSizeText), '='));
                    IF BLOBSize > 0 THEN BEGIN
                      CharacterCounter += BLOBSize;
                      CLEAR(TmpImportAction."SQL Query Blob");
                      TmpImportAction."SQL Query Blob".CREATEOUTSTREAM(OutStr);
                      ImExportMgt.InOutStream(InStr, OutStr, BLOBSize);
                      TmpImportAction.MODIFY(TRUE);
                    END;
                    InStr.READ(ReadChar);
                  END;

                SplitLine[1] = 'End definition' :
                  DefinitionFinished := TRUE;
                ELSE
                  ERROR(ctNoValidFab);
              END;
              CLEAR(SplitLine);
              FieldCounter := 1;
            END;
          ELSE
            SplitLine[FieldCounter] += FORMAT(ReadChar);
        END;
      END;

      IF UseWorkSheet THEN BEGIN

        Progressbar.Close;

        Worksheet.LOOKUPMODE := TRUE;
        Worksheet.SetImportedData(TmpImportAction, TmpImportActionField);
        IF NOT (Worksheet.RUNMODAL = ACTION::LookupOK) THEN
          EXIT;
        Worksheet.GetImportedData(TmpImportAction, TmpImportActionField);
        MaxProgressBar := Progressbar.GetBarSize;

        Progressbar.NoOfBars := 2;
        Progressbar.Open(ctImporting, 2);
        Progressbar.BarSize := StreamLength;
        Progressbar.AddToBar(CharacterCounter);

      END;

      SkipThisTable := TRUE;
      FieldCounter := 1;

      WHILE NextStream(StreamCounter, InStr) DO
        WHILE InStr.READ(ReadChar) > 0 DO BEGIN

          CharacterCounter += 1;
          IF CharacterCounter MOD 250 = 0 THEN
            Progressbar.AddToBar(250);

          CASE ReadChar OF
            9 :
              BEGIN
                FieldCounter += 1;
                IF IsBLOBField[FieldCounter - 1] THEN BEGIN
                  InStr.READTEXT(BLOBSizeText, 20);
                  EVALUATE(BLOBSize, '0' + DELCHR(FORMAT(BLOBSizeText), '='));
                  IF BLOBSize > 0 THEN BEGIN
                    BLOBCounter += 1;

                    TmpBlob.Type := BLOBCounter;
                    CLEAR(TmpBlob."BLOB Reference");
                    TmpBlob."BLOB Reference".CREATEOUTSTREAM(OutStr);
                    ImExportMgt.InOutStream(InStr, OutStr, BLOBSize);
                    TmpBlob.INSERT;

                  END;
                  Progressbar.AddToBar(20 + BLOBSize);
                END;
              END;
            10 :
              ;
            13 :
              BEGIN
                CASE TRUE OF
                  SplitLine[1] = 'Action' :
                    BEGIN

                      SkipThisTable := TRUE;

                      IF CurrentCommitType <> Actions."Commit Type"::" " THEN
                        COMMIT;

                      CLEAR(IsBLOBField);
                      CurrentCommitType := Actions."Commit Type"::" ";

                      EVALUATE(CurrentLineNo, SplitLine[2]);
                      TmpImportAction.SETRANGE("Line No.", CurrentLineNo);
                      TmpImportActionField.SETRANGE("Line No.", CurrentLineNo);
                      IF TmpImportAction.FINDFIRST THEN BEGIN

                        Progressbar.Text1 := TmpImportAction."Object Name";
                        Progressbar.Text2 := '';

                        IF TmpImportAction."Action Type" = TmpImportAction."Action Type"::"Transfer Data" THEN BEGIN
                          Progressbar.Text2 := TmpImportAction."Into Company Name";
                          IntoTableNo := TmpImportAction."Into Table No.";
                          IF (IntoTableNo <> 0) AND TmpImportAction."DELETEALL;" THEN BEGIN
                            SetCompanyRange(TmpCompany, TmpImportAction."Into Company Name", TmpImportAction."Company Name");
                            IF TmpCompany.FINDSET THEN
                              REPEAT
                                RecRef.OPEN(IntoTableNo, FALSE, TmpCompany.Name);
                                IF FORMAT(TmpImportAction.Filter) <> '' THEN
                                  TableFilterMgt.FilterRecRef(RecRef, FORMAT(TmpImportAction.Filter), TmpImportAction."Key Index");
                                RecRef.DELETEALL;
                                RecRef.CLOSE;
                              UNTIL TmpCompany.NEXT = 0;

                          END;
                          CurrentCommitType := TmpImportAction."Commit Type";
                          CommitCounter := 0;

                          SkipThisTable :=
                            (NOT TmpImportAction."IF INSERT THEN;" AND NOT TmpImportAction."IF MODIFY THEN;") OR
                            (IntoTableNo = 0);

                          TmpImportActionField.SETRANGE("Line No.", TmpImportAction."Line No.");
                        END ELSE BEGIN
                          Progressbar.NextBar;
                          Progressbar.BarSize := CountActionRecords(TmpImportAction);
                          ExecuteAction(TmpImportAction, TmpImportActionField, Progressbar);
                          Progressbar.PreviousBar;
                        END;

                        IF TmpImportActionField.FINDSET THEN
                          REPEAT
                            IF Fld.GET(TmpImportActionField."Table No.", TmpImportActionField."Field No.") THEN
                              IsBLOBField[TmpImportActionField.Sorting] := Fld.Type IN [Fld.Type::BLOB, Fld.Type::TableFilter];
                          UNTIL TmpImportActionField.NEXT = 0;

                      END ELSE
                        SkipThisTable := TRUE;
                    END;

                  SplitLine[1] = '' :

                    IF NOT SkipThisTable THEN BEGIN

                      SetCompanyRange(TmpCompany, TmpImportAction."Into Company Name", TmpImportAction."Company Name");
                      IF TmpCompany.FINDSET THEN
                        REPEAT

                          RecRef.OPEN(IntoTableNo, FALSE, TmpCompany.Name);

                          IF TmpImportAction."INIT;" THEN
                            RecRef.INIT;

                          IF TmpImportAction."IF FIND('=') THEN;" THEN BEGIN
                            FieldCounter := 0;
                            IF TmpImportActionField.FINDSET THEN
                              REPEAT
                                FieldCounter += 1;
                                IF TmpImportActionField."Into Field No." <> 0 THEN BEGIN
                                  Fld.GET(IntoTableNo, TmpImportActionField."Into Field No.");
                                  FldRef := RecRef.FIELD(TmpImportActionField."Into Field No.");
                                  EvaluateFieldRefValue(FldRef, Fld.Type, SplitLine[FieldCounter + 1], FALSE);
                                END;
                              UNTIL TmpImportActionField.NEXT = 0;
                            IF NOT RecRef.FIND('=') THEN
                              IF Actions."INIT;" THEN
                                RecRef.INIT
                              ELSE BEGIN
                                RecRef.CLOSE;
                                CLEAR(RecRef);
                                RecRef.OPEN(IntoTableNo, FALSE, TmpCompany.Name);
                              END;
                          END;

                          FieldCounter := 0;
                          BLOBCounter := 0;
                          IF TmpImportActionField.FINDSET THEN
                            REPEAT

                              FieldCounter += 1;

                              IF (TmpImportAction.Fields = TmpImportAction.Fields::All) OR
                                 TmpImportActionField.Selected
                              THEN

                                IF TmpImportActionField."Into Field No." <> 0 THEN BEGIN
                                  Fld.GET(IntoTableNo, TmpImportActionField."Into Field No.");
                                  FldRef := RecRef.FIELD(TmpImportActionField."Into Field No.");

                                  CASE Fld.Type OF

                                    Fld.Type::BLOB :
                                      BEGIN
                                        BLOBCounter += 1;
                                        IF TmpBlob.GET(BLOBCounter) THEN BEGIN
                                          TmpBlob.CALCFIELDS("BLOB Reference");
                                          FillBLOBField(TmpBlob, FldRef);
                                        END;
                                      END;

                                    Fld.Type::TableFilter :
                                      BEGIN
                                        BLOBCounter += 1;
                                        IF TmpBlob.GET(BLOBCounter) THEN
                                          FillTableFilter(TmpBlob, RecRef, FldRef);
                                      END;

                                    ELSE
                                      EvaluateFieldRefValue(FldRef, Fld.Type, SplitLine[FieldCounter + 1], FALSE);
                                  END;

                                  IF TmpImportActionField."Import Action" = TmpImportActionField."Import Action"::Validate THEN
                                    FldRef.VALIDATE;
                                END;

                            UNTIL TmpImportActionField.NEXT = 0;

                          SkipModify := FALSE;

                          IF TmpImportAction."IF INSERT THEN;" THEN
                            IF RecRef.INSERT THEN
                              SkipModify := TRUE;

                          IF TmpImportAction."IF MODIFY THEN;" AND NOT SkipModify THEN
                            IF RecRef.MODIFY THEN
                              ;

                          CommitCounter += 1;
                          CASE CurrentCommitType OF

                            Actions."Commit Type"::"After Each Record" :
                              COMMIT;

                            Actions."Commit Type"::"After 100 Records" :
                              IF CommitCounter MOD 100 = 0 THEN
                                COMMIT;
                          END;
                          RecRef.CLOSE;

                        UNTIL TmpCompany.NEXT = 0;

                    END;

                END;
                CLEAR(SplitLine);
                FieldCounter := 1;
                BLOBCounter := 0;
                TmpBlob.RESET;
                TmpBlob.DELETEALL;
              END;
            ELSE
              SplitLine[FieldCounter] += FORMAT(ReadChar);
          END;
        END;

      TmpImportActionField.RESET;
      TmpImportActionField.DELETEALL;

      IF CurrentCommitType <> Actions."Commit Type"::" " THEN
        COMMIT;
    END;

    PROCEDURE ExportFile@14(VAR Actions@1000 : Record 11102048;VAR ActionField@1001 : Record 11102049;FileName@1002 : Text;VAR Progressbar@1003 : Codeunit 11102044);
    VAR
      oFile@1004 : File;
      OutStr@1005 : OutStream;
    BEGIN
      GLOBALLANGUAGE := 1033;

      IF EXISTS(FileName) THEN
        ERASE(FileName);

      oFile.TEXTMODE(TRUE);
      oFile.CREATE(FileName);
      oFile.CREATEOUTSTREAM(OutStr);

      FillExportOutStream(Actions, ActionField, OutStr, Progressbar);

      oFile.CLOSE;
    END;

    PROCEDURE FillExportOutStream@15(VAR Actions@1000 : Record 11102048;VAR ActionField@1001 : Record 11102049;VAR OutStr@1002 : OutStream;VAR Progressbar@1003 : Codeunit 11102044);
    VAR
      TmpActionField@1004 : TEMPORARY Record 11102049;
      TmpCompany@1005 : TEMPORARY Record 2000000006;
      ImExportMgt@1006 : Codeunit 11102043;
      TableFilterMgt@1007 : Codeunit 11102100;
      RecRef@1008 : RecordRef;
      FldRef@1009 : FieldRef;
      CrLf@1010 : Text;
      Tab@1011 : Text;
      CompanyCounter@1012 : Integer;
      FldRefValueInt@1013 : Integer;
      TotalLength@1014 : Integer;
      ctCountingRecords@1015 : TextConst 'DEU=Counting records;ENU=Counting records;ESP=Counting records;FRA=Counting records;NLD=Records tellen;DEA=Counting records';
    BEGIN
      GLOBALLANGUAGE := 1033;

      ImExportMgt.WriteObjectManagerVersion(OutStr, 'FAB');

      CrLf[1] := 13;
      CrLf[2] := 10;

      Tab[1] := 9;

      Progressbar.Text1 := ctCountingRecords;
      Progressbar.BarSize := 0;
      Progressbar.BarPosition := 0;

      IF Actions.FINDSET THEN
        REPEAT
          Progressbar.BarSize := Progressbar.GetBarSize + 1;
          IF Actions."Action Type" = Actions."Action Type"::"Transfer Data" THEN BEGIN
            SetCompanyRange(TmpCompany, Actions."Company Name", '');
            IF TmpCompany.FINDSET THEN
              REPEAT
                RecRef.OPEN(Actions."Object No.", FALSE, TmpCompany.Name);
                IF FORMAT(Actions.Filter) <> '' THEN
                  TableFilterMgt.FilterRecRef(RecRef, FORMAT(Actions.Filter), Actions."Key Index");
                Progressbar.BarSize := Progressbar.GetBarSize + RecRef.COUNT;
                RecRef.CLOSE;
              UNTIL TmpCompany.NEXT = 0;
          END;
        UNTIL Actions.NEXT = 0;

      IF Actions.FINDSET THEN
        REPEAT

          IF Actions."Action Type" = Actions."Action Type"::"Transfer Data" THEN
            SetCompanyRange(TmpCompany, Actions."Company Name", '')
          ELSE
            SetDefinitionCompanyRange(TmpCompany, Actions."Company Name");

          CompanyCounter := 0;
          IF TmpCompany.FINDSET THEN
            REPEAT
              CompanyCounter += 1;
              OutStrWriteText(OutStr, 'Definition', TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, FORMAT(Actions."Line No." + CompanyCounter - 1), TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, FORMAT(0 + Actions."Action Type"), TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, TmpCompany.Name, TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, FORMAT(Actions."Object No."), TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, Actions."Object Name", TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);

              IF TableFilterMgt.EmptyTableFilter(Actions."Object No.") = FORMAT(Actions.Filter) THEN
                OutStrWriteText(OutStr, '', TotalLength)
              ELSE
                OutStrWriteText(OutStr,
                  COPYSTR(FORMAT(Actions.Filter), STRLEN(TableFilterMgt.EmptyTableFilter(Actions."Object No."))), TotalLength);

              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, FORMAT(Actions."Into Table No."), TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, Actions."Into Company Name", TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, BooleanValue(Actions."DELETEALL;"), TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, BooleanValue(Actions."INIT;"), TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, BooleanValue(Actions."IF FIND('=') THEN;"), TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, BooleanValue(Actions."IF INSERT THEN;"), TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, BooleanValue(Actions."IF MODIFY THEN;"), TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, FORMAT(0 + Actions."Commit Type"), TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, FORMAT(0 + Actions.Fields), TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, FORMAT(Actions."Key Index"), TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, BooleanValue(Actions."Export FlowFields"), TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, FORMAT(RemoveSpecialCharacters(Actions."SQL Query")), TotalLength);
              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, FORMAT(RemoveSpecialCharacters(Actions."DOS Command")), TotalLength);

              SetSelectedTmpFieldsRange(Actions, ActionField, TmpActionField);

              IF Actions.IsTableRecord THEN
                IF TmpActionField.FINDSET THEN
                  REPEAT
                    OutStrWriteText(OutStr, Tab, TotalLength);
                    OutStrWriteText(OutStr, FORMAT(TmpActionField."Field No."), TotalLength);
                    OutStrWriteText(OutStr, Tab, TotalLength);
                    OutStrWriteText(OutStr, TmpActionField."Field Name", TotalLength);
                    OutStrWriteText(OutStr, Tab, TotalLength);
                    OutStrWriteText(OutStr, FORMAT(0 + TmpActionField."Import Action"), TotalLength);
                    OutStrWriteText(OutStr, Tab, TotalLength);
                    OutStrWriteText(OutStr, TmpActionField.Value, TotalLength);
                    OutStrWriteText(OutStr, Tab, TotalLength);
                    OutStrWriteText(OutStr, FORMAT(TmpActionField."Into Field No."), TotalLength);
                  UNTIL TmpActionField.NEXT = 0;

              OutStrWriteText(OutStr, CrLf, TotalLength);

            UNTIL TmpCompany.NEXT = 0;

          Actions.CALCFIELDS("SQL Query Blob");
          IF Actions."SQL Query Blob".HASVALUE THEN BEGIN
            OutStrWriteText(OutStr, 'SQL Query', TotalLength);
            OutStrWriteText(OutStr, CrLf, TotalLength);
            RecRef.GETTABLE(Actions);
            FldRef := RecRef.FIELD(Actions.FIELDNO("SQL Query Blob"));
            FillBLOBOutStream(OutStr, FldRef, TotalLength);
            OutStrWriteText(OutStr, CrLf, TotalLength);
            RecRef.CLOSE;
          END;

        UNTIL Actions.NEXT = 0;

      OutStrWriteText(OutStr, 'End definition', TotalLength);
      OutStrWriteText(OutStr, CrLf, TotalLength);

      IF Actions.FINDSET THEN
        REPEAT

          IF Actions."Action Type" = Actions."Action Type"::"Transfer Data" THEN
            SetCompanyRange(TmpCompany, Actions."Company Name", '')
          ELSE
            SetDefinitionCompanyRange(TmpCompany, Actions."Company Name");

          CompanyCounter := 0;
          IF TmpCompany.FINDSET THEN
            REPEAT

              CompanyCounter += 1;
              Progressbar.Text1 := STRSUBSTNO('%1 %2', Actions."Object No.", Actions."Object Name");
              Progressbar.Text2 := TmpCompany.Name;
              Progressbar.AddToBar(1);

              OutStrWriteText(OutStr, 'Action', TotalLength);

              OutStrWriteText(OutStr, Tab, TotalLength);
              OutStrWriteText(OutStr, FORMAT(Actions."Line No." + CompanyCounter - 1), TotalLength);
              OutStrWriteText(OutStr, CrLf, TotalLength);

              IF Actions."Action Type" = Actions."Action Type"::"Transfer Data" THEN BEGIN

                RecRef.OPEN(Actions."Object No.", FALSE, TmpCompany.Name);

                IF FORMAT(Actions.Filter) <> '' THEN
                  TableFilterMgt.FilterRecRef(RecRef, FORMAT(Actions.Filter), Actions."Key Index");

                IF RecRef.FINDSET THEN
                  REPEAT

                    Progressbar.AddToBar(1);

                    SetSelectedTmpFieldsRange(Actions, ActionField, TmpActionField);

                    IF TmpActionField.FINDSET THEN
                      REPEAT
                        FldRef := RecRef.FIELD(TmpActionField."Field No.");

                        IF FORMAT(FldRef.CLASS) = 'FlowField' THEN
                          FldRef.CALCFIELD;

                        OutStrWriteText(OutStr, Tab, TotalLength);

                        CASE FORMAT(FldRef.TYPE) OF

                          'Boolean' :
                            IF FldRef.VALUE THEN
                              OutStrWriteText(OutStr, '1', TotalLength)
                            ELSE
                              OutStrWriteText(OutStr, '0', TotalLength);

                          'Date' :
                            OutStrWriteText(OutStr, FORMAT(FldRef.VALUE, 0, '<Year4>-<Month,2>-<Day,2>'), TotalLength);

                          'Time' :
                            OutStrWriteText(OutStr,
                              FORMAT(FldRef.VALUE, 0, '<Hours24>:<Minutes,2>:<Seconds,2><Second dec>'), TotalLength);

                          'DateTime' :
                            OutStrWriteText(OutStr,
                              FORMAT(
                                FldRef.VALUE, 0, '<Year4>-<Month,2>-<Day,2> <Hours24>:<Minutes,2>:<Seconds,2><Second dec>'), TotalLength);

                          'Option' :
                            BEGIN
                              FldRefValueInt := FldRef.VALUE;
                              OutStrWriteText(OutStr, FORMAT(FldRefValueInt), TotalLength);
                            END;

                          'BLOB' :
                            FillBLOBOutStream(OutStr, FldRef, TotalLength);

                          'TableFilter' :
                            FillTableFilterOutStream(OutStr, FldRef, TotalLength);

                          'Integer', 'Decimal' :
                            OutStrWriteText(OutStr, FORMAT(FldRef.VALUE, 0, 9), TotalLength);

                          ELSE
                            OutStrWriteText(OutStr, RemoveSpecialCharacters(FORMAT(FldRef.VALUE)), TotalLength);
                        END;

                      UNTIL TmpActionField.NEXT = 0;

                    OutStrWriteText(OutStr, CrLf, TotalLength);

                    IF MaxFabSize <> 0 THEN
                      IF TotalLength > MaxFabSize * 1000000 THEN
                        OpenNextFile(OutStr, TotalLength);

                  UNTIL RecRef.NEXT = 0;
                RecRef.CLOSE;
              END;
            UNTIL TmpCompany.NEXT = 0;

        UNTIL Actions.NEXT = 0;

      Actions.SETRANGE("Object No.");
      Actions.SETRANGE("Action Type", Actions."Action Type"::"Transfer Data");
    END;

    LOCAL PROCEDURE FillBLOBOutStream@16(VAR OutStr@1000 : OutStream;VAR FldRef@1001 : FieldRef;VAR TotalLength@1002 : Integer);
    VAR
      TmpObject@1003 : TEMPORARY Record 2000000001;
      oFile@1004 : File;
      InStr@1005 : InStream;
      TmpFileName@1006 : Text;
    BEGIN
      FldRef.CALCFIELD;
      TmpObject."BLOB Reference" := FldRef.VALUE;

      IF TmpObject."BLOB Reference".HASVALUE THEN BEGIN

        oFile.CREATETEMPFILE;
        TmpFileName := oFile.NAME;
        SLEEP(15);
        oFile.CLOSE;

        TmpObject."BLOB Reference".EXPORT(TmpFileName);
        oFile.OPEN(TmpFileName);
        OutStrWriteText(OutStr, PADSTR(FORMAT(oFile.LEN), 20, ' '), TotalLength);
        TmpObject."BLOB Reference".CREATEINSTREAM(InStr);

        TotalLength += oFile.LEN;

        COPYSTREAM(OutStr, InStr);

        oFile.CLOSE;
        ERASE(TmpFileName);
      END ELSE
        OutStrWriteText(OutStr, PADSTR('', 20, ' '), TotalLength);
    END;

    LOCAL PROCEDURE FillTableFilterOutStream@17(VAR OutStr@1000 : OutStream;VAR FldRef@1001 : FieldRef;VAR TotalLength@1002 : Integer);
    BEGIN
      IF FORMAT(FldRef.VALUE) <> '' THEN BEGIN
        OutStrWriteText(OutStr, PADSTR(FORMAT(STRLEN(FORMAT(FldRef.VALUE))), 20, ' '), TotalLength);
        OutStrWriteText(OutStr, FORMAT(FldRef.VALUE), TotalLength);
      END ELSE
        OutStrWriteText(OutStr, PADSTR('', 20, ' '), TotalLength);
    END;

    LOCAL PROCEDURE OutStrWriteText@38(VAR OutStr@1000 : OutStream;Text@1001 : Text;VAR TotalLength@1002 : Integer);
    BEGIN
      OutStr.WRITETEXT(Text);
      TotalLength += STRLEN(Text);
    END;

    LOCAL PROCEDURE FillBLOBField@18(VAR TmpBlob@1000 : TEMPORARY Record 2000000001;VAR FldRef@1001 : FieldRef);
    VAR
      RecRef2@1002 : RecordRef;
      FldRef2@1003 : FieldRef;
    BEGIN
      TmpBlob.CALCFIELDS("BLOB Reference");

      RecRef2.GETTABLE(TmpBlob);
      FldRef2 := RecRef2.FIELD(7);
      FldRef.VALUE := FldRef2.VALUE;
      RecRef2.CLOSE;
    END;

    LOCAL PROCEDURE FillTableFilter@19(VAR TmpBlob@1000 : TEMPORARY Record 2000000001;VAR RecRef@1001 : RecordRef;VAR FldRef@1002 : FieldRef);
    VAR
      Actions@1003 : Record 11102048;
      TmpAction@1004 : TEMPORARY Record 11102048;
      ProjectPermissions@1005 : Record 11102050;
      RecRef2@1006 : RecordRef;
      FldRef2@1007 : FieldRef;
      InStr@1008 : InStream;
      Text1024@1009 : Text;
    BEGIN
      TmpBlob.CALCFIELDS("BLOB Reference");

      CASE TRUE OF

        (RecRef.NUMBER = DATABASE::"OM - Action") AND (FldRef.NUMBER = 28) :
          BEGIN
            RecRef.SETTABLE(Actions);
            TmpBlob."BLOB Reference".CREATEINSTREAM(InStr);
            InStr.READTEXT(Text1024);
            IF EVALUATE(Actions.Filter, Text1024) THEN
              ;
            RecRef.GETTABLE(Actions);
          END;

        (RecRef.NUMBER = DATABASE::"OM - Project Permissions") AND (FldRef.NUMBER = 12) :
          BEGIN
            RecRef.SETTABLE(ProjectPermissions);
            TmpBlob."BLOB Reference".CREATEINSTREAM(InStr);
            InStr.READTEXT(Text1024);
            IF EVALUATE(ProjectPermissions."Security Filter", Text1024) THEN
              ;
            RecRef.GETTABLE(Actions);
          END;

        ELSE BEGIN
          // ONLY POSSIBLE FROM NAV5
          //ERROR(STRSUBSTNO('Cannot import "%1"."%2"', RecRef.NAME, FldRef.NAME));
          TmpBlob."BLOB Reference".CREATEINSTREAM(InStr);
          InStr.READTEXT(Text1024);
          EVALUATE(TmpAction.Filter, Text1024);

          RecRef2.GETTABLE(TmpAction);
          FldRef2 := RecRef2.FIELD(28);

          EVALUATE(FldRef, FORMAT(FldRef2.VALUE));
          RecRef2.CLOSE;

        END;

      END;
    END;

    LOCAL PROCEDURE EvaluateFieldRefValue@20(VAR FldRef@1000 : FieldRef;FieldType@1001 : Option;Value@1002 : Text;DoValidate@1003 : Boolean);
    VAR
      Fld@1004 : Record 2000000041;
      DateFormula@1005 : DateFormula;
      Date@1006 : Date;
      DateTime@1007 : DateTime;
      TimeVar@1008 : Time;
      Duration@1009 : Duration;
      OptionString@1010 : Text;
      Decimal@1011 : Decimal;
      BigInteger@1012 : BigInteger;
      Day@1013 : Integer;
      i@1014 : Integer;
      Month@1015 : Integer;
      OptionValue@1016 : Integer;
      StrPosOfOption@1017 : Integer;
      Year@1018 : Integer;
      Boolean@1019 : Boolean;
      ctEvaluationError@1020 : TextConst 'DEU=Field Type %1 cannot be evaluated.;ENU=Field Type %1 cannot be evaluated.;ESP=Field Type %1 cannot be evaluated.;FRA=Field Type %1 cannot be evaluated.;NLD=Veldtype %1 kan niet worden geevalueerd.;DEA=Field Type %1 cannot be evaluated.';
      RecordID2@1021 : RecordID;
    BEGIN
      CASE FieldType OF

        Fld.Type::RecordID :
          BEGIN
            IF EVALUATE(RecordID2, Value) THEN
              ;
            IF DoValidate THEN
              FldRef.VALIDATE(RecordID2)
            ELSE
              FldRef.VALUE := RecordID2;
          END;

        Fld.Type::Text, Fld.Type::Code, Fld.Type::GUID, Fld.Type::OemText :
          IF DoValidate THEN
            FldRef.VALIDATE(Value)
          ELSE
            FldRef.VALUE := Value;

        Fld.Type::Date :
          BEGIN

            IF Value <> '' THEN BEGIN
              EVALUATE(Year, COPYSTR(Value, 1, 4));
              EVALUATE(Month, COPYSTR(Value, 6, 2));
              EVALUATE(Day, COPYSTR(Value, 9, 2));

              Date := DMY2DATE(Day, Month, Year);
            END;
            IF DoValidate THEN
              FldRef.VALIDATE(Date)
            ELSE
              FldRef.VALUE := Date;
          END;

        Fld.Type::Time :
          BEGIN
            IF EVALUATE(TimeVar, Value) THEN
              ;
            IF DoValidate THEN
              FldRef.VALIDATE(TimeVar)
            ELSE
              FldRef.VALUE := TimeVar;
          END;

        Fld.Type::DateFormula :
          BEGIN
            IF EVALUATE(DateFormula, Value) THEN
              ;
            IF DoValidate THEN
              FldRef.VALIDATE(DateFormula)
            ELSE
              FldRef.VALUE := DateFormula;
          END;

        Fld.Type::Decimal, Fld.Type::Integer :
          BEGIN
            IF EVALUATE(Decimal, Value, 9) THEN
              ;
            IF DoValidate THEN
              FldRef.VALIDATE(Decimal)
            ELSE
              FldRef.VALUE := Decimal;
          END;

        Fld.Type::Option :
          IF EVALUATE(Decimal, Value) THEN
            IF DoValidate THEN
              FldRef.VALIDATE(Decimal)
            ELSE
              FldRef.VALUE := Decimal
          ELSE BEGIN
            OptionString := ',' + LOWERCASE(FldRef.OPTIONSTRING) + ',';
            StrPosOfOption := STRPOS(OptionString, ',' + LOWERCASE(Value) + ',');
            IF StrPosOfOption > 0 THEN
              FOR i := 2 TO StrPosOfOption DO
                IF OptionString[i] = ',' THEN
                  OptionValue += 1;
            IF DoValidate THEN
              FldRef.VALIDATE(OptionValue)
            ELSE
              FldRef.VALUE := OptionValue;
          END;

        Fld.Type::Boolean :
          BEGIN
            IF EVALUATE(Boolean, Value) THEN
              ;
            IF DoValidate THEN
              FldRef.VALIDATE(Boolean)
            ELSE
              FldRef.VALUE := Boolean;
          END;

        Fld.Type::BigInteger :
          BEGIN
            IF EVALUATE(BigInteger, Value, 9) THEN
              ;
            IF DoValidate THEN
              FldRef.VALIDATE(BigInteger)
            ELSE
              FldRef.VALUE := BigInteger;
          END;

        Fld.Type::Duration :
          BEGIN
            IF EVALUATE(Duration, Value) THEN
              ;
            IF DoValidate THEN
              FldRef.VALIDATE(Duration)
            ELSE
              FldRef.VALUE := Duration;
          END;

        Fld.Type::DateTime :
          BEGIN

            IF Value <> '' THEN BEGIN

              EVALUATE(Year, COPYSTR(Value, 1, 4));
              EVALUATE(Month, COPYSTR(Value, 6, 2));
              EVALUATE(Day, COPYSTR(Value, 9, 2));

              Date := DMY2DATE(Day, Month, Year);

              EVALUATE(DateTime, FORMAT(Date) + COPYSTR(Value, 11));
            END;

            IF DoValidate THEN
              FldRef.VALUE := DateTime
            ELSE
              FldRef.VALUE := DateTime;
          END;

        Fld.Type::BLOB, Fld.Type::TableFilter, Fld.Type::Binary :
          ; // Do nothing

        ELSE
          ERROR(ctEvaluationError, FldRef.TYPE);

      END;
    END;

    LOCAL PROCEDURE RemoveSpecialCharacters@21(Text@1000 : Text) ReturnValue : Text;
    VAR
      Char@1001 : Char;
      i@1002 : Integer;
    BEGIN
      ReturnValue := Text;

      i := 1;
      WHILE i <= STRLEN(ReturnValue) DO BEGIN
        Char := Text[i];
        IF Char IN [9, 10, 13] THEN
          ReturnValue := DELSTR(ReturnValue, i) + COPYSTR(ReturnValue, i + 1)
        ELSE
          i += 1;
      END;
    END;

    PROCEDURE SetFieldTypeFilter@22(VAR Fld@1000 : Record 2000000041);
    BEGIN
      Fld.SETFILTER(Type,
        FORMAT(Fld.Type::RecordID) + '|' +
        FORMAT(Fld.Type::Text) + '|' +
        FORMAT(Fld.Type::Code) + '|' +
        FORMAT(Fld.Type::GUID) + '|' +
        FORMAT(Fld.Type::Date) + '|' +
        FORMAT(Fld.Type::Time) + '|' +
        FORMAT(Fld.Type::DateFormula) + '|' +
        FORMAT(Fld.Type::Decimal) + '|' +
        FORMAT(Fld.Type::Integer) + '|' +
        FORMAT(Fld.Type::Option) + '|' +
        FORMAT(Fld.Type::Boolean) + '|' +
        FORMAT(Fld.Type::BigInteger) + '|' +
        FORMAT(Fld.Type::Duration) + '|' +
        FORMAT(Fld.Type::DateTime) + '|' +
        FORMAT(Fld.Type::BLOB) + '|' +
        FORMAT(Fld.Type::TableFilter));
    END;

    PROCEDURE SetPrimaryKeyFilter@23(VAR Fld@1000 : Record 2000000041);
    VAR
      RecRef@1001 : RecordRef;
      FldRef@1002 : FieldRef;
      KeyRef@1003 : KeyRef;
      FieldNumberFilter@1004 : Text;
      i@1005 : Integer;
    BEGIN
      Fld.TableNo := Fld.GETRANGEMIN(TableNo);
      IF Fld.TableNo <> 0 THEN BEGIN
        RecRef.OPEN(Fld.TableNo);
        KeyRef := RecRef.KEYINDEX(1);
        FOR i := 1 TO KeyRef.FIELDCOUNT DO BEGIN
          FldRef := KeyRef.FIELDINDEX(i);
          IF i = 1 THEN
            FieldNumberFilter := FORMAT(FldRef.NUMBER)
          ELSE
            FieldNumberFilter := FieldNumberFilter + '|' + FORMAT(FldRef.NUMBER);
        END;

        Fld.SETFILTER("No.", FieldNumberFilter);

        RecRef.CLOSE;
      END;
    END;

    LOCAL PROCEDURE SetSelectedTmpFieldsRange@24(VAR Actions@1000 : Record 11102048;VAR ActionField@1001 : Record 11102049;VAR TmpActionField@1002 : TEMPORARY Record 11102049);
    VAR
      Fld@1003 : Record 2000000041;
    BEGIN
      TmpActionField.RESET;
      TmpActionField.DELETEALL;

      ActionField.SETRANGE(Type, Actions.Type);
      ActionField.SETRANGE("No.", Actions."No.");
      ActionField.SETRANGE("Sub Type", Actions."Sub Type");
      ActionField.SETRANGE("Line No.", Actions."Line No.");
      ActionField.SETRANGE(Selected, TRUE);
      IF ActionField.FINDFIRST OR (Actions."Action Type" = Actions."Action Type"::"Fill Fields") THEN
        REPEAT
          TmpActionField."Table No." := Actions."Object No.";
          TmpActionField."Field No." := ActionField."Field No.";
          TmpActionField."Field Name" := ActionField."Field Name";
          TmpActionField."Import Action" := ActionField."Import Action";
          TmpActionField.Value := ActionField.Value;
          TmpActionField."Into Field No." := ActionField."Into Field No.";
          TmpActionField.INSERT;
        UNTIL ActionField.NEXT = 0
      ELSE BEGIN
        Fld.SETRANGE(TableNo, Actions."Object No.");
        Fld.SETRANGE(Enabled, TRUE);
        SetFieldTypeFilter(Fld);
        IF Actions."Export FlowFields" THEN
          Fld.SETFILTER(Class, '<>%1', Fld.Class::FlowFilter)
        ELSE
          Fld.SETRANGE(Class, Fld.Class::Normal);

        IF Fld.FINDFIRST THEN
          REPEAT
            TmpActionField.INIT;
            TmpActionField."Table No." := Fld.TableNo;
            TmpActionField."Field No." := Fld."No.";
            TmpActionField."Field Name" := Fld.FieldName;
            TmpActionField."Type Name" := Fld."Type Name";
            TmpActionField.INSERT;
          UNTIL Fld.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SetCompanyRange@25(VAR TmpCompany@1000 : TEMPORARY Record 2000000006;SelectCompanyName@1001 : Text;FromCompanyName@1002 : Text);
    VAR
      Actions@1003 : Record 11102048;
      Company@1004 : Record 2000000006;
    BEGIN
      WITH Company DO BEGIN
        CASE SelectCompanyName OF

          Actions.AllCompaniesText :
            ;

          '', Actions.ActiveCompanyText :
            SETRANGE(Name, COMPANYNAME);

          Actions.SameCompanyText :
            SETRANGE(Name, FromCompanyName);

          ELSE
            SETRANGE(Name, SelectCompanyName);
        END;

        TmpCompany.RESET;
        TmpCompany.DELETEALL;
        IF FINDSET THEN
          REPEAT
            TmpCompany := Company;
            TmpCompany.INSERT;
          UNTIL NEXT = 0;

      END;
    END;

    LOCAL PROCEDURE SetDefinitionCompanyRange@26(VAR TmpCompany@1000 : TEMPORARY Record 2000000006;SelectCompanyName@1001 : Text);
    BEGIN
      TmpCompany.RESET;
      TmpCompany.DELETEALL;
      TmpCompany.Name := SelectCompanyName;
      TmpCompany.INSERT;
    END;

    LOCAL PROCEDURE BooleanValue@28(Condition@1000 : Boolean) : Text;
    BEGIN
      IF Condition THEN
        EXIT('1')
      ELSE
        EXIT('0');
    END;

    PROCEDURE SetSkipConfirm@29(NewValue@1000 : Boolean);
    BEGIN
      SkipConfirm := NewValue;
    END;

    LOCAL PROCEDURE CheckIndirectPermissions@30(VAR Actions@1000 : Record 11102048);
    VAR
      Setup@1001 : Record 11102035;
      LicensePermission@1002 : Record 2000000043;
      CheckDeleteTableNo@1003 : Integer;
      CheckModifyTableNo@1004 : Integer;
      CheckReadTableNo@1005 : Integer;
    BEGIN
      Setup.CustomGet;
      IF Setup."Use Ind. Perm. in Actions" THEN
        EXIT;

      WITH Actions DO
        IF FINDSET THEN
          REPEAT

            CheckReadTableNo := 0;
            CheckModifyTableNo := 0;
            CheckDeleteTableNo := 0;

            CASE "Action Type" OF
              "Action Type"::"Copy Data" :
                BEGIN
                  CheckReadTableNo := "Object No.";
                  CheckModifyTableNo := "Into Table No.";
                END;

              "Action Type"::"Delete Data" :
                CheckDeleteTableNo := "Object No.";

              "Action Type"::"Fill Fields", "Action Type"::"Rename Data",
              "Action Type"::"Renumber Object", "Action Type"::"Renumber Field" :
                CheckModifyTableNo := "Object No.";
            END;

            IF CheckReadTableNo <> 0 THEN
              IF LicensePermission.GET(LicensePermission."Object Type"::TableData, CheckReadTableNo) THEN
                IF LicensePermission."Read Permission" = LicensePermission."Read Permission"::Indirect THEN
                  IndirectPermissionsError(CheckReadTableNo);

            IF CheckModifyTableNo <> 0 THEN
              IF LicensePermission.GET(LicensePermission."Object Type"::TableData, CheckModifyTableNo) THEN
                IF LicensePermission."Modify Permission" = LicensePermission."Modify Permission"::Indirect THEN
                  IndirectPermissionsError(CheckModifyTableNo);

            IF CheckDeleteTableNo <> 0 THEN
              IF LicensePermission.GET(LicensePermission."Object Type"::TableData, CheckDeleteTableNo) THEN
                IF LicensePermission."Delete Permission" = LicensePermission."Delete Permission"::Indirect THEN
                  IndirectPermissionsError(CheckDeleteTableNo);

          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE IndirectPermissionsError@31(TableNo@1000 : Integer);
    VAR
      Object@1001 : Record 2000000001;
      ctPermissionError@1002 : TextConst 'DEU=%1 cannot be modified in this form.;ENU=%1 cannot be modified in this form.;ESP=%1 cannot be modified in this form.;FRA=%1 cannot be modified in this form.;NLD=%1 kan niet worden gewijzigd in dit scherm.;DEA=%1 cannot be modified in this form.';
    BEGIN
      IF Object.GET(Object.Type::Table, '', TableNo) THEN
        ;
      Object.CALCFIELDS(Caption);
      ERROR(ctPermissionError, Object.Caption);
    END;

    PROCEDURE ExportSplitFiles@47(FileName@1000 : Text;NewMaxFabSize@1001 : Integer;VAR Actions@1002 : Record 11102048;VAR ActionField@1003 : Record 11102049;VAR Progressbar@1004 : Codeunit 11102044);
    VAR
      OutStr@1005 : OutStream;
    BEGIN
      MaxFabSize := NewMaxFabSize;
      MainFileName := FileName;

      oFile2.CREATE(FileName);
      oFile2.CREATEOUTSTREAM(OutStr);

      FillExportOutStream(Actions, ActionField, OutStr, Progressbar);
    END;

    LOCAL PROCEDURE OpenNextFile@42(VAR OutStr@1000 : OutStream;VAR TotalLength@1001 : Integer);
    VAR
      ImExportMgt@1002 : Codeunit 11102043;
      oMainFile@1003 : File;
      OutStr2@1004 : OutStream;
      FileName@1005 : Text;
      NextFileName2@1006 : Text;
    BEGIN
      FileName := oFile2.NAME;
      oFile2.CLOSE;

      NextFileName2 := NextFileName(FileName);

      IF FileName = MainFileName THEN BEGIN
        RENAME(FileName, NextFileName2);

        oMainFile.TEXTMODE(TRUE);
        oMainFile.WRITEMODE(TRUE);
        oMainFile.CREATE(MainFileName);
        oMainFile.CREATEOUTSTREAM(OutStr2);
        ImExportMgt.WriteObjectManagerVersion(OutStr2, 'SPLITTED');
        oMainFile.CLOSE;

        AddFileName(MainFileName, NextFileName2);
        NextFileName2 := NextFileName(NextFileName2);
        AddFileName(MainFileName, NextFileName2);

      END ELSE
        AddFileName(MainFileName, NextFileName2);

      oFile2.CREATE(NextFileName2);
      oFile2.CREATEOUTSTREAM(OutStr);

      TotalLength := 0;
    END;

    LOCAL PROCEDURE NextFileName@41(FileName@1000 : Text) ExitValue : Text;
    VAR
      Extension@1001 : Text;
      DotPos@1002 : Integer;
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO STRLEN(FileName) DO
        IF FileName[i] = '.' THEN
          DotPos := i;

      IF i = 0 THEN
        ExitValue := FileName + '.1'
      ELSE BEGIN
        Extension := COPYSTR(FileName, DotPos + 1);
        FileName := COPYSTR(FileName, 1, DotPos - 1);
        IF INCSTR(Extension) = '' THEN
          Extension := Extension + '1'
        ELSE
          Extension := INCSTR(Extension);

        ExitValue := FileName + '.' + Extension;
      END;

      IF EXISTS(ExitValue) THEN
        ERASE(ExitValue);
    END;

    LOCAL PROCEDURE AddFileName@27(FileName@1000 : Text;String@1001 : Text);
    VAR
      oFile@1002 : File;
      FileName2@1003 : Text;
      i@1004 : Integer;
    BEGIN
      FileName2 := String;
      FOR i := 1 TO STRLEN(String) DO
        IF String[i] = '\' THEN
          FileName2 := COPYSTR(String, i + 1);

      oFile.TEXTMODE(TRUE);
      oFile.WRITEMODE(TRUE);
      oFile.OPEN(FileName);
      oFile.SEEK(oFile.LEN);

      oFile.WRITE(FileName2);
      oFile.CLOSE;
    END;

    PROCEDURE ImportSplitFiles@44(FileName@1000 : Text[1024];UseWorkSheet@1001 : Boolean);
    VAR
      Progressbar@1002 : Codeunit 11102044;
      oMainFile@1003 : File;
      oSubFile@1004 : File;
      InStr@1005 : InStream;
      FileName2@1006 : Text[1024];
      FirstFileName@1007 : Text[1024];
      Line@1008 : Text[1024];
      Path@1009 : Text[1024];
      TotalLength@1010 : BigInteger;
      i@1011 : Integer;
      ctImportingFile@1012 : TextConst 'DEU=Importing file...;ENU=Importing file...;ESP=Importing file...;FRA=Importing file...;NLD=Bestand importeren...;DEA=Importing file...';
      ctThisIsNotASplitFile@1013 : TextConst 'DEU=This is not a split file.;ENU=This is not a split file.;ESP=This is not a split file.;FRA=This is not a split file.;NLD=Dit is niet een gesplitst bestand.;DEA=This is not a split file.';
    BEGIN
      MainFileName := FileName;

      FOR i := 1 TO STRLEN(MainFileName) DO
        IF MainFileName[i] = '\' THEN
          Path := COPYSTR(MainFileName, 1, i);

      oMainFile.TEXTMODE(TRUE);
      oMainFile.OPEN(MainFileName);
      oMainFile.READ(Line);
      oMainFile.READ(Line);

      IF DELCHR(Line, '<>') <> 'SPLITTED' THEN
        ERROR(ctThisIsNotASplitFile);

      WHILE oMainFile.READ(FileName2) > 0 DO BEGIN
        IF FirstFileName = '' THEN
          FirstFileName := Path + FileName2;
        oSubFile.OPEN(Path + FileName2);
        TotalLength += oSubFile.LEN;
        oSubFile.CLOSE;
      END;
      oMainFile.CLOSE;

      oFile2.OPEN(FirstFileName);
      oFile2.CREATEINSTREAM(InStr);

      Progressbar.NoOfBars := 2;
      Progressbar.Open(ctImportingFile, 1);
      ImportInstream(InStr, UseWorkSheet, Progressbar, TotalLength);
      Progressbar.Close;
      oFile2.CLOSE;
    END;

    LOCAL PROCEDURE NextStream@43(VAR StreamCounter@1000 : Integer;VAR InStr@1001 : InStream) : Boolean;
    VAR
      oMainFile@1002 : File;
      FileName@1003 : Text[1024];
      Line@1004 : Text[1024];
      Path@1005 : Text[1024];
      i@1006 : Integer;
    BEGIN
      StreamCounter += 1;
      IF StreamCounter = 1 THEN
        EXIT(TRUE);

      IF MainFileName = '' THEN
        EXIT;

      oMainFile.TEXTMODE(TRUE);
      oMainFile.OPEN(MainFileName);
      oMainFile.READ(Line);
      oMainFile.READ(Line);
      FOR i := 1 TO StreamCounter DO
        IF oMainFile.READ(FileName) = 0 THEN
          EXIT;

      oMainFile.CLOSE;

      FOR i := 1 TO STRLEN(MainFileName) DO
        IF MainFileName[i] = '\' THEN
          Path := COPYSTR(MainFileName, 1, i);

      oFile2.CLOSE;
      oFile2.OPEN(Path + FileName);
      oFile2.CREATEINSTREAM(InStr);
      EXIT(TRUE);
    END;

    PROCEDURE SetNotEmptyFilter@45(VAR FldRef@1000 : FieldRef;Fld@1001 : Record 2000000041);
    VAR
      DateFormula@1002 : DateFormula;
      Guid@1003 : GUID;
    BEGIN
      CASE Fld.Type OF

        Fld.Type::Text,
        Fld.Type::Code :
          FldRef.SETFILTER('<>%1', '');

        Fld.Type::DateFormula :
          BEGIN
            DateFormula := DateFormula;
            FldRef.SETFILTER('<>%1', DateFormula);
          END;

        Fld.Type::GUID :
          BEGIN
            Guid := Guid;
            FldRef.SETFILTER('<>%1', Guid);
          END;

        Fld.Type::Date :
          FldRef.SETFILTER('<>0D');

        Fld.Type::Time :
          FldRef.SETFILTER('<>0T');

        Fld.Type::Decimal,
        Fld.Type::Boolean,
        Fld.Type::Integer,
        Fld.Type::Option,
        Fld.Type::BigInteger,
        Fld.Type::Duration :
          FldRef.SETFILTER('<>0');

        Fld.Type::DateTime :
          FldRef.SETFILTER('<>0DT');
      END;
    END;

    LOCAL PROCEDURE GetFields@32(VAR Actions@1000 : Record 11102048;VAR ActionField@1001 : Record 11102049);
    VAR
      Fld@1002 : Record 2000000041;
    BEGIN
      WITH Actions DO BEGIN
        Fld.SETRANGE(TableNo, "Object No.");
        SetFieldTypeFilter(Fld);
        Fld.SETRANGE(Class, Fld.Class::Normal);

        IF Fld.FINDSET THEN
          REPEAT
            ActionField.INIT;
            ActionField.Type := Type;
            ActionField."No." := "No.";
            ActionField."Sub Type" := "Sub Type";
            ActionField."Line No." := "Line No.";
            ActionField."Table No." := "Object No.";
            ActionField."Field No." := Fld."No.";
            ActionField."Field Name" := Fld.FieldName;
            ActionField."Type Name" := Fld."Type Name";
            ActionField."Into Field No." := Fld."No.";
            ActionField.INSERT;
          UNTIL Fld.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

