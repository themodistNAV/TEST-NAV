OBJECT Table 9062707 Quest. Template Logic Criteria
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckOpen();
             END;

    OnModify=BEGIN
               CheckOpen();
             END;

    OnDelete=BEGIN
               CheckOpen();
             END;

    OnRename=BEGIN
               CheckOpen();
             END;

    CaptionML=[ENU=Quest. Template Logic Criteria;
               ENG=Quest. Template Logic Criteria];
    LookupPageID=Page9063068;
    DrillDownPageID=Page9063068;
  }
  FIELDS
  {
    { 1   ;   ;Questionnaire Template Code;Code20 ;TableRelation="Questionnaire Template".Code;
                                                   CaptionML=[ENU=Questionnaire Template Code;
                                                              ENG=Questionnaire Template Code] }
    { 3   ;   ;Source Entry No.    ;Integer       ;TableRelation=IF (Line Type=FILTER(Before Question|After Question)) "Questionnaire Template Line"."Line No." WHERE (Questionnaire Template Code=FIELD(Questionnaire Template Code))
                                                                 ELSE IF (Line Type=CONST(Questionnaire Action)) "Quest. Template Action Header".Id WHERE (Questionnaire Template Code=FIELD(Questionnaire Template Code));
                                                   OnValidate=VAR
                                                                QuestLine@1000000000 : Record 9062703;
                                                              BEGIN
                                                                IF ("Source Entry No." <> 0) THEN BEGIN
                                                                  IF ("Line Type" IN ["Line Type"::"Before Question", "Line Type"::"After Question"]) THEN BEGIN
                                                                    QuestLine.GET("Questionnaire Template Code", "Source Entry No.");
                                                                    "Questionnaire Line Sequence" := QuestLine.Sequence;

                                                                    CASE ("Line Type") OF
                                                                      "Line Type"::"After Question":
                                                                        SetValQuestLine(QuestLine);
                                                                      "Line Type"::"Before Question":
                                                                        SetAnswerQuestLine(QuestLine);
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Source Entry No.;
                                                              ENG=Source Entry No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
    { 5   ;   ;Line Type           ;Option        ;OnValidate=VAR
                                                                QuestLine@1000000000 : Record 9062703;
                                                              BEGIN
                                                                IF ("Line Type" <> xRec."Line Type") THEN
                                                                  VALIDATE("Related Line No.", 0);
                                                              END;

                                                   CaptionML=[ENU=Line Type;
                                                              ENG=Line Type];
                                                   OptionCaptionML=[ENU=Before Question,After Question,Questionnaire Action;
                                                                    ENG=Before Question,After Question,Questionnaire Action];
                                                   OptionString=Before Question,After Question,Questionnaire Action }
    { 6   ;   ;Action Before Question;Option      ;CaptionML=[ENU=Action Before Question;
                                                              ENG=Action Before Question];
                                                   OptionCaptionML=[ENU=Ask Question,Set Answer;
                                                                    ENG=Ask Question,Set Answer];
                                                   OptionString=Ask Question,Set Answer }
    { 7   ;   ;Action After Question;Option       ;CaptionML=[ENU=Action After Question;
                                                              ENG=Action After Question];
                                                   OptionCaptionML=[ENU=Go to Question,Set Answer,Restart Block;
                                                                    ENG=Go to Question,Set Answer,Restart Block];
                                                   OptionString=Go to Question,Set Answer,Restart Block }
    { 9   ;   ;Questionnaire Line Sequence;Integer;CaptionML=[ENU=Questionnaire Line Sequence;
                                                              ENG=Questionnaire Line Sequence] }
    { 10  ;   ;Reference Type      ;Option        ;CaptionML=[ENU=Reference Type;
                                                              ENG=Reference Type];
                                                   OptionCaptionML=[ENU=Answer to Previous Question;
                                                                    ENG=Answer to Previous Question];
                                                   OptionString=Answer to Previous Question }
    { 11  ;   ;Criteria            ;Option        ;CaptionML=[ENU=Criteria;
                                                              ENG=Criteria];
                                                   OptionCaptionML=[ENU="=,<,<=,>,>=,<>,Contains,Doesn't Contain,Any Answer Given,No Answer Given,Filter,Always";
                                                                    ENG="=,<,<=,>,>=,<>,Contains,Doesn't Contain,Any Answer Given,No Answer Given,Filter,Always"];
                                                   OptionString==,<,<=,>,>=,<>,Contains,Doesn't Contain,Any Answer Given,No Answer Given,Filter,Always }
    { 12  ;   ;Compare to Value    ;Text250       ;OnValidate=VAR
                                                                ValueProcessing@1000000000 : Codeunit 9062475;
                                                                HasValue@1000000001 : Boolean;
                                                              BEGIN
                                                                ValueProcessing.SetParameters("Value Type", 0, 0);
                                                                ValueCalculation := ValueCalculation::Const;
                                                                IF ("Option String" <> '') THEN
                                                                  ValueProcessing.SetOptionString("Option String");
                                                                ValueProcessing.ProcessValue(ValueCalculation, "Compare to Value", HasValue, "Date Value", "Time Value", "DateTime Value", "DateFormula Value",
                                                                  "Decimal Value", "Boolean Value", "Integer Value", "BigInteger Value", "Duration Value", "GUID Value");
                                                              END;

                                                   CaptionML=[ENU=Compare to Value;
                                                              ENG=Compare to Value] }
    { 13  ;   ;Date Value          ;Date          ;CaptionML=[ENU=Date Value;
                                                              ENG=Date Value] }
    { 14  ;   ;Time Value          ;Time          ;CaptionML=[ENU=Time Value;
                                                              ENG=Time Value] }
    { 15  ;   ;DateTime Value      ;DateTime      ;CaptionML=[ENU=DateTime Value;
                                                              ENG=DateTime Value] }
    { 16  ;   ;DateFormula Value   ;DateFormula   ;CaptionML=[ENU=DateFormula Value;
                                                              ENG=DateFormula Value] }
    { 17  ;   ;Decimal Value       ;Decimal       ;CaptionML=[ENU=Decimal Value;
                                                              ENG=Decimal Value] }
    { 18  ;   ;Boolean Value       ;Boolean       ;CaptionML=[ENU=Boolean Value;
                                                              ENG=Boolean Value] }
    { 19  ;   ;Integer Value       ;Integer       ;CaptionML=[ENU=Integer Value;
                                                              ENG=Integer Value] }
    { 20  ;   ;BigInteger Value    ;BigInteger    ;CaptionML=[ENU=BigInteger Value;
                                                              ENG=BigInteger Value] }
    { 21  ;   ;Duration Value      ;Duration      ;CaptionML=[ENU=Duration Value;
                                                              ENG=Duration Value] }
    { 22  ;   ;GUID Value          ;GUID          ;CaptionML=[ENU=GUID Value;
                                                              ENG=GUID Value] }
    { 24  ;   ;Value Type          ;Option        ;InitValue=Text;
                                                   CaptionML=[ENU=Value Type;
                                                              ENG=Value Type];
                                                   OptionCaptionML=[ENU=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime;
                                                                    ENG=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime];
                                                   OptionString=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime }
    { 25  ;   ;Value Source Table Id;Integer      ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   CaptionML=[ENU=Value Source Table Id;
                                                              ENG=Value Source Table Id] }
    { 26  ;   ;Value Source Field Id;Integer      ;TableRelation=Field.No. WHERE (TableNo=FIELD(Value Source Table Id));
                                                   OnValidate=VAR
                                                                ValueProcessing@1000000000 : Codeunit 9062475;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Value Source Field Id;
                                                              ENG=Value Source Field Id] }
    { 27  ;   ;Option String       ;Text250       ;CaptionML=[ENU=Option String;
                                                              ENG=Option String] }
    { 28  ;   ;Set Answer          ;Text250       ;OnValidate=VAR
                                                                ValueProcessing@1000000001 : Codeunit 9062475;
                                                                AnswerFieldName@1000000002 : Text;
                                                                HasAnswerValue@1000000000 : Boolean;
                                                              BEGIN
                                                                CASE ("Set Answer Source Type") OF
                                                                  "Set Answer Source Type"::Const:
                                                                    BEGIN
                                                                      ValueProcessing.SetParameters("Set Answer Value Type", 0, 0);
                                                                      ValueCalculation := ValueCalculation::Const;
                                                                      //IF ("Set Answer Option String" <> '') THEN
                                                                      //  ValueProcessing.SetOptionString("Set Answer Option String");
                                                                      ValueProcessing.ProcessValue(ValueCalculation, "Set Answer", HasAnswerValue, "Set Answer Date Value", "Set Answer Time Value",
                                                                        "Set Answer DateTime Value", "Set Answer DateFormula Value", "Set Answer Decimal Value", "Set Answer Boolean Value",
                                                                        "Set Answer Integer Value", "Set Answer BigInteger Value", "Set Answer Duration Value", "Set Answer GUID Value");
                                                                    END;
                                                                  "Set Answer Source Type"::Record:
                                                                    BEGIN
                                                                      AnswerFieldName := "Set Answer";
                                                                      IF (ValidateAnswerFieldName(AnswerFieldName)) THEN
                                                                        "Set Answer" := AnswerFieldName;
                                                                    END;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              ObjectFieldToolkit@1000000000 : Codeunit 9062343;
                                                            BEGIN
                                                              IF ("Set Answer Source Type" = "Set Answer Source Type"::Record) THEN BEGIN
                                                                LookupAnswerFieldName(TRUE);
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Set Answer;
                                                              ENG=Set Answer] }
    { 29  ;   ;Set Answer Date Value;Date         ;CaptionML=[ENU=Set Answer Date Value;
                                                              ENG=Set Answer Date Value] }
    { 30  ;   ;Set Answer Time Value;Time         ;CaptionML=[ENU=Set Answer Time Value;
                                                              ENG=Set Answer Time Value] }
    { 31  ;   ;Set Answer DateTime Value;DateTime ;CaptionML=[ENU=Set Answer DateTime Value;
                                                              ENG=Set Answer DateTime Value] }
    { 32  ;   ;Set Answer DateFormula Value;DateFormula;
                                                   CaptionML=[ENU=Set Answer DateFormula Value;
                                                              ENG=Set Answer DateFormula Value] }
    { 33  ;   ;Set Answer Decimal Value;Decimal   ;CaptionML=[ENU=Set Answer Decimal Value;
                                                              ENG=Set Answer Decimal Value] }
    { 34  ;   ;Set Answer Boolean Value;Boolean   ;CaptionML=[ENU=Set Answer Boolean Value;
                                                              ENG=Set Answer Boolean Value] }
    { 35  ;   ;Set Answer Integer Value;Integer   ;CaptionML=[ENU=Set Answer Integer Value;
                                                              ENG=Set Answer Integer Value] }
    { 36  ;   ;Set Answer BigInteger Value;BigInteger;
                                                   CaptionML=[ENU=Set Answer BigInteger Value;
                                                              ENG=Set Answer BigInteger Value] }
    { 37  ;   ;Set Answer Duration Value;Duration ;CaptionML=[ENU=Set Answer Duration Value;
                                                              ENG=Set Answer Duration Value] }
    { 38  ;   ;Set Answer GUID Value;GUID         ;CaptionML=[ENU=Set Answer GUID Value;
                                                              ENG=Set Answer GUID Value] }
    { 40  ;   ;Set Answer Value Type;Option       ;InitValue=Text;
                                                   CaptionML=[ENU=Set Answer Value Type;
                                                              ENG=Set Answer Value Type];
                                                   OptionCaptionML=[ENU=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime;
                                                                    ENG=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime];
                                                   OptionString=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime }
    { 41  ;   ;Set Answer Field Id ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Value Source Table Id));
                                                   CaptionML=[ENU=Set Answer Field Id;
                                                              ENG=Set Answer Field Id] }
    { 42  ;   ;Set Answer Source Type;Option      ;CaptionML=[ENU=Set Answer Source Type;
                                                              ENG=Set Answer Source Type];
                                                   OptionCaptionML=[ENU=Const,Record;
                                                                    ENG=Const,Record];
                                                   OptionString=Const,Record }
    { 100 ;   ;Related Line No.    ;Integer       ;TableRelation="Questionnaire Template Line"."Line No." WHERE (Questionnaire Template Code=FIELD(Questionnaire Template Code));
                                                   OnValidate=VAR
                                                                QuestLine@1000000000 : Record 9062703;
                                                              BEGIN
                                                                IF ("Related Line No." <> 0) THEN BEGIN
                                                                  QuestLine.GET("Questionnaire Template Code","Related Line No.");
                                                                  QuestLine.TESTFIELD("Line Type", QuestLine."Line Type"::Question);

                                                                  CASE ("Line Type") OF
                                                                    "Line Type"::"Before Question":
                                                                      IF (QuestLine.Sequence >= "Questionnaire Line Sequence") THEN
                                                                        ERROR(errPrevLineRequired);
                                                                    "Line Type"::"After Question":
                                                                      IF (QuestLine.Sequence <= "Questionnaire Line Sequence") THEN
                                                                        ERROR(errNextLineRequired);
                                                                  END;

                                                                  "Related Line Description" := QuestLine."Question Description";

                                                                  IF ("Line Type" IN ["Line Type"::"Before Question", "Line Type"::"Questionnaire Action"]) THEN
                                                                    SetValQuestLine(QuestLine)
                                                                  ELSE
                                                                    SetAnswerQuestLine(QuestLine);
                                                                END ELSE BEGIN
                                                                  "Related Line Description" := '';
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              QuestLine@1000000000 : Record 9062703;
                                                            BEGIN
                                                              LookupRelatedLine();
                                                            END;

                                                   CaptionML=[ENU=Related Line No.;
                                                              ENG=Related Line No.] }
    { 101 ;   ;Related Line Description;Text250   ;OnValidate=VAR
                                                                QuestLine@1000000000 : Record 9062703;
                                                              BEGIN
                                                                FilterRelatedLine(QuestLine);
                                                                IF (FindQuestLine(QuestLine, "Related Line Description", TRUE)) THEN
                                                                  VALIDATE("Related Line No.", QuestLine."Line No.");
                                                              END;

                                                   OnLookup=VAR
                                                              QuestLine@1000000000 : Record 9062703;
                                                            BEGIN
                                                              LookupRelatedLine();
                                                            END;

                                                   CaptionML=[ENU=Related Line Description;
                                                              ENG=Related Line Description] }
  }
  KEYS
  {
    {    ;Questionnaire Template Code,Source Entry No.,Line No.;
                                                   Clustered=Yes }
    {    ;Questionnaire Template Code,Line Type,Related Line No. }
    {    ;Questionnaire Template Code,Related Line No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      errQuestLineNotFound@1000000000 : TextConst 'ENU=No Lines matching the filter "%1*" were found for the Questionnaire %2;ENG=No Lines matching the filter "%1*" were found for the Questionnaire %2';
      ValueCalculation@1000000001 : 'Const,Range,First Record,Last Record,Random Record,Record Variable,No.Series,Smart Value';
      errPrevLineRequired@1000000002 : TextConst 'ENU=Selected question must be asked before current one;ENG=Selected question must be asked before current one';
      errNextLineRequired@1000000003 : TextConst 'ENU=Selected question must be asked after current one;ENG=Selected question must be asked after current one';

    LOCAL PROCEDURE LookupRelatedLine@1000000011();
    VAR
      QuestLine@1000000000 : Record 9062703;
    BEGIN
      FilterRelatedLine(QuestLine);
      QuestLine.SETRANGE("Line No.", "Related Line No.");
      IF (QuestLine.FINDFIRST()) THEN ;
      QuestLine.SETRANGE("Line No.");
      IF (LookupQuestLine(QuestLine)) THEN
        VALIDATE("Related Line No.", QuestLine."Line No.");
    END;

    LOCAL PROCEDURE FilterRelatedLine@1000000007(VAR QuestLine@1000000000 : Record 9062703);
    BEGIN
      QuestLine.RESET();
      QuestLine.SETCURRENTKEY("Questionnaire Template Code", Sequence);
      QuestLine.SETRANGE("Questionnaire Template Code", "Questionnaire Template Code");
      CASE ("Line Type") OF
        "Line Type"::"Before Question":
          QuestLine.SETFILTER(Sequence, '<%1', "Questionnaire Line Sequence");
        "Line Type"::"After Question":
          QuestLine.SETFILTER(Sequence, '>%1', "Questionnaire Line Sequence");
      END;
    END;

    LOCAL PROCEDURE LookupQuestLine@1000000000(VAR QuestLine@1000000000 : Record 9062703) : Boolean;
    VAR
      QuestionnaireLineList@1000000002 : Page 9063019;
    BEGIN
      QuestionnaireLineList.SETRECORD(QuestLine);
      QuestionnaireLineList.SETTABLEVIEW(QuestLine);
      QuestionnaireLineList.LOOKUPMODE(TRUE);
      IF QuestionnaireLineList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        QuestionnaireLineList.GETRECORD(QuestLine);
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE FindQuestLine@1000000015(VAR QuestLine@1000000001 : Record 9062703;LineDescription@1000000000 : Text;UseLookup@1000000002 : Boolean) : Boolean;
    VAR
      NoOfEntries@1000000003 : Integer;
    BEGIN
      QuestLine.SETRANGE("Question Description", LineDescription);
      IF (QuestLine.FINDFIRST()) THEN
        EXIT(TRUE);

      QuestLine.SETFILTER("Question Description", LineDescription + '*');
      NoOfEntries := QuestLine.COUNT;
      IF (NoOfEntries = 1) THEN BEGIN
        QuestLine.FINDFIRST();
        EXIT(TRUE);
      END;

      IF (NoOfEntries > 0) AND (UseLookup) AND (GUIALLOWED) THEN BEGIN
        QuestLine.FINDFIRST();
        EXIT(LookupQuestLine(QuestLine));
      END;

      EXIT(FALSE);
    END;

    PROCEDURE SetValQuestLine@1000000001(VAR QuestLine@1000000000 : Record 9062703);
    BEGIN
      VALIDATE("Value Type", QuestLine."Answer Type");
      VALIDATE("Option String", QuestLine."Answer Option String");
      VALIDATE("Value Source Table Id", QuestLine."Answer Table Id");
      VALIDATE("Value Source Field Id", QuestLine."Answer Field Id");
    END;

    PROCEDURE SetAnswerQuestLine@1000000004(VAR QuestLine@1000000000 : Record 9062703);
    BEGIN
      VALIDATE("Set Answer Value Type", QuestLine."Answer Type");
      //VALIDATE("Set Answer Option String", QuestLine."Answer Option String");
      //VALIDATE("Set Answer Table Id", QuestLine."Answer Table Id");
      //VALIDATE("Set Answer Field Id", QuestLine."Answer Field Id");
    END;

    LOCAL PROCEDURE CheckOpen@1000000002();
    VAR
      QuestTemplHeader@1000000000 : Record 9062702;
    BEGIN
      IF (QuestTemplHeader.GET("Questionnaire Template Code")) THEN
        QuestTemplHeader.TESTFIELD(Status, QuestTemplHeader.Status::Open);
    END;

    PROCEDURE ValidateAnswerFieldName@1000000014(VAR FieldName@1000000000 : Text) : Boolean;
    VAR
      ValueProcessing@1000000004 : Codeunit 9062475;
      Field@1000000001 : Record 2000000041;
      FieldId@1000000002 : Integer;
      NameIsNumber@1000000003 : Boolean;
    BEGIN
      IF ("Value Source Table Id" <> 0) THEN BEGIN
        Field.RESET();
        Field.SETRANGE(TableNo, "Value Source Table Id");
        Field.SETRANGE(FieldName, FieldName);
        IF (NOT(Field.FINDFIRST())) THEN BEGIN
          Field.SETFILTER(FieldName, '@' + FieldName + '*');
          IF (NOT(Field.FINDFIRST())) THEN BEGIN
            NameIsNumber := EVALUATE(FieldId, FieldName);
            IF (NameIsNumber) THEN BEGIN
              Field.SETRANGE(FieldName);
              Field.SETRANGE("No.", FieldId);
            END;
            Field.FINDFIRST();
          END;
          Field.FINDFIRST();
        END;
        FieldName := Field.FieldName;
        VALIDATE("Set Answer Field Id", Field."No.");
        EXIT(TRUE);
      END ELSE BEGIN
        FieldName := '';
        EXIT(FALSE);
      END;
    END;

    PROCEDURE LookupAnswerFieldName@1000000003(Editable@1000000003 : Boolean) : Boolean;
    VAR
      ValueProcessing@1000000002 : Codeunit 9062475;
      Field@1000000000 : Record 2000000041;
      FieldList@1000000001 : Page 7702;
    BEGIN
      Field.RESET();
      Field.SETRANGE(TableNo, "Value Source Table Id");
      IF ("Set Answer Field Id" <> 0) THEN
        Field.SETRANGE("No.", "Set Answer Field Id");
      IF (Field.FINDFIRST()) THEN ;
      Field.SETRANGE("No.");

      FieldList.SETTABLEVIEW(Field);
      FieldList.SETRECORD(Field);
      FieldList.LOOKUPMODE := TRUE;
      IF (FieldList.RUNMODAL() = ACTION::LookupOK) THEN BEGIN
        FieldList.GETRECORD(Field);
        IF (Field."No." <> "Value Source Field Id") AND (Editable) THEN BEGIN
          VALIDATE("Set Answer Field Id", Field."No.");
          "Set Answer" := Field.FieldName;
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    BEGIN
    {
      //DOC NA2015.7  AZ 05/06/2015 - Created
      //DOC NA2015.9  AZ 04/08/2015 - Filter criteria added
      //DOC NA2015.9  AZ 18/08/2015 - Question groups and loops
      //DOC NA2016.15 JH 06/05/2016 - CfMD amendments
    }
    END.
  }
}

