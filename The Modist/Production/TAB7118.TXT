OBJECT Table 7118 Analysis Column
{
  OBJECT-PROPERTIES
  {
    Date=22/12/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.44365,NAVGB9.00.00.44365;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Analysis Column;
               ENG=Analysis Column];
    LookupPageID=Page7114;
    DrillDownPageID=Page7114;
  }
  FIELDS
  {
    { 1   ;   ;Analysis Area       ;Option        ;CaptionML=[ENU=Analysis Area;
                                                              ENG=Analysis Area];
                                                   OptionCaptionML=[ENU=Sales,Purchase,Inventory;
                                                                    ENG=Sales,Purchase,Inventory];
                                                   OptionString=Sales,Purchase,Inventory }
    { 2   ;   ;Analysis Column Template;Code10    ;TableRelation="Analysis Column Template".Name WHERE (Analysis Area=FIELD(Analysis Area));
                                                   CaptionML=[ENU=Analysis Column Template;
                                                              ENG=Analysis Column Template] }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
    { 4   ;   ;Column No.          ;Code10        ;CaptionML=[ENU=Column No.;
                                                              ENG=Column No.] }
    { 5   ;   ;Column Header       ;Text50        ;CaptionML=[ENU=Column Header;
                                                              ENG=Column Header] }
    { 6   ;   ;Column Type         ;Option        ;InitValue=Net Change;
                                                   CaptionML=[ENU=Column Type;
                                                              ENG=Column Type];
                                                   OptionCaptionML=[ENU=Formula,Net Change,Balance at Date,Beginning Balance,Year to Date,Rest of Fiscal Year,Entire Fiscal Year;
                                                                    ENG=Formula,Net Change,Balance at Date,Beginning Balance,Year to Date,Rest of Fiscal Year,Entire Fiscal Year];
                                                   OptionString=Formula,Net Change,Balance at Date,Beginning Balance,Year to Date,Rest of Fiscal Year,Entire Fiscal Year }
    { 7   ;   ;Ledger Entry Type   ;Option        ;CaptionML=[ENU=Ledger Entry Type;
                                                              ENG=Ledger Entry Type];
                                                   OptionCaptionML=[ENU=Item Entries,Item Budget Entries;
                                                                    ENG=Item Entries,Item Budget Entries];
                                                   OptionString=Item Entries,Item Budget Entries }
    { 8   ;   ;Formula             ;Code80        ;OnValidate=BEGIN
                                                                ItemSchedLine.CheckFormula(Formula);
                                                              END;

                                                   CaptionML=[ENU=Formula;
                                                              ENG=Formula] }
    { 9   ;   ;Comparison Date Formula;DateFormula;CaptionML=[ENU=Comparison Date Formula;
                                                              ENG=Comparison Date Formula] }
    { 10  ;   ;Show Opposite Sign  ;Boolean       ;CaptionML=[ENU=Show Opposite Sign;
                                                              ENG=Show Opposite Sign] }
    { 11  ;   ;Show                ;Option        ;InitValue=Always;
                                                   CaptionML=[ENU=Show;
                                                              ENG=Show];
                                                   OptionCaptionML=[ENU=Always,Never,When Positive,When Negative;
                                                                    ENG=Always,Never,When Positive,When Negative];
                                                   OptionString=Always,Never,When Positive,When Negative;
                                                   NotBlank=Yes }
    { 12  ;   ;Rounding Factor     ;Option        ;CaptionML=[ENU=Rounding Factor;
                                                              ENG=Rounding Factor];
                                                   OptionCaptionML=[ENU=None,1,1000,1000000;
                                                                    ENG=None,1,1000,1000000];
                                                   OptionString=None,1,1000,1000000 }
    { 14  ;   ;Analysis Type Code  ;Code10        ;TableRelation="Analysis Type";
                                                   OnValidate=VAR
                                                                ItemAnalysisType@1000 : Record 7113;
                                                              BEGIN
                                                                IF "Analysis Type Code" <> '' THEN BEGIN
                                                                  ItemAnalysisType.GET("Analysis Type Code");
                                                                  IF "Column Header" = '' THEN
                                                                    "Column Header" := ItemAnalysisType.Name;
                                                                  "Item Ledger Entry Type Filter" := ItemAnalysisType."Item Ledger Entry Type Filter";
                                                                  "Value Entry Type Filter" := ItemAnalysisType."Value Entry Type Filter";
                                                                  "Value Type" := ItemAnalysisType."Value Type";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Analysis Type Code;
                                                              ENG=Analysis Type Code] }
    { 15  ;   ;Item Ledger Entry Type Filter;Text250;
                                                   OnValidate=BEGIN
                                                                AnalysisRepMgmt.ValidateFilter(
                                                                  "Item Ledger Entry Type Filter",DATABASE::"Analysis Column",
                                                                  FIELDNO("Item Ledger Entry Type Filter"),TRUE);
                                                              END;

                                                   CaptionML=[ENU=Item Ledger Entry Type Filter;
                                                              ENG=Item Ledger Entry Type Filter] }
    { 16  ;   ;Value Entry Type Filter;Text250    ;OnValidate=BEGIN
                                                                AnalysisRepMgmt.ValidateFilter(
                                                                  "Value Entry Type Filter",DATABASE::"Analysis Column",
                                                                  FIELDNO("Value Entry Type Filter"),TRUE);
                                                              END;

                                                   CaptionML=[ENU=Value Entry Type Filter;
                                                              ENG=Value Entry Type Filter] }
    { 17  ;   ;Value Type          ;Option        ;CaptionML=[ENU=Value Type;
                                                              ENG=Value Type];
                                                   OptionCaptionML=[ENU=" ,Quantity,Sales Amount,Cost Amount,Non-Invntble Amount,Unit Price,Standard Cost,Indirect Cost,Unit Cost";
                                                                    ENG=" ,Quantity,Sales Amount,Cost Amount,Non-Invntble Amount,Unit Price,Standard Cost,Indirect Cost,Unit Cost"];
                                                   OptionString=[ ,Quantity,Sales Amount,Cost Amount,Non-Invntble Amount,Unit Price,Standard Cost,Indirect Cost,Unit Cost] }
    { 18  ;   ;Invoiced            ;Boolean       ;CaptionML=[ENU=Invoiced;
                                                              ENG=Invoiced] }
    { 10505;  ;Keep Comparison Period Scope;Boolean;
                                                   CaptionML=[ENU=Keep Comparison Period Scope;
                                                              ENG=Keep Comparison Period Scope] }
  }
  KEYS
  {
    {    ;Analysis Area,Analysis Column Template,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ItemSchedLine@1000 : TEMPORARY Record 7114;
      Text001@1003 : TextConst 'ENU=%1 is not a valid Period Formula;ENG=%1 is not a valid Period Formula';
      Text002@1012 : TextConst '@@@={Locked};ENU=P;ENG=P';
      Text003@1011 : TextConst '@@@={Locked};ENU=FY;ENG=FY';
      Text004@1015 : TextConst '@@@={Locked};ENU=CP;ENG=CP';
      Text005@1014 : TextConst '@@@={Locked};ENU=LP;ENG=LP';
      AnalysisRepMgmt@1006 : Codeunit 7110;

    PROCEDURE ParsePeriodFormula@26(Formula@1002 : Code[20];VAR Steps@1001 : Integer;VAR Type@1006 : ' ,Period,Fiscal Year';VAR RangeFromType@1009 : 'Int,CP,LP';VAR RangeToType@1008 : 'Int,CP,LP';VAR RangeFromInt@1003 : Integer;VAR RangeToInt@1000 : Integer);
    VAR
      OriginalFormula@1004 : Code[20];
    BEGIN
      // <PeriodFormula> ::= <signed integer> <formula> | blank
      // <signed integer> ::= <sign> <positive integer> | blank
      // <sign> ::= + | - | blank
      // <positive integer> ::= <digit 1-9> <digits>
      // <digit 1-9> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
      // <digits> ::= 0 <digits> | <digit 1-9> <digits> | blank
      // <formula> ::= P | FY <range> | FH <range> | FQ <range>
      // <range> ::= blank | [<range2>]
      // <range2> ::= <index> .. <index> | <index>
      // <index> ::= <positive integer> | CP | LP

      OriginalFormula := Formula;
      Formula := DELCHR(Formula);

      IF NOT ParseFormula(Formula,Steps,Type) THEN
        ERROR(Text001,OriginalFormula);

      IF Type = Type::"Fiscal Year" THEN
        IF NOT ParseRange(Formula,RangeFromType,RangeFromInt,RangeToType,RangeToInt) THEN
          ERROR(Text001,OriginalFormula);

      IF Formula <> '' THEN
        ERROR(Text001,OriginalFormula);
    END;

    LOCAL PROCEDURE ParseFormula@5(VAR Formula@1002 : Code[20];VAR Steps@1001 : Integer;VAR Type@1006 : ' ,Period,Fiscal year,Fiscal Halfyear,Fiscal Quarter') : Boolean;
    BEGIN
      Steps := 0;
      Type := Type::" ";

      IF Formula = '' THEN
        EXIT(TRUE);

      IF NOT ParseSignedInteger(Formula,Steps) THEN
        EXIT(FALSE);

      IF Formula = '' THEN
        EXIT(FALSE);

      IF NOT ParseType(Formula,Type) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseSignedInteger@1(VAR Formula@1000 : Code[20];VAR Int@1001 : Integer) : Boolean;
    BEGIN
      Int := 0;

      CASE COPYSTR(Formula,1,1) OF
        '-':
          BEGIN
            Formula := COPYSTR(Formula,2);
            IF NOT ParseInt(Formula,Int,FALSE) THEN
              EXIT(FALSE);
            Int := -Int;
          END;
        '+':
          BEGIN
            Formula := COPYSTR(Formula,2);
            IF NOT ParseInt(Formula,Int,FALSE) THEN
              EXIT(FALSE);
          END;
        ELSE
          BEGIN
          IF NOT ParseInt(Formula,Int,TRUE) THEN
            EXIT(FALSE);
        END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseInt@2(VAR Formula@1001 : Code[20];VAR Int@1000 : Integer;AllowNotInt@1003 : Boolean) : Boolean;
    VAR
      IntegerStr@1002 : Code[20];
    BEGIN
      IF COPYSTR(Formula,1,1) IN ['1'..'9'] THEN
        REPEAT
          IntegerStr := IntegerStr + COPYSTR(Formula,1,1);
          Formula := COPYSTR(Formula,2);
          IF Formula = '' THEN
            EXIT(FALSE);
        UNTIL NOT (COPYSTR(Formula,1,1) IN ['0'..'9'])
      ELSE
        EXIT(AllowNotInt);
      EVALUATE(Int,IntegerStr);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseType@3(VAR Formula@1001 : Code[20];VAR Type@1000 : ' ,Period,Fiscal Year') : Boolean;
    BEGIN
      CASE ReadToken(Formula) OF
        Text002:
          Type := Type::Period;
        Text003:
          Type := Type::"Fiscal Year";
        ELSE
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseRange@6(VAR Formula@1002 : Code[20];VAR FromType@1001 : 'Int,CP,LP';VAR FromInt@1004 : Integer;VAR ToType@1006 : 'Int,CP,LP';VAR ToInt@1005 : Integer) : Boolean;
    BEGIN
      FromType := FromType::CP;
      ToType := ToType::CP;

      IF Formula = '' THEN
        EXIT(TRUE);

      IF NOT ParseToken(Formula,'[') THEN
        EXIT(FALSE);

      IF NOT ParseIndex(Formula,FromType,FromInt) THEN
        EXIT(FALSE);
      IF Formula = '' THEN
        EXIT(FALSE);

      IF COPYSTR(Formula,1,1) = '.' THEN BEGIN
        IF NOT ParseToken(Formula,'..') THEN
          EXIT(FALSE);
        IF NOT ParseIndex(Formula,ToType,ToInt) THEN
          EXIT(FALSE);
      END ELSE BEGIN
        ToType := FromType;
        ToInt := FromInt;
      END;

      IF NOT ParseToken(Formula,']') THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseIndex@11(VAR Formula@1002 : Code[20];VAR IndexType@1001 : 'Int,CP,LP';VAR Index@1004 : Integer) : Boolean;
    BEGIN
      IF Formula = '' THEN
        EXIT(FALSE);

      IF ParseInt(Formula,Index,FALSE) THEN
        IndexType := IndexType::Int
      ELSE
        CASE ReadToken(Formula) OF
          Text004:
            IndexType := IndexType::CP;
          Text005:
            IndexType := IndexType::LP;
          ELSE
            EXIT(FALSE);
        END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ParseToken@13(VAR Formula@1000 : Code[20];Token@1001 : Code[20]) : Boolean;
    BEGIN
      IF COPYSTR(Formula,1,STRLEN(Token)) <> Token THEN
        EXIT(FALSE);
      Formula := COPYSTR(Formula,STRLEN(Token) + 1);
      EXIT(TRUE)
    END;

    LOCAL PROCEDURE ReadToken@7(VAR Formula@1000 : Code[20]) : Code[20];
    VAR
      Token@1001 : Code[20];
      p@1002 : Integer;
    BEGIN
      FOR p := 1 TO STRLEN(Formula) DO BEGIN
        IF COPYSTR(Formula,p,1) IN ['[',']','.'] THEN BEGIN
          Formula := COPYSTR(Formula,STRLEN(Token) + 1);
          EXIT(Token);
        END;
        Token := Token + COPYSTR(Formula,p,1);
      END;

      Formula := '';
      EXIT(Token);
    END;

    BEGIN
    END.
  }
}

