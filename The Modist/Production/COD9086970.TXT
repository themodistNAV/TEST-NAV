OBJECT Codeunit 9086970 nF. Record Update
{
  OBJECT-PROPERTIES
  {
    Date=30/10/16;
    Time=11:03:51 AM;
    Version List=NF2016.17;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Record@1000000000 : Variant;
      RecordChanged@1000000002 : Boolean;
      RecRef@1000000001 : RecordRef;
      FldRef@1000000003 : FieldRef;
      VariantToolkit@1000000004 : Codeunit 9086973;

    PROCEDURE SetRecord@1000000029(pRecord@1000000000 : Variant);
    BEGIN
      ///<summary>Setting record</summary>
      ///<param name="pRecord">The record</param>

      Record := pRecord;
      RecRef.GETTABLE(pRecord);
      RecordChanged := FALSE;
    END;

    PROCEDURE ValidateRecordField@1000000028(pFieldId@1000000000 : Integer;pNewFieldValue@1000000001 : Variant) : Boolean;
    BEGIN
      ///<summary>Validating record field</summary>
      ///<param name="pFieldId">Field Id</param>
      ///<param name="pNewFieldValue">New field value</param>
      ///<returns>TRUE = Modified, FALSE = Not</returns>

      EXIT(ModifyRecordFieldInternal(pFieldId, pNewFieldValue, FALSE, TRUE));
    END;

    PROCEDURE ModifyRecordField@1000000027(pFieldId@1000000000 : Integer;pNewFieldValue@1000000001 : Variant) : Boolean;
    BEGIN
      ///<summary>Modifying record field (without validation)</summary>
      ///<param name="pFieldId">Field Id</param>
      ///<param name="pNewFieldValue">New field value</param>
      ///<returns>TRUE = Modified, FALSE = Not</returns>

      EXIT(ModifyRecordFieldInternal(pFieldId, pNewFieldValue, FALSE, FALSE));
    END;

    PROCEDURE ForceValidateRecordField@1000000010(pFieldId@1000000000 : Integer;pNewFieldValue@1000000001 : Variant) : Boolean;
    BEGIN
      ///<summary>Force-validating record field</summary>
      ///<param name="pFieldId">Field Id</param>
      ///<param name="pNewFieldValue">New field value</param>
      ///<returns>TRUE = Modified, FALSE = Not</returns>

      EXIT(ModifyRecordFieldInternal(pFieldId, pNewFieldValue, TRUE, TRUE));
    END;

    PROCEDURE ForceModifyRecordField@1000000009(pFieldId@1000000000 : Integer;pNewFieldValue@1000000001 : Variant) : Boolean;
    BEGIN
      ///<summary>Force-modifying record field (without validation)</summary>
      ///<param name="pFieldId">Field Id</param>
      ///<param name="pNewFieldValue">New field value</param>
      ///<returns>TRUE = Modified, FALSE = Not</returns>

      EXIT(ModifyRecordFieldInternal(pFieldId, pNewFieldValue, TRUE, FALSE));
    END;

    LOCAL PROCEDURE ModifyRecordFieldInternal@1000000008(pFieldId@1000000000 : Integer;pNewFieldValue@1000000001 : Variant;pForce@1000000005 : Boolean;pWithValidation@1000000002 : Boolean) : Boolean;
    VAR
      lCurrentFieldValue@1000000003 : Variant;
      lValuesDifferent@1000000004 : Boolean;
    BEGIN
      ///<summary>Modifying record field (internal version)</summary>
      ///<param name="pFieldId">Field Id</param>
      ///<param name="pNewFieldValue">New field value</param>
      ///<param name="pForce">Force flag</param>
      ///<param name="pWithValidation">Validation flag</param>
      ///<returns>TRUE = Modified, FALSE = Not</returns>

      FldRef := RecRef.FIELD(pFieldId);
      IF (pForce) THEN
        lValuesDifferent := TRUE
      ELSE
      BEGIN
        lCurrentFieldValue := FldRef.VALUE();
        lValuesDifferent := ( NOT (VariantToolkit.AreEqual(pNewFieldValue, lCurrentFieldValue)));
      END;
      IF (lValuesDifferent) THEN
      BEGIN
        IF (pWithValidation) THEN
          FldRef.VALIDATE(pNewFieldValue)
        ELSE
          FldRef.VALUE := pNewFieldValue;
        RecordChanged := TRUE;
      END;
      EXIT(lValuesDifferent);
    END;

    PROCEDURE RecordHasChanged@1000000016() : Boolean;
    BEGIN
      ///<summary>Answering if record has changed</summary>
      ///<returns>TRUE = Modified, FALSE = Not</returns>

      EXIT(RecordChanged);
    END;

    PROCEDURE GetRecord@1000000000(VAR pRecord@1000000000 : Variant);
    BEGIN
      ///<summary>Getting record</summary>
      ///<param name="pRecord">Target record</param>

      RecRef.SETTABLE(Record);
      pRecord := Record;
    END;

    BEGIN
    {
      ///<summary>ECom tool functions</summary>
      ///<remarks>These functions shouldn't be here. They should be replaced by references to existing nHanced NAV functions</remarks>
      ///<change version="NF2016.17" initials="JH" date="2016-10-2410">Created</change>
    }
    END.
  }
}

