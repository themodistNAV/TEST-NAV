OBJECT Codeunit 9062379 Margin Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      String@1000000001 : Codeunit 9062236;
      mTnpToolkit@1000000000 : Codeunit 9062230;

    PROCEDURE ValidateMargin@1000000004(pString@1000000000 : Code[20]);
    VAR
      lMargin@1000000001 : Record 9062365;
    BEGIN
      //DOC NA2015.1 - Validating margin (always as "Left,Top,Right,Bottom" text where each of parts is a number >= 0)
      //  -> pString: Margin string

      ParseMargin(pString, FALSE, TRUE, lMargin);
    END;

    PROCEDURE ValidatePadding@1000000008(pString@1000000000 : Code[20]);
    VAR
      lMargin@1000000001 : Record 9062365;
    BEGIN
      //DOC NA2015.1 - Validating margin (always as "Left,Top,Right,Bottom" text where each of parts is a number >= 0)
      //  -> pString: Padding string

      ParseMargin(pString, TRUE, TRUE, lMargin);
    END;

    PROCEDURE FormatMargin@1000000000(pMargin@1000000000 : Record 9062365) : Code[20];
    BEGIN
      //DOC NA2015.1 - Formatting margin
      //  -> pMargin: Margin record
      //  <- Margin string

      IF (pMargin."One Value") THEN
        EXIT(FORMAT(pMargin.Value, 0, 1))
      ELSE
        EXIT(STRSUBSTNO('%1,%2,%3,%4', FORMAT(pMargin.Left, 0, 1), FORMAT(pMargin.Top, 0, 1), FORMAT(pMargin.Right, 0, 1),
          FORMAT(pMargin.Bottom, 0, 1)));
    END;

    PROCEDURE ParseMargin@1000000007(pString@1000000000 : Code[20];pPadding@1000000004 : Boolean;pRaiseError@1000000008 : Boolean;VAR pMargin@1000000013 : Record 9062365) : Boolean;
    VAR
      lStringParts@1000000007 : TEMPORARY Record 9062730;
      lStringPartsCount@1000000011 : Integer;
      lStringPartIndex@1000000003 : Integer;
      lStringPartText@1000000002 : Code[20];
      lStringPartValue@1000000001 : Integer;
      eIncorrectValue@1000000009 : TextConst 'ENU=Value "%1" is not a proper %2. Please insert your %2 as "Left,Top,Right,Bottom" or "Number" string where each part is a number greater or equal 0.;ENG=Value "%1" is not a proper %2. Please insert your %2 as "Left,Top,Right,Bottom" or "Number" string where each part is a number greater or equal 0.';
      eMargin@1000000005 : TextConst 'ENU=margin;ENG=margin';
      ePadding@1000000006 : TextConst 'ENU=padding;ENG=padding';
      lStringPartValues@1000000012 : ARRAY [4] OF Integer;
      lResult@1000000010 : Boolean;
    BEGIN
      //DOC NA2015.1 - Parsing margin
      //  -> pString: The margin string
      //  -> pPadding: TRUE = Use "Padding" name, FALSE = Use "Margin" name
      //  -> pRaiseError: TRUE = Raise error immediately, FALSE = Only return result
      //  <> pMargin: Target record
      //  <- TRUE = Parsed successfully, FALSE = Some crap has been sent

      CLEAR(pMargin);

      IF (pString <> '') THEN
      BEGIN
        String.Split(pString, ',', lStringParts);
        lStringPartsCount := lStringParts.COUNT();

        lResult := TRUE;

        IF ( NOT (lStringPartsCount IN [1, 4])) THEN
          lResult := FALSE;

        IF (lResult) THEN
          FOR lStringPartIndex := 1 TO lStringPartsCount DO
          BEGIN
            lStringParts.GET(lStringPartIndex);
            lStringPartText := lStringParts.Value;
            IF (EVALUATE(lStringPartValue, lStringPartText)) THEN
              lStringPartValues[lStringPartIndex] := lStringPartValue
            ELSE
            BEGIN
              lResult := FALSE;
              lStringPartIndex := lStringPartsCount;
            END;
          END;

        IF (( NOT (lResult)) AND (pRaiseError)) THEN
          ERROR(eIncorrectValue, pMargin, mTnpToolkit.IIFText(pPadding, ePadding, eMargin));

        CASE (lStringPartsCount) OF
          1:
            BEGIN
              pMargin."One Value" := TRUE;
              pMargin.Value := lStringPartValues[1];
            END;
          4:
            BEGIN
              pMargin."One Value" := FALSE;
              pMargin.Left := lStringPartValues[1];
              pMargin.Top := lStringPartValues[2];
              pMargin.Right := lStringPartValues[3];
              pMargin.Bottom := lStringPartValues[4];
            END;
        END;
      END
      ELSE
      BEGIN
        pMargin."One Value" := TRUE;
        pMargin.Value := 0;
      END;

      EXIT(lResult);
    END;

    PROCEDURE MarginLookup@1000000003(VAR pMargin@1000000000 : Code[20]) : Boolean;
    VAR
      lMargin@1000000002 : Record 9062365;
      lEditMargin@1000000001 : Page 9062450;
    BEGIN
      //DOC NA2015.1 - Performing margin lookup
      //  <> pMargin: Source / destination margin
      //  <- Lookup result

      ParseMargin(pMargin, FALSE, FALSE, lMargin);

      lEditMargin.Set(lMargin);
      IF (lEditMargin.RUNMODAL() = ACTION::OK) THEN
      BEGIN
        lEditMargin.Get(lMargin);
        pMargin := FormatMargin(lMargin);
      END;
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 25/04/2014 - Created
      //DOC NA2016.1  JH 27/08/2015 - Upgraded to 2016
      //DOC NA2016.12 JH 28/01/2016 - New string codeunit used
      //DOC NA2016.15 JH 09/05/2016 - CfMD modifications
    }
    END.
  }
}

