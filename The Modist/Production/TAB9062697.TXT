OBJECT Table 9062697 Quick Report Header
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD(Code);
               InitialiseRecord(TRUE);
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
               UpdateTimestamp(FALSE);
             END;

    OnModify=BEGIN
               CheckModifyPermission();
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
               UpdateTimestamp(FALSE);
             END;

    OnDelete=BEGIN
               CheckModifyPermission();

               DeleteFields(FALSE);
               CriteriaManagement.DeleteCriteria("Criteria ID");

               QuickReportData.RESET();
               QuickReportData.SETRANGE("Quick Report Code", Rec.Code);
               QuickReportData.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               CheckModifyPermission();
             END;

    CaptionML=[ENU=Quick Report Header;
               ENG=Quick Report Header];
    LookupPageID=Page9063005;
    DrillDownPageID=Page9063005;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code60        ;OnValidate=BEGIN
                                                                TnpToolkit.CodeToName(Rec.Code, Rec.Name);
                                                                Rec.VALIDATE(Name);
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              ENG=Code] }
    { 2   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 3   ;   ;User ID             ;Code50        ;CaptionML=[ENU=User ID;
                                                              ENG=User ID] }
    { 4   ;   ;Data From           ;Option        ;InitValue=Table;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Data From" <> xRec."Data From") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Table ID", 0);
                                                                  Rec.VALIDATE("NAV Query ID", 0);
                                                                  Rec.VALIDATE("SQL Query Code", '');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Data From;
                                                              ENG=Data From];
                                                   OptionCaptionML=[ENU=,Table,NAV Query,SQL Query;
                                                                    ENG=,Table,NAV Query,SQL Query];
                                                   OptionString=,Table,NAV Query,SQL Query }
    { 5   ;   ;Data From Name      ;Text50        ;CaptionML=[ENU=Data From Name;
                                                              ENG=Data From Name] }
    { 6   ;   ;Table ID            ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Table ID" <> xRec."Table ID") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Report Table ID", 0);
                                                                  DeleteFields(FALSE);
                                                                  CriteriaManagement.DeleteCriteria("Criteria ID");
                                                                  Rec.VALIDATE("Criteria ID", 0);
                                                                END;
                                                                Rec.CALCFIELDS("Table Name");
                                                                UpdateDataFromName();
                                                              END;

                                                   CaptionML=[ENU=Table ID;
                                                              ENG=Table ID] }
    { 7   ;   ;Table Name          ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Table ID)));
                                                   CaptionML=[ENU=Table Name;
                                                              ENG=Table Name];
                                                   Editable=No }
    { 8   ;   ;NAV Query ID        ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Query));
                                                   OnValidate=BEGIN
                                                                IF (Rec."NAV Query ID" <> 0) THEN
                                                                  Rec.TESTFIELD("Data From", Rec."Data From"::"NAV Query");
                                                                Rec.CALCFIELDS("NAV Query Name");
                                                                UpdateDataFromName();
                                                              END;

                                                   CaptionML=[ENU=NAV Query ID;
                                                              ENG=NAV Query ID] }
    { 9   ;   ;NAV Query Name      ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Query),
                                                                                                  Object ID=FIELD(NAV Query ID)));
                                                   CaptionML=[ENU=NAV Query Name;
                                                              ENG=NAV Query Name];
                                                   Editable=No }
    { 10  ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ENG=Blocked] }
    { 11  ;   ;Sequence            ;Integer       ;CaptionML=[ENU=Sequence;
                                                              ENG=Sequence];
                                                   MinValue=0 }
    { 12  ;   ;Criteria ID         ;Integer       ;TableRelation=Criteria;
                                                   CaptionML=[ENU=Criteria ID;
                                                              ENG=Criteria ID] }
    { 13  ;   ;Criteria Description;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Criteria.Description WHERE (ID=FIELD(Criteria ID)));
                                                   CaptionML=[ENU=Criteria Description;
                                                              ENG=Criteria Description];
                                                   Editable=No }
    { 14  ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 15  ;   ;SQL Query Code      ;Code20        ;TableRelation="SQL Query";
                                                   OnValidate=BEGIN
                                                                IF (Rec."SQL Query Code" <> '') THEN
                                                                  Rec.TESTFIELD("Data From", Rec."Data From"::"SQL Query");
                                                                Rec.CALCFIELDS("SQL Query Description");
                                                                UpdateDataFromName();
                                                              END;

                                                   CaptionML=[ENU=SQL Query Code;
                                                              ENG=SQL Query Code] }
    { 16  ;   ;SQL Query Description;Text50       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("SQL Query".Description WHERE (Code=FIELD(SQL Query Code)));
                                                   CaptionML=[ENU=SQL Query Description;
                                                              ENG=SQL Query Description];
                                                   Editable=No }
    { 17  ;   ;Reports Filter      ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Reports Filter;
                                                              ENG=Reports Filter];
                                                   OptionCaptionML=[ENU=" ,My Reports,My and Public Reports,All Reports";
                                                                    ENG=" ,My Reports,My and Public Reports,All Reports"];
                                                   OptionString=[ ,My Reports,My and Public Reports,All Reports] }
    { 18  ;   ;Temporary           ;Boolean       ;CaptionML=[ENU=Temporary;
                                                              ENG=Temporary] }
    { 19  ;   ;Copied From         ;Code60        ;OnValidate=BEGIN
                                                                TnpToolkit.CodeToName(Rec.Code, Rec.Name);
                                                                Rec.VALIDATE(Name);
                                                              END;

                                                   CaptionML=[ENU=Copied From;
                                                              ENG=Copied From] }
    { 20  ;   ;Last Execution Time [s];Decimal    ;CaptionML=[ENU=Last Execution Time [s]];
                                                              ENG=Last Execution Time [s]]];
                                                   DecimalPlaces=0:2;
                                                   BlankZero=Yes }
    { 21  ;   ;Last Execution Records;Integer     ;CaptionML=[ENU=Last Execution Records;
                                                              ENG=Last Execution Records];
                                                   BlankZero=Yes }
    { 22  ;   ;User Report Sequence;Integer       ;CaptionML=[ENU=User Report Sequence;
                                                              ENG=User Report Sequence] }
    { 23  ;   ;Performance Statistics;Option      ;CaptionML=[ENU=Performance Statistics;
                                                              ENG=Performance Statistics];
                                                   OptionCaptionML=[ENU=" ,Basic,Detailed";
                                                                    ENG=" ,Basic,Detailed"];
                                                   OptionString=[ ,Basic,Detailed] }
    { 24  ;   ;Last Grouping Time [s];Decimal     ;CaptionML=[ENU=Last Grouping Time [s]];
                                                              ENG=Last Grouping Time [s]]];
                                                   DecimalPlaces=0:2;
                                                   BlankZero=Yes }
    { 25  ;   ;Report Table ID     ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Report Table ID" <> xRec."Report Table ID") THEN
                                                                BEGIN
                                                                  DeleteFields(TRUE);
                                                                  Rec.VALIDATE("Report Table Key 1 ID", 0);
                                                                  Rec.VALIDATE("Report Table Key 2 ID", 0);
                                                                  Rec.VALIDATE("Report Table Key 3 ID", 0);
                                                                END;
                                                                Rec.CALCFIELDS("Report Table Name");
                                                              END;

                                                   CaptionML=[ENU=Report Table ID;
                                                              ENG=Report Table ID] }
    { 26  ;   ;Report Table Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Report Table ID)));
                                                   CaptionML=[ENU=Report Table Name;
                                                              ENG=Report Table Name];
                                                   Editable=No }
    { 27  ;   ;Report Table Key 1 ID;Integer      ;TableRelation="Quick Report Field".ID WHERE (Quick Report Code=FIELD(Code));
                                                   OnValidate=BEGIN
                                                                Rec.CALCFIELDS("Report Table Key 1 Name");
                                                              END;

                                                   CaptionML=[ENU=Report Table Key 1 ID;
                                                              ENG=Report Table Key 1 ID] }
    { 28  ;   ;Report Table Key 1 Name;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Quick Report Field"."Field Name" WHERE (Quick Report Code=FIELD(Code),
                                                                                                               ID=FIELD(Report Table Key 1 ID)));
                                                   CaptionML=[ENU=Report Table Key 1 Name;
                                                              ENG=Report Table Key 1 Name];
                                                   Editable=No }
    { 29  ;   ;Report Table Key 2 ID;Integer      ;TableRelation="Quick Report Field".ID WHERE (Quick Report Code=FIELD(Code));
                                                   OnValidate=BEGIN
                                                                Rec.CALCFIELDS("Report Table Key 2 Name");
                                                              END;

                                                   CaptionML=[ENU=Report Table Key 2 ID;
                                                              ENG=Report Table Key 2 ID] }
    { 30  ;   ;Report Table Key 2 Name;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Quick Report Field"."Field Name" WHERE (Quick Report Code=FIELD(Code),
                                                                                                               ID=FIELD(Report Table Key 2 ID)));
                                                   CaptionML=[ENU=Report Table Key 2 Name;
                                                              ENG=Report Table Key 2 Name];
                                                   Editable=No }
    { 31  ;   ;Report Table Key 3 ID;Integer      ;TableRelation="Quick Report Field".ID WHERE (Quick Report Code=FIELD(Code));
                                                   OnValidate=BEGIN
                                                                Rec.CALCFIELDS("Report Table Key 3 Name");
                                                              END;

                                                   CaptionML=[ENU=Report Table Key 3 ID;
                                                              ENG=Report Table Key 3 ID] }
    { 32  ;   ;Report Table Key 3 Name;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Quick Report Field"."Field Name" WHERE (Quick Report Code=FIELD(Code),
                                                                                                               ID=FIELD(Report Table Key 3 ID)));
                                                   CaptionML=[ENU=Report Table Key 3 Name;
                                                              ENG=Report Table Key 3 Name];
                                                   Editable=No }
    { 33  ;   ;System Activity     ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=System Activity;
                                                              ENG=System Activity] }
    { 34  ;   ;Export Format       ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Export Format;
                                                              ENG=Export Format];
                                                   OptionCaptionML=[ENU=" ,XML,Excel,PDF,Word,HTML,CSV";
                                                                    ENG=" ,XML,Excel,PDF,Word,HTML,CSV"];
                                                   OptionString=[ ,XML,Excel,PDF,Word,HTML,CSV] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
    { 1004;   ;Timestamp Date Time ;DateTime      ;CaptionML=[ENU=Timestamp Date Time;
                                                              ENG=Timestamp Date Time] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Temporary,Sequence,Code                  }
    {    ;Temporary,Blocked,Sequence,Code          }
    {    ;Temporary,User ID,User Report Sequence   }
    {    ;Temporary,User ID,Timestamp Date Time    }
    {    ;Temporary,Timestamp Date Time            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      QuickReportData@1000000003 : Record 9062699;
      QuickReportField@1000000001 : Record 9062698;
      CriteriaManagement@1000000002 : Codeunit 9062462;
      EnhancedPermissionsMgt@1000000004 : Codeunit 9062277;
      TnpToolkit@1000000000 : Codeunit 9062230;

    PROCEDURE UpdateTimestamp@1000000000(pModify@1000000000 : Boolean);
    VAR
      lSystemActivity@1000000001 : Boolean;
    BEGIN
      //DOC NA2016.12 - Updating record timestamp
      //  -> pModify: Flag to modify the record

      IF (Rec.GETFILTER("System Activity") <> '') THEN
      BEGIN
        lSystemActivity := Rec.GETRANGEMIN("System Activity");
        IF (lSystemActivity) THEN
          EXIT;
      END;

      Rec."Timestamp Date Time" := CURRENTDATETIME();
      IF (pModify) THEN
        Rec.MODIFY(TRUE);
    END;

    PROCEDURE NewSequence@1000000001() : Integer;
    VAR
      lQuickReportHeader@1000000000 : Record 9062697;
    BEGIN
      //DOC NA2015.7 - Returning new sequence
      //  <- The sequence

      lQuickReportHeader.RESET();
      IF (lQuickReportHeader.FINDLAST()) THEN
        EXIT(lQuickReportHeader.Sequence + 10)
      ELSE
        EXIT(10);
    END;

    PROCEDURE InitialiseRecord@1000000004(pOnInsert@1000000000 : Boolean);
    BEGIN
      //DOC NA2015.7 - Initialising the record
      //  -> pOnInsert: On insert flag

      IF (Rec.Sequence = 0) THEN
        Rec.VALIDATE(Sequence, NewSequence());
    END;

    LOCAL PROCEDURE DeleteFields@1000000006(pReportTableFields@1000000000 : Boolean);
    BEGIN
      //DOC NA2016.12 - Deleting fields
      //  -> pReportTableFields: Flag to delete only report table fields

      QuickReportField.RESET();
      QuickReportField.SETRANGE("Quick Report Code", Rec.Code);
      QuickReportField.SETRANGE("System Activity", TRUE);
      IF (pReportTableFields) THEN
        QuickReportField.SETRANGE("Field From", QuickReportField."Field From"::"Report Table");
      QuickReportField.DELETEALL(TRUE);
      QuickReportField.SETRANGE("System Activity", FALSE);
    END;

    LOCAL PROCEDURE UpdateDataFromName@1000000002();
    BEGIN
      //DOC NA2015.7 - Updating "Data From Name"

      CASE (Rec."Data From") OF
        Rec."Data From"::Table:
          BEGIN
            Rec.CALCFIELDS("Table Name");
            Rec.VALIDATE("Data From Name", Rec."Table Name");
          END;
        Rec."Data From"::"NAV Query":
          BEGIN
            Rec.CALCFIELDS("NAV Query Name");
            Rec.VALIDATE("Data From Name", Rec."NAV Query Name");
          END;
        Rec."Data From"::"SQL Query":
          BEGIN
            Rec.CALCFIELDS("SQL Query Description");
            Rec.VALIDATE("Data From Name", Rec."SQL Query Description");
          END;
      END;
    END;

    PROCEDURE GetStyle@1000000003() : Text;
    BEGIN
      //DOC NA2015.7 - Returning style of the record
      //  <- The style

      IF (Rec."Temporary") THEN
        EXIT('Attention')
      ELSE IF (Rec.Blocked) THEN
        EXIT('Subordinate')
      ELSE IF (Rec."User ID" = USERID) THEN
        EXIT('StandardAccent')
      ELSE IF (Rec."User ID" <> '') THEN
        EXIT('Ambiguous')
      ELSE
        EXIT('Standard');
    END;

    PROCEDURE EditCriteria@1000000005() : Boolean;
    VAR
      lCriteriaId@1000000000 : Integer;
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2015.7 - Editing criteria
      //  <- TRUE = Criteria ID changed, FALSE = Not

      lCriteriaId := Rec."Criteria ID";
      CriteriaManagement.EditCriteriaAttachedAdvanced(lCriteriaId, Rec."Table ID", 0, DATABASE::"Quick Report Header",
        Rec.GETPOSITION(FALSE), Rec.FIELDNO("Criteria ID"), FALSE);
      IF (Rec."Criteria ID" <> lCriteriaId) THEN
      BEGIN
        Rec."Criteria ID" := lCriteriaId;
        Rec.MODIFY(TRUE);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE PageCaption@1000000007() : Text;
    VAR
      lText@1000000000 : Text;
    BEGIN
      //DOC NA2015.7 - Returning page caption
      //  <- The caption

      IF (Rec."Temporary") THEN
      BEGIN
        IF (Rec.Name <> '') THEN
          EXIT(STRSUBSTNO('%1 (%2)', Rec.Name, Rec."User ID"))
        ELSE
          EXIT(Rec."User ID");
      END
      ELSE
      BEGIN
        IF (Rec.Name <> '') THEN
          EXIT(Rec.Name)
        ELSE
          EXIT(Rec.Code);
      END;
    END;

    PROCEDURE ResetNavQueryFields@1000000009() : Boolean;
    VAR
      eConfirmation@1000000000 : TextConst 'ENU=Do you want to reset NAV query fields?;ENG=Do you want to reset NAV query fields?';
      lNavQueryManagment@1000000002 : Codeunit 9062300;
    BEGIN
      //DOC NA2015.7 - Resetting NAV query fields
      //  <- TRUE = Executed, FALSE = Cancelled

      Rec.TESTFIELD("Data From", Rec."Data From"::"NAV Query");
      Rec.TESTFIELD("NAV Query ID");

      IF (GUIALLOWED) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
          EXIT(FALSE);

      lNavQueryManagment.UpdateQueryDefinition(Rec."NAV Query ID");

      EXIT(TRUE);
    END;

    PROCEDURE ShowSqlQuery@1000000008();
    VAR
      lSqlQuery@1000000000 : Record 9062331;
    BEGIN
      //DOC NA2015.7 - Showing SQL query

      Rec.TESTFIELD("Data From", Rec."Data From"::"SQL Query");
      Rec.TESTFIELD("SQL Query Code");

      lSqlQuery.GET(Rec."SQL Query Code");
      PAGE.RUN(PAGE::"SQL Query Card", lSqlQuery);
    END;

    PROCEDURE ResetSqlQueryFields@1000000010() : Boolean;
    VAR
      eConfirmation@1000000000 : TextConst 'ENU=Do you want to reset SQL query fields?;ENG=Do you want to reset SQL query fields?';
      lSqlIntegration@1000000001 : Codeunit 9062299;
    BEGIN
      //DOC NA2015.7 - Resetting SQL query fields
      //  <- TRUE = Executed, FALSE = Cancelled

      Rec.TESTFIELD("Data From", Rec."Data From"::"SQL Query");
      Rec.TESTFIELD("SQL Query Code");

      IF (GUIALLOWED) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
          EXIT(FALSE);

      lSqlIntegration.UpdateResultFields(Rec."SQL Query Code");

      EXIT(TRUE);
    END;

    PROCEDURE ShowEnhancedFields@1000000011();
    VAR
      lEnhancedFieldDefinition@1000000002 : Record 9062327;
      lTableId@1000000000 : Integer;
      eEmptyTable@1000000001 : TextConst 'ENU=The current quick report doesn''t have table ID set. Please fill "%1" field, or - if the quick report is based on NAV query or SQL query - "%2" one.;ENG=The current quick report doesn''t have table ID set. Please fill "%1" field, or - if the quick report is based on NAV query or SQL query - "%2" one.';
    BEGIN
      //DOC NA2016.14 - Showing enhanced fields

      lTableId := Rec."Table ID";
      IF (lTableId = 0) THEN
        lTableId := Rec."Report Table ID";

      IF (lTableId = 0) THEN
        ERROR(eEmptyTable, Rec.FIELDCAPTION("Table ID"), Rec.FIELDCAPTION("Report Table ID"));

      lEnhancedFieldDefinition.RESET();
      lEnhancedFieldDefinition.FILTERGROUP(2);
      lEnhancedFieldDefinition.SETRANGE("Table No.", lTableId);
      lEnhancedFieldDefinition.FILTERGROUP(0);
      PAGE.RUN(0, lEnhancedFieldDefinition);
    END;

    PROCEDURE GetDataFromText@1000000012() : Text;
    VAR
      lDataFromText@1000000001 : Text;
      lGroupedByText@1000000000 : Text;
      eGroupedBy@1000000002 : TextConst 'ENU=Grouped By;ENG=Grouped By';
    BEGIN
      //DOC NA2016.14 - Returning data from text
      //  <- The text

      CLEAR(lDataFromText);
      CLEAR(lGroupedByText);

      QuickReportField.RESET();
      QuickReportField.SETCURRENTKEY("Quick Report Code", Index);
      QuickReportField.SETRANGE("Quick Report Code", Rec.Code);
      QuickReportField.SETRANGE(Index, 1, 20);
      QuickReportField.SETRANGE(Grouping, QuickReportField.Grouping::"Group By");
      IF (QuickReportField.FINDSET()) THEN
      REPEAT
        IF (lGroupedByText = '') THEN
          lGroupedByText := eGroupedBy + ' '
        ELSE
          lGroupedByText := lGroupedByText + ', ';
        lGroupedByText := lGroupedByText + QuickReportField.Caption;
      UNTIL (QuickReportField.NEXT() = 0);

      lDataFromText := STRSUBSTNO('"%1" %2', Rec."Data From Name", Rec."Data From");
      IF (lGroupedByText <> '') THEN
        lDataFromText := lDataFromText + ' ' + lGroupedByText;

      EXIT(lDataFromText);
    END;

    LOCAL PROCEDURE CheckModifyPermission@1000000013();
    BEGIN
      //DOC NA2016.15 - Checking modify permission

      IF (Rec."Temporary") THEN
        EXIT;
      EnhancedPermissionsMgt.CheckQuickReportModifyPermission(Rec, USERID());
    END;

    BEGIN
    {
      //DOC NA2015.7  JH 15/05/2015 - Created
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.12 JH 08/12/2015 - Timestamp fixes, "Temporary,Timestamp Date Time" key added
      //DOC NA2016.12 JH 27/12/2015 - Criteria references changed
      //DOC NA2016.12 JH 19/01/2016 - Timestamp fixes
      //DOC NA2016.14 JH 16/02/2016 - Deleting data on delete; functions to show enhanced fields
      //DOC NA2016.15 JH 05/05/2016 - Enhanced permissions
    }
    END.
  }
}

