OBJECT Table 9086973 nF. Explain Permission Context
{
  OBJECT-PROPERTIES
  {
    Date=22/12/16;
    Time=12:00:00 PM;
    Version List=NF2016.17.11;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=[ENU=nForcement Find Permission;
               ENG=nForcement Find Permission];
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer        }
    { 10  ;   ;nF. User ID         ;Integer       ;TableRelation="nF. User";
                                                   OnValidate=BEGIN
                                                                IF (Rec."nF. User ID" <> xRec."nF. User ID") THEN
                                                                BEGIN
                                                                  IF (Rec."nF. User ID" <> 0) THEN
                                                                  BEGIN
                                                                    NfUser.GET(Rec."nF. User ID");
                                                                    Rec."nF. User Name" := NfUser."User Name";
                                                                  END
                                                                  ELSE
                                                                    Rec."nF. User Name" := '';
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              UserLookup();
                                                            END;

                                                   CaptionML=[ENU=nForcement User ID;
                                                              ENG=nForcement User ID] }
    { 11  ;   ;nF. User Name       ;Text100       ;OnValidate=BEGIN
                                                                IF (Rec."nF. User Name" <> xRec."nF. User Name") THEN
                                                                  ValidateUserName();
                                                              END;

                                                   OnLookup=BEGIN
                                                              UserLookup();
                                                            END;

                                                   CaptionML=[ENU=nForcement User Name;
                                                              ENG=nForcement User Name] }
    { 20  ;   ;nF. Company ID      ;Integer       ;TableRelation="nF. Company";
                                                   OnValidate=BEGIN
                                                                IF (Rec."nF. Company ID" <> xRec."nF. Company ID") THEN
                                                                BEGIN
                                                                  IF (Rec."nF. Company ID" <> 0) THEN
                                                                  BEGIN
                                                                    NfCompany.GET(Rec."nF. Company ID");
                                                                    Rec."nF. Company Name" := NfCompany.Name;
                                                                  END
                                                                  ELSE
                                                                    Rec."nF. Company Name" := '';
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CompanyLookup();
                                                            END;

                                                   CaptionML=[ENU=nForcement Company ID;
                                                              ENG=nForcement Company ID] }
    { 21  ;   ;nF. Company Name    ;Text100       ;OnValidate=BEGIN
                                                                IF (Rec."nF. Company Name" <> xRec."nF. Company Name") THEN
                                                                  ValidateCompanyName();
                                                              END;

                                                   OnLookup=BEGIN
                                                              CompanyLookup();
                                                            END;

                                                   CaptionML=[ENU=nForcement Company Name;
                                                              ENG=nForcement Company Name] }
    { 30  ;   ;Permission Type     ;Option        ;InitValue=Execute;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Permission Type" <> xRec."Permission Type") THEN
                                                                  IF (Rec."Permission Type" IN [Rec."Permission Type"::Read, Rec."Permission Type"::Insert, Rec."Permission Type"::Modify,
                                                                      Rec."Permission Type"::Delete]) THEN
                                                                    Rec.VALIDATE("Object Type", Rec."Object Type"::Table);
                                                              END;

                                                   CaptionML=[ENU=Permission Type;
                                                              ENG=Permission Type];
                                                   OptionCaptionML=[ENU=" ,Read,Insert,Modify,Delete,Execute";
                                                                    ENG=" ,Read,Insert,Modify,Delete,Execute"];
                                                   OptionString=[ ,Read,Insert,Modify,Delete,Execute] }
    { 40  ;   ;Object Type         ;Option        ;InitValue=Page;
                                                   OnValidate=VAR
                                                                lIsTable@1000000000 : Boolean;
                                                              BEGIN
                                                                IF (Rec."Object Type" <> xRec."Object Type") THEN
                                                                BEGIN
                                                                  IF (Rec."Object Type" <> Rec."Object Type"::Table) THEN
                                                                    Rec.VALIDATE("Permission Type", Rec."Permission Type"::Execute);
                                                                  Rec.VALIDATE("Object ID", 0);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Object Type;
                                                              ENG=Object Type];
                                                   OptionCaptionML=[ENU=" ,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System";
                                                                    ENG=" ,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System"];
                                                   OptionString=[ ,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System] }
    { 41  ;   ;Object ID           ;Integer       ;TableRelation=IF (Object Type=CONST(Table)) AllObj."Object ID" WHERE (Object Type=CONST(Table))
                                                                 ELSE IF (Object Type=CONST(Report)) AllObj."Object ID" WHERE (Object Type=CONST(Report))
                                                                 ELSE IF (Object Type=CONST(Codeunit)) AllObj."Object ID" WHERE (Object Type=CONST(Codeunit))
                                                                 ELSE IF (Object Type=CONST(XMLport)) AllObj."Object ID" WHERE (Object Type=CONST(XMLport))
                                                                 ELSE IF (Object Type=CONST(MenuSuite)) AllObj."Object ID" WHERE (Object Type=CONST(MenuSuite))
                                                                 ELSE IF (Object Type=CONST(Page)) AllObj."Object ID" WHERE (Object Type=CONST(Page))
                                                                 ELSE IF (Object Type=CONST(Query)) AllObj."Object ID" WHERE (Object Type=CONST(Query))
                                                                 ELSE IF (Object Type=CONST(System)) AllObj."Object ID" WHERE (Object Type=CONST(System));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Object ID" <> xRec."Object ID") THEN
                                                                BEGIN
                                                                  IF (Rec."Object ID" <> 0) THEN
                                                                  BEGIN
                                                                    Rec.TESTFIELD("Object Type");
                                                                    Object.RESET();
                                                                    Object.SETRANGE(Type, Rec."Object Type");
                                                                    Object.SETRANGE(ID, Rec."Object ID");
                                                                    Object.FINDFIRST();
                                                                    Rec."Object Name" := Object.Name;
                                                                  END
                                                                  ELSE
                                                                    Rec."Object Name" := '';
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (NfObjectToolkit.ObjectLookup(Rec."Object Type", Rec."Object ID")) THEN
                                                                Rec.VALIDATE("Object ID");
                                                            END;

                                                   CaptionML=[ENU=Object ID;
                                                              ENG=Object ID] }
    { 42  ;   ;Object Name         ;Text250       ;OnValidate=BEGIN
                                                                IF (Rec."Object Name" <> xRec."Object Name") THEN
                                                                  NfObjectToolkit.ValidateObjectName(Rec."Object Type", Rec."Object ID", Rec."Object Name", FALSE);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (NfObjectToolkit.ObjectLookup(Rec."Object Type", Rec."Object ID")) THEN
                                                                Rec.VALIDATE("Object ID");
                                                            END;

                                                   CaptionML=[ENU=Object Name;
                                                              ENG=Object Name] }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NfUser@1000000000 : Record 9086953;
      NfCompany@1000000001 : Record 9086957;
      Object@1000000002 : Record 2000000001;
      FilterTemplates@1000000004 : TEMPORARY Record 9086971;
      NfExplainPermissionResult@1000000003 : TEMPORARY Record 9086974;
      NfObjectToolkit@1000000006 : Codeunit 9086974;

    LOCAL PROCEDURE ValidateUserName@1000000000();
    VAR
      lUserName@1000000000 : Text;
      lFieldIds@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      lFieldId@1000000006 : Integer;
      lFound@1000000001 : Boolean;
      eUnknownUser@1000000002 : TextConst 'ENU=The system can''t find a user: "%1".;ENG=The system can''t find a user: "%1".';
      lnFUserRecRef@1000000007 : RecordRef;
      lnFUserFldRef@1000000008 : FieldRef;
    BEGIN
      ///<summary>Validating user name</summary>

      lUserName := DELCHR(UPPERCASE(Rec."nF. User Name"), '<>', ' ');
      IF (lUserName <> '') THEN
      BEGIN
        lFieldIds := lFieldIds.List();
        lFieldIds.Add(NfUser.FIELDNO("User Name"));
        lFieldIds.Add(NfUser.FIELDNO("Short User ID"));
        lFieldIds.Add(NfUser.FIELDNO("User ID"));

        CreateFilterTemplates();

        lFound := FALSE;
        FOREACH lFieldId IN lFieldIds DO
        BEGIN
          NfUser.RESET();
          CASE (lFieldId) OF
            NfUser.FIELDNO("User Name"): NfUser.SETCURRENTKEY("User Name");
            NfUser.FIELDNO("Short User ID"): NfUser.SETCURRENTKEY("Short User ID");
            NfUser.FIELDNO("User ID"): NfUser.SETCURRENTKEY("User ID");
          END;
          lnFUserRecRef.GETTABLE(NfUser);
          lnFUserFldRef := lnFUserRecRef.FIELD(lFieldId);
          FilterTemplates.RESET();
          IF (FilterTemplates.FINDSET()) THEN
          REPEAT
            lnFUserFldRef.SETFILTER(STRSUBSTNO(FilterTemplates.GetText(), lUserName));
            lFound := lnFUserRecRef.FINDFIRST();
            IF (lFound) THEN
              lnFUserRecRef.SETTABLE(NfUser);
          UNTIL ((FilterTemplates.NEXT() = 0) OR (lFound));
          IF (lFound) THEN
            BREAK;
        END;

        IF (lFound) THEN
        BEGIN
          Rec."nF. User ID" := NfUser.ID;
          Rec."nF. User Name" := NfUser."User Name"
        END
        ELSE
          ERROR(eUnknownUser, Rec."nF. User Name");
      END
      ELSE
        Rec."nF. User ID" := 0;
    END;

    LOCAL PROCEDURE UserLookup@1000000020() : Boolean;
    BEGIN
      ///<summary>Performing user lookup</summary>

      NfUser.RESET();
      IF (Rec."nF. User ID" <> 0) THEN
        IF (NfUser.GET(Rec."nF. User ID")) THEN;
      IF (PAGE.RUNMODAL(0, NfUser) = ACTION::LookupOK) THEN
        Rec.VALIDATE("nF. User ID", NfUser.ID);
    END;

    LOCAL PROCEDURE ValidateCompanyName@1000000003();
    VAR
      lCompanyName@1000000000 : Text;
      lFound@1000000001 : Boolean;
      eUnknownCompany@1000000002 : TextConst 'ENU=The system can''t find a company: "%1".;ENG=The system can''t find a company: "%1".';
    BEGIN
      ///<summary>Validating company name</summary>

      lCompanyName := DELCHR(UPPERCASE(Rec."nF. Company Name"), '<>', ' ');
      IF (lCompanyName <> '') THEN
      BEGIN
        CreateFilterTemplates();

        NfCompany.RESET();
        NfCompany.SETCURRENTKEY(Name);
        FilterTemplates.RESET();
        IF (FilterTemplates.FINDSET()) THEN
        REPEAT
          NfCompany.SETFILTER(Name, STRSUBSTNO(FilterTemplates.GetText(), lCompanyName));
          lFound := NfCompany.FINDFIRST();
        UNTIL ((FilterTemplates.NEXT() = 0) OR (lFound));

        IF (lFound) THEN
        BEGIN
          Rec."nF. Company ID" := NfCompany.ID;
          Rec."nF. Company Name" := NfCompany.Name;
        END
        ELSE
          ERROR(eUnknownCompany, Rec."nF. Company Name");
      END
      ELSE
        Rec."nF. User ID" := 0;
    END;

    LOCAL PROCEDURE CompanyLookup@1000000021();
    BEGIN
      ///<summary>Performing company lookup</summary>

      NfCompany.RESET();
      IF (Rec."nF. Company ID" <> 0) THEN
        IF (NfCompany.GET(Rec."nF. Company ID")) THEN;
      IF (PAGE.RUNMODAL(0, NfCompany) = ACTION::LookupOK) THEN
        Rec.VALIDATE("nF. Company ID", NfCompany.ID);
    END;

    LOCAL PROCEDURE CreateFilterTemplates@1000000007();
    BEGIN
      ///<summary>Creating filter templates</summary>

      IF ( NOT (FilterTemplates.ISEMPTY())) THEN
        EXIT;

      FilterTemplates.Add('@%1');
      FilterTemplates.Add('@%1*');
      FilterTemplates.Add('@*%1*');
    END;

    PROCEDURE ClearResult@1000000004();
    BEGIN
      ///<summary>Clearing result buffer</summary>

      NfExplainPermissionResult.RESET();
      NfExplainPermissionResult.DELETEALL();
      CLEAR(NfExplainPermissionResult);
    END;

    PROCEDURE AddToResult@1000000002(pText@1000000000 : Text;pDetails@1000000003 : Text;pParentTableId@1000000001 : Integer;pParentId@1000000002 : Integer);
    BEGIN
      ///<summary>Adding another entry to result buffer</summary>
      ///<param name="pText">Result text</param>
      ///<param name="pDetails">Result details</param>
      ///<param name="pParentTableId">Parent table ID</param>
      ///<param name="pParentId">Parent ID</param>

      NfExplainPermissionResult.Add(pText, pDetails, pParentTableId, pParentId);
    END;

    PROCEDURE GetResult@1000000001(VAR pNfExplainPermissionResult@1000000000 : Record 9086974);
    BEGIN
      ///<summary>Returning result (through temporary table copying)</summary>
      ///<param name="pNfExplainPermissionResult">Target buffer</param>

      pNfExplainPermissionResult.COPY(NfExplainPermissionResult, TRUE);
    END;

    PROCEDURE SetResult@1000000006(VAR pNfExplainPermissionResult@1000000000 : Record 9086974);
    BEGIN
      ///<summary>Setting result (through temporary table copying)</summary>
      ///<param name="pNfExplainPermissionResult">Target buffer</param>

      NfExplainPermissionResult.COPY(pNfExplainPermissionResult, TRUE);
    END;

    PROCEDURE CloneTo@1000000005(VAR pNfExplainPermissionContext@1000000000 : Record 9086973);
    BEGIN
      ///<summary>Cloning the current record to record provided</summary>
      ///<param name="pNfExplainPermissionContext">Destination context</param>

      pNfExplainPermissionContext := Rec;
      pNfExplainPermissionContext.SetResult(NfExplainPermissionResult);
    END;

    BEGIN
    {
      ///<summary>Context for "Explain Permission" functionality of nForcement</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-10-23">Created</change>
      ///<change version="NF2016.17.11" initials="JH" date="2016-11-14">Details added</change>
    }
    END.
  }
}

