OBJECT Codeunit 9062429 OCR Engine
{
  OBJECT-PROPERTIES
  {
    Date=14/07/16;
    Time=12:35:03 PM;
    Version List=NH2016.16;
  }
  PROPERTIES
  {
    OnRun=VAR
            OutputFileExtension@1000000001 : 'txt,rtf,docx,xlsx,pptx,pdfSearchable,pdfTextAndImages,xml';
          BEGIN
          END;

  }
  CODE
  {
    VAR
      Logger@1000000000 : Record 9062280;
      UnitTestFinisehed@1000000001 : TextConst 'ENU=Unit Test Finished;ENG=Unit Test Finished';

    PROCEDURE RecogniseFile@1000000001(FilePath@1000000000 : Text;OutputFolderPath@1000000001 : Text;OutputFileExtension@1000000002 : 'txt,rtf,docx,xlsx,pptx,pdfSearchable,pdfTextAndImages,xml') Success : Boolean;
    VAR
      ProcessDotNetStartInfo@1000000010 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.ProcessStartInfo";
      ProcessDotNetStartInfoClient@1000000009 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.ProcessStartInfo" RUNONCLIENT;
      ProcessDotNet@1000000008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process";
      ProcessDotNetClient@1000000007 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      StdOut_Stream@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      StdOut_Stream_Client@1000000005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader" RUNONCLIENT;
      StdErr_Stream@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      StdErr_Stream_Client@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader" RUNONCLIENT;
      FileSystem@1000000011 : Codeunit 9062264;
      OCRApp@1000000012 : Text;
      OCRAppParams@1000000013 : Text;
      StdErr_Text@1000000014 : Text;
      ResultText@1000000015 : Text;
      StdOut_Text@1000000016 : Text;
      TxtDidNotFinish@1000000017 : TextConst 'ENU=Process did not finish reading barcode;ENG=Process did not finish reading barcode';
      Folder@1000000018 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory";
      File@1000000019 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      SysBehaviour@1000000020 : Record 9062230;
      UseSDK@1000000021 : Boolean;
      FineReaderEngineManagement@1000000022 : Codeunit 9062525;
      OutputPath@1000000023 : Text;
      eOcrAppNotFound@1000000024 : TextConst 'ENU=OCR APP not found at: %1;ENG=OCR APP not found at: %1';
      eError@1000000025 : TextConst 'ENU=Error with: %1;ENG=Error with: %1';
      eError2@1000000026 : TextConst 'ENU=Other Error with: %1;ENG=Other Error with: %1';
    BEGIN
      UseSDK := SysBehaviour.GetBoolean('USE_ABBYY_SDK');

      IF UseSDK THEN BEGIN
        FineReaderEngineManagement.Initialize('SWED11110003837983150653');

        CASE OutputFileExtension OF
             OutputFileExtension::txt : BEGIN
                                          OutputPath += OutputFolderPath;
                                          OutputPath += '\' + FileSystem.GetFileNameWithoutExtension(FALSE,FilePath);
                                          OutputPath += '.' + FORMAT(OutputFileExtension::txt);
                                          FineReaderEngineManagement.ImageToText(FilePath,OutputPath);
                                        END;
             OutputFileExtension::xlsx : BEGIN
                                          OutputPath += OutputFolderPath;
                                          OutputPath += '\' + FileSystem.GetFileNameWithoutExtension(FALSE,FilePath);
                                          OutputPath += '.' + FORMAT(OutputFileExtension::txt);
                                          FineReaderEngineManagement.ImageToXlsx(FilePath,OutputPath);
                                        END;

             OutputFileExtension::docx : BEGIN
                                          OutputPath += OutputFolderPath;
                                          OutputPath += '\' + FileSystem.GetFileNameWithoutExtension(FALSE,FilePath);
                                          OutputPath += '.' + FORMAT(OutputFileExtension::txt);
                                          FineReaderEngineManagement.ImageToDocx(FilePath,OutputPath);
                                        END;

             OutputFileExtension::pdfTextAndImages : BEGIN
                                          OutputPath += OutputFolderPath;
                                          OutputPath += '\' + FileSystem.GetFileNameWithoutExtension(FALSE,FilePath);
                                          OutputPath += '.' + FORMAT(OutputFileExtension::txt);
                                          FineReaderEngineManagement.ImageToPdf(FilePath,OutputPath);
                                        END;

             OutputFileExtension::xml : BEGIN
                                          OutputPath += OutputFolderPath;
                                          OutputPath += '\' + FileSystem.GetFileNameWithoutExtension(FALSE,FilePath);
                                          OutputPath += '.' + FORMAT(OutputFileExtension::txt);
                                          FineReaderEngineManagement.ImageToXml(FilePath,OutputPath);
                                        END;

        END;
        FineReaderEngineManagement.Dispose();
        EXIT(TRUE);
      END;

      //DOC NA2016.16 >>
      ProcessFileWithCloudSdk(FilePath, OutputFolderPath, OutputFileExtension);
      EXIT(TRUE);

      {
      //old code disabled

      OCRApp := SysBehaviour.GetText('OCR_APPLICATION');

      IF NOT File.Exists(OCRApp) THEN
      BEGIN
        Logger.Log('INV_MATCH',Logger.Type::Error,STRSUBSTNO(eOcrAppNotFound,OCRApp),USERID);
        EXIT;
      END;

      OCRAppParams := STRSUBSTNO('--lang=English --out=' + FORMAT(OutputFileExtension) + ' "%1" "%2"',FilePath,OutputFolderPath);

      IF NOT FileSystem.FileExists(FALSE,OCRApp) THEN EXIT(FALSE);
      ProcessDotNetStartInfo := ProcessDotNetStartInfo.ProcessStartInfo(OCRApp,OCRAppParams);
      ProcessDotNetStartInfo.UseShellExecute(FALSE);
      ProcessDotNetStartInfo.CreateNoWindow(FALSE);
      ProcessDotNetStartInfo.RedirectStandardOutput(TRUE);
      ProcessDotNetStartInfo.RedirectStandardError(TRUE);

      ProcessDotNet := ProcessDotNet.Start(ProcessDotNetStartInfo);
      ProcessDotNet.WaitForExit;
       IF ProcessDotNet.HasExited THEN BEGIN
        IF ProcessDotNet.ExitCode <> 0 THEN BEGIN
          StdErr_Stream := ProcessDotNet.StandardError;
          StdErr_Text := COPYSTR(StdErr_Stream.ReadLine,1,MAXSTRLEN(StdErr_Text));
          ResultText := StdErr_Text;
          MESSAGE(eError,ResultText);
          EXIT(FALSE);
         END ELSE BEGIN
          StdOut_Stream := ProcessDotNet.StandardOutput;
          StdOut_Text := COPYSTR(StdOut_Stream.ReadLine,1,MAXSTRLEN(StdOut_Text));
          ResultText := StdOut_Text;
          EXIT(TRUE);
         END;
       END ELSE BEGIN
        ResultText := TxtDidNotFinish;
        MESSAGE(eError2, ResultText);
        EXIT(FALSE);
      END;
      }
      //DOC NA2016.16 <<
    END;

    PROCEDURE ProcessFileWithCloudSdk@1000000000(FilePath@1000000002 : Text;OutputFolderPath@1000000001 : Text;OutputFileExtension@1000000000 : 'txt,rtf,docx,xlsx,pptx,pdfSearchable,pdfTextAndImages,xml');
    VAR
      SystemB@1000000004 : Record 9062230;
      CloudOcrSdk@1000000003 : DotNet "'TheNavPeople.AbbyyCloudOcr.9.0.0.0, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7af7566192654ba9'.TheNavPeople.AbbyyCloudOcr.OcrService";
      OcrApplicationId@1000000005 : Text;
      OcrApplicationPassword@1000000006 : Text;
    BEGIN

      OcrApplicationId := SystemB.GetText('OCR_APP_ID');
      OcrApplicationPassword := SystemB.GetText('OCR_APP_PASSWORD');

      //CloudOcrSdk.InitApplication('TheNavPeople', 'jlZgdNFT4vNi3p4n+nRJaOfh');

      CloudOcrSdk := CloudOcrSdk.OcrService();
      CloudOcrSdk.InitApplication(OcrApplicationId, OcrApplicationPassword);
      CloudOcrSdk.InitSettings('english', FORMAT(OutputFileExtension), 'textExtraction');
      //CloudOcrSdk.ProcessFile(Path.Combine(path, fileName), Path.Combine(path, fileName + ".txt"));
      CloudOcrSdk.BatchProcessFiles(FilePath, OutputFolderPath);

      IF (CloudOcrSdk.WasError) THEN
        ERROR(CloudOcrSdk.LastErrorMessage);
    END;

    BEGIN
    {
      //DOC NA2015.4  JH 28/12/2014 - System behaviours renamed
      //DOC NA2015.7  AP 14/05/2015 - Added Abbyy SDK Integration
      //DOC NA2015.8  AP 14/05/2015 - Fixes
      //DOC NA2016.10 JH 01/10/2015 - Upgraded to 2016
      //DOC NA2016.15 JH 18/04/2016 - CfMD amendments
      //DOC NA2016.16 AZ 06/05/2016 - Abbyy Cloud SDK library support added
      //DOC NA2016.16 AZ 24/05/2016 - CfMD amendments
    }
    END.
  }
}

