OBJECT Page 9803 Permissions
{
  OBJECT-PROPERTIES
  {
    Date=23/10/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.43402;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Permissions;
               ENG=Permissions];
    SourceTable=Table2000000005;
    DelayedInsert=Yes;
    PopulateAllFields=Yes;
    DataCaptionFields=Object Type,Object Name;
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Read,Insert,Modify,Delete,Execute;
                                ENG=New,Process,Report,Read,Insert,Modify,Delete,Execute];
    ShowFilter=Yes;
    OnOpenPage=VAR
                 PermissionSet@1000 : Record 2000000004;
               BEGIN
                 IF CurrentRoleID = '' THEN
                   IF GETFILTER("Role ID") <> '' THEN
                     CurrentRoleID := GETRANGEMIN("Role ID")
                   ELSE
                     IF PermissionSet.FINDFIRST THEN
                       CurrentRoleID := PermissionSet."Role ID";
                 RESET;
                 FillTempPermissions;
               END;

    OnClosePage=BEGIN
                  IF NOT CodeCoverageRunning THEN
                    EXIT;
                  UNBINDSUBSCRIPTION(LogTablePermissions);
                  CodeCoverageMgt.Stop;
                END;

    OnAfterGetRecord=BEGIN
                       SetObjectZeroName(Rec);
                       ZeroObjStyleExpr := "Object ID" = 0;
                       IsValidatedObjectID := FALSE;
                       IsNewRecord := FALSE;
                     END;

    OnNewRecord=BEGIN
                  ActivateControls;
                  PermissionRecExists := FALSE;
                  IsNewRecord := TRUE;
                  IsValidatedObjectID := FALSE;
                END;

    OnInsertRecord=VAR
                     Permission@1000 : Record 2000000005;
                   BEGIN
                     IF ("Object ID" = 0) AND ((Show = Show::All) OR IsValidatedObjectID) THEN
                       EXIT(FALSE);
                     IF ("Execute Permission" = "Execute Permission"::" ") AND
                        ("Read Permission" = "Read Permission"::" ") AND
                        ("Insert Permission" = "Insert Permission"::" ") AND
                        ("Modify Permission" = "Modify Permission"::" ") AND
                        ("Delete Permission" = "Delete Permission"::" ")
                     THEN
                       EXIT(FALSE);

                     IF "Object Type" = "Object Type"::"Table Data" THEN
                       "Execute Permission" := "Execute Permission"::" "
                     ELSE BEGIN
                       "Read Permission" := "Read Permission"::" ";
                       "Insert Permission" := "Insert Permission"::" ";
                       "Modify Permission" := "Modify Permission"::" ";
                       "Delete Permission" := "Delete Permission"::" ";
                     END;
                     Permission := Rec;
                     Permission.INSERT;
                     IF AddRelatedTables THEN
                       DoAddRelatedTables(Rec);
                     Rec := Permission;
                     SetObjectZeroName(Rec);
                     PermissionRecExists := TRUE;
                     IsNewRecord := FALSE;
                     ZeroObjStyleExpr := "Object ID" = 0;
                     EXIT(TRUE);
                   END;

    OnModifyRecord=BEGIN
                     ModifyRecord(Rec);
                     PermissionRecExists := TRUE;
                     IsNewRecord := FALSE;
                     EXIT(MODIFY);
                   END;

    OnDeleteRecord=VAR
                     Permission@1000 : Record 2000000005;
                   BEGIN
                     IF (Show = Show::All) AND ("Object ID" <> 0) THEN
                       EXIT(FALSE);
                     Permission := Rec;
                     Permission.FIND;
                     EXIT(Permission.DELETE);
                   END;

    OnAfterGetCurrRecord=VAR
                           Permission@1000 : Record 2000000005;
                         BEGIN
                           ActivateControls;
                           SetObjectZeroName(Rec);
                           IF NOT IsNewRecord THEN BEGIN
                             Permission := Rec;
                             PermissionRecExists := Permission.FIND;
                           END ELSE
                             PermissionRecExists := FALSE;
                           AllowChangePrimaryKey := NOT PermissionRecExists AND (Show = Show::"Only In Permission Set");
                           ZeroObjStyleExpr := PermissionRecExists AND ("Object ID" = 0);
                         END;

    ActionList=ACTIONS
    {
      { 12      ;    ;ActionContainer;
                      CaptionML=[ENU=Set Permission;
                                 ENG=Set Permission];
                      ActionContainerType=ActionItems }
      { 18      ;1   ;ActionGroup;
                      CaptionML=[ENU=Read Permission;
                                 ENG=Read Permission];
                      ActionContainerType=NewDocumentItems;
                      Image=Ledger }
      { 41      ;2   ;ActionGroup;
                      CaptionML=[ENU=Allow Read;
                                 ENG=Allow Read];
                      Image=Confirm }
      { 16      ;3   ;Action    ;
                      Name=AllowReadYes;
                      CaptionML=[ENU=Yes;
                                 ENG=Yes];
                      Image=Approve;
                      OnAction=BEGIN
                                 UpdateSelected('R',"Read Permission"::Yes);
                               END;
                                }
      { 15      ;3   ;Action    ;
                      Name=AllowReadNo;
                      CaptionML=[ENU=No;
                                 ENG=No];
                      Image=Reject;
                      OnAction=BEGIN
                                 UpdateSelected('R',"Read Permission"::" ");
                               END;
                                }
      { 17      ;3   ;Action    ;
                      Name=AllowReadIndirect;
                      CaptionML=[ENU=Indirect;
                                 ENG=Indirect];
                      Image=Indent;
                      OnAction=BEGIN
                                 UpdateSelected('R',"Read Permission"::Indirect);
                               END;
                                }
      { 22      ;1   ;ActionGroup;
                      CaptionML=[ENU=Insert Permission;
                                 ENG=Insert Permission];
                      ActionContainerType=NewDocumentItems;
                      Image=FiledPosted }
      { 43      ;2   ;ActionGroup;
                      CaptionML=[ENU=Allow Insertion;
                                 ENG=Allow Insertion];
                      Image=Confirm }
      { 20      ;3   ;Action    ;
                      Name=AllowInsertYes;
                      CaptionML=[ENU=Yes;
                                 ENG=Yes];
                      Image=Approve;
                      OnAction=BEGIN
                                 UpdateSelected('I',"Insert Permission"::Yes);
                               END;
                                }
      { 21      ;3   ;Action    ;
                      Name=AllowInsertNo;
                      CaptionML=[ENU=No;
                                 ENG=No];
                      Image=Reject;
                      OnAction=BEGIN
                                 UpdateSelected('I',"Insert Permission"::" ");
                               END;
                                }
      { 19      ;3   ;Action    ;
                      Name=AllowInsertIndirect;
                      CaptionML=[ENU=Indirect;
                                 ENG=Indirect];
                      Image=Indent;
                      OnAction=BEGIN
                                 UpdateSelected('I',"Insert Permission"::Indirect);
                               END;
                                }
      { 26      ;1   ;ActionGroup;
                      CaptionML=[ENU=Modify Permission;
                                 ENG=Modify Permission];
                      ActionContainerType=NewDocumentItems;
                      Image=Statistics }
      { 44      ;2   ;ActionGroup;
                      CaptionML=[ENU=Allow Modification;
                                 ENG=Allow Modification];
                      Image=Confirm }
      { 24      ;3   ;Action    ;
                      Name=AllowModifyYes;
                      CaptionML=[ENU=Yes;
                                 ENG=Yes];
                      Image=Approve;
                      OnAction=BEGIN
                                 UpdateSelected('M',"Modify Permission"::Yes);
                               END;
                                }
      { 25      ;3   ;Action    ;
                      Name=AllowModifyNo;
                      CaptionML=[ENU=No;
                                 ENG=No];
                      Image=Reject;
                      OnAction=BEGIN
                                 UpdateSelected('M',"Modify Permission"::" ");
                               END;
                                }
      { 23      ;3   ;Action    ;
                      Name=AllowModifyIndirect;
                      CaptionML=[ENU=Indirect;
                                 ENG=Indirect];
                      Image=Indent;
                      OnAction=BEGIN
                                 UpdateSelected('M',"Modify Permission"::Indirect);
                               END;
                                }
      { 30      ;1   ;ActionGroup;
                      CaptionML=[ENU=Delete Permission;
                                 ENG=Delete Permission];
                      ActionContainerType=NewDocumentItems;
                      Image=Transactions }
      { 45      ;2   ;ActionGroup;
                      CaptionML=[ENU=Allow Deletion;
                                 ENG=Allow Deletion];
                      Image=Confirm }
      { 28      ;3   ;Action    ;
                      Name=AllowDeleteYes;
                      CaptionML=[ENU=Yes;
                                 ENG=Yes];
                      Image=Approve;
                      OnAction=BEGIN
                                 UpdateSelected('D',"Delete Permission"::Yes);
                               END;
                                }
      { 29      ;3   ;Action    ;
                      Name=AllowDeleteNo;
                      CaptionML=[ENU=No;
                                 ENG=No];
                      Image=Reject;
                      OnAction=BEGIN
                                 UpdateSelected('D',"Delete Permission"::" ");
                               END;
                                }
      { 27      ;3   ;Action    ;
                      Name=AllowDeleteIndirect;
                      CaptionML=[ENU=Indirect;
                                 ENG=Indirect];
                      Image=Indent;
                      OnAction=BEGIN
                                 UpdateSelected('D',"Delete Permission"::Indirect);
                               END;
                                }
      { 33      ;1   ;ActionGroup;
                      CaptionML=[ENU=Execute Permission;
                                 ENG=Execute Permission];
                      ActionContainerType=NewDocumentItems;
                      Image=Transactions }
      { 46      ;2   ;ActionGroup;
                      CaptionML=[ENU=Allow Execution;
                                 ENG=Allow Execution];
                      Image=Confirm }
      { 31      ;3   ;Action    ;
                      Name=AllowExecuteYes;
                      CaptionML=[ENU=Yes;
                                 ENG=Yes];
                      Image=Approve;
                      OnAction=BEGIN
                                 UpdateSelected('X',"Execute Permission"::Yes);
                               END;
                                }
      { 32      ;3   ;Action    ;
                      Name=AllowExecuteNo;
                      CaptionML=[ENU=No;
                                 ENG=No];
                      Image=Reject;
                      OnAction=BEGIN
                                 UpdateSelected('X',"Execute Permission"::" ");
                               END;
                                }
      { 14      ;3   ;Action    ;
                      Name=AllowExecuteIndirect;
                      CaptionML=[ENU=Indirect;
                                 ENG=Indirect];
                      Image=Indent;
                      OnAction=BEGIN
                                 UpdateSelected('X',"Execute Permission"::Indirect);
                               END;
                                }
      { 37      ;1   ;ActionGroup;
                      CaptionML=[ENU=All Permissions;
                                 ENG=All Permissions];
                      ActionContainerType=NewDocumentItems;
                      Image=Transactions }
      { 47      ;2   ;ActionGroup;
                      CaptionML=[ENU=Allow All;
                                 ENG=Allow All];
                      Image=Confirm }
      { 35      ;3   ;Action    ;
                      Name=AllowAllYes;
                      CaptionML=[ENU=Yes;
                                 ENG=Yes];
                      Image=Approve;
                      OnAction=BEGIN
                                 UpdateSelected('*',"Read Permission"::Yes);
                               END;
                                }
      { 36      ;3   ;Action    ;
                      Name=AllowAllNo;
                      CaptionML=[ENU=No;
                                 ENG=No];
                      Image=Reject;
                      OnAction=BEGIN
                                 UpdateSelected('*',"Read Permission"::" ");
                               END;
                                }
      { 34      ;3   ;Action    ;
                      Name=AllowAllIndirect;
                      CaptionML=[ENU=Indirect;
                                 ENG=Indirect];
                      Image=Indent;
                      OnAction=BEGIN
                                 UpdateSelected('*',"Read Permission"::Indirect);
                               END;
                                }
      { 52      ;1   ;ActionGroup;
                      CaptionML=[ENU=Manage Permission Sets;
                                 ENG=Manage Permission Sets] }
      { 54      ;2   ;Action    ;
                      Name=AddRelatedTablesAction;
                      CaptionML=[ENU=Add Read Permission to Related Tables;
                                 ENG=Add Read Permission to Related Tables];
                      Image=Relationship;
                      OnAction=BEGIN
                                 AddRelatedTablesToSelected;
                               END;
                                }
      { 53      ;2   ;Action    ;
                      Name=IncludeExclude;
                      CaptionML=[ENU=Include/Exclude Permission Set;
                                 ENG=Include/Exclude Permission Set];
                      Promoted=Yes;
                      Image=Edit;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 AddSubtractPermissionSet@1000 : Report 9000;
                               BEGIN
                                 AddSubtractPermissionSet.SetDestination(CurrentRoleID);
                                 AddSubtractPermissionSet.RUNMODAL;
                                 FillTempPermissions;
                               END;
                                }
      { 51      ;1   ;ActionGroup;
                      Name=Code Coverage Actions;
                      CaptionML=[ENU=Record Permissions;
                                 ENG=Record Permissions];
                      ActionContainerType=ActionItems }
      { 50      ;2   ;Action    ;
                      Name=Start;
                      CaptionML=[ENU=Start;
                                 ENG=Start];
                      Enabled=NOT CodeCoverageRunning;
                      Image=Start;
                      OnAction=BEGIN
                                 IF NOT CONFIRM(StartRecordingQst) THEN
                                   EXIT;
                                 LogTablePermissions.Init;
                                 BINDSUBSCRIPTION(LogTablePermissions);
                                 CodeCoverageMgt.Start(FALSE);
                                 CodeCoverageRunning := TRUE;
                               END;
                                }
      { 48      ;2   ;Action    ;
                      Name=Stop;
                      CaptionML=[ENU=Stop;
                                 ENG=Stop];
                      Enabled=CodeCoverageRunning;
                      Image=Stop;
                      OnAction=BEGIN
                                 UNBINDSUBSCRIPTION(LogTablePermissions);
                                 CodeCoverageMgt.Stop;
                                 CodeCoverageRunning := FALSE;
                                 IF NOT CONFIRM(AddPermissionsQst) THEN
                                   EXIT;
                                 AddCodeCoveragePermissions;
                                 AddLoggedPermissions;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 38  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General];
                GroupType=Group }

    { 42  ;2   ;Group     ;
                GroupType=Group }

    { 39  ;3   ;Field     ;
                Name=CurrentRoleID;
                CaptionML=[ENU=Role ID;
                           ENG=Role ID];
                SourceExpr=CurrentRoleID;
                TableRelation="Permission Set"."Role ID";
                Importance=Promoted;
                OnValidate=BEGIN
                             FillTempPermissions;
                           END;
                            }

    { 40  ;3   ;Field     ;
                Name=Show;
                CaptionML=[ENU=Show;
                           ENG=Show];
                OptionCaptionML=[ENU=Only In Permission Set,All;
                                 ENG=Only In Permission Set,All];
                SourceExpr=Show;
                OnValidate=BEGIN
                             FillTempPermissions;
                           END;
                            }

    { 49  ;2   ;Field     ;
                Name=AddRelatedTables;
                CaptionML=[ENU=Add Read Permission to Related Tables;
                           ENG=Add Read Permission to Related Tables];
                SourceExpr=AddRelatedTables }

    { 2   ;1   ;Group     ;
                Name=Group;
                CaptionML=[ENU=AllPermission;
                           ENG=AllPermission];
                GroupType=Repeater }

    { 13  ;2   ;Field     ;
                Name=PermissionSet;
                CaptionML=[ENU=Permission Set;
                           ENG=Permission Set];
                SourceExpr="Role ID";
                Visible=FALSE;
                Enabled=FALSE }

    { 11  ;2   ;Field     ;
                SourceExpr="Object Type";
                Enabled=AllowChangePrimaryKey;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr;
                OnValidate=BEGIN
                             ActivateControls;
                           END;
                            }

    { 10  ;2   ;Field     ;
                SourceExpr="Object ID";
                Enabled=AllowChangePrimaryKey;
                LookupPageID=All Objects;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr;
                OnValidate=BEGIN
                             IsValidatedObjectID := FALSE;
                             ActivateControls;
                           END;
                            }

    { 9   ;2   ;Field     ;
                SourceExpr="Object Name";
                Editable=FALSE;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr }

    { 8   ;2   ;Field     ;
                SourceExpr="Read Permission";
                Enabled=IsTableData;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr }

    { 7   ;2   ;Field     ;
                SourceExpr="Insert Permission";
                Enabled=IsTableData;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr }

    { 6   ;2   ;Field     ;
                SourceExpr="Modify Permission";
                Enabled=IsTableData;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr }

    { 5   ;2   ;Field     ;
                SourceExpr="Delete Permission";
                Enabled=IsTableData;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr }

    { 4   ;2   ;Field     ;
                SourceExpr="Execute Permission";
                Enabled=NOT IsTableData;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr }

    { 3   ;2   ;Field     ;
                SourceExpr="Security Filter";
                Enabled=IsTableData;
                Style=Strong;
                StyleExpr=ZeroObjStyleExpr;
                OnAssistEdit=VAR
                               TableFilter@1000 : Record 9805;
                               TableFilterPage@1001 : Page 9805;
                             BEGIN
                               TableFilter.FILTERGROUP(2);
                               TableFilter.SETRANGE("Table Number","Object ID");
                               TableFilter.FILTERGROUP(0);
                               TableFilterPage.SETTABLEVIEW(TableFilter);
                               TableFilterPage.SetSourceTable(FORMAT("Security Filter"),"Object ID","Object Name");
                               IF ACTION::OK = TableFilterPage.RUNMODAL THEN
                                 EVALUATE("Security Filter",TableFilterPage.CreateTextTableFilter(FALSE));
                             END;
                              }

  }
  CODE
  {
    VAR
      CodeCoverageMgt@1003 : Codeunit 9990;
      LogTablePermissions@1013 : Codeunit 9800;
      CurrentRoleID@1000 : Code[20];
      Show@1002 : 'Only In Permission Set,All';
      AddRelatedTables@1006 : Boolean;
      IsTableData@1001 : Boolean INDATASET;
      IsNewRecord@1010 : Boolean;
      IsValidatedObjectID@1012 : Boolean;
      PermissionRecExists@1008 : Boolean;
      AllowChangePrimaryKey@1004 : Boolean;
      CodeCoverageRunning@1005 : Boolean;
      AddPermissionsQst@1007 : TextConst 'ENU=Do you want to add the recorded permissions?;ENG=Do you want to add the recorded permissions?';
      StartRecordingQst@1014 : TextConst 'ENU=The recording partly depends on setup data that is being cached. To clear the cache and thus to record all table updates, you can reopen the company before starting the recorder.\\Do you want to start the recording now?;ENG=The recording partly depends on setup data that is being cached. To clear the cache and thus to record all table updates, you can reopen the company before starting the recorder.\\Do you want to start the recording now?';
      AllObjTxt@1009 : TextConst '@@@="%1= type name, e.g. Table Data or Report or Page";ENU=All objects of type %1;ENG=All objects of type %1';
      ZeroObjStyleExpr@1011 : Boolean;

    LOCAL PROCEDURE FillTempPermissions@1003();
    VAR
      TempPermission@1000 : TEMPORARY Record 2000000005;
      Permission@1002 : Record 2000000005;
    BEGIN
      TempPermission.COPY(Rec,TRUE);
      TempPermission.RESET;
      TempPermission.DELETEALL;
      FILTERGROUP(2);
      SETRANGE("Role ID",CurrentRoleID);
      Permission.SETRANGE("Role ID",CurrentRoleID);
      FILTERGROUP(0);

      IF Permission.FIND('-') THEN
        REPEAT
          TempPermission := Permission;
          TempPermission.INSERT;
        UNTIL Permission.NEXT = 0;

      IF Show = Show::All THEN
        FillTempPermissionsForAllObjects(TempPermission);
      IsNewRecord := FALSE;
      IF FIND('=<>') THEN;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE FillTempPermissionsForAllObjects@5(VAR Permission@1005 : Record 2000000005);
    VAR
      TempPermission@1007 : TEMPORARY Record 2000000005;
      AllObj@1006 : Record 2000000038;
    BEGIN
      AllObj.SETRANGE("Object Type");
      TempPermission.COPY(Permission,TRUE);
      TempPermission.INIT;
      IF AllObj.FINDSET THEN
        REPEAT
          TempPermission."Object Type" := AllObj."Object Type";
          TempPermission."Object ID" := AllObj."Object ID";
          TempPermission."Read Permission" := "Read Permission"::" ";
          TempPermission."Insert Permission" := "Insert Permission"::" ";
          TempPermission."Modify Permission" := "Modify Permission"::" ";
          TempPermission."Delete Permission" := "Delete Permission"::" ";
          TempPermission."Execute Permission" := "Execute Permission"::" ";
          SetObjectZeroName(TempPermission);
          IF TempPermission.INSERT THEN;
        UNTIL AllObj.NEXT = 0;
    END;

    LOCAL PROCEDURE ActivateControls@1();
    BEGIN
      IsTableData := "Object Type" = "Object Type"::"Table Data"
    END;

    LOCAL PROCEDURE ModifyRecord@59(VAR ModifiedPermission@1000 : Record 2000000005);
    VAR
      Permission@1001 : Record 2000000005;
      IsNewPermission@1003 : Boolean;
    BEGIN
      Permission.LOCKTABLE;
      IsNewPermission :=
        NOT Permission.GET(ModifiedPermission."Role ID",ModifiedPermission."Object Type",ModifiedPermission."Object ID");
      IF IsNewPermission THEN BEGIN
        Permission.TRANSFERFIELDS(ModifiedPermission,TRUE);
        Permission.INSERT;
      END ELSE BEGIN
        Permission.TRANSFERFIELDS(ModifiedPermission,FALSE);
        Permission.MODIFY;
      END;

      IF (Permission."Read Permission" = 0) AND
         (Permission."Insert Permission" = 0) AND
         (Permission."Modify Permission" = 0) AND
         (Permission."Delete Permission" = 0) AND
         (Permission."Execute Permission" = 0)
      THEN BEGIN
        Permission.DELETE;
        IF Show = Show::"Only In Permission Set" THEN
          ModifiedPermission.DELETE;
        IsNewPermission := FALSE;
      END;
      IF IsNewPermission AND AddRelatedTables THEN
        DoAddRelatedTables(ModifiedPermission);
    END;

    LOCAL PROCEDURE UpdateSelected@55(RIMDX@1000 : Text[1];PermissionOption@1001 : Option);
    VAR
      TempPermission@1003 : TEMPORARY Record 2000000005;
      OrgPermission@1002 : Record 2000000005;
    BEGIN
      OrgPermission := Rec;
      TempPermission.COPY(Rec,TRUE);
      CurrPage.SETSELECTIONFILTER(TempPermission);

      IF TempPermission.FINDSET THEN
        REPEAT
          CASE RIMDX OF
            'R':
              IF TempPermission."Object Type" = "Object Type"::"Table Data" THEN
                TempPermission."Read Permission" := PermissionOption;
            'I':
              IF TempPermission."Object Type" = "Object Type"::"Table Data" THEN
                TempPermission."Insert Permission" := PermissionOption;
            'M':
              IF TempPermission."Object Type" = "Object Type"::"Table Data" THEN
                TempPermission."Modify Permission" := PermissionOption;
            'D':
              IF TempPermission."Object Type" = "Object Type"::"Table Data" THEN
                TempPermission."Delete Permission" := PermissionOption;
            'X':
              IF TempPermission."Object Type" <> "Object Type"::"Table Data" THEN
                TempPermission."Execute Permission" := PermissionOption;
            '*':
              BEGIN
                IF TempPermission."Object Type" = "Object Type"::"Table Data" THEN BEGIN
                  TempPermission."Read Permission" := PermissionOption;
                  TempPermission."Insert Permission" := PermissionOption;
                  TempPermission."Modify Permission" := PermissionOption;
                  TempPermission."Delete Permission" := PermissionOption;
                END ELSE
                  TempPermission."Execute Permission" := PermissionOption;
              END;
          END;
          ModifyRecord(TempPermission);
          IF GET(TempPermission."Role ID",TempPermission."Object Type",TempPermission."Object ID") THEN BEGIN
            Rec := TempPermission;
            MODIFY;
          END;
        UNTIL TempPermission.NEXT = 0;

      Rec := OrgPermission;
      IF FIND THEN;
    END;

    LOCAL PROCEDURE AddRelatedTablesToSelected@8();
    VAR
      TempPermission@1003 : TEMPORARY Record 2000000005;
    BEGIN
      TempPermission.COPY(Rec,TRUE);
      CurrPage.SETSELECTIONFILTER(TempPermission);
      IF TempPermission.FINDSET THEN
        REPEAT
          DoAddRelatedTables(TempPermission);
        UNTIL TempPermission.NEXT = 0;
      IF FIND THEN;
    END;

    LOCAL PROCEDURE AddCodeCoveragePermissions@2();
    VAR
      CodeCoverage@1000 : Record 2000000049;
    BEGIN
      CodeCoverage.SETRANGE("Object Type",CodeCoverage."Object Type"::Table);
      CodeCoverage.SETRANGE("Line Type",CodeCoverage."Line Type"::Object);
      IF CodeCoverage.FINDSET THEN
        REPEAT
          AddTableDataPermission(CurrentRoleID,"Object Type"::"Table Data",CodeCoverage."Object ID",FALSE,FALSE,FALSE);
        UNTIL CodeCoverage.NEXT = 0;
      CodeCoverage.RESET;
      CodeCoverage.DELETEALL;
    END;

    LOCAL PROCEDURE AddLoggedPermissions@11();
    VAR
      TablePermissionBuffer@1000 : Record 9800;
    BEGIN
      TablePermissionBuffer.SETRANGE("Session ID",SESSIONID);
      IF TablePermissionBuffer.FINDSET THEN
        REPEAT
          AddTableDataPermission(
            CurrentRoleID,"Object Type"::"Table Data",TablePermissionBuffer."Table ID",
            TablePermissionBuffer."Insert Permission",
            TablePermissionBuffer."Modify Permission",
            TablePermissionBuffer."Delete Permission");
        UNTIL TablePermissionBuffer.NEXT = 0;
      TablePermissionBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE DoAddRelatedTables@7(VAR Permission@1000 : Record 2000000005);
    VAR
      TableRelationsMetadata@1002 : Record 2000000141;
    BEGIN
      IF Permission."Object Type" <> Permission."Object Type"::"Table Data" THEN
        EXIT;
      IF Permission."Object ID" = 0 THEN
        EXIT;

      TableRelationsMetadata.SETRANGE("Table ID",Permission."Object ID");
      TableRelationsMetadata.SETFILTER("Related Table ID",'>0&<>%1',Permission."Object ID");
      IF TableRelationsMetadata.FINDSET THEN
        REPEAT
          AddTableDataPermission(
            CurrentRoleID,"Object Type"::"Table Data",TableRelationsMetadata."Related Table ID",FALSE,FALSE,FALSE);
        UNTIL TableRelationsMetadata.NEXT = 0;
    END;

    LOCAL PROCEDURE AddTableDataPermission@12(RoleID@1000 : Code[20];ObjectType@1001 : Option;ObjectID@1002 : Integer;AddInsert@1004 : Boolean;AddModify@1005 : Boolean;AddDelete@1006 : Boolean) : Boolean;
    VAR
      Permission@1003 : Record 2000000005;
    BEGIN
      IF NOT GET(RoleID,ObjectType,ObjectID) THEN BEGIN
        INIT;
        "Role ID" := RoleID;
        "Object Type" := ObjectType;
        "Object ID" := ObjectID;
        "Insert Permission" := "Insert Permission"::" ";
        "Modify Permission" := "Modify Permission"::" ";
        "Delete Permission" := "Delete Permission"::" ";
        "Execute Permission" := "Execute Permission"::" ";
        INSERT;
        Permission.TRANSFERFIELDS(Rec,TRUE);
        Permission.INSERT;
      END;
      "Read Permission" := "Read Permission"::Yes;
      IF AddInsert THEN
        "Insert Permission" := "Insert Permission"::Yes;
      IF AddModify THEN
        "Modify Permission" := "Modify Permission"::Yes;
      IF AddDelete THEN
        "Delete Permission" := "Delete Permission"::Yes;
      SetObjectZeroName(Rec);
      MODIFY;
      Permission.LOCKTABLE;
      IF NOT Permission.GET(RoleID,ObjectType,ObjectID) THEN BEGIN
        Permission.TRANSFERFIELDS(Rec,TRUE);
        Permission.INSERT;
      END ELSE BEGIN
        Permission.TRANSFERFIELDS(Rec,FALSE);
        Permission.MODIFY;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SetObjectZeroName@9(VAR Permission@1000 : Record 2000000005);
    BEGIN
      IF Permission."Object ID" <> 0 THEN
        EXIT;
      Permission."Object Name" := COPYSTR(STRSUBSTNO(AllObjTxt,Permission."Object Type"),1,MAXSTRLEN(Permission."Object Name"));
    END;

    BEGIN
    END.
  }
}

