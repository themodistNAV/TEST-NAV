OBJECT Report 5753 Get Source Documents
{
  OBJECT-PROPERTIES
  {
    Date=09/02/17;
    Time=[ 7:48:22 AM];
    Modified=Yes;
    Version List=NAVW19.00,OP9031;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Get Source Documents;
               ENG=Get Source Documents];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  ActivitiesCreated := 0;
                  LineCreated := FALSE;
                END;

    OnPostReport=VAR
                   IntegrationProcessProcessor@1000000000 : Codeunit 50005;
                 BEGIN
                   CASE RequestType OF
                     RequestType::Receive:
                       BEGIN
                         IF DoNotFillQtytoHandle THEN BEGIN
                           WhseReceiptLine.RESET;
                           WhseReceiptLine.SETRANGE("No.",WhseReceiptHeader."No.");
                           WhseReceiptLine.DeleteQtyToReceive(WhseReceiptLine);
                         END;
                         IF NOT HideDialog THEN
                           ShowReceiptDialog;

                       END;
                     RequestType::Ship:
                       IF NOT HideDialog THEN
                         ShowShipmentDialog;
                   END;

                   //DOC OP9031 LF -
                   //IF LineCreated THEN
                   //WhseReceiptHeader.CALCFIELDS("Source Document");
                   //IF WhseReceiptHeader."Source Document" IN [WhseReceiptHeader."Source Document"::"Purchase Order",WhseReceiptHeader."Source Document"::"Sales Return Order"] THEN BEGIN
                   //  IntegrationProcessProcessor.AddPurchRecieptASN(WhseReceiptHeader);
                   //END;
                   //DOC OP9031 LF +

                   IF SkippedSourceDoc > 0 THEN
                     MESSAGE(CustomerIsBlockedMsg,SkippedSourceDoc);
                   Completed := TRUE;
                 END;

  }
  DATASET
  {
    { 9356;    ;DataItem;                    ;
               DataItemTable=Table5765;
               DataItemTableView=WHERE(Document Status=CONST(Released),
                                       Completely Handled=FILTER(No));
               OnPreDataItem=BEGIN
                               IF OneHeaderCreated THEN BEGIN
                                 CASE RequestType OF
                                   RequestType::Receive:
                                     Type := Type::Inbound;
                                   RequestType::Ship:
                                     Type := Type::Outbound;
                                 END;
                                 SETRANGE(Type,Type);
                               END;
                             END;

               OnAfterGetRecord=VAR
                                  WhseSetup@1000 : Record 5769;
                                BEGIN
                                  WhseHeaderCreated := FALSE;
                                  CASE Type OF
                                    Type::Inbound:
                                      BEGIN
                                        IF NOT Location.RequireReceive("Location Code") THEN BEGIN
                                          IF "Location Code" = '' THEN
                                            WhseSetup.TESTFIELD("Require Receive");
                                          Location.GET("Location Code");
                                          Location.TESTFIELD("Require Receive");
                                        END;
                                        IF NOT OneHeaderCreated THEN
                                          RequestType := RequestType::Receive;
                                      END;
                                    Type::Outbound:
                                      BEGIN
                                        IF NOT Location.RequireShipment("Location Code") THEN BEGIN
                                          IF "Location Code" = '' THEN
                                            WhseSetup.TESTFIELD("Require Shipment");
                                          Location.GET("Location Code");
                                          Location.TESTFIELD("Require Shipment");
                                        END;
                                        IF NOT OneHeaderCreated THEN
                                          RequestType := RequestType::Ship;
                                      END;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF WhseHeaderCreated OR OneHeaderCreated THEN BEGIN
                                  WhseShptHeader.SortWhseDoc;
                                  WhseReceiptHeader.SortWhseDoc;
                                END;
                              END;

               ReqFilterFields=Source Document,Source No. }

    { 6640;1   ;DataItem;                    ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.);
               OnPreDataItem=BEGIN
                               IF "Warehouse Request"."Source Type" <> DATABASE::"Sales Line" THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  TESTFIELD("Sell-to Customer No.");
                                  Cust.GET("Sell-to Customer No.");
                                  IF NOT SkipBlockedCustomer THEN
                                    Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
                                  SalesHeaderCounted := FALSE;
                                END;

               DataItemLink=Document Type=FIELD(Source Subtype),
                            No.=FIELD(Source No.) }

    { 2844;2   ;DataItem;                    ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               OnPreDataItem=BEGIN
                               SETRANGE(Type,Type::Item);
                               IF (("Warehouse Request".Type = "Warehouse Request".Type::Outbound) AND
                                   ("Warehouse Request"."Source Document" = "Warehouse Request"."Source Document"::"Sales Order")) OR
                                  (("Warehouse Request".Type = "Warehouse Request".Type::Inbound) AND
                                   ("Warehouse Request"."Source Document" = "Warehouse Request"."Source Document"::"Sales Return Order"))
                               THEN
                                 SETFILTER("Outstanding Quantity",'>0')
                               ELSE
                                 SETFILTER("Outstanding Quantity",'<0');
                               SETRANGE("Drop Shipment",FALSE);
                               SETRANGE("Job No.",'');
                             END;

               OnAfterGetRecord=BEGIN
                                  VerifyItemNotBlocked("No.");
                                  IF "Location Code" = "Warehouse Request"."Location Code" THEN
                                    CASE RequestType OF
                                      RequestType::Receive:
                                        IF WhseActivityCreate.CheckIfSalesLine2ReceiptLine("Sales Line") THEN BEGIN
                                          IF NOT OneHeaderCreated AND NOT WhseHeaderCreated THEN
                                            CreateReceiptHeader;
                                          IF NOT WhseActivityCreate.SalesLine2ReceiptLine(WhseReceiptHeader,"Sales Line") THEN
                                            ErrorOccured := TRUE;
                                          LineCreated := TRUE;
                                        END;
                                      RequestType::Ship:
                                        IF WhseActivityCreate.CheckIfFromSalesLine2ShptLine("Sales Line") THEN BEGIN
                                          IF Cust.Blocked <> Cust.Blocked::" " THEN BEGIN
                                            IF NOT SalesHeaderCounted THEN BEGIN
                                              SkippedSourceDoc += 1;
                                              SalesHeaderCounted := TRUE;
                                            END;
                                            CurrReport.SKIP;
                                          END;

                                          IF NOT OneHeaderCreated AND NOT WhseHeaderCreated THEN
                                            CreateShptHeader;
                                          IF NOT WhseActivityCreate.FromSalesLine2ShptLine(WhseShptHeader,"Sales Line") THEN
                                            ErrorOccured := TRUE;
                                          LineCreated := TRUE;
                                        END;
                                    END;
                                END;

               DataItemLink=Document Type=FIELD(Document Type),
                            Document No.=FIELD(No.) }

    { 4458;1   ;DataItem;                    ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(Document Type,No.);
               OnPreDataItem=BEGIN
                               IF "Warehouse Request"."Source Type" <> DATABASE::"Purchase Line" THEN
                                 CurrReport.BREAK;
                             END;

               DataItemLink=Document Type=FIELD(Source Subtype),
                            No.=FIELD(Source No.) }

    { 6547;2   ;DataItem;                    ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               OnPreDataItem=BEGIN
                               SETRANGE(Type,Type::Item);
                               IF (("Warehouse Request".Type = "Warehouse Request".Type::Inbound) AND
                                   ("Warehouse Request"."Source Document" = "Warehouse Request"."Source Document"::"Purchase Order")) OR
                                  (("Warehouse Request".Type = "Warehouse Request".Type::Outbound) AND
                                   ("Warehouse Request"."Source Document" = "Warehouse Request"."Source Document"::"Purchase Return Order"))
                               THEN
                                 SETFILTER("Outstanding Quantity",'>0')
                               ELSE
                                 SETFILTER("Outstanding Quantity",'<0');
                               SETRANGE("Drop Shipment",FALSE);
                               SETRANGE("Job No.",'');
                             END;

               OnAfterGetRecord=BEGIN
                                  VerifyItemNotBlocked("No.");
                                  IF "Location Code" = "Warehouse Request"."Location Code" THEN
                                    CASE RequestType OF
                                      RequestType::Receive:
                                        IF WhseActivityCreate.CheckIfPurchLine2ReceiptLine("Purchase Line") THEN BEGIN
                                          IF NOT OneHeaderCreated AND NOT WhseHeaderCreated THEN
                                            CreateReceiptHeader;
                                          IF NOT WhseActivityCreate.PurchLine2ReceiptLine(WhseReceiptHeader,"Purchase Line") THEN
                                            ErrorOccured := TRUE;
                                          LineCreated := TRUE;
                                        END;
                                      RequestType::Ship:
                                        IF WhseActivityCreate.CheckIfFromPurchLine2ShptLine("Purchase Line") THEN BEGIN
                                          IF NOT OneHeaderCreated AND NOT WhseHeaderCreated THEN
                                            CreateShptHeader;
                                          IF NOT WhseActivityCreate.FromPurchLine2ShptLine(WhseShptHeader,"Purchase Line") THEN
                                            ErrorOccured := TRUE;
                                          LineCreated := TRUE;
                                        END;
                                    END;
                                END;

               DataItemLink=Document Type=FIELD(Document Type),
                            Document No.=FIELD(No.) }

    { 2957;1   ;DataItem;                    ;
               DataItemTable=Table5740;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF "Warehouse Request"."Source Type" <> DATABASE::"Transfer Line" THEN
                                 CurrReport.BREAK;
                             END;

               DataItemLink=No.=FIELD(Source No.) }

    { 9370;2   ;DataItem;                    ;
               DataItemTable=Table5741;
               DataItemTableView=SORTING(Document No.,Line No.);
               OnPreDataItem=BEGIN
                               CASE "Warehouse Request"."Source Subtype" OF
                                 0:
                                   SETFILTER("Outstanding Quantity",'>0');
                                 1:
                                   SETFILTER("Qty. in Transit",'>0');
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  CASE RequestType OF
                                    RequestType::Receive:
                                      IF WhseActivityCreate.CheckIfTransLine2ReceiptLine("Transfer Line") THEN BEGIN
                                        IF NOT OneHeaderCreated AND NOT WhseHeaderCreated THEN
                                          CreateReceiptHeader;
                                        IF NOT WhseActivityCreate.TransLine2ReceiptLine(WhseReceiptHeader,"Transfer Line") THEN
                                          ErrorOccured := TRUE;
                                        LineCreated := TRUE;
                                      END;
                                    RequestType::Ship:
                                      IF WhseActivityCreate.CheckIfFromTransLine2ShptLine("Transfer Line") THEN BEGIN
                                        IF NOT OneHeaderCreated AND NOT WhseHeaderCreated THEN
                                          CreateShptHeader;
                                        IF NOT WhseActivityCreate.FromTransLine2ShptLine(WhseShptHeader,"Transfer Line") THEN
                                          ErrorOccured := TRUE;
                                        LineCreated := TRUE;
                                      END;
                                  END;
                                END;

               DataItemLink=Document No.=FIELD(No.) }

    { 1634;1   ;DataItem;                    ;
               DataItemTable=Table5900;
               DataItemTableView=SORTING(Document Type,No.);
               OnPreDataItem=BEGIN
                               IF "Warehouse Request"."Source Type" <> DATABASE::"Service Line" THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  TESTFIELD("Bill-to Customer No.");
                                  Cust.GET("Bill-to Customer No.");
                                  IF NOT SkipBlockedCustomer THEN
                                    Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE)
                                  ELSE
                                    IF Cust.Blocked <> Cust.Blocked::" " THEN
                                      CurrReport.SKIP;
                                END;

               DataItemLink=Document Type=FIELD(Source Subtype),
                            No.=FIELD(Source No.) }

    { 6560;2   ;DataItem;                    ;
               DataItemTable=Table5902;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               OnPreDataItem=BEGIN
                               SETRANGE(Type,Type::Item);
                               IF (("Warehouse Request".Type = "Warehouse Request".Type::Outbound) AND
                                   ("Warehouse Request"."Source Document" = "Warehouse Request"."Source Document"::"Service Order"))
                               THEN
                                 SETFILTER("Outstanding Quantity",'>0')
                               ELSE
                                 SETFILTER("Outstanding Quantity",'<0');
                               SETRANGE("Job No.",'');
                             END;

               OnAfterGetRecord=BEGIN
                                  IF "Location Code" = "Warehouse Request"."Location Code" THEN
                                    CASE RequestType OF
                                      RequestType::Ship:
                                        IF WhseActivityCreate.CheckIfFromServiceLine2ShptLin("Service Line") THEN BEGIN
                                          IF NOT OneHeaderCreated AND NOT WhseHeaderCreated THEN
                                            CreateShptHeader;
                                          IF NOT WhseActivityCreate.FromServiceLine2ShptLine(WhseShptHeader,"Service Line") THEN
                                            ErrorOccured := TRUE;
                                          LineCreated := TRUE;
                                        END;
                                    END;
                                END;

               DataItemLink=Document Type=FIELD(Document Type),
                            Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Do Not Fill Qty. to Handle;
                             ENG=Do Not Fill Qty. to Handle];
                  SourceExpr=DoNotFillQtytoHandle }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=There are no Warehouse Receipt Lines created.;ENG=There are no Warehouse Receipt Lines created.';
      Text001@1001 : TextConst 'ENU=%1 %2 has been created.;ENG=%1 %2 has been created.';
      WhseReceiptHeader@1015 : Record 7316;
      WhseReceiptLine@1014 : Record 7317;
      WhseShptHeader@1018 : Record 7320;
      WhseShptLine@1017 : Record 7321;
      Location@1002 : Record 14;
      Cust@1005 : Record 18;
      WhseActivityCreate@1006 : Codeunit 5750;
      ActivitiesCreated@1007 : Integer;
      OneHeaderCreated@1008 : Boolean;
      Completed@1010 : Boolean;
      LineCreated@1012 : Boolean;
      WhseHeaderCreated@1009 : Boolean;
      DoNotFillQtytoHandle@1004 : Boolean;
      HideDialog@1013 : Boolean;
      SkipBlockedCustomer@1020 : Boolean;
      SkipBlockedItem@1026 : Boolean;
      RequestType@1016 : 'Receive,Ship';
      SalesHeaderCounted@1023 : Boolean;
      SkippedSourceDoc@1024 : Integer;
      Text002@1019 : TextConst 'ENU=%1 Warehouse Receipts have been created.;ENG=%1 Warehouse Receipts have been created.';
      Text003@1003 : TextConst 'ENU=There are no Warehouse Shipment Lines created.;ENG=There are no Warehouse Shipment Lines created.';
      Text004@1011 : TextConst 'ENU=%1 Warehouse Shipments have been created.;ENG=%1 Warehouse Shipments have been created.';
      ErrorOccured@1021 : Boolean;
      Text005@1022 : TextConst 'ENU=One or more of the lines on this %1 require special warehouse handling. The %2 for such lines has been set to blank.;ENG=One or more of the lines on this %1 require special warehouse handling. The %2 for such lines has been set to blank.';
      CustomerIsBlockedMsg@1025 : TextConst 'ENU=%1 source documents were not included because the customer is blocked.;ENG=%1 source documents were not included because the customer is blocked.';

    PROCEDURE SetHideDialog@6(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    PROCEDURE SetOneCreatedShptHeader@1(WhseShptHeader2@1000 : Record 7320);
    BEGIN
      RequestType := RequestType::Ship;
      WhseShptHeader := WhseShptHeader2;
      IF WhseShptHeader.FIND THEN
        OneHeaderCreated := TRUE;
    END;

    PROCEDURE SetOneCreatedReceiptHeader@7(WhseReceiptHeader2@1000 : Record 7316);
    BEGIN
      RequestType := RequestType::Receive;
      WhseReceiptHeader := WhseReceiptHeader2;
      IF WhseReceiptHeader.FIND THEN
        OneHeaderCreated := TRUE;
    END;

    PROCEDURE SetDoNotFillQtytoHandle@3(DoNotFillQtytoHandle2@1000 : Boolean);
    BEGIN
      DoNotFillQtytoHandle := DoNotFillQtytoHandle2;
    END;

    PROCEDURE GetLastShptHeader@5(VAR WhseShptHeader2@1000 : Record 7320);
    BEGIN
      RequestType := RequestType::Ship;
      WhseShptHeader2 := WhseShptHeader;
    END;

    PROCEDURE GetLastReceiptHeader@8(VAR WhseReceiptHeader2@1000 : Record 7316);
    BEGIN
      RequestType := RequestType::Receive;
      WhseReceiptHeader2 := WhseReceiptHeader;
    END;

    PROCEDURE NotCancelled@4() : Boolean;
    BEGIN
      EXIT(Completed);
    END;

    LOCAL PROCEDURE CreateShptHeader@10();
    BEGIN
      WhseShptHeader.INIT;
      WhseShptHeader."No." := '';
      WhseShptHeader."Location Code" := "Warehouse Request"."Location Code";
      IF Location.Code = WhseShptHeader."Location Code" THEN
        WhseShptHeader."Bin Code" := Location."Shipment Bin Code";
      WhseShptLine.LOCKTABLE;
      WhseShptHeader.INSERT(TRUE);
      ActivitiesCreated := ActivitiesCreated + 1;
      WhseHeaderCreated := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateReceiptHeader@9();
    BEGIN
      WhseReceiptHeader.INIT;
      WhseReceiptHeader."No." := '';
      WhseReceiptHeader."Location Code" := "Warehouse Request"."Location Code";
      IF Location.Code = WhseReceiptHeader."Location Code" THEN
        WhseReceiptHeader."Bin Code" := Location."Receipt Bin Code";
      //DOC OP9031 LF -
      WhseReceiptHeader."Vendor No." := "Purchase Header"."Buy-from Vendor No.";
      WhseReceiptHeader."Vendor Name" := "Purchase Header"."Buy-from Vendor Name";
      //DOC OP9031 LF +
      WhseReceiptLine.LOCKTABLE;
      WhseReceiptHeader.INSERT(TRUE);
      ActivitiesCreated := ActivitiesCreated + 1;
      WhseHeaderCreated := TRUE;
      COMMIT;
    END;

    PROCEDURE SetSkipBlocked@2(Skip@1000 : Boolean);
    BEGIN
      SkipBlockedCustomer := Skip;
    END;

    PROCEDURE SetSkipBlockedItem@11(Skip@1000 : Boolean);
    BEGIN
      SkipBlockedItem := Skip;
    END;

    LOCAL PROCEDURE VerifyItemNotBlocked@12(ItemNo@1000 : Code[20]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      IF SkipBlockedItem AND Item.Blocked THEN
        CurrReport.SKIP;

      Item.TESTFIELD(Blocked,FALSE);
    END;

    PROCEDURE ShowReceiptDialog@13();
    VAR
      SpecialHandlingMessage@1000 : Text[1024];
    BEGIN
      IF NOT LineCreated THEN
        ERROR(Text000);

      IF ErrorOccured THEN
        SpecialHandlingMessage :=
          ' ' + STRSUBSTNO(Text005,WhseReceiptHeader.TABLECAPTION,WhseReceiptLine.FIELDCAPTION("Bin Code"));
      IF (ActivitiesCreated = 0) AND LineCreated AND ErrorOccured THEN
        MESSAGE(SpecialHandlingMessage);
      IF ActivitiesCreated = 1 THEN
        MESSAGE(STRSUBSTNO(Text001,ActivitiesCreated,WhseReceiptHeader.TABLECAPTION) + SpecialHandlingMessage);
      IF ActivitiesCreated > 1 THEN
        MESSAGE(STRSUBSTNO(Text002,ActivitiesCreated) + SpecialHandlingMessage);
    END;

    PROCEDURE ShowShipmentDialog@14();
    VAR
      SpecialHandlingMessage@1000 : Text[1024];
    BEGIN
      IF NOT LineCreated THEN
        ERROR(Text003);

      IF ErrorOccured THEN
        SpecialHandlingMessage :=
          ' ' + STRSUBSTNO(Text005,WhseShptHeader.TABLECAPTION,WhseShptLine.FIELDCAPTION("Bin Code"));
      IF (ActivitiesCreated = 0) AND LineCreated AND ErrorOccured THEN
        MESSAGE(SpecialHandlingMessage);
      IF ActivitiesCreated = 1 THEN
        MESSAGE(STRSUBSTNO(Text001,ActivitiesCreated,WhseShptHeader.TABLECAPTION) + SpecialHandlingMessage);
      IF ActivitiesCreated > 1 THEN
        MESSAGE(STRSUBSTNO(Text004,ActivitiesCreated) + SpecialHandlingMessage);
    END;

    BEGIN
    {
       //DOC OP9031 LF 10/11/2016 - On post report created Integration processing entry
       //DOC OP9031 LF 31/01/2017 - Copy Vendor No. and Vendor Name from Purch. Order Header to Whse. Rcpt. Header
    }
    END.
  }
  RDLDATA
  {
  }
}

