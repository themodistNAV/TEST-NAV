OBJECT Codeunit 1313 Correct Posted Purch. Invoice
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    TableNo=122;
    Permissions=TableData 122=rm,
                TableData 124=rm;
    OnRun=VAR
            PurchaseHeader@1001 : Record 38;
            CopyDocMgt@1000 : Codeunit 6620;
          BEGIN
            CLEAR(PurchaseHeader);
            PurchaseHeader."No." := '';
            PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::"Credit Memo";
            PurchaseHeader.INSERT(TRUE);
            CopyDocMgt.SetPropertiesForCreditMemoCorrection;
            CopyDocMgt.CopyPurchaseDocForInvoiceCancelling("No.",PurchaseHeader);
            PurchaseHeader."Vendor Cr. Memo No." := PurchaseHeader."Vendor Invoice No.";

            CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchaseHeader);
            SetTrackInfoForCancellation(Rec);

            COMMIT;
          END;

  }
  CODE
  {
    VAR
      PostedInvoiceIsPaidCorrectErr@1000 : TextConst 'ENU=You cannot correct this posted purchase invoice because it is fully or partially paid.\\To reverse a paid purchase invoice, you must manually create a purchase credit memo.;ENG=You cannot correct this posted purchase invoice because it is fully or partially paid.\\To reverse a paid purchase invoice, you must manually create a purchase credit memo.';
      PostedInvoiceIsPaidCCancelErr@1019 : TextConst 'ENU=You cannot cancel this posted purchase invoice because it is fully or partially paid.\\To reverse a paid purchase invoice, you must manually create a purchase credit memo.;ENG=You cannot cancel this posted purchase invoice because it is fully or partially paid.\\To reverse a paid purchase invoice, you must manually create a purchase credit memo.';
      AlreadyCorrectedErr@1001 : TextConst 'ENU=You cannot correct this posted purchase invoice because it has been canceled.;ENG=You cannot correct this posted purchase invoice because it has been cancelled.';
      AlreadyCancelledErr@1005 : TextConst 'ENU=You cannot cancel this posted purchase invoice because it has already been canceled.;ENG=You cannot cancel this posted purchase invoice because it has already been cancelled.';
      VendorIsBlockedCorrectErr@1002 : TextConst '@@@="%1 = Customer name";ENU=You cannot correct this posted purchase invoice because vendor %1 is blocked.;ENG=You cannot correct this posted purchase invoice because vendor %1 is blocked.';
      VendorIsBlockedCancelErr@1016 : TextConst '@@@="%1 = Customer name";ENU=You cannot cancel this posted purchase invoice because vendor %1 is blocked.;ENG=You cannot cancel this posted purchase invoice because vendor %1 is blocked.';
      ItemIsBlockedCorrectErr@1003 : TextConst '@@@="%1 = Item No. %2 = Item Description";ENU=You cannot correct this posted purchase invoice because item %1 %2 is blocked.;ENG=You cannot correct this posted purchase invoice because item %1 %2 is blocked.';
      ItemIsBlockedCancelErr@1017 : TextConst '@@@="%1 = Item No. %2 = Item Description";ENU=You cannot cancel this posted purchase invoice because item %1 %2 is blocked.;ENG=You cannot cancel this posted purchase invoice because item %1 %2 is blocked.';
      AccountIsBlockedCorrectErr@1018 : TextConst '@@@="%1 = Table Caption %2 = Account number.";ENU=You cannot correct this posted purchase invoice because %1 %2 is blocked.;ENG=You cannot correct this posted purchase invoice because %1 %2 is blocked.';
      AccountIsBlockedCancelErr@1025 : TextConst '@@@="%1 = Table Caption %2 = Account number.";ENU=You cannot cancel this posted purchase invoice because %1 %2 is blocked.;ENG=You cannot cancel this posted purchase invoice because %1 %2 is blocked.';
      NoFreeInvoiceNoSeriesCorrectErr@1004 : TextConst 'ENU=You cannot correct this posted purchase invoice because no unused invoice numbers are available. \\You must extend the range of the number series for purchase invoices.;ENG=You cannot correct this posted purchase invoice because no unused invoice numbers are available. \\You must extend the range of the number series for purchase invoices.';
      NoFreeInvoiceNoSeriesCancelErr@1026 : TextConst 'ENU=You cannot cancel this posted purchase invoice because no unused invoice numbers are available. \\You must extend the range of the number series for purchase invoices.;ENG=You cannot cancel this posted purchase invoice because no unused invoice numbers are available. \\You must extend the range of the number series for purchase invoices.';
      NoFreeCMSeriesCorrectErr@1013 : TextConst 'ENU=You cannot correct this posted purchase invoice because no unused credit memo numbers are available. \\You must extend the range of the number series for credit memos.;ENG=You cannot correct this posted purchase invoice because no unused credit memo numbers are available. \\You must extend the range of the number series for credit memos.';
      NoFreeCMSeriesCancelErr@1027 : TextConst 'ENU=You cannot cancel this posted purchase invoice because no unused credit memo numbers are available. \\You must extend the range of the number series for credit memos.;ENG=You cannot cancel this posted purchase invoice because no unused credit memo numbers are available. \\You must extend the range of the number series for credit memos.';
      NoFreePostCMSeriesCorrectErr@1028 : TextConst 'ENU=You cannot correct this posted purchase invoice because no unused posted credit memo numbers are available. \\You must extend the range of the number series for posted credit memos.;ENG=You cannot correct this posted purchase invoice because no unused posted credit memo numbers are available. \\You must extend the range of the number series for posted credit memos.';
      NoFreePostCMSeriesCancelErr@1029 : TextConst 'ENU=You cannot cancel this posted purchase invoice because no unused posted credit memo numbers are available. \\You must extend the range of the number series for posted credit memos.;ENG=You cannot cancel this posted purchase invoice because no unused posted credit memo numbers are available. \\You must extend the range of the number series for posted credit memos.';
      PurchaseLineFromOrderCorrectErr@1006 : TextConst '@@@="%1 = Item no. %2 = Item description";ENU=You cannot correct this posted purchase invoice because item %1 %2 is used on a purchase order.;ENG=You cannot correct this posted purchase invoice because item %1 %2 is used on a purchase order.';
      PurchaseLineFromOrderCancelErr@1030 : TextConst '@@@="%1 = Item no. %2 = Item description";ENU=You cannot cancel this posted purchase invoice because item %1 %2 is used on a purchase order.;ENG=You cannot cancel this posted purchase invoice because item %1 %2 is used on a purchase order.';
      ShippedQtyReturnedCorrectErr@1007 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot correct this posted purchase invoice because item %1 %2 has already been fully or partially returned.;ENG=You cannot correct this posted purchase invoice because item %1 %2 has already been fully or partially returned.';
      ShippedQtyReturnedCancelErr@1031 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot cancel this posted purchase invoice because item %1 %2 has already been fully or partially returned.;ENG=You cannot cancel this posted purchase invoice because item %1 %2 has already been fully or partially returned.';
      UsedInJobCorrectErr@1008 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot correct this posted purchase invoice because item %1 %2 is used in a job.;ENG=You cannot correct this posted purchase invoice because item %1 %2 is used in a job.';
      UsedInJobCancelErr@1032 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot cancel this posted purchase invoice because item %1 %2 is used in a job.;ENG=You cannot cancel this posted purchase invoice because item %1 %2 is used in a job.';
      PostingNotAllowedCorrectErr@1009 : TextConst 'ENU=You cannot correct this posted purchase invoice because it was posted in a posting period that is closed.;ENG=You cannot correct this posted purchase invoice because it was posted in a posting period that is closed.';
      PostingNotAllowedCancelErr@1033 : TextConst 'ENU=You cannot cancel this posted purchase invoice because it was posted in a posting period that is closed.;ENG=You cannot cancel this posted purchase invoice because it was posted in a posting period that is closed.';
      InvoiceIsBasedOnOrderCorrectErr@1010 : TextConst 'ENU=You cannot correct this posted purchase invoice because the invoice is based on a purchase order.;ENG=You cannot correct this posted purchase invoice because the invoice is based on a purchase order.';
      InvoiceIsBasedOnOrderCancelErr@1034 : TextConst 'ENU=You cannot cancel this posted purchase invoice because the invoice is based on a purchase order.;ENG=You cannot cancel this posted purchase invoice because the invoice is based on a purchase order.';
      LineTypeNotAllowedCorrectErr@1012 : TextConst '@@@="%1 = Item no. %2 = Item description %3 = Item type.";ENU=You cannot correct this posted purchase invoice because the purchase invoice line for %1 %2 is of type %3, which is not allowed on a simplified purchase invoice.;ENG=You cannot correct this posted purchase invoice because the purchase invoice line for %1 %2 is of type %3, which is not allowed on a simplified purchase invoice.';
      LineTypeNotAllowedCancelErr@1036 : TextConst '@@@="%1 = Item no. %2 = Item description %3 = Item type.";ENU=You cannot cancel this posted purchase invoice because the purchase invoice line for %1 %2 is of type %3, which is not allowed on a simplified purchase invoice.;ENG=You cannot cancel this posted purchase invoice because the purchase invoice line for %1 %2 is of type %3, which is not allowed on a simplified purchase invoice.';
      CancellingOnly@1014 : Boolean;
      InvalidDimCodeCorrectErr@1037 : TextConst '@@@="%1 = Table caption %2 = Account number %3 = Item no. %4 = Item description.";ENU=You cannot correct this posted purchase invoice because the dimension rule setup for account ''%1'' %2 prevents %3 %4 from being canceled.;ENG=You cannot correct this posted purchase invoice because the dimension rule setup for account ''%1'' %2 prevents %3 %4 from being cancelled.';
      InvalidDimCodeCancelErr@1038 : TextConst '@@@="%1 = Table caption %2 = Account number %3 = Item no. %4 = Item description.";ENU=You cannot cancel this posted purchase invoice because the dimension rule setup for account ''%1'' %2 prevent %3 %4 from being canceled.;ENG=You cannot cancel this posted purchase invoice because the dimension rule setup for account ''%1'' %2 prevent %3 %4 from being cancelled.';
      InvalidDimCombinationCorrectErr@1023 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot correct this posted purchase invoice because the dimension combination for item %1 %2 is not allowed.;ENG=You cannot correct this posted purchase invoice because the dimension combination for item %1 %2 is not allowed.';
      InvalidDimCombinationCancelErr@1039 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot cancel this posted purchase invoice because the dimension combination for item %1 %2 is not allowed.;ENG=You cannot cancel this posted purchase invoice because the dimension combination for item %1 %2 is not allowed.';
      InvalidDimCombHeaderCorrectErr@1011 : TextConst 'ENU=You cannot correct this posted purchase invoice because the combination of dimensions on the invoice is blocked.;ENG=You cannot correct this posted purchase invoice because the combination of dimensions on the invoice is blocked.';
      InvalidDimCombHeaderCancelErr@1035 : TextConst 'ENU=You cannot cancel this posted purchase invoice because the combination of dimensions on the invoice is blocked.;ENG=You cannot cancel this posted purchase invoice because the combination of dimensions on the invoice is blocked.';
      ExternalDocCorrectErr@1015 : TextConst 'ENU=You cannot correct this posted purchase invoice because the external document number is required on the invoice.;ENG=You cannot correct this posted purchase invoice because the external document number is required on the invoice.';
      ExternalDocCancelErr@1040 : TextConst 'ENU=You cannot cancel this posted purchase invoice because the external document number is required on the invoice.;ENG=You cannot cancel this posted purchase invoice because the external document number is required on the invoice.';
      InventoryPostClosedCorrectErr@1041 : TextConst 'ENU=You cannot correct this posted purchase invoice because the posting inventory period is already closed.;ENG=You cannot correct this posted purchase invoice because the posting inventory period is already closed.';
      InventoryPostClosedCancelErr@1042 : TextConst 'ENU=You cannot cancel this posted purchase invoice because the posting inventory period is already closed.;ENG=You cannot cancel this posted purchase invoice because the posting inventory period is already closed.';
      PostingCreditMemoFailedOpenPostedCMQst@1020 : TextConst 'ENU=Canceling the invoice failed because of the following error: \\%1\\A credit memo is posted. Do you want to open the posted credit memo?;ENG=Cancelling the invoice failed because of the following error: \\%1\\A credit memo is posted. Do you want to open the posted credit memo?';
      PostingCreditMemoFailedOpenCMQst@1021 : TextConst 'ENU=Canceling the invoice failed because of the following error: \\%1\\A credit memo is created but not posted. Do you want to open the credit memo?;ENG=Cancelling the invoice failed because of the following error: \\%1\\A credit memo is created but not posted. Do you want to open the credit memo?';
      CreatingCreditMemoFailedNothingCreatedErr@1022 : TextConst 'ENU=Canceling the invoice failed because of the following error: \\%1.;ENG=Cancelling the invoice failed because of the following error: \\%1.';
      ErrorType@1024 : 'IsPaid,VendorBlocked,ItemBlocked,AccountBlocked,IsCorrected,SerieNumInv,SerieNumCM,SerieNumPostCM,ItemIsReturned,FromOrder,PostingNotAllowed,LineFromOrder,WrongItemType,LineFromJob,DimErr,DimCombErr,DimCombHeaderErr,ExtDocErr,InventoryPostClosed';
      WrongDocumentTypeForCopyDocumentErr@1043 : TextConst 'ENU=You cannot correct or cancel this type of document.;ENG=You cannot correct or cancel this type of document.';

    PROCEDURE CancelPostedInvoice@4(VAR PurchInvHeader@1000 : Record 122) : Boolean;
    BEGIN
      CancellingOnly := TRUE;
      EXIT(CreateCreditMemo(PurchInvHeader));
    END;

    LOCAL PROCEDURE CreateCreditMemo@13(VAR PurchInvHeader@1000 : Record 122) : Boolean;
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchCrMemoHdr@1005 : Record 124;
    BEGIN
      TestCorrectInvoiceIsAllowed(PurchInvHeader,CancellingOnly);
      IF NOT CODEUNIT.RUN(CODEUNIT::"Correct Posted Purch. Invoice",PurchInvHeader) THEN BEGIN
        PurchCrMemoHdr.SETRANGE("Applies-to Doc. No.",PurchInvHeader."No.");
        IF PurchCrMemoHdr.FINDFIRST THEN BEGIN
          IF CONFIRM(STRSUBSTNO(PostingCreditMemoFailedOpenPostedCMQst,GETLASTERRORTEXT)) THEN
            PAGE.RUN(PAGE::"Mini Posted Sales Credit Memo",PurchCrMemoHdr);
        END ELSE BEGIN
          PurchaseHeader.SETRANGE("Applies-to Doc. No.",PurchInvHeader."No.");
          IF PurchaseHeader.FINDFIRST THEN BEGIN
            IF CONFIRM(STRSUBSTNO(PostingCreditMemoFailedOpenCMQst,GETLASTERRORTEXT)) THEN
              PAGE.RUN(PAGE::"Mini Sales Credit Memo",PurchaseHeader);
          END ELSE
            ERROR(CreatingCreditMemoFailedNothingCreatedErr,GETLASTERRORTEXT);
        END;
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateCopyDocument@16(VAR PurchInvHeader@1002 : Record 122;VAR PurchaseHeader@1001 : Record 38;DocumentType@1000 : Option);
    VAR
      CopyDocMgt@1003 : Codeunit 6620;
    BEGIN
      CLEAR(PurchaseHeader);
      PurchaseHeader."Document Type" := DocumentType;
      PurchaseHeader."No." := '';
      PurchaseHeader.INSERT(TRUE);

      CASE DocumentType OF
        PurchaseHeader."Document Type"::"Credit Memo":
          CopyDocMgt.SetPropertiesForCreditMemoCorrection;
        PurchaseHeader."Document Type"::Invoice:
          CopyDocMgt.SetPropertiesForInvoiceCorrection;
        ELSE
          ERROR(WrongDocumentTypeForCopyDocumentErr);
      END;

      CopyDocMgt.CopyPurchaseDocForInvoiceCancelling(PurchInvHeader."No.",PurchaseHeader);
    END;

    PROCEDURE CreateCreditMemoCopyDocument@11(VAR PurchInvHeader@1001 : Record 122;VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      CreateCopyDocument(PurchInvHeader,PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo");
    END;

    PROCEDURE CancelPostedInvoiceStartNewInvoice@1(VAR PurchInvHeader@1000 : Record 122;VAR PurchaseHeader@1002 : Record 38);
    BEGIN
      CancellingOnly := FALSE;

      IF CreateCreditMemo(PurchInvHeader) THEN BEGIN
        CreateCopyDocument(PurchInvHeader,PurchaseHeader,PurchaseHeader."Document Type"::Invoice);
        COMMIT;
      END;
    END;

    PROCEDURE TestCorrectInvoiceIsAllowed@5(VAR PurchInvHeader@1000 : Record 122;Cancelling@1001 : Boolean);
    BEGIN
      CancellingOnly := Cancelling;

      TestIfPostingIsAllowed(PurchInvHeader);
      TestIfInvoiceIsCorrectedOnce(PurchInvHeader);
      TestIfInvoiceIsPaid(PurchInvHeader);
      TestIfVendorIsBlocked(PurchInvHeader,PurchInvHeader."Buy-from Vendor No.");
      TestIfVendorIsBlocked(PurchInvHeader,PurchInvHeader."Pay-to Vendor No.");
      TestVendorDimension(PurchInvHeader,PurchInvHeader."Pay-to Vendor No.");
      TestDimensionOnHeader(PurchInvHeader);
      TestPurchaseLines(PurchInvHeader);
      TestIfAnyFreeNumberSeries(PurchInvHeader);
      TestIfInvoiceIsBasedOnOrder(PurchInvHeader);
      TestExternalDocument(PurchInvHeader);
      TestInventoryPostingClosed(PurchInvHeader);
    END;

    LOCAL PROCEDURE SetTrackInfoForCancellation@2(VAR PurchInvHeader@1000 : Record 122);
    VAR
      PurchCrMemoHdr@1001 : Record 124;
    BEGIN
      PurchCrMemoHdr.SETRANGE("Applies-to Doc. No.",PurchInvHeader."No.");
      IF PurchCrMemoHdr.FINDFIRST THEN BEGIN
        PurchInvHeader.VALIDATE("Canceled By",PurchCrMemoHdr."No.");
        PurchInvHeader.MODIFY;

        PurchCrMemoHdr.VALIDATE(Canceled,TRUE);
        PurchCrMemoHdr.MODIFY;
      END;
    END;

    LOCAL PROCEDURE TestDimensionOnHeader@15(PurchInvHeader@1000 : Record 122);
    VAR
      DimensionManagement@1001 : Codeunit 408;
    BEGIN
      IF NOT DimensionManagement.CheckDimIDComb(PurchInvHeader."Dimension Set ID") THEN
        ErrorHelperHeader(ErrorType::DimCombHeaderErr,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestIfVendorIsBlocked@9(PurchInvHeader@1000 : Record 122;VendNo@1005 : Code[20]);
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      Vendor.GET(VendNo);
      IF Vendor.Blocked IN [Vendor.Blocked::All] THEN
        ErrorHelperHeader(ErrorType::VendorBlocked,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestVendorDimension@3(PurchInvHeader@1000 : Record 122;VendNo@1005 : Code[20]);
    VAR
      Vendor@1001 : Record 23;
      DimensionManagement@1004 : Codeunit 408;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      Vendor.GET(VendNo);
      TableID[1] := DATABASE::Vendor;
      No[1] := Vendor."No.";
      IF NOT DimensionManagement.CheckDimValuePosting(TableID,No,PurchInvHeader."Dimension Set ID") THEN
        ErrorHelperAccount(ErrorType::DimErr,Vendor.TABLECAPTION,Vendor."No.",Vendor."No.",Vendor.Name);
    END;

    LOCAL PROCEDURE TestPurchaseLines@6(PurchInvHeader@1000 : Record 122);
    VAR
      PurchRcptLine@1004 : Record 121;
      PurchInvLine@1001 : Record 123;
      Item@1002 : Record 27;
      DimensionManagement@1007 : Codeunit 408;
      ReceivedQtyNoReturned@1005 : Decimal;
      RevUnitCostLCY@1006 : Decimal;
      TableID@1013 : ARRAY [10] OF Integer;
      No@1014 : ARRAY [10] OF Code[20];
    BEGIN
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      IF PurchInvLine.FIND('-') THEN
        REPEAT
          IF NOT IsCommentLine(PurchInvLine) THEN BEGIN
            IF PurchRcptLine.GET(PurchInvLine."Receipt No.",PurchInvLine."Receipt Line No.") THEN BEGIN
              IF PurchRcptLine."Order No." <> '' THEN
                ErrorHelperLine(ErrorType::LineFromOrder,PurchInvLine);
            END;

            IF (PurchInvLine.Type <> PurchInvLine.Type::" ") AND (PurchInvLine.Type <> PurchInvLine.Type::Item) THEN
              ErrorHelperLine(ErrorType::WrongItemType,PurchInvLine);

            Item.GET(PurchInvLine."No.");

            IF Item.Type <> Item.Type::Service THEN
              IF (PurchInvLine.Quantity > 0) AND (PurchInvLine."Job No." = '') THEN BEGIN
                PurchInvLine.CalcReceivedPurchNotReturned(ReceivedQtyNoReturned,RevUnitCostLCY,FALSE);
                IF PurchInvLine.Quantity <> ReceivedQtyNoReturned THEN
                  ErrorHelperLine(ErrorType::ItemIsReturned,PurchInvLine);
              END;

            IF Item.Blocked THEN
              ErrorHelperLine(ErrorType::ItemBlocked,PurchInvLine);

            TableID[1] := DATABASE::Item;
            No[1] := PurchInvLine."No.";
            IF NOT DimensionManagement.CheckDimValuePosting(TableID,No,PurchInvLine."Dimension Set ID") THEN
              ErrorHelperAccount(ErrorType::DimErr,Item.TABLECAPTION,No[1],Item."No.",Item.Description);

            IF Item.Type <> Item.Type::Service THEN
              TestInventoryPostingSetup(PurchInvLine);

            TestGenPostingSetup(PurchInvLine);
            TestVendorPostingGroup(PurchInvLine,PurchInvHeader."Vendor Posting Group");
            TestVATPostingSetup(PurchInvLine);

            IF NOT DimensionManagement.CheckDimIDComb(PurchInvLine."Dimension Set ID") THEN
              ErrorHelperLine(ErrorType::DimCombErr,PurchInvLine);
          END;
        UNTIL PurchInvLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TestGLAccount@21(AccountNo@1000 : Code[20];PurchInvLine@1005 : Record 123);
    VAR
      GLAccount@1001 : Record 15;
      Item@1006 : Record 27;
      DimensionManagement@1004 : Codeunit 408;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      GLAccount.GET(AccountNo);
      IF GLAccount.Blocked THEN
        ErrorHelperAccount(ErrorType::AccountBlocked,GLAccount.TABLECAPTION,AccountNo,'','');
      TableID[1] := DATABASE::"G/L Account";
      No[1] := AccountNo;
      Item.GET(PurchInvLine."No.");
      IF NOT DimensionManagement.CheckDimValuePosting(TableID,No,PurchInvLine."Dimension Set ID") THEN
        ErrorHelperAccount(ErrorType::DimErr,GLAccount.TABLECAPTION,AccountNo,Item."No.",Item.Description);
    END;

    LOCAL PROCEDURE TestIfInvoiceIsPaid@7(PurchInvHeader@1000 : Record 122);
    BEGIN
      PurchInvHeader.CALCFIELDS("Amount Including VAT");
      PurchInvHeader.CALCFIELDS("Remaining Amount");
      IF PurchInvHeader."Amount Including VAT" <> PurchInvHeader."Remaining Amount" THEN
        ErrorHelperHeader(ErrorType::IsPaid,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestIfInvoiceIsCorrectedOnce@10(PurchInvHeader@1000 : Record 122);
    BEGIN
      IF PurchInvHeader."Canceled By" <> '' THEN
        ErrorHelperHeader(ErrorType::IsCorrected,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestIfPostingIsAllowed@12(PurchInvHeader@1000 : Record 122);
    VAR
      GenJnlCheckLine@1001 : Codeunit 11;
    BEGIN
      IF GenJnlCheckLine.DateNotAllowed(PurchInvHeader."Posting Date") THEN
        ErrorHelperHeader(ErrorType::PostingNotAllowed,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestIfAnyFreeNumberSeries@14(PurchInvHeader@1003 : Record 122);
    VAR
      PurchasesPayablesSetup@1001 : Record 312;
      NoSeriesManagement@1002 : Codeunit 396;
      PostingDate@1000 : Date;
    BEGIN
      PostingDate := WORKDATE;
      PurchasesPayablesSetup.GET;

      IF NoSeriesManagement.TryGetNextNo(PurchasesPayablesSetup."Credit Memo Nos.",PostingDate) = '' THEN
        ErrorHelperHeader(ErrorType::SerieNumCM,PurchInvHeader);

      IF NoSeriesManagement.TryGetNextNo(PurchasesPayablesSetup."Posted Credit Memo Nos.",PostingDate) = '' THEN
        ErrorHelperHeader(ErrorType::SerieNumPostCM,PurchInvHeader);

      IF (NOT CancellingOnly) AND (NoSeriesManagement.TryGetNextNo(PurchasesPayablesSetup."Invoice Nos.",PostingDate) = '') THEN
        ErrorHelperHeader(ErrorType::SerieNumInv,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestIfInvoiceIsBasedOnOrder@17(PurchInvHeader@1000 : Record 122);
    BEGIN
      IF PurchInvHeader."Order No." <> '' THEN
        ErrorHelperHeader(ErrorType::FromOrder,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestExternalDocument@8(PurchInvHeader@1000 : Record 122);
    VAR
      PurchasesPayablesSetup@1001 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      IF (PurchInvHeader."Vendor Invoice No." = '') AND PurchasesPayablesSetup."Ext. Doc. No. Mandatory" THEN
        ErrorHelperHeader(ErrorType::ExtDocErr,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestInventoryPostingClosed@26(PurchInvHeader@1000 : Record 122);
    VAR
      InventoryPeriod@1001 : Record 5814;
    BEGIN
      InventoryPeriod.SETRANGE(Closed,TRUE);
      InventoryPeriod.SETFILTER("Ending Date",'>=%1',PurchInvHeader."Posting Date");
      IF InventoryPeriod.FINDFIRST THEN
        ErrorHelperHeader(ErrorType::InventoryPostClosed,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestGenPostingSetup@20(PurchInvLine@1000 : Record 123);
    VAR
      GenPostingSetup@1001 : Record 252;
    BEGIN
      WITH GenPostingSetup DO BEGIN
        GET(PurchInvLine."Gen. Bus. Posting Group",PurchInvLine."Gen. Prod. Posting Group");
        TESTFIELD("Purch. Account");
        TestGLAccount("Purch. Account",PurchInvLine);
        TESTFIELD("Purch. Credit Memo Account");
        TestGLAccount("Purch. Credit Memo Account",PurchInvLine);
        TESTFIELD("Direct Cost Applied Account");
        TestGLAccount("Direct Cost Applied Account",PurchInvLine);
        TESTFIELD("Purch. Line Disc. Account");
        TestGLAccount("Purch. Line Disc. Account",PurchInvLine);
      END;
    END;

    LOCAL PROCEDURE TestVendorPostingGroup@27(PurchInvLine@1000 : Record 123;VendorPostingGr@1002 : Code[10]);
    VAR
      VendorPostingGroup@1001 : Record 93;
    BEGIN
      WITH VendorPostingGroup DO BEGIN
        GET(VendorPostingGr);
        TESTFIELD("Payables Account");
        TestGLAccount("Payables Account",PurchInvLine);
      END;
    END;

    LOCAL PROCEDURE TestVATPostingSetup@29(PurchInvLine@1000 : Record 123);
    VAR
      VATPostingSetup@1001 : Record 325;
    BEGIN
      WITH VATPostingSetup DO BEGIN
        GET(PurchInvLine."VAT Bus. Posting Group",PurchInvLine."VAT Prod. Posting Group");
        TESTFIELD("Purchase VAT Account");
        TestGLAccount("Purchase VAT Account",PurchInvLine);
      END;
    END;

    LOCAL PROCEDURE TestInventoryPostingSetup@39(PurchInvLine@1000 : Record 123);
    VAR
      InventoryPostingSetup@1001 : Record 5813;
    BEGIN
      WITH InventoryPostingSetup DO BEGIN
        GET(PurchInvLine."Location Code",PurchInvLine."Posting Group");
        TESTFIELD("Inventory Account");
        TestGLAccount("Inventory Account",PurchInvLine);
      END;
    END;

    LOCAL PROCEDURE IsCommentLine@18(PurchInvLine@1000 : Record 123) : Boolean;
    BEGIN
      EXIT((PurchInvLine.Type = PurchInvLine.Type::" ") OR (PurchInvLine."No." = ''));
    END;

    LOCAL PROCEDURE ErrorHelperHeader@22(ErrorOption@1000 : Option;PurchInvHeader@1001 : Record 122);
    VAR
      Vendor@1003 : Record 23;
    BEGIN
      IF CancellingOnly THEN
        CASE ErrorOption OF
          ErrorType::IsPaid:
            ERROR(PostedInvoiceIsPaidCCancelErr);
          ErrorType::VendorBlocked:
            BEGIN
              Vendor.GET(PurchInvHeader."Pay-to Vendor No.");
              ERROR(VendorIsBlockedCancelErr,Vendor.Name);
            END;
          ErrorType::IsCorrected:
            ERROR(AlreadyCancelledErr);
          ErrorType::SerieNumInv:
            ERROR(NoFreeInvoiceNoSeriesCancelErr);
          ErrorType::SerieNumCM:
            ERROR(NoFreeCMSeriesCancelErr);
          ErrorType::SerieNumPostCM:
            ERROR(NoFreePostCMSeriesCancelErr);
          ErrorType::FromOrder:
            ERROR(InvoiceIsBasedOnOrderCancelErr);
          ErrorType::PostingNotAllowed:
            ERROR(PostingNotAllowedCancelErr);
          ErrorType::ExtDocErr:
            ERROR(ExternalDocCancelErr);
          ErrorType::InventoryPostClosed:
            ERROR(InventoryPostClosedCancelErr);
          ErrorType::DimCombHeaderErr:
            ERROR(InvalidDimCombHeaderCancelErr);
        END
      ELSE
        CASE ErrorOption OF
          ErrorType::IsPaid:
            ERROR(PostedInvoiceIsPaidCorrectErr);
          ErrorType::VendorBlocked:
            BEGIN
              Vendor.GET(PurchInvHeader."Pay-to Vendor No.");
              ERROR(VendorIsBlockedCorrectErr,Vendor.Name);
            END;
          ErrorType::IsCorrected:
            ERROR(AlreadyCorrectedErr);
          ErrorType::SerieNumInv:
            ERROR(NoFreeInvoiceNoSeriesCorrectErr);
          ErrorType::SerieNumPostCM:
            ERROR(NoFreePostCMSeriesCorrectErr);
          ErrorType::SerieNumCM:
            ERROR(NoFreeCMSeriesCorrectErr);
          ErrorType::FromOrder:
            ERROR(InvoiceIsBasedOnOrderCorrectErr);
          ErrorType::PostingNotAllowed:
            ERROR(PostingNotAllowedCorrectErr);
          ErrorType::ExtDocErr:
            ERROR(ExternalDocCorrectErr);
          ErrorType::InventoryPostClosed:
            ERROR(InventoryPostClosedCorrectErr);
          ErrorType::DimCombHeaderErr:
            ERROR(InvalidDimCombHeaderCorrectErr);
        END;
    END;

    LOCAL PROCEDURE ErrorHelperLine@23(ErrorOption@1000 : Option;PurchInvLine@1001 : Record 123);
    VAR
      Item@1002 : Record 27;
    BEGIN
      IF CancellingOnly THEN
        CASE ErrorOption OF
          ErrorType::ItemBlocked:
            BEGIN
              Item.GET(PurchInvLine."No.");
              ERROR(ItemIsBlockedCancelErr,Item."No.",Item.Description);
            END;
          ErrorType::ItemIsReturned:
            BEGIN
              Item.GET(PurchInvLine."No.");
              ERROR(ShippedQtyReturnedCancelErr,Item."No.",Item.Description);
            END;
          ErrorType::LineFromOrder:
            ERROR(PurchaseLineFromOrderCancelErr,PurchInvLine."No.",PurchInvLine.Description);
          ErrorType::WrongItemType:
            ERROR(LineTypeNotAllowedCancelErr,PurchInvLine."No.",PurchInvLine.Description,PurchInvLine.Type);
          ErrorType::LineFromJob:
            ERROR(UsedInJobCancelErr,PurchInvLine."No.",PurchInvLine.Description);
          ErrorType::DimCombErr:
            ERROR(InvalidDimCombinationCancelErr,PurchInvLine."No.",PurchInvLine.Description);
        END
      ELSE
        CASE ErrorOption OF
          ErrorType::ItemBlocked:
            BEGIN
              Item.GET(PurchInvLine."No.");
              ERROR(ItemIsBlockedCorrectErr,Item."No.",Item.Description);
            END;
          ErrorType::ItemIsReturned:
            BEGIN
              Item.GET(PurchInvLine."No.");
              ERROR(ShippedQtyReturnedCorrectErr,Item."No.",Item.Description);
            END;
          ErrorType::LineFromOrder:
            ERROR(PurchaseLineFromOrderCorrectErr,PurchInvLine."No.",PurchInvLine.Description);
          ErrorType::WrongItemType:
            ERROR(LineTypeNotAllowedCorrectErr,PurchInvLine."No.",PurchInvLine.Description,PurchInvLine.Type);
          ErrorType::LineFromJob:
            ERROR(UsedInJobCorrectErr,PurchInvLine."No.",PurchInvLine.Description);
          ErrorType::DimCombErr:
            ERROR(InvalidDimCombinationCorrectErr,PurchInvLine."No.",PurchInvLine.Description);
        END;
    END;

    LOCAL PROCEDURE ErrorHelperAccount@24(ErrorOption@1000 : Option;AccountNo@1001 : Code[20];AccountCaption@1002 : Text;No@1003 : Code[20];Name@1004 : Text);
    BEGIN
      IF CancellingOnly THEN
        CASE ErrorOption OF
          ErrorType::AccountBlocked:
            ERROR(AccountIsBlockedCancelErr,AccountCaption,AccountNo);
          ErrorType::DimErr:
            ERROR(InvalidDimCodeCancelErr,AccountCaption,AccountNo,No,Name);
        END
      ELSE
        CASE ErrorOption OF
          ErrorType::AccountBlocked:
            ERROR(AccountIsBlockedCorrectErr,AccountCaption,AccountNo);
          ErrorType::DimErr:
            ERROR(InvalidDimCodeCorrectErr,AccountCaption,AccountNo,No,Name);
        END;
    END;

    BEGIN
    END.
  }
}

