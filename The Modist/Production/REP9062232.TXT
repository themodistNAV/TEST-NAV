OBJECT Report 9062232 Create Demonstration Jobs
{
  OBJECT-PROPERTIES
  {
    Date=04/01/16;
    Time=12:37:42 PM;
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Create Demonstration Jobs;
               ENG=Create Demonstration Jobs];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   //DOC NA2016.12 JH 24/10/2015 - Created
                 END;

    OnPreReport=BEGIN
                  InitialiseInteraction();

                  CheckRequestData();
                  GenerateCustomerBuffer();
                  GenerateItemBuffer();
                  GenerateJobStatusBuffer();
                  CreateJobs();

                  FinaliseInteraction();
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 9062230; ;Container ;
                  ContainerType=ContentArea }

      { 9062231;1;Field     ;
                  Name=NoOfJobsField;
                  CaptionML=[ENU=No. of Jobs;
                             ENG=No. of Jobs];
                  SourceExpr=NoOfJobs;
                  MinValue=0;
                  MaxValue=10000 }

      { 9062232;1;Field     ;
                  Name=StartDateField;
                  CaptionML=[ENU=Start Date;
                             ENG=Start Date];
                  SourceExpr=StartDate }

      { 9062233;1;Field     ;
                  Name=EndDateField;
                  CaptionML=[ENU=End Date;
                             ENG=End Date];
                  SourceExpr=EndDate }

      { 9062234;1;Field     ;
                  Name=MaximumLengthField;
                  CaptionML=[ENU=Maximum Length;
                             ENG=Maximum Length];
                  SourceExpr=MaximumLength;
                  MinValue=0 }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Customer@9062237 : Record 18;
      CustomerBuffer@9062238 : TEMPORARY Record 9062730;
      CustomerBufferCount@9062239 : Integer;
      Item@9062235 : Record 27;
      ItemBuffer@9062234 : TEMPORARY Record 9062730;
      ItemBufferCount@9062236 : Integer;
      Job@1000000000 : Record 167;
      JobStatusBuffer@9062241 : TEMPORARY Record 9062730;
      JobStatusBufferCount@9062242 : Integer;
      NoOfJobs@9062230 : Integer;
      StartDate@9062231 : Date;
      EndDate@9062232 : Date;
      MaximumLength@9062244 : Integer;
      DialogManagement@9062243 : Codeunit 9062249;

    LOCAL PROCEDURE CheckRequestData@9062233();
    VAR
      eEmpty@9062233 : TextConst 'ENU=Please provide "%1";ENG=Please provide "%1"';
      eNoOfJobs@9062232 : TextConst 'ENU=No. of Jobs;ENG=No. of Jobs';
      eStartDate@9062231 : TextConst 'ENU=Start Date;ENG=Start Date';
      eEndDate@9062230 : TextConst 'ENU=End Date;ENG=End Date';
      lDateBuffer@9062234 : Date;
    BEGIN
      IF (NoOfJobs = 0) THEN
        ERROR(eEmpty, eNoOfJobs);
      IF (StartDate = 0D) THEN
        ERROR(eEmpty, eStartDate);
      IF (EndDate = 0D) THEN
        ERROR(eEmpty, eEndDate);

      IF (EndDate < StartDate) THEN
      BEGIN
        lDateBuffer := EndDate;
        EndDate := StartDate;
        StartDate := lDateBuffer;
      END;
    END;

    LOCAL PROCEDURE GenerateCustomerBuffer@9062247();
    VAR
      eNoSalespeople@9062230 : TextConst 'ENU=There are no salespeople in the system.;ENG=There are no salespeople in the system.';
    BEGIN
      CustomerBuffer.RESET();
      CustomerBuffer.DELETEALL();
      CustomerBufferCount := 0;

      Customer.RESET();
      IF (Customer.ISEMPTY()) THEN
        ERROR(eNoSalespeople);
      IF (Customer.FINDSET()) THEN
      REPEAT
        IF ((Customer."Bill-to Customer No." = '') AND (Customer."Customer Posting Group" <> '')) THEN
        BEGIN
          CustomerBufferCount += 1;
          CustomerBuffer.ID := CustomerBufferCount;
          CustomerBuffer.Value := Customer."No.";
          CustomerBuffer.INSERT();
        END;
      UNTIL (Customer.NEXT() = 0);
    END;

    LOCAL PROCEDURE GenerateItemBuffer@9062240();
    BEGIN
      ItemBuffer.RESET();
      ItemBuffer.DELETEALL();
      ItemBufferCount := 0;

      Item.RESET();
      IF (Item.FINDSET()) THEN
      REPEAT
        ItemBufferCount += 1;
        ItemBuffer.ID := ItemBufferCount;
        ItemBuffer.Name := Item.Description;
        ItemBuffer.Value := Item."No.";
        ItemBuffer.INSERT();
      UNTIL (Item.NEXT() = 0);
    END;

    LOCAL PROCEDURE GenerateJobStatusBuffer@9062230();
    BEGIN
      JobStatusBuffer.RESET();
      JobStatusBuffer.DELETEALL();
      JobStatusBufferCount := 0;

      AddToJobStatusBuffer(Job.Status::Planning);
      AddToJobStatusBuffer(Job.Status::Quote);
      AddToJobStatusBuffer(Job.Status::Order);
      AddToJobStatusBuffer(Job.Status::Completed);
    END;

    LOCAL PROCEDURE AddToJobStatusBuffer@1000000000(pStatus@1000000000 : Integer);
    BEGIN
      JobStatusBufferCount += 1;
      JobStatusBuffer.ID := pStatus + 1;
      JobStatusBuffer.INSERT();
    END;

    LOCAL PROCEDURE CreateJobs@9062236();
    VAR
      lIndex@9062230 : Integer;
      lPeriodLength@9062232 : Integer;
      lPeriodStartOffset@9062231 : Integer;
      lPeriodEndOffset@9062233 : Integer;
      lMaximumEndOffset@9062234 : Integer;
    BEGIN
      RANDOMIZE;
      lPeriodLength := (EndDate - StartDate);
      FOR lIndex := 1 TO NoOfJobs DO
      BEGIN
        DialogManagement.StepCounter(1);

        CustomerBuffer.GET(RANDOM(CustomerBufferCount));
        ItemBuffer.GET(RANDOM(ItemBufferCount));
        JobStatusBuffer.GET(RANDOM(JobStatusBufferCount));

        lPeriodStartOffset := RANDOM(lPeriodLength);
        lMaximumEndOffset := lPeriodLength - lPeriodStartOffset;
        IF (lMaximumEndOffset > MaximumLength) THEN
          lMaximumEndOffset := MaximumLength;
        lPeriodEndOffset := RANDOM(lMaximumEndOffset);

        CLEAR(Job);
        Job.INIT();
        Job.INSERT(TRUE);
        Job.VALIDATE(Description, ItemBuffer.Name);
        Job.VALIDATE("Starting Date", StartDate + lPeriodStartOffset);
        Job.VALIDATE("Ending Date", Job."Starting Date" + lPeriodEndOffset);
        Job.VALIDATE("Bill-to Customer No.", CustomerBuffer.Value);
        Job.Status := JobStatusBuffer.ID - 1;
        Job.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE InitialiseInteraction@9062235();
    VAR
      eTitle@9062231 : TextConst 'ENU=Creating jobs...;ENG=Creating jobs...';
      eProgressCounter@9062230 : TextConst 'ENU=Progress;ENG=Progress';
    BEGIN
      DialogManagement.Add(eProgressCounter, 10, 1, 30, TRUE, TRUE);
      DialogManagement.Open(eTitle);
      DialogManagement.SetCounterCount(1, NoOfJobs);
    END;

    LOCAL PROCEDURE FinaliseInteraction@9062237();
    BEGIN
      DialogManagement.Close();
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 27/12/2015 - Modified, new version
    }
    END.
  }
  RDLDATA
  {
  }
}

