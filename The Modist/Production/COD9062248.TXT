OBJECT Codeunit 9062248 Table Field Management
{
  OBJECT-PROPERTIES
  {
    Date=14/04/16;
    Time=[ 4:22:58 PM];
    Version List=NA2016.14;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Field@1000000000 : Record 2000000041;
      EnhancedFieldDefinition@1000000001 : Record 9062327;
      TableFieldBuffer@1000000002 : Record 9062231;

    LOCAL PROCEDURE "--- Field Type Conversion ---"@1000000000();
    BEGIN
    END;

    PROCEDURE FieldTypeToDataType@1000000018(pFieldType@1000000000 : Integer) : Integer;
    VAR
      lDataType@1000000001 : Integer;
      eCantBeConverted@1000000002 : TextConst 'ENU=Field type "%1" can''t be converted to data type.;ENG=Field type "%1" can''t be converted to data type.';
    BEGIN
      //DOC NA2016.14 - Converting from field type to (table field buffer) data type
      //  -> pFieldType: Source field type
      //  <- Table field buffer data type

      CASE (pFieldType) OF
        Field.Type::BigInteger: lDataType := TableFieldBuffer."Data Type"::BigInteger;
        Field.Type::Binary: lDataType := TableFieldBuffer."Data Type"::Binary;
        Field.Type::BLOB: lDataType := TableFieldBuffer."Data Type"::BLOB;
        Field.Type::Boolean: lDataType := TableFieldBuffer."Data Type"::Boolean;
        Field.Type::Code: lDataType := TableFieldBuffer."Data Type"::Code;
        Field.Type::Date: lDataType := TableFieldBuffer."Data Type"::Date;
        Field.Type::DateFormula: lDataType := TableFieldBuffer."Data Type"::DateFormula;
        Field.Type::DateTime: lDataType := TableFieldBuffer."Data Type"::DateTime;
        Field.Type::Decimal: lDataType := TableFieldBuffer."Data Type"::Decimal;
        Field.Type::Duration: lDataType := TableFieldBuffer."Data Type"::Duration;
        Field.Type::Integer: lDataType := TableFieldBuffer."Data Type"::Integer;
        Field.Type::GUID: lDataType := TableFieldBuffer."Data Type"::GUID;
        Field.Type::OemCode: lDataType := TableFieldBuffer."Data Type"::OemCode;
        Field.Type::OemText: lDataType := TableFieldBuffer."Data Type"::OemText;
        Field.Type::Option: lDataType := TableFieldBuffer."Data Type"::Option;
        Field.Type::RecordID: lDataType := TableFieldBuffer."Data Type"::RecordID;
        Field.Type::TableFilter: lDataType := TableFieldBuffer."Data Type"::TableFilter;
        Field.Type::Text: lDataType := TableFieldBuffer."Data Type"::Text;
        Field.Type::Time: lDataType := TableFieldBuffer."Data Type"::Time;
        ELSE ERROR(eCantBeConverted, FieldTypeName(pFieldType));
      END;

      EXIT(lDataType);
    END;

    PROCEDURE FieldRefTypeToDataType@1000000022(pFieldRef@1000000000 : FieldRef) : Integer;
    VAR
      lDataType@1000000001 : Integer;
      eCantBeConverted@1000000003 : TextConst 'ENU=FieldRef type "%1" can''t be converted to data type.;ENG=FieldRef type "%1" can''t be converted to data type.';
    BEGIN
      //DOC NA2016.14 - Converting from field ref type to (table field buffer) data type
      //  -> pFieldRef: Source fieldref
      //  <- Table field buffer data type

      CASE (LOWERCASE(FORMAT(pFieldRef.TYPE))) OF
        'biginteger': lDataType := TableFieldBuffer."Data Type"::BigInteger;
        'binary': lDataType := TableFieldBuffer."Data Type"::Binary;
        'blob': lDataType := TableFieldBuffer."Data Type"::BLOB;
        'boolean': lDataType := TableFieldBuffer."Data Type"::Boolean;
        'code': lDataType := TableFieldBuffer."Data Type"::Code;
        'date': lDataType := TableFieldBuffer."Data Type"::Date;
        'dateformula': lDataType := TableFieldBuffer."Data Type"::DateFormula;
        'datetime': lDataType := TableFieldBuffer."Data Type"::DateTime;
        'decimal': lDataType := TableFieldBuffer."Data Type"::Decimal;
        'duration': lDataType := TableFieldBuffer."Data Type"::Duration;
        'guid': lDataType := TableFieldBuffer."Data Type"::GUID;
        'integer': lDataType := TableFieldBuffer."Data Type"::Integer;
        'oemcode': lDataType := TableFieldBuffer."Data Type"::OemCode;
        'oemtext': lDataType := TableFieldBuffer."Data Type"::OemText;
        'option': lDataType := TableFieldBuffer."Data Type"::Option;
        'recordid': lDataType := TableFieldBuffer."Data Type"::RecordID;
        'tablefilter': lDataType := TableFieldBuffer."Data Type"::TableFilter;
        'text': lDataType := TableFieldBuffer."Data Type"::Text;
        'time': lDataType := TableFieldBuffer."Data Type"::Time;
        ELSE ERROR(eCantBeConverted, FORMAT(pFieldRef.TYPE));
      END;

      EXIT(lDataType);
    END;

    PROCEDURE TableFieldTypeToDataType@1000000028(pTableId@1000000000 : Integer;pFieldId@1000000001 : Integer) : Integer;
    VAR
      lField@1000000002 : Record 2000000041;
    BEGIN
      //DOC NA2016.14 - Converting table field type to data type
      //  -> pTableId: Table ID
      //  -> pFieldId: Field ID
      //  <- Data type

      IF (lField.GET(pTableId, pFieldId)) THEN
        EXIT(FieldTypeToDataType(lField.Type))
      ELSE
        EXIT(TableFieldBuffer."Data Type"::" ");
    END;

    PROCEDURE DataTypeToFieldType@1000000017(pDataType@1000000000 : Integer) : Integer;
    VAR
      lFieldType@1000000001 : Integer;
      eCantBeConverted@1000000002 : TextConst 'ENU=Data type "%1" can''t be converted to field type.;ENG=Data type "%1" can''t be converted to field type.';
    BEGIN
      //DOC NA2016.14 - Converting from table field buffer data type to field type
      //  -> pTableFieldBufferDataType: The table field buffer data type
      //  <- Field type

      CASE (pDataType) OF
        TableFieldBuffer."Data Type"::BigInteger: lFieldType := Field.Type::BigInteger;
        TableFieldBuffer."Data Type"::Binary: lFieldType := Field.Type::Binary;
        TableFieldBuffer."Data Type"::BLOB: lFieldType := Field.Type::BLOB;
        TableFieldBuffer."Data Type"::Boolean: lFieldType := Field.Type::Boolean;
        TableFieldBuffer."Data Type"::Code: lFieldType := Field.Type::Code;
        TableFieldBuffer."Data Type"::Date: lFieldType := Field.Type::Date;
        TableFieldBuffer."Data Type"::DateFormula: lFieldType := Field.Type::DateFormula;
        TableFieldBuffer."Data Type"::DateTime: lFieldType := Field.Type::DateTime;
        TableFieldBuffer."Data Type"::Decimal: lFieldType := Field.Type::Decimal;
        TableFieldBuffer."Data Type"::Duration: lFieldType := Field.Type::Duration;
        TableFieldBuffer."Data Type"::GUID: lFieldType := Field.Type::GUID;
        TableFieldBuffer."Data Type"::Integer: lFieldType := Field.Type::Integer;
        TableFieldBuffer."Data Type"::OemCode: lFieldType := Field.Type::OemCode;
        TableFieldBuffer."Data Type"::OemText: lFieldType := Field.Type::OemText;
        TableFieldBuffer."Data Type"::Option: lFieldType := Field.Type::Option;
        TableFieldBuffer."Data Type"::RecordID: lFieldType := Field.Type::RecordID;
        TableFieldBuffer."Data Type"::TableFilter: lFieldType := Field.Type::TableFilter;
        TableFieldBuffer."Data Type"::Text: lFieldType := Field.Type::Text;
        TableFieldBuffer."Data Type"::Time: lFieldType := Field.Type::Time;
        ELSE ERROR(eCantBeConverted, DataTypeName(pDataType));
      END;

      EXIT(lFieldType);
    END;

    PROCEDURE EnhancedFieldTypeToDataType@1000000006(pEnhancedFieldType@1000000000 : Integer) : Integer;
    VAR
      lDataType@1000000001 : Integer;
      eCantBeConverted@1000000002 : TextConst 'ENU=Enhanced field type "%1" can''t be converted to data type.;ENG=Enhanced field type "%1" can''t be converted to data type.';
    BEGIN
      //DOC NA2016.14 - Converting enhanced field type to table field buffer data type
      //  -> pEnhancedFieldType: Enhanced field type
      //  <- Table field buffer data type

      CASE (pEnhancedFieldType) OF
        EnhancedFieldDefinition.Type::Boolean: lDataType := TableFieldBuffer."Data Type"::Boolean;
        EnhancedFieldDefinition.Type::Code: lDataType := TableFieldBuffer."Data Type"::Code;
        EnhancedFieldDefinition.Type::Date: lDataType := TableFieldBuffer."Data Type"::Date;
        EnhancedFieldDefinition.Type::Decimal: lDataType := TableFieldBuffer."Data Type"::Decimal;
        EnhancedFieldDefinition.Type::Document: lDataType := TableFieldBuffer."Data Type"::Text;
        EnhancedFieldDefinition.Type::"Dynamic Link": lDataType := TableFieldBuffer."Data Type"::Text;
        EnhancedFieldDefinition.Type::"Extended Text": lDataType := TableFieldBuffer."Data Type"::Text;
        EnhancedFieldDefinition.Type::Image: lDataType := TableFieldBuffer."Data Type"::Text;
        EnhancedFieldDefinition.Type::Integer: lDataType := TableFieldBuffer."Data Type"::Integer;
        EnhancedFieldDefinition.Type::Link: lDataType := TableFieldBuffer."Data Type"::Text;
        EnhancedFieldDefinition.Type::Text: lDataType := TableFieldBuffer."Data Type"::Text;
        EnhancedFieldDefinition.Type::Time: lDataType := TableFieldBuffer."Data Type"::Time;
        ELSE ERROR(eCantBeConverted, EnhancedFieldTypeName(pEnhancedFieldType));
      END;

      EXIT(lDataType);
    END;

    PROCEDURE EnhancedTableFieldTypeToDataType@1000000029(pTableId@1000000000 : Integer;pEnhancedFieldId@1000000001 : Integer) : Integer;
    VAR
      lEnhancedFieldDefinition@1000000002 : Record 9062327;
    BEGIN
      //DOC NA2016.14 - Converting enhanced table field type to data type
      //  -> pTableId: Table ID
      //  -> pEnhancedFieldId: Enhanced field ID
      //  <- Data type

      IF (lEnhancedFieldDefinition.GET(pTableId, pEnhancedFieldId)) THEN
        EXIT(EnhancedFieldTypeToDataType(lEnhancedFieldDefinition.Type))
      ELSE
        EXIT(TableFieldBuffer."Data Type"::" ");
    END;

    PROCEDURE DataTypeToEnhancedFieldType@1000000003(pDataType@1000000000 : Integer) : Integer;
    VAR
      lEnhancedFieldType@1000000001 : Integer;
      eCantBeConverted@1000000002 : TextConst 'ENU=Data type "%1" can''t be converted to enhanced field type.;ENG=Data type "%1" can''t be converted to enhanced field type.';
    BEGIN
      //DOC NA2016.14 - Converting table field buffer data type to enhanced field type
      //  -> pDataType: The data type
      //  <- Enhanced field type

      CASE (pDataType) OF
        TableFieldBuffer."Data Type"::BigInteger: lEnhancedFieldType := EnhancedFieldDefinition.Type::Integer;
        TableFieldBuffer."Data Type"::Boolean: lEnhancedFieldType := EnhancedFieldDefinition.Type::Boolean;
        TableFieldBuffer."Data Type"::Code: lEnhancedFieldType := EnhancedFieldDefinition.Type::Code;
        TableFieldBuffer."Data Type"::Date: lEnhancedFieldType := EnhancedFieldDefinition.Type::Date;
        TableFieldBuffer."Data Type"::Decimal: lEnhancedFieldType := EnhancedFieldDefinition.Type::Decimal;
        TableFieldBuffer."Data Type"::Integer: lEnhancedFieldType := EnhancedFieldDefinition.Type::Integer;
        TableFieldBuffer."Data Type"::OemCode: lEnhancedFieldType := EnhancedFieldDefinition.Type::Code;
        TableFieldBuffer."Data Type"::OemText: lEnhancedFieldType := EnhancedFieldDefinition.Type::Text;
        TableFieldBuffer."Data Type"::Text: lEnhancedFieldType := EnhancedFieldDefinition.Type::Text;
        TableFieldBuffer."Data Type"::Time: lEnhancedFieldType := EnhancedFieldDefinition.Type::Time;
        ELSE ERROR(eCantBeConverted, DataTypeName(pDataType));
      END;

      EXIT(lEnhancedFieldType);
    END;

    LOCAL PROCEDURE TableFieldTypeToDataTypeAdv@1000000030(pTableId@1000000000 : Integer;pFieldType@1000000001 : Integer;pFieldId@1000000002 : Integer) : Integer;
    VAR
      lDataType@1000000003 : Integer;
    BEGIN
      //DOC NA2016.14 - Converting table field type to data type (advanced version)
      //  -> pTableId: Table ID
      //  -> pFieldType: Field type
      //  -> pFieldId: Field ID
      //  <- Data type

      lDataType := TableFieldBuffer."Data Type"::" ";

      CASE (pFieldType) OF
        TableFieldBuffer."Field Type"::Field: lDataType := TableFieldTypeToDataType(pTableId, pFieldId);
        TableFieldBuffer."Field Type"::"Enhanced Field": lDataType := EnhancedTableFieldTypeToDataType(pTableId, pFieldId);
      END;

      EXIT(lDataType);
    END;

    PROCEDURE "--- Field Class Conversion ---"@1000000001();
    BEGIN
    END;

    PROCEDURE FieldClassToBufferFieldClass@1000000019(pFieldClass@1000000000 : Integer) : Integer;
    VAR
      lBufferFieldClass@1000000001 : Integer;
      eCantBeConverted@1000000002 : TextConst 'ENU=Field class "%1" can''t be converted to buffer field class.;ENG=Field class "%1" can''t be converted to buffer field class.';
    BEGIN
      //DOC NA2016.14 - Converting field class to (table field) buffer field class
      //  -> pFieldClass: Field class
      //  <- (Table field) Buffer field class

      CASE (pFieldClass) OF
        Field.Class::Normal: lBufferFieldClass := TableFieldBuffer."Field Class"::Normal;
        Field.Class::FlowField: lBufferFieldClass := TableFieldBuffer."Field Class"::FlowField;
        Field.Class::FlowFilter: lBufferFieldClass := TableFieldBuffer."Field Class"::FlowFilter;
        ELSE ERROR(eCantBeConverted, FieldClassName(pFieldClass));
      END;

      EXIT(lBufferFieldClass);
    END;

    PROCEDURE FieldRefClassToBufferFieldClass@1000000025(pFieldRef@1000000000 : FieldRef) : Integer;
    VAR
      lBufferFieldClass@1000000001 : Integer;
      eCantBeConverted@1000000002 : TextConst 'ENU=FieldRef class "%1" can''t be converted to buffer field class.;ENG=FieldRef class "%1" can''t be converted to buffer field class.';
    BEGIN
      //DOC NA2016.14 - Converting FieldRef class to (table field) buffer field class
      //  -> pFieldRef: The field ref
      //  <- (Table field) Buffer field class

      CASE (LOWERCASE(FORMAT(pFieldRef.CLASS))) OF
        'normal': lBufferFieldClass := TableFieldBuffer."Field Class"::Normal;
        'flowfield': lBufferFieldClass := TableFieldBuffer."Field Class"::FlowField;
        'flowfilter': lBufferFieldClass := TableFieldBuffer."Field Class"::FlowFilter;
        ELSE ERROR(eCantBeConverted, FORMAT(pFieldRef.CLASS));
      END;

      EXIT(lBufferFieldClass);
    END;

    PROCEDURE BufferFieldClassToFieldClass@1000000020(pBufferFieldClass@1000000000 : Integer) : Integer;
    VAR
      lFieldClass@1000000001 : Integer;
      eCantBeConverted@1000000002 : TextConst 'ENU=Buffer field class "%1" can''t be converted to field class.;ENG=Buffer field class "%1" can''t be converted to field class.';
    BEGIN
      //DOC NA2016.14 - Converting (table field) buffer field class to field class
      //  -> pBufferFieldClass: The (table field) buffer field class
      //  <- Field class

      CASE (pBufferFieldClass) OF
        TableFieldBuffer."Field Class"::Normal: lFieldClass := Field.Class::Normal;
        TableFieldBuffer."Field Class"::FlowField: lFieldClass := Field.Class::FlowField;
        TableFieldBuffer."Field Class"::FlowFilter: lFieldClass := Field.Class::FlowFilter;
        ELSE ERROR(eCantBeConverted, BufferFieldClassName(pBufferFieldClass));
      END;

      EXIT(lFieldClass);
    END;

    PROCEDURE "--- General Functions ---"@1000000007();
    BEGIN
    END;

    PROCEDURE CollectTableFields@1000000002(pTableId@1000000000 : Integer;VAR pTableFieldBuffer@1000000001 : Record 9062231);
    BEGIN
      //DOC NA2016.12 - Collecting table fields
      //  -> pTableId: Table ID to collect fields for
      //  <> pTableFieldBuffer: Target buffer

      CollectTableFieldsAdv(pTableId, TableFieldBuffer."Field Type"::" ", TableFieldBuffer."Field Class"::" ", pTableFieldBuffer);
    END;

    PROCEDURE CollectTableFieldsAdv@1000000012(pTableId@1000000000 : Integer;pFieldType@1000000002 : Integer;pFieldClass@1000000003 : Integer;VAR pTableFieldBuffer@1000000001 : Record 9062231);
    BEGIN
      //DOC NA2016.12 - Collecting table fields (advanced version)
      //  -> pTableId: Table ID to collect fields for
      //  -> pFieldType: Field type (::" " = Collect all fields, ::Field = Collect standard fields, ::"Enhanced Field" = Collect enhanced fields
      //  -> pFieldClass: Field class (::" " = Collect all fields, ::Normal = Collect normal fields, ::"FlowField" = Collect flowfields,
      //                  "FlowFilter" = Collect flowfilters)
      //  <> pTableFieldBuffer: Target buffer

      IF (FieldTypeContainsField(pFieldType)) THEN
      BEGIN
        Field.RESET();
        Field.SETRANGE(TableNo, pTableId);
        IF (pFieldClass <> TableFieldBuffer."Field Class"::" ") THEN
          Field.SETRANGE(Class, BufferFieldClassToFieldClass(pFieldClass));
        IF (Field.FINDSET()) THEN
        REPEAT
          AddTableField(pTableFieldBuffer, pTableId, TableFieldBuffer."Field Type"::Field, Field."No.", Field.FieldName,
            FieldTypeToDataType(Field.Type), FieldClassToBufferFieldClass(Field.Class));
        UNTIL (Field.NEXT() = 0);
      END;

      IF ((FieldTypeContainsEnhancedField(pFieldType)) AND (FieldClassContainsNormal(pFieldClass))) THEN
      BEGIN
        EnhancedFieldDefinition.RESET();
        EnhancedFieldDefinition.SETRANGE("Table No.", pTableId);
        IF (EnhancedFieldDefinition.FINDSET()) THEN
        REPEAT
          AddTableField(pTableFieldBuffer, pTableId, TableFieldBuffer."Field Type"::"Enhanced Field",
            EnhancedFieldDefinition."Enhanced Field No.", EnhancedFieldDefinition.Name,
            EnhancedFieldTypeToDataType(EnhancedFieldDefinition.Type), TableFieldBuffer."Field Class"::Normal);
        UNTIL (EnhancedFieldDefinition.NEXT() = 0);
      END;

      IF (pTableFieldBuffer.FINDFIRST()) THEN;
    END;

    PROCEDURE "--- Internal Functions ---"@1000000008();
    BEGIN
    END;

    LOCAL PROCEDURE AddTableField@1000000009(VAR pTableField@1000000000 : Record 9062231;pTableID@1000000001 : Integer;pFieldType@1000000002 : Integer;pFieldID@1000000003 : Integer;pFieldName@1000000004 : Text[50];pFieldDataType@1000000005 : Integer;pFieldClass@1000000006 : Integer);
    BEGIN
      //DOC NA2016.12 - Adding another table field to buffer passed
      //  <> pTableField: Target buffer
      //  -> pTableID: Table ID
      //  -> pFieldType: Field type
      //  -> pFieldID: Field ID
      //  -> pFieldName: Field name
      //  -> pFieldDataType: Field data type
      //  -> pFieldClass: Field class

      CLEAR(pTableField);
      pTableField.INIT();
      pTableField.VALIDATE("Table ID", pTableID);
      pTableField.VALIDATE("Field Type", pFieldType);
      pTableField.VALIDATE("Field ID", pFieldID);
      pTableField.VALIDATE("Field Name", pFieldName);
      pTableField.VALIDATE("Data Type", pFieldDataType);
      pTableField.VALIDATE("Field Class", pFieldClass);
      pTableField.INSERT(TRUE);
    END;

    LOCAL PROCEDURE "--- Field Type Filter ---"@1000000004();
    BEGIN
    END;

    PROCEDURE FieldTypeContainsField@1000000005(pFieldType@1000000000 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning if given field type contains "Field" (so it has ::" " or ::"Field" values)
      //  -> pFieldType: Field type
      //  <- Answer

      EXIT(pFieldType IN [TableFieldBuffer."Field Type"::" ", TableFieldBuffer."Field Type"::Field]);
    END;

    PROCEDURE FieldTypeContainsEnhancedField@1000000011(pFieldType@1000000000 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning if given field type contains "Enhanced Field" (so it has ::" " or ::"Enhanced Field" values)
      //  -> pFieldType: Field type
      //  <- Answer

      EXIT(pFieldType IN [TableFieldBuffer."Field Type"::" ", TableFieldBuffer."Field Type"::"Enhanced Field"]);
    END;

    LOCAL PROCEDURE "--- Field Class Filter ---"@1000000013();
    BEGIN
    END;

    PROCEDURE FieldClassContainsNormal@1000000010(pFieldClass@1000000000 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning if given field class contains "Normal" (so it has ::" " or ::"Normal" values)
      //  -> pFieldClass: Field class
      //  <- Answer

      EXIT(pFieldClass IN [TableFieldBuffer."Field Class"::" ", TableFieldBuffer."Field Class"::Normal]);
    END;

    PROCEDURE FieldClassContainsFlowField@1000000014(pFieldClass@1000000001 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning if given field class contains "FlowField" (so it has ::" " or ::"FlowField" values)
      //  -> pFieldClass: Field class
      //  <- Answer

      EXIT(pFieldClass IN [TableFieldBuffer."Field Class"::" ", TableFieldBuffer."Field Class"::FlowField]);
    END;

    PROCEDURE FieldClassContainsFlowFilter@1000000015(pFieldClass@1000000001 : Integer) : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning if given field class contains "FlowFilter" (so it has ::" " or ::"FlowFilter" values)
      //  -> pFieldClass: Field class
      //  <- Answer

      EXIT(pFieldClass IN [TableFieldBuffer."Field Class"::" ", TableFieldBuffer."Field Class"::FlowFilter]);
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000016();
    BEGIN
    END;

    PROCEDURE DataTypeName@1000000024(pDataType@1000000000 : Integer) : Text;
    VAR
      lTableFieldBuffer@1000000001 : Record 9062231;
    BEGIN
      //DOC NA2016.14 - Returning data type name
      //  -> pDataType: The data type
      //  <- The name

      lTableFieldBuffer."Data Type" := pDataType;
      EXIT(FORMAT(lTableFieldBuffer."Data Type"));
    END;

    PROCEDURE FieldTypeName@1000000021(pFieldType@1000000000 : Integer) : Text;
    VAR
      lField@1000000001 : Record 2000000041;
    BEGIN
      //DOC NA2016.14 - Returning field type name
      //  -> pFieldType: The field type
      //  <- The name

      lField.Type := pFieldType;
      EXIT(FORMAT(lField.Type));
    END;

    PROCEDURE EnhancedFieldTypeName@1000000023(pEnhancedFieldType@1000000000 : Integer) : Text;
    VAR
      lEnhancedFieldDefinition@1000000001 : Record 9062327;
    BEGIN
      //DOC NA2016.14 - Returning enhanced field type name
      //  -> pEnhancedFieldType: The enhanced field type
      //  <- The name

      lEnhancedFieldDefinition.Type := pEnhancedFieldType;
      EXIT(FORMAT(lEnhancedFieldDefinition.Type));
    END;

    PROCEDURE BufferFieldClassName@1000000026(pBufferFieldClass@1000000000 : Integer) : Text;
    VAR
      lTableFieldBuffer@1000000001 : Record 9062231;
    BEGIN
      //DOC NA2016.14 - Returning bufffer field class name
      //  -> pBufferFieldClass: The buffer field dlass
      //  <- The name

      lTableFieldBuffer."Field Class" := pBufferFieldClass;
      EXIT(FORMAT(lTableFieldBuffer."Field Class"));
    END;

    PROCEDURE FieldClassName@1000000027(pFieldClass@1000000000 : Integer) : Text;
    VAR
      lField@1000000001 : Record 2000000041;
    BEGIN
      //DOC NA2016.14 - Returning field class name
      //  -> pFieldClass: The field class
      //  <- The name

      lField.Class := pFieldClass;
      EXIT(FORMAT(lField.Class));
    END;

    BEGIN
    {
      //DOC NA2015.3  JH 18/09/2014 - Created
      //DOC NA2016.10 JH 27/08/2015 - Upgraded to 2016, field data type and field class logic added
      //DOC NA2016.12 JH 12/01/2016 - Fixes, amendments
      //DOC NA2016.14 JH 14/03/2016 - Functions moved from "Table Field Buffer"
    }
    END.
  }
}

