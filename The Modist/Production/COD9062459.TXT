OBJECT Codeunit 9062459 Generic Development Utilities
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE FilterRecord@1000000001(VAR RecRef@1000000000 : RecordRef;VAR FieldRef@1000000001 : FieldRef;FilterText@1000000002 : Text;BlankFilterText_means_ClearFilter@1000000007 : Boolean);
    VAR
      error_UnhandledType@1000000006 : TextConst 'ENU=The Field Type %1 is not currently implemented in the FilterRecord function;ENG=The Field Type %1 is not currently implemented in the FilterRecord function';
      type_Boolean@1000000009 : TextConst 'ENU=BOOLEAN;ENG=BOOLEAN';
      type_Code@1000000004 : TextConst 'ENU=CODE;ENG=CODE';
      type_Date@1000000010 : TextConst 'ENU=DATE;ENG=DATE';
      type_DateTime@1000000011 : TextConst 'ENU=DATETIME;ENG=DATETIME';
      type_Decimal@1000000012 : TextConst 'ENU=DECIMAL;ENG=DECIMAL';
      type_Integer@1000000013 : TextConst 'ENU=INTEGER;ENG=INTEGER';
      type_Option@1000000005 : TextConst 'ENU=OPTION;ENG=OPTION';
      type_Text@1000000003 : TextConst 'ENU=TEXT;ENG=TEXT';
      OptionNum@1000000008 : Integer;
      type_Time@1000000014 : TextConst 'ENU=TIME;ENG=TIME';
    BEGIN
      CASE UPPERCASE(FORMAT(FieldRef.TYPE)) OF
        type_Decimal, type_Integer :
          BEGIN
            IF FilterText = '' THEN BEGIN
              IF BlankFilterText_means_ClearFilter THEN
                FieldRef.SETFILTER(FilterText)
              ELSE
                FieldRef.SETRANGE(0);
            END ELSE BEGIN
              FieldRef.SETFILTER(FilterText)
            END;
            EXIT;
          END;

        type_Boolean :
          BEGIN
            IF FilterText = '' THEN BEGIN
              IF BlankFilterText_means_ClearFilter THEN
                FieldRef.SETFILTER(FilterText)
              ELSE
                FieldRef.SETRANGE(FALSE);
            END ELSE BEGIN
              FieldRef.SETFILTER(FilterText)
            END;
            EXIT;
          END;

        type_Date :
          BEGIN
            IF FilterText = '' THEN BEGIN
              IF BlankFilterText_means_ClearFilter THEN
                FieldRef.SETFILTER(FilterText)
              ELSE
                FieldRef.SETRANGE(0D);
            END ELSE BEGIN
              FieldRef.SETFILTER(FilterText)
            END;
            EXIT;
          END;

        type_DateTime :
          BEGIN
            IF FilterText = '' THEN BEGIN
              IF BlankFilterText_means_ClearFilter THEN
                FieldRef.SETFILTER(FilterText)
              ELSE
                FieldRef.SETRANGE(CREATEDATETIME(0D,0T));
            END ELSE BEGIN
              FieldRef.SETFILTER(FilterText)
            END;
            EXIT;
          END;

        type_Time :
          BEGIN
            IF FilterText = '' THEN BEGIN
              IF BlankFilterText_means_ClearFilter THEN
                FieldRef.SETFILTER(FilterText)
              ELSE
                FieldRef.SETRANGE(0T);
            END ELSE BEGIN
              FieldRef.SETFILTER(FilterText);
            END;
            EXIT;
          END;

        type_Text, type_Code :
          BEGIN
            IF FilterText = '' THEN BEGIN
              IF BlankFilterText_means_ClearFilter THEN
                FieldRef.SETFILTER(COPYSTR(FilterText,1,FieldRef.LENGTH))
              ELSE
                FieldRef.SETRANGE(COPYSTR(FilterText,1,FieldRef.LENGTH));
            END ELSE BEGIN
              FieldRef.SETFILTER(COPYSTR(FilterText,1,FieldRef.LENGTH));
            END;
            EXIT;
          END;

        type_Option :
          BEGIN
            IF FilterText = '' THEN BEGIN
              IF BlankFilterText_means_ClearFilter THEN BEGIN
                FieldRef.SETFILTER(FilterText);
                EXIT;
              END ELSE BEGIN
                FilterText := ' ';
              END;
            END;

            OptionNum := GetPositionInDelimitedString(FieldRef.OPTIONCAPTION,FilterText,',');
            IF OptionNum <> 0 THEN
              FieldRef.SETRANGE(OptionNum-1)
            ELSE
              FieldRef.SETFILTER(FilterText);

            EXIT;
          END;

        ELSE
          ERROR(error_UnhandledType,FORMAT(FieldRef.TYPE));
      END;
    END;

    PROCEDURE GetPositionInDelimitedString@1000000006(String@1000000000 : Text;Substring@1000000001 : Text;Delimiter@1000000002 : Text) Position : Integer;
    VAR
      Delim_Count@1000000003 : Integer;
      Substring_Pos@1000000004 : Integer;
      Current_Pos@1000000005 : Integer;
      Delim_Pos@1000000006 : Integer;
    BEGIN
      IF String = Substring THEN EXIT(1);
      IF STRPOS(String,Delimiter) = 0 THEN EXIT(0);

      Substring_Pos := STRPOS(String,Substring + Delimiter);
      IF Substring_Pos = 0 THEN BEGIN
        Substring_Pos := STRPOS(String,Delimiter + Substring);
        IF Substring_Pos = 0 THEN
          EXIT(0)
        ELSE
          Substring_Pos += 1;
      END;

      IF STRPOS(String,Delimiter) = 0 THEN BEGIN
        IF String = Substring THEN EXIT(1) ELSE EXIT(0);
      END;

      String := COPYSTR(String,1,Substring_Pos);
      Current_Pos := 1;
      Delim_Count := 1;

      REPEAT
        String := COPYSTR(String,Current_Pos);
        Delim_Pos := STRPOS(String,Delimiter);
        IF Delim_Pos <> 0 THEN BEGIN
          Current_Pos := Delim_Pos + 1;
          Delim_Count += 1;
        END;
      UNTIL Delim_Pos = 0;

      EXIT(Delim_Count);
    END;

    PROCEDURE GetServiceName@1000000000(ServiceID@1000000001 : Integer) ServiceName : Text;
    VAR
      ServerInstance@1000000000 : Record 2000000112;
      eError@1000000002 : TextConst 'ENU=Could not find the Service Instance %1;ENG=Could not find the Service Instance %1';
    BEGIN
      IF ServiceID = 0 THEN ServiceID := SERVICEINSTANCEID;

      IF NOT ServerInstance.GET(ServiceID) THEN ERROR(eError,ServiceID);
      EXIT(ServerInstance."Service Name");
    END;

    BEGIN
    {
      //*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!
      //*****                                                                   ******
      //***** This codeunit should compile on a Standard (Vanilla) NAV database ******
      //***** ----------------------------------------------------------------- ******
      //***** Therefore do not add a function to this codeunit that requires    ******
      //***** any object not provided by Microsoft.                             ******
      //*****                                                                   ******
      //!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*
      //DOC NA2015.3  PC 04/09/2014 - Created
      //DOC NA2015.3  PC 04/09/2014 - Added "FilterRecord" function
      //DOC NA2015.3  PC 04/09/2014 - Added "GetPositionInDelimitedString" function
      //DOC NA2015.4  PC 01/10/2014 - Added "GetServiceName" function
      //DOC NA2016.4  JH 26/08/2015 - Upgraded to 2016
      //DOC NA2016.15 JH 18/04/2016 - CfMD amendments
    }
    END.
  }
}

