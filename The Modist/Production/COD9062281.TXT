OBJECT Codeunit 9062281 EWS Managment
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnRun=VAR
            ePerformingSync@1000000016 : TextConst 'ENU=Performing Exchange Sync now;ENG=Performing Exchange Sync now';
          BEGIN
          END;

  }
  CODE
  {
    VAR
      DebugMode@1000000000 : Boolean;
      SysB@1000000001 : Record 9062230;
      theUsername@1000000002 : Text[50];
      thePassword@1000000003 : Text[50];
      TNPUtils@1000000004 : Codeunit 9062229;
      XMLDomMgt@1000000005 : Codeunit 6224;
      NSTypes@1000000006 : TextConst 'ENU=http://schemas.microsoft.com/exchange/services/2006/types;ENG=http://schemas.microsoft.com/exchange/services/2006/types';
      NSMessages@1000000007 : TextConst 'ENU=http://schemas.microsoft.com/exchange/services/2006/messages;ENG=http://schemas.microsoft.com/exchange/services/2006/messages';
      Logger@1000000008 : Record 9062280;
      ItemType@1000000009 : 'Contact,Meeting,E-Mail,Todo';
      NhancedNavSetup@1000000010 : Record 9062229;
      tEWS@1000000012 : TextConst 'ENU=EWS;ENG=EWS';
      tErrorSendingRequest@1000000013 : TextConst 'ENU=Error sending XMLHttp request to %1;ENG=Error sending XMLHttp request to %1';
      tResponseError@1000000014 : TextConst 'ENU=Response to %1 Request was an error;ENG=Response to %1 Request was an error';
      tErrorSending@1000000015 : TextConst 'ENU=Error sending %1 request: Status %2: %3;ENG=Error sending %1 request: Status %2: %3';

    PROCEDURE EWS_FindFolder_DotNet@1000000055(URL@1000000007 : Text[250];Username@1000000009 : Text[250];Password@1000000011 : Text[250];MailboxEmailAdd@1000000023 : Text[250];ParentFolderChangeKey@1000000017 : Text[250];ParentFolderID@1000000015 : Text[250];FolderName@1000000008 : Text[100];VAR xmldoc@1000000018 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocument") result : Boolean;
    VAR
      xmlhttp@1000000000 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequest";
      soapEnvelope@1000000002 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapBody@1000000003 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapMethod@1000000004 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      node@1000000005 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node2@1000000010 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node3@1000000013 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node4@1000000016 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node5@1000000024 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      attribute@1000000014 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMAttribute";
      parametersXmlDoc@1000000006 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMDocument";
      nodeList@1000000012 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNodeList";
      xmldocclass@1000000022 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocumentClass";
      xmlhttpclass@1000000021 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequestClass";
      attributes@1000000020 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNamedNodeMap";
      attributenode@1000000019 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      XMLHTTPSend@1000000001 : Codeunit 9062253;
      eName@1000000025 : TextConst 'ENU=FindFolder;ENG=FindFolder';
    BEGIN
      // Create XML Document
      xmldoc := xmldocclass.DOMDocumentClass;

      // Create SOAP Envelope
      soapEnvelope := xmldoc.createElement('soap:Envelope');
      soapEnvelope.setAttribute('xmlns:t','http://schemas.microsoft.com/exchange/services/2006/types');
      soapEnvelope.setAttribute('xmlns:soap', 'http://schemas.xmlsoap.org/soap/envelope/');

      xmldoc.appendChild(soapEnvelope);

      // Create SOAP Body
      soapBody := xmldoc.createElement('soap:Body');
      soapEnvelope.appendChild(soapBody);

      // Create Method Element
      soapMethod := xmldoc.createElement('FindFolder');
      soapMethod.setAttribute('xmlns', 'http://schemas.microsoft.com/exchange/services/2006/messages');
      soapMethod.setAttribute('xmlns:t','http://schemas.microsoft.com/exchange/services/2006/types');
      soapMethod.setAttribute('Traversal','Deep');
      soapBody.appendChild(soapMethod);

      //CREATE(parametersXmlDoc,TRUE,TRUE);
      parametersXmlDoc := xmldocclass.DOMDocumentClass;

      node := parametersXmlDoc.createNode('1','FolderShape','');
      node2 := parametersXmlDoc.createNode('1','t:BaseShape','http://schemas.microsoft.com/exchange/services/2006/types');
      node3 := parametersXmlDoc.createTextNode('Default');
      node2.appendChild(node3);
      node.appendChild(node2);

      soapMethod.appendChild(node);

      IF FolderName <> '' THEN BEGIN
        node := parametersXmlDoc.createNode('1','Restriction','');
        node2 := parametersXmlDoc.createNode('1','t:IsEqualTo','http://schemas.microsoft.com/exchange/services/2006/types');
        node3 := parametersXmlDoc.createNode('1','t:FieldURI','http://schemas.microsoft.com/exchange/services/2006/types');
        attributenode := parametersXmlDoc.createAttribute('FieldURI');
        attributenode.text('folder:DisplayName');
        attributes := node3.attributes;
        attributes.setNamedItem(attributenode);
        node2.appendChild(node3);

        node3 := parametersXmlDoc.createNode('1','t:FieldURIOrConstant','http://schemas.microsoft.com/exchange/services/2006/types');
        node4 := parametersXmlDoc.createNode('1','t:Constant','http://schemas.microsoft.com/exchange/services/2006/types');
        attributenode := parametersXmlDoc.createAttribute('Value');
        attributenode.text(FolderName);
        attributes := node4.attributes;
        attributes.setNamedItem(attributenode);
        node3.appendChild(node4);
        node2.appendChild(node3);

        node.appendChild(node2);

        soapMethod.appendChild(node);
      END;

      node := parametersXmlDoc.createNode('1','ParentFolderIds','');
      IF ParentFolderID = '' THEN BEGIN
        node2 := parametersXmlDoc.createNode('1','t:DistinguishedFolderId','http://schemas.microsoft.com/exchange/services/2006/types');
        attributenode := parametersXmlDoc.createAttribute('Id');
        attributenode.text('msgfolderroot');
        attributes := node2.attributes;
        attributes.setNamedItem(attributenode);

        IF MailboxEmailAdd <> '' THEN BEGIN
          node3 := parametersXmlDoc.createNode('1','t:Mailbox',NSTypes);
          node4 := parametersXmlDoc.createNode('1','t:EmailAddress',NSTypes);
          node5 := parametersXmlDoc.createTextNode(MailboxEmailAdd);
          node4.appendChild(node5);
          node3.appendChild(node4);
          node2.appendChild(node3);
        END;

      END ELSE BEGIN
        node2 := parametersXmlDoc.createNode('1','t:FolderId','http://schemas.microsoft.com/exchange/services/2006/types');
        attributenode := parametersXmlDoc.createAttribute('Id');
        attributenode.text(ParentFolderID);
        attributes := node2.attributes;
        attributes.setNamedItem(attributenode);

        attributenode := parametersXmlDoc.createAttribute('ChangeKey');
        attributenode.text(ParentFolderChangeKey);
        attributes := node2.attributes;
        attributes.setNamedItem(attributenode);
      END;

      node.appendChild(node2);

      soapMethod.appendChild(node);

      // Create XMLHTTP and SEND
      xmlhttp := xmlhttpclass.XMLHTTPRequestClass;
      xmlhttp.open('POST', URL, FALSE,Username,Password);

      xmlhttp.setRequestHeader('Content-type', 'text/xml; charset=utf-8');
      IF DebugMode THEN xmldoc.save(Get_EWSTempPath + '\exchange_findfolder_in_dn.xml');

      XMLHTTPSend.Set(xmlhttp,xmldoc);
      COMMIT;
      IF NOT XMLHTTPSend.RUN THEN BEGIN
        Logger.Log(tEWS, Logger.Type::Warning, STRSUBSTNO(tErrorSendingRequest, URL), USERID);
        EXIT(FALSE);
      END;

      XMLHTTPSend.Get(xmlhttp);

      // If status is OK - Get Result XML
      IF xmlhttp.status=200 THEN
      BEGIN
        xmldoc.loadXML(xmlhttp.responseText);

        IF NOT EWS_ParseResponse_DotNet(xmldoc) THEN BEGIN
          Logger.Log(tEWS, Logger.Type::Warning, STRSUBSTNO(tResponseError, eName), USERID);
          EXIT(FALSE);
        END;

        IF DebugMode THEN xmldoc.save(Get_EWSTempPath + '\exchange_findfolder_out_dn.xml');
        result := TRUE;
      END ELSE BEGIN
        Logger.Log(tEWS, Logger.Type::Error, STRSUBSTNO(tErrorSending, eName, xmlhttp.status, xmlhttp.statusText), USERID);
        EXIT(FALSE);
      END;
    END;

    PROCEDURE EWS_GetFolder_DotNet@1000000058(URL@1000000007 : Text[250];Username@1000000009 : Text[250];Password@1000000011 : Text[250];MailboxEmailAdd@1000000017 : Text[250];FolderName@1000000008 : Text[100];VAR xmldoc@1000000023 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocument") result : Boolean;
    VAR
      xmlhttp@1000000000 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequest";
      soapEnvelope@1000000002 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapBody@1000000003 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapMethod@1000000004 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      node@1000000005 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node2@1000000010 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node3@1000000013 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node4@1000000015 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node5@1000000016 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      attribute@1000000014 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      parametersXmlDoc@1000000006 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMDocument";
      nodeList@1000000012 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNodeList";
      xmldocclass@1000000022 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocumentClass";
      xmlhttpclass@1000000021 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequestClass";
      attributes@1000000020 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNamedNodeMap";
      attributenode@1000000019 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      XMLHTTPSend@1000000001 : Codeunit 9062253;
      eName@1000000018 : TextConst 'ENU=GetFolder;ENG=GetFolder';
    BEGIN
      // Create XML Document
      xmldoc := xmldocclass.DOMDocumentClass;

      // Create SOAP Envelope
      soapEnvelope := xmldoc.createElement('soap:Envelope');
      soapEnvelope.setAttribute('xmlns:t',NSTypes);
      soapEnvelope.setAttribute('xmlns:soap', 'http://schemas.xmlsoap.org/soap/envelope/');

      xmldoc.appendChild(soapEnvelope);

      // Create SOAP Body
      soapBody := xmldoc.createElement('soap:Body');
      soapEnvelope.appendChild(soapBody);

      // Create Method Element
      soapMethod := xmldoc.createElement('GetFolder');
      soapMethod.setAttribute('xmlns', NSMessages);
      soapMethod.setAttribute('xmlns:t',NSTypes);
      soapBody.appendChild(soapMethod);

      //CREATE(parametersXmlDoc,TRUE,TRUE);
      parametersXmlDoc := xmldocclass.DOMDocumentClass;

      node := parametersXmlDoc.createNode('1','FolderShape','');
      node2 := parametersXmlDoc.createNode('1','t:BaseShape',NSTypes);
      node3 := parametersXmlDoc.createTextNode('Default');
      node2.appendChild(node3);
      node.appendChild(node2);

      soapMethod.appendChild(node);

      node := parametersXmlDoc.createNode('1','FolderIds','');
      node2 := parametersXmlDoc.createNode('1','t:DistinguishedFolderId',NSTypes);
      attributenode := parametersXmlDoc.createAttribute('Id');
      attributenode.text(FolderName);
      attributes := node2.attributes;
      attributes.setNamedItem(attributenode);

      IF MailboxEmailAdd <> '' THEN BEGIN
        node3 := parametersXmlDoc.createNode('1','t:Mailbox',NSTypes);
        node4 := parametersXmlDoc.createNode('1','t:EmailAddress',NSTypes);
        node5 := parametersXmlDoc.createTextNode(MailboxEmailAdd);
        node4.appendChild(node5);
        node3.appendChild(node4);
        node2.appendChild(node3);
      END;

      node.appendChild(node2);

      soapMethod.appendChild(node);

      // Create XMLHTTP and SEND
      xmlhttp := xmlhttpclass.XMLHTTPRequestClass;
      xmlhttp.open('POST', URL, FALSE,Username,Password);

      xmlhttp.setRequestHeader('Content-type', 'text/xml; charset=utf-8');
      IF DebugMode THEN xmldoc.save(Get_EWSTempPath + '\exchange_GetFolder_in_dn.xml');

      XMLHTTPSend.Set(xmlhttp,xmldoc);
      COMMIT;
      IF NOT XMLHTTPSend.RUN THEN BEGIN
        Logger.Log(tEWS, Logger.Type::Warning, STRSUBSTNO(tErrorSendingRequest, URL), USERID);
        EXIT(FALSE);
      END;

      XMLHTTPSend.Get(xmlhttp);

      // If status is OK - Get Result XML
      IF xmlhttp.status=200 THEN
      BEGIN

        xmldoc.loadXML(xmlhttp.responseText);

        IF NOT EWS_ParseResponse_DotNet(xmldoc) THEN BEGIN
          Logger.Log(tEWS, Logger.Type::Warning, STRSUBSTNO(tResponseError, eName), USERID);
          EXIT(FALSE);
        END;

        IF DebugMode THEN xmldoc.save(Get_EWSTempPath + '\exchange_GetFolder_out_dn.xml');
        EXIT(TRUE);
      END ELSE BEGIN
        Logger.Log(tEWS, Logger.Type::Error, STRSUBSTNO(tErrorSending, eName, xmlhttp.status, xmlhttp.statusText), USERID);
        EXIT(FALSE);
      END;
    END;

    PROCEDURE EWS_GetFolderID_DotNet@1000000008(URL@1000000004 : Text[250];Username@1000000003 : Text[250];Password@1000000002 : Text[250];MailboxEmailAdd@1000000009 : Text[250];FolderName@1000000001 : Text[100];VAR FolderID@1000000005 : Text[250];VAR ChangeKey@1000000006 : Text[250]) : Boolean;
    VAR
      xmldoc@1000000011 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocument";
      node@1000000019 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      attributes@1000000007 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNamedNodeMap";
      attribute@1000000016 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMAttribute";
      nodeList@1000000012 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNodeList";
    BEGIN
      IF  (UPPERCASE(FolderName) = 'INBOX') OR
          (UPPERCASE(FolderName) = 'CONTACTS') OR
          (UPPERCASE(FolderName) = 'CALENDAR') OR
          (UPPERCASE(FolderName) = 'SENTITEMS') THEN BEGIN
        IF NOT EWS_GetFolder_DotNet(URL,Username,Password,MailboxEmailAdd,LOWERCASE(FolderName),xmldoc) THEN EXIT(FALSE);
      END ELSE BEGIN
        IF NOT EWS_FindFolder_DotNet(URL,Username,Password,MailboxEmailAdd,'','',FolderName,xmldoc) THEN EXIT(FALSE);
      END;
      node := xmldoc.selectSingleNode('//t:FolderId');
      IF ISNULL(node) THEN EXIT(FALSE);
      attributes := node.attributes;
      IF ISNULL(attributes) THEN EXIT(FALSE);

      attribute := attributes.getNamedItem('Id');
      IF NOT ISNULL(attribute) THEN FolderID := attribute.value;

      attribute := attributes.getNamedItem('ChangeKey');
      IF NOT ISNULL(attribute) THEN ChangeKey := attribute.value;

      EXIT(TRUE);
    END;

    PROCEDURE EWS_FindItem_DotNet@1000000052(URL@1000000007 : Text[250];Username@1000000008 : Text[250];Password@1000000009 : Text[250];FolderID@1000000011 : Text[1024];FolderChangeKey@1000000015 : Text[1024];VAR xmldoc@1000000016 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocument") result : Boolean;
    VAR
      xmldocclass@1000000001 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocumentClass";
      xmlhttp@1000000000 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequest";
      xmlhttpclass@1000000017 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequestClass";
      soapEnvelope@1000000002 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapBody@1000000003 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapMethod@1000000004 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      node@1000000005 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node2@1000000010 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node3@1000000013 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      attribute@1000000014 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMAttribute";
      attributes@1000000020 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNamedNodeMap";
      attributenode@1000000018 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      parametersXmlDoc@1000000006 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocument";
      nodeList@1000000012 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNodeList";
      XMLHTTPSend@1000000019 : Codeunit 9062253;
      eName@1000000021 : TextConst 'ENU=FindItem;ENG=FindItem';
    BEGIN
      // Create XML Document
      xmldoc := xmldocclass.DOMDocumentClass;

      // Create SOAP Envelope
      soapEnvelope := xmldoc.createElement('soap:Envelope');
      soapEnvelope.setAttribute('xmlns:t','http://schemas.microsoft.com/exchange/services/2006/types');
      soapEnvelope.setAttribute('xmlns:soap', 'http://schemas.xmlsoap.org/soap/envelope/');

      xmldoc.appendChild(soapEnvelope);

      // Create SOAP Body
      soapBody := xmldoc.createElement('soap:Body');
      soapEnvelope.appendChild(soapBody);

      // Create Method Element
      soapMethod := xmldoc.createElement('FindItem');
      soapMethod.setAttribute('xmlns', 'http://schemas.microsoft.com/exchange/services/2006/messages');
      soapMethod.setAttribute('xmlns:t','http://schemas.microsoft.com/exchange/services/2006/types');
      soapMethod.setAttribute('Traversal','Shallow');
      soapBody.appendChild(soapMethod);

      parametersXmlDoc := xmldocclass.DOMDocumentClass;

      node := parametersXmlDoc.createNode('1','ItemShape','');
      node2 := parametersXmlDoc.createNode('1','t:BaseShape','http://schemas.microsoft.com/exchange/services/2006/types');
      node3 := parametersXmlDoc.createTextNode('Default');
      node2.appendChild(node3);
      node.appendChild(node2);

      soapMethod.appendChild(node);

      node := parametersXmlDoc.createNode('1','ParentFolderIds','');
      node2 := parametersXmlDoc.createNode('1','t:FolderId','http://schemas.microsoft.com/exchange/services/2006/types');

      XML_SetAttribute_DotNet(node2,'Id',FolderID);
      XML_SetAttribute_DotNet(node2,'ChangeKey',FolderChangeKey);
      node.appendChild(node2);

      soapMethod.appendChild(node);

      // Create XMLHTTP and SEND
      xmlhttp := xmlhttpclass.XMLHTTPRequestClass;
      xmlhttp.open('POST', URL, FALSE,Username,Password);

      xmlhttp.setRequestHeader('Content-type', 'text/xml; charset=utf-8');
      IF DebugMode THEN xmldoc.save(Get_EWSTempPath + '\exchange_finditem_in_dn.xml');

      XMLHTTPSend.Set(xmlhttp,xmldoc);
      COMMIT;
      IF NOT XMLHTTPSend.RUN THEN BEGIN
        Logger.Log(tEWS, Logger.Type::Warning, STRSUBSTNO(tErrorSendingRequest, URL), USERID);
        EXIT(FALSE);
      END;

      XMLHTTPSend.Get(xmlhttp);

      // If status is OK - Get Result XML
      IF xmlhttp.status=200 THEN
      BEGIN
        xmldoc.loadXML(xmlhttp.responseText);

        IF NOT EWS_ParseResponse_DotNet(xmldoc) THEN BEGIN
          Logger.Log(tEWS, Logger.Type::Warning, STRSUBSTNO(tResponseError, eName), USERID);
          EXIT(FALSE);
        END;

        IF DebugMode THEN xmldoc.save(Get_EWSTempPath + '\exchange_finditem_out_dn.xml');
        EXIT(TRUE);
      END ELSE BEGIN
        Logger.Log(tEWS, Logger.Type::Error, STRSUBSTNO(tErrorSending, eName, xmlhttp.status, xmlhttp.statusText), USERID);
        EXIT(FALSE);
      END;
    END;

    PROCEDURE EWS_GetItem_DotNet@1000000048(URL@1000000007 : Text[250];Username@1000000016 : Text[250];Password@1000000017 : Text[250];ChangeKey@1000000008 : Text[1024];ItemId@1000000009 : Text[1024];TheItemType@1000000023 : 'Contact,Meeting,E-Mail,Todo';VAR xmldoc@1000000001 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocument") result : Boolean;
    VAR
      xmldocclass@1000000011 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocumentClass";
      xmlhttp@1000000000 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequest";
      xmlhttpclass@1000000018 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequestClass";
      soapEnvelope@1000000002 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapBody@1000000003 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapMethod@1000000004 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      node@1000000005 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node2@1000000010 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node3@1000000013 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      attribute@1000000014 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMAttribute";
      attributes@1000000020 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNamedNodeMap";
      attributenode@1000000021 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      parametersXmlDoc@1000000006 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocument";
      nodeList@1000000012 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNodeList";
      ADOStream@1000000019 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Stream";
      FSO@1000000015 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      XMLHTTPSend@1000000022 : Codeunit 9062253;
      eName@1000000025 : TextConst 'ENU=GetItem;ENG=GetItem';
    BEGIN
      // Create XML Document
      xmldoc := xmldocclass.DOMDocumentClass;

      // Create SOAP Envelope
      soapEnvelope := xmldoc.createElement('soap:Envelope');
      soapEnvelope.setAttribute('xmlns:t','http://schemas.microsoft.com/exchange/services/2006/types');
      soapEnvelope.setAttribute('xmlns:soap', 'http://schemas.xmlsoap.org/soap/envelope/');

      xmldoc.appendChild(soapEnvelope);

      // Create SOAP Body
      soapBody := xmldoc.createElement('soap:Body');
      soapEnvelope.appendChild(soapBody);

      // Create Method Element
      soapMethod := xmldoc.createElement('GetItem');
      soapMethod.setAttribute('xmlns', 'http://schemas.microsoft.com/exchange/services/2006/messages');
      soapMethod.setAttribute('xmlns:t','http://schemas.microsoft.com/exchange/services/2006/types');
      soapBody.appendChild(soapMethod);

      // Transfer parameters by loading them into a XML Document and move them
      parametersXmlDoc := xmldocclass.DOMDocumentClass;

      node := parametersXmlDoc.createNode('1','ItemShape','');
      node2 := parametersXmlDoc.createNode('1','t:BaseShape','http://schemas.microsoft.com/exchange/services/2006/types');
      node3 := parametersXmlDoc.createTextNode('AllProperties');
      node2.appendChild(node3);
      node.appendChild(node2);

      IF TheItemType = ItemType::"E-Mail" THEN BEGIN
        node2 := parametersXmlDoc.createNode('1','t:IncludeMimeContent',NSTypes);
        node3 := parametersXmlDoc.createTextNode('true');
        node2.appendChild(node3);
        node.appendChild(node2);

        node2 := parametersXmlDoc.createNode('1','t:BodyType',NSTypes);
        node3 := parametersXmlDoc.createTextNode('Text');
        node2.appendChild(node3);
        node.appendChild(node2);

      END;

      IF TheItemType = ItemType::Meeting THEN BEGIN
        //For Meetings try to get the GlobalObjectGUID >>>
        node2 := parametersXmlDoc.createNode('1','t:AdditionalProperties',NSTypes);
        node3 := parametersXmlDoc.createNode('1','t:ExtendedFieldURI',NSTypes);
        XML_SetAttribute_DotNet(node3,'PropertyType','Binary');
        XML_SetAttribute_DotNet(node3,'PropertyId','3');
        XML_SetAttribute_DotNet(node3,'DistinguishedPropertySetId','Meeting');
        node2.appendChild(node3);
        node.appendChild(node2);

        node.appendChild(node2);
        //For Meetings try to get the GlobalObjectGUID <<<
      END;

      soapMethod.appendChild(node);

      node := parametersXmlDoc.createNode('1','ItemIds','');
      node2 := parametersXmlDoc.createNode('1','t:ItemId','http://schemas.microsoft.com/exchange/services/2006/types');

      attributenode := parametersXmlDoc.createAttribute('Id');
      attributenode.text(ItemId);

      attributes := node2.attributes;
      attributes.setNamedItem(attributenode);


      IF ChangeKey <> '' THEN BEGIN
        attributenode := parametersXmlDoc.createAttribute('ChangeKey');
        attributenode.text(ChangeKey);
        attributes.setNamedItem(attributenode);
      END;


      node.appendChild(node2);

      soapMethod.appendChild(node);

      // Create XMLHTTP and SEND
      xmlhttp := xmlhttpclass.XMLHTTPRequestClass;
      xmlhttp.open('POST', URL, FALSE,Username,Password);

      xmlhttp.setRequestHeader('Content-type', 'text/xml; charset=utf-8');
      IF DebugMode THEN xmldoc.save(Get_EWSTempPath + '\exchange_getitem_in_dn.xml');

      XMLHTTPSend.Set(xmlhttp,xmldoc);
      COMMIT;
      IF NOT XMLHTTPSend.RUN THEN BEGIN
        Logger.Log(tEWS, Logger.Type::Warning, STRSUBSTNO(tErrorSendingRequest,URL), USERID);
        EXIT(FALSE);
      END;

      XMLHTTPSend.Get(xmlhttp);

      // If status is OK - Get Result XML
      IF xmlhttp.status=200 THEN
      BEGIN
        xmldoc.loadXML(xmlhttp.responseText);

        IF NOT EWS_ParseResponse_DotNet(xmldoc) THEN BEGIN
          Logger.Log(tEWS, Logger.Type::Warning, STRSUBSTNO(tResponseError, eName), USERID);
          EXIT(FALSE);
        END;

        IF DebugMode THEN xmldoc.save(Get_EWSTempPath + '\exchange_getitem_out_dn.xml');

        EXIT(TRUE);
      END ELSE BEGIN
        Logger.Log(tEWS, Logger.Type::Error, STRSUBSTNO(tErrorSending, eName, xmlhttp.status, xmlhttp.statusText), USERID);
        EXIT(FALSE);
      END;
    END;

    PROCEDURE EWS_GetAttachment_DotNet@1000000013(URL@1000000007 : Text[250];Username@1000000016 : Text[250];Password@1000000017 : Text[250];AttachmentId@1000000009 : Text[1024];VAR AttachmentName@1000000008 : Text[1024];VAR TempBLOB@1000000001 : TEMPORARY Record 99008535) result : Boolean;
    VAR
      xmldoc@1000000023 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocument";
      xmldocclass@1000000011 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocumentClass";
      xmlhttp@1000000000 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequest";
      xmlhttpclass@1000000018 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequestClass";
      soapEnvelope@1000000002 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapBody@1000000003 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapMethod@1000000004 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      node@1000000005 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node2@1000000010 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node3@1000000013 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      attribute@1000000014 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMAttribute";
      attributes@1000000020 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNamedNodeMap";
      attributenode@1000000021 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      parametersXmlDoc@1000000006 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocument";
      nodeList@1000000012 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNodeList";
      ADOStream@1000000019 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Stream";
      FSO@1000000015 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      XMLHTTPSend@1000000022 : Codeunit 9062253;
      Base64Text@1000000030 : BigText;
      eName@1000000024 : TextConst 'ENU=GetAttachment;ENG=GetAttachment';
    BEGIN
      // Create XML Document
      xmldoc := xmldocclass.DOMDocumentClass;

      // Create SOAP Envelope
      soapEnvelope := xmldoc.createElement('soap:Envelope');
      soapEnvelope.setAttribute('xmlns:t','http://schemas.microsoft.com/exchange/services/2006/types');
      soapEnvelope.setAttribute('xmlns:soap', 'http://schemas.xmlsoap.org/soap/envelope/');

      xmldoc.appendChild(soapEnvelope);

      // Create SOAP Body
      soapBody := xmldoc.createElement('soap:Body');
      soapEnvelope.appendChild(soapBody);

      // Create Method Element
      soapMethod := xmldoc.createElement('GetAttachment');
      soapMethod.setAttribute('xmlns', 'http://schemas.microsoft.com/exchange/services/2006/messages');
      soapMethod.setAttribute('xmlns:t','http://schemas.microsoft.com/exchange/services/2006/types');
      soapBody.appendChild(soapMethod);

      // Transfer parameters by loading them into a XML Document and move them
      parametersXmlDoc := xmldocclass.DOMDocumentClass;

      node := parametersXmlDoc.createNode('1','AttachmentShape','');
      soapMethod.appendChild(node);

      node := parametersXmlDoc.createNode('1','AttachmentIds','');
      node2 := parametersXmlDoc.createNode('1','t:AttachmentId','http://schemas.microsoft.com/exchange/services/2006/types');
      XML_SetAttribute_DotNet(node2,'Id',AttachmentId);
      node.appendChild(node2);

      soapMethod.appendChild(node);

      // Create XMLHTTP and SEND
      xmlhttp := xmlhttpclass.XMLHTTPRequestClass;
      xmlhttp.open('POST', URL, FALSE,Username,Password);

      xmlhttp.setRequestHeader('Content-type', 'text/xml; charset=utf-8');
      IF DebugMode THEN xmldoc.save(Get_EWSTempPath + '\exchange_getattachment_in_dn.xml');

      XMLHTTPSend.Set(xmlhttp,xmldoc);
      COMMIT;
      IF NOT XMLHTTPSend.RUN THEN BEGIN
        Logger.Log(tEWS, Logger.Type::Warning,STRSUBSTNO(tErrorSendingRequest,URL),USERID);
        EXIT(FALSE);
      END;

      XMLHTTPSend.Get(xmlhttp);

      // If status is OK - Get Result XML
      IF xmlhttp.status=200 THEN
      BEGIN
        xmldoc.loadXML(xmlhttp.responseText);

        IF NOT EWS_ParseResponse_DotNet(xmldoc) THEN BEGIN
          Logger.Log(tEWS, Logger.Type::Warning, STRSUBSTNO(tResponseError, eName), USERID);
          EXIT(FALSE);
        END;

        IF DebugMode THEN xmldoc.save(Get_EWSTempPath + '\exchange_getattachment_out_dn.xml');
        node := xmldoc.selectSingleNode('//t:Name');
        IF ISNULL(node) THEN EXIT(FALSE);
        AttachmentName := COPYSTR(node.text,1,MAXSTRLEN(AttachmentName));

        node := xmldoc.selectSingleNode('//t:Content');
        IF ISNULL(node) THEN EXIT(FALSE);

        Base64Text.ADDTEXT(node.text);
        XML_SaveBase64ToTempBLOB(Base64Text,TempBLOB);
        EXIT(TRUE);
      END ELSE BEGIN
        Logger.Log(tEWS, Logger.Type::Error, STRSUBSTNO(tErrorSending, eName, xmlhttp.status, xmlhttp.statusText), USERID);
        EXIT(FALSE);
      END;
    END;

    PROCEDURE EWS_MoveItem_DotNet@1000000014(URL@1000000007 : Text[250];Username@1000000016 : Text[250];Password@1000000017 : Text[250];VAR ItemID@1000000009 : Text[1024];VAR ChangeKey@1000000001 : Text[1024];DestFolderID@1000000008 : Text[1024]) result : Boolean;
    VAR
      xmldoc@1000000023 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocument";
      xmldocclass@1000000011 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocumentClass";
      xmlhttp@1000000000 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequest";
      xmlhttpclass@1000000018 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequestClass";
      soapEnvelope@1000000002 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapBody@1000000003 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapMethod@1000000004 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      node@1000000005 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node2@1000000010 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node3@1000000013 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      attribute@1000000014 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMAttribute";
      attributes@1000000020 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNamedNodeMap";
      attributenode@1000000021 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      parametersXmlDoc@1000000006 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocument";
      nodeList@1000000012 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNodeList";
      ADOStream@1000000019 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Stream";
      FSO@1000000015 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      XMLHTTPSend@1000000022 : Codeunit 9062253;
      Base64Text@1000000030 : BigText;
      InStr@1000000027 : InStream;
      MemStr@1000000026 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      OutStr@1000000025 : OutStream;
      Convert@1000000028 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Bytes@1000000024 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      eName@1000000029 : TextConst 'ENU=MoveItem;ENG=MoveItem';
    BEGIN
      // Create XML Document
      xmldoc := xmldocclass.DOMDocumentClass;

      // Create SOAP Envelope
      soapEnvelope := xmldoc.createElement('soap:Envelope');
      soapEnvelope.setAttribute('xmlns:t','http://schemas.microsoft.com/exchange/services/2006/types');
      soapEnvelope.setAttribute('xmlns:soap', 'http://schemas.xmlsoap.org/soap/envelope/');

      xmldoc.appendChild(soapEnvelope);

      // Create SOAP Body
      soapBody := xmldoc.createElement('soap:Body');
      soapEnvelope.appendChild(soapBody);

      // Create Method Element
      soapMethod := xmldoc.createElement('MoveItem');
      soapMethod.setAttribute('xmlns', 'http://schemas.microsoft.com/exchange/services/2006/messages');
      soapMethod.setAttribute('xmlns:t','http://schemas.microsoft.com/exchange/services/2006/types');
      soapBody.appendChild(soapMethod);

      // Transfer parameters by loading them into a XML Document and move them
      parametersXmlDoc := xmldocclass.DOMDocumentClass;

      node := parametersXmlDoc.createNode('1','ToFolderId','');
      node2 := parametersXmlDoc.createNode('1','t:FolderId','http://schemas.microsoft.com/exchange/services/2006/types');
      XML_SetAttribute_DotNet(node2,'Id',DestFolderID);
      node.appendChild(node2);

      soapMethod.appendChild(node);

      node := parametersXmlDoc.createNode('1','ItemIds','');
      node2 := parametersXmlDoc.createNode('1','t:ItemId','http://schemas.microsoft.com/exchange/services/2006/types');
      XML_SetAttribute_DotNet(node2,'Id',ItemID);
      XML_SetAttribute_DotNet(node2,'ChangeKey',ChangeKey);
      node.appendChild(node2);

      soapMethod.appendChild(node);

      // Create XMLHTTP and SEND
      xmlhttp := xmlhttpclass.XMLHTTPRequestClass;
      xmlhttp.open('POST', URL, FALSE,Username,Password);

      xmlhttp.setRequestHeader('Content-type', 'text/xml; charset=utf-8');
      IF DebugMode THEN xmldoc.save(Get_EWSTempPath + '\exchange_moveitem_in_dn.xml');

      XMLHTTPSend.Set(xmlhttp,xmldoc);
      COMMIT;
      IF NOT XMLHTTPSend.RUN THEN BEGIN
        Logger.Log(tEWS, Logger.Type::Warning, STRSUBSTNO(tErrorSendingRequest,URL), USERID);
        EXIT(FALSE);
      END;

      XMLHTTPSend.Get(xmlhttp);

      // If status is OK - Get Result XML
      IF xmlhttp.status=200 THEN
      BEGIN
        xmldoc.loadXML(xmlhttp.responseText);

        IF NOT EWS_ParseResponse_DotNet(xmldoc) THEN BEGIN
          Logger.Log(tEWS, Logger.Type::Warning, STRSUBSTNO(tResponseError, eName), USERID);
          EXIT(FALSE);
        END;

        IF DebugMode THEN xmldoc.save(Get_EWSTempPath + '\exchange_moveitem_out_dn.xml');

        node := xmldoc.selectSingleNode('//@Id');
        IF NOT ISNULL(node) THEN ItemID := node.text;
        node := xmldoc.selectSingleNode('//@ChangeKey');
        IF NOT ISNULL(node) THEN ChangeKey := node.text;

        EXIT(TRUE);
      END ELSE BEGIN
        Logger.Log(tEWS, Logger.Type::Error, STRSUBSTNO(tErrorSending, eName, xmlhttp.status, xmlhttp.statusText), USERID);
        EXIT(FALSE);
      END;
    END;

    PROCEDURE EWS_DeleteItem_DotNet@1000000011(URL@1000000007 : Text[250];Username@1000000016 : Text[250];Password@1000000017 : Text[250];ItemId@1000000009 : Text[1024];TheItemType@1000000001 : 'Contact,Meeting,E-Mail,Todo') result : Boolean;
    VAR
      xmldoc@1000000032 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocument";
      xmldocclass@1000000031 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocumentClass";
      xmlhttp@1000000030 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequest";
      xmlhttpclass@1000000029 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequestClass";
      soapEnvelope@1000000028 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapBody@1000000027 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapMethod@1000000026 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      node@1000000025 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node2@1000000024 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node3@1000000023 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      attribute@1000000022 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMAttribute";
      attributes@1000000021 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNamedNodeMap";
      attributenode@1000000020 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      parametersXmlDoc@1000000019 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocument";
      nodeList@1000000018 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNodeList";
      XMLHTTPSend@1000000000 : Codeunit 9062253;
      eName@1000000002 : TextConst 'ENU=DeleteItem;ENG=DeleteItem';
    BEGIN
      // Create XML Document
      xmldoc := xmldocclass.DOMDocumentClass;

      // Create SOAP Envelope
      soapEnvelope := xmldoc.createElement('soap:Envelope');
      soapEnvelope.setAttribute('xmlns:t','http://schemas.microsoft.com/exchange/services/2006/types');
      soapEnvelope.setAttribute('xmlns:soap', 'http://schemas.xmlsoap.org/soap/envelope/');

      xmldoc.appendChild(soapEnvelope);

      // Create SOAP Body
      soapBody := xmldoc.createElement('soap:Body');
      soapEnvelope.appendChild(soapBody);

      // Create Method Element
      soapMethod := xmldoc.createElement('DeleteItem');
      soapMethod.setAttribute('DeleteType', 'HardDelete');
      soapMethod.setAttribute('xmlns', 'http://schemas.microsoft.com/exchange/services/2006/messages');

      CASE TheItemType OF
        TheItemType::Meeting : soapMethod.setAttribute('SendMeetingCancellations', 'SendToNone');
      END;

      soapBody.appendChild(soapMethod);

      // Transfer parameters by loading them into a XML Document and move them
      parametersXmlDoc := xmldocclass.DOMDocumentClass;

      node := parametersXmlDoc.createNode('1','ItemIds','');
      node2 := parametersXmlDoc.createNode('1','t:ItemId','http://schemas.microsoft.com/exchange/services/2006/types');
      XML_SetAttribute_DotNet(node2,'Id',ItemId);

      node.appendChild(node2);

      soapMethod.appendChild(node);

      // Create XMLHTTP and SEND
      xmlhttp := xmlhttpclass.XMLHTTPRequestClass;
      xmlhttp.open('POST', URL, FALSE,Username,Password);

      xmlhttp.setRequestHeader('Content-type', 'text/xml; charset=utf-8');
      IF DebugMode THEN xmldoc.save(Get_EWSTempPath + '\exchange_deleteitem_in_dn.xml');

      XMLHTTPSend.Set(xmlhttp,xmldoc);
      COMMIT;
      IF NOT XMLHTTPSend.RUN THEN BEGIN
        Logger.Log(tEWS, Logger.Type::Warning,STRSUBSTNO(tErrorSendingRequest,URL),USERID);
        EXIT(FALSE);
      END;

      XMLHTTPSend.Get(xmlhttp);

      // If status is OK - Get Result XML
      IF xmlhttp.status=200 THEN
      BEGIN
        xmldoc.loadXML(xmlhttp.responseText);

        IF NOT EWS_ParseResponse_DotNet(xmldoc) THEN BEGIN
          Logger.Log(tEWS, Logger.Type::Warning, STRSUBSTNO(tResponseError, eName), USERID);
          EXIT(FALSE);
        END;

        IF DebugMode THEN xmldoc.save(Get_EWSTempPath + '\exchange_deleteitem_out_dn.xml');

        EXIT(TRUE);
      END ELSE BEGIN
        Logger.Log(tEWS, Logger.Type::Error, STRSUBSTNO(tErrorSending, eName, xmlhttp.status, xmlhttp.statusText), USERID);
        EXIT(FALSE);
      END;
    END;

    PROCEDURE EWS_SendEmail@1000000005(URL@1000000007 : Text[250];Username@1000000016 : Text[250];Password@1000000017 : Text[250];EmailTo@1000000008 : Text[1024];Subject@1000000009 : Text[1024];Body@1000000018 : Text[1024];VAR xmldoc@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60") result : Boolean;
    VAR
      xmlhttp@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A0A-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.XMLHTTP60";
      soapEnvelope@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      soapBody@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      soapMethod@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      node@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      node2@1000000010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      node3@1000000013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      node4@1000000019 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      node5@1000000020 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      node6@1000000021 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      attribute@1000000014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF85-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMAttribute";
      parametersXmlDoc@1000000006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      nodeList@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      ADOStream@1000000011 : Automation "{EF53050B-882E-4776-B643-EDA472E8E3F2} 2.7:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.7 Library'.Stream";
      FSO@1000000015 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
    BEGIN
    END;

    PROCEDURE EWS_ParseResponse_DotNet@1000000038(VAR ResponseXML@1000000000 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocument") Success : Boolean;
    VAR
      nodeList@1000000002 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNodeList";
      node@1000000001 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      ResponseClass@1000000003 : Text[30];
      ResponseNode@1000000004 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      eProblemReadingResponse@1000000005 : TextConst 'ENU=There was a problem reading the response class;ENG=There was a problem reading the response class';
    BEGIN
      IF DebugMode THEN ResponseXML.save(Get_EWSTempPath + '\exchange_responsetoparse.xml');
      node := ResponseXML.selectSingleNode('//m:ResponseMessages');
      ResponseNode := node.selectSingleNode('//@ResponseClass');
      ResponseClass := ResponseNode.text;
      CASE ResponseClass OF
        '' : ERROR(eProblemReadingResponse);
        'Success' : EXIT(TRUE);
        'Error' : EXIT(FALSE);
      END;
    END;

    PROCEDURE "---UTILS---"@1000000023();
    BEGIN
    END;

    PROCEDURE Util_XMLDateToDateAndTime@1000000017(XMLDate@1000000000 : Text[30];VAR theDate@1000000001 : Date;VAR theTime@1000000002 : Time);
    VAR
      DateTime_Local@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      DateTime_Local_PossDL@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      DateTime_UTC@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      NAVDateTime@1000000005 : DateTime;
      NAVDateTime2@1000000013 : DateTime;
      TimeZoneInfo@1000000009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZoneInfo";
      TimeZone@1000000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZone";
      DateTimeKind@1000000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTimeKind";
      DateString@1000000010 : Text[20];
      TimeString@1000000011 : Text[20];
      OneHour@1000000012 : Duration;
    BEGIN
      EVALUATE(NAVDateTime,XMLDate,9);
      theDate := DT2DATE(NAVDateTime);
      theTime := DT2TIME(NAVDateTime);
    END;

    PROCEDURE Util_DateAndTimeToXMLDate@1000000031(theDate@1000000001 : Date;theTime@1000000002 : Time;VAR XMLDate@1000000000 : Text[30]);
    VAR
      DateTime_Local@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      DateTime_Local_PossDL@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      DateTime_UTC@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      NAVDateTime@1000000005 : DateTime;
      TimeZoneInfo@1000000009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZoneInfo";
      TimeZone@1000000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZone";
      DateTimeKind@1000000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTimeKind";
      DateString@1000000010 : Text[20];
      TimeString@1000000011 : Text[20];
      OneHour@1000000012 : Duration;
      tmpDateTime@1000000013 : DateTime;
    BEGIN
      tmpDateTime := CREATEDATETIME(theDate,theTime);
      XMLDate := FORMAT(tmpDateTime,0,9);
    END;

    PROCEDURE Set_UsernamePassword@1000000015(Username@1000000000 : Text[50];Password@1000000001 : Text[50]);
    BEGIN
      theUsername := Username;
      thePassword := Password;
    END;

    PROCEDURE Set_DebugMode@1000000016(SetDebugTo@1000000000 : Boolean);
    BEGIN
      DebugMode := SetDebugTo;
    END;

    PROCEDURE XML_SetAttribute_DotNet@1000000042(VAR node@1000000001 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";AttributeName@1000000000 : Text;AttributeText@1000000002 : Text);
    VAR
      attributes@1000000004 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNamedNodeMap";
      attributenode@1000000003 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      XmlDoc@1000000005 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMDocument";
    BEGIN
      XmlDoc := node.ownerDocument;
      attributenode := XmlDoc.createAttribute(AttributeName);
      attributenode.text(AttributeText);
      attributes := node.attributes;
      attributes.setNamedItem(attributenode);
    END;

    PROCEDURE XML_SaveBase64ToTempBLOB@1000000018(Base64Text@1000000000 : BigText;VAR TempBLOB@1000000001 : TEMPORARY Record 99008535);
    VAR
      MemStr@1000000005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      OutStr@1000000004 : OutStream;
      Convert@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Bytes@1000000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
    BEGIN
      Bytes := Convert.FromBase64String(Base64Text);
      MemStr := MemStr.MemoryStream(Bytes);

      TempBLOB.INIT;
      TempBLOB.Blob.CREATEOUTSTREAM(OutStr);
      MemStr.WriteTo(OutStr);
      TempBLOB.INSERT;
    END;

    PROCEDURE Get_EWSURL@9062231() : Text;
    BEGIN
      NhancedNavSetup.GET;
      NhancedNavSetup.TESTFIELD("Exchange URL");
      EXIT(NhancedNavSetup."Exchange URL");
    END;

    PROCEDURE Get_EWSUsername@9062229() : Text;
    BEGIN
      NhancedNavSetup.GET;
      NhancedNavSetup.TESTFIELD("Exchange Username");
      EXIT(NhancedNavSetup."Exchange Username");
    END;

    PROCEDURE Get_EWSPassword@9062230() : Text;
    BEGIN
      NhancedNavSetup.GET;
      NhancedNavSetup.TESTFIELD("Exchange Password");
      EXIT(NhancedNavSetup."Exchange Password");
    END;

    PROCEDURE Get_EWSTempPath@1000000012() : Text[250];
    VAR
      FileSystem@9062230 : Codeunit 9062264;
      DirectoryPath@9062231 : Text;
    BEGIN
      DirectoryPath := SysB.GetText('EXCH_TEMP_DIRECTORY');
      IF (NOT (DirectoryPath = '')) THEN BEGIN
        IF (NOT FileSystem.FolderExists(FALSE,DirectoryPath)) THEN
          FileSystem.CreateFolder(FALSE,DirectoryPath);
      END;
      EXIT(DirectoryPath);
    END;

    PROCEDURE GetNoraInboxFolder@9062232() : Text;
    BEGIN
      NhancedNavSetup.GET();
      NhancedNavSetup.TESTFIELD("Exchange Inbox Folder");
      EXIT(NhancedNavSetup."Exchange Inbox Folder");
    END;

    PROCEDURE GetNoraArchiveFolder@9062233() : Text;
    BEGIN
      NhancedNavSetup.GET();
      NhancedNavSetup.TESTFIELD("Exchange Archive Folder");
      EXIT(NhancedNavSetup."Exchange Archive Folder");
    END;

    PROCEDURE GetNoraErrorFolder@9062234() : Text;
    BEGIN
      NhancedNavSetup.GET();
      NhancedNavSetup.TESTFIELD("Exchange Error Folder");
      EXIT(NhancedNavSetup."Exchange Error Folder");
    END;

    BEGIN
    {
      //DOC NA2015.1  PC 01/01/2013 - Exchange Integration
      //DOC NA2015.1  JH 04/04/2013 - nOra fields functions
      //DOC NA2015.1  PC 24/07/2013 - Change to accomodate "Type" in Dataset Primary Key
      //DOC NA2016.10 JH 27/08/2015 - Upgraded to 2016
      //DOC NA2016.11 AP 05/11/2015 - Create EWS Folder if it doesen't exists
      //DOC NA2016.15 JH 18/04/2016 - CfMD amendments
    }
    END.
  }
}

