OBJECT Codeunit 9086957 nF. Update Users Permissions
{
  OBJECT-PROPERTIES
  {
    Date=22/12/16;
    Time=12:00:00 PM;
    Version List=NF2016.17.11;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NfSetup@1000000011 : Record 9086950;
      NfUser@1000000000 : Record 9086953;
      NfUserUpdatedTmp@1000000001 : TEMPORARY Record 9086953;
      NfUserGroupTmp@1000000015 : TEMPORARY Record 9086955;
      NfUserGroupMemberTmp@1000000014 : TEMPORARY Record 9086956;
      NfCompanyTmp@1000000003 : TEMPORARY Record 9086957;
      NfPermissionGroupTmp@1000000013 : TEMPORARY Record 9086960;
      NfPermissionGroupMemberTmp@1000000012 : TEMPORARY Record 9086961;
      NfPermissionTmp@1000000002 : TEMPORARY Record 9086958;
      NfPermissionToSearchTmp@1000000016 : TEMPORARY Record 9086958;
      NfPermissionBuffer@1000000017 : TEMPORARY Record 9086962;
      NfPermissionMatrixBuffer@1000000039 : TEMPORARY Record 9086963;
      NfUserPermissionSet@1000000030 : Record 9086954;
      NfLog@1000000006 : Record 9086967;
      PermissionSet@1000000031 : Record 2000000004;
      Permission@1000000033 : Record 2000000005;
      AccessControl@1000000029 : Record 2000000053;
      AllObj@1000000038 : Record 2000000038;
      NfCompanyManagement@1000000004 : Codeunit 9086958;
      NfDialogManagement@1000000005 : Codeunit 9086952;
      tActivityType@1000000007 : TextConst 'ENU=Update Users Permissions;ENG=Update Users Permissions';
      NfIif@1000000008 : Codeunit 9086975;
      NfManagement@1000000028 : Codeunit 9086950;
      NfRecordFilterManagement@1000000025 : Codeunit 9086961;
      NoSeriesManagement@1000000032 : Codeunit 396;
      UpdateType@1000000010 : ' ,All,Selected,Single';
      LogActivityId@1000000009 : Integer;
      UserGroupFilter@1000000019 : TEMPORARY Record 2000000026;
      UserGroupInFilterText@1000000020 : Text;
      UserGroupOutFilterText@1000000042 : Text;
      PermissionGroupFilter@1000000018 : TEMPORARY Record 2000000026;
      PermissionGroupInFilterText@1000000022 : Text;
      PermissionGroupOutFilterText@1000000041 : Text;
      DialogIndex@1000000021 : ' ,Users,User,Company,Activity,Progress';
      NfPermissionBufferRecRef@1000000034 : RecordRef;
      NfPermissionBufferFldRefs@1000000035 : ARRAY [5] OF FieldRef;
      GiveTake@1000000040 : 'Empty,GiveEverything,Give,GiveForced,GiveFiltered,,,,,,,TakeAway,TakeAwayForced,TakeAwayProvisional,Incorrect';
      tInitialising@1000000049 : TextConst 'ENU=Initialising;ENG=Initialising';
      tCollectingUserGroups@1000000043 : TextConst 'ENU=Collecting User Groups;ENG=Collecting User Groups';
      tCollectingPermissionGroups@1000000044 : TextConst 'ENU=Collecting Permission Groups;ENG=Collecting Permission Groups';
      tCollectingPermissions@1000000045 : TextConst 'ENU=Collecting Permissions;ENG=Collecting Permissions';
      tUpdatingProvisionalPermissions@1000000046 : TextConst 'ENU=Updating Provisional Permissions;ENG=Updating Provisional Permissions';
      tRemovingEmptyPermissions@1000000023 : TextConst 'ENU=Removing Empty Permissions;ENG=Removing Empty Permissions';
      tSettingNewPermissions@1000000047 : TextConst 'ENU=Setting New Permissions;ENG=Setting New Permissions';
      tRemovingOldPermissions@1000000048 : TextConst 'ENU=Removing Old Permissions;ENG=Removing Old Permissions';
      UsersToUpdate@1000000024 : Option;
      ExplainPermissionMode@1000000026 : Boolean;
      NfExplainPermissionContext@1000000027 : Record 9086973;

    LOCAL PROCEDURE "--- General ---"@1000000012();
    BEGIN
    END;

    PROCEDURE UpdateSingle@1000000007(VAR pNfUser@1000000000 : Record 9086953;pInteraction@1000000001 : Boolean);
    BEGIN
      ///<summary>Updating a user</summary>
      ///<param name="pNfUser">The user</param>
      ///<param name="pInteraction">Interaction flag</param>

      NfUser := pNfUser;
      NfUser.SETRECFILTER();
      UpdateInternal(pInteraction, UpdateType::Single, FALSE, NfExplainPermissionContext);
      pNfUser := NfUser;
    END;

    PROCEDURE UpdateAll@1000000006(pInteraction@1000000000 : Boolean);
    BEGIN
      ///<summary>Updating all users</summary>
      ///<param name="pInteraction">Interaction flag</param>

      NfUser.RESET();
      UpdateInternal(pInteraction, UpdateType::All, FALSE, NfExplainPermissionContext);
    END;

    PROCEDURE UpdateSelected@1000000002(VAR pNfUser@1000000000 : Record 9086953;pInteraction@1000000001 : Boolean);
    BEGIN
      ///<summary>Updating selected users</summary>
      ///<param name="pNfUser">The recordset</param>
      ///<param name="pInteraction">Interaction flag</param>

      NfUser.RESET();
      NfUser.COPY(pNfUser);
      UpdateInternal(pInteraction, UpdateType::Selected, FALSE, NfExplainPermissionContext);
    END;

    PROCEDURE ExplainPermission@1000000050(VAR pNfExplainPermissionContext@1000000000 : Record 9086973);
    BEGIN
      ///<summary>Explaining permission</summary>
      ///<param name="pNfExplainPermissionContext">Context for "Explain Permission"</param>

      UpdateInternal(TRUE, UpdateType::Single, TRUE, pNfExplainPermissionContext);
    END;

    LOCAL PROCEDURE "--- Internal ---"@1000000011();
    BEGIN
    END;

    LOCAL PROCEDURE UpdateInternal@1000000003(pInteraction@1000000000 : Boolean;pUpdateType@1000000004 : Integer;pExplainPermissionMode@1000000002 : Boolean;VAR pNfExplainPermissionContext@1000000003 : Record 9086973);
    VAR
      eNoUsersToUpdate@1000000001 : TextConst 'ENU=There are no users to update (being pending, not disabled and not blocked).;ENG=There are no users to update (being pending, not disabled and not blocked).';
    BEGIN
      ///<summary>Updating (internal version)</summary>
      ///<param name="pInteraction">Interaction flag</param>
      ///<param name="pUpdateType">Update type (see "UpdateType" global variable for options)</param>
      ///<param name="pExplainPermissionMode">Explain permission mode flag</param>

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      ExplainPermissionMode := pExplainPermissionMode;
      IF (ExplainPermissionMode) THEN
        pNfExplainPermissionContext.CloneTo(NfExplainPermissionContext);

      NfSetup.VerifyAndGet();

      IF ( NOT (ExplainPermissionMode)) THEN
        IF ( NOT (WorkOutUsersToUpdate(pInteraction))) THEN
          EXIT;

      OpenDialog(pInteraction);

      InitialiseBuffers();
      InitialiseLog(pUpdateType);

      UpdateUsers();
      MarkUsersAsUpdated();

      FinaliseLog(pInteraction);
      FinaliseBuffers();

      CloseDialog();
    END;

    LOCAL PROCEDURE WorkOutUsersToUpdate@1000000053(pInteraction@1000000004 : Boolean) : Boolean;
    VAR
      lNfUpdateUsersPermissions@1000000003 : Report 9086951;
      lView@1000000002 : Text;
      lPendingCount@1000000001 : Integer;
      lNonPendingCount@1000000000 : Integer;
      eOneConfirmation@1000000009 : TextConst 'ENU=Do you want to update "%1" user?;ENG=Do you want to update "%1" user?';
      ePendingConfirmation@1000000006 : TextConst 'ENU=Do you want to update %1 pending users?;ENG=Do you want to update %1 pending users?';
      eConfirmation@1000000007 : TextConst 'ENU=Do you want to update %1 users?;ENG=Do you want to update %1 users?';
      eNoUsersToUpdate@1000000005 : TextConst 'ENU=There are no users to update.;ENG=There are no users to update.';
      lConfirmationText@1000000008 : Text;
    BEGIN
      ///<summary>Working out what users should be updated (pending only / all)</summary>
      ///<param name="pInteraction">Interaction flag</param>
      ///<returns>TRUE = Users should be updated, FALSE = All party cancelled</returns>

      IF (pInteraction) THEN
      BEGIN
        lView := NfUser.GETVIEW(FALSE);
        NfUser.SETRANGE(Pending, TRUE);
        lPendingCount := NfUser.COUNT();
        NfUser.SETRANGE(Pending, FALSE);
        lNonPendingCount := NfUser.COUNT();
        NfUser.SETVIEW(lView);

        IF ((lPendingCount > 0) AND (lNonPendingCount > 0)) THEN
        BEGIN
          lNfUpdateUsersPermissions.Initialise(NfUser);
          lNfUpdateUsersPermissions.RUNMODAL();
          IF ( NOT (lNfUpdateUsersPermissions.GetReportResult())) THEN
            EXIT(FALSE);
          UsersToUpdate := lNfUpdateUsersPermissions.GetUsersToUpdate();
        END
        ELSE IF (lPendingCount > 0) THEN
        BEGIN
          IF (lPendingCount = 1) THEN
          BEGIN
            NfUser.FINDFIRST();
            lConfirmationText := STRSUBSTNO(eOneConfirmation, NfUser.GetName());
          END
          ELSE
            lConfirmationText := STRSUBSTNO(ePendingConfirmation, lPendingCount);
          IF ( NOT (CONFIRM(lConfirmationText, TRUE))) THEN
            EXIT(FALSE);
          UsersToUpdate := NfUser."Users to Update"::Pending;
        END
        ELSE IF (lNonPendingCount > 0) THEN
        BEGIN
          IF (lNonPendingCount = 1) THEN
          BEGIN
            NfUser.FINDFIRST();
            lConfirmationText := STRSUBSTNO(eOneConfirmation, NfUser.GetName());
          END
          ELSE
            lConfirmationText := STRSUBSTNO(eConfirmation, lNonPendingCount);
          IF ( NOT (CONFIRM(lConfirmationText, FALSE))) THEN
            EXIT(FALSE);
          UsersToUpdate := NfUser."Users to Update"::All;
        END
        ELSE
          ERROR(eNoUsersToUpdate);
      END
      ELSE
        UsersToUpdate := NfUser."Users to Update"::Pending;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateUsers@1000000001();
    VAR
      eNoUsersToUpdate@1000000001 : TextConst 'ENU=There are no users to update (being pending, not disabled and not blocked).;ENG=There are no users to update (being pending, not disabled and not blocked).';
    BEGIN
      ///<summary>Updating (internal version)</summary>

      IF ( NOT (ExplainPermissionMode)) THEN
      BEGIN
        IF (UsersToUpdate = NfUser."Users to Update"::Pending) THEN
          NfUser.SETRANGE(Pending, TRUE);
        NfUser.SETRANGE(Hidden, FALSE);
        NfUser.SETRANGE(Disabled, FALSE);
      END
      ELSE
        NfUser.SETRANGE(ID, NfExplainPermissionContext."nF. User ID");
      IF (NfUser.FINDSET()) THEN
      BEGIN
        NfDialogManagement.SetCount(DialogIndex::Users, NfUser.COUNT());
        REPEAT
          UpdateDialogForUser();
          NfCompanyTmp.RESET();
          IF ((ExplainPermissionMode) AND (NfExplainPermissionContext."nF. Company ID" <> 0)) THEN
            NfCompanyTmp.SETRANGE(ID, NfExplainPermissionContext."nF. Company ID");
          IF (NfCompanyTmp.FINDSET()) THEN
          REPEAT
            NfDialogManagement.SetValue(DialogIndex::Company, NfCompanyTmp.Name);
            UpdateUser();
          UNTIL (NfCompanyTmp.NEXT() = 0);
          AddUserToUpdated();
        UNTIL (NfUser.NEXT() = 0);
      END
      ELSE
        AddLogEvent(NfLog.Result::Error, eNoUsersToUpdate);
      NfUser.SETRANGE(Pending);
      NfUser.SETRANGE(Hidden);
      NfUser.SETRANGE(Disabled);
    END;

    LOCAL PROCEDURE UpdateUser@1000000010();
    BEGIN
      ///<summary>Updating a user for a company</summary>

      ClearPermissionBuffers();
      AddGiveEverythingPermissionGroup();
      IF (NfSetup."Permissions System" = NfSetup."Permissions System"::Advanced) THEN
        CollectPermissionsAdvanced()
      ELSE
        CollectPermissionsBasic();
      IF ( NOT (ExplainPermissionMode)) THEN
        UpdatePermissionsCollected()
      ELSE
        ExplainPermissionAddFinalPermission();
    END;

    LOCAL PROCEDURE AddGiveEverythingPermissionGroup@1000000030();
    BEGIN
      ///<summary>Adding "give everything" permission group to filter</summary>

      NfPermissionGroupTmp.RESET();
      NfPermissionGroupTmp.SETRANGE("Give Everything", TRUE);
      NfPermissionGroupTmp.FINDFIRST();

      AddToNfPermissionGroupFilter(NfPermissionGroupTmp.ID);
    END;

    LOCAL PROCEDURE CollectPermissionsAdvanced@1000000028();
    BEGIN
      ///<summary>Collecting permissions for advanced permissions system</summary>

      StartDialogActivity(tCollectingUserGroups);

      NfUserGroupMemberTmp.RESET();
      NfUserGroupMemberTmp.SETRANGE("nF. User ID", NfUser.ID);
      NfUserGroupMemberTmp.SETRANGE("nF. Company ID", NfCompanyTmp.ID);
      IF (NfUserGroupMemberTmp.FINDSET()) THEN
      BEGIN
        NfDialogManagement.SetCount(DialogIndex::Progress, NfUserGroupMemberTmp.COUNT());
        REPEAT
          NfDialogManagement.Step(DialogIndex::Progress);
          IF (ExplainPermissionMode) THEN
            ExplainPermissionAddUserGroup();
          AddToNfUserGroupFilter(NfUserGroupMemberTmp."nF. User Group ID");
        UNTIL (NfUserGroupMemberTmp.NEXT() = 0);
      END;

      CompleteDialogActivity();

      IF (UserGroupInFilterText <> '') THEN
      BEGIN
        NfPermissionGroupMemberTmp.RESET();
        NfPermissionGroupMemberTmp.SETRANGE(Type, NfPermissionGroupMemberTmp.Type::"User Group");
        NfPermissionGroupMemberTmp.SETRANGE("nF. Company ID", NfCompanyTmp.ID);
        NfPermissionGroupMemberTmp.SETFILTER("nF. User / User Group ID", UserGroupInFilterText);
        CollectPermissionGroups();
      END;

      CollectPermissions();
    END;

    LOCAL PROCEDURE CollectPermissionsBasic@1000000029();
    BEGIN
      ///<summary>Collecting permissions for basic permissions system</summary>

      NfPermissionGroupMemberTmp.RESET();
      NfPermissionGroupMemberTmp.SETRANGE("nF. User / User Group ID", NfUser.ID);
      NfPermissionGroupMemberTmp.SETRANGE("nF. Company ID", NfCompanyTmp.ID);
      CollectPermissionGroups();
      CollectPermissions();
    END;

    LOCAL PROCEDURE CollectPermissionGroups@1000000048();
    BEGIN
      ///<summary>Collecting permission groups (for filtered permission group members)</summary>

      StartDialogActivity(tCollectingPermissionGroups);

      IF (NfPermissionGroupMemberTmp.FINDSET()) THEN
      BEGIN
        NfDialogManagement.SetCount(DialogIndex::Progress, NfPermissionGroupMemberTmp.COUNT());
        REPEAT
          NfDialogManagement.Step(DialogIndex::Progress);
          IF (ExplainPermissionMode) THEN
            ExplainPermissionAddPermissionGroup();
          AddToNfPermissionGroupFilter(NfPermissionGroupMemberTmp."nF. Permisison Group ID");
        UNTIL (NfPermissionGroupMemberTmp.NEXT() = 0);
      END;

      CompleteDialogActivity();
    END;

    LOCAL PROCEDURE CollectPermissions@1000000025();
    VAR
      lActivity@1000000001 : ' ,Count,Run';
      lPass@1000000000 : ' ,GiveEverything,Normal';
      lCount@1000000002 : Integer;
    BEGIN
      ///<summary>Collecting permissions</summary>

      lCount := 0;

      StartDialogActivity(tCollectingPermissions);

      IF (PermissionGroupInFilterText <> '') THEN
      BEGIN
        BuildPermissionMatrixBuffer();

        FOR lActivity := lActivity::Count TO lActivity::Run DO
        BEGIN
          IF (lActivity = lActivity::Run) THEN
            NfDialogManagement.SetCount(DialogIndex::Progress, NfPermissionTmp.COUNT());
          FOR lPass := lPass::GiveEverything TO lPass::Normal DO
          BEGIN
            NfPermissionTmp.RESET();
            NfPermissionTmp.SETCURRENTKEY("Give Everything Group", "Permission Group Full Hash", "nF. Permission Group ID");
            NfPermissionTmp.SETRANGE("Give Everything Group", (lPass = lPass::GiveEverything));
            IF (ExplainPermissionMode) THEN
            BEGIN
              NfPermissionTmp.SETRANGE("Object Type", NfExplainPermissionContext."Object Type");
              NfPermissionTmp.SETRANGE("Object ID", NfExplainPermissionContext."Object ID");
            END;
            IF (lPass = lPass::Normal) THEN
              NfPermissionTmp.SETFILTER("nF. Permission Group ID", PermissionGroupInFilterText);
            CASE (lActivity) OF
              lActivity::Count:
                lCount += NfPermissionTmp.COUNT();
              lActivity::Run:
                IF (NfPermissionTmp.FINDSET()) THEN
                REPEAT
                  IF ((AllObj.GET(NfPermissionTmp."Object Type", NfPermissionTmp."Object ID")) OR
                      (NfPermissionTmp."Object Type" = NfPermissionTmp."Object Type"::System)) THEN
                  BEGIN
                    NfDialogManagement.Step(DialogIndex::Progress);
                    IF (NfPermissionTmp."Object Type" = NfPermissionTmp."Object Type"::Table) THEN
                    BEGIN
                      AddPermission(NfPermissionBuffer."Permission Type"::Read, NfPermissionTmp."Read Permission");
                      AddPermission(NfPermissionBuffer."Permission Type"::Insert, NfPermissionTmp."Insert Permission");
                      AddPermission(NfPermissionBuffer."Permission Type"::Modify, NfPermissionTmp."Modify Permission");
                      AddPermission(NfPermissionBuffer."Permission Type"::Delete, NfPermissionTmp."Delete Permission");
                    END;
                    AddPermission(NfPermissionBuffer."Permission Type"::Execute, NfPermissionTmp."Execute Permission");
                  END;
                UNTIL (NfPermissionTmp.NEXT() = 0);
            END;
          END;
        END;
      END;

      CompleteDialogActivity();

      UpdateProvisionalPermissions();
      RemoveEmptyPermissions();
    END;

    LOCAL PROCEDURE AddPermission@1000000031(pPermissionType@1000000000 : Option;pPermission@1000000001 : Boolean);
    VAR
      lNfPermissionBufferExists@1000000002 : Boolean;
      lGiveTakeFldRef@1000000005 : FieldRef;
      lCurrentGiveTake@1000000009 : Option;
      lPreviousGiveTake@1000000007 : Option;
      lGiveTake@1000000010 : Option;
      lRecordFilterView@1000000003 : Text;
      lPreviousRecordFilterView@1000000004 : Text;
    BEGIN
      ///<summary>Adding permission to buffer</summary>
      ///<param name="pPermissionType">Permission type</param>
      ///<param name="pPermission">Permission itself (TRUE = Granted, FALSE = Nope)</param>

      IF ( NOT (pPermission)) THEN
        EXIT;

      lRecordFilterView := NfPermissionTmp.GetRecordFilterView();

      lCurrentGiveTake := GiveTake::Empty;
      IF (lRecordFilterView <> '') THEN
        lCurrentGiveTake := GiveTake::GiveFiltered
      ELSE
        CASE (NfPermissionTmp."Give Everything Group") OF
          TRUE:
            IF (NfPermissionTmp.Type = NfPermissionTmp.Type::Give) THEN
              lCurrentGiveTake := NfIif.Integer(NfPermissionTmp.Force, GiveTake::GiveForced, GiveTake::GiveEverything);
          FALSE:
            IF (NfPermissionTmp.Type = NfPermissionTmp.Type::Give) THEN
              lCurrentGiveTake := NfIif.Integer(NfPermissionTmp.Force, GiveTake::GiveForced, GiveTake::Give)
            ELSE
              lCurrentGiveTake := NfIif.Integer(NfPermissionTmp.Force, GiveTake::TakeAwayForced, GiveTake::TakeAway);
        END;

      IF (ExplainPermissionMode) THEN
        ExplainPermissionAddPermissionGroupPermission(pPermissionType, lCurrentGiveTake, lRecordFilterView);

      IF (lCurrentGiveTake = GiveTake::Empty) THEN
        EXIT;

      lNfPermissionBufferExists := NfPermissionBuffer.GET(NfPermissionTmp."Object Type", NfPermissionTmp."Object ID");
      lPreviousGiveTake := GetGiveTake(pPermissionType, lGiveTakeFldRef);
      lPreviousRecordFilterView := NfPermissionBuffer.GetRecordFilterView();
      IF ( NOT (lNfPermissionBufferExists)) THEN
      BEGIN
        lPreviousGiveTake := GiveTake::Empty;
        lPreviousRecordFilterView := '';
      END;

      NfPermissionMatrixBuffer.GET(lPreviousGiveTake, lCurrentGiveTake);
      lGiveTake := NfPermissionMatrixBuffer."Give / Take";

      IF (ExplainPermissionMode) THEN
        ExplainPermissionAddResultingPermission(pPermissionType, lGiveTake);

      IF ((lGiveTake <> lPreviousGiveTake) OR (lRecordFilterView <> lPreviousRecordFilterView)) THEN
      BEGIN
        IF ((lPreviousRecordFilterView <> '') AND (lRecordFilterView <> '')) THEN
        BEGIN
          lRecordFilterView := '';
          IF (ExplainPermissionMode) THEN
            ExplainPermissionAddRecordFilterConflict(pPermissionType);
        END;
        IF ( NOT (lNfPermissionBufferExists)) THEN
        BEGIN
          NfPermissionBuffer.INIT();
          NfPermissionBuffer."Object Type" := NfPermissionTmp."Object Type";
          NfPermissionBuffer."Object ID" := NfPermissionTmp."Object ID";
          GetGiveTake(pPermissionType, lGiveTakeFldRef);
        END;
        SetGiveTake(lGiveTakeFldRef, lGiveTake);
        IF (lRecordFilterView <> '') THEN
          NfPermissionBuffer.SetRecordFilterView(lRecordFilterView);
        IF (lNfPermissionBufferExists) THEN
          NfPermissionBuffer.MODIFY()
        ELSE
          NfPermissionBuffer.INSERT();
      END;
    END;

    LOCAL PROCEDURE UpdateProvisionalPermissions@1000000000();
    BEGIN
      ///<summary>Updating provisional permissions</summary>

      StartDialogActivity(tUpdatingProvisionalPermissions);

      IF (PermissionGroupOutFilterText <> '') THEN
      BEGIN
        NfPermissionTmp.RESET();
        NfPermissionTmp.SETFILTER("nF. Permission Group ID", PermissionGroupOutFilterText);
        NfPermissionTmp.SETRANGE(Type, NfPermissionTmp.Type::"Take Away");

        NfPermissionBuffer.RESET();
        IF (NfPermissionBuffer.FINDSET(TRUE)) THEN
        BEGIN
          NfDialogManagement.SetCount(DialogIndex::Progress, NfPermissionBuffer.COUNT());
          REPEAT
            IF ((NfPermissionBuffer."Object Type" = NfPermissionBuffer."Object Type"::Page) AND
                (NfPermissionBuffer."Object ID" = PAGE::"Chart of Accounts")) THEN
            BEGIN
              NfPermissionBuffer."Object Type" := NfPermissionBuffer."Object Type";
            END;

            NfDialogManagement.Step(DialogIndex::Progress);
            IF (NfPermissionBuffer."Object Type" = NfPermissionBuffer."Object Type"::Table) THEN
            BEGIN
              UpdateProvisionalPermission(NfPermissionBuffer."Permission Type"::Read);
              UpdateProvisionalPermission(NfPermissionBuffer."Permission Type"::Insert);
              UpdateProvisionalPermission(NfPermissionBuffer."Permission Type"::Modify);
              UpdateProvisionalPermission(NfPermissionBuffer."Permission Type"::Delete);
            END;
            UpdateProvisionalPermission(NfPermissionBuffer."Permission Type"::Execute);
          UNTIL (NfPermissionBuffer.NEXT() = 0);
        END;
      END;

      CompleteDialogActivity();
    END;

    LOCAL PROCEDURE UpdateProvisionalPermission@1000000052(pPermissionType@1000000000 : Option);
    VAR
      lGiveTakeFldRef@1000000001 : FieldRef;
      lGiveTake@1000000002 : Option;
    BEGIN
      ///<summary>Updating provisional permission</summary>
      ///<param name="pPermissionType">Permission type</param>

      lGiveTake := GetGiveTake(pPermissionType, lGiveTakeFldRef);
      IF (lGiveTake <> GiveTake::TakeAwayProvisional) THEN
        EXIT;

      NfPermissionTmp.SETRANGE("Object Type", NfPermissionBuffer."Object Type");
      NfPermissionTmp.SETRANGE("Object ID", NfPermissionBuffer."Object ID");

      NfPermissionTmp.SETRANGE("Read Permission");
      NfPermissionTmp.SETRANGE("Insert Permission");
      NfPermissionTmp.SETRANGE("Modify Permission");
      NfPermissionTmp.SETRANGE("Delete Permission");
      NfPermissionTmp.SETRANGE("Execute Permission");
      CASE (pPermissionType) OF
        NfPermissionBuffer."Permission Type"::Read: NfPermissionTmp.SETRANGE("Read Permission", TRUE);
        NfPermissionBuffer."Permission Type"::Insert: NfPermissionTmp.SETRANGE("Insert Permission", TRUE);
        NfPermissionBuffer."Permission Type"::Modify: NfPermissionTmp.SETRANGE("Modify Permission", TRUE);
        NfPermissionBuffer."Permission Type"::Delete: NfPermissionTmp.SETRANGE("Delete Permission", TRUE);
        NfPermissionBuffer."Permission Type"::Execute: NfPermissionTmp.SETRANGE("Execute Permission", TRUE);
      END;

      IF ( NOT (NfPermissionTmp.ISEMPTY())) THEN
      BEGIN
        lGiveTake := GiveTake::Give;
        SetGiveTake(lGiveTakeFldRef, lGiveTake);
        NfPermissionBuffer.MODIFY();
      END
      ELSE
        lGiveTake := GiveTake::TakeAway;

      IF (ExplainPermissionMode) THEN
        ExplainPermissionAddProvisionalPermission(lGiveTake);
    END;

    LOCAL PROCEDURE RemoveEmptyPermissions@1000000044();
    BEGIN
      ///<summary>Removing empty permissions</summary>

      StartDialogActivity(tRemovingEmptyPermissions);

      NfPermissionBuffer.RESET();
      NfPermissionBuffer.SETFILTER("Give / Take Read", '<>%1&<>%2&<>%3&<>%4', NfPermissionBuffer."Give / Take Read"::Give,
        NfPermissionBuffer."Give / Take Read"::"Give (Everything)", NfPermissionBuffer."Give / Take Read"::"Give (Forced)",
        NfPermissionBuffer."Give / Take Read"::"Give (Filtered)");
      NfPermissionBuffer.SETFILTER("Give / Take Insert", '<>%1&<>%2&<>%3&<>%4', NfPermissionBuffer."Give / Take Insert"::Give,
        NfPermissionBuffer."Give / Take Insert"::"Give (Everything)", NfPermissionBuffer."Give / Take Insert"::"Give (Forced)",
        NfPermissionBuffer."Give / Take Insert"::"Give (Filtered)");
      NfPermissionBuffer.SETFILTER("Give / Take Modify", '<>%1&<>%2&<>%3&<>%4', NfPermissionBuffer."Give / Take Modify"::Give,
        NfPermissionBuffer."Give / Take Modify"::"Give (Everything)", NfPermissionBuffer."Give / Take Modify"::"Give (Forced)",
        NfPermissionBuffer."Give / Take Modify"::"Give (Filtered)");
      NfPermissionBuffer.SETFILTER("Give / Take Delete", '<>%1&<>%2&<>%3&<>%4', NfPermissionBuffer."Give / Take Delete"::Give,
        NfPermissionBuffer."Give / Take Delete"::"Give (Everything)", NfPermissionBuffer."Give / Take Delete"::"Give (Forced)",
        NfPermissionBuffer."Give / Take Delete"::"Give (Filtered)");
      NfPermissionBuffer.SETFILTER("Give / Take Execute", '<>%1&<>%2&<>%3&<>%4', NfPermissionBuffer."Give / Take Execute"::Give,
        NfPermissionBuffer."Give / Take Execute"::"Give (Everything)", NfPermissionBuffer."Give / Take Execute"::"Give (Forced)",
        NfPermissionBuffer."Give / Take Execute"::"Give (Filtered)");
      NfPermissionBuffer.DELETEALL();

      CompleteDialogActivity();
    END;

    LOCAL PROCEDURE "--- Permission Sets ---"@1000000009();
    BEGIN
    END;

    LOCAL PROCEDURE UpdatePermissionsCollected@1000000032();
    VAR
      lNewPermissionSet@1000000000 : Boolean;
    BEGIN
      ///<summary>Updating permissions collected</summary>

      NfPermissionBuffer.RESET();
      IF (NfPermissionBuffer.FINDSET()) THEN
      BEGIN
        NfDialogManagement.SetCount(DialogIndex::Progress, NfPermissionBuffer.COUNT());
        lNewPermissionSet := UpdatePermissionSet();
        SetNewPermissions();
        RemoveOldPermissions(lNewPermissionSet);
      END
      ELSE
        DeletePermissionSet();
    END;

    LOCAL PROCEDURE BuildPermissionMatrixBuffer@1000000036();
    BEGIN
      ///<summary>Building permisison matrix buffer</summary>
      ///<remarks>
      /// Matrix buffer is a matrix nForcement uses to work out final "give / takes" going through all permissions given or taken away from user.
      /// The system goes through all permissions given / taken away from user. The are named "Current Give / Take" in the matrix.
      /// "Previous Give / Take" is decision previously deducted (based on previous gives / take aways).
      /// The matrix gives answer what "Give / Take" is a result of confronting "Previous Give / Take" with "Current Give / Take"
      /// The following options of "Give / Take" are used:
      ///   - (Empty): No permission has been given yet,
      ///   - Give (Everything): Permission given by "give everything" group,
      ///   - Give: Permission given
      ///   - Give (Forced): Permission given and forced,
      ///   - Give (Filtered): Permission given with record filter,
      ///   - Take Away: Permission taken away
      ///   - Take Away (Forced): Permission taken away and forced,
      ///   - Take Away (Provisional): Permission provisionally taken away, but going through extra check
      ///                              (if it is not taken away by any other group - it becomes "Give")
      ///   - Incorrect: Permission can't be given; this situation shouldn't have happened
      /// The matrix:
      ///                           | Give (Everything)  Give                Give (Forced)       Give (Filtered)  Take Away                Take Away (Forced)
      ///   -------------------------------------------------------------------------------------------------------------------------------------------------
      ///   Empty                   | Give (Everything)  Give                Give (Forced)       Give (Filtered)  Take Away                Take Away (Forced)
      ///   Give (Everything)       | Give (Everything)  Give                Give (Forced)       Give (Filtered)  Take Away (Provisional)  Take Away (Forced)
      ///   Give                    | Incorrect          Give                Give (Forced)       Give (Filtered)  Give                     Take Away (Forced)
      ///   Give (Forced)           | Give (Forced)      Give (Forced)       Give (Forced)       Give (Filtered)  Give (Forced)            Give (Forced)
      ///   Give (Filtered)         | Give (Filtered)    Give (Filtered)     Give (Filtered)     Give (Filtered)  Give (Filtered)          Give (Filtered)
      ///   Take Away               | Incorrect          Give                Give (Forced)       Give (Filtered)  Take Away                Take Away (Forced)
      ///   Take Away (Forced)      | Incorrect          Take Away (Forced)  Take Away (Forced)  Give (Filtered)  Take Away (Forced)       Take Away (Forced)
      ///   Take Away (Provisional) | Incorrect          Give                Give (Forced)       Give (Filtered)  Take Away (Provisional)  Take Away (Forced)
      ///   Incorrect               | Incorrect          Incorrect           Incorrect           Incorrect        Incorrect                Incorrect
      /// Reading the matrix:
      ///   - First column gives the "Previous Permission"
      ///   - Top header gives the "Current Permission"
      ///   - Intersection gives worked out "Permission"
      ///</remarks>
      NfPermissionMatrixBuffer.RESET();
      NfPermissionMatrixBuffer.DELETEALL();

      AddToPermissionMatrixBuffer(GiveTake::Empty, GiveTake::GiveEverything, GiveTake::Give, GiveTake::GiveForced, GiveTake::GiveFiltered, GiveTake::TakeAway, GiveTake::TakeAwayForced);
      AddToPermissionMatrixBuffer(GiveTake::GiveEverything, GiveTake::GiveEverything, GiveTake::Give, GiveTake::GiveForced, GiveTake::GiveFiltered, GiveTake::TakeAwayProvisional, GiveTake::TakeAwayForced);
      AddToPermissionMatrixBuffer(GiveTake::Give, GiveTake::Incorrect, GiveTake::Give, GiveTake::GiveForced, GiveTake::GiveFiltered, GiveTake::Give, GiveTake::TakeAwayForced);
      AddToPermissionMatrixBuffer(GiveTake::GiveForced, GiveTake::GiveForced , GiveTake::GiveForced, GiveTake::GiveForced, GiveTake::GiveFiltered, GiveTake::GiveForced, GiveTake::GiveForced);
      AddToPermissionMatrixBuffer(GiveTake::TakeAway, GiveTake::Incorrect, GiveTake::Give, GiveTake::GiveForced, GiveTake::GiveFiltered, GiveTake::TakeAway, GiveTake::TakeAwayForced);
      AddToPermissionMatrixBuffer(GiveTake::TakeAwayForced, GiveTake::Incorrect, GiveTake::TakeAwayForced, GiveTake::TakeAwayForced, GiveTake::GiveFiltered, GiveTake::TakeAwayForced, GiveTake::TakeAwayForced);
      AddToPermissionMatrixBuffer(GiveTake::TakeAwayProvisional, GiveTake::Incorrect, GiveTake::Give, GiveTake::GiveForced, GiveTake::GiveFiltered, GiveTake::TakeAwayProvisional, GiveTake::TakeAwayForced);
      AddToPermissionMatrixBuffer(GiveTake::Incorrect, GiveTake::Incorrect, GiveTake::Incorrect, GiveTake::Incorrect, GiveTake::Incorrect, GiveTake::Incorrect, GiveTake::Incorrect);
    END;

    LOCAL PROCEDURE AddToPermissionMatrixBuffer@1000000045(pPreviousGiveTake@1000000001 : Option;pGiveEverything@1000000000 : Option;pGive@1000000002 : Option;pGiveForced@1000000003 : Option;pGiveFiltered@1000000006 : Option;pTakeAway@1000000004 : Option;pTakeAwayForced@1000000005 : Option);
    VAR
      lGiveTakes@1000000007 : ARRAY [20] OF Option;
      lCurrentGiveTake@1000000008 : Integer;
    BEGIN
      ///<summary>Adding to permission matrix buffer</summary>
      ///<param name="pPreviousGiveTake">Previous give / take</param>
      ///<param name="pGiveEverything">Give / take for current "Give Everything" one</param>
      ///<param name="pGive">Give / take for current "Give" one</param>
      ///<param name="pGiveForced">Give / take for current "Give (Forced)" one</param>
      ///<param name="pGiveFiltered">Give / take for current "Give (Filtered)" one</param>
      ///<param name="pTakeAway">Give / take for current "Take Away" one</param>
      ///<param name="pTakeAwayForced">Give / take for current "Take Away (Forced)" one</param>

      lGiveTakes[GiveTake::GiveEverything] := pGiveEverything;
      lGiveTakes[GiveTake::Give] := pGive;
      lGiveTakes[GiveTake::GiveForced] := pGiveForced;
      lGiveTakes[GiveTake::GiveFiltered] := pGiveFiltered;
      lGiveTakes[GiveTake::TakeAway] := pTakeAway;
      lGiveTakes[GiveTake::TakeAwayForced] := pTakeAwayForced;

      FOR lCurrentGiveTake := GiveTake::GiveEverything TO GiveTake::TakeAwayForced DO
      BEGIN
        IF (lGiveTakes[lCurrentGiveTake] <> GiveTake::Empty) THEN
        BEGIN
          CLEAR(NfPermissionMatrixBuffer);
          NfPermissionMatrixBuffer."Previous Give / Take" := pPreviousGiveTake;
          NfPermissionMatrixBuffer."Current Give / Take" := lCurrentGiveTake;
          NfPermissionMatrixBuffer."Give / Take" := lGiveTakes[lCurrentGiveTake];
          NfPermissionMatrixBuffer.INSERT();
        END;
      END;
    END;

    LOCAL PROCEDURE UpdatePermissionSet@1000000043() : Boolean;
    VAR
      lUserName@1000000001 : Text;
      lCompanyName@1000000002 : Text;
      lPermissionSetName@1000000000 : Text;
      eAll@1000000003 : TextConst 'ENU=ALL;ENG=ALL';
      lNewPermissionSet@1000000004 : Boolean;
    BEGIN
      ///<summary>Creating permission set (or updating it if it exists)</summary>
      ///<returns>TRUE = New permission set, FALSE = Permission set existed already</returns>

      lNewPermissionSet := FALSE;

      NfUserPermissionSet.RESET();
      NfUserPermissionSet.SETCURRENTKEY("nF. User ID", "nF. Company ID");
      NfUserPermissionSet.SETRANGE("nF. User ID", NfUser.ID);
      NfUserPermissionSet.SETRANGE("nF. Company ID", NfCompanyTmp.ID);
      IF ( NOT (NfUserPermissionSet.FINDFIRST())) THEN
      BEGIN
        CLEAR(NfUserPermissionSet);
        NfUserPermissionSet.INIT();
        NfUserPermissionSet.VALIDATE("nF. User ID", NfUser.ID);
        NfUserPermissionSet.VALIDATE("nF. Company ID", NfCompanyTmp.ID);
        NfUserPermissionSet.INSERT(TRUE);
      END;

      IF (NfUserPermissionSet."Permission Set Code" <> '') THEN
        IF ( NOT (PermissionSet.GET(NfUserPermissionSet."Permission Set Code"))) THEN
          NfUserPermissionSet.VALIDATE("Permission Set Code", '');

      IF (NfUserPermissionSet."Permission Set Code" = '') THEN
      BEGIN
        CLEAR(PermissionSet);
        PermissionSet.INIT();
        PermissionSet.VALIDATE("Role ID", NoSeriesManagement.GetNextNo(NfSetup."Permission Sets No. Ser. Code", TODAY(), TRUE));
        IF (NfSetup."Hide User Domain") THEN
          lUserName := NfUser."Short User ID"
        ELSE
          lUserName := NfManagement.RemoveDomain(NfUser."User ID");
        lCompanyName := NfIif.Text(NfCompanyTmp.Name <> '', NfCompanyTmp.Name, eAll);
        lPermissionSetName := STRSUBSTNO('%1-%2', lUserName, lCompanyName);
        PermissionSet.VALIDATE(Name, COPYSTR(lPermissionSetName, 1, MAXSTRLEN(PermissionSet.Name)));
        PermissionSet.INSERT(TRUE);

        NfUserPermissionSet.VALIDATE("Permission Set Code", PermissionSet."Role ID");
        NfUserPermissionSet.MODIFY(TRUE);

        lNewPermissionSet := TRUE;
      END;

      AccessControl.RESET();
      AccessControl.SETRANGE("User Security ID", NfUser."User Security ID");
      AccessControl.SETRANGE("Role ID", PermissionSet."Role ID");
      AccessControl.SETRANGE("Company Name", NfCompanyTmp.Name);
      IF (AccessControl.ISEMPTY()) THEN
      BEGIN
        CLEAR(AccessControl);
        AccessControl.INIT();
        AccessControl.VALIDATE("User Security ID", NfUser."User Security ID");
        AccessControl.VALIDATE("Role ID", PermissionSet."Role ID");
        AccessControl.VALIDATE("Company Name", NfCompanyTmp.Name);
        AccessControl.INSERT(TRUE);
      END;

      EXIT(lNewPermissionSet);
    END;

    LOCAL PROCEDURE SetNewPermissions@1000000033();
    VAR
      lReadPermission@1000000000 : Option;
      lInsertPermission@1000000001 : Option;
      lModifyPermission@1000000002 : Option;
      lDeletePermission@1000000003 : Option;
      lExecutePermission@1000000004 : Option;
      lRecordFilterView@1000000005 : Text;
    BEGIN
      ///<summary>Update permission set permissions</summary>

      StartDialogActivity(tSettingNewPermissions);
      NfDialogManagement.SetCount(DialogIndex::Progress, NfPermissionBuffer.COUNT());

      REPEAT
        NfDialogManagement.Step(DialogIndex::Progress);

        IF (NfPermissionBuffer."Object Type" = NfPermissionBuffer."Object Type"::Table) THEN
        BEGIN
          lReadPermission := GiveTakeToNoYesIndirect(NfPermissionBuffer."Give / Take Read");
          lInsertPermission := GiveTakeToNoYesIndirect(NfPermissionBuffer."Give / Take Read");
          lModifyPermission := GiveTakeToNoYesIndirect(NfPermissionBuffer."Give / Take Modify");
          lDeletePermission := GiveTakeToNoYesIndirect(NfPermissionBuffer."Give / Take Delete");
          lRecordFilterView := NfPermissionBuffer.GetRecordFilterView();
          IF (lRecordFilterView <> '') THEN
            lRecordFilterView := NfRecordFilterManagement.ApplySmartFilters(NfUser.ID, lRecordFilterView);
          SetNewPermission(Permission."Object Type"::"Table Data", lReadPermission, lInsertPermission, lModifyPermission, lDeletePermission,
            Permission."Execute Permission"::" ", lRecordFilterView);
        END;

        lExecutePermission := GiveTakeToNoYesIndirect(NfPermissionBuffer."Give / Take Execute");
        SetNewPermission(NfPermissionBuffer."Object Type", Permission."Read Permission"::" ", Permission."Insert Permission"::" ",
          Permission."Modify Permission"::" ", Permission."Delete Permission"::" ", lExecutePermission, '');
      UNTIL (NfPermissionBuffer.NEXT() = 0);

      CompleteDialogActivity();
    END;

    LOCAL PROCEDURE SetNewPermission@1000000056(pObjectType@1000000000 : Integer;pReadPermission@1000000001 : Option;pInsertPermission@1000000002 : Option;pModifyPermission@1000000003 : Option;pDeletePermission@1000000004 : Option;pExecutePermission@1000000005 : Option;pRecordFilterView@1000000006 : Text);
    BEGIN
      ///<summary>Setting one new permission</summary>
      ///<param name="pObjectType">Object type</param>
      ///<param name="pReadPermission">Read permission (option like in "Permission" table</param>
      ///<param name="pInsertPermission">Insert permission (option like in "Permission" table</param>
      ///<param name="pModifyPermission">Modify permission (option like in "Permission" table</param>
      ///<param name="pDeletePermission">Delete permission (option like in "Permission" table</param>
      ///<param name="pExecutePermission">Execute permission (option like in "Permission" table</param>
      ///<param name="pRecordFilterView">Record filter view (text form of record filter)</param>

      IF (Permission.GET(PermissionSet."Role ID", pObjectType, NfPermissionBuffer."Object ID")) THEN
      BEGIN
        IF ((Permission."Read Permission" <> pReadPermission) OR (Permission."Insert Permission" <> pInsertPermission) OR
            (Permission."Modify Permission" <> pModifyPermission) OR (Permission."Delete Permission" <> pDeletePermission) OR
            (Permission."Execute Permission" <> pExecutePermission) OR (FORMAT(Permission."Security Filter") <> pRecordFilterView)) THEN
        BEGIN
          Permission.VALIDATE("Read Permission", pReadPermission);
          Permission.VALIDATE("Insert Permission", pInsertPermission);
          Permission.VALIDATE("Modify Permission", pModifyPermission);
          Permission.VALIDATE("Delete Permission", pDeletePermission);
          Permission.VALIDATE("Execute Permission", pExecutePermission);
          EVALUATE(Permission."Security Filter", pRecordFilterView);
          Permission.MODIFY(TRUE);
        END;
      END
      ELSE
        IF ((AllObj.GET(NfPermissionBuffer."Object Type", NfPermissionBuffer."Object ID")) OR
            (NfPermissionBuffer."Object Type" = NfPermissionBuffer."Object Type"::System)) THEN
        BEGIN
          CLEAR(Permission);
          Permission.INIT();
          Permission.VALIDATE("Role ID", PermissionSet."Role ID");
          Permission.VALIDATE("Object Type", pObjectType);
          IF (NfPermissionBuffer."Object Type" <> NfPermissionBuffer."Object Type"::System) THEN
            Permission.VALIDATE("Object ID", NfPermissionBuffer."Object ID")
          ELSE
            Permission."Object ID" := NfPermissionBuffer."Object ID";
          Permission.VALIDATE("Read Permission", pReadPermission);
          Permission.VALIDATE("Insert Permission", pInsertPermission);
          Permission.VALIDATE("Modify Permission", pModifyPermission);
          Permission.VALIDATE("Delete Permission", pDeletePermission);
          Permission.VALIDATE("Execute Permission", pExecutePermission);
          EVALUATE(Permission."Security Filter", pRecordFilterView);
          Permission.INSERT(TRUE);
        END;
    END;

    LOCAL PROCEDURE RemoveOldPermissions@1000000049(pNewPermissionSet@1000000001 : Boolean);
    VAR
      lPermissionTmp@1000000000 : TEMPORARY Record 2000000005;
      lObjectType@1000000003 : Integer;
      lRemoved@1000000002 : Boolean;
    BEGIN
      ///<summary>Removing old permission set permissions</summary>
      ///<param name="pNewPermissionSet">Flag indicating a new permission set</param>

      StartDialogActivity(tRemovingOldPermissions);

      lRemoved := FALSE;

      IF ( NOT (pNewPermissionSet)) THEN
      BEGIN
        Permission.RESET();
        Permission.SETRANGE("Role ID", PermissionSet."Role ID");
        IF (Permission.FINDSET()) THEN
        BEGIN
          lRemoved := TRUE;
          NfDialogManagement.SetCount(DialogIndex::Progress, Permission.COUNT());
          REPEAT
            NfDialogManagement.Step(DialogIndex::Progress);
            IF (Permission."Object Type" = Permission."Object Type"::"Table Data") THEN
              lObjectType := NfPermissionBuffer."Object Type"::Table
            ELSE
              lObjectType := Permission."Object Type";
            IF ( NOT (NfPermissionBuffer.GET(lObjectType, Permission."Object ID"))) THEN
            BEGIN
              lPermissionTmp := Permission;
              lPermissionTmp.INSERT();
            END;
          UNTIL (Permission.NEXT() = 0);
          IF (lPermissionTmp.FINDSET()) THEN
          REPEAT
            Permission.GET(lPermissionTmp."Role ID", lPermissionTmp."Object Type", lPermissionTmp."Object ID");
            Permission.DELETE(TRUE);
          UNTIL (lPermissionTmp.NEXT() = 0);
        END;
      END;

      CompleteDialogActivity();
    END;

    LOCAL PROCEDURE DeletePermissionSet@1000000004();
    BEGIN
      ///<summary>Verifying permission sets</summary>

      NfUserPermissionSet.RESET();
      NfUserPermissionSet.SETCURRENTKEY("nF. User ID", "nF. Company ID");
      NfUserPermissionSet.SETRANGE("nF. User ID", NfUser.ID);
      NfUserPermissionSet.SETRANGE("nF. Company ID", NfCompanyTmp.ID);
      IF (NfUserPermissionSet.FINDFIRST()) THEN
      BEGIN
        IF (NfUserPermissionSet."Permission Set Code" <> '') THEN
        BEGIN
          IF (PermissionSet.GET(NfUserPermissionSet."Permission Set Code")) THEN
            PermissionSet.DELETE(TRUE);
          AccessControl.RESET();
          AccessControl.SETRANGE("User Security ID", NfUser."User Security ID");
          AccessControl.SETRANGE("Role ID", NfUserPermissionSet."Permission Set Code");
          AccessControl.SETRANGE("Company Name", NfCompanyTmp.Name);
          AccessControl.DELETEALL(TRUE);
        END;
        NfUserPermissionSet.DELETE(TRUE);
      END;
    END;

    LOCAL PROCEDURE GiveTakeToNoYesIndirect@1000000034(pGiveTake@1000000000 : Option) : Integer;
    VAR
      lPermission@1000000001 : Boolean;
    BEGIN
      ///<summary>Converting give / take value to no / yes / indirect one</summary>
      ///<param name="pGiveTake">The give / take value</param>
      ///<returns>The no / yes / indirect value</returns>

      lPermission := (pGiveTake IN [GiveTake::GiveEverything, GiveTake::Give, GiveTake::GiveForced, GiveTake::GiveFiltered]);
      EXIT(NfIif.Integer(lPermission, Permission."Read Permission"::Yes, Permission."Read Permission"::" "));
    END;

    LOCAL PROCEDURE "--- Buffers ---"@1000000013();
    BEGIN
    END;

    LOCAL PROCEDURE InitialiseBuffers@1000000014();
    BEGIN
      ///<summary>Initialising buffers</summary>

      StartDialogActivity(tInitialising);

      NfUserUpdatedTmp.RESET();
      NfUserUpdatedTmp.DELETEALL();

      InitialiseUserGroupBuffers();
      InitialisePermissionGroupBuffers();
      InitialisePermissionBuffers();

      NfCompanyManagement.CollectCompanies(NfCompanyTmp);

      CompleteDialogActivity();
    END;

    LOCAL PROCEDURE InitialiseUserGroupBuffers@1000000037();
    VAR
      lNfUserGroup@1000000001 : Record 9086955;
      lNfUserGroupMember@1000000000 : Record 9086956;
    BEGIN

      IF (NfSetup."Permissions System" <> NfSetup."Permissions System"::Advanced) THEN
        EXIT;

      NfUserGroupTmp.RESET();
      NfUserGroupTmp.DELETEALL();
      lNfUserGroup.RESET();
      lNfUserGroup.SETCURRENTKEY(Hidden);
      lNfUserGroup.SETRANGE(Hidden, FALSE);
      IF (lNfUserGroup.FINDSET()) THEN
      REPEAT
        NfUserGroupTmp := lNfUserGroup;
        NfUserGroupTmp.INSERT();
      UNTIL (lNfUserGroup.NEXT() = 0);

      NfUserGroupMemberTmp.RESET();
      NfUserGroupMemberTmp.DELETEALL();

      lNfUserGroupMember.RESET();
      lNfUserGroupMember.SETFILTER("nF. User Group ID", '<>0');
      lNfUserGroupMember.SETFILTER("nF. User ID", '<>0');
      IF (lNfUserGroupMember.FINDSET()) THEN
      REPEAT
        NfUserGroupMemberTmp := lNfUserGroupMember;
        NfUserGroupMemberTmp.INSERT();
      UNTIL (lNfUserGroupMember.NEXT() = 0);
    END;

    LOCAL PROCEDURE InitialisePermissionGroupBuffers@1000000038();
    VAR
      lNfPermissionGroup@1000000001 : Record 9086960;
      lNfPermissionGroupMember@1000000000 : Record 9086961;
    BEGIN
      ///<summary>Initialising permission group buffers</summary>

      NfPermissionGroupTmp.RESET();
      NfPermissionGroupTmp.DELETEALL();

      lNfPermissionGroup.RESET();
      lNfPermissionGroup.SETCURRENTKEY(Hidden);
      lNfPermissionGroup.SETRANGE(Hidden, FALSE);
      IF (lNfPermissionGroup.FINDSET()) THEN
      REPEAT
        NfPermissionGroupTmp := lNfPermissionGroup;
        NfPermissionGroupTmp.INSERT();
      UNTIL (lNfPermissionGroup.NEXT() = 0);

      NfPermissionGroupMemberTmp.RESET();
      NfPermissionGroupMemberTmp.DELETEALL();

      lNfPermissionGroupMember.RESET();
      IF (NfSetup."Permissions System" = NfSetup."Permissions System"::Advanced) THEN
        lNfPermissionGroupMember.SETRANGE(Type, lNfPermissionGroupMember.Type::"User Group")
      ELSE
        lNfPermissionGroupMember.SETRANGE(Type, lNfPermissionGroupMember.Type::User);
      lNfPermissionGroupMember.SETFILTER("nF. User / User Group ID", '<>0');
      lNfPermissionGroupMember.SETFILTER("nF. Permisison Group ID", '<>0');
      IF (lNfPermissionGroupMember.FINDSET()) THEN
      REPEAT
        NfPermissionGroupMemberTmp := lNfPermissionGroupMember;
        NfPermissionGroupMemberTmp.INSERT();
      UNTIL (lNfPermissionGroupMember.NEXT() = 0);
    END;

    LOCAL PROCEDURE InitialisePermissionBuffers@1000000040();
    VAR
      lNfPermission@1000000000 : Record 9086958;
      lPermissionType@1000000001 : Integer;
    BEGIN
      ///<summary>Initialising permission buffers</summary>

      NfPermissionTmp.RESET();
      NfPermissionTmp.DELETEALL();

      lNfPermission.RESET();
      lNfPermission.SETCURRENTKEY("Object Type");
      lNfPermission.SETFILTER("Object Type", '<>%1', lNfPermission."Object Type"::" ");
      IF (lNfPermission.FINDSET()) THEN
      REPEAT
        NfPermissionTmp := lNfPermission;
        NfPermissionTmp.INSERT();
      UNTIL (lNfPermission.NEXT() = 0);

      NfPermissionToSearchTmp.COPY(NfPermissionTmp, TRUE);

      NfPermissionBufferRecRef.OPEN(DATABASE::"nF. Permission Buffer");
      FOR lPermissionType := NfPermissionBuffer."Permission Type"::Read TO NfPermissionBuffer."Permission Type"::Execute DO
        NfPermissionBufferFldRefs[lPermissionType] := NfPermissionBufferRecRef.FIELD(NfPermissionBuffer.FIELDNO("Give / Take Read") + lPermissionType - 1);
    END;

    LOCAL PROCEDURE FinaliseBuffers@1000000008();
    BEGIN
      ///<summary>Finalising buffers</summary>

      NfPermissionBufferRecRef.CLOSE();
    END;

    LOCAL PROCEDURE AddUserToUpdated@1000000016();
    BEGIN
      ///<summary>Adding user to "Users Updated" buffer</summary>

      NfUserUpdatedTmp := NfUser;
      NfUserUpdatedTmp.INSERT();
    END;

    LOCAL PROCEDURE MarkUsersAsUpdated@1000000015();
    BEGIN
      ///<summary>Marking users, collected in "Users Updated" buffer, as updated</summary>

      IF (NfUserUpdatedTmp.FINDSET()) THEN
      REPEAT
        NfUser.GET(NfUserUpdatedTmp.ID);
        NfUser.VALIDATE(Pending, FALSE);
        IF (NfUser.New) THEN
          NfUser.VALIDATE(New, FALSE);
        NfUser.MODIFY(TRUE);
      UNTIL (NfUserUpdatedTmp.NEXT() = 0);
    END;

    LOCAL PROCEDURE ClearPermissionBuffers@1000000024();
    BEGIN
      ///<summary>Clearing permission buffers</summary>

      UserGroupFilter.RESET();
      UserGroupFilter.DELETEALL();
      CLEAR(UserGroupInFilterText);
      CLEAR(UserGroupOutFilterText);

      PermissionGroupFilter.RESET();
      PermissionGroupFilter.DELETEALL();
      CLEAR(PermissionGroupInFilterText);
      CLEAR(PermissionGroupOutFilterText);

      NfPermissionBuffer.RESET();
      NfPermissionBuffer.DELETEALL();
    END;

    LOCAL PROCEDURE AddToNfUserGroupFilter@1000000021(pNfUserGroupId@1000000000 : Integer);
    BEGIN
      ///<summary>Adding to user group filter</summary>
      ///<param name="pNfUserGroupId">nForcement user group ID</param>

      AddToFilter(pNfUserGroupId, UserGroupFilter, UserGroupInFilterText, UserGroupOutFilterText);
    END;

    LOCAL PROCEDURE AddToNfPermissionGroupFilter@1000000005(pNfPermissionGroupId@1000000000 : Integer);
    VAR
      lPermissionGroupIdText@1000000001 : Text;
    BEGIN
      ///<summary>Adding to permission group filter</summary>
      ///<param name="pPermissionGroupId">Permission group ID</param>

      AddToFilter(pNfPermissionGroupId, PermissionGroupFilter, PermissionGroupInFilterText, PermissionGroupOutFilterText);
    END;

    LOCAL PROCEDURE AddToFilter@1000000023(pId@1000000000 : Integer;VAR pFilter@1000000001 : Record 2000000026;VAR pFilterInText@1000000002 : Text;VAR pFilterOutText@1000000004 : Text);
    VAR
      lIdText@1000000003 : Text;
    BEGIN
      ///<summary>Adding to group filter</summary>
      ///<param name="pId">ID to add</param>
      ///<param name="pFilter">Filter to add to</param>
      ///<param name="pFilterInText">"In" filter text to add to</param>
      ///<param name="pFilterOutText">"Out" filter text to add to</param>

      IF ( NOT (pFilter.GET(pId))) THEN
      BEGIN
        pFilter.Number := pId;
        pFilter.INSERT();
        lIdText := FORMAT(pId, 0, 1);
        IF (pFilterInText <> '') THEN
          pFilterInText := pFilterInText + '|';
        pFilterInText := pFilterInText + lIdText;
        IF (pFilterOutText <> '') THEN
          pFilterOutText := pFilterOutText + '&';
        pFilterOutText := pFilterOutText + '<>' + lIdText;
      END;
    END;

    LOCAL PROCEDURE GetGiveTake@1000000035(pPermissionType@1000000004 : Option;VAR pGiveTakeFldRef@1000000000 : FieldRef) : Integer;
    BEGIN
      ///<summary>Getting give / take</summary>
      ///<param name="pPermissionType">Permission type</param>
      ///<param name="pGiveTakeFldRef">Give / take field reference</param>
      ///<returns>Current give / take value</returns>

      NfPermissionBufferRecRef.GETTABLE(NfPermissionBuffer);
      pGiveTakeFldRef := NfPermissionBufferFldRefs[pPermissionType];
      EXIT(pGiveTakeFldRef.VALUE);
    END;

    LOCAL PROCEDURE SetGiveTake@1000000051(VAR pGiveTakeFldRef@1000000000 : FieldRef;pGiveTake@1000000001 : Option);
    BEGIN
      ///<summary>Setting give / take</summary>
      ///<param name="pGiveTakeFldRef">Give / take field reference</param>
      ///<param name="pGiveTake">Give / take value</param>

      pGiveTakeFldRef.VALUE := pGiveTake;
      NfPermissionBufferRecRef.SETTABLE(NfPermissionBuffer);
    END;

    LOCAL PROCEDURE "--- Log ---"@1000000018();
    BEGIN
    END;

    LOCAL PROCEDURE InitialiseLog@1000000019(pUpdateType@1000000003 : Integer);
    VAR
      eUpdateType@1000000002 : TextConst 'ENU=For a User,For All Users,For Selected Users;ENG=For a User,For All Users,For Selected Users';
    BEGIN
      ///<summary>Initialising log</summary>
      ///<param name="pUpdateType">Update type (see "UpdateType" global variable for options)</param>

      LogActivityId := NfLog.AddNoResultActivity(tActivityType, SELECTSTR(pUpdateType, eUpdateType), FALSE);
    END;

    LOCAL PROCEDURE FinaliseLog@1000000020(pInteraction@1000000000 : Boolean);
    VAR
      lResult@1000000001 : Option;
    BEGIN
      ///<summary>Finalising log</summary>
      ///<param name="pInteraction">Interaction flag</param>

      lResult := NfLog.GetCalculatedResult();
      IF (lResult = NfLog.Result::" ") THEN
        lResult := NfLog.Result::Success;

      NfLog.GET(LogActivityId);
      NfLog.VALIDATE(Result, lResult);
      NfLog.MODIFY(TRUE);

      IF ((pInteraction) AND (NfLog.Result <> NfLog.Result::Success)) THEN
      BEGIN
        COMMIT;
        NfLog.RESET();
        NfLog.FILTERGROUP(2);
        NfLog.SETRANGE("Activity ID", LogActivityId);
        NfLog.FILTERGROUP(0);
        NfLog.SETFILTER(Result, '%1|%2', NfLog.Result::Error, NfLog.Result::Warning);
        PAGE.RUNMODAL(0, NfLog);
      END;
    END;

    LOCAL PROCEDURE AddLogEvent@1000000022(pResult@1000000001 : Option;pMessage@1000000000 : Text);
    BEGIN
      ///<summary>Adding log event</summary>
      ///<param name="pResult">Result</param>
      ///<param name="pMessage">Message</param>

      NfLog.AddEvent(tActivityType, LogActivityId, pMessage, pResult, FALSE);
    END;

    LOCAL PROCEDURE "--- Explain Permission ---"@1000000068();
    BEGIN
    END;

    LOCAL PROCEDURE ExplainPermissionAddUserGroup@1000000046();
    VAR
      eBelongsTo@1000000000 : TextConst 'ENU=User belongs to user group;ENG=User belongs to user group';
    BEGIN
      ///<summary>Adding user group for "Explain Permission" functionality</summary>

      NfUserGroupMemberTmp.CALCFIELDS("nF. User Group Name");
      NfExplainPermissionContext.AddToResult(eBelongsTo, NfUserGroupMemberTmp."nF. User Group Name",
        DATABASE::"nF. User Group", NfUserGroupMemberTmp."nF. User Group ID");
    END;

    LOCAL PROCEDURE ExplainPermissionAddPermissionGroup@1000000058();
    VAR
      eBelongsTo@1000000000 : TextConst 'ENU=User belongs to permission group;ENG=User belongs to permission group';
    BEGIN
      ///<summary>Adding permission group for "Explain Permission" functionality</summary>

      NfPermissionGroupMemberTmp.CALCFIELDS("nF. Permission Group Name");
      NfExplainPermissionContext.AddToResult(eBelongsTo, NfPermissionGroupMemberTmp."nF. Permission Group Name",
        DATABASE::"nF. Permission Group", NfPermissionGroupMemberTmp."nF. Permisison Group ID");
    END;

    LOCAL PROCEDURE ExplainPermissionAddPermissionGroupPermission@1000000069(pPermissionType@1000000000 : Option;pGiveTake@1000000002 : Option;pRecordFilterView@1000000003 : Text);
    VAR
      ePermission@1000000001 : TextConst 'ENU="""%1"" group contains permission";ENG="""%1"" group contains permission"';
      eRecordFilter@1000000004 : TextConst 'ENU=With record filter;ENG=With record filter';
      lRecordFilter@1000000005 : Text;
    BEGIN
      ///<summary>Adding permission group permission for "Explain Permission" functionality</summary>
      ///<param name="pPermissionType">Permission type</param>
      ///<param name="pGiveTake">Give / take</param>
      ///<param name="pRecordFilterView">Record filter view</param>

      IF (pPermissionType <> NfExplainPermissionContext."Permission Type") THEN
        EXIT;

      NfPermissionTmp.CALCFIELDS("nF. Permission Group Name");
      NfExplainPermissionContext.AddToResult(STRSUBSTNO(ePermission, NfPermissionTmp."nF. Permission Group Name"), GiveTakeText(pGiveTake),
        DATABASE::"nF. Permission Group", NfPermissionTmp."nF. Permission Group ID");
      IF (pRecordFilterView <> '') THEN
        NfExplainPermissionContext.AddToResult(Indent(eRecordFilter), pRecordFilterView, 0, 0);
    END;

    LOCAL PROCEDURE ExplainPermissionAddResultingPermission@1000000054(pPermissionType@1000000002 : Option;pGiveTake@1000000000 : Option);
    VAR
      eNextPermission@1000000001 : TextConst 'ENU=Resulting permission is;ENG=Resulting permission is';
    BEGIN
      ///<summary>Adding resulting permission for "Explain Permission" functionality</summary>
      ///<param name="pPermissionType">Permission type</param>
      ///<param name="pGiveTake">Give / take</param>

      IF (pPermissionType <> NfExplainPermissionContext."Permission Type") THEN
        EXIT;

      NfExplainPermissionContext.AddToResult(Indent(eNextPermission), GiveTakeText(pGiveTake), 0, 0);
    END;

    LOCAL PROCEDURE ExplainPermissionAddRecordFilterConflict@1000000065(pPermissionType@1000000001 : Option);
    VAR
      eRecordFilterConflict@1000000000 : TextConst 'ENU="New record filter is in conflict with existing one; ignoring the new one.";ENG="New record filter is in conflict with existing one; ignoring the new one."';
    BEGIN
      ///<summary>Adding record view conflict to "Explain Permission" result</summary>
      ///<param name="pPermissionType">Permission type</param>

      IF (pPermissionType <> NfExplainPermissionContext."Permission Type") THEN
        EXIT;

      NfExplainPermissionContext.AddToResult(eRecordFilterConflict, NfPermissionBuffer.GetRecordFilterView(), 0, 0);
    END;

    LOCAL PROCEDURE ExplainPermissionAddProvisionalPermission@1000000047(pGiveTake@1000000001 : Option);
    VAR
      eResolving@1000000000 : TextConst 'ENU=After resolving provisional permission;ENG=After resolving provisional permission';
      eBecauseOfPermission@1000000002 : TextConst 'ENU=Because of group permission;ENG=Because of group permission';
    BEGIN
      ///<summary>Adding provisional permission start for "Explain Permission"</summary>

      NfExplainPermissionContext.AddToResult(eResolving, GiveTakeText(pGiveTake), 0, 0);
      IF (pGiveTake = GiveTake::Give) THEN
      BEGIN
        NfPermissionTmp.FINDFIRST();
        NfPermissionTmp.CALCFIELDS("nF. Permission Group Name");
        NfExplainPermissionContext.AddToResult(Indent(eBecauseOfPermission), NfPermissionTmp."nF. Permission Group Name", 0, 0);
      END;
    END;

    LOCAL PROCEDURE ExplainPermissionAddFinalPermission@1000000062();
    VAR
      eFinalPermission@1000000000 : TextConst 'ENU=Final permission;ENG=Final permission';
      lGiveTake@1000000001 : Option;
      lPermissionText@1000000003 : Text;
      eWithRecordFilter@1000000004 : TextConst 'ENU=With record filter;ENG=With record filter';
      lRecordFilterView@1000000002 : Text;
    BEGIN
      ///<summary>Adding final permission for "Explain Permission"</summary>
      ///<remarks>Expecting only zero (no permissions) or one record in "NfPermissionBuffer" </remarks>

      NfPermissionBuffer.RESET();
      IF (NfPermissionBuffer.FINDFIRST()) THEN
      BEGIN
        CASE (NfExplainPermissionContext."Permission Type") OF
          NfExplainPermissionContext."Permission Type"::Read: lGiveTake := NfPermissionBuffer."Give / Take Read";
          NfExplainPermissionContext."Permission Type"::Insert: lGiveTake := NfPermissionBuffer."Give / Take Insert";
          NfExplainPermissionContext."Permission Type"::Modify: lGiveTake := NfPermissionBuffer."Give / Take Modify";
          NfExplainPermissionContext."Permission Type"::Delete: lGiveTake := NfPermissionBuffer."Give / Take Delete";
          NfExplainPermissionContext."Permission Type"::Execute: lGiveTake := NfPermissionBuffer."Give / Take Execute";
        END;
        IF (lGiveTake <> GiveTake::Empty) THEN
        BEGIN
          lPermissionText := GiveTakeText(lGiveTake);
          lRecordFilterView := NfPermissionBuffer.GetRecordFilterView();
        END;
      END
      ELSE
        lPermissionText := GiveTakeText(GiveTake::TakeAway);

      NfExplainPermissionContext.AddToResult(eFinalPermission, lPermissionText, 0, 0);
      IF (lRecordFilterView <> '') THEN
        NfExplainPermissionContext.AddToResult(Indent(eWithRecordFilter), lRecordFilterView, 0, 0);
    END;

    LOCAL PROCEDURE "--- Dialog ---"@1000000017();
    BEGIN
    END;

    LOCAL PROCEDURE OpenDialog@1000000026(pInteraction@1000000000 : Boolean);
    VAR
      eTitle@1000000002 : TextConst 'ENU=Updating Permissions...;ENG=Updating Permissions...';
      eUsers@1000000001 : TextConst 'ENU=Users;ENG=Users';
      eUser@1000000003 : TextConst 'ENU=User;ENG=User';
      eCompany@1000000005 : TextConst 'ENU=Company;ENG=Company';
      eActivity@1000000007 : TextConst 'ENU=Activity;ENG=Activity';
      eProgress@1000000004 : TextConst 'ENU=Progress;ENG=Progress';
    BEGIN
      ///<summary>Initialising dialog</summary>
      ///<param name="pInteraction">Interaction flag</param>

      CLEAR(NfDialogManagement);
      IF ( NOT (pInteraction)) THEN
        EXIT;

      NfDialogManagement.AddProgressControl(DialogIndex::Users, eUsers);
      NfDialogManagement.AddTextControl(DialogIndex::User, eUser);
      NfDialogManagement.AddTextControl(DialogIndex::Company, eCompany);
      NfDialogManagement.AddTextControl(DialogIndex::Activity, eActivity);
      NfDialogManagement.AddProgressControl(DialogIndex::Progress, eProgress);

      NfDialogManagement.Open(eTitle);
    END;

    LOCAL PROCEDURE UpdateDialogForUser@1000000041();
    BEGIN
      ///<summary>Updating dialog for user</summary>

      NfDialogManagement.Step(DialogIndex::Users);
      NfDialogManagement.SetValue(DialogIndex::User, NfUser."User Name");
      StartDialogActivity('');
    END;

    LOCAL PROCEDURE StartDialogActivity@1000000042(pActivity@1000000000 : Text);
    BEGIN
      ///<summary>Starting dialog activity</summary>
      ///<param name="pActivity">The activity</param>

      NfDialogManagement.SetValue(DialogIndex::Activity, pActivity);
      NfDialogManagement.ClearValue(DialogIndex::Progress);
    END;

    LOCAL PROCEDURE CompleteDialogActivity@1000000039();
    BEGIN
      ///<summary>Completing dialog activity</summary>

      NfDialogManagement.MoveToEnd(DialogIndex::Progress);
    END;

    LOCAL PROCEDURE CloseDialog@1000000027();
    BEGIN
      ///<summary>Finalising dialog</summary>

      NfDialogManagement.Close();
      CLEAR(NfDialogManagement);
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000061();
    BEGIN
    END;

    LOCAL PROCEDURE PermissionTypeText@1000000063(pPermissionType@1000000000 : Option) : Text;
    VAR
      lNfPermissionBuffer@1000000001 : Record 9086962;
    BEGIN
      ///<summary>Returning permission type text</summary>
      ///<param name="pPermissionType">The permission type</param>
      ///<returns>The text</returns>

      lNfPermissionBuffer."Permission Type" := pPermissionType;
      EXIT(FORMAT(lNfPermissionBuffer."Permission Type"));
    END;

    LOCAL PROCEDURE GiveTakeText@1000000071(pGiveTake@1000000000 : Option) : Text;
    VAR
      lNfPermissionMatrixBuffer@1000000001 : Record 9086963;
    BEGIN
      ///<summary>Returning give / take text</summary>
      ///<param name="pGiveTake">The give / take</param>
      ///<returns>The text</returns>

      lNfPermissionMatrixBuffer."Give / Take" := pGiveTake;
      EXIT(FORMAT(lNfPermissionMatrixBuffer."Give / Take"));
    END;

    LOCAL PROCEDURE Indent@1000000055(pText@1000000000 : Text) : Text;
    BEGIN
      ///<summary>Very ugly (but fast) indentation for "Explain Permission"</summary>
      ///<param name="pText">Text to indent</param>
      ///<returns>Indented text</returns>

      EXIT('    ' + pText);
    END;

    BEGIN
    {
      ///<summary>Updating user permissions - translating nForcmeent information into regular NAV permissions</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-07-14">Created</change>
      ///<change version="NF2016.17.11" initials="JH" date="2016-11-03">Permission management logic changed</change>
    }
    END.
  }
}

