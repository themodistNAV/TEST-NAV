OBJECT Table 9062296 Jet Report Header
{
  OBJECT-PROPERTIES
  {
    Date=14/11/16;
    Time=10:14:25 PM;
    Version List=NA10.15;
  }
  PROPERTIES
  {
    OnInsert=VAR
               Head@1000000000 : Record 9062296;
             BEGIN
               IF ID = 0 THEN VALIDATE(ID,TNPNumbering.GetNextNum_JetAutopilot("Created By"));
               Rec."No. of Retries" := SysB.GetInteger('JET_RETRIES');
             END;

    OnModify=BEGIN
               CheckModifyPermission();
             END;

    OnDelete=VAR
               Params@1000000001 : Record 9062297;
               Perms@1000000000 : Record 9062298;
               FileAttach@1000000002 : Record 9062272;
               eDeleted@1000000003 : TextConst 'ENU=Deleted jet report %1;ENG=Deleted jet report %1';
               eDeletedParameters@1000000004 : TextConst 'ENU=Deleted jet report parameters using filter %1;ENG=Deleted jet report parameters using filter %1';
               eDeletedFileAttachments@1000000005 : TextConst 'ENU=Deleted jet report file attachments using filter %1;ENG=Deleted jet report file attachments using filter %1';
               eDeletedPermissions@1000000006 : TextConst 'ENU=Deleted jet report permissions using filter %1;ENG=Deleted jet report permissions using filter %1';
             BEGIN
               CheckModifyPermission();

               Logger.Log('JETAUTO', Logger.Type::Debug, STRSUBSTNO(eDeleted, Rec.ID), USERID);

               Params.RESET;
               Params.SETRANGE("Header ID",ID);
               Params.DELETEALL;
               Logger.Log('JETAUTO', Logger.Type::Debug, STRSUBSTNO(eDeletedParameters, Params.GETFILTERS), USERID);

               FileAttach.RESET;
               FileAttach.SETRANGE("Table ID",DATABASE::"Jet Report Header");
               FileAttach.SETRANGE("Primary Key Value 1",FORMAT(ID));
               FileAttach.DELETEALL;
               Logger.Log('JETAUTO', Logger.Type::Debug, STRSUBSTNO(eDeletedFileAttachments, FileAttach.GETFILTERS), USERID);

               Perms.RESET;
               Perms.SETRANGE("Header ID",ID);
               Perms.DELETEALL;
               Logger.Log('JETAUTO', Logger.Type::Debug, STRSUBSTNO(eDeletedPermissions, Perms.GETFILTERS), USERID);
             END;

    OnRename=BEGIN
               CheckModifyPermission();
             END;

    CaptionML=[ENU=Jet Report Header;
               ENG=Jet Report Header];
    LookupPageID=Page9062352;
    DrillDownPageID=Page9062352;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;CaptionML=[ENU=ID;
                                                              ENG=ID];
                                                   Editable=No }
    { 2   ;   ;Short Code          ;Code20        ;CaptionML=[ENU=Short Code;
                                                              ENG=Short Code] }
    { 3   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 4   ;   ;Input File Path     ;Text250       ;OnValidate=VAR
                                                                eCouldntFind@1000000001 : TextConst 'ENU=Couldn''t find %1;ENG=Couldn''t find %1';
                                                                FileSytem@1000000000 : Codeunit 9062264;
                                                              BEGIN
                                                                IF (Rec."Input File Path" <> xRec."Input File Path") THEN
                                                                  IF (Rec."Input File Path" = '') THEN
                                                                  BEGIN
                                                                    Rec.VALIDATE("Output Folder Path", '');
                                                                    Rec.VALIDATE("Output File Name", '');
                                                                  END;

                                                                IF (Rec."Input File Path" <> '') THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Output File Name", FileSytem.GetFileNameWithoutExtension(FileSytem.Client, Rec."Input File Path"));
                                                                  IF ( NOT (FileSytem.FileExists(FileSytem.Client, Rec.GetInputFilePath()))) THEN
                                                                    MESSAGE(eCouldntFind, Rec."Input File Path");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              FileMgt@1000000000 : Codeunit 419;
                                                              FilePath@1000000001 : Text;
                                                              FromFolder@1000000002 : Text;
                                                              FromFilter@1000000003 : Text;
                                                              FromFile@1000000004 : Text;
                                                              ToFile@1000000005 : Text;
                                                              txtOpenFileTitle@1000000006 : TextConst 'ENU=Select Jet Report;ENG=Select Jet Report';
                                                              txtOpenFileFilter@1000000007 : TextConst 'ENU=xlsx|*.xlsx|xlsm|*.xlsm;ENG=xlsx|*.xlsx|xlsm|*.xlsm';
                                                            BEGIN
                                                              IF (JetReportManagement.InputPathLookup(Rec)) THEN
                                                                Rec.VALIDATE("Input File Path");
                                                            END;

                                                   CaptionML=[ENU=Input File Path;
                                                              ENG=Input File Path] }
    { 5   ;   ;Output Folder Path  ;Text250       ;InitValue=%1;
                                                   CaptionML=[ENU=Output Folder Path;
                                                              ENG=Output Folder Path] }
    { 6   ;   ;E-Mail Recipients   ;Text250       ;CaptionML=[ENU=E-Mail Recipients;
                                                              ENG=E-Mail Recipients] }
    { 7   ;   ;Output Format       ;Option        ;CaptionML=[ENU=Output Format;
                                                              ENG=Output Format];
                                                   OptionCaptionML=[ENU=Excel,PDF,HTML,Excel XLS;
                                                                    ENG=Excel,PDF,HTML,Excel XLS];
                                                   OptionString=Excel,PDF,HTML,Excel XLS }
    { 8   ;   ;Send E-Mail         ;Boolean       ;CaptionML=[ENU=Send E-Mail;
                                                              ENG=Send E-Mail] }
    { 9   ;   ;Input File Location ;Option        ;CaptionML=[ENU=Input File Location;
                                                              ENG=Input File Location];
                                                   OptionCaptionML=[ENU=Path,Attached;
                                                                    ENG=Path,Attached];
                                                   OptionString=Path,Attached }
    { 11  ;   ;E-Mail Subject      ;Text100       ;CaptionML=[ENU=E-Mail Subject;
                                                              ENG=E-Mail Subject] }
    { 12  ;   ;E-Mail Body         ;Text250       ;CaptionML=[ENU=E-Mail Body;
                                                              ENG=E-Mail Body] }
    { 13  ;   ;Output File Name    ;Text100       ;CaptionML=[ENU=Output File Name;
                                                              ENG=Output File Name] }
    { 14  ;   ;Remove Hidden Cells ;Boolean       ;CaptionML=[ENU=Remove Hidden Cells;
                                                              ENG=Remove Hidden Cells] }
    { 15  ;   ;Keep Jet Code       ;Boolean       ;CaptionML=[ENU=Keep Jet Code;
                                                              ENG=Keep Jet Code] }
    { 19  ;   ;Related Table ID    ;Integer       ;CaptionML=[ENU=Related Table ID;
                                                              ENG=Related Table ID] }
    { 20  ;   ;Loop Table ID       ;Integer       ;TableRelation="Table Information"."Table No.";
                                                   OnValidate=BEGIN
                                                                IF (Rec."Loop Table ID" <> xRec."Loop Table ID") THEN
                                                                  Rec.VALIDATE("Loop E-Mail Field ID", 0);
                                                                Rec.CALCFIELDS("Loop Table Name");
                                                              END;

                                                   CaptionML=[ENU=Loop Table ID;
                                                              ENG=Loop Table ID] }
    { 21  ;   ;Loop E-Mail Field ID;Integer       ;OnValidate=BEGIN
                                                                Rec.CALCFIELDS("Loop E-Mail Field Name");
                                                              END;

                                                   CaptionML=[ENU=Loop E-Mail Field ID;
                                                              ENG=Loop E-Mail Field ID] }
    { 22  ;   ;Enable Excel Macros ;Boolean       ;CaptionML=[ENU=Enable Excel Macros;
                                                              ENG=Enable Excel Macros] }
    { 23  ;   ;Loop Table Name     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Loop Table ID)));
                                                   CaptionML=[ENU=Loop Table Name;
                                                              ENG=Loop Table Name];
                                                   Editable=No }
    { 24  ;   ;Loop E-Mail Field Name;Text50      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field.FieldName WHERE (TableNo=FIELD(Loop Table ID),
                                                                                             No.=FIELD(Loop E-Mail Field ID)));
                                                   CaptionML=[ENU=Loop E-Mail Field Name;
                                                              ENG=Loop E-Mail Field Name];
                                                   Editable=No }
    { 30  ;   ;Example Email Body  ;Text250       ;CaptionML=[ENU=Example Email Body;
                                                              ENG=Example Email Body] }
    { 32  ;   ;E-Mail Entry No.    ;Integer       ;TableRelation=E-Mail."Entry No.";
                                                   CaptionML=[ENU=E-Mail Entry No.;
                                                              ENG=E-Mail Entry No.] }
    { 40  ;   ;Output Type         ;Option        ;CaptionML=[ENU=Output Type;
                                                              ENG=Output Type];
                                                   OptionCaptionML=[ENU=Jet Report,,Codeunit;
                                                                    ENG=Jet Report,,Codeunit];
                                                   OptionString=Jet Report,,Codeunit }
    { 50  ;   ;Codeunit ID         ;Integer       ;TableRelation=Object.ID WHERE (Type=CONST(Codeunit));
                                                   OnValidate=BEGIN
                                                                Rec.CALCFIELDS("Codeunit Name");
                                                              END;

                                                   CaptionML=[ENU=Codeunit ID;
                                                              ENG=Codeunit ID] }
    { 51  ;   ;Codeunit Function   ;Code20        ;CaptionML=[ENU=Codeunit Function;
                                                              ENG=Codeunit Function] }
    { 52  ;   ;Codeunit Name       ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Codeunit),
                                                                                                  Object ID=FIELD(Codeunit ID)));
                                                   CaptionML=[ENU=Codeunit Name;
                                                              ENG=Codeunit Name];
                                                   Editable=No }
    { 70  ;   ;Data Source         ;Text30        ;CaptionML=[ENU=Data Source;
                                                              ENG=Data Source] }
    { 71  ;   ;Company             ;Text30        ;CaptionML=[ENU=Company;
                                                              ENG=Company] }
    { 80  ;   ;Created By          ;Option        ;OnValidate=VAR
                                                                NewCreatedBy@1000000001 : 'System,Customisation,Reseller,DrinkIT,LSRetail,Trimmit';
                                                              BEGIN
                                                                IF xRec."Created By" <> Rec."Created By" THEN BEGIN
                                                                  RENAME(TNPNumbering.GetNextNum_JetAutopilot("Created By"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By];
                                                   OptionCaptionML=[ENU=System,Customisation,Reseller,DrinkIT,LSRetail,Trimmit;
                                                                    ENG=System,Customisation,Reseller,DrinkIT,LSRetail,Trimmit];
                                                   OptionString=System,Customisation,Reseller,DrinkIT,LSRetail,Trimmit }
    { 100 ;   ;Last Run            ;DateTime      ;CaptionML=[ENU=Last Run;
                                                              ENG=Last Run] }
    { 101 ;   ;Auto Run            ;Boolean       ;CaptionML=[ENU=Auto Run;
                                                              ENG=Auto Run] }
    { 102 ;   ;Auto Run As         ;Code20        ;TableRelation=Contact;
                                                   CaptionML=[ENU=Auto Run As;
                                                              ENG=Auto Run As] }
    { 103 ;   ;Auto Run Failed     ;Boolean       ;CaptionML=[ENU=Auto Run Failed;
                                                              ENG=Auto Run Failed] }
    { 104 ;   ;Run Error Message   ;Text250       ;CaptionML=[ENU=Run Error Message;
                                                              ENG=Run Error Message] }
    { 105 ;   ;AutoRun Succeeded   ;Boolean       ;CaptionML=[ENU=AutoRun Succeeded;
                                                              ENG=AutoRun Succeeded] }
    { 110 ;   ;No. of Retries      ;Integer       ;CaptionML=[ENU=No. of Retries;
                                                              ENG=No. of Retries];
                                                   MinValue=0;
                                                   Description=NA8.2 }
    { 111 ;   ;No. of Retries Completed;Integer   ;CaptionML=[ENU=No. of Retries Completed;
                                                              ENG=No. of Retries Completed];
                                                   MinValue=0;
                                                   Description=NA8.2 }
    { 200 ;   ;Copied From         ;Integer       ;TableRelation="Jet Report Header".ID;
                                                   CaptionML=[ENU=CopiedFrom;
                                                              ENG=CopiedFrom] }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Short Code                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      TNLUtils@1000000000 : Codeunit 9062229;
      Logger@1000000001 : Record 9062280;
      TheContactNo@1000000002 : Code[20];
      SysB@1000000003 : Record 9062230;
      ProgressWindow@1000000004 : Dialog;
      NoSeriesMgt@1000000005 : Codeunit 396;
      ProcessJet@1000000006 : Codeunit 9062287;
      UniVar@1000000007 : Codeunit 9062232;
      tDataSourceParameter@1000000009 : TextConst 'ENU=DataSource;ENG=DataSource';
      tCompanyParameter@1000000008 : TextConst 'ENU=Company;ENG=Company';
      tJetIDParameter@1000000010 : TextConst 'ENU=JETID;ENG=JETID';
      TNPNumbering@1000000011 : Codeunit 9062234;
      GenDevUtils@1000000012 : Codeunit 9062459;
      FileSystem@1000000013 : Codeunit 9062264;
      TNPToolkit@1000000014 : Codeunit 9062230;
      JetReportManagement@9062229 : Codeunit 9062347;
      String@1000000015 : Codeunit 9062236;
      EnhancedPermissionsMgt@1000000016 : Codeunit 9062277;

    PROCEDURE RunReport@1000000000(DeleteOnRun@1000000005 : Boolean;ForceOnServer@9062230 : Boolean) FilePath : Text;
    VAR
      wSHShell@1000000000 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      wSHShellResult@1000000018 : Integer;
      AutoPilotString@1000000003 : Text[1024];
      AutoPilotExe@1000000022 : Text[1024];
      _runModally@1000000002 : Boolean;
      dummyInt@1000000001 : Integer;
      Params@1000000004 : Record 9062297;
      ThisRec@1000000006 : Record 9062296;
      Perms@1000000014 : Record 9062298;
      FileAttach@1000000007 : Record 9062272;
      DOCS@1000000008 : Record 9062253;
      TempBlob@1000000009 : TEMPORARY Record 99008535;
      "3TierMgt"@1000000010 : Codeunit 419;
      FileExt@1000000011 : Text[10];
      FAttach@1000000012 : Record 9062272;
      ResText@1000000013 : Text[250];
      FSO@1000000015 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      LogPath@1000000016 : Text[250];
      i@1000000017 : Integer;
      RunErrorMsg@1000000019 : Text[250];
      ProcessDotNet@1000000020 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process";
      ProcessDotNetClient@1000000021 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      ProcessDotNetStartInfo@1000000023 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.ProcessStartInfo";
      SecureString@1000000024 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.SecureString";
      Pass@1000000025 : Variant;
      StreamReader@1000000026 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      ErrorMsg@1000000027 : Text;
      TxtNoPermissions@1000000028 : TextConst 'ENU=You do not have permission to run this report. Please contact the System Administrator;ENG=You do not have permission to run this report. Please contact the System Administrator';
      TxtErrorRunningReport@1000000030 : TextConst 'ENU=Error running report: %1;ENG=Error running report: %1';
      TxtRanReport@1000000031 : TextConst 'ENU=Ran report %1: %2. Outputted to: %3;ENG=Ran report %1: %2. Outputted to: %3';
      InputFilePath@1000000032 : Text;
      OutputFolderPath@1000000033 : Text;
      RunJetOnServer@1000000035 : Boolean;
      lTemporaryPath@1000000034 : Text;
      eCantFindAutopilot@9062229 : TextConst 'ENU=Jet Autopilot can''t be found at "%1". This utility is necessary to run jet reports. Contact your system administrator.;ENG=Jet Autopilot can''t be found at "%1". This utility is necessary to run jet reports. Contact your system administrator.';
      EnablementSetup@1000000029 : Record 9062229;
      TNPMail@1000000036 : Codeunit 9062276;
    BEGIN
      CheckExecutePermission();

      IF (ForceOnServer) THEN
        RunJetOnServer := TRUE
      ELSE
        RunJetOnServer := SysB.GetBoolean('JET_RUN_ON_SERVER');

      InputFilePath := Rec.GetInputFilePath();
      OutputFolderPath := Rec.GetOutputFolderPath();

      CASE "Output Type" OF
        "Output Type"::"Jet Report" : BEGIN

          ShowProgressWindow;

          IF TheContactNo = '' THEN BEGIN
            TheContactNo := TNLUtils.GetUserContactNo(USERID);
          END;
          IF NOT AllowedToRun(TheContactNo,ResText) THEN BEGIN
            "Run Error Message" := TxtNoPermissions;
            "Auto Run Failed" := TRUE;
            EXIT(CloseProgressWindowWithError(ResText));
          END;

          _runModally := TRUE;
          dummyInt := 1;

          AutoPilotExe := SysB.GetText('JET_AUTOPILOT');
          IF ( NOT (FileSystem.FileExists(( NOT (RunJetOnServer)), AutoPilotExe))) THEN
            EXIT(CloseProgressWindowWithError(STRSUBSTNO(eCantFindAutopilot, AutoPilotExe)));

          CASE "Output Format" OF
            "Output Format"::Excel :
              BEGIN
                IF "Keep Jet Code" THEN
                  AutoPilotString += ' /M "UPDATE"'
                ELSE
                  AutoPilotString += ' /M "VALUES"';

                IF "Remove Hidden Cells" THEN AutoPilotString += ' /R';

                IF "Enable Excel Macros" THEN FileExt := '.xlsm' ELSE FileExt := '.xlsx';
              END;
            "Output Format"::"Excel XLS" :
              BEGIN
                IF "Keep Jet Code" THEN
                  AutoPilotString += ' /M "UPDATE"'
                ELSE
                  AutoPilotString += ' /M "VALUES"';
                IF "Remove Hidden Cells" THEN AutoPilotString += ' /R';

                IF "Enable Excel Macros" THEN FileExt := '.xls' ELSE FileExt := '.xls';
              END;

            "Output Format"::PDF :
              BEGIN
                  AutoPilotString += '/M "PDF" /R';
                FileExt := '.pdf';
              END;
            "Output Format"::HTML :
              BEGIN
                AutoPilotString += '/M "SIMPLEWEB" /R"';
                FileExt := '.html';
              END;

          END;

          CASE "Input File Location" OF
            "Input File Location"::Attached :
            BEGIN
              FileAttach.SETRANGE(FileAttach."Table ID",DATABASE::"Jet Report Header");
              FileAttach.SETRANGE("Primary Key Value 1",FORMAT(ID));
              IF FileAttach.FINDSET THEN BEGIN
                FileAttach.CALCFIELDS(Attachment);
                TempBlob.Blob := FileAttach.Attachment;
                IF (RunJetOnServer) THEN
                  lTemporaryPath := FileSystem.Combine(FALSE, SysB.GetText('TEMP_PATH'), FileAttach.FileName + '.tmp')
                ELSE
                  lTemporaryPath := FileSystem.GetTempPathForFile(TRUE, FileAttach.FileName + '.tmp');
                FileSystem.DeleteFileIfExists( NOT (RunJetOnServer), lTemporaryPath);
                FileSystem.ExportBlobToFileSilent( NOT (RunJetOnServer), TempBlob, lTemporaryPath);
                AutoPilotString +=  ' /I "' + lTemporaryPath +  '"';
              END;
            END;
            "Input File Location"::Path :
              AutoPilotString +=  ' /I "' + InputFilePath + '"';
          END;

          FilePath := CreateOutputPath(FileSystem.Combine( NOT (RunJetOnServer), OutputFolderPath, Rec."Output File Name")) + FileExt;
          FilePath := COPYSTR(ReplaceParamsInString(FilePath),1,MAXSTRLEN(FilePath));
          AutoPilotString += ' /O "' + FilePath + '"';

          //DOC PC VC - Email from NAV, not Jet >>>
      //    IF "Send E-Mail" THEN BEGIN
      //      AutoPilotString += ' /E "' + "E-Mail Recipients" + '"';
      //      AutoPilotString += ' /S';
      //    END;
      //
      //    IF "E-Mail Subject" <> '' THEN
      //      AutoPilotString += ' /U "' + COPYSTR(ReplaceParamsInString("E-Mail Subject"),1,MAXSTRLEN("E-Mail Subject")) + '"';
      //
      //    IF "E-Mail Body" <> '' THEN
      //      AutoPilotString += ' /B "' + COPYSTR(ReplaceParamsInString("E-Mail Body"),1,MAXSTRLEN("E-Mail Body")) + '"';
          //DOC PC VC - Email from NAV, not Jet <<<
          LogPath := FilePath + '.jetlog.txt';
          i := 0;
          AutoPilotString += ' /L "' + LogPath + '"';

          RunReportParameters(AutoPilotString);

          Logger.Log('JETAUTO',Logger.Type::Debug,AutoPilotExe + ' ' + AutoPilotString, USERID);

          IF GUIALLOWED AND NOT (RunJetOnServer) THEN BEGIN
            ProcessDotNetClient := ProcessDotNetClient.Start(AutoPilotExe,AutoPilotString);
            ProcessDotNetClient.WaitForExit;
          END ELSE BEGIN
            ProcessDotNet := ProcessDotNet.Start(AutoPilotExe,AutoPilotString);
            ProcessDotNet.WaitForExit;
          END;

          "Last Run" := CURRENTDATETIME;

          RunErrorMsg := COPYSTR(ProcessJet.ReadLogFile(LogPath), 1, MAXSTRLEN(RunErrorMsg));
          "Run Error Message" := RunErrorMsg;

          IF "Run Error Message" <> '' THEN BEGIN
            "Auto Run Failed" := TRUE;
            "Run Error Message" := COPYSTR("Run Error Message", 1, 250);
          END ELSE BEGIN
            //DOC PC VC - Email from NAV, not Jet >>>
            IF "Send E-Mail" THEN BEGIN
              EnablementSetup.GET;

              IF "E-Mail Subject" <> '' THEN
                "E-Mail Subject" := COPYSTR(ReplaceParamsInString("E-Mail Subject"),1,MAXSTRLEN("E-Mail Subject"))
              ELSE
                "E-Mail Subject" := Description;

              IF "E-Mail Body" <> '' THEN
                "E-Mail Body" := COPYSTR(ReplaceParamsInString("E-Mail Body"),1,MAXSTRLEN("E-Mail Body"))
              ELSE
                "E-Mail Body" := 'Your report is attached. Nora X';

              TNPMail.NewMessage(EnablementSetup."Reply From Email Username",
                         EnablementSetup."Reply From Email Address",
                        "E-Mail Recipients","E-Mail Subject","E-Mail Body");
              TNPMail.AddAttachment(FilePath);
              TNPMail.Send;
            END;
            //DOC PC VC - Email from NAV, not Jet <<<
          END;

          IF DeleteOnRun THEN DELETE(TRUE);

          CloseProgressWindow;

          IF "Run Error Message" <> '' THEN BEGIN
            Logger.Log('JETAUTO',Logger.Type::Error,STRSUBSTNO(TxtErrorRunningReport,"Run Error Message"), USERID);
            EXIT('!ERR_FROM_JETAUTO');
          END ELSE BEGIN
            Logger.Log('JETAUTO', Logger.Type::Information, STRSUBSTNO(TxtRanReport, ID, "Short Code", FilePath), USERID);
            EXIT(FilePath);
          END;
        END;
        "Output Type"::Codeunit :
          BEGIN
            ErrorMsg := RunCodeunit;
            IF ErrorMsg = '' THEN BEGIN
              IF DeleteOnRun THEN DELETE(TRUE);
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE RunReportParameters@1000000015(VAR pAutoPilotString@1000000002 : Text[1024]);
    VAR
      lJetAutopilotParameter@1000000000 : Record 9062297;
      lJetAutopilotParameterTmp@1000000001 : TEMPORARY Record 9062297;
      lSystemBehaviour@1000000005 : Record 9062230;
      lDataSource@1000000003 : Text[50];
      lCompany@1000000004 : Text[50];
    BEGIN
      //DOC NA8.1 - Parameters for "RunReport"
      //  <> pAutoPilotString: Auto pilot string to modify

      lJetAutopilotParameter.RESET();
      lJetAutopilotParameter.SETRANGE("Header ID", Rec.ID);
      IF (lJetAutopilotParameter.FINDSET()) THEN
      REPEAT
        lJetAutopilotParameterTmp := lJetAutopilotParameter;
        lJetAutopilotParameterTmp.INSERT();
      UNTIL (lJetAutopilotParameter.NEXT() = 0);

      lDataSource := lSystemBehaviour.GetText('JET_DATA_SOURCE');
      IF lDataSource = '' THEN BEGIN
        lDataSource := GenDevUtils.GetServiceName(0) + TENANTID;
      END;
      lCompany := lSystemBehaviour.GetText('JET_COMPANY');
      IF (lCompany = '') THEN
        lCompany := COMPANYNAME();

      RunReportParameter(lJetAutopilotParameterTmp, tDataSourceParameter, lDataSource);
      RunReportParameter(lJetAutopilotParameterTmp, tCompanyParameter, lCompany);
      RunReportParameter(lJetAutopilotParameterTmp, tJetIDParameter,FORMAT(ID)); //DOC PC NA8.1 230713

      lJetAutopilotParameterTmp.RESET();
      lJetAutopilotParameterTmp.SETFILTER(Value,'<>%1',''); //DOC PC NA8.3 07/08/2014
      IF (lJetAutopilotParameterTmp.FINDSET()) THEN
      BEGIN
        AddSwitchToAutoPilotString(pAutoPilotString, 'P', '');
        REPEAT
          AddParameterToAutoPilotString(pAutoPilotString, lJetAutopilotParameterTmp.Name, lJetAutopilotParameterTmp.Value);
        UNTIL (lJetAutopilotParameterTmp.NEXT() = 0);
      END;
    END;

    LOCAL PROCEDURE RunReportParameter@1000000016(VAR pJetAutopilotParameterTmp@1000000002 : Record 9062297;pName@1000000003 : Text[30];pValue@1000000000 : Text[250]);
    BEGIN
      //DOC NA8.1 - Adding / amending one parameter for "RunReport"
      //  <> pJetAutopilotParameterTmp: Parameter recordset to add the parameter to
      //  -> pName: Parameter name
      //  -> pValue: Parameter value

      IF ((pName = '') OR (pValue = '')) THEN
        EXIT;

      pJetAutopilotParameterTmp.RESET();
      pJetAutopilotParameterTmp.SETRANGE(Name, pName);
      IF (pJetAutopilotParameterTmp.ISEMPTY()) THEN
      BEGIN
        pJetAutopilotParameterTmp.INIT();
        pJetAutopilotParameterTmp.VALIDATE("Header ID", Rec.ID);
        pJetAutopilotParameterTmp.VALIDATE(Name, pName);
        pJetAutopilotParameterTmp.VALIDATE(Value, pValue);
        pJetAutopilotParameterTmp.SetIgnorePermissions(TRUE);
        pJetAutopilotParameterTmp.INSERT(TRUE);
        pJetAutopilotParameterTmp.SetIgnorePermissions(FALSE);
      END;
      pJetAutopilotParameterTmp.RESET();
    END;

    LOCAL PROCEDURE AddSwitchToAutoPilotString@1000000017(VAR pAutoPilotString@1000000000 : Text[1024];pSwitch@1000000001 : Text[1];pValue@1000000002 : Text[1024]);
    BEGIN
      //DOC NA8.1 - Adding switch to auto pilot string
      //  <> pAutoPilotString: Auto pilot string to modify
      //  -> pSwitch: Switch to add
      //  -> pValue: Value to add

      IF (pSwitch = '') THEN
        EXIT;

      IF (pAutoPilotString <> '') THEN
        pAutoPilotString := pAutoPilotString + ' ';

      IF (pValue <> '') THEN
        pAutoPilotString := pAutoPilotString + STRSUBSTNO('/%1 "%2"', pSwitch, pValue)
      ELSE
        pAutoPilotString := pAutoPilotString + STRSUBSTNO('/%1', pSwitch);
    END;

    LOCAL PROCEDURE AddParameterToAutoPilotString@1000000018(VAR pAutoPilotString@1000000000 : Text[1024];pName@1000000001 : Text[50];pValue@1000000002 : Text[250]);
    BEGIN
      //DOC NA8.1 - Adding parameter to auto pilot string
      //  <> pAutoPilotString: Auto pilot string to modify
      //  -> pName: Parameter name
      //  -> pValue: Parameter value

      IF (pAutoPilotString <> '') THEN
        pAutoPilotString := pAutoPilotString + ' ';

      pAutoPilotString := pAutoPilotString + STRSUBSTNO('"%1" "%2"', pName, pValue);
    END;

    PROCEDURE CreateCopy@1000000001(VAR NewHeader@1000000001 : Record 9062296;VAR NewParams@1000000000 : Record 9062297);
    VAR
      Params@1000000002 : Record 9062297;
      FAttach@1000000003 : Record 9062272;
      NewFAttach@1000000004 : Record 9062272;
      Perms@1000000005 : Record 9062298;
      NewPerms@1000000006 : Record 9062298;
    BEGIN
      NewHeader.ID := GetNextNegID;
      NewHeader.INSERT(TRUE);
      NewHeader.TRANSFERFIELDS(Rec,FALSE);
      NewHeader."Short Code" := '';
      NewHeader."Last Run" := CREATEDATETIME(0D,0T);
      NewHeader."Copied From" := ID;

      NewHeader.VALIDATE("Auto Run As",'');
      NewHeader.VALIDATE("Auto Run Failed",FALSE);
      NewHeader.VALIDATE("Run Error Message",'');
      NewHeader.VALIDATE("AutoRun Succeeded",FALSE);

      NewHeader.MODIFY;

      Params.SETRANGE("Header ID",ID);
      IF Params.FINDSET THEN BEGIN
        REPEAT
          NewParams.TRANSFERFIELDS(Params,TRUE);
          NewParams."Header ID" := NewHeader.ID;
          NewParams.INSERT(TRUE);
        UNTIL Params.NEXT = 0;
      END;

      NewHeader.SETRANGE(ID,NewHeader.ID);
      NewParams.SETRANGE("Header ID",NewHeader.ID);

      FAttach.SETRANGE("Table ID",DATABASE::"Jet Report Header");
      FAttach.SETRANGE(FAttach."Primary Key Value 1",FORMAT(ID));
      IF FAttach.FINDSET THEN BEGIN
        REPEAT
          FAttach.CALCFIELDS(Attachment,Icon);
          NewFAttach.COPY(FAttach);
          NewFAttach."Primary Key Value 1" := FORMAT(NewHeader.ID);
          NewFAttach."No." := NoSeriesMgt.GetNextNo('ATTACHMENT',TODAY,TRUE);
          NewFAttach.INSERT(TRUE);
        UNTIL FAttach.NEXT = 0;
      END;

      Perms.SETRANGE("Header ID",ID);
      IF Perms.FINDSET THEN BEGIN
        REPEAT
          NewPerms.TRANSFERFIELDS(Perms,TRUE);
          NewPerms."Header ID" := NewHeader.ID;
          NewPerms.RangeName := Perms.RangeName;
          NewPerms."Contact No." := Perms."Contact No.";
          NewPerms.INSERT(TRUE);
        UNTIL Perms.NEXT = 0;
      END;
    END;

    PROCEDURE SetParam@1000000002(ParamName@1000000000 : Text[100];NewValue@1000000001 : Text[100]) OK : Boolean;
    VAR
      Param@1000000002 : Record 9062297;
    BEGIN
      IF NOT Param.GET(ID,ParamName) THEN EXIT(FALSE);

      Param.VALIDATE(Value,NewValue);
      Param."AutoFill Status" := Param."AutoFill Status"::OK;
      Param.MODIFY;

      EXIT(TRUE);
    END;

    PROCEDURE SetParamAsErr@1000000005(ParamName@1000000001 : Text[100]) OK : Boolean;
    VAR
      Param@1000000000 : Record 9062297;
    BEGIN
      IF NOT Param.GET(ID,UPPERCASE(ParamName)) THEN EXIT(FALSE);

      Param."AutoFill Status" := Param."AutoFill Status"::ValueErr;
      Param.MODIFY;

      EXIT(TRUE);
    END;

    PROCEDURE SetParamAutoFillText@1000000007(ParamName@1000000000 : Text[100];TheText@1000000001 : Text[100]) OK : Boolean;
    VAR
      Param@1000000002 : Record 9062297;
    BEGIN
      IF NOT Param.GET(ID,ParamName) THEN EXIT(FALSE);

      Param."AutoFill Text" := TheText;
      Param.MODIFY;

      EXIT(TRUE);
    END;

    PROCEDURE RunLoopReport@1000000003(Send@1000000006 : Boolean;DeleteOnSend@1000000007 : Boolean;ForceOnServer@9062229 : Boolean);
    VAR
      RecRef@1000000000 : RecordRef;
      FieldRef@1000000001 : FieldRef;
      nh@1000000002 : Record 9062296;
      np@1000000003 : Record 9062297;
      params@1000000004 : Record 9062297;
      FilenameAppend@1000000005 : Text[100];
    BEGIN
      TESTFIELD("Loop Table ID");
      RecRef.OPEN("Loop Table ID");
      IF RecRef.FINDSET THEN BEGIN
        REPEAT
          FilenameAppend := '';
          CLEAR(nh);
          CLEAR(np);
          CreateCopy(nh,np);
          np.SETFILTER("Loop Field ID",'<>0');
          IF np.FINDSET THEN BEGIN
            REPEAT
              FieldRef := RecRef.FIELD(np."Loop Field ID");
              np.VALIDATE(Value,FORMAT(FieldRef.VALUE));
              FilenameAppend += '_' + np.Value;
              np.MODIFY(TRUE);
            UNTIL np.NEXT = 0;
          END;
          nh."Output File Name" += FilenameAppend;
          IF nh."Loop E-Mail Field ID" <> 0 THEN
            nh."E-Mail Recipients" := FORMAT(RecRef.FIELD(nh."Loop E-Mail Field ID").VALUE);
          nh.MODIFY;
          IF Send THEN nh.RunReport(DeleteOnSend, ForceOnServer);
        UNTIL RecRef.NEXT = 0;
      END;
    END;

    PROCEDURE QuickRun@1000000004(ShortCode@1000000006 : Code[20];DestFolder@1000000010 : Text[250];DestFilename@1000000011 : Text[100];DestEmail@1000000012 : Text[100];Param1Name@1000000000 : Text[100];Param1Value@1000000001 : Text[100];Param2Name@1000000002 : Text[100];Param2Value@1000000003 : Text[100];Param3Name@1000000004 : Text[100];Param3Value@1000000005 : Text[100];ForceOnSrver@9062229 : Boolean) FileLocation : Text[250];
    VAR
      jah@1000000007 : Record 9062296;
      nh@1000000008 : Record 9062296;
      np@1000000009 : Record 9062297;
      TxtQuickrun@1000000013 : TextConst 'ENU=Quickrun %1 - P1:%2/%3. P2: %4/%5. P3: %6/%7.;ENG=Quickrun %1 - P1:%2/%3. P2: %4/%5. P3: %6/%7.';
      TxtNoJetReportFound@1000000014 : TextConst 'ENU=No jet report found with short code %1;ENG=No jet report found with short code %1';
    BEGIN
      Logger.Log('JETAUTO', Logger.Type::Information, STRSUBSTNO(TxtQuickrun, ShortCode, Param1Name, Param1Value, Param2Name, Param2Value, Param3Name, Param3Value), USERID);
      jah.SETRANGE("Short Code",ShortCode);
      jah.SETRANGE(jah."Copied From", 0);
      IF jah.FINDSET THEN BEGIN
        jah.CreateCopy(nh,np);
        IF Param1Name <> '' THEN nh.SetParam(Param1Name,Param1Value);
        IF Param2Name <> '' THEN nh.SetParam(Param2Name,Param2Value);
        IF Param3Name <> '' THEN nh.SetParam(Param3Name,Param3Value);
        IF DestFolder <> '' THEN nh."Output Folder Path" := DestFolder;
        IF DestFilename <> '' THEN nh."Output File Name" := DestFilename;
        IF DestEmail <> '' THEN BEGIN
          nh."E-Mail Recipients" := DestEmail;
          nh."Send E-Mail" := TRUE;
        END;
        nh.MODIFY;
        EXIT(nh.RunReport(TRUE, ForceOnSrver));
      END ELSE
        Logger.Log('JETAUTO', Logger.Type::Warning, STRSUBSTNO(TxtNoJetReportFound, ShortCode), USERID);
    END;

    PROCEDURE AllParamsOK@1000000006() OK : Boolean;
    VAR
      Param@1000000000 : Record 9062297;
    BEGIN
      Param.SETRANGE("Header ID",ID);
      Param.SETFILTER("AutoFill Status",'<>%1',Param."AutoFill Status"::OK);
      EXIT(NOT Param.FINDSET);
    END;

    PROCEDURE GotAllParams@1000000008() OK : Boolean;
    VAR
      Param@1000000000 : Record 9062297;
    BEGIN
      Param.SETRANGE("Header ID",ID);
      Param.SETFILTER("AutoFill Status",'%1',Param."AutoFill Status"::Blank);
      EXIT(NOT Param.FINDSET);
    END;

    PROCEDURE AllowedToRun@1000000009(ContactNo@1000000000 : Code[20];VAR ResultText@1000000003 : Text[250]) Allowed : Boolean;
    VAR
      Perms@1000000001 : Record 9062298;
      Params@1000000002 : Record 9062297;
      TxtCheckingPermissions@1000000004 : TextConst 'ENU=Checking permissions for report %1 for contact %2;ENG=Checking permissions for report %1 for contact %2';
      TxtNoPermissions@1000000005 : TextConst 'ENU=You do not have permission to run the report: %1;ENG=You do not have permission to run the report: %1';
      TxtDenyingPermission@1000000006 : TextConst 'ENU=Denying permission. No permission found for report ID %1;ENG=Denying permission. No permission found for report ID %1';
      TxtFoundPermissions@1000000007 : TextConst 'ENU=Found permissions for contact %1;ENG=Found permissions for contact %1';
      TxtDenyingPermissionForContact@1000000008 : TextConst 'ENU=Denying permission. No permissions found for contact %1 for report %2;ENG=Denying permission. No permissions found for contact %1 for report %2';
      TxtCopiedFrom@1000000009 : TextConst 'ENU=%1 (copied from report %2);ENG=%1 (copied from report %2)';
      TxtBlankContact@1000000010 : TextConst 'ENU=Using permissions with blank contact no.;ENG=Using permissions with blank contact no.';
      TxtRangeDoesntExist@1000000011 : TextConst 'ENU=Range name "%1" does not exist for report ID %2;ENG=Range name "%1" does not exist for report ID %2';
      TxtOverwroteValue@1000000012 : TextConst 'ENU=Overwrote value "%1" with "%2" due to permissions record "%3";ENG=Overwrote value "%1" with "%2" due to permissions record "%3"';
      TxtNoMatchForFilter@1000000013 : TextConst 'ENU=Denying permission. Value "%1" for range "%2" does not match the filter "%3";ENG=Denying permission. Value "%1" for range "%2" does not match the filter "%3"';
      TxtMatchesTheFilter@1000000014 : TextConst 'ENU=Value "%1" for range "%2" matches the filter "%3";ENG=Value "%1" for range "%2" matches the filter "%3"';
      TxtAllowingPermissionMatch@1000000015 : TextConst 'ENU=Allowing permission as all range values match permission filters;ENG=Allowing permission as all range values match permission filters';
      TxtAllowingPermissionBlank@1000000016 : TextConst 'ENU=Allowing permission as entry found with blank range name;ENG=Allowing permission as entry found with blank range name';
    BEGIN
      Logger.Log('JETAUTO', Logger.Type::Debug, STRSUBSTNO(TxtCheckingPermissions, ID, ContactNo), USERID);
      Perms.SETRANGE("Header ID",ID);
      IF NOT Perms.FINDSET THEN BEGIN
        ResultText := STRSUBSTNO(TxtNoPermissions, Description);
        Logger.Log('JETAUTO', Logger.Type::Warning, STRSUBSTNO(TxtDenyingPermission, ID), USERID);
        EXIT(FALSE);
      END;

      Perms.SETFILTER("Contact No.",ContactNo);

      IF Perms.FINDSET THEN BEGIN
        Logger.Log('JETAUTO', Logger.Type::Debug, STRSUBSTNO(TxtFoundPermissions, ContactNo), USERID);
      END ELSE BEGIN
        Perms.SETFILTER("Contact No.",'%1','');
        IF NOT Perms.FINDSET THEN BEGIN
          ResultText := STRSUBSTNO(TxtDenyingPermissionForContact, ContactNo, ID);
          IF "Copied From" <> 0 THEN
            ResultText := STRSUBSTNO(TxtCopiedFrom, ResultText, "Copied From");
          Logger.Log('JETAUTO', Logger.Type::Warning, STRSUBSTNO(TxtDenyingPermissionForContact, ContactNo, ID), USERID);
          EXIT(FALSE);
        END ELSE BEGIN
          Logger.Log('JETAUTO', Logger.Type::Debug, TxtBlankContact, USERID);
        END;
      END;

      Perms.SETFILTER(RangeName,'<>%1','');
      IF Perms.FINDSET THEN BEGIN
        REPEAT
          IF NOT Params.GET(ID,Perms.RangeName)
            THEN ERROR(TxtRangeDoesntExist, Perms.RangeName, ID);

          IF Perms."Override Value" <> '' THEN BEGIN
            Logger.Log('JETAUTO', Logger.Type::Debug, STRSUBSTNO(TxtOverwroteValue, Params.Value, Perms."Override Value", Perms.GETPOSITION), USERID);
            Params.VALIDATE(Value,Perms."Override Value");
            Params.MODIFY;

          END ELSE BEGIN
            Params.SETRANGE("Header ID",ID);
            Params.SETRANGE(Name,Perms.RangeName);

            CASE Params."Value Format" OF
              Params."Value Format"::Text : Params.SETFILTER(Value,Perms."Param Filter");
              Params."Value Format"::Date : Params.SETFILTER("Value as Date",Perms."Param Filter");
              Params."Value Format"::Integer : Params.SETFILTER("Value as Integer",Perms."Param Filter");
              Params."Value Format"::Decimal : Params.SETFILTER("Value as Decimal",Perms."Param Filter");
              Params."Value Format"::Boolean : Params.SETFILTER("Value as Boolean",Perms."Param Filter");
            END;

            IF NOT Params.FINDSET THEN BEGIN
              Logger.Log('JETAUTO', Logger.Type::Warning, STRSUBSTNO(TxtNoMatchForFilter, Params.Value, Params.Name, Perms."Param Filter"), USERID);
              ResultText := STRSUBSTNO(TxtNoMatchForFilter, Params.Value, Params.Name, Perms."Param Filter");
              IF "Copied From" <> 0 THEN
                ResultText := STRSUBSTNO(TxtCopiedFrom, ResultText, "Copied From");
              EXIT(FALSE);
            END ELSE BEGIN
              Logger.Log('JETAUTO', Logger.Type::Debug, STRSUBSTNO(TxtMatchesTheFilter, Params.Value, Params.Name, Perms."Param Filter"), USERID);
            END;
          END;
        UNTIL Perms.NEXT = 0;
        Logger.Log('JETAUTO', Logger.Type::Debug, TxtAllowingPermissionMatch, USERID);
        EXIT(TRUE);
      END ELSE BEGIN
        Logger.Log('JETAUTO', Logger.Type::Debug, TxtAllowingPermissionBlank, USERID);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE RunAs@1000000010(SetContactNo@1000000000 : Code[20]);
    VAR
      Cont@1000000001 : Record 5050;
      TxtRunAsFailed@1000000002 : TextConst 'ENU=RunAs failed, could not find contact no. "%1";ENG=RunAs failed, could not find contact no. "%1"';
      TxtCouldNotFindUser@1000000003 : TextConst 'ENU=Could not find user in NAV;ENG=Could not find user in NAV';
      TxtSetRunAs@1000000004 : TextConst 'ENU=Set RunAs to "%1";ENG=Set RunAs to "%1"';
    BEGIN
      IF NOT Cont.GET(SetContactNo) THEN BEGIN
        Logger.Log('JETAUTO', Logger.Type::Warning, STRSUBSTNO(TxtRunAsFailed, SetContactNo), USERID);
        "Auto Run Failed" := TRUE;
        "Run Error Message" := TxtCouldNotFindUser;
      END ELSE BEGIN
        TheContactNo := SetContactNo;

      END;

      Logger.Log('JETAUTO', Logger.Type::Debug, STRSUBSTNO(TxtSetRunAs, TheContactNo), USERID);
    END;

    PROCEDURE CreateOutputPath@1000000011(TemplatePath@1000000000 : Text[250]) Output : Text[1024];
    VAR
      JetParam@1000000001 : Record 9062297;
      lUserID@1000000002 : Code[50];
    BEGIN
      lUserID := USERID;
      lUserID := String.Replace(lUserID, '\', '_');
      lUserID := String.Replace(lUserID, '/', '_');

      Output := TemplatePath;
      Output := String.Replace(Output,'[USERID]',lUserID);
      Output := String.Replace(Output,'[DATE]',FORMAT(TODAY,0,'<Year4><Month,2><Day,2>'));
      Output := String.Replace(Output,'[HOUR]',FORMAT(TIME,0,'<Hours24>'));

      JetParam.SETRANGE("Header ID",ID);
      IF JetParam.FINDSET THEN BEGIN
        REPEAT
          IF STRPOS(Output,'[' + JetParam.Name  + ']') <> 0 THEN
            Output := String.Replace(Output,'[' + JetParam.Name  + ']',JetParam.Value);
        UNTIL JetParam.NEXT = 0;
      END;

      EXIT(Output);
    END;

    PROCEDURE ShowProgressWindow@1000000012();
    VAR
      TxtCreating@1000000000 : TextConst 'ENU="Creating ""%1""; please wait...";ENG="Creating ""%1""; please wait..."';
    BEGIN
      IF ( NOT (GUIALLOWED)) THEN
        EXIT;
      ProgressWindow.OPEN(STRSUBSTNO(TxtCreating, ReplaceParamsInString("Output File Name")));
    END;

    PROCEDURE CloseProgressWindow@1000000013();
    BEGIN
      IF ( NOT (GUIALLOWED)) THEN
        EXIT;
      ProgressWindow.CLOSE;
    END;

    PROCEDURE CloseProgressWindowWithError@9062229(pErrorMessage@9062229 : Text) : Text;
    BEGIN
      CloseProgressWindow();
      EXIT(COPYSTR('!' + pErrorMessage, 1, 250));
    END;

    PROCEDURE RunCodeunit@1000000014() ErrorMsg : Text;
    VAR
      SMTPMail@1000000000 : Codeunit 400;
    BEGIN
      IF "Codeunit ID" <> 0 THEN BEGIN
        CODEUNIT.RUN("Codeunit ID",Rec);
        EXIT('');
      END;
    END;

    PROCEDURE ReplaceParamsInString@1000000020(InputString@1000000000 : Text[1024]) Output : Text[1024];
    VAR
      JetParam@1000000001 : Record 9062297;
      TP@1000000002 : Codeunit 9062247;
      ParamName@1000000003 : Text[1024];
      CurrWord@1000000004 : Text[1024];
    BEGIN
      //DOC NA8.1
      TP.SetString(InputString);
      REPEAT
        CurrWord := TP.GetNextWordWithBrackets;
        IF CurrWord <> '' THEN BEGIN
          IF Output <> '' THEN Output := Output + ' ';

          IF (COPYSTR(CurrWord,1,1) = '[') AND (COPYSTR(CurrWord,STRLEN(CurrWord)) = ']') AND (STRLEN(CurrWord) > 2) THEN BEGIN
            ParamName := COPYSTR(CurrWord,2,STRLEN(CurrWord)-2);
            JetParam.SETRANGE("Header ID",ID);
            JetParam.SETRANGE(SearchWord,UPPERCASE(ParamName));
            IF JetParam.FINDFIRST THEN BEGIN
              Output := Output + JetParam.Value;
            END ELSE BEGIN
              JetParam.RESET;
              ParamName := COPYSTR(CurrWord,2,STRLEN(CurrWord)-2);
              JetParam.SETRANGE("Header ID",ID);
              JetParam.SETRANGE(Name,ParamName);
              IF JetParam.FINDFIRST THEN Output := Output + JetParam.Value;
            END;
          END ELSE BEGIN
            Output := Output + CurrWord;
          END;
        END;
      UNTIL CurrWord = '';
    END;

    PROCEDURE GetNextNegID@1000000022() ID : Integer;
    VAR
      JetAuto@1000000000 : Record 9062296;
    BEGIN
      JetAuto.SETFILTER(ID,'<0');
      IF NOT JetAuto.FINDFIRST THEN EXIT(-1);
      EXIT(JetAuto.ID -1);
    END;

    PROCEDURE GetInputFilePath@1000000019() : Text;
    VAR
      lDefaultInputPath@9062229 : Text;
      lInputPath@1000000000 : Text;
    BEGIN
      lDefaultInputPath := JetReportManagement.GetDefaultInputPath();
      IF (LOWERCASE(FileSystem.GetFileName(FALSE, Rec."Input File Path")) = LOWERCASE(Rec."Input File Path")) THEN
        lInputPath := FileSystem.Combine(FALSE, lDefaultInputPath, Rec."Input File Path")
      ELSE
      BEGIN
        lInputPath := String.Replace(Rec."Input File Path", '[PATH]', lDefaultInputPath);
        lInputPath := STRSUBSTNO(lInputPath, lDefaultInputPath);
      END;
      EXIT(lInputPath);
    END;

    PROCEDURE GetOutputFolderPath@1000000021() : Text;
    VAR
      lDefaultOutputPath@9062229 : Text;
      lOuputPath@1000000000 : Text;
    BEGIN
      lDefaultOutputPath := JetReportManagement.GetDefaultOutputPath();
      IF (Rec."Output Folder Path" <> '') THEN
      BEGIN
        lOuputPath := String.Replace(Rec."Output Folder Path", '[PATH]', lDefaultOutputPath);
        lOuputPath := STRSUBSTNO(lOuputPath, lDefaultOutputPath);
      END
      ELSE
        lOuputPath := lDefaultOutputPath;
      EXIT(lOuputPath);
    END;

    PROCEDURE GetPageCaption@1000000023() : Text;
    BEGIN
      EXIT(STRSUBSTNO('%1 (%2)', Rec.Description, FORMAT(Rec."Output Type")));
    END;

    LOCAL PROCEDURE CheckModifyPermission@1000000025();
    BEGIN
      IF (Rec."Copied From" <> 0) THEN
        EXIT;
      EnhancedPermissionsMgt.CheckJetReportModifyPermission(Rec, USERID());
    END;

    LOCAL PROCEDURE CheckExecutePermission@1000000024();
    BEGIN
      IF (Rec."Copied From" <> 0) THEN
        EXIT;
      EnhancedPermissionsMgt.CheckJetReportExecutePermission(Rec, USERID());
    END;

    BEGIN
    {
      //DOC NA8.1  JH 08/10/2012 - Migrated to 2013
      //DOC NA8.1  JH 15/07/2013 - Workflow parameters improvements
      //DOC NA8.1  PC 23/07/2013 - Added Jet ID parameter
      //DOC NA8.1  PC 21/08/2013 - Added functions to auto set ID based on "Created By"
      //DOC NA8.1  PC 25/03/2014 - Fixed issue with AutoRun Fail state being copied to new versions of the report
      //DOC NA8.2  JH 01/07/2014 - Processing properly long error messages, "No. of Retries*" added
      //DOC NA8.2  PC 28/08/2014 - Changes to add parameter values in to both Output Folder and Output Filename
      //DOC NA8.4  JH 19/11/2014 - Codeunit, table, field names added
      //DOC NA8.4  JH 28/12/2014 - System behaviours renamed
      //DOC NA9.10 JH 27/08/2015 - Upgraded to 2016
      //DOC NA9.12 JH 28/01/2016 - New string codeunit
      //DOC NA9.15 JH 15/04/2016 - CfMD amendments
      //DOC NA9.15 JH 05/05/2016 - Enhanced permissions
    }
    END.
  }
}

