OBJECT Codeunit 9087010 Buying Staging Management
{
  OBJECT-PROPERTIES
  {
    Date=15/08/18;
    Time=[ 2:58:54 PM];
    Modified=Yes;
    Version List=NS2016.16.2,OP9031,M0021,M0038;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            NsembleSetup.VerifyAndGet();

            CASE (Activity) OF
              Activity::CheckBuyingStagingHeader:
                CheckBuyingStagingHeader();
              Activity::CheckBuyingStagingLine:
                CheckBuyingStagingLine();
              Activity::CreateStyle:
                CreateStyle();
              Activity::CreateItem:
                CreateItem();
              Activity::CreateBuyingSheetHeader:
                CreateBuyingSheetHeader();
              Activity::CreateBuyingSheetSummaryLine:
                CreateBuyingSheetSummaryLine();
              Activity::ReleaseBuyingSheet:
                ReleaseBuyingSheet();
            END;
          END;

  }
  CODE
  {
    VAR
      Colour@1000000007 : Record 9087003;
      Item@1000000009 : Record 27;
      NsembleSetup@1000000004 : Record 9087000;
      BuyingStagingHeader@1000000001 : Record 9087016;
      BuyingStagingLine@1000000002 : Record 9087017;
      BuyingSheetHeader@1000000010 : Record 9087020;
      BuyingSheetSummaryLine@1000000011 : Record 9087021;
      BuyingSheetLine@1000000012 : Record 9087022;
      Size@1000000008 : Record 9087002;
      SizeGroup@1000000006 : Record 9087001;
      nSembleToolkit@1000000014 : Codeunit 9087000;
      StyleManagement@1000000003 : Codeunit 9087006;
      TnpToolkit@1000000013 : Codeunit 9062230;
      TnpUtils@1000000000 : Codeunit 9062229;
      Activity@1000000005 : ',CheckBuyingStagingHeader,CheckBuyingStagingLine,CreateStyle,CreateItem,CreateBuyingSheetHeader,CreateBuyingSheetSummaryLine,ReleaseBuyingSheet';
      Err001@1000000015 : TextConst 'ENU=Cannot use %1 %2 with %3 set to %4.';

    PROCEDURE "--- Properties ---"@1000000029();
    BEGIN
    END;

    PROCEDURE GetBuyingStagingHeader@1000000030(VAR pBuyingStagingHeader@1000000000 : Record 9087016);
    BEGIN
      //DOC NS2015.1 - Returning bying staging header
      //  <> pBuyingStagingHeader: Target header

      pBuyingStagingHeader := BuyingStagingHeader;
    END;

    PROCEDURE GetBuyingStagingLine@1000000031(VAR pBuyingStagingLine@1000000000 : Record 9087017);
    BEGIN
      //DOC NS2015.1 - Returning buying staging Line
      //  <> pBuyingStagingLine: Target line

      pBuyingStagingLine := BuyingStagingLine;
    END;

    PROCEDURE GetBuyingSheetHeader@1000000022(VAR pBuyingSheetHeader@1000000000 : Record 9087020);
    BEGIN
      //DOC NS2016.16 - Returning buying sheet header
      //  <> pBuyingSheetHeader: Target header

      pBuyingSheetHeader := BuyingSheetHeader;
    END;

    PROCEDURE "--- Buying Staging ---"@1000000010();
    BEGIN
    END;

    PROCEDURE CheckBuyingStagingStatus@1000000020();
    BEGIN
      //DOC NS2015.1 - Checking buying staging status

      IF (BuyingStagingHeader.Status = BuyingStagingHeader.Status::Processed) THEN
        BuyingStagingHeader.FIELDERROR(Status);
    END;

    PROCEDURE SetCheckBuyingStagingHeader@1000000012(pBuyingStagingHeader@1000000000 : Record 9087016);
    BEGIN
      //DOC NS2015.1 - Setting "Check Buying Staging Header" function
      //  -> pBuyingStagingHeader: The header to check

      Activity := Activity::CheckBuyingStagingHeader;
      BuyingStagingHeader := pBuyingStagingHeader;
    END;

    LOCAL PROCEDURE CheckBuyingStagingHeader@1000000016();
    BEGIN
      //DOC NS2015.1 - Checking buying staging header

      CheckBuyingStagingStatus();

      BuyingStagingHeader.TESTFIELD("Vendor No.");
      IF (BuyingStagingHeader."Currency Code" <> '') THEN
        BuyingStagingHeader.TESTFIELD("Currency Factor");
      BuyingStagingHeader.TESTFIELD("Season Code");
      //BuyingStagingHeader.TESTFIELD("Reference No.");  //DOC OP9031 CC Removed
    END;

    PROCEDURE SetCheckBuyingStagingLine@1000000017(pBuyingStagingLine@1000000000 : Record 9087017);
    BEGIN
      //DOC NS2015.1 - Setting "Check Buying Staging Line" function
      //  -> pBuyingStagingLine: The line to check

      Activity := Activity::CheckBuyingStagingLine;
      BuyingStagingLine := pBuyingStagingLine;
    END;

    LOCAL PROCEDURE CheckBuyingStagingLine@1000000011();
    BEGIN
      //DOC NS2015.1 - Checking buying staging line

      BuyingStagingHeader.GET(BuyingStagingLine."Buying Staging No.");
      CheckBuyingStagingStatus();

      BuyingStagingLine.TESTFIELD("Vendor No.");

      //DOC M0040 -
      CASE NsembleSetup."Buying Sheet Item Ident." OF
        NsembleSetup."Buying Sheet Item Ident."::"Vendor Style No. + Colour Code":
          BEGIN
            BuyingStagingLine.TESTFIELD("Vendor Style No.");
            BuyingStagingLine.TESTFIELD("Colour Code");
          END;
        ELSE BEGIN
      //DOC M0040 +
          BuyingStagingLine.TESTFIELD("Vendor Item No.");
          BuyingStagingLine.TESTFIELD("Colour Code");
      //DOC M0040 -
        END;
      END;
      //DOC M0040 +
    END;

    PROCEDURE "--- Styles ---"@1000000021();
    BEGIN
    END;

    PROCEDURE SetCreateStyle@1000000026(pBuyingStagingLine@1000000000 : Record 9087017);
    BEGIN
      //DOC NS2015.1 - Setting "Create Style" function
      //  -> pBuyingStagingLine: The line

      Activity := Activity::CreateStyle;
      BuyingStagingLine := pBuyingStagingLine;
    END;

    LOCAL PROCEDURE CreateStyle@1000000013();
    VAR
      lStyle@1000000000 : Record 9087012;
    BEGIN
      //DOC NS2015.1 - Creating a style (for buying staging line)

      BuyingStagingHeader.GET(BuyingStagingLine."Buying Staging No.");
      CheckBuyingStagingStatus();

      IF (BuyingStagingLine."Style No." <> '') THEN
        EXIT;

      IF ( NOT (NsembleSetup."Enable Buying Staging Styles")) THEN
        EXIT;

      lStyle.RESET();
      lStyle.SETCURRENTKEY("Vendor No.", "Vendor Style No.");
      lStyle.SETRANGE("Vendor No.", BuyingStagingHeader."Vendor No.");
      lStyle.SETRANGE("Vendor Style No.", BuyingStagingLine."Vendor Style No.");
      IF (lStyle.FINDFIRST()) THEN
        CheckAndUpdateStyle(lStyle)
      ELSE
      BEGIN
        CLEAR(lStyle);
        lStyle.INIT();
        lStyle.INSERT(TRUE);
        lStyle.InitRecord();
        lStyle.VALIDATE(Description, BuyingStagingLine.Description);
        lStyle.VALIDATE("Unit Price", BuyingStagingLine."Unit Price (LCY)");
        lStyle.VALIDATE("Unit Cost", BuyingStagingLine."Unit Cost");
        lStyle.VALIDATE("Vendor No.", BuyingStagingLine."Vendor No.");
        lStyle.VALIDATE("Vendor Style No.", BuyingStagingLine."Vendor Style No.");
        lStyle.VALIDATE("Division Code", BuyingStagingLine."Division Code");
        lStyle.VALIDATE("Department Code", BuyingStagingLine."Department Code");
        lStyle.VALIDATE("Group Code", BuyingStagingLine."Group Code");
        lStyle.VALIDATE("Category Code", BuyingStagingLine."Category Code");
        lStyle.VALIDATE("Sub-Category Code", BuyingStagingLine."Sub-Category Code");
        lStyle.VALIDATE("Size Group Code", BuyingStagingLine."Size Group Code");
        lStyle.VALIDATE("Brand Code", BuyingStagingLine."Brand Code");
        lStyle.VALIDATE("Season Code", BuyingStagingHeader."Season Code");
        lStyle.VALIDATE("Sub-Season Code", BuyingStagingHeader."Sub-Season Code");
        lStyle.VALIDATE("Country of Origin", BuyingStagingLine."Country of Origin"); //DOC M0021 DD 18/10/16 +-
        lStyle.VALIDATE(Exclusive, BuyingStagingLine.Exclusive);                     //DOC M0038 DD 18/10/16 +-

        BuyingStagingLine.CALCFIELDS(Picture);
        lStyle.Picture := BuyingStagingLine.Picture;
        lStyle.MODIFY(TRUE);
      END;

      CreateStyleColour(lStyle);
      CreateStyleColourSizes(lStyle);
      CreateStyleSalesPrices(lStyle);  //DOC NS2016.16.1

      BuyingStagingLine.VALIDATE("Style No.", lStyle."No.");
    END;

    LOCAL PROCEDURE CheckAndUpdateStyle@1000000009(VAR pStyle@1000000002 : Record 9087012);
    VAR
      lItem@1000000001 : Record 27;
      lModify@1000000000 : Boolean;
      eCantChangeSizeGroupCode@1000000003 : TextConst 'ENU=Style "%1" %2 can''t be changed from "%3" to "%4".;ENG=Style "%1" %2 can''t be changed from "%3" to "%4".';
    BEGIN
      //DOC NS2015.1 - Checking and updating style
      //  <> pStyle: Style to check / update

      //DOC NS2016.16.2 >>
      IF (pStyle."Size Group Code" <> BuyingStagingLine."Size Group Code") THEN
        ERROR(eCantChangeSizeGroupCode, pStyle."No.", pStyle.FIELDCAPTION("Size Group Code"), pStyle."Size Group Code",
          BuyingStagingLine."Size Group Code");
      //DOC NS2016.16.2 <<

      //DOC OP9031 DEL-45 -
      //IF ((pStyle."Unit Price" <> BuyingStagingLine."Unit Price (LCY)") OR
      //    (pStyle."Unit Cost" <> BuyingStagingLine."Unit Cost") OR
      //    (pStyle."Size Group Code" <> BuyingStagingLine."Size Group Code") OR
      //    (pStyle."Brand Code" <> BuyingStagingLine."Brand Code") OR
      //    (pStyle."Season Code" <> BuyingStagingHeader."Season Code") OR
      //    (pStyle."Sub-Season Code" <> BuyingStagingHeader."Sub-Season Code")) THEN
      IF ((pStyle."Size Group Code" <> BuyingStagingLine."Size Group Code") OR
          (pStyle."Brand Code" <> BuyingStagingLine."Brand Code"))THEN
      //DOC OP9031 DEL-45 +
      BEGIN
        lItem.RESET();
        lItem.SETCURRENTKEY("Style No.");
        lItem.SETRANGE("Style No.", pStyle."No.");
        IF (lItem.FINDSET()) THEN
        REPEAT
          lItem.CALCFIELDS("Purchase Lines", "Sales Lines", "Item Ledger Entries");
          lItem.TESTFIELD("Purchase Lines", 0);
          lItem.TESTFIELD("Sales Lines", 0);
          lItem.TESTFIELD("Item Ledger Entries", 0);
          lItem.TESTFIELD("Transfer Lines", 0);
        UNTIL (lItem.NEXT() = 0);
      END;

      IF (DecimalFieldToBeUpdated(pStyle."Unit Price", BuyingStagingLine."Unit Price (LCY)", lModify)) THEN
        pStyle.VALIDATE("Unit Price", BuyingStagingLine."Unit Price (LCY)");
      IF (DecimalFieldToBeUpdated(pStyle."Unit Cost", BuyingStagingLine."Unit Cost", lModify)) THEN
        pStyle.VALIDATE("Unit Cost", BuyingStagingLine."Unit Cost");
      IF (CodeFieldToBeUpdated(pStyle."Size Group Code", BuyingStagingLine."Size Group Code", lModify)) THEN
        pStyle.VALIDATE("Size Group Code", BuyingStagingLine."Size Group Code");
      IF (CodeFieldToBeUpdated(pStyle."Brand Code", BuyingStagingLine."Brand Code", lModify)) THEN
        pStyle.VALIDATE("Brand Code", BuyingStagingLine."Brand Code");
      IF (CodeFieldToBeUpdated(pStyle."Season Code", BuyingStagingHeader."Season Code", lModify)) THEN
        pStyle.VALIDATE("Season Code", BuyingStagingHeader."Season Code");
      IF (CodeFieldToBeUpdated(pStyle."Sub-Season Code", BuyingStagingHeader."Sub-Season Code", lModify)) THEN
        pStyle.VALIDATE("Sub-Season Code", BuyingStagingHeader."Sub-Season Code");
      IF (CodeFieldToBeUpdated(pStyle."Division Code", BuyingStagingLine."Division Code", lModify)) THEN
        pStyle.VALIDATE("Division Code", BuyingStagingLine."Division Code");
      IF (CodeFieldToBeUpdated(pStyle."Department Code", BuyingStagingLine."Department Code", lModify)) THEN
        pStyle.VALIDATE("Department Code", BuyingStagingLine."Department Code");
      IF (CodeFieldToBeUpdated(pStyle."Group Code", BuyingStagingLine."Group Code", lModify)) THEN
        pStyle.VALIDATE("Group Code", BuyingStagingLine."Group Code");
      IF (CodeFieldToBeUpdated(pStyle."Category Code", BuyingStagingLine."Category Code", lModify)) THEN
        pStyle.VALIDATE("Category Code", BuyingStagingLine."Category Code");
      IF (CodeFieldToBeUpdated(pStyle."Sub-Category Code", BuyingStagingLine."Sub-Category Code", lModify)) THEN
        pStyle.VALIDATE("Sub-Category Code", BuyingStagingLine."Sub-Category Code");

      OnBeforeStyleModify(pStyle,BuyingStagingLine,lModify); //TMOD

      IF (lModify) THEN
        pStyle.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateStyleColour@1000000025(pStyle@1000000001 : Record 9087012);
    VAR
      lStyleColour@1000000000 : Record 9087013;
    BEGIN
      //DOC NS2015.1 - Creating a style colour
      //  -> pStyle: Style to create a colour for

      IF (lStyleColour.GET(pStyle."No.", BuyingStagingLine."Colour Code")) THEN
        EXIT;

      //DOC OP9031 M0013 _
      IF NOT Colour.GET(BuyingStagingLine."Colour Code") THEN BEGIN

        BuyingStagingLine.TESTFIELD("Colour Name");

        CLEAR(Colour);
        Colour.INIT;
        Colour.VALIDATE(Code,BuyingStagingLine."Colour Code");
        Colour.VALIDATE(Name,BuyingStagingLine."Colour Name");
        Colour.VALIDATE("No.",BuyingStagingLine."Colour Code");
        Colour.VALIDATE("Master Colour Code",BuyingStagingLine."Master Colour Code");
        Colour.INSERT(TRUE);
      END;
      //DOC OP9031 M0013 +

      VerifyVendorColour(BuyingStagingHeader."Vendor No.", BuyingStagingLine."Vendor Colour Code");

      CLEAR(lStyleColour);
      lStyleColour.INIT();
      lStyleColour.VALIDATE("Style No.", pStyle."No.");
      lStyleColour.VALIDATE("Colour Code", BuyingStagingLine."Colour Code");
      lStyleColour.VALIDATE("Vendor No.", BuyingStagingHeader."Vendor No.");
      lStyleColour.VALIDATE("Vendor Colour Code", BuyingStagingLine."Vendor Colour Code");
      lStyleColour.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateStyleColourSizes@1000000024(pStyle@1000000005 : Record 9087012);
    VAR
      lStyleColourSize@1000000004 : Record 9087014;
      lSizeCodes@1000000003 : ARRAY [25] OF Code[20];
      lSizeQuantities@1000000002 : ARRAY [25] OF Decimal;
      lSizeIndex@1000000001 : Integer;
      lSizeEnabled@1000000000 : Boolean;
    BEGIN
      //DOC NS2015.1 - Creating style colour sizes
      //  -> pStyle: Style to create colour sizes for

      BuyingStagingLine.GetSizeCodes(lSizeCodes);
      BuyingStagingLine.GetSizeQuantities(lSizeQuantities);
      FOR lSizeIndex := 1 TO ARRAYLEN(lSizeCodes) DO
      BEGIN
        IF (lSizeCodes[lSizeIndex] <> '') THEN
        BEGIN
          IF ( NOT (lStyleColourSize.GET(pStyle."No.", BuyingStagingLine."Colour Code", BuyingStagingLine."Size Group Code",
               lSizeCodes[lSizeIndex]))) THEN
          BEGIN
            CLEAR(lStyleColourSize);
            lStyleColourSize.INIT();
            lStyleColourSize.VALIDATE("Style No.", pStyle."No.");
            lStyleColourSize.VALIDATE("Colour Code", BuyingStagingLine."Colour Code");
            lStyleColourSize.VALIDATE("Size Group Code", BuyingStagingLine."Size Group Code");
            lStyleColourSize.VALIDATE("Size Code", lSizeCodes[lSizeIndex]);
            lStyleColourSize.INSERT(TRUE);
          END;
          CASE (NsembleSetup."Enable Buying Staging Sizes") OF
            NsembleSetup."Enable Buying Staging Sizes"::All:
              lSizeEnabled := TRUE;
            NsembleSetup."Enable Buying Staging Sizes"::"Only Ordered":
              lSizeEnabled := (lSizeQuantities[lSizeIndex] <> 0);
          END;
          IF ((lStyleColourSize.Enabled <> lSizeEnabled) AND (lStyleColourSize."Item No." = '') AND (lStyleColourSize."Variant Code" = '')) THEN
          BEGIN
            lStyleColourSize.VALIDATE(Enabled, lSizeEnabled);
            lStyleColourSize.MODIFY(TRUE);
          END;
          OnAfterEnableSize(lStyleColourSize,BuyingStagingHeader,lSizeQuantities[lSizeIndex] <> 0); //TMOD
        END;
      END;
    END;

    LOCAL PROCEDURE CreateStyleSalesPrices@1000000040(pStyle@1000000001 : Record 9087012);
    VAR
      lBuyingStagingSalesPrice@1000000002 : Record 50002;
      lStyleSalesPrice@1000000000 : Record 9087045;
    BEGIN
      //DOC NS2016.16.1 PCM Created
      //  -> pStyle: Style to create Style Sales Prices for

      pStyle.TESTFIELD("Vendor Style No.");

      lBuyingStagingSalesPrice.RESET;
      lBuyingStagingSalesPrice.SETRANGE("Buying Staging No.",BuyingStagingHeader."No.");
      lBuyingStagingSalesPrice.SETRANGE("Vendor Style No.",pStyle."Vendor Style No.");

      IF lBuyingStagingSalesPrice.FINDSET THEN REPEAT

        lStyleSalesPrice.RESET;
        lStyleSalesPrice.SETRANGE("Sales Type",lBuyingStagingSalesPrice."Sales Type");
        lStyleSalesPrice.SETRANGE("Style No.", pStyle."No.");
        lStyleSalesPrice.SETRANGE("Colour Code", lBuyingStagingSalesPrice."Colour Code");
        lStyleSalesPrice.SETRANGE("Sales Code",lBuyingStagingSalesPrice."Sales Code");
        lStyleSalesPrice.SETRANGE("Currency Code",lBuyingStagingSalesPrice."Currency Code");
        lStyleSalesPrice.SETRANGE("Starting Date",lBuyingStagingSalesPrice."Starting Date");
        lStyleSalesPrice.SETRANGE("Unit Price",lBuyingStagingSalesPrice."Unit Price");
        IF NOT lStyleSalesPrice.FINDFIRST THEN BEGIN
          CLEAR(lStyleSalesPrice);
          lStyleSalesPrice.INIT;
          lStyleSalesPrice.VALIDATE("Sales Type",lBuyingStagingSalesPrice."Sales Type");
          lStyleSalesPrice.VALIDATE("Style No.", pStyle."No.");
          lStyleSalesPrice.VALIDATE("Colour Code", lBuyingStagingSalesPrice."Colour Code");
          lStyleSalesPrice.VALIDATE("Sales Code",lBuyingStagingSalesPrice."Sales Code");
          lStyleSalesPrice.VALIDATE("Currency Code",lBuyingStagingSalesPrice."Currency Code");
          lStyleSalesPrice.VALIDATE("Starting Date",lBuyingStagingSalesPrice."Starting Date");
          lStyleSalesPrice.VALIDATE("Unit Price",lBuyingStagingSalesPrice."Unit Price");
          lStyleSalesPrice.INSERT(TRUE);
        END;
      UNTIL (lBuyingStagingSalesPrice.NEXT = 0);
    END;

    PROCEDURE "--- Items ---"@1000000037();
    BEGIN
    END;

    PROCEDURE SetCreateItem@1000000035(pBuyingStagingLine@1000000000 : Record 9087017);
    BEGIN
      //DOC NS2015.1 - Setting "Create Item" function
      //  -> pBuyingStagingLine: Buying staging line to create item for

      Activity := Activity::CreateItem;
      BuyingStagingLine := pBuyingStagingLine;
    END;

    PROCEDURE CreateItem@1000000007();
    VAR
      lItem@1000000003 : Record 27;
      lStyle@1000000000 : Record 9087012;
      lStyleColour@1000000002 : Record 9087013;
      lStyleManagement@1000000001 : Codeunit 9087006;
    BEGIN
      //DOC NS2015.1 - Creating item

      BuyingStagingHeader.GET(BuyingStagingLine."Buying Staging No.");
      CheckBuyingStagingStatus();

      IF (BuyingStagingLine."Item No." <> '') THEN
        EXIT;

      IF (NsembleSetup."Enable Buying Staging Styles") THEN
      BEGIN
        BuyingStagingLine.TESTFIELD("Style No.");
        lStyle.GET(BuyingStagingLine."Style No.");
        lStyleManagement.UpdateStyleItems(lStyle, FALSE);
        IF (lStyleColour.GET(BuyingStagingLine."Style No.", BuyingStagingLine."Colour Code")) THEN
        BEGIN
          IF (lItem.GET(lStyleColour."Item No.")) THEN
            CheckAndUpdateItem(lItem);
          BuyingStagingLine.VALIDATE("Item No.", lStyleColour."Item No.");
        END;
        lStyleColour.TESTFIELD("Item No.");
      END
      ELSE
        CreateItemWithoutStyles();
    END;

    LOCAL PROCEDURE CreateItemWithoutStyles@1000000023();
    VAR
      lItem@1000000000 : Record 27;
      lDescriptionTemplate@1000000002 : Text[50];
      lItemDescription@1000000001 : ARRAY [2] OF Text[50];
    BEGIN
      //DOC NS2015.1 - Creating item without styles

      IF ( NOT (Colour.GET(BuyingStagingLine."Colour Code"))) THEN
        CLEAR(Colour);
      IF ( NOT (SizeGroup.GET(BuyingStagingLine."Size Group Code"))) THEN
        CLEAR(SizeGroup);

      lItem.RESET();
      CASE (NsembleSetup."Buying Sheet Item Ident.") OF
        NsembleSetup."Buying Sheet Item Ident."::"Vendor Item No.":
          BEGIN
            lItem.SETCURRENTKEY("Vendor No.", "Vendor Item No.");
            lItem.SETRANGE("Vendor No.", BuyingStagingHeader."Vendor No.");
            lItem.SETRANGE("Vendor Item No.", BuyingStagingLine."Vendor Item No.");
          END;
        NsembleSetup."Buying Sheet Item Ident."::"Vendor Item No. + Colour Code":
          BEGIN
            lItem.SETCURRENTKEY("Vendor No.", "Vendor Item No.", "Colour Code");
            lItem.SETRANGE("Vendor No.", BuyingStagingHeader."Vendor No.");
            lItem.SETRANGE("Vendor Item No.", BuyingStagingLine."Vendor Item No.");
            lItem.SETRANGE("Colour Code", BuyingStagingLine."Colour Code");
          END;
        NsembleSetup."Buying Sheet Item Ident."::"Vendor Item No.":
          BEGIN
            lItem.SETCURRENTKEY("Vendor No.", "Vendor Item No.", "Vendor Colour Code");
            lItem.SETRANGE("Vendor No.", BuyingStagingHeader."Vendor No.");
            lItem.SETRANGE("Vendor Item No.", BuyingStagingLine."Vendor Item No.");
            lItem.SETRANGE("Vendor Colour Code", BuyingStagingLine."Vendor Colour Code");
          END;
        //DOC M0040 -
        NsembleSetup."Buying Sheet Item Ident."::"Vendor Style No. + Colour Code":
            ERROR(Err001,NsembleSetup.FIELDCAPTION("Buying Sheet Item Ident."),NsembleSetup."Buying Sheet Item Ident.",
                  NsembleSetup.FIELDCAPTION("Enable Buying Staging Styles"),NsembleSetup."Enable Buying Staging Styles");
        //DOC M0040 +

      END;
      IF (lItem.FINDFIRST()) THEN
        CheckAndUpdateItem(lItem)
      ELSE
      BEGIN
        NsembleSetup.TESTFIELD("Style Unit of Measure");
        NsembleSetup.TESTFIELD("Style Gen. Prod. Posting Group");
        NsembleSetup.TESTFIELD("Style VAT Prod. Posting Group");
        NsembleSetup.TESTFIELD("Style Inventory Posting Group");

        VerifyVendorColour(BuyingStagingHeader."Vendor No.", BuyingStagingLine."Vendor Colour Code");

        lDescriptionTemplate := StyleManagement.CreateDescriptionTemplate(NsembleSetup."Style Item Description", '%5 %2 %3');
        StyleManagement.DescriptionToDescriptionFields(STRSUBSTNO(lDescriptionTemplate, '', BuyingStagingLine.Description, '',
          BuyingStagingLine."Colour Code", Colour.Name, BuyingStagingLine."Size Group Code", SizeGroup.Name), lItemDescription);

        CLEAR(lItem);
        lItem.INIT();
        lItem.INSERT(TRUE);
        lItem.VALIDATE(Description, lItemDescription[1]);
        lItem.VALIDATE("Description 2", lItemDescription[2]);
        lItem.VALIDATE("Base Unit of Measure", NsembleSetup."Style Unit of Measure");
        lItem.VALIDATE("Gen. Prod. Posting Group", NsembleSetup."Style Gen. Prod. Posting Group");
        lItem.VALIDATE("VAT Prod. Posting Group", NsembleSetup."Style VAT Prod. Posting Group");
        lItem.VALIDATE("Inventory Posting Group", NsembleSetup."Style Inventory Posting Group");
        lItem.VALIDATE("Unit Price", BuyingStagingLine."Unit Price (LCY)");
        lItem.VALIDATE("Unit Cost", BuyingStagingLine."Unit Cost");
        lItem.VALIDATE("Vendor No.", BuyingStagingLine."Vendor No.");
        lItem.VALIDATE("Vendor Item No.", BuyingStagingLine."Vendor Item No.");
        lItem.VALIDATE("Division Code", BuyingStagingLine."Division Code");
        lItem.VALIDATE("Department Code", BuyingStagingLine."Department Code");
        lItem.VALIDATE("Group Code", BuyingStagingLine."Group Code");
        lItem.VALIDATE("Category Code", BuyingStagingLine."Category Code");
        lItem.VALIDATE("Sub-Category Code", BuyingStagingLine."Sub-Category Code");
        lItem."Size Group Code" := BuyingStagingLine."Size Group Code";
        lItem.VALIDATE("Brand Code", BuyingStagingLine."Brand Code");
        lItem.VALIDATE("Season Code", BuyingStagingHeader."Season Code");
        lItem.VALIDATE("Sub-Season Code", BuyingStagingHeader."Sub-Season Code");
        lItem.VALIDATE("Colour Code", BuyingStagingLine."Colour Code");
        lItem.VALIDATE("Vendor Colour Code", BuyingStagingLine."Vendor Colour Code");
        //DOC M0038 DD 19/10/16 ++
        lItem.VALIDATE(Exclusive, BuyingStagingLine.Exclusive);
        //DOC M0038 DD 19/10/16 --
        BuyingStagingLine.CALCFIELDS(Picture);
        lItem.Picture := BuyingStagingLine.Picture;
        lItem.MODIFY(TRUE);
      END;

      BuyingStagingLine.VALIDATE("Item No.", lItem."No.");

      CreateItemVariantsWithoutStyles(lItem);
    END;

    LOCAL PROCEDURE CreateItemVariantsWithoutStyles@1000000036(pItem@1000000001 : Record 27);
    VAR
      lItemVariant@1000000006 : Record 5401;
      lDescriptionTemplate@1000000007 : Text[50];
      lItemVariantDescription@1000000000 : ARRAY [2] OF Text[50];
      lSizeCodes@1000000005 : ARRAY [25] OF Code[20];
      lSizeQuantities@1000000004 : ARRAY [25] OF Decimal;
      lSizeIndex@1000000003 : Integer;
      lSizeEnabled@1000000002 : Boolean;
    BEGIN
      //DOC NS2015.1 - Creating item variants without styles
      //  -> pItem: The item to create variants for

      BuyingStagingLine.GetSizeCodes(lSizeCodes);
      BuyingStagingLine.GetSizeQuantities(lSizeQuantities);
      FOR lSizeIndex := 1 TO ARRAYLEN(lSizeCodes) DO
      BEGIN
        IF (lSizeCodes[lSizeIndex] <> '') THEN
        BEGIN
          CASE (NsembleSetup."Enable Buying Staging Sizes") OF
            NsembleSetup."Enable Buying Staging Sizes"::All:
              lSizeEnabled := TRUE;
            NsembleSetup."Enable Buying Staging Sizes"::"Only Ordered":
              lSizeEnabled := (lSizeQuantities[lSizeIndex] <> 0);
          END;
          IF (lSizeEnabled) THEN
          BEGIN
            IF ( NOT (lItemVariant.GET(pItem."No.", lSizeCodes[lSizeIndex]))) THEN
            BEGIN
              IF ( NOT (Size.GET(BuyingStagingLine."Size Group Code", lSizeCodes[lSizeIndex]))) THEN
                CLEAR(Size);

              lDescriptionTemplate := StyleManagement.CreateDescriptionTemplate(NsembleSetup."Style Item Variant Description", '%5 %2 %3 %8');
              StyleManagement.DescriptionToDescriptionFields(STRSUBSTNO(lDescriptionTemplate, '', pItem.Description, pItem."Description 2",
                BuyingStagingLine."Colour Code", Colour.Name, BuyingStagingLine."Size Group Code", SizeGroup.Name,
                lSizeCodes[lSizeIndex], Size.Name), lItemVariantDescription);

              CLEAR(lItemVariant);
              lItemVariant.INIT();
              lItemVariant.VALIDATE("Item No.", pItem."No.");
              lItemVariant.VALIDATE(Code, lSizeCodes[lSizeIndex]);
              lItemVariant.VALIDATE("Colour Code", pItem."Colour Code");
              lItemVariant.VALIDATE("Size Group Code", pItem."Size Group Code");
              lItemVariant.VALIDATE("Size Code", lSizeCodes[lSizeIndex]);
              lItemVariant.VALIDATE(Description, lItemVariantDescription[1]);
              lItemVariant.VALIDATE("Description 2", lItemVariantDescription[2]);
              lItemVariant.VALIDATE("Brand Code", BuyingStagingLine."Brand Code");
              lItemVariant.VALIDATE("Season Code", BuyingStagingHeader."Season Code");
              lItemVariant.VALIDATE("Sub-Season Code", BuyingStagingHeader."Sub-Season Code");
              lItemVariant.VALIDATE("Division Code", BuyingStagingLine."Division Code");
              lItemVariant.VALIDATE("Department Code", BuyingStagingLine."Department Code");
              lItemVariant.VALIDATE("Group Code", BuyingStagingLine."Group Code");
              lItemVariant.VALIDATE("Category Code", BuyingStagingLine."Category Code");
              lItemVariant.VALIDATE("Sub-Category Code", BuyingStagingLine."Sub-Category Code");
              lItemVariant.VALIDATE(Sequence, Size.Sequence);
              lItemVariant.INSERT(TRUE);
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckAndUpdateItem@1000000015(VAR pItem@1000000000 : Record 27);
    VAR
      lModify@1000000002 : Boolean;
    BEGIN
      //DOC NS2015.1 - Checking and / or updating an item
      //  <> pItem: Item to check / update

      IF (nSembleToolkit.ItemEntriesExist(pItem, FALSE)) THEN
        EXIT;

      IF (DecimalFieldToBeUpdated(pItem."Unit Price", BuyingStagingLine."Unit Price (LCY)", lModify)) THEN
        pItem.VALIDATE("Unit Price", BuyingStagingLine."Unit Price (LCY)");
      IF (DecimalFieldToBeUpdated(pItem."Unit Cost", BuyingStagingLine."Unit Cost", lModify)) THEN
        pItem.VALIDATE("Unit Cost", BuyingStagingLine."Unit Cost");
      IF (CodeFieldToBeUpdated(pItem."Vendor No.", BuyingStagingLine."Vendor No.", lModify)) THEN
        pItem.VALIDATE("Vendor No.", BuyingStagingLine."Vendor No.");
      IF (TextFieldToBeUpdated(pItem."Vendor Item No.", BuyingStagingLine."Vendor Item No.", lModify)) THEN
        pItem.VALIDATE("Vendor Item No.", BuyingStagingLine."Vendor Item No.");
      IF (CodeFieldToBeUpdated(pItem."Size Group Code", BuyingStagingLine."Size Group Code", lModify)) THEN
        pItem.VALIDATE("Size Group Code", BuyingStagingLine."Size Group Code");
      IF (CodeFieldToBeUpdated(pItem."Brand Code", BuyingStagingLine."Brand Code", lModify)) THEN
        pItem.VALIDATE("Brand Code", BuyingStagingLine."Brand Code");
      IF (CodeFieldToBeUpdated(pItem."Season Code", BuyingStagingHeader."Season Code", lModify)) THEN
        pItem.VALIDATE("Season Code", BuyingStagingHeader."Season Code");
      IF (CodeFieldToBeUpdated(pItem."Sub-Season Code", BuyingStagingHeader."Sub-Season Code", lModify)) THEN
        pItem.VALIDATE("Sub-Season Code", BuyingStagingHeader."Sub-Season Code");
      IF (CodeFieldToBeUpdated(pItem."Division Code", BuyingStagingLine."Division Code", lModify)) THEN
        pItem.VALIDATE("Division Code", BuyingStagingLine."Division Code");
      IF (CodeFieldToBeUpdated(pItem."Department Code", BuyingStagingLine."Department Code", lModify)) THEN
        pItem.VALIDATE("Department Code", BuyingStagingLine."Department Code");
      IF (CodeFieldToBeUpdated(pItem."Group Code", BuyingStagingLine."Group Code", lModify)) THEN
        pItem.VALIDATE("Group Code", BuyingStagingLine."Group Code");
      IF (CodeFieldToBeUpdated(pItem."Category Code", BuyingStagingLine."Category Code", lModify)) THEN
        pItem.VALIDATE("Category Code", BuyingStagingLine."Category Code");
      IF (CodeFieldToBeUpdated(pItem."Sub-Category Code", BuyingStagingLine."Sub-Category Code", lModify)) THEN
        pItem.VALIDATE("Sub-Category Code", BuyingStagingLine."Sub-Category Code");

      //DOC M0038 DD 19/10/16 ++
      IF (BooleanFieldToBeUpdated(pItem.Exclusive, BuyingStagingLine.Exclusive, lModify)) THEN
        pItem.VALIDATE(Exclusive, BuyingStagingLine.Exclusive);
      //DOC M0038 DD 19/10/16 --

      IF (lModify) THEN
        pItem.MODIFY(TRUE);
    END;

    PROCEDURE "--- Buying Sheet ---"@1000000042();
    BEGIN
    END;

    PROCEDURE SetCreateBuyingSheetHeader@1000000043(pBuyingStagingHeader@1000000000 : Record 9087016);
    BEGIN
      //DOC NS2015.1 - Setting "LOCAL Create Buying Sheet Header" function
      //  -> pBuyingStagingHeader: Buying staging header to create sheet for

      Activity := Activity::CreateBuyingSheetHeader;
      BuyingStagingHeader := pBuyingStagingHeader;
    END;

    LOCAL PROCEDURE CreateBuyingSheetHeader@1000000014() : Boolean;
    VAR
      eDescription@1000000004 : TextConst 'ENU=Buying Sheet "%1";ENG=Buying Sheet "%1"';
      lDocumentDate@1000000000 : Date;
      lLeadTimeCalculation@1000000001 : DateFormula;
      lFileAttachmentManagement@1000000002 : Codeunit 9062267;
    BEGIN
      //DOC NS2015.1 - Creating buying sheet header

      CheckBuyingStagingStatus();

      IF (BuyingStagingHeader."Buying Sheet No." <> '') THEN
        IF ( NOT (BuyingSheetHeader.GET(BuyingStagingHeader."Buying Sheet No."))) THEN
          BuyingStagingHeader."Buying Sheet No." := '';

      IF (BuyingStagingHeader."Buying Sheet No." = '') THEN
      BEGIN
        NsembleSetup.TESTFIELD("Inbound Location Code");

        lDocumentDate := TnpToolkit.DefaultDate(BuyingStagingHeader."Document Date", WORKDATE());
        IF (BuyingStagingHeader."Delivery Window" > 0) THEN
          EVALUATE(lLeadTimeCalculation, STRSUBSTNO('<%1D>', BuyingStagingHeader."Delivery Window"));

        CLEAR(BuyingSheetHeader);
        BuyingSheetHeader.INIT();
        BuyingSheetHeader.INSERT(TRUE);
        BuyingSheetHeader.VALIDATE(Description, STRSUBSTNO(eDescription, BuyingStagingHeader."Reference No."));
        BuyingSheetHeader.VALIDATE("Document Date", lDocumentDate);
        BuyingSheetHeader.VALIDATE("Order Date", BuyingStagingHeader."Order Date");
        BuyingSheetHeader.VALIDATE("Season Code", BuyingStagingHeader."Season Code");
        BuyingSheetHeader.VALIDATE("Sub-Season Code", BuyingStagingHeader."Sub-Season Code");
        BuyingSheetHeader.VALIDATE("Currency Code", BuyingStagingHeader."Currency Code");
        BuyingSheetHeader.VALIDATE("Currency Factor", BuyingStagingHeader."Currency Factor");
        BuyingSheetHeader.VALIDATE("Vendor No.", BuyingStagingHeader."Vendor No.");
        BuyingSheetHeader.VALIDATE("Mark-up", BuyingStagingHeader."Mark-up");
        BuyingSheetHeader.VALIDATE("Freight Amount (LCY)", BuyingStagingHeader."Freight Amount (LCY)");
        BuyingSheetHeader.VALIDATE("Duty Amount (LCY)", BuyingStagingHeader."Duty Amount (LCY)");
        BuyingSheetHeader.VALIDATE("Shipment Method Code", BuyingStagingHeader."Shipment Method Code");
        BuyingSheetHeader.VALIDATE("Discount %", BuyingStagingHeader."Discount %");
        BuyingSheetHeader.VALIDATE("Lead Time Calculation", lLeadTimeCalculation);
        BuyingSheetHeader.VALIDATE("Location Code", NsembleSetup."Inbound Location Code");
        BuyingSheetHeader.VALIDATE("Reference No.", BuyingStagingHeader."Reference No.");
        BuyingSheetHeader.VALIDATE("Shipment Window",BuyingStagingHeader."Shipment Window");              //DOC OP9031 M0028
        BuyingSheetHeader.VALIDATE("Shipping Region Code",BuyingStagingHeader."Shipping Region Code");    //DOC OP9031 M0029
        BuyingSheetHeader.VALIDATE("Payment Terms Code",BuyingStagingHeader."Payment Terms Code");        //DOC OP9031 M0026
        BuyingSheetHeader.VALIDATE("Deposit %",BuyingStagingHeader."Deposit %");                          //DOC OP9031 M0027
        BuyingSheetHeader.VALIDATE("Shipment Date",BuyingStagingHeader."Shipment Date");      //DOC OP9031 M0032
        BuyingSheetHeader.VALIDATE("Cancellation Date",BuyingStagingHeader."Cancellation Date");//DOC OP9031 M0033
        BuyingSheetHeader.MODIFY(TRUE);

        lFileAttachmentManagement.CopyToRecord(DATABASE::"Buying Sheet Header", BuyingSheetHeader.GETPOSITION(FALSE),
          DATABASE::"Buying Staging Header", BuyingStagingHeader.GETPOSITION(FALSE));

        BuyingStagingHeader.VALIDATE("Buying Sheet No.", BuyingSheetHeader."No.");
      END;
    END;

    PROCEDURE SetCreateBuyingSheetSummaryLine@1000000001(pBuyingStagingLine@1000000000 : Record 9087017);
    BEGIN
      //DOC NS2015.1 - Setting "Create Buying Sheet Summary Line" function
      //  -> pBuyingStagingLine: Buyging staging line to create summary line for

      Activity := Activity::CreateBuyingSheetSummaryLine;
      BuyingStagingLine := pBuyingStagingLine;
    END;

    PROCEDURE CreateBuyingSheetSummaryLine@1000000000();
    VAR
      lBuyingSheetSummaryLineMgt@1000000005 : Codeunit 9087009;
      lBuyingSheetSummaryLineNo@1000000001 : Integer;
      lBuyingSheetLineNo@1000000000 : Integer;
      lIndex@1000000002 : Integer;
      lSizeCodes@1000000003 : ARRAY [25] OF Code[20];
      lSizeQuantities@1000000004 : ARRAY [25] OF Decimal;
    BEGIN
      //DOC NS2015.1 - Creating buying sheet summary line (summary line + detailed lines)

      BuyingStagingHeader.GET(BuyingStagingLine."Buying Staging No.");
      CheckBuyingStagingStatus();

      BuyingStagingLine.TESTFIELD("Buying Staging No.");
      IF (BuyingStagingLine."Buying Sheet Summary Line No." <> 0) THEN
        EXIT;

      BuyingStagingLine.TESTFIELD("Item No.");
      Item.GET(BuyingStagingLine."Item No.");

      BuyingSheetHeader.GET(BuyingStagingHeader."Buying Sheet No.");

      BuyingSheetSummaryLine.RESET();
      BuyingSheetSummaryLine.SETRANGE("Buying Sheet No.", BuyingSheetHeader."No.");
      IF (BuyingSheetSummaryLine.FINDLAST()) THEN
        lBuyingSheetSummaryLineNo := BuyingSheetSummaryLine."Line No." + 10000
      ELSE
        lBuyingSheetSummaryLineNo := 10000;

      BuyingStagingLine.CALCFIELDS(Picture);

      VerifyVendorColour(BuyingSheetHeader."Vendor No.", BuyingStagingLine."Vendor Colour Code");

      CLEAR(BuyingSheetSummaryLine);
      BuyingSheetSummaryLine.INIT();
      BuyingSheetSummaryLine.VALIDATE("Buying Sheet No.", BuyingSheetHeader."No.");
      BuyingSheetSummaryLine.VALIDATE("Line No.", lBuyingSheetSummaryLineNo);
      BuyingSheetSummaryLine.INSERT(TRUE);
      BuyingSheetSummaryLine.VALIDATE("Vendor Colour Code", BuyingStagingLine."Vendor Colour Code");
      BuyingSheetSummaryLine.VALIDATE("Brand Code", Item."Brand Code");
      BuyingSheetSummaryLine.VALIDATE("Colour Code", Item."Colour Code");
      BuyingSheetSummaryLine.VALIDATE("Size Group Code", Item."Size Group Code");
      BuyingSheetSummaryLine.VALIDATE("Style No.", Item."Style No.");
      BuyingSheetSummaryLine.VALIDATE("Item No.", Item."No.");
      BuyingSheetSummaryLine.VALIDATE("Division Code", Item."Division Code");
      BuyingSheetSummaryLine.VALIDATE("Department Code", Item."Department Code");
      BuyingSheetSummaryLine.VALIDATE("Group Code", Item."Group Code");
      BuyingSheetSummaryLine.VALIDATE("Category Code", Item."Category Code");
      BuyingSheetSummaryLine.VALIDATE("Sub-Category Code", Item."Sub-Category Code");
      BuyingSheetSummaryLine.VALIDATE("Direct Unit Cost", BuyingStagingLine."Unit Cost");
      BuyingSheetSummaryLine.VALIDATE("Unit Price (LCY)", BuyingStagingLine."Unit Price (LCY)");
      BuyingSheetSummaryLine.VALIDATE(Description, BuyingStagingLine.Description);
      BuyingSheetSummaryLine.Picture := BuyingStagingLine.Picture;
      //DOC OP9031 CC -
      BuyingSheetSummaryLine.VALIDATE(Comments,BuyingStagingLine.Comments);
      BuyingSheetSummaryLine.VALIDATE("Shipment Date",BuyingStagingLine."Shipment Date");
      BuyingSheetSummaryLine.VALIDATE("Cancellation Date",BuyingStagingLine."Cancellation Date");
      //DOC OP9031 CC +
      BuyingSheetSummaryLine.MODIFY(TRUE);

      BuyingStagingLine.GetSizeCodes(lSizeCodes);
      BuyingStagingLine.GetSizeQuantities(lSizeQuantities);

      //DOC M0040 DD 19/10/16 ++ Changes as per spec..
      //FOR lIndex := 1 TO 10 DO
      FOR lIndex := 1 TO ARRAYLEN(lSizeCodes) DO
        IF (lSizeCodes[lIndex] <> '') THEN
      //DOC M0040 DD 19/10/16 --
        UpdateBuyingSheetLineSize(lSizeCodes[lIndex], lSizeQuantities[lIndex], lBuyingSheetLineNo);
    END;

    PROCEDURE UpdateBuyingSheetLineSize@1000000003(pSizeCode@1000000001 : Code[20];pQuantity@1000000002 : Decimal;VAR pBuyingSheetLineNo@1000000000 : Integer);
    VAR
      lBuyingSheetLineFound@1000000003 : Boolean;
    BEGIN
      //DOC NS2016.16 - Updating buying sheet line size
      //  -> pSizeCode: Size code
      //  -> pQuantity: Quantity
      //  <> pBuyingSheetLineNo: Source / target buying sheet line no.

      IF (pSizeCode = '') THEN
        EXIT;

      BuyingSheetLine.RESET();
      BuyingSheetLine.SETRANGE("Buying Sheet No.", BuyingSheetHeader."No.");
      BuyingSheetLine.SETRANGE("Buying Sheet Summary Line No.", BuyingSheetSummaryLine."Line No.");
      BuyingSheetLine.SETRANGE("Size Code", pSizeCode);
      lBuyingSheetLineFound := BuyingSheetLine.FINDFIRST();

      IF (( NOT (lBuyingSheetLineFound)) AND (pQuantity > 0)) THEN
      BEGIN
        IF (pBuyingSheetLineNo = 0) THEN
        BEGIN
          BuyingSheetLine.RESET();
          BuyingSheetLine.SETRANGE("Buying Sheet No.", BuyingSheetHeader."No.");
          IF (BuyingSheetLine.FINDLAST()) THEN
            pBuyingSheetLineNo := BuyingSheetLine."Line No." + 10000
          ELSE
            pBuyingSheetLineNo := 10000;
        END
        ELSE
          pBuyingSheetLineNo += 10000;

        CLEAR(BuyingSheetLine);
        BuyingSheetLine.RESET();
        BuyingSheetLine.SetSystemActivity(TRUE);
        BuyingSheetLine.VALIDATE("Buying Sheet No.", BuyingSheetHeader."No.");
        BuyingSheetLine.VALIDATE("Line No.", pBuyingSheetLineNo);
        BuyingSheetLine.INSERT(TRUE);
        BuyingSheetLine.VALIDATE("Buying Sheet Summary Line No.", BuyingSheetSummaryLine."Line No.");
        BuyingSheetLine.VALIDATE("Size Code", pSizeCode);
        BuyingSheetLine.VALIDATE(Quantity, pQuantity);
        BuyingSheetLine.SetSystemActivity(FALSE);
        BuyingSheetLine.MODIFY(TRUE);
      END
      ELSE IF ((lBuyingSheetLineFound) AND (pQuantity > 0)) THEN
      BEGIN
        IF (BuyingSheetLine.Quantity <> pQuantity) THEN
        BEGIN
          BuyingSheetLine.SetSystemActivity(TRUE);
          BuyingSheetLine.VALIDATE(Quantity, pQuantity);
          BuyingSheetLine.SetSystemActivity(FALSE);
          BuyingSheetLine.MODIFY(TRUE);
        END;
      END
      ELSE IF ((lBuyingSheetLineFound) AND (pQuantity = 0)) THEN
        BuyingSheetLine.DELETE(TRUE);
    END;

    PROCEDURE SetReleaseBuyingSheet@1000000033(pBuyingSheetHeader@1000000000 : Record 9087020);
    BEGIN
      //DOC NS2016.16 - Setting "Release Buying Sheet" function
      //  -> pBuyingSheetHeader: Buying sheet header

      Activity := Activity::ReleaseBuyingSheet;
      BuyingSheetHeader := pBuyingSheetHeader;
    END;

    LOCAL PROCEDURE ReleaseBuyingSheet@1000000027();
    VAR
      lBuyingSheetStatusManagement@1000000000 : Codeunit 9087007;
    BEGIN
      //DOC NS2016.16 - Releasing buying sheet

      lBuyingSheetStatusManagement.Release(BuyingSheetHeader);
    END;

    PROCEDURE "--- Archiving ---"@1000000002();
    BEGIN
    END;

    PROCEDURE ArchiveBuyingStaging@1000000005(VAR pBuyingStagingHeader@1000000000 : Record 9087016;pMoveToArchive@1000000003 : Boolean;pInteraction@1000000001 : Boolean) : Boolean;
    VAR
      eConfirmation@1000000002 : TextConst 'ENU=Do you want to archive buying staging "%1"?;ENG=Do you want to archive buying staging "%1"?';
      eFinalMessage@1000000004 : TextConst 'ENU=Buying staging "%1" has been archived as version %2.;ENG=Buying staging "%1" has been archived as version %2.';
      lBuyingStagingArchHeader@1000000005 : Record 9087018;
      lBuyingStagingArchLine@1000000006 : Record 9087019;
    BEGIN
      //DOC NS2015.1 - Archiving buying staging
      //  <> pBuyingStagingHeader: The staging header
      //  -> pMoveToArchive: Move to archive flag
      //  -> pInteraction: Interaction flag
      //  <- Result

      BuyingStagingHeader := pBuyingStagingHeader;

      IF (pMoveToArchive) THEN
        BuyingStagingHeader.TESTFIELD(Status, BuyingStagingHeader.Status::Processed);

      pInteraction := ((pInteraction) AND (GUIALLOWED));
      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE, BuyingStagingHeader."No."))) THEN
          EXIT(FALSE);

      lBuyingStagingArchHeader.TRANSFERFIELDS(BuyingStagingHeader);
      lBuyingStagingArchHeader.INSERT(TRUE);

      BuyingStagingLine.RESET();
      BuyingStagingLine.SETRANGE("Buying Staging No.", BuyingStagingHeader."No.");
      IF (BuyingStagingLine.FINDSET()) THEN
      REPEAT
        BuyingStagingLine.CALCFIELDS(Picture);
        CLEAR(lBuyingStagingArchLine);
        lBuyingStagingArchLine.TRANSFERFIELDS(BuyingStagingLine);
        lBuyingStagingArchLine.VALIDATE("Buying Stag. Arch. Version No.", lBuyingStagingArchHeader."Version No.");
        lBuyingStagingArchLine.INSERT(TRUE);
      UNTIL (BuyingStagingLine.NEXT() = 0);

      IF (pMoveToArchive) THEN
        BuyingStagingHeader.DELETE(TRUE);

      IF (pInteraction) THEN
        MESSAGE(eFinalMessage, lBuyingStagingArchHeader."No.", lBuyingStagingArchHeader."Version No.");

      pBuyingStagingHeader := BuyingStagingHeader;

      EXIT(TRUE);
    END;

    PROCEDURE "--- Tools ---"@1000000018();
    BEGIN
    END;

    PROCEDURE SmartIncStr@1000000019(VAR pString@1000000000 : Code[1024];pMaxSize@1000000001 : Integer) : Boolean;
    VAR
      lIndex@1000000002 : Integer;
      lIndexFound@1000000005 : Integer;
      lSearching@1000000003 : Boolean;
      lCharacter@1000000004 : Text[1];
      lResult@1000000006 : Boolean;
      lString@1000000007 : Code[1024];
      lStringBuffer@1000000008 : Code[1024];
    BEGIN
      //DOC NS2015.1 - Function smartly incresing string withing maximum length
      //  <> pString: Source / destination string
      //  -> pMaxSize: Maximum size
      //  <- Result of increase

      IF (pMaxSize = 0) THEN
        EXIT(FALSE);

      lString := pString;

      IF (lString <> '') THEN
      BEGIN
        lStringBuffer := INCSTR(lString);
        IF (lStringBuffer = '') THEN
          lString := lString + '1'
        ELSE
          lString := lStringBuffer;
        IF (STRLEN(lString) > pMaxSize) THEN
        BEGIN
          lIndex := STRLEN(lString);
          lIndexFound := 0;
          lSearching := TRUE;
          WHILE (lSearching) DO
          BEGIN
            lCharacter := COPYSTR(lString, lIndex, 1);
            IF ((lCharacter >= '0') AND (lCharacter <= '9')) THEN
            BEGIN
              lIndexFound := lIndex;
              lIndex -= 1;
              IF (lIndex < 1) THEN
                lSearching := FALSE;
            END
            ELSE
              lSearching := FALSE;
          END;
          IF (lIndexFound > 1) THEN
          BEGIN
            IF (lIndexFound > 1) THEN
            BEGIN
              IF (lIndexFound > 2) THEN
                lStringBuffer := COPYSTR(lString, 1, lIndexFound - 2);
              lStringBuffer := lStringBuffer + COPYSTR(lString, lIndexFound, STRLEN(lString) - lIndexFound + 1);
              lString := lStringBuffer;
              lResult := TRUE;
            END
            ELSE
              lResult := FALSE;
          END
          ELSE
            lResult := FALSE;
        END
        ELSE
          lResult := TRUE;
      END
      ELSE
      BEGIN
        lString := PADSTR('', pMaxSize - 1, '0') + '1';
        lResult := TRUE;
      END;

      IF (lResult) THEN
        pString := lString;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE TextFieldToBeUpdated@1000000028(VAR pFieldValue@1000000000 : Text[250];pValue@1000000001 : Text[250];VAR pRecordUpdated@1000000002 : Boolean) : Boolean;
    VAR
      lFieldUpdated@1000000003 : Boolean;
    BEGIN
      //NS2015.1 - Returns true if text field has to be updated
      //  <> pFieldValue: Source / target field value
      //  -> pValue: Value (new value)
      //  <> pRecordUpdated: Target record updated flag
      //  <- Field updated / not

      IF (pFieldValue <> pValue) THEN
      BEGIN
        pFieldValue := pValue;
        pRecordUpdated := TRUE;
        lFieldUpdated := TRUE;
      END;

      EXIT(lFieldUpdated);
    END;

    LOCAL PROCEDURE CodeFieldToBeUpdated@1000000034(VAR pFieldValue@1000000000 : Code[250];pValue@1000000001 : Code[250];VAR pRecordUpdated@1000000002 : Boolean) : Boolean;
    VAR
      lFieldUpdated@1000000003 : Boolean;
    BEGIN
      //NS2015.1 - Returns true if code field has to be updated
      //  <> pFieldValue: Source / target field value
      //  -> pValue: Value (new value)
      //  <> pRecordUpdated: Target record updated flag
      //  <- Field updated / not

      IF (pFieldValue <> pValue) THEN
      BEGIN
        pFieldValue := pValue;
        pRecordUpdated := TRUE;
        lFieldUpdated := TRUE;
      END;

      EXIT(lFieldUpdated);
    END;

    LOCAL PROCEDURE DecimalFieldToBeUpdated@1000000032(VAR pFieldValue@1000000000 : Decimal;pValue@1000000001 : Decimal;VAR pRecordUpdated@1000000002 : Boolean) : Boolean;
    VAR
      lFieldUpdated@1000000003 : Boolean;
    BEGIN
      //NS2015.1 - Returns true if decimal field has to be updated
      //  <> pFieldValue: Source / target field value
      //  -> pValue: Value (new value)
      //  <> pRecordUpdated: Target record updated flag
      //  <- Field updated / not

      IF (pFieldValue <> pValue) THEN
      BEGIN
        pFieldValue := pValue;
        pRecordUpdated := TRUE;
        lFieldUpdated := TRUE;
      END;

      EXIT(lFieldUpdated);
    END;

    LOCAL PROCEDURE BooleanFieldToBeUpdated@1000000006(VAR pFieldValue@1000000000 : Boolean;pValue@1000000001 : Boolean;VAR pRecordUpdated@1000000002 : Boolean) : Boolean;
    VAR
      lFieldUpdated@1000000003 : Boolean;
    BEGIN
      //DOC M0038 DD 19/10/16
      // - Returns true if Boolean field has to be updated
      //  <> pFieldValue: Source / target field value
      //  -> pValue: Value (new value)
      //  <> pRecordUpdated: Target record updated flag
      //  <- Field updated / not

      IF (pFieldValue <> pValue) THEN
      BEGIN
        pFieldValue := pValue;
        pRecordUpdated := TRUE;
        lFieldUpdated := TRUE;
      END;

      EXIT(lFieldUpdated);
    END;

    PROCEDURE VerifyVendorColour@1000000008(pVendorNo@1000000000 : Code[20];pVendorColourCode@1000000001 : Code[20]);
    VAR
      lVendorColour@1000000002 : Record 9087004;
    BEGIN
      //DOC NS2015.1 - Verifying vendor colour
      //  -> pVendorNo: Vendor number
      //  -> pVendorColourCode: Vendor colour code

      IF ((pVendorNo = '') OR (pVendorColourCode = '')) THEN
        EXIT;
      IF (lVendorColour.GET(pVendorNo, pVendorColourCode)) THEN
        EXIT;

      CLEAR(lVendorColour);
      lVendorColour.INIT();
      lVendorColour.VALIDATE("Vendor No.", pVendorNo);
      lVendorColour.VALIDATE(Code, pVendorColourCode);
      lVendorColour.INSERT(TRUE);
    END;

    [Integration]
    PROCEDURE OnBeforeStyleModify@1170000000(VAR pStyle@1170000000 : Record 9087012;pBuyingStagingLine@1170000002 : Record 9087017;VAR pModify@1170000001 : Boolean);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnAfterEnableSize@1170000001(VAR pStyleColourSize@1170000000 : Record 9087014;pBuyingStagingHeader@1170000001 : Record 9087016;pOrdered@1170000002 : Boolean);
    BEGIN
    END;

    BEGIN
    {
      //DOC NS2015.1      JH  16/01/2014 - Created
      //DOC NS2015.1      JH  20/02/2014 - Amendments
      //DOC NS2016.16     JH  07/09/2016 - nSemble 2016
      //DOC NS2016.16.1   JH  07/10/2016 - Copying file attachments between buying staging and sheet
      //DOC M0021         DD  13/10/2016 - Sync field.
      //DOC M0038         DD  19/10/2016 - Sync field.
      //DOC OP9031 M0040  PCM 15/11/2016 - Modified CheckBuyingStagingLine to check based upon setup.
      //DOC NS2016.16.1   PCM 16/11/2016 - Added function CreateStyleSalesPrices and call from CreateStyle.
      //DOC OP9031 M0013  PCM 22/11/2016 - Amended to create Colours if they don't exist.
      //DOC OP9031 M0028  PCM 29/11/2016 - Copy "Shipment Window Type" to Buying Sheet Header.
      //DOC OP9031 M0029  PCM 29/11/2016 - Copy "Shipping Region Code" to Buying Sheet Header.
      //DOC OP9031 M0026  PCM 29/11/2016 - Copy "Payment Terms Code" to Buying Sheet Header.
      //DOC OP9031 M0027  PCM 29/11/2016 - Copy "Deposit %" to Buying Sheet Header.
      //DOC OP9031 M0032  PCM 29/11/2016 - Copy "Shipment Date" to Buying Sheet Header.
      //DOC OP9031 M0033  PCM 29/11/2016 - Copy "Cancellation Date" to Buying Sheet Header.
      //DOC OP9031 CC     PCM 05/01/2017 - Removed TESTFIELD on "Reference No.".
      //DOC OP9031 DEL-45 PCM 25/01/2017 - Amended Style checks to allow season,subseason,and cost update of existing style with ledger entries.
      //DOC NS2016.16.2   JH  21/02/2017 - Not allowing to change style size group code
    }
    END.
  }
}

