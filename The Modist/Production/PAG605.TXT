OBJECT Page 605 IC Chart of Accounts
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=IC Chart of Accounts;
               ENG=IC Chart of Accounts];
    SourceTable=Table410;
    PageType=List;
    OnAfterGetRecord=BEGIN
                       NameIndent := 0;
                       FormatLine;
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 15      ;1   ;ActionGroup;
                      CaptionML=[ENU=IC A&ccount;
                                 ENG=IC A&ccount];
                      Image=Intercompany }
      { 19      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[ENU=&Card;
                                 ENG=&Card];
                      RunObject=Page 606;
                      RunPageLink=No.=FIELD(No.);
                      Image=EditLines }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 14      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 18      ;2   ;Action    ;
                      CaptionML=[ENU=Map to Acc. with Same No.;
                                 ENG=Map to Acc. with Same No.];
                      Image=MapAccounts;
                      OnAction=VAR
                                 ICGLAcc@1001 : Record 410;
                                 ICMapping@1000 : Codeunit 428;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(ICGLAcc);
                                 IF ICGLAcc.FIND('-') AND CONFIRM(Text000) THEN
                                   REPEAT
                                     ICMapping.MapAccounts(ICGLAcc);
                                   UNTIL ICGLAcc.NEXT = 0;
                               END;
                                }
      { 23      ;2   ;Action    ;
                      CaptionML=[ENU=Copy from Chart of Accounts;
                                 ENG=Copy from Chart of Accounts];
                      Image=CopyFromChartOfAccounts;
                      OnAction=BEGIN
                                 CopyFromChartOfAccounts;
                               END;
                                }
      { 20      ;2   ;Action    ;
                      CaptionML=[ENU=In&dent IC Chart of Accounts;
                                 ENG=In&dent IC Chart of Accounts];
                      Image=Indent;
                      OnAction=VAR
                                 IndentCOA@1000 : Codeunit 3;
                               BEGIN
                                 IndentCOA.RunICAccountIndent;
                               END;
                                }
      { 21      ;2   ;Separator  }
      { 17      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Import;
                                 ENG=Import];
                      Image=Import;
                      OnAction=BEGIN
                                 ImportFromXML;
                               END;
                                }
      { 22      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=E&xport;
                                 ENG=E&xport];
                      Image=Export;
                      OnAction=BEGIN
                                 ExportToXML;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                IndentationColumnName=NameIndent;
                IndentationControls=Name;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr="No.";
                Style=Strong;
                StyleExpr=Emphasize }

    { 4   ;2   ;Field     ;
                SourceExpr=Name;
                Style=Strong;
                StyleExpr=Emphasize }

    { 8   ;2   ;Field     ;
                SourceExpr="Income/Balance" }

    { 6   ;2   ;Field     ;
                SourceExpr="Account Type" }

    { 10  ;2   ;Field     ;
                SourceExpr=Blocked }

    { 12  ;2   ;Field     ;
                SourceExpr="Map-to G/L Acc. No." }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Are you sure you want to map the selected lines?;ENG=Are you sure you want to map the selected lines?';
      Text001@1002 : TextConst 'ENU=Select file to import into %1;ENG=Select file to import into %1';
      Text002@1001 : TextConst 'ENU=ICGLAcc.xml;ENG=ICGLAcc.xml';
      Text004@1004 : TextConst 'ENU=Are you sure you want to copy from %1?;ENG=Are you sure you want to copy from %1?';
      Emphasize@19018670 : Boolean INDATASET;
      NameIndent@19079073 : Integer INDATASET;
      Text005@1005 : TextConst 'ENU=Enter the file name.;ENG=Enter the file name.';
      Text006@1006 : TextConst 'ENU=XML Files (*.xml)|*.xml|All Files (*.*)|*.*;ENG=XML Files (*.xml)|*.xml|All Files (*.*)|*.*';

    LOCAL PROCEDURE CopyFromChartOfAccounts@1();
    VAR
      GLAcc@1000 : Record 15;
      ICGLAcc@1001 : Record 410;
      ChartofAcc@1005 : Page 16;
      ICGLAccEmpty@1002 : Boolean;
      ICGLAccExists@1003 : Boolean;
      PrevIndentation@1004 : Integer;
    BEGIN
      IF NOT CONFIRM(Text004,FALSE,ChartofAcc.CAPTION) THEN
        EXIT;

      ICGLAccEmpty := NOT ICGLAcc.FINDFIRST;
      ICGLAcc.LOCKTABLE;
      IF GLAcc.FIND('-') THEN
        REPEAT
          IF GLAcc."Account Type" = GLAcc."Account Type"::"End-Total" THEN
            PrevIndentation := PrevIndentation - 1;
          IF NOT ICGLAccEmpty THEN
            ICGLAccExists := ICGLAcc.GET(GLAcc."No.");
          IF NOT ICGLAccExists AND NOT GLAcc.Blocked THEN BEGIN
            ICGLAcc.INIT;
            ICGLAcc."No." := GLAcc."No.";
            ICGLAcc.Name := GLAcc.Name;
            ICGLAcc."Account Type" := GLAcc."Account Type";
            ICGLAcc."Income/Balance" := GLAcc."Income/Balance";
            ICGLAcc.Indentation := PrevIndentation;
            ICGLAcc.INSERT;
          END;
          PrevIndentation := GLAcc.Indentation;
          IF GLAcc."Account Type" = GLAcc."Account Type"::"Begin-Total" THEN
            PrevIndentation := PrevIndentation + 1;
        UNTIL GLAcc.NEXT = 0;
    END;

    LOCAL PROCEDURE ImportFromXML@2();
    VAR
      CompanyInfo@1006 : Record 79;
      ICGLAccIO@1005 : XMLport 10;
      FileName@1004 : Text[1024];
      StartFileName@1003 : Text[1024];
      IFile@1002 : File;
      IStr@1001 : InStream;
    BEGIN
      CompanyInfo.GET;

      StartFileName := CompanyInfo."IC Inbox Details";
      IF StartFileName <> '' THEN BEGIN
        IF StartFileName[STRLEN(StartFileName)] <> '\' THEN
          StartFileName := StartFileName + '\';
        StartFileName := StartFileName + '*.xml';
      END;

      IF NOT UPLOAD(STRSUBSTNO(Text001,TABLECAPTION),'',Text006,StartFileName,FileName) THEN
        ERROR(Text005);

      IFile.OPEN(FileName);
      IFile.CREATEINSTREAM(IStr);
      ICGLAccIO.SETSOURCE(IStr);
      ICGLAccIO.IMPORT;
    END;

    LOCAL PROCEDURE ExportToXML@3();
    VAR
      CompanyInfo@1006 : Record 79;
      FileMgt@1000 : Codeunit 419;
      ICGLAccIO@1005 : XMLport 10;
      FileName@1004 : Text;
      DefaultFileName@1003 : Text;
      OFile@1002 : File;
      OStr@1001 : OutStream;
    BEGIN
      CompanyInfo.GET;

      DefaultFileName := CompanyInfo."IC Inbox Details";
      IF DefaultFileName <> '' THEN
        IF DefaultFileName[STRLEN(DefaultFileName)] <> '\' THEN
          DefaultFileName := DefaultFileName + '\';
      DefaultFileName := DefaultFileName + Text002;

      FileName := FileMgt.ServerTempFileName('xml');
      IF FileName = '' THEN
        EXIT;

      OFile.CREATE(FileName);
      OFile.CREATEOUTSTREAM(OStr);
      ICGLAccIO.SETDESTINATION(OStr);
      ICGLAccIO.EXPORT;
      OFile.CLOSE;
      CLEAR(OStr);

      DOWNLOAD(FileName,'Export',TEMPORARYPATH,'',DefaultFileName);
    END;

    LOCAL PROCEDURE FormatLine@19039177();
    BEGIN
      NameIndent := Indentation;
      Emphasize := "Account Type" <> "Account Type"::Posting;
    END;

    BEGIN
    END.
  }
}

