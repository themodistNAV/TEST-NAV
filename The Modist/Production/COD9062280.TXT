OBJECT Codeunit 9062280 IMAP Integration
{
  OBJECT-PROPERTIES
  {
    Date=05/07/16;
    Time=12:53:22 PM;
    Version List=NA2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            Test();
          END;

  }
  CODE
  {
    VAR
      SystemBehaviour@1000000018 : Record 9062230;
      ImapClientS@1000000000 : DotNet "'TheNavPeople.ImapIntegration.9.0.2.5, Version=9.0.2.5, Culture=neutral, PublicKeyToken=585a2724abc7a8ee'.TheNavPeople.ImapIntegration.ImapClient";
      ImapClientC@1000000002 : DotNet "'TheNavPeople.ImapIntegration.9.0.2.5, Version=9.0.2.5, Culture=neutral, PublicKeyToken=585a2724abc7a8ee'.TheNavPeople.ImapIntegration.ImapClient" RUNONCLIENT;
      Base64@1000000003 : Codeunit 9062242;
      DialogManagement@1000000004 : Codeunit 9062249;
      tDialogTitle@1000000005 : TextConst 'ENU=IMAP;ENG=IMAP';
      tDialogConnecting@1000000006 : TextConst 'ENU=Connecting...;ENG=Connecting...';
      tDialogLoggingIn@1000000007 : TextConst 'ENU=Logging in...;ENG=Logging in...';
      tDialogSelectingInboxFolder@1000000008 : TextConst 'ENU=Selecting inbox folder...;ENG=Selecting inbox folder...';
      tDialogReadingMails@1000000012 : TextConst 'ENU=Reading e-mails...;ENG=Reading e-mails...';
      tDialogMailsRead@1000000013 : TextConst 'ENU=E-mails read: %1;ENG=E-mails read: %1';
      tDialogLoggingOut@1000000009 : TextConst 'ENU=Logging out...;ENG=Logging out...';
      tDialogDisconnecting@1000000010 : TextConst 'ENU=Disconnecting...;ENG=Disconnecting...';
      FileSystem@1000000017 : Codeunit 9062264;
      MailsRead@1000000011 : Integer;
      EMailTmp@1000000016 : TEMPORARY Record 9062281;
      EMailLineTmp@1000000015 : TEMPORARY Record 9062282;
      EMailAttachmentTmp@1000000014 : TEMPORARY Record 9062283;
      tImapServerAddressSysB@1000000001 : TextConst 'ENU=IMAP_SERVER_ADDRESS;ENG=IMAP_SERVER_ADDRESS';
      tImapServerPortSysB@1000000019 : TextConst 'ENU=IMAP_SERVER_PORT;ENG=IMAP_SERVER_PORT';
      tImapUserNameSysB@1000000020 : TextConst 'ENU=IMAP_USER_NAME;ENG=IMAP_USER_NAME';
      tImapPasswordSysB@1000000021 : TextConst 'ENU=IMAP_PASSWORD;ENG=IMAP_PASSWORD';
      tImapUseSslSysB@1000000022 : TextConst 'ENU=IMAP_USE_SSL;ENG=IMAP_USE_SSL';
      tImapInboxFolderSysB@1000000023 : TextConst 'ENU=IMAP_INBOX_FOLDER;ENG=IMAP_INBOX_FOLDER';
      tImapArchiveFolderSysB@1000000024 : TextConst 'ENU=IMAP_ARCHIVE_FOLDER;ENG=IMAP_ARCHIVE_FOLDER';
      tImapErrorFolderSysB@1000000025 : TextConst 'ENU=IMAP_ERROR_FOLDER;ENG=IMAP_ERROR_FOLDER';
      ImapInboxFolder@1000000026 : Text;
      ImapArchiveFolder@1000000027 : Text;
      ImapErrorFolder@1000000028 : Text;

    PROCEDURE Initialise@1000000010();
    VAR
      lImapServerAddress@1000000000 : Text;
      lImapServerPort@1000000001 : Integer;
      lImapUserName@1000000002 : Text;
      lImapPassword@1000000003 : Text;
      lImapUseSsl@1000000004 : Boolean;
    BEGIN
      //DOC NA2015.1 - Initialising IMAP

      SystemBehaviour.TestText(tImapServerAddressSysB);
      SystemBehaviour.TestInteger(tImapServerPortSysB);
      SystemBehaviour.TestText(tImapUserNameSysB);
      SystemBehaviour.TestText(tImapInboxFolderSysB);
      SystemBehaviour.TestText(tImapArchiveFolderSysB);
      SystemBehaviour.TestText(tImapErrorFolderSysB);

      IF (ClientSide()) THEN
      BEGIN
        DialogManagement.Add('', 0, 1, 50, FALSE, FALSE);
        DialogManagement.Open(tDialogTitle);
      END;

      lImapServerAddress := SystemBehaviour.GetText(tImapServerAddressSysB);
      lImapServerPort := SystemBehaviour.GetInteger(tImapServerPortSysB);
      lImapUserName := SystemBehaviour.GetText(tImapUserNameSysB);
      lImapPassword := SystemBehaviour.GetText(tImapPasswordSysB);
      lImapUseSsl := SystemBehaviour.GetBoolean(tImapUseSslSysB);

      ImapInboxFolder := SystemBehaviour.GetText(tImapInboxFolderSysB);
      ImapArchiveFolder := SystemBehaviour.GetText(tImapArchiveFolderSysB);
      ImapErrorFolder := SystemBehaviour.GetText(tImapErrorFolderSysB);

      IF (ClientSide()) THEN
      BEGIN
        ImapClientC := ImapClientC.ImapClient(lImapServerAddress, lImapServerPort, lImapUserName, lImapPassword, lImapUseSsl);
        UpdateDialog(tDialogConnecting);
        ImapClientC.Connect();
        UpdateDialog(tDialogLoggingIn);
        ImapClientC.Login();
        UpdateDialog(tDialogSelectingInboxFolder);
        ImapClientC.SelectFolder(ImapInboxFolder);
      END
      ELSE
      BEGIN
        ImapClientS := ImapClientS.ImapClient(lImapServerAddress, lImapServerPort, lImapUserName, lImapPassword, lImapUseSsl);
        UpdateDialog(tDialogConnecting);
        ImapClientS.Connect();
        UpdateDialog(tDialogLoggingIn);
        ImapClientS.Login();
        UpdateDialog(tDialogSelectingInboxFolder);
        ImapClientS.SelectFolder(ImapInboxFolder);
      END;
    END;

    PROCEDURE Finalise@1000000014();
    BEGIN
      //DOC NA2015.1 - Finalising IMAP

      IF (ClientSide()) THEN
      BEGIN
        UpdateDialog(tDialogLoggingOut);
        ImapClientC.Logout();
        UpdateDialog(tDialogDisconnecting);
        ImapClientC.Disconnect();
        CLEAR(ImapClientC);
      END
      ELSE
      BEGIN
        UpdateDialog(tDialogLoggingOut);
        ImapClientS.Logout();
        UpdateDialog(tDialogDisconnecting);
        ImapClientS.Disconnect();
        CLEAR(ImapClientS);
      END;

      IF (ClientSide()) THEN
        DialogManagement.Close();
    END;

    PROCEDURE InitialiseReadingEMails@1000000008();
    VAR
      xDlgConnecting@1000000000 : TextConst 'ENU=Connecting to Outlook...;ENG=Connecting to Outlook...';
      xDlgConnected@1000000001 : TextConst 'ENU=Connected. Reading e-mails...;ENG=Connected. Reading e-mails...';
      xDlgEMail@1000000006 : TextConst 'ENU=Processing e-mail no. %1...;ENG=Processing e-mail no. %1...';
      xDlgFinished@1000000002 : TextConst 'ENU=Finished. Logging out from Outlook...;ENG=Finished. Logging out from Outlook...';
      xProcessingFailedSubject@1000000008 : TextConst 'ENU=Problem with your e-mail;ENG=Problem with your e-mail';
      xProcessingFailedBody@1000000009 : TextConst 'ENU=I got your email "%1" but there was a problem processing it - %2. Nora x.;ENG=I got your email "%1" but there was a problem processing it - %2. Nora x.';
      xFinalMessage@1000000007 : TextConst 'ENU=%1 e-mails processed, %2 successfully, %3 with errors.;ENG=%1 e-mails processed, %2 successfully, %3 with errors.';
    BEGIN
      //DOC NA2015.1 - Initialising reading IMAP e-mails

      UpdateDialog(tDialogReadingMails);
      MailsRead := 0;
    END;

    PROCEDURE FinaliseReadingEMails@1000000000();
    VAR
      xDlgConnecting@1000000000 : TextConst 'ENU=Connecting to Outlook...;ENG=Connecting to Outlook...';
      xDlgConnected@1000000001 : TextConst 'ENU=Connected. Reading e-mails...;ENG=Connected. Reading e-mails...';
      xDlgEMail@1000000006 : TextConst 'ENU=Processing e-mail no. %1...;ENG=Processing e-mail no. %1...';
      xDlgFinished@1000000002 : TextConst 'ENU=Finished. Logging out from Outlook...;ENG=Finished. Logging out from Outlook...';
      xProcessingFailedSubject@1000000008 : TextConst 'ENU=Problem with your e-mail;ENG=Problem with your e-mail';
      xProcessingFailedBody@1000000009 : TextConst 'ENU=I got your email "%1" but there was a problem processing it - %2. Nora x.;ENG=I got your email "%1" but there was a problem processing it - %2. Nora x.';
      xFinalMessage@1000000007 : TextConst 'ENU=%1 e-mails processed, %2 successfully, %3 with errors.;ENG=%1 e-mails processed, %2 successfully, %3 with errors.';
    BEGIN
      //DOC NA2015.1 - Finalising reading IMAP e-mails

      EXIT;
    END;

    PROCEDURE ReadItem@1000000001(pReadContent@1000000010 : Boolean;pReadAttachments@1000000005 : Boolean;VAR pItemCounter@1000000015 : Integer;VAR pIsEMail@1000000012 : Boolean;VAR pEMailTmp@1000000013 : Record 9062281;VAR pEMailLineTmp@1000000014 : Record 9062282;VAR pEMailAttachmentTmp@1000000003 : Record 9062283) : Boolean;
    VAR
      lImapMailC@1000000009 : DotNet "'TheNavPeople.ImapIntegration.9.0.2.5, Version=9.0.2.5, Culture=neutral, PublicKeyToken=585a2724abc7a8ee'.TheNavPeople.ImapIntegration.ImapMail" RUNONCLIENT;
      lImapMailS@1000000000 : DotNet "'TheNavPeople.ImapIntegration.9.0.2.5, Version=9.0.2.5, Culture=neutral, PublicKeyToken=585a2724abc7a8ee'.TheNavPeople.ImapIntegration.ImapMail";
      lImapMailAttachmentC@1000000007 : DotNet "'TheNavPeople.ImapIntegration.9.0.2.5, Version=9.0.2.5, Culture=neutral, PublicKeyToken=585a2724abc7a8ee'.TheNavPeople.ImapIntegration.ImapMailAttachment" RUNONCLIENT;
      lImapMailAttachmentS@1000000016 : DotNet "'TheNavPeople.ImapIntegration.9.0.2.5, Version=9.0.2.5, Culture=neutral, PublicKeyToken=585a2724abc7a8ee'.TheNavPeople.ImapIntegration.ImapMailAttachment";
      lMailCount@1000000004 : Integer;
      lBodyLineNo@1000000002 : Integer;
      lAttachmentCount@1000000011 : Integer;
      lAttachmentIndex@1000000006 : Integer;
      lAttachmentLineNo@1000000001 : Integer;
      lResult@1000000008 : Boolean;
    BEGIN
      //DOC NA2015.1 - Trying to read another IMAP item
      //  -> pReadContent: Flag to read content
      //  -> pReadAttachments: Flag to read attachments
      //  <> pItemCounter: Target item counter
      //  <> pIsEMail: TRUE = e-mail item, FALSE = something else
      //  <> pEMailTmp: Target e-mail temporary recordset
      //  <> pEMailLineTmp: Target e-mail line temporary recordset
      //  <> pEMailAttachmentTmp: Target e-mail attachment temporary recordset
      //  <- E-mail has been read / not

      lResult := FALSE;

      CLEAR(EMailTmp);
      EMailLineTmp.RESET();
      EMailLineTmp.DELETEALL();
      EMailAttachmentTmp.RESET();
      EMailAttachmentTmp.DELETEALL();

      IF (ClientSide()) THEN
        lMailCount := ImapClientC.MailCount()
      ELSE
        lMailCount := ImapClientS.MailCount();
      lResult := (lMailCount > 0);

      IF (lResult) THEN
      BEGIN
        pItemCounter += 1;
        pIsEMail := TRUE;
        IF (ClientSide()) THEN
        BEGIN
          lImapMailC := ImapClientC.GetMail(1, FALSE);
          lResult := ( NOT (ISNULL(lImapMailC)));
        END
        ELSE
        BEGIN
          lImapMailS := ImapClientS.GetMail(1, FALSE);
          lResult := ( NOT (ISNULL(lImapMailS)));
        END;
      END;

      IF (lResult) THEN
      BEGIN
        IF (ClientSide()) THEN
        BEGIN
          ReadItemHeader(pEMailTmp, lImapMailC.Id, lImapMailC.Subject, lImapMailC.FromEMail, lImapMailC.FromName, lImapMailC.CCEMails,
            lImapMailC.BCCEMails, lImapMailC.Date, lImapMailC.Size, lImapMailC.Body.ToString());
          ReadItemBodyC(lImapMailC.Body, pEMailLineTmp."Line Type"::Body, pEMailLineTmp, lBodyLineNo);
          lAttachmentCount := lImapMailC.Attachments.Count;
        END
        ELSE
        BEGIN
          ReadItemHeader(pEMailTmp, lImapMailS.Id, lImapMailS.Subject, lImapMailS.FromEMail, lImapMailS.FromName, lImapMailS.CCEMails,
            lImapMailS.BCCEMails, lImapMailS.Date, lImapMailS.Size, lImapMailS.Body.ToString());
          ReadItemBodyS(lImapMailS.Body, pEMailLineTmp."Line Type"::Body, pEMailLineTmp, lBodyLineNo);
          lAttachmentCount := lImapMailS.Attachments.Count;
        END;

        FOR lAttachmentIndex := 0 TO lAttachmentCount - 1 DO
          IF (ClientSide()) THEN
          BEGIN
            lImapMailAttachmentC := lImapMailC.Attachments.Item(lAttachmentIndex);
            ReadItemAttachment(pEMailAttachmentTmp, lAttachmentLineNo, lImapMailAttachmentC.FileName, lImapMailAttachmentC.Size, lImapMailAttachmentC.Data);
          END
          ELSE
          BEGIN
            lImapMailAttachmentS := lImapMailS.Attachments.Item(lAttachmentIndex);
            ReadItemAttachment(pEMailAttachmentTmp, lAttachmentLineNo, lImapMailAttachmentS.FileName, lImapMailAttachmentS.Size, lImapMailAttachmentS.Data);
          END;

        EMailTmp := pEMailTmp;
        pEMailLineTmp.RESET();
        IF (pEMailLineTmp.FINDSET()) THEN
        REPEAT
          EMailLineTmp := pEMailLineTmp;
          EMailLineTmp.INSERT();
        UNTIL (pEMailLineTmp.NEXT() = 0);
        pEMailAttachmentTmp.RESET();
        IF (pEMailAttachmentTmp.FINDSET()) THEN
        REPEAT
          EMailAttachmentTmp := pEMailAttachmentTmp;
          EMailAttachmentTmp.INSERT();
        UNTIL (pEMailAttachmentTmp.NEXT() = 0);

        MailsRead += 1;
        UpdateDialog(STRSUBSTNO(tDialogMailsRead, MailsRead));
      END;

      EXIT(lResult);
    END;

    PROCEDURE ReadItemAttachment@1000000018(VAR pEMailAttachmentTmp@1000000000 : Record 9062283;VAR pLineNo@1000000001 : Integer;pFileName@1000000002 : Text[100];pSize@1000000003 : Integer;pData@1000000004 : Text);
    VAR
      lSourceBlob@1000000005 : Record 99008535;
      lDestinationBlob@1000000006 : Record 99008535;
      lOutStream@1000000008 : OutStream;
    BEGIN
      //DOC NA2015.1 - Reading item attachment
      //  <> pEMailAttachmentTmp: Target e-mail attachment temporary recordset
      //  -> pLineNo: Line number
      //  -> pFileName: File name
      //  -> pSize: Size
      //  -> pData: Data (Base64)

      pLineNo += 1;

      pEMailAttachmentTmp.INIT();
      pEMailAttachmentTmp.VALIDATE("Line No.", pLineNo);
      pEMailAttachmentTmp.VALIDATE("Display Name", pFileName);
      pEMailAttachmentTmp.VALIDATE("File Path", pFileName);
      pEMailAttachmentTmp.VALIDATE("File Name", pFileName);
      pEMailAttachmentTmp.VALIDATE(Size, pSize);

      lSourceBlob.Blob.CREATEOUTSTREAM(lOutStream);
      lOutStream.WRITETEXT(pData);
      Base64.FromBase64(lSourceBlob, lDestinationBlob);
      pEMailAttachmentTmp."Content BLOB" := lDestinationBlob.Blob;

      pEMailAttachmentTmp.INSERT();
    END;

    PROCEDURE MoveItem@1000000003(pSuccess@1000000000 : Boolean);
    VAR
      lFolder@1000000001 : Text[100];
    BEGIN
      //DOC NA2015.1 - Moving item to archive / error folder
      //  -> pSuccess: TRUE = move to archive folder, FALSE = move to error folder

      IF (pSuccess) THEN
        lFolder := ImapArchiveFolder
      ELSE
        lFolder := ImapErrorFolder;

      IF (ClientSide()) THEN
        ImapClientC.MoveMail(1, lFolder, FALSE)
      ELSE
        ImapClientS.MoveMail(1, lFolder, FALSE);
    END;

    PROCEDURE SaveItem@1000000005(pPath@1000000000 : Text[1024]);
    VAR
      lBlob@1000000001 : Record 99008535;
    BEGIN
      //DOC NA2015.1 - Saving item
      //  -> pPath: Path to save the item to

      lBlob.Blob := EMailTmp.Body;
      FileSystem.ExportBlobToFileSilent(FALSE, lBlob, pPath);
    END;

    PROCEDURE SaveItemAttachments@1000000004(pDirectory@1000000000 : Text[1024]);
    VAR
      lBlob@1000000004 : Record 99008535;
      lFileName@1000000001 : Text[100];
      eAttachment@1000000002 : TextConst 'ENU=Attachment %1.bin;ENG=Attachment %1.bin';
      lFilePath@1000000003 : Text[1024];
    BEGIN
      //DOC NA2015.1 - Saving item attachments to
      //  -> pDirectory: Directory to save them to

      EMailAttachmentTmp.RESET();
      IF (EMailAttachmentTmp.FINDSET()) THEN
      REPEAT
        IF (EMailAttachmentTmp."File Name" <> '') THEN
          lFileName := EMailAttachmentTmp."File Name"
        ELSE
          lFileName := STRSUBSTNO(eAttachment, EMailAttachmentTmp."Line No.");
        lFilePath := pDirectory + '\' + lFileName;
        lBlob.Blob := EMailAttachmentTmp."Content BLOB";
        FileSystem.ExportBlobToFileSilent(ClientSide(), lBlob, lFilePath);
      UNTIL (EMailAttachmentTmp.NEXT() = 0);
    END;

    PROCEDURE GetFolderId@1000000009(VAR pFolderId@1000000006 : Text[92];VAR pFolderName@1000000005 : Text[250]) : Boolean;
    BEGIN
      //DOC NA2015.1 - Returning folder ID (and name)
      //  <> pFolderId: Target folder ID
      //  <> pFolderName: Target folder name
      //  <- Result

      EXIT(FALSE);
    END;

    PROCEDURE GetEMailFromBlob@1000000006(pTempBlob@1000000000 : Record 99008535;pReadContent@1000000008 : Boolean;pReadAttachments@1000000007 : Boolean;VAR pEMailTmp@1000000006 : Record 9062281;VAR pEMailLineTmp@1000000005 : Record 9062282;VAR pEMailAttachmentTmp@1000000004 : Record 9062283);
    BEGIN
      //DOC NA2015.1 - Getting e-mail from BLOB
      //  -> pTempBlob: The BLOB
      //  -> pReadContent: Flag to read content
      //  -> pReadAttachments: Flag to read attachments
      //  <> pEMailTmp: Target e-mail temporary recordset
      //  <> pEMailLineTmp: Target e-mail line temporary recordset
      //  <> pEMailAttachmentTmp: Target e-mail attachment temporary recordset

      EXIT;
    END;

    LOCAL PROCEDURE "--- Internal ---"@1000000013();
    BEGIN
    END;

    LOCAL PROCEDURE ReadItemHeader@1000000007(VAR pEMailTmp@1000000000 : Record 9062281;pId@1000000001 : Text[1024];pSubject@1000000002 : Text[1024];pSenderEMailAddress@1000000003 : Text[1024];pSenderName@1000000009 : Text[1024];pCC@1000000004 : Text[1024];pBCC@1000000005 : Text[1024];pDate@1000000006 : DateTime;pSize@1000000008 : Integer;pContent@1000000007 : Text);
    VAR
      lOutStream@1000000010 : OutStream;
    BEGIN
      //DOC NA2015.1 - Reading item header
      //  <> pEMailTmp: Target e-mail (header)
      //  -> pId: E-mail identifier
      //  -> pSubject: E-mail subject
      //  -> pSenderEMailAddress: Sender e-mail address
      //  -> pSenderName: Sender name
      //  -> pCC: Carbon copy
      //  -> pBCC: Blind carbon copy
      //  -> pDate: Date
      //  -> pSize: Size
      //  -> pContent: Content (the entire e-mail)

      pEMailTmp.VALIDATE(ID, COPYSTR(pId, 1, MAXSTRLEN(pEMailTmp.ID)));
      pEMailTmp.VALIDATE(Subject, COPYSTR(pSubject, 1, MAXSTRLEN(pEMailTmp.Subject)));
      pEMailTmp.VALIDATE("Sender E-Mail", COPYSTR(pSenderEMailAddress, 1, MAXSTRLEN(pEMailTmp."Sender E-Mail")));
      pEMailTmp.VALIDATE("Sender Name", COPYSTR(pSenderName, 1, MAXSTRLEN(pEMailTmp."Sender Name")));
      pEMailTmp.VALIDATE(CC, COPYSTR(pCC, 1, MAXSTRLEN(pEMailTmp.CC)));
      pEMailTmp.VALIDATE(BCC, COPYSTR(pBCC, 1, MAXSTRLEN(pEMailTmp.BCC)));
      pEMailTmp.VALIDATE("Creation Date Time", pDate);
      pEMailTmp.VALIDATE("Received Date TIme", pDate);
      pEMailTmp.VALIDATE(Size, pSize);
      pEMailTmp.Body.CREATEOUTSTREAM(lOutStream);
      lOutStream.WRITETEXT(pContent);
    END;

    LOCAL PROCEDURE ReadItemBodyC@1000000019(pImapMailBody@1000000000 : DotNet "'TheNavPeople.ImapIntegration.9.0.2.5, Version=9.0.2.5, Culture=neutral, PublicKeyToken=585a2724abc7a8ee'.TheNavPeople.ImapIntegration.ImapMailBody" RUNONCLIENT;pLineType@1000000002 : Integer;VAR pEMailLineTmp@1000000003 : Record 9062282;VAR pLineNo@1000000001 : Integer);
    BEGIN
      //DOC NA2015.1 - Reading item body (client version)
      //  -> pImapMailBody: The body to read
      //  -> pLineType: Line type
      //  <> pEMailLineTmp: Target e-mail line temporary recordset
      //  <> pLineNo: Target line number

      pImapMailBody.Reset();
      WHILE (pImapMailBody.NextLine()) DO
      BEGIN
        pLineNo += 1;
        pEMailLineTmp.INIT();
        pEMailLineTmp.VALIDATE("Line No.", pLineNo);
        pEMailLineTmp.VALIDATE("Line Type", pLineType);
        pEMailLineTmp.SetLine(COPYSTR(pImapMailBody.Line(), 1, 1024));
        pEMailLineTmp.INSERT();
      END;
    END;

    LOCAL PROCEDURE ReadItemBodyS@1000000011(pImapMailBody@1000000004 : DotNet "'TheNavPeople.ImapIntegration.9.0.2.5, Version=9.0.2.5, Culture=neutral, PublicKeyToken=585a2724abc7a8ee'.TheNavPeople.ImapIntegration.ImapMailBody" RUNONCLIENT;pLineType@1000000002 : Integer;VAR pEMailLineTmp@1000000003 : Record 9062282;VAR pLineNo@1000000001 : Integer);
    BEGIN
      //DOC NA2015.1 - Reading item body (server version)
      //  -> pImapMailBody: The body to read
      //  -> pLineType: Line type
      //  <> pEMailLineTmp: Target e-mail line temporary recordset
      //  <> pLineNo: Target line number

      pImapMailBody.Reset();
      WHILE (pImapMailBody.NextLine()) DO
      BEGIN
        pLineNo += 1;
        pEMailLineTmp.INIT();
        pEMailLineTmp.VALIDATE("Line No.", pLineNo);
        pEMailLineTmp.VALIDATE("Line Type", pLineType);
        pEMailLineTmp.SetLine(COPYSTR(pImapMailBody.Line(), 1, 1024));
        pEMailLineTmp.INSERT();
      END;
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000016();
    BEGIN
    END;

    LOCAL PROCEDURE ClientSide@1000000002() : Boolean;
    BEGIN
      //DOC NA2015.1 - Returning TRUE if IMAP is working on client side
      //  <- Result

      EXIT(GUIALLOWED());
    END;

    LOCAL PROCEDURE UpdateDialog@1000000015(pText@1000000000 : Text[1024]);
    BEGIN
      //DOC NA2015.1 - Updating the dialog
      //  -> pText: Text to update with

      IF ( NOT (ClientSide())) THEN
        EXIT;

      DialogManagement.SetCounterTextValue(1, pText);
    END;

    LOCAL PROCEDURE "--- Diagnostics ---"@1000000012();
    BEGIN
    END;

    LOCAL PROCEDURE Test@1000000020();
    VAR
      lItemCounter@1000000000 : Integer;
      lIsEMail@1000000004 : Boolean;
      lEMail@1000000001 : TEMPORARY Record 9062281;
      lEMailLine@1000000002 : TEMPORARY Record 9062282;
      lEMailAttachment@1000000003 : TEMPORARY Record 9062283;
    BEGIN
      //DOC NA2016.DEV.JH - Testing the IMAP

      Initialise();
      InitialiseReadingEMails();
      ReadItem(TRUE, FALSE, lItemCounter, lIsEMail, lEMail, lEMailLine, lEMailAttachment);
      FinaliseReadingEMails();
      Finalise();
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 24/09/2012 - Created
      //DOC NA2015.1  JH 29/08/2013 - Fully implemented
      //DOC NA2015.1  JH 21/02/2014 - Some cleaning done
      //DOC NA2015.4  JH 03/11/2014 - Upgraded to 2015
      //DOC NA2015.4  JH 30/12/2014 - nAblement setup replaced by system behaviour
      //DOC NA2015.4  JH 28/01/2014 - Click-once supported
      //DOC NA2016.10 JH 26/08/2015 - Upgraded to 2016
      //DOC NA2016.15 JH 21/04/2016 - Bugfixes
      //DOC NA2016.16 JH 18/05/2016 - CfMD amendments (new library)
      //DOC NA2016.16 JH 25/05/2016 - CfMD bugfixes
    }
    END.
  }
}

