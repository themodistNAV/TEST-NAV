OBJECT Codeunit 410 Update Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00,NAVGB8.00;
  }
  PROPERTIES
  {
    TableNo=363;
    Permissions=TableData 363=rm,
                TableData 364=r,
                TableData 365=rimd,
                TableData 366=rimd;
    OnRun=BEGIN
            IF Code <> '' THEN BEGIN
              InitLastEntryNo;
              LOCKTABLE;
              FIND;
              PeriodFormMgt.SetCalendarSource("Calendar Source");
              UpdateOne(Rec,2,"Last Entry No." < LastGLEntryNo - 1000);
            END;
          END;

  }
  CODE
  {
    VAR
      Text005@1001 : TextConst 'ENU=Analysis View     #1############################\\;ENG=Analysis View     #1############################\\';
      Text006@1002 : TextConst 'ENU=Updating table    #2############################\;ENG=Updating table    #2############################\';
      Text007@1003 : TextConst 'ENU=Speed: (Entries/s)#4########\;ENG=Speed: (Entries/s)#4########\';
      Text008@1004 : TextConst 'ENU=Average Speed     #5########;ENG=Average Speed     #5########';
      Text009@1030 : TextConst 'ENU=#6############### @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\;ENG=#6############### @3@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\';
      Text010@1031 : TextConst 'ENU=Summarizing;ENG=Summarising';
      Text011@1032 : TextConst 'ENU=Updating Database;ENG=Updating Database';
      AnalysisView@1005 : Record 363;
      GLSetup@1036 : Record 98;
      GLEntry@1006 : Record 17;
      CFForecastEntry@1106 : Record 847;
      GLBudgetEntry@1007 : Record 96;
      AnalysisViewEntry@1008 : Record 365;
      AnalysisViewFilter@1035 : Record 364;
      AnalysisViewBudgetEntry@1009 : Record 366;
      TempAnalysisViewEntry@1010 : TEMPORARY Record 365;
      TempAnalysisViewBudgetEntry@1011 : TEMPORARY Record 366;
      TempDimBuf@1013 : TEMPORARY Record 360;
      DimSetEntry@1016 : Record 480;
      TempDimSetEntry@1038 : TEMPORARY Record 480;
      TempFiterDimEntryBuffer@1037 : TEMPORARY Record 373;
      PeriodFormMgt@1040001 : Codeunit 359;
      FilterIsInitialized@1014 : Boolean;
      FiltersExist@1012 : Boolean;
      PrevPostingDate@1017 : Date;
      PrevCalculatedPostingDate@1018 : Date;
      NoOfEntries@1019 : Integer;
      Window@1020 : Dialog;
      ShowProgressWindow@1021 : Boolean;
      WinLastEntryNo@1022 : Integer;
      WinPrevEntryNo@1023 : Integer;
      WinUpdateCounter@1024 : Integer;
      WinTotalCounter@1025 : Integer;
      WinTime0@1026 : Time;
      WinTime1@1027 : Time;
      WinTime2@1028 : Time;
      LastGLEntryNo@1029 : Integer;
      LastBudgetEntryNo@1033 : Integer;
      LastEntryNoIsInitialized@1015 : Boolean;

    LOCAL PROCEDURE InitLastEntryNo@20();
    BEGIN
      GLEntry.RESET;
      GLBudgetEntry.RESET;
      IF LastEntryNoIsInitialized THEN
        EXIT;
      LastEntryNoIsInitialized := TRUE;
      COMMIT;
      WITH GLEntry DO BEGIN
        LOCKTABLE;
        IF FINDLAST THEN
          LastGLEntryNo := "Entry No.";
        COMMIT;
      END;
      WITH GLBudgetEntry DO BEGIN
        LOCKTABLE;
        IF FINDLAST THEN
          LastBudgetEntryNo := "Entry No.";
        COMMIT;
      END;
    END;

    PROCEDURE UpdateAll@15(Which@1000 : 'Ledger Entries,Budget Entries,Both';DirectlyFromPosting@1001 : Boolean);
    VAR
      AnalysisView2@1002 : Record 363;
    BEGIN
      AnalysisView2.SETRANGE(Blocked,FALSE);
      IF DirectlyFromPosting THEN
        AnalysisView2.SETRANGE("Update on Posting",TRUE);

      IF AnalysisView2.ISEMPTY THEN
        EXIT;

      InitLastEntryNo;

      IF DirectlyFromPosting THEN
        AnalysisView2.SETFILTER("Last Entry No.",'<%1',LastGLEntryNo);

      AnalysisView2.LOCKTABLE;
      IF AnalysisView2.FINDSET THEN
        REPEAT
          UpdateOne(AnalysisView2,Which,NOT DirectlyFromPosting AND (AnalysisView2."Last Entry No." < LastGLEntryNo - 1000));
        UNTIL AnalysisView2.NEXT = 0;
    END;

    PROCEDURE Update@23(VAR NewAnalysisView@1000 : Record 363;Which@1001 : 'Ledger Entries,Budget Entries,Both';ShowWindow@1002 : Boolean);
    BEGIN
      InitLastEntryNo;
      NewAnalysisView.LOCKTABLE;
      NewAnalysisView.FIND;
      UpdateOne(NewAnalysisView,Which,ShowWindow);
    END;

    LOCAL PROCEDURE UpdateOne@11(VAR NewAnalysisView@1000 : Record 363;Which@1001 : 'Ledger Entries,Budget Entries,Both';ShowWindow@1002 : Boolean);
    VAR
      Updated@1003 : Boolean;
    BEGIN
      AnalysisView := NewAnalysisView;
      AnalysisView.TESTFIELD(Blocked,FALSE);
      ShowProgressWindow := ShowWindow;
      IF ShowProgressWindow THEN
        InitWindow;

      IF AnalysisView."Account Source" = AnalysisView."Account Source"::"G/L Account" THEN BEGIN
        IF Which IN [Which::"Ledger Entries",Which::Both] THEN BEGIN
          IF LastGLEntryNo > AnalysisView."Last Entry No." THEN BEGIN
            IF ShowProgressWindow THEN
              UpdateWindowHeader(DATABASE::"Analysis View Entry",GLEntry."Entry No.");
            UpdateEntries;
            AnalysisView."Last Entry No." := LastGLEntryNo;
            Updated := TRUE;
          END;
        END;
      END ELSE BEGIN
        CFForecastEntry.RESET;
        CFForecastEntry.LOCKTABLE;
        IF ShowProgressWindow THEN
          UpdateWindowHeader(DATABASE::"Analysis View Entry",CFForecastEntry."Entry No.");
        UpdateEntries;
        Updated := TRUE;
      END;

      IF (Which IN [Which::"Budget Entries",Which::Both]) AND
         NewAnalysisView."Include Budgets"
      THEN BEGIN
        IF LastBudgetEntryNo > AnalysisView."Last Budget Entry No." THEN BEGIN
          IF ShowProgressWindow THEN
            UpdateWindowHeader(DATABASE::"Analysis View Budget Entry",GLBudgetEntry."Entry No.");
          GLBudgetEntry.RESET;
          GLBudgetEntry.SETRANGE("Entry No.",AnalysisView."Last Budget Entry No." + 1,LastBudgetEntryNo);
          UpdateBudgetEntries(AnalysisView."Last Budget Entry No." + 1);
          AnalysisView."Last Budget Entry No." := LastBudgetEntryNo;
          Updated := TRUE;
        END;
      END;

      IF Updated THEN BEGIN
        AnalysisView."Last Date Updated" := TODAY;
        AnalysisView.MODIFY;
      END;

      IF ShowProgressWindow THEN
        Window.CLOSE;
    END;

    LOCAL PROCEDURE UpdateEntries@9();
    BEGIN
      GLSetup.GET;
      FilterIsInitialized := FALSE;
      IF AnalysisView."Account Source" = AnalysisView."Account Source"::"G/L Account" THEN
        UpdateEntriesForGLAccount
      ELSE
        UpdateEntriesForCFAccount;

      FlushAnalysisViewEntry;
    END;

    LOCAL PROCEDURE UpdateEntriesForGLAccount@8();
    VAR
      AnalysisViewGLQry@1001 : Query 410;
      EntryNo@1000 : Integer;
    BEGIN
      IF AnalysisView."Date Compression" = AnalysisView."Date Compression"::None THEN BEGIN
        UpdateEntriesForGLAccountDetailed;
        EXIT;
      END;

      AnalysisViewGLQry.SETRANGE(AnalysisViewCode,AnalysisView.Code);
      AnalysisViewGLQry.SETRANGE(EntryNo,AnalysisView."Last Entry No." + 1,LastGLEntryNo);
      IF AnalysisView."Account Filter" = '' THEN
        AnalysisViewGLQry.SETFILTER(GLAccNo,'>%1','')
      ELSE
        AnalysisViewGLQry.SETFILTER(GLAccNo,AnalysisView."Account Filter");
      IF AnalysisView."Business Unit Filter" <> '' THEN
        AnalysisViewGLQry.SETFILTER(BusinessUnitCode,AnalysisView."Business Unit Filter");

      AnalysisViewGLQry.OPEN;
      WHILE AnalysisViewGLQry.READ DO BEGIN
        IF DimSetIDInFilter(AnalysisViewGLQry.DimensionSetID,AnalysisView) THEN
          UpdateAnalysisViewEntry(
            AnalysisViewGLQry.GLAccNo,
            AnalysisViewGLQry.BusinessUnitCode,
            '',
            AnalysisViewGLQry.DimVal1,
            AnalysisViewGLQry.DimVal2,
            AnalysisViewGLQry.DimVal3,
            AnalysisViewGLQry.DimVal4,
            AnalysisViewGLQry.PostingDate,
            AnalysisViewGLQry.Amount,
            AnalysisViewGLQry.DebitAmount,
            AnalysisViewGLQry.CreditAmount,
            AnalysisViewGLQry.AmountACY,
            AnalysisViewGLQry.DebitAmountACY,
            AnalysisViewGLQry.CreditAmountACY,
            0);
        EntryNo := EntryNo + 1;
        IF ShowProgressWindow THEN
          UpdateWindowCounter(EntryNo);
      END;
      AnalysisViewGLQry.CLOSE;
    END;

    LOCAL PROCEDURE UpdateEntriesForGLAccountDetailed@14();
    VAR
      GLEntry@1001 : Record 17;
      EntryNo@1000 : Integer;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Entry No.",AnalysisView."Last Entry No." + 1,LastGLEntryNo);
        IF AnalysisView."Account Filter" <> '' THEN
          SETFILTER("G/L Account No.",AnalysisView."Account Filter");
        IF AnalysisView."Business Unit Filter" <> '' THEN
          SETFILTER("Business Unit Code",AnalysisView."Business Unit Filter");

        IF FINDSET THEN
          REPEAT
            IF DimSetIDInFilter("Dimension Set ID",AnalysisView) THEN
              UpdateAnalysisViewEntry(
                "G/L Account No.","Business Unit Code",'',
                GetDimVal(AnalysisView."Dimension 1 Code","Dimension Set ID"),
                GetDimVal(AnalysisView."Dimension 2 Code","Dimension Set ID"),
                GetDimVal(AnalysisView."Dimension 3 Code","Dimension Set ID"),
                GetDimVal(AnalysisView."Dimension 4 Code","Dimension Set ID"),
                "Posting Date",Amount,"Debit Amount","Credit Amount",
                "Additional-Currency Amount","Add.-Currency Debit Amount","Add.-Currency Credit Amount","Entry No.");
            EntryNo := EntryNo + 1;
            IF ShowProgressWindow THEN
              UpdateWindowCounter(EntryNo);
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateEntriesForCFAccount@12();
    BEGIN
      AnalysisViewEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
      AnalysisViewEntry.DELETEALL;
      AnalysisViewEntry.RESET;
      CFForecastEntry.FILTERGROUP(2);
      CFForecastEntry.SETFILTER("Cash Flow Account No.",'<>%1','');
      CFForecastEntry.FILTERGROUP(0);
      IF AnalysisView."Account Filter" <> '' THEN
        CFForecastEntry.SETFILTER("Cash Flow Account No.",AnalysisView."Account Filter");

      IF GLSetup."Global Dimension 1 Code" <> '' THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,GLSetup."Global Dimension 1 Code") THEN
          IF AnalysisViewFilter."Dimension Value Filter" <> '' THEN
            CFForecastEntry.SETFILTER("Global Dimension 1 Code",AnalysisViewFilter."Dimension Value Filter");
      IF GLSetup."Global Dimension 2 Code" <> '' THEN
        IF AnalysisViewFilter.GET(AnalysisView.Code,GLSetup."Global Dimension 2 Code") THEN
          IF AnalysisViewFilter."Dimension Value Filter" <> '' THEN
            CFForecastEntry.SETFILTER("Global Dimension 2 Code",AnalysisViewFilter."Dimension Value Filter");

      IF NOT CFForecastEntry.FIND('-') THEN
        EXIT;

      REPEAT
        IF DimSetIDInFilter(CFForecastEntry."Dimension Set ID",AnalysisView) THEN
          UpdateAnalysisViewEntry(
            CFForecastEntry."Cash Flow Account No.",
            '',
            CFForecastEntry."Cash Flow Forecast No.",
            GetDimVal(AnalysisView."Dimension 1 Code",CFForecastEntry."Dimension Set ID"),
            GetDimVal(AnalysisView."Dimension 2 Code",CFForecastEntry."Dimension Set ID"),
            GetDimVal(AnalysisView."Dimension 3 Code",CFForecastEntry."Dimension Set ID"),
            GetDimVal(AnalysisView."Dimension 4 Code",CFForecastEntry."Dimension Set ID"),
            CFForecastEntry."Cash Flow Date",
            CFForecastEntry."Amount (LCY)",
            0,0,0,0,0,
            CFForecastEntry."Entry No.");
        IF ShowProgressWindow THEN
          UpdateWindowCounter(CFForecastEntry."Entry No.");
      UNTIL CFForecastEntry.NEXT = 0;
      IF ShowProgressWindow THEN
        UpdateWindowCounter(CFForecastEntry."Entry No.");
    END;

    LOCAL PROCEDURE UpdateBudgetEntries@10(DeleteFromEntry@1000 : Integer);
    BEGIN
      AnalysisViewBudgetEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
      AnalysisViewBudgetEntry.SETFILTER("Entry No.",'>%1',DeleteFromEntry);
      AnalysisViewBudgetEntry.DELETEALL;
      AnalysisViewBudgetEntry.RESET;

      IF AnalysisView."Account Filter" <> '' THEN
        GLBudgetEntry.SETFILTER("G/L Account No.",AnalysisView."Account Filter");
      IF AnalysisView."Business Unit Filter" <> '' THEN
        GLBudgetEntry.SETFILTER("Business Unit Code",AnalysisView."Business Unit Filter");
      IF NOT GLBudgetEntry.FINDSET(TRUE) THEN
        EXIT;

      REPEAT
        IF DimSetIDInFilter(GLBudgetEntry."Dimension Set ID",AnalysisView) THEN
          UpdateAnalysisViewBudgetEntry(
            GetDimVal(AnalysisView."Dimension 1 Code",GLBudgetEntry."Dimension Set ID"),
            GetDimVal(AnalysisView."Dimension 2 Code",GLBudgetEntry."Dimension Set ID"),
            GetDimVal(AnalysisView."Dimension 3 Code",GLBudgetEntry."Dimension Set ID"),
            GetDimVal(AnalysisView."Dimension 4 Code",GLBudgetEntry."Dimension Set ID"));
        IF ShowProgressWindow THEN
          UpdateWindowCounter(GLBudgetEntry."Entry No.");
      UNTIL GLBudgetEntry.NEXT = 0;
      IF ShowProgressWindow THEN
        UpdateWindowCounter(GLBudgetEntry."Entry No.");
      FlushAnalysisViewBudgetEntry;
    END;

    LOCAL PROCEDURE UpdateAnalysisViewEntry@3(AccNo@1013 : Code[20];BusUnitCode@1014 : Code[10];CashFlowForecastNo@1015 : Code[20];DimValue1@1000 : Code[20];DimValue2@1001 : Code[20];DimValue3@1002 : Code[20];DimValue4@1003 : Code[20];PostingDate@1007 : Date;Amount@1004 : Decimal;DebitAmount@1008 : Decimal;CreditAmount@1009 : Decimal;AmountACY@1010 : Decimal;DebitAmountACY@1012 : Decimal;CreditAmountACY@1011 : Decimal;EntryNo@1016 : Integer);
    BEGIN
      IF PostingDate < AnalysisView."Starting Date" THEN BEGIN
        PostingDate := AnalysisView."Starting Date" - 1;
        IF AnalysisView."Date Compression" <> AnalysisView."Date Compression"::None THEN
          EntryNo := 0;
      END ELSE BEGIN
        PostingDate := CalculatePeriodStart(PostingDate,AnalysisView."Date Compression");
        IF PostingDate < AnalysisView."Starting Date" THEN
          PostingDate := AnalysisView."Starting Date";
        IF AnalysisView."Date Compression" <> AnalysisView."Date Compression"::None THEN
          EntryNo := 0;
      END;
      TempAnalysisViewEntry."Analysis View Code" := AnalysisView.Code;
      TempAnalysisViewEntry."Account Source" := AnalysisView."Account Source";
      TempAnalysisViewEntry."Business Unit Code" := BusUnitCode;
      TempAnalysisViewEntry."Account No." := AccNo;
      TempAnalysisViewEntry."Cash Flow Forecast No." := CashFlowForecastNo;
      TempAnalysisViewEntry."Posting Date" := PostingDate;
      TempAnalysisViewEntry."Dimension 1 Value Code" := DimValue1;
      TempAnalysisViewEntry."Dimension 2 Value Code" := DimValue2;
      TempAnalysisViewEntry."Dimension 3 Value Code" := DimValue3;
      TempAnalysisViewEntry."Dimension 4 Value Code" := DimValue4;
      TempAnalysisViewEntry."Entry No." := EntryNo;

      IF TempAnalysisViewEntry.FIND THEN BEGIN
        TempAnalysisViewEntry.Amount += Amount;
        TempAnalysisViewEntry."Debit Amount" += DebitAmount;
        TempAnalysisViewEntry."Credit Amount" += CreditAmount;
        TempAnalysisViewEntry."Add.-Curr. Amount" += AmountACY;
        TempAnalysisViewEntry."Add.-Curr. Debit Amount" += DebitAmountACY;
        TempAnalysisViewEntry."Add.-Curr. Credit Amount" += CreditAmountACY;
        TempAnalysisViewEntry.MODIFY;
      END ELSE BEGIN
        TempAnalysisViewEntry.Amount := Amount;
        TempAnalysisViewEntry."Debit Amount" := DebitAmount;
        TempAnalysisViewEntry."Credit Amount" := CreditAmount;
        TempAnalysisViewEntry."Add.-Curr. Amount" := AmountACY;
        TempAnalysisViewEntry."Add.-Curr. Debit Amount" := DebitAmountACY;
        TempAnalysisViewEntry."Add.-Curr. Credit Amount" := CreditAmountACY;
        TempAnalysisViewEntry.INSERT;
        NoOfEntries := NoOfEntries + 1;
      END;
      IF NoOfEntries >= 10000 THEN
        FlushAnalysisViewEntry;
    END;

    LOCAL PROCEDURE UpdateAnalysisViewBudgetEntry@18(DimValue1@1000 : Code[20];DimValue2@1001 : Code[20];DimValue3@1002 : Code[20];DimValue4@1003 : Code[20]);
    BEGIN
      TempAnalysisViewBudgetEntry."Analysis View Code" := AnalysisView.Code;
      TempAnalysisViewBudgetEntry."Budget Name" := GLBudgetEntry."Budget Name";
      TempAnalysisViewBudgetEntry."Business Unit Code" := GLBudgetEntry."Business Unit Code";
      TempAnalysisViewBudgetEntry."G/L Account No." := GLBudgetEntry."G/L Account No.";
      IF GLBudgetEntry.Date < AnalysisView."Starting Date" THEN
        TempAnalysisViewBudgetEntry."Posting Date" := AnalysisView."Starting Date" - 1
      ELSE BEGIN
        TempAnalysisViewBudgetEntry."Posting Date" :=
          CalculatePeriodStart(GLBudgetEntry.Date,AnalysisView."Date Compression");
        IF TempAnalysisViewBudgetEntry."Posting Date" < AnalysisView."Starting Date" THEN
          TempAnalysisViewBudgetEntry."Posting Date" := AnalysisView."Starting Date";
      END;
      TempAnalysisViewBudgetEntry."Dimension 1 Value Code" := DimValue1;
      TempAnalysisViewBudgetEntry."Dimension 2 Value Code" := DimValue2;
      TempAnalysisViewBudgetEntry."Dimension 3 Value Code" := DimValue3;
      TempAnalysisViewBudgetEntry."Dimension 4 Value Code" := DimValue4;
      TempAnalysisViewBudgetEntry."Entry No." := GLBudgetEntry."Entry No.";

      IF TempAnalysisViewBudgetEntry.FIND THEN BEGIN
        TempAnalysisViewBudgetEntry.Amount := TempAnalysisViewBudgetEntry.Amount + GLBudgetEntry.Amount;
        TempAnalysisViewBudgetEntry.MODIFY;
      END ELSE BEGIN
        TempAnalysisViewBudgetEntry.Amount := GLBudgetEntry.Amount;
        TempAnalysisViewBudgetEntry.INSERT;
        NoOfEntries := NoOfEntries + 1;
      END;
      IF NoOfEntries >= 10000 THEN
        FlushAnalysisViewBudgetEntry;
    END;

    LOCAL PROCEDURE CalculatePeriodStart@4(PostingDate@1000 : Date;DateCompression@1001 : Integer) : Date;
    VAR
      AccountingPeriod@1002 : Record 10560;
      Calendar@1040002 : Record 2000000007;
      DateFormula@1040003 : DateFormula;
    BEGIN
      IF PostingDate = CLOSINGDATE(PostingDate) THEN
        EXIT(PostingDate);

      CASE DateCompression OF
        AnalysisView."Date Compression"::Week :
          BEGIN
            EVALUATE(DateFormula,'<-CW>');
            PeriodFormMgt.CalcDate2(DateFormula,PostingDate,Calendar);
          END;
        AnalysisView."Date Compression"::Month :
          BEGIN
            EVALUATE(DateFormula,'<-CM>');
            PeriodFormMgt.CalcDate2(DateFormula,PostingDate,Calendar);
          END;
        AnalysisView."Date Compression"::Quarter :
          BEGIN
            EVALUATE(DateFormula,'<-CQ>');
            PeriodFormMgt.CalcDate2(DateFormula,PostingDate,Calendar);
          END;
        AnalysisView."Date Compression"::Year :
          BEGIN
            EVALUATE(DateFormula,'<-CY>');
            PeriodFormMgt.CalcDate2(DateFormula,PostingDate,Calendar);
          END;
      END;
      EXIT(PostingDate);
    END;

    LOCAL PROCEDURE FlushAnalysisViewEntry@5();
    BEGIN
      IF ShowProgressWindow THEN
        Window.UPDATE(6,Text011);
      IF TempAnalysisViewEntry.FINDSET THEN
        REPEAT
          AnalysisViewEntry.INIT;
          AnalysisViewEntry := TempAnalysisViewEntry;
          IF NOT AnalysisViewEntry.INSERT THEN BEGIN
            AnalysisViewEntry.FIND;
            AnalysisViewEntry.Amount :=
              AnalysisViewEntry.Amount + TempAnalysisViewEntry.Amount;
            AnalysisViewEntry."Debit Amount" :=
              AnalysisViewEntry."Debit Amount" + TempAnalysisViewEntry."Debit Amount";
            AnalysisViewEntry."Credit Amount" :=
              AnalysisViewEntry."Credit Amount" + TempAnalysisViewEntry."Credit Amount";
            AnalysisViewEntry."Add.-Curr. Amount" :=
              AnalysisViewEntry."Add.-Curr. Amount" +
              TempAnalysisViewEntry."Add.-Curr. Amount";
            AnalysisViewEntry."Add.-Curr. Debit Amount" :=
              AnalysisViewEntry."Add.-Curr. Debit Amount" +
              TempAnalysisViewEntry."Add.-Curr. Debit Amount";
            AnalysisViewEntry."Add.-Curr. Credit Amount" :=
              AnalysisViewEntry."Add.-Curr. Credit Amount" +
              TempAnalysisViewEntry."Add.-Curr. Credit Amount";
            AnalysisViewEntry.MODIFY;
          END;
        UNTIL TempAnalysisViewEntry.NEXT = 0;
      TempAnalysisViewEntry.DELETEALL;
      NoOfEntries := 0;
      IF ShowProgressWindow THEN
        Window.UPDATE(6,Text010);
    END;

    LOCAL PROCEDURE FlushAnalysisViewBudgetEntry@25();
    BEGIN
      IF ShowProgressWindow THEN
        Window.UPDATE(6,Text011);
      IF TempAnalysisViewBudgetEntry.FINDSET THEN
        REPEAT
          AnalysisViewBudgetEntry.INIT;
          AnalysisViewBudgetEntry := TempAnalysisViewBudgetEntry;
          IF NOT AnalysisViewBudgetEntry.INSERT THEN BEGIN
            AnalysisViewBudgetEntry.FIND;
            AnalysisViewBudgetEntry.Amount :=
              AnalysisViewBudgetEntry.Amount + TempAnalysisViewBudgetEntry.Amount;
            AnalysisViewBudgetEntry.MODIFY;
          END;
        UNTIL TempAnalysisViewBudgetEntry.NEXT = 0;
      TempAnalysisViewBudgetEntry.DELETEALL;
      NoOfEntries := 0;
      IF ShowProgressWindow THEN
        Window.UPDATE(6,Text010);
    END;

    LOCAL PROCEDURE GetDimVal@6(DimCode@1000 : Code[20];DimSetID@1001 : Integer) : Code[20];
    BEGIN
      IF TempDimSetEntry.GET(DimSetID,DimCode) THEN
        EXIT(TempDimSetEntry."Dimension Value Code");
      IF DimSetEntry.GET(DimSetID,DimCode) THEN
        TempDimSetEntry := DimSetEntry
      ELSE BEGIN
        TempDimSetEntry."Dimension Set ID" := DimSetID;
        TempDimSetEntry."Dimension Code" := DimCode;
        TempDimSetEntry."Dimension Value Code" := '';
      END;
      TempDimSetEntry.INSERT;
      EXIT(TempDimSetEntry."Dimension Value Code");
    END;

    LOCAL PROCEDURE InitWindow@1();
    BEGIN
      Window.OPEN(
        Text005 +
        Text006 +
        Text009 +
        Text007 +
        Text008);
      Window.UPDATE(6,Text010);
    END;

    LOCAL PROCEDURE UpdateWindowCounter@7(EntryNo@1000 : Integer);
    BEGIN
      WinUpdateCounter := WinUpdateCounter + 1;
      WinTime2 := TIME;
      IF (WinTime2 > WinTime1 + 1000) OR (EntryNo = WinLastEntryNo) THEN BEGIN
        IF WinLastEntryNo <> 0 THEN
          Window.UPDATE(3,ROUND(EntryNo / WinLastEntryNo * 10000,1));
        WinPrevEntryNo := EntryNo;
        WinTotalCounter := WinTotalCounter + WinUpdateCounter;
        IF WinTime2 <> WinTime1 THEN
          Window.UPDATE(4,ROUND(WinUpdateCounter * (1000 / (WinTime2 - WinTime1)),1));
        IF WinTime2 <> WinTime0 THEN
          Window.UPDATE(5,ROUND(WinTotalCounter * (1000 / (WinTime2 - WinTime0)),1));
        WinTime1 := WinTime2;
        WinUpdateCounter := 0;
      END;
    END;

    LOCAL PROCEDURE UpdateWindowHeader@13(TableID@1000 : Integer;EntryNo@1001 : Integer);
    VAR
      Object@1002 : Record 2000000001;
    BEGIN
      WinLastEntryNo := EntryNo;
      WinPrevEntryNo := 0;
      WinTotalCounter := 0;
      Object.GET(Object.Type::Table,'',TableID);
      Window.UPDATE(1,AnalysisView.Code);
      Window.UPDATE(2,Object.Name);
      Window.UPDATE(3,0);
      Window.UPDATE(4,0);
      Window.UPDATE(5,0);
      WinTime0 := TIME;
      WinTime1 := WinTime0;
      WinTime2 := WinTime0;
    END;

    PROCEDURE SetLastBudgetEntryNo@16(NewLastBudgetEntryNo@1000 : Integer);
    VAR
      AnalysisView2@1001 : Record 363;
    BEGIN
      AnalysisView.SETRANGE("Last Budget Entry No.",NewLastBudgetEntryNo + 1,2147483647);
      AnalysisView.SETRANGE("Include Budgets",TRUE);
      IF AnalysisView.FINDSET(TRUE,TRUE) THEN
        REPEAT
          AnalysisView2 := AnalysisView;
          AnalysisView2."Last Budget Entry No." := NewLastBudgetEntryNo;
          AnalysisView2.MODIFY;
        UNTIL AnalysisView.NEXT = 0;
    END;

    LOCAL PROCEDURE IsValueIncludedInFilter@17(DimValue@1002 : Code[20];DimFilter@1000 : Code[250]) : Boolean;
    BEGIN
      WITH TempDimBuf DO BEGIN
        RESET;
        DELETEALL;
        INIT;
        "Dimension Value Code" := DimValue;
        INSERT;
        SETFILTER("Dimension Value Code",DimFilter);
        EXIT(FINDFIRST);
      END;
    END;

    PROCEDURE DimSetIDInFilter@2(DimSetID@1000 : Integer;VAR AnalysisView@1002 : Record 363) : Boolean;
    VAR
      InFilters@1001 : Boolean;
    BEGIN
      IF NOT FilterIsInitialized THEN BEGIN
        TempFiterDimEntryBuffer.DELETEALL;
        FilterIsInitialized := TRUE;
        AnalysisViewFilter.SETRANGE("Analysis View Code",AnalysisView.Code);
        FiltersExist := NOT AnalysisViewFilter.ISEMPTY;
      END;
      IF NOT FiltersExist THEN
        EXIT(TRUE);

      IF TempFiterDimEntryBuffer.GET(DimSetID) THEN  // cashed value?
        EXIT(TempFiterDimEntryBuffer."Dimension Entry No." <> 0);

      InFilters := TRUE;
      IF AnalysisViewFilter.FINDSET THEN
        REPEAT
          IF DimSetEntry.GET(DimSetID,AnalysisViewFilter."Dimension Code") THEN
            InFilters :=
              InFilters AND IsValueIncludedInFilter(DimSetEntry."Dimension Value Code",AnalysisViewFilter."Dimension Value Filter")
          ELSE
            InFilters :=
              InFilters AND IsValueIncludedInFilter('',AnalysisViewFilter."Dimension Value Filter");
        UNTIL (AnalysisViewFilter.NEXT = 0) OR NOT InFilters;
      TempFiterDimEntryBuffer."No." := DimSetID;
      IF InFilters THEN
        TempFiterDimEntryBuffer."Dimension Entry No." := 1
      ELSE
        TempFiterDimEntryBuffer."Dimension Entry No." := 0;
      TempFiterDimEntryBuffer.INSERT;
      EXIT(InFilters);
    END;

    BEGIN
    END.
  }
}

