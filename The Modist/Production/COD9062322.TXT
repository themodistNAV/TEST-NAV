OBJECT Codeunit 9062322 Panel Response
{
  OBJECT-PROPERTIES
  {
    Date=18/07/16;
    Time=12:37:32 PM;
    Version List=NA2016.16.1;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CASE (ActiveClientType) OF
              ActiveSession."Client Type"::"Windows Client":
                HandleWin(PanelCode, EventArgs);
              ActiveSession."Client Type"::"Web Client":
                HandleWeb(PanelCode, WebSource, WebName, WebParameters);
            END;
          END;

  }
  CODE
  {
    VAR
      ActiveSession@1000000012 : Record 2000000110;
      Panel@1000000001 : Record 9062363;
      PanelData@1000000011 : Record 9062432;
      PanelLink@1000000017 : Record 9062364;
      PanelMenuItem@1000000015 : Record 9062445;
      PanelEvent@1000000005 : Record 9062369;
      PanelEventArgs@1000000000 : Record 9062370;
      TileGroup@1000000006 : Record 9062366;
      Tile@1000000004 : Record 9062367;
      PanelToolkit@1000000010 : Codeunit 9062320;
      SmartFilterManagement@1000000014 : Codeunit 9062231;
      EventArgs@1000000016 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.PanelEventArgs";
      PanelCode@1000000002 : Code[20];
      ActiveClientType@1000000003 : Integer;
      WebSource@1000000007 : Text;
      WebName@1000000008 : Text;
      WebParameters@1000000009 : Text;

    PROCEDURE "--- General ---"@1000000002();
    BEGIN
    END;

    PROCEDURE InitialiseWin@1000000043(pPanelCode@1000000003 : Code[20];pEventArgs@1000000002 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.PanelEventArgs");
    BEGIN
      //DOC NA2015.4 - Initialising (for Windows control)
      //  -> pPanelCode: Panel code
      //  -> pEventArgs: Event arguments

      ActiveClientType := ActiveSession."Client Type"::"Windows Client";

      PanelCode := pPanelCode;
      EventArgs := pEventArgs;
    END;

    PROCEDURE InitialiseWeb@1000000039(pPanelCode@1000000003 : Code[20];pSource@1000000002 : Text;pName@1000000001 : Text;pParameters@1000000000 : Text);
    BEGIN
      //DOC NA2015.4 - Initialising (for web control)
      //  -> pPanelCode: Panel code
      //  -> pSource: Source
      //  -> pName: Name
      //  -> pParameters: Parameters

      ActiveClientType := ActiveSession."Client Type"::"Web Client";

      PanelCode := pPanelCode;
      WebSource := pSource;
      WebName := pName;
      WebParameters := pParameters;
    END;

    LOCAL PROCEDURE HandleWin@1000000004(pPanelCode@1000000003 : Code[20];pEventArgs@1000000000 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.PanelEventArgs") : Boolean;
    BEGIN
      //DOC NA2015.4 - Handing (for Windows control)
      //  -> pPanelCode: Panel code
      //  -> pEventArgs: Event arguments
      //  <- TRUE if the event has been handled, FALSE if not

      PanelCode := pPanelCode;
      EventArgs := pEventArgs;

      PanelEventArgs.INIT();
      PanelEventArgs.VALIDATE("Event Type", EventArgs.EventTypeInteger);
      PanelEventArgs.VALIDATE("Sender Name", EventArgs.SenderName);
      PanelEventArgs."Parameter 1" := EventArgs.Parameters.Parameter1;
      PanelEventArgs."Parameter 2" := EventArgs.Parameters.Parameter2;
      PanelEventArgs."Parameter 3" := EventArgs.Parameters.Parameter3;
      PanelEventArgs."Parameter 4" := EventArgs.Parameters.Parameter4;
      PanelEventArgs."Parameter 5" := EventArgs.Parameters.Parameter5;
      PanelEventArgs."Parameter 6" := EventArgs.Parameters.Parameter6;
      PanelEventArgs."Panel Data ID" := EventArgs.Parameters.PanelDataId;

      FindSender();
      FindEvent();
      FindMenuItem();

      Panel.CopyParametersFromPanelEventArgs(PanelEventArgs);

      IF (Panel.Code <> '') THEN
      BEGIN
        IF ( NOT (PanelEventArgs.Handled)) THEN
          HandleEvent();
        IF ( NOT (PanelEventArgs.Handled)) THEN
          HandleDefaultEvent();
      END;

      EXIT(PanelEventArgs.Handled);
    END;

    LOCAL PROCEDURE HandleEvent@1000000008();
    BEGIN
      //DOC NA2015.1 - Handling an event

      IF (PanelEventArgs."Menu Item Found") THEN
        PanelEventArgs."Action Type" := PanelMenuItem."Action Type"
      ELSE
        PanelEventArgs."Action Type" := PanelEvent."Action Type";

      CASE (PanelEventArgs."Action Type") OF

        // General Actions
        PanelEvent."Action Type"::Refresh:
          RefreshAction();
        PanelEvent."Action Type"::"Run Object":
          RunObjectAction();
        PanelEvent."Action Type"::"Open Panel":
          OpenPanelAction();
        PanelEvent."Action Type"::Back:
          BackAction();
        PanelEvent."Action Type"::Hyperlink:
          HyperlinkAction();
        PanelEvent."Action Type"::"Run Quick Report":
          RunQuickReportAction();
        PanelEvent."Action Type"::"Open Planning Board":
          OpenPlanningBoardAction();
        PanelEvent."Action Type"::"Run Questionnaire":
          RunQuestionnaireAction();
        PanelEvent."Action Type"::"Run Checklist":
          RunChecklistAction();

        // Panel Actions
        PanelEvent."Action Type"::"Edit Panels":
          EditPanelsAction();
        PanelEvent."Action Type"::"Edit Panel":
          EditPanelAction();
        PanelEvent."Action Type"::"Copy Panel":
          CopyPanelAction();
        PanelEvent."Action Type"::"Reset Panel":
          ResetPanelAction();
        PanelEvent."Action Type"::"Apply Palette":
          ApplyPaletteAction();

        // Tile Group Actions
        PanelEvent."Action Type"::"Edit Tile Groups":
          EditTileGroupsAction();
        PanelEvent."Action Type"::"New Tile Group":
          NewTileGroupAction();
        PanelEvent."Action Type"::"Delete Tile Group":
          DeleteTileGroupAction();
        PanelEvent."Action Type"::"Copy Tile Group":
          CopyTileGroupAction();
        PanelEvent."Action Type"::"Show Tile Groups":
          ShowTileGroupsAction();
        PanelEvent."Action Type"::"Hide Tile Group":
          HideTileGroupAction();
        PanelEvent."Action Type"::"Reset Tile Groups":
          ResetTileGroupAction();

        // Tile Actions
        PanelEvent."Action Type"::"Edit Tiles":
          EditTilesAction();
        PanelEvent."Action Type"::"Edit Tile":
          EditTileAction();
        PanelEvent."Action Type"::"New Tile":
          NewTileAction();
        PanelEvent."Action Type"::"Delete Tile":
          DeleteTileAction();
        PanelEvent."Action Type"::"Copy Tile":
          CopyTileAction();
        PanelEvent."Action Type"::"Show Tiles":
          ShowTilesAction();
        PanelEvent."Action Type"::"Hide Tile":
          HideTileAction();
        PanelEvent."Action Type"::"Load Image from Library":
          LoadImageFromLibraryAction();

        // Panel Link Actions
        PanelEvent."Action Type"::"Edit Links":
          EditLinksAction();
        PanelEvent."Action Type"::"Edit Link":
          EditLinkAction();
        PanelEvent."Action Type"::"New Link":
          NewLinkAction();
        PanelEvent."Action Type"::"Delete Link":
          DeleteLinkAction();
        PanelEvent."Action Type"::"Copy Link":
          CopyLinkAction();
        PanelEvent."Action Type"::"Show Links":
          ShowLinksAction();
        PanelEvent."Action Type"::"Hide Link":
          HideLinkAction();

      END;
    END;

    LOCAL PROCEDURE HandleDefaultEvent@1000000010();
    BEGIN
      //DOC NA2015.1 - Handing default event

      IF ( NOT (PanelEventArgs."Sender Found")) THEN
        EXIT;

      CASE (PanelEventArgs."Sender Table ID") OF
        DATABASE::Tile:
          CASE (PanelEventArgs."Event Type") OF
            PanelEvent.Type::Click:
              TileClick();
            PanelEvent.Type::"2":
              TileDrop();
          END;
      END;
    END;

    PROCEDURE GetPanelEventArgs@1000000011(VAR pPanelEventArgs@1000000000 : Record 9062370);
    BEGIN
      //DOC NC2015.1 - Returning panel event args record
      //  <> pPanelEventArgs; Target record

      pPanelEventArgs := PanelEventArgs;
    END;

    PROCEDURE "--- Searching ---"@1000000055();
    BEGIN
    END;

    LOCAL PROCEDURE FindSender@1000000005();
    BEGIN
      //DOC NA2015.1 - Trying to find a sender

      CLEAR(Panel);
      CLEAR(TileGroup);
      CLEAR(Tile);
      CLEAR(PanelLink);
      CLEAR(PanelData);

      IF ( NOT (PanelEventArgs."Sender Found")) THEN
      BEGIN
        Panel.RESET();
        Panel.SETCURRENTKEY("Control Name");
        Panel.SETRANGE("Control Name", PanelEventArgs."Sender Name");
        PanelEventArgs."Sender Found" := Panel.FINDFIRST();
        IF (PanelEventArgs."Sender Found") THEN
        BEGIN
          PanelEventArgs."Sender Table ID" := DATABASE::Panel;
          PanelEventArgs."Sender Parent Code" := Panel.Code;
        END
        ELSE
          CLEAR(Panel);
      END;

      IF ((Panel.Code = '') AND (PanelCode <> '')) THEN
        Panel.GET(PanelCode);

      IF ( NOT (PanelEventArgs."Sender Found")) THEN
      BEGIN
        Tile.RESET();
        Tile.SETCURRENTKEY("Control Name");
        Tile.SETRANGE("Control Name", PanelEventArgs."Sender Name");
        PanelEventArgs."Sender Found" := Tile.FINDFIRST();
        IF (PanelEventArgs."Sender Found") THEN
        BEGIN
          IF (Panel.GET(Tile."Panel Code")) THEN;
          IF ( NOT (TileGroup.GET(Tile."Tile Group ID"))) THEN
            CLEAR(TileGroup);
          PanelEventArgs."Sender Table ID" := DATABASE::Tile;
          PanelEventArgs."Sender Parent Code" := Tile."Panel Code";
          PanelEventArgs."Sender Parent ID" := Tile.ID;
        END
        ELSE
          CLEAR(Tile);
      END;

      IF ( NOT (PanelEventArgs."Sender Found")) THEN
      BEGIN
        PanelLink.RESET();
        PanelLink.SETCURRENTKEY("Control Name");
        PanelLink.SETRANGE("Control Name", PanelEventArgs."Sender Name");
        PanelEventArgs."Sender Found" := PanelLink.FINDFIRST();
        IF (PanelEventArgs."Sender Found") THEN
        BEGIN
          IF (Panel.GET(PanelLink."Panel Code")) THEN;
          PanelEventArgs."Sender Table ID" := DATABASE::"Panel Link";
          PanelEventArgs."Sender Parent Code" := PanelLink."Panel Code";
          PanelEventArgs."Sender Parent ID" := PanelLink.ID;
        END
        ELSE
          CLEAR(Tile);
      END;

      IF ( NOT (PanelEventArgs."Sender Found")) THEN
      BEGIN
        PanelData.RESET();
        PanelData.SETRANGE("Panel Code", Panel.Code);
        PanelEventArgs."Sender Found" := PanelData.FINDFIRST();
        IF (PanelEventArgs."Sender Found") THEN
        BEGIN
          PanelEventArgs."Sender Table ID" := DATABASE::"Panel Data";
          PanelEventArgs."Sender Parent Code" := PanelData."Panel Code";
          PanelEventArgs."Sender Parent ID" := PanelData.ID;
        END;
      END;
    END;

    LOCAL PROCEDURE FindEvent@1000000054();
    VAR
      lEventType@1000000000 : Integer;
    BEGIN
      //DOC NA2015.1 - Finding an event

      IF ( NOT (PanelEventArgs."Sender Found")) THEN
        EXIT;

      IF (PanelEventArgs."Event Type" <> PanelEventArgs."Event Type"::"Menu Click") THEN
        lEventType := PanelEventArgs."Event Type"
      ELSE
        lEventType := PanelEventArgs."Event Type"::Click;

      PanelEvent.RESET();
      PanelEvent.SETRANGE("Parent Table ID", PanelEventArgs."Sender Table ID");
      PanelEvent.SETRANGE("Parent Code", PanelEventArgs."Sender Parent Code");
      PanelEvent.SETRANGE("Parent ID", PanelEventArgs."Sender Parent ID");
      PanelEvent.SETRANGE(Type, PanelEventArgs."Event Type");
      PanelEventArgs."Event Found" := PanelEvent.FINDFIRST();
    END;

    LOCAL PROCEDURE FindMenuItem@1000000000();
    VAR
      lMenuEventArgs@1000000001 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.PanelMenuEventArgs";
    BEGIN
      //DOC NA2015.1 - Trying to find menu item

      IF (PanelEventArgs."Event Type" <> PanelEventArgs."Event Type"::"Menu Click") THEN
        EXIT;

      lMenuEventArgs := EventArgs;

      PanelMenuItem.RESET();
      PanelMenuItem.SETCURRENTKEY("Control Name");
      PanelMenuItem.SETRANGE("Control Name", lMenuEventArgs.MenuName);
      PanelEventArgs."Menu Item Found" := PanelMenuItem.FINDFIRST();
    END;

    LOCAL PROCEDURE FindTileProperty@1000000047(pPropertyId@1000000000 : Integer;VAR pPanelProperty@1000000001 : Record 9062433) : Boolean;
    VAR
      lPanelProperty@1000000003 : Record 9062433;
      lResult@1000000002 : Boolean;
    BEGIN
      //DOC NA2015.1 - Trying to find a property for tile
      //  -> pPropertyId: Property ID
      //  <> pPanelProperty: Target panel property
      //  <- Property found / not

      lPanelProperty.RESET();
      lPanelProperty.SETRANGE("Parent Table ID", DATABASE::Tile);
      lPanelProperty.SETRANGE("Parent Code", Tile."Panel Code");
      lPanelProperty.SETRANGE("Parent ID", Tile.ID);
      lPanelProperty.SETRANGE("Property ID", pPropertyId);
      lResult := lPanelProperty.FINDFIRST();

      IF (lResult) THEN
        pPanelProperty := lPanelProperty;

      EXIT(lResult);
    END;

    PROCEDURE "--- General Actions ---"@1000000034();
    BEGIN
    END;

    LOCAL PROCEDURE RefreshAction@1000000024();
    BEGIN
      //DOC NC2015.1 - Refreshing tile control (action)

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE RunObjectAction@1000000058();
    VAR
      lRunWithRecordRef@1000000000 : Codeunit 9062239;
      lTableFilter@1000000001 : Text;
    BEGIN
      //DOC NC2015.1 - Running an object (action)

      IF (PanelEvent."Object ID" = 0) THEN
        EXIT;

      lTableFilter := PanelEvent."Table Filter";
      lTableFilter := PanelToolkit.ApplyPanelParameters(Panel, lTableFilter);
      lTableFilter := SmartFilterManagement.ApplySmartFilters(lTableFilter);

      CASE (PanelEvent."Object Type") OF
        PanelEvent."Object Type"::Report:
          IF (PanelEvent."Table ID" <> 0) THEN
            lRunWithRecordRef.RunReportForTableView(PanelEvent."Table ID", lTableFilter, PanelEvent."Object ID",
              PanelEvent."Run Modally", TRUE, FALSE)
          ELSE
            IF (PanelEvent."Run with Event Arguments") THEN
            BEGIN
              IF (PanelEvent."Run Modally") THEN
                REPORT.RUNMODAL(PanelEvent."Object ID", TRUE, FALSE, PanelEventArgs)
              ELSE
                REPORT.RUN(PanelEvent."Object ID", TRUE, FALSE, PanelEventArgs);
            END
            ELSE
            BEGIN
              IF (PanelEvent."Run Modally") THEN
                REPORT.RUNMODAL(PanelEvent."Object ID", TRUE, FALSE)
              ELSE
                REPORT.RUN(PanelEvent."Object ID", TRUE, FALSE);
            END;
        PanelEvent."Object Type"::Codeunit:
          IF (PanelEvent."Table ID" <> 0) THEN
            lRunWithRecordRef.RunCodeunitForTableView(PanelEvent."Table ID", lTableFilter, PanelEvent."Object ID")
          ELSE
            IF (PanelEvent."Run with Event Arguments") THEN
              CODEUNIT.RUN(PanelEvent."Object ID", PanelEventArgs)
            ELSE
              CODEUNIT.RUN(PanelEvent."Object ID");
        PanelEvent."Object Type"::XMLport:
          IF (PanelEvent."Table ID" <> 0) THEN
            lRunWithRecordRef.RunXmlPortForTableView(PanelEvent."Table ID", lTableFilter, PanelEvent."Object ID",
              TRUE, (PanelEvent."XMLport Direction" = PanelEvent."XMLport Direction"::Import))
          ELSE
            IF (PanelEvent."Run with Event Arguments") THEN
              XMLPORT.RUN(PanelEvent."Object ID", TRUE, (PanelEvent."XMLport Direction" = PanelEvent."XMLport Direction"::Import), PanelEventArgs)
            ELSE
              XMLPORT.RUN(PanelEvent."Object ID", TRUE, (PanelEvent."XMLport Direction" = PanelEvent."XMLport Direction"::Import));
        PanelEvent."Object Type"::Page:
          IF (PanelEvent."Table ID" <> 0) THEN
            lRunWithRecordRef.RunPageForTableView(PanelEvent."Table ID", lTableFilter, PanelEvent."Object ID",
              PanelEvent."Run Modally")
          ELSE
            IF (PanelEvent."Run with Event Arguments") THEN
            BEGIN
              IF (PanelEvent."Run Modally") THEN
                PAGE.RUNMODAL(PanelEvent."Object ID", PanelEventArgs)
              ELSE
                PAGE.RUN(PanelEvent."Object ID", PanelEventArgs);
            END
            ELSE
            BEGIN
              IF (PanelEvent."Run Modally") THEN
                PAGE.RUNMODAL(PanelEvent."Object ID")
              ELSE
                PAGE.RUN(PanelEvent."Object ID");
            END;
      END;

      PanelEventArgs.Handled := TRUE;
      //DOC NA2016.16.1 PC 18/07/2016 >>>
      //PanelEventArgs."Refresh Interface" := FALSE;
      //DOC NA2016.16.1 PC 18/07/2016 <<<
    END;

    LOCAL PROCEDURE OpenPanelAction@1000000009();
    VAR
      lPanel@1000000000 : Record 9062363;
    BEGIN
      //DOC NA2015.4 - Opening panel (action)

      IF (PanelEvent."Panel Code" <> '') THEN
      BEGIN
        IF (PanelEvent."Panel on New Page") THEN
        BEGIN
          IF (lPanel.GET(PanelEvent."Panel Code")) THEN
          BEGIN
            lPanel.FILTERGROUP(3);
            lPanel.SETRECFILTER();
            lPanel.FILTERGROUP(0);
            lPanel.CopyParametersFromPanelEventArgs(PanelEventArgs);
            PAGE.RUN(PAGE::Panel, lPanel);
          END;
        END
        ELSE
          PanelEventArgs."Panel Code" := PanelEvent."Panel Code";
        PanelEventArgs.Handled := TRUE;
      END;
    END;

    LOCAL PROCEDURE BackAction@1000000046();
    BEGIN
      //DOC NA2015.1 - Back (action)

      PanelEventArgs.Handled := TRUE;
    END;

    LOCAL PROCEDURE HyperlinkAction@1000000044();
    BEGIN
      //DOC NA2016.10 - Hyperlink (action)

      IF (PanelEvent."Hyperlink URL" <> '') THEN
      BEGIN
        HYPERLINK(PanelEvent."Hyperlink URL");
        PanelEventArgs.Handled := TRUE;
      END;
    END;

    LOCAL PROCEDURE RunQuickReportAction@1000000066();
    VAR
      lQuickReportHeader@1000000001 : Record 9062697;
      lQuickReportInteraction@1000000000 : Codeunit 9062543;
    BEGIN
      //DOC NA2016.14 - Running quick report (action)

      IF (PanelEvent."Quick Report Code" <> '') THEN
      BEGIN
        lQuickReportHeader.GET(PanelEvent."Quick Report Code");
        lQuickReportInteraction.Show(lQuickReportHeader, TRUE);
        PanelEventArgs.Handled := TRUE;
      END;
    END;

    LOCAL PROCEDURE OpenPlanningBoardAction@1000000067();
    VAR
      lPlanningBoardHeader@1000000000 : Record 9062337;
    BEGIN
      //DOC NA2016.14 - Open planning board (action)

      IF (PanelEvent."Planning Board Code" <> '') THEN
      BEGIN
        lPlanningBoardHeader.GET(PanelEvent."Planning Board Code");
        lPlanningBoardHeader.Show();
        PanelEventArgs.Handled := TRUE;
      END;
    END;

    LOCAL PROCEDURE RunQuestionnaireAction@1000000048();
    VAR
      lQuestionnaireTemplate@1000000001 : Record 9062702;
      lQuestionnaire@1000000002 : Record 9062704;
      lQuestManagement@1000000000 : Codeunit 9062540;
    BEGIN
      //DOC NA2016.14 - Running a questionnaire (action)

      IF (PanelEvent."Questionnaire Template Code" <> '') THEN
      BEGIN
        lQuestionnaireTemplate.GET(PanelEvent."Questionnaire Template Code");
        lQuestManagement.CreateInstanceOfQuest(lQuestionnaireTemplate, lQuestionnaire);
        PAGE.RUN(PAGE::"Questionnaire Web Control", lQuestionnaire);
        PanelEventArgs.Handled := TRUE;
      END;
    END;

    LOCAL PROCEDURE RunChecklistAction@1000000056();
    VAR
      lChecklistTemplate@1000000000 : Record 9062436;
      lChecklistHeader@1000000001 : Record 9062434;
      lEnablementUser@1000000002 : Record 9062729;
    BEGIN
      //DOC NA2016.14 NM 09/03/2016 - Running a Checklist (action)

      IF (PanelEvent."Checklist Template Type" <> '') THEN
      BEGIN
        lChecklistTemplate.GET(PanelEvent."Checklist Template Type");
        lChecklistTemplate.CreateNewChecklist(lChecklistHeader);
        lEnablementUser.SETRANGE(lEnablementUser."User ID", USERID);
        lEnablementUser.FINDFIRST;
        lChecklistHeader."Assigned to Contact No" := lEnablementUser."Contact No.";
        lChecklistHeader.MODIFY;
        PAGE.RUN(PAGE::"Checklist Card", lChecklistHeader);
        PanelEventArgs.Handled := TRUE;
      END;
    END;

    PROCEDURE "--- Panel Actions ---"@1000000014();
    BEGIN
    END;

    LOCAL PROCEDURE EditPanelsAction@1000000007();
    VAR
      lPanel@1000000000 : Record 9062363;
    BEGIN
      //DOC NA2015.1 - Viewing panels (action)

      lPanel.RESET();
      PAGE.RUN(0, lPanel);
    END;

    LOCAL PROCEDURE EditPanelAction@1000000006();
    VAR
      lPanel@1000000000 : Record 9062363;
    BEGIN
      //DOC NA2015.1 - Editing panel (action)

      lPanel := Panel;
      lPanel.SETRECFILTER();

      PAGE.RUNMODAL(PAGE::"Panel Card", lPanel);
    END;

    LOCAL PROCEDURE CopyPanelAction@1000000033();
    VAR
      lCopyPanel@1000000000 : Report 9062242;
    BEGIN
      //DOC NA2015.1 - Copying panel (action)

      CLEAR(lCopyPanel);
      lCopyPanel.SetFrom(Panel.Code);
      lCopyPanel.RUNMODAL();

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE ResetPanelAction@1000000035();
    BEGIN
      //DOC NA2015.1 - Resetting panel (action)

      Panel.RemovePersonalisation(TRUE, TRUE);

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE ApplyPaletteAction@1000000017();
    BEGIN
      //DOC NA2015.4 - Applying pallette to a panel (action)

      PanelToolkit.ApplyPaletteSelected(Panel);

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    PROCEDURE "--- Tile Group Actions ---"@1000000020();
    BEGIN
    END;

    LOCAL PROCEDURE EditTileGroupsAction@1000000026();
    VAR
      lTileGroup@1000000000 : Record 9062366;
    BEGIN
      //DOC NA2015.1 - Editing tile groups (action)

      IF (Panel.Code = '') THEN
        EXIT;

      lTileGroup.RESET();
      lTileGroup.FILTERGROUP(2);
      lTileGroup.SETRANGE("Panel Code", Panel.Code);
      lTileGroup.FILTERGROUP(0);

      PAGE.RUNMODAL(PAGE::"Tile Groups", lTileGroup);
    END;

    LOCAL PROCEDURE NewTileGroupAction@1000000025();
    VAR
      eConfirmation@1000000000 : TextConst 'ENU=Do you want to create a new group?;ENG=Do you want to create a new group?';
      lTileGroup@1000000001 : Record 9062366;
    BEGIN
      //DOC NA2015.1 - Creating a new tile group (action)

      IF (Panel.Code = '') THEN
        EXIT;

      IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
        EXIT;

      CLEAR(lTileGroup);
      lTileGroup.INIT();
      lTileGroup.VALIDATE("Panel Code", Panel.Code);
      lTileGroup.VALIDATE(Sequence, lTileGroup.NewSequence());
      lTileGroup.INSERT(TRUE);

      COMMIT;

      lTileGroup.RESET();
      lTileGroup.FILTERGROUP(2);
      lTileGroup.SETRANGE("Panel Code", Panel.Code);
      lTileGroup.FILTERGROUP(0);
      PAGE.RUNMODAL(PAGE::"Tile Groups", lTileGroup);

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE DeleteTileGroupAction@1000000023();
    VAR
      eConfirmation@1000000000 : TextConst 'ENU=Do you want to delete tile group "%1"?;ENG=Do you want to delete tile group "%1"?';
    BEGIN
      //DOC NA2015.1 - Deleting tile group (action)

      IF (TileGroup.ID = 0) THEN
        EXIT;

      IF ( NOT (CONFIRM(eConfirmation, TRUE, TileGroup.Text))) THEN
        EXIT;

      TileGroup.DELETE(TRUE);

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE CopyTileGroupAction@1000000049();
    VAR
      lCopyTileGroup@1000000000 : Report 9062244;
    BEGIN
      //DOC NA2015.1 - Copying tile group (action)

      IF (Panel.Code = '') THEN
        EXIT;

      CLEAR(lCopyTileGroup);
      lCopyTileGroup.SetFrom(Panel.Code, TileGroup.ID);
      lCopyTileGroup.RUNMODAL();

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE ShowTileGroupsAction@1000000015();
    VAR
      lTileGroup@1000000000 : Record 9062366;
      lPanelPersonalisationTmp@1000000001 : TEMPORARY Record 9062372;
    BEGIN
      //DOC NA2015.1 - Showing tile groups (action)

      lPanelPersonalisationTmp.RESET();
      lPanelPersonalisationTmp.DELETEALL();

      lTileGroup.RESET();
      lTileGroup.SETRANGE("Panel Code", Panel.Code);
      IF (lTileGroup.FINDSET()) THEN
      REPEAT
        lTileGroup.InitialisePersonalisation(lPanelPersonalisationTmp);
        lPanelPersonalisationTmp.Name := lTileGroup.Text;
        lPanelPersonalisationTmp.Blocked := lTileGroup.IsBlocked();
        lPanelPersonalisationTmp.INSERT();
      UNTIL (lTileGroup.NEXT() = 0);

      IF (PAGE.RUNMODAL(PAGE::"Personalise Panel", lPanelPersonalisationTmp) = ACTION::LookupOK) THEN
      BEGIN
        lPanelPersonalisationTmp.RESET();
        IF (lPanelPersonalisationTmp.FINDSET()) THEN
        REPEAT
          IF (lTileGroup.GET(lPanelPersonalisationTmp."Parent Code", lPanelPersonalisationTmp."Parent ID")) THEN
            lTileGroup.SetBlocked(lPanelPersonalisationTmp.Blocked);
        UNTIL (lPanelPersonalisationTmp.NEXT() = 0);
        PanelEventArgs."Refresh Interface" := TRUE;
      END;

      lPanelPersonalisationTmp.RESET();
      lPanelPersonalisationTmp.DELETEALL();
    END;

    LOCAL PROCEDURE HideTileGroupAction@1000000001();
    BEGIN
      //DOC NA2015.1 - Hiding tile group (action)

      IF (TileGroup.ID = 0) THEN
        EXIT;

      TileGroup.SetBlocked(TRUE);

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE ResetTileGroupAction@1000000019();
    BEGIN
      //DOC NA2015.1 - Resetting tile group (action)

      IF (TileGroup.ID = 0) THEN
        EXIT;

      TileGroup.RemovePersonalisation(TRUE, TRUE);

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    PROCEDURE "--- Tile Actions ---"@1000000041();
    BEGIN
    END;

    LOCAL PROCEDURE EditTilesAction@1000000021();
    VAR
      lTile@1000000000 : Record 9062367;
    BEGIN
      //DOC NA2015.1 - Viewing tiles (action)

      lTile.RESET();
      lTile.SETCURRENTKEY("Panel Code", Sequence);
      lTile.FILTERGROUP(2);
      lTile.SETRANGE("Panel Code", Panel.Code);
      lTile.FILTERGROUP(0);

      PAGE.RUN(0, lTile);
    END;

    LOCAL PROCEDURE EditTileAction@1000000027();
    VAR
      lTile@1000000000 : Record 9062367;
    BEGIN
      //DOC NA2015.1 - Editing a tile (action)

      IF (Tile.ID = 0) THEN
        EXIT;

      lTile := Tile;
      lTile.SETRECFILTER();

      PAGE.RUNMODAL(PAGE::"Tile Card", lTile);
    END;

    LOCAL PROCEDURE NewTileAction@1000000028();
    VAR
      eConfirmation@1000000000 : TextConst 'ENU=Do you want to create a new tile?;ENG=Do you want to create a new tile?';
      lTile@1000000001 : Record 9062367;
    BEGIN
      //DOC NA2015.1 - Creating a new tile (action)

      IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
        EXIT;

      lTile.INIT();
      lTile.VALIDATE("Panel Code", Panel.Code);
      lTile.VALIDATE("Tile Group ID", TileGroup.ID);
      lTile.VALIDATE(Sequence, lTile.NewSequence());
      lTile.INSERT(TRUE);

      COMMIT;

      PAGE.RUNMODAL(PAGE::"Tile Card", lTile);

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE DeleteTileAction@1000000051();
    VAR
      eConfirmation@1000000000 : TextConst 'ENU=Do you want to delete tile "%1"?;ENG=Do you want to delete tile "%1"?';
    BEGIN
      //DOC NA2015.1 - Deleting a tile (action)

      IF (Tile.ID = 0) THEN
        EXIT;

      IF ( NOT (CONFIRM(eConfirmation, TRUE, Tile.Text))) THEN
        EXIT;

      Tile.DELETE(TRUE);

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE CopyTileAction@1000000052();
    VAR
      lCopyTile@1000000000 : Report 9062245;
    BEGIN
      //DOC NA2015.1 - Copying a tile (action)

      CLEAR(lCopyTile);
      lCopyTile.SetFrom(Panel.Code, Tile.ID);
      lCopyTile.RUNMODAL();

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE ShowTilesAction@1000000053();
    VAR
      lTile@1000000001 : Record 9062367;
      lPanelPersonalisationTmp@1000000000 : TEMPORARY Record 9062372;
    BEGIN
      //DOC NA2015.1 - Showing tiles (action)

      lPanelPersonalisationTmp.RESET();
      lPanelPersonalisationTmp.DELETEALL();

      lTile.RESET();
      lTile.SETRANGE("Panel Code", Panel.Code);
      IF (TileGroup.ID <> 0) THEN
      BEGIN
        lTile.SETCURRENTKEY("Panel Code", "Tile Group ID", Sequence);
        lTile.SETRANGE("Tile Group ID", TileGroup.ID)
      END
      ELSE
        lTile.SETCURRENTKEY("Panel Code", Sequence);
      IF (lTile.FINDSET()) THEN
      REPEAT
        lTile.InitialisePersonalisation(lPanelPersonalisationTmp);
        lPanelPersonalisationTmp.Name := lTile.Text;
        lPanelPersonalisationTmp.Blocked := lTile.GetBlocked();
        lPanelPersonalisationTmp.INSERT();
      UNTIL (lTile.NEXT() = 0);

      IF (PAGE.RUNMODAL(PAGE::"Personalise Panel", lPanelPersonalisationTmp) = ACTION::LookupOK) THEN
      BEGIN
        lPanelPersonalisationTmp.RESET();
        IF (lPanelPersonalisationTmp.FINDSET()) THEN
        REPEAT
          IF (lTile.GET(lPanelPersonalisationTmp."Parent Code", lPanelPersonalisationTmp."Parent ID")) THEN
            lTile.SetBlocked(lPanelPersonalisationTmp.Blocked);
        UNTIL (lPanelPersonalisationTmp.NEXT() = 0);
        PanelEventArgs."Refresh Interface" := TRUE;
      END;

      lPanelPersonalisationTmp.RESET();
      lPanelPersonalisationTmp.DELETEALL();
    END;

    LOCAL PROCEDURE HideTileAction@1000000022();
    BEGIN
      //DOC NA2015.1 - Hiding tile control item

      IF (Tile.ID = 0) THEN
        EXIT;

      Tile.SetBlocked(TRUE);

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE LoadImageFromLibraryAction@1000000045();
    BEGIN
      //DOC NA2015.4 - Loading tile image from library

      IF (Tile.ID = 0) THEN
        EXIT;

      Tile.LoadImageFromLibrary();

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    PROCEDURE "--- Panel Link Actions ---"@1000000030();
    BEGIN
    END;

    LOCAL PROCEDURE EditLinksAction@1000000031();
    VAR
      lPanelLink@1000000000 : Record 9062364;
    BEGIN
      //DOC NA2015.1 - Editing links action

      IF (Panel.Code = '') THEN
        EXIT;

      lPanelLink.RESET();
      lPanelLink.FILTERGROUP(2);
      lPanelLink.SETRANGE("Panel Code", Panel.Code);
      lPanelLink.FILTERGROUP(0);

      PAGE.RUNMODAL(0, lPanelLink);

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE EditLinkAction@1000000032();
    VAR
      lPanelLink@1000000000 : Record 9062364;
    BEGIN
      //DOC NA2015.1 - Editing a link action

      IF (Panel.Code = '') THEN
        EXIT;

      lPanelLink.RESET();
      lPanelLink.FILTERGROUP(2);
      lPanelLink.SETRANGE("Panel Code", Panel.Code);
      lPanelLink.FILTERGROUP(0);
      IF (PanelLink.ID <> 0) THEN
      BEGIN
        lPanelLink.SETRANGE(ID, PanelLink.ID);
        IF (lPanelLink.FINDFIRST()) THEN;
        lPanelLink.SETRANGE(ID);
      END;

      PAGE.RUNMODAL(0, lPanelLink);

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE NewLinkAction@1000000012();
    VAR
      eConfirmation@1000000000 : TextConst 'ENU=Do you want to create a new link?;ENG=Do you want to create a new link?';
      lPanelLink@1000000001 : Record 9062364;
    BEGIN
      //DOC NA2015.1 - Creating a new link action

      IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
        EXIT;

      lPanelLink.INIT();
      lPanelLink.VALIDATE("Panel Code", Panel.Code);
      lPanelLink.VALIDATE(Sequence, lPanelLink.NewSequence());
      lPanelLink.INSERT(TRUE);

      COMMIT;

      lPanelLink.RESET();
      lPanelLink.FILTERGROUP(2);
      lPanelLink.SETRANGE("Panel Code", Panel.Code);
      lPanelLink.FILTERGROUP(0);
      PAGE.RUNMODAL(0, lPanelLink);

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE DeleteLinkAction@1000000036();
    VAR
      eConfirmation@1000000001 : TextConst 'ENU=Do you want to delete link "%1"?;ENG=Do you want to delete link "%1"?';
    BEGIN
      //DOC NA2015.1 - Deleting a link action

      IF (PanelLink.ID = 0) THEN
        EXIT;

      IF ( NOT (CONFIRM(eConfirmation, TRUE, PanelLink.Text))) THEN
        EXIT;

      PanelLink.DELETE(TRUE);

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE CopyLinkAction@1000000016();
    VAR
      lCopyPanelLink@1000000000 : Report 9062243;
    BEGIN
      //DOC NA2015.1 - Copying a link action

      IF (Panel.Code = '') THEN
        EXIT;

      CLEAR(lCopyPanelLink);
      lCopyPanelLink.SetFrom(Panel.Code, PanelLink.ID);
      lCopyPanelLink.RUNMODAL();

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    LOCAL PROCEDURE ShowLinksAction@1000000013();
    VAR
      lPanelLink@1000000001 : Record 9062364;
      lPanelPersonalisationTmp@1000000000 : TEMPORARY Record 9062372;
    BEGIN
      //DOC NA2015.1 - Showing links action

      lPanelPersonalisationTmp.RESET();
      lPanelPersonalisationTmp.DELETEALL();

      lPanelLink.RESET();
      lPanelLink.SETCURRENTKEY("Panel Code", Sequence);
      lPanelLink.SETRANGE("Panel Code", Panel.Code);
      IF (lPanelLink.FINDSET()) THEN
      REPEAT
        lPanelLink.InitialisePersonalisation(lPanelPersonalisationTmp);
        lPanelPersonalisationTmp.Name := lPanelLink.Text;
        lPanelPersonalisationTmp.Blocked := lPanelLink.GetBlocked();
        lPanelPersonalisationTmp.INSERT();
      UNTIL (lPanelLink.NEXT() = 0);

      IF (PAGE.RUNMODAL(PAGE::"Personalise Panel", lPanelPersonalisationTmp) = ACTION::LookupOK) THEN
      BEGIN
        lPanelPersonalisationTmp.RESET();
        IF (lPanelPersonalisationTmp.FINDSET()) THEN
        REPEAT
          IF (lPanelLink.GET(lPanelPersonalisationTmp."Parent Code", lPanelPersonalisationTmp."Parent ID")) THEN
            lPanelLink.SetBlocked(lPanelPersonalisationTmp.Blocked);
        UNTIL (lPanelPersonalisationTmp.NEXT() = 0);
        PanelEventArgs."Refresh Interface" := TRUE;
      END;

      lPanelPersonalisationTmp.RESET();
      lPanelPersonalisationTmp.DELETEALL();
    END;

    LOCAL PROCEDURE HideLinkAction@1000000018();
    BEGIN
      //DOC NA2015.1 - Hiding a link action

      IF (PanelLink.ID = 0) THEN
        EXIT;

      PanelLink.SetBlocked(TRUE);

      PanelEventArgs."Refresh Interface" := TRUE;
    END;

    PROCEDURE "--- Tile Functions ---"@1000000059();
    BEGIN
    END;

    LOCAL PROCEDURE TileClick@1000000003();
    VAR
      lPanelProperty@1000000001 : Record 9062433;
      lRunWithRecordRef@1000000002 : Codeunit 9062239;
      lTnpUtils@1000000004 : Codeunit 9062229;
      lDataTableView@1000000003 : Text[1024];
      lFound@1000000000 : Boolean;
      lTableFilter@1000000005 : Text;
    BEGIN
      //DOC NA2015.1 - Panel tile click event handler

      lFound := FALSE;

      IF ( NOT (lFound)) THEN
        lFound := FindTileProperty(Tile.FIELDNO(Info), lPanelProperty);
      IF ( NOT (lFound)) THEN
        lFound := FindTileProperty(Tile.FIELDNO(Text), lPanelProperty);

      IF (lFound) THEN
        CASE (lPanelProperty.Type) OF
          lPanelProperty.Type::Table:
            BEGIN
              lTableFilter := lPanelProperty."Table Filter";
              lTableFilter := PanelToolkit.ApplyPanelParameters(Panel, lTableFilter);
              lDataTableView := SmartFilterManagement.ApplySmartFilters(lTableFilter);
              lRunWithRecordRef.RunPageForTableView(lPanelProperty."Table ID", lDataTableView, lPanelProperty."Page ID", lPanelProperty."Run Page Modally");
            END;
        END;
    END;

    LOCAL PROCEDURE TileDrop@1000000029();
    VAR
      lTileDragEventArgs@1000000000 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.TileDragEventArgs";
    BEGIN
      //DOC NA2015.1 - Tile control drop event handler

      lTileDragEventArgs := EventArgs;
      TileDropInternal(lTileDragEventArgs.From.TileName, lTileDragEventArgs."To".GroupName, lTileDragEventArgs."To".Index);
    END;

    LOCAL PROCEDURE TileDropInternal@1000000040(pTileName@1000000013 : Text;pToGroupName@1000000014 : Text;pToIndex@1000000015 : Integer);
    VAR
      lTileGroup@1000000000 : Record 9062366;
      lTile@1000000003 : Record 9062367;
      lTileTmp@1000000004 : TEMPORARY Record 9062367;
      lTileDragEventArgs@1000000001 : DotNet "'TheNavPeople.Panels.9.0.3.7, Version=9.0.3.7, Culture=neutral, PublicKeyToken=f71ae4a876a51bae'.TheNavPeople.Panels.TileDragEventArgs";
      lGroupId@1000000007 : Integer;
      lGroupIndex@1000000011 : Integer;
      lSequence@1000000006 : Integer;
      lNewSequence@1000000008 : Integer;
      lFromGroupName@1000000009 : Text[100];
      lToGroupName@1000000010 : Text[100];
    BEGIN
      //DOC NA2015.3 - Tile control drop event handler (internal version)
      //  -> pTileName: Tile being moved name
      //  -> pToGroupName: Target group name
      //  -> pToIndex: Target index

      IF ((pTileName = '') OR (pToGroupName = '')) THEN
        EXIT;

      Tile.RESET();
      Tile.SETRANGE("Panel Code", PanelCode);
      Tile.SETRANGE("Control Name", pTileName);
      IF ( NOT (Tile.FINDFIRST())) THEN
        EXIT;

      lTileGroup.RESET();
      lTileGroup.SETRANGE("Panel Code", PanelCode);
      lTileGroup.SETRANGE("Control Name", pToGroupName);
      IF ( NOT (lTileGroup.FINDFIRST())) THEN
        CLEAR(lTileGroup);

      IF ((lTileGroup.ID <> 0) AND (lTileGroup.ID <> Tile."Tile Group ID")) THEN
        Tile.SetTileGroupId(lTileGroup.ID);

      lTileTmp.RESET();
      lTileTmp.DELETEALL();

      lTile.RESET();
      lTile.SETRANGE("Panel Code", Tile."Panel Code");
      IF (lTile.FINDSET()) THEN
        REPEAT
          lTileTmp := lTile;
          lTileTmp.Sequence := lTile.GetSequence();
          lTileTmp."Tile Group ID" := lTile.GetTileGroupId();
          lTileTmp.INSERT();
        UNTIL (lTile.NEXT() = 0);

      lGroupId := -1;
      lTileTmp.RESET();
      lTileTmp.SETCURRENTKEY("Panel Code", "Tile Group ID", Sequence);
      IF (lTileTmp.FINDSET()) THEN
        REPEAT
          IF (lGroupId <> lTileTmp."Tile Group ID") THEN
          BEGIN
            lGroupId := lTileTmp."Tile Group ID";
            lGroupIndex := 0;
            lSequence := 10;
          END ELSE BEGIN
            lGroupIndex += 1;
            lSequence += 10;
          END;

          IF ((lTileTmp."Tile Group ID" = lTileGroup.ID) AND (lGroupIndex = pToIndex)) THEN
          BEGIN
            lNewSequence := lSequence;
            lSequence += 10;
          END;

          IF (Tile.ID <> lTileTmp.ID) THEN BEGIN
            lTile.GET(lTileTmp."Panel Code", lTileTmp.ID);
            lTileTmp.SetSequence(lSequence);
          END;

        UNTIL (lTileTmp.NEXT() = 0);

      IF (lNewSequence = 0) THEN
        lNewSequence := lSequence;
      Tile.SetSequence(lNewSequence);
    END;

    PROCEDURE "--- Web Panels ---"@1000000037();
    BEGIN
    END;

    PROCEDURE HandleWeb@1000000038(VAR pPanelCode@1000000001 : Code[20];source@1000000004 : Text;name@1000000005 : Text;parametersText@1000000000 : Text) : Boolean;
    VAR
      ParameterValues@1000000007 : ARRAY [10] OF Text;
      parametersBuffer@1000000010 : Text;
      SenderID@1000000003 : Integer;
      SenderIDText@1000000006 : Text;
      i@1000000002 : Integer;
      NoOfParameters@1000000008 : Integer;
      EndPos@1000000009 : Integer;
    BEGIN
      //DOC WP1.00

      CLEAR(EventArgs);
      PanelCode := pPanelCode;
      Panel.GET(PanelCode);

      PanelEventArgs.INIT();
      PanelEventArgs.VALIDATE("Event Type", PanelEventArgs."Event Type"::Click);

      NoOfParameters := 0;
      CLEAR(ParameterValues);
      parametersBuffer := parametersText;
      WHILE (NoOfParameters < 10) AND (parametersBuffer <> '') DO BEGIN
        NoOfParameters += 1;
        EndPos := STRPOS(parametersBuffer, ',');
        IF (EndPos > 0) THEN BEGIN
          ParameterValues[NoOfParameters] := COPYSTR(parametersBuffer, 1, EndPos - 1);
          parametersBuffer := COPYSTR(parametersBuffer, EndPos + 1);
        END ELSE BEGIN
          ParameterValues[NoOfParameters] := parametersBuffer;
          parametersBuffer := '';
        END;
      END;
      SenderIDText := ParameterValues[1];
      PanelEventArgs."Parameter 1" := ParameterValues[2];
      PanelEventArgs."Parameter 2" := ParameterValues[3];
      PanelEventArgs."Parameter 3" := ParameterValues[4];
      PanelEventArgs."Parameter 4" := ParameterValues[5];
      PanelEventArgs."Parameter 5" := ParameterValues[6];
      PanelEventArgs."Parameter 6" := ParameterValues[7];
      IF (ParameterValues[8] <> '') THEN
        EVALUATE(PanelEventArgs."Panel Data ID", ParameterValues[8])
      ELSE
        PanelEventArgs."Panel Data ID" := 0;
      PanelEventArgs."Sender Name" := SenderIDText; //ParameterValues[9];

      //find sender
      PanelEventArgs."Sender Found" := FALSE;
      CASE (name) OF
        'tile':
          BEGIN
            IF (EVALUATE(SenderID, SenderIDText)) THEN
              IF (Tile.GET(PanelCode, SenderID)) THEN BEGIN
                IF ( NOT (TileGroup.GET(Tile."Tile Group ID"))) THEN
                  CLEAR(TileGroup);
                PanelEventArgs."Sender Name" := Tile."Control Name";
                PanelEventArgs."Sender Table ID" := DATABASE::Tile;
                PanelEventArgs."Sender Parent Code" := Tile."Panel Code";
                PanelEventArgs."Sender Parent ID" := Tile.ID;
                PanelEventArgs."Sender Found" := TRUE;
              END;
          END;
        'link':
          BEGIN
            IF (EVALUATE(SenderID, SenderIDText)) THEN
              IF (PanelLink.GET(PanelCode, SenderID)) THEN BEGIN
                PanelEventArgs."Sender Name" := PanelLink."Control Name";
                PanelEventArgs."Sender Table ID" := DATABASE::"Panel Link";
                PanelEventArgs."Sender Parent Code" := PanelLink."Panel Code";
                PanelEventArgs."Sender Parent ID" := PanelLink.ID;
                PanelEventArgs."Sender Found" := TRUE;
              END;
          END;
        'menu':
          BEGIN
            PanelEventArgs."Event Type" := PanelEventArgs."Event Type"::"Menu Click";
            PanelEventArgs."Sender Name" := ParameterValues[2];
            FindSender();

            PanelMenuItem.RESET();
            PanelMenuItem.SETCURRENTKEY("Control Name");
            PanelMenuItem.SETRANGE("Control Name", SenderIDText);
            PanelEventArgs."Menu Item Found" := PanelMenuItem.FINDFIRST();
          END;
        'movetile':
          BEGIN
            MoveWebTile(parametersText);
            EXIT(FALSE);
          END;
      END;

      IF (NOT(PanelEventArgs."Sender Found")) THEN
        FindSender();
      //  EXIT(FALSE);
      FindEvent();
      //FindMenuItem();

      Panel.CopyParametersFromPanelEventArgs(PanelEventArgs);

      IF (Panel.Code <> '') THEN
      BEGIN
        IF ( NOT (PanelEventArgs.Handled)) THEN
          HandleEvent();
        IF ( NOT (PanelEventArgs.Handled)) THEN
          HandleDefaultEvent();
      END;

      IF (pPanelCode <> PanelEventArgs."Panel Code") THEN BEGIN
        pPanelCode := PanelEventArgs."Panel Code";
        IF (PanelEventArgs."Panel Code" <> '') THEN
          PanelEventArgs."Refresh Interface" := TRUE;
      END;

      EXIT(PanelEventArgs."Refresh Interface");
    END;

    LOCAL PROCEDURE MoveWebTile@1000000042(parameters@1000000013 : Text);
    VAR
      lTileName@1000000002 : Text;
      lGroupName@1000000005 : Text;
      lToIndex@1000000012 : Integer;
    BEGIN
      //DOC WP1.00 - Tile control drop event handler

      lTileName := SELECTSTR(1, parameters);
      lGroupName := SELECTSTR(3, parameters);
      IF (NOT(EVALUATE(lToIndex, SELECTSTR(2, parameters)))) THEN
        EXIT;

      TileDropInternal(lTileName, lGroupName, lToIndex);
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 24/07/2013 - Created
      //DOC NA2015.1  JH 22/09/2013 - Pane cache added, tile drop added
      //DOC NA2015.1  JH 17/02/2014 - Amendments and fixes
      //DOC NA2015.1  JH 25/02/2014 - Amendments and fixes
      //DOC NA2015.1  JH 14/03/2014 - Amendments and fixes
      //DOC NA2015.1  JH 22/04/2014 - Panels 3
      //DOC NA2015.3  AZ 08/07/2014 - Web Panels
      //DOC NA2015.3  JH 15/08/2014 - Fixes, amendments
      //DOC NA2015.4  JH 10/11/2014 - Upgraded to 2015
      //DOC NA2015.4  JH 04/02/2015 - "OpenPanel" function fixed
      //DOC NA2015.4  JH 05/02/2015 - Better integration with web tiles
      //DOC NA2015.6  JH 30/04/2015 - Links are filtered for the current panel in "NewLinkAction"
      //DOC NA2015.8  JH 26/06/2015 - Tile lists
      //DOC NA2015.8  JH 15/07/2015 - Fixes
      //DOC NA2016.10 JH 27/08/2015 - Upgraded to 2016
      //DOC NA2016.12 JH 04/01/2016 - New panels
      //DOC NA2016.12 JH 28/01/2016 - Smart filters
      //DOC NA2016.14 JH 19/02/2016 - Actions to run quick report / planning board
      //DOC NA2016.14 JH 09/03/2016 - "Run Questionnaire" added
      //DOC NA2016.14 NM 09/03/2016 - "Run Checklist" added
      //DOC NA2016.16 JH 19/05/2016 - CfMD amendments (new .NET library)
      //DOC NA2016.16.1 PC 18/07/2016 - Removed "PanelEventArgs."Refresh Interface" := FALSE;" in "RunObject" as means we can't control the refresh of the page from CU
    }
    END.
  }
}

