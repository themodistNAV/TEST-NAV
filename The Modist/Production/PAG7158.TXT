OBJECT Page 7158 Sales Analysis by Dimensions
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00,NAVGB9.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Sales Analysis by Dimensions;
               ENG=Sales Analysis by Dimensions];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table367;
    DataCaptionExpr=CurrentItemAnalysisViewCode;
    PageType=Card;
    OnInit=BEGIN
             Dim3FilterEnable := TRUE;
             Dim2FilterEnable := TRUE;
             Dim1FilterEnable := TRUE;
           END;

    OnOpenPage=BEGIN
                 CurrentAnalysisArea := CurrentAnalysisArea::Sales;

                 GLSetup.GET;

                 ItemAnalysisMgt.AnalysisViewSelection(
                   CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
                   Dim1Filter,Dim2Filter,Dim3Filter);

                 IF (NewItemAnalysisCode <> '') AND (NewItemAnalysisCode <> CurrentItemAnalysisViewCode) THEN BEGIN
                   CurrentItemAnalysisViewCode := NewItemAnalysisCode;
                   AVBreakdownBuffer.DELETEALL;
                   ItemAnalysisMgt.CheckAnalysisView(CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView);
                   ItemAnalysisMgt.SetItemAnalysisView(
                     CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
                     Dim1Filter,Dim2Filter,Dim3Filter);
                 END;

                 ItemAnalysisMgt.SetLineAndColDim(
                   ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
                 UpdateFilterFields;

                 FindPeriod('');

                 NoOfColumns := SalesAnalysisByDimMatrix.GetMatrixDimension;
                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
               END;

    OnFindRecord=BEGIN
                   EXIT(
                     ItemAnalysisMgt.FindRec(
                       ItemAnalysisView,LineDimOption,Rec,Which,
                       ItemFilter,LocationFilter,PeriodType,DateFilter,PeriodInitialized,InternalDateFilter,
                       Dim1Filter,Dim2Filter,Dim3Filter));
                 END;

    OnNextRecord=BEGIN
                   EXIT(
                     ItemAnalysisMgt.NextRec(
                       ItemAnalysisView,LineDimOption,Rec,Steps,
                       ItemFilter,LocationFilter,PeriodType,DateFilter,
                       Dim1Filter,Dim2Filter,Dim3Filter));
                 END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 12      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Actions;
                                 ENG=&Actions];
                      Image=Action }
      { 15      ;2   ;Action    ;
                      CaptionML=[ENU=Reverse Lines and Columns;
                                 ENG=Reverse Lines and Columns];
                      Image=Undo;
                      OnAction=VAR
                                 TempDimCode@1001 : Text[30];
                               BEGIN
                                 TempDimCode := ColumnDimCode;
                                 ColumnDimCode := LineDimCode;
                                 LineDimCode := TempDimCode;
                                 ItemAnalysisMgt.ValidateLineDimCode(
                                   ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                                   InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                                 ItemAnalysisMgt.ValidateColumnDimCode(
                                   ItemAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                                   InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 16      ;1   ;Action    ;
                      Name=ShowMatrix_Process;
                      CaptionML=[ENU=&Show Matrix;
                                 ENG=&Show Matrix];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShowMatrix;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CLEAR(SalesAnalysisByDimMatrix);
                                 CLEAR(DimCodeBufferColumn);
                                 ShowMatrix;
                               END;
                                }
      { 21      ;1   ;Action    ;
                      Name=PreviousSet;
                      CaptionML=[ENU=Previous Set;
                                 ENG=Previous Set];
                      ToolTipML=[ENU=Previous Set;
                                 ENG=Previous Set];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Previous);
                               END;
                                }
      { 2       ;1   ;Action    ;
                      Name=NextSet;
                      CaptionML=[ENU=Next Set;
                                 ENG=Next Set];
                      ToolTipML=[ENU=Next Set;
                                 ENG=Next Set];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Next);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 5   ;2   ;Field     ;
                CaptionML=[ENU=Analysis View Code;
                           ENG=Analysis View Code];
                SourceExpr=CurrentItemAnalysisViewCode;
                OnValidate=BEGIN
                             AVBreakdownBuffer.DELETEALL;
                             ItemAnalysisMgt.CheckAnalysisView(CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView);
                             CurrentItemAnalysisViewCodeOnA;
                           END;

                OnLookup=BEGIN
                           ItemAnalysisMgt.LookupItemAnalysisView(
                             CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
                             Dim1Filter,Dim2Filter,Dim3Filter);
                           ItemAnalysisMgt.SetLineAndColDim(
                             ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
                           UpdateFilterFields;
                           CurrPage.UPDATE(FALSE);
                         END;
                          }

    { 6   ;2   ;Field     ;
                CaptionML=[ENU=Show as Lines;
                           ENG=Show as Lines];
                SourceExpr=LineDimCode;
                OnValidate=BEGIN
                             AVBreakdownBuffer.DELETEALL;
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               ColumnDimCode := '';
                               ItemAnalysisMgt.ValidateColumnDimCode(
                                 ItemAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                                 InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             END;
                             ItemAnalysisMgt.ValidateLineDimCode(
                               ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                               InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             IF LineDimOption = LineDimOption::Period THEN
                               SETCURRENTKEY("Period Start")
                             ELSE
                               SETCURRENTKEY(Code);
                             LineDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := ItemAnalysisMgt.GetDimSelection(LineDimCode,ItemAnalysisView);
                           IF NewCode <> LineDimCode THEN BEGIN
                             Text := NewCode;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Show as Columns;
                           ENG=Show as Columns];
                SourceExpr=ColumnDimCode;
                OnValidate=BEGIN
                             AVBreakdownBuffer.DELETEALL;
                             IF (UPPERCASE(LineDimCode) = UPPERCASE(ColumnDimCode)) AND (LineDimCode <> '') THEN BEGIN
                               LineDimCode := '';
                               ItemAnalysisMgt.ValidateLineDimCode(
                                 ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimOption,
                                 InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             END;
                             ItemAnalysisMgt.ValidateColumnDimCode(
                               ItemAnalysisView,ColumnDimCode,ColumnDimOption,LineDimOption,
                               InternalDateFilter,DateFilter,ItemStatisticsBuffer,PeriodInitialized);
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             ColumnDimCodeOnAfterValidate;
                           END;

                OnLookup=VAR
                           NewCode@1002 : Text[30];
                         BEGIN
                           NewCode := ItemAnalysisMgt.GetDimSelection(ColumnDimCode,ItemAnalysisView);
                           IF NewCode <> ColumnDimCode THEN BEGIN
                             Text := NewCode;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 47  ;2   ;Field     ;
                CaptionML=[ENU=Show Value As;
                           ENG=Show Value As];
                OptionCaptionML=[ENU=Sales Amount,COGS Amount,Quantity;
                                 ENG=Sales Amount,COGS Amount,Quantity];
                SourceExpr=ValueType;
                OnValidate=BEGIN
                             AVBreakdownBuffer.DELETEALL;
                           END;
                            }

    { 1907524401;1;Group  ;
                CaptionML=[ENU=Filters;
                           ENG=Filters] }

    { 25  ;2   ;Field     ;
                CaptionML=[ENU=Date Filter;
                           ENG=Date Filter];
                SourceExpr=DateFilter;
                OnValidate=VAR
                             ApplicationManagement@1002 : Codeunit 1;
                           BEGIN
                             IF ApplicationManagement.MakeDateFilter(DateFilter) = 0 THEN;
                             ItemStatisticsBuffer.SETFILTER("Date Filter",DateFilter);
                             DateFilter := ItemStatisticsBuffer.GETFILTER("Date Filter");
                             InternalDateFilter := DateFilter;
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             DateFilterOnAfterValidate;
                           END;
                            }

    { 38  ;2   ;Field     ;
                CaptionML=[ENU=Item Filter;
                           ENG=Item Filter];
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             ItemFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           ItemList@1002 : Page 31;
                         BEGIN
                           ItemList.LOOKUPMODE(TRUE);
                           IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Text := ItemList.GetSelectionFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 13  ;2   ;Field     ;
                CaptionML=[ENU=Location Filter;
                           ENG=Location Filter];
                SourceExpr=LocationFilter;
                OnValidate=BEGIN
                             LocationFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           LocationList@1002 : Page 15;
                         BEGIN
                           LocationList.LOOKUPMODE(TRUE);
                           IF LocationList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                             Text := LocationList.GetSelectionFilter;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 17  ;2   ;Field     ;
                CaptionML=[ENU=Budget Filter;
                           ENG=Budget Filter];
                SourceExpr=BudgetFilter;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             BudgetFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           ItemBudgetName@1000 : Record 7132;
                         BEGIN
                           ItemBudgetName.FILTERGROUP := 2;
                           ItemBudgetName.SETRANGE("Analysis Area",CurrentAnalysisArea);
                           ItemBudgetName.FILTERGROUP := 0;
                           IF PAGE.RUNMODAL(0,ItemBudgetName) = ACTION::LookupOK THEN BEGIN
                             Text := ItemBudgetName.Name;
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 34  ;2   ;Field     ;
                Name=Dim1FilterControl;
                CaptionML=[ENU=Dimension 1 Filter;
                           ENG=Dimension 1 Filter];
                SourceExpr=Dim1Filter;
                CaptionClass=ItemAnalysisMgt.GetCaptionClass(1,ItemAnalysisView);
                Enabled=Dim1FilterEnable;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             Dim1FilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           EXIT(ItemAnalysisMgt.LookUpDimFilter(ItemAnalysisView."Dimension 1 Code",Text));
                         END;
                          }

    { 30  ;2   ;Field     ;
                Name=Dim2FilterControl;
                CaptionML=[ENU=Dimension 2 Filter;
                           ENG=Dimension 2 Filter];
                SourceExpr=Dim2Filter;
                CaptionClass=ItemAnalysisMgt.GetCaptionClass(2,ItemAnalysisView);
                Enabled=Dim2FilterEnable;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             Dim2FilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           EXIT(ItemAnalysisMgt.LookUpDimFilter(ItemAnalysisView."Dimension 2 Code",Text));
                         END;
                          }

    { 46  ;2   ;Field     ;
                Name=Dim3FilterControl;
                CaptionML=[ENU=Dimension 3 Filter;
                           ENG=Dimension 3 Filter];
                SourceExpr=Dim3Filter;
                CaptionClass=ItemAnalysisMgt.GetCaptionClass(3,ItemAnalysisView);
                Enabled=Dim3FilterEnable;
                OnValidate=BEGIN
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                             Dim3FilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           EXIT(ItemAnalysisMgt.LookUpDimFilter(ItemAnalysisView."Dimension 3 Code",Text));
                         END;
                          }

    { 1903121901;1;Group  ;
                CaptionML=[ENU=Options;
                           ENG=Options] }

    { 32  ;2   ;Field     ;
                CaptionML=[ENU=Show;
                           ENG=Show];
                OptionCaptionML=[ENU=Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%;
                                 ENG=Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%];
                SourceExpr=ShowActualBudget;
                OnValidate=BEGIN
                             AVBreakdownBuffer.DELETEALL;
                           END;
                            }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Rounding Factor;
                           ENG=Rounding Factor];
                OptionCaptionML=[ENU=None,1,1000,1000000;
                                 ENG=None,1,1000,1000000];
                SourceExpr=RoundingFactor }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=Show Column Name;
                           ENG=Show Column Name];
                SourceExpr=ShowColumnName;
                OnValidate=BEGIN
                             ShowColumnNameOnAfterValidate;
                           END;
                            }

    { 50  ;2   ;Field     ;
                CaptionML=[ENU=Show Opposite Sign;
                           ENG=Show Opposite Sign];
                SourceExpr=ShowOppositeSign;
                MultiLine=Yes;
                OnValidate=BEGIN
                             AVBreakdownBuffer.DELETEALL;
                           END;
                            }

    { 1906098301;1;Group  ;
                CaptionML=[ENU=Matrix Options;
                           ENG=Matrix Options] }

    { 19  ;2   ;Field     ;
                Name=PeriodType;
                CaptionML=[ENU=View by;
                           ENG=View by];
                OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Accounting Period;
                                 ENG=Day,Week,Month,Quarter,Year,Accounting Period];
                SourceExpr=PeriodType;
                OnValidate=BEGIN
                             FindPeriod('');
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                           END;
                            }

    { 1040000;2;Field     ;
                CaptionML=[ENU=Calendar Source;
                           ENG=Calendar Source];
                OptionCaptionML=[ENU=" ,System Calendar,Acc. Period Calendar";
                                 ENG=" ,System Calendar,Acc. Period Calendar"];
                SourceExpr=CalendarSource;
                OnValidate=BEGIN
                             FindPeriod('');
                             MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
                           END;
                            }

    { 20  ;2   ;Field     ;
                Name=ColumnSet;
                CaptionML=[ENU=Column Set;
                           ENG=Column Set];
                SourceExpr=MATRIX_CaptionRange;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      GLSetup@1025 : Record 98;
      ItemAnalysisView@1011 : Record 7152;
      ItemStatisticsBuffer@1002 : Record 5821;
      AVBreakdownBuffer@1028 : TEMPORARY Record 375;
      DimCodeBufferColumn@1034 : Record 367;
      SalesAnalysisByDimMatrix@1000 : Page 9227;
      ItemAnalysisMgt@1038 : Codeunit 7153;
      MatrixMgt@1031 : Codeunit 9200;
      CurrentItemAnalysisViewCode@1016 : Code[10];
      CurrentAnalysisArea@1001 : 'Sales,Purchase,Inventory';
      ValueType@1004 : 'Sales Amount,COGS Amount,Sales Quantity';
      ShowActualBudget@1027 : 'Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%';
      RoundingFactor@1005 : 'None,1,1000,1000000';
      LineDimOption@1007 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
      ColumnDimOption@1006 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
      PeriodType@1008 : 'Day,Week,Month,Quarter,Year';
      BudgetFilter@1026 : Code[250];
      LineDimCode@1020 : Text[30];
      ColumnDimCode@1019 : Text[30];
      InternalDateFilter@1014 : Text[30];
      MatrixColumnCaptions@1022 : ARRAY [32] OF Text[1024];
      PeriodInitialized@1015 : Boolean;
      ShowColumnName@1029 : Boolean;
      ShowOppositeSign@1030 : Boolean;
      Steps@1033 : Integer;
      DateFilter@1021 : Text[30];
      Dim1Filter@1043 : Code[250];
      Dim2Filter@1042 : Code[250];
      Dim3Filter@1041 : Code[250];
      ItemFilter@1040 : Code[250];
      LocationFilter@1039 : Code[250];
      FirstColumn@1044 : Text[1024];
      LastColumn@1045 : Text[1024];
      FirstColumnDate@1035 : Date;
      LastColumnDate@1032 : Date;
      NoOfColumns@1047 : Integer;
      MATRIX_PKFirstRecInCurrSet@1046 : Text[100];
      MATRIX_CurrSetLength@1048 : Integer;
      MATRIX_CaptionRange@1049 : Text[100];
      MATRIX_CodeRange@1023 : Text[100];
      MATRIX_PeriodRecords@1050 : ARRAY [32] OF Record 2000000007;
      MATRIX_SetWanted@1051 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
      NewItemAnalysisCode@1036 : Code[10];
      CalendarSource@1040000 : ' ,System,AccPeriod';
      Dim1FilterEnable@19054192 : Boolean INDATASET;
      Dim2FilterEnable@19062512 : Boolean INDATASET;
      Dim3FilterEnable@19011605 : Boolean INDATASET;

    LOCAL PROCEDURE FindPeriod@2(SearchText@1000 : Code[10]);
    VAR
      Item@1003 : Record 27;
      Calendar@1001 : Record 2000000007;
      PeriodFormMgt@1002 : Codeunit 359;
    BEGIN
      IF DateFilter <> '' THEN BEGIN
        Calendar.SETFILTER("Period Start",DateFilter);
        IF NOT PeriodFormMgt.FindDate('+',Calendar,PeriodType) THEN
          PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
        Calendar.SETRANGE("Period Start");
      END;
      PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType);
      Item.SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
      IF Item.GETRANGEMIN("Date Filter") = Item.GETRANGEMAX("Date Filter") THEN
        Item.SETRANGE("Date Filter",Item.GETRANGEMIN("Date Filter"));
      InternalDateFilter := Item.GETFILTER("Date Filter");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN
        DateFilter := InternalDateFilter;
      AVBreakdownBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE RefreshInternalDateFilter@1();
    VAR
      Item@1000 : Record 27;
    BEGIN
      Item.SETRANGE("Date Filter",FirstColumnDate,LastColumnDate);
      IF Item.GETRANGEMIN("Date Filter") = Item.GETRANGEMAX("Date Filter") THEN
        Item.SETRANGE("Date Filter",Item.GETRANGEMIN("Date Filter"));
      InternalDateFilter := COPYSTR(Item.GETFILTER("Date Filter"),1,MAXSTRLEN(InternalDateFilter));
    END;

    LOCAL PROCEDURE UpdateFilterFields@4();
    VAR
      ItemAnalysisViewFilter@1000 : Record 7153;
    BEGIN
      ItemFilter := ItemAnalysisView."Item Filter";
      Dim1Filter := '';
      Dim2Filter := '';
      Dim3Filter := '';

      Dim1FilterEnable := ItemAnalysisView."Dimension 1 Code" <> '';
      Dim2FilterEnable := ItemAnalysisView."Dimension 2 Code" <> '';
      Dim3FilterEnable := ItemAnalysisView."Dimension 3 Code" <> '';

      IF Dim1FilterEnable THEN
        IF ItemAnalysisViewFilter.GET(
             ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemAnalysisView."Dimension 1 Code")
        THEN
          Dim1Filter := ItemAnalysisViewFilter."Dimension Value Filter";

      IF Dim2FilterEnable THEN
        IF ItemAnalysisViewFilter.GET(
             ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemAnalysisView."Dimension 2 Code")
        THEN
          Dim2Filter := ItemAnalysisViewFilter."Dimension Value Filter";

      IF Dim3FilterEnable THEN
        IF ItemAnalysisViewFilter.GET(
             ItemAnalysisView."Analysis Area",ItemAnalysisView.Code,ItemAnalysisView."Dimension 3 Code")
        THEN
          Dim3Filter := ItemAnalysisViewFilter."Dimension Value Filter";
    END;

    LOCAL PROCEDURE MATRIX_GenerateColumnCaptions@5(SetWanted@1001 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn');
    BEGIN
      CASE ColumnDimOption OF
        ColumnDimOption::Item:
          SetPointsItem(SetWanted);
        ColumnDimOption::Location:
          SetPointsLocation(SetWanted);
        ColumnDimOption::Period:
          BEGIN
            FirstColumn := '';
            LastColumn := '';
            MatrixMgt.GeneratePeriodMatrixData(SetWanted,NoOfColumns,ShowColumnName,PeriodType,DateFilter,MATRIX_PKFirstRecInCurrSet,
              MatrixColumnCaptions,MATRIX_CaptionRange,MATRIX_CurrSetLength,MATRIX_PeriodRecords,CalendarSource);
            IF MATRIX_CurrSetLength > 0 THEN BEGIN
              FirstColumnDate := MATRIX_PeriodRecords[1]."Period Start";
              LastColumnDate := MATRIX_PeriodRecords[MATRIX_CurrSetLength]."Period Start";
              FirstColumn := MatrixColumnCaptions[1];
              LastColumn := FORMAT(MATRIX_PeriodRecords[MATRIX_CurrSetLength]."Period End");
            END;
            RefreshInternalDateFilter;
          END;
        ColumnDimOption::"Dimension 1":
          SetPointsDim(ItemAnalysisView."Dimension 1 Code",Dim1Filter,SetWanted);
        ColumnDimOption::"Dimension 2":
          SetPointsDim(ItemAnalysisView."Dimension 2 Code",Dim2Filter,SetWanted);
        ColumnDimOption::"Dimension 3":
          SetPointsDim(ItemAnalysisView."Dimension 3 Code",Dim3Filter,SetWanted);
      END;
    END;

    LOCAL PROCEDURE SetPointsItem@22(SetWanted@1001 : 'Initial,Previous,Same,Next');
    VAR
      Item@1013 : Record 27;
      RecRef@1000 : RecordRef;
      CaptionFieldNo@1003 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      FirstColumn := '';
      LastColumn := '';
      Item.SETFILTER("No.",ItemFilter);
      RecRef.GETTABLE(Item);
      RecRef.SETTABLE(Item);
      IF ShowColumnName THEN
        CaptionFieldNo := Item.FIELDNO(Description)
      ELSE
        CaptionFieldNo := Item.FIELDNO("No.");

      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,CaptionFieldNo,MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
        MATRIX_CaptionRange,MATRIX_CurrSetLength);

      IF ShowColumnName THEN
        MATRIX_CodeRange :=
          MatrixMgt.GetPKRange(RecRef,Item.FIELDNO("No."),MATRIX_PKFirstRecInCurrSet,MATRIX_CurrSetLength);

      IF MATRIX_CurrSetLength > 0 THEN BEGIN
        FirstColumn := MatrixColumnCaptions[1];
        LastColumn := MatrixColumnCaptions[MATRIX_CurrSetLength];
      END;
    END;

    LOCAL PROCEDURE SetPointsLocation@6(SetWanted@1001 : 'Initial,Previous,Same,Next');
    VAR
      Location@1013 : Record 14;
      RecRef@1000 : RecordRef;
      CaptionFieldNo@1002 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      FirstColumn := '';
      LastColumn := '';
      Location.SETFILTER(Code,LocationFilter);
      RecRef.GETTABLE(Location);
      RecRef.SETTABLE(Location);
      IF ShowColumnName THEN
        CaptionFieldNo := Location.FIELDNO(Name)
      ELSE
        CaptionFieldNo := Location.FIELDNO(Code);

      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,CaptionFieldNo,MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
        MATRIX_CaptionRange,MATRIX_CurrSetLength);

      IF ShowColumnName THEN
        MATRIX_CodeRange :=
          MatrixMgt.GetPKRange(RecRef,Location.FIELDNO(Code),MATRIX_PKFirstRecInCurrSet,MATRIX_CurrSetLength);

      IF MATRIX_CurrSetLength > 0 THEN BEGIN
        FirstColumn := MatrixColumnCaptions[1];
        LastColumn := MatrixColumnCaptions[MATRIX_CurrSetLength];
      END;
    END;

    LOCAL PROCEDURE SetPointsDim@17(DimensionCode@1003 : Code[20];DimFilter@1002 : Code[250];SetWanted@1004 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn');
    VAR
      MatrixMgt@1000 : Codeunit 9200;
      DimVal@1001 : Record 349;
      RecRef@1005 : RecordRef;
      CaptionFieldNo@1006 : Integer;
    BEGIN
      CLEAR(MatrixColumnCaptions);
      FirstColumn := '';
      LastColumn := '';
      DimVal.SETRANGE("Dimension Code",DimensionCode);
      IF DimFilter <> '' THEN
        DimVal.SETFILTER(Code,DimFilter);
      RecRef.GETTABLE(DimVal);
      RecRef.SETTABLE(DimVal);

      IF ShowColumnName THEN
        CaptionFieldNo := DimVal.FIELDNO(Name)
      ELSE
        CaptionFieldNo := DimVal.FIELDNO(Code);

      IF ShowColumnName THEN BEGIN
        MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,DimVal.FIELDNO(Code),MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
          MATRIX_CaptionRange,MATRIX_CurrSetLength);
        MATRIX_CodeRange :=
          MatrixMgt.GetPKRange(RecRef,DimVal.FIELDNO(Code),MATRIX_PKFirstRecInCurrSet,MATRIX_CurrSetLength);
      END;

      MatrixMgt.GenerateMatrixData(RecRef,SetWanted,NoOfColumns,CaptionFieldNo,MATRIX_PKFirstRecInCurrSet,MatrixColumnCaptions,
        MATRIX_CaptionRange,MATRIX_CurrSetLength);

      IF MATRIX_CurrSetLength > 0 THEN BEGIN
        FirstColumn := MatrixColumnCaptions[1];
        LastColumn := MatrixColumnCaptions[MATRIX_CurrSetLength];
      END;
    END;

    LOCAL PROCEDURE ShowMatrix@10();
    VAR
      CurItemFilter@1000 : Text[250];
      CurLocationFilter@1001 : Text[250];
      CurDim1Filter@1002 : Text[250];
      CurDim2Filter@1003 : Text[250];
      CurDim3Filter@1004 : Text[250];
    BEGIN
      CASE ColumnDimOption OF
        ColumnDimOption::Item:
          CurItemFilter := MATRIX_CodeRange;
        ColumnDimOption::Location:
          CurLocationFilter := MATRIX_CodeRange;
        ColumnDimOption::"Dimension 1":
          CurDim1Filter := MATRIX_CodeRange;
        ColumnDimOption::"Dimension 2":
          CurDim2Filter := MATRIX_CodeRange;
        ColumnDimOption::"Dimension 3":
          CurDim3Filter := MATRIX_CodeRange;
        ColumnDimOption::Period:
          BEGIN
            FirstColumn := FORMAT(FirstColumnDate);
            LastColumn := FORMAT(LastColumnDate);
            PeriodInitialized := TRUE;
          END;
      END;
      IF CurItemFilter = '' THEN
        CurItemFilter := ItemFilter;
      IF CurLocationFilter = '' THEN
        CurLocationFilter := LocationFilter;
      IF CurDim1Filter = '' THEN
        CurDim1Filter := Dim1Filter;
      IF CurDim2Filter = '' THEN
        CurDim2Filter := Dim2Filter;
      IF CurDim3Filter = '' THEN
        CurDim3Filter := Dim3Filter;

      SalesAnalysisByDimMatrix.LoadVariables(ItemAnalysisView,ItemStatisticsBuffer,
        CurrentItemAnalysisViewCode,CurrentAnalysisArea,
        LineDimOption,ColumnDimOption,LineDimCode,ColumnDimCode,PeriodType,ValueType,
        RoundingFactor,ShowActualBudget,MatrixColumnCaptions,
        ShowOppositeSign,PeriodInitialized,ShowColumnName,MATRIX_CurrSetLength);

      SalesAnalysisByDimMatrix.LoadFilters(CurItemFilter,CurLocationFilter,CurDim1Filter,CurDim2Filter,CurDim3Filter,
        DateFilter,BudgetFilter,InternalDateFilter,CalendarSource);

      SalesAnalysisByDimMatrix.RUNMODAL;
    END;

    LOCAL PROCEDURE ClearPoints@21();
    BEGIN
      CLEAR(FirstColumn);
      CLEAR(LastColumn);
    END;

    PROCEDURE SetCurrentAnalysisViewCode@7(NewAnalysisViewCode@1000 : Code[10]);
    BEGIN
      NewItemAnalysisCode := NewAnalysisViewCode;
    END;

    LOCAL PROCEDURE CurrentItemAnalysisViewCodeOnA@19045075();
    BEGIN
      ItemAnalysisMgt.SetItemAnalysisView(
        CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
        Dim1Filter,Dim2Filter,Dim3Filter);
      ItemAnalysisMgt.SetLineAndColDim(
        ItemAnalysisView,LineDimCode,LineDimOption,ColumnDimCode,ColumnDimOption);
      UpdateFilterFields;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE LineDimCodeOnAfterValidate@19031201();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ColumnDimCodeOnAfterValidate@19023109();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE Dim2FilterOnAfterValidate@19005475();
    BEGIN
      AVBreakdownBuffer.DELETEALL;
      CurrPage.UPDATE;
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE Dim1FilterOnAfterValidate@19005240();
    BEGIN
      AVBreakdownBuffer.DELETEALL;
      CurrPage.UPDATE;
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE Dim3FilterOnAfterValidate@19064950();
    BEGIN
      AVBreakdownBuffer.DELETEALL;
      CurrPage.UPDATE;
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE ItemFilterOnAfterValidate@19051257();
    BEGIN
      AVBreakdownBuffer.DELETEALL;
      ItemStatisticsBuffer.SETFILTER("Item Filter",ItemFilter);
      CurrPage.UPDATE(FALSE);
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE LocationFilterOnAfterValidate@19070361();
    BEGIN
      AVBreakdownBuffer.DELETEALL;
      ItemStatisticsBuffer.SETFILTER("Location Filter",LocationFilter);

      CurrPage.UPDATE(FALSE);
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Initial);
    END;

    LOCAL PROCEDURE BudgetFilterOnAfterValidate@19069837();
    BEGIN
      AVBreakdownBuffer.DELETEALL;
      ItemStatisticsBuffer.SETFILTER("Budget Filter",BudgetFilter);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE DateFilterOnAfterValidate@19006009();
    BEGIN
      AVBreakdownBuffer.DELETEALL;
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShowColumnNameOnAfterValidate@19074585();
    BEGIN
      MATRIX_GenerateColumnCaptions(MATRIX_SetWanted::Same);
    END;

    BEGIN
    END.
  }
}

