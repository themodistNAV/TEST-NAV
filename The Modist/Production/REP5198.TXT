OBJECT Report 5198 Add Contacts
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Add Contacts;
               ENG=Add Contacts];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  ItemFilters := "Value Entry".HASFILTER;

                  SegCriteriaManagement.InsertCriteriaAction(
                    "Segment Header".GETFILTER("No."),REPORT::"Add Contacts",
                    AllowExistingContact,ExpandCompanies,AllowCoRepdByContPerson,IgnoreExclusion,FALSE);
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::Contact,
                    Contact.GETFILTERS,Contact.GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Profile Answer",
                    "Contact Profile Answer".GETFILTERS,"Contact Profile Answer".GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Mailing Group",
                    "Contact Mailing Group".GETFILTERS,"Contact Mailing Group".GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Interaction Log Entry",
                    "Interaction Log Entry".GETFILTERS,"Interaction Log Entry".GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Job Responsibility","Contact Job Responsibility".GETFILTERS,
                    "Contact Job Responsibility".GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Industry Group",
                    "Contact Industry Group".GETFILTERS,"Contact Industry Group".GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Contact Business Relation",
                    "Contact Business Relation".GETFILTERS,"Contact Business Relation".GETVIEW(FALSE));
                  SegCriteriaManagement.InsertCriteriaFilter(
                    "Segment Header".GETFILTER("No."),DATABASE::"Value Entry",
                    "Value Entry".GETFILTERS,"Value Entry".GETVIEW(FALSE));
                END;

    OnPostReport=BEGIN
                   IF ExpandCompanies THEN
                     AddPeople;
                   IF NOT AllowCoRepdByContPerson THEN
                     DeleteCompanies;

                   UpdateSegLines;
                 END;

  }
  DATASET
  {
    { 7133;    ;DataItem;                    ;
               DataItemTable=Table5076;
               DataItemTableView=SORTING(No.) }

    { 6698;    ;DataItem;                    ;
               DataItemTable=Table5050;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  RecordNo := RecordNo + 1;
                                  IF RecordNo = 1 THEN BEGIN
                                    Window.OPEN(Text000);
                                    NoOfRecords := COUNT;
                                    OldTime := TIME;
                                  END;
                                  NewTime := TIME;
                                  IF (NewTime - OldTime > 100) OR (NewTime < OldTime) THEN BEGIN
                                    NewProgress := ROUND(RecordNo / NoOfRecords * 100,1);
                                    IF NewProgress <> OldProgress THEN BEGIN
                                      Window.UPDATE(1,NewProgress * 100);
                                      OldProgress := NewProgress;
                                    END;
                                    OldTime := TIME;
                                  END;

                                  ContactOK := TRUE;
                                END;

               ReqFilterFields=No.,Search Name,Type,Salesperson Code,Post Code,Country/Region Code,Territory Code }

    { 3762;1   ;DataItem;                    ;
               DataItemTable=Table5089;
               DataItemTableView=SORTING(Contact No.,Profile Questionnaire Code,Line No.);
               OnPreDataItem=BEGIN
                               IF ContactOK AND (GETFILTERS <> '') THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := TRUE;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Profile Questionnaire Code,Line No.;
               DataItemLink=Contact No.=FIELD(No.) }

    { 6043;1   ;DataItem;                    ;
               DataItemTable=Table5056;
               DataItemTableView=SORTING(Contact No.,Mailing Group Code);
               OnPreDataItem=BEGIN
                               IF ContactOK AND (GETFILTERS <> '') THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := TRUE;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Mailing Group Code;
               DataItemLink=Contact No.=FIELD(No.) }

    { 3056;1   ;DataItem;                    ;
               DataItemTable=Table5065;
               DataItemTableView=SORTING(Contact Company No.,Contact No.,Date);
               OnPreDataItem=BEGIN
                               IF ContactOK AND (GETFILTERS <> '') THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := TRUE;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Date,Segment No.,Campaign No.,Evaluation,Interaction Template Code,Salesperson Code;
               DataItemLink=Contact Company No.=FIELD(Company No.),
                            Contact No.=FIELD(No.) }

    { 6030;1   ;DataItem;                    ;
               DataItemTable=Table5067;
               DataItemTableView=SORTING(Contact No.,Job Responsibility Code);
               OnPreDataItem=BEGIN
                               IF ContactOK AND (GETFILTERS <> '') THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := TRUE;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Job Responsibility Code;
               DataItemLink=Contact No.=FIELD(No.) }

    { 4008;1   ;DataItem;                    ;
               DataItemTable=Table5058;
               DataItemTableView=SORTING(Contact No.,Industry Group Code);
               OnPreDataItem=BEGIN
                               IF ContactOK AND (GETFILTERS <> '') THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  ContactOK := TRUE;
                                  CurrReport.BREAK;
                                END;

               ReqFilterFields=Industry Group Code;
               DataItemLink=Contact No.=FIELD(Company No.) }

    { 8768;1   ;DataItem;                    ;
               DataItemTable=Table5054;
               DataItemTableView=SORTING(Contact No.,Business Relation Code);
               OnPreDataItem=BEGIN
                               IF ContactOK AND ((GETFILTERS <> '') OR ItemFilters) THEN
                                 ContactOK := FALSE
                               ELSE
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  SkipItemLedgerEntry := FALSE;
                                  IF NOT ItemFilters THEN BEGIN
                                    ContactOK := TRUE;
                                    SkipItemLedgerEntry := TRUE;
                                    CurrReport.BREAK;
                                  END;
                                END;

               ReqFilterFields=Business Relation Code;
               DataItemLink=Contact No.=FIELD(Company No.) }

    { 8894;2   ;DataItem;                    ;
               DataItemTable=Table5802;
               DataItemTableView=SORTING(Source Type,Source No.,Item No.,Posting Date);
               OnPreDataItem=BEGIN
                               IF SkipItemLedgerEntry THEN
                                 CurrReport.BREAK;

                               CASE "Contact Business Relation"."Link to Table" OF
                                 "Contact Business Relation"."Link to Table"::Customer:
                                   BEGIN
                                     SETRANGE("Source Type","Source Type"::Customer);
                                     SETRANGE("Source No.","Contact Business Relation"."No.");
                                   END;
                                 "Contact Business Relation"."Link to Table"::Vendor:
                                   BEGIN
                                     SETRANGE("Source Type","Source Type"::Vendor);
                                     SETRANGE("Source No.","Contact Business Relation"."No.");
                                   END
                                 ELSE
                                   CurrReport.BREAK;
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Contact.Type = Contact.Type::Person THEN
                                    ContactOK := FindContInPostDocuments(Contact."No.","Value Entry")
                                  ELSE
                                    ContactOK := TRUE;

                                  IF ContactOK THEN
                                    CurrReport.BREAK;
                                END;

               ReqFilterFields=Item No.,Variant Code,Posting Date,Inventory Posting Group }

    { 5444;1   ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnAfterGetRecord=BEGIN
                                  IF ContactOK THEN
                                    InsertContact(Contact);
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Allow Existing Contacts;
                             ENG=Allow Existing Contacts];
                  SourceExpr=AllowExistingContact }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Expand Companies;
                             ENG=Expand Companies];
                  SourceExpr=ExpandCompanies }

      { 5   ;2   ;Field     ;
                  CaptionML=[ENU=Allow Related Companies;
                             ENG=Allow Related Companies];
                  SourceExpr=AllowCoRepdByContPerson;
                  MultiLine=Yes }

      { 7   ;2   ;Field     ;
                  CaptionML=[ENU=Ignore Exclusion;
                             ENG=Ignore Exclusion];
                  SourceExpr=IgnoreExclusion }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Inserting contacts @1@@@@@@@@@@@@@;ENG=Inserting contacts @1@@@@@@@@@@@@@';
      TempCont@1001 : TEMPORARY Record 5050;
      TempCont2@1002 : TEMPORARY Record 5050;
      Cont@1003 : Record 5050;
      SegLine@1004 : Record 5077;
      SegmentHistoryMgt@1005 : Codeunit 5061;
      SegCriteriaManagement@1006 : Codeunit 5062;
      NextLineNo@1007 : Integer;
      ItemFilters@1008 : Boolean;
      ContactOK@1009 : Boolean;
      AllowExistingContact@1010 : Boolean;
      ExpandCompanies@1011 : Boolean;
      AllowCoRepdByContPerson@1012 : Boolean;
      IgnoreExclusion@1013 : Boolean;
      SkipItemLedgerEntry@1014 : Boolean;
      Window@1015 : Dialog;
      NoOfRecords@1016 : Integer;
      RecordNo@1017 : Integer;
      OldTime@1018 : Time;
      NewTime@1019 : Time;
      OldProgress@1020 : Integer;
      NewProgress@1021 : Integer;

    PROCEDURE SetOptions@4(OptionAllowExistingContact@1000 : Boolean;OptionExpandCompanies@1001 : Boolean;OptionAllowCoRepdByContPerson@1002 : Boolean;OptionIgnoreExclusion@1003 : Boolean);
    BEGIN
      AllowExistingContact := OptionAllowExistingContact;
      ExpandCompanies := OptionExpandCompanies;
      AllowCoRepdByContPerson := OptionAllowCoRepdByContPerson;
      IgnoreExclusion := OptionIgnoreExclusion;
    END;

    LOCAL PROCEDURE InsertContact@9(VAR CheckedCont@1000 : Record 5050);
    BEGIN
      TempCont := CheckedCont;
      IF TempCont.INSERT THEN;
    END;

    LOCAL PROCEDURE AddPeople@2();
    BEGIN
      TempCont.RESET;
      IF TempCont.FIND('-') THEN
        REPEAT
          IF TempCont."Company No." <> '' THEN BEGIN
            Cont.SETCURRENTKEY("Company No.");
            Cont.SETRANGE("Company No.",TempCont."Company No.");
            IF Cont.FIND('-') THEN
              REPEAT
                TempCont2 := Cont;
                IF TempCont2.INSERT THEN;
              UNTIL Cont.NEXT = 0
          END ELSE BEGIN
            TempCont2 := TempCont;
            TempCont2.INSERT;
          END;
        UNTIL TempCont.NEXT = 0;

      TempCont.DELETEALL;
      IF TempCont2.FIND('-') THEN
        REPEAT
          TempCont := TempCont2;
          TempCont.INSERT;
        UNTIL TempCont2.NEXT = 0;
      TempCont2.DELETEALL;
    END;

    LOCAL PROCEDURE DeleteCompanies@3();
    BEGIN
      TempCont.RESET;
      TempCont.SETCURRENTKEY("Company No.");
      TempCont.SETRANGE(Type,TempCont.Type::Company);
      IF TempCont.FIND('-') THEN
        REPEAT
          TempCont.SETRANGE("Company No.",TempCont."Company No.");
          TempCont.SETRANGE(Type,TempCont.Type::Person);
          IF TempCont.COUNT > 0 THEN
            TempCont.DELETE;
          TempCont.SETRANGE("Company No.");
          TempCont.SETRANGE(Type,TempCont.Type::Company);
        UNTIL TempCont.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateSegLines@1();
    BEGIN
      SegLine.SETRANGE("Segment No.","Segment Header"."No.");
      IF SegLine.FINDLAST THEN
        NextLineNo := SegLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      TempCont.RESET;
      TempCont.SETCURRENTKEY("Company Name","Company No.",Type,Name);
      IF NOT IgnoreExclusion THEN
        TempCont.SETRANGE("Exclude from Segment",FALSE);
      IF TempCont.FIND('-') THEN
        REPEAT
          ContactOK := TRUE;
          IF NOT AllowExistingContact THEN BEGIN
            SegLine.SETCURRENTKEY("Contact No.","Segment No.");
            SegLine.SETRANGE("Contact No.",TempCont."No.");
            SegLine.SETRANGE("Segment No.","Segment Header"."No.");
            IF SegLine.FINDFIRST THEN
              ContactOK := FALSE;
          END;

          IF ContactOK THEN BEGIN
            SegLine.INIT;
            SegLine."Line No." := NextLineNo;
            SegLine.VALIDATE("Segment No.","Segment Header"."No.");
            SegLine.VALIDATE("Contact No.",TempCont."No.");
            SegLine.INSERT(TRUE);
            SegmentHistoryMgt.InsertLine(
              SegLine."Segment No.",SegLine."Contact No.",SegLine."Line No.");
            NextLineNo := SegLine."Line No." + 10000;
          END;
        UNTIL TempCont.NEXT = 0;
    END;

    LOCAL PROCEDURE FindContInPostDocuments@5(ContactNo@1000 : Code[20];ValueEntry@1002 : Record 5802) : Boolean;
    VAR
      SalesShptHeader@1005 : Record 110;
      SalesInvHeader@1004 : Record 112;
      ReturnRcptHeader@1003 : Record 6660;
      SalesCrMemoHeader@1001 : Record 114;
      PurchRcptHeader@1009 : Record 120;
      PurchInvHeader@1008 : Record 122;
      ReturnShptHeader@1007 : Record 6650;
      PurchCrMemoHeader@1006 : Record 124;
    BEGIN
      WITH ValueEntry DO
        CASE "Source Type" OF
          "Source Type"::Customer:
            BEGIN
              IF SalesInvHeader.READPERMISSION THEN
                IF SalesInvHeader.GET("Document No.") THEN
                  IF (SalesInvHeader."Sell-to Contact No." = ContactNo) OR
                     (SalesInvHeader."Bill-to Contact No." = ContactNo)
                  THEN
                    EXIT(TRUE);
              IF SalesShptHeader.READPERMISSION THEN
                IF SalesShptHeader.GET("Document No.") THEN
                  IF (SalesShptHeader."Sell-to Contact No." = ContactNo) OR
                     (SalesShptHeader."Bill-to Contact No." = ContactNo)
                  THEN
                    EXIT(TRUE);
              IF SalesCrMemoHeader.READPERMISSION THEN
                IF SalesCrMemoHeader.GET("Document No.") THEN
                  IF (SalesCrMemoHeader."Sell-to Contact No." = ContactNo) OR
                     (SalesCrMemoHeader."Bill-to Contact No." = ContactNo)
                  THEN
                    EXIT(TRUE);
              IF ReturnRcptHeader.READPERMISSION THEN
                IF ReturnRcptHeader.GET("Document No.") THEN
                  IF (ReturnRcptHeader."Sell-to Contact No." = ContactNo) OR
                     (ReturnRcptHeader."Bill-to Contact No." = ContactNo)
                  THEN
                    EXIT(TRUE);
            END;
          "Source Type"::Vendor:
            BEGIN
              IF PurchInvHeader.READPERMISSION THEN
                IF PurchInvHeader.GET("Document No.") THEN
                  IF (PurchInvHeader."Buy-from Contact No." = ContactNo) OR
                     (PurchInvHeader."Pay-to Contact No." = ContactNo)
                  THEN
                    EXIT(TRUE);
              IF ReturnShptHeader.READPERMISSION THEN
                IF ReturnShptHeader.GET("Document No.") THEN
                  IF (ReturnShptHeader."Buy-from Contact No." = ContactNo) OR
                     (ReturnShptHeader."Pay-to Contact No." = ContactNo)
                  THEN
                    EXIT(TRUE);
              IF PurchCrMemoHeader.READPERMISSION THEN
                IF PurchCrMemoHeader.GET("Document No.") THEN
                  IF (PurchCrMemoHeader."Buy-from Contact No." = ContactNo) OR
                     (PurchCrMemoHeader."Pay-to Contact No." = ContactNo)
                  THEN
                    EXIT(TRUE);
              IF PurchRcptHeader.READPERMISSION THEN
                IF PurchRcptHeader.GET("Document No.") THEN
                  IF (PurchRcptHeader."Buy-from Contact No." = ContactNo) OR
                     (PurchRcptHeader."Pay-to Contact no." = ContactNo)
                  THEN
                    EXIT(TRUE);
            END;
        END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

