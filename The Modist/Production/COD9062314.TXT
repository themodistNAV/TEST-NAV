OBJECT Codeunit 9062314 Planning Board Action Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=24/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PlanningBoardAction@9062230 : Record 9062344;
      tClickHereToEditAction@9062231 : TextConst 'ENU=(Click here to edit action);ENG=(Click here to edit action)';
      PlanningBoardContext@9062234 : Record 9062349;
      PlanningBoardDataManagement@1000000000 : Codeunit 9062307;
      TnpToolkit@9062233 : Codeunit 9062230;
      DateTimeFieldIdx@9062232 : ' ,StartDate,StartTime,EndDate,EndTime';

    LOCAL PROCEDURE "--- Text ---"@9062242();
    BEGIN
    END;

    PROCEDURE GetPlanningBoardMenuItemActionText@9062246(pPlanningBoardMenuItem@9062230 : Record 9062343) : Text;
    BEGIN
      //DOC NA2016.12 - Returning planning board menu item action text
      //  -> pPlanningBoardMenuItem: The menu item
      //  <- The text

      pPlanningBoardMenuItem.CALCFIELDS("Action Description");
      IF (pPlanningBoardMenuItem."Action Description" <> '') THEN
        EXIT(pPlanningBoardMenuItem."Action Description")
      ELSE
        EXIT(tClickHereToEditAction);
    END;

    PROCEDURE GetPlanningBordEventActionText@9062245(pPlanningBoardEvent@9062230 : Record 9062345) : Text;
    BEGIN
      //DOC NA2016.12 - Returning planing board event action text
      //  -> pPlanningBoardEvent: The event
      //  <- The text

      pPlanningBoardEvent.CALCFIELDS("Action Description");
      IF (pPlanningBoardEvent."Action Description" <> '') THEN
        EXIT(pPlanningBoardEvent."Action Description")
      ELSE
        EXIT(tClickHereToEditAction);
    END;

    LOCAL PROCEDURE "--- Edit ---"@9062237();
    BEGIN
    END;

    PROCEDURE EditPlanningBoardMenuItemAction@9062234(pPlanningBoardMenuItem@9062230 : Record 9062343);
    BEGIN
      //DOC NA2016.12 - Editing planning board menu item action
      //  -> pPlanningBoardMenuItem: The menu item

      EditAction(pPlanningBoardMenuItem."Planning Board Code", PlanningBoardAction."Parent Table"::"Planning Board Menu Item",
        pPlanningBoardMenuItem."Planning Board Table Type", pPlanningBoardMenuItem.ID);
    END;

    PROCEDURE EditPlanningBordEventAction@9062235(pPlanningBoardEvent@9062230 : Record 9062345);
    BEGIN
      //DOC NA2016.12 - Editing planing board event action
      //  -> pPlanningBoardEvent: The event

      EditAction(pPlanningBoardEvent."Planning Board Code", PlanningBoardAction."Parent Table"::"Planning Board Event", 0,
        pPlanningBoardEvent.ID);
    END;

    LOCAL PROCEDURE EditAction@9062233(pPlanningBoardCode@9062230 : Code[20];pParentTable@9062231 : Integer;pParentTableType@9062232 : Integer;pParentId@9062233 : Integer);
    BEGIN
      //DOC NA2016.12 - Editing an action
      //  -> pPlanningBoardCode: Planning board code
      //  -> pParentTable: Parent table
      //  -> pParentTableType: Parent table type
      //  -> pParentId: Parent ID

      IF ( NOT (PlanningBoardAction.GET(pPlanningBoardCode, pParentTable, pParentTableType, pParentId))) THEN
      BEGIN
        CLEAR(PlanningBoardAction);
        PlanningBoardAction.INIT();
        PlanningBoardAction.VALIDATE("Planning Board Code", pPlanningBoardCode);
        PlanningBoardAction.VALIDATE("Parent Table", pParentTable);
        PlanningBoardAction.VALIDATE("Parent Table Type", pParentTableType);
        PlanningBoardAction.VALIDATE("Parent ID", pParentId);
        PlanningBoardAction.INSERT(TRUE);
        COMMIT;
      END;

      PlanningBoardAction.FILTERGROUP(2);
      PlanningBoardAction.SETRECFILTER();
      PlanningBoardAction.FILTERGROUP(0);

      PAGE.RUNMODAL(PAGE::"Planning Board Action", PlanningBoardAction);
    END;

    LOCAL PROCEDURE "--- Delete ---"@9062238();
    BEGIN
    END;

    PROCEDURE DeletePlanningBoardMenuItemAction@9062241(pPlanningBoardMenuItem@9062230 : Record 9062343);
    BEGIN
      //DOC NA2016.12 - Deleting planning board menu item action
      //  -> pPlanningBoardMenuItem: The menu item

      DeleteAction(pPlanningBoardMenuItem."Planning Board Code", PlanningBoardAction."Parent Table"::"Planning Board Menu Item",
        pPlanningBoardMenuItem."Planning Board Table Type", pPlanningBoardMenuItem.ID);
    END;

    PROCEDURE DeletePlanningBordEventAction@9062240(pPlanningBoardEvent@9062230 : Record 9062345);
    BEGIN
      //DOC NA2016.12 - Deleting planing board event action
      //  -> pPlanningBoardEvent: The event

      DeleteAction(pPlanningBoardEvent."Planning Board Code", PlanningBoardAction."Parent Table"::"Planning Board Event", 0,
        pPlanningBoardEvent.ID);
    END;

    LOCAL PROCEDURE DeleteAction@9062239(pPlanningBoardCode@9062233 : Code[20];pParentTable@9062232 : Integer;pParentTableType@9062231 : Integer;pParentId@9062230 : Integer);
    BEGIN
      //DOC NA2016.12 - Deleting an action
      //  -> pPlanningBoardCode: Planning board code
      //  -> pParentTable: Parent table
      //  -> pParentTableType: Parent table type
      //  -> pParentId: Parent ID

      IF (PlanningBoardAction.GET(pPlanningBoardCode, pParentTable, pParentTableType, pParentId)) THEN
        PlanningBoardAction.DELETE(TRUE);
    END;

    LOCAL PROCEDURE "--- RecordRef ---"@9062236();
    BEGIN
    END;

    PROCEDURE OpenRecordRefForResource@9062230(VAR pPlanningBoardContext@9062230 : Record 9062349;pFind@9062233 : Boolean;VAR pRecordRef@9062232 : RecordRef;VAR pPlanningBoardResourceBuffer@9062234 : TEMPORARY Record 9062346);
    VAR
      lPlanningBoardTable@9062231 : Record 9062338;
    BEGIN
      //DOC NA2016.12 - Opening global RecordRef for the current resource
      //  <> pPlanningBoardContext: Planning board context
      //  -> pFind: Flag to find the current resource
      //  <> pRecordRef: RecordRef
      //  <> pPlanningBoardResourceBuffer: Target planning board resource buffer

      pPlanningBoardContext.TESTFIELD("Planning Board Code");
      lPlanningBoardTable.GET(pPlanningBoardContext."Planning Board Code", lPlanningBoardTable."Table Type"::Resource);
      lPlanningBoardTable.TESTFIELD("Table ID");

      IF (pFind) THEN
      BEGIN
        pPlanningBoardContext.TESTFIELD("Event Resource ID");
        pPlanningBoardContext.GetResourceBuffer(pPlanningBoardResourceBuffer);
        pPlanningBoardResourceBuffer.GET(pPlanningBoardContext."Planning Board Code", pPlanningBoardContext."Event Resource ID");
        pPlanningBoardResourceBuffer.TESTFIELD(Position);
      END;

      CLEAR(pRecordRef);
      pRecordRef.OPEN(lPlanningBoardTable."Table ID");
      IF (pFind) THEN
      BEGIN
        pRecordRef.SETPOSITION(pPlanningBoardResourceBuffer.Position);
        pRecordRef.SETRECFILTER();
        pRecordRef.FINDFIRST();
      END;
    END;

    PROCEDURE OpenRecordRefForEntry@9062252(VAR pPlanningBoardContext@9062230 : Record 9062349;pFind@9062232 : Boolean;VAR pRecordRef@9062231 : RecordRef;VAR pPlanningBoardEntryBuffer@9062234 : TEMPORARY Record 9062347);
    VAR
      lPlanningBoardTable@9062233 : Record 9062338;
    BEGIN
      //DOC NA2016.12 - Opening global RecordRef for the current entry
      //  <> pPlanningBoardContext: Planning board context
      //  -> pFind: Flag to find the current entry
      //  <> pRecordRef: RecordRef
      //  <> pPlanningBoardEntryBuffer: Target planning board entry buffer

      pPlanningBoardContext.TESTFIELD("Planning Board Code");
      lPlanningBoardTable.GET(pPlanningBoardContext."Planning Board Code", lPlanningBoardTable."Table Type"::Entry);
      lPlanningBoardTable.TESTFIELD("Table ID");

      IF (pFind) THEN
      BEGIN
        pPlanningBoardContext.TESTFIELD("Event Entry ID");
        pPlanningBoardContext.GetEntryBuffer(pPlanningBoardEntryBuffer);
        pPlanningBoardEntryBuffer.GET(pPlanningBoardContext."Planning Board Code", pPlanningBoardContext."Event Entry ID");
        pPlanningBoardEntryBuffer.TESTFIELD(Position);
      END;

      CLEAR(pRecordRef);
      pRecordRef.OPEN(lPlanningBoardTable."Table ID");
      IF (pFind) THEN
      BEGIN
        pRecordRef.SETPOSITION(pPlanningBoardEntryBuffer.Position);
        pRecordRef.SETRECFILTER();
        pRecordRef.FINDFIRST();
      END;
    END;

    PROCEDURE CloseRecordRef@9062253(VAR pRecordRef@9062231 : RecordRef);
    BEGIN
      //DOC NA2016.12 - Closing RecordRef
      //  <> pRecRef: RecordRef

      pRecordRef.CLOSE();
      CLEAR(pRecordRef);
    END;

    LOCAL PROCEDURE "--- Names ---"@9062232();
    BEGIN
    END;

    PROCEDURE GetResourceTableName@9062254(VAR pPlanningBoardContext@9062230 : Record 9062349) : Text;
    VAR
      lPlanningBoardTable@9062231 : Record 9062338;
    BEGIN
      //DOC NA2016.12 - Returning resource table name
      //  <> pPlanningBoardContext: Planning board context
      //  <- The name

      EXIT(GetTableName(pPlanningBoardContext, lPlanningBoardTable."Table Type"::Resource));
    END;

    PROCEDURE GetEntryTableName@9062255(VAR pPlanningBoardContext@9062230 : Record 9062349) : Text;
    VAR
      lPlanningBoardTable@9062231 : Record 9062338;
    BEGIN
      //DOC NA2016.12 - Returning entry table name
      //  <> pPlanningBoardContext: Planning board context
      //  <- The name

      EXIT(GetTableName(pPlanningBoardContext, lPlanningBoardTable."Table Type"::Entry));
    END;

    LOCAL PROCEDURE GetTableName@9062257(VAR pPlanningBoardContext@9062230 : Record 9062349;pTableType@9062232 : Option) : Text;
    VAR
      lPlanningBoardTable@9062233 : Record 9062338;
      lTableName@9062231 : Text;
    BEGIN
      //DOC NA2016.12 - Returning table name
      //  <> pPlanningBoardContext: Planning board context
      //  -> pTableType: Table type
      //  <- The name

      pPlanningBoardContext.TESTFIELD("Planning Board Code");
      lPlanningBoardTable.GET(pPlanningBoardContext."Planning Board Code", pTableType);
      lPlanningBoardTable.TESTFIELD("Table ID");
      lPlanningBoardTable.CALCFIELDS("Table Caption");
      IF (lPlanningBoardTable."Table Caption" <> '') THEN
        lTableName := lPlanningBoardTable."Table Caption"
      ELSE
        lTableName := FORMAT(lPlanningBoardTable."Table Type");
      EXIT(lTableName);
    END;

    PROCEDURE GetRecordName@9062256(VAR pRecordRef@9062231 : RecordRef) : Text;
    VAR
      lRecordName@9062235 : Text;
      lKeyRef@9062232 : KeyRef;
      lFieldRef@9062233 : FieldRef;
      lFieldIndex@9062234 : Integer;
      lFieldText@9062236 : Text;
    BEGIN
      //DOC NA2016.12 - Returning resource record name
      //  <> pRecordRef: RecordRef with resource
      //  <- The name

      CLEAR(lRecordName);

      lKeyRef := pRecordRef.KEYINDEX(1);
      FOR lFieldIndex := 1 TO lKeyRef.FIELDCOUNT() DO
      BEGIN
        lFieldRef := lKeyRef.FIELDINDEX(lFieldIndex);
        lFieldText := FORMAT(lFieldRef.VALUE);
        IF (lRecordName <> '') THEN
          lRecordName := lRecordName + ', ';
        lRecordName := lRecordName + lFieldText;
      END;

      EXIT(lRecordName);
    END;

    LOCAL PROCEDURE "--- Entry Modifications ---"@9062243();
    BEGIN
    END;

    PROCEDURE SetEntryResource@9062258(VAR pPlanningBoardContext@9062231 : Record 9062349;VAR pResourceRecordRef@9062233 : RecordRef;VAR pEntryRecordRef@9062230 : RecordRef);
    VAR
      lPlanningBoardTableLink@9062232 : Record 9062339;
      lResourceFieldRef@9062235 : FieldRef;
      lEntryFieldRef@9062236 : FieldRef;
      lFieldValue@9062234 : Variant;
    BEGIN
      //DOC NA2016.12 - Setting entry resource
      //  <> pPlanningBoardContext: Planning board context
      //  <> pResourceRecordRef: Resource RecordRef
      //  <> pEntryRecordRef: Entry RecordRef

      pPlanningBoardContext.TESTFIELD("Planning Board Code");
      lPlanningBoardTableLink.RESET();
      lPlanningBoardTableLink.SETRANGE("Planning Board Code", pPlanningBoardContext."Planning Board Code");
      IF (lPlanningBoardTableLink.FINDSET()) THEN
      REPEAT
        lPlanningBoardTableLink.TESTFIELD("Resource Table Field ID");
        lPlanningBoardTableLink.TESTFIELD("Entry Table Field ID");
        lResourceFieldRef := pResourceRecordRef.FIELD(lPlanningBoardTableLink."Resource Table Field ID");
        lFieldValue := lResourceFieldRef.VALUE;
        lEntryFieldRef := pEntryRecordRef.FIELD(lPlanningBoardTableLink."Entry Table Field ID");
        lEntryFieldRef.VALIDATE(lFieldValue);
      UNTIL (lPlanningBoardTableLink.NEXT() = 0);
    END;

    PROCEDURE SetEntryBufferResource@9062260(VAR pPlanningBoardContext@9062230 : Record 9062349;VAR pPlanningBoardEntryBuffer@9062231 : Record 9062347);
    BEGIN
      //DOC NA2016.12 - Setting entry buffer resource
      //  <> pPlanningBoardContext: Planning board context
      //  <> pPlanningBoardEntryBuffer: The entry buffer

      IF (pPlanningBoardEntryBuffer."Resource ID" <> pPlanningBoardContext."Event Resource ID") THEN
        pPlanningBoardEntryBuffer."Resource ID" := pPlanningBoardContext."Event Resource ID";
    END;

    PROCEDURE SetEntryDatesTimes@9062231(VAR pPlanningBoardContext@9062231 : Record 9062349;pDateTimeUpdate@9062241 : Integer;VAR pRecordRef@9062230 : RecordRef);
    VAR
      lPlanningBoardTable@9062232 : Record 9062338;
      lFieldIdx@9062240 : Integer;
      lFieldRef@9062239 : FieldRef;
      lFieldFlags@9062233 : ARRAY [4] OF Boolean;
      lFieldIds@9062234 : ARRAY [4] OF Integer;
      lFieldValues@9062237 : ARRAY [4] OF Variant;
      lFieldSequence@9062242 : ARRAY [4] OF Integer;
      lFieldSequenceIdx@9062243 : Integer;
      lUseDateTimes@9062235 : Boolean;
      lUseDateTimesDatesOnly@9062236 : Boolean;
      lTimes@9062238 : ARRAY [4] OF Time;
    BEGIN
      //DOC NA2016.12 - Setting entry dates
      //  <> pPlanningBoardContext: Planning board context
      //  -> pDateTimeUpdate: Date time update (see "Planning Board Context"."Date Time Update" field for options)
      //  <> pRecordRef: RecordRef with entry

      IF (pDateTimeUpdate = pPlanningBoardContext."Date Time Update"::" ") THEN
        EXIT;

      pPlanningBoardContext.TESTFIELD("Planning Board Code");
      lPlanningBoardTable.GET(pPlanningBoardContext."Planning Board Code", lPlanningBoardTable."Table Type"::Entry);

      DetectEntryDateTimeFields(lPlanningBoardTable, lFieldFlags, lFieldIds, lUseDateTimes, lUseDateTimesDatesOnly);

      IF (lUseDateTimes) THEN
      BEGIN
        lTimes[DateTimeFieldIdx::StartTime] := TnpToolkit.IIFTime(lUseDateTimesDatesOnly, 000000T, pPlanningBoardContext."Event Start Time");
        lTimes[DateTimeFieldIdx::EndTime] := TnpToolkit.IIFTime(lUseDateTimesDatesOnly, 000000T, pPlanningBoardContext."Event End Time");
        lFieldValues[DateTimeFieldIdx::StartDate] := CREATEDATETIME(pPlanningBoardContext."Event Start Date", lTimes[DateTimeFieldIdx::StartTime]);
        lFieldValues[DateTimeFieldIdx::EndDate] := CREATEDATETIME(pPlanningBoardContext."Event End Date", lTimes[DateTimeFieldIdx::EndTime]);
      END
      ELSE
      BEGIN
        lFieldValues[DateTimeFieldIdx::StartDate] := pPlanningBoardContext."Event Start Date";
        lFieldValues[DateTimeFieldIdx::StartTime] := pPlanningBoardContext."Event Start Time";
        lFieldValues[DateTimeFieldIdx::EndDate] := pPlanningBoardContext."Event End Date";
        lFieldValues[DateTimeFieldIdx::EndTime] := pPlanningBoardContext."Event End Time";
      END;

      CASE (pDateTimeUpdate) OF
        pPlanningBoardContext."Date Time Update"::"First Start":
          SetFieldSequence(DateTimeFieldIdx::StartDate, DateTimeFieldIdx::StartTime, DateTimeFieldIdx::EndDate, DateTimeFieldIdx::EndTime, lFieldSequence);
        pPlanningBoardContext."Date Time Update"::"First End":
          SetFieldSequence(DateTimeFieldIdx::EndDate, DateTimeFieldIdx::EndTime, DateTimeFieldIdx::StartDate, DateTimeFieldIdx::StartTime, lFieldSequence);
        pPlanningBoardContext."Date Time Update"::"Only Start":
          SetFieldSequence(DateTimeFieldIdx::StartDate, DateTimeFieldIdx::StartTime, 0, 0, lFieldSequence);
        pPlanningBoardContext."Date Time Update"::"Only End":
          SetFieldSequence(DateTimeFieldIdx::EndDate, DateTimeFieldIdx::EndTime, 0, 0, lFieldSequence);
      END;

      FOR lFieldSequenceIdx := 1 TO ARRAYLEN(lFieldSequence) DO
      BEGIN
        lFieldIdx := lFieldSequence[lFieldSequenceIdx];
        IF (lFieldIdx <> 0) THEN
          IF (lFieldFlags[lFieldIdx]) THEN
          BEGIN
            lFieldRef := pRecordRef.FIELD(lFieldIds[lFieldIdx]);
            lFieldRef.VALIDATE(lFieldValues[lFieldIdx]);
          END;
      END;
    END;

    PROCEDURE SetEntryBufferDatesTimes@9062250(VAR pPlanningBoardContext@9062230 : Record 9062349;VAR pPlanningBoardEntryBuffer@9062231 : Record 9062347);
    BEGIN
      //DOC NA2016.12 - Setting entry buffer dates & times
      //  <> pPlanningBoardContext: Planning board context
      //  <> pPlanningBoardEntryBuffer: The entry buffer

      IF ((pPlanningBoardEntryBuffer."Start Date" <> pPlanningBoardContext."Event Start Date") OR
          (pPlanningBoardEntryBuffer."Start Time" <> pPlanningBoardContext."Event Start Time") OR
          (pPlanningBoardEntryBuffer."End Date" <> pPlanningBoardContext."Event End Date") OR
          (pPlanningBoardEntryBuffer."End Time" <> pPlanningBoardContext."Event End Time")) THEN
      BEGIN
        pPlanningBoardEntryBuffer."Start Date" := pPlanningBoardContext."Event Start Date";
        pPlanningBoardEntryBuffer."Start Time" := pPlanningBoardContext."Event Start Time";
        pPlanningBoardEntryBuffer."End Date" := pPlanningBoardContext."Event End Date";
        pPlanningBoardEntryBuffer."End Time" := pPlanningBoardContext."Event End Time";
      END;
    END;

    LOCAL PROCEDURE SetFieldSequence@9062259(pFieldIdx1@9062230 : Integer;pFieldIdx2@9062231 : Integer;pFieldIdx3@9062232 : Integer;pFieldIdx4@9062233 : Integer;VAR pFieldSequence@9062234 : ARRAY [4] OF Integer);
    BEGIN
      //DOC NA2016.12 - Setting field sequence (for date / time update)
      //  -> pFieldIdx1..pFieldIdx4: Field indexes 1 to 4
      //  <> pFieldSequence: Target array - field sequence

      pFieldSequence[1] := pFieldIdx1;
      pFieldSequence[2] := pFieldIdx2;
      pFieldSequence[3] := pFieldIdx3;
      pFieldSequence[4] := pFieldIdx4;
    END;

    LOCAL PROCEDURE DetectEntryDateTimeFields@9062264(pPlanningBoardTable@9062230 : Record 9062338;VAR pFieldFlags@9062231 : ARRAY [4] OF Boolean;VAR pFieldIds@9062232 : ARRAY [4] OF Integer;VAR pUseDateTimes@9062233 : Boolean;VAR pUseDateTimesDatesOnly@9062234 : Boolean);
    BEGIN
      //DOC NA2016.12 - Detecting entry date / time fields
      //  -> pPlanningBoardTable: Planning board table (entry one)
      //  <> pFieldFlags: Target array of flags whether fields are required
      //  <> pFieldIds: Target array of field IDs
      //  <> pDateTimes: Datetimes detected
      //  <> pDateTimesDatesOnly: Datetimes in "dates only" mode detected

      pFieldFlags[DateTimeFieldIdx::StartDate] := TRUE;
      IF (pFieldFlags[DateTimeFieldIdx::StartDate]) THEN
      BEGIN
        pPlanningBoardTable.TESTFIELD("Start Date Field ID");
        pFieldIds[DateTimeFieldIdx::StartDate] := pPlanningBoardTable."Start Date Field ID";
      END;

      pFieldFlags[DateTimeFieldIdx::StartTime] := (pPlanningBoardTable."Date Time Fields" IN
        [pPlanningBoardTable."Date Time Fields"::"Dates and Times",
         pPlanningBoardTable."Date Time Fields"::"Single Date and Time"]);
      IF (pFieldFlags[DateTimeFieldIdx::StartTime]) THEN
      BEGIN
        pPlanningBoardTable.TESTFIELD("Start Time Field ID");
        pFieldIds[DateTimeFieldIdx::StartTime] := pPlanningBoardTable."Start Time Field ID";
      END;

      pFieldFlags[DateTimeFieldIdx::EndDate] := (pPlanningBoardTable."Date Time Fields" IN
        [pPlanningBoardTable."Date Time Fields"::Dates,
         pPlanningBoardTable."Date Time Fields"::"Dates and Times",
         pPlanningBoardTable."Date Time Fields"::DateTimes,
         pPlanningBoardTable."Date Time Fields"::"DateTimes (Dates Only)"]);
      IF (pFieldFlags[DateTimeFieldIdx::EndDate]) THEN
      BEGIN
        pPlanningBoardTable.TESTFIELD("End Date Field ID");
        pFieldIds[DateTimeFieldIdx::EndDate] := pPlanningBoardTable."End Date Field ID";
      END;

      pFieldFlags[DateTimeFieldIdx::EndTime] := (pPlanningBoardTable."Date Time Fields" =
        pPlanningBoardTable."Date Time Fields"::"Dates and Times");
      IF (pFieldFlags[DateTimeFieldIdx::EndTime]) THEN
      BEGIN
        pPlanningBoardTable.TESTFIELD("End Time Field ID");
        pFieldIds[DateTimeFieldIdx::EndTime] := pPlanningBoardTable."End Time Field ID";
      END;

      pUseDateTimes := (pPlanningBoardTable."Date Time Fields" IN
        [pPlanningBoardTable."Date Time Fields"::DateTimes,
         pPlanningBoardTable."Date Time Fields"::"DateTimes (Dates Only)",
         pPlanningBoardTable."Date Time Fields"::"Single DateTime",
         pPlanningBoardTable."Date Time Fields"::"Single DateTime (Date Only)"]);
      pUseDateTimesDatesOnly := (pPlanningBoardTable."Date Time Fields" IN
        [pPlanningBoardTable."Date Time Fields"::"DateTimes (Dates Only)",
         pPlanningBoardTable."Date Time Fields"::"Single DateTime (Date Only)"]);
    END;

    LOCAL PROCEDURE "--- Dates and Times ---"@9062244();
    BEGIN
    END;

    PROCEDURE DetectDateTimeUpdate@9062248(pCurrentStartDate@9062230 : Date;pCurrentStartTime@9062235 : Time;pCurrentEndDate@9062231 : Date;pCurrentEndTime@9062236 : Time;pNewStartDate@9062232 : Date;pNewStartTime@9062237 : Time;pNewEndDate@9062233 : Date;pNewEndTime@9062238 : Time) : Integer;
    VAR
      lCurrentStart@9062239 : DateTime;
      lCurrentEnd@9062240 : DateTime;
      lNewStart@9062241 : DateTime;
      lNewEnd@9062242 : DateTime;
      lDateTimeUpdate@9062234 : Integer;
    BEGIN
      //DOC NA2016.12 - Detecting datetime update
      //  -> pCurrentStartDate: Current start date
      //  -> pCurrentStartTime: Current start time
      //  -> pCurrentEndDate: Current end date
      //  -> pCurrentEndTime: Current end date
      //  -> pNewStartDate: New start date
      //  -> pNewStartTime: New start date
      //  -> pNewEndDate: New end date
      //  -> pNewEndTime: New end time
      //  <- Datetime update (see "Planning Board Context"."Date Time Update" field for options)

      CLEAR(lDateTimeUpdate);

      DatesAndTimesToDateTimes(pCurrentStartDate, pCurrentStartTime, pCurrentEndDate, pCurrentEndTime, lCurrentStart, lCurrentEnd);
      DatesAndTimesToDateTimes(pNewStartDate, pNewStartTime, pNewEndDate, pNewEndTime, lNewStart, lNewEnd);

      IF ((lNewStart <> 0DT) AND (lNewEnd <> 0DT)) THEN
        IF ((lCurrentStart <> lNewStart) OR (lCurrentEnd <> lNewEnd)) THEN
          IF (lCurrentStart = lNewStart) THEN
            lDateTimeUpdate := PlanningBoardContext."Date Time Update"::"Only End"
          ELSE IF (lCurrentEnd = lNewEnd) THEN
            lDateTimeUpdate := PlanningBoardContext."Date Time Update"::"Only Start"
          ELSE IF (lNewStart > lCurrentStart) THEN
            lDateTimeUpdate := PlanningBoardContext."Date Time Update"::"First End"
          ELSE
            lDateTimeUpdate := PlanningBoardContext."Date Time Update"::"First Start";

      EXIT(lDateTimeUpdate);
    END;

    LOCAL PROCEDURE DatesAndTimesToDateTimes@9062249(pStartDate@9062230 : Date;pStartTime@9062231 : Time;pEndDate@9062232 : Date;pEndTime@9062233 : Time;VAR pStart@9062234 : DateTime;VAR pEnd@9062235 : DateTime);
    BEGIN
      //DOC NA2016.12 - Converting (safely) dates and times (start / end) to datetimes (start / end)
      //  -> pStartDate: The start date
      //  -> pStartTime: The start time
      //  -> pEndDate: The end date
      //  -> pEndTime: The end time
      //  <> pStart: Target start (datetime)
      //  <> pEnd: Target end (datetime)

      pStart := DateAndTimeToDateTime(pStartDate, pStartTime);
      pEnd := DateAndTimeToDateTime(pEndDate, pEndTime);
      ValidateDateTimes(pStart, pEnd);
    END;

    LOCAL PROCEDURE DateAndTimeToDateTime@9062247(pDate@9062230 : Date;pTime@9062231 : Time) : DateTime;
    VAR
      lDateTime@9062232 : DateTime;
    BEGIN
      //DOC NA2016.12 - Converting (safely) date and time to datetime
      //  -> pDate: The date
      //  -> pTime: The time
      //  <- The datetime

      CLEAR(lDateTime);
      IF (pDate <> 0D) THEN
      BEGIN
        IF (pTime = 0T) THEN
          pTime := 000000T;
        lDateTime := CREATEDATETIME(pDate, pTime);
      END;
      EXIT(lDateTime);
    END;

    LOCAL PROCEDURE ValidateDateTimes@9062251(pStart@9062230 : DateTime;pEnd@9062231 : DateTime);
    VAR
      lBuffer@9062232 : DateTime;
    BEGIN
      //DOC NA2016.12 - Validating datetimes (checking whether end >= start)
      //  <> pStart: Start (datetime)
      //  <> pEnd (datetime)

      IF ((pStart <> 0DT) AND (pEnd <> 0DT)) THEN
        IF (pStart > pEnd) THEN
        BEGIN
          lBuffer := pStart;
          pStart := pEnd;
          pEnd := lBuffer;
        END;
    END;

    LOCAL PROCEDURE "--- Timestamp ---"@9062269();
    BEGIN
    END;

    PROCEDURE GetTimestamp@9062270(pRecordRef@9062230 : RecordRef) : BigInteger;
    VAR
      lFieldRef@9062231 : FieldRef;
    BEGIN
      //DOC NA2016.12 - Returning recordref timestamp
      //  <- The timestamp

      lFieldRef := pRecordRef.FIELD(0);
      EXIT(lFieldRef.VALUE);
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 10/11/2015 - Created
      //DOC NA2016.16 JH 23/05/2016 - Bugfixes
    }
    END.
  }
}

