OBJECT Table 9062723 Quest. Template Action Line
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               CheckOpen();
             END;

    OnModify=BEGIN
               CheckOpen();
             END;

    OnDelete=BEGIN
               CheckOpen();
             END;

    OnRename=BEGIN
               CheckOpen();
             END;

    CaptionML=[ENU=Quest. Template Action Line;
               ENG=Quest. Template Action Line];
  }
  FIELDS
  {
    { 1   ;   ;Questionnaire Template Code;Code20 ;TableRelation="Questionnaire Template";
                                                   CaptionML=[ENU=Questionnaire Template Code;
                                                              ENG=Questionnaire Template Code] }
    { 3   ;   ;Quest. Action Template Id;Integer  ;TableRelation="Quest. Template Action Header".Id WHERE (Questionnaire Template Code=FIELD(Questionnaire Template Code));
                                                   OnValidate=BEGIN
                                                                IF (ActionTemplateHeader.GET("Questionnaire Template Code", "Quest. Action Template Id")) THEN BEGIN
                                                                  VALIDATE("Table Id", ActionTemplateHeader."Table Id");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Quest. Action Template Id;
                                                              ENG=Quest. Action Template Id];
                                                   NotBlank=Yes }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
    { 5   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 6   ;   ;Action Type         ;Option        ;OnValidate=BEGIN
                                                                IF ("Action Type" <> xRec."Action Type") THEN
                                                                  ClearValue();

                                                                IF ("Action Type" IN ["Action Type"::Insert, "Action Type"::Modify]) THEN
                                                                  "Run with Validation" := TRUE;
                                                              END;

                                                   CaptionML=[ENU=Action Type;
                                                              ENG=Action Type];
                                                   OptionCaptionML=[ENU=Set Field,Set Filter,Init,Find or Error,Insert,Find or Insert,Modify,Get from Variable,Get from Questionnaire;
                                                                    ENG=Set Field,Set Filter,Init,Find or Error,Insert,Find or Insert,Modify,Get from Variable,Get from Questionnaire];
                                                   OptionString=Set Field,Set Filter,Init,Find or Error,Insert,Find or Insert,Modify,Get from Variable,Get from Questionnaire }
    { 7   ;   ;Table Id            ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF ("Table Id" <> xRec."Table Id") THEN
                                                                  VALIDATE("Field Id", 0);
                                                              END;

                                                   CaptionML=[ENU=Table Id;
                                                              ENG=Table Id] }
    { 8   ;   ;Field Id            ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table Id));
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("Field Name");
                                                                IF ("Field Id" <> 0) THEN BEGIN
                                                                  Field.GET("Table Id", "Field Id");
                                                                  "Option String" := '';
                                                                  "Value Type" := ValueProcessing.FieldTypeToValueType(Field.Type);
                                                                END;
                                                                ClearValue();
                                                              END;

                                                   CaptionML=[ENU=Field Id;
                                                              ENG=Field Id] }
    { 9   ;   ;Field Name          ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field.FieldName WHERE (TableNo=FIELD(Table Id),
                                                                                             No.=FIELD(Field Id)));
                                                   CaptionML=[ENU=Field Name;
                                                              ENG=Field Name];
                                                   Editable=No }
    { 10  ;   ;Value Type          ;Option        ;InitValue=Text;
                                                   CaptionML=[ENU=Value Type;
                                                              ENG=Value Type];
                                                   OptionCaptionML=[ENU=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime;
                                                                    ENG=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime];
                                                   OptionString=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime;
                                                   ValuesAllowed=[OemText;Date;Time;DateFormula;Decimal;Text;Code;Boolean;Integer;OemCode;Option;BigInteger;Duration;GUID;DateTime];
                                                   Editable=No }
    { 11  ;   ;Option String       ;Text250       ;OnValidate=BEGIN
                                                                IF ("Option String" <> '') THEN
                                                                  TESTFIELD("Value Type", "Value Type"::Option);
                                                              END;

                                                   CaptionML=[ENU=Option String;
                                                              ENG=Option String] }
    { 12  ;   ;Value Calculation   ;Option        ;OnValidate=VAR
                                                                RecordAction@1000000000 : Boolean;
                                                              BEGIN
                                                                IF ("Value Calculation" <> xRec."Value Calculation") THEN
                                                                  ClearValue();

                                                                IF ("Value Calculation" = "Value Calculation"::"No.Series") THEN BEGIN
                                                                  IF (NOT("Value Type" IN ["Value Type"::Code, "Value Type"::OemCode, "Value Type"::Text, "Value Type"::OemText])) THEN
                                                                    ERROR(errNoSeriesValueType, "Value Type"::Code, "Value Type"::OemCode, "Value Type"::Text, "Value Type"::OemText);
                                                                  TESTFIELD("Action Type", "Action Type"::"Set Field");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Value Calculation;
                                                              ENG=Value Calculation];
                                                   OptionCaptionML=[ENU=Answer,Const,Record Variable,No.Series,Smart Value;
                                                                    ENG=Answer,Const,Record Variable,No.Series,Smart Value];
                                                   OptionString=Answer,Const,Record Variable,No.Series,Smart Value }
    { 17  ;   ;Answer must be Visible;Boolean     ;CaptionML=[ENU=Answer must be Visible;
                                                              ENG=Answer must be Visible] }
    { 18  ;   ;Run with Validation ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Run with Validation;
                                                              ENG=Run with Validation] }
    { 19  ;   ;Value is Set        ;Boolean       ;CaptionML=[ENU=Value is Set;
                                                              ENG=Value is Set] }
    { 20  ;   ;Text Value          ;Text250       ;OnValidate=BEGIN
                                                                ValidateTextValue();
                                                              END;

                                                   OnLookup=BEGIN
                                                              CASE ("Action Type") OF
                                                                "Action Type"::"Set Filter",
                                                                "Action Type"::"Set Field":
                                                                  BEGIN
                                                                    CASE ("Value Calculation") OF
                                                                      "Value Calculation"::"No.Series":
                                                                        IF ("Value Type" IN ["Value Type"::Code, "Value Type"::OemCode, "Value Type"::Text, "Value Type"::OemText]) THEN
                                                                          TextValueLookupNoSeries();
                                                                      "Value Calculation"::"Record Variable":
                                                                         LookupVariableName();
                                                                      "Value Calculation"::"Smart Value":
                                                                        TextValueLookupSmartField();
                                                                      "Value Calculation"::Answer:
                                                                        TextValueLookupQuestLine();
                                                                      "Value Calculation"::Const:
                                                                        BEGIN
                                                                          IF ("Value Type" = "Value Type"::Option) THEN
                                                                            TextValueLookupOption();
                                                                        END;
                                                                    END;
                                                                  END;
                                                                "Action Type"::"Get from Variable":
                                                                  LookupVariableName();
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Text Value;
                                                              ENG=Text Value] }
    { 21  ;   ;Date Value          ;Date          ;CaptionML=[ENU=Date Value;
                                                              ENG=Date Value] }
    { 22  ;   ;Time Value          ;Time          ;CaptionML=[ENU=Time Value;
                                                              ENG=Time Value] }
    { 23  ;   ;DateTime Value      ;DateTime      ;CaptionML=[ENU=DateTime Value;
                                                              ENG=DateTime Value] }
    { 24  ;   ;DateFormula Value   ;DateFormula   ;CaptionML=[ENU=DateFormula Value;
                                                              ENG=DateFormula Value] }
    { 25  ;   ;Decimal Value       ;Decimal       ;CaptionML=[ENU=Decimal Value;
                                                              ENG=Decimal Value] }
    { 26  ;   ;Boolean Value       ;Boolean       ;CaptionML=[ENU=Boolean Value;
                                                              ENG=Boolean Value] }
    { 27  ;   ;Integer Value       ;Integer       ;CaptionML=[ENU=Integer Value;
                                                              ENG=Integer Value] }
    { 28  ;   ;BigInteger Value    ;BigInteger    ;CaptionML=[ENU=BigInteger Value;
                                                              ENG=BigInteger Value] }
    { 29  ;   ;Duration Value      ;Duration      ;CaptionML=[ENU=Duration Value;
                                                              ENG=Duration Value] }
    { 30  ;   ;GUID Value          ;GUID          ;CaptionML=[ENU=GUID Value;
                                                              ENG=GUID Value] }
    { 31  ;   ;Quest. Template Line No.;Integer   ;TableRelation="Questionnaire Template Line"."Line No." WHERE (Questionnaire Template Code=FIELD(Questionnaire Template Code));
                                                   OnValidate=BEGIN
                                                                IF ("Quest. Template Line No." <> 0) THEN BEGIN
                                                                  TESTFIELD("Value Calculation", "Value Calculation"::Answer);
                                                                  QuestTemplLine.GET("Questionnaire Template Code", "Quest. Template Line No.");
                                                                  "Text Value" := QuestTemplLine."Question Description";
                                                                END ELSE IF ("Value Calculation" = "Value Calculation"::Answer) THEN
                                                                  "Text Value" := '';
                                                              END;

                                                   CaptionML=[ENU=Quest. Template Line No.;
                                                              ENG=Quest. Template Line No.] }
    { 32  ;   ;Store In Variable Name;Text50      ;CaptionML=[ENU=Store in Variable;
                                                              ENG=Store in Variable] }
    { 40  ;   ;Value Source Table Id;Integer      ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF ("Value Source Table Id" <> xRec."Value Source Table Id") THEN BEGIN
                                                                  VALIDATE("Value Source Field Id", 0);
                                                                  CALCFIELDS("Value Source Table Name");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Value Source Table Id;
                                                              ENG=Value Source Table Id] }
    { 41  ;   ;Value Source Field Id;Integer      ;TableRelation=Field.No. WHERE (TableNo=FIELD(Value Source Table Id));
                                                   OnValidate=BEGIN
                                                                IF ("Value Source Field Id" <> xRec."Value Source Field Id") THEN
                                                                  CALCFIELDS("Value Source Field Name");
                                                              END;

                                                   CaptionML=[ENU=Value Source Field Id;
                                                              ENG=Value Source Field Id] }
    { 43  ;   ;Value Source Table Name;Text80     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Value Source Table Id)));
                                                   CaptionML=[ENU=Value Source Table Name;
                                                              ENG=Value Source Table Name];
                                                   Editable=No }
    { 44  ;   ;Value Source Field Name;Text80     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field.FieldName WHERE (TableNo=FIELD(Value Source Table Id),
                                                                                             No.=FIELD(Value Source Field Id)));
                                                   CaptionML=[ENU=Value Source Field Name;
                                                              ENG=Value Source Field Name];
                                                   Editable=No }
    { 46  ;   ;Value Source Variable Name;Text50  ;CaptionML=[ENU=Source Variable;
                                                              ENG=Source Variable] }
  }
  KEYS
  {
    {    ;Questionnaire Template Code,Quest. Action Template Id,Line No.;
                                                   Clustered=Yes }
    {    ;Questionnaire Template Code,Store In Variable Name }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Field@1000000001 : Record 2000000041;
      QuestTemplLine@1000000003 : Record 9062703;
      ActionTemplateHeader@1000000004 : Record 9062722;
      SmartFilterManagement@1000000005 : Codeunit 9062231;
      ValueProcessing@1000000000 : Codeunit 9062475;
      errNoSeriesValueType@1000000002 : TextConst 'ENU=To use "No. Series" parameter type shoud be %1, %2, %3 or %4.;ENG=To use "No. Series" parameter type shoud be %1, %2, %3 or %4.';
      String@1000000006 : Codeunit 9062236;

    LOCAL PROCEDURE TextValueLookupNoSeries@1000000021();
    VAR
      NoSeries@1000000000 : Record 308;
      NoSeriesList@1000000001 : Page 571;
    BEGIN
      NoSeries.RESET();
      IF ("Text Value" <> '') THEN
        IF (NoSeries.GET("Text Value")) THEN;

      IF (PAGE.RUNMODAL(0, NoSeries) IN [ACTION::OK, ACTION::LookupOK]) THEN BEGIN
        VALIDATE("Text Value", NoSeries.Code);
      END;
    END;

    LOCAL PROCEDURE TextValueLookupSmartField@1000000024();
    VAR
      TNPUtils@1000000000 : Codeunit 9062229;
      TextValue@1000000001 : Text;
    BEGIN
      TextValue := "Text Value";
      IF SmartFilterManagement.SmartFilterLookup(TextValue) THEN
        VALIDATE("Text Value", TextValue);
    END;

    LOCAL PROCEDURE TextValueLookupOption@1000000025();
    VAR
      NameValueBufferTemp@1000000001 : TEMPORARY Record 9062730;
      NameValueBufferSelected@1000000006 : TEMPORARY Record 9062730;
      TNPToolkit@1000000000 : Codeunit 9062230;
      NameValueToolkit@1000000007 : Codeunit 9062587;
      TableRef@1000000004 : RecordRef;
      FieldRef@1000000005 : FieldRef;
      OptionStringText@1000000002 : Text;
      TextValue@1000000003 : Text;
    BEGIN
      TextValue := "Text Value";
      OptionStringText := "Option String";
      IF ((OptionStringText = '') AND ("Table Id" <> 0) AND ("Field Id" <> 0)) THEN BEGIN
        TableRef.OPEN("Table Id");
        FieldRef := TableRef.FIELD("Field Id");
        OptionStringText := FieldRef.OPTIONSTRING;
        TableRef.CLOSE();
      END;

      String.SplitAdvanced(OptionStringText, ',', TRUE, TRUE, NameValueBufferTemp);
      NameValueToolkit.SelectNameValueRecordsByName(NameValueBufferTemp, TextValue, ',', FALSE, TRUE);
      IF (NameValueToolkit.NameValueLookupWithSelection(NameValueBufferTemp, FALSE)) THEN
      BEGIN
        NameValueBufferSelected := NameValueBufferTemp;
        TextValue := '';
        NameValueBufferTemp.RESET();
        NameValueBufferTemp.SETRANGE(Selected, TRUE);
        IF (NameValueBufferTemp.FINDSET()) THEN
          REPEAT
            IF (TextValue <> '') THEN
              TextValue := TextValue + ',';
            TextValue := TextValue + NameValueBufferTemp.Name;
          UNTIL (NameValueBufferTemp.NEXT() = 0)
        ELSE
          TextValue := NameValueBufferSelected.Name;

        VALIDATE("Text Value", TextValue);
      END;
    END;

    LOCAL PROCEDURE TextValueLookupQuestLine@1000000005();
    BEGIN
      FilterQuestTemplLine(QuestTemplLine);
      QuestTemplLine.SETRANGE("Line No.", "Quest. Template Line No.");
      IF (QuestTemplLine.FINDFIRST()) THEN ;
      QuestTemplLine.SETRANGE("Line No.");
      IF (LookupQuestTemplLine(QuestTemplLine)) THEN
        VALIDATE("Quest. Template Line No.", QuestTemplLine."Line No.");
    END;

    LOCAL PROCEDURE ValidateTextValue@1000000009();
    VAR
      NoSeries@1000000004 : Record 308;
      ValueProcessing@1000000000 : Codeunit 9062475;
      NoSeriesCode@1000000003 : Code[20];
      ObjectId@1000000001 : Integer;
      FieldId@1000000002 : Integer;
    BEGIN
      CASE ("Action Type") OF
        "Action Type"::"Set Field",
        "Action Type"::"Set Filter":
          BEGIN
            CASE ("Value Calculation") OF
              "Value Calculation"::"No.Series":
                BEGIN
                  IF ("Text Value" <> '') THEN BEGIN
                    NoSeriesCode := "Text Value";
                    IF (NOT(NoSeries.GET(NoSeriesCode))) THEN BEGIN
                      NoSeries.SETFILTER(Code, NoSeriesCode + '*');
                      NoSeries.FINDFIRST();
                    END;
                    "Text Value" := NoSeries.Code;
                  END;
                END;
              "Value Calculation"::"Record Variable":
                BEGIN
                  ValidateVariableName();
                END;
              "Value Calculation"::"Smart Value":
                BEGIN
                END;
              "Value Calculation"::Answer:
                BEGIN
                  FilterQuestTemplLine(QuestTemplLine);
                  IF (FindQuestTemplLine(QuestTemplLine, "Text Value", TRUE)) THEN
                    VALIDATE("Quest. Template Line No.", QuestTemplLine."Line No.")
                  ELSE
                    VALIDATE("Quest. Template Line No.", 0);
                END;
            ELSE
              BEGIN
                ValueProcessing.SetParameters("Value Type", "Table Id", "Field Id");
                ValueProcessing.ProcessValue("Value Calculation", "Text Value", "Value is Set", "Date Value", "Time Value", "DateTime Value", "DateFormula Value",
                  "Decimal Value", "Boolean Value", "Integer Value", "BigInteger Value", "Duration Value", "GUID Value");
              END;
            END;
          END;
        "Action Type"::"Get from Variable":
          ValidateVariableName();
      END;
    END;

    LOCAL PROCEDURE ClearValue@1000000004();
    BEGIN
      "Value is Set" := FALSE;
      CLEAR("Text Value");
      CLEAR("Date Value");
      CLEAR("Time Value");
      CLEAR("DateTime Value");
      CLEAR("DateFormula Value");
      CLEAR("Decimal Value");
      CLEAR("Boolean Value");
      CLEAR("Integer Value");
      CLEAR("BigInteger Value");
      CLEAR("Duration Value");
      CLEAR("GUID Value");
      "Quest. Template Line No." := 0;
      "Value Source Table Id" := 0;
      "Value Source Field Id" := 0;
    END;

    LOCAL PROCEDURE FilterQuestTemplLine@1000000007(VAR QuestLine@1000000000 : Record 9062703);
    BEGIN
      QuestLine.RESET();
      QuestLine.SETCURRENTKEY("Questionnaire Template Code", Sequence);
      QuestLine.SETRANGE("Questionnaire Template Code", "Questionnaire Template Code");

      CASE ("Value Type") OF
        "Value Type"::OemText, "Value Type"::Text, "Value Type"::Code, "Value Type"::OemCode:
          QuestLine.SETFILTER("Answer Type", '%1|%2|%3|%4', QuestLine."Answer Type"::OemText, QuestLine."Answer Type"::Text,
            QuestLine."Answer Type"::Code, QuestLine."Answer Type"::OemCode);
        "Value Type"::Integer, "Value Type"::BigInteger, "Value Type"::Decimal, "Value Type"::Option:
          QuestLine.SETFILTER("Answer Type", '%1|%2|%3|%4', QuestLine."Answer Type"::Integer, QuestLine."Answer Type"::BigInteger,
            QuestLine."Answer Type"::Decimal, QuestLine."Answer Type"::Option);
      ELSE
        QuestLine.SETRANGE("Answer Type", "Value Type");
      END;
    END;

    LOCAL PROCEDURE LookupQuestTemplLine@1000000000(VAR QuestLine@1000000000 : Record 9062703) : Boolean;
    VAR
      QuestionnaireLineList@1000000002 : Page 9063019;
    BEGIN
      QuestionnaireLineList.SETRECORD(QuestLine);
      QuestionnaireLineList.SETTABLEVIEW(QuestLine);
      QuestionnaireLineList.LOOKUPMODE(TRUE);
      IF QuestionnaireLineList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        QuestionnaireLineList.GETRECORD(QuestLine);
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE FindQuestTemplLine@1000000015(VAR QuestLine@1000000001 : Record 9062703;LineDescription@1000000000 : Text;UseLookup@1000000002 : Boolean) : Boolean;
    VAR
      NoOfEntries@1000000003 : Integer;
    BEGIN
      QuestLine.SETRANGE("Question Description", LineDescription);
      IF (QuestLine.FINDFIRST()) THEN
        EXIT(TRUE);

      QuestLine.SETFILTER("Question Description", LineDescription + '*');
      NoOfEntries := QuestLine.COUNT;
      IF (NoOfEntries = 1) THEN BEGIN
        QuestLine.FINDFIRST();
        EXIT(TRUE);
      END;

      IF (NoOfEntries > 0) AND (UseLookup) AND (GUIALLOWED) THEN BEGIN
        QuestLine.FINDFIRST();
        EXIT(LookupQuestTemplLine(QuestLine));
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ValidateSourceTableName@1000000006(VAR TableName@1000000000 : Text) : Boolean;
    VAR
      AllObjects@1000000001 : Record 2000000038;
      ObjectFieldToolkit@1000000002 : Codeunit 9062343;
      ObjectId@1000000003 : Integer;
    BEGIN
      ObjectId := "Value Source Table Id";
      ObjectFieldToolkit.ValidateObjectName(AllObjects."Object Type"::Table, ObjectId, TableName, FALSE);
      IF (ObjectId <> "Value Source Table Id") THEN BEGIN
        VALIDATE("Value Source Table Id", ObjectId);
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE LookupSourceTableName@1000000013(Editable@1000000003 : Boolean) : Boolean;
    VAR
      AllObjects@1000000002 : Record 2000000038;
      ObjectFieldToolkit@1000000001 : Codeunit 9062343;
      ObjectId@1000000000 : Integer;
    BEGIN
      ObjectId := "Value Source Table Id";
      IF (ObjectFieldToolkit.ObjectLookup(AllObjects."Object Type"::Table, ObjectId)) THEN BEGIN
        IF (ObjectId <> "Value Source Table Id") AND (Editable) THEN BEGIN
          VALIDATE("Value Source Table Id", ObjectId);
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE ValidateSourceFieldName@1000000014(VAR FieldName@1000000000 : Text) : Boolean;
    VAR
      ValueProcessing@1000000004 : Codeunit 9062475;
      Field@1000000001 : Record 2000000041;
      FieldId@1000000002 : Integer;
      NameIsNumber@1000000003 : Boolean;
    BEGIN
      IF ("Value Source Table Id" <> 0) THEN BEGIN
        Field.RESET();
        Field.SETRANGE(TableNo, "Value Source Table Id");
        Field.SETRANGE(Type, ValueProcessing.ValueTypeToFieldType("Value Type"));
        Field.SETRANGE(FieldName, FieldName);
        IF (NOT(Field.FINDFIRST())) THEN BEGIN
          NameIsNumber := EVALUATE(FieldId, FieldName);
          IF (NameIsNumber) THEN BEGIN
            Field.SETFILTER(FieldName, '@' + FieldName + '*');
            IF (NOT(Field.FINDFIRST())) THEN BEGIN
              Field.SETRANGE(FieldName);
              Field.SETRANGE("No.", FieldId);
              Field.FINDFIRST();
            END;
          END ELSE
            Field.FINDFIRST();
        END;
        FieldName := Field.FieldName;
        VALIDATE("Value Source Field Id", Field."No.");
        EXIT(TRUE);
      END ELSE BEGIN
        FieldName := '';
        EXIT(FALSE);
      END;
    END;

    PROCEDURE LookupSourceFieldName@1000000001(Editable@1000000003 : Boolean) : Boolean;
    VAR
      ValueProcessing@1000000002 : Codeunit 9062475;
      Field@1000000000 : Record 2000000041;
      FieldList@1000000001 : Page 7702;
    BEGIN
      Field.RESET();
      Field.SETRANGE(TableNo, "Value Source Table Id");
      Field.SETRANGE(Type, ValueProcessing.ValueTypeToFieldType("Value Type"));
      IF ("Value Source Field Id" <> 0) THEN
        Field.SETRANGE("No.", "Value Source Field Id");
      IF (Field.FINDFIRST()) THEN ;
      Field.SETRANGE("No.");

      FieldList.SETTABLEVIEW(Field);
      FieldList.SETRECORD(Field);
      FieldList.LOOKUPMODE := TRUE;
      IF (FieldList.RUNMODAL() = ACTION::LookupOK) THEN BEGIN
        FieldList.GETRECORD(Field);
        IF (Field."No." <> "Value Source Field Id") AND (Editable) THEN BEGIN
          VALIDATE("Value Source Field Id", Field."No.");
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ValidateVariableName@1000000002();
    VAR
      TemplateActionHeader@1000000002 : Record 9062722;
      TemplateActionLine@1000000000 : Record 9062723;
      Found@1000000001 : Boolean;
    BEGIN
      TemplateActionLine.RESET();
      TemplateActionLine.SETCURRENTKEY("Questionnaire Template Code", "Store In Variable Name");
      TemplateActionLine.SETRANGE("Questionnaire Template Code", "Questionnaire Template Code");

      TemplateActionLine.SETRANGE("Store In Variable Name", "Text Value");
      Found := TemplateActionLine.FINDFIRST();

      IF (NOT(Found)) THEN BEGIN
        TemplateActionLine.SETFILTER("Store In Variable Name", "Text Value" + '*');
        Found := TemplateActionLine.FINDFIRST();
      END;

      IF (Found) THEN BEGIN
        "Text Value" := TemplateActionLine."Store In Variable Name";
        TemplateActionHeader.GET(TemplateActionLine."Questionnaire Template Code", TemplateActionLine."Quest. Action Template Id");
        VALIDATE("Value Source Table Id", TemplateActionHeader."Table Id");
        VALIDATE("Value Source Field Id", FindSourceFieldId());
      END ELSE
        "Value Source Variable Name" := "Text Value";
    END;

    LOCAL PROCEDURE LookupVariableName@1000000003();
    VAR
      TemplateActionLine@1000000000 : Record 9062723;
      VariableBuffer@1000000001 : TEMPORARY Record 9062730;
    BEGIN
      //collect variables
      VariableBuffer.RESET();
      VariableBuffer.DELETEALL();
      VariableBuffer.INIT();
      VariableBuffer.ID := 0;

      TemplateActionLine.RESET();
      TemplateActionLine.SETCURRENTKEY("Questionnaire Template Code", "Store In Variable Name");
      TemplateActionLine.SETRANGE("Questionnaire Template Code", "Questionnaire Template Code");
      TemplateActionLine.SETFILTER("Store In Variable Name", '<>%1', '');
      IF (TemplateActionLine.FINDSET()) THEN BEGIN
        REPEAT
          IF (VariableBuffer.ID = 0) OR (TemplateActionLine."Store In Variable Name" <> VariableBuffer.Name) THEN BEGIN
            VariableBuffer.ID := VariableBuffer.ID + 1;
            VariableBuffer.Name := TemplateActionLine."Store In Variable Name";
            VariableBuffer.Value := TemplateActionLine."Store In Variable Name";
            VariableBuffer.INSERT();
          END;
        UNTIL (TemplateActionLine.NEXT() = 0);
      END;

      //lookup variables
      VariableBuffer.RESET();
      VariableBuffer.SETRANGE(Name, "Text Value");
      IF (VariableBuffer.FINDFIRST()) THEN ;
      VariableBuffer.SETRANGE(Name);

      IF (PAGE.RUNMODAL(PAGE::"General Lookup Types", VariableBuffer) = ACTION::LookupOK) THEN
        VALIDATE("Text Value", VariableBuffer.Name);
    END;

    LOCAL PROCEDURE CheckOpen@1000000008();
    VAR
      QuestTemplHeader@1000000000 : Record 9062702;
    BEGIN
      IF (ActionTemplateHeader.GET("Questionnaire Template Code", "Quest. Action Template Id")) THEN
        ActionTemplateHeader.CheckOpen();
    END;

    LOCAL PROCEDURE FindSourceFieldId@1000000010() : Integer;
    VAR
      Field@1000000004 : Record 2000000041;
      RecRef@1000000000 : RecordRef;
      KeyRef@1000000001 : KeyRef;
      FldRef@1000000002 : FieldRef;
      FieldFound@1000000005 : Boolean;
      i@1000000003 : Integer;
      FieldId@1000000006 : Integer;
    BEGIN
      IF ("Value Source Table Id" = 0) THEN
        EXIT(0);

      FieldId := 0;
      RecRef.OPEN("Value Source Table Id");
      KeyRef := RecRef.KEYINDEX(1);

      FOR i:=1 TO KeyRef.FIELDCOUNT DO BEGIN
        FldRef := KeyRef.FIELDINDEX(i);
        IF (i = 1) OR (LOWERCASE(FldRef.NAME) IN ['no.', 'code', 'name']) THEN
          FieldId := FldRef.NUMBER;
      END;

      RecRef.CLOSE();
      EXIT(FieldId);
    END;

    BEGIN
    {
      //DOC NA2015.9  AZ 05/08/2015 - Questionnaire actions, criteria changes and bugfixes
      //DOC NA2016.10 AZ 08/09/2015 - Nav 2016 Upgrade
      //DOC NA2016.10 AZ 13/10/2015 - Get From Questionnaire action type added
      //DOC NA2016.12 JH 28/01/2016 - Smart filters
      //DOC NA2016.12 JH 28/01/2016 - New string codeunit
      //DOC NA2016.15 JH 06/05/2016 - CfMD amendments
    }
    END.
  }
}

