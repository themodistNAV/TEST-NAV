OBJECT Table 99000758 Machine Center
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Name;
    OnInsert=BEGIN
               MfgSetup.GET;
               IF "No." = '' THEN BEGIN
                 MfgSetup.TESTFIELD("Machine Center Nos.");
                 NoSeriesMgt.InitSeries(MfgSetup."Machine Center Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
             END;

    OnDelete=VAR
               ProdOrderRtngLine@1000 : Record 5409;
               StdCostWksh@1001 : Record 5841;
             BEGIN
               CapLedgEntry.SETCURRENTKEY(Type,"No.");
               CapLedgEntry.SETRANGE(Type,CapLedgEntry.Type::"Machine Center");
               CapLedgEntry.SETRANGE("No.","No.");
               IF CapLedgEntry.FINDFIRST THEN
                 ERROR(Text007,TABLECAPTION,"No.",CapLedgEntry.TABLECAPTION);

               StdCostWksh.RESET;
               StdCostWksh.SETRANGE(Type,StdCostWksh.Type::"Machine Center");
               StdCostWksh.SETRANGE("No.","No.");
               IF NOT StdCostWksh.ISEMPTY THEN
                 ERROR(Text007,TABLECAPTION,"No.",StdCostWksh.TABLECAPTION);

               CalendarEntry.SETRANGE("Capacity Type",CalendarEntry."Capacity Type"::"Machine Center");
               CalendarEntry.SETRANGE("No.","No.");
               CalendarEntry.DELETEALL;

               CalAbsentEntry.SETRANGE("Capacity Type",CalendarEntry."Capacity Type"::"Machine Center");
               CalAbsentEntry.SETRANGE("No.","No.");
               CalAbsentEntry.DELETEALL;

               MfgCommentLine.SETRANGE("Table Name",MfgCommentLine."Table Name"::"Machine Center");
               MfgCommentLine.SETRANGE("No.","No.");
               MfgCommentLine.DELETEALL;

               ProdOrderRtngLine.SETCURRENTKEY(Type,"No.");
               ProdOrderRtngLine.SETRANGE(Type,ProdOrderRtngLine.Type::"Machine Center");
               ProdOrderRtngLine.SETRANGE("No.","No.");
               IF ProdOrderRtngLine.FINDFIRST THEN
                 ERROR(Text000);
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
             END;

    CaptionML=[ENU=Machine Center;
               ENG=Machine Centre];
    LookupPageID=Page99000761;
    DrillDownPageID=Page99000761;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 3   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                "Search Name" := Name;
                                                              END;

                                                   CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 4   ;   ;Search Name         ;Code50        ;CaptionML=[ENU=Search Name;
                                                              ENG=Search Name] }
    { 5   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              ENG=Name 2] }
    { 6   ;   ;Address             ;Text50        ;CaptionML=[ENU=Address;
                                                              ENG=Address] }
    { 7   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              ENG=Address 2] }
    { 8   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENG=City] }
    { 9   ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENG=Post Code] }
    { 14  ;   ;Work Center No.     ;Code20        ;TableRelation="Work Center";
                                                   OnValidate=VAR
                                                                WorkCenter@1000 : Record 99000754;
                                                                ProdOrderRtngLine@1001 : Record 5409;
                                                                ProdOrderCapNeed@1002 : Record 5410;
                                                                PlanningRtngLine@1003 : Record 99000830;
                                                              BEGIN
                                                                IF "Work Center No." = xRec."Work Center No." THEN
                                                                  EXIT;

                                                                IF "Work Center No." <> '' THEN BEGIN
                                                                  WorkCenter.GET("Work Center No.");
                                                                  WorkCenter.TESTFIELD("Unit of Measure Code");
                                                                  "Queue Time Unit of Meas. Code" := WorkCenter."Queue Time Unit of Meas. Code";
                                                                  "Setup Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
                                                                  "Wait Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
                                                                  "Move Time Unit of Meas. Code" := WorkCenter."Unit of Measure Code";
                                                                END;
                                                                VALIDATE("Location Code",WorkCenter."Location Code");

                                                                CalendarEntry.SETCURRENTKEY("Capacity Type","No.");
                                                                CalendarEntry.SETRANGE("Capacity Type",CalendarEntry."Capacity Type"::"Machine Center");
                                                                CalendarEntry.SETRANGE("No.","No.");
                                                                IF NOT CalendarEntry.FIND('-') THEN
                                                                  EXIT;

                                                                IF CurrFieldNo <> 0 THEN
                                                                  IF NOT CONFIRM(Text001,FALSE,FIELDCAPTION("Work Center No."))
                                                                  THEN BEGIN
                                                                    "Work Center No." := xRec."Work Center No.";
                                                                    EXIT;
                                                                  END;

                                                                Window.OPEN(
                                                                  Text002 +
                                                                  Text003 +
                                                                  Text004 +
                                                                  Text006);

                                                                i := 0;
                                                                NoOfRecords := CalendarEntry.COUNT;
                                                                IF CalendarEntry.FIND('-') THEN
                                                                  REPEAT
                                                                    i := i + 1;
                                                                    Window.UPDATE(1,i);
                                                                    Window.UPDATE(2,ROUND(i / NoOfRecords * 10000,1));
                                                                    CalendarEntry.VALIDATE("Work Center No.","Work Center No.");
                                                                    CalendarEntry.MODIFY;
                                                                  UNTIL CalendarEntry.NEXT = 0;

                                                                i := 0;
                                                                CalAbsentEntry.SETCURRENTKEY("Capacity Type","No.");
                                                                CalAbsentEntry.SETRANGE("Capacity Type",CalendarEntry."Capacity Type"::"Machine Center");
                                                                CalAbsentEntry.SETRANGE("No.","No.");
                                                                NoOfRecords := CalAbsentEntry.COUNT;
                                                                IF CalAbsentEntry.FIND('-') THEN
                                                                  REPEAT
                                                                    i := i + 1;
                                                                    Window.UPDATE(3,i);
                                                                    Window.UPDATE(4,ROUND(i / NoOfRecords * 10000,1));
                                                                    CalAbsentEntry.VALIDATE("Work Center No.","Work Center No.");
                                                                    CalAbsentEntry.MODIFY;
                                                                  UNTIL CalAbsentEntry.NEXT = 0;

                                                                i := 0;
                                                                ProdOrderCapNeed.SETCURRENTKEY(Type,"No.");
                                                                ProdOrderCapNeed.SETRANGE(Type,ProdOrderCapNeed.Type::"Machine Center");
                                                                ProdOrderCapNeed.SETRANGE("No.","No.");
                                                                NoOfRecords := ProdOrderCapNeed.COUNT;
                                                                IF ProdOrderCapNeed.FIND('-') THEN
                                                                  REPEAT
                                                                    i := i + 1;
                                                                    Window.UPDATE(7,i);
                                                                    Window.UPDATE(8,ROUND(i / NoOfRecords * 10000,1));
                                                                    ProdOrderCapNeed.VALIDATE("Work Center No.","Work Center No.");
                                                                    ProdOrderCapNeed.MODIFY;
                                                                  UNTIL ProdOrderCapNeed.NEXT = 0;

                                                                MODIFY;

                                                                RtngLine.SETCURRENTKEY(Type,"No.");
                                                                RtngLine.SETRANGE(Type,RtngLine.Type::"Machine Center");
                                                                RtngLine.SETRANGE("No.","No.");
                                                                IF RtngLine.FIND('-') THEN
                                                                  REPEAT
                                                                    RtngLine.VALIDATE("Work Center No.","Work Center No.");
                                                                    RtngLine.MODIFY;
                                                                  UNTIL RtngLine.NEXT = 0;

                                                                PlanningRtngLine.SETCURRENTKEY(Type,"No.");
                                                                PlanningRtngLine.SETRANGE(Type,PlanningRtngLine.Type::"Machine Center");
                                                                PlanningRtngLine.SETRANGE("No.","No.");
                                                                IF PlanningRtngLine.FIND('-') THEN
                                                                  REPEAT
                                                                    PlanningRtngLine.VALIDATE("Work Center No.","Work Center No.");
                                                                    PlanningRtngLine.MODIFY;
                                                                  UNTIL PlanningRtngLine.NEXT = 0;

                                                                ProdOrderRtngLine.SETCURRENTKEY(Type,"No.");
                                                                ProdOrderRtngLine.SETRANGE(Type,PlanningRtngLine.Type::"Machine Center");
                                                                ProdOrderRtngLine.SETRANGE("No.","No.");
                                                                IF ProdOrderRtngLine.FIND('-') THEN
                                                                  REPEAT
                                                                    ProdOrderRtngLine.VALIDATE("Work Center No.","Work Center No.");
                                                                    ProdOrderRtngLine.MODIFY;
                                                                  UNTIL ProdOrderRtngLine.NEXT = 0;

                                                                Window.CLOSE;
                                                              END;

                                                   CaptionML=[ENU=Work Center No.;
                                                              ENG=Work Centre No.] }
    { 19  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=[ENU=Direct Unit Cost;
                                                              ENG=Direct Unit Cost];
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 20  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                GetGLSetup;
                                                                "Unit Cost" :=
                                                                  ROUND(
                                                                    "Direct Unit Cost" * (1 + "Indirect Cost %" / 100) + "Overhead Rate",
                                                                    GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Indirect Cost %;
                                                              ENG=Indirect Cost %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 21  ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                GetGLSetup;
                                                                "Direct Unit Cost" :=
                                                                  ROUND(("Unit Cost" - "Overhead Rate") / (1 + "Indirect Cost %" / 100),
                                                                    GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Unit Cost;
                                                              ENG=Unit Cost];
                                                   DecimalPlaces=2:5;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 22  ;   ;Queue Time          ;Decimal       ;CaptionML=[ENU=Queue Time;
                                                              ENG=Queue Time];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 23  ;   ;Queue Time Unit of Meas. Code;Code10;
                                                   TableRelation="Capacity Unit of Measure";
                                                   CaptionML=[ENU=Queue Time Unit of Meas. Code;
                                                              ENG=Queue Time Unit of Meas. Code] }
    { 26  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENG=Last Date Modified];
                                                   Editable=No }
    { 27  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Manufacturing Comment Line" WHERE (Table Name=CONST(Machine Center),
                                                                                                         No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENG=Comment];
                                                   Editable=No }
    { 31  ;   ;Capacity            ;Decimal       ;CaptionML=[ENU=Capacity;
                                                              ENG=Capacity];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 32  ;   ;Efficiency          ;Decimal       ;InitValue=100;
                                                   CaptionML=[ENU=Efficiency;
                                                              ENG=Efficiency];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 33  ;   ;Maximum Efficiency  ;Decimal       ;CaptionML=[ENU=Maximum Efficiency;
                                                              ENG=Maximum Efficiency];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 34  ;   ;Minimum Efficiency  ;Decimal       ;CaptionML=[ENU=Minimum Efficiency;
                                                              ENG=Minimum Efficiency];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 38  ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ENG=Blocked] }
    { 39  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENG=Date Filter] }
    { 40  ;   ;Work Shift Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Work Shift";
                                                   CaptionML=[ENU=Work Shift Filter;
                                                              ENG=Work Shift Filter] }
    { 41  ;   ;Capacity (Total)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Calendar Entry"."Capacity (Total)" WHERE (Capacity Type=CONST(Machine Center),
                                                                                                              No.=FIELD(No.),
                                                                                                              Work Shift Code=FIELD(Work Shift Filter),
                                                                                                              Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Capacity (Total);
                                                              ENG=Capacity (Total)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 42  ;   ;Capacity (Effective);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Calendar Entry"."Capacity (Effective)" WHERE (Capacity Type=CONST(Machine Center),
                                                                                                                  No.=FIELD(No.),
                                                                                                                  Work Shift Code=FIELD(Work Shift Filter),
                                                                                                                  Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Capacity (Effective);
                                                              ENG=Capacity (Effective)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 44  ;   ;Prod. Order Need (Qty.);Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Capacity Need"."Allocated Time" WHERE (Type=CONST(Machine Center),
                                                                                                                       No.=FIELD(No.),
                                                                                                                       Status=FIELD(Prod. Order Status Filter),
                                                                                                                       Date=FIELD(Date Filter),
                                                                                                                       Requested Only=CONST(No)));
                                                   CaptionML=[ENU=Prod. Order Need (Qty.);
                                                              ENG=Prod. Order Need (Qty.)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 45  ;   ;Prod. Order Need Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Routing Line"."Expected Operation Cost Amt." WHERE (Type=CONST(Machine Center),
                                                                                                                                    No.=FIELD(No.),
                                                                                                                                    Status=FIELD(Prod. Order Status Filter)));
                                                   CaptionML=[ENU=Prod. Order Need Amount;
                                                              ENG=Prod. Order Need Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 47  ;   ;Prod. Order Status Filter;Option   ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Prod. Order Status Filter;
                                                              ENG=Prod. Order Status Filter];
                                                   OptionCaptionML=[ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                                                    ENG=Simulated,Planned,Firm Planned,Released,Finished];
                                                   OptionString=Simulated,Planned,Firm Planned,Released,Finished }
    { 50  ;   ;Setup Time          ;Decimal       ;CaptionML=[ENU=Setup Time;
                                                              ENG=Setup Time];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 52  ;   ;Wait Time           ;Decimal       ;CaptionML=[ENU=Wait Time;
                                                              ENG=Wait Time];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 53  ;   ;Move Time           ;Decimal       ;CaptionML=[ENU=Move Time;
                                                              ENG=Move Time];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 54  ;   ;Fixed Scrap Quantity;Decimal       ;CaptionML=[ENU=Fixed Scrap Quantity;
                                                              ENG=Fixed Scrap Quantity];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 55  ;   ;Scrap %             ;Decimal       ;CaptionML=[ENU=Scrap %;
                                                              ENG=Scrap %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 56  ;   ;Setup Time Unit of Meas. Code;Code10;
                                                   TableRelation="Capacity Unit of Measure";
                                                   CaptionML=[ENU=Setup Time Unit of Meas. Code;
                                                              ENG=Setup Time Unit of Meas. Code] }
    { 57  ;   ;Wait Time Unit of Meas. Code;Code10;TableRelation="Capacity Unit of Measure";
                                                   CaptionML=[ENU=Wait Time Unit of Meas. Code;
                                                              ENG=Wait Time Unit of Meas. Code] }
    { 58  ;   ;Send-Ahead Quantity ;Decimal       ;CaptionML=[ENU=Send-Ahead Quantity;
                                                              ENG=Send-Ahead Quantity];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 59  ;   ;Move Time Unit of Meas. Code;Code10;TableRelation="Capacity Unit of Measure";
                                                   CaptionML=[ENU=Move Time Unit of Meas. Code;
                                                              ENG=Move Time Unit of Meas. Code] }
    { 60  ;   ;Flushing Method     ;Option        ;InitValue=Manual;
                                                   CaptionML=[ENU=Flushing Method;
                                                              ENG=Flushing Method];
                                                   OptionCaptionML=[ENU=Manual,Forward,Backward;
                                                                    ENG=Manual,Forward,Backward];
                                                   OptionString=Manual,Forward,Backward }
    { 62  ;   ;Minimum Process Time;Decimal       ;CaptionML=[ENU=Minimum Process Time;
                                                              ENG=Minimum Process Time];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 63  ;   ;Maximum Process Time;Decimal       ;CaptionML=[ENU=Maximum Process Time;
                                                              ENG=Maximum Process Time];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 64  ;   ;Concurrent Capacities;Decimal      ;CaptionML=[ENU=Concurrent Capacities;
                                                              ENG=Concurrent Capacities];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 65  ;   ;Item Filter         ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Item;
                                                   CaptionML=[ENU=Item Filter;
                                                              ENG=Item Filter] }
    { 66  ;   ;Stop Code Filter    ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Stop;
                                                   CaptionML=[ENU=Stop Code Filter;
                                                              ENG=Stop Code Filter] }
    { 67  ;   ;Scrap Code Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Scrap;
                                                   CaptionML=[ENU=Scrap Code Filter;
                                                              ENG=Scrap Code Filter] }
    { 80  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENG=No. Series];
                                                   Editable=No }
    { 81  ;   ;Overhead Rate       ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=[ENU=Overhead Rate;
                                                              ENG=Overhead Rate];
                                                   AutoFormatType=2 }
    { 82  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENG=Gen. Prod. Posting Group] }
    { 83  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENG=County] }
    { 84  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENG=Country/Region Code] }
    { 7300;   ;Location Code       ;Code10        ;TableRelation=Location.Code WHERE (Use As In-Transit=CONST(No),
                                                                                      Bin Mandatory=CONST(Yes));
                                                   OnValidate=VAR
                                                                WorkCenter@1000 : Record 99000754;
                                                                AutoUpdate@1001 : Boolean;
                                                              BEGIN
                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  IF ("Work Center No." = '') AND ("Location Code" <> '') THEN
                                                                    ERROR(Text008,FIELDCAPTION("Location Code"),TABLECAPTION,WorkCenter.TABLECAPTION);

                                                                  IF "Open Shop Floor Bin Code" <> '' THEN BEGIN
                                                                    IF ConfirmAutoRemovalOfBinCode(AutoUpdate) THEN
                                                                      VALIDATE("Open Shop Floor Bin Code",'')
                                                                    ELSE
                                                                      TESTFIELD("Open Shop Floor Bin Code",'');
                                                                  END;
                                                                  IF "To-Production Bin Code" <> '' THEN BEGIN
                                                                    IF ConfirmAutoRemovalOfBinCode(AutoUpdate) THEN
                                                                      VALIDATE("To-Production Bin Code",'')
                                                                    ELSE
                                                                      TESTFIELD("To-Production Bin Code",'');
                                                                  END;
                                                                  IF "From-Production Bin Code" <> '' THEN BEGIN
                                                                    IF ConfirmAutoRemovalOfBinCode(AutoUpdate) THEN
                                                                      VALIDATE("From-Production Bin Code",'')
                                                                    ELSE
                                                                      TESTFIELD("From-Production Bin Code",'');
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code];
                                                   Editable=No }
    { 7301;   ;Open Shop Floor Bin Code;Code20    ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode("Location Code",
                                                                  "Open Shop Floor Bin Code",
                                                                  FIELDCAPTION("Open Shop Floor Bin Code"),
                                                                  DATABASE::"Machine Center","No.");
                                                              END;

                                                   CaptionML=[ENU=Open Shop Floor Bin Code;
                                                              ENG=Open Shop Floor Bin Code] }
    { 7302;   ;To-Production Bin Code;Code20      ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode("Location Code",
                                                                  "To-Production Bin Code",
                                                                  FIELDCAPTION("To-Production Bin Code"),
                                                                  DATABASE::"Machine Center","No.");
                                                              END;

                                                   CaptionML=[ENU=To-Production Bin Code;
                                                              ENG=To-Production Bin Code] }
    { 7303;   ;From-Production Bin Code;Code20    ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode("Location Code",
                                                                  "From-Production Bin Code",
                                                                  FIELDCAPTION("From-Production Bin Code"),
                                                                  DATABASE::"Machine Center","No.");
                                                              END;

                                                   CaptionML=[ENU=From-Production Bin Code;
                                                              ENG=From-Production Bin Code] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Work Center No.                          }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The Machine Center is being used on production orders.;ENG=The Machine Centre is being used on production orders.';
      Text001@1001 : TextConst 'ENU=Do you want to change %1?;ENG=Do you want to change %1?';
      Text002@1002 : TextConst 'ENU=Work Center No. is corrected on\\;ENG=Work Centre No. is corrected on\\';
      Text003@1003 : TextConst 'ENU=Calendar Entry    #1###### @2@@@@@@@@@@@@@\;ENG=Calendar Entry    #1###### @2@@@@@@@@@@@@@\';
      Text004@1004 : TextConst 'ENU=Calendar Absent.  #3###### @4@@@@@@@@@@@@@\;ENG=Calendar Absent.  #3###### @4@@@@@@@@@@@@@\';
      Text006@1005 : TextConst 'ENU=Prod. Order Need  #7###### @8@@@@@@@@@@@@@;ENG=Prod. Order Need  #7###### @8@@@@@@@@@@@@@';
      PostCode@1020 : Record 225;
      MfgSetup@1006 : Record 99000765;
      MachineCenter@1007 : Record 99000758;
      CapLedgEntry@1012 : Record 5832;
      CalendarEntry@1008 : Record 99000757;
      CalAbsentEntry@1009 : Record 99000760;
      MfgCommentLine@1010 : Record 99000770;
      RtngLine@1011 : Record 99000764;
      GLSetup@1017 : Record 98;
      NoSeriesMgt@1013 : Codeunit 396;
      Window@1014 : Dialog;
      i@1015 : Integer;
      NoOfRecords@1016 : Integer;
      GLSetupRead@1018 : Boolean;
      Text007@1019 : TextConst '@@@="%1 = Table caption; %2 = Field Value; %3 = Table Caption";ENU=You cannot delete %1 %2 because there is at least one %3 associated with it.;ENG=You cannot delete %1 %2 because there is at least one %3 associated with it.';
      Text008@1021 : TextConst 'ENU=You cannot change the %1 on %2 unless it is linked to a %3.;ENG=You cannot change the %1 on %2 unless it is linked to a %3.';
      Text009@1022 : TextConst 'ENU=If you change the %1, then all bin codes on the %2 will be removed. Are you sure that you want to continue?;ENG=If you change the %1, then all bin codes on the %2 will be removed. Are you sure that you want to continue?';

    PROCEDURE AssistEdit@2(OldMachineCenter@1000 : Record 99000758) : Boolean;
    BEGIN
      WITH MachineCenter DO BEGIN
        MachineCenter := Rec;
        MfgSetup.GET;
        MfgSetup.TESTFIELD("Machine Center Nos.");
        IF NoSeriesMgt.SelectSeries(MfgSetup."Machine Center Nos.",OldMachineCenter."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := MachineCenter;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE ConfirmAutoRemovalOfBinCode@1(VAR AutoUpdate@1000 : Boolean) : Boolean;
    BEGIN
      IF AutoUpdate THEN
        EXIT(TRUE);

      IF CONFIRM(Text009,FALSE,FIELDCAPTION("Location Code"),TABLECAPTION) THEN
        AutoUpdate := TRUE;

      EXIT(AutoUpdate);
    END;

    PROCEDURE GetBinCode@9(UseFlushingMethod@1000 : Boolean;FlushingMethod@1001 : 'Manual,Forward,Backward,Pick + Forward,Pick + Backward') : Code[20];
    BEGIN
      IF NOT UseFlushingMethod THEN
        EXIT("From-Production Bin Code");

      CASE FlushingMethod OF
        FlushingMethod::Manual,
        FlushingMethod::"Pick + Forward",
        FlushingMethod::"Pick + Backward":
          EXIT("To-Production Bin Code");
        FlushingMethod::Forward,
        FlushingMethod::Backward:
          EXIT("Open Shop Floor Bin Code");
      END;
    END;

    BEGIN
    END.
  }
}

