OBJECT Codeunit 11102044 OM - Progressbar
{
  OBJECT-PROPERTIES
  {
    Date=19/11/15;
    Time=12:00:00 PM;
    Version List=OMA10.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Window@1000 : Dialog;
      PrevTime@1001 : Time;
      StartTime@1002 : ARRAY [4] OF Time;
      Position@1003 : ARRAY [4] OF BigInteger;
      Size@1004 : ARRAY [4] OF BigInteger;
      ActiveBar@1005 : Integer;
      NoOfBars2@1006 : Integer;
      NoOfTextBars@1007 : Integer;
      ShowRemainingTime2@1008 : ' ,Yes,No';
      FreezeTitle@1009 : Boolean;
      WindowOpen@1010 : Boolean;

    PROCEDURE Open@1(Title@1000 : Text;NewNoOfTextBars@1001 : Integer);
    VAR
      DialogText@1002 : Text;
      i@1003 : Integer;
    BEGIN
      IF NOT GUIALLOWED THEN
        EXIT;

      IF NoOfBars2 = 0 THEN
        NoOfBars2 := 1;

      NoOfTextBars := NewNoOfTextBars;

      IF WindowOpen THEN
        Close;

      FOR i := 1 TO NoOfTextBars DO
        DialogText += '#' + FORMAT(i) + '############################\';

      FOR i := 1 TO NoOfBars2 DO
        DialogText := DialogText + '@1' + FORMAT(i) + '@@@@@@@@@@@@@@@@@@@@@@@@@@@\';

      IF Title <> '' THEN
        DialogText := Title + '\' + DialogText;

      IF ShowRemainingTime2 IN [ShowRemainingTime2::" ", ShowRemainingTime2::Yes] THEN
        DialogText := DialogText + '#4#########################';

      Window.OPEN(DialogText);
      WindowOpen := TRUE;

      FOR i := 1 TO ARRAYLEN(StartTime) DO BEGIN
        StartTime[i] := TIME;
        PrevTime := TIME;
        Position[i] := 0;
        Size[i] := 0;
      END;

      ActiveBar := 1;
    END;

    PROCEDURE Close@2();
    BEGIN
      IF WindowOpen THEN BEGIN
        Window.CLOSE;
        WindowOpen := FALSE;
      END;
    END;

    PROCEDURE ShowRemainingTime@3(NewValue@1000 : Boolean);
    BEGIN
      IF NewValue THEN
        ShowRemainingTime2 := ShowRemainingTime2::Yes
      ELSE
        ShowRemainingTime2 := ShowRemainingTime2::No;
    END;

    PROCEDURE NoOfBars@4(NewNoOfBars@1000 : Integer);
    BEGIN
      NoOfBars2 := NewNoOfBars;
    END;

    PROCEDURE NextBar@5();
    BEGIN
      ActiveBar += 1;
      StartTime[ActiveBar] := TIME;
      PrevTime := TIME - 1000;
      Position[ActiveBar] := 0;
      Size[ActiveBar] := 0;
    END;

    PROCEDURE PreviousBar@6();
    BEGIN
      ActiveBar -= 1;
      IF ActiveBar = 0 THEN
        ActiveBar := 1;
    END;

    PROCEDURE Text1@7(NewText@1000 : Text);
    BEGIN
      IF WindowOpen THEN
        IF NOT FreezeTitle THEN
          Window.UPDATE(1, NewText);
    END;

    PROCEDURE Text2@8(NewText@1000 : Text);
    BEGIN
      IF WindowOpen THEN
        IF NoOfTextBars >= 2 THEN
          Window.UPDATE(2, NewText);
    END;

    PROCEDURE Text1Object@9(VAR Object@1000 : Record 2000000001);
    BEGIN
      IF WindowOpen THEN
        IF NOT FreezeTitle THEN
          Window.UPDATE(1, FORMAT(Object.Type) + ' ' + FORMAT(Object.ID) + ' ' + Object.Name);
    END;

    PROCEDURE Text2Object@10(VAR Object@1000 : Record 2000000001);
    BEGIN
      IF WindowOpen THEN
        IF NoOfTextBars >= 2 THEN
          Window.UPDATE(2, FORMAT(Object.Type) + ' ' + FORMAT(Object.ID) + ' ' + Object.Name);
    END;

    PROCEDURE BarSize@11(NewSize@1000 : BigInteger);
    BEGIN
      IF ActiveBar <> 0 THEN
        Size[ActiveBar] := NewSize;
    END;

    PROCEDURE UseRange@12(RangeFrom@1000 : Decimal;RangeTill@1001 : Decimal);
    VAR
      SizePercentage@1002 : Decimal;
    BEGIN
      SizePercentage := Size[ActiveBar] / (RangeTill - RangeFrom);
      Size[ActiveBar] := ROUND(SizePercentage * 100, 1);
      Position[ActiveBar] := ROUND(RangeFrom * SizePercentage, 1);
    END;

    PROCEDURE GetBarSize@13() : BigInteger;
    BEGIN
      IF ActiveBar <> 0 THEN
        EXIT(Size[ActiveBar]);
    END;

    PROCEDURE BarPosition@14(NewPosition@1000 : BigInteger);
    BEGIN
      IF ActiveBar <> 0 THEN BEGIN
        Position[ActiveBar] := NewPosition;
        CheckUpdateBar;
      END;
    END;

    PROCEDURE AddToBar@15(AddValue@1000 : BigInteger);
    BEGIN
      IF ActiveBar <> 0 THEN BEGIN
        Position[ActiveBar] += AddValue;
        CheckUpdateBar;
      END;
    END;

    LOCAL PROCEDURE CheckUpdateBar@16();
    BEGIN
      IF ActiveBar > NoOfBars2 THEN
        EXIT;

      IF StartTime[ActiveBar] = 0T THEN BEGIN
        StartTime[ActiveBar] := TIME;
        PrevTime := TIME;
      END;

      IF TIME - PrevTime > 1000 THEN BEGIN
        UpdateBar;
        PrevTime := TIME;
      END;
    END;

    PROCEDURE UpdateBar@17();
    VAR
      TimeString@1000 : Text;
      MsToGo@1001 : Decimal;
      i@1002 : Integer;
    BEGIN
      IF ActiveBar <> 0 THEN
        IF Size[ActiveBar] <> 0 THEN BEGIN
          Window.UPDATE(10 + ActiveBar, ROUND(Position[ActiveBar] / Size[ActiveBar] * 10000, 1));

          IF ShowRemainingTime2 IN [ShowRemainingTime2::" ", ShowRemainingTime2::Yes] THEN BEGIN

            TimeString := FORMAT(000000T + (TIME - StartTime[ActiveBar]), 0, '<Hours24>:<Minutes,2>:<Seconds,2>');

            IF Position[ActiveBar] <> 0 THEN
              IF Position[ActiveBar] > Size[ActiveBar] THEN
                MsToGo := 0
              ELSE
                MsToGo := (TIME - StartTime[ActiveBar]) / Position[ActiveBar] * (Size[ActiveBar] - Position[ActiveBar]);

            IF MsToGo < 86400000 THEN BEGIN
              TimeString := TimeString + '        ' + FORMAT(000000T + ROUND(MsToGo, 1), 0, '<Hours24>:<Minutes,2>:<Seconds,2>');
              TimeString := TimeString + '        ' + FORMAT(TIME + ROUND(MsToGo, 1), 0, '<Hours24>:<Minutes,2>:<Seconds,2>');
            END;
            Window.UPDATE(4, TimeString);

          END;

          FOR i := 1 TO ActiveBar - 1 DO
            IF Size[i] <> 0 THEN
              Window.UPDATE(10 + i, ROUND(Position[i] / Size[i] * 10000, 1));

          FOR i := ActiveBar + 1 TO NoOfBars2 DO
            Window.UPDATE(10 + i, 0);

        END;
    END;

    PROCEDURE SetFreezeTitle@18(NewValue@1000 : Boolean);
    BEGIN
      FreezeTitle := NewValue;
    END;

    PROCEDURE IsOpen@19() : Boolean;
    BEGIN
      EXIT(WindowOpen);
    END;

    BEGIN
    END.
  }
}

