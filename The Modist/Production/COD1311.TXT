OBJECT Codeunit 1311 Mini Activities Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CalcOverdueSalesInvoiceAmount@11() Amount : Decimal;
    VAR
      CustLedgerEntry@1001 : Record 21;
      CustLedgEntryRemainAmtQuery@1000 : Query 21 SECURITYFILTERING(Filtered);
    BEGIN
      CustLedgEntryRemainAmtQuery.SETRANGE(Document_Type,CustLedgerEntry."Document Type"::Invoice);
      CustLedgEntryRemainAmtQuery.SETRANGE(IsOpen,TRUE);
      CustLedgEntryRemainAmtQuery.SETFILTER(Due_Date,'<%1',WORKDATE);
      CustLedgEntryRemainAmtQuery.OPEN;

      IF CustLedgEntryRemainAmtQuery.READ THEN
        Amount := CustLedgEntryRemainAmtQuery.Sum_Remaining_Amt_LCY;
    END;

    PROCEDURE DrillDownCalcOverdueSalesInvoiceAmount@31();
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.SETFILTER("Due Date",'<%1',WORKDATE);
      CustLedgerEntry.SETFILTER("Remaining Amt. (LCY)",'<>0');
      CustLedgerEntry.SETCURRENTKEY("Remaining Amt. (LCY)");
      CustLedgerEntry.ASCENDING := FALSE;

      PAGE.RUN(PAGE::"Customer Ledger Entries",CustLedgerEntry);
    END;

    PROCEDURE CalcOverduePurchaseInvoiceAmount@8() Amount : Decimal;
    VAR
      VendorLedgerEntry@1000 : Record 25;
      VendLedgEntryRemainAmtQuery@1001 : Query 25 SECURITYFILTERING(Filtered);
    BEGIN
      VendLedgEntryRemainAmtQuery.SETRANGE(Document_Type,VendorLedgerEntry."Document Type"::Invoice);
      VendLedgEntryRemainAmtQuery.SETRANGE(IsOpen,TRUE);
      VendLedgEntryRemainAmtQuery.SETFILTER(Due_Date,'<%1',WORKDATE);
      VendLedgEntryRemainAmtQuery.OPEN;

      IF VendLedgEntryRemainAmtQuery.READ THEN
        Amount := ABS(VendLedgEntryRemainAmtQuery.Sum_Remaining_Amt_LCY);
    END;

    PROCEDURE DrillDownOverduePurchaseInvoiceAmount@30();
    VAR
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Invoice);
      VendorLedgerEntry.SETFILTER("Due Date",'<%1',WORKDATE);
      VendorLedgerEntry.SETFILTER("Remaining Amt. (LCY)",'<>0');
      VendorLedgerEntry.SETCURRENTKEY("Remaining Amt. (LCY)");
      VendorLedgerEntry.ASCENDING := TRUE;

      PAGE.RUN(PAGE::"Vendor Ledger Entries",VendorLedgerEntry);
    END;

    PROCEDURE CalcSalesThisMonthAmount@4() Amount : Decimal;
    VAR
      CustLedgerEntry@1001 : Record 21;
      CustLedgEntrySales@1002 : Query 1310 SECURITYFILTERING(Filtered);
    BEGIN
      CustLedgEntrySales.SETRANGE(Document_Type,CustLedgerEntry."Document Type"::Invoice);
      CustLedgEntrySales.SETRANGE(Posting_Date,CALCDATE('<-CM>',WORKDATE),WORKDATE);
      CustLedgEntrySales.OPEN;

      IF CustLedgEntrySales.READ THEN
        Amount := CustLedgEntrySales.Sum_Sales_LCY;
    END;

    PROCEDURE DrillDownSalesThisMonth@29();
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE("Posting Date",CALCDATE('<-CM>',WORKDATE),WORKDATE);
      PAGE.RUN(PAGE::"Customer Ledger Entries",CustLedgerEntry);
    END;

    PROCEDURE CalcSalesYTD@18() Amount : Decimal;
    VAR
      AccountingPeriod@1002 : Record 50;
      CustLedgEntrySales@1000 : Query 1310 SECURITYFILTERING(Filtered);
    BEGIN
      CustLedgEntrySales.SETRANGE(Posting_Date,AccountingPeriod.GetFiscalYearStartDate(WORKDATE),WORKDATE);
      CustLedgEntrySales.OPEN;

      IF CustLedgEntrySales.READ THEN
        Amount := CustLedgEntrySales.Sum_Sales_LCY;
    END;

    PROCEDURE CalcTop10CustomerSalesYTD@14() Amount : Decimal;
    VAR
      AccountingPeriod@1001 : Record 50;
      Top10CustomerSales@1005 : Query 1311;
    BEGIN
      // Total Sales (LCY) by top 10 list of customers year-to-date.
      Top10CustomerSales.SETRANGE(Posting_Date,AccountingPeriod.GetFiscalYearStartDate(WORKDATE),WORKDATE);
      Top10CustomerSales.OPEN;

      WHILE Top10CustomerSales.READ DO
        Amount += Top10CustomerSales.Sum_Sales_LCY;
    END;

    PROCEDURE CalcTop10CustomerSalesRatioYTD@7() Amount : Decimal;
    VAR
      TotalSales@1000 : Decimal;
    BEGIN
      // Ratio of Sales by top 10 list of customers year-to-date.
      TotalSales := CalcSalesYTD;
      IF TotalSales <> 0 THEN
        Amount := CalcTop10CustomerSalesYTD / TotalSales;
    END;

    PROCEDURE CalcAverageCollectionDays@3() AverageDays : Decimal;
    VAR
      CustLedgerEntry@1001 : Record 21;
      SumCollectionDays@1000 : Integer;
      CountInvoices@1003 : Integer;
    BEGIN
      GetPaidSalesInvoices(CustLedgerEntry);
      IF CustLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          SumCollectionDays += (CustLedgerEntry."Closed at Date" - CustLedgerEntry."Posting Date");
          CountInvoices += 1;
        UNTIL CustLedgerEntry.NEXT = 0;

        AverageDays := SumCollectionDays / CountInvoices;
      END
    END;

    LOCAL PROCEDURE GetPaidSalesInvoices@1(VAR CustLedgerEntry@1000 : Record 21);
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE(Open,FALSE);
      CustLedgerEntry.SETRANGE("Posting Date",CALCDATE('<CM-3M>',WORKDATE),WORKDATE);
      CustLedgerEntry.SETRANGE("Closed at Date",CALCDATE('<CM-3M>',WORKDATE),WORKDATE);
    END;

    BEGIN
    END.
  }
}

