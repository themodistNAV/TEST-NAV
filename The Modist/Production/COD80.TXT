OBJECT Codeunit 80 Sales-Post
{
  OBJECT-PROPERTIES
  {
    Date=25/01/17;
    Time=10:36:23 AM;
    Modified=Yes;
    Version List=NAVW19.00.00.45480,NAVGB9.00.00.45480,NS2016.16,EC2016.6;
  }
  PROPERTIES
  {
    TableNo=36;
    Permissions=TableData 37=imd,
                TableData 38=m,
                TableData 39=m,
                TableData 49=imd,
                TableData 110=imd,
                TableData 111=imd,
                TableData 112=imd,
                TableData 113=imd,
                TableData 114=imd,
                TableData 115=imd,
                TableData 120=imd,
                TableData 121=imd,
                TableData 223=imd,
                TableData 252=imd,
                TableData 914=i,
                TableData 6507=ri,
                TableData 6508=rid,
                TableData 6660=imd,
                TableData 6661=imd;
    OnRun=VAR
            ItemEntryRelation@1010 : Record 6507;
            TempInvoicingSpecification@1011 : TEMPORARY Record 336;
            DummyTrackingSpecification@1003 : Record 336;
            PurchSetup@1019 : Record 312;
            PurchCommentLine@1018 : Record 43;
            TempAsmHeader@1000 : TEMPORARY Record 900;
            TempItemLedgEntryNotInvoiced@1006 : TEMPORARY Record 32;
            TempPostedATOLink@1001 : TEMPORARY Record 914;
            CustLedgEntry@1013 : Record 21;
            TempCombinedSalesLine@1022 : TEMPORARY Record 37;
            SalesCommentLine@1025 : Record 44;
            SalesLineBackup@1017 : Record 37;
            GLAcc@1026 : Record 15;
            FA@1028 : Record 5600;
            DeprBook@1027 : Record 5611;
            TempServiceItem1@1041 : TEMPORARY Record 5940;
            TempServiceItem2@1040 : TEMPORARY Record 5940;
            TempServiceItemComp1@1039 : TEMPORARY Record 5941;
            TempServiceItemComp2@1038 : TEMPORARY Record 5941;
            TempVATAmountLine@1043 : TEMPORARY Record 290;
            TempVATAmountLineRemainder@1042 : TEMPORARY Record 290;
            SalesInvLine@1045 : Record 113;
            SalesCrMemoLine@1046 : Record 115;
            SalesShptLine@1047 : Record 111;
            ReturnRcptLine@1048 : Record 6661;
            WhseRcptLine@1049 : Record 7317;
            WhseShptLine@1050 : Record 7321;
            UpdateAnalysisView@1002 : Codeunit 410;
            UpdateItemAnalysisView@1014 : Codeunit 7150;
            ICInOutBoxMgt@1008 : Codeunit 427;
            NoSeriesMgt@1044 : Codeunit 396;
            GenJnlCheckLine@1036 : Codeunit 11;
            RecordLinkManagement@1015 : Codeunit 447;
            CRMIntegrationManagement@1016 : Codeunit 5330;
            CostBaseAmount@1004 : Decimal;
            TrackingSpecificationExists@1007 : Boolean;
            HasATOShippedNotInvoiced@1012 : Boolean;
            EndLoop@1009 : Boolean;
            TempInvoice@1031 : Boolean;
            TempShpt@1030 : Boolean;
            TempReturn@1029 : Boolean;
            ModifyHeader@1033 : Boolean;
            EverythingInvoiced@1034 : Boolean;
            GLEntryNo@1005 : Integer;
            BiggestLineNo@1020 : Integer;
            TransactionLogEntryNo@1024 : Integer;
            ICGenJnlLineNo@1032 : Integer;
            LineCount@1035 : Integer;
            WhseReference@1051 : Integer;
            RemQtyToInvoiceCurrLine@1052 : Decimal;
            RemQtyToInvoiceCurrLineBase@1053 : Decimal;
            SavedStatus@1054 : Option;
          BEGIN
            OnBeforePostSalesDoc(Rec);

            IF PostingDateExists AND (ReplacePostingDate OR ("Posting Date" = 0D)) THEN BEGIN
              "Posting Date" := PostingDate;
              VALIDATE("Currency Code");
            END;

            IF PostingDateExists AND (ReplaceDocumentDate OR ("Document Date" = 0D)) THEN
              VALIDATE("Document Date",PostingDate);

            IF NOT ReplacePostingDate THEN
              TestPostingDate(PostingDateExists);

            IF PreviewMode THEN BEGIN
              CLEARALL;
              PreviewMode := TRUE;
              GenJnlPostPreview.Start;
            END ELSE
              CLEARALL;

            SalesHeader := Rec;
            TempServiceItem2.DELETEALL;
            TempServiceItemComp2.DELETEALL;
            WITH SalesHeader DO BEGIN
              CheckMandatoryHeaderFields(Rec);
              IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
                FIELDERROR("Posting Date",Text045);

              SetShipInvoiceReceiveFlags(SalesHeader);

              IF NOT (Ship OR Invoice OR Receive) THEN
                ERROR(
                  Text020,
                  FIELDCAPTION(Ship),FIELDCAPTION(Invoice),FIELDCAPTION(Receive));

              WhseReference := "Posting from Whse. Ref.";
              "Posting from Whse. Ref." := 0;

              IF Invoice THEN
                CreatePrepaymentLines(SalesHeader,TempPrepaymentSalesLine,TRUE);

              CheckDim;

              SalesSetup.GET;

              CheckPostRestrictions(SalesHeader);

              IF Invoice THEN BEGIN
                SalesLine.RESET;
                SalesLine.SETRANGE("Document Type","Document Type");
                SalesLine.SETRANGE("Document No.","No.");
                SalesLine.SETFILTER(Quantity,'<>0');
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
                  SalesLine.SETFILTER("Qty. to Invoice",'<>0');
                Invoice := NOT SalesLine.ISEMPTY;
                IF Invoice AND (NOT Ship) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
                  SalesLine.FINDSET;
                  Invoice := FALSE;
                  REPEAT
                    Invoice := SalesLine."Quantity Shipped" - SalesLine."Quantity Invoiced" <> 0;
                  UNTIL Invoice OR (SalesLine.NEXT = 0);
                END ELSE
                  IF Invoice AND (NOT Receive) AND ("Document Type" = "Document Type"::"Return Order") THEN BEGIN
                    SalesLine.FINDSET;
                    Invoice := FALSE;
                    REPEAT
                      Invoice := SalesLine."Return Qty. Received" - SalesLine."Quantity Invoiced" <> 0;
                    UNTIL Invoice OR (SalesLine.NEXT = 0);
                  END;
              END;
              IF Invoice THEN BEGIN
                CopyAndCheckItemCharge(SalesHeader);
                CheckDeferralPosting(SalesHeader);
              END;

              IF Invoice AND NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN
                TESTFIELD("Due Date");

              IF Ship THEN
                CheckTrackingAndWarehouseForShip("Document Type","No.",WhseReference,Ship);

              IF Receive THEN
                CheckTrackingAndWarehouseForReceive("Document Type","No.",WhseReference,Receive);

              IF NOT (Ship OR Invoice OR Receive) THEN
                IF NOT OnlyAssgntPosting THEN
                  ERROR(Text001);

              IF ("Shipping Advice" = "Shipping Advice"::Complete) AND Ship THEN
                CheckShippingAdvice;

              InitProgressWindow(SalesHeader);

              GetGLSetup;
              GetCurrency;

              IF "Posting No." = FakeDocNoTxt THEN
                "Posting No." := '';

              IF Ship AND ("Shipping No." = '') THEN
                IF ("Document Type" = "Document Type"::Order) OR
                   (("Document Type" = "Document Type"::Invoice) AND SalesSetup."Shipment on Invoice")
                THEN BEGIN
                  TESTFIELD("Shipping No. Series");
                  "Shipping No." := NoSeriesMgt.GetNextNo("Shipping No. Series","Posting Date",TRUE);
                  ModifyHeader := TRUE;
                END;

              IF Receive AND ("Return Receipt No." = '') THEN
                IF ("Document Type" = "Document Type"::"Return Order") OR
                   (("Document Type" = "Document Type"::"Credit Memo") AND SalesSetup."Return Receipt on Credit Memo")
                THEN BEGIN
                  TESTFIELD("Return Receipt No. Series");
                  "Return Receipt No." := NoSeriesMgt.GetNextNo("Return Receipt No. Series","Posting Date",TRUE);
                  ModifyHeader := TRUE;
                END;

              IF Invoice AND ("Posting No." = '') THEN BEGIN
                IF ("No. Series" <> '') OR
                   ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
                THEN
                  TESTFIELD("Posting No. Series");
                IF ("No. Series" <> "Posting No. Series") OR
                   ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
                THEN BEGIN
                  IF NOT PreviewMode THEN BEGIN
                    "Posting No." := NoSeriesMgt.GetNextNo("Posting No. Series","Posting Date",TRUE);
                    ModifyHeader := TRUE;
                  END ELSE
                    "Posting No." := FakeDocNoTxt;
                END;
              END;

              IF NOT ItemChargeAssgntOnly THEN BEGIN
                SalesLine.RESET;
                SalesLine.SETRANGE("Document Type","Document Type");
                SalesLine.SETRANGE("Document No.","No.");
                SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                IF NOT SalesLine.ISEMPTY THEN BEGIN
                  DropShipOrder := TRUE;
                  IF Ship THEN BEGIN
                    SalesLine.FINDSET;
                    REPEAT
                      IF PurchOrderHeader."No." <> SalesLine."Purchase Order No." THEN BEGIN
                        PurchOrderHeader.GET(
                          PurchOrderHeader."Document Type"::Order,
                          SalesLine."Purchase Order No.");
                        PurchOrderHeader.TESTFIELD("Pay-to Vendor No.");
                        PurchOrderHeader.Receive := TRUE;
                        CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchOrderHeader);
                        IF PurchOrderHeader."Receiving No." = '' THEN BEGIN
                          PurchOrderHeader.TESTFIELD("Receiving No. Series");
                          PurchOrderHeader."Receiving No." :=
                            NoSeriesMgt.GetNextNo(PurchOrderHeader."Receiving No. Series","Posting Date",TRUE);
                          PurchOrderHeader.MODIFY;
                          ModifyHeader := TRUE;
                        END;
                      END;
                    UNTIL SalesLine.NEXT = 0;
                  END;
                END;
              END;
              OnBeforePostCommitSalesDoc(Rec,GenJnlPostLine,PreviewMode,ModifyHeader);
              IF NOT PreviewMode AND ModifyHeader THEN BEGIN
                MODIFY;
                COMMIT;
              END;

              IF SalesSetup."Calc. Inv. Discount" AND
                 (Status <> Status::Open) AND
                 NOT ItemChargeAssgntOnly
              THEN BEGIN
                SalesLine.RESET;
                SalesLine.SETRANGE("Document Type","Document Type");
                SalesLine.SETRANGE("Document No.","No.");
                SalesLine.FINDFIRST;
                TempInvoice := Invoice;
                TempShpt := Ship;
                TempReturn := Receive;
                CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);
                GET("Document Type","No.");
                Invoice := TempInvoice;
                Ship := TempShpt;
                Receive := TempReturn;
                IF NOT PreviewMode THEN
                  COMMIT;
              END;

              IF (Status = Status::Open) OR (Status = Status::"Pending Prepayment") THEN BEGIN
                TempInvoice := Invoice;
                TempShpt := Ship;
                TempReturn := Receive;
                SavedStatus := Status;
                GetOpenLinkedATOs(TempAsmHeader);
                CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesHeader);
                TESTFIELD(Status,Status::Released);
                Status := SavedStatus;
                Invoice := TempInvoice;
                Ship := TempShpt;
                Receive := TempReturn;
                ReopenAsmOrders(TempAsmHeader);
                IF PreviewMode AND ("Posting No." = '') THEN
                  "Posting No." := FakeDocNoTxt;
                IF NOT PreviewMode THEN BEGIN
                  MODIFY;
                  COMMIT;
                END;
                Status := Status::Released;
              END;

              TransactionLogEntryNo := AuthorizeCreditCard("Authorization Required");

              IF Ship OR Receive THEN
                ArchiveUnpostedOrder(SalesHeader);

              CheckICPartnerBlocked(SalesHeader);
              SendICDocument(SalesHeader,ModifyHeader);
              UpdateHandledICInboxTransaction(SalesHeader);

              LockTables;

              SourceCodeSetup.GET;
              SrcCode := SourceCodeSetup.Sales;

              // Insert shipment header
              IF Ship THEN BEGIN
                IF ("Document Type" = "Document Type"::Order) OR
                   (("Document Type" = "Document Type"::Invoice) AND SalesSetup."Shipment on Invoice")
                THEN BEGIN
                  IF DropShipOrder THEN BEGIN
                    PurchRcptHeader.LOCKTABLE;
                    PurchRcptLine.LOCKTABLE;
                    SalesShptHeader.LOCKTABLE;
                    SalesShptLine.LOCKTABLE;
                  END;
                  InsertShipmentHeader(SalesHeader,SalesShptHeader);
                END;

                ServItemMgt.CopyReservationEntry(SalesHeader);
                IF ("Document Type" = "Document Type"::Invoice) AND
                   (NOT SalesSetup."Shipment on Invoice")
                THEN
                  ServItemMgt.CreateServItemOnSalesInvoice(SalesHeader);
              END;

              ServItemMgt.DeleteServItemOnSaleCreditMemo(SalesHeader);

              // Insert return receipt header
              IF Receive THEN
                IF ("Document Type" = "Document Type"::"Return Order") OR
                   (("Document Type" = "Document Type"::"Credit Memo") AND SalesSetup."Return Receipt on Credit Memo")
                THEN
                  InsertReturnReceiptHeader(SalesHeader,ReturnRcptHeader);

              // Insert invoice header or credit memo header
              IF Invoice THEN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                  ReverseChargeApplies := CheckIfReverseChargeApplies(SalesHeader);
                  InsertInvoiceHeader(SalesHeader,SalesInvHeader);
                  GenJnlLineDocType := GenJnlLine."Document Type"::Invoice;
                  GenJnlLineDocNo := SalesInvHeader."No.";
                  GenJnlLineExtDocNo := SalesInvHeader."External Document No.";
                END ELSE BEGIN // Credit Memo
                  InsertCrMemoHeader(SalesHeader,SalesCrMemoHeader);
                  GenJnlLineDocType := GenJnlLine."Document Type"::"Credit Memo";
                  GenJnlLineDocNo := SalesCrMemoHeader."No.";
                  GenJnlLineExtDocNo := SalesCrMemoHeader."External Document No.";
                END;

              UpdateIncomingDocument("Incoming Document Entry No.","Posting Date",GenJnlLineDocNo);

              // Lines
              TempDeferralHeader.DELETEALL;
              TempDeferralLine.DELETEALL;
              InvPostingBuffer[1].DELETEALL;
              DropShipPostBuffer.DELETEALL;
              EverythingInvoiced := TRUE;

              SalesLine.RESET;
              SalesLine.SETRANGE("Document Type","Document Type");
              SalesLine.SETRANGE("Document No.","No.");
              LineCount := 0;
              RoundingLineInserted := FALSE;
              MergeSaleslines(SalesHeader,SalesLine,TempPrepaymentSalesLine,TempCombinedSalesLine);
              AdjustFinalInvWith100PctPrepmt(TempCombinedSalesLine);

              TempVATAmountLineRemainder.DELETEALL;
              IF ReverseChargeApplies THEN
                SalesLine.SetReverseChargeApplies;
              SalesLine.CalcVATAmountLines(1,SalesHeader,TempCombinedSalesLine,TempVATAmountLine);

              SalesLinesProcessed := FALSE;
              IF SalesLine.FINDSET THEN
                REPEAT
                  IF SalesLine.Type = SalesLine.Type::Item THEN
                    DummyTrackingSpecification.CheckItemTrackingQuantity(
                      DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
                      SalesLine."Qty. to Ship (Base)",SalesLine."Qty. to Invoice (Base)",Ship,Invoice);
                  ItemJnlRollRndg := FALSE;
                  LineCount := LineCount + 1;
                  IF GUIALLOWED THEN  //DOC EC2016.1.1
                  Window.UPDATE(2,LineCount);
                  IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN BEGIN
                    SalesLine.TESTFIELD(Amount);
                    SalesLine.TESTFIELD("Job No.",'');
                    SalesLine.TESTFIELD("Job Contract Entry No.",0);
                  END;
                  IF SalesLine.Type = SalesLine.Type::Item THEN
                    CostBaseAmount := SalesLine."Line Amount";
                  IF SalesLine."Qty. per Unit of Measure" = 0 THEN
                    SalesLine."Qty. per Unit of Measure" := 1;
                  CASE "Document Type" OF
                    "Document Type"::Order:
                      SalesLine.TESTFIELD("Return Qty. to Receive",0);
                    "Document Type"::Invoice:
                      BEGIN
                        IF SalesLine."Shipment No." = '' THEN
                          SalesLine.TESTFIELD("Qty. to Ship",SalesLine.Quantity);
                        SalesLine.TESTFIELD("Return Qty. to Receive",0);
                        SalesLine.TESTFIELD("Qty. to Invoice",SalesLine.Quantity);
                      END;
                    "Document Type"::"Return Order":
                      SalesLine.TESTFIELD("Qty. to Ship",0);
                    "Document Type"::"Credit Memo":
                      BEGIN
                        IF SalesLine."Return Receipt No." = '' THEN
                          SalesLine.TESTFIELD("Return Qty. to Receive",SalesLine.Quantity);
                        SalesLine.TESTFIELD("Qty. to Ship",0);
                        SalesLine.TESTFIELD("Qty. to Invoice",SalesLine.Quantity);
                      END;
                  END;

                  TempPostedATOLink.RESET;
                  TempPostedATOLink.DELETEALL;
                  IF Ship THEN
                    PostATO(SalesLine,TempPostedATOLink);

                  IF NOT (Ship OR RoundingLineInserted) THEN BEGIN
                    SalesLine."Qty. to Ship" := 0;
                    SalesLine."Qty. to Ship (Base)" := 0;
                  END;
                  IF NOT (Receive OR RoundingLineInserted) THEN BEGIN
                    SalesLine."Return Qty. to Receive" := 0;
                    SalesLine."Return Qty. to Receive (Base)" := 0;
                  END;

                  JobContractLine := FALSE;
                  IF (SalesLine.Type = SalesLine.Type::Item) OR
                     (SalesLine.Type = SalesLine.Type::"G/L Account") OR
                     (SalesLine.Type = SalesLine.Type::" ")
                  THEN
                    IF SalesLine."Job Contract Entry No." > 0 THEN
                      PostJobContractLine(SalesLine);
                  IF SalesLine.Type = SalesLine.Type::Resource THEN
                    JobTaskSalesLine := SalesLine;

                  IF SalesLine.Type = SalesLine.Type::"Fixed Asset" THEN BEGIN
                    SalesLine.TESTFIELD("Job No.",'');
                    SalesLine.TESTFIELD("Depreciation Book Code");
                    DeprBook.GET(SalesLine."Depreciation Book Code");
                    DeprBook.TESTFIELD("G/L Integration - Disposal",TRUE);
                    FA.GET(SalesLine."No.");
                    FA.TESTFIELD("Budgeted Asset",FALSE);
                  END ELSE BEGIN
                    SalesLine.TESTFIELD("Depreciation Book Code",'');
                    SalesLine.TESTFIELD("Depr. until FA Posting Date",FALSE);
                    SalesLine.TESTFIELD("FA Posting Date",0D);
                    SalesLine.TESTFIELD("Duplicate in Depreciation Book",'');
                    SalesLine.TESTFIELD("Use Duplication List",FALSE);
                  END;

                  IF ("Document Type" = "Document Type"::Invoice) AND (SalesLine."Shipment No." <> '') THEN BEGIN
                    SalesLine."Quantity Shipped" := SalesLine.Quantity;
                    SalesLine."Qty. Shipped (Base)" := SalesLine."Quantity (Base)";
                    SalesLine."Qty. to Ship" := 0;
                    SalesLine."Qty. to Ship (Base)" := 0;
                  END;

                  IF ("Document Type" = "Document Type"::"Credit Memo") AND (SalesLine."Return Receipt No." <> '') THEN BEGIN
                    SalesLine."Return Qty. Received" := SalesLine.Quantity;
                    SalesLine."Return Qty. Received (Base)" := SalesLine."Quantity (Base)";
                    SalesLine."Return Qty. to Receive" := 0;
                    SalesLine."Return Qty. to Receive (Base)" := 0;
                  END;

                  IF Invoice THEN BEGIN
                    IF ABS(SalesLine."Qty. to Invoice") > ABS(SalesLine.MaxQtyToInvoice) THEN
                      SalesLine.InitQtyToInvoice;
                  END ELSE BEGIN
                    SalesLine."Qty. to Invoice" := 0;
                    SalesLine."Qty. to Invoice (Base)" := 0;
                  END;

                  IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine."No." <> '') THEN BEGIN
                    GetItem(SalesLine);
                    IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT SalesLine.IsShipment THEN
                      SalesLine.GetUnitCost;
                  END;

                  IF SalesLine."Qty. to Invoice" + SalesLine."Quantity Invoiced" <> SalesLine.Quantity THEN
                    EverythingInvoiced := FALSE;

                  IF SalesLine.Quantity = 0 THEN
                    SalesLine.TESTFIELD(Amount,0)
                  ELSE BEGIN
                    SalesLine.TESTFIELD("No.");
                    SalesLine.TESTFIELD(Type);
                    SalesLine.TESTFIELD("Gen. Bus. Posting Group");
                    SalesLine.TESTFIELD("Gen. Prod. Posting Group");
                    IF ReverseChargeApplies AND SalesLine."Reverse Charge Item" THEN BEGIN
                      SalesLine."Reverse Charge" := ROUND((SalesLine."Amount Including VAT" - SalesLine.Amount) *
                          SalesLine."Qty. to Invoice" / SalesLine.Quantity,Currency."Amount Rounding Precision");
                      SalesLine.SuspendStatusCheck(TRUE);
                      SalesLine.VALIDATE("VAT Bus. Posting Group",SalesSetup."Reverse Charge VAT Posting Gr.");
                    END;
                    DivideAmount(1,SalesLine."Qty. to Invoice",TempVATAmountLine,TempVATAmountLineRemainder);
                  END;

                  IF SalesLine."Drop Shipment" THEN BEGIN
                    IF SalesLine.Type <> SalesLine.Type::Item THEN
                      SalesLine.TESTFIELD("Drop Shipment",FALSE);
                    IF (SalesLine."Qty. to Ship" <> 0) AND (SalesLine."Purch. Order Line No." = 0) THEN
                      ERROR(
                        Text009 +
                        Text010,
                        SalesLine."Line No.");
                  END;

                  CheckItemReservDisruption;
                  RoundAmount(SalesLine."Qty. to Invoice");

                  IF NOT SalesLine.IsCreditDocType THEN BEGIN
                    ReverseAmount(SalesLine);
                    ReverseAmount(SalesLineACY);
                  END;

                  RemQtyToBeInvoiced := SalesLine."Qty. to Invoice";
                  RemQtyToBeInvoicedBase := SalesLine."Qty. to Invoice (Base)";

                  // Item Tracking:
                  IF NOT SalesLine."Prepayment Line" THEN BEGIN
                    IF Invoice THEN
                      IF SalesLine."Qty. to Invoice" = 0 THEN
                        TrackingSpecificationExists := FALSE
                      ELSE
                        TrackingSpecificationExists :=
                          ReserveSalesLine.RetrieveInvoiceSpecification(SalesLine,TempInvoicingSpecification);
                    EndLoop := FALSE;

                    IF SalesLine.IsCreditDocType THEN BEGIN
                      IF ABS(RemQtyToBeInvoiced) > ABS(SalesLine."Return Qty. to Receive") THEN BEGIN
                        ReturnRcptLine.RESET;
                        CASE "Document Type" OF
                          "Document Type"::"Return Order":
                            BEGIN
                              ReturnRcptLine.SETCURRENTKEY("Return Order No.","Return Order Line No.");
                              ReturnRcptLine.SETRANGE("Return Order No.",SalesLine."Document No.");
                              ReturnRcptLine.SETRANGE("Return Order Line No.",SalesLine."Line No.");
                            END;
                          "Document Type"::"Credit Memo":
                            BEGIN
                              ReturnRcptLine.SETRANGE("Document No.",SalesLine."Return Receipt No.");
                              ReturnRcptLine.SETRANGE("Line No.",SalesLine."Return Receipt Line No.");
                            END;
                        END;
                        ReturnRcptLine.SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');
                        IF ReturnRcptLine.FIND('-') THEN BEGIN
                          ItemJnlRollRndg := TRUE;
                          REPEAT
                            IF TrackingSpecificationExists THEN BEGIN  // Item Tracking
                              ItemEntryRelation.GET(TempInvoicingSpecification."Item Ledger Entry No.");
                              ReturnRcptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
                            END ELSE
                              ItemEntryRelation."Item Entry No." := ReturnRcptLine."Item Rcpt. Entry No.";
                            ReturnRcptLine.TESTFIELD("Sell-to Customer No.",SalesLine."Sell-to Customer No.");
                            ReturnRcptLine.TESTFIELD(Type,SalesLine.Type);
                            ReturnRcptLine.TESTFIELD("No.",SalesLine."No.");
                            ReturnRcptLine.TESTFIELD("Gen. Bus. Posting Group",SalesLine."Gen. Bus. Posting Group");
                            ReturnRcptLine.TESTFIELD("Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group");
                            ReturnRcptLine.TESTFIELD("Job No.",SalesLine."Job No.");
                            ReturnRcptLine.TESTFIELD("Unit of Measure Code",SalesLine."Unit of Measure Code");
                            ReturnRcptLine.TESTFIELD("Variant Code",SalesLine."Variant Code");
                            IF SalesLine."Qty. to Invoice" * ReturnRcptLine.Quantity < 0 THEN
                              SalesLine.FIELDERROR("Qty. to Invoice",Text024);
                            IF TrackingSpecificationExists THEN BEGIN  // Item Tracking
                              QtyToBeInvoiced := TempInvoicingSpecification."Qty. to Invoice";
                              QtyToBeInvoicedBase := TempInvoicingSpecification."Qty. to Invoice (Base)";
                            END ELSE BEGIN
                              QtyToBeInvoiced := RemQtyToBeInvoiced - SalesLine."Return Qty. to Receive";
                              QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - SalesLine."Return Qty. to Receive (Base)";
                            END;
                            IF ABS(QtyToBeInvoiced) >
                               ABS(ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced")
                            THEN BEGIN
                              QtyToBeInvoiced := ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced";
                              QtyToBeInvoicedBase := ReturnRcptLine."Quantity (Base)" - ReturnRcptLine."Qty. Invoiced (Base)";
                            END;

                            IF TrackingSpecificationExists THEN
                              ItemTrackingMgt.AdjustQuantityRounding(
                                RemQtyToBeInvoiced,QtyToBeInvoiced,
                                RemQtyToBeInvoicedBase,QtyToBeInvoicedBase);

                            RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                            RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                            ReturnRcptLine."Quantity Invoiced" :=
                              ReturnRcptLine."Quantity Invoiced" + QtyToBeInvoiced;
                            ReturnRcptLine."Qty. Invoiced (Base)" :=
                              ReturnRcptLine."Qty. Invoiced (Base)" + QtyToBeInvoicedBase;
                            ReturnRcptLine."Return Qty. Rcd. Not Invd." :=
                              ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced";
                            ReturnRcptLine.MODIFY;
                            IF SalesLine.Type = SalesLine.Type::Item THEN
                              PostItemJnlLine(
                                SalesLine,
                                0,0,
                                QtyToBeInvoiced,
                                QtyToBeInvoicedBase,
                                // ReturnRcptLine."Item Rcpt. Entry No."
                                ItemEntryRelation."Item Entry No.",'',TempInvoicingSpecification,FALSE);
                            IF TrackingSpecificationExists THEN
                              EndLoop := (TempInvoicingSpecification.NEXT = 0)
                            ELSE
                              EndLoop :=
                                (ReturnRcptLine.NEXT = 0) OR (ABS(RemQtyToBeInvoiced) <= ABS(SalesLine."Return Qty. to Receive"));
                          UNTIL EndLoop;
                        END ELSE
                          ERROR(
                            Text025,
                            SalesLine."Return Receipt Line No.",SalesLine."Return Receipt No.");
                      END;

                      IF ABS(RemQtyToBeInvoiced) > ABS(SalesLine."Return Qty. to Receive") THEN BEGIN
                        IF "Document Type" = "Document Type"::"Credit Memo" THEN
                          ERROR(
                            Text038,
                            ReturnRcptLine."Document No.");
                        ERROR(Text037);
                      END;
                    END ELSE BEGIN
                      IF ABS(RemQtyToBeInvoiced) > ABS(SalesLine."Qty. to Ship") THEN BEGIN
                        SalesShptLine.RESET;
                        CASE "Document Type" OF
                          "Document Type"::Order:
                            BEGIN
                              SalesShptLine.SETCURRENTKEY("Order No.","Order Line No.");
                              SalesShptLine.SETRANGE("Order No.",SalesLine."Document No.");
                              SalesShptLine.SETRANGE("Order Line No.",SalesLine."Line No.");
                            END;
                          "Document Type"::Invoice:
                            BEGIN
                              SalesShptLine.SETRANGE("Document No.",SalesLine."Shipment No.");
                              SalesShptLine.SETRANGE("Line No.",SalesLine."Shipment Line No.");
                            END;
                        END;

                        IF NOT TrackingSpecificationExists THEN
                          HasATOShippedNotInvoiced := GetATOItemLedgEntriesNotInvoiced(SalesLine,TempItemLedgEntryNotInvoiced);

                        SalesShptLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
                        IF SalesShptLine.FINDFIRST THEN BEGIN
                          ItemJnlRollRndg := TRUE;
                          REPEAT
                            SetItemEntryRelation(
                              ItemEntryRelation,SalesShptLine,
                              TempInvoicingSpecification,TempItemLedgEntryNotInvoiced,
                              TrackingSpecificationExists,HasATOShippedNotInvoiced);

                            UpdateRemainingQtyToBeInvoiced(SalesShptLine,RemQtyToInvoiceCurrLine,RemQtyToInvoiceCurrLineBase);

                            SalesShptLine.TESTFIELD("Sell-to Customer No.",SalesLine."Sell-to Customer No.");
                            SalesShptLine.TESTFIELD(Type,SalesLine.Type);
                            SalesShptLine.TESTFIELD("No.",SalesLine."No.");
                            SalesShptLine.TESTFIELD("Gen. Bus. Posting Group",SalesLine."Gen. Bus. Posting Group");
                            SalesShptLine.TESTFIELD("Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group");
                            SalesShptLine.TESTFIELD("Job No.",SalesLine."Job No.");
                            SalesShptLine.TESTFIELD("Unit of Measure Code",SalesLine."Unit of Measure Code");
                            SalesShptLine.TESTFIELD("Variant Code",SalesLine."Variant Code");
                            IF -SalesLine."Qty. to Invoice" * SalesShptLine.Quantity < 0 THEN
                              SalesLine.FIELDERROR("Qty. to Invoice",Text011);

                            UpdateQtyToBeInvoiced(
                              QtyToBeInvoiced,QtyToBeInvoicedBase,
                              TrackingSpecificationExists,HasATOShippedNotInvoiced,
                              SalesLine,SalesShptLine,
                              TempInvoicingSpecification,TempItemLedgEntryNotInvoiced);

                            IF TrackingSpecificationExists OR HasATOShippedNotInvoiced THEN
                              ItemTrackingMgt.AdjustQuantityRounding(
                                RemQtyToInvoiceCurrLine,QtyToBeInvoiced,
                                RemQtyToInvoiceCurrLineBase,QtyToBeInvoicedBase);

                            RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                            RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                            UpdateInvoicedQtyOnShipmentLine(SalesShptLine,QtyToBeInvoiced,QtyToBeInvoicedBase);
                            IF SalesLine.Type = SalesLine.Type::Item THEN
                              PostItemJnlLine(
                                SalesLine,
                                0,0,
                                QtyToBeInvoiced,
                                QtyToBeInvoicedBase,
                                // SalesShptLine."Item Shpt. Entry No."
                                ItemEntryRelation."Item Entry No.",'',TempInvoicingSpecification,FALSE);
                          UNTIL IsEndLoopForShippedNotInvoiced(
                                  RemQtyToBeInvoiced,TrackingSpecificationExists,HasATOShippedNotInvoiced,
                                  SalesShptLine,TempInvoicingSpecification,TempItemLedgEntryNotInvoiced,SalesLine);
                        END ELSE
                          ERROR(
                            Text026,
                            SalesLine."Shipment Line No.",SalesLine."Shipment No.");
                      END;

                      IF ABS(RemQtyToBeInvoiced) > ABS(SalesLine."Qty. to Ship") THEN BEGIN
                        IF "Document Type" = "Document Type"::Invoice THEN
                          ERROR(
                            Text027,
                            SalesShptLine."Document No.");
                        ERROR(Text013);
                      END;
                    END;

                    IF TrackingSpecificationExists THEN
                      SaveInvoiceSpecification(TempInvoicingSpecification);
                  END;

                  CASE SalesLine.Type OF
                    SalesLine.Type::"G/L Account":
                      IF (SalesLine."No." <> '') AND NOT SalesLine."System-Created Entry" THEN BEGIN
                        GLAcc.GET(SalesLine."No.");
                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                        IF (SalesLine."IC Partner Code" <> '') AND Invoice THEN
                          InsertICGenJnlLine(TempSalesLine,ICGenJnlLineNo);
                      END;
                    SalesLine.Type::Item:
                      BEGIN
                        IF (SalesLine."Qty. to Ship" <> 0) AND (SalesLine."Purch. Order Line No." <> 0) THEN BEGIN
                          DropShipPostBuffer."Order No." := SalesLine."Purchase Order No.";
                          DropShipPostBuffer."Order Line No." := SalesLine."Purch. Order Line No.";
                          DropShipPostBuffer.Quantity := -SalesLine."Qty. to Ship";
                          DropShipPostBuffer."Quantity (Base)" := -SalesLine."Qty. to Ship (Base)";
                          DropShipPostBuffer."Item Shpt. Entry No." :=
                            PostAssocItemJnlLine(DropShipPostBuffer.Quantity,DropShipPostBuffer."Quantity (Base)");
                          DropShipPostBuffer.INSERT;
                          SalesLine."Appl.-to Item Entry" := DropShipPostBuffer."Item Shpt. Entry No.";
                        END;

                        CLEAR(TempPostedATOLink);
                        TempPostedATOLink.SETRANGE("Order No.",SalesLine."Document No.");
                        TempPostedATOLink.SETRANGE("Order Line No.",SalesLine."Line No.");
                        IF TempPostedATOLink.FINDFIRST THEN
                          PostATOAssocItemJnlLine(SalesLine,TempPostedATOLink,RemQtyToBeInvoiced,RemQtyToBeInvoicedBase);

                        IF RemQtyToBeInvoiced <> 0 THEN
                          ItemLedgShptEntryNo :=
                            PostItemJnlLine(
                              SalesLine,
                              RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
                              RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
                              0,'',DummyTrackingSpecification,FALSE);

                        IF SalesLine.IsCreditDocType THEN BEGIN
                          IF ABS(SalesLine."Return Qty. to Receive") > ABS(RemQtyToBeInvoiced) THEN
                            ItemLedgShptEntryNo :=
                              PostItemJnlLine(
                                SalesLine,
                                SalesLine."Return Qty. to Receive" - RemQtyToBeInvoiced,
                                SalesLine."Return Qty. to Receive (Base)" - RemQtyToBeInvoicedBase,
                                0,0,0,'',DummyTrackingSpecification,FALSE);
                        END ELSE BEGIN
                          IF ABS(SalesLine."Qty. to Ship") > ABS(RemQtyToBeInvoiced) + ABS(TempPostedATOLink."Assembled Quantity") THEN
                            ItemLedgShptEntryNo :=
                              PostItemJnlLine(
                                SalesLine,
                                SalesLine."Qty. to Ship" - TempPostedATOLink."Assembled Quantity" - RemQtyToBeInvoiced,
                                SalesLine."Qty. to Ship (Base)" - TempPostedATOLink."Assembled Quantity (Base)" - RemQtyToBeInvoicedBase,
                                0,0,0,'',DummyTrackingSpecification,FALSE);
                        END;
                      END;
                    SalesLine.Type::Resource:
                      IF SalesLine."Qty. to Invoice" <> 0 THEN
                        PostResJnlLine(SalesHeader,SalesLine,JobTaskSalesLine);
                    SalesLine.Type::"Charge (Item)":
                      IF (Invoice AND (SalesLine."Qty. to Invoice" <> 0)) OR ItemChargeAssgntOnly THEN BEGIN
                        ItemJnlRollRndg := TRUE;
                        SalesLineBackup.COPY(SalesLine);
                        IF FindTempItemChargeAssgntSales(SalesLineBackup."Line No.") THEN
                          REPEAT
                            IF ItemChargeAssgntOnly AND (GenJnlLineDocNo = '') THEN
                              GenJnlLineDocNo := TempItemChargeAssgntSales."Applies-to Doc. No.";
                            CASE TempItemChargeAssgntSales."Applies-to Doc. Type" OF
                              TempItemChargeAssgntSales."Applies-to Doc. Type"::Shipment:
                                BEGIN
                                  PostItemChargePerShpt(SalesLineBackup);
                                  TempItemChargeAssgntSales.MARK(TRUE);
                                END;
                              TempItemChargeAssgntSales."Applies-to Doc. Type"::"Return Receipt":
                                BEGIN
                                  PostItemChargePerRetRcpt(SalesLineBackup);
                                  TempItemChargeAssgntSales.MARK(TRUE);
                                END;
                              TempItemChargeAssgntSales."Applies-to Doc. Type"::Order,
                              TempItemChargeAssgntSales."Applies-to Doc. Type"::Invoice,
                              TempItemChargeAssgntSales."Applies-to Doc. Type"::"Return Order",
                              TempItemChargeAssgntSales."Applies-to Doc. Type"::"Credit Memo":
                                CheckItemCharge(TempItemChargeAssgntSales);
                            END;
                          UNTIL TempItemChargeAssgntSales.NEXT = 0;
                      END;
                  END;

                  IF (SalesLine.Type >= SalesLine.Type::"G/L Account") AND (SalesLine."Qty. to Invoice" <> 0) THEN BEGIN
                    AdjustPrepmtAmountLCY(SalesLine);
                    // Copy sales to buffer
                    FillInvPostingBuffer(SalesLine,SalesLineACY);
                    InsertPrepmtAdjInvPostingBuf(SalesLine);
                  END;

                  IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
                    SalesLine.TESTFIELD("Job No.",'');

                  IF (SalesShptHeader."No." <> '') AND (SalesLine."Shipment No." = '') AND
                     NOT RoundingLineInserted AND NOT TempSalesLine."Prepayment Line"
                  THEN BEGIN
                    // Insert shipment line
                    SalesShptLine.InitFromSalesLine(SalesShptHeader,TempSalesLine);
                    IF (SalesLine.Type = SalesLine.Type::Item) AND (TempSalesLine."Qty. to Ship" <> 0) THEN BEGIN
                      IF WhseShip THEN BEGIN
                        WhseShptLine.GetWhseShptLine(
                          WhseShptLine,WhseShptHeader."No.",DATABASE::"Sales Line",
                          SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
                        PostWhseShptLines(WhseShptLine,SalesShptLine,SalesLine);
                      END;
                      IF WhseReceive THEN BEGIN
                        WhseRcptLine.GetWhseRcptLine(
                          WhseRcptLine,WhseRcptHeader."No.",DATABASE::"Sales Line",
                          SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
                        WhseRcptLine.TESTFIELD("Qty. to Receive",-SalesShptLine.Quantity);
                        SaveTempWhseSplitSpec(SalesLine);
                        WhsePostRcpt.CreatePostedRcptLine(
                          WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
                      END;

                      SalesShptLine."Item Shpt. Entry No." :=
                        InsertShptEntryRelation(SalesShptLine); // ItemLedgShptEntryNo
                      SalesShptLine."Item Charge Base Amount" :=
                        ROUND(CostBaseAmount / SalesLine.Quantity * SalesShptLine.Quantity);
                    END;
                    SalesShptLine."Authorized for Credit Card" := IsAuthorized(TransactionLogEntryNo);
                    SalesShptLine.INSERT;

                    CheckCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);

                    ServItemMgt.CreateServItemOnSalesLineShpt(Rec,TempSalesLine,SalesShptLine);

                    IF SalesLine."BOM Item No." <> '' THEN BEGIN
                      ServItemMgt.ReturnServItemComp(TempServiceItem1,TempServiceItemComp1);
                      IF TempServiceItem1.FINDSET THEN
                        REPEAT
                          TempServiceItem2 := TempServiceItem1;
                          IF TempServiceItem2.INSERT THEN;
                        UNTIL TempServiceItem1.NEXT = 0;
                      IF TempServiceItemComp1.FINDSET THEN
                        REPEAT
                          TempServiceItemComp2 := TempServiceItemComp1;
                          IF TempServiceItemComp2.INSERT THEN;
                        UNTIL TempServiceItemComp1.NEXT = 0;
                    END;
                  END;

                  IF (ReturnRcptHeader."No." <> '') AND (SalesLine."Return Receipt No." = '') AND
                     NOT RoundingLineInserted
                  THEN BEGIN
                    // Insert return receipt line
                    ReturnRcptLine.InitFromSalesLine(ReturnRcptHeader,TempSalesLine);
                    IF (SalesLine.Type = SalesLine.Type::Item) AND (TempSalesLine."Return Qty. to Receive" <> 0) THEN BEGIN
                      IF WhseReceive THEN BEGIN
                        WhseRcptLine.GetWhseRcptLine(
                          WhseRcptLine,WhseRcptHeader."No.",DATABASE::"Sales Line",
                          SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
                        WhseRcptLine.TESTFIELD("Qty. to Receive",ReturnRcptLine.Quantity);
                        SaveTempWhseSplitSpec(SalesLine);
                        WhsePostRcpt.CreatePostedRcptLine(
                          WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
                      END;
                      IF WhseShip THEN BEGIN
                        WhseShptLine.GetWhseShptLine(
                          WhseShptLine,WhseShptHeader."No.",DATABASE::"Sales Line",
                          SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
                        WhseShptLine.TESTFIELD("Qty. to Ship",-ReturnRcptLine.Quantity);
                        SaveTempWhseSplitSpec(SalesLine);
                        WhsePostShpt.SetWhseJnlRegisterCU(WhseJnlPostLine);
                        WhsePostShpt.CreatePostedShptLine(
                          WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
                      END;

                      ReturnRcptLine."Item Rcpt. Entry No." :=
                        InsertReturnEntryRelation(ReturnRcptLine); // ItemLedgShptEntryNo;
                      ReturnRcptLine."Item Charge Base Amount" :=
                        ROUND(CostBaseAmount / SalesLine.Quantity * ReturnRcptLine.Quantity);
                    END;
                    ReturnRcptLine.INSERT;
                  END;

                  IF Invoice THEN
                    // Insert invoice line or credit memo line
                    IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                      SalesInvLine.InitFromSalesLine(SalesInvHeader,TempSalesLine);
                      SalesInvLine.INSERT;
                      ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,SalesInvLine.RowID1);
                      CreatePostedDeferralScheduleFromSalesDoc(TempSalesLine,SalesInvLine.GetDocumentType,
                        SalesInvHeader."No.",SalesInvLine."Line No.",SalesInvHeader."Posting Date");
                    END ELSE BEGIN // Credit Memo
                      SalesCrMemoLine.InitFromSalesLine(SalesCrMemoHeader,TempSalesLine);
                      SalesCrMemoLine.INSERT;
                      ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,SalesCrMemoLine.RowID1);
                      CreatePostedDeferralScheduleFromSalesDoc(TempSalesLine,SalesCrMemoLine.GetDocumentType,
                        SalesCrMemoHeader."No.",SalesCrMemoLine."Line No.",SalesCrMemoHeader."Posting Date");
                    END;

                  IF RoundingLineInserted THEN
                    LastLineRetrieved := TRUE
                  ELSE BEGIN
                    BiggestLineNo := MAX(BiggestLineNo,SalesLine."Line No.");
                    LastLineRetrieved := GetNextSalesline(SalesLine);
                    IF LastLineRetrieved AND SalesSetup."Invoice Rounding" THEN
                      InvoiceRounding(FALSE,BiggestLineNo);
                  END;
                UNTIL LastLineRetrieved;

              IF NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN BEGIN
                ReverseAmount(TotalSalesLine);
                ReverseAmount(TotalSalesLineLCY);
                TotalSalesLineLCY."Unit Cost (LCY)" := -TotalSalesLineLCY."Unit Cost (LCY)";
              END;

              // Post drop shipment of purchase order
              PurchSetup.GET;
              IF DropShipPostBuffer.FIND('-') THEN
                REPEAT
                  PurchOrderHeader.GET(
                    PurchOrderHeader."Document Type"::Order,
                    DropShipPostBuffer."Order No.");
                  PurchPost.ArchiveUnpostedOrder(PurchOrderHeader);
                  PurchRcptHeader.INIT;
                  PurchRcptHeader.TRANSFERFIELDS(PurchOrderHeader);
                  PurchRcptHeader."No." := PurchOrderHeader."Receiving No.";
                  PurchRcptHeader."Order No." := PurchOrderHeader."No.";
                  PurchRcptHeader."Posting Date" := "Posting Date";
                  PurchRcptHeader."Document Date" := "Document Date";
                  PurchRcptHeader."No. Printed" := 0;
                  PurchRcptHeader.INSERT;

                  ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchRcptHeader.RECORDID,PurchRcptHeader."No.");

                  IF PurchSetup."Copy Comments Order to Receipt" THEN BEGIN
                    CopyPurchCommentLines(
                      PurchOrderHeader."Document Type",PurchCommentLine."Document Type"::Receipt,
                      PurchOrderHeader."No.",PurchRcptHeader."No.");
                    RecordLinkManagement.CopyLinks(Rec,PurchRcptHeader);
                  END;
                  DropShipPostBuffer.SETRANGE("Order No.",DropShipPostBuffer."Order No.");
                  REPEAT
                    PurchOrderLine.GET(
                      PurchOrderLine."Document Type"::Order,
                      DropShipPostBuffer."Order No.",DropShipPostBuffer."Order Line No.");
                    PurchRcptLine.INIT;
                    PurchRcptLine.TRANSFERFIELDS(PurchOrderLine);
                    PurchRcptLine."Posting Date" := PurchRcptHeader."Posting Date";
                    PurchRcptLine."Document No." := PurchRcptHeader."No.";
                    PurchRcptLine.Quantity := DropShipPostBuffer.Quantity;
                    PurchRcptLine."Quantity (Base)" := DropShipPostBuffer."Quantity (Base)";
                    PurchRcptLine."Quantity Invoiced" := 0;
                    PurchRcptLine."Qty. Invoiced (Base)" := 0;
                    PurchRcptLine."Order No." := PurchOrderLine."Document No.";
                    PurchRcptLine."Order Line No." := PurchOrderLine."Line No.";
                    PurchRcptLine."Qty. Rcd. Not Invoiced" :=
                      PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";

                    IF PurchRcptLine.Quantity <> 0 THEN BEGIN
                      PurchRcptLine."Item Rcpt. Entry No." := DropShipPostBuffer."Item Shpt. Entry No.";
                      PurchRcptLine."Item Charge Base Amount" := PurchOrderLine."Line Amount"
                    END;
                    PurchRcptLine.INSERT;
                    PurchOrderLine."Qty. to Receive" := DropShipPostBuffer.Quantity;
                    PurchOrderLine."Qty. to Receive (Base)" := DropShipPostBuffer."Quantity (Base)";
                    PurchPost.UpdateBlanketOrderLine(PurchOrderLine,TRUE,FALSE,FALSE);
                  UNTIL DropShipPostBuffer.NEXT = 0;
                  DropShipPostBuffer.SETRANGE("Order No.");
                UNTIL DropShipPostBuffer.NEXT = 0;

              IF Invoice THEN BEGIN
                // Post sales and VAT to G/L entries from posting buffer
                LineCount := 0;
                IF InvPostingBuffer[1].FIND('+') THEN
                  REPEAT
                    LineCount := LineCount + 1;
                    IF GUIALLOWED THEN  //DOC EC2016.1.1
                    Window.UPDATE(3,LineCount);

                    GenJnlLine.INIT;
                    GenJnlLine."Posting Date" := "Posting Date";
                    GenJnlLine."Document Date" := "Document Date";
                    GenJnlLine.Description := "Posting Description";
                    GenJnlLine."Reason Code" := "Reason Code";
                    GenJnlLine."Document Type" := GenJnlLineDocType;
                    GenJnlLine."Document No." := GenJnlLineDocNo;
                    GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                    GenJnlLine."Account No." := InvPostingBuffer[1]."G/L Account";
                    GenJnlLine."System-Created Entry" := InvPostingBuffer[1]."System-Created Entry";
                    GenJnlLine.Amount := InvPostingBuffer[1].Amount;
                    GenJnlLine."Source Currency Code" := "Currency Code";
                    GenJnlLine."Source Currency Amount" := InvPostingBuffer[1]."Amount (ACY)";
                    GenJnlLine.Correction := Correction;
                    IF InvPostingBuffer[1].Type <> InvPostingBuffer[1].Type::"Prepmt. Exch. Rate Difference" THEN
                      GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;
                    GenJnlLine."Gen. Bus. Posting Group" := InvPostingBuffer[1]."Gen. Bus. Posting Group";
                    GenJnlLine."Gen. Prod. Posting Group" := InvPostingBuffer[1]."Gen. Prod. Posting Group";
                    GenJnlLine."VAT Bus. Posting Group" := InvPostingBuffer[1]."VAT Bus. Posting Group";
                    GenJnlLine."VAT Prod. Posting Group" := InvPostingBuffer[1]."VAT Prod. Posting Group";
                    GenJnlLine."Tax Area Code" := InvPostingBuffer[1]."Tax Area Code";
                    GenJnlLine."Tax Liable" := InvPostingBuffer[1]."Tax Liable";
                    GenJnlLine."Tax Group Code" := InvPostingBuffer[1]."Tax Group Code";
                    GenJnlLine."Use Tax" := InvPostingBuffer[1]."Use Tax";
                    GenJnlLine.Quantity := InvPostingBuffer[1].Quantity;
                    GenJnlLine."VAT Calculation Type" := InvPostingBuffer[1]."VAT Calculation Type";
                    GenJnlLine."VAT Base Amount" := InvPostingBuffer[1]."VAT Base Amount";
                    GenJnlLine."VAT Base Discount %" := "VAT Base Discount %";
                    GenJnlLine."Source Curr. VAT Base Amount" := InvPostingBuffer[1]."VAT Base Amount (ACY)";
                    GenJnlLine."VAT Amount" := InvPostingBuffer[1]."VAT Amount";
                    GenJnlLine."Source Curr. VAT Amount" := InvPostingBuffer[1]."VAT Amount (ACY)";
                    GenJnlLine."VAT Difference" := InvPostingBuffer[1]."VAT Difference";
                    GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                    GenJnlLine."Job No." := InvPostingBuffer[1]."Job No.";
                    GenJnlLine."Shortcut Dimension 1 Code" := InvPostingBuffer[1]."Global Dimension 1 Code";
                    GenJnlLine."Shortcut Dimension 2 Code" := InvPostingBuffer[1]."Global Dimension 2 Code";
                    GenJnlLine."Dimension Set ID" := InvPostingBuffer[1]."Dimension Set ID";
                    GenJnlLine."Source Code" := SrcCode;
                    GenJnlLine."EU 3-Party Trade" := "EU 3-Party Trade";
                    GenJnlLine."Sell-to/Buy-from No." := "Sell-to Customer No.";
                    GenJnlLine."Bill-to/Pay-to No." := "Bill-to Customer No.";
                    GenJnlLine."Country/Region Code" := "VAT Country/Region Code";
                    GenJnlLine."VAT Registration No." := "VAT Registration No.";
                    GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
                    GenJnlLine."Source No." := "Bill-to Customer No.";
                    GenJnlLine."Posting No. Series" := "Posting No. Series";
                    GenJnlLine."Ship-to/Order Address Code" := "Ship-to Code";
                    IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
                      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"Fixed Asset";
                      GenJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type"::Disposal;
                      GenJnlLine."FA Posting Date" := InvPostingBuffer[1]."FA Posting Date";
                      GenJnlLine."Depreciation Book Code" := InvPostingBuffer[1]."Depreciation Book Code";
                      GenJnlLine."Depr. until FA Posting Date" := InvPostingBuffer[1]."Depr. until FA Posting Date";
                      GenJnlLine."Duplicate in Depreciation Book" := InvPostingBuffer[1]."Duplicate in Depreciation Book";
                      GenJnlLine."Use Duplication List" := InvPostingBuffer[1]."Use Duplication List";
                    END;
                    GenJnlLine."Deferral Code" := InvPostingBuffer[1]."Deferral Code";
                    GenJnlLine."Deferral Line No." := InvPostingBuffer[1]."Deferral Line No.";
                    GenJnlLine."IC Partner Code" := "Sell-to IC Partner Code";
                    GLEntryNo := RunGenJnlPostLine(GenJnlLine);
                    GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                    GenJnlLine.VALIDATE("FA Posting Type",GenJnlLine."FA Posting Type"::" ");

                    IF (InvPostingBuffer[1]."Job No." <> '') AND (InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"G/L Account") THEN
                      JobPostLine.SetGLEntryNoOnJobLedgerEntry(InvPostingBuffer[1],"Posting Date",GenJnlLineDocNo,GLEntryNo);

                  UNTIL InvPostingBuffer[1].NEXT(-1) = 0;

                InvPostingBuffer[1].DELETEALL;

                // Post customer entry
                IF GUIALLOWED THEN  //DOC EC2016.1.1
                Window.UPDATE(4,1);
                PostCustomerEntry(
                  SalesHeader,TotalSalesLine,TotalSalesLineLCY,
                  GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode);

                UpdateSalesHeader(CustLedgEntry);

                // Balancing account
                IF "Bal. Account No." <> '' THEN BEGIN
                  IF GUIALLOWED THEN  //DOC EC2016.1.1
                  Window.UPDATE(5,1);
                  IF NOT IsOnlinePayment(SalesHeader) THEN
                    PostBalanceEntry(
                      0,SalesHeader,TotalSalesLine,TotalSalesLineLCY,
                      GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode);
                END;
              END;

              IF ICGenJnlLineNo > 0 THEN
                PostICGenJnl;

              IF PreviewMode THEN BEGIN
                Window.CLOSE;
                GenJnlPostPreview.Finish;
                ERROR(GenJnlPostPreview.GetPreviewModeErrMessage);
              END;
              MakeInventoryAdjustment;

              IF Ship THEN BEGIN
                "Last Shipping No." := "Shipping No.";
                "Shipping No." := '';
              END;
              IF Invoice THEN BEGIN
                "Last Posting No." := "Posting No.";
                "Posting No." := '';
              END;
              IF Receive THEN BEGIN
                "Last Return Receipt No." := "Return Receipt No.";
                "Return Receipt No." := '';
              END;

              IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
                 (NOT EverythingInvoiced)
              THEN BEGIN
                MODIFY;
                // Insert T336 records
                InsertTrackingSpecification;

                IF SalesLine.FINDSET THEN
                  REPEAT
                    IF SalesLine.Quantity <> 0 THEN BEGIN
                      IF Ship THEN BEGIN
                        SalesLine."Quantity Shipped" :=
                          SalesLine."Quantity Shipped" +
                          SalesLine."Qty. to Ship";
                        //DOC OP9031 RK 25/01/17 -
                        IF SalesLine."Quantity Shipped" <> 0 THEN
                          SalesLine."Line Status" := SalesLine."Line Status"::Shipped;
                        //DOC OP9031 RK 25/01/17 +
                        SalesLine."Qty. Shipped (Base)" :=
                          SalesLine."Qty. Shipped (Base)" +
                          SalesLine."Qty. to Ship (Base)";
                      END;
                      IF Receive THEN BEGIN
                        SalesLine."Return Qty. Received" :=
                          SalesLine."Return Qty. Received" + SalesLine."Return Qty. to Receive";
                        SalesLine."Return Qty. Received (Base)" :=
                          SalesLine."Return Qty. Received (Base)" +
                          SalesLine."Return Qty. to Receive (Base)";
                      END;
                      IF Invoice THEN BEGIN
                        IF "Document Type" = "Document Type"::Order THEN BEGIN
                          IF ABS(SalesLine."Quantity Invoiced" + SalesLine."Qty. to Invoice") >
                             ABS(SalesLine."Quantity Shipped")
                          THEN BEGIN
                            SalesLine.VALIDATE("Qty. to Invoice",
                              SalesLine."Quantity Shipped" - SalesLine."Quantity Invoiced");
                            SalesLine."Qty. to Invoice (Base)" :=
                              SalesLine."Qty. Shipped (Base)" - SalesLine."Qty. Invoiced (Base)";
                          END;
                        END ELSE
                          IF ABS(SalesLine."Quantity Invoiced" + SalesLine."Qty. to Invoice") >
                             ABS(SalesLine."Return Qty. Received")
                          THEN BEGIN
                            SalesLine.VALIDATE("Qty. to Invoice",
                              SalesLine."Return Qty. Received" - SalesLine."Quantity Invoiced");
                            SalesLine."Qty. to Invoice (Base)" :=
                              SalesLine."Return Qty. Received (Base)" - SalesLine."Qty. Invoiced (Base)";
                          END;

                        SalesLine."Quantity Invoiced" := SalesLine."Quantity Invoiced" + SalesLine."Qty. to Invoice";
                        SalesLine."Qty. Invoiced (Base)" := SalesLine."Qty. Invoiced (Base)" + SalesLine."Qty. to Invoice (Base)";
                        IF SalesLine."Qty. to Invoice" <> 0 THEN BEGIN
                          SalesLine."Prepmt Amt Deducted" :=
                            SalesLine."Prepmt Amt Deducted" + SalesLine."Prepmt Amt to Deduct";
                          SalesLine."Prepmt VAT Diff. Deducted" :=
                            SalesLine."Prepmt VAT Diff. Deducted" + SalesLine."Prepmt VAT Diff. to Deduct";
                          DecrementPrepmtAmtInvLCY(
                            SalesLine,SalesLine."Prepmt. Amount Inv. (LCY)",SalesLine."Prepmt. VAT Amount Inv. (LCY)");
                          SalesLine."Prepmt Amt to Deduct" :=
                            SalesLine."Prepmt. Amt. Inv." - SalesLine."Prepmt Amt Deducted";
                          SalesLine."Prepmt VAT Diff. to Deduct" := 0;
                        END;
                      END;

                      UpdateBlanketOrderLine(SalesLine,Ship,Receive,Invoice);
                      SalesLine.InitOutstanding;
                      CheckATOLink(SalesLine);
                      IF WhseHandlingRequired OR (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Blank)
                      THEN BEGIN
                        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
                          SalesLine."Return Qty. to Receive" := 0;
                          SalesLine."Return Qty. to Receive (Base)" := 0;
                        END ELSE BEGIN
                          SalesLine."Qty. to Ship" := 0;
                          SalesLine."Qty. to Ship (Base)" := 0;
                        END;
                        SalesLine.InitQtyToInvoice;
                      END ELSE BEGIN
                        IF "Document Type" = "Document Type"::"Return Order" THEN
                          SalesLine.InitQtyToReceive
                        ELSE
                          SalesLine.InitQtyToShip2;
                      END;

                      IF (SalesLine."Purch. Order Line No." <> 0) AND
                         (SalesLine.Quantity = SalesLine."Quantity Invoiced")
                      THEN
                        UpdateAssocLines(SalesLine);
                      SalesLine.SetDefaultQuantity;
                      SalesLine.MODIFY;
                    END;
                  UNTIL SalesLine.NEXT = 0;

                UpdateAssocOrder;

                IF WhseReceive THEN BEGIN
                  WhsePostRcpt.PostUpdateWhseDocuments(WhseRcptHeader);
                  TempWhseRcptHeader.DELETE;
                END;
                IF WhseShip THEN BEGIN
                  WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
                  TempWhseShptHeader.DELETE;
                END;

                WhseSalesRelease.Release(SalesHeader);
                UpdateItemChargeAssgnt;
              END ELSE BEGIN
                CASE "Document Type" OF
                  "Document Type"::Invoice:
                    BEGIN
                      SalesLine.SETFILTER("Shipment No.",'<>%1','');
                      IF SalesLine.FINDSET THEN
                        REPEAT
                          IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                            SalesShptLine.GET(SalesLine."Shipment No.",SalesLine."Shipment Line No.");
                            TempSalesLine.GET(
                              TempSalesLine."Document Type"::Order,
                              SalesShptLine."Order No.",SalesShptLine."Order Line No.");
                            IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN
                              UpdateSalesOrderChargeAssgnt(SalesLine,TempSalesLine);
                            TempSalesLine."Quantity Invoiced" :=
                              TempSalesLine."Quantity Invoiced" + SalesLine."Qty. to Invoice";
                            TempSalesLine."Qty. Invoiced (Base)" :=
                              TempSalesLine."Qty. Invoiced (Base)" + SalesLine."Qty. to Invoice (Base)";
                            IF ABS(TempSalesLine."Quantity Invoiced") > ABS(TempSalesLine."Quantity Shipped") THEN
                              ERROR(
                                Text014,
                                TempSalesLine."Document No.");
                            TempSalesLine.InitQtyToInvoice;
                            IF TempSalesLine."Prepayment %" <> 0 THEN BEGIN
                              TempSalesLine."Prepmt Amt Deducted" := TempSalesLine."Prepmt Amt Deducted" + SalesLine."Prepmt Amt to Deduct";
                              TempSalesLine."Prepmt VAT Diff. Deducted" :=
                                TempSalesLine."Prepmt VAT Diff. Deducted" + SalesLine."Prepmt VAT Diff. to Deduct";
                              DecrementPrepmtAmtInvLCY(
                                SalesLine,TempSalesLine."Prepmt. Amount Inv. (LCY)",TempSalesLine."Prepmt. VAT Amount Inv. (LCY)");
                              TempSalesLine."Prepmt Amt to Deduct" :=
                                TempSalesLine."Prepmt. Amt. Inv." - TempSalesLine."Prepmt Amt Deducted";
                              TempSalesLine."Prepmt VAT Diff. to Deduct" := 0;
                            END;
                            TempSalesLine.InitOutstanding;
                            IF (TempSalesLine."Purch. Order Line No." <> 0) AND
                               (TempSalesLine.Quantity = TempSalesLine."Quantity Invoiced")
                            THEN
                              UpdateAssocLines(TempSalesLine);
                            TempSalesLine.MODIFY;
                          END;
                        UNTIL SalesLine.NEXT = 0;
                      InsertTrackingSpecification;

                      SalesLine.SETRANGE("Shipment No.");
                    END;
                  "Document Type"::"Credit Memo":
                    BEGIN
                      SalesLine.SETFILTER("Return Receipt No.",'<>%1','');
                      IF SalesLine.FINDSET THEN
                        REPEAT
                          IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                            ReturnRcptLine.GET(SalesLine."Return Receipt No.",SalesLine."Return Receipt Line No.");
                            TempSalesLine.GET(
                              TempSalesLine."Document Type"::"Return Order",
                              ReturnRcptLine."Return Order No.",ReturnRcptLine."Return Order Line No.");
                            IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN
                              UpdateSalesOrderChargeAssgnt(SalesLine,TempSalesLine);
                            TempSalesLine."Quantity Invoiced" :=
                              TempSalesLine."Quantity Invoiced" + SalesLine."Qty. to Invoice";
                            TempSalesLine."Qty. Invoiced (Base)" :=
                              TempSalesLine."Qty. Invoiced (Base)" + SalesLine."Qty. to Invoice (Base)";
                            IF ABS(TempSalesLine."Quantity Invoiced") > ABS(TempSalesLine."Return Qty. Received") THEN
                              ERROR(
                                Text036,
                                TempSalesLine."Document No.");
                            TempSalesLine.InitQtyToInvoice;
                            TempSalesLine.InitOutstanding;
                            TempSalesLine.MODIFY;
                          END;
                        UNTIL SalesLine.NEXT = 0;
                      InsertTrackingSpecification;

                      SalesLine.SETRANGE("Return Receipt No.");
                    END;
                  ELSE BEGIN
                    UpdateAssocOrder;
                    IF DropShipOrder THEN
                      InsertTrackingSpecification;
                    IF SalesLine.FINDSET THEN
                      REPEAT
                        IF SalesLine."Purch. Order Line No." <> 0 THEN
                          UpdateAssocLines(SalesLine);
                        IF SalesLine."Prepayment %" <> 0 THEN
                          DecrementPrepmtAmtInvLCY(
                            SalesLine,SalesLine."Prepmt. Amount Inv. (LCY)",SalesLine."Prepmt. VAT Amount Inv. (LCY)");
                      UNTIL SalesLine.NEXT = 0;
                  END;
                END;

                SalesLine.SETFILTER("Qty. to Assemble to Order",'<>0');
                IF SalesLine.FINDSET THEN
                  REPEAT
                    FinalizePostATO(SalesLine);
                  UNTIL SalesLine.NEXT = 0;
                SalesLine.SETRANGE("Qty. to Assemble to Order");

                SalesLine.SETFILTER("Blanket Order Line No.",'<>0');
                IF SalesLine.FINDSET THEN
                  REPEAT
                    UpdateBlanketOrderLine(SalesLine,Ship,Receive,Invoice);
                  UNTIL SalesLine.NEXT = 0;
                SalesLine.SETRANGE("Blanket Order Line No.");

                IF WhseReceive THEN BEGIN
                  WhsePostRcpt.PostUpdateWhseDocuments(WhseRcptHeader);
                  TempWhseRcptHeader.DELETE;
                END;
                IF WhseShip THEN BEGIN
                  WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
                  TempWhseShptHeader.DELETE;
                END;

                ApprovalsMgmt.DeleteApprovalEntry(DATABASE::"Sales Header","Document Type","No.");

                IF HASLINKS THEN
                  DELETELINKS;

                StdTableTriggerCode.T36OnDelete(Rec); //DOC EC2013.3.70

                DELETE;
                ReserveSalesLine.DeleteInvoiceSpecFromHeader(SalesHeader);
                DeleteATOLinks(SalesHeader);
                IF SalesLine.FINDFIRST THEN
                  REPEAT
                    IF SalesLine."Deferral Code" <> '' THEN
                      DeferralUtilities.RemoveOrSetDeferralSchedule(
                        '',DeferralUtilities.GetSalesDeferralDocType,'','',
                        SalesLine."Document Type",
                        SalesLine."Document No.",
                        SalesLine."Line No.",0,0D,
                        SalesLine.Description,
                        '',
                        TRUE);
                    IF SalesLine.HASLINKS THEN
                      SalesLine.DELETELINKS;
                  UNTIL SalesLine.NEXT = 0;
                SalesLine.DELETEALL;
                DeleteItemChargeAssgnt;
                SalesCommentLine.SETRANGE("Document Type","Document Type");
                SalesCommentLine.SETRANGE("No.","No.");
                IF NOT SalesCommentLine.ISEMPTY THEN
                  SalesCommentLine.DELETEALL;
                DeleteWhseRqst(SalesHeader);
              END;

              InsertValueEntryRelation;
              IF NOT InvtPickPutaway THEN
                COMMIT;
              ClearPostBuffers;
              IF GUIALLOWED THEN  //DOC EC2016.1.1
              Window.CLOSE;
              IF Invoice AND ("Bill-to IC Partner Code" <> '') THEN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
                  ICInOutBoxMgt.CreateOutboxSalesInvTrans(SalesInvHeader)
                ELSE
                  ICInOutBoxMgt.CreateOutboxSalesCrMemoTrans(SalesCrMemoHeader);
            END;

            TransactionLogEntryNo := CaptureOrRefundCreditCardPmnt(CustLedgEntry);

            Rec := SalesHeader;
            SynchBOMSerialNo(TempServiceItem2,TempServiceItemComp2);
            IF NOT InvtPickPutaway THEN BEGIN
              COMMIT;
              UpdateAnalysisView.UpdateAll(0,TRUE);
              UpdateItemAnalysisView.UpdateAll(0,TRUE);
            END;

            // Balancing account - online payment
            IF ("Bal. Account No." <> '') AND IsOnlinePayment(SalesHeader) AND Invoice THEN
              PostBalanceEntry(
                TransactionLogEntryNo,SalesHeader,TotalSalesLine,TotalSalesLineLCY,
                GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode);

            CRMIntegrationManagement.AddPostedSalesDocumentToCRMAccountWall(SalesHeader);
            CRMIntegrationManagement.SetCRMSalesOrderStatusToInvoiced(SalesHeader);

            OnAfterPostSalesDoc(Rec,GenJnlPostLine,SalesShptHeader."No.",ReturnRcptHeader."No.",SalesInvHeader."No.",
              SalesCrMemoHeader."No.");
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=There is nothing to post.;ENG=There is nothing to post.';
      Text002@1001 : TextConst 'ENU=Posting lines              #2######\;ENG=Posting lines              #2######\';
      Text003@1002 : TextConst 'ENU=Posting sales and VAT      #3######\;ENG=Posting sales and VAT      #3######\';
      Text004@1003 : TextConst 'ENU=Posting to customers       #4######\;ENG=Posting to customers       #4######\';
      Text005@1004 : TextConst 'ENU=Posting to bal. account    #5######;ENG=Posting to bal. account    #5######';
      Text006@1005 : TextConst 'ENU=Posting lines              #2######;ENG=Posting lines              #2######';
      Text007@1006 : TextConst 'ENU=%1 %2 -> Invoice %3;ENG=%1 %2 -> Invoice %3';
      Text008@1007 : TextConst 'ENU=%1 %2 -> Credit Memo %3;ENG=%1 %2 -> Credit Memo %3';
      Text009@1008 : TextConst 'ENU="You cannot ship sales order line %1. ";ENG="You cannot ship sales order line %1. "';
      Text010@1009 : TextConst 'ENU=The line is marked as a drop shipment and is not yet associated with a purchase order.;ENG=The line is marked as a drop shipment and is not yet associated with a purchase order.';
      Text011@1010 : TextConst 'ENU=must have the same sign as the shipment;ENG=must have the same sign as the shipment';
      Text013@1011 : TextConst 'ENU=The shipment lines have been deleted.;ENG=The shipment lines have been deleted.';
      Text014@1012 : TextConst 'ENU=You cannot invoice more than you have shipped for order %1.;ENG=You cannot invoice more than you have shipped for order %1.';
      Text016@1013 : TextConst 'ENU=VAT Amount;ENG=VAT Amount';
      Text017@1014 : TextConst 'ENU=%1% VAT;ENG=%1% VAT';
      Text018@1015 : TextConst 'ENU=in the associated blanket order must not be greater than %1;ENG=in the associated blanket order must not be greater than %1';
      Text019@1016 : TextConst 'ENU=in the associated blanket order must not be reduced.;ENG=in the associated blanket order must not be reduced.';
      Text020@1017 : TextConst 'ENU=Please enter "Yes" in %1 and/or %2 and/or %3.;ENG=Please enter "Yes" in %1 and/or %2 and/or %3.';
      Text021@1018 : TextConst 'ENU="Warehouse handling is required for %1 = %2, %3 = %4, %5 = %6.";ENG="Warehouse handling is required for %1 = %2, %3 = %4, %5 = %6."';
      Text024@1021 : TextConst 'ENU=must have the same sign as the return receipt;ENG=must have the same sign as the return receipt';
      Text025@1022 : TextConst 'ENU=Line %1 of the return receipt %2, which you are attempting to invoice, has already been invoiced.;ENG=Line %1 of the return receipt %2, which you are attempting to invoice, has already been invoiced.';
      Text026@1023 : TextConst 'ENU=Line %1 of the shipment %2, which you are attempting to invoice, has already been invoiced.;ENG=Line %1 of the shipment %2, which you are attempting to invoice, has already been invoiced.';
      Text027@1024 : TextConst 'ENU=The quantity you are attempting to invoice is greater than the quantity in shipment %1.;ENG=The quantity you are attempting to invoice is greater than the quantity in shipment %1.';
      Text028@1025 : TextConst 'ENU=The combination of dimensions used in %1 %2 is blocked. %3;ENG=The combination of dimensions used in %1 %2 is blocked. %3';
      Text029@1026 : TextConst 'ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked. %4;ENG=The combination of dimensions used in %1 %2, line no. %3 is blocked. %4';
      Text030@1027 : TextConst 'ENU=The dimensions used in %1 %2 are invalid. %3;ENG=The dimensions used in %1 %2 are invalid. %3';
      Text031@1028 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. %4;ENG=The dimensions used in %1 %2, line no. %3 are invalid. %4';
      Text032@1029 : TextConst 'ENU="You cannot assign more than %1 units in %2 = %3, %4 = %5,%6 = %7.";ENG="You cannot assign more than %1 units in %2 = %3, %4 = %5,%6 = %7."';
      Text033@1030 : TextConst 'ENU=You must assign all item charges, if you invoice everything.;ENG=You must assign all item charges, if you invoice everything.';
      Item@1164 : Record 27;
      SalesSetup@1032 : Record 311;
      GLSetup@1033 : Record 98;
      GLEntry@1034 : Record 17;
      SalesHeader@1035 : Record 36;
      SalesLine@1036 : Record 37;
      TempSalesLine@1038 : Record 37;
      SalesLineACY@1039 : Record 37;
      TotalSalesLine@1040 : Record 37;
      TotalSalesLineLCY@1041 : Record 37;
      TempPrepaymentSalesLine@1170 : TEMPORARY Record 37;
      SalesShptHeader@1043 : Record 110;
      SalesInvHeader@1045 : Record 112;
      SalesCrMemoHeader@1047 : Record 114;
      ReturnRcptHeader@1049 : Record 6660;
      PurchOrderHeader@1051 : Record 38;
      PurchOrderLine@1052 : Record 39;
      PurchRcptHeader@1053 : Record 120;
      PurchRcptLine@1054 : Record 121;
      ItemChargeAssgntSales@1042 : Record 5809;
      TempItemChargeAssgntSales@1037 : TEMPORARY Record 5809;
      GenJnlLine@1056 : Record 81;
      ItemJnlLine@1057 : Record 83;
      SourceCodeSetup@1061 : Record 242;
      SourceCode@1062 : Record 230;
      Currency@1068 : Record 4;
      InvPostingBuffer@1069 : ARRAY [2] OF TEMPORARY Record 49;
      DropShipPostBuffer@1070 : TEMPORARY Record 223;
      WhseRcptHeader@1019 : Record 7316;
      TempWhseRcptHeader@1145 : TEMPORARY Record 7316;
      WhseShptHeader@1148 : Record 7320;
      TempWhseShptHeader@1149 : TEMPORARY Record 7320;
      PostedWhseRcptHeader@1142 : Record 7318;
      PostedWhseRcptLine@1146 : Record 7319;
      PostedWhseShptHeader@1150 : Record 7322;
      PostedWhseShptLine@1151 : Record 7323;
      Location@1080 : Record 14;
      TempHandlingSpecification@1088 : TEMPORARY Record 336;
      TempTrackingSpecification@1139 : TEMPORARY Record 336;
      TempTrackingSpecificationInv@1160 : TEMPORARY Record 336;
      TempWhseSplitSpecification@1190 : TEMPORARY Record 336;
      TempValueEntryRelation@1140 : TEMPORARY Record 6508;
      JobTaskSalesLine@1167 : Record 37;
      TempICGenJnlLine@2165 : TEMPORARY Record 81;
      TempPrepmtDeductLCYSalesLine@1134 : TEMPORARY Record 37;
      TempSKU@1175 : TEMPORARY Record 5700;
      TotalDeferralHeader@1063 : Record 1701;
      DeferralPostBuffer@1046 : ARRAY [2] OF Record 1703;
      TempDeferralHeader@1209 : TEMPORARY Record 1701;
      TempDeferralLine@1235 : TEMPORARY Record 1702;
      GenJnlPostLine@1082 : Codeunit 12;
      ResJnlPostLine@1083 : Codeunit 212;
      ItemJnlPostLine@1085 : Codeunit 22;
      ReserveSalesLine@1086 : Codeunit 99000832;
      ApprovalsMgmt@1165 : Codeunit 1535;
      WhseSalesRelease@1093 : Codeunit 5771;
      ItemTrackingMgt@1196 : Codeunit 6500;
      WMSMgmt@1144 : Codeunit 7302;
      WhseJnlPostLine@1141 : Codeunit 7301;
      WhsePostRcpt@1152 : Codeunit 5760;
      WhsePostShpt@1153 : Codeunit 5763;
      PurchPost@1159 : Codeunit 90;
      CostCalcMgt@1163 : Codeunit 5836;
      JobPostLine@1166 : Codeunit 1001;
      ServItemMgt@1055 : Codeunit 5920;
      AsmPost@1067 : Codeunit 900;
      GenJnlPostPreview@1044 : Codeunit 19;
      DeferralUtilities@1048 : Codeunit 1720;
      Window@1097 : Dialog;
      PostingDate@1098 : Date;
      UseDate@1099 : Date;
      GenJnlLineDocNo@1101 : Code[20];
      GenJnlLineExtDocNo@1102 : Code[35];
      SrcCode@1103 : Code[10];
      GenJnlLineDocType@1104 : Integer;
      ItemLedgShptEntryNo@1106 : Integer;
      FALineNo@1108 : Integer;
      RoundingLineNo@1109 : Integer;
      DeferralLineNo@1050 : Integer;
      InvDefLineNo@1058 : Integer;
      RemQtyToBeInvoiced@1111 : Decimal;
      RemQtyToBeInvoicedBase@1112 : Decimal;
      QtyToBeInvoiced@1113 : Decimal;
      QtyToBeInvoicedBase@1114 : Decimal;
      RemAmt@1136 : Decimal;
      RemDiscAmt@1137 : Decimal;
      LastLineRetrieved@1116 : Boolean;
      RoundingLineInserted@1117 : Boolean;
      DropShipOrder@1119 : Boolean;
      PostingDateExists@1120 : Boolean;
      ReplacePostingDate@1121 : Boolean;
      ReplaceDocumentDate@1122 : Boolean;
      Text034@1127 : TextConst 'ENU="You cannot assign item charges to the %1 %2 = %3,%4 = %5, %6 = %7, because it has been invoiced.";ENG="You cannot assign item charges to the %1 %2 = %3,%4 = %5, %6 = %7, because it has been invoiced."';
      Text036@1094 : TextConst 'ENU=You cannot invoice more than you have received for return order %1.;ENG=You cannot invoice more than you have received for return order %1.';
      Text037@1095 : TextConst 'ENU=The return receipt lines have been deleted.;ENG=The return receipt lines have been deleted.';
      Text038@1130 : TextConst 'ENU=The quantity you are attempting to invoice is greater than the quantity in return receipt %1.;ENG=The quantity you are attempting to invoice is greater than the quantity in return receipt %1.';
      ItemChargeAssgntOnly@1138 : Boolean;
      ItemJnlRollRndg@1135 : Boolean;
      Text040@1129 : TextConst 'ENU=Related item ledger entries cannot be found.;ENG=Related item ledger entries cannot be found.';
      Text043@1147 : TextConst 'ENU=Item Tracking is signed wrongly.;ENG=Item Tracking is signed wrongly.';
      Text044@1143 : TextConst 'ENU=Item Tracking does not match.;ENG=Item Tracking does not match.';
      WhseShip@1110 : Boolean;
      WhseReceive@1154 : Boolean;
      InvtPickPutaway@1155 : Boolean;
      Text045@1157 : TextConst 'ENU=is not within your range of allowed posting dates.;ENG=is not within your range of allowed posting dates.';
      Text046@1066 : TextConst 'ENU=The %1 does not match the quantity defined in item tracking.;ENG=The %1 does not match the quantity defined in item tracking.';
      Text047@1084 : TextConst 'ENU=cannot be more than %1.;ENG=cannot be more than %1.';
      Text048@1105 : TextConst 'ENU=must be at least %1.;ENG=must be at least %1.';
      JobContractLine@1172 : Boolean;
      GLSetupRead@1133 : Boolean;
      ItemTrkgAlreadyOverruled@1059 : Boolean;
      Text050@1076 : TextConst 'ENU=The total %1 cannot be more than %2.;ENG=The total %1 cannot be more than %2.';
      Text051@1091 : TextConst 'ENU=The total %1 must be at least %2.;ENG=The total %1 must be at least %2.';
      Text052@1102601000 : TextConst 'ENU=You must assign item charge %1 if you want to invoice it.;ENG=You must assign item charge %1 if you want to invoice it.';
      Text053@1102601001 : TextConst 'ENU=You can not invoice item charge %1 because there is no item ledger entry to assign it to.;ENG=You can not invoice item charge %1 because there is no item ledger entry to assign it to.';
      SalesLinesProcessed@1072 : Boolean;
      Text055@1073 : TextConst 'ENU=#1#################################\\Checking Assembly #2###########;ENG=#1#################################\\Checking Assembly #2###########';
      Text056@1090 : TextConst 'ENU=#1#################################\\Posting Assembly #2###########;ENG=#1#################################\\Posting Assembly #2###########';
      Text057@1168 : TextConst 'ENU=#1#################################\\Finalizing Assembly #2###########;ENG=#1#################################\\Finalising Assembly #2###########';
      Text059@1173 : TextConst '@@@="%1 = SalesLine.""Document Type"". %2 = SalesLine.""Document No."". %3 = SalesLine.FIELDCAPTION(""Line No.""). %4 = SalesLine.""Line No."". This is used in a progress window.";ENU=%1 %2 %3 %4;ENG=%1 %2 %3 %4';
      Text060@1174 : TextConst '@@@="%1 = ""Document Type"". %2 = AsmHeader.""No."". Used in a progress window.";ENU=%1 %2;ENG=%1 %2';
      ReverseChargeApplies@10410090 : Boolean;
      Text061Err@1171 : TextConst 'ENU=The order line that the item charge was originally assigned to has been fully posted. You must reassign the item charge to the posted receipt or shipment.;ENG=The order line that the item charge was originally assigned to has been fully posted. You must reassign the item charge to the posted receipt or shipment.';
      Text062Qst@1132 : TextConst '@@@="One or more reservation entries exist for the item with No. = 1000, Location Code = SILVER, Variant Code = NEW which may be disrupted if you post this negative adjustment. Do you want to continue?";ENU="One or more reservation entries exist for the item with %1 = %2, %3 = %4, %5 = %6 which may be disrupted if you post this negative adjustment. Do you want to continue?";ENG="One or more reservation entries exist for the item with %1 = %2, %3 = %4, %5 = %6 which may be disrupted if you post this negative adjustment. Do you want to continue?"';
      NotSupportedDocumentTypeErr@1020 : TextConst 'ENU=Document type %1 is not supported.;ENG=Document type %1 is not supported.';
      PreviewMode@1031 : Boolean;
      NoDeferralScheduleErr@1064 : TextConst '@@@="%1=The item number of the sales transaction line, %2=The Deferral Template Code";ENU=You must create a deferral schedule because you have specified the deferral code %2 in line %1.;ENG=You must create a deferral schedule because you have specified the deferral code %2 in line %1.';
      ZeroDeferralAmtErr@1060 : TextConst '@@@="%1=The item number of the sales transaction line, %2=The Deferral Template Code";ENU=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.;ENG=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.';
      FakeDocNoTxt@1071 : TextConst 'ENU=***;ENG=***';
      CannotPostDiscountDeferralErr@1074 : TextConst '@@@=@1 - Line No., %2 - Line/Inv. Discount Amount field name.;ENU=You cannot post line %1 because it contains a deferral code and a %2.;ENG=You cannot post line %1 because it contains a deferral code and a %2.';
      xxMQ@1000000006 : Integer;
      StdTableTriggerCode@1000000002 : Codeunit 9021668;
      InternetSetup@1000000000 : Record 9021609;

    PROCEDURE SetPostingDate@1(NewReplacePostingDate@1000 : Boolean;NewReplaceDocumentDate@1001 : Boolean;NewPostingDate@1002 : Date);
    BEGIN
      PostingDateExists := TRUE;
      ReplacePostingDate := NewReplacePostingDate;
      ReplaceDocumentDate := NewReplaceDocumentDate;
      PostingDate := NewPostingDate;
    END;

    LOCAL PROCEDURE PostItemJnlLine@2(SalesLine@1000 : Record 37;QtyToBeShipped@1001 : Decimal;QtyToBeShippedBase@1002 : Decimal;QtyToBeInvoiced@1003 : Decimal;QtyToBeInvoicedBase@1004 : Decimal;ItemLedgShptEntryNo@1005 : Integer;ItemChargeNo@1006 : Code[20];TrackingSpecification@1009 : Record 336;IsATO@1007 : Boolean) : Integer;
    VAR
      ItemChargeSalesLine@1008 : Record 37;
      TempWhseJnlLine@1012 : TEMPORARY Record 7311;
      TempWhseJnlLine2@1010 : TEMPORARY Record 7311;
      OriginalItemJnlLine@1013 : Record 83;
      TempWhseTrackingSpecification@1016 : TEMPORARY Record 336;
      CurrExchRate@1015 : Record 330;
      PostWhseJnlLine@1011 : Boolean;
      CheckApplFromItemEntry@1014 : Boolean;
    BEGIN
      IF NOT ItemJnlRollRndg THEN BEGIN
        RemAmt := 0;
        RemDiscAmt := 0;
      END;
      WITH SalesLine DO BEGIN
        ItemJnlLine.INIT;
        ItemJnlLine."Posting Date" := SalesHeader."Posting Date";
        ItemJnlLine."Document Date" := SalesHeader."Document Date";
        ItemJnlLine."Source Posting Group" := SalesHeader."Customer Posting Group";
        ItemJnlLine."Salespers./Purch. Code" := SalesHeader."Salesperson Code";
        ItemJnlLine."Country/Region Code" := GetCountryCode(SalesLine,SalesHeader);
        ItemJnlLine."Reason Code" := SalesHeader."Reason Code";
        ItemJnlLine."Shipment Method Code" := SalesHeader."Shipment Method Code";
        ItemJnlLine."Item No." := "No.";
        ItemJnlLine.Description := Description;
        ItemJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ItemJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ItemJnlLine."Dimension Set ID" := "Dimension Set ID";
        ItemJnlLine."Location Code" := "Location Code";
        ItemJnlLine."Bin Code" := "Bin Code";
        ItemJnlLine."Variant Code" := "Variant Code";
        ItemJnlLine."Inventory Posting Group" := "Posting Group";
        ItemJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        ItemJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        IF IsATO THEN
          ItemJnlLine."Applies-to Entry" := FindOpenATOEntry('','')
        ELSE
          ItemJnlLine."Applies-to Entry" := "Appl.-to Item Entry";
        ItemJnlLine."Transaction Type" := "Transaction Type";
        ItemJnlLine."Transport Method" := "Transport Method";
        ItemJnlLine."Entry/Exit Point" := "Exit Point";
        ItemJnlLine.Area := Area;
        ItemJnlLine."Transaction Specification" := "Transaction Specification";
        ItemJnlLine."Drop Shipment" := "Drop Shipment";
        ItemJnlLine."Assemble to Order" := IsATO;
        ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Sale;
        ItemJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        ItemJnlLine."Derived from Blanket Order" := "Blanket Order No." <> '';
        ItemJnlLine."Cross-Reference No." := "Cross-Reference No.";
        ItemJnlLine."Originally Ordered No." := "Originally Ordered No.";
        ItemJnlLine."Originally Ordered Var. Code" := "Originally Ordered Var. Code";
        ItemJnlLine."Out-of-Stock Substitution" := "Out-of-Stock Substitution";
        ItemJnlLine."Item Category Code" := "Item Category Code";
        ItemJnlLine.Nonstock := Nonstock;
        ItemJnlLine."Purchasing Code" := "Purchasing Code";
        ItemJnlLine."Product Group Code" := "Product Group Code";
        ItemJnlLine."Return Reason Code" := "Return Reason Code";

        ItemJnlLine."Planned Delivery Date" := "Planned Delivery Date";
        ItemJnlLine."Order Date" := SalesHeader."Order Date";

        ItemJnlLine."Serial No." := TrackingSpecification."Serial No.";
        ItemJnlLine."Lot No." := TrackingSpecification."Lot No.";

        IF QtyToBeShipped = 0 THEN BEGIN
          IF IsCreditDocType THEN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Credit Memo"
          ELSE
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Invoice";
          ItemJnlLine."Document No." := GenJnlLineDocNo;
          ItemJnlLine."External Document No." := GenJnlLineExtDocNo;
          ItemJnlLine."Posting No. Series" := SalesHeader."Posting No. Series";
          IF QtyToBeInvoiced <> 0 THEN
            ItemJnlLine."Invoice No." := GenJnlLineDocNo;
        END ELSE BEGIN
          IF IsCreditDocType THEN BEGIN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Return Receipt";
            ItemJnlLine."Document No." := ReturnRcptHeader."No.";
            ItemJnlLine."External Document No." := ReturnRcptHeader."External Document No.";
            ItemJnlLine."Posting No. Series" := ReturnRcptHeader."No. Series";
          END ELSE BEGIN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Shipment";
            ItemJnlLine."Document No." := SalesShptHeader."No.";
            ItemJnlLine."External Document No." := SalesShptHeader."External Document No.";
            ItemJnlLine."Posting No. Series" := SalesShptHeader."No. Series";
          END;
          IF QtyToBeInvoiced <> 0 THEN BEGIN
            ItemJnlLine."Invoice No." := GenJnlLineDocNo;
            ItemJnlLine."External Document No." := GenJnlLineExtDocNo;
            IF ItemJnlLine."Document No." = '' THEN BEGIN
              IF "Document Type" = "Document Type"::"Credit Memo" THEN
                ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Credit Memo"
              ELSE
                ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Invoice";
              ItemJnlLine."Document No." := GenJnlLineDocNo;
            END;
            ItemJnlLine."Posting No. Series" := SalesHeader."Posting No. Series";
          END;
        END;

        ItemJnlLine."Document Line No." := "Line No.";
        ItemJnlLine.Quantity := -QtyToBeShipped;
        ItemJnlLine."Quantity (Base)" := -QtyToBeShippedBase;
        ItemJnlLine."Invoiced Quantity" := -QtyToBeInvoiced;
        ItemJnlLine."Invoiced Qty. (Base)" := -QtyToBeInvoicedBase;
        ItemJnlLine."Unit Cost" := "Unit Cost (LCY)";
        ItemJnlLine."Source Currency Code" := SalesHeader."Currency Code";
        ItemJnlLine."Unit Cost (ACY)" := "Unit Cost";
        ItemJnlLine."Value Entry Type" := ItemJnlLine."Value Entry Type"::"Direct Cost";

        IF ItemChargeNo <> '' THEN BEGIN
          ItemJnlLine."Item Charge No." := ItemChargeNo;
          "Qty. to Invoice" := QtyToBeInvoiced;
        END ELSE
          ItemJnlLine."Applies-from Entry" := "Appl.-from Item Entry";

        IF QtyToBeInvoiced <> 0 THEN BEGIN
          ItemJnlLine.Amount := -(Amount * (QtyToBeInvoiced / "Qty. to Invoice") - RemAmt);
          IF SalesHeader."Prices Including VAT" THEN
            ItemJnlLine."Discount Amount" :=
              -(("Line Discount Amount" + "Inv. Discount Amount") / (1 + "VAT %" / 100) *
                (QtyToBeInvoiced / "Qty. to Invoice") - RemDiscAmt)
          ELSE
            ItemJnlLine."Discount Amount" :=
              -(("Line Discount Amount" + "Inv. Discount Amount") * (QtyToBeInvoiced / "Qty. to Invoice") - RemDiscAmt);
          RemAmt := ItemJnlLine.Amount - ROUND(ItemJnlLine.Amount);
          RemDiscAmt := ItemJnlLine."Discount Amount" - ROUND(ItemJnlLine."Discount Amount");
          ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
          ItemJnlLine."Discount Amount" := ROUND(ItemJnlLine."Discount Amount");
        END ELSE BEGIN
          IF SalesHeader."Prices Including VAT" THEN
            ItemJnlLine.Amount :=
              -((QtyToBeShipped * "Unit Price" * (1 - "Line Discount %" / 100) / (1 + "VAT %" / 100)) - RemAmt)
          ELSE
            ItemJnlLine.Amount :=
              -((QtyToBeShipped * "Unit Price" * (1 - "Line Discount %" / 100)) - RemAmt);
          RemAmt := ItemJnlLine.Amount - ROUND(ItemJnlLine.Amount);
          IF SalesHeader."Currency Code" <> '' THEN
            ItemJnlLine.Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  SalesHeader."Posting Date",SalesHeader."Currency Code",
                  ItemJnlLine.Amount,SalesHeader."Currency Factor"))
          ELSE
            ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
        END;

        ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Customer;
        ItemJnlLine."Source No." := "Sell-to Customer No.";
        ItemJnlLine."Invoice-to Source No." := "Bill-to Customer No.";
        ItemJnlLine."Source Code" := SrcCode;
        ItemJnlLine."Item Shpt. Entry No." := ItemLedgShptEntryNo;

        UpdateItemJnlLinenSembleFields(SalesLine); //DOC NS2016.16

        IF NOT JobContractLine THEN BEGIN
          IF SalesSetup."Exact Cost Reversing Mandatory" AND (Type = Type::Item) THEN
            IF IsCreditDocType THEN
              CheckApplFromItemEntry := Quantity > 0
            ELSE
              CheckApplFromItemEntry := Quantity < 0;

          IF ("Location Code" <> '') AND (Type = Type::Item) AND (ItemJnlLine.Quantity <> 0) THEN
            IF ShouldPostWhseJnlLine(SalesLine) THEN BEGIN
              CreateWhseJnlLine(ItemJnlLine,SalesLine,TempWhseJnlLine);
              PostWhseJnlLine := TRUE;
            END;

          IF QtyToBeShippedBase <> 0 THEN BEGIN
            IF IsCreditDocType THEN
              ReserveSalesLine.TransferSalesLineToItemJnlLine(SalesLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,FALSE)
            ELSE
              TransferReservToItemJnlLine(
                SalesLine,ItemJnlLine,-QtyToBeShippedBase,TempTrackingSpecification,CheckApplFromItemEntry);

            IF CheckApplFromItemEntry AND (NOT IsServiceItem) THEN
              TESTFIELD("Appl.-from Item Entry");
          END;

          OriginalItemJnlLine := ItemJnlLine;
          ItemJnlPostLine.RunWithCheck(ItemJnlLine);
          IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification) THEN
            IF TempHandlingSpecification.FINDSET THEN
              REPEAT
                TempTrackingSpecification := TempHandlingSpecification;
                TempTrackingSpecification."Source Type" := DATABASE::"Sales Line";
                TempTrackingSpecification."Source Subtype" := "Document Type";
                TempTrackingSpecification."Source ID" := "Document No.";
                TempTrackingSpecification."Source Batch Name" := '';
                TempTrackingSpecification."Source Prod. Order Line" := 0;
                TempTrackingSpecification."Source Ref. No." := "Line No.";
                IF TempTrackingSpecification.INSERT THEN;
                IF QtyToBeInvoiced <> 0 THEN BEGIN
                  TempTrackingSpecificationInv := TempTrackingSpecification;
                  IF TempTrackingSpecificationInv.INSERT THEN;
                END;
                IF PostWhseJnlLine THEN BEGIN
                  TempWhseTrackingSpecification := TempTrackingSpecification;
                  IF TempWhseTrackingSpecification.INSERT THEN;
                END;
              UNTIL TempHandlingSpecification.NEXT = 0;
          IF PostWhseJnlLine THEN BEGIN
            ItemTrackingMgt.SplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2,TempWhseTrackingSpecification,FALSE);
            IF TempWhseJnlLine2.FINDSET THEN
              REPEAT
                WhseJnlPostLine.RUN(TempWhseJnlLine2);
              UNTIL TempWhseJnlLine2.NEXT = 0;
            TempWhseTrackingSpecification.DELETEALL;
          END;

          IF (Type = Type::Item) AND SalesHeader.Invoice THEN BEGIN
            ClearItemChargeAssgntFilter;
            TempItemChargeAssgntSales.SETCURRENTKEY(
              "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
            TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type","Document Type");
            TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.","Document No.");
            TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.","Line No.");
            IF TempItemChargeAssgntSales.FINDSET THEN
              REPEAT
                TESTFIELD("Allow Item Charge Assignment");
                GetItemChargeLine(ItemChargeSalesLine);
                ItemChargeSalesLine.CALCFIELDS("Qty. Assigned");
                IF (ItemChargeSalesLine."Qty. to Invoice" <> 0) OR
                   (ABS(ItemChargeSalesLine."Qty. Assigned") < ABS(ItemChargeSalesLine."Quantity Invoiced"))
                THEN BEGIN
                  OriginalItemJnlLine."Item Shpt. Entry No." := ItemJnlLine."Item Shpt. Entry No.";
                  PostItemChargePerOrder(OriginalItemJnlLine,ItemChargeSalesLine);
                  TempItemChargeAssgntSales.MARK(TRUE);
                END;
              UNTIL TempItemChargeAssgntSales.NEXT = 0;
          END;
        END;
      END;

      EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE ShouldPostWhseJnlLine@73(SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      WITH SalesLine DO BEGIN
        GetLocation("Location Code");
        IF (("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
            Location."Directed Put-away and Pick") OR
           (Location."Bin Mandatory" AND NOT (WhseShip OR WhseReceive OR InvtPickPutaway OR "Drop Shipment"))
        THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostItemChargePerOrder@5801(ItemJnlLine2@1001 : Record 83;ItemChargeSalesLine@1002 : Record 37);
    VAR
      NonDistrItemJnlLine@1000 : Record 83;
      CurrExchRate@1003 : Record 330;
      QtyToInvoice@1004 : Decimal;
      Factor@1005 : Decimal;
      OriginalAmt@1007 : Decimal;
      OriginalDiscountAmt@1009 : Decimal;
      OriginalQty@1010 : Decimal;
      SignFactor@1006 : Integer;
      TotalChargeAmt2@1008 : Decimal;
      TotalChargeAmtLCY2@1011 : Decimal;
    BEGIN
      WITH TempItemChargeAssgntSales DO BEGIN
        SalesLine.TESTFIELD("Job No.",'');
        SalesLine.TESTFIELD("Allow Item Charge Assignment",TRUE);
        ItemJnlLine2."Document No." := GenJnlLineDocNo;
        ItemJnlLine2."External Document No." := GenJnlLineExtDocNo;
        ItemJnlLine2."Item Charge No." := "Item Charge No.";
        ItemJnlLine2.Description := ItemChargeSalesLine.Description;
        ItemJnlLine2."Unit of Measure Code" := '';
        ItemJnlLine2."Qty. per Unit of Measure" := 1;
        ItemJnlLine2."Applies-from Entry" := 0;
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          QtyToInvoice :=
            CalcQtyToInvoice(SalesLine."Return Qty. to Receive (Base)",SalesLine."Qty. to Invoice (Base)")
        ELSE
          QtyToInvoice :=
            CalcQtyToInvoice(SalesLine."Qty. to Ship (Base)",SalesLine."Qty. to Invoice (Base)");
        IF ItemJnlLine2."Invoiced Quantity" = 0 THEN BEGIN
          ItemJnlLine2."Invoiced Quantity" := ItemJnlLine2.Quantity;
          ItemJnlLine2."Invoiced Qty. (Base)" := ItemJnlLine2."Quantity (Base)";
        END;
        ItemJnlLine2."Document Line No." := ItemChargeSalesLine."Line No.";

        ItemJnlLine2.Amount := "Amount to Assign" * ItemJnlLine2."Invoiced Qty. (Base)" / QtyToInvoice;
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          ItemJnlLine2.Amount := -ItemJnlLine2.Amount;
        ItemJnlLine2."Unit Cost (ACY)" :=
          ROUND(ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
            Currency."Unit-Amount Rounding Precision");

        TotalChargeAmt2 := TotalChargeAmt2 + ItemJnlLine2.Amount;
        IF SalesHeader."Currency Code" <> '' THEN BEGIN
          ItemJnlLine2.Amount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              UseDate,SalesHeader."Currency Code",TotalChargeAmt2 + TotalSalesLine.Amount,SalesHeader."Currency Factor") -
            TotalChargeAmtLCY2 - TotalSalesLineLCY.Amount;
        END ELSE
          ItemJnlLine2.Amount := TotalChargeAmt2 - TotalChargeAmtLCY2;

        ItemJnlLine2.Amount := ROUND(ItemJnlLine2.Amount);
        TotalChargeAmtLCY2 := TotalChargeAmtLCY2 + ItemJnlLine2.Amount;
        ItemJnlLine2."Unit Cost" := ROUND(
            ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",GLSetup."Unit-Amount Rounding Precision");
        ItemJnlLine2."Applies-to Entry" := ItemJnlLine2."Item Shpt. Entry No.";

        IF SalesHeader."Currency Code" <> '' THEN
          ItemJnlLine2."Discount Amount" := ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                ItemChargeSalesLine."Inv. Discount Amount" * ItemJnlLine2."Invoiced Qty. (Base)" /
                ItemChargeSalesLine."Quantity (Base)" * "Qty. to Assign" / QtyToInvoice,
                SalesHeader."Currency Factor"),GLSetup."Amount Rounding Precision")
        ELSE
          ItemJnlLine2."Discount Amount" := ROUND(
              ItemChargeSalesLine."Inv. Discount Amount" * ItemJnlLine2."Invoiced Qty. (Base)" /
              ItemChargeSalesLine."Quantity (Base)" * "Qty. to Assign" / QtyToInvoice,
              GLSetup."Amount Rounding Precision");

        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          ItemJnlLine2."Discount Amount" := -ItemJnlLine2."Discount Amount";
        ItemJnlLine2."Shortcut Dimension 1 Code" := ItemChargeSalesLine."Shortcut Dimension 1 Code";
        ItemJnlLine2."Shortcut Dimension 2 Code" := ItemChargeSalesLine."Shortcut Dimension 2 Code";
        ItemJnlLine2."Dimension Set ID" := ItemChargeSalesLine."Dimension Set ID";
        ItemJnlLine2."Gen. Prod. Posting Group" := ItemChargeSalesLine."Gen. Prod. Posting Group";
      END;

      WITH TempTrackingSpecificationInv DO BEGIN
        RESET;
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source ID",TempItemChargeAssgntSales."Applies-to Doc. No.");
        SETRANGE("Source Ref. No.",TempItemChargeAssgntSales."Applies-to Doc. Line No.");
        IF ISEMPTY THEN
          ItemJnlPostLine.RunWithCheck(ItemJnlLine2)
        ELSE BEGIN
          FINDSET;
          NonDistrItemJnlLine := ItemJnlLine2;
          OriginalAmt := NonDistrItemJnlLine.Amount;
          OriginalDiscountAmt := NonDistrItemJnlLine."Discount Amount";
          OriginalQty := NonDistrItemJnlLine."Quantity (Base)";
          IF ("Quantity (Base)" / OriginalQty) > 0 THEN
            SignFactor := 1
          ELSE
            SignFactor := -1;
          REPEAT
            Factor := "Quantity (Base)" / OriginalQty * SignFactor;
            IF ABS("Quantity (Base)") < ABS(NonDistrItemJnlLine."Quantity (Base)") THEN BEGIN
              ItemJnlLine2."Quantity (Base)" := -"Quantity (Base)";
              ItemJnlLine2."Invoiced Qty. (Base)" := ItemJnlLine2."Quantity (Base)";
              ItemJnlLine2.Amount :=
                ROUND(OriginalAmt * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2."Unit Cost" :=
                ROUND(ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
                  GLSetup."Unit-Amount Rounding Precision") * SignFactor;
              ItemJnlLine2."Discount Amount" :=
                ROUND(OriginalDiscountAmt * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2."Item Shpt. Entry No." := "Item Ledger Entry No.";
              ItemJnlLine2."Applies-to Entry" := "Item Ledger Entry No.";
              ItemJnlLine2."Lot No." := "Lot No.";
              ItemJnlLine2."Serial No." := "Serial No.";
              ItemJnlPostLine.RunWithCheck(ItemJnlLine2);
              ItemJnlLine2."Location Code" := NonDistrItemJnlLine."Location Code";
              NonDistrItemJnlLine."Quantity (Base)" -= ItemJnlLine2."Quantity (Base)";
              NonDistrItemJnlLine.Amount -= ItemJnlLine2.Amount;
              NonDistrItemJnlLine."Discount Amount" -= ItemJnlLine2."Discount Amount";
            END ELSE BEGIN // the last time
              NonDistrItemJnlLine."Quantity (Base)" := -"Quantity (Base)";
              NonDistrItemJnlLine."Invoiced Qty. (Base)" := -"Quantity (Base)";
              NonDistrItemJnlLine."Unit Cost" :=
                ROUND(NonDistrItemJnlLine.Amount / NonDistrItemJnlLine."Invoiced Qty. (Base)",
                  GLSetup."Unit-Amount Rounding Precision");
              NonDistrItemJnlLine."Item Shpt. Entry No." := "Item Ledger Entry No.";
              NonDistrItemJnlLine."Applies-to Entry" := "Item Ledger Entry No.";
              NonDistrItemJnlLine."Lot No." := "Lot No.";
              NonDistrItemJnlLine."Serial No." := "Serial No.";
              ItemJnlPostLine.RunWithCheck(NonDistrItemJnlLine);
              NonDistrItemJnlLine."Location Code" := ItemJnlLine2."Location Code";
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostItemChargePerShpt@5807(VAR SalesLine@1000 : Record 37);
    VAR
      SalesShptLine@1003 : Record 111;
      TempItemLedgEntry@1010 : TEMPORARY Record 32;
      ItemTrackingMgt@1009 : Codeunit 6500;
      Factor@1008 : Decimal;
      NonDistrQuantity@1007 : Decimal;
      NonDistrQtyToAssign@1006 : Decimal;
      NonDistrAmountToAssign@1005 : Decimal;
      QtyToAssign@1004 : Decimal;
      AmountToAssign@1002 : Decimal;
      DistributeCharge@1011 : Boolean;
    BEGIN
      IF NOT SalesShptLine.GET(
           TempItemChargeAssgntSales."Applies-to Doc. No.",TempItemChargeAssgntSales."Applies-to Doc. Line No.")
      THEN
        ERROR(Text013);
      SalesShptLine.TESTFIELD("Job No.",'');

      IF SalesShptLine."Item Shpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,-SalesShptLine."Quantity (Base)",SalesShptLine."Item Shpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        IF NOT ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
             DATABASE::"Sales Shipment Line",0,SalesShptLine."Document No.",
             '',0,SalesShptLine."Line No.",-SalesShptLine."Quantity (Base)")
        THEN
          ERROR(Text040);
      END;

      IF DistributeCharge THEN BEGIN
        TempItemLedgEntry.FINDSET;
        NonDistrQuantity := SalesShptLine."Quantity (Base)";
        NonDistrQtyToAssign := TempItemChargeAssgntSales."Qty. to Assign";
        NonDistrAmountToAssign := TempItemChargeAssgntSales."Amount to Assign";
        REPEAT
          Factor := ABS(TempItemLedgEntry.Quantity) / NonDistrQuantity;
          QtyToAssign := NonDistrQtyToAssign * Factor;
          AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
          IF Factor < 1 THEN BEGIN
            PostItemCharge(SalesLine,
              TempItemLedgEntry."Entry No.",ABS(TempItemLedgEntry.Quantity),
              AmountToAssign,QtyToAssign);
            NonDistrQuantity := NonDistrQuantity - ABS(TempItemLedgEntry.Quantity);
            NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
            NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
          END ELSE // the last time
            PostItemCharge(SalesLine,
              TempItemLedgEntry."Entry No.",ABS(TempItemLedgEntry.Quantity),
              NonDistrAmountToAssign,NonDistrQtyToAssign);
        UNTIL TempItemLedgEntry.NEXT = 0;
      END ELSE
        PostItemCharge(SalesLine,
          SalesShptLine."Item Shpt. Entry No.",SalesShptLine."Quantity (Base)",
          TempItemChargeAssgntSales."Amount to Assign",
          TempItemChargeAssgntSales."Qty. to Assign");
    END;

    LOCAL PROCEDURE PostItemChargePerRetRcpt@5810(VAR SalesLine@1000 : Record 37);
    VAR
      ReturnRcptLine@1002 : Record 6661;
      TempItemLedgEntry@1010 : TEMPORARY Record 32;
      ItemTrackingMgt@1009 : Codeunit 6500;
      Factor@1008 : Decimal;
      NonDistrQuantity@1007 : Decimal;
      NonDistrQtyToAssign@1006 : Decimal;
      NonDistrAmountToAssign@1005 : Decimal;
      QtyToAssign@1004 : Decimal;
      AmountToAssign@1003 : Decimal;
      DistributeCharge@1011 : Boolean;
    BEGIN
      IF NOT ReturnRcptLine.GET(
           TempItemChargeAssgntSales."Applies-to Doc. No.",TempItemChargeAssgntSales."Applies-to Doc. Line No.")
      THEN
        ERROR(Text013);
      ReturnRcptLine.TESTFIELD("Job No.",'');

      IF ReturnRcptLine."Item Rcpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,ReturnRcptLine."Quantity (Base)",ReturnRcptLine."Item Rcpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        IF NOT ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
             DATABASE::"Return Receipt Line",0,ReturnRcptLine."Document No.",
             '',0,ReturnRcptLine."Line No.",ReturnRcptLine."Quantity (Base)")
        THEN
          ERROR(Text040);
      END;

      IF DistributeCharge THEN BEGIN
        TempItemLedgEntry.FINDSET;
        NonDistrQuantity := ReturnRcptLine."Quantity (Base)";
        NonDistrQtyToAssign := TempItemChargeAssgntSales."Qty. to Assign";
        NonDistrAmountToAssign := TempItemChargeAssgntSales."Amount to Assign";
        REPEAT
          Factor := ABS(TempItemLedgEntry.Quantity) / NonDistrQuantity;
          QtyToAssign := NonDistrQtyToAssign * Factor;
          AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
          IF Factor < 1 THEN BEGIN
            PostItemCharge(SalesLine,
              TempItemLedgEntry."Entry No.",ABS(TempItemLedgEntry.Quantity),
              AmountToAssign,QtyToAssign);
            NonDistrQuantity := NonDistrQuantity - ABS(TempItemLedgEntry.Quantity);
            NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
            NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
          END ELSE // the last time
            PostItemCharge(SalesLine,
              TempItemLedgEntry."Entry No.",ABS(TempItemLedgEntry.Quantity),
              NonDistrAmountToAssign,NonDistrQtyToAssign);
        UNTIL TempItemLedgEntry.NEXT = 0;
      END ELSE
        PostItemCharge(SalesLine,
          ReturnRcptLine."Item Rcpt. Entry No.",ReturnRcptLine."Quantity (Base)",
          TempItemChargeAssgntSales."Amount to Assign",
          TempItemChargeAssgntSales."Qty. to Assign")
    END;

    LOCAL PROCEDURE PostAssocItemJnlLine@3(QtyToBeShipped@1000 : Decimal;QtyToBeShippedBase@1001 : Decimal) : Integer;
    VAR
      TempHandlingSpecification2@1005 : TEMPORARY Record 336;
      ItemEntryRelation@1004 : Record 6507;
    BEGIN
      PurchOrderHeader.GET(
        PurchOrderHeader."Document Type"::Order,
        SalesLine."Purchase Order No.");
      PurchOrderLine.GET(
        PurchOrderLine."Document Type"::Order,
        SalesLine."Purchase Order No.",SalesLine."Purch. Order Line No.");

      ItemJnlLine.INIT;
      ItemJnlLine."Source Posting Group" := PurchOrderHeader."Vendor Posting Group";
      ItemJnlLine."Salespers./Purch. Code" := PurchOrderHeader."Purchaser Code";
      ItemJnlLine."Country/Region Code" := PurchOrderHeader."VAT Country/Region Code";
      ItemJnlLine."Reason Code" := PurchOrderHeader."Reason Code";
      ItemJnlLine."Posting No. Series" := PurchOrderHeader."Posting No. Series";
      ItemJnlLine."Shipment Method Code" := PurchOrderHeader."Shipment Method Code";
      ItemJnlLine."Item No." := PurchOrderLine."No.";
      ItemJnlLine.Description := PurchOrderLine.Description;
      ItemJnlLine."Shortcut Dimension 1 Code" := PurchOrderLine."Shortcut Dimension 1 Code";
      ItemJnlLine."Shortcut Dimension 2 Code" := PurchOrderLine."Shortcut Dimension 2 Code";
      ItemJnlLine."Dimension Set ID" := PurchOrderLine."Dimension Set ID";
      ItemJnlLine."Location Code" := PurchOrderLine."Location Code";
      ItemJnlLine."Inventory Posting Group" := PurchOrderLine."Posting Group";
      ItemJnlLine."Gen. Bus. Posting Group" := PurchOrderLine."Gen. Bus. Posting Group";
      ItemJnlLine."Gen. Prod. Posting Group" := PurchOrderLine."Gen. Prod. Posting Group";
      ItemJnlLine."Applies-to Entry" := PurchOrderLine."Appl.-to Item Entry";
      ItemJnlLine."Transaction Type" := PurchOrderLine."Transaction Type";
      ItemJnlLine."Transport Method" := PurchOrderLine."Transport Method";
      ItemJnlLine."Entry/Exit Point" := PurchOrderLine."Entry Point";
      ItemJnlLine.Area := PurchOrderLine.Area;
      ItemJnlLine."Transaction Specification" := PurchOrderLine."Transaction Specification";
      ItemJnlLine."Drop Shipment" := PurchOrderLine."Drop Shipment";
      ItemJnlLine."Posting Date" := SalesHeader."Posting Date";
      ItemJnlLine."Document Date" := SalesHeader."Document Date";
      ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Purchase;
      ItemJnlLine."Document No." := PurchOrderHeader."Receiving No.";
      ItemJnlLine."External Document No." := PurchOrderHeader."No.";
      ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Receipt";
      ItemJnlLine."Document Line No." := PurchOrderLine."Line No.";
      ItemJnlLine.Quantity := QtyToBeShipped;
      ItemJnlLine."Quantity (Base)" := QtyToBeShippedBase;
      ItemJnlLine."Invoiced Quantity" := 0;
      ItemJnlLine."Invoiced Qty. (Base)" := 0;
      ItemJnlLine."Unit Cost" := PurchOrderLine."Unit Cost (LCY)";
      ItemJnlLine."Source Currency Code" := SalesHeader."Currency Code";
      ItemJnlLine."Unit Cost (ACY)" := PurchOrderLine."Unit Cost";
      ItemJnlLine.Amount := ROUND(PurchOrderLine.Amount * QtyToBeShipped / PurchOrderLine.Quantity);
      ItemJnlLine."Discount Amount" := PurchOrderLine."Line Discount Amount";
      ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Vendor;
      ItemJnlLine."Source No." := PurchOrderLine."Buy-from Vendor No.";
      ItemJnlLine."Invoice-to Source No." := PurchOrderLine."Pay-to Vendor No.";
      ItemJnlLine."Source Code" := SrcCode;
      ItemJnlLine."Variant Code" := PurchOrderLine."Variant Code";
      ItemJnlLine."Item Category Code" := PurchOrderLine."Item Category Code";
      ItemJnlLine."Product Group Code" := PurchOrderLine."Product Group Code";
      ItemJnlLine."Bin Code" := PurchOrderLine."Bin Code";
      ItemJnlLine."Purchasing Code" := PurchOrderLine."Purchasing Code";
      IF PurchOrderLine."Prod. Order No." <> '' THEN BEGIN
        ItemJnlLine."Order Type" := ItemJnlLine."Order Type"::Production;
        ItemJnlLine."Order No." := PurchOrderLine."Prod. Order No.";
        ItemJnlLine."Order Line No." := PurchOrderLine."Prod. Order Line No.";
      END;
      ItemJnlLine."Unit of Measure Code" := PurchOrderLine."Unit of Measure Code";
      ItemJnlLine."Qty. per Unit of Measure" := PurchOrderLine."Qty. per Unit of Measure";
      ItemJnlLine."Applies-to Entry" := 0;

      IF PurchOrderLine."Job No." = '' THEN BEGIN
        TransferReservFromPurchLine(PurchOrderLine,ItemJnlLine,QtyToBeShippedBase);
        ItemJnlPostLine.RunWithCheck(ItemJnlLine);

        // Handle Item Tracking
        IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) THEN BEGIN
          IF TempHandlingSpecification2.FINDSET THEN
            REPEAT
              TempTrackingSpecification := TempHandlingSpecification2;
              TempTrackingSpecification."Source Type" := DATABASE::"Purchase Line";
              TempTrackingSpecification."Source Subtype" := PurchOrderLine."Document Type";
              TempTrackingSpecification."Source ID" := PurchOrderLine."Document No.";
              TempTrackingSpecification."Source Batch Name" := '';
              TempTrackingSpecification."Source Prod. Order Line" := 0;
              TempTrackingSpecification."Source Ref. No." := PurchOrderLine."Line No.";
              IF TempTrackingSpecification.INSERT THEN;
              ItemEntryRelation.INIT;
              ItemEntryRelation."Item Entry No." := TempHandlingSpecification2."Entry No.";
              ItemEntryRelation."Serial No." := TempHandlingSpecification2."Serial No.";
              ItemEntryRelation."Lot No." := TempHandlingSpecification2."Lot No.";
              ItemEntryRelation."Source Type" := DATABASE::"Purch. Rcpt. Line";
              ItemEntryRelation."Source ID" := PurchOrderHeader."Receiving No.";
              ItemEntryRelation."Source Ref. No." := PurchOrderLine."Line No.";
              ItemEntryRelation."Order No." := PurchOrderLine."Document No.";
              ItemEntryRelation."Order Line No." := PurchOrderLine."Line No.";
              ItemEntryRelation.INSERT;
            UNTIL TempHandlingSpecification2.NEXT = 0;
          EXIT(0);
        END;
      END;

      EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE UpdateAssocOrder@4();
    VAR
      ReservePurchLine@1000 : Codeunit 99000834;
    BEGIN
      DropShipPostBuffer.RESET;
      IF DropShipPostBuffer.ISEMPTY THEN
        EXIT;
      CLEAR(PurchOrderHeader);
      DropShipPostBuffer.FINDSET;
      REPEAT
        IF PurchOrderHeader."No." <> DropShipPostBuffer."Order No." THEN BEGIN
          PurchOrderHeader.GET(
            PurchOrderHeader."Document Type"::Order,
            DropShipPostBuffer."Order No.");
          PurchOrderHeader."Last Receiving No." := PurchOrderHeader."Receiving No.";
          PurchOrderHeader."Receiving No." := '';
          PurchOrderHeader.MODIFY;
          ReservePurchLine.UpdateItemTrackingAfterPosting(PurchOrderHeader);
        END;
        PurchOrderLine.GET(
          PurchOrderLine."Document Type"::Order,
          DropShipPostBuffer."Order No.",DropShipPostBuffer."Order Line No.");
        PurchOrderLine."Quantity Received" := PurchOrderLine."Quantity Received" + DropShipPostBuffer.Quantity;
        PurchOrderLine."Qty. Received (Base)" := PurchOrderLine."Qty. Received (Base)" + DropShipPostBuffer."Quantity (Base)";
        PurchOrderLine.InitOutstanding;
        PurchOrderLine.ClearQtyIfBlank;
        PurchOrderLine.InitQtyToReceive;
        PurchOrderLine.MODIFY;
      UNTIL DropShipPostBuffer.NEXT = 0;
      DropShipPostBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateAssocLines@5(VAR SalesOrderLine@1000 : Record 37);
    BEGIN
      PurchOrderLine.GET(
        PurchOrderLine."Document Type"::Order,
        SalesOrderLine."Purchase Order No.",SalesOrderLine."Purch. Order Line No.");
      PurchOrderLine."Sales Order No." := '';
      PurchOrderLine."Sales Order Line No." := 0;
      PurchOrderLine.MODIFY;
      SalesOrderLine."Purchase Order No." := '';
      SalesOrderLine."Purch. Order Line No." := 0;
    END;

    LOCAL PROCEDURE FillInvPostingBuffer@5804(SalesLine@1000 : Record 37;SalesLineACY@1001 : Record 37);
    VAR
      GenPostingSetup@1006 : Record 252;
      TotalVAT@1005 : Decimal;
      TotalVATACY@1004 : Decimal;
      TotalAmount@1003 : Decimal;
      TotalAmountACY@1002 : Decimal;
      AmtToDefer@1007 : Decimal;
      AmtToDeferACY@1008 : Decimal;
      DeferralAccount@1009 : Code[20];
      SalesAccount@1010 : Code[20];
    BEGIN
      GenPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");

      InvPostingBuffer[1].PrepareSales(SalesLine);

      TotalVAT := SalesLine."Amount Including VAT" - SalesLine.Amount;
      TotalVATACY := SalesLineACY."Amount Including VAT" - SalesLineACY.Amount;
      TotalAmount := SalesLine.Amount;
      TotalAmountACY := SalesLineACY.Amount;

      IF SalesLine."Deferral Code" <> '' THEN
        GetAmountsForDeferral(SalesLine,AmtToDefer,AmtToDeferACY,DeferralAccount)
      ELSE BEGIN
        AmtToDefer := 0;
        AmtToDeferACY := 0;
        DeferralAccount := '';
      END;

      IF SalesSetup."Discount Posting" IN
         [SalesSetup."Discount Posting"::"Invoice Discounts",SalesSetup."Discount Posting"::"All Discounts"]
      THEN BEGIN
        IF SalesLine."VAT Calculation Type" = SalesLine."VAT Calculation Type"::"Reverse Charge VAT" THEN
          InvPostingBuffer[1].CalcDiscountNoVAT(
            -SalesLine."Inv. Discount Amount",
            -SalesLineACY."Inv. Discount Amount")
        ELSE
          InvPostingBuffer[1].CalcDiscount(
            SalesHeader."Prices Including VAT",
            -SalesLine."Inv. Discount Amount",
            -SalesLineACY."Inv. Discount Amount");
        IF (InvPostingBuffer[1].Amount <> 0) OR
           (InvPostingBuffer[1]."Amount (ACY)" <> 0)
        THEN BEGIN
          GenPostingSetup.TESTFIELD("Sales Inv. Disc. Account");
          InvPostingBuffer[1].SetAccount(
            GenPostingSetup."Sales Inv. Disc. Account",
            TotalVAT,
            TotalVATACY,
            TotalAmount,
            TotalAmountACY);
          UpdInvPostingBuffer(TRUE);
        END;
      END;

      IF SalesSetup."Discount Posting" IN
         [SalesSetup."Discount Posting"::"Line Discounts",SalesSetup."Discount Posting"::"All Discounts"]
      THEN BEGIN
        IF SalesLine."VAT Calculation Type" = SalesLine."VAT Calculation Type"::"Reverse Charge VAT" THEN
          InvPostingBuffer[1].CalcDiscountNoVAT(
            -SalesLine."Line Discount Amount",
            -SalesLineACY."Line Discount Amount")
        ELSE
          InvPostingBuffer[1].CalcDiscount(
            SalesHeader."Prices Including VAT",
            -SalesLine."Line Discount Amount",
            -SalesLineACY."Line Discount Amount");
        IF (InvPostingBuffer[1].Amount <> 0) OR
           (InvPostingBuffer[1]."Amount (ACY)" <> 0)
        THEN BEGIN
          GenPostingSetup.TESTFIELD("Sales Line Disc. Account");
          InvPostingBuffer[1].SetAccount(
            GenPostingSetup."Sales Line Disc. Account",
            TotalVAT,
            TotalVATACY,
            TotalAmount,
            TotalAmountACY);
          UpdInvPostingBuffer(TRUE);
        END;
      END;

      IF SalesLine."Deferral Code" <> '' THEN
        IF (AmtToDefer = TotalAmount) AND (AmtToDeferACY = TotalAmountACY) THEN BEGIN
          AmtToDefer := 0;
          AmtToDeferACY := 0;
        END ELSE BEGIN
          TotalAmount := TotalAmount - AmtToDefer;
          TotalAmountACY := TotalAmountACY - AmtToDeferACY;
        END;

      InvPostingBuffer[1].SetAmounts(
        TotalVAT,
        TotalVATACY,
        TotalAmount,
        TotalAmountACY,
        SalesLine."VAT Difference");

      IF (SalesLine.Type = SalesLine.Type::"G/L Account") OR (SalesLine.Type = SalesLine.Type::"Fixed Asset") THEN BEGIN
        SalesAccount := SalesLine."No.";
        InvPostingBuffer[1].SetAccount(
          DefaultGLAccount(SalesLine."Deferral Code",AmtToDefer,SalesAccount,DeferralAccount),
          TotalVAT,
          TotalVATACY,
          TotalAmount,
          TotalAmountACY)
      END ELSE
        IF SalesLine."Document Type" IN [SalesLine."Document Type"::"Return Order",SalesLine."Document Type"::"Credit Memo"] THEN BEGIN
          GenPostingSetup.TESTFIELD("Sales Credit Memo Account");
          SalesAccount := GenPostingSetup."Sales Credit Memo Account";
          InvPostingBuffer[1].SetAccount(
            DefaultGLAccount(SalesLine."Deferral Code",AmtToDefer,SalesAccount,DeferralAccount),
            TotalVAT,
            TotalVATACY,
            TotalAmount,
            TotalAmountACY);
        END ELSE BEGIN
          GenPostingSetup.TESTFIELD("Sales Account");
          SalesAccount := GenPostingSetup."Sales Account";
          InvPostingBuffer[1].SetAccount(
            DefaultGLAccount(SalesLine."Deferral Code",AmtToDefer,SalesAccount,DeferralAccount),
            TotalVAT,
            TotalVATACY,
            TotalAmount,
            TotalAmountACY);
        END;
      UpdInvPostingBuffer(FALSE);
      IF SalesLine."Deferral Code" <> '' THEN
        FillDeferralPostingBuffer(SalesLine,AmtToDefer,AmtToDeferACY,DeferralAccount,SalesAccount);
    END;

    LOCAL PROCEDURE UpdInvPostingBuffer@6(ForceGLAccountType@1000 : Boolean);
    VAR
      DimMgt@1001 : Codeunit 408;
      RestoreFAType@1002 : Boolean;
    BEGIN
      InvPostingBuffer[1]."Dimension Set ID" := SalesLine."Dimension Set ID";

      DimMgt.UpdateGlobalDimFromDimSetID(InvPostingBuffer[1]."Dimension Set ID",
        InvPostingBuffer[1]."Global Dimension 1 Code",InvPostingBuffer[1]."Global Dimension 2 Code");

      IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
        FALineNo := FALineNo + 1;
        InvPostingBuffer[1]."Fixed Asset Line No." := FALineNo;
        IF ForceGLAccountType THEN BEGIN
          RestoreFAType := TRUE;
          InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
        END;
      END;

      InvPostingBuffer[2] := InvPostingBuffer[1];
      IF InvPostingBuffer[2].FIND THEN BEGIN
        InvPostingBuffer[2].Amount := InvPostingBuffer[2].Amount + InvPostingBuffer[1].Amount;
        InvPostingBuffer[2]."VAT Amount" :=
          InvPostingBuffer[2]."VAT Amount" + InvPostingBuffer[1]."VAT Amount";
        InvPostingBuffer[2]."VAT Base Amount" :=
          InvPostingBuffer[2]."VAT Base Amount" + InvPostingBuffer[1]."VAT Base Amount";
        InvPostingBuffer[2]."Amount (ACY)" :=
          InvPostingBuffer[2]."Amount (ACY)" + InvPostingBuffer[1]."Amount (ACY)";
        InvPostingBuffer[2]."VAT Amount (ACY)" :=
          InvPostingBuffer[2]."VAT Amount (ACY)" + InvPostingBuffer[1]."VAT Amount (ACY)";
        InvPostingBuffer[2]."VAT Difference" :=
          InvPostingBuffer[2]."VAT Difference" + InvPostingBuffer[1]."VAT Difference";
        InvPostingBuffer[2]."VAT Base Amount (ACY)" :=
          InvPostingBuffer[2]."VAT Base Amount (ACY)" +
          InvPostingBuffer[1]."VAT Base Amount (ACY)";
        InvPostingBuffer[2].Quantity :=
          InvPostingBuffer[2].Quantity + InvPostingBuffer[1].Quantity;
        IF NOT InvPostingBuffer[1]."System-Created Entry" THEN
          InvPostingBuffer[2]."System-Created Entry" := FALSE;
        InvPostingBuffer[2].MODIFY;
        InvDefLineNo := InvPostingBuffer[2]."Deferral Line No.";
      END ELSE BEGIN
        IF InvPostingBuffer[1]."Deferral Code" <> '' THEN BEGIN
          DeferralLineNo := DeferralLineNo + 1;
          InvPostingBuffer[1]."Deferral Line No." := DeferralLineNo;
          InvDefLineNo := InvPostingBuffer[1]."Deferral Line No.";
        END;
        InvPostingBuffer[1].INSERT;
      END;

      IF RestoreFAType THEN
        InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"Fixed Asset";
    END;

    LOCAL PROCEDURE InsertPrepmtAdjInvPostingBuf@80(PrepmtSalesLine@1000 : Record 37);
    VAR
      SalesPostPrepayments@1002 : Codeunit 442;
      AdjAmount@1001 : Decimal;
    BEGIN
      WITH PrepmtSalesLine DO
        IF "Prepayment Line" THEN
          IF "Prepmt. Amount Inv. (LCY)" <> 0 THEN BEGIN
            AdjAmount := -"Prepmt. Amount Inv. (LCY)";
            FillPrepmtAdjInvPostingBuffer("No.",AdjAmount,SalesHeader."Currency Code" = '');
            FillPrepmtAdjInvPostingBuffer(
              SalesPostPrepayments.GetCorrBalAccNo(SalesHeader,AdjAmount > 0),
              -AdjAmount,
              SalesHeader."Currency Code" = '');
          END ELSE
            IF ("Prepayment %" = 100) AND ("Prepmt. VAT Amount Inv. (LCY)" <> 0) THEN
              FillPrepmtAdjInvPostingBuffer(
                SalesPostPrepayments.GetInvRoundingAccNo(SalesHeader."Customer Posting Group"),
                "Prepmt. VAT Amount Inv. (LCY)",SalesHeader."Currency Code" = '');
    END;

    LOCAL PROCEDURE FillPrepmtAdjInvPostingBuffer@81(GLAccountNo@1001 : Code[20];AdjAmount@1003 : Decimal;RoundingEntry@1004 : Boolean);
    VAR
      PrepmtAdjInvPostBuffer@1002 : Record 49;
    BEGIN
      WITH PrepmtAdjInvPostBuffer DO BEGIN
        INIT;
        Type := Type::"Prepmt. Exch. Rate Difference";
        "G/L Account" := GLAccountNo;
        Amount := AdjAmount;
        IF RoundingEntry THEN
          "Amount (ACY)" := AdjAmount
        ELSE
          "Amount (ACY)" := 0;
        "Dimension Set ID" := InvPostingBuffer[1]."Dimension Set ID";
        "Global Dimension 1 Code" := InvPostingBuffer[1]."Global Dimension 1 Code";
        "Global Dimension 2 Code" := InvPostingBuffer[1]."Global Dimension 2 Code";
        "System-Created Entry" := TRUE;
        InvPostingBuffer[1] := PrepmtAdjInvPostBuffer;

        InvPostingBuffer[2] := InvPostingBuffer[1];
        IF InvPostingBuffer[2].FIND THEN BEGIN
          InvPostingBuffer[2].Amount := InvPostingBuffer[2].Amount + InvPostingBuffer[1].Amount;
          InvPostingBuffer[2]."Amount (ACY)" :=
            InvPostingBuffer[2]."Amount (ACY)" + InvPostingBuffer[1]."Amount (ACY)";
          InvPostingBuffer[2].MODIFY;
        END ELSE
          InvPostingBuffer[1].INSERT;
      END;
    END;

    LOCAL PROCEDURE GetCurrency@17();
    BEGIN
      WITH SalesHeader DO
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    LOCAL PROCEDURE DivideAmount@8(QtyType@1000 : 'General,Invoicing,Shipping';SalesLineQty@1001 : Decimal;VAR TempVATAmountLine@1002 : TEMPORARY Record 290;VAR TempVATAmountLineRemainder@1003 : TEMPORARY Record 290);
    VAR
      OriginalDeferralAmount@1006 : Decimal;
    BEGIN
      IF RoundingLineInserted AND (RoundingLineNo = SalesLine."Line No.") THEN
        EXIT;
      WITH SalesLine DO
        IF (SalesLineQty = 0) OR ("Unit Price" = 0) THEN BEGIN
          "Line Amount" := 0;
          "Line Discount Amount" := 0;
          "Inv. Discount Amount" := 0;
          "VAT Base Amount" := 0;
          Amount := 0;
          "Amount Including VAT" := 0;
        END ELSE BEGIN
          OriginalDeferralAmount := GetDeferralAmount;
          TempVATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0);
          IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN
            "VAT %" := TempVATAmountLine."VAT %";
          TempVATAmountLineRemainder := TempVATAmountLine;
          IF NOT TempVATAmountLineRemainder.FIND THEN BEGIN
            TempVATAmountLineRemainder.INIT;
            TempVATAmountLineRemainder.INSERT;
          END;
          "Line Amount" := GetLineAmountToHandle(SalesLineQty) + GetPrepmtDiffToLineAmount(SalesLine);
          IF SalesLineQty <> Quantity THEN
            "Line Discount Amount" :=
              ROUND("Line Discount Amount" * SalesLineQty / Quantity,Currency."Amount Rounding Precision");

          IF "Allow Invoice Disc." AND (TempVATAmountLine."Inv. Disc. Base Amount" <> 0) THEN
            IF QtyType = QtyType::Invoicing THEN
              "Inv. Discount Amount" := "Inv. Disc. Amount to Invoice"
            ELSE BEGIN
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" +
                TempVATAmountLine."Invoice Discount Amount" * "Line Amount" /
                TempVATAmountLine."Inv. Disc. Base Amount";
              "Inv. Discount Amount" :=
                ROUND(
                  TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" - "Inv. Discount Amount";
            END;

          IF SalesHeader."Prices Including VAT" THEN BEGIN
            IF (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" = 0) OR
               ("Line Amount" = 0)
            THEN BEGIN
              TempVATAmountLineRemainder."VAT Amount" := 0;
              TempVATAmountLineRemainder."Amount Including VAT" := 0;
            END ELSE BEGIN
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" +
                TempVATAmountLine."VAT Amount" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              TempVATAmountLineRemainder."Amount Including VAT" :=
                TempVATAmountLineRemainder."Amount Including VAT" +
                TempVATAmountLine."Amount Including VAT" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
            END;
            IF "Line Discount %" <> 100 THEN
              "Amount Including VAT" :=
                ROUND(TempVATAmountLineRemainder."Amount Including VAT",Currency."Amount Rounding Precision")
            ELSE
              "Amount Including VAT" := 0;
            Amount :=
              ROUND("Amount Including VAT",Currency."Amount Rounding Precision") -
              ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision");
            "VAT Base Amount" :=
              ROUND(
                Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
            TempVATAmountLineRemainder."Amount Including VAT" :=
              TempVATAmountLineRemainder."Amount Including VAT" - "Amount Including VAT";
            TempVATAmountLineRemainder."VAT Amount" :=
              TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
          END ELSE
            IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
              IF "Line Discount %" <> 100 THEN
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount"
              ELSE
                "Amount Including VAT" := 0;
              Amount := 0;
              "VAT Base Amount" := 0;
            END ELSE BEGIN
              Amount := "Line Amount" - "Inv. Discount Amount";
              "VAT Base Amount" :=
                ROUND(
                  Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
              IF TempVATAmountLine."VAT Base" = 0 THEN
                TempVATAmountLineRemainder."VAT Amount" := 0
              ELSE
                TempVATAmountLineRemainder."VAT Amount" :=
                  TempVATAmountLineRemainder."VAT Amount" +
                  TempVATAmountLine."VAT Amount" *
                  ("Line Amount" - "Inv. Discount Amount") /
                  (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              IF "Line Discount %" <> 100 THEN
                "Amount Including VAT" :=
                  Amount + ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision")
              ELSE
                "Amount Including VAT" := 0;
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
            END;

          TempVATAmountLineRemainder.MODIFY;
          IF "Deferral Code" <> '' THEN
            CalcDeferralAmounts(SalesHeader,SalesLine,OriginalDeferralAmount);
        END;
    END;

    LOCAL PROCEDURE RoundAmount@9(SalesLineQty@1000 : Decimal);
    VAR
      CurrExchRate@1002 : Record 330;
      NoVAT@1001 : Boolean;
    BEGIN
      WITH SalesLine DO BEGIN
        IncrAmount(TotalSalesLine);
        Increment(TotalSalesLine."Net Weight",ROUND(SalesLineQty * "Net Weight",0.00001));
        Increment(TotalSalesLine."Gross Weight",ROUND(SalesLineQty * "Gross Weight",0.00001));
        Increment(TotalSalesLine."Unit Volume",ROUND(SalesLineQty * "Unit Volume",0.00001));
        Increment(TotalSalesLine.Quantity,SalesLineQty);
        IF "Units per Parcel" > 0 THEN
          Increment(
            TotalSalesLine."Units per Parcel",
            ROUND(SalesLineQty / "Units per Parcel",1,'>'));

        TempSalesLine := SalesLine;
        SalesLineACY := SalesLine;

        IF SalesHeader."Currency Code" <> '' THEN BEGIN
          IF SalesHeader."Posting Date" = 0D THEN
            UseDate := WORKDATE
          ELSE
            UseDate := SalesHeader."Posting Date";

          NoVAT := Amount = "Amount Including VAT";
          "Amount Including VAT" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."Amount Including VAT",SalesHeader."Currency Factor")) -
            TotalSalesLineLCY."Amount Including VAT";
          IF NoVAT THEN
            Amount := "Amount Including VAT"
          ELSE
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  UseDate,SalesHeader."Currency Code",
                  TotalSalesLine.Amount,SalesHeader."Currency Factor")) -
              TotalSalesLineLCY.Amount;
          "Line Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."Line Amount",SalesHeader."Currency Factor")) -
            TotalSalesLineLCY."Line Amount";
          "Line Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."Line Discount Amount",SalesHeader."Currency Factor")) -
            TotalSalesLineLCY."Line Discount Amount";
          "Inv. Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."Inv. Discount Amount",SalesHeader."Currency Factor")) -
            TotalSalesLineLCY."Inv. Discount Amount";
          "VAT Difference" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,SalesHeader."Currency Code",
                TotalSalesLine."VAT Difference",SalesHeader."Currency Factor")) -
            TotalSalesLineLCY."VAT Difference";
        END;
        IncrAmount(TotalSalesLineLCY);
        Increment(TotalSalesLineLCY."Unit Cost (LCY)",ROUND(SalesLineQty * "Unit Cost (LCY)"));
      END;
    END;

    LOCAL PROCEDURE ReverseAmount@10(VAR SalesLine@1000 : Record 37);
    BEGIN
      WITH SalesLine DO BEGIN
        "Qty. to Ship" := -"Qty. to Ship";
        "Qty. to Ship (Base)" := -"Qty. to Ship (Base)";
        "Return Qty. to Receive" := -"Return Qty. to Receive";
        "Return Qty. to Receive (Base)" := -"Return Qty. to Receive (Base)";
        "Qty. to Invoice" := -"Qty. to Invoice";
        "Qty. to Invoice (Base)" := -"Qty. to Invoice (Base)";
        "Line Amount" := -"Line Amount";
        Amount := -Amount;
        "VAT Base Amount" := -"VAT Base Amount";
        "VAT Difference" := -"VAT Difference";
        "Amount Including VAT" := -"Amount Including VAT";
        "Line Discount Amount" := -"Line Discount Amount";
        "Inv. Discount Amount" := -"Inv. Discount Amount";
      END;
    END;

    LOCAL PROCEDURE InvoiceRounding@12(UseTempData@1000 : Boolean;BiggestLineNo@1004 : Integer);
    VAR
      CustPostingGr@1002 : Record 92;
      TempSalesLineForCalc@1003 : TEMPORARY Record 37;
      InvoiceRoundingAmount@1001 : Decimal;
    BEGIN
      Currency.TESTFIELD("Invoice Rounding Precision");
      InvoiceRoundingAmount :=
        -ROUND(
          TotalSalesLine."Amount Including VAT" -
          ROUND(
            TotalSalesLine."Amount Including VAT",
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");
      IF InvoiceRoundingAmount <> 0 THEN BEGIN
        CustPostingGr.GET(SalesHeader."Customer Posting Group");
        CustPostingGr.TESTFIELD("Invoice Rounding Account");
        WITH SalesLine DO BEGIN
          INIT;
          BiggestLineNo := BiggestLineNo + 10000;
          "System-Created Entry" := TRUE;
          IF UseTempData THEN BEGIN
            "Line No." := 0;
            Type := Type::"G/L Account";
            TempSalesLineForCalc := SalesLine;
            TempSalesLineForCalc.VALIDATE("No.",CustPostingGr."Invoice Rounding Account");
            SalesLine := TempSalesLineForCalc;
          END ELSE BEGIN
            "Line No." := BiggestLineNo;
            VALIDATE(Type,Type::"G/L Account");
            VALIDATE("No.",CustPostingGr."Invoice Rounding Account");
          END;
          VALIDATE(Quantity,1);
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            VALIDATE("Return Qty. to Receive",Quantity)
          ELSE
            VALIDATE("Qty. to Ship",Quantity);
          IF SalesHeader."Prices Including VAT" THEN
            VALIDATE("Unit Price",InvoiceRoundingAmount)
          ELSE
            VALIDATE(
              "Unit Price",
              ROUND(
                InvoiceRoundingAmount /
                (1 + (1 - SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                Currency."Amount Rounding Precision"));
          VALIDATE("Amount Including VAT",InvoiceRoundingAmount);
          "Line No." := BiggestLineNo;
          IF NOT UseTempData THEN
            ;
          LastLineRetrieved := FALSE;
          RoundingLineInserted := TRUE;
          RoundingLineNo := "Line No.";
        END;
      END;
    END;

    LOCAL PROCEDURE IncrAmount@13(VAR TotalSalesLine@1000 : Record 37);
    BEGIN
      WITH SalesLine DO BEGIN
        IF SalesHeader."Prices Including VAT" OR
           ("VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT")
        THEN
          Increment(TotalSalesLine."Line Amount","Line Amount");
        Increment(TotalSalesLine.Amount,Amount);
        Increment(TotalSalesLine."VAT Base Amount","VAT Base Amount");
        Increment(TotalSalesLine."VAT Difference","VAT Difference");
        Increment(TotalSalesLine."Amount Including VAT","Amount Including VAT");
        Increment(TotalSalesLine."Line Discount Amount","Line Discount Amount");
        Increment(TotalSalesLine."Inv. Discount Amount","Inv. Discount Amount");
        Increment(TotalSalesLine."Inv. Disc. Amount to Invoice","Inv. Disc. Amount to Invoice");
        Increment(TotalSalesLine."Prepmt. Line Amount","Prepmt. Line Amount");
        Increment(TotalSalesLine."Prepmt. Amt. Inv.","Prepmt. Amt. Inv.");
        Increment(TotalSalesLine."Prepmt Amt to Deduct","Prepmt Amt to Deduct");
        Increment(TotalSalesLine."Prepmt Amt Deducted","Prepmt Amt Deducted");
        Increment(TotalSalesLine."Prepayment VAT Difference","Prepayment VAT Difference");
        Increment(TotalSalesLine."Prepmt VAT Diff. to Deduct","Prepmt VAT Diff. to Deduct");
        Increment(TotalSalesLine."Prepmt VAT Diff. Deducted","Prepmt VAT Diff. Deducted");
      END;
    END;

    LOCAL PROCEDURE Increment@14(VAR Number@1000 : Decimal;Number2@1001 : Decimal);
    BEGIN
      Number := Number + Number2;
    END;

    PROCEDURE GetSalesLines@16(VAR NewSalesHeader@1000 : Record 36;VAR NewSalesLine@1001 : Record 37;QtyType@1002 : 'General,Invoicing,Shipping');
    VAR
      OldSalesLine@1003 : Record 37;
      MergedSalesLines@1006 : TEMPORARY Record 37;
      TotalAdjCostLCY@1005 : Decimal;
    BEGIN
      SalesHeader := NewSalesHeader;
      IF QtyType = QtyType::Invoicing THEN BEGIN
        CreatePrepaymentLines(SalesHeader,TempPrepaymentSalesLine,FALSE);
        MergeSaleslines(SalesHeader,OldSalesLine,TempPrepaymentSalesLine,MergedSalesLines);
        SumSalesLines2(NewSalesLine,MergedSalesLines,QtyType,TRUE,FALSE,TotalAdjCostLCY);
      END ELSE
        SumSalesLines2(NewSalesLine,OldSalesLine,QtyType,TRUE,FALSE,TotalAdjCostLCY);
    END;

    PROCEDURE GetSalesLinesTemp@33(VAR NewSalesHeader@1000 : Record 36;VAR NewSalesLine@1001 : Record 37;VAR OldSalesLine@1002 : Record 37;QtyType@1003 : 'General,Invoicing,Shipping');
    VAR
      TotalAdjCostLCY@1005 : Decimal;
    BEGIN
      SalesHeader := NewSalesHeader;
      OldSalesLine.SetSalesHeader(NewSalesHeader);
      SumSalesLines2(NewSalesLine,OldSalesLine,QtyType,TRUE,FALSE,TotalAdjCostLCY);
    END;

    PROCEDURE SumSalesLines@15(VAR NewSalesHeader@1000 : Record 36;QtyType@1001 : 'General,Invoicing,Shipping';VAR NewTotalSalesLine@1002 : Record 37;VAR NewTotalSalesLineLCY@1003 : Record 37;VAR VATAmount@1004 : Decimal;VAR VATAmountText@1005 : Text[30];VAR ProfitLCY@1006 : Decimal;VAR ProfitPct@1007 : Decimal;VAR TotalAdjCostLCY@1010 : Decimal);
    VAR
      OldSalesLine@1008 : Record 37;
    BEGIN
      SumSalesLinesTemp(
        NewSalesHeader,OldSalesLine,QtyType,NewTotalSalesLine,NewTotalSalesLineLCY,
        VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);
    END;

    PROCEDURE SumSalesLinesTemp@25(VAR NewSalesHeader@1000 : Record 36;VAR OldSalesLine@1001 : Record 37;QtyType@1002 : 'General,Invoicing,Shipping';VAR NewTotalSalesLine@1003 : Record 37;VAR NewTotalSalesLineLCY@1004 : Record 37;VAR VATAmount@1005 : Decimal;VAR VATAmountText@1006 : Text[30];VAR ProfitLCY@1007 : Decimal;VAR ProfitPct@1008 : Decimal;VAR TotalAdjCostLCY@1011 : Decimal);
    VAR
      SalesLine@1009 : Record 37;
    BEGIN
      WITH SalesHeader DO BEGIN
        SalesHeader := NewSalesHeader;
        SumSalesLines2(SalesLine,OldSalesLine,QtyType,FALSE,TRUE,TotalAdjCostLCY);
        ProfitLCY := TotalSalesLineLCY.Amount - TotalSalesLineLCY."Unit Cost (LCY)";
        IF TotalSalesLineLCY.Amount = 0 THEN
          ProfitPct := 0
        ELSE
          ProfitPct := ROUND(ProfitLCY / TotalSalesLineLCY.Amount * 100,0.1);
        VATAmount := TotalSalesLine."Amount Including VAT" - TotalSalesLine.Amount;
        IF TotalSalesLine."VAT %" = 0 THEN
          VATAmountText := Text016
        ELSE
          VATAmountText := STRSUBSTNO(Text017,TotalSalesLine."VAT %");
        NewTotalSalesLine := TotalSalesLine;
        NewTotalSalesLineLCY := TotalSalesLineLCY;
      END;
    END;

    LOCAL PROCEDURE SumSalesLines2@11(VAR NewSalesLine@1000 : Record 37;VAR OldSalesLine@1001 : Record 37;QtyType@1002 : 'General,Invoicing,Shipping';InsertSalesLine@1003 : Boolean;CalcAdCostLCY@1008 : Boolean;VAR TotalAdjCostLCY@1006 : Decimal);
    VAR
      TempVATAmountLine@1010 : TEMPORARY Record 290;
      TempVATAmountLineRemainder@1009 : TEMPORARY Record 290;
      SalesLineQty@1004 : Decimal;
      AdjCostLCY@1007 : Decimal;
      BiggestLineNo@1005 : Integer;
    BEGIN
      TotalAdjCostLCY := 0;
      TempVATAmountLineRemainder.DELETEALL;
      OldSalesLine.CalcVATAmountLines(QtyType,SalesHeader,OldSalesLine,TempVATAmountLine);
      WITH SalesHeader DO BEGIN
        GetGLSetup;
        SalesSetup.GET;
        GetCurrency;
        OldSalesLine.SETRANGE("Document Type","Document Type");
        OldSalesLine.SETRANGE("Document No.","No.");
        RoundingLineInserted := FALSE;
        IF OldSalesLine.FINDSET THEN
          REPEAT
            IF NOT RoundingLineInserted THEN
              SalesLine := OldSalesLine;
            CASE QtyType OF
              QtyType::General:
                SalesLineQty := SalesLine.Quantity;
              QtyType::Invoicing:
                SalesLineQty := SalesLine."Qty. to Invoice";
              QtyType::Shipping:
                BEGIN
                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                    SalesLineQty := SalesLine."Return Qty. to Receive"
                  ELSE
                    SalesLineQty := SalesLine."Qty. to Ship";
                END;
            END;
            DivideAmount(QtyType,SalesLineQty,TempVATAmountLine,TempVATAmountLineRemainder);
            SalesLine.Quantity := SalesLineQty;
            IF SalesLineQty <> 0 THEN BEGIN
              IF (SalesLine.Amount <> 0) AND NOT RoundingLineInserted THEN
                IF TotalSalesLine.Amount = 0 THEN
                  TotalSalesLine."VAT %" := SalesLine."VAT %"
                ELSE
                  IF TotalSalesLine."VAT %" <> SalesLine."VAT %" THEN
                    TotalSalesLine."VAT %" := 0;
              RoundAmount(SalesLineQty);

              IF (QtyType IN [QtyType::General,QtyType::Invoicing]) AND
                 NOT InsertSalesLine AND CalcAdCostLCY
              THEN BEGIN
                AdjCostLCY := CostCalcMgt.CalcSalesLineCostLCY(SalesLine,QtyType);
                TotalAdjCostLCY := TotalAdjCostLCY + GetSalesLineAdjCostLCY(SalesLine,QtyType,AdjCostLCY);
              END;

              SalesLine := TempSalesLine;
            END;
            IF InsertSalesLine THEN BEGIN
              NewSalesLine := SalesLine;
              NewSalesLine.INSERT;
            END;
            IF RoundingLineInserted THEN
              LastLineRetrieved := TRUE
            ELSE BEGIN
              BiggestLineNo := MAX(BiggestLineNo,OldSalesLine."Line No.");
              LastLineRetrieved := OldSalesLine.NEXT = 0;
              IF LastLineRetrieved AND SalesSetup."Invoice Rounding" THEN
                InvoiceRounding(TRUE,BiggestLineNo);
            END;
          UNTIL LastLineRetrieved;
      END;
    END;

    LOCAL PROCEDURE GetSalesLineAdjCostLCY@48(SalesLine2@1000 : Record 37;QtyType@1002 : 'General,Invoicing,Shipping';AdjCostLCY@1001 : Decimal) : Decimal;
    BEGIN
      WITH SalesLine2 DO BEGIN
        IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
          AdjCostLCY := -AdjCostLCY;

        CASE TRUE OF
          "Shipment No." <> '',"Return Receipt No." <> '':
            EXIT(AdjCostLCY);
          QtyType = QtyType::General:
            EXIT(ROUND("Outstanding Quantity" * "Unit Cost (LCY)") + AdjCostLCY);
          "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]:
            BEGIN
              IF "Qty. to Invoice" > "Qty. to Ship" THEN
                EXIT(ROUND("Qty. to Ship" * "Unit Cost (LCY)") + AdjCostLCY);
              EXIT(ROUND("Qty. to Invoice" * "Unit Cost (LCY)"));
            END;
          "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]:
            BEGIN
              IF "Qty. to Invoice" > "Return Qty. to Receive" THEN
                EXIT(ROUND("Return Qty. to Receive" * "Unit Cost (LCY)") + AdjCostLCY);
              EXIT(ROUND("Qty. to Invoice" * "Unit Cost (LCY)"));
            END;
        END;
      END;
    END;

    PROCEDURE TestDeleteHeader@19(SalesHeader@1000 : Record 36;VAR SalesShptHeader@1001 : Record 110;VAR SalesInvHeader@1002 : Record 112;VAR SalesCrMemoHeader@1003 : Record 114;VAR ReturnRcptHeader@1004 : Record 6660;VAR SalesInvHeaderPrePmt@1006 : Record 112;VAR SalesCrMemoHeaderPrePmt@1005 : Record 114);
    BEGIN
      WITH SalesHeader DO BEGIN
        CLEAR(SalesShptHeader);
        CLEAR(SalesInvHeader);
        CLEAR(SalesCrMemoHeader);
        CLEAR(ReturnRcptHeader);
        SalesSetup.GET;

        SourceCodeSetup.GET;
        SourceCodeSetup.TESTFIELD("Deleted Document");
        SourceCode.GET(SourceCodeSetup."Deleted Document");

        IF ("Shipping No. Series" <> '') AND ("Shipping No." <> '') THEN BEGIN
          SalesShptHeader.TRANSFERFIELDS(SalesHeader);
          SalesShptHeader."No." := "Shipping No.";
          SalesShptHeader."Posting Date" := TODAY;
          SalesShptHeader."User ID" := USERID;
          SalesShptHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Return Receipt No. Series" <> '') AND ("Return Receipt No." <> '') THEN BEGIN
          ReturnRcptHeader.TRANSFERFIELDS(SalesHeader);
          ReturnRcptHeader."No." := "Return Receipt No.";
          ReturnRcptHeader."Posting Date" := TODAY;
          ReturnRcptHeader."User ID" := USERID;
          ReturnRcptHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Posting No. Series" <> '') AND
           (("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
            ("Posting No." <> '') OR
            ("Document Type" = "Document Type"::Invoice) AND
            ("No. Series" = "Posting No. Series"))
        THEN BEGIN
          SalesInvHeader.TRANSFERFIELDS(SalesHeader);
          IF "Posting No." <> '' THEN
            SalesInvHeader."No." := "Posting No.";
          IF "Document Type" = "Document Type"::Invoice THEN BEGIN
            SalesInvHeader."Pre-Assigned No. Series" := "No. Series";
            SalesInvHeader."Pre-Assigned No." := "No.";
          END ELSE BEGIN
            SalesInvHeader."Pre-Assigned No. Series" := '';
            SalesInvHeader."Pre-Assigned No." := '';
            SalesInvHeader."Order No. Series" := "No. Series";
            SalesInvHeader."Order No." := "No.";
          END;
          SalesInvHeader."Posting Date" := TODAY;
          SalesInvHeader."User ID" := USERID;
          SalesInvHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Posting No. Series" <> '') AND
           (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
            ("Posting No." <> '') OR
            ("Document Type" = "Document Type"::"Credit Memo") AND
            ("No. Series" = "Posting No. Series"))
        THEN BEGIN
          SalesCrMemoHeader.TRANSFERFIELDS(SalesHeader);
          IF "Posting No." <> '' THEN
            SalesCrMemoHeader."No." := "Posting No.";
          SalesCrMemoHeader."Pre-Assigned No. Series" := "No. Series";
          SalesCrMemoHeader."Pre-Assigned No." := "No.";
          SalesCrMemoHeader."Posting Date" := TODAY;
          SalesCrMemoHeader."User ID" := USERID;
          SalesCrMemoHeader."Source Code" := SourceCode.Code;
        END;
        IF ("Prepayment No. Series" <> '') AND ("Prepayment No." <> '') THEN BEGIN
          TESTFIELD("Document Type","Document Type"::Order);
          SalesInvHeaderPrePmt.TRANSFERFIELDS(SalesHeader);
          SalesInvHeaderPrePmt."No." := "Prepayment No.";
          SalesInvHeaderPrePmt."Order No. Series" := "No. Series";
          SalesInvHeaderPrePmt."Prepayment Order No." := "No.";
          SalesInvHeaderPrePmt."Posting Date" := TODAY;
          SalesInvHeaderPrePmt."Pre-Assigned No. Series" := '';
          SalesInvHeaderPrePmt."Pre-Assigned No." := '';
          SalesInvHeaderPrePmt."User ID" := USERID;
          SalesInvHeaderPrePmt."Source Code" := SourceCode.Code;
          SalesInvHeaderPrePmt."Prepayment Invoice" := TRUE;
        END;

        IF ("Prepmt. Cr. Memo No. Series" <> '') AND ("Prepmt. Cr. Memo No." <> '') THEN BEGIN
          TESTFIELD("Document Type","Document Type"::Order);
          SalesCrMemoHeaderPrePmt.TRANSFERFIELDS(SalesHeader);
          SalesCrMemoHeaderPrePmt."No." := "Prepmt. Cr. Memo No.";
          SalesCrMemoHeaderPrePmt."Prepayment Order No." := "No.";
          SalesCrMemoHeaderPrePmt."Posting Date" := TODAY;
          SalesCrMemoHeaderPrePmt."Pre-Assigned No. Series" := '';
          SalesCrMemoHeaderPrePmt."Pre-Assigned No." := '';
          SalesCrMemoHeaderPrePmt."User ID" := USERID;
          SalesCrMemoHeaderPrePmt."Source Code" := SourceCode.Code;
          SalesCrMemoHeaderPrePmt."Prepayment Credit Memo" := TRUE;
        END;
      END;
    END;

    PROCEDURE DeleteHeader@18(SalesHeader@1000 : Record 36;VAR SalesShptHeader@1001 : Record 110;VAR SalesInvHeader@1002 : Record 112;VAR SalesCrMemoHeader@1003 : Record 114;VAR ReturnRcptHeader@1004 : Record 6660;VAR SalesInvHeaderPrePmt@1006 : Record 112;VAR SalesCrMemoHeaderPrePmt@1005 : Record 114);
    VAR
      SalesInvLine@1007 : Record 113;
      SalesCrMemoLine@1008 : Record 115;
      SalesShptLine@1009 : Record 111;
      ReturnRcptLine@1010 : Record 6661;
    BEGIN
      WITH SalesHeader DO BEGIN
        TestDeleteHeader(
          SalesHeader,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,
          ReturnRcptHeader,SalesInvHeaderPrePmt,SalesCrMemoHeaderPrePmt);
        IF SalesShptHeader."No." <> '' THEN BEGIN
          SalesShptHeader.INSERT;
          SalesShptLine.INIT;
          SalesShptLine."Document No." := SalesShptHeader."No.";
          SalesShptLine."Line No." := 10000;
          SalesShptLine.Description := SourceCode.Description;
          SalesShptLine.INSERT;
        END;

        IF ReturnRcptHeader."No." <> '' THEN BEGIN
          ReturnRcptHeader.INSERT;
          ReturnRcptLine.INIT;
          ReturnRcptLine."Document No." := ReturnRcptHeader."No.";
          ReturnRcptLine."Line No." := 10000;
          ReturnRcptLine.Description := SourceCode.Description;
          ReturnRcptLine.INSERT;
        END;

        IF SalesInvHeader."No." <> '' THEN BEGIN
          SalesInvHeader.INSERT;
          SalesInvLine.INIT;
          SalesInvLine."Document No." := SalesInvHeader."No.";
          SalesInvLine."Line No." := 10000;
          SalesInvLine.Description := SourceCode.Description;
          SalesInvLine.INSERT;
        END;

        IF SalesCrMemoHeader."No." <> '' THEN BEGIN
          SalesCrMemoHeader.INSERT;
          SalesCrMemoLine.INIT;
          SalesCrMemoLine."Document No." := SalesCrMemoHeader."No.";
          SalesCrMemoLine."Line No." := 10000;
          SalesCrMemoLine.Description := SourceCode.Description;
          SalesCrMemoLine.INSERT;
        END;

        IF SalesInvHeaderPrePmt."No." <> '' THEN BEGIN
          SalesInvHeaderPrePmt.INSERT;
          SalesInvLine."Document No." := SalesInvHeaderPrePmt."No.";
          SalesInvLine."Line No." := 10000;
          SalesInvLine.Description := SourceCode.Description;
          SalesInvLine.INSERT;
        END;

        IF SalesCrMemoHeaderPrePmt."No." <> '' THEN BEGIN
          SalesCrMemoHeaderPrePmt.INSERT;
          SalesCrMemoLine.INIT;
          SalesCrMemoLine."Document No." := SalesCrMemoHeaderPrePmt."No.";
          SalesCrMemoLine."Line No." := 10000;
          SalesCrMemoLine.Description := SourceCode.Description;
          SalesCrMemoLine.INSERT;
        END;
      END;
    END;

    PROCEDURE UpdateBlanketOrderLine@21(SalesLine@1000 : Record 37;Ship@1001 : Boolean;Receive@1006 : Boolean;Invoice@1002 : Boolean);
    VAR
      BlanketOrderSalesLine@1003 : Record 37;
      xBlanketOrderSalesLine@1007 : Record 37;
      ModifyLine@1004 : Boolean;
      Sign@1005 : Decimal;
    BEGIN
      IF (SalesLine."Blanket Order No." <> '') AND (SalesLine."Blanket Order Line No." <> 0) AND
         ((Ship AND (SalesLine."Qty. to Ship" <> 0)) OR
          (Receive AND (SalesLine."Return Qty. to Receive" <> 0)) OR
          (Invoice AND (SalesLine."Qty. to Invoice" <> 0)))
      THEN
        IF BlanketOrderSalesLine.GET(
             BlanketOrderSalesLine."Document Type"::"Blanket Order",SalesLine."Blanket Order No.",
             SalesLine."Blanket Order Line No.")
        THEN BEGIN
          BlanketOrderSalesLine.TESTFIELD(Type,SalesLine.Type);
          BlanketOrderSalesLine.TESTFIELD("No.",SalesLine."No.");
          BlanketOrderSalesLine.TESTFIELD("Sell-to Customer No.",SalesLine."Sell-to Customer No.");

          ModifyLine := FALSE;
          CASE SalesLine."Document Type" OF
            SalesLine."Document Type"::Order,
            SalesLine."Document Type"::Invoice:
              Sign := 1;
            SalesLine."Document Type"::"Return Order",
            SalesLine."Document Type"::"Credit Memo":
              Sign := -1;
          END;
          IF Ship AND (SalesLine."Shipment No." = '') THEN BEGIN
            xBlanketOrderSalesLine := BlanketOrderSalesLine;

            IF BlanketOrderSalesLine."Qty. per Unit of Measure" =
               SalesLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderSalesLine."Quantity Shipped" :=
                BlanketOrderSalesLine."Quantity Shipped" + Sign * SalesLine."Qty. to Ship"
            ELSE
              BlanketOrderSalesLine."Quantity Shipped" :=
                BlanketOrderSalesLine."Quantity Shipped" +
                Sign *
                ROUND(
                  (SalesLine."Qty. per Unit of Measure" /
                   BlanketOrderSalesLine."Qty. per Unit of Measure") *
                  SalesLine."Qty. to Ship",0.00001);
            BlanketOrderSalesLine."Qty. Shipped (Base)" :=
              BlanketOrderSalesLine."Qty. Shipped (Base)" + Sign * SalesLine."Qty. to Ship (Base)";
            ModifyLine := TRUE;

            AsmPost.UpdateBlanketATO(xBlanketOrderSalesLine,BlanketOrderSalesLine);
          END;
          IF Receive AND (SalesLine."Return Receipt No." = '') THEN BEGIN
            IF BlanketOrderSalesLine."Qty. per Unit of Measure" =
               SalesLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderSalesLine."Quantity Shipped" :=
                BlanketOrderSalesLine."Quantity Shipped" + Sign * SalesLine."Return Qty. to Receive"
            ELSE
              BlanketOrderSalesLine."Quantity Shipped" :=
                BlanketOrderSalesLine."Quantity Shipped" +
                Sign *
                ROUND(
                  (SalesLine."Qty. per Unit of Measure" /
                   BlanketOrderSalesLine."Qty. per Unit of Measure") *
                  SalesLine."Return Qty. to Receive",0.00001);
            BlanketOrderSalesLine."Qty. Shipped (Base)" :=
              BlanketOrderSalesLine."Qty. Shipped (Base)" + Sign * SalesLine."Return Qty. to Receive (Base)";
            ModifyLine := TRUE;
          END;
          IF Invoice THEN BEGIN
            IF BlanketOrderSalesLine."Qty. per Unit of Measure" =
               SalesLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderSalesLine."Quantity Invoiced" :=
                BlanketOrderSalesLine."Quantity Invoiced" + Sign * SalesLine."Qty. to Invoice"
            ELSE
              BlanketOrderSalesLine."Quantity Invoiced" :=
                BlanketOrderSalesLine."Quantity Invoiced" +
                Sign *
                ROUND(
                  (SalesLine."Qty. per Unit of Measure" /
                   BlanketOrderSalesLine."Qty. per Unit of Measure") *
                  SalesLine."Qty. to Invoice",0.00001);
            BlanketOrderSalesLine."Qty. Invoiced (Base)" :=
              BlanketOrderSalesLine."Qty. Invoiced (Base)" + Sign * SalesLine."Qty. to Invoice (Base)";
            ModifyLine := TRUE;
          END;

          IF ModifyLine THEN BEGIN
            BlanketOrderSalesLine.InitOutstanding;
            IF (BlanketOrderSalesLine.Quantity * BlanketOrderSalesLine."Quantity Shipped" < 0) OR
               (ABS(BlanketOrderSalesLine.Quantity) < ABS(BlanketOrderSalesLine."Quantity Shipped"))
            THEN
              BlanketOrderSalesLine.FIELDERROR(
                "Quantity Shipped",STRSUBSTNO(
                  Text018,
                  BlanketOrderSalesLine.FIELDCAPTION(Quantity)));

            IF (BlanketOrderSalesLine."Quantity (Base)" *
                BlanketOrderSalesLine."Qty. Shipped (Base)" < 0) OR
               (ABS(BlanketOrderSalesLine."Quantity (Base)") <
                ABS(BlanketOrderSalesLine."Qty. Shipped (Base)"))
            THEN
              BlanketOrderSalesLine.FIELDERROR(
                "Qty. Shipped (Base)",
                STRSUBSTNO(
                  Text018,
                  BlanketOrderSalesLine.FIELDCAPTION("Quantity (Base)")));

            BlanketOrderSalesLine.CALCFIELDS("Reserved Qty. (Base)");
            IF ABS(BlanketOrderSalesLine."Outstanding Qty. (Base)") <
               ABS(BlanketOrderSalesLine."Reserved Qty. (Base)")
            THEN
              BlanketOrderSalesLine.FIELDERROR(
                "Reserved Qty. (Base)",
                Text019);

            BlanketOrderSalesLine."Qty. to Invoice" :=
              BlanketOrderSalesLine.Quantity - BlanketOrderSalesLine."Quantity Invoiced";
            BlanketOrderSalesLine."Qty. to Ship" :=
              BlanketOrderSalesLine.Quantity - BlanketOrderSalesLine."Quantity Shipped";
            BlanketOrderSalesLine."Qty. to Invoice (Base)" :=
              BlanketOrderSalesLine."Quantity (Base)" - BlanketOrderSalesLine."Qty. Invoiced (Base)";
            BlanketOrderSalesLine."Qty. to Ship (Base)" :=
              BlanketOrderSalesLine."Quantity (Base)" - BlanketOrderSalesLine."Qty. Shipped (Base)";

            BlanketOrderSalesLine.MODIFY;
          END;
        END;
    END;

    LOCAL PROCEDURE CopyCommentLines@22(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    VAR
      SalesCommentLine@1004 : Record 44;
      SalesCommentLine2@1005 : Record 44;
    BEGIN
      SalesCommentLine.SETRANGE("Document Type",FromDocumentType);
      SalesCommentLine.SETRANGE("No.",FromNumber);
      IF SalesCommentLine.FINDSET THEN
        REPEAT
          SalesCommentLine2 := SalesCommentLine;
          SalesCommentLine2."Document Type" := ToDocumentType;
          SalesCommentLine2."No." := ToNumber;
          SalesCommentLine2.INSERT;
        UNTIL SalesCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RunGenJnlPostLine@23(VAR GenJnlLine@1000 : Record 81) : Integer;
    BEGIN
      EXIT(GenJnlPostLine.RunWithCheck(GenJnlLine));
    END;

    LOCAL PROCEDURE CheckDim@34();
    VAR
      SalesLine2@1001 : Record 37;
    BEGIN
      SalesLine2."Line No." := 0;
      CheckDimValuePosting(SalesLine2);
      CheckDimComb(SalesLine2);

      SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETFILTER(Type,'<>%1',SalesLine2.Type::" ");
      IF SalesLine2.FINDSET THEN
        REPEAT
          IF (SalesHeader.Invoice AND (SalesLine2."Qty. to Invoice" <> 0)) OR
             (SalesHeader.Ship AND (SalesLine2."Qty. to Ship" <> 0)) OR
             (SalesHeader.Receive AND (SalesLine2."Return Qty. to Receive" <> 0))
          THEN BEGIN
            CheckDimComb(SalesLine2);
            CheckDimValuePosting(SalesLine2);
          END
        UNTIL SalesLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDimComb@30(SalesLine@1000 : Record 37);
    VAR
      DimMgt@1001 : Codeunit 408;
    BEGIN
      IF SalesLine."Line No." = 0 THEN
        IF NOT DimMgt.CheckDimIDComb(SalesHeader."Dimension Set ID") THEN
          ERROR(
            Text028,
            SalesHeader."Document Type",SalesHeader."No.",DimMgt.GetDimCombErr);

      IF SalesLine."Line No." <> 0 THEN
        IF NOT DimMgt.CheckDimIDComb(SalesLine."Dimension Set ID") THEN
          ERROR(
            Text029,
            SalesHeader."Document Type",SalesHeader."No.",SalesLine."Line No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(VAR SalesLine2@1000 : Record 37);
    VAR
      DimMgt@1001 : Codeunit 408;
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      IF SalesLine2."Line No." = 0 THEN BEGIN
        TableIDArr[1] := DATABASE::Customer;
        NumberArr[1] := SalesHeader."Bill-to Customer No.";
        TableIDArr[2] := DATABASE::"Salesperson/Purchaser";
        NumberArr[2] := SalesHeader."Salesperson Code";
        TableIDArr[3] := DATABASE::Campaign;
        NumberArr[3] := SalesHeader."Campaign No.";
        TableIDArr[4] := DATABASE::"Responsibility Center";
        NumberArr[4] := SalesHeader."Responsibility Center";
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,SalesHeader."Dimension Set ID") THEN
          ERROR(
            Text030,
            SalesHeader."Document Type",SalesHeader."No.",DimMgt.GetDimValuePostingErr);
      END ELSE BEGIN
        TableIDArr[1] := DimMgt.TypeToTableID3(SalesLine2.Type);
        NumberArr[1] := SalesLine2."No.";
        TableIDArr[2] := DATABASE::Job;
        NumberArr[2] := SalesLine2."Job No.";
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,SalesLine2."Dimension Set ID") THEN
          ERROR(
            Text031,
            SalesHeader."Document Type",SalesHeader."No.",SalesLine2."Line No.",DimMgt.GetDimValuePostingErr);
      END;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5803();
    VAR
      ItemChargeAssgntSales@1000 : Record 5809;
    BEGIN
      ItemChargeAssgntSales.SETRANGE("Document Type",SalesLine."Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.",SalesLine."Document No.");
      IF NOT ItemChargeAssgntSales.ISEMPTY THEN
        ItemChargeAssgntSales.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateItemChargeAssgnt@5808();
    VAR
      ItemChargeAssgntSales@1000 : Record 5809;
    BEGIN
      WITH TempItemChargeAssgntSales DO BEGIN
        ClearItemChargeAssgntFilter;
        MARKEDONLY(TRUE);
        IF FINDSET THEN
          REPEAT
            ItemChargeAssgntSales.GET("Document Type","Document No.","Document Line No.","Line No.");
            ItemChargeAssgntSales."Qty. Assigned" :=
              ItemChargeAssgntSales."Qty. Assigned" + "Qty. to Assign";
            ItemChargeAssgntSales."Qty. to Assign" := 0;
            ItemChargeAssgntSales."Amount to Assign" := 0;
            ItemChargeAssgntSales.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateSalesOrderChargeAssgnt@5814(SalesOrderInvLine@1000 : Record 37;SalesOrderLine@1001 : Record 37);
    VAR
      SalesOrderLine2@1002 : Record 37;
      SalesOrderInvLine2@1003 : Record 37;
      SalesShptLine@1004 : Record 111;
      ReturnRcptLine@1005 : Record 6661;
    BEGIN
      WITH SalesOrderInvLine DO BEGIN
        ClearItemChargeAssgntFilter;
        TempItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
        TempItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
        TempItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
        TempItemChargeAssgntSales.MARKEDONLY(TRUE);
        IF TempItemChargeAssgntSales.FINDSET THEN
          REPEAT
            IF TempItemChargeAssgntSales."Applies-to Doc. Type" = "Document Type" THEN BEGIN
              SalesOrderInvLine2.GET(
                TempItemChargeAssgntSales."Applies-to Doc. Type",
                TempItemChargeAssgntSales."Applies-to Doc. No.",
                TempItemChargeAssgntSales."Applies-to Doc. Line No.");
              IF ((SalesOrderLine."Document Type" = SalesOrderLine."Document Type"::Order) AND
                  (SalesOrderInvLine2."Shipment No." = "Shipment No.")) OR
                 ((SalesOrderLine."Document Type" = SalesOrderLine."Document Type"::"Return Order") AND
                  (SalesOrderInvLine2."Return Receipt No." = "Return Receipt No."))
              THEN BEGIN
                IF SalesOrderLine."Document Type" = SalesOrderLine."Document Type"::Order THEN BEGIN
                  IF NOT
                     SalesShptLine.GET(SalesOrderInvLine2."Shipment No.",SalesOrderInvLine2."Shipment Line No.")
                  THEN
                    ERROR(Text013);
                  SalesOrderLine2.GET(
                    SalesOrderLine2."Document Type"::Order,
                    SalesShptLine."Order No.",SalesShptLine."Order Line No.");
                END ELSE BEGIN
                  IF NOT
                     ReturnRcptLine.GET(SalesOrderInvLine2."Return Receipt No.",SalesOrderInvLine2."Return Receipt Line No.")
                  THEN
                    ERROR(Text037);
                  SalesOrderLine2.GET(
                    SalesOrderLine2."Document Type"::"Return Order",
                    ReturnRcptLine."Return Order No.",ReturnRcptLine."Return Order Line No.");
                END;
                UpdateSalesChargeAssgntLines(
                  SalesOrderLine,
                  SalesOrderLine2."Document Type",
                  SalesOrderLine2."Document No.",
                  SalesOrderLine2."Line No.",
                  TempItemChargeAssgntSales."Qty. to Assign");
              END;
            END ELSE
              UpdateSalesChargeAssgntLines(
                SalesOrderLine,
                TempItemChargeAssgntSales."Applies-to Doc. Type",
                TempItemChargeAssgntSales."Applies-to Doc. No.",
                TempItemChargeAssgntSales."Applies-to Doc. Line No.",
                TempItemChargeAssgntSales."Qty. to Assign");
          UNTIL TempItemChargeAssgntSales.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateSalesChargeAssgntLines@5813(SalesOrderLine@1000 : Record 37;ApplToDocType@1001 : Option;ApplToDocNo@1002 : Code[20];ApplToDocLineNo@1003 : Integer;QtyToAssign@1004 : Decimal);
    VAR
      ItemChargeAssgntSales@1005 : Record 5809;
      TempItemChargeAssgntSales2@1007 : Record 5809;
      LastLineNo@1006 : Integer;
      TotalToAssign@1008 : Decimal;
    BEGIN
      ItemChargeAssgntSales.SETRANGE("Document Type",SalesOrderLine."Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.",SalesOrderLine."Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.",SalesOrderLine."Line No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",ApplToDocType);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",ApplToDocNo);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",ApplToDocLineNo);
      IF ItemChargeAssgntSales.FINDFIRST THEN BEGIN
        ItemChargeAssgntSales."Qty. Assigned" := ItemChargeAssgntSales."Qty. Assigned" + QtyToAssign;
        ItemChargeAssgntSales."Qty. to Assign" := 0;
        ItemChargeAssgntSales."Amount to Assign" := 0;
        ItemChargeAssgntSales.MODIFY;
      END ELSE BEGIN
        ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type");
        ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.");
        ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.");
        ItemChargeAssgntSales.CALCSUMS("Qty. to Assign");

        // calculate total qty. to assign of the invoice charge line
        TempItemChargeAssgntSales2.SETRANGE("Document Type",TempItemChargeAssgntSales."Document Type");
        TempItemChargeAssgntSales2.SETRANGE("Document No.",TempItemChargeAssgntSales."Document No.");
        TempItemChargeAssgntSales2.SETRANGE("Document Line No.",TempItemChargeAssgntSales."Document Line No.");
        TempItemChargeAssgntSales2.CALCSUMS("Qty. to Assign");

        TotalToAssign := ItemChargeAssgntSales."Qty. to Assign" +
          TempItemChargeAssgntSales2."Qty. to Assign";

        IF ItemChargeAssgntSales.FINDLAST THEN
          LastLineNo := ItemChargeAssgntSales."Line No.";

        IF SalesOrderLine.Quantity < TotalToAssign THEN
          REPEAT
            TotalToAssign := TotalToAssign - ItemChargeAssgntSales."Qty. to Assign";
            ItemChargeAssgntSales."Qty. to Assign" := 0;
            ItemChargeAssgntSales."Amount to Assign" := 0;
            ItemChargeAssgntSales.MODIFY;
          UNTIL (ItemChargeAssgntSales.NEXT(-1) = 0) OR
                (TotalToAssign = SalesOrderLine.Quantity);

        InsertAssocOrderCharge(
          SalesOrderLine,
          ApplToDocType,
          ApplToDocNo,
          ApplToDocLineNo,
          LastLineNo,
          TempItemChargeAssgntSales."Applies-to Doc. Line Amount");
      END;
    END;

    LOCAL PROCEDURE InsertAssocOrderCharge@45(SalesOrderLine@1000 : Record 37;ApplToDocType@1001 : Option;ApplToDocNo@1002 : Code[20];ApplToDocLineNo@1003 : Integer;LastLineNo@1004 : Integer;ApplToDocLineAmt@1005 : Decimal);
    VAR
      NewItemChargeAssgntSales@1006 : Record 5809;
    BEGIN
      WITH NewItemChargeAssgntSales DO BEGIN
        INIT;
        "Document Type" := SalesOrderLine."Document Type";
        "Document No." := SalesOrderLine."Document No.";
        "Document Line No." := SalesOrderLine."Line No.";
        "Line No." := LastLineNo + 10000;
        "Item Charge No." := TempItemChargeAssgntSales."Item Charge No.";
        "Item No." := TempItemChargeAssgntSales."Item No.";
        "Qty. Assigned" := TempItemChargeAssgntSales."Qty. to Assign";
        "Qty. to Assign" := 0;
        "Amount to Assign" := 0;
        Description := TempItemChargeAssgntSales.Description;
        "Unit Cost" := TempItemChargeAssgntSales."Unit Cost";
        "Applies-to Doc. Type" := ApplToDocType;
        "Applies-to Doc. No." := ApplToDocNo;
        "Applies-to Doc. Line No." := ApplToDocLineNo;
        "Applies-to Doc. Line Amount" := ApplToDocLineAmt;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CopyAndCheckItemCharge@5806(SalesHeader@1000 : Record 36);
    VAR
      SalesLine2@1001 : Record 37;
      SalesLine3@1002 : Record 37;
      InvoiceEverything@1004 : Boolean;
      AssignError@1005 : Boolean;
      QtyNeeded@1003 : Decimal;
    BEGIN
      TempItemChargeAssgntSales.RESET;
      TempItemChargeAssgntSales.DELETEALL;

      // Check for max qty posting
      SalesLine2.RESET;
      SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETRANGE(Type,SalesLine2.Type::"Charge (Item)");
      IF SalesLine2.ISEMPTY THEN
        EXIT;

      SalesLine2.FINDSET;
      REPEAT
        ItemChargeAssgntSales.RESET;
        ItemChargeAssgntSales.SETRANGE("Document Type",SalesLine2."Document Type");
        ItemChargeAssgntSales.SETRANGE("Document No.",SalesLine2."Document No.");
        ItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLine2."Line No.");
        ItemChargeAssgntSales.SETFILTER("Qty. to Assign",'<>0');
        IF ItemChargeAssgntSales.FINDSET THEN
          REPEAT
            TempItemChargeAssgntSales.INIT;
            TempItemChargeAssgntSales := ItemChargeAssgntSales;
            TempItemChargeAssgntSales.INSERT;
          UNTIL ItemChargeAssgntSales.NEXT = 0;

        IF SalesLine2."Qty. to Invoice" <> 0 THEN BEGIN
          SalesLine2.TESTFIELD("Job No.",'');
          SalesLine2.TESTFIELD("Job Contract Entry No.",0);
          IF (SalesLine2."Qty. to Ship" + SalesLine2."Return Qty. to Receive" <> 0) AND
             ((SalesHeader.Ship OR SalesHeader.Receive) OR
              (ABS(SalesLine2."Qty. to Invoice") >
               ABS(SalesLine2."Qty. Shipped Not Invoiced" + SalesLine2."Qty. to Ship") +
               ABS(SalesLine2."Ret. Qty. Rcd. Not Invd.(Base)" + SalesLine2."Return Qty. to Receive")))
          THEN
            SalesLine2.TESTFIELD("Line Amount");

          IF NOT SalesHeader.Ship THEN
            SalesLine2."Qty. to Ship" := 0;
          IF NOT SalesHeader.Receive THEN
            SalesLine2."Return Qty. to Receive" := 0;
          IF ABS(SalesLine2."Qty. to Invoice") >
             ABS(SalesLine2."Quantity Shipped" + SalesLine2."Qty. to Ship" +
               SalesLine2."Return Qty. Received" + SalesLine2."Return Qty. to Receive" -
               SalesLine2."Quantity Invoiced")
          THEN
            SalesLine2."Qty. to Invoice" :=
              SalesLine2."Quantity Shipped" + SalesLine2."Qty. to Ship" +
              SalesLine2."Return Qty. Received" + SalesLine2."Return Qty. to Receive" -
              SalesLine2."Quantity Invoiced";

          SalesLine2.CALCFIELDS("Qty. to Assign","Qty. Assigned");
          IF ABS(SalesLine2."Qty. to Assign" + SalesLine2."Qty. Assigned") >
             ABS(SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced")
          THEN
            ERROR(Text032,
              SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced" -
              SalesLine2."Qty. Assigned",SalesLine2.FIELDCAPTION("Document Type"),
              SalesLine2."Document Type",SalesLine2.FIELDCAPTION("Document No."),
              SalesLine2."Document No.",SalesLine2.FIELDCAPTION("Line No."),
              SalesLine2."Line No.");
          IF SalesLine2.Quantity =
             SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced"
          THEN BEGIN
            IF SalesLine2."Qty. to Assign" <> 0 THEN
              IF SalesLine2.Quantity = SalesLine2."Quantity Invoiced" THEN BEGIN
                TempItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLine2."Line No.");
                TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",SalesLine2."Document Type");
                IF TempItemChargeAssgntSales.FINDSET THEN
                  REPEAT
                    SalesLine3.GET(
                      TempItemChargeAssgntSales."Applies-to Doc. Type",
                      TempItemChargeAssgntSales."Applies-to Doc. No.",
                      TempItemChargeAssgntSales."Applies-to Doc. Line No.");
                    IF SalesLine3.Quantity = SalesLine3."Quantity Invoiced" THEN
                      ERROR(Text034,SalesLine3.TABLECAPTION,
                        SalesLine3.FIELDCAPTION("Document Type"),SalesLine3."Document Type",
                        SalesLine3.FIELDCAPTION("Document No."),SalesLine3."Document No.",
                        SalesLine3.FIELDCAPTION("Line No."),SalesLine3."Line No.");
                  UNTIL TempItemChargeAssgntSales.NEXT = 0;
              END;
            IF SalesLine2.Quantity <> SalesLine2."Qty. to Assign" + SalesLine2."Qty. Assigned" THEN
              AssignError := TRUE;
          END;

          IF (SalesLine2."Qty. to Assign" + SalesLine2."Qty. Assigned") <
             (SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced")
          THEN
            ERROR(Text052,SalesLine2."No.");

          // check if all ILEs exist
          QtyNeeded := SalesLine2."Qty. to Assign";
          TempItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLine2."Line No.");
          IF TempItemChargeAssgntSales.FINDSET THEN
            REPEAT
              IF (TempItemChargeAssgntSales."Applies-to Doc. Type" <> SalesLine2."Document Type") OR
                 (TempItemChargeAssgntSales."Applies-to Doc. No." <> SalesLine2."Document No.")
              THEN
                QtyNeeded := QtyNeeded - TempItemChargeAssgntSales."Qty. to Assign"
              ELSE BEGIN
                SalesLine3.GET(
                  TempItemChargeAssgntSales."Applies-to Doc. Type",
                  TempItemChargeAssgntSales."Applies-to Doc. No.",
                  TempItemChargeAssgntSales."Applies-to Doc. Line No.");
                IF ItemLedgerEntryExist(SalesLine3) THEN
                  QtyNeeded := QtyNeeded - TempItemChargeAssgntSales."Qty. to Assign";
              END;
            UNTIL TempItemChargeAssgntSales.NEXT = 0;

          IF QtyNeeded > 0 THEN
            ERROR(Text053,SalesLine2."No.");
        END;
      UNTIL SalesLine2.NEXT = 0;

      // Check saleslines
      IF AssignError THEN
        IF SalesHeader."Document Type" IN
           [SalesHeader."Document Type"::Invoice,SalesHeader."Document Type"::"Credit Memo"]
        THEN
          InvoiceEverything := TRUE
        ELSE BEGIN
          SalesLine2.RESET;
          SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine2.SETFILTER(Type,'%1|%2',SalesLine2.Type::Item,SalesLine2.Type::"Charge (Item)");
          IF SalesLine2.FINDSET THEN
            REPEAT
              IF SalesHeader.Ship OR SalesHeader.Receive THEN
                InvoiceEverything :=
                  SalesLine2.Quantity = SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced"
              ELSE
                InvoiceEverything :=
                  (SalesLine2.Quantity = SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced") AND
                  (SalesLine2."Qty. to Invoice" =
                   SalesLine2."Qty. Shipped Not Invoiced" + SalesLine2."Ret. Qty. Rcd. Not Invd.(Base)");
            UNTIL (SalesLine2.NEXT = 0) OR (NOT InvoiceEverything);
        END;

      IF InvoiceEverything AND AssignError THEN
        ERROR(Text033);
    END;

    LOCAL PROCEDURE ClearItemChargeAssgntFilter@27();
    BEGIN
      TempItemChargeAssgntSales.SETRANGE("Document Line No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.");
      TempItemChargeAssgntSales.MARKEDONLY(FALSE);
    END;

    LOCAL PROCEDURE GetItemChargeLine@5809(VAR ItemChargeSalesLine@1000 : Record 37);
    VAR
      SalesShptLine@1001 : Record 111;
      ReturnReceiptLine@1003 : Record 6661;
      QtyShippedNotInvd@1002 : Decimal;
      QtyReceivedNotInvd@1004 : Decimal;
    BEGIN
      WITH TempItemChargeAssgntSales DO
        IF (ItemChargeSalesLine."Document Type" <> "Document Type") OR
           (ItemChargeSalesLine."Document No." <> "Document No.") OR
           (ItemChargeSalesLine."Line No." <> "Document Line No.")
        THEN BEGIN
          ItemChargeSalesLine.GET("Document Type","Document No.","Document Line No.");
          IF NOT SalesHeader.Ship THEN
            ItemChargeSalesLine."Qty. to Ship" := 0;
          IF NOT SalesHeader.Receive THEN
            ItemChargeSalesLine."Return Qty. to Receive" := 0;
          IF ItemChargeSalesLine."Shipment No." <> '' THEN BEGIN
            SalesShptLine.GET(ItemChargeSalesLine."Shipment No.",ItemChargeSalesLine."Shipment Line No.");
            QtyShippedNotInvd := "Qty. to Assign" - "Qty. Assigned";
          END ELSE
            QtyShippedNotInvd := ItemChargeSalesLine."Quantity Shipped";
          IF ItemChargeSalesLine."Return Receipt No." <> '' THEN BEGIN
            ReturnReceiptLine.GET(ItemChargeSalesLine."Return Receipt No.",ItemChargeSalesLine."Return Receipt Line No.");
            QtyReceivedNotInvd := "Qty. to Assign" - "Qty. Assigned";
          END ELSE
            QtyReceivedNotInvd := ItemChargeSalesLine."Return Qty. Received";
          IF ABS(ItemChargeSalesLine."Qty. to Invoice") >
             ABS(QtyShippedNotInvd + ItemChargeSalesLine."Qty. to Ship" +
               QtyReceivedNotInvd + ItemChargeSalesLine."Return Qty. to Receive" -
               ItemChargeSalesLine."Quantity Invoiced")
          THEN
            ItemChargeSalesLine."Qty. to Invoice" :=
              QtyShippedNotInvd + ItemChargeSalesLine."Qty. to Ship" +
              QtyReceivedNotInvd + ItemChargeSalesLine."Return Qty. to Receive" -
              ItemChargeSalesLine."Quantity Invoiced";
        END;
    END;

    LOCAL PROCEDURE OnlyAssgntPosting@36() : Boolean;
    VAR
      SalesLine@1000 : Record 37;
      QtyLeftToAssign@1002 : Boolean;
    BEGIN
      WITH SalesHeader DO BEGIN
        ItemChargeAssgntOnly := FALSE;
        QtyLeftToAssign := FALSE;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
        IF SalesLine.FINDSET THEN
          REPEAT
            SalesLine.CALCFIELDS("Qty. Assigned");
            IF SalesLine."Quantity Invoiced" > SalesLine."Qty. Assigned" THEN
              QtyLeftToAssign := TRUE;
          UNTIL SalesLine.NEXT = 0;

        IF QtyLeftToAssign THEN
          CopyAndCheckItemCharge(SalesHeader);
        ClearItemChargeAssgntFilter;
        TempItemChargeAssgntSales.SETCURRENTKEY("Applies-to Doc. Type");
        TempItemChargeAssgntSales.SETFILTER("Applies-to Doc. Type",'<>%1',"Document Type");
        SalesLine.SETRANGE(Type);
        SalesLine.SETRANGE("Quantity Invoiced");
        SalesLine.SETFILTER("Qty. to Assign",'<>0');
        IF SalesLine.FINDSET THEN
          REPEAT
            TempItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLine."Line No.");
            ItemChargeAssgntOnly := NOT TempItemChargeAssgntSales.ISEMPTY;
          UNTIL (SalesLine.NEXT = 0) OR ItemChargeAssgntOnly
        ELSE
          ItemChargeAssgntOnly := FALSE;
      END;
      EXIT(ItemChargeAssgntOnly);
    END;

    LOCAL PROCEDURE CalcQtyToInvoice@24(QtyToHandle@1000 : Decimal;QtyToInvoice@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyToHandle) > ABS(QtyToInvoice) THEN
        EXIT(-QtyToHandle);

      EXIT(-QtyToInvoice);
    END;

    LOCAL PROCEDURE CheckWarehouse@7301(VAR SalesLine@1000 : Record 37);
    VAR
      SalesLine2@1001 : Record 37;
      WhseValidateSourceLine@1003 : Codeunit 5777;
      ShowError@1002 : Boolean;
    BEGIN
      SalesLine2.COPY(SalesLine);
      SalesLine2.SETRANGE(Type,SalesLine2.Type::Item);
      SalesLine2.SETRANGE("Drop Shipment",FALSE);
      IF SalesLine2.FINDSET THEN
        REPEAT
          GetLocation(SalesLine2."Location Code");
          CASE SalesLine2."Document Type" OF
            SalesLine2."Document Type"::Order:
              IF ((Location."Require Receive" OR Location."Require Put-away") AND
                  (SalesLine2.Quantity < 0)) OR
                 ((Location."Require Shipment" OR Location."Require Pick") AND
                  (SalesLine2.Quantity >= 0))
              THEN BEGIN
                IF Location."Directed Put-away and Pick" THEN
                  ShowError := TRUE
                ELSE
                  IF WhseValidateSourceLine.WhseLinesExist(
                       DATABASE::"Sales Line",
                       SalesLine2."Document Type",
                       SalesLine2."Document No.",
                       SalesLine2."Line No.",
                       0,
                       SalesLine2.Quantity)
                  THEN
                    ShowError := TRUE;
              END;
            SalesLine2."Document Type"::"Return Order":
              IF ((Location."Require Receive" OR Location."Require Put-away") AND
                  (SalesLine2.Quantity >= 0)) OR
                 ((Location."Require Shipment" OR Location."Require Pick") AND
                  (SalesLine2.Quantity < 0))
              THEN BEGIN
                IF Location."Directed Put-away and Pick" THEN
                  ShowError := TRUE
                ELSE
                  IF WhseValidateSourceLine.WhseLinesExist(
                       DATABASE::"Sales Line",
                       SalesLine2."Document Type",
                       SalesLine2."Document No.",
                       SalesLine2."Line No.",
                       0,
                       SalesLine2.Quantity)
                  THEN
                    ShowError := TRUE;
              END;
            SalesLine2."Document Type"::Invoice,SalesLine2."Document Type"::"Credit Memo":
              IF Location."Directed Put-away and Pick" THEN
                Location.TESTFIELD("Adjustment Bin Code");
          END;
          IF ShowError THEN
            ERROR(
              Text021,
              SalesLine2.FIELDCAPTION("Document Type"),
              SalesLine2."Document Type",
              SalesLine2.FIELDCAPTION("Document No."),
              SalesLine2."Document No.",
              SalesLine2.FIELDCAPTION("Line No."),
              SalesLine2."Line No.");
        UNTIL SalesLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateWhseJnlLine@7302(ItemJnlLine@1000 : Record 83;SalesLine@1001 : Record 37;VAR TempWhseJnlLine@1002 : TEMPORARY Record 7311);
    VAR
      WhseMgt@1003 : Codeunit 5775;
    BEGIN
      WITH SalesLine DO BEGIN
        WMSMgmt.CheckAdjmtBin(Location,ItemJnlLine.Quantity,TRUE);
        WMSMgmt.CreateWhseJnlLine(ItemJnlLine,0,TempWhseJnlLine,FALSE);
        TempWhseJnlLine."Source Type" := DATABASE::"Sales Line";
        TempWhseJnlLine."Source Subtype" := "Document Type";
        TempWhseJnlLine."Source Code" := SrcCode;
        TempWhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(TempWhseJnlLine."Source Type",TempWhseJnlLine."Source Subtype");
        TempWhseJnlLine."Source No." := "Document No.";
        TempWhseJnlLine."Source Line No." := "Line No.";
        CASE "Document Type" OF
          "Document Type"::Order:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Shipment";
          "Document Type"::Invoice:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted S. Inv.";
          "Document Type"::"Credit Memo":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted S. Cr. Memo";
          "Document Type"::"Return Order":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Rtrn. Shipment";
        END;
        TempWhseJnlLine."Reference No." := ItemJnlLine."Document No.";
      END;
    END;

    LOCAL PROCEDURE WhseHandlingRequired@7307() : Boolean;
    VAR
      WhseSetup@1000 : Record 5769;
    BEGIN
      IF (SalesLine.Type = SalesLine.Type::Item) AND
         (NOT SalesLine."Drop Shipment")
      THEN BEGIN
        IF SalesLine."Location Code" = '' THEN BEGIN
          WhseSetup.GET;
          IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN
            EXIT(WhseSetup."Require Receive");

          EXIT(WhseSetup."Require Shipment");
        END;

        GetLocation(SalesLine."Location Code");
        IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN
          EXIT(Location."Require Receive");

        EXIT(Location."Require Shipment");
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE InsertShptEntryRelation@38(VAR SalesShptLine@1002 : Record 111) : Integer;
    VAR
      ItemEntryRelation@1001 : Record 6507;
    BEGIN
      TempTrackingSpecificationInv.RESET;
      IF TempTrackingSpecificationInv.FINDSET THEN BEGIN
        REPEAT
          TempHandlingSpecification := TempTrackingSpecificationInv;
          IF TempHandlingSpecification.INSERT THEN;
        UNTIL TempTrackingSpecificationInv.NEXT = 0;
        TempTrackingSpecificationInv.DELETEALL;
      END;

      TempHandlingSpecification.RESET;
      IF TempHandlingSpecification.FINDSET THEN BEGIN
        REPEAT
          ItemEntryRelation.INIT;
          ItemEntryRelation."Item Entry No." := TempHandlingSpecification."Entry No.";
          ItemEntryRelation."Serial No." := TempHandlingSpecification."Serial No.";
          ItemEntryRelation."Lot No." := TempHandlingSpecification."Lot No.";
          ItemEntryRelation.TransferFieldsSalesShptLine(SalesShptLine);
          ItemEntryRelation.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
        EXIT(0);
      END;
      EXIT(ItemLedgShptEntryNo);
    END;

    LOCAL PROCEDURE InsertReturnEntryRelation@39(VAR ReturnRcptLine@1002 : Record 6661) : Integer;
    VAR
      ItemEntryRelation@1001 : Record 6507;
    BEGIN
      TempTrackingSpecificationInv.RESET;
      IF TempTrackingSpecificationInv.FINDSET THEN BEGIN
        REPEAT
          TempHandlingSpecification := TempTrackingSpecificationInv;
          IF TempHandlingSpecification.INSERT THEN;
        UNTIL TempTrackingSpecificationInv.NEXT = 0;
        TempTrackingSpecificationInv.DELETEALL;
      END;

      TempHandlingSpecification.RESET;
      IF TempHandlingSpecification.FINDSET THEN BEGIN
        REPEAT
          ItemEntryRelation.INIT;
          ItemEntryRelation."Item Entry No." := TempHandlingSpecification."Entry No.";
          ItemEntryRelation."Serial No." := TempHandlingSpecification."Serial No.";
          ItemEntryRelation."Lot No." := TempHandlingSpecification."Lot No.";
          ItemEntryRelation.TransferFieldsReturnRcptLine(ReturnRcptLine);
          ItemEntryRelation.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
        EXIT(0);
      END;
      EXIT(ItemLedgShptEntryNo);
    END;

    LOCAL PROCEDURE CheckTrackingSpecification@46(VAR SalesLine@1019 : Record 37);
    VAR
      SalesLineToCheck@1000 : Record 37;
      ReservationEntry@1001 : Record 337;
      ItemTrackingCode@1009 : Record 6502;
      CreateReservEntry@1004 : Codeunit 99000830;
      ItemTrackingManagement@1015 : Codeunit 6500;
      ErrorFieldCaption@1018 : Text[250];
      SignFactor@1005 : Integer;
      SalesLineQtyToHandle@1023 : Decimal;
      TrackingQtyToHandle@1003 : Decimal;
      Inbound@1010 : Boolean;
      SNRequired@1011 : Boolean;
      LotRequired@1012 : Boolean;
      SNInfoRequired@1013 : Boolean;
      LotInfoRequired@1014 : Boolean;
      CheckSalesLine@1008 : Boolean;
    BEGIN
      // if a SalesLine is posted with ItemTracking then tracked quantity must be equal
      // to posted quantity

      IF SalesHeader."Document Type" IN
         [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::"Return Order"] = FALSE
      THEN
        EXIT;

      TrackingQtyToHandle := 0;

      SalesLineToCheck.COPY(SalesLine);
      SalesLineToCheck.SETRANGE(Type,SalesLineToCheck.Type::Item);
      IF SalesHeader.Ship THEN BEGIN
        SalesLineToCheck.SETFILTER("Quantity Shipped",'<>%1',0);
        ErrorFieldCaption := SalesLineToCheck.FIELDCAPTION("Qty. to Ship");
      END ELSE BEGIN
        SalesLineToCheck.SETFILTER("Return Qty. Received",'<>%1',0);
        ErrorFieldCaption := SalesLineToCheck.FIELDCAPTION("Return Qty. to Receive");
      END;

      IF SalesLineToCheck.FINDSET THEN BEGIN
        ReservationEntry."Source Type" := DATABASE::"Sales Line";
        ReservationEntry."Source Subtype" := SalesHeader."Document Type";
        SignFactor := CreateReservEntry.SignFactor(ReservationEntry);
        REPEAT
          // Only Item where no SerialNo or LotNo is required
          GetItem(SalesLineToCheck);
          IF Item."Item Tracking Code" <> '' THEN BEGIN
            Inbound := (SalesLineToCheck.Quantity * SignFactor) > 0;
            ItemTrackingCode.Code := Item."Item Tracking Code";
            ItemTrackingManagement.GetItemTrackingSettings(ItemTrackingCode,
              ItemJnlLine."Entry Type"::Sale,
              Inbound,
              SNRequired,
              LotRequired,
              SNInfoRequired,
              LotInfoRequired);
            CheckSalesLine := (SNRequired = FALSE) AND (LotRequired = FALSE);
            IF CheckSalesLine THEN
              CheckSalesLine := GetTrackingQuantities(SalesLineToCheck,0,TrackingQtyToHandle);
          END ELSE
            CheckSalesLine := FALSE;

          TrackingQtyToHandle := 0;

          IF CheckSalesLine THEN BEGIN
            GetTrackingQuantities(SalesLineToCheck,1,TrackingQtyToHandle);
            TrackingQtyToHandle := TrackingQtyToHandle * SignFactor;
            IF SalesHeader.Ship THEN
              SalesLineQtyToHandle := SalesLineToCheck."Qty. to Ship (Base)"
            ELSE
              SalesLineQtyToHandle := SalesLineToCheck."Return Qty. to Receive (Base)";
            IF TrackingQtyToHandle <> SalesLineQtyToHandle THEN
              ERROR(STRSUBSTNO(Text046,ErrorFieldCaption));
          END;
        UNTIL SalesLineToCheck.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetTrackingQuantities@47(SalesLine@1000 : Record 37;FunctionType@1002 : 'CheckTrackingExists,GetQty';VAR TrackingQtyToHandle@1003 : Decimal) : Boolean;
    VAR
      TrackingSpecification@1004 : Record 336;
      ReservEntry@1001 : Record 337;
    BEGIN
      WITH TrackingSpecification DO BEGIN
        SETCURRENTKEY("Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype",SalesLine."Document Type");
        SETRANGE("Source ID",SalesLine."Document No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETRANGE("Source Ref. No.",SalesLine."Line No.");
      END;
      WITH ReservEntry DO BEGIN
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line");
        SETRANGE("Source ID",SalesLine."Document No.");
        SETRANGE("Source Ref. No.",SalesLine."Line No.");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype",SalesLine."Document Type");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
      END;

      CASE FunctionType OF
        FunctionType::CheckTrackingExists:
          BEGIN
            TrackingSpecification.SETRANGE(Correction,FALSE);
            IF NOT TrackingSpecification.ISEMPTY THEN
              EXIT(TRUE);
            ReservEntry.SETFILTER("Serial No.",'<>%1','');
            IF NOT ReservEntry.ISEMPTY THEN
              EXIT(TRUE);
            ReservEntry.SETRANGE("Serial No.");
            ReservEntry.SETFILTER("Lot No.",'<>%1','');
            IF NOT ReservEntry.ISEMPTY THEN
              EXIT(TRUE);
          END;
        FunctionType::GetQty:
          BEGIN
            IF ReservEntry.FINDSET THEN
              REPEAT
                IF (ReservEntry."Lot No." <> '') OR (ReservEntry."Serial No." <> '') THEN
                  TrackingQtyToHandle := TrackingQtyToHandle + ReservEntry."Qty. to Handle (Base)";
              UNTIL ReservEntry.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE SaveInvoiceSpecification@37(VAR TempInvoicingSpecification@1000 : TEMPORARY Record 336);
    BEGIN
      TempInvoicingSpecification.RESET;
      IF TempInvoicingSpecification.FINDSET THEN BEGIN
        REPEAT
          TempInvoicingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
          TempTrackingSpecification := TempInvoicingSpecification;
          TempTrackingSpecification."Buffer Status" := TempTrackingSpecification."Buffer Status"::MODIFY;
          IF NOT TempTrackingSpecification.INSERT THEN BEGIN
            TempTrackingSpecification.GET(TempInvoicingSpecification."Entry No.");
            TempTrackingSpecification."Qty. to Invoice (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            IF TempInvoicingSpecification."Qty. to Invoice (Base)" = TempInvoicingSpecification."Quantity Invoiced (Base)" THEN
              TempTrackingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Quantity Invoiced (Base)"
            ELSE
              TempTrackingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            TempTrackingSpecification."Qty. to Invoice" += TempInvoicingSpecification."Qty. to Invoice";
            TempTrackingSpecification.MODIFY;
          END;
        UNTIL TempInvoicingSpecification.NEXT = 0;
        TempInvoicingSpecification.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE InsertTrackingSpecification@35();
    VAR
      TrackingSpecification@1000 : Record 336;
    BEGIN
      TempTrackingSpecification.RESET;
      IF TempTrackingSpecification.FINDSET THEN BEGIN
        REPEAT
          TrackingSpecification := TempTrackingSpecification;
          TrackingSpecification."Buffer Status" := 0;
          TrackingSpecification.Correction := FALSE;
          TrackingSpecification.InitQtyToShip;
          TrackingSpecification."Quantity actual Handled (Base)" := 0;
          IF TempTrackingSpecification."Buffer Status" = TempTrackingSpecification."Buffer Status"::MODIFY THEN
            TrackingSpecification.MODIFY
          ELSE
            TrackingSpecification.INSERT;
        UNTIL TempTrackingSpecification.NEXT = 0;
        TempTrackingSpecification.DELETEALL;
      END;

      ReserveSalesLine.UpdateItemTrackingAfterPosting(SalesHeader);
    END;

    LOCAL PROCEDURE InsertValueEntryRelation@40();
    VAR
      ValueEntryRelation@1000 : Record 6508;
    BEGIN
      TempValueEntryRelation.RESET;
      IF TempValueEntryRelation.FINDSET THEN BEGIN
        REPEAT
          ValueEntryRelation := TempValueEntryRelation;
          ValueEntryRelation.INSERT;
        UNTIL TempValueEntryRelation.NEXT = 0;
        TempValueEntryRelation.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE PostItemCharge@42(VAR SalesLine@1005 : Record 37;ItemEntryNo@1004 : Integer;QuantityBase@1003 : Decimal;AmountToAssign@1002 : Decimal;QtyToAssign@1001 : Decimal);
    VAR
      DummyTrackingSpecification@1000 : Record 336;
      SalesLineToPost@1006 : Record 37;
      CurrExchRate@1007 : Record 330;
      TotalChargeAmt@1008 : Decimal;
      TotalChargeAmtLCY@1009 : Decimal;
    BEGIN
      WITH TempItemChargeAssgntSales DO BEGIN
        SalesLineToPost := SalesLine;
        SalesLineToPost."No." := "Item No.";
        SalesLineToPost."Appl.-to Item Entry" := ItemEntryNo;
        IF NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN
          SalesLineToPost.Amount := -AmountToAssign
        ELSE
          SalesLineToPost.Amount := AmountToAssign;

        IF SalesLineToPost."Currency Code" <> '' THEN
          SalesLineToPost."Unit Cost" := ROUND(
              -SalesLineToPost.Amount / QuantityBase,Currency."Unit-Amount Rounding Precision")
        ELSE
          SalesLineToPost."Unit Cost" := ROUND(
              -SalesLineToPost.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");
        TotalChargeAmt := TotalChargeAmt + SalesLineToPost.Amount;

        IF SalesHeader."Currency Code" <> '' THEN
          SalesLineToPost.Amount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              UseDate,SalesHeader."Currency Code",TotalChargeAmt,SalesHeader."Currency Factor");
        SalesLineToPost."Inv. Discount Amount" := ROUND(
            SalesLine."Inv. Discount Amount" / SalesLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");
        SalesLineToPost."Line Discount Amount" := ROUND(
            SalesLine."Line Discount Amount" / SalesLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");
        SalesLineToPost."Line Amount" := ROUND(
            SalesLine."Line Amount" / SalesLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");
        SalesLine."Inv. Discount Amount" := SalesLine."Inv. Discount Amount" - SalesLineToPost."Inv. Discount Amount";
        SalesLine."Line Discount Amount" := SalesLine."Line Discount Amount" - SalesLineToPost."Line Discount Amount";
        SalesLine."Line Amount" := SalesLine."Line Amount" - SalesLineToPost."Line Amount";
        SalesLine.Quantity := SalesLine.Quantity - QtyToAssign;
        SalesLineToPost.Amount := ROUND(SalesLineToPost.Amount,GLSetup."Amount Rounding Precision") - TotalChargeAmtLCY;
        IF SalesHeader."Currency Code" <> '' THEN
          TotalChargeAmtLCY := TotalChargeAmtLCY + SalesLineToPost.Amount;
        SalesLineToPost."Unit Cost (LCY)" := ROUND(
            SalesLineToPost.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");
        UpdateSalesLineDimSetIDFromAppliedEntry(SalesLineToPost,SalesLine);
        SalesLineToPost."Line No." := "Document Line No.";
        PostItemJnlLine(
          SalesLineToPost,
          0,0,-QuantityBase,-QuantityBase,
          SalesLineToPost."Appl.-to Item Entry",
          "Item Charge No.",DummyTrackingSpecification,FALSE);
      END;
    END;

    LOCAL PROCEDURE SaveTempWhseSplitSpec@31(VAR SalesLine3@1000 : Record 37);
    BEGIN
      TempWhseSplitSpecification.RESET;
      TempWhseSplitSpecification.DELETEALL;
      IF TempHandlingSpecification.FINDSET THEN
        REPEAT
          TempWhseSplitSpecification := TempHandlingSpecification;
          TempWhseSplitSpecification."Source Type" := DATABASE::"Sales Line";
          TempWhseSplitSpecification."Source Subtype" := SalesLine3."Document Type";
          TempWhseSplitSpecification."Source ID" := SalesLine3."Document No.";
          TempWhseSplitSpecification."Source Ref. No." := SalesLine3."Line No.";
          TempWhseSplitSpecification.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferReservToItemJnlLine@32(VAR SalesOrderLine@1000 : Record 37;VAR ItemJnlLine@1001 : Record 83;QtyToBeShippedBase@1002 : Decimal;VAR TempTrackingSpecification2@1003 : TEMPORARY Record 336;VAR CheckApplFromItemEntry@1004 : Boolean);
    BEGIN
      // Handle Item Tracking and reservations, also on drop shipment
      IF QtyToBeShippedBase = 0 THEN
        EXIT;

      CLEAR(ReserveSalesLine);
      IF NOT SalesOrderLine."Drop Shipment" THEN
        IF NOT HasSpecificTracking(SalesOrderLine."No.") AND HasInvtPickLine(SalesOrderLine) THEN
          ReserveSalesLine.TransferSalesLineToItemJnlLine(
            SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,TRUE)
        ELSE
          ReserveSalesLine.TransferSalesLineToItemJnlLine(
            SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,FALSE)
      ELSE BEGIN
        TempTrackingSpecification2.RESET;
        TempTrackingSpecification2.SETRANGE("Source Type",DATABASE::"Purchase Line");
        TempTrackingSpecification2.SETRANGE("Source Subtype",1);
        TempTrackingSpecification2.SETRANGE("Source ID",SalesOrderLine."Purchase Order No.");
        TempTrackingSpecification2.SETRANGE("Source Batch Name",'');
        TempTrackingSpecification2.SETRANGE("Source Prod. Order Line",0);
        TempTrackingSpecification2.SETRANGE("Source Ref. No.",SalesOrderLine."Purch. Order Line No.");
        IF TempTrackingSpecification2.ISEMPTY THEN
          ReserveSalesLine.TransferSalesLineToItemJnlLine(
            SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,FALSE)
        ELSE BEGIN
          ReserveSalesLine.SetApplySpecificItemTracking(TRUE);
          ReserveSalesLine.SetOverruleItemTracking(TRUE);
          ReserveSalesLine.SetItemTrkgAlreadyOverruled(ItemTrkgAlreadyOverruled);
          TempTrackingSpecification2.FINDSET;
          IF TempTrackingSpecification2."Quantity (Base)" / QtyToBeShippedBase < 0 THEN
            ERROR(Text043);
          REPEAT
            ItemJnlLine."Serial No." := TempTrackingSpecification2."Serial No.";
            ItemJnlLine."Lot No." := TempTrackingSpecification2."Lot No.";
            ItemJnlLine."Applies-to Entry" := TempTrackingSpecification2."Item Ledger Entry No.";
            ReserveSalesLine.TransferSalesLineToItemJnlLine(SalesOrderLine,ItemJnlLine,
              TempTrackingSpecification2."Quantity (Base)",CheckApplFromItemEntry,FALSE);
          UNTIL TempTrackingSpecification2.NEXT = 0;
          ItemJnlLine."Serial No." := '';
          ItemJnlLine."Lot No." := '';
          ItemJnlLine."Applies-to Entry" := 0;
        END;
      END;
    END;

    LOCAL PROCEDURE TransferReservFromPurchLine@41(VAR PurchOrderLine@1000 : Record 39;VAR ItemJnlLine@1001 : Record 83;QtyToBeShippedBase@1002 : Decimal);
    VAR
      ReservEntry@1004 : Record 337;
      TempTrackingSpecification2@1005 : TEMPORARY Record 336;
      ReservePurchLine@1003 : Codeunit 99000834;
      RemainingQuantity@1006 : Decimal;
      CheckApplToItemEntry@1007 : Boolean;
    BEGIN
      // Handle Item Tracking on Drop Shipment
      ItemTrkgAlreadyOverruled := FALSE;
      IF QtyToBeShippedBase = 0 THEN
        EXIT;

      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line");
      ReservEntry.SETRANGE("Source ID",SalesLine."Document No.");
      ReservEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
      ReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
      ReservEntry.SETRANGE("Source Subtype",SalesLine."Document Type");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      ReservEntry.SETFILTER("Qty. to Handle (Base)",'<>0');
      IF NOT ReservEntry.ISEMPTY THEN
        ItemTrackingMgt.SumUpItemTracking(ReservEntry,TempTrackingSpecification2,FALSE,TRUE);
      TempTrackingSpecification2.SETFILTER("Qty. to Handle (Base)",'<>0');
      IF TempTrackingSpecification2.ISEMPTY THEN
        ReservePurchLine.TransferPurchLineToItemJnlLine(
          PurchOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplToItemEntry)
      ELSE BEGIN
        ReservePurchLine.SetOverruleItemTracking(TRUE);
        ItemTrkgAlreadyOverruled := TRUE;
        TempTrackingSpecification2.FINDSET;
        IF -TempTrackingSpecification2."Quantity (Base)" / QtyToBeShippedBase < 0 THEN
          ERROR(Text043);
        REPEAT
          ItemJnlLine."Serial No." := TempTrackingSpecification2."Serial No.";
          ItemJnlLine."Lot No." := TempTrackingSpecification2."Lot No.";
          RemainingQuantity :=
            ReservePurchLine.TransferPurchLineToItemJnlLine(
              PurchOrderLine,ItemJnlLine,
              -TempTrackingSpecification2."Qty. to Handle (Base)",CheckApplToItemEntry);
          IF RemainingQuantity <> 0 THEN
            ERROR(Text044);
        UNTIL TempTrackingSpecification2.NEXT = 0;
        ItemJnlLine."Serial No." := '';
        ItemJnlLine."Lot No." := '';
        ItemJnlLine."Applies-to Entry" := 0;
      END;
    END;

    PROCEDURE SetWhseRcptHeader@43(VAR WhseRcptHeader2@1000 : Record 7316);
    BEGIN
      WhseRcptHeader := WhseRcptHeader2;
      TempWhseRcptHeader := WhseRcptHeader;
      TempWhseRcptHeader.INSERT;
    END;

    PROCEDURE SetWhseShptHeader@44(VAR WhseShptHeader2@1000 : Record 7320);
    BEGIN
      WhseShptHeader := WhseShptHeader2;
      TempWhseShptHeader := WhseShptHeader;
      TempWhseShptHeader.INSERT;
    END;

    LOCAL PROCEDURE CopyPurchCommentLines@148(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    VAR
      PurchCommentLine@1004 : Record 43;
      PurchCommentLine2@1005 : Record 43;
    BEGIN
      PurchCommentLine.SETRANGE("Document Type",FromDocumentType);
      PurchCommentLine.SETRANGE("No.",FromNumber);
      IF PurchCommentLine.FINDSET THEN
        REPEAT
          PurchCommentLine2 := PurchCommentLine;
          PurchCommentLine2."Document Type" := ToDocumentType;
          PurchCommentLine2."No." := ToNumber;
          PurchCommentLine2.INSERT;
        UNTIL PurchCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetItem@49(SalesLine@1000 : Record 37);
    BEGIN
      WITH SalesLine DO BEGIN
        TESTFIELD(Type,Type::Item);
        TESTFIELD("No.");
        IF "No." <> Item."No." THEN
          Item.GET("No.");
      END;
    END;

    LOCAL PROCEDURE GetNextSalesline@50(VAR SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      IF NOT SalesLinesProcessed THEN
        IF SalesLine.NEXT = 1 THEN
          EXIT(FALSE);
      SalesLinesProcessed := TRUE;
      IF TempPrepaymentSalesLine.FIND('-') THEN BEGIN
        SalesLine := TempPrepaymentSalesLine;
        TempPrepaymentSalesLine.DELETE;
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreatePrepaymentLines@51(SalesHeader@1003 : Record 36;VAR TempPrepmtSalesLine@1004 : Record 37;CompleteFunctionality@1009 : Boolean);
    VAR
      GLAcc@1002 : Record 15;
      SalesLine@1000 : Record 37;
      TempExtTextLine@1012 : TEMPORARY Record 280;
      GenPostingSetup@1005 : Record 252;
      TransferExtText@1011 : Codeunit 378;
      NextLineNo@1001 : Integer;
      Fraction@1008 : Decimal;
      VATDifference@1015 : Decimal;
      TempLineFound@1010 : Boolean;
      PrePmtTestRun@1014 : Boolean;
      PrepmtAmtToDeduct@1016 : Decimal;
    BEGIN
      GetGLSetup;
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        IF NOT FIND('+') THEN
          EXIT;
        NextLineNo := "Line No." + 10000;
        SETFILTER(Quantity,'>0');
        SETFILTER("Qty. to Invoice",'>0');
        TempPrepmtSalesLine.SetHasBeenShown;
        IF FIND('-') THEN
          REPEAT
            IF CompleteFunctionality THEN
              IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN BEGIN
                IF NOT SalesHeader.Ship AND ("Qty. to Invoice" = Quantity - "Quantity Invoiced") THEN
                  IF "Qty. Shipped Not Invoiced" < "Qty. to Invoice" THEN
                    VALIDATE("Qty. to Invoice","Qty. Shipped Not Invoiced");
                Fraction := ("Qty. to Invoice" + "Quantity Invoiced") / Quantity;

                IF "Prepayment %" <> 100 THEN
                  CASE TRUE OF
                    ("Prepmt Amt to Deduct" <> 0) AND
                    ("Prepmt Amt to Deduct" > ROUND(Fraction * "Line Amount",Currency."Amount Rounding Precision")):
                      FIELDERROR(
                        "Prepmt Amt to Deduct",
                        STRSUBSTNO(Text047,
                          ROUND(Fraction * "Line Amount",Currency."Amount Rounding Precision")));
                    ("Prepmt. Amt. Inv." <> 0) AND
                    (ROUND((1 - Fraction) * "Line Amount",Currency."Amount Rounding Precision") <
                     ROUND(
                       ROUND(
                         ROUND("Unit Price" * (Quantity - "Quantity Invoiced" - "Qty. to Invoice"),Currency."Amount Rounding Precision") *
                         (1 - ("Line Discount %" / 100)),Currency."Amount Rounding Precision") *
                       "Prepayment %" / 100,Currency."Amount Rounding Precision")):
                      FIELDERROR(
                        "Prepmt Amt to Deduct",
                        STRSUBSTNO(Text048,
                          ROUND(
                            "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" - (1 - Fraction) * "Line Amount",
                            Currency."Amount Rounding Precision")));
                  END;
              END ELSE
                IF NOT PrePmtTestRun THEN BEGIN
                  TestGetShipmentPPmtAmtToDeduct(SalesHeader);
                  PrePmtTestRun := TRUE;
                END;
            IF "Prepmt Amt to Deduct" <> 0 THEN BEGIN
              IF ("Gen. Bus. Posting Group" <> GenPostingSetup."Gen. Bus. Posting Group") OR
                 ("Gen. Prod. Posting Group" <> GenPostingSetup."Gen. Prod. Posting Group")
              THEN BEGIN
                GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                GenPostingSetup.TESTFIELD("Sales Prepayments Account");
              END;
              GLAcc.GET(GenPostingSetup."Sales Prepayments Account");
              TempLineFound := FALSE;
              IF SalesHeader."Compress Prepayment" THEN BEGIN
                TempPrepmtSalesLine.SETRANGE("No.",GLAcc."No.");
                TempPrepmtSalesLine.SETRANGE("Dimension Set ID","Dimension Set ID");
                TempLineFound := TempPrepmtSalesLine.FINDFIRST;
              END;
              IF TempLineFound THEN BEGIN
                PrepmtAmtToDeduct :=
                  TempPrepmtSalesLine."Prepmt Amt to Deduct" +
                  InsertedPrepmtVATBaseToDeduct(SalesLine,TempPrepmtSalesLine."Line No.",TempPrepmtSalesLine."Unit Price");
                VATDifference := TempPrepmtSalesLine."VAT Difference";
                TempPrepmtSalesLine.VALIDATE(
                  "Unit Price",TempPrepmtSalesLine."Unit Price" + "Prepmt Amt to Deduct");
                TempPrepmtSalesLine.VALIDATE("VAT Difference",VATDifference - "Prepmt VAT Diff. to Deduct");
                TempPrepmtSalesLine."Prepmt Amt to Deduct" := PrepmtAmtToDeduct;
                IF "Prepayment %" < TempPrepmtSalesLine."Prepayment %" THEN
                  TempPrepmtSalesLine."Prepayment %" := "Prepayment %";
                TempPrepmtSalesLine.MODIFY;
              END ELSE BEGIN
                TempPrepmtSalesLine.INIT;
                TempPrepmtSalesLine."Document Type" := SalesHeader."Document Type";
                TempPrepmtSalesLine."Document No." := SalesHeader."No.";
                TempPrepmtSalesLine."Line No." := 0;
                TempPrepmtSalesLine."System-Created Entry" := TRUE;
                IF CompleteFunctionality THEN
                  TempPrepmtSalesLine.VALIDATE(Type,TempPrepmtSalesLine.Type::"G/L Account")
                ELSE
                  TempPrepmtSalesLine.Type := TempPrepmtSalesLine.Type::"G/L Account";
                TempPrepmtSalesLine.VALIDATE("No.",GenPostingSetup."Sales Prepayments Account");
                TempPrepmtSalesLine.VALIDATE(Quantity,-1);
                TempPrepmtSalesLine."Qty. to Ship" := TempPrepmtSalesLine.Quantity;
                TempPrepmtSalesLine."Qty. to Invoice" := TempPrepmtSalesLine.Quantity;
                PrepmtAmtToDeduct := InsertedPrepmtVATBaseToDeduct(SalesLine,NextLineNo,0);
                TempPrepmtSalesLine.VALIDATE("Unit Price","Prepmt Amt to Deduct");
                TempPrepmtSalesLine.VALIDATE("VAT Difference",-"Prepmt VAT Diff. to Deduct");
                TempPrepmtSalesLine."Prepmt Amt to Deduct" := PrepmtAmtToDeduct;
                TempPrepmtSalesLine."Prepayment %" := "Prepayment %";
                TempPrepmtSalesLine."Prepayment Line" := TRUE;
                TempPrepmtSalesLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                TempPrepmtSalesLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                TempPrepmtSalesLine."Dimension Set ID" := "Dimension Set ID";
                TempPrepmtSalesLine."Line No." := NextLineNo;
                NextLineNo := NextLineNo + 10000;
                TempPrepmtSalesLine.INSERT;

                TransferExtText.PrepmtGetAnyExtText(
                  TempPrepmtSalesLine."No.",DATABASE::"Sales Invoice Line",
                  SalesHeader."Document Date",SalesHeader."Language Code",TempExtTextLine);
                IF TempExtTextLine.FIND('-') THEN
                  REPEAT
                    TempPrepmtSalesLine.INIT;
                    TempPrepmtSalesLine.Description := TempExtTextLine.Text;
                    TempPrepmtSalesLine."System-Created Entry" := TRUE;
                    TempPrepmtSalesLine."Prepayment Line" := TRUE;
                    TempPrepmtSalesLine."Line No." := NextLineNo;
                    NextLineNo := NextLineNo + 10000;
                    TempPrepmtSalesLine.INSERT;
                  UNTIL TempExtTextLine.NEXT = 0;
              END;
            END;
          UNTIL NEXT = 0
      END;
      DividePrepmtAmountLCY(TempPrepmtSalesLine,SalesHeader);
    END;

    LOCAL PROCEDURE InsertedPrepmtVATBaseToDeduct@82(SalesLine@1000 : Record 37;PrepmtLineNo@1001 : Integer;TotalPrepmtAmtToDeduct@1002 : Decimal) : Decimal;
    VAR
      PrepmtVATBaseToDeduct@1003 : Decimal;
    BEGIN
      WITH SalesLine DO BEGIN
        IF SalesHeader."Prices Including VAT" THEN
          PrepmtVATBaseToDeduct :=
            ROUND(
              (TotalPrepmtAmtToDeduct + "Prepmt Amt to Deduct") / (1 + "Prepayment VAT %" / 100),
              Currency."Amount Rounding Precision") -
            ROUND(
              TotalPrepmtAmtToDeduct / (1 + "Prepayment VAT %" / 100),
              Currency."Amount Rounding Precision")
        ELSE
          PrepmtVATBaseToDeduct := "Prepmt Amt to Deduct";
      END;
      WITH TempPrepmtDeductLCYSalesLine DO BEGIN
        TempPrepmtDeductLCYSalesLine := SalesLine;
        IF "Document Type" = "Document Type"::Order THEN
          "Qty. to Invoice" := GetQtyToInvoice(SalesLine)
        ELSE
          GetLineDataFromOrder(TempPrepmtDeductLCYSalesLine);
        CalcPrepaymentToDeduct;
        "Line Amount" := GetLineAmountToHandle("Qty. to Invoice");
        "Attached to Line No." := PrepmtLineNo;
        "VAT Base Amount" := PrepmtVATBaseToDeduct;
        INSERT;
      END;
      EXIT(PrepmtVATBaseToDeduct);
    END;

    LOCAL PROCEDURE DividePrepmtAmountLCY@83(VAR PrepmtSalesLine@1000 : Record 37;SalesHeader@1006 : Record 36);
    VAR
      CurrExchRate@1001 : Record 330;
      ActualCurrencyFactor@1002 : Decimal;
    BEGIN
      WITH PrepmtSalesLine DO BEGIN
        RESET;
        SETFILTER(Type,'<>%1',Type::" ");
        IF FINDSET THEN
          REPEAT
            IF SalesHeader."Currency Code" <> '' THEN
              ActualCurrencyFactor :=
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    SalesHeader."Posting Date",
                    SalesHeader."Currency Code",
                    "Prepmt Amt to Deduct",
                    SalesHeader."Currency Factor")) /
                "Prepmt Amt to Deduct"
            ELSE
              ActualCurrencyFactor := 1;

            UpdatePrepmtAmountInvBuf("Line No.",ActualCurrencyFactor);
          UNTIL NEXT = 0;
        RESET;
      END;
    END;

    LOCAL PROCEDURE UpdatePrepmtAmountInvBuf@92(PrepmtSalesLineNo@1000 : Integer;CurrencyFactor@1004 : Decimal);
    VAR
      PrepmtAmtRemainder@1002 : Decimal;
    BEGIN
      WITH TempPrepmtDeductLCYSalesLine DO BEGIN
        RESET;
        SETRANGE("Attached to Line No.",PrepmtSalesLineNo);
        IF FINDSET(TRUE) THEN
          REPEAT
            "Prepmt. Amount Inv. (LCY)" :=
              CalcRoundedAmount(CurrencyFactor * "VAT Base Amount",PrepmtAmtRemainder);
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AdjustPrepmtAmountLCY@84(VAR PrepmtSalesLine@1000 : Record 37);
    VAR
      SalesLine@1005 : Record 37;
      SalesInvoiceLine@1013 : Record 37;
      DeductionFactor@1001 : Decimal;
      PrepmtVATPart@1009 : Decimal;
      PrepmtVATAmtRemainder@1010 : Decimal;
      TotalRoundingAmount@1011 : ARRAY [2] OF Decimal;
      TotalPrepmtAmount@1002 : ARRAY [2] OF Decimal;
      FinalInvoice@1003 : Boolean;
      PricesInclVATRoundingAmount@1004 : ARRAY [2] OF Decimal;
    BEGIN
      IF PrepmtSalesLine."Prepayment Line" THEN BEGIN
        PrepmtVATPart :=
          (PrepmtSalesLine."Amount Including VAT" - PrepmtSalesLine.Amount) / PrepmtSalesLine."Unit Price";

        WITH TempPrepmtDeductLCYSalesLine DO BEGIN
          RESET;
          SETRANGE("Attached to Line No.",PrepmtSalesLine."Line No.");
          IF FINDSET(TRUE) THEN BEGIN
            FinalInvoice := IsFinalInvoice;
            REPEAT
              SalesLine := TempPrepmtDeductLCYSalesLine;
              SalesLine.FIND;
              IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                SalesInvoiceLine := SalesLine;
                GetSalesOrderLine(SalesLine,SalesInvoiceLine);
                SalesLine."Qty. to Invoice" := SalesInvoiceLine."Qty. to Invoice";
              END;
              IF SalesLine."Qty. to Invoice" <> "Qty. to Invoice" THEN
                SalesLine."Prepmt Amt to Deduct" := CalcPrepmtAmtToDeduct(SalesLine);
              DeductionFactor :=
                SalesLine."Prepmt Amt to Deduct" /
                (SalesLine."Prepmt. Amt. Inv." - SalesLine."Prepmt Amt Deducted");

              "Prepmt. VAT Amount Inv. (LCY)" :=
                CalcRoundedAmount(SalesLine."Prepmt Amt to Deduct" * PrepmtVATPart,PrepmtVATAmtRemainder);
              IF ("Prepayment %" <> 100) OR IsFinalInvoice THEN
                CalcPrepmtRoundingAmounts(TempPrepmtDeductLCYSalesLine,SalesLine,DeductionFactor,TotalRoundingAmount);
              MODIFY;

              IF SalesHeader."Prices Including VAT" THEN
                IF (("Prepayment %" <> 100) OR IsFinalInvoice) AND (DeductionFactor = 1) THEN BEGIN
                  PricesInclVATRoundingAmount[1] := TotalRoundingAmount[1];
                  PricesInclVATRoundingAmount[2] := TotalRoundingAmount[2];
                END;

              IF "VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT" THEN
                TotalPrepmtAmount[1] += "Prepmt. Amount Inv. (LCY)";
              TotalPrepmtAmount[2] += "Prepmt. VAT Amount Inv. (LCY)";
              FinalInvoice := FinalInvoice AND IsFinalInvoice;
            UNTIL NEXT = 0;
          END;
        END;

        UpdatePrepmtSalesLineWithRounding(
          PrepmtSalesLine,TotalRoundingAmount,TotalPrepmtAmount,
          FinalInvoice,PricesInclVATRoundingAmount);
      END;
    END;

    LOCAL PROCEDURE CalcPrepmtAmtToDeduct@93(SalesLine@1000 : Record 37) : Decimal;
    BEGIN
      WITH SalesLine DO BEGIN
        "Qty. to Invoice" := GetQtyToInvoice(SalesLine);
        CalcPrepaymentToDeduct;
        EXIT("Prepmt Amt to Deduct");
      END;
    END;

    LOCAL PROCEDURE GetQtyToInvoice@100(SalesLine@1000 : Record 37) : Decimal;
    VAR
      AllowedQtyToInvoice@1001 : Decimal;
    BEGIN
      WITH SalesLine DO BEGIN
        AllowedQtyToInvoice := "Qty. Shipped Not Invoiced";
        IF SalesHeader.Ship THEN
          AllowedQtyToInvoice := AllowedQtyToInvoice + "Qty. to Ship";
        IF "Qty. to Invoice" > AllowedQtyToInvoice THEN
          EXIT(AllowedQtyToInvoice);
        EXIT("Qty. to Invoice");
      END;
    END;

    LOCAL PROCEDURE GetLineDataFromOrder@94(VAR SalesLine@1000 : Record 37);
    VAR
      SalesShptLine@1001 : Record 111;
      SalesOrderLine@1002 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SalesShptLine.GET("Shipment No.","Shipment Line No.");
        SalesOrderLine.GET("Document Type"::Order,SalesShptLine."Order No.",SalesShptLine."Order Line No.");

        Quantity := SalesOrderLine.Quantity;
        "Qty. Shipped Not Invoiced" := SalesOrderLine."Qty. Shipped Not Invoiced";
        "Quantity Invoiced" := SalesOrderLine."Quantity Invoiced";
        "Prepmt Amt Deducted" := SalesOrderLine."Prepmt Amt Deducted";
        "Prepmt. Amt. Inv." := SalesOrderLine."Prepmt. Amt. Inv.";
        "Line Discount Amount" := SalesOrderLine."Line Discount Amount";
      END;
    END;

    LOCAL PROCEDURE CalcPrepmtRoundingAmounts@79(VAR PrepmtSalesLineBuf@1000 : Record 37;SalesLine@1003 : Record 37;DeductionFactor@1001 : Decimal;VAR TotalRoundingAmount@1002 : ARRAY [2] OF Decimal);
    VAR
      RoundingAmount@1004 : ARRAY [2] OF Decimal;
    BEGIN
      WITH PrepmtSalesLineBuf DO BEGIN
        IF "VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT" THEN BEGIN
          RoundingAmount[1] :=
            "Prepmt. Amount Inv. (LCY)" - ROUND(DeductionFactor * SalesLine."Prepmt. Amount Inv. (LCY)");
          "Prepmt. Amount Inv. (LCY)" := "Prepmt. Amount Inv. (LCY)" - RoundingAmount[1];
          TotalRoundingAmount[1] += RoundingAmount[1];
        END;
        RoundingAmount[2] :=
          "Prepmt. VAT Amount Inv. (LCY)" - ROUND(DeductionFactor * SalesLine."Prepmt. VAT Amount Inv. (LCY)");
        "Prepmt. VAT Amount Inv. (LCY)" := "Prepmt. VAT Amount Inv. (LCY)" - RoundingAmount[2];
        TotalRoundingAmount[2] += RoundingAmount[2];
      END;
    END;

    LOCAL PROCEDURE UpdatePrepmtSalesLineWithRounding@89(VAR PrepmtSalesLine@1002 : Record 37;TotalRoundingAmount@1001 : ARRAY [2] OF Decimal;TotalPrepmtAmount@1000 : ARRAY [2] OF Decimal;FinalInvoice@1005 : Boolean;PricesInclVATRoundingAmount@1006 : ARRAY [2] OF Decimal);
    VAR
      NewAmountIncludingVAT@1003 : Decimal;
      Prepmt100PctVATRoundingAmt@1004 : Decimal;
    BEGIN
      WITH PrepmtSalesLine DO BEGIN
        NewAmountIncludingVAT := TotalPrepmtAmount[1] + TotalPrepmtAmount[2] + TotalRoundingAmount[1] + TotalRoundingAmount[2];
        IF "Prepayment %" = 100 THEN
          TotalRoundingAmount[1] += "Amount Including VAT" - NewAmountIncludingVAT;

        IF ABS(TotalRoundingAmount[1]) <= GLSetup."Amount Rounding Precision" THEN BEGIN
          IF "Prepayment %" = 100 THEN
            Prepmt100PctVATRoundingAmt := TotalRoundingAmount[1];
          TotalRoundingAmount[1] := 0;
        END;
        "Prepmt. Amount Inv. (LCY)" := TotalRoundingAmount[1];
        Amount := TotalPrepmtAmount[1] + TotalRoundingAmount[1];

        IF (PricesInclVATRoundingAmount[1] <> 0) AND (TotalRoundingAmount[1] = 0) THEN BEGIN
          IF ("Prepayment %" = 100) AND FinalInvoice AND
             (Amount + TotalPrepmtAmount[2] = "Amount Including VAT")
          THEN
            Prepmt100PctVATRoundingAmt := 0;
          PricesInclVATRoundingAmount[1] := 0;
        END;

        IF ((ABS(TotalRoundingAmount[2]) <= GLSetup."Amount Rounding Precision") OR
            FinalInvoice) AND (TotalRoundingAmount[1] = 0)
        THEN BEGIN
          IF ("Prepayment %" = 100) AND ("Prepmt. Amount Inv. (LCY)" = 0) THEN
            Prepmt100PctVATRoundingAmt += TotalRoundingAmount[2];
          TotalRoundingAmount[2] := 0;
        END;

        IF (PricesInclVATRoundingAmount[2] <> 0) AND (TotalRoundingAmount[2] = 0) THEN BEGIN
          Prepmt100PctVATRoundingAmt := 0;
          PricesInclVATRoundingAmount[2] := 0;
        END;

        "Prepmt. VAT Amount Inv. (LCY)" := TotalRoundingAmount[2] + Prepmt100PctVATRoundingAmt;
        NewAmountIncludingVAT := Amount + TotalPrepmtAmount[2] + TotalRoundingAmount[2];
        IF (PricesInclVATRoundingAmount[1] = 0) AND (PricesInclVATRoundingAmount[2] = 0) OR
           ("Currency Code" <> '') AND FinalInvoice
        THEN
          Increment(
            TotalSalesLineLCY."Amount Including VAT",
            "Amount Including VAT" - NewAmountIncludingVAT - Prepmt100PctVATRoundingAmt);
        IF "Currency Code" = '' THEN
          TotalSalesLine."Amount Including VAT" := TotalSalesLineLCY."Amount Including VAT";
        "Amount Including VAT" := NewAmountIncludingVAT;

        IF FinalInvoice AND (TotalSalesLine.Amount = 0) AND (TotalSalesLine."Amount Including VAT" <> 0) AND
           (ABS(TotalSalesLine."Amount Including VAT") <= Currency."Amount Rounding Precision")
        THEN BEGIN
          "Amount Including VAT" += TotalSalesLineLCY."Amount Including VAT";
          TotalSalesLine."Amount Including VAT" := 0;
          TotalSalesLineLCY."Amount Including VAT" := 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcRoundedAmount@91(Amount@1000 : Decimal;VAR Remainder@1001 : Decimal) : Decimal;
    VAR
      AmountRnded@1002 : Decimal;
    BEGIN
      Amount := Amount + Remainder;
      AmountRnded := ROUND(Amount,GLSetup."Amount Rounding Precision");
      Remainder := Amount - AmountRnded;
      EXIT(AmountRnded);
    END;

    LOCAL PROCEDURE GetSalesOrderLine@85(VAR SalesOrderLine@1000 : Record 37;SalesLine@1001 : Record 37);
    VAR
      SalesShptLine@1002 : Record 111;
    BEGIN
      SalesShptLine.GET(SalesLine."Shipment No.",SalesLine."Shipment Line No.");
      SalesOrderLine.GET(
        SalesOrderLine."Document Type"::Order,
        SalesShptLine."Order No.",SalesShptLine."Order Line No.");
      SalesOrderLine."Prepmt Amt to Deduct" := SalesLine."Prepmt Amt to Deduct";
    END;

    LOCAL PROCEDURE DecrementPrepmtAmtInvLCY@86(SalesLine@1000 : Record 37;VAR PrepmtAmountInvLCY@1001 : Decimal;VAR PrepmtVATAmountInvLCY@1002 : Decimal);
    BEGIN
      TempPrepmtDeductLCYSalesLine.RESET;
      TempPrepmtDeductLCYSalesLine := SalesLine;
      IF TempPrepmtDeductLCYSalesLine.FIND THEN BEGIN
        PrepmtAmountInvLCY := PrepmtAmountInvLCY - TempPrepmtDeductLCYSalesLine."Prepmt. Amount Inv. (LCY)";
        PrepmtVATAmountInvLCY := PrepmtVATAmountInvLCY - TempPrepmtDeductLCYSalesLine."Prepmt. VAT Amount Inv. (LCY)";
      END;
    END;

    LOCAL PROCEDURE AdjustFinalInvWith100PctPrepmt@97(VAR TempSalesLine@1000 : TEMPORARY Record 37);
    VAR
      DiffToLineDiscAmt@1001 : Decimal;
    BEGIN
      WITH TempPrepmtDeductLCYSalesLine DO BEGIN
        RESET;
        SETRANGE("Prepayment %",100);
        IF FINDSET(TRUE) THEN
          REPEAT
            IF IsFinalInvoice THEN BEGIN
              DiffToLineDiscAmt := "Prepmt Amt to Deduct" - "Line Amount";
              IF "Document Type" = "Document Type"::Order THEN
                DiffToLineDiscAmt := DiffToLineDiscAmt * Quantity / "Qty. to Invoice";
              IF DiffToLineDiscAmt <> 0 THEN BEGIN
                TempSalesLine.GET("Document Type","Document No.","Line No.");
                TempSalesLine."Line Discount Amount" -= DiffToLineDiscAmt;
                TempSalesLine.MODIFY;

                "Line Discount Amount" := TempSalesLine."Line Discount Amount";
                MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
        RESET;
      END;
    END;

    LOCAL PROCEDURE GetPrepmtDiffToLineAmount@98(SalesLine@1000 : Record 37) : Decimal;
    BEGIN
      WITH TempPrepmtDeductLCYSalesLine DO
        IF SalesLine."Prepayment %" = 100 THEN
          IF GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.") THEN
            EXIT("Prepmt Amt to Deduct" - "Line Amount");
      EXIT(0);
    END;

    LOCAL PROCEDURE MergeSaleslines@52(SalesHeader@1000000004 : Record 36;VAR Salesline@1000 : Record 37;VAR Salesline2@1000000002 : Record 37;VAR MergedSalesline@1000000003 : Record 37);
    BEGIN
      WITH Salesline DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        IF FIND('-') THEN
          REPEAT
            MergedSalesline := Salesline;
            MergedSalesline.INSERT;
          UNTIL NEXT = 0;
      END;
      WITH Salesline2 DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        IF FIND('-') THEN
          REPEAT
            MergedSalesline := Salesline2;
            MergedSalesline.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE PostJobContractLine@54(SalesLine@1000 : Record 37) : Integer;
    BEGIN
      IF SalesLine."Job Contract Entry No." = 0 THEN
        EXIT;
      IF (SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice) AND
         (SalesHeader."Document Type" <> SalesHeader."Document Type"::"Credit Memo")
      THEN
        SalesLine.TESTFIELD("Job Contract Entry No.",0);

      SalesLine.TESTFIELD("Job No.");
      SalesLine.TESTFIELD("Job Task No.");

      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice THEN
        SalesLine."Document No." := SalesInvHeader."No.";
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" THEN
        SalesLine."Document No." := SalesCrMemoHeader."No.";
      JobContractLine := TRUE;
      EXIT(JobPostLine.PostInvoiceContractLine(SalesHeader,SalesLine));
    END;

    LOCAL PROCEDURE InsertICGenJnlLine@150(SalesLine@1000 : Record 37;VAR ICGenJnlLineNo@1006 : Integer);
    VAR
      ICGLAccount@1001 : Record 410;
      Vend@1002 : Record 23;
      ICPartner@1003 : Record 413;
      CurrExchRate@1004 : Record 330;
    BEGIN
      SalesHeader.TESTFIELD("Sell-to IC Partner Code",'');
      SalesHeader.TESTFIELD("Bill-to IC Partner Code",'');
      SalesLine.TESTFIELD("IC Partner Ref. Type",SalesLine."IC Partner Ref. Type"::"G/L Account");
      ICGLAccount.GET(SalesLine."IC Partner Reference");
      ICGenJnlLineNo := ICGenJnlLineNo + 1;
      TempICGenJnlLine.INIT;
      TempICGenJnlLine."Line No." := ICGenJnlLineNo;
      TempICGenJnlLine.VALIDATE("Posting Date",SalesHeader."Posting Date");
      TempICGenJnlLine."Document Date" := SalesHeader."Document Date";
      TempICGenJnlLine.Description := SalesHeader."Posting Description";
      TempICGenJnlLine."Reason Code" := SalesHeader."Reason Code";
      TempICGenJnlLine."Document Type" := GenJnlLineDocType;
      TempICGenJnlLine."Document No." := GenJnlLineDocNo;
      TempICGenJnlLine."External Document No." := GenJnlLineExtDocNo;
      TempICGenJnlLine.VALIDATE("Account Type",TempICGenJnlLine."Account Type"::"IC Partner");
      TempICGenJnlLine.VALIDATE("Account No.",SalesLine."IC Partner Code");
      TempICGenJnlLine."Source Currency Code" := SalesHeader."Currency Code";
      TempICGenJnlLine."Source Currency Amount" := TempICGenJnlLine.Amount;
      TempICGenJnlLine.Correction := SalesHeader.Correction;
      TempICGenJnlLine."Source Code" := SrcCode;
      TempICGenJnlLine."Country/Region Code" := SalesHeader."VAT Country/Region Code";
      TempICGenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
      TempICGenJnlLine."Source No." := SalesHeader."Bill-to Customer No.";
      TempICGenJnlLine."Source Line No." := SalesLine."Line No.";
      TempICGenJnlLine."Posting No. Series" := SalesHeader."Posting No. Series";
      TempICGenJnlLine.VALIDATE("Bal. Account Type",TempICGenJnlLine."Bal. Account Type"::"G/L Account");
      TempICGenJnlLine.VALIDATE("Bal. Account No.",SalesLine."No.");
      TempICGenJnlLine."Shortcut Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
      TempICGenJnlLine."Shortcut Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
      TempICGenJnlLine."Dimension Set ID" := SalesLine."Dimension Set ID";
      Vend.SETRANGE("IC Partner Code",SalesLine."IC Partner Code");
      IF Vend.FINDFIRST THEN BEGIN
        TempICGenJnlLine.VALIDATE("Bal. Gen. Bus. Posting Group",Vend."Gen. Bus. Posting Group");
        TempICGenJnlLine.VALIDATE("Bal. VAT Bus. Posting Group",Vend."VAT Bus. Posting Group");
      END;
      TempICGenJnlLine.VALIDATE("Bal. VAT Prod. Posting Group",SalesLine."VAT Prod. Posting Group");
      TempICGenJnlLine."IC Partner Code" := SalesLine."IC Partner Code";
      TempICGenJnlLine."IC Partner G/L Acc. No." := SalesLine."IC Partner Reference";
      TempICGenJnlLine."IC Direction" := TempICGenJnlLine."IC Direction"::Outgoing;
      ICPartner.GET(SalesLine."IC Partner Code");
      IF ICPartner."Cost Distribution in LCY" AND (SalesLine."Currency Code" <> '') THEN BEGIN
        TempICGenJnlLine."Currency Code" := '';
        TempICGenJnlLine."Currency Factor" := 0;
        Currency.GET(SalesLine."Currency Code");
        IF SalesHeader."Document Type" IN
           [SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::"Credit Memo"]
        THEN
          TempICGenJnlLine.Amount :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                SalesHeader."Posting Date",SalesLine."Currency Code",
                SalesLine.Amount,SalesHeader."Currency Factor"))
        ELSE
          TempICGenJnlLine.Amount :=
            -ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                SalesHeader."Posting Date",SalesLine."Currency Code",
                SalesLine.Amount,SalesHeader."Currency Factor"));
      END ELSE BEGIN
        Currency.InitRoundingPrecision;
        TempICGenJnlLine."Currency Code" := SalesHeader."Currency Code";
        TempICGenJnlLine."Currency Factor" := SalesHeader."Currency Factor";
        IF SalesHeader."Document Type" IN [SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::"Credit Memo"] THEN
          TempICGenJnlLine.Amount := SalesLine.Amount
        ELSE
          TempICGenJnlLine.Amount := -SalesLine.Amount;
      END;
      IF TempICGenJnlLine."Bal. VAT %" <> 0 THEN
        TempICGenJnlLine.Amount := ROUND(TempICGenJnlLine.Amount * (1 + TempICGenJnlLine."Bal. VAT %" / 100),
            Currency."Amount Rounding Precision");
      TempICGenJnlLine.VALIDATE(Amount);
      TempICGenJnlLine.INSERT;
    END;

    LOCAL PROCEDURE PostICGenJnl@151();
    VAR
      ICInOutBoxMgt@1001 : Codeunit 427;
      ICTransactionNo@1000 : Integer;
    BEGIN
      TempICGenJnlLine.RESET;
      TempICGenJnlLine.SETFILTER(Amount,'<>%1',0);
      IF TempICGenJnlLine.FIND('-') THEN
        REPEAT
          ICTransactionNo := ICInOutBoxMgt.CreateOutboxJnlTransaction(TempICGenJnlLine,FALSE);
          ICInOutBoxMgt.CreateOutboxJnlLine(ICTransactionNo,1,TempICGenJnlLine);
          GenJnlPostLine.RunWithCheck(TempICGenJnlLine);
        UNTIL TempICGenJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TestGetShipmentPPmtAmtToDeduct@29(VAR SalesHeader@1005 : Record 36);
    VAR
      SalesLine2@1000 : Record 37;
      TempSalesLine3@1003 : TEMPORARY Record 37;
      TempTotalSalesLine@1007 : TEMPORARY Record 37;
      TempSalesShptLine@1009 : TEMPORARY Record 111;
      SalesShptLine@1002 : Record 111;
      MaxAmtToDeduct@1001 : Decimal;
    BEGIN
      SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETFILTER(Quantity,'>0');
      SalesLine2.SETFILTER("Qty. to Invoice",'>0');
      SalesLine2.SETFILTER("Shipment No.",'<>%1','');
      SalesLine2.SETFILTER("Prepmt Amt to Deduct",'<>0');
      IF SalesLine2.ISEMPTY THEN
        EXIT;
      SalesLine2.SETRANGE("Prepmt Amt to Deduct");

      IF SalesLine2.FINDSET THEN
        REPEAT
          IF SalesShptLine.GET(SalesLine2."Shipment No.",SalesLine2."Shipment Line No.") THEN BEGIN
            TempSalesLine3 := SalesLine2;
            TempSalesLine3.INSERT;
            TempSalesShptLine := SalesShptLine;
            IF TempSalesShptLine.INSERT THEN;

            IF NOT TempTotalSalesLine.GET(SalesLine2."Document Type"::Order,SalesShptLine."Order No.",SalesShptLine."Order Line No.") THEN BEGIN
              TempTotalSalesLine.INIT;
              TempTotalSalesLine."Document Type" := SalesLine2."Document Type"::Order;
              TempTotalSalesLine."Document No." := SalesShptLine."Order No.";
              TempTotalSalesLine."Line No." := SalesShptLine."Order Line No.";
              TempTotalSalesLine.INSERT;
            END;
            TempTotalSalesLine."Qty. to Invoice" := TempTotalSalesLine."Qty. to Invoice" + SalesLine2."Qty. to Invoice";
            TempTotalSalesLine."Prepmt Amt to Deduct" := TempTotalSalesLine."Prepmt Amt to Deduct" + SalesLine2."Prepmt Amt to Deduct";
            AdjustInvLineWith100PctPrepmt(SalesLine2,TempTotalSalesLine);
            TempTotalSalesLine.MODIFY;
          END;
        UNTIL SalesLine2.NEXT = 0;

      IF TempSalesLine3.FINDSET THEN
        REPEAT
          IF TempSalesShptLine.GET(TempSalesLine3."Shipment No.",TempSalesLine3."Shipment Line No.") THEN
            IF SalesLine2.GET(TempSalesLine3."Document Type"::Order,TempSalesShptLine."Order No.",TempSalesShptLine."Order Line No.") THEN
              IF TempTotalSalesLine.GET(
                   TempSalesLine3."Document Type"::Order,TempSalesShptLine."Order No.",TempSalesShptLine."Order Line No.")
              THEN BEGIN
                MaxAmtToDeduct := SalesLine2."Prepmt. Amt. Inv." - SalesLine2."Prepmt Amt Deducted";

                IF TempTotalSalesLine."Prepmt Amt to Deduct" > MaxAmtToDeduct THEN
                  ERROR(STRSUBSTNO(Text050,SalesLine2.FIELDCAPTION("Prepmt Amt to Deduct"),MaxAmtToDeduct));

                IF (TempTotalSalesLine."Qty. to Invoice" = SalesLine2.Quantity - SalesLine2."Quantity Invoiced") AND
                   (TempTotalSalesLine."Prepmt Amt to Deduct" <> MaxAmtToDeduct)
                THEN
                  ERROR(STRSUBSTNO(Text051,SalesLine2.FIELDCAPTION("Prepmt Amt to Deduct"),MaxAmtToDeduct));
              END;
        UNTIL TempSalesLine3.NEXT = 0;
    END;

    LOCAL PROCEDURE AdjustInvLineWith100PctPrepmt@99(VAR SalesInvoiceLine@1000 : Record 37;VAR TempTotalSalesLine@1001 : TEMPORARY Record 37);
    VAR
      SalesOrderLine@1003 : Record 37;
      DiffAmtToDeduct@1002 : Decimal;
    BEGIN
      IF SalesInvoiceLine."Prepayment %" = 100 THEN BEGIN
        SalesOrderLine := TempTotalSalesLine;
        SalesOrderLine.FIND;
        IF TempTotalSalesLine."Qty. to Invoice" = SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced" THEN BEGIN
          DiffAmtToDeduct :=
            SalesOrderLine."Prepmt. Amt. Inv." - SalesOrderLine."Prepmt Amt Deducted" - TempTotalSalesLine."Prepmt Amt to Deduct";
          IF DiffAmtToDeduct <> 0 THEN BEGIN
            SalesInvoiceLine."Prepmt Amt to Deduct" := SalesInvoiceLine."Prepmt Amt to Deduct" + DiffAmtToDeduct;
            SalesInvoiceLine."Line Amount" := SalesInvoiceLine."Prepmt Amt to Deduct";
            SalesInvoiceLine."Line Discount Amount" := SalesInvoiceLine."Line Discount Amount" - DiffAmtToDeduct;
            SalesInvoiceLine.MODIFY;
            TempTotalSalesLine."Prepmt Amt to Deduct" := TempTotalSalesLine."Prepmt Amt to Deduct" + DiffAmtToDeduct;
          END;
        END;
      END;
    END;

    PROCEDURE ArchiveUnpostedOrder@56(SalesHeader@1001 : Record 36);
    VAR
      ArchiveManagement@1000 : Codeunit 5063;
    BEGIN
      SalesSetup.GET;
      IF NOT SalesSetup."Archive Quotes and Orders" THEN
        EXIT;
      IF NOT (SalesHeader."Document Type" IN [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::"Return Order"]) THEN
        EXIT;
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETFILTER(Quantity,'<>0');
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Order THEN
        SalesLine.SETFILTER("Qty. to Ship",'<>0')
      ELSE
        SalesLine.SETFILTER("Return Qty. to Receive",'<>0');
      IF NOT SalesLine.ISEMPTY AND NOT PreviewMode THEN BEGIN
        RoundDeferralsForArchive(SalesHeader,SalesLine);
        ArchiveManagement.ArchSalesDocumentNoConfirm(SalesHeader);
      END;
    END;

    LOCAL PROCEDURE SynchBOMSerialNo@1204(VAR ServItemTmp3@1200 : TEMPORARY Record 5940;VAR ServItemTmpCmp3@1201 : TEMPORARY Record 5941);
    VAR
      ItemLedgEntry@1000 : Record 32;
      ItemLedgEntry2@1001 : Record 32;
      TempSalesShipMntLine@1002 : TEMPORARY Record 111;
      ServItemTmpCmp4@1003 : TEMPORARY Record 5941;
      ServItemCompLocal@1004 : Record 5941;
      TempItemLedgEntry2@1008 : TEMPORARY Record 32;
      ChildCount@1005 : Integer;
      EndLoop@1006 : Boolean;
    BEGIN
      IF NOT ServItemTmpCmp3.FIND('-') THEN
        EXIT;

      IF NOT ServItemTmp3.FIND('-') THEN
        EXIT;

      TempSalesShipMntLine.DELETEALL;
      REPEAT
        CLEAR(TempSalesShipMntLine);
        TempSalesShipMntLine."Document No." := ServItemTmp3."Sales/Serv. Shpt. Document No.";
        TempSalesShipMntLine."Line No." := ServItemTmp3."Sales/Serv. Shpt. Line No.";
        IF TempSalesShipMntLine.INSERT THEN;
      UNTIL ServItemTmp3.NEXT = 0;

      IF NOT TempSalesShipMntLine.FIND('-') THEN
        EXIT;

      ServItemTmp3.SETCURRENTKEY("Sales/Serv. Shpt. Document No.","Sales/Serv. Shpt. Line No.");
      CLEAR(ItemLedgEntry);
      ItemLedgEntry.SETCURRENTKEY("Document No.","Document Type","Document Line No.");

      REPEAT
        ChildCount := 0;
        ServItemTmpCmp4.DELETEALL;
        ServItemTmp3.SETRANGE("Sales/Serv. Shpt. Document No.",TempSalesShipMntLine."Document No.");
        ServItemTmp3.SETRANGE("Sales/Serv. Shpt. Line No.",TempSalesShipMntLine."Line No.");
        IF ServItemTmp3.FIND('-') THEN
          REPEAT
            ServItemTmpCmp3.SETRANGE(Active,TRUE);
            ServItemTmpCmp3.SETRANGE("Parent Service Item No.",ServItemTmp3."No.");
            IF ServItemTmpCmp3.FIND('-') THEN
              REPEAT
                ChildCount += 1;
                ServItemTmpCmp4 := ServItemTmpCmp3;
                ServItemTmpCmp4.INSERT;
              UNTIL ServItemTmpCmp3.NEXT = 0;
          UNTIL ServItemTmp3.NEXT = 0;
        ItemLedgEntry.SETRANGE("Document No.",TempSalesShipMntLine."Document No.");
        ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Sales Shipment");
        ItemLedgEntry.SETRANGE("Document Line No.",TempSalesShipMntLine."Line No.");
        IF ItemLedgEntry.FINDFIRST AND ServItemTmpCmp4.FIND('-') THEN BEGIN
          CLEAR(ItemLedgEntry2);
          ItemLedgEntry2.GET(ItemLedgEntry."Entry No.");
          EndLoop := FALSE;
          REPEAT
            IF ItemLedgEntry2."Item No." = ServItemTmpCmp4."No." THEN
              EndLoop := TRUE
            ELSE
              IF ItemLedgEntry2.NEXT = 0 THEN
                EndLoop := TRUE;
          UNTIL EndLoop;
          ItemLedgEntry2.SETRANGE("Entry No.",ItemLedgEntry2."Entry No.",ItemLedgEntry2."Entry No." + ChildCount - 1);
          IF ItemLedgEntry2.FINDSET THEN
            REPEAT
              TempItemLedgEntry2 := ItemLedgEntry2;
              TempItemLedgEntry2.INSERT;
            UNTIL ItemLedgEntry2.NEXT = 0;
          REPEAT
            IF ServItemCompLocal.GET(
                 ServItemTmpCmp4.Active,
                 ServItemTmpCmp4."Parent Service Item No.",
                 ServItemTmpCmp4."Line No.")
            THEN BEGIN
              TempItemLedgEntry2.SETRANGE("Item No.",ServItemCompLocal."No.");
              IF TempItemLedgEntry2.FINDFIRST THEN BEGIN
                ServItemCompLocal."Serial No." := TempItemLedgEntry2."Serial No.";
                ServItemCompLocal.MODIFY;
                TempItemLedgEntry2.DELETE;
              END;
            END;
          UNTIL ServItemTmpCmp4.NEXT = 0;
        END;
      UNTIL TempSalesShipMntLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetGLSetup@60();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE LockTables@58();
    BEGIN
      SalesLine.LOCKTABLE;
      ItemChargeAssgntSales.LOCKTABLE;
      PurchOrderLine.LOCKTABLE;
      PurchOrderHeader.LOCKTABLE;
      GetGLSetup;
      IF NOT GLSetup.OptimGLEntLockForMultiuserEnv THEN BEGIN
        GLEntry.LOCKTABLE;
        IF GLEntry.FINDLAST THEN;
      END;
    END;

    LOCAL PROCEDURE PostCustomerEntry@101(SalesHeader2@1000 : Record 36;TotalSalesLine2@1005 : Record 37;TotalSalesLineLCY2@1006 : Record 37;DocType@1002 : Option;DocNo@1003 : Code[20];ExtDocNo@1004 : Code[35];SourceCode@1007 : Code[10]);
    VAR
      GenJnlLine2@1001 : Record 81;
    BEGIN
      WITH SalesHeader2 DO BEGIN
        GenJnlLine2.INIT;
        GenJnlLine2."Posting Date" := "Posting Date";
        GenJnlLine2."Document Date" := "Document Date";
        GenJnlLine2.Description := "Posting Description";
        GenJnlLine2."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        GenJnlLine2."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine2."Dimension Set ID" := "Dimension Set ID";
        GenJnlLine2."Reason Code" := "Reason Code";
        GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::Customer;
        GenJnlLine2."Account No." := "Bill-to Customer No.";
        GenJnlLine2."Document Type" := DocType;
        GenJnlLine2."Document No." := DocNo;
        GenJnlLine2."External Document No." := ExtDocNo;
        GenJnlLine2."Currency Code" := "Currency Code";
        GenJnlLine2.Amount := -TotalSalesLine2."Amount Including VAT";
        GenJnlLine2."Source Currency Code" := "Currency Code";
        GenJnlLine2."Source Currency Amount" := -TotalSalesLine2."Amount Including VAT";
        GenJnlLine2."Amount (LCY)" := -TotalSalesLineLCY2."Amount Including VAT";
        IF "Currency Code" = '' THEN
          GenJnlLine2."Currency Factor" := 1
        ELSE
          GenJnlLine2."Currency Factor" := "Currency Factor";
        GenJnlLine2.Correction := Correction;
        GenJnlLine2."Sales/Purch. (LCY)" := -TotalSalesLineLCY2.Amount;
        GenJnlLine2."Profit (LCY)" := -(TotalSalesLineLCY2.Amount - TotalSalesLineLCY2."Unit Cost (LCY)");
        GenJnlLine2."Inv. Discount (LCY)" := -TotalSalesLineLCY2."Inv. Discount Amount";
        GenJnlLine2."Sell-to/Buy-from No." := "Sell-to Customer No.";
        GenJnlLine2."Bill-to/Pay-to No." := "Bill-to Customer No.";
        GenJnlLine2."Salespers./Purch. Code" := "Salesperson Code";
        GenJnlLine2."System-Created Entry" := TRUE;
        GenJnlLine2."On Hold" := "On Hold";
        GenJnlLine2."Applies-to Doc. Type" := "Applies-to Doc. Type";
        GenJnlLine2."Applies-to Doc. No." := "Applies-to Doc. No.";
        GenJnlLine2."Applies-to ID" := "Applies-to ID";
        GenJnlLine2."Allow Application" := "Bal. Account No." = '';
        GenJnlLine2."Due Date" := "Due Date";
        GenJnlLine2."Direct Debit Mandate ID" := "Direct Debit Mandate ID";
        GenJnlLine2."Payment Terms Code" := "Payment Terms Code";
        GenJnlLine2."Payment Method Code" := "Payment Method Code";
        GenJnlLine2."Pmt. Discount Date" := "Pmt. Discount Date";
        GenJnlLine2."Payment Discount %" := "Payment Discount %";
        GenJnlLine2."Source Type" := GenJnlLine2."Source Type"::Customer;
        GenJnlLine2."Source No." := "Bill-to Customer No.";
        GenJnlLine2."Source Code" := SourceCode;
        GenJnlLine2."Posting No. Series" := "Posting No. Series";
        GenJnlLine2."IC Partner Code" := "Sell-to IC Partner Code";
        GenJnlLine."Label Code" := "Label Code"; //DOC EC2016.1.1
        GenJnlLine."Is An Internet Customer" := "Is An Internet Customer"; //DOC EC2016.1.1
        GenJnlPostLine.RunWithCheck(GenJnlLine2);
      END;
    END;

    LOCAL PROCEDURE UpdateSalesHeader@102(VAR CustLedgerEntry@1000 : Record 21);
    BEGIN
      CASE GenJnlLineDocType OF
        GenJnlLine."Document Type"::Invoice:
          BEGIN
            FindCustLedgEntry(GenJnlLineDocType,GenJnlLineDocNo,CustLedgerEntry);
            SalesInvHeader."Cust. Ledger Entry No." := CustLedgerEntry."Entry No.";
            SalesInvHeader.MODIFY;
          END;
        GenJnlLine."Document Type"::"Credit Memo":
          BEGIN
            FindCustLedgEntry(GenJnlLineDocType,GenJnlLineDocNo,CustLedgerEntry);
            SalesCrMemoHeader."Cust. Ledger Entry No." := CustLedgerEntry."Entry No.";
            SalesCrMemoHeader.MODIFY;
          END;
      END;
    END;

    LOCAL PROCEDURE CaptureOrRefundCreditCardPmnt@70(CustLedgEntry@1000 : Record 21) : Integer;
    VAR
      DOPaymentMgt@1001 : Codeunit 825;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF NOT IsOnlinePayment(SalesHeader) THEN
          EXIT(0);

        IF NOT Invoice THEN
          EXIT(0);

        IF "Document Type" = "Document Type"::"Credit Memo" THEN
          EXIT(DOPaymentMgt.RefundSalesDoc(SalesHeader,CustLedgEntry."Entry No."));

        EXIT(DOPaymentMgt.CaptureSalesDoc(SalesHeader,CustLedgEntry."Entry No."));
      END;
    END;

    LOCAL PROCEDURE AuthorizeCreditCard@62(AuthorizationRequired@1000 : Boolean) : Integer;
    VAR
      DOPaymentMgt@1001 : Codeunit 825;
    BEGIN
      WITH SalesHeader DO
        IF ("Document Type" = "Document Type"::Order) AND Ship OR
           ("Document Type" = "Document Type"::Invoice) AND Invoice
        THEN
          IF DOPaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN BEGIN
            IF DOPaymentMgt.IsAuthorizationRequired OR AuthorizationRequired THEN
              EXIT(DOPaymentMgt.AuthorizeSalesDoc(SalesHeader,0,TRUE));
            TESTFIELD("Credit Card No.");
          END;
      EXIT(0);
    END;

    LOCAL PROCEDURE MAX@55(number1@1000 : Integer;number2@1001 : Integer) : Integer;
    BEGIN
      IF number1 > number2 THEN
        EXIT(number1);
      EXIT(number2);
    END;

    LOCAL PROCEDURE PostBalanceEntry@63(TransactionLogEntryNo@1000 : Integer;SalesHeader2@1014 : Record 36;TotalSalesLine2@1013 : Record 37;TotalSalesLineLCY2@1011 : Record 37;DocType@1009 : Option;DocNo@1008 : Code[20];ExtDocNo@1007 : Code[35];SourceCode@1006 : Code[10]);
    VAR
      CustLedgEntry@1002 : Record 21;
      DOPaymentMgt@1010 : Codeunit 825;
      CrCardDocumentType@1012 : 'Payment,Refund';
    BEGIN
      WITH SalesHeader2 DO BEGIN
        FindCustLedgEntry(DocType,DocNo,CustLedgEntry);

        GenJnlLine.INIT;
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine.Description := "Posting Description";
        GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::Customer;
        GenJnlLine."Account No." := "Bill-to Customer No.";
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          GenJnlLine."Document Type" := GenJnlLine."Document Type"::Refund
        ELSE
          GenJnlLine."Document Type" := GenJnlLine."Document Type"::Payment;
        GenJnlLine."Document No." := DocNo;
        GenJnlLine."External Document No." := ExtDocNo;
        IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN
          GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"Bank Account";
        GenJnlLine."Bal. Account No." := "Bal. Account No.";
        GenJnlLine."Currency Code" := "Currency Code";
        GenJnlLine.Amount :=
          TotalSalesLine2."Amount Including VAT" + CustLedgEntry."Remaining Pmt. Disc. Possible";
        GenJnlLine."Source Currency Code" := "Currency Code";
        GenJnlLine."Source Currency Amount" := GenJnlLine.Amount;
        GenJnlLine.Correction := Correction;
        CustLedgEntry.CALCFIELDS(Amount);
        IF CustLedgEntry.Amount = 0 THEN
          GenJnlLine."Amount (LCY)" := TotalSalesLineLCY2."Amount Including VAT"
        ELSE
          GenJnlLine."Amount (LCY)" :=
            TotalSalesLineLCY2."Amount Including VAT" +
            ROUND(
              CustLedgEntry."Remaining Pmt. Disc. Possible" /
              CustLedgEntry."Adjusted Currency Factor");
        IF "Currency Code" = '' THEN
          GenJnlLine."Currency Factor" := 1
        ELSE
          GenJnlLine."Currency Factor" := "Currency Factor";
        GenJnlLine."Applies-to Doc. Type" := DocType;
        GenJnlLine."Applies-to Doc. No." := DocNo;
        GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
        GenJnlLine."Source No." := "Bill-to Customer No.";
        GenJnlLine."Source Code" := SourceCode;
        GenJnlLine."Posting No. Series" := "Posting No. Series";
        GenJnlLine."IC Partner Code" := "Sell-to IC Partner Code";
        GenJnlLine."Salespers./Purch. Code" := "Salesperson Code";
        GenJnlLine."Allow Zero-Amount Posting" := TRUE;
        GenJnlPostLine.RunWithCheck(GenJnlLine);

        IF TransactionLogEntryNo <> 0 THEN BEGIN
          CASE "Document Type" OF
            GenJnlLine."Document Type"::Payment:
              CrCardDocumentType := CrCardDocumentType::Payment;
            "Document Type"::"Credit Memo":
              CrCardDocumentType := CrCardDocumentType::Refund;
          END;
          DOPaymentMgt.UpdateTransactEntryAfterPost(TransactionLogEntryNo,CustLedgEntry."Entry No.",CrCardDocumentType);
        END;
      END;
    END;

    LOCAL PROCEDURE FindCustLedgEntry@71(DocType@1003 : Option;DocNo@1002 : Code[20];VAR CustLedgEntry@1000 : Record 21);
    BEGIN
      CustLedgEntry.SETRANGE("Document Type",DocType);
      CustLedgEntry.SETRANGE("Document No.",DocNo);
      CustLedgEntry.FINDLAST;
    END;

    LOCAL PROCEDURE IsOnlinePayment@64(VAR SalesHeader@1000 : Record 36) : Boolean;
    VAR
      DOPaymentMgt@1001 : Codeunit 825;
    BEGIN
      IF DOPaymentMgt.IsValidPaymentMethod(SalesHeader."Payment Method Code") THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsAuthorized@65(TransactionLogEntryNo@1000 : Integer) : Boolean;
    BEGIN
      EXIT(TransactionLogEntryNo <> 0);
    END;

    LOCAL PROCEDURE ItemLedgerEntryExist@7(SalesLine2@1000 : Record 37) : Boolean;
    VAR
      HasItemLedgerEntry@1001 : Boolean;
    BEGIN
      IF SalesHeader.Ship OR SalesHeader.Receive THEN
        // item ledger entry will be created during posting in this transaction
        HasItemLedgerEntry :=
          ((SalesLine2."Qty. to Ship" + SalesLine2."Quantity Shipped") <> 0) OR
          ((SalesLine2."Qty. to Invoice" + SalesLine2."Quantity Invoiced") <> 0) OR
          ((SalesLine2."Return Qty. to Receive" + SalesLine2."Return Qty. Received") <> 0)
      ELSE
        // item ledger entry must already exist
        HasItemLedgerEntry :=
          (SalesLine2."Quantity Shipped" <> 0) OR
          (SalesLine2."Return Qty. Received" <> 0);

      EXIT(HasItemLedgerEntry);
    END;

    LOCAL PROCEDURE CheckPostRestrictions@115(SalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader.OnCheckSalesPostRestrictions;
      CheckCustBlockage(SalesHeader."Sell-to Customer No.",TRUE);

      IF SalesHeader."Bill-to Customer No." <> SalesHeader."Sell-to Customer No." THEN
        CheckCustBlockage(SalesHeader."Bill-to Customer No.",FALSE);
    END;

    LOCAL PROCEDURE CheckCustBlockage@1029(CustCode@1011 : Code[20];ExecuteDocCheck@1012 : Boolean);
    VAR
      Cust@1039 : Record 18;
    BEGIN
      Cust.GET(CustCode);
      IF SalesHeader.Receive THEN
        Cust.CheckBlockedCustOnDocs(Cust,SalesHeader."Document Type",FALSE,TRUE)
      ELSE BEGIN
        IF SalesHeader.Ship AND CheckDocumentType(ExecuteDocCheck) THEN BEGIN
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine.SETFILTER("Qty. to Ship",'<>0');
          SalesLine.SETRANGE("Shipment No.",'');
          IF NOT SalesLine.ISEMPTY THEN
            Cust.CheckBlockedCustOnDocs(Cust,SalesHeader."Document Type",TRUE,TRUE);
        END ELSE
          Cust.CheckBlockedCustOnDocs(Cust,SalesHeader."Document Type",FALSE,TRUE);
      END;
    END;

    LOCAL PROCEDURE CheckDocumentType@1030(ExecuteDocCheck@1031 : Boolean) : Boolean;
    BEGIN
      IF ExecuteDocCheck THEN BEGIN
        IF (SalesHeader."Document Type" = SalesHeader."Document Type"::Order) OR
           ((SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice) AND
            SalesSetup."Shipment on Invoice")
        THEN
          EXIT(TRUE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateWonOpportunities@66(VAR SalesHeader@1000 : Record 36);
    VAR
      Opp@1001 : Record 5092;
      OpportunityEntry@1002 : Record 5093;
    BEGIN
      WITH SalesHeader DO
        IF "Document Type" = "Document Type"::Order THEN BEGIN
          Opp.RESET;
          Opp.SETCURRENTKEY("Sales Document Type","Sales Document No.");
          Opp.SETRANGE("Sales Document Type",Opp."Sales Document Type"::Order);
          Opp.SETRANGE("Sales Document No.","No.");
          Opp.SETRANGE(Status,Opp.Status::Won);
          IF Opp.FINDFIRST THEN BEGIN
            Opp."Sales Document Type" := Opp."Sales Document Type"::"Posted Invoice";
            Opp."Sales Document No." := SalesInvHeader."No.";
            Opp.MODIFY;
            OpportunityEntry.RESET;
            OpportunityEntry.SETCURRENTKEY(Active,"Opportunity No.");
            OpportunityEntry.SETRANGE(Active,TRUE);
            OpportunityEntry.SETRANGE("Opportunity No.",Opp."No.");
            IF OpportunityEntry.FINDFIRST THEN BEGIN
              OpportunityEntry."Calcd. Current Value (LCY)" := OpportunityEntry.GetSalesDocValue(SalesHeader);
              OpportunityEntry.MODIFY;
            END;
          END;
        END;
    END;

    LOCAL PROCEDURE UpdateQtyToBeInvoiced@90(VAR QtyToBeInvoiced@1000 : Decimal;VAR QtyToBeInvoicedBase@1001 : Decimal;TrackingSpecificationExists@1002 : Boolean;HasATOShippedNotInvoiced@1003 : Boolean;SalesLine@1007 : Record 37;SalesShptLine@1006 : Record 111;InvoicingTrackingSpecification@1004 : Record 336;ItemLedgEntryNotInvoiced@1005 : Record 32);
    BEGIN
      IF TrackingSpecificationExists THEN BEGIN
        QtyToBeInvoiced := InvoicingTrackingSpecification."Qty. to Invoice";
        QtyToBeInvoicedBase := InvoicingTrackingSpecification."Qty. to Invoice (Base)";
      END ELSE
        IF HasATOShippedNotInvoiced THEN BEGIN
          QtyToBeInvoicedBase := ItemLedgEntryNotInvoiced.Quantity - ItemLedgEntryNotInvoiced."Invoiced Quantity";
          IF ABS(QtyToBeInvoicedBase) > ABS(RemQtyToBeInvoicedBase) THEN
            QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - SalesLine."Qty. to Ship (Base)";
          QtyToBeInvoiced := ROUND(QtyToBeInvoicedBase / SalesShptLine."Qty. per Unit of Measure",0.00001);
        END ELSE BEGIN
          QtyToBeInvoiced := RemQtyToBeInvoiced - SalesLine."Qty. to Ship";
          QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - SalesLine."Qty. to Ship (Base)";
        END;

      IF ABS(QtyToBeInvoiced) > ABS(SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced") THEN BEGIN
        QtyToBeInvoiced := -(SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced");
        QtyToBeInvoicedBase := -(SalesShptLine."Quantity (Base)" - SalesShptLine."Qty. Invoiced (Base)");
      END;
    END;

    LOCAL PROCEDURE UpdateRemainingQtyToBeInvoiced@125(SalesShptLine@1000 : Record 111;VAR RemQtyToInvoiceCurrLine@1001 : Decimal;VAR RemQtyToInvoiceCurrLineBase@1002 : Decimal);
    BEGIN
      RemQtyToInvoiceCurrLine := -SalesShptLine.Quantity + SalesShptLine."Quantity Invoiced";
      RemQtyToInvoiceCurrLineBase := -SalesShptLine."Quantity (Base)" + SalesShptLine."Qty. Invoiced (Base)";
      IF RemQtyToInvoiceCurrLine < RemQtyToBeInvoiced THEN BEGIN
        RemQtyToInvoiceCurrLine := RemQtyToBeInvoiced;
        RemQtyToInvoiceCurrLineBase := RemQtyToBeInvoicedBase;
      END;
    END;

    LOCAL PROCEDURE IsEndLoopForShippedNotInvoiced@96(RemQtyToBeInvoiced@1004 : Decimal;TrackingSpecificationExists@1001 : Boolean;VAR HasATOShippedNotInvoiced@1000 : Boolean;VAR SalesShptLine@1006 : Record 111;VAR InvoicingTrackingSpecification@1002 : Record 336;VAR ItemLedgEntryNotInvoiced@1003 : Record 32;SalesLine@1005 : Record 37) : Boolean;
    BEGIN
      IF TrackingSpecificationExists THEN
        EXIT(InvoicingTrackingSpecification.NEXT = 0);

      IF HasATOShippedNotInvoiced THEN BEGIN
        HasATOShippedNotInvoiced := ItemLedgEntryNotInvoiced.NEXT <> 0;
        IF NOT HasATOShippedNotInvoiced THEN
          EXIT(NOT SalesShptLine.FINDSET OR (ABS(RemQtyToBeInvoiced) <= ABS(SalesLine."Qty. to Ship")));
        EXIT(ABS(RemQtyToBeInvoiced) <= ABS(SalesLine."Qty. to Ship"));
      END;

      EXIT((SalesShptLine.NEXT = 0) OR (ABS(RemQtyToBeInvoiced) <= ABS(SalesLine."Qty. to Ship")));
    END;

    PROCEDURE SetItemEntryRelation@87(VAR ItemEntryRelation@1000 : Record 6507;VAR SalesShptLine@1001 : Record 111;VAR InvoicingTrackingSpecification@1004 : Record 336;VAR ItemLedgEntryNotInvoiced@1005 : Record 32;TrackingSpecificationExists@1002 : Boolean;HasATOShippedNotInvoiced@1003 : Boolean);
    BEGIN
      IF TrackingSpecificationExists THEN BEGIN
        ItemEntryRelation.GET(InvoicingTrackingSpecification."Item Ledger Entry No.");
        SalesShptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
      END ELSE
        IF HasATOShippedNotInvoiced THEN BEGIN
          ItemEntryRelation."Item Entry No." := ItemLedgEntryNotInvoiced."Entry No.";
          SalesShptLine.GET(ItemLedgEntryNotInvoiced."Document No.",ItemLedgEntryNotInvoiced."Document Line No.");
        END ELSE
          ItemEntryRelation."Item Entry No." := SalesShptLine."Item Shpt. Entry No.";
    END;

    LOCAL PROCEDURE PostATOAssocItemJnlLine@76(SalesLine@1003 : Record 37;VAR PostedATOLink@1000 : Record 914;VAR RemQtyToBeInvoiced@1002 : Decimal;VAR RemQtyToBeInvoicedBase@1001 : Decimal);
    VAR
      DummyTrackingSpecification@1005 : Record 336;
    BEGIN
      WITH PostedATOLink DO BEGIN
        DummyTrackingSpecification.INIT;
        IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN BEGIN
          "Assembled Quantity" := -"Assembled Quantity";
          "Assembled Quantity (Base)" := -"Assembled Quantity (Base)";
          IF ABS(RemQtyToBeInvoiced) >= ABS("Assembled Quantity") THEN BEGIN
            ItemLedgShptEntryNo :=
              PostItemJnlLine(
                SalesLine,
                "Assembled Quantity","Assembled Quantity (Base)",
                "Assembled Quantity","Assembled Quantity (Base)",
                0,'',DummyTrackingSpecification,TRUE);
            RemQtyToBeInvoiced -= "Assembled Quantity";
            RemQtyToBeInvoicedBase -= "Assembled Quantity (Base)";
          END ELSE BEGIN
            IF RemQtyToBeInvoiced <> 0 THEN
              ItemLedgShptEntryNo :=
                PostItemJnlLine(
                  SalesLine,
                  RemQtyToBeInvoiced,
                  RemQtyToBeInvoicedBase,
                  RemQtyToBeInvoiced,
                  RemQtyToBeInvoicedBase,
                  0,'',DummyTrackingSpecification,TRUE);

            ItemLedgShptEntryNo :=
              PostItemJnlLine(
                SalesLine,
                "Assembled Quantity" - RemQtyToBeInvoiced,
                "Assembled Quantity (Base)" - RemQtyToBeInvoicedBase,
                0,0,
                0,'',DummyTrackingSpecification,TRUE);

            RemQtyToBeInvoiced := 0;
            RemQtyToBeInvoicedBase := 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetOpenLinkedATOs@72(VAR TempAsmHeader@1000 : TEMPORARY Record 900);
    VAR
      SalesLine2@1002 : Record 37;
      AsmHeader@1001 : Record 900;
    BEGIN
      SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      IF SalesLine2.FIND('-') THEN
        REPEAT
          IF SalesLine2.AsmToOrderExists(AsmHeader) THEN
            IF AsmHeader.Status = AsmHeader.Status::Open THEN BEGIN
              TempAsmHeader.TRANSFERFIELDS(AsmHeader);
              TempAsmHeader.INSERT;
            END;
        UNTIL SalesLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE ReopenAsmOrders@69(VAR TempAsmHeader@1002 : TEMPORARY Record 900);
    VAR
      AsmHeader@1001 : Record 900;
    BEGIN
      IF TempAsmHeader.FIND('-') THEN
        REPEAT
          AsmHeader.GET(TempAsmHeader."Document Type",TempAsmHeader."No.");
          AsmHeader.Status := AsmHeader.Status::Open;
          AsmHeader.MODIFY;
        UNTIL TempAsmHeader.NEXT = 0;
    END;

    LOCAL PROCEDURE InitPostATO@53(VAR SalesLine@1000 : Record 37);
    VAR
      AsmHeader@1001 : Record 900;
      Window@1003 : Dialog;
    BEGIN
      IF SalesLine.AsmToOrderExists(AsmHeader) THEN BEGIN
        IF GUIALLOWED THEN BEGIN  //DOC EC2016.1.1
        Window.OPEN(Text055);
        Window.UPDATE(1,
          STRSUBSTNO(Text059,
            SalesLine."Document Type",SalesLine."Document No.",SalesLine.FIELDCAPTION("Line No."),SalesLine."Line No."));
        Window.UPDATE(2,STRSUBSTNO(Text060,AsmHeader."Document Type",AsmHeader."No."));
        END; //DOC EC2016.1.1
        SalesLine.CheckAsmToOrder(AsmHeader);
        IF NOT HasQtyToAsm(SalesLine,AsmHeader) THEN
          EXIT;

        AsmPost.SetPostingDate(TRUE,SalesHeader."Posting Date");
        AsmPost.InitPostATO(AsmHeader);

        IF GUIALLOWED THEN  //DOC EC2016.1.1
        Window.CLOSE;
      END;
    END;

    LOCAL PROCEDURE PostATO@59(VAR SalesLine@1000 : Record 37;VAR TempPostedATOLink@1004 : TEMPORARY Record 914);
    VAR
      AsmHeader@1001 : Record 900;
      PostedATOLink@1002 : Record 914;
      Window@1003 : Dialog;
    BEGIN
      IF SalesLine.AsmToOrderExists(AsmHeader) THEN BEGIN
        IF GUIALLOWED THEN BEGIN //DOC EC2016.1.1
        Window.OPEN(Text056);
        Window.UPDATE(1,
          STRSUBSTNO(Text059,
            SalesLine."Document Type",SalesLine."Document No.",SalesLine.FIELDCAPTION("Line No."),SalesLine."Line No."));
        Window.UPDATE(2,STRSUBSTNO(Text060,AsmHeader."Document Type",AsmHeader."No."));
        END; //DOC EC2016.1.1

        SalesLine.CheckAsmToOrder(AsmHeader);
        IF NOT HasQtyToAsm(SalesLine,AsmHeader) THEN
          EXIT;
        IF AsmHeader."Remaining Quantity (Base)" = 0 THEN
          EXIT;

        PostedATOLink.INIT;
        PostedATOLink."Assembly Document Type" := PostedATOLink."Assembly Document Type"::Assembly;
        PostedATOLink."Assembly Document No." := AsmHeader."Posting No.";
        PostedATOLink."Document Type" := PostedATOLink."Document Type"::"Sales Shipment";
        PostedATOLink."Document No." := SalesHeader."Shipping No.";
        PostedATOLink."Document Line No." := SalesLine."Line No.";

        PostedATOLink."Assembly Order No." := AsmHeader."No.";
        PostedATOLink."Order No." := SalesLine."Document No.";
        PostedATOLink."Order Line No." := SalesLine."Line No.";

        PostedATOLink."Assembled Quantity" := AsmHeader."Quantity to Assemble";
        PostedATOLink."Assembled Quantity (Base)" := AsmHeader."Quantity to Assemble (Base)";
        PostedATOLink.INSERT;

        TempPostedATOLink := PostedATOLink;
        TempPostedATOLink.INSERT;

        AsmPost.PostATO(AsmHeader,ItemJnlPostLine,ResJnlPostLine,WhseJnlPostLine);

        IF GUIALLOWED THEN  //DOC EC2016.1.1
        Window.CLOSE;
      END;
    END;

    LOCAL PROCEDURE FinalizePostATO@61(VAR SalesLine@1000 : Record 37);
    VAR
      ATOLink@1002 : Record 904;
      AsmHeader@1003 : Record 900;
      Window@1001 : Dialog;
    BEGIN
      IF SalesLine.AsmToOrderExists(AsmHeader) THEN BEGIN
        IF GUIALLOWED THEN BEGIN  //DOC EC2016.1.1
        Window.OPEN(Text057);
        Window.UPDATE(1,
          STRSUBSTNO(Text059,
            SalesLine."Document Type",SalesLine."Document No.",SalesLine.FIELDCAPTION("Line No."),SalesLine."Line No."));
        Window.UPDATE(2,STRSUBSTNO(Text060,AsmHeader."Document Type",AsmHeader."No."));
        END; //DOC EC2016.1.1

        SalesLine.CheckAsmToOrder(AsmHeader);
        AsmHeader.TESTFIELD("Remaining Quantity (Base)",0);
        AsmPost.FinalizePostATO(AsmHeader);
        ATOLink.GET(AsmHeader."Document Type",AsmHeader."No.");
        ATOLink.DELETE;

        IF GUIALLOWED THEN  //DOC EC2016.1.1
        Window.CLOSE;
      END;
    END;

    LOCAL PROCEDURE CheckATOLink@78(SalesLine@1000 : Record 37);
    VAR
      AsmHeader@1001 : Record 900;
    BEGIN
      IF SalesLine."Qty. to Asm. to Order (Base)" = 0 THEN
        EXIT;
      IF SalesLine.AsmToOrderExists(AsmHeader) THEN
        SalesLine.CheckAsmToOrder(AsmHeader);
    END;

    LOCAL PROCEDURE DeleteATOLinks@67(SalesHeader@1000 : Record 36);
    VAR
      ATOLink@1001 : Record 904;
    BEGIN
      WITH ATOLink DO BEGIN
        SETCURRENTKEY(Type,"Document Type","Document No.");
        SETRANGE(Type,Type::Sale);
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        IF NOT ISEMPTY THEN
          DELETEALL;
      END;
    END;

    LOCAL PROCEDURE HasQtyToAsm@68(SalesLine@1000 : Record 37;AsmHeader@1001 : Record 900) : Boolean;
    BEGIN
      IF SalesLine."Qty. to Asm. to Order (Base)" = 0 THEN
        EXIT(FALSE);
      IF SalesLine."Qty. to Ship (Base)" = 0 THEN
        EXIT(FALSE);
      IF AsmHeader."Quantity to Assemble (Base)" = 0 THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetATOItemLedgEntriesNotInvoiced@77(SalesLine@1000 : Record 37;VAR ItemLedgEntryNotInvoiced@1001 : Record 32) : Boolean;
    VAR
      PostedATOLink@1002 : Record 914;
      ItemLedgEntry@1003 : Record 32;
    BEGIN
      ItemLedgEntryNotInvoiced.RESET;
      ItemLedgEntryNotInvoiced.DELETEALL;
      IF PostedATOLink.FindLinksFromSalesLine(SalesLine) THEN
        REPEAT
          ItemLedgEntry.SETCURRENTKEY("Document No.","Document Type","Document Line No.");
          ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Sales Shipment");
          ItemLedgEntry.SETRANGE("Document No.",PostedATOLink."Document No.");
          ItemLedgEntry.SETRANGE("Document Line No.",PostedATOLink."Document Line No.");
          ItemLedgEntry.SETRANGE("Assemble to Order",TRUE);
          ItemLedgEntry.SETRANGE("Completely Invoiced",FALSE);
          IF ItemLedgEntry.FINDSET THEN
            REPEAT
              IF ItemLedgEntry.Quantity <> ItemLedgEntry."Invoiced Quantity" THEN BEGIN
                ItemLedgEntryNotInvoiced := ItemLedgEntry;
                ItemLedgEntryNotInvoiced.INSERT;
              END;
            UNTIL ItemLedgEntry.NEXT = 0;
        UNTIL PostedATOLink.NEXT = 0;

      EXIT(ItemLedgEntryNotInvoiced.FINDSET);
    END;

    PROCEDURE SetWhseJnlRegisterCU@26(VAR WhseJnlRegisterLine@1000 : Codeunit 7301);
    BEGIN
      WhseJnlPostLine := WhseJnlRegisterLine;
    END;

    LOCAL PROCEDURE PostWhseShptLines@74(VAR WhseShptLine2@1000 : Record 7321;SalesShptLine2@1004 : Record 111;VAR SalesLine2@1007 : Record 37);
    VAR
      ATOWhseShptLine@1002 : Record 7321;
      NonATOWhseShptLine@1001 : Record 7321;
      ATOLineFound@1005 : Boolean;
      NonATOLineFound@1003 : Boolean;
      TotalSalesShptLineQty@1006 : Decimal;
    BEGIN
      WhseShptLine2.GetATOAndNonATOLines(ATOWhseShptLine,NonATOWhseShptLine,ATOLineFound,NonATOLineFound);
      IF ATOLineFound THEN
        TotalSalesShptLineQty += ATOWhseShptLine."Qty. to Ship";
      IF NonATOLineFound THEN
        TotalSalesShptLineQty += NonATOWhseShptLine."Qty. to Ship";
      SalesShptLine2.TESTFIELD(Quantity,TotalSalesShptLineQty);

      SaveTempWhseSplitSpec(SalesLine2);

      WhsePostShpt.SetWhseJnlRegisterCU(WhseJnlPostLine);
      IF ATOLineFound AND (ATOWhseShptLine."Qty. to Ship (Base)" > 0) THEN
        WhsePostShpt.CreatePostedShptLine(
          ATOWhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
      IF NonATOLineFound AND (NonATOWhseShptLine."Qty. to Ship (Base)" > 0) THEN
        WhsePostShpt.CreatePostedShptLine(
          NonATOWhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
    END;

    LOCAL PROCEDURE GetCountryCode@75(SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36) : Code[10];
    VAR
      SalesShipmentHeader@1003 : Record 110;
    BEGIN
      IF SalesLine."Shipment No." <> '' THEN BEGIN
        SalesShipmentHeader.GET(SalesLine."Shipment No.");
        EXIT(
          GetCountryRegionCode(
            SalesLine."Sell-to Customer No.",
            SalesShipmentHeader."Ship-to Code",
            SalesShipmentHeader."Sell-to Country/Region Code"));
      END;
      EXIT(
        GetCountryRegionCode(
          SalesLine."Sell-to Customer No.",
          SalesHeader."Ship-to Code",
          SalesHeader."Sell-to Country/Region Code"));
    END;

    LOCAL PROCEDURE GetCountryRegionCode@103(CustNo@1001 : Code[20];ShipToCode@1002 : Code[10];SellToCountryRegionCode@1003 : Code[10]) : Code[10];
    VAR
      ShipToAddress@1000 : Record 222;
    BEGIN
      IF ShipToCode <> '' THEN BEGIN
        ShipToAddress.GET(CustNo,ShipToCode);
        EXIT(ShipToAddress."Country/Region Code");
      END;
      EXIT(SellToCountryRegionCode);
    END;

    LOCAL PROCEDURE UpdateIncomingDocument@95(IncomingDocNo@1000 : Integer;PostingDate@1002 : Date;GenJnlLineDocNo@1003 : Code[20]);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      IncomingDocument.UpdateIncomingDocumentFromPosting(IncomingDocNo,PostingDate,GenJnlLineDocNo);
    END;

    LOCAL PROCEDURE CheckItemCharge@88(ItemChargeAssgntSales@1000 : Record 5809);
    VAR
      SalesLineForCharge@1001 : Record 37;
    BEGIN
      WITH ItemChargeAssgntSales DO
        CASE "Applies-to Doc. Type" OF
          "Applies-to Doc. Type"::Order,
          "Applies-to Doc. Type"::Invoice:
            IF SalesLineForCharge.GET(
                 "Applies-to Doc. Type",
                 "Applies-to Doc. No.",
                 "Applies-to Doc. Line No.")
            THEN
              IF (SalesLineForCharge."Quantity (Base)" = SalesLineForCharge."Qty. Shipped (Base)") AND
                 (SalesLineForCharge."Qty. Shipped Not Invd. (Base)" = 0)
              THEN
                ERROR(Text061Err);
          "Applies-to Doc. Type"::"Return Order",
          "Applies-to Doc. Type"::"Credit Memo":
            IF SalesLineForCharge.GET(
                 "Applies-to Doc. Type",
                 "Applies-to Doc. No.",
                 "Applies-to Doc. Line No.")
            THEN
              IF (SalesLineForCharge."Quantity (Base)" = SalesLineForCharge."Return Qty. Received (Base)") AND
                 (SalesLineForCharge."Ret. Qty. Rcd. Not Invd.(Base)" = 0)
              THEN
                ERROR(Text061Err);
        END;
    END;

    LOCAL PROCEDURE CheckItemReservDisruption@104();
    VAR
      AvailableQty@1000 : Decimal;
    BEGIN
      WITH SalesLine DO BEGIN
        IF NOT ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) OR
           (Type <> Type::Item) OR
           NOT ("Qty. to Ship (Base)" > 0)
        THEN
          EXIT;
        IF ("Job Contract Entry No." <> 0) OR
           Nonstock OR
           "Special Order" OR
           "Drop Shipment" OR
           IsServiceItem OR
           FullQtyIsForAsmToOrder OR
           TempSKU.GET("Location Code","No.","Variant Code") // Warn against item
        THEN
          EXIT;

        Item.SETFILTER("Location Filter","Location Code");
        Item.SETFILTER("Variant Filter","Variant Code");
        Item.CALCFIELDS("Reserved Qty. on Inventory","Net Change");
        CALCFIELDS("Reserved Qty. (Base)");
        AvailableQty := Item."Net Change" - (Item."Reserved Qty. on Inventory" - "Reserved Qty. (Base)");

        IF (Item."Reserved Qty. on Inventory" > 0) AND
           (AvailableQty < "Qty. to Ship (Base)") AND
           (Item."Reserved Qty. on Inventory" > "Reserved Qty. (Base)")
        THEN BEGIN
          InsertTempSKU("Location Code","No.","Variant Code");
          IF NOT CONFIRM(
               Text062Qst,FALSE,FIELDCAPTION("No."),Item."No.",FIELDCAPTION("Location Code"),
               "Location Code",FIELDCAPTION("Variant Code"),"Variant Code")
          THEN
            ERROR('');
        END;
      END;
    END;

    LOCAL PROCEDURE InsertTempSKU@106(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];VariantCode@1002 : Code[10]);
    BEGIN
      WITH TempSKU DO BEGIN
        INIT;
        "Location Code" := LocationCode;
        "Item No." := ItemNo;
        "Variant Code" := VariantCode;
        INSERT;
      END;
    END;

    PROCEDURE InitProgressWindow@105(SalesHeader@1000 : Record 36);
    BEGIN
      //DOC EC2016.1.1 -
      IF NOT GUIALLOWED THEN
        EXIT;
      //DOC EC2016.1.1 +

      IF SalesHeader.Invoice THEN
        Window.OPEN(
          '#1#################################\\' +
          Text002 +
          Text003 +
          Text004 +
          Text005)
      ELSE
        Window.OPEN(
          '#1#################################\\' +
          Text006);

      Window.UPDATE(1,STRSUBSTNO('%1 %2',SalesHeader."Document Type",SalesHeader."No."));
    END;

    LOCAL PROCEDURE CheckCertificateOfSupplyStatus@188(SalesShptHeader@1001 : Record 110;SalesShptLine@1000 : Record 111);
    VAR
      CertificateOfSupply@1002 : Record 780;
      VATPostingSetup@1003 : Record 325;
    BEGIN
      IF SalesShptLine.Quantity <> 0 THEN
        IF VATPostingSetup.GET(SalesShptHeader."VAT Bus. Posting Group",SalesShptLine."VAT Prod. Posting Group") AND
           VATPostingSetup."Certificate of Supply Required"
        THEN BEGIN
          CertificateOfSupply.InitFromSales(SalesShptHeader);
          CertificateOfSupply.SetRequired(SalesShptHeader."No.");
        END;
    END;

    LOCAL PROCEDURE HasSpecificTracking@107(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item@1001 : Record 27;
      ItemTrackingCode@1002 : Record 6502;
    BEGIN
      Item.GET(ItemNo);
      IF Item."Item Tracking Code" <> '' THEN BEGIN
        ItemTrackingCode.GET(Item."Item Tracking Code");
        EXIT(ItemTrackingCode."SN Specific Tracking" OR ItemTrackingCode."Lot Specific Tracking");
      END;
    END;

    LOCAL PROCEDURE HasInvtPickLine@108(SalesLine@1000 : Record 37) : Boolean;
    VAR
      WhseActivityLine@1001 : Record 5767;
    BEGIN
      WITH WhseActivityLine DO BEGIN
        SETRANGE("Activity Type","Activity Type"::"Invt. Pick");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype",SalesLine."Document Type");
        SETRANGE("Source No.",SalesLine."Document No.");
        SETRANGE("Source Line No.",SalesLine."Line No.");
        EXIT(NOT ISEMPTY);
      END;
    END;

    LOCAL PROCEDURE InsertShipmentHeader@110(SalesHeader@1000 : Record 36;VAR SalesShptHeader@1001 : Record 110);
    VAR
      SalesCommentLine@1002 : Record 44;
      RecordLinkManagement@1003 : Codeunit 447;
    BEGIN
      WITH SalesHeader DO BEGIN
        SalesShptHeader.INIT;
        SalesShptHeader.TRANSFERFIELDS(SalesHeader);

        SalesShptHeader."No." := "Shipping No.";
        IF "Document Type" = "Document Type"::Order THEN BEGIN
          SalesShptHeader."Order No. Series" := "No. Series";
          SalesShptHeader."Order No." := "No.";
          IF SalesSetup."Ext. Doc. No. Mandatory" THEN
            TESTFIELD("External Document No.");
        END;
        SalesShptHeader."Source Code" := SrcCode;
        SalesShptHeader."User ID" := USERID;
        SalesShptHeader."No. Printed" := 0;
        SalesShptHeader.INSERT;

        ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesShptHeader.RECORDID,SalesShptHeader."No.");

        IF SalesSetup."Copy Comments Order to Shpt." THEN BEGIN
          CopyCommentLines(
            "Document Type",SalesCommentLine."Document Type"::Shipment,
            "No.",SalesShptHeader."No.");
          RecordLinkManagement.CopyLinks(SalesHeader,SalesShptHeader);
        END;
        IF WhseShip THEN BEGIN
          WhseShptHeader.GET(TempWhseShptHeader."No.");
          WhsePostShpt.CreatePostedShptHeader(
            PostedWhseShptHeader,WhseShptHeader,"Shipping No.","Posting Date");
        END;
        IF WhseReceive THEN BEGIN
          WhseRcptHeader.GET(TempWhseRcptHeader."No.");
          WhsePostRcpt.CreatePostedRcptHeader(
            PostedWhseRcptHeader,WhseRcptHeader,"Shipping No.","Posting Date");
        END;
      END;
    END;

    LOCAL PROCEDURE InsertReturnReceiptHeader@113(SalesHeader@1000 : Record 36;VAR ReturnRcptHeader@1001 : Record 6660);
    VAR
      SalesCommentLine@1002 : Record 44;
      RecordLinkManagement@1003 : Codeunit 447;
    BEGIN
      WITH SalesHeader DO BEGIN
        ReturnRcptHeader.INIT;
        ReturnRcptHeader.TRANSFERFIELDS(SalesHeader);
        ReturnRcptHeader."No." := "Return Receipt No.";
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          ReturnRcptHeader."Return Order No. Series" := "No. Series";
          ReturnRcptHeader."Return Order No." := "No.";
          IF SalesSetup."Ext. Doc. No. Mandatory" THEN
            TESTFIELD("External Document No.");
        END;
        ReturnRcptHeader."No. Series" := "Return Receipt No. Series";
        ReturnRcptHeader."Source Code" := SrcCode;
        ReturnRcptHeader."User ID" := USERID;
        ReturnRcptHeader."No. Printed" := 0;
        ReturnRcptHeader.INSERT(TRUE);

        ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnRcptHeader.RECORDID,ReturnRcptHeader."No.");

        IF SalesSetup."Copy Cmts Ret.Ord. to Ret.Rcpt" THEN BEGIN
          CopyCommentLines(
            "Document Type",SalesCommentLine."Document Type"::"Posted Return Receipt",
            "No.",ReturnRcptHeader."No.");
          RecordLinkManagement.CopyLinks(SalesHeader,ReturnRcptHeader);
        END;
        IF WhseReceive THEN BEGIN
          WhseRcptHeader.GET(TempWhseRcptHeader."No.");
          WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Return Receipt No.","Posting Date");
        END;
        IF WhseShip THEN BEGIN
          WhseShptHeader.GET(TempWhseShptHeader."No.");
          WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Return Receipt No.","Posting Date");
        END;
      END;
    END;

    LOCAL PROCEDURE InsertInvoiceHeader@116(SalesHeader@1000 : Record 36;VAR SalesInvHeader@1001 : Record 112);
    VAR
      SalesCommentLine@1002 : Record 44;
      RecordLinkManagement@1003 : Codeunit 447;
    BEGIN
      WITH SalesHeader DO BEGIN
        SalesInvHeader.INIT;
        SalesInvHeader.TRANSFERFIELDS(SalesHeader);

        IF "Document Type" = "Document Type"::Order THEN BEGIN
          IF PreviewMode THEN
            SalesInvHeader."No." := FakeDocNoTxt
          ELSE
            SalesInvHeader."No." := "Posting No.";
          IF SalesSetup."Ext. Doc. No. Mandatory" THEN
            TESTFIELD("External Document No.");
          SalesInvHeader."Pre-Assigned No. Series" := '';
          SalesInvHeader."Order No. Series" := "No. Series";
          SalesInvHeader."Order No." := "No.";
          IF GUIALLOWED THEN  //DOC EC2016.1.1
          Window.UPDATE(1,STRSUBSTNO(Text007,"Document Type","No.",SalesInvHeader."No."));
        END ELSE BEGIN
          SalesInvHeader."Pre-Assigned No. Series" := "No. Series";
          SalesInvHeader."Pre-Assigned No." := "No.";
          IF "Posting No." <> '' THEN BEGIN
            SalesInvHeader."No." := "Posting No.";
            IF GUIALLOWED THEN  //DOC EC2016.1.1
            Window.UPDATE(1,STRSUBSTNO(Text007,"Document Type","No.",SalesInvHeader."No."));
          END;
        END;
        SalesInvHeader."Source Code" := SrcCode;
        SalesInvHeader."User ID" := USERID;
        SalesInvHeader."No. Printed" := 0;
        SalesInvHeader.INSERT(TRUE);  //DOC EC2009.2.64 called TRUE

        UpdateWonOpportunities(SalesHeader);

        ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesInvHeader.RECORDID,SalesInvHeader."No.");

        IF SalesSetup."Copy Comments Order to Invoice" THEN BEGIN
          CopyCommentLines(
            "Document Type",SalesCommentLine."Document Type"::"Posted Invoice",
            "No.",SalesInvHeader."No.");
          RecordLinkManagement.CopyLinks(SalesHeader,SalesInvHeader);
        END;
      END;
    END;

    LOCAL PROCEDURE InsertCrMemoHeader@118(SalesHeader@1000 : Record 36;VAR SalesCrMemoHeader@1001 : Record 114);
    VAR
      SalesCommentLine@1002 : Record 44;
      RecordLinkManagement@1003 : Codeunit 447;
    BEGIN
      WITH SalesHeader DO BEGIN
        SalesCrMemoHeader.INIT;
        SalesCrMemoHeader.TRANSFERFIELDS(SalesHeader);
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          SalesCrMemoHeader."No." := "Posting No.";
          IF SalesSetup."Ext. Doc. No. Mandatory" THEN
            TESTFIELD("External Document No.");
          SalesCrMemoHeader."Pre-Assigned No. Series" := '';
          SalesCrMemoHeader."Return Order No. Series" := "No. Series";
          SalesCrMemoHeader."Return Order No." := "No.";
          IF GUIALLOWED THEN  //DOC EC2016.1.1
          Window.UPDATE(1,STRSUBSTNO(Text008,"Document Type","No.",SalesCrMemoHeader."No."));
        END ELSE BEGIN
          SalesCrMemoHeader."Pre-Assigned No. Series" := "No. Series";
          SalesCrMemoHeader."Pre-Assigned No." := "No.";
          IF "Posting No." <> '' THEN BEGIN
            SalesCrMemoHeader."No." := "Posting No.";
            IF GUIALLOWED THEN  //DOC EC2016.1.1
            Window.UPDATE(1,STRSUBSTNO(Text008,"Document Type","No.",SalesCrMemoHeader."No."));
          END;
        END;
        SalesCrMemoHeader."Source Code" := SrcCode;
        SalesCrMemoHeader."User ID" := USERID;
        SalesCrMemoHeader."No. Printed" := 0;
        SalesCrMemoHeader.INSERT(TRUE);  //DOC EC2009.2.64 called TRUE

        ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesCrMemoHeader.RECORDID,SalesCrMemoHeader."No.");

        IF SalesSetup."Copy Cmts Ret.Ord. to Cr. Memo" THEN BEGIN
          CopyCommentLines(
            "Document Type",SalesCommentLine."Document Type"::"Posted Credit Memo",
            "No.",SalesCrMemoHeader."No.");
          RecordLinkManagement.CopyLinks(SalesHeader,SalesCrMemoHeader);
        END;
      END;
    END;

    LOCAL PROCEDURE CheckICPartnerBlocked@20(SalesHeader@1000 : Record 36);
    VAR
      ICPartner@1001 : Record 413;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF ("Sell-to IC Partner Code" <> '') AND ICPartner.GET("Sell-to IC Partner Code") THEN
          ICPartner.TESTFIELD(Blocked,FALSE);
        IF ("Bill-to IC Partner Code" <> '') AND ICPartner.GET("Bill-to IC Partner Code") THEN
          ICPartner.TESTFIELD(Blocked,FALSE);
      END;
    END;

    LOCAL PROCEDURE SendICDocument@109(VAR SalesHeader@1000 : Record 36;VAR ModifyHeader@1001 : Boolean);
    VAR
      ICInboxOutboxMgt@1002 : Codeunit 427;
    BEGIN
      WITH SalesHeader DO
        IF "Send IC Document" AND ("IC Status" = "IC Status"::New) AND ("IC Direction" = "IC Direction"::Outgoing) AND
           ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
        THEN BEGIN
          ICInboxOutboxMgt.SendSalesDoc(SalesHeader,TRUE);
          "IC Status" := "IC Status"::Pending;
          ModifyHeader := TRUE;
        END;
    END;

    LOCAL PROCEDURE UpdateHandledICInboxTransaction@111(SalesHeader@1000 : Record 36);
    VAR
      HandledICInboxTrans@1001 : Record 420;
      Customer@1002 : Record 18;
    BEGIN
      WITH SalesHeader DO
        IF "IC Direction" = "IC Direction"::Incoming THEN BEGIN
          HandledICInboxTrans.SETRANGE("Document No.","External Document No.");
          Customer.GET("Sell-to Customer No.");
          HandledICInboxTrans.SETRANGE("IC Partner Code",Customer."IC Partner Code");
          HandledICInboxTrans.LOCKTABLE;
          IF HandledICInboxTrans.FINDFIRST THEN BEGIN
            HandledICInboxTrans.Status := HandledICInboxTrans.Status::Posted;
            HandledICInboxTrans.MODIFY;
          END;
        END;
    END;

    PROCEDURE CheckIfReverseChargeApplies@10410090(SalesHeader@10410092 : Record 36) : Boolean;
    VAR
      SalesLine2@10410090 : Record 37;
      TotalAmount@10410091 : Decimal;
    BEGIN
      WITH SalesLine2 DO BEGIN
        GLSetup.GET;
        SalesSetup.GET;
        IF NOT GLSetup."Threshold applies" OR (SalesHeader."VAT Registration No." = '') OR
           (SalesSetup."Domestic Customers" <> SalesHeader."VAT Bus. Posting Group")
        THEN
          EXIT(FALSE);
        RESET;
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETRANGE("Reverse Charge Item",TRUE);
        SETFILTER(Quantity,'<>0');
        SETFILTER("Qty. to Invoice",'<>0');
        IF FINDSET THEN
          REPEAT
            TotalAmount := TotalAmount + Amount * "Qty. to Invoice" / Quantity;
            IF SalesHeader."Currency Factor" <> 0 THEN BEGIN
              IF TotalAmount - "Inv. Discount Amount" >= GLSetup."Threshold Amount" * SalesHeader."Currency Factor" THEN
                EXIT(TRUE);
            END ELSE
              IF TotalAmount - "Inv. Discount Amount" >= GLSetup."Threshold Amount" THEN
                EXIT(TRUE);
          UNTIL NEXT = 0;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE GetPostedDocumentRecord@222(SalesHeader@1000 : Record 36;VAR PostedSalesDocumentVariant@1001 : Variant);
    VAR
      SalesInvHeader@1007 : Record 112;
      SalesCrMemoHeader@1006 : Record 114;
    BEGIN
      WITH SalesHeader DO
        CASE "Document Type" OF
          "Document Type"::Order:
            IF Invoice THEN BEGIN
              SalesInvHeader.GET("Last Posting No.");
              SalesInvHeader.SETRECFILTER;
              PostedSalesDocumentVariant := SalesInvHeader;
            END;
          "Document Type"::Invoice:
            BEGIN
              IF "Last Posting No." = '' THEN
                SalesInvHeader.GET("No.")
              ELSE
                SalesInvHeader.GET("Last Posting No.");

              SalesInvHeader.SETRECFILTER;
              PostedSalesDocumentVariant := SalesInvHeader;
            END;
          "Document Type"::"Credit Memo":
            BEGIN
              IF "Last Posting No." = '' THEN
                SalesCrMemoHeader.GET("No.")
              ELSE
                SalesCrMemoHeader.GET("Last Posting No.");
              SalesCrMemoHeader.SETRECFILTER;
              PostedSalesDocumentVariant := SalesCrMemoHeader;
            END;
          ELSE
            ERROR(STRSUBSTNO(NotSupportedDocumentTypeErr,"Document Type"));
        END;
    END;

    LOCAL PROCEDURE MakeInventoryAdjustment@112();
    VAR
      InvtSetup@1000 : Record 313;
      InvtAdjmt@1001 : Codeunit 5895;
    BEGIN
      InvtSetup.GET;
      IF InvtSetup."Automatic Cost Adjustment" <>
         InvtSetup."Automatic Cost Adjustment"::Never
      THEN BEGIN
        InvtAdjmt.SetProperties(TRUE,InvtSetup."Automatic Cost Posting");
        InvtAdjmt.SetJobUpdateProperties(TRUE);
        InvtAdjmt.MakeMultiLevelAdjmt;
      END;
    END;

    PROCEDURE CheckTrackingAndWarehouseForShip@114(DocumentType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';No@1001 : Code[20];WhseReference@1002 : Integer;VAR Ship@1003 : Boolean);
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",No);
      SalesLine.SETFILTER(Quantity,'<>0');
      IF DocumentType = DocumentType::Order THEN
        SalesLine.SETFILTER("Qty. to Ship",'<>0');
      SalesLine.SETRANGE("Shipment No.",'');

      SalesLine.SETFILTER("Qty. to Assemble to Order",'<>0');
      IF SalesLine.FINDSET THEN
        REPEAT
          InitPostATO(SalesLine);
        UNTIL SalesLine.NEXT = 0;
      SalesLine.SETRANGE("Qty. to Assemble to Order");

      Ship := SalesLine.FINDFIRST;
      WhseShip := TempWhseShptHeader.FINDFIRST;
      WhseReceive := TempWhseRcptHeader.FINDFIRST;
      InvtPickPutaway := WhseReference <> 0;
      IF Ship THEN
        CheckTrackingSpecification(SalesLine);
      IF Ship AND NOT (WhseShip OR WhseReceive OR InvtPickPutaway) THEN
        CheckWarehouse(SalesLine);
    END;

    PROCEDURE CheckTrackingAndWarehouseForReceive@117(DocumentType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';No@1001 : Code[20];WhseReference@1002 : Integer;VAR Receive@1003 : Boolean);
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",No);
      SalesLine.SETFILTER(Quantity,'<>0');
      SalesLine.SETFILTER("Return Qty. to Receive",'<>0');
      SalesLine.SETRANGE("Return Receipt No.",'');
      Receive := SalesLine.FINDFIRST;
      WhseShip := TempWhseShptHeader.FINDFIRST;
      WhseReceive := TempWhseRcptHeader.FINDFIRST;
      InvtPickPutaway := WhseReference <> 0;
      IF Receive THEN
        CheckTrackingSpecification(SalesLine);
      IF Receive AND NOT (WhseReceive OR WhseShip OR InvtPickPutaway) THEN
        CheckWarehouse(SalesLine);
    END;

    LOCAL PROCEDURE FindTempItemChargeAssgntSales@119(SalesLineNo@1000 : Integer) : Boolean;
    BEGIN
      ClearItemChargeAssgntFilter;
      TempItemChargeAssgntSales.SETCURRENTKEY("Applies-to Doc. Type");
      TempItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLineNo);
      EXIT(TempItemChargeAssgntSales.FINDSET);
    END;

    LOCAL PROCEDURE UpdateInvoicedQtyOnShipmentLine@120(VAR SalesShptLine@1000 : Record 111;QtyToBeInvoiced@1001 : Decimal;QtyToBeInvoicedBase@1002 : Decimal);
    BEGIN
      WITH SalesShptLine DO BEGIN
        "Quantity Invoiced" := "Quantity Invoiced" - QtyToBeInvoiced;
        "Qty. Invoiced (Base)" := "Qty. Invoiced (Base)" - QtyToBeInvoicedBase;
        "Qty. Shipped Not Invoiced" := Quantity - "Quantity Invoiced";
        MODIFY;
      END;
    END;

    PROCEDURE SetPreviewMode@121(NewPreviewMode@1000 : Boolean);
    BEGIN
      PreviewMode := NewPreviewMode;
    END;

    LOCAL PROCEDURE FillDeferralPostingBuffer@123(SalesLine@1000 : Record 37;RemainAmtToDefer@1001 : Decimal;RemainAmtToDeferACY@1002 : Decimal;DeferralAccount@1003 : Code[20];SalesAccount@1004 : Code[20]);
    VAR
      DeferralTemplate@1007 : Record 1700;
    BEGIN
      DeferralTemplate.GET(SalesLine."Deferral Code");

      IF TempDeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',
           SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.")
      THEN BEGIN
        IF TempDeferralHeader."Amount to Defer" <> 0 THEN BEGIN
          TempDeferralLine.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetSalesDeferralDocType);
          TempDeferralLine.SETRANGE("Gen. Jnl. Template Name",'');
          TempDeferralLine.SETRANGE("Gen. Jnl. Batch Name",'');
          TempDeferralLine.SETRANGE("Document Type",SalesLine."Document Type");
          TempDeferralLine.SETRANGE("Document No.",SalesLine."Document No.");
          TempDeferralLine.SETRANGE("Line No.",SalesLine."Line No.");

          // The remaining amounts only need to be adjusted into the deferral account and are always reversed
          IF (RemainAmtToDefer <> 0) OR (RemainAmtToDeferACY <> 0) THEN BEGIN
            DeferralPostBuffer[1].PrepareSales(SalesLine,GenJnlLineDocNo);
            DeferralPostBuffer[1]."Amount (LCY)" := RemainAmtToDefer;
            DeferralPostBuffer[1].Amount := RemainAmtToDeferACY;
            DeferralPostBuffer[1]."Sales/Purch Amount (LCY)" := 0;
            DeferralPostBuffer[1]."Sales/Purch Amount" := 0;
            DeferralPostBuffer[1].ReverseAmounts;
            DeferralPostBuffer[1]."G/L Account" := SalesAccount;
            DeferralPostBuffer[1]."Deferral Account" := DeferralAccount;
            // Remainder always goes to the Posting Date
            DeferralPostBuffer[1]."Posting Date" := SalesHeader."Posting Date";
            DeferralPostBuffer[1].Description := DeferralTemplate.Description;
            DeferralPostBuffer[1]."Period Description" := DeferralTemplate."Period Description";
            DeferralPostBuffer[1]."Deferral Line No." := InvDefLineNo;
            UpdDeferralPostBuffer;
          END;

          // Add the deferral lines for each period to the deferral posting buffer merging when they are the same
          IF TempDeferralLine.FINDSET THEN
            REPEAT
              IF (TempDeferralLine."Amount (LCY)" <> 0) OR (TempDeferralLine.Amount <> 0) THEN BEGIN
                DeferralPostBuffer[1].PrepareSales(SalesLine,GenJnlLineDocNo);
                DeferralPostBuffer[1]."Amount (LCY)" := TempDeferralLine."Amount (LCY)";
                DeferralPostBuffer[1].Amount := TempDeferralLine.Amount;
                DeferralPostBuffer[1]."Sales/Purch Amount (LCY)" := TempDeferralLine."Amount (LCY)";
                DeferralPostBuffer[1]."Sales/Purch Amount" := TempDeferralLine.Amount;
                IF NOT SalesLine.IsCreditDocType THEN
                  DeferralPostBuffer[1].ReverseAmounts;
                DeferralPostBuffer[1]."G/L Account" := SalesAccount;
                DeferralPostBuffer[1]."Deferral Account" := DeferralAccount;
                DeferralPostBuffer[1]."Posting Date" := TempDeferralLine."Posting Date";
                DeferralPostBuffer[1].Description := TempDeferralLine.Description;
                DeferralPostBuffer[1]."Period Description" := DeferralTemplate."Period Description";
                DeferralPostBuffer[1]."Deferral Line No." := InvDefLineNo;
                UpdDeferralPostBuffer;
              END ELSE
                ERROR(ZeroDeferralAmtErr,SalesLine."No.",SalesLine."Deferral Code");

            UNTIL TempDeferralLine.NEXT = 0

          ELSE
            ERROR(NoDeferralScheduleErr,SalesLine."No.",SalesLine."Deferral Code");
        END ELSE
          ERROR(NoDeferralScheduleErr,SalesLine."No.",SalesLine."Deferral Code")
      END ELSE
        ERROR(NoDeferralScheduleErr,SalesLine."No.",SalesLine."Deferral Code");
    END;

    LOCAL PROCEDURE UpdDeferralPostBuffer@124();
    BEGIN
      DeferralPostBuffer[1]."Dimension Set ID" := InvPostingBuffer[1]."Dimension Set ID";
      DeferralPostBuffer[1]."Global Dimension 1 Code" := InvPostingBuffer[1]."Global Dimension 1 Code";
      DeferralPostBuffer[1]."Global Dimension 2 Code" := InvPostingBuffer[1]."Global Dimension 2 Code";

      DeferralPostBuffer[2] := DeferralPostBuffer[1];
      IF DeferralPostBuffer[2].FIND THEN BEGIN
        DeferralPostBuffer[2].Amount += DeferralPostBuffer[1].Amount;
        DeferralPostBuffer[2]."Amount (LCY)" += DeferralPostBuffer[1]."Amount (LCY)";
        DeferralPostBuffer[2]."Sales/Purch Amount" += DeferralPostBuffer[1]."Sales/Purch Amount";
        DeferralPostBuffer[2]."Sales/Purch Amount (LCY)" += DeferralPostBuffer[1]."Sales/Purch Amount (LCY)";

        IF NOT DeferralPostBuffer[1]."System-Created Entry" THEN
          DeferralPostBuffer[2]."System-Created Entry" := FALSE;
        IF IsCombinedDeferralZero THEN
          DeferralPostBuffer[2].DELETE
        ELSE
          DeferralPostBuffer[2].MODIFY;
      END ELSE
        DeferralPostBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE RoundDeferralsForArchive@126(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    VAR
      DeferralHeader@1004 : Record 1701;
      AmtToDefer@1002 : Decimal;
      AmtToDeferACY@1003 : Decimal;
    BEGIN
      SalesLine.SETFILTER("Deferral Code",'<>%1','');
      IF SalesLine.FINDSET THEN
        REPEAT
          IF DeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',
               SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.")
          THEN
            DeferralUtilities.RoundDeferralAmount(
              DeferralHeader,SalesHeader."Currency Code",
              SalesHeader."Currency Factor",SalesHeader."Posting Date",
              AmtToDeferACY,AmtToDefer);

        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetAmountsForDeferral@127(SalesLine@1001 : Record 37;VAR AmtToDefer@1002 : Decimal;VAR AmtToDeferACY@1003 : Decimal;VAR DeferralAccount@1004 : Code[20]);
    VAR
      DeferralTemplate@1005 : Record 1700;
    BEGIN
      DeferralTemplate.GET(SalesLine."Deferral Code");
      DeferralTemplate.TESTFIELD("Deferral Account");
      DeferralAccount := DeferralTemplate."Deferral Account";

      IF TempDeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',
           SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.")
      THEN BEGIN
        AmtToDeferACY := TempDeferralHeader."Amount to Defer";
        AmtToDefer := TempDeferralHeader."Amount to Defer (LCY)";
      END;

      IF NOT SalesLine.IsCreditDocType THEN BEGIN
        AmtToDefer := -AmtToDefer;
        AmtToDeferACY := -AmtToDeferACY;
      END;
    END;

    LOCAL PROCEDURE CheckMandatoryHeaderFields@128(SalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader.TESTFIELD("Document Type");
      SalesHeader.TESTFIELD("Sell-to Customer No.");
      SalesHeader.TESTFIELD("Bill-to Customer No.");
      SalesHeader.TESTFIELD("Posting Date");
      SalesHeader.TESTFIELD("Document Date");
      SalesHeader.TESTFIELD("Order Cancelled", FALSE);             //DOC EC2013.3.80PCI EE13.0.0
      SalesHeader.TESTFIELD("PCI Charge Credit Hold", FALSE);      //DOC EC2013.3.80PCI EE13.0.0
    END;

    LOCAL PROCEDURE DefaultGLAccount@129(DeferralCode@1000 : Code[10];AmtToDefer@1001 : Decimal;GLAccNo@1002 : Code[20];DeferralAccNo@1003 : Code[20]) : Code[20];
    BEGIN
      IF (DeferralCode <> '') AND (AmtToDefer = 0) THEN
        EXIT(DeferralAccNo);

      EXIT(GLAccNo);
    END;

    LOCAL PROCEDURE IsCombinedDeferralZero@130() : Boolean;
    BEGIN
      IF (DeferralPostBuffer[2].Amount = 0) AND (DeferralPostBuffer[2]."Amount (LCY)" = 0) AND
         (DeferralPostBuffer[2]."Sales/Purch Amount" = 0) AND (DeferralPostBuffer[2]."Sales/Purch Amount (LCY)" = 0)
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ClearPostBuffers@132();
    BEGIN
      CLEAR(WhsePostRcpt);
      CLEAR(WhsePostShpt);
      CLEAR(GenJnlPostLine);
      CLEAR(ResJnlPostLine);
      CLEAR(JobPostLine);
      CLEAR(ItemJnlPostLine);
      CLEAR(WhseJnlPostLine);
    END;

    LOCAL PROCEDURE SetShipInvoiceReceiveFlags@138(VAR SalesHeader@1000 : Record 36);
    BEGIN
      CASE SalesHeader."Document Type" OF
        SalesHeader."Document Type"::Order:
          SalesHeader.Receive := FALSE;
        SalesHeader."Document Type"::Invoice:
          BEGIN
            SalesHeader.Ship := TRUE;
            SalesHeader.Invoice := TRUE;
            SalesHeader.Receive := FALSE;
          END;
        SalesHeader."Document Type"::"Return Order":
          SalesHeader.Ship := FALSE;
        SalesHeader."Document Type"::"Credit Memo":
          BEGIN
            SalesHeader.Ship := FALSE;
            SalesHeader.Invoice := TRUE;
            SalesHeader.Receive := TRUE;
          END;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostSalesDoc@133(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostCommitSalesDoc@134(VAR SalesHeader@1000 : Record 36;VAR GenJnlPostLine@1003 : Codeunit 12;PreviewMode@1001 : Boolean;ModifyHeader@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPostSalesDoc@135(VAR SalesHeader@1001 : Record 36;VAR GenJnlPostLine@1000 : Codeunit 12;SalesShptHdrNo@1002 : Code[20];RetRcpHdrNo@1003 : Code[20];SalesInvHdrNo@1004 : Code[20];SalesCrMemoHdrNo@1005 : Code[20]);
    BEGIN
    END;

    LOCAL PROCEDURE PostResJnlLine@136(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1002 : Record 37;VAR JobTaskSalesLine@1003 : Record 37);
    VAR
      ResJnlLine@1001 : Record 207;
    BEGIN
      IF SalesLine."Qty. to Invoice" <> 0 THEN BEGIN
        ResJnlLine.INIT;
        ResJnlLine."Posting Date" := SalesHeader."Posting Date";
        ResJnlLine."Document Date" := SalesHeader."Document Date";
        ResJnlLine."Reason Code" := SalesHeader."Reason Code";
        ResJnlLine."Resource No." := SalesLine."No.";
        ResJnlLine.Description := SalesLine.Description;
        ResJnlLine."Source Type" := ResJnlLine."Source Type"::Customer;
        ResJnlLine."Source No." := SalesLine."Sell-to Customer No.";
        ResJnlLine."Work Type Code" := SalesLine."Work Type Code";
        ResJnlLine."Job No." := SalesLine."Job No.";
        ResJnlLine."Unit of Measure Code" := SalesLine."Unit of Measure Code";
        ResJnlLine."Shortcut Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
        ResJnlLine."Shortcut Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
        ResJnlLine."Dimension Set ID" := SalesLine."Dimension Set ID";
        ResJnlLine."Gen. Bus. Posting Group" := SalesLine."Gen. Bus. Posting Group";
        ResJnlLine."Gen. Prod. Posting Group" := SalesLine."Gen. Prod. Posting Group";
        ResJnlLine."Entry Type" := ResJnlLine."Entry Type"::Sale;
        ResJnlLine."Document No." := GenJnlLineDocNo;
        ResJnlLine."External Document No." := GenJnlLineExtDocNo;
        ResJnlLine.Quantity := -SalesLine."Qty. to Invoice";
        ResJnlLine."Unit Cost" := SalesLine."Unit Cost (LCY)";
        ResJnlLine."Total Cost" := SalesLine."Unit Cost (LCY)" * ResJnlLine.Quantity;
        ResJnlLine."Unit Price" := -SalesLine.Amount / SalesLine.Quantity;
        ResJnlLine."Total Price" := -SalesLine.Amount;
        ResJnlLine."Source Code" := SrcCode;
        ResJnlLine."Posting No. Series" := SalesHeader."Posting No. Series";
        ResJnlLine."Qty. per Unit of Measure" := SalesLine."Qty. per Unit of Measure";
        ResJnlPostLine.RunWithCheck(ResJnlLine);
        IF JobTaskSalesLine."Job Contract Entry No." > 0 THEN
          PostJobContractLine(JobTaskSalesLine);
      END;
    END;

    LOCAL PROCEDURE UpdateSalesLineDimSetIDFromAppliedEntry@137(VAR SalesLineToPost@1000 : Record 37;SalesLine@1001 : Record 37);
    VAR
      ItemLedgEntry@1002 : Record 32;
      DimensionMgt@1003 : Codeunit 408;
      DimSetID@1004 : ARRAY [10] OF Integer;
    BEGIN
      DimSetID[1] := SalesLine."Dimension Set ID";
      WITH SalesLineToPost DO BEGIN
        IF "Appl.-to Item Entry" <> 0 THEN BEGIN
          ItemLedgEntry.GET("Appl.-to Item Entry");
          DimSetID[2] := ItemLedgEntry."Dimension Set ID";
        END;
        "Dimension Set ID" :=
          DimensionMgt.GetCombinedDimensionSetID(DimSetID,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      END;
    END;

    LOCAL PROCEDURE CheckDeferralPosting@157(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETFILTER("Qty. to Invoice",'<>%1',0);
      SalesLine.SETFILTER("Deferral Code",'<>%1','');
      IF SalesLine.FINDSET THEN
        REPEAT
          IF SalesLine."Line Discount Amount" <> 0 THEN
            ERROR(
              STRSUBSTNO(
                CannotPostDiscountDeferralErr,
                SalesLine."Line No.",SalesLine.FIELDCAPTION("Line Discount Amount")));
          IF SalesLine."Inv. Discount Amount" <> 0 THEN
            ERROR(
              STRSUBSTNO(
                CannotPostDiscountDeferralErr,
                SalesLine."Line No.",SalesLine.FIELDCAPTION("Inv. Discount Amount")));
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcDeferralAmounts@164(SalesHeader@1000 : Record 36;SalesLine@1003 : Record 37;OriginalDeferralAmount@1002 : Decimal);
    VAR
      DeferralHeader@1004 : Record 1701;
      DeferralLine@1005 : Record 1702;
      CurrExchRate@1006 : Record 330;
      TotalAmountLCY@1009 : Decimal;
      TotalAmount@1010 : Decimal;
      TotalDeferralCount@1007 : Integer;
      DeferralCount@1008 : Integer;
      UseDate@1001 : Date;
    BEGIN
      // Populate temp and calculate the LCY amounts for posting
      IF SalesHeader."Posting Date" = 0D THEN
        UseDate := WORKDATE
      ELSE
        UseDate := SalesHeader."Posting Date";

      IF DeferralHeader.GET(
           DeferralUtilities.GetSalesDeferralDocType,'','',SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.")
      THEN BEGIN
        TempDeferralHeader := DeferralHeader;
        IF SalesLine.Quantity <> SalesLine."Qty. to Invoice" THEN
          TempDeferralHeader."Amount to Defer" :=
            ROUND(TempDeferralHeader."Amount to Defer" *
              SalesLine.GetDeferralAmount / OriginalDeferralAmount,Currency."Amount Rounding Precision");
        Increment(TotalDeferralHeader."Amount to Defer",TempDeferralHeader."Amount to Defer");
        TempDeferralHeader."Amount to Defer (LCY)" :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              UseDate,SalesHeader."Currency Code",
              TotalDeferralHeader."Amount to Defer",SalesHeader."Currency Factor")) -
          TotalDeferralHeader."Amount to Defer (LCY)";
        TempDeferralHeader.INSERT;

        WITH DeferralLine DO BEGIN
          SETRANGE("Deferral Doc. Type",DeferralHeader."Deferral Doc. Type");
          SETRANGE("Gen. Jnl. Template Name",DeferralHeader."Gen. Jnl. Template Name");
          SETRANGE("Gen. Jnl. Batch Name",DeferralHeader."Gen. Jnl. Batch Name");
          SETRANGE("Document Type",DeferralHeader."Document Type");
          SETRANGE("Document No.",DeferralHeader."Document No.");
          SETRANGE("Line No.",DeferralHeader."Line No.");
          IF FINDSET THEN BEGIN
            TotalDeferralCount := COUNT;
            REPEAT
              DeferralCount := DeferralCount + 1;
              TempDeferralLine.INIT;
              TempDeferralLine := DeferralLine;

              IF DeferralCount = TotalDeferralCount THEN BEGIN
                TempDeferralLine.Amount := TempDeferralHeader."Amount to Defer" - TotalAmount;
                TempDeferralLine."Amount (LCY)" := TempDeferralHeader."Amount to Defer (LCY)" - TotalAmountLCY;
              END ELSE BEGIN
                IF SalesLine.Quantity <> SalesLine."Qty. to Invoice" THEN
                  TempDeferralLine.Amount :=
                    ROUND(TempDeferralLine.Amount *
                      SalesLine.GetDeferralAmount / OriginalDeferralAmount,Currency."Amount Rounding Precision");

                TempDeferralLine."Amount (LCY)" :=
                  ROUND(
                    CurrExchRate.ExchangeAmtFCYToLCY(
                      UseDate,SalesHeader."Currency Code",
                      TempDeferralLine.Amount,SalesHeader."Currency Factor"));
                TotalAmount := TotalAmount + TempDeferralLine.Amount;
                TotalAmountLCY := TotalAmountLCY + TempDeferralLine."Amount (LCY)";
              END;
              TempDeferralLine.INSERT;
            UNTIL NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CreatePostedDeferralScheduleFromSalesDoc@165(SalesLine@1008 : Record 37;NewDocumentType@1007 : Integer;NewDocumentNo@1003 : Code[20];NewLineNo@1002 : Integer;PostingDate@1000 : Date);
    VAR
      PostedDeferralHeader@1006 : Record 1704;
      PostedDeferralLine@1005 : Record 1705;
      DeferralTemplate@1004 : Record 1700;
      DeferralAccount@1001 : Code[20];
    BEGIN
      IF DeferralTemplate.GET(SalesLine."Deferral Code") THEN
        DeferralAccount := DeferralTemplate."Deferral Account";

      IF TempDeferralHeader.GET(
           DeferralUtilities.GetSalesDeferralDocType,'','',SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.")
      THEN BEGIN
        PostedDeferralHeader.InitFromDeferralHeader(TempDeferralHeader,'','',
          NewDocumentType,NewDocumentNo,NewLineNo,DeferralAccount,SalesLine."Sell-to Customer No.",PostingDate);
        WITH TempDeferralLine DO BEGIN
          SETRANGE("Deferral Doc. Type",DeferralUtilities.GetSalesDeferralDocType);
          SETRANGE("Gen. Jnl. Template Name",'');
          SETRANGE("Gen. Jnl. Batch Name",'');
          SETRANGE("Document Type",SalesLine."Document Type");
          SETRANGE("Document No.",SalesLine."Document No.");
          SETRANGE("Line No.",SalesLine."Line No.");
          IF FINDSET THEN BEGIN
            REPEAT
              PostedDeferralLine.InitFromDeferralLine(
                TempDeferralLine,'','',NewDocumentType,NewDocumentNo,NewLineNo,DeferralAccount);
            UNTIL NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE DeleteWhseRqst@122(SalesHeader@1001 : Record 36);
    VAR
      WarehouseRequest@1000 : Record 5765;
    BEGIN
      WarehouseRequest.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WarehouseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseRequest.SETRANGE("Source Subtype",SalesHeader."Document Type");
      WarehouseRequest.SETRANGE("Source No.",SalesHeader."No.");
      IF NOT WarehouseRequest.ISEMPTY THEN
        WarehouseRequest.DELETEALL;
    END;

    PROCEDURE "--- NS.F ---"@1000000001();
    BEGIN
    END;

    PROCEDURE UpdateItemJnlLinenSembleFields@1000000002(pSalesLine@1000000001 : Record 37);
    BEGIN
      //DOC NS2016.16 - Updating item journal line ensemble fields

      ItemJnlLine."Season Code" := pSalesLine."Season Code";
      ItemJnlLine."Sub-Season Code" := pSalesLine."Sub-Season Code";
      ItemJnlLine."Brand Code" := pSalesLine."Brand Code";
      ItemJnlLine."Division Code" := pSalesLine."Division Code";
      ItemJnlLine."Department Code" := pSalesLine."Department Code";
      ItemJnlLine."Group Code" := pSalesLine."Group Code";
      ItemJnlLine."Category Code" := pSalesLine."Category Code";
      ItemJnlLine."Sub-Category Code" := pSalesLine."Sub-Category Code";
      ItemJnlLine."Size Group Code" := pSalesLine."Size Group Code";
      ItemJnlLine."Size Code" := pSalesLine."Size Code";
      ItemJnlLine."Standard Size Group Code" := pSalesLine."Standard Size Group Code";
      ItemJnlLine."Standard Size Code" := pSalesLine."Standard Size Code";
      ItemJnlLine."Style No." := pSalesLine."Style No.";
    END;

    BEGIN
    {
      //DOC NS2015.1    JH 21/03/2014 - Updating journal line before posting
      //DOC NS2016.16   JH 02/09/2016 - nSemble 2016
      //DOC EC2009.2    MQ 01/01/2012 - Added global variables. Take "Label Code" and "Is An Internet Customer" to Cust. Ledger Entry via Gen. Jnl Lines
      //DOC EC2009.2    MQ 01/01/2012 - Added GUIALLOWED to hide window if runs under NAS - search of Window and add line above IF GUIALLOWED THEN  //DOC EC2016.1.1
      //DOC EC2009.2    MQ 01/01/2012 - Changed .INSERT to .INSERT(TRUE) on posted tables in 4 places.
      //DOC EC2013.3.70 MQ 15/07/2013 - GW130715  Call StdTriggerCode in just before DELETE rather than WebAtt..Delete as more code
      //DOC EC2013.3.70 MQ 15/07/2013 - Code for Additional Document Search - only add if Customers want this.
      //DOC EC2013.3.70 MQ 15/07/2013 - Code to take BOM Item No. to Sales Invoice / Cr. Memo Lines - only if Explode BOM
      //DOC EC2013.3.80 MQ 15/08/2013 - GW130815  EE13.0.7
      //DOC EC2013.4.00 MQ 09/12/2013 - GW131209 deal when PCI not needed.
      //DOC EC2016.6    JH 05/10/2016 - ECom 2016
      //DOC OP9031 RK 25/01/17 - Update line status to 'Shipped' when shipment posted on lines.
    }
    END.
  }
}

