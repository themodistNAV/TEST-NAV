OBJECT Codeunit 9655 Init. Server Printer Table
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    TableNo=2000000039;
    OnRun=BEGIN
            InitTempPrinter(Rec);
          END;

  }
  CODE
  {
    VAR
      PrinterNotFoundErr@1000 : TextConst '@@@="%1=a printer name";ENU=The printer %1 was not found on the server.;ENG=The printer %1 was not found on the server.';

    LOCAL PROCEDURE InitTempPrinter@1(VAR Printer@1000 : Record 2000000039);
    VAR
      PrinterSettings@1004 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Printing.PrinterSettings";
      PrinterSettingsCollection@1003 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Printing.PrinterSettings+StringCollection";
      PrinterName@1001 : Text;
      i@1002 : Integer;
    BEGIN
      PrinterSettings := PrinterSettings.PrinterSettings;
      PrinterSettingsCollection := PrinterSettings.InstalledPrinters;
      FOR i := 0 TO PrinterSettingsCollection.Count - 1 DO BEGIN
        PrinterName := PrinterSettingsCollection.Item(i);
        PrinterSettings.PrinterName := PrinterName;
        Printer.ID := COPYSTR(PrinterName,1,MAXSTRLEN(Printer.ID));
        Printer.INSERT;
      END;
    END;

    PROCEDURE ValidatePrinterName@2(VAR PrinterName@1000 : Text[250]);
    BEGIN
      IF PrinterName = '' THEN
        EXIT;
      IF NOT FindPrinterName(PrinterName,TRUE) THEN
        ERROR(PrinterNotFoundErr);
    END;

    LOCAL PROCEDURE FindPrinterName@10(VAR PrinterName@1000 : Text[250];AllowPartialMatch@1002 : Boolean) : Boolean;
    VAR
      TempPrinter@1001 : TEMPORARY Record 2000000039;
    BEGIN
      InitTempPrinter(TempPrinter);

      IF PrinterName <> '' THEN // If no name specified, then find the first.
        TempPrinter.SETRANGE(ID,PrinterName);
      IF TempPrinter.FINDFIRST THEN BEGIN
        PrinterName := TempPrinter.ID;
        EXIT(TRUE);
      END;
      IF NOT AllowPartialMatch THEN
        EXIT(FALSE);

      TempPrinter.SETFILTER(ID,'%1',STRSUBSTNO('@*%1*',PrinterName));
      IF TempPrinter.FINDFIRST THEN BEGIN
        PrinterName := TempPrinter.ID;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE FindClosestMatchToClientDefaultPrinter@3(ReportID@1001 : Integer) : Text[250];
    VAR
      PrinterName@1000 : Text[250];
    BEGIN
      PrinterName := GetPrinterSelection(ReportID);
      IF PrinterName = '' THEN
        PrinterName := GetLocalDefaultPrinter;
      IF NOT FindPrinterName(PrinterName,FALSE) THEN BEGIN
        PrinterName := '';
        IF FindPrinterName(PrinterName,TRUE) THEN;
      END;
      EXIT(PrinterName);
    END;

    LOCAL PROCEDURE GetLocalDefaultPrinter@5() : Text[250];
    VAR
      FileManagement@1004 : Codeunit 419;
      PrinterSettings@1003 : DotNet "'System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Printing.PrinterSettings" RUNONCLIENT;
      PrinterName@1001 : Text;
      i@1000 : Integer;
    BEGIN
      IF NOT FileManagement.CanRunDotNetOnClient THEN
        EXIT('');
      PrinterSettings := PrinterSettings.PrinterSettings;
      PrinterName := DELCHR(PrinterSettings.PrinterName,'<','\');
      i := STRPOS(PrinterName,'\');
      IF i > 1 THEN
        PrinterName := COPYSTR(PrinterName,i + 1);
      EXIT(PrinterName);
    END;

    LOCAL PROCEDURE GetPrinterSelection@6(ReportID@1000 : Integer) : Text[250];
    VAR
      PrinterSelection@1001 : Record 78;
    BEGIN
      IF ReportID = 0 THEN
        EXIT('');
      PrinterSelection.SETRANGE("User ID",USERID);
      PrinterSelection.SETRANGE("Report ID",ReportID);
      IF NOT PrinterSelection.FINDFIRST THEN BEGIN
        PrinterSelection.SETRANGE("User ID");
        IF PrinterSelection.FINDFIRST THEN;
      END;
      EXIT(PrinterSelection."Printer Name");
    END;

    BEGIN
    END.
  }
}

