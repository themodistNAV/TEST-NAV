OBJECT Report 9062351 Setup Default Bins
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NH2016.15;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Setup Default Bins;
               ENG=Setup Default Bins];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   CreateBinsAutomatically := TRUE;
                 END;

    OnPreReport=VAR
                  eNoBinsSelected@1000000001 : TextConst 'ENU=No bins have been selected.;ENG=No bins have been selected.';
                  eNoLocationsSelected@1000000000 : TextConst 'ENU=No locations have been selected.;ENG=No locations have been selected.';
                  lModify@1000000003 : Boolean;
                BEGIN
                  IF ((ReceiptBinCode = '') AND (ShipmentBinCode = '') AND (AdjustmentBinCode = '') AND (CrossDockBinCode = '')) THEN
                    ERROR(eNoBinsSelected);

                  ErrorBuffer.RESET();
                  ErrorBuffer.DELETEALL();
                  ErrorBufferId := 0;

                  Rec.RESET();
                  Rec.SETRANGE(Selected, TRUE);
                  IF (Rec.FINDSET()) THEN
                    REPEAT
                      lModify := FALSE;
                      Location.GET(Rec.Name);
                      UpdateLocationBin(Location.FIELDNO("Receipt Bin Code"), ReceiptBinCode, lModify);
                      UpdateLocationBin(Location.FIELDNO("Shipment Bin Code"), ShipmentBinCode, lModify);
                      UpdateLocationBin(Location.FIELDNO("Adjustment Bin Code"), AdjustmentBinCode, lModify);
                      UpdateLocationBin(Location.FIELDNO("Cross-Dock Bin Code"), CrossDockBinCode, lModify);
                      IF (lModify) THEN
                        Location.MODIFY();
                    UNTIL (Rec.NEXT() = 0)
                  ELSE
                    ERROR(eNoLocationsSelected);

                  ErrorBuffer.RESET();
                  IF ( NOT (ErrorBuffer.ISEMPTY)) THEN
                  BEGIN
                    ErrorBuffer.FINDFIRST();
                    PAGE.RUN(0, ErrorBuffer);
                  END;

                  Rec.RESET();
                END;

    OnPostReport=BEGIN
                   MESSAGE(tFinalMessage);
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      InsertAllowed=No;
      DeleteAllowed=No;
      SourceTable=Table9062730;
      SourceTableTemporary=Yes;
      OnOpenPage=BEGIN
                   FillLocationBuffer();
                 END;

    }
    CONTROLS
    {
      { 1000000000;;Container;
                  ContainerType=ContentArea }

      { 1000000005;1;Group  ;
                  Name=BinsGroup;
                  CaptionML=ENU=Bins;
                  GroupType=Group }

      { 1000000001;2;Field  ;
                  Name=ReceiptBinCodeField;
                  CaptionML=[ENU=Receipt Bin Code;
                             ENG=Receipt Bin Code];
                  SourceExpr=ReceiptBinCode;
                  OnLookup=BEGIN
                             RequestOptionsPage.SAVERECORD();
                             IF (BinLookup(ReceiptBinCode)) THEN
                               RequestOptionsPage.UPDATE(TRUE);
                           END;
                            }

      { 1000000002;2;Field  ;
                  Name=ShipmentBinCodeField;
                  CaptionML=[ENU=Shipment Bin Code;
                             ENG=Shipment Bin Code];
                  SourceExpr=ShipmentBinCode;
                  OnLookup=BEGIN
                             RequestOptionsPage.SAVERECORD();
                             IF (BinLookup(ShipmentBinCode)) THEN
                               RequestOptionsPage.UPDATE(TRUE);
                           END;
                            }

      { 1000000003;2;Field  ;
                  Name=AdjustmentBinCodeField;
                  CaptionML=[ENU=Adjustment Bin Code;
                             ENG=Adjustment Bin Code];
                  SourceExpr=AdjustmentBinCode;
                  OnLookup=BEGIN
                             RequestOptionsPage.SAVERECORD();
                             IF (BinLookup(AdjustmentBinCode)) THEN
                               RequestOptionsPage.UPDATE(TRUE);
                           END;
                            }

      { 1000000004;2;Field  ;
                  Name=CrossDockBinCodeField;
                  CaptionML=[ENU=Cross Dock Bin Code;
                             ENG=Cross Dock Bin Code];
                  SourceExpr=CrossDockBinCode;
                  OnLookup=BEGIN
                             RequestOptionsPage.SAVERECORD();
                             IF (BinLookup(CrossDockBinCode)) THEN
                               RequestOptionsPage.UPDATE(TRUE);
                           END;
                            }

      { 1000000006;1;Group  ;
                  Name=LocationsGroup;
                  CaptionML=[ENU=Locations;
                             ENG=Locations];
                  GroupType=Group }

      { 1000000013;2;Group  ;
                  Name=LocationsRepeater;
                  CaptionML=[ENU=Locations;
                             ENG=Locations];
                  GroupType=Repeater }

      { 1000000012;3;Field  ;
                  Name=CodeField;
                  CaptionML=[ENU=Code;
                             ENG=Code];
                  SourceExpr=Name;
                  Editable=FALSE }

      { 1000000011;3;Field  ;
                  Name=NameField;
                  CaptionML=[ENU=Name;
                             ENG=Name];
                  SourceExpr=Value;
                  Editable=FALSE }

      { 1000000010;3;Field  ;
                  Name=SelectedField;
                  CaptionML=[ENU=Selected;
                             ENG=Selected];
                  SourceExpr=Selected }

      { 1000000007;2;Field  ;
                  Name=SelectAllField;
                  CaptionML=[ENU=Select All;
                             ENG=Select All];
                  SourceExpr=tSelectAll;
                  Editable=FALSE;
                  OnDrillDown=BEGIN
                                Select(TRUE);
                              END;

                  ShowCaption=No }

      { 1000000008;2;Field  ;
                  Name=SelectNoneField;
                  CaptionML=[ENU=Select None;
                             ENG=Select None];
                  SourceExpr=tSelectNone;
                  Editable=FALSE;
                  OnDrillDown=BEGIN
                                Select(FALSE);
                              END;

                  ShowCaption=No }

      { 1000000009;1;Group  ;
                  Name=OptionsGroup;
                  CaptionML=[ENU=Options;
                             ENG=Options];
                  GroupType=Group }

      { 1000000014;2;Field  ;
                  Name=CreateBinsAutomaticallyField;
                  CaptionML=[ENU=Create Bins Automatically;
                             ENG=Create Bins Automatically];
                  SourceExpr=CreateBinsAutomatically }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Location@1000000005 : Record 14;
      Bin@1000000008 : Record 7354;
      ErrorBuffer@1000000009 : TEMPORARY Record 9062730;
      ErrorBufferId@1000000010 : Integer;
      ReceiptBinCode@1000000000 : Code[10];
      ShipmentBinCode@1000000001 : Code[10];
      AdjustmentBinCode@1000000002 : Code[10];
      CrossDockBinCode@1000000003 : Code[10];
      tSelectAll@1000000006 : TextConst 'ENU=Select All;ENG=Select All';
      tSelectNone@1000000007 : TextConst 'ENU=Select None;ENG=Select None';
      CreateBinsAutomatically@1000000011 : Boolean;
      tFinalMessage@1000000004 : TextConst 'ENU=Default bins have been set up.;ENG=Default bins have been set up.';

    LOCAL PROCEDURE FillLocationBuffer@1000000002();
    VAR
      lId@1000000000 : Integer;
    BEGIN
      Rec.RESET();
      Rec.DELETEALL();

      CLEAR(lId);

      Location.RESET();
      IF (Location.FINDSET()) THEN
      REPEAT
        IF ((Location."Require Receive") OR (Location."Require Shipment") OR
            (Location."Require Put-away") OR (Location."Require Pick") OR
            (Location."Bin Mandatory")) THEN
        BEGIN
          lId += 1;
          Rec.INIT();
          Rec.ID := lId;
          Rec.Name := Location.Code;
          Rec.Value := Location.Name;
          Rec.Selected := TRUE;
          Rec.INSERT();
        END;
      UNTIL (Location.NEXT() = 0);

      IF (Rec.FINDFIRST()) THEN;
    END;

    LOCAL PROCEDURE BinLookup@1000000000(VAR pBinCode@1000000000 : Code[10]) : Boolean;
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      lResult := FALSE;
      Bin.RESET();
      IF (PAGE.RUNMODAL(0, Bin) = ACTION::LookupOK) THEN
      BEGIN
        pBinCode := Bin.Code;
        lResult := TRUE;
      END;
      EXIT(lResult);
    END;

    LOCAL PROCEDURE Select@1000000005(pSelect@1000000000 : Boolean);
    BEGIN
      Rec.MODIFYALL(Selected, pSelect);
      RequestOptionsPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE UpdateLocationBin@1000000008(pBinFieldId@1000000000 : Integer;pNewBinCode@1000000001 : Code[10];VAR pModify@1000000005 : Boolean);
    VAR
      lRecordRef@1000000002 : RecordRef;
      lFieldRef@1000000003 : FieldRef;
      lCurrentBinCode@1000000004 : Code[10];
      lSetBin@1000000006 : Boolean;
      eNoBin@1000000007 : TextConst 'ENU=Location "%1" doesn''t have bin "%2" specified.;ENG=Location "%1" doesn''t have bin "%2" specified.';
    BEGIN
      lRecordRef.GETTABLE(Location);
      lFieldRef := lRecordRef.FIELD(pBinFieldId);
      lCurrentBinCode := lFieldRef.VALUE;
      IF (lCurrentBinCode <> pNewBinCode) THEN
      BEGIN
        IF (pNewBinCode <> '') THEN
        BEGIN
          lSetBin := Bin.GET(Location.Code, pNewBinCode);
          IF ( NOT (lSetBin)) THEN
            IF (CreateBinsAutomatically) THEN
            BEGIN
              Bin.INIT();
              Bin.VALIDATE("Location Code", Location.Code);
              Bin.VALIDATE(Code, pNewBinCode);
              Bin.INSERT(TRUE);
            END
            ELSE
            BEGIN
              ErrorBufferId += 1;
              ErrorBuffer.ID := ErrorBufferId;
              ErrorBuffer.Name := STRSUBSTNO(eNoBin, Location.Code, pNewBinCode);
              ErrorBuffer.INSERT();
            END;
        END
        ELSE
          lSetBin := TRUE;
        IF (lSetBin) THEN
        BEGIN
          lFieldRef.VALIDATE(pNewBinCode);
          lRecordRef.SETTABLE(Location);
          pModify := TRUE;
        END;
      END;
    END;

    BEGIN
    {
      //DOC NH2016.14 JH 11/04/2016 - Created
      //DOC NH2016.15 JH 09/05/2016 - CfMD amendments
    }
    END.
  }
  RDLDATA
  {
  }
}

