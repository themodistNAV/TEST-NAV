OBJECT Codeunit 9086966 nF. Log Management
{
  OBJECT-PROPERTIES
  {
    Date=20/10/16;
    Time=[ 3:42:51 PM];
    Version List=NF2016.17;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NfLog@1000000000 : Record 9086967;

    LOCAL PROCEDURE "--- General ---"@1000000012();
    BEGIN
    END;

    PROCEDURE ConfirmLog@1000000013(VAR pNfLog@1000000000 : Record 9086967;pInteraction@1000000001 : Boolean) : Boolean;
    VAR
      eNoLogEntriesToConfirm@1000000002 : TextConst 'ENU=There are no log entries to confirm.;ENG=There are no log entries to confirm.';
      eConfirmation@1000000006 : TextConst 'ENU=Do you want to confirm %1?;ENG=Do you want to confirm %1?';
      eLogEntry@1000000003 : TextConst 'ENU=log entry "%1";ENG=log entry "%1"';
      eLogEntries@1000000004 : TextConst 'ENU=%1 log entries;ENG=%1 log entries';
      lCount@1000000007 : Integer;
      lConfirmationText@1000000005 : Text;
    BEGIN
      ///<summary>Confirming log</summary>
      ///<param name="pNfLog">The log recordset to confirm</param>
      ///<param name="pInteraction">Interaction</param>
      ///<returns>TRUE = Confirmed, FALSE = Cancelled</returns>

      pNfLog.SETFILTER(Result, '%1|%2', pNfLog.Result::Error, pNfLog.Result::Warning);
      pNfLog.SETRANGE(Confirmed, FALSE);

      pInteraction := ((pInteraction) AND (GUIALLOWED()));
      IF (pInteraction) THEN
      BEGIN
        lCount := pNfLog.COUNT();
        CASE (lCount) OF
          0: ERROR(eNoLogEntriesToConfirm);
          1:
            BEGIN
              pNfLog.FINDFIRST();
              lConfirmationText := STRSUBSTNO(eLogEntry, pNfLog.GetMessage());
            END;
          ELSE
            lConfirmationText := STRSUBSTNO(eLogEntries, lCount);
        END;
        IF ( NOT (CONFIRM(eConfirmation, TRUE, lConfirmationText))) THEN
          EXIT(FALSE);
      END;

      IF (pNfLog.FINDSET(TRUE)) THEN
      REPEAT
        pNfLog.VALIDATE(Confirmed, TRUE);
        pNfLog.MODIFY(TRUE);
      UNTIL (pNfLog.NEXT() = 0);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "--- Result Filtering ---"@1000000001();
    BEGIN
    END;

    PROCEDURE DetectResultFilter@1000000000(VAR pNfLog@1000000000 : Record 9086967;VAR pResultFilter@1000000005 : ARRAY [3] OF Boolean);
    VAR
      lFilterGroup@1000000001 : Integer;
      lResultFilterText@1000000002 : Text;
      lResultFilterBuffer@1000000003 : TEMPORARY Record 9086967;
      lResult@1000000004 : Option;
    BEGIN
      ///<summary>Detecting result filter</summary>
      ///<param name="pNfLog">The recordset to filter</param>
      ///<param name="pResultFilter">The filter</param>

      CLEAR(pResultFilter);

      FOR lFilterGroup := 6 DOWNTO 0 DO
      BEGIN
        pNfLog.FILTERGROUP(lFilterGroup);
        IF (pNfLog.GETFILTER(Result) <> '') THEN
        BEGIN
          lResultFilterText := pNfLog.GETFILTER(Result);
          lFilterGroup := 0;
        END;
      END;
      pNfLog.FILTERGROUP(0);

      FOR lResult := pNfLog.Result::Success TO pNfLog.Result::Error DO
      BEGIN
        lResultFilterBuffer.ID := lResult;
        lResultFilterBuffer.Result := lResult;
        lResultFilterBuffer.INSERT();
      END;

      lResultFilterBuffer.RESET();
      FOR lResult := pNfLog.Result::Success TO pNfLog.Result::Error DO
        IF (lResultFilterText <> '') THEN
        BEGIN
          lResultFilterBuffer.SETFILTER(Result, STRSUBSTNO('(%1)&(%2)', lResultFilterText, lResult));
          pResultFilter[lResult] := ( NOT (lResultFilterBuffer.ISEMPTY()));
        END
        ELSE
          pResultFilter[lResult] := TRUE;
    END;

    PROCEDURE UpdateResultFilter@1000000002(VAR pNfLog@1000000001 : Record 9086967;VAR pResultFilter@1000000003 : ARRAY [3] OF Boolean);
    VAR
      lResult@1000000000 : Integer;
      lAllOn@1000000004 : Boolean;
      lAllOff@1000000005 : Boolean;
      lFilter@1000000006 : Text;
    BEGIN
      ///<summary>Switching on / off result filter</summary>
      ///<param name="pNfLog">The recordset to filter</param>
      ///<param name="pResultFilter">The filter</param>

      lAllOn := TRUE;
      lAllOff := TRUE;
      FOR lResult := 1 TO ARRAYLEN(pResultFilter) DO
      BEGIN
        lAllOn := ((lAllOn) AND (pResultFilter[lResult]));
        lAllOff := ((lAllOff) AND ( NOT (pResultFilter[lResult])));
        IF (pResultFilter[lResult]) THEN
        BEGIN
          IF (lFilter <> '') THEN
            lFilter := lFilter + '|';
          lFilter := lFilter + FORMAT(lResult);
        END;
      END;

      pNfLog.FILTERGROUP(2);
      IF (lAllOn) THEN
        pNfLog.SETRANGE(Result)
      ELSE IF (lAllOff) THEN
        pNfLog.SETFILTER(Result, '0&1')
      ELSE
        pNfLog.SETFILTER(Result, lFilter);
      pNfLog.FILTERGROUP(0);
    END;

    BEGIN
    {
      ///<summary>Management of nForcement log</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-10-15">Created</change>
    }
    END.
  }
}

