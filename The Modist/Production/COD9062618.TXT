OBJECT Codeunit 9062618 Credit Control Management
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NH2016.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SystemBehaviour@9062232 : Record 9062230;
      tPeriod1FilterSysB@9062230 : TextConst 'ENU=CC_PERIOD_1_FILTER;ENG=CC_PERIOD_1_FILTER';
      tPeriod2FilterSysB@9062235 : TextConst 'ENU=CC_PERIOD_2_FILTER;ENG=CC_PERIOD_2_FILTER';
      tPeriod3FilterSysB@9062234 : TextConst 'ENU=CC_PERIOD_3_FILTER;ENG=CC_PERIOD_3_FILTER';
      tPeriod4FilterSysB@9062233 : TextConst 'ENU=CC_PERIOD_4_FILTER;ENG=CC_PERIOD_4_FILTER';
      tPeriod5FilterSysB@9062231 : TextConst 'ENU=CC_PERIOD_5_FILTER;ENG=CC_PERIOD_5_FILTER';
      SmartFilterManagement@1000000000 : Codeunit 9062231;
      TnpToolkit@9062237 : Codeunit 9062230;
      TnpUtils@9062236 : Codeunit 9062229;
      tPeriod1CaptionSysB@9062238 : TextConst 'ENU=CC_PERIOD_1_FILTER;ENG=CC_PERIOD_1_FILTER';
      tPeriod2CaptionSysB@9062242 : TextConst 'ENU=CC_PERIOD_1_FILTER;ENG=CC_PERIOD_1_FILTER';
      tPeriod3CaptionSysB@9062241 : TextConst 'ENU=CC_PERIOD_1_FILTER;ENG=CC_PERIOD_1_FILTER';
      tPeriod4CaptionSysB@9062240 : TextConst 'ENU=CC_PERIOD_1_FILTER;ENG=CC_PERIOD_1_FILTER';
      tPeriod5CaptionSysB@9062239 : TextConst 'ENU=CC_PERIOD_1_FILTER;ENG=CC_PERIOD_1_FILTER';
      tPeriod1DefaultCaption@9062243 : TextConst 'ENU=Not Due;ENG=Not Due';
      tPeriod2DefaultCaption@9062244 : TextConst 'ENU=0 - 30 Days;ENG=0 - 30 Days';
      tPeriod3DefaultCaption@9062245 : TextConst 'ENU=31 - 60 Days;ENG=31 - 60 Days';
      tPeriod4DefaultCaption@9062246 : TextConst 'ENU=61 - 90 Days;ENG=61 - 90 Days';
      tPeriod5DefaultCaption@9062247 : TextConst 'ENU=Over 90 Days;ENG=Over 90 Days';
      PeriodFiltersRetrieved@9062250 : Boolean;
      PeriodFilters@9062249 : ARRAY [5] OF Text;
      CustomPeriodFilters@9062248 : ARRAY [5] OF Boolean;
      PeriodCaptionsRetrieved@9062251 : Boolean;
      PeriodCaptions@9062252 : ARRAY [5] OF Text;

    LOCAL PROCEDURE "--- General ---"@9062235();
    BEGIN
    END;

    PROCEDURE ApplyPeriodFilters@9062232(VAR pEnhancedCustomer@9062230 : Record 9062764);
    BEGIN
      //DOC NH2016.14 - Applying period filters
      //  <> pEnhancedCustomer: Target record

      pEnhancedCustomer.SETFILTER("Date Filter", '..%1', TODAY());

      GetPeriodFilters();
      pEnhancedCustomer.SETFILTER("Date Filter 1", PeriodFilters[1]);
      pEnhancedCustomer.SETFILTER("Date Filter 2", PeriodFilters[2]);
      pEnhancedCustomer.SETFILTER("Date Filter 3", PeriodFilters[3]);
      pEnhancedCustomer.SETFILTER("Date Filter 4", PeriodFilters[4]);
      pEnhancedCustomer.SETFILTER("Date Filter 5", PeriodFilters[5]);
    END;

    PROCEDURE CreatePeriodCaptions@9062231(VAR pPeriodCaptions@9062230 : ARRAY [5] OF Text);
    BEGIN
      //DOC NH2016.10 - Creating period captions
      //  <> pPeriodCaptions: Target array of period captions

      GetPeriodCaptions();

      COPYARRAY(pPeriodCaptions, PeriodCaptions, 1);
    END;

    PROCEDURE DrillDownOnBalance@9062238(VAR pEnhancedCustomer@9062230 : Record 9062764);
    BEGIN
      //DOC NH2016.10 - Performing a drill-down on balance
      //  <> pEnhancedCustomer: Enhanced customer record to fire the drill down for

      DrillDown(pEnhancedCustomer."Customer No.", '');
    END;

    PROCEDURE DrillDownOnBalanceDue@9062234(VAR pEnhancedCustomer@9062230 : Record 9062764);
    BEGIN
      //DOC NH2016.10 - Performing a drill-down on balance due
      //  <> pEnhancedCustomer: Enhanced customer record to fire the drill down for

      DrillDown(pEnhancedCustomer."Customer No.", pEnhancedCustomer.GETFILTER("Date Filter"));
    END;

    PROCEDURE DrillDownOnPeriod@9062233(VAR pEnhancedCustomer@9062232 : Record 9062764;pPeriodIndex@9062230 : Integer);
    BEGIN
      //DOC NH2016.10 - Performing a drill-down on period
      //  <> pNhancedCustomer: Enhanced customer record to fire the drill down for
      //  -> pPeriodIndex: Period index

      GetPeriodFilters();
      DrillDown(pEnhancedCustomer."Customer No.", PeriodFilters[pPeriodIndex]);
    END;

    LOCAL PROCEDURE DrillDown@9062239(pCustomerNo@9062230 : Code[20];pDateFilter@9062231 : Text);
    VAR
      lCustLedgerEntry@9062232 : Record 21;
    BEGIN
      //DOC NH2016.10 - Performing a drill down
      //  -> pCustomerNo: Customer no.
      //  -> pDateFilter: Date filter

      lCustLedgerEntry.RESET();
      lCustLedgerEntry.SETCURRENTKEY("Customer No.", Open, Positive, "Due Date", "Currency Code");
      lCustLedgerEntry.SETRANGE("Customer No.", pCustomerNo);
      lCustLedgerEntry.SETRANGE(Open, TRUE);
      IF (pDateFilter <> '') THEN
        lCustLedgerEntry.SETFILTER("Due Date", pDateFilter);

      PAGE.RUN(0, lCustLedgerEntry);
    END;

    LOCAL PROCEDURE "--- Tools ---"@9062236();
    BEGIN
    END;

    LOCAL PROCEDURE GetPeriodFilters@9062240();
    VAR
      lIndex@9062231 : Integer;
    BEGIN
      //DOC NH2016.10 - Retrieving period filters

      IF (PeriodFiltersRetrieved) THEN
        EXIT;

      PeriodFilters[1] := SystemBehaviour.GetText(tPeriod1FilterSysB);
      PeriodFilters[2] := SystemBehaviour.GetText(tPeriod2FilterSysB);
      PeriodFilters[3] := SystemBehaviour.GetText(tPeriod3FilterSysB);
      PeriodFilters[4] := SystemBehaviour.GetText(tPeriod4FilterSysB);
      PeriodFilters[5] := SystemBehaviour.GetText(tPeriod5FilterSysB);

      FOR lIndex := 1 TO ARRAYLEN(PeriodFilters) DO
      BEGIN
        CustomPeriodFilters[lIndex] := (PeriodFilters[lIndex] <> '');
        IF (CustomPeriodFilters[lIndex]) THEN
          PeriodFilters[lIndex] := SmartFilterManagement.ApplySmartFilters(PeriodFilters[lIndex]);
      END;

      ApplyDefaultFilterIfEmpty(PeriodFilters[1], WORKDATE() + 1, 31129999D);
      ApplyDefaultFilterIfEmpty(PeriodFilters[2], WORKDATE() - 30, WORKDATE());
      ApplyDefaultFilterIfEmpty(PeriodFilters[3], WORKDATE() - 60, WORKDATE() - 31);
      ApplyDefaultFilterIfEmpty(PeriodFilters[4], WORKDATE() - 90, WORKDATE() - 61);
      ApplyDefaultFilterIfEmpty(PeriodFilters[5], 01011754D, WORKDATE() - 91);

      PeriodFiltersRetrieved := TRUE;
    END;

    LOCAL PROCEDURE GetPeriodCaptions@9062230();
    VAR
      lIndex@9062230 : Integer;
    BEGIN
      //DOC NH2016.10 - Retrieving period captions

      IF (PeriodCaptionsRetrieved) THEN
        EXIT;

      PeriodCaptions[1] := SystemBehaviour.GetText(tPeriod1CaptionSysB);
      PeriodCaptions[2] := SystemBehaviour.GetText(tPeriod2CaptionSysB);
      PeriodCaptions[3] := SystemBehaviour.GetText(tPeriod3CaptionSysB);
      PeriodCaptions[4] := SystemBehaviour.GetText(tPeriod4CaptionSysB);
      PeriodCaptions[5] := SystemBehaviour.GetText(tPeriod5CaptionSysB);

      IF ((PeriodCaptions[1] = '') OR (PeriodCaptions[2] = '')  OR (PeriodCaptions[3] = '') OR
          (PeriodCaptions[4] = '') OR (PeriodCaptions[5] = '')) THEN
      BEGIN
        GetPeriodFilters();

        FOR lIndex := 1 TO ARRAYLEN(PeriodCaptions) DO
          IF ((PeriodCaptions[lIndex] = '') AND (CustomPeriodFilters[lIndex])) THEN
            PeriodCaptions[lIndex] := PeriodFilters[lIndex];

        ApplyDefaultCaptionIfEmpty(PeriodCaptions[1], tPeriod1DefaultCaption);
        ApplyDefaultCaptionIfEmpty(PeriodCaptions[2], tPeriod2DefaultCaption);
        ApplyDefaultCaptionIfEmpty(PeriodCaptions[3], tPeriod3DefaultCaption);
        ApplyDefaultCaptionIfEmpty(PeriodCaptions[4], tPeriod4DefaultCaption);
        ApplyDefaultCaptionIfEmpty(PeriodCaptions[5], tPeriod5DefaultCaption);
      END;

      PeriodCaptionsRetrieved := TRUE;
    END;

    LOCAL PROCEDURE ApplyDefaultFilterIfEmpty@9062237(VAR pFilter@9062230 : Text;pDateFrom@9062231 : Date;pDateTo@9062232 : Date);
    BEGIN
      //DOC NH2016.10 - Applying default filter if passed filter is empty
      //  <> pFilter: The filter
      //  -> pDateFrom: Date from
      //  -> pDateTo: Date to

      pFilter := TnpToolkit.DefaultString(pFilter, STRSUBSTNO('%1..%2', pDateFrom, pDateTo));
    END;

    LOCAL PROCEDURE ApplyDefaultCaptionIfEmpty@9062247(VAR pCaption@9062230 : Text;pDefaultCaption@9062231 : Text);
    BEGIN
      //DOC NH2016.10 - Applying default caption if it is empty
      //  <> pCaption: The caption
      //  -> pDefaultCaption: Default caption

      pCaption := TnpToolkit.DefaultString(pCaption, pDefaultCaption);
    END;

    BEGIN
    {
      //DOC NH2016.10 JH 30/09/2015 - Created
      //DOC NH2016.12 JH 28/01/2016 - Smart filters
      //DOC NH2016.14 JH 15/03/2016 - Date filter fix
      //DOC NH2016.15 JH 09/05/2016 - CfMD amendments
    }
    END.
  }
}

