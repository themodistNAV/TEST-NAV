OBJECT Codeunit 9062313 Planning Board Diagnostics
{
  OBJECT-PROPERTIES
  {
    Date=20/11/15;
    Time=[ 4:30:45 PM];
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PlanningBoardSetup@9062230 : Record 9062335;
      PlanningBoardSetupRetrieved@9062235 : Boolean;
      BlobToolkit@9062231 : Codeunit 9062242;
      FileSystem@9062232 : Codeunit 9062264;
      DiagnosticsEnabled@9062233 : Boolean;
      DiagnosticsEnabledRetrieved@9062234 : Boolean;
      ContextDiagnosticsEnabled@9062237 : Boolean;
      ContextDiagnosticsEnabledRetrieved@9062236 : Boolean;
      AddInDiagnosticsEnabled@9062239 : Boolean;
      AddInDiagnosticsEnabledRetrieved@9062238 : Boolean;

    LOCAL PROCEDURE "--- General ---"@9062230();
    BEGIN
    END;

    PROCEDURE DumpTextToFile@9062232(pFileName@9062232 : Text;pFileExtension@9062234 : Text;pText@9062230 : Text);
    VAR
      lBlob@9062233 : Record 99008535;
    BEGIN
      //DOC NA2016.12 - Dumping text to a file
      //  -> pFileName: File name (used only as a part of the name)
      //  -> pFileExtension: File extension
      //  -> pText: The text

      IF ( NOT (IsDiagnosticsEnabled())) THEN
        EXIT;

      BlobToolkit.TextToBlob(pText, lBlob);
      DumpBlobToFile(pFileName, pFileExtension, lBlob);
    END;

    PROCEDURE DumpBlobToFile@9062235(pFileName@9062234 : Text;pFileExtension@9062231 : Text;VAR pBlob@9062230 : Record 99008535);
    VAR
      lFileName@1000000006 : Text;
      lFilePath@1000000008 : Text;
    BEGIN
      //DOC NA2016.12 - Dumping a BLOB to a file
      //  -> pFileName: File name (used only as a part of the name)
      //  -> pFileExtension: File extension
      //  <> pBlob: The BLOB

      IF ( NOT (IsDiagnosticsEnabled())) THEN
        EXIT;

      lFileName := STRSUBSTNO('%1 %2.%3', FormatDateTime(CURRENTDATETIME()), pFileName, pFileExtension);
      lFilePath := FileSystem.Combine(FileSystem.Client(), PlanningBoardSetup."Diagnostics Folder", lFileName);
      FileSystem.ExportBlobToFileSilent(FileSystem.Client(), pBlob, lFilePath);
    END;

    PROCEDURE DumpContextToFile@9062236(VAR pPlanningBoardContext@9062230 : Record 9062349;pFileName@9062234 : Text);
    VAR
      lBlob@9062231 : Record 99008535;
      lOutStream@9062235 : OutStream;
      lPlanningBoardContextXmlPort@9062232 : XMLport 9062234;
      lData@9062233 : Text;
    BEGIN
      //DOC NA2016.12 - Dumping context to file
      //  <> pPlanningBoardContext: The context
      //  -> pFileName: File name (part of it prefixed with planning board code and timestamp)

      IF ( NOT (IsContextDiagnosticsEnabled())) THEN
        EXIT;

      lBlob.Blob.CREATEOUTSTREAM(lOutStream);

      lPlanningBoardContextXmlPort.SetPlanningBoardContext(pPlanningBoardContext);
      lPlanningBoardContextXmlPort.SETDESTINATION(lOutStream);
      lPlanningBoardContextXmlPort.EXPORT();

      lData := BlobToolkit.BlobToText(lBlob);

      DumpTextToFile(pFileName, 'xml', lData);
    END;

    LOCAL PROCEDURE "--- Tools ---"@9062231();
    BEGIN
    END;

    LOCAL PROCEDURE GetPlanningBoardSetup@9062237();
    BEGIN
      //DOC NA2016.12 - Retrieving planning board setup

      IF ( NOT (PlanningBoardSetupRetrieved)) THEN
      BEGIN
        PlanningBoardSetup.VerifyAndGet();
        PlanningBoardSetupRetrieved := TRUE;
      END;
    END;

    PROCEDURE IsDiagnosticsEnabled@9062233() : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning if diagnostics is enabled
      //  <- The answer

      IF ( NOT (DiagnosticsEnabledRetrieved)) THEN
      BEGIN
        GetPlanningBoardSetup();
        DiagnosticsEnabled := ((PlanningBoardSetup."Diagnostics Enabled") AND (PlanningBoardSetup."Diagnostics Folder" <> ''));
        DiagnosticsEnabledRetrieved := TRUE;
      END;

      EXIT(DiagnosticsEnabled);
    END;

    PROCEDURE IsContextDiagnosticsEnabled@9062240() : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning if context diagnostics is enabled
      //  <- The answer

      IF ( NOT (ContextDiagnosticsEnabledRetrieved)) THEN
      BEGIN
        GetPlanningBoardSetup();
        ContextDiagnosticsEnabled := ((PlanningBoardSetup."Diagnostics Enabled") AND (PlanningBoardSetup."Diagnostics Folder" <> '') AND
          (PlanningBoardSetup."Context Diagnostics"));
        ContextDiagnosticsEnabledRetrieved := TRUE;
      END;

      EXIT(ContextDiagnosticsEnabled);
    END;

    PROCEDURE IsAddInDiagnosticsEnabled@9062238() : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning if add-in diagnostics is enabled
      //  <- The answer

      IF ( NOT (AddInDiagnosticsEnabledRetrieved)) THEN
      BEGIN
        GetPlanningBoardSetup();
        AddInDiagnosticsEnabled := ((PlanningBoardSetup."Diagnostics Enabled") AND (PlanningBoardSetup."Diagnostics Folder" <> '') AND
          (PlanningBoardSetup."Add-in Diagnostics"));
        AddInDiagnosticsEnabledRetrieved := TRUE;
      END;

      EXIT(AddInDiagnosticsEnabled);
    END;

    LOCAL PROCEDURE FormatDateTime@9062234(pDateTime@9062231 : DateTime) : Text;
    VAR
      lDateTimeText@9062230 : Text;
    BEGIN
      //DOC NA2016.12 - Formatting datetime
      //  -> pDateTime: Datetime to format
      //  <- Formatted datetime

      CLEAR(lDateTimeText);

      IF (pDateTime <> 0DT) THEN
      BEGIN
        lDateTimeText := FORMAT(pDateTime, 0, 9);
        lDateTimeText := COPYSTR(lDateTimeText, 1, 4) + COPYSTR(lDateTimeText, 6, 2) + COPYSTR(lDateTimeText, 9, 2) +
          COPYSTR(lDateTimeText, 12, 2) + COPYSTR(lDateTimeText, 15, 2) + COPYSTR(lDateTimeText, 18, 2) +
          COPYSTR(lDateTimeText, 21, 3);
      END;

      EXIT(lDateTimeText);
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 05/11/2015 - Created
    }
    END.
  }
}

