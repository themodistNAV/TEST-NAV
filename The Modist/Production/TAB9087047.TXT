OBJECT Table 9087047 Replenishment Parameter
{
  OBJECT-PROPERTIES
  {
    Date=21/09/16;
    Time=[ 5:48:52 PM];
    Version List=NS2016.16;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Replenishment Template Code");
               Rec.TESTFIELD("Replenishment Batch Code");
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               CriteriaManagement.DeleteCriteria(Rec."Table Filter Criteria ID");
             END;

    CaptionML=[ENU=Replenishment Parameter;
               ENG=Replenishment Parameter];
    LookupPageID=Page9087086;
    DrillDownPageID=Page9087086;
  }
  FIELDS
  {
    { 1   ;   ;Replenishment Template Code;Code20 ;TableRelation="Replenishment Template";
                                                   CaptionML=[ENU=Replenishment Template Code;
                                                              ENG=Replenishment Template Code] }
    { 2   ;   ;Replenishment Batch Code;Code20    ;TableRelation="Replenishment Batch".Code WHERE (Replenishment Template Code=FIELD(Replenishment Template Code));
                                                   CaptionML=[ENU=Replenishment Batch Code;
                                                              ENG=Replenishment Batch Code] }
    { 3   ;   ;Name                ;Text30        ;CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 10  ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=" ,Boolean,Integer,,,Decimal,,Text,Date,Time,DateTime,DateFormula";
                                                                    ENG=" ,Boolean,Integer,,,Decimal,,Text,Date,Time,DateTime,DateFormula"];
                                                   OptionString=[ ,Boolean,Integer,,,Decimal,,Text,Date,Time,DateTime,DateFormula] }
    { 20  ;   ;Value               ;Text250       ;CaptionML=[ENU=Value;
                                                              ENG=Value] }
    { 30  ;   ;Interaction         ;Boolean       ;CaptionML=[ENU=Interaction;
                                                              ENG=Interaction] }
    { 40  ;   ;Table ID            ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Table ID" <> xRec."Table ID") THEN
                                                                BEGIN
                                                                  CriteriaManagement.DeleteCriteria(Rec."Table Filter Criteria ID");
                                                                  Rec.VALIDATE("Table Filter Criteria ID", 0);
                                                                END;
                                                                Rec.CALCFIELDS("Table Name");
                                                              END;

                                                   CaptionML=[ENU=Table ID;
                                                              ENG=Table ID] }
    { 41  ;   ;Table Name          ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Table ID)));
                                                   CaptionML=[ENU=Table Name;
                                                              ENG=Table Name];
                                                   Editable=No }
    { 42  ;   ;Table Filter Criteria ID;Integer   ;TableRelation=Criteria;
                                                   CaptionML=[ENU=Table Filter Criteria ID;
                                                              ENG=Table Filter Criteria ID] }
    { 43  ;   ;Table Filter        ;Text250       ;CaptionML=[ENU=Table Filter;
                                                              ENG=Table Filter] }
    { 44  ;   ;Table Filter Criteria View;Text250 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Criteria.View WHERE (ID=FIELD(Table Filter Criteria ID)));
                                                   TableRelation=Criteria;
                                                   CaptionML=[ENU=Table Filter Criteria View;
                                                              ENG=Table Filter Criteria View];
                                                   Editable=No }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Replenishment Template Code,Replenishment Batch Code,Name;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CriteriaManagement@1000000001 : Codeunit 9062462;
      TnpToolkit@1000000000 : Codeunit 9062230;

    PROCEDURE GetValue@1000000002(VAR pValue@1000000020 : Variant);
    VAR
      lBooleanValue@1000000001 : Boolean;
      lIntegerValue@1000000002 : Integer;
      lDecimalValue@1000000003 : Decimal;
      lDateValue@1000000004 : Date;
      lTimeValue@1000000005 : Time;
      lDateTimeValue@1000000006 : DateTime;
      lDateFormulaValue@1000000007 : DateFormula;
      lText@1000000000 : Text;
      lValue@1000000017 : Text;
      lMinus@1000000016 : Boolean;
      lIntegerPart@1000000014 : Integer;
      lDecimalPos@1000000018 : Integer;
      lDecimalPartText@1000000019 : Text;
      lDecimalPart@1000000015 : Integer;
      lYear@1000000010 : Integer;
      lMonth@1000000009 : Integer;
      lDay@1000000008 : Integer;
      lHours@1000000011 : Integer;
      lMinutes@1000000012 : Integer;
      lSeconds@1000000013 : Integer;
    BEGIN
      //DOC NS2016.16 - Returning value
      //  <> pValue: The target value

      CLEAR(pValue);

      Rec.TESTFIELD(Type);
      CASE (Rec.Type) OF
        Rec.Type::Boolean:
          BEGIN
            lBooleanValue := (Rec.Value = 'true');
            pValue := lBooleanValue;
          END;
        Rec.Type::Integer:
          BEGIN
            IF ( NOT (EVALUATE(lIntegerValue, Rec.Value))) THEN
              CLEAR(lIntegerValue);
            pValue := lIntegerValue;
          END;
        Rec.Type::Decimal:
          BEGIN
            IF (Rec.Value <> '') THEN
            BEGIN
              lValue := Rec.Value;
              lMinus := (COPYSTR(lValue, 1, 1) = '-');
              IF (lMinus) THEN
                lValue := COPYSTR(lValue, 2);
              lDecimalPos := STRPOS(lValue, '.');
              IF (lDecimalPos > 0) THEN
              BEGIN
                EVALUATE(lIntegerPart, COPYSTR(lValue, 1, lDecimalPos - 1));
                lDecimalPartText := COPYSTR(lValue, lDecimalPos + 1);
                EVALUATE(lDecimalPart, lDecimalPartText);
                lDecimalPart /= POWER(10, STRLEN(lDecimalPartText));
                lDecimalValue := lIntegerPart + lDecimalPart;
              END
              ELSE
              BEGIN
                EVALUATE(lIntegerPart, lValue);
                lDecimalValue := lIntegerPart;
              END;
            END;
            pValue := lDecimalValue;
          END;
        Rec.Type::Text:
          pValue := Rec.Value;
        Rec.Type::Date:
          BEGIN
            IF (Rec.Value <> '') THEN
            BEGIN
              EVALUATE(lYear, COPYSTR(Rec.Value, 1, 4));
              EVALUATE(lMonth, COPYSTR(Rec.Value, 5, 2));
              EVALUATE(lDay, COPYSTR(Rec.Value, 7, 2));
              lDateValue := DMY2DATE(lDay, lMonth, lYear);
            END;
            pValue := lDateValue;
          END;
        Rec.Type::Time:
          BEGIN
            IF (Rec.Value <> '') THEN
            BEGIN
              EVALUATE(lHours, COPYSTR(Rec.Value, 1, 2));
              EVALUATE(lMinutes, COPYSTR(Rec.Value, 3, 2));
              EVALUATE(lSeconds, COPYSTR(Rec.Value, 5, 2));
              lTimeValue := 000000T + (((lHours * 60) + lMinutes) * 60 + lSeconds) * 100;
            END;
            pValue := lTimeValue;
          END;
        Rec.Type::DateTime:
          BEGIN
            IF (Rec.Value <> '') THEN
            BEGIN
              EVALUATE(lYear, COPYSTR(Rec.Value, 1, 4));
              EVALUATE(lMonth, COPYSTR(Rec.Value, 5, 2));
              EVALUATE(lDay, COPYSTR(Rec.Value, 7, 2));
              EVALUATE(lHours, COPYSTR(Rec.Value, 9, 2));
              EVALUATE(lMinutes, COPYSTR(Rec.Value, 11, 2));
              EVALUATE(lSeconds, COPYSTR(Rec.Value, 13, 2));
              lDateTimeValue := CREATEDATETIME(DMY2DATE(lDay, lMonth, lYear), 000000T + (((lHours * 60) + lMinutes) * 60 + lSeconds) * 100);
            END;
            pValue := lDateTimeValue;
          END;
        Rec.Type::DateFormula:
          BEGIN
            IF ( NOT (EVALUATE(lDateFormulaValue, Rec.Value))) THEN
              CLEAR(lDateFormulaValue);
            pValue := lDateFormulaValue;
          END;
      END;
    END;

    PROCEDURE GetValueText@1000000000() : Text;
    VAR
      lValue@1000000000 : Variant;
    BEGIN
      //DOC NS2016.16 - Returning value text
      //  <- The text

      GetValue(lValue);
      EXIT(FORMAT(lValue));
    END;

    PROCEDURE SetValue@1000000003(pValue@1000000008 : Variant);
    VAR
      lBooleanValue@1000000001 : Boolean;
      lIntegerValue@1000000002 : Integer;
      lDecimalValue@1000000003 : Decimal;
      lDateValue@1000000004 : Date;
      lTimeValue@1000000005 : Time;
      lDateTimeValue@1000000006 : DateTime;
      lDateFormulaValue@1000000007 : DateFormula;
    BEGIN
      //DOC NS2016.16 - Setting value text
      //  -> pValue: The value

      Rec.TESTFIELD(Type);
      CASE (Rec.Type) OF
        Rec.Type::Boolean:
          BEGIN
            lBooleanValue := pValue;
            Rec.VALIDATE(Value, TnpToolkit.IIFText(lBooleanValue, 'true', 'false'));
          END;
        Rec.Type::Integer:
          BEGIN
            lIntegerValue := pValue;
            Rec.VALIDATE(Value, FORMAT(lIntegerValue, 0, '<Sign><Integer>'));
          END;
        Rec.Type::Decimal:
          BEGIN
            lDecimalValue := pValue;
            Rec.VALIDATE(Value, FORMAT(lDecimalValue, 0, '<Sign><Integer><Decimals>'));
          END;
        Rec.Type::Text:
          Rec.VALIDATE(Value, pValue);
        Rec.Type::Date:
          BEGIN
            lDateValue := pValue;
            Rec.VALIDATE(Value, FORMAT(lDateValue, 0, '<Year4><Month,2><Day,2>'));
          END;
        Rec.Type::Time:
          BEGIN
            lTimeValue := pValue;
            Rec.VALIDATE(Value, FORMAT(lTimeValue, 0, '<Hours24,2><Filler Character,0><Minutes,2><Seconds,2>'));
          END;
        Rec.Type::DateTime:
          BEGIN
            lDateTimeValue := pValue;
            Rec.VALIDATE(Value, FORMAT(lDateTimeValue, 0, '<Year4><Month,2><Day,2><Hours24,2><Filler Character,0><Minutes,2><Seconds,2>'));
          END;
        Rec.Type::DateFormula:
          BEGIN
            lDateFormulaValue := pValue;
            Rec.VALIDATE(Value, FORMAT(lDateFormulaValue));
          END;
      END;
    END;

    PROCEDURE SetValueText@1000000001(pText@1000000000 : Text);
    VAR
      lValue@1000000008 : Variant;
      lBooleanValue@1000000001 : Boolean;
      lIntegerValue@1000000002 : Integer;
      lDecimalValue@1000000003 : Decimal;
      lDateValue@1000000004 : Date;
      lTimeValue@1000000005 : Time;
      lDateTimeValue@1000000006 : DateTime;
      lDateFormulaValue@1000000007 : DateFormula;
    BEGIN
      //DOC NS2016.16 - Setting value text
      //  -> pText: The text

      Rec.TESTFIELD(Type);
      CASE (Rec.Type) OF
        Rec.Type::Boolean:
          BEGIN
            IF (pText <> '') THEN
              EVALUATE(lBooleanValue, pText);
            SetValue(lBooleanValue);
          END;
        Rec.Type::Integer:
          BEGIN
            IF (pText <> '') THEN
              EVALUATE(lIntegerValue, pText);
            SetValue(lIntegerValue);
          END;
        Rec.Type::Decimal:
          BEGIN
            IF (pText <> '') THEN
              EVALUATE(lDecimalValue, pText);
            SetValue(lDecimalValue);
          END;
        Rec.Type::Text:
          SetValue(pText);
        Rec.Type::Date:
          BEGIN
            IF (pText <> '') THEN
              EVALUATE(lDateValue, pText);
            SetValue(lDateValue);
          END;
        Rec.Type::Time:
          BEGIN
            IF (pText <> '') THEN
              EVALUATE(lTimeValue, pText);
            SetValue(lTimeValue);
          END;
        Rec.Type::DateTime:
          BEGIN
            IF (pText <> '') THEN
              EVALUATE(lDateTimeValue, pText);
            SetValue(lDateTimeValue);
          END;
        Rec.Type::DateFormula:
          BEGIN
            IF (pText <> '') THEN
              EVALUATE(lDateFormulaValue, pText);
            SetValue(lDateFormulaValue);
          END;
      END;
    END;

    PROCEDURE EditTableFilter@1000000005();
    BEGIN
      //DOC NS2016.16 - Editing table filter

      CriteriaManagement.EditCriteria(Rec."Table Filter Criteria ID");
    END;

    PROCEDURE ValueLookup@1000000004() : Boolean;
    VAR
      lTableRelationToolkit@1000000000 : Codeunit 9062257;
      lRecRef@1000000001 : RecordRef;
      lKeyRef@1000000002 : KeyRef;
      lFldRef@1000000003 : FieldRef;
      lValue@1000000004 : Variant;
      lResult@1000000005 : Boolean;
    BEGIN
      //DOC NS2016.16 - Performing value lookup
      //  <- Lookup result

      lResult := FALSE;

      IF (Rec."Table ID" <> 0) THEN
      BEGIN
        Rec.GetValue(lValue);

        lRecRef.OPEN(Rec."Table ID");
        lKeyRef := lRecRef.KEYINDEX(1);
        lFldRef := lKeyRef.FIELDINDEX(1);
        Rec.CALCFIELDS("Table Filter Criteria View");
        IF (Rec."Table Filter Criteria View" <> '') THEN
          lRecRef.SETVIEW(Rec."Table Filter Criteria View");
        IF (lTableRelationToolkit.LookupForRecRef(lRecRef, lFldRef.NUMBER, TRUE, lValue)) THEN
        BEGIN
          Rec.SetValue(lValue);
          lResult := TRUE;
        END;
        lRecRef.CLOSE();
      END;

      EXIT(lResult);
    END;

    BEGIN
    {
      //DOC NS2016.16 JH 20/09/2016 - Created
    }
    END.
  }
}

