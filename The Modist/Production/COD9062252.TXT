OBJECT Codeunit 9062252 Date Time
{
  OBJECT-PROPERTIES
  {
    Date=02/02/16;
    Time=12:00:00 PM;
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      String@1000000000 : Codeunit 9062236;
      TnpToolkit@1000000001 : Codeunit 9062230;
      tEmptyTime@1000000007 : TextConst 'ENU=Time mustn''t be empty for "%1" function.;ENG=Time mustn''t be empty for "%1" function.';
      tUnrecognisedTimeFormula@1000000002 : TextConst 'ENU=Unrecognised time formula: "%1";ENG=Unrecognised time formula: "%1"';
      tHourUnit@1000000003 : TextConst 'ENU=H;ENG=H';
      tMinuteUnit@1000000004 : TextConst 'ENU=M;ENG=M';
      tSecondUnit@1000000005 : TextConst 'ENU=S;ENG=S';
      tCurrentTime@1000000006 : TextConst 'ENU=C;ENG=C';

    PROCEDURE "--- Date ---"@1190000020();
    BEGIN
    END;

    PROCEDURE ValidateDateRange@1000000046(VAR pStart@1190000009 : Date;VAR pEnd@1190000011 : Date);
    VAR
      lBuffer@1190000015 : Date;
    BEGIN
      //DOC NA2016.12 - Validating date range (replacing start with end if they are in the wrong order)
      //  <> pStart: Start (date)
      //  <> pEnd: End (date)

      IF ((pStart = 0D) OR (pEnd = 0D)) THEN
        EXIT;

      IF (pStart <= pEnd) THEN
        EXIT;

      lBuffer := pStart;
      pStart := pEnd;
      pEnd := lBuffer;
    END;

    PROCEDURE ValidateDateArrayRange@1000000022(VAR pDates@1000000000 : ARRAY [2] OF Date);
    BEGIN
      //DOC NA2016.12 - Validating date array range (replacing start with end if they are in the wrong order)
      //  <> pDates: 2-dimensional array of dates ([1] = from, [2] = to)

      ValidateDateRange(pDates[1], pDates[2]);
    END;

    PROCEDURE CreateDateFilter@1000000070(pStart@1190000012 : Date;pEnd@1000000000 : Date) : Text;
    BEGIN
      //DOC NA2016.12 - Creating date filter from dates
      //  -> pStart: Start (date)
      //  -> pEnd: End (date)
      //  <- Date filter

      ValidateDateRange(pStart, pEnd);

      IF ((pStart = 0D) AND (pEnd = 0D)) THEN
        EXIT('')
      ELSE IF ((pStart <> 0D) AND (pEnd = 0D)) THEN
        EXIT(STRSUBSTNO('%1..', pStart))
      ELSE IF ((pStart = 0D) AND (pEnd <> 0D)) THEN
        EXIT(STRSUBSTNO('..%1', pEnd))
      ELSE
        EXIT(STRSUBSTNO('%1..%2', pStart, pEnd));
    END;

    PROCEDURE CreateDateArrayFilter@1190000034(pDates@1190000012 : ARRAY [2] OF Date) : Text;
    BEGIN
      //DOC NA2016.12 - Creating date filter from date array passed
      //  -> pDates: 2-dimensional array of dates ([1] = from, [2] = to)
      //  <- Date filter

      EXIT(CreateDateFilter(pDates[1], pDates[2]));
    END;

    LOCAL PROCEDURE "--- DateTime ---"@1000000020();
    BEGIN
    END;

    PROCEDURE ValidateDateTimeRange@1000000045(VAR pStart@1190000009 : DateTime;VAR pEnd@1190000011 : DateTime);
    VAR
      lBuffer@1190000015 : DateTime;
    BEGIN
      //DOC NA2016.12 - Validating datetime range (replacing start with end if they are in the wrong order)
      //  <> pStart: Start (datetime)
      //  <> pEnd: End (datetime)

      IF ((pStart = 0DT) OR (pEnd = 0DT)) THEN
        EXIT;

      IF (pStart <= pEnd) THEN
        EXIT;

      lBuffer := pStart;
      pStart := pEnd;
      pEnd := lBuffer;
    END;

    PROCEDURE ValidateDateTimeArrayRange@1000000031(VAR pDateTimes@1190000009 : ARRAY [2] OF DateTime);
    BEGIN
      //DOC NA2015.1 - Validating datetime array range (replacing Start with End if they are in the wrong order)
      //  <> pDateTimes: 2-dimensional array of datetimes ([1] = from, [2] = to)

      ValidateDateTimeRange(pDateTimes[1], pDateTimes[2]);
    END;

    PROCEDURE ValidateDateAndTimeRange@1000000044(VAR pStartDate@1190000009 : Date;VAR pStartTime@1190000010 : Time;VAR pEndDate@1190000011 : Date;VAR pEndTime@1190000012 : Time);
    VAR
      lStartDateTime@1190000013 : DateTime;
      lEndDateTime@1190000014 : DateTime;
      lDateBuffer@1190000015 : Date;
      lTimeBuffer@1190000016 : Time;
    BEGIN
      //DOC NA2016.12 - Validating date & time range (replacing Start with End if they are in the wrong order)
      //  <> pStartDate: Start date
      //  <> pStartTime: Start time
      //  <> pEndDate: End date
      //  <> pEndTime: End time

      IF ((pStartDate = 0D) OR (pStartTime = 0T) OR (pEndDate = 0D) OR (pEndTime = 0T)) THEN
        EXIT;

      lStartDateTime := CREATEDATETIME(pStartDate, pStartTime);
      lEndDateTime := CREATEDATETIME(pEndDate, pEndTime);

      IF (lStartDateTime <= lEndDateTime) THEN
        EXIT;

      lDateBuffer := pStartDate;
      pStartDate := pEndDate;
      pEndDate := lDateBuffer;

      lTimeBuffer := pStartTime;
      pStartTime := pEndTime;
      pEndTime := lTimeBuffer;
    END;

    PROCEDURE CreateDateTimeFilter@1000000018(pStart@1190000012 : DateTime;pEnd@1000000000 : DateTime) : Code[30];
    BEGIN
      //DOC NA2016.12 - Creating datetime filter from datetimes
      //  -> pStart: Start (datetime)
      //  -> pEnd: End (datetime)
      //  <- The filter

      ValidateDateTimeRange(pStart, pEnd);

      IF ((pStart = 0DT) AND (pEnd = 0DT)) THEN
        EXIT('')
      ELSE IF ((pStart <> 0DT) AND (pEnd = 0DT)) THEN
        EXIT(STRSUBSTNO('%1..', pStart))
      ELSE IF ((pStart = 0DT) AND (pEnd <> 0DT)) THEN
        EXIT(STRSUBSTNO('..%1', pEnd))
      ELSE
        EXIT(STRSUBSTNO('%1..%2', pStart, pEnd));
    END;

    PROCEDURE CreateDateTimeArrayFilter@1000000017(pDateTimes@1190000012 : ARRAY [2] OF DateTime) : Code[30];
    BEGIN
      //DOC NA2016.12 - Creating datetime filter from datetime array passed
      //  -> pDateTimes: 2-dimensional array of datetimes ([1] = from, [2] = to)
      //  <- The filter

      EXIT(CreateDateTimeFilter(pDateTimes[1], pDateTimes[2]));
    END;

    PROCEDURE DateTimeToDateAndTime@1000000019(pDateTime@1000000000 : DateTime;VAR pDate@1000000001 : Date;VAR pTime@1000000002 : Time);
    BEGIN
      //DOC NA2016.12 - Converting datetime to date and time
      //  -> pDateTime: Source datetime
      //  <> pDate: Target date
      //  <> pTime: Target time

      IF (pDateTime <> 0DT) THEN
      BEGIN
        pDate := DT2DATE(pDateTime);
        pTime := DT2TIME(pDateTime);
      END
      ELSE
      BEGIN
        pDate := 0D;
        pTime := 0T;
      END;
    END;

    LOCAL PROCEDURE "--- Time ---"@1000000011();
    BEGIN
    END;

    PROCEDURE ValidateTimeRange@1190000018(VAR pStart@1190000010 : Time;VAR pEnd@1190000012 : Time);
    VAR
      lBuffer@1190000016 : Time;
    BEGIN
      //DOC NA2016.12 - Validating time range (replacing start with end if they are in the wrong order)
      //  <> pStart: Start (time)
      //  <> pEnd: End (time)

      IF ((pStart = 0T) OR (pEnd = 0T)) THEN
        EXIT;

      IF (pStart <= pEnd) THEN
        EXIT;

      lBuffer := pStart;
      pStart := pEnd;
      pEnd := lBuffer;
    END;

    PROCEDURE ValidateTimeArrayRange@1000000039(VAR pStartTime@1190000010 : Time;VAR pEndTime@1190000012 : Time);
    VAR
      lTimeBuffer@1190000016 : Time;
    BEGIN
      //DOC NA2016.12 - Validating time range (replacing Start with End if they are in the wrong order)
      //  <> pStartTime: Start time
      //  <> pEndTime: End time

      IF ((pStartTime = 0T) OR (pEndTime = 0T)) THEN
        EXIT;

      IF (pStartTime <= pEndTime) THEN
        EXIT;

      lTimeBuffer := pStartTime;
      pStartTime := pEndTime;
      pEndTime := lTimeBuffer;
    END;

    PROCEDURE CreateTimeFilter@1000000016(pStart@1190000012 : Time;pEnd@1000000000 : Time) : Text;
    BEGIN
      //DOC NA2016.12 - Creating time filter from times
      //  -> pStart: Start (time)
      //  -> pEnd: End (time)
      //  <- Time filter

      ValidateTimeRange(pStart, pEnd);

      IF ((pStart = 0T) AND (pEnd = 0T)) THEN
        EXIT('')
      ELSE IF ((pStart <> 0T) AND (pEnd = 0T)) THEN
        EXIT(STRSUBSTNO('%1..', pStart))
      ELSE IF ((pStart = 0T) AND (pEnd <> 0T)) THEN
        EXIT(STRSUBSTNO('..%1', pEnd))
      ELSE
        EXIT(STRSUBSTNO('%1..%2', pStart, pEnd));
    END;

    PROCEDURE CreateTimeArrayFilter@1000000015(pTimes@1190000012 : ARRAY [2] OF Time) : Code[30];
    BEGIN
      //DOC NA2016.12 - Creating time filter from time array passed
      //  -> pDate: 2-dimensional array of times ([1] = from, [2] = to)
      //  <- Time filter

      EXIT(CreateTimeFilter(pTimes[1], pTimes[2]));
    END;

    PROCEDURE HMS2Time@1000000028(pHours@1000000002 : Integer;pMinutes@1000000001 : Integer;pSeconds@1000000000 : Integer) : Time;
    BEGIN
      //DOC NA2016.12 - Creating time from hours, minutes and seconds
      //  -> pHours: Hours
      //  -> pMinutes: Minutes
      //  -> pSeconds: Seconds
      //  <- Time created

      EXIT(000000T + ((pHours * 60 + pMinutes) * 60 + pSeconds) * 1000);
    END;

    PROCEDURE Time2HMS@1000000025(pTime@1000000000 : Time;VAR pHours@1000000001 : Integer;VAR pMinutes@1000000002 : Integer;VAR pSeconds@1000000003 : Integer);
    BEGIN
      //DOC NA2016.12 - Returning time hours, minutes and seconds
      //  -> pTime: The time
      //  <> pHours: Target hours
      //  <> pMinutes: Target minutes
      //  <> pSeconds: Target seconds

      pTime := DefaultTime(pTime);
      pHours := Time2Hours(pTime);
      pMinutes := Time2Minutes(pTime);
      pSeconds := Time2Seconds(pTime);
    END;

    PROCEDURE Time2Hours@1000000012(pTime@1000000000 : Time) : Integer;
    BEGIN
      //DOC NA2016.12 - Returning time hours
      //  -> pTime: The time
      //  <- Hours (0..23)

      pTime := DefaultTime(pTime);
      EXIT((pTime - 000000T) DIV (60 * 60 * 1000));
    END;

    PROCEDURE Time2Minutes@1000000013(pTime@1000000000 : Time) : Integer;
    BEGIN
      //DOC NA2016.12 - Returning time minutes
      //  -> pTime: The time
      //  <- Minutes (0..59)

      pTime := DefaultTime(pTime);
      EXIT(((pTime - 000000T) DIV (60 * 1000)) MOD 60);
    END;

    PROCEDURE Time2Seconds@1000000014(pTime@1000000000 : Time) : Integer;
    VAR
      lSeconds@1000000001 : Integer;
    BEGIN
      //DOC NA2016.12 - Returning time seconds
      //  -> pTime: The time
      //  <- Seconds (0..59)

      pTime := DefaultTime(pTime);
      EXIT(((pTime - 000000T) DIV 1000) MOD 60);
    END;

    LOCAL PROCEDURE "--- Calculating Time ---"@1000000009();
    BEGIN
    END;

    PROCEDURE CalcTime@1000000034(pFormula@1000000001 : Text;pTime@1000000012 : Time) : Time;
    VAR
      lTime@1000000004 : Time;
      lFormula@1000000000 : Text;
      lFormulaOperations@1000000002 : TEMPORARY Record 9062730;
      lFormulaOperation@1000000003 : Text;
      lDefaultLanguage@1000000006 : Boolean;
      lSign@1000000005 : Integer;
      lUnit@1000000007 : Code[1];
      lUnitMultplier@1000000008 : Integer;
      lNumberText@1000000011 : Text;
      lNumber@1000000010 : Integer;
      lHours@1000000009 : Integer;
      lMinutes@1000000013 : Integer;
      lSeconds@1000000014 : Integer;
    BEGIN
      //DOC NA2016.12 - Calculating time
      //  -> pFormula: Formula (similar to date formula)
      //  -> pTime: Time to start with
      //  <- Calculated time

      pTime := DefaultTime(pTime);

      lFormula := pFormula;
      lTime := pTime;

      CalcTimeSplit(lFormula, lFormulaOperations);
      IF (lFormulaOperations.FINDSET()) THEN
      REPEAT
        lFormulaOperation := String.Trim(UPPERCASE(lFormulaOperations.Value));
        IF (lFormulaOperation <> '') THEN
        BEGIN
          lSign := CalcTimeExtractSign(lFormulaOperation);
          lUnit := CalcTimeExtractUnit(lFormulaOperation);
          lNumberText := lFormulaOperation;
          IF (lNumberText = tCurrentTime) THEN
          BEGIN
            Time2HMS(lTime, lHours, lMinutes, lSeconds);
            CASE (lSign) OF
              -1:
                CASE (lUnit) OF
                  tHourUnit: lTime := HMS2Time(lHours, 0, 0);
                  tMinuteUnit: lTime := HMS2Time(lHours, lMinutes, 0);
                  tSecondUnit: lTime := HMS2Time(lHours, lMinutes, lSeconds);
                  ELSE ERROR(tUnrecognisedTimeFormula, lFormulaOperation);
                END;
              1:
                CASE (lUnit) OF
                  tHourUnit: lTime := HMS2Time(lHours, 59, 59) + 999;
                  tMinuteUnit: lTime := HMS2Time(lHours, lMinutes, 59) + 999;
                  tSecondUnit: lTime := HMS2Time(lHours, lMinutes, lSeconds) + 999;
                  ELSE ERROR(tUnrecognisedTimeFormula, lFormulaOperation);
                END;
            END;
          END
          ELSE
          BEGIN
            CASE (lUnit) OF
              tHourUnit: lUnitMultplier := 60 * 60 * 1000;
              tMinuteUnit: lUnitMultplier := 60 * 1000;
              tSecondUnit: lUnitMultplier := 1000;
              ELSE ERROR(tUnrecognisedTimeFormula, lFormulaOperation);
            END;
            IF ( NOT (EVALUATE(lNumber, lNumberText))) THEN
              ERROR(tUnrecognisedTimeFormula, lFormulaOperation);
            lTime += lSign * lNumber * lUnitMultplier;
          END;
        END;
      UNTIL (lFormulaOperations.NEXT() = 0);

      EXIT(lTime);
    END;

    LOCAL PROCEDURE CalcTimeSplit@1000000005(pFormula@1000000000 : Text;VAR pFormulaOperations@1000000001 : Record 9062730);
    VAR
      lFormula@1000000004 : Text;
      lFormulaOperationsId@1000000005 : Integer;
      lSplitting@1000000002 : Boolean;
      lPos@1000000003 : Integer;
    BEGIN
      //DOC NA2016.12 - Splitting time calculation formula into chunks
      //  -> pFormula: The formula
      //  <> pFormulaOperations: Target formula operations buffer

      lFormula := String.Trim(UPPERCASE(pFormula));
      lSplitting := TRUE;
      WHILE (lSplitting) DO
      BEGIN
        IF (STRLEN(pFormula) > 1) THEN
        BEGIN
          lPos := STRPOS(COPYSTR(pFormula, 2, STRLEN(pFormula) - 1), '+');
          IF (lPos = 0) THEN
            lPos := STRPOS(COPYSTR(pFormula, 2, STRLEN(pFormula) - 1), '-');
          IF (lPos > 0) THEN
          BEGIN
            CalcTimeSplitAdd(COPYSTR(pFormula, 1, lPos), pFormulaOperations, lFormulaOperationsId);
            pFormula := COPYSTR(pFormula, lPos + 2, STRLEN(pFormula) - lPos - 1);
          END
          ELSE
          BEGIN
            CalcTimeSplitAdd(pFormula, pFormulaOperations, lFormulaOperationsId);
            pFormula := '';
          END;
        END
        ELSE
        BEGIN
          IF (STRLEN(pFormula) > 0) THEN
            CalcTimeSplitAdd(pFormula, pFormulaOperations, lFormulaOperationsId);
          lSplitting := FALSE;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcTimeSplitAdd@1000000008(pFormulaOperation@1000000000 : Text;VAR pFormulaOperations@1000000001 : Record 9062730;VAR pFormulaOperationsId@1000000006 : Integer);
    VAR
      lFormula@1000000004 : Text;
      lFormulaOperationsId@1000000005 : Integer;
      lSplitting@1000000002 : Boolean;
      lPos@1000000003 : Integer;
    BEGIN
      //DOC NA2016.12 - Adding another split chunk into buffer
      //  -> pFormulaOperation: Formula operation to add to buffer
      //  <> pFormulaOperations: The buffer
      //  <> pFormulaOperationsId: The buffer ID

      pFormulaOperationsId += 1;
      pFormulaOperations.ID := pFormulaOperationsId;
      pFormulaOperations.Name := pFormulaOperation;
      pFormulaOperations.Value := pFormulaOperation;
      pFormulaOperations.INSERT();
    END;

    LOCAL PROCEDURE CalcTimeExtractSign@1000000000(VAR pFormulaOperation@1000000000 : Text) : Integer;
    VAR
      lSignText@1000000001 : Code[1];
      lSign@1000000002 : Integer;
    BEGIN
      //DOC NA2016.12 - Extracting sign from time calculation formula operation
      //  <> pFormulaOperation: The formula operation
      //  <- The sign extracted

      lSignText := COPYSTR(pFormulaOperation, 1, 1);
      IF (lSignText IN ['+', '-']) THEN
      BEGIN
        lSign := TnpToolkit.IIFInteger(lSignText = '-', -1, 1);
        IF (STRLEN(pFormulaOperation) < 2) THEN
          ERROR(tUnrecognisedTimeFormula, pFormulaOperation);
        pFormulaOperation := COPYSTR(pFormulaOperation, 2, STRLEN(pFormulaOperation) - 1);
      END
      ELSE
        lSign := 1;

      EXIT(lSign);
    END;

    LOCAL PROCEDURE CalcTimeExtractUnit@1000000001(VAR pFormulaOperation@1000000000 : Text) : Code[1];
    VAR
      lUnit@1000000001 : Code[1];
    BEGIN
      //DOC NA2016.12 - Extracting unit from time calculation formula operation
      //  <> pFormulaOperation: The formula operation
      //  <- The unit extracted

      lUnit := COPYSTR(pFormulaOperation, STRLEN(pFormulaOperation), 1);
      IF ( NOT (lUnit IN [tHourUnit, tMinuteUnit, tSecondUnit])) THEN
        ERROR(tUnrecognisedTimeFormula, pFormulaOperation);
      IF (STRLEN(pFormulaOperation) < 2) THEN
        ERROR(tUnrecognisedTimeFormula, pFormulaOperation);
      pFormulaOperation := COPYSTR(pFormulaOperation, 1, STRLEN(pFormulaOperation) - 1);

      EXIT(lUnit);
    END;

    PROCEDURE "--- Duration ---"@1000000043();
    BEGIN
    END;

    PROCEDURE ParseDuration@1000000042(VAR pDuration@1190000009 : Code[11]) : Code[11];
    VAR
      lDurationLength@1190000020 : Integer;
      lHours@1190000010 : Integer;
      lHoursText@1190000015 : Text[2];
      lHoursLength@1190000019 : Integer;
      lMinutes@1190000011 : Integer;
      lMinutesText@1190000016 : Text[2];
      lSeconds@1190000012 : Integer;
      lSecondsText@1190000017 : Text[2];
      lHundreds@1190000013 : Integer;
      tlDuration@1190000021 : TextConst 'ENU=%1:%2:%3:%4;ENG=%1:%2:%3:%4';
      tlIncorrectFormat@1190000014 : TextConst 'ENU=Incorrect duration format. Please enter HH:MM:SS:LL where:\HH - hours,\MM - minutes,\SS - seconds,\LL - miliseconds.;ENG=Incorrect duration format. Please enter HH:MM:SS:LL where:\HH - hours,\MM - minutes,\SS - seconds,\LL - miliseconds.';
      lHundredsText@1190000018 : Text[2];
      lFiller@1190000022 : Text[2];
    BEGIN
      //DOC NA2016.12 - Parsing duration
      //  <> pDuration: Duration to validate (HH:MM:SS:DD)
      //  <- Duration parsed (as text)

      IF (pDuration <> '') THEN
      BEGIN
        Duration2HMSD(pDuration, lHoursText, lMinutesText, lSecondsText, lHundredsText);
        IF (lMinutesText = '') THEN
          lMinutesText := FORMAT(0);
        IF (lSecondsText = '') THEN
          lSecondsText := FORMAT(0);
        IF (lHundredsText = '') THEN
          lHundredsText := FORMAT(0);
        IF (( NOT (EVALUATE(lHours, lHoursText))) OR
            ( NOT (EVALUATE(lMinutes, lMinutesText))) OR
            ( NOT (EVALUATE(lSeconds, lSecondsText))) OR
            ( NOT (EVALUATE(lHundreds, lHundredsText)))) THEN
          ERROR(tlIncorrectFormat);
        IF ((lHours < 0) OR (lHours > 99) OR (lMinutes < 0) OR (lMinutes > 59) OR
            (lSeconds < 0) OR (lSeconds > 59) OR (lHundreds < 0) OR (lHundreds > 99)) THEN
          ERROR(tlIncorrectFormat);
        lHoursText := TnpToolkit.IntegerWithLeadingZeros(lHours, 2);
        lMinutesText := TnpToolkit.IntegerWithLeadingZeros(lMinutes, 2);
        lSecondsText := TnpToolkit.IntegerWithLeadingZeros(lSeconds, 2);
        lHundredsText := TnpToolkit.IntegerWithLeadingZeros(lHundreds, 2);
        pDuration := STRSUBSTNO(tlDuration, lHoursText, lMinutesText, lSecondsText, lHundredsText);
      END
      ELSE
      BEGIN
        lFiller := TnpToolkit.IntegerWithLeadingZeros(0, 2);
        pDuration := STRSUBSTNO(tlDuration, lFiller, lFiller, lFiller, lFiller);
      END;

      EXIT(pDuration);
    END;

    PROCEDURE Duration2HMSD@1190000012(pDuration@1190000009 : Code[11];VAR pHoursText@1190000017 : Text[2];VAR pMinutesText@1190000014 : Text[2];VAR pSecondsText@1190000012 : Text[2];VAR pHundredsText@1190000010 : Text[2]);
    VAR
      lIndex@1190000016 : Integer;
      lPos@1190000011 : Integer;
      lDuration@1190000013 : Code[11];
      lPart@1190000015 : Code[11];
    BEGIN
      //DOC NA2015.1 - Splitting duration to hours, minutes, seconds and hundreds of seconds
      //  -> pDuration: Duration to split
      //  <> pHoursText: Hours text
      //  <> pMinutesText: Minutes text
      //  <> pSecondsText: Seconds text
      //  <> pHundredsText: Hundreds of seconds text

      lPos := STRPOS(pDuration, ':');
      IF (lPos <> 0) THEN
      BEGIN
        lDuration := pDuration;
        FOR lIndex := 1 TO 4 DO
        BEGIN
          lPos := STRPOS(lDuration, ':');
          IF (lPos >= 1) THEN
            lPart := COPYSTR(lDuration, 1, lPos - 1)
          ELSE
            lPart := lDuration;
          CASE (lIndex) OF
            1: pHoursText := lPart;
            2: pMinutesText := lPart;
            3: pSecondsText := lPart;
            4: pHundredsText := lPart;
          END;
          lDuration := COPYSTR(lDuration, lPos + 1);
        END;
      END
      ELSE
      BEGIN
        pHoursText := COPYSTR(pDuration, 1, 2);
        pMinutesText := COPYSTR(pDuration, 3, 2);
        pSecondsText := COPYSTR(pDuration, 5, 2);
        pHundredsText := COPYSTR(pDuration, 7, 2);
      END;
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000002();
    BEGIN
    END;

    LOCAL PROCEDURE DefaultTime@1000000003(pTime@1000000000 : Time) : Time;
    BEGIN
      //DOC NA2016.12 - Turning empty time into the current time
      //  -> pTime: Time to examine
      //  <- Amended time

      EXIT(TnpToolkit.IIFTime(pTime <> 0T, pTime, TIME()));
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 01/02/2016 - Created
    }
    END.
  }
}

