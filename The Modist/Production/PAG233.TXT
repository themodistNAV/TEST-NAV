OBJECT Page 233 Apply Vendor Entries
{
  OBJECT-PROPERTIES
  {
    Date=23/03/16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.45480;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Apply Vendor Entries;
               ENG=Apply Vendor Entries];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table25;
    DataCaptionFields=Vendor No.;
    PageType=Worksheet;
    OnInit=BEGIN
             "Applies-to IDVisible" := TRUE;
           END;

    OnOpenPage=BEGIN
                 IF CalcType = CalcType::Direct THEN BEGIN
                   Vend.GET("Vendor No.");
                   ApplnCurrencyCode := Vend."Currency Code";
                   FindApplyingEntry;
                 END;

                 "Applies-to IDVisible" := ApplnType <> ApplnType::"Applies-to Doc. No.";

                 GLSetup.GET;

                 IF CalcType = CalcType::GenJnlLine THEN
                   CalcApplnAmount;
                 PostingDone := FALSE;
               END;

    OnAfterGetRecord=BEGIN
                       StyleTxt := SetStyle;
                     END;

    OnModifyRecord=BEGIN
                     CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",Rec);
                     IF "Applies-to ID" <> xRec."Applies-to ID" THEN
                       CalcApplnAmount;
                     EXIT(FALSE);
                   END;

    OnQueryClosePage=BEGIN
                       IF CloseAction = ACTION::LookupOK THEN
                         LookupOKOnPush;
                       IF ApplnType = ApplnType::"Applies-to Doc. No." THEN BEGIN
                         IF OK AND (ApplyingVendLedgEntry."Posting Date" < "Posting Date") THEN BEGIN
                           OK := FALSE;
                           ERROR(
                             EarlierPostingDateErr,ApplyingVendLedgEntry."Document Type",ApplyingVendLedgEntry."Document No.",
                             "Document Type","Document No.");
                         END;
                         IF OK THEN BEGIN
                           IF "Amount to Apply" = 0 THEN
                             "Amount to Apply" := "Remaining Amount";
                           CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",Rec);
                         END;
                       END;

                       IF CheckActionPerformed THEN BEGIN
                         Rec := ApplyingVendLedgEntry;
                         "Applying Entry" := FALSE;
                         IF AppliesToID = '' THEN BEGIN
                           "Applies-to ID" := '';
                           "Amount to Apply" := 0;
                         END;
                         CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",Rec);
                       END;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           IF ApplnType = ApplnType::"Applies-to Doc. No." THEN
                             CalcApplnAmount;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 37      ;1   ;ActionGroup;
                      CaptionML=[ENU=Ent&ry;
                                 ENG=Ent&ry];
                      Image=Entry }
      { 31      ;2   ;Action    ;
                      CaptionML=[ENU=Applied E&ntries;
                                 ENG=Applied E&ntries];
                      RunObject=Page 62;
                      RunPageOnRec=Yes;
                      Image=Approve }
      { 57      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 63      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Detailed &Ledger Entries;
                                 ENG=Detailed &Ledger Entries];
                      RunObject=Page 574;
                      RunPageView=SORTING(Vendor Ledger Entry No.,Posting Date);
                      RunPageLink=Vendor Ledger Entry No.=FIELD(Entry No.);
                      Image=View }
      { 30      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Application;
                                 ENG=&Application];
                      Image=Apply }
      { 32      ;2   ;Action    ;
                      Name=ActionSetAppliesToID;
                      ShortCutKey=Shift+F11;
                      CaptionML=[ENU=Set Applies-to ID;
                                 ENG=Set Applies-to ID];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SelectLineToApply;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF (CalcType = CalcType::GenJnlLine) AND (ApplnType = ApplnType::"Applies-to Doc. No.") THEN
                                   ERROR(CannotSetAppliesToIDErr);

                                 SetVendApplId;
                               END;
                                }
      { 34      ;2   ;Action    ;
                      Name=ActionPostApplication;
                      ShortCutKey=F9;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Post Application;
                                 ENG=Post Application];
                      Promoted=Yes;
                      Image=PostApplication;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PostDirectApplication(FALSE);
                               END;
                                }
      { 5       ;2   ;Action    ;
                      Name=Preview;
                      CaptionML=[ENU=Preview Posting;
                                 ENG=Preview Posting];
                      Image=ViewPostedOrder;
                      OnAction=BEGIN
                                 PostDirectApplication(TRUE);
                               END;
                                }
      { 99      ;2   ;Separator ;
                      CaptionML=[ENU=-;
                                 ENG=-] }
      { 100     ;2   ;Action    ;
                      CaptionML=[ENU=Show Only Selected Entries to Be Applied;
                                 ENG=Show Only Selected Entries to Be Applied];
                      Image=ShowSelected;
                      OnAction=BEGIN
                                 ShowAppliedEntries := NOT ShowAppliedEntries;
                                 IF ShowAppliedEntries THEN BEGIN
                                   IF CalcType = CalcType::GenJnlLine THEN
                                     SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID")
                                   ELSE BEGIN
                                     VendEntryApplID := USERID;
                                     IF VendEntryApplID = '' THEN
                                       VendEntryApplID := '***';
                                     SETRANGE("Applies-to ID",VendEntryApplID);
                                   END;
                                 END ELSE
                                   SETRANGE("Applies-to ID");
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 36      ;1   ;Action    ;
                      CaptionML=[ENU=&Navigate;
                                 ENG=&Navigate];
                      Promoted=Yes;
                      Image=Navigate;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Navigate.SetDoc("Posting Date","Document No.");
                                 Navigate.RUN;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 70  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 73  ;2   ;Field     ;
                CaptionML=[ENU=Posting Date;
                           ENG=Posting Date];
                SourceExpr=ApplyingVendLedgEntry."Posting Date";
                Editable=FALSE }

    { 75  ;2   ;Field     ;
                CaptionML=[ENU=Document Type;
                           ENG=Document Type];
                OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                 ENG=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                SourceExpr=ApplyingVendLedgEntry."Document Type";
                Editable=FALSE }

    { 77  ;2   ;Field     ;
                CaptionML=[ENU=Document No.;
                           ENG=Document No.];
                SourceExpr=ApplyingVendLedgEntry."Document No.";
                Editable=FALSE }

    { 71  ;2   ;Field     ;
                Name=ApplyingVendorNo;
                CaptionML=[ENU=Vendor No.;
                           ENG=Vendor No.];
                SourceExpr=ApplyingVendLedgEntry."Vendor No.";
                Editable=FALSE }

    { 85  ;2   ;Field     ;
                Name=ApplyingDescription;
                CaptionML=[ENU=Description;
                           ENG=Description];
                SourceExpr=ApplyingVendLedgEntry.Description;
                Editable=FALSE }

    { 79  ;2   ;Field     ;
                CaptionML=[ENU=Currency Code;
                           ENG=Currency Code];
                SourceExpr=ApplyingVendLedgEntry."Currency Code";
                Editable=FALSE }

    { 81  ;2   ;Field     ;
                CaptionML=[ENU=Amount;
                           ENG=Amount];
                SourceExpr=ApplyingVendLedgEntry.Amount;
                Editable=FALSE }

    { 83  ;2   ;Field     ;
                CaptionML=[ENU=Remaining Amount;
                           ENG=Remaining Amount];
                SourceExpr=ApplyingVendLedgEntry."Remaining Amount";
                Editable=FALSE }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 22  ;2   ;Field     ;
                SourceExpr="Applies-to ID";
                Visible="Applies-to IDVisible" }

    { 2   ;2   ;Field     ;
                SourceExpr="Posting Date";
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr="Document Type";
                Editable=FALSE;
                StyleExpr=StyleTxt }

    { 6   ;2   ;Field     ;
                SourceExpr="Document No.";
                Editable=FALSE;
                StyleExpr=StyleTxt }

    { 38  ;2   ;Field     ;
                SourceExpr="External Document No." }

    { 8   ;2   ;Field     ;
                SourceExpr="Vendor No.";
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                SourceExpr=Description;
                Editable=FALSE }

    { 39  ;2   ;Field     ;
                SourceExpr="Currency Code" }

    { 61  ;2   ;Field     ;
                SourceExpr="Original Amount";
                Visible=FALSE;
                Editable=FALSE }

    { 12  ;2   ;Field     ;
                SourceExpr=Amount;
                Visible=FALSE;
                Editable=FALSE }

    { 14  ;2   ;Field     ;
                SourceExpr="Remaining Amount";
                Editable=FALSE }

    { 33  ;2   ;Field     ;
                CaptionML=[ENU=Appln. Remaining Amount;
                           ENG=Appln. Remaining Amount];
                SourceExpr=CalcApplnRemainingAmount("Remaining Amount");
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode }

    { 90  ;2   ;Field     ;
                SourceExpr="Amount to Apply";
                OnValidate=BEGIN
                             CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",Rec);

                             IF (xRec."Amount to Apply" = 0) OR ("Amount to Apply" = 0) AND
                                (ApplnType = ApplnType::"Applies-to ID")
                             THEN
                               SetVendApplId;
                             GET("Entry No.");
                             AmounttoApplyOnAfterValidate;
                           END;
                            }

    { 92  ;2   ;Field     ;
                CaptionML=[ENU=Appln. Amount to Apply;
                           ENG=Appln. Amount to Apply];
                SourceExpr=CalcApplnAmounttoApply("Amount to Apply");
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode }

    { 16  ;2   ;Field     ;
                SourceExpr="Due Date";
                StyleExpr=StyleTxt }

    { 18  ;2   ;Field     ;
                SourceExpr="Pmt. Discount Date";
                OnValidate=BEGIN
                             RecalcApplnAmount;
                           END;
                            }

    { 66  ;2   ;Field     ;
                SourceExpr="Pmt. Disc. Tolerance Date" }

    { 3   ;2   ;Field     ;
                SourceExpr="Payment Reference" }

    { 20  ;2   ;Field     ;
                SourceExpr="Original Pmt. Disc. Possible";
                Visible=FALSE }

    { 64  ;2   ;Field     ;
                SourceExpr="Remaining Pmt. Disc. Possible";
                OnValidate=BEGIN
                             RecalcApplnAmount;
                           END;
                            }

    { 51  ;2   ;Field     ;
                CaptionML=[ENU=Appln. Pmt. Disc. Possible;
                           ENG=Appln. Pmt. Disc. Possible];
                SourceExpr=CalcApplnRemainingAmount("Remaining Pmt. Disc. Possible");
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode }

    { 68  ;2   ;Field     ;
                SourceExpr="Max. Payment Tolerance" }

    { 24  ;2   ;Field     ;
                SourceExpr=Open;
                Editable=FALSE }

    { 26  ;2   ;Field     ;
                SourceExpr=Positive;
                Editable=FALSE }

    { 56  ;2   ;Field     ;
                SourceExpr="Global Dimension 1 Code" }

    { 59  ;2   ;Field     ;
                SourceExpr="Global Dimension 2 Code" }

    { 41  ;1   ;Group      }

    { 1903222401;2;Group  ;
                GroupType=FixedLayout }

    { 1903866701;3;Group  ;
                CaptionML=[ENU=Appln. Currency;
                           ENG=Appln. Currency] }

    { 49  ;4   ;Field     ;
                SourceExpr=ApplnCurrencyCode;
                TableRelation=Currency;
                Editable=FALSE }

    { 1900545201;3;Group  ;
                CaptionML=[ENU=Amount to Apply;
                           ENG=Amount to Apply] }

    { 45  ;4   ;Field     ;
                Name=AmountToApply;
                CaptionML=[ENU=Amount to Apply;
                           ENG=Amount to Apply];
                SourceExpr=AppliedAmount;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1903099901;3;Group  ;
                CaptionML=[ENU=Pmt. Disc. Amount;
                           ENG=Pmt. Disc. Amount] }

    { 94  ;4   ;Field     ;
                CaptionML=[ENU=Pmt. Disc. Amount;
                           ENG=Pmt. Disc. Amount];
                SourceExpr=-PmtDiscAmount;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1901652301;3;Group  ;
                CaptionML=[ENU=Rounding;
                           ENG=Rounding] }

    { 53  ;4   ;Field     ;
                CaptionML=[ENU=Rounding;
                           ENG=Rounding];
                SourceExpr=ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1901992701;3;Group  ;
                CaptionML=[ENU=Applied Amount;
                           ENG=Applied Amount] }

    { 98  ;4   ;Field     ;
                Name=AppliedAmount;
                CaptionML=[ENU=Applied Amount;
                           ENG=Applied Amount];
                SourceExpr=AppliedAmount + (-PmtDiscAmount) + ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1900295601;3;Group  ;
                CaptionML=[ENU=Available Amount;
                           ENG=Available Amount] }

    { 47  ;4   ;Field     ;
                CaptionML=[ENU=Available Amount;
                           ENG=Available Amount];
                SourceExpr=ApplyingAmount;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1901652401;3;Group  ;
                CaptionML=[ENU=Balance;
                           ENG=Balance] }

    { 43  ;4   ;Field     ;
                Name=ControlBalance;
                CaptionML=[ENU=Balance;
                           ENG=Balance];
                SourceExpr=AppliedAmount + (-PmtDiscAmount) + ApplyingAmount + ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      ApplyingVendLedgEntry@1033 : TEMPORARY Record 25;
      AppliedVendLedgEntry@1001 : Record 25;
      Currency@1002 : Record 4;
      CurrExchRate@1003 : Record 330;
      GenJnlLine@1004 : Record 81;
      GenJnlLine2@1005 : Record 81;
      PurchHeader@1006 : Record 38;
      Vend@1007 : Record 23;
      VendLedgEntry@1008 : Record 25;
      GLSetup@1009 : Record 98;
      TotalPurchLine@1010 : Record 39;
      TotalPurchLineLCY@1011 : Record 39;
      VendEntrySetApplID@1013 : Codeunit 111;
      GenJnlApply@1014 : Codeunit 225;
      PurchPost@1015 : Codeunit 90;
      PaymentToleranceMgt@1037 : Codeunit 426;
      Navigate@1012 : Page 344;
      GenJnlLineApply@1016 : Boolean;
      AppliedAmount@1017 : Decimal;
      ApplyingAmount@1018 : Decimal;
      PmtDiscAmount@1040 : Decimal;
      ApplnDate@1019 : Date;
      ApplnCurrencyCode@1020 : Code[10];
      ApplnRoundingPrecision@1021 : Decimal;
      ApplnRounding@1022 : Decimal;
      ApplnType@1023 : ' ,Applies-to Doc. No.,Applies-to ID';
      AmountRoundingPrecision@1024 : Decimal;
      VATAmount@1025 : Decimal;
      VATAmountText@1026 : Text[30];
      StyleTxt@1031 : Text;
      CalcType@1027 : 'Direct,GenJnlLine,PurchHeader';
      VendEntryApplID@1029 : Code[50];
      AppliesToID@1042 : Code[50];
      ValidExchRate@1030 : Boolean;
      DifferentCurrenciesInAppln@1032 : Boolean;
      Text002@1036 : TextConst 'ENU=You must select an applying entry before you can post the application.;ENG=You must select an applying entry before you can post the application.';
      Text003@1035 : TextConst 'ENU=You must post the application from the window where you entered the applying entry.;ENG=You must post the application from the window where you entered the applying entry.';
      CannotSetAppliesToIDErr@1038 : TextConst 'ENU=You cannot set Applies-to ID while selecting Applies-to Doc. No.;ENG=You cannot set Applies-to ID while selecting Applies-to Doc. No.';
      ShowAppliedEntries@1039 : Boolean;
      OK@1028 : Boolean;
      EarlierPostingDateErr@1034 : TextConst 'ENU=You cannot apply and post an entry to an entry with an earlier posting date.\\Instead, post the document of type %1 with the number %2 and then apply it to the document of type %3 with the number %4.;ENG=You cannot apply and post an entry to an entry with an earlier posting date.\\Instead, post the document of type %1 with the number %2 and then apply it to the document of type %3 with the number %4.';
      PostingDone@1000 : Boolean;
      "Applies-to IDVisible"@19043506 : Boolean INDATASET;
      ActionPerformed@1104 : Boolean;
      Text012@1043 : TextConst 'ENU=The application was successfully posted.;ENG=The application was successfully posted.';
      Text013@1044 : TextConst 'ENU=The %1 entered must not be before the %1 on the %2.;ENG=The %1 entered must not be before the %1 on the %2.';
      Text019@1045 : TextConst 'ENU=Post application process has been canceled.;ENG=Post application process has been cancelled.';

    PROCEDURE SetGenJnlLine@1(NewGenJnlLine@1000 : Record 81;ApplnTypeSelect@1001 : Integer);
    BEGIN
      GenJnlLine := NewGenJnlLine;
      GenJnlLineApply := TRUE;

      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor THEN
        ApplyingAmount := GenJnlLine.Amount;
      IF GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Vendor THEN
        ApplyingAmount := -GenJnlLine.Amount;
      ApplnDate := GenJnlLine."Posting Date";
      ApplnCurrencyCode := GenJnlLine."Currency Code";
      CalcType := CalcType::GenJnlLine;

      CASE ApplnTypeSelect OF
        GenJnlLine.FIELDNO("Applies-to Doc. No."):
          ApplnType := ApplnType::"Applies-to Doc. No.";
        GenJnlLine.FIELDNO("Applies-to ID"):
          ApplnType := ApplnType::"Applies-to ID";
      END;

      SetApplyingVendLedgEntry;
    END;

    PROCEDURE SetPurch@2(NewPurchHeader@1000 : Record 38;VAR NewVendLedgEntry@1001 : Record 25;ApplnTypeSelect@1002 : Integer);
    BEGIN
      PurchHeader := NewPurchHeader;
      COPYFILTERS(NewVendLedgEntry);

      PurchPost.SumPurchLines(
        PurchHeader,0,TotalPurchLine,TotalPurchLineLCY,
        VATAmount,VATAmountText);

      CASE PurchHeader."Document Type" OF
        PurchHeader."Document Type"::"Return Order",
        PurchHeader."Document Type"::"Credit Memo":
          ApplyingAmount := TotalPurchLine."Amount Including VAT"
        ELSE
          ApplyingAmount := -TotalPurchLine."Amount Including VAT";
      END;

      ApplnDate := PurchHeader."Posting Date";
      ApplnCurrencyCode := PurchHeader."Currency Code";
      CalcType := CalcType::PurchHeader;

      CASE ApplnTypeSelect OF
        PurchHeader.FIELDNO("Applies-to Doc. No."):
          ApplnType := ApplnType::"Applies-to Doc. No.";
        PurchHeader.FIELDNO("Applies-to ID"):
          ApplnType := ApplnType::"Applies-to ID";
      END;

      SetApplyingVendLedgEntry;
    END;

    PROCEDURE SetVendLedgEntry@13(NewVendLedgEntry@1000 : Record 25);
    BEGIN
      Rec := NewVendLedgEntry;
    END;

    PROCEDURE SetApplyingVendLedgEntry@9();
    VAR
      Vendor@1001 : Record 23;
      "VendEntry-Edit"@1000 : Codeunit 113;
    BEGIN
      CASE CalcType OF
        CalcType::PurchHeader:
          BEGIN
            ApplyingVendLedgEntry."Posting Date" := PurchHeader."Posting Date";
            IF PurchHeader."Document Type" = PurchHeader."Document Type"::"Return Order" THEN
              ApplyingVendLedgEntry."Document Type" := PurchHeader."Document Type"::"Credit Memo"
            ELSE
              ApplyingVendLedgEntry."Document Type" := PurchHeader."Document Type";
            ApplyingVendLedgEntry."Document No." := PurchHeader."No.";
            ApplyingVendLedgEntry."Vendor No." := PurchHeader."Pay-to Vendor No.";
            ApplyingVendLedgEntry.Description := PurchHeader."Posting Description";
            ApplyingVendLedgEntry."Currency Code" := PurchHeader."Currency Code";
            IF ApplyingVendLedgEntry."Document Type" = ApplyingVendLedgEntry."Document Type"::"Credit Memo" THEN  BEGIN
              ApplyingVendLedgEntry.Amount := TotalPurchLine."Amount Including VAT";
              ApplyingVendLedgEntry."Remaining Amount" := TotalPurchLine."Amount Including VAT";
            END ELSE BEGIN
              ApplyingVendLedgEntry.Amount := -TotalPurchLine."Amount Including VAT";
              ApplyingVendLedgEntry."Remaining Amount" := -TotalPurchLine."Amount Including VAT";
            END;
            CalcApplnAmount;
          END;
        CalcType::Direct:
          BEGIN
            IF "Applying Entry" THEN BEGIN
              IF ApplyingVendLedgEntry."Entry No." <> 0 THEN
                VendLedgEntry := ApplyingVendLedgEntry;
              "VendEntry-Edit".RUN(Rec);
              IF "Applies-to ID" = '' THEN
                SetVendApplId;
              CALCFIELDS(Amount);
              ApplyingVendLedgEntry := Rec;
              IF VendLedgEntry."Entry No." <> 0 THEN BEGIN
                Rec := VendLedgEntry;
                "Applying Entry" := FALSE;
                SetVendApplId;
              END;
              SETFILTER("Entry No.",'<> %1',ApplyingVendLedgEntry."Entry No.");
              ApplyingAmount := ApplyingVendLedgEntry."Remaining Amount";
              ApplnDate := ApplyingVendLedgEntry."Posting Date";
              ApplnCurrencyCode := ApplyingVendLedgEntry."Currency Code";
            END;
            CalcApplnAmount;
          END;
        CalcType::GenJnlLine:
          BEGIN
            ApplyingVendLedgEntry."Posting Date" := GenJnlLine."Posting Date";
            ApplyingVendLedgEntry."Document Type" := GenJnlLine."Document Type";
            ApplyingVendLedgEntry."Document No." := GenJnlLine."Document No.";
            IF GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Vendor THEN BEGIN
              ApplyingVendLedgEntry."Vendor No." := GenJnlLine."Bal. Account No.";
              Vendor.GET(ApplyingVendLedgEntry."Vendor No.");
              ApplyingVendLedgEntry.Description := Vendor.Name;
            END ELSE BEGIN
              ApplyingVendLedgEntry."Vendor No." := GenJnlLine."Account No.";
              ApplyingVendLedgEntry.Description := GenJnlLine.Description;
            END;
            ApplyingVendLedgEntry."Currency Code" := GenJnlLine."Currency Code";
            ApplyingVendLedgEntry.Amount := GenJnlLine.Amount;
            ApplyingVendLedgEntry."Remaining Amount" := GenJnlLine.Amount;
            CalcApplnAmount;
          END;
      END;
    END;

    PROCEDURE SetVendApplId@10();
    BEGIN
      IF (CalcType = CalcType::GenJnlLine) AND (ApplyingVendLedgEntry."Posting Date" < "Posting Date") THEN
        ERROR(
          EarlierPostingDateErr,ApplyingVendLedgEntry."Document Type",ApplyingVendLedgEntry."Document No.",
          "Document Type","Document No.");

      IF ApplyingVendLedgEntry."Entry No." <> 0 THEN
        GenJnlApply.CheckAgainstApplnCurrency(
          ApplnCurrencyCode,"Currency Code",GenJnlLine."Account Type"::Vendor,TRUE);

      VendLedgEntry.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(VendLedgEntry);
      IF GenJnlLineApply THEN
        VendEntrySetApplID.SetApplId(VendLedgEntry,ApplyingVendLedgEntry,GenJnlLine."Applies-to ID")
      ELSE
        VendEntrySetApplID.SetApplId(VendLedgEntry,ApplyingVendLedgEntry,PurchHeader."Applies-to ID");

      ActionPerformed := VendLedgEntry."Applies-to ID" <> '';
      CalcApplnAmount;
    END;

    LOCAL PROCEDURE CalcApplnAmount@7();
    VAR
      ExchAccGLJnlLine@1000 : Codeunit 366;
    BEGIN
      AppliedAmount := 0;
      PmtDiscAmount := 0;
      DifferentCurrenciesInAppln := FALSE;

      CASE CalcType OF
        CalcType::Direct:
          BEGIN
            FindAmountRounding;
            VendEntryApplID := USERID;
            IF VendEntryApplID = '' THEN
              VendEntryApplID := '***';

            VendLedgEntry := ApplyingVendLedgEntry;

            AppliedVendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
            AppliedVendLedgEntry.SETRANGE("Vendor No.","Vendor No.");
            AppliedVendLedgEntry.SETRANGE(Open,TRUE);
            IF AppliesToID = '' THEN
              AppliedVendLedgEntry.SETRANGE("Applies-to ID",VendEntryApplID)
            ELSE
              AppliedVendLedgEntry.SETRANGE("Applies-to ID",AppliesToID);

            IF ApplyingVendLedgEntry."Entry No." <> 0 THEN BEGIN
              VendLedgEntry.CALCFIELDS("Remaining Amount");
              AppliedVendLedgEntry.SETFILTER("Entry No.",'<>%1',VendLedgEntry."Entry No.");
            END;

            HandlChosenEntries(0,
              VendLedgEntry."Remaining Amount",
              VendLedgEntry."Currency Code",
              VendLedgEntry."Posting Date");
          END;
        CalcType::GenJnlLine:
          BEGIN
            FindAmountRounding;
            IF GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Vendor THEN
              ExchAccGLJnlLine.RUN(GenJnlLine);

            CASE ApplnType OF
              ApplnType::"Applies-to Doc. No.":
                BEGIN
                  AppliedVendLedgEntry := Rec;
                  WITH AppliedVendLedgEntry DO BEGIN
                    CALCFIELDS("Remaining Amount");
                    IF "Currency Code" <> ApplnCurrencyCode THEN BEGIN
                      "Remaining Amount" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Amount");
                      "Remaining Pmt. Disc. Possible" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Pmt. Disc. Possible");
                      "Amount to Apply" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Amount to Apply");
                    END;

                    IF "Amount to Apply" <> 0 THEN
                      AppliedAmount := ROUND("Amount to Apply",AmountRoundingPrecision)
                    ELSE
                      AppliedAmount := ROUND("Remaining Amount",AmountRoundingPrecision);

                    IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(
                         GenJnlLine,AppliedVendLedgEntry,0,FALSE) AND
                       ((ABS(GenJnlLine.Amount) + ApplnRoundingPrecision >=
                         ABS(AppliedAmount - "Remaining Pmt. Disc. Possible")) OR
                        (GenJnlLine.Amount = 0))
                    THEN
                      PmtDiscAmount := "Remaining Pmt. Disc. Possible";

                    IF NOT DifferentCurrenciesInAppln THEN
                      DifferentCurrenciesInAppln := ApplnCurrencyCode <> "Currency Code";
                  END;
                  CheckRounding;
                END;
              ApplnType::"Applies-to ID":
                BEGIN
                  GenJnlLine2 := GenJnlLine;
                  AppliedVendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
                  AppliedVendLedgEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
                  AppliedVendLedgEntry.SETRANGE(Open,TRUE);
                  AppliedVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");

                  HandlChosenEntries(1,
                    GenJnlLine2.Amount,
                    GenJnlLine2."Currency Code",
                    GenJnlLine2."Posting Date");
                END;
            END;
          END;
        CalcType::PurchHeader:
          BEGIN
            FindAmountRounding;

            CASE ApplnType OF
              ApplnType::"Applies-to Doc. No.":
                BEGIN
                  AppliedVendLedgEntry := Rec;
                  WITH AppliedVendLedgEntry DO BEGIN
                    CALCFIELDS("Remaining Amount");

                    IF "Currency Code" <> ApplnCurrencyCode THEN
                      "Remaining Amount" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Amount");

                    AppliedAmount := AppliedAmount + ROUND("Remaining Amount",AmountRoundingPrecision);

                    IF NOT DifferentCurrenciesInAppln THEN
                      DifferentCurrenciesInAppln := ApplnCurrencyCode <> "Currency Code";
                  END;
                  CheckRounding;
                END;
              ApplnType::"Applies-to ID":
                WITH VendLedgEntry DO BEGIN
                  AppliedVendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
                  AppliedVendLedgEntry.SETRANGE("Vendor No.",PurchHeader."Pay-to Vendor No.");
                  AppliedVendLedgEntry.SETRANGE(Open,TRUE);
                  AppliedVendLedgEntry.SETRANGE("Applies-to ID",PurchHeader."Applies-to ID");

                  HandlChosenEntries(2,
                    ApplyingAmount,
                    ApplnCurrencyCode,
                    ApplnDate);
                END;
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE CalcApplnRemainingAmount@4(Amount@1000 : Decimal) : Decimal;
    VAR
      ApplnRemainingAmount@1001 : Decimal;
    BEGIN
      ValidExchRate := TRUE;
      IF ApplnCurrencyCode = "Currency Code" THEN
        EXIT(Amount);

      IF ApplnDate = 0D THEN
        ApplnDate := "Posting Date";
      ApplnRemainingAmount :=
        CurrExchRate.ApplnExchangeAmtFCYToFCY(
          ApplnDate,"Currency Code",ApplnCurrencyCode,Amount,ValidExchRate);
      EXIT(ApplnRemainingAmount);
    END;

    LOCAL PROCEDURE CalcApplnAmounttoApply@11(AmounttoApply@1000 : Decimal) : Decimal;
    VAR
      ApplnAmountToApply@1001 : Decimal;
    BEGIN
      ValidExchRate := TRUE;

      IF ApplnCurrencyCode = "Currency Code" THEN
        EXIT(AmounttoApply);

      IF ApplnDate = 0D THEN
        ApplnDate := "Posting Date";
      ApplnAmountToApply :=
        CurrExchRate.ApplnExchangeAmtFCYToFCY(
          ApplnDate,"Currency Code",ApplnCurrencyCode,AmounttoApply,ValidExchRate);
      EXIT(ApplnAmountToApply);
    END;

    LOCAL PROCEDURE FindAmountRounding@6();
    BEGIN
      IF ApplnCurrencyCode = '' THEN BEGIN
        Currency.INIT;
        Currency.Code := '';
        Currency.InitRoundingPrecision;
      END ELSE
        IF ApplnCurrencyCode <> Currency.Code THEN
          Currency.GET(ApplnCurrencyCode);

      AmountRoundingPrecision := Currency."Amount Rounding Precision";
    END;

    LOCAL PROCEDURE CheckRounding@3();
    BEGIN
      ApplnRounding := 0;

      CASE CalcType OF
        CalcType::PurchHeader:
          EXIT;
        CalcType::GenJnlLine:
          IF (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Payment) AND
             (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Refund)
          THEN
            EXIT;
      END;

      IF ApplnCurrencyCode = '' THEN
        ApplnRoundingPrecision := GLSetup."Appln. Rounding Precision"
      ELSE BEGIN
        IF ApplnCurrencyCode <> "Currency Code" THEN
          Currency.GET(ApplnCurrencyCode);
        ApplnRoundingPrecision := Currency."Appln. Rounding Precision";
      END;

      IF (ABS((AppliedAmount - PmtDiscAmount) + ApplyingAmount) <= ApplnRoundingPrecision) AND DifferentCurrenciesInAppln THEN
        ApplnRounding := -((AppliedAmount - PmtDiscAmount) + ApplyingAmount);
    END;

    PROCEDURE GetVendLedgEntry@5(VAR VendLedgEntry@1000 : Record 25);
    BEGIN
      VendLedgEntry := Rec;
    END;

    LOCAL PROCEDURE FindApplyingEntry@12();
    BEGIN
      IF CalcType = CalcType::Direct THEN BEGIN
        VendEntryApplID := USERID;
        IF VendEntryApplID = '' THEN
          VendEntryApplID := '***';

        VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
        VendLedgEntry.SETRANGE("Vendor No.","Vendor No.");
        IF AppliesToID = '' THEN
          VendLedgEntry.SETRANGE("Applies-to ID",VendEntryApplID)
        ELSE
          VendLedgEntry.SETRANGE("Applies-to ID",AppliesToID);
        VendLedgEntry.SETRANGE(Open,TRUE);
        VendLedgEntry.SETRANGE("Applying Entry",TRUE);
        IF VendLedgEntry.FINDFIRST THEN BEGIN
          VendLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
          ApplyingVendLedgEntry := VendLedgEntry;
          SETFILTER("Entry No.",'<>%1',VendLedgEntry."Entry No.");
          ApplyingAmount := VendLedgEntry."Remaining Amount";
          ApplnDate := VendLedgEntry."Posting Date";
          ApplnCurrencyCode := VendLedgEntry."Currency Code";
        END;
        CalcApplnAmount;
      END;
    END;

    LOCAL PROCEDURE HandlChosenEntries@8(Type@1000 : 'Direct,GenJnlLine,PurchHeader';CurrentAmount@1001 : Decimal;CurrencyCode@1002 : Code[10];"Posting Date"@1003 : Date);
    VAR
      AppliedVendLedgEntryTemp@1004 : TEMPORARY Record 25;
      PossiblePmtdisc@1007 : Decimal;
      OldPmtdisc@1008 : Decimal;
      CorrectionAmount@1009 : Decimal;
      CanUseDisc@1005 : Boolean;
      FromZeroGenJnl@1010 : Boolean;
    BEGIN
      IF AppliedVendLedgEntry.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          AppliedVendLedgEntryTemp := AppliedVendLedgEntry;
          AppliedVendLedgEntryTemp.INSERT;
        UNTIL AppliedVendLedgEntry.NEXT = 0;
      END ELSE
        EXIT;

      FromZeroGenJnl := (CurrentAmount = 0) AND (Type = Type::GenJnlLine);

      REPEAT
        IF NOT FromZeroGenJnl THEN
          AppliedVendLedgEntryTemp.SETRANGE(Positive,CurrentAmount < 0);
        IF AppliedVendLedgEntryTemp.FINDFIRST THEN BEGIN
          ExchangeAmountsOnLedgerEntry(Type,CurrencyCode,AppliedVendLedgEntryTemp,"Posting Date");

          CASE Type OF
            Type::Direct:
              CanUseDisc := PaymentToleranceMgt.CheckCalcPmtDiscVend(VendLedgEntry,AppliedVendLedgEntryTemp,0,FALSE,FALSE);
            Type::GenJnlLine:
              CanUseDisc := PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(GenJnlLine2,AppliedVendLedgEntryTemp,0,FALSE)
            ELSE
              CanUseDisc := FALSE;
          END;

          IF CanUseDisc AND
             (ABS(AppliedVendLedgEntryTemp."Amount to Apply") >= ABS(AppliedVendLedgEntryTemp."Remaining Amount" -
                AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible"))
          THEN BEGIN
            IF (ABS(CurrentAmount) > ABS(AppliedVendLedgEntryTemp."Remaining Amount" -
                  AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible"))
            THEN BEGIN
              PmtDiscAmount := PmtDiscAmount + AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
              CurrentAmount := CurrentAmount + AppliedVendLedgEntryTemp."Remaining Amount" -
                AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
            END ELSE
              IF (ABS(CurrentAmount) = ABS(AppliedVendLedgEntryTemp."Remaining Amount" -
                    AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible"))
              THEN BEGIN
                PmtDiscAmount := PmtDiscAmount + AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible" ;
                CurrentAmount := CurrentAmount + AppliedVendLedgEntryTemp."Remaining Amount" -
                  AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
                AppliedAmount := AppliedAmount + CorrectionAmount;
              END ELSE
                IF FromZeroGenJnl THEN BEGIN
                  PmtDiscAmount := PmtDiscAmount + AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
                  CurrentAmount := CurrentAmount +
                    AppliedVendLedgEntryTemp."Remaining Amount" - AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
                END ELSE BEGIN
                  IF (CurrentAmount + AppliedVendLedgEntryTemp."Remaining Amount" <= 0) <> (CurrentAmount <= 0) THEN BEGIN
                    PmtDiscAmount := PmtDiscAmount + PossiblePmtdisc;
                    AppliedAmount := AppliedAmount + CorrectionAmount;
                  END;
                  CurrentAmount := CurrentAmount + AppliedVendLedgEntryTemp."Remaining Amount" -
                    AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
                  PossiblePmtdisc := AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
                END;
          END ELSE BEGIN
            IF ((CurrentAmount + AppliedVendLedgEntryTemp."Amount to Apply") * CurrentAmount) >= 0 THEN
              AppliedAmount := AppliedAmount + CorrectionAmount;
            CurrentAmount := CurrentAmount + AppliedVendLedgEntryTemp."Amount to Apply";
          END;
        END ELSE BEGIN
          AppliedVendLedgEntryTemp.SETRANGE(Positive);
          AppliedVendLedgEntryTemp.FINDFIRST;
          ExchangeAmountsOnLedgerEntry(Type,CurrencyCode,AppliedVendLedgEntryTemp,"Posting Date");
        END;

        IF OldPmtdisc <> PmtDiscAmount THEN
          AppliedAmount := AppliedAmount + AppliedVendLedgEntryTemp."Remaining Amount"
        ELSE
          AppliedAmount := AppliedAmount + AppliedVendLedgEntryTemp."Amount to Apply";
        OldPmtdisc := PmtDiscAmount;

        IF PossiblePmtdisc <> 0 THEN
          CorrectionAmount := AppliedVendLedgEntryTemp."Remaining Amount" - AppliedVendLedgEntryTemp."Amount to Apply"
        ELSE
          CorrectionAmount := 0;

        IF NOT DifferentCurrenciesInAppln THEN
          DifferentCurrenciesInAppln := ApplnCurrencyCode <> AppliedVendLedgEntryTemp."Currency Code";

        AppliedVendLedgEntryTemp.DELETE;
        AppliedVendLedgEntryTemp.SETRANGE(Positive);

      UNTIL NOT AppliedVendLedgEntryTemp.FINDFIRST;
      PmtDiscAmount += PossiblePmtdisc;
      CheckRounding;
    END;

    LOCAL PROCEDURE AmounttoApplyOnAfterValidate@19038179();
    BEGIN
      IF ApplnType <> ApplnType::"Applies-to Doc. No." THEN BEGIN
        CalcApplnAmount;
        CurrPage.UPDATE(FALSE);
      END;
    END;

    LOCAL PROCEDURE RecalcApplnAmount@19051222();
    BEGIN
      CurrPage.UPDATE(TRUE);
      CalcApplnAmount;
    END;

    LOCAL PROCEDURE LookupOKOnPush@19031339();
    BEGIN
      OK := TRUE;
    END;

    LOCAL PROCEDURE PostDirectApplication@15(PreviewMode@1005 : Boolean);
    VAR
      VendEntryApplyPostedEntries@1000 : Codeunit 227;
      PostApplication@1002 : Page 579;
      ApplicationDate@1001 : Date;
      NewApplicationDate@1003 : Date;
      NewDocumentNo@1004 : Code[20];
    BEGIN
      IF CalcType = CalcType::Direct THEN BEGIN
        IF ApplyingVendLedgEntry."Entry No." <> 0 THEN BEGIN
          Rec := ApplyingVendLedgEntry;
          ApplicationDate := VendEntryApplyPostedEntries.GetApplicationDate(Rec);

          PostApplication.SetValues("Document No.",ApplicationDate);
          IF ACTION::OK = PostApplication.RUNMODAL THEN BEGIN
            PostApplication.GetValues(NewDocumentNo,NewApplicationDate);
            IF NewApplicationDate < ApplicationDate THEN
              ERROR(Text013,FIELDCAPTION("Posting Date"),TABLECAPTION);
          END ELSE
            ERROR(Text019);

          IF PreviewMode THEN
            VendEntryApplyPostedEntries.PreviewApply(Rec,NewDocumentNo,NewApplicationDate)
          ELSE
            VendEntryApplyPostedEntries.Apply(Rec,NewDocumentNo,NewApplicationDate);

          IF NOT PreviewMode THEN BEGIN
            MESSAGE(Text012);
            PostingDone := TRUE;
            CurrPage.CLOSE;
          END;
        END ELSE
          ERROR(Text002);
      END ELSE
        ERROR(Text003);
    END;

    LOCAL PROCEDURE CheckActionPerformed@1011() : Boolean;
    BEGIN
      IF ActionPerformed THEN
        EXIT(FALSE);
      IF (NOT (CalcType = CalcType::Direct) AND NOT OK AND NOT PostingDone) OR
         (ApplnType = ApplnType::"Applies-to Doc. No.")
      THEN
        EXIT(FALSE);
      EXIT(CalcType = CalcType::Direct);
    END;

    PROCEDURE SetAppliesToID@1031(AppliesToID2@1043 : Code[50]);
    BEGIN
      AppliesToID := AppliesToID2;
    END;

    LOCAL PROCEDURE ExchangeAmountsOnLedgerEntry@14(Type@1000 : 'Direct,GenJnlLine,PurchHeader';CurrencyCode@1001 : Code[10];VAR CalcVendLedgEntry@1002 : Record 25;PostingDate@1004 : Date);
    VAR
      CalculateCurrency@1003 : Boolean;
    BEGIN
      CalcVendLedgEntry.CALCFIELDS("Remaining Amount");

      IF Type = Type::Direct THEN
        CalculateCurrency := ApplyingVendLedgEntry."Entry No." <> 0
      ELSE
        CalculateCurrency := TRUE;

      IF (CurrencyCode <> CalcVendLedgEntry."Currency Code") AND CalculateCurrency THEN BEGIN
        CalcVendLedgEntry."Remaining Amount" :=
          CurrExchRate.ExchangeAmount(
            CalcVendLedgEntry."Remaining Amount",
            CalcVendLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
        CalcVendLedgEntry."Remaining Pmt. Disc. Possible" :=
          CurrExchRate.ExchangeAmount(
            CalcVendLedgEntry."Remaining Pmt. Disc. Possible",
            CalcVendLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
        CalcVendLedgEntry."Amount to Apply" :=
          CurrExchRate.ExchangeAmount(
            CalcVendLedgEntry."Amount to Apply",
            CalcVendLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
      END;
    END;

    BEGIN
    END.
  }
}

