OBJECT Page 9021787 Data import/export Wizard
{
  OBJECT-PROPERTIES
  {
    Date=13/07/16;
    Time=[ 1:50:47 PM];
    Version List=EC2016.6;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Data import/export Wizard;
               ENG=Data import/export Wizard];
    SourceTable=Table2000000028;
    PageType=List;
    OnOpenPage=BEGIN
                 FILTERGROUP(2);
                 SETFILTER("Table No.",'%1..%2',9021600,9021749);  //DOC EC2013.4.50
                 FILTERGROUP(0);
               END;

    OnAfterGetRecord=BEGIN
                       RecMarked := MARK;
                     END;

    ActionList=ACTIONS
    {
      { 1000000006;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000007;1 ;Action    ;
                      Name=Create XMLports;
                      CaptionML=[ENU=Create XMLports;
                                 ENG=Create XMLports];
                      OnAction=BEGIN
                                 IF CONFIRM('Do you wish to delete existing data prior to the import?',TRUE) THEN
                                   DeleteExistingFirstOnImport := TRUE
                                 ELSE
                                   DeleteExistingFirstOnImport := FALSE;

                                 //Original CreatePorts();
                                 ObjectFileName:=DataFolderName+'XMLport objects for data EXPORT.txt';
                                 //ImportOrExportText := '-E';
                                 CreateImportXML := FALSE;
                                 CreatePorts();

                                 ObjectFileName:=DataFolderName+'XMLport objects for data IMPORT.txt';
                                 //ImportOrExportText := '-I';
                                 CreateImportXML := TRUE;
                                 CreatePorts();

                                 MESSAGE('Export and Import XMLports created');
                               END;
                                }
      { 1000000008;1 ;Action    ;
                      Name=Export Data;
                      CaptionML=[ENU=Export Data;
                                 ENG=Export Data];
                      OnAction=VAR
                                 DoExport@1000000000 : Boolean;
                                 MarkSetting@1000000001 : Boolean;
                               BEGIN
                                 IF CONFIRM('Do you wish to archive existing files?',TRUE) THEN
                                   ArchiveExistingFiles := TRUE
                                 ELSE
                                   ArchiveExistingFiles := FALSE;
                                 IF CONFIRM('Do you wish to only export the Label data for this company?',TRUE) THEN
                                   LabelOnlyThis := TRUE
                                 ELSE
                                   LabelOnlyThis := FALSE;

                                 MarkSetting := MARKEDONLY;
                                 MARKEDONLY(TRUE);
                                 IF FINDFIRST THEN BEGIN
                                   //MQ 28/02/2011 - GW110228 -
                                   IF NOT CONFIRM('Do you want to export data?') THEN
                                     ERROR('Export abandonded.')
                                   ELSE
                                     DoExport := TRUE;
                                   //Original DoExport:=CONFIRM('Do you want to export data?\\Choose "No" to import data.',TRUE);
                                   //MQ 28/02/2011 - GW110228 +
                                   REPEAT
                                     XmlPortSingleTable(DoExport,"Table No.",'');
                                   UNTIL NEXT = 0;
                                   MARKEDONLY(MarkSetting);
                                   MESSAGE('XMLports have run');
                                 END ELSE BEGIN
                                   MARKEDONLY(MarkSetting);
                                   //MQ 28/02/2011 - GW110228 -
                                   IF CONFIRM('You did not mark any tables.\\Do you want to run for all files in data folder?',FALSE) THEN BEGIN
                                     ExportBasedOnFiles;
                                     MESSAGE('XMLports have run');
                                   END ELSE
                                   //MQ 28/02/2011 - GW110228 +
                                     ERROR('XMLports are only run for marked tables and you did not mark any.');
                                 END;
                               END;
                                }
      { 1000000009;1 ;Action    ;
                      Name=Import Data;
                      CaptionML=[ENU=Import Data;
                                 ENG=Import Data];
                      OnAction=VAR
                                 DoExport@1000000001 : Boolean;
                                 MarkSetting@1000000000 : Boolean;
                               BEGIN
                                 ArchiveExistingFiles := FALSE;
                                 ConfirmedOKtoDeleteCommonTable := FALSE;
                                 ConfirmedOKtoDelete := FALSE;

                                 MarkSetting := MARKEDONLY;
                                 MARKEDONLY(TRUE);
                                 IF FINDFIRST THEN BEGIN
                                   IF NOT CONFIRM('Do you want to import data?') THEN
                                     ERROR('Import abandonded.')
                                   ELSE
                                     DoExport := FALSE;
                                   //Original DoExport:=CONFIRM('Do you want to export data?\\Choose "No" to import data.',TRUE);
                                   REPEAT
                                     XmlPortSingleTable(DoExport,"Table No.",NewLabelCode);
                                   UNTIL NEXT = 0;
                                   MARKEDONLY(MarkSetting);
                                   MESSAGE('XMLports have run');
                                 END ELSE BEGIN
                                   MARKEDONLY(MarkSetting);
                                   IF CONFIRM('You did not mark any tables.\\Do you want to run for all files in data folder?',FALSE) THEN BEGIN
                                     ImportBasedOnFiles;
                                     MESSAGE('XMLports have run');
                                   END ELSE
                                     ERROR('XMLports are only run for marked tables and you did not mark any.');
                                 END;
                               END;
                                }
      { 1000000010;1 ;Action    ;
                      Name=Set Mark;
                      ShortCutKey=Ctrl+F1;
                      CaptionML=[ENU=Set Mark;
                                 ENG=Set Mark];
                      OnAction=BEGIN
                                 IF MARK THEN
                                   MARK(FALSE)
                                 ELSE
                                   MARK(TRUE);
                               END;
                                }
      { 1000000011;1 ;Action    ;
                      Name=Count Mark;
                      CaptionML=[ENU=Count Mark;
                                 ENG=Count Mark];
                      OnAction=VAR
                                 i@1000000000 : Integer;
                                 MarkSetting@1000000001 : Boolean;
                               BEGIN
                                 i := 0;
                                 MarkSetting := MARKEDONLY;
                                 MARKEDONLY(TRUE);
                                 IF FINDFIRST THEN BEGIN
                                   REPEAT
                                     i := i + 1;
                                   UNTIL NEXT = 0;
                                   MARKEDONLY(MarkSetting);
                                   MESSAGE('You marked %1',i);
                                 END ELSE BEGIN
                                   MARKEDONLY(MarkSetting);
                                   MESSAGE('You did not mark any.');
                                 END;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;0;Container;
                CaptionML=[ENU=Control1000000000;
                           ENG=Control1000000000];
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=Group;
                CaptionML=[ENU=Group;
                           ENG=Group];
                GroupType=Repeater }

    { 1000000002;2;Field  ;
                CaptionML=[ENU=Company Name;
                           ENG=Company Name];
                SourceExpr="Company Name" }

    { 1000000003;2;Field  ;
                CaptionML=[ENU=Table No.;
                           ENG=Table No.];
                SourceExpr="Table No.";
                Style=Standard;
                StyleExpr=RecMarked }

    { 1000000004;2;Field  ;
                CaptionML=[ENU=Table Name;
                           ENG=Table Name];
                SourceExpr="Table Name" }

    { 1000000005;2;Field  ;
                CaptionML=[ENU=No. of Records;
                           ENG=No. of Records];
                SourceExpr="No. of Records" }

  }
  CODE
  {
    VAR
      FieldIdFilter@1000000000 : Text[250];
      DataFolderName@1000000001 : Text[250];
      ObjectFileName@1000000002 : Text[250];
      ImportOrExportTextx@1000000003 : Text[2];
      ObjectName@1000000004 : Text[30];
      NewLabelCode@1000000005 : Code[10];
      CreateImportXML@1000000006 : Boolean;
      LabelCodeNeedsChanging@1000000007 : Boolean;
      ArchiveExistingFiles@1000000008 : Boolean;
      DeleteExistingFirstOnImport@1000000009 : Boolean;
      ConfirmedOKtoDelete@1000000010 : Boolean;
      ConfirmedOKtoDeleteCommonTable@1000000011 : Boolean;
      LabelOnlyThis@1000000012 : Boolean;
      FileName@1000000013 : Text[250];
      Object@1000000014 : Record 2000000001;
      ObjectRunOn@1000000015 : Record 2000000001;
      xpFuncs@1000000016 : Codeunit 9021676;
      Window@1000000017 : Dialog;
      RecMarked@1000000018 : Boolean;

    PROCEDURE CreateXmlPort@1000000001(VAR TextFile@1000000001 : File);
    VAR
      Field@1000000003 : Record 2000000041;
      SourceInfo@1000000000 : Text[250];
    BEGIN
      ObjectRunOn.GET(ObjectRunOn.Type::Table,'',"Table No.");

      //GW 101123 -
      //MQ 16/03/2011 - GW110316 ObjectName := COPYSTR("Table Name",1,28) + ImportOrExportText;
      ObjectName := "Table Name";

      //TextFile.WRITE('OBJECT XMLport ' + FORMAT("Table No.") + ' ' + "Table Name");
      TextFile.WRITE('OBJECT XMLport ' + FORMAT("Table No.") + ' ' + ObjectName);
      //GW 101123 +

      TextFile.WRITE('{');

      ////////////////////////////////////////////////////////
      //OBJECT-PROPERTIES
      ////////////////////////////////////////////////////////
      TextFile.WRITE('  OBJECT-PROPERTIES');
      TextFile.WRITE('  {');

      //MQ 15/03/2011 - GW110315 -
      //TextFile.WRITE('    Date=' + FORMAT(TODAY) + ';');
      //TextFile.WRITE('    Time=' + FORMAT(TIME) + ';');
      TextFile.WRITE('    Date=' + FORMAT(ObjectRunOn.Date) + ';');
      TextFile.WRITE('    Time=' + FORMAT(ObjectRunOn.Time) + ';');
      //MQ 15/03/2011 - GW110315 +

      //GW 101123 TextFile.WRITE('    Version List=EC2016.6;');
      IF CreateImportXML THEN BEGIN
        IF DeleteExistingFirstOnImport THEN
          TextFile.WRITE('    Version List=EC2013.4.00 DELETE/IMPORT;')
        ELSE
          TextFile.WRITE('    Version List=EC2013.4.00 IMPORT;');
      END ELSE
        TextFile.WRITE('    Version List=EC2013.4.00 EXPORT;');
      TextFile.WRITE('  }');

      TextFile.WRITE('  PROPERTIES');
      TextFile.WRITE('  {');
      //disable field validation...
      TextFile.WRITE('    DefaultFieldsValidation=No;');


      IF (CreateImportXML = TRUE) AND (DeleteExistingFirstOnImport = TRUE) THEN BEGIN
        TextFile.WRITE('    OnPreXMLport=BEGIN');
        TextFile.WRITE('                   InRec.RESET;');
        TextFile.WRITE('                   InRec.DELETEALL;');
        TextFile.WRITE('                 END;');
      END;

      TextFile.WRITE('  }');

      TextFile.WRITE('  ELEMENTS');
      TextFile.WRITE('  {');

      //create the root element...
      //GW 101123 TextFile.WRITE('  ' + CreateXmlPortElement('','root','Element','text','',''));
      TextFile.WRITE('  ' + CreateXmlPortElement('','root','Element','text','','') + ' }');

      //create the row element (using the table name)...
      SourceInfo:='SourceTable=Table'+FORMAT("Table No.");

      //GW 101123 -
      //Original TextFile.WRITE('  ' + CreateXmlPortElement('1',StripToText("Table Name"),'Element','Table','',SourceInfo));
      IF CreateImportXML THEN BEGIN
        //Look to see if a Label Code field
        IF NewLabelCode <> '' THEN BEGIN

          Field.RESET;
          Field.SETRANGE(Class,Field.Class::Normal);
          Field.SETRANGE(Field.Enabled,TRUE);
          Field.SETRANGE(Type,Field.Type::Code);
          Field.SETFILTER(Len,'%1',10);
          Field.SETRANGE(TableNo,"Table No.");
          Field.SETFILTER(FieldName,'%1','Label Code');
          IF Field.FINDFIRST THEN
            LabelCodeNeedsChanging := TRUE
          ELSE
            LabelCodeNeedsChanging := FALSE;
        END ELSE
          LabelCodeNeedsChanging := FALSE;
        TextFile.WRITE('  ' + CreateXmlPortElement('1',StripToText("Table Name"),'Element','Table','',SourceInfo));
        //write extra lines for the IMPORT
        TextFile.WRITE('                                                  Temporary=Yes;');
        TextFile.WRITE('                                                  Import::OnBeforeInsertRecord=BEGIN');
        TextFile.WRITE('                                                                                 InRec.INIT;');
        TextFile.WRITE('                                                                                 InRec := ' +
                       '"' + "Table Name" + '";');
        IF LabelCodeNeedsChanging THEN BEGIN
          //TextFile.WRITE('                                                                                 ' +
          //               'IF NewLabelCode <> '''' THEN');
          TextFile.WRITE('                                                                                 ' +
                         'InRec."Label Code" := ''' + NewLabelCode + ''';');
        END;
        TextFile.WRITE('                                                                                 IF InRec.INSERT THEN;');
        TextFile.WRITE('                                                                               END;');
        TextFile.WRITE('                                                                                }');
      END ELSE
        TextFile.WRITE('  ' + CreateXmlPortElement('1',StripToText("Table Name"),'Element','Table','',SourceInfo) + ' }');
      //GW 101123 +

      //create an element for each field we want to include...
      Field.RESET;  //GW 101124 added line
      Field.SETRANGE(Class,Field.Class::Normal);
      Field.SETRANGE(Field.Enabled,TRUE);
      IF FieldIdFilter <> '' THEN
        Field.SETFILTER("No.",FieldIdFilter);
      Field.SETFILTER(Type,'<>%1&<>%2&<>%3',Field.Type::BLOB,Field.Type::TableFilter,Field.Type::RecordID);
      Field.SETRANGE(TableNo,"Table No.");
      //GW 101124 IF Field.FINDFIRST THEN BEGIN
      IF Field.FIND('-') THEN BEGIN
        REPEAT
        SourceInfo:='SourceField='+"Table Name"+'::'+Field.FieldName;
        //GW 101123 TextFile.WRITE('    ' + CreateXmlPortElement('2',StripToText(Field.FieldName),'Element','Field','Text',SourceInfo));
        TextFile.WRITE('    ' + CreateXmlPortElement('2',StripToText(Field.FieldName),'Element','Field','Text',SourceInfo) + ' }');

        UNTIL Field.NEXT = 0;
      END;

      TextFile.WRITE('  }');


      ////////////////////////////////////////////////////////
      //EVENTS
      ////////////////////////////////////////////////////////
      TextFile.WRITE('  EVENTS');
      TextFile.WRITE('  {');
      TextFile.WRITE('  }');


      ////////////////////////////////////////////////////////
      //REQUEST-PAGE
      ////////////////////////////////////////////////////////
      TextFile.WRITE('  ');


      ////////////////////////////////////////////////////////
      //CODE
      ////////////////////////////////////////////////////////
      TextFile.WRITE('  CODE');
      TextFile.WRITE('  {');

      //GW 101123 -
      IF CreateImportXML THEN BEGIN
        TextFile.WRITE('    VAR');
        TextFile.WRITE('      InRec@1000000001 : Record ' + FORMAT("Table No.") + ';');
        TextFile.WRITE('');
      END;
      //GW 101123 +

      TextFile.WRITE('    BEGIN');
      //WriteOutXmlPortCode(TextFile,"Table No.");
      TextFile.WRITE('    END.');
      TextFile.WRITE('  }');


      ////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////

      TextFile.WRITE('}');

      TextFile.WRITE('');
    END;

    PROCEDURE CreatePorts@1000000006();
    VAR
      cuFileManagement@1000000004 : Codeunit 419;
      MarkSetting@1000000003 : Boolean;
      TextFile@1000000000 : File;
      TxtPath@1000000001 : Text[260];
      TxtL001@1000000002 : TextConst 'ENU=Save XMLport Text File;ENG=Save XMLport Text File';
      TxtL002@1000000005 : TextConst 'ENU=XMLports are only created on marked tables and you did not mark any.;ENG=XMLports are only created on marked tables and you did not mark any.';
    BEGIN
      MarkSetting := MARKEDONLY;
      MARKEDONLY(TRUE);
      IF FINDFIRST THEN BEGIN
        //DOC EC2013.4.00 TxtPath := CommonDlg.OpenFile('Save XMLport Text File',ObjectFileName,1,'',1);
        //cuFileManagement.OpenFileDialog(WindowTitle,DefaultFileName,FilterString)
        TxtPath:= cuFileManagement.SaveFileDialog(TxtL001,ObjectFileName,''); //DOC EC2013.4.00

        IF TxtPath = '' THEN BEGIN
          MARKEDONLY(MarkSetting);
          EXIT;
        END;
        TextFile.CREATE(TxtPath);
        TextFile.TEXTMODE := TRUE;
        REPEAT
          CreateXmlPort(TextFile);
        UNTIL NEXT = 0;
        TextFile.CLOSE;
        MARKEDONLY(MarkSetting);
        //GW 101124 moved MESSAGE('XMLport creation completed');
      END ELSE BEGIN
        MARKEDONLY(MarkSetting);
        ERROR(TxtL002);
      END;
    END;

    PROCEDURE CreateXmlPortElement@1000000002(IndentLevel@1000000006 : Text[2];NodeName@1000000000 : Text[100];NodeType@1000000001 : Text[30];SourceType@1000000002 : Text[30];DataType@1000000007 : Text[30];SourceInfo@1000000003 : Text[100]) ElementString : Text[1024];
    VAR
      DataTypeString@1000000008 : Text[30];
      NewGuid@1000000005 : Text[40];
      NodeInfoString@1000000004 : Text[250];
    BEGIN
      IF SourceInfo <> '' THEN
        NodeInfoString:=SourceInfo + ';';

      IF DataType<>'' THEN
        DataTypeString:='DataType='+DataType+';';

      ElementString := '{ ' +
                         '[' + FORMAT(CREATEGUID) +'];' +
                         PADSTR(IndentLevel,2,' ') + ';' +
                         //GW 101124 -
                         //PADSTR(NodeName,20,' ') + ';' +
                         PADSTR(NodeName,30,' ') + ';' +
                         //GW 101124 +
                         PADSTR(NodeType,8,' ') + ';' +
                         PADSTR(SourceType,8,' ') + ';' +
                         DataTypeString +
      //GW 101123 - if need to put in some code do not want the ' }' - added manually
      //                   NodeInfoString +
      //                   ' ' +
      //                  '}';
                         NodeInfoString;
      //GW 101123 +

      EXIT(ElementString);
    END;

    PROCEDURE StripToText@1000000003(InputString@1000000000 : Text[250]) OutputString : Text[250];
    BEGIN
      OutputString:=InputString;
      OutputString:=DELCHR(OutputString,'=',' ');
      OutputString:=DELCHR(OutputString,'=','.');
      OutputString:=DELCHR(OutputString,'=','-');
      OutputString:=DELCHR(OutputString,'=','%');
      OutputString:=DELCHR(OutputString,'=','/');
      OutputString:=DELCHR(OutputString,'=','\');
      OutputString:=DELCHR(OutputString,'=','(');
      OutputString:=DELCHR(OutputString,'=',')');
      EXIT(OutputString);
    END;

    PROCEDURE WriteOutXmlPortCode@1000000004(VAR TextFile@1000000000 : File;TableID@1000000001 : Integer);
    VAR
      Key@1000000002 : Record 2000000063;
    BEGIN
      CASE TableID OF

      END;
    END;

    PROCEDURE XmlPortSingleTable@1000000007(DoExport@1000000004 : Boolean;ObjectId@1000000000 : Integer;LabelCodeNew@1000000005 : Code[10]);
    VAR
      TextL001@1000000001 : TextConst 'ENU=Table %1 does not exist.;ENG=Table %1 does not exist.';
    BEGIN
      IF NOT Object.GET(Object.Type::Table,'',ObjectId) THEN
        ERROR(TextL001,ObjectId);

      FileName:=DataFolderName+Object.Name+'.xml';

      //MQ 28/02/2011 - GW110228 -
      IF (ArchiveExistingFiles = TRUE) AND
         (DoExport = TRUE) THEN
        IF EXISTS(FileName) THEN
          RenameFile(FileName,Object.Name+'.xml');
      //MQ 28/02/2011 - GW110228 +

      CheckXMLPort(DoExport,ObjectId);
      xpFuncs.RunXMLport(DoExport,FileName,ObjectId,'',ObjectId,LabelOnlyThis);
    END;

    PROCEDURE ImportBasedOnFiles@1190000005();
    VAR
      TxtL001@1000000000 : TextConst 'ENU=Importing %1;ENG=Importing %1';
    BEGIN
      Window.OPEN(STRSUBSTNO(TxtL001, PADSTR('#1', 20, '#')));  //DOC EC2009.2.72
      Object.RESET;
      Object.SETRANGE(Type,Object.Type::Table);
      Object.SETFILTER(ID,'%1..%2',9021600,9021749); //DOC EC2013.4.50

      IF Object.FIND('-') THEN
      REPEAT
        FileName:=DataFolderName+Object.Name+'.xml';
        IF EXISTS(FileName) THEN BEGIN
          Window.UPDATE(1,Object.ID); //DOC EC2009.2.72
          CheckXMLPort(FALSE,Object.ID);
          xpFuncs.RunXMLport(FALSE,FileName,Object.ID,'',Object.ID,LabelOnlyThis);
          COMMIT; //DOC EC2009.2.72
        END;
      UNTIL Object.NEXT = 0;

      Window.CLOSE; //DOC EC2009.2.72
    END;

    PROCEDURE ExportBasedOnFiles@1190000006();
    BEGIN
      Object.RESET;
      Object.SETRANGE(Type,Object.Type::Table);
      //DOC EC2013.4.5 Object.SETFILTER(ID,'%1..%2',9021109,9022518);
      Object.SETFILTER(ID,'%1..%2',9021600,9021749); //DOC EC2013.4.50

      IF Object.FIND('-') THEN
      REPEAT
        FileName:=DataFolderName+Object.Name+'.xml';
        IF EXISTS(FileName) THEN BEGIN
          IF ArchiveExistingFiles THEN
            RenameFile(FileName,Object.Name+'.xml');
          CheckXMLPort(TRUE,Object.ID);
          xpFuncs.RunXMLport(TRUE,FileName,Object.ID,'',Object.ID,LabelOnlyThis);
        END;
      UNTIL Object.NEXT = 0;
    END;

    PROCEDURE RenameFile@1190000007(FullOriginalFile@1190000005 : Text[250];OriginalFile@1190000012 : Text[250]);
    VAR
      DateTimeString@1190000006 : Text[250];
      TextDay@1190000007 : Text[30];
      TextMonth@1190000008 : Text[30];
      DateStamp@1190000009 : Date;
      TimeStamp@1190000010 : Time;
      RenamedFile@1190000011 : Text[250];
    BEGIN
      GETSTAMP(FullOriginalFile,DateStamp,TimeStamp);
      DateTimeString := FORMAT(TimeStamp);
      DateTimeString := DELSTR(DELSTR(DateTimeString,3,1),5);
      TextDay := FORMAT(DATE2DMY(DateStamp,1));
      IF STRLEN(TextDay) = 1 THEN
        TextDay := FORMAT(0) + TextDay;
      TextMonth := FORMAT(DATE2DMY(DateStamp,2));
      IF STRLEN(TextMonth) = 1 THEN
        TextMonth := FORMAT(0) + TextMonth;
      DateTimeString := FORMAT(DATE2DMY(DateStamp,3)) + TextMonth + TextDay + ' ' + DateTimeString;
      RenamedFile := DataFolderName + DateTimeString + ' ' + OriginalFile;

      FILE.RENAME(FullOriginalFile,RenamedFile);
    END;

    PROCEDURE CheckXMLPort@1000000000(DoExport@1000000000 : Boolean;ObjectId@1000000001 : Integer);
    VAR
      XMLportObject@1000000002 : Record 2000000001;
      TabInfo@1000000003 : Record 2000000028;
      DeleteFound@1000000004 : Boolean;
      TxtL001@1000000005 : TextConst 'ENU=XMLport %1 must be compiled first.;ENG=XMLport %1 must be compiled first.';
      TxtL002@1000000006 : TextConst 'ENU=The XMLport Object Date/Time does not agree with the table Date/Time for %1.\\Table   %2 date/time: ''''%3'''' ''''%4''''\\XMLport %5 date/time: ''''%6'''' ''''%7''''\\Dates are different: %8\\Times are different: %9;ENG=The XMLport Object Date/Time does not agree with the table Date/Time for %1.\\Table   %2 date/time: ''''%3'''' ''''%4''''\\XMLport %5 date/time: ''''%6'''' ''''%7''''\\Dates are different: %8\\Times are different: %9';
      TxtL003@1000000007 : TextConst 'ENU=You are running an export but the XMLport %1 is not an export XMLport.;ENG=You are running an export but the XMLport %1 is not an export XMLport.';
      TxtL004@1000000008 : TextConst 'ENU=The XMLport %1 has delete in the version which is not allowed for an export XMLport.;ENG=The XMLport %1 has delete in the version which is not allowed for an export XMLport.';
      TxtL005@1000000009 : TextConst 'ENU=You are running an import but the XMLport %1 is not an import XMLport.;ENG=You are running an import but the XMLport %1 is not an import XMLport.';
      TxtL006@1000000010 : TextConst 'ENU=The XMLport %1 will first delete the existing data.\\Is this correct?;ENG=The XMLport %1 will first delete the existing data.\\Is this correct?';
      TxtL007@1000000011 : TextConst 'ENU=Import Abandonned.;ENG=Import Abandonned.';
      TxtL008@1000000012 : TextConst 'ENU=EXPORT;ENG=EXPORT';
      TxtL009@1000000013 : TextConst 'ENU=IMPORT;ENG=IMPORT';
      TxtL010@1000000014 : TextConst 'ENU=DANGER: The XMLport %1 will first delete the existing data which is shared across all companies.\\This could be a DISASTER.\\Is this correct?;ENG=DANGER: The XMLport %1 will first delete the existing data which is shared across all companies.\\This could be a DISASTER.\\Is this correct?';
    BEGIN
      //MQ 15/03/2011 - GW110315 all new
      XMLportObject.GET(XMLportObject.Type::XMLport,'',ObjectId);

      //Check XML is compilled
      IF XMLportObject.Compiled = FALSE THEN
        ERROR(TxtL001,ObjectId);

      IF STRPOS(XMLportObject."Version List",'DELETE') = 0 THEN
        DeleteFound := FALSE
      ELSE
        DeleteFound := TRUE;

      ObjectRunOn.GET(ObjectRunOn.Type::Table,'',ObjectId);
      IF (FORMAT(XMLportObject.Date) <> FORMAT(ObjectRunOn.Date)) OR
         (FORMAT(XMLportObject.Time) <> FORMAT(ObjectRunOn.Time)) THEN
        ERROR(TxtL002, ObjectId, ObjectRunOn.Name, ObjectRunOn.Date, ObjectRunOn.Time, XMLportObject.Name, XMLportObject.Date, XMLportObject.Time,
              (FORMAT(XMLportObject.Date) <> FORMAT(ObjectRunOn.Date)),(FORMAT(XMLportObject.Time) <> FORMAT(ObjectRunOn.Time)));

      //Check XML is of the right type (Export or Import)
      IF DoExport THEN BEGIN
        IF STRPOS(XMLportObject."Version List",TxtL008) = 0 THEN
          ERROR(TxtL003,ObjectId);
        IF DeleteFound THEN
          ERROR(TxtL004,ObjectId);
      END ELSE BEGIN
        IF STRPOS(XMLportObject."Version List",TxtL009) = 0 THEN
          ERROR(TxtL005,ObjectId);
        IF DeleteFound THEN BEGIN
          //Check if Import is delete, that we do want to delete first
          IF ConfirmedOKtoDelete = FALSE THEN BEGIN
            IF NOT CONFIRM(TxtL006,FALSE,ObjectId) THEN
              ERROR(TxtL007)
            ELSE
              ConfirmedOKtoDelete := TRUE;
          END;
          //Special check for data common to all tables.
          IF ConfirmedOKtoDeleteCommonTable = FALSE THEN BEGIN
            IF TabInfo.GET('',ObjectId) THEN BEGIN
              IF NOT CONFIRM(TxtL010,FALSE,ObjectId) THEN
                ERROR(TxtL007)
              ELSE
                ConfirmedOKtoDeleteCommonTable := TRUE;
            END;
          END;
        END;
      END;
    END;

    BEGIN
    {
      //DOC EC2013.4.5 MQ 16/12/2013 - GW131216 Upgrade for Object renumbering
      //DOC EC2016.6   JH 05/10/2016 - ECom 2016
    }
    END.
  }
}

