OBJECT Codeunit 5750 Whse.-Create Source Document
{
  OBJECT-PROPERTIES
  {
    Date=05/10/16;
    Time=[ 1:31:32 PM];
    Version List=NAVW17.10,NS2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WhseMgt@1002 : Codeunit 5775;
      "--- NS.M ---"@1000000000 : Integer;
      LastWhseReceiptLine@1000000001 : Record 7317;
      ConsignmentLine@1000000002 : Record 9062448;
      Consignment@1000000003 : Boolean;

    PROCEDURE FromSalesLine2ShptLine@9(WhseShptHeader@1000 : Record 7320;SalesLine@1001 : Record 37) : Boolean;
    VAR
      AsmHeader@1004 : Record 900;
      TotalOutstandingWhseShptQty@1005 : Decimal;
      TotalOutstandingWhseShptQtyBase@1003 : Decimal;
      ATOWhseShptLineQty@1006 : Decimal;
      ATOWhseShptLineQtyBase@1002 : Decimal;
    BEGIN
      SalesLine.CALCFIELDS("Whse. Outstanding Qty.","ATO Whse. Outstanding Qty.",
        "Whse. Outstanding Qty. (Base)","ATO Whse. Outstd. Qty. (Base)");
      TotalOutstandingWhseShptQty := ABS(SalesLine."Outstanding Quantity") - SalesLine."Whse. Outstanding Qty.";
      TotalOutstandingWhseShptQtyBase := ABS(SalesLine."Outstanding Qty. (Base)") - SalesLine."Whse. Outstanding Qty. (Base)";
      IF SalesLine.AsmToOrderExists(AsmHeader) THEN BEGIN
        ATOWhseShptLineQty := AsmHeader."Remaining Quantity" - SalesLine."ATO Whse. Outstanding Qty.";
        ATOWhseShptLineQtyBase := AsmHeader."Remaining Quantity (Base)" - SalesLine."ATO Whse. Outstd. Qty. (Base)";
        IF ATOWhseShptLineQtyBase > 0 THEN BEGIN
          IF NOT CreateShptLineFromSalesLine(WhseShptHeader,SalesLine,ATOWhseShptLineQty,ATOWhseShptLineQtyBase,TRUE) THEN
            EXIT(FALSE);
          TotalOutstandingWhseShptQty -= ATOWhseShptLineQty;
          TotalOutstandingWhseShptQtyBase -= ATOWhseShptLineQtyBase;
        END;
      END;
      IF TotalOutstandingWhseShptQtyBase > 0 THEN
        EXIT(CreateShptLineFromSalesLine(WhseShptHeader,SalesLine,TotalOutstandingWhseShptQty,TotalOutstandingWhseShptQtyBase,FALSE));
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateShptLineFromSalesLine@11(WhseShptHeader@1000 : Record 7320;SalesLine@1001 : Record 37;WhseShptLineQty@1004 : Decimal;WhseShptLineQtyBase@1006 : Decimal;AssembleToOrder@1005 : Boolean) : Boolean;
    VAR
      WhseShptLine@1002 : Record 7321;
      SalesHeader@1003 : Record 36;
    BEGIN
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");

      WITH WhseShptLine DO BEGIN
        RESET;
        "No." := WhseShptHeader."No.";
        SETRANGE("No.","No.");
        LOCKTABLE;
        IF FINDLAST THEN;

        INIT;
        SetIgnoreErrors;
        "Line No." := "Line No." + 10000;
        "Source Type" := DATABASE::"Sales Line";
        "Source Subtype" := SalesLine."Document Type";
        "Source No." := SalesLine."Document No.";
        "Source Line No." := SalesLine."Line No.";
        "Source Document" := WhseMgt.GetSourceDocument("Source Type","Source Subtype");
        "Location Code" := SalesLine."Location Code";
        "VIP Order" := SalesHeader.VIP; //DOC NS2015.1
        "Item No." := SalesLine."No.";
        "Variant Code" := SalesLine."Variant Code";
        SalesLine.TESTFIELD("Unit of Measure Code");
        "Unit of Measure Code" := SalesLine."Unit of Measure Code";
        "Qty. per Unit of Measure" := SalesLine."Qty. per Unit of Measure";
        Description := SalesLine.Description;
        "Description 2" := SalesLine."Description 2";
        SetQtysOnShptLine(WhseShptLine,WhseShptLineQty,WhseShptLineQtyBase);
        "Assemble to Order" := AssembleToOrder;
        IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN
          "Due Date" := SalesLine."Planned Shipment Date";
        IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN
          "Due Date" := WORKDATE;
        IF WhseShptHeader."Shipment Date" = 0D THEN
          "Shipment Date" := SalesLine."Shipment Date"
        ELSE
          "Shipment Date" := WhseShptHeader."Shipment Date";
        "Destination Type" := "Destination Type"::Customer;
        "Destination No." := SalesLine."Sell-to Customer No.";
        "Shipping Advice" := SalesHeader."Shipping Advice";
        IF "Location Code" = WhseShptHeader."Location Code" THEN
          "Bin Code" := WhseShptHeader."Bin Code";
        IF "Bin Code" = '' THEN
          "Bin Code" := SalesLine."Bin Code";
        UpdateShptLine(WhseShptLine,WhseShptHeader);
        CreateShptLine(WhseShptLine);
        EXIT(NOT HasErrorOccured);
      END;
    END;

    PROCEDURE SalesLine2ReceiptLine@2(WhseReceiptHeader@1000 : Record 7316;SalesLine@1001 : Record 37) : Boolean;
    VAR
      WhseReceiptLine@1002 : Record 7317;
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        RESET;
        "No." := WhseReceiptHeader."No.";
        SETRANGE("No.","No.");
        LOCKTABLE;
        IF FINDLAST THEN;

        INIT;
        SetIgnoreErrors;
        "Line No." := "Line No." + 10000;
        "Source Type" := DATABASE::"Sales Line";
        "Source Subtype" := SalesLine."Document Type";
        "Source No." := SalesLine."Document No.";
        "Source Line No." := SalesLine."Line No.";
        "Source Document" := WhseMgt.GetSourceDocument("Source Type","Source Subtype");
        "Location Code" := SalesLine."Location Code";
        "Item No." := SalesLine."No.";
        "Variant Code" := SalesLine."Variant Code";
        SalesLine.TESTFIELD("Unit of Measure Code");
        "Unit of Measure Code" := SalesLine."Unit of Measure Code";
        "Qty. per Unit of Measure" := SalesLine."Qty. per Unit of Measure";
        Description := SalesLine.Description;
        "Description 2" := SalesLine."Description 2";
        CASE SalesLine."Document Type" OF
          SalesLine."Document Type"::Order:
            BEGIN
              VALIDATE("Qty. Received",ABS(SalesLine."Quantity Shipped"));
              "Due Date" := SalesLine."Planned Shipment Date";
            END;
          SalesLine."Document Type"::"Return Order":
            BEGIN
              VALIDATE("Qty. Received",ABS(SalesLine."Return Qty. Received"));
              "Due Date" := WORKDATE;
            END;
        END;
        SetQtysOnRcptLine(WhseReceiptLine,ABS(SalesLine.Quantity),ABS(SalesLine."Quantity (Base)"));
        "Starting Date" := SalesLine."Shipment Date";
        IF "Location Code" = WhseReceiptHeader."Location Code" THEN
          "Bin Code" := WhseReceiptHeader."Bin Code";
        IF "Bin Code" = '' THEN
          "Bin Code" := SalesLine."Bin Code";
        UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
        CreateReceiptLine(WhseReceiptLine);
        EXIT(NOT HasErrorOccured);
      END;
    END;

    PROCEDURE FromServiceLine2ShptLine@6(WhseShptHeader@1000 : Record 7320;ServiceLine@1001 : Record 5902) : Boolean;
    VAR
      WhseShptLine@1002 : Record 7321;
      ServiceHeader@1003 : Record 5900;
    BEGIN
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      WITH WhseShptLine DO BEGIN
        RESET;
        "No." := WhseShptHeader."No.";
        SETRANGE("No.","No.");
        LOCKTABLE;
        IF FINDLAST THEN;

        INIT;
        SetIgnoreErrors;
        "Line No." := "Line No." + 10000;
        "Source Type" := DATABASE::"Service Line";
        "Source Subtype" := ServiceLine."Document Type";
        "Source No." := ServiceLine."Document No.";
        "Source Line No." := ServiceLine."Line No.";
        "Source Document" := WhseMgt.GetSourceDocument("Source Type","Source Subtype");
        "Location Code" := ServiceLine."Location Code";
        "Item No." := ServiceLine."No.";
        "Variant Code" := ServiceLine."Variant Code";
        ServiceLine.TESTFIELD("Unit of Measure Code");
        "Unit of Measure Code" := ServiceLine."Unit of Measure Code";
        "Qty. per Unit of Measure" := ServiceLine."Qty. per Unit of Measure";
        Description := ServiceLine.Description;
        "Description 2" := ServiceLine."Description 2";
        SetQtysOnShptLine(WhseShptLine,ABS(ServiceLine."Outstanding Quantity"),ABS(ServiceLine."Outstanding Qty. (Base)"));
        IF ServiceLine."Document Type" = ServiceLine."Document Type"::Order THEN
          "Due Date" := ServiceLine.GetDueDate;
        IF WhseShptHeader."Shipment Date" = 0D THEN
          "Shipment Date" := ServiceLine.GetShipmentDate
        ELSE
          "Shipment Date" := WhseShptHeader."Shipment Date";
        "Destination Type" := "Destination Type"::Customer;
        "Destination No." := ServiceLine."Bill-to Customer No.";
        "Shipping Advice" := ServiceHeader."Shipping Advice";
        IF "Location Code" = WhseShptHeader."Location Code" THEN
          "Bin Code" := WhseShptHeader."Bin Code";
        IF "Bin Code" = '' THEN
          "Bin Code" := ServiceLine."Bin Code";
        UpdateShptLine(WhseShptLine,WhseShptHeader);
        CreateShptLine(WhseShptLine);
        EXIT(NOT HasErrorOccured);
      END;
    END;

    PROCEDURE FromPurchLine2ShptLine@12(WhseShptHeader@1000 : Record 7320;PurchLine@1001 : Record 39) : Boolean;
    VAR
      WhseShptLine@1002 : Record 7321;
    BEGIN
      WITH WhseShptLine DO BEGIN
        RESET;
        "No." := WhseShptHeader."No.";
        SETRANGE("No.","No.");
        LOCKTABLE;
        IF FINDLAST THEN;

        INIT;
        SetIgnoreErrors;
        "Line No." := "Line No." + 10000;
        "Source Type" := DATABASE::"Purchase Line";
        "Source Subtype" := PurchLine."Document Type";
        "Source No." := PurchLine."Document No.";
        "Source Line No." := PurchLine."Line No.";
        "Source Document" := WhseMgt.GetSourceDocument("Source Type","Source Subtype");
        "Location Code" := PurchLine."Location Code";
        "Item No." := PurchLine."No.";
        "Variant Code" := PurchLine."Variant Code";
        PurchLine.TESTFIELD("Unit of Measure Code");
        "Unit of Measure Code" := PurchLine."Unit of Measure Code";
        "Qty. per Unit of Measure" := PurchLine."Qty. per Unit of Measure";
        Description := PurchLine.Description;
        "Description 2" := PurchLine."Description 2";
        SetQtysOnShptLine(WhseShptLine,ABS(PurchLine."Outstanding Quantity"),ABS(PurchLine."Outstanding Qty. (Base)"));
        IF PurchLine."Document Type" = PurchLine."Document Type"::Order THEN
          "Due Date" := PurchLine."Expected Receipt Date";
        IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN
          "Due Date" := WORKDATE;
        IF WhseShptHeader."Shipment Date" = 0D THEN
          "Shipment Date" := PurchLine."Planned Receipt Date"
        ELSE
          "Shipment Date" := WhseShptHeader."Shipment Date";
        "Destination Type" := "Destination Type"::Vendor;
        "Destination No." := PurchLine."Buy-from Vendor No.";
        IF "Location Code" = WhseShptHeader."Location Code" THEN
          "Bin Code" := WhseShptHeader."Bin Code";
        IF "Bin Code" = '' THEN
          "Bin Code" := PurchLine."Bin Code";
        UpdateShptLine(WhseShptLine,WhseShptHeader);
        CreateShptLine(WhseShptLine);
        EXIT(NOT HasErrorOccured);
      END;
    END;

    PROCEDURE PurchLine2ReceiptLine@4(WhseReceiptHeader@1000 : Record 7316;PurchLine@1001 : Record 39) : Boolean;
    VAR
      WhseReceiptLine@1002 : Record 7317;
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        RESET;
        "No." := WhseReceiptHeader."No.";
        SETRANGE("No.","No.");
        LOCKTABLE;
        IF FINDLAST THEN;

        INIT;
        SetIgnoreErrors;
        "Line No." := "Line No." + 10000;
        "Source Type" := DATABASE::"Purchase Line";
        "Source Subtype" := PurchLine."Document Type";
        "Source No." := PurchLine."Document No.";
        "Source Line No." := PurchLine."Line No.";
        "Source Document" := WhseMgt.GetSourceDocument("Source Type","Source Subtype");
        "Location Code" := PurchLine."Location Code";
        "Item No." := PurchLine."No.";
        "Variant Code" := PurchLine."Variant Code";
        PurchLine.TESTFIELD("Unit of Measure Code");
        "Unit of Measure Code" := PurchLine."Unit of Measure Code";
        "Qty. per Unit of Measure" := PurchLine."Qty. per Unit of Measure";
        Description := PurchLine.Description;
        "Description 2" := PurchLine."Description 2";
        CASE PurchLine."Document Type" OF
          PurchLine."Document Type"::Order:
            BEGIN
              //DOC NS2015.1 >>
              //VALIDATE("Qty. Received",ABS(PurchLine."Quantity Received"));
              IF ( NOT (Consignment)) THEN
                VALIDATE("Qty. Received",ABS(PurchLine."Quantity Received"));
              //DOC NS2015.1 <<
              "Due Date" := PurchLine."Expected Receipt Date";
            END;
          PurchLine."Document Type"::"Return Order":
            BEGIN
              VALIDATE("Qty. Received",ABS(PurchLine."Return Qty. Shipped"));
              "Due Date" := WORKDATE;
            END;
        END;
        //DOC NS2015.1 >>
        IF (Consignment) THEN BEGIN
          "Consignment No." := ConsignmentLine."Consignment No.";
          "Consignment Line No." := ConsignmentLine."Line No.";
          SetQtysOnRcptLine(WhseReceiptLine,ConsignmentLine.Quantity,ConsignmentLine."Quantity (Base)");
        END ELSE
        //DOC NS2015.1 <<
        SetQtysOnRcptLine(WhseReceiptLine,ABS(PurchLine.Quantity),ABS(PurchLine."Quantity (Base)"));
        "Starting Date" := PurchLine."Planned Receipt Date";
        IF "Location Code" = WhseReceiptHeader."Location Code" THEN
          "Bin Code" := WhseReceiptHeader."Bin Code";
        IF "Bin Code" = '' THEN
          "Bin Code" := PurchLine."Bin Code";
        //DOC NS2015.1 >>
        IF (Consignment) THEN
          "Store Allocation Code" := ConsignmentLine."Store Allocation Code"
        ELSE
          "Store Allocation Code" := PurchLine."Store Allocation Code";
        //DOC NS2015.1 <<
        UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
        CreateReceiptLine(WhseReceiptLine);
        //DOC NS2015.1 >>
        PostUpdateReceiptLine(WhseReceiptLine);
        UpdateQualityInspInReceiptLine(WhseReceiptLine);
        LastWhseReceiptLine := WhseReceiptLine;
        //DOC NS2015.1 <<
        EXIT(NOT HasErrorOccured);
      END;
    END;

    PROCEDURE FromTransLine2ShptLine@13(WhseShptHeader@1000 : Record 7320;TransLine@1001 : Record 5741) : Boolean;
    VAR
      WhseShptLine@1003 : Record 7321;
      TransHeader@1004 : Record 5740;
    BEGIN
      WITH WhseShptLine DO BEGIN
        RESET;
        "No." := WhseShptHeader."No.";
        SETRANGE("No.","No.");
        LOCKTABLE;
        IF FINDLAST THEN;

        INIT;
        SetIgnoreErrors;
        "Line No." := "Line No." + 10000;
        "Source Type" := DATABASE::"Transfer Line";
        "Source No." := TransLine."Document No.";
        "Source Line No." := TransLine."Line No.";
        "Source Subtype" := 0;
        "Source Document" := WhseMgt.GetSourceDocument("Source Type","Source Subtype");
        "Item No." := TransLine."Item No.";
        "Variant Code" := TransLine."Variant Code";
        TransLine.TESTFIELD("Unit of Measure Code");
        "Unit of Measure Code" := TransLine."Unit of Measure Code";
        "Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
        Description := TransLine.Description;
        "Description 2" := TransLine."Description 2";
        "Location Code" := TransLine."Transfer-from Code";
        SetQtysOnShptLine(WhseShptLine,TransLine."Outstanding Quantity",TransLine."Outstanding Qty. (Base)");
        "Due Date" := TransLine."Shipment Date";
        IF WhseShptHeader."Shipment Date" = 0D THEN
          "Shipment Date" := WORKDATE
        ELSE
          "Shipment Date" := WhseShptHeader."Shipment Date";
        "Destination Type" := "Destination Type"::Location;
        "Destination No." := TransLine."Transfer-to Code";
        IF TransHeader.GET(TransLine."Document No.") THEN
          "Shipping Advice" := TransHeader."Shipping Advice";
        IF "Location Code" = WhseShptHeader."Location Code" THEN
          "Bin Code" := WhseShptHeader."Bin Code";
        IF "Bin Code" = '' THEN
          "Bin Code" := TransLine."Transfer-from Bin Code";
        UpdateShptLine(WhseShptLine,WhseShptHeader);
        CreateShptLine(WhseShptLine);
        EXIT(NOT HasErrorOccured);
      END;
    END;

    PROCEDURE TransLine2ReceiptLine@5(WhseReceiptHeader@1000 : Record 7316;TransLine@1001 : Record 5741) : Boolean;
    VAR
      WhseReceiptLine@1003 : Record 7317;
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        RESET;
        "No." := WhseReceiptHeader."No.";
        SETRANGE("No.","No.");
        LOCKTABLE;
        IF FINDLAST THEN;

        INIT;
        SetIgnoreErrors;
        "Line No." := "Line No." + 10000;
        "Source Type" := DATABASE::"Transfer Line";
        "Source No." := TransLine."Document No.";
        "Source Line No." := TransLine."Line No.";
        "Source Subtype" := 1;
        "Source Document" := WhseMgt.GetSourceDocument("Source Type","Source Subtype");
        "Item No." := TransLine."Item No.";
        "Variant Code" := TransLine."Variant Code";
        TransLine.TESTFIELD("Unit of Measure Code");
        "Unit of Measure Code" := TransLine."Unit of Measure Code";
        "Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
        Description := TransLine.Description;
        "Description 2" := TransLine."Description 2";
        "Location Code" := TransLine."Transfer-to Code";
        VALIDATE("Qty. Received",TransLine."Quantity Received");
        SetQtysOnRcptLine(WhseReceiptLine,TransLine."Quantity Received" + TransLine."Qty. in Transit",
          TransLine."Qty. Received (Base)" + TransLine."Qty. in Transit (Base)");
        "Due Date" := TransLine."Receipt Date";
        "Starting Date" := WORKDATE;
        IF "Location Code" = WhseReceiptHeader."Location Code" THEN
          "Bin Code" := WhseReceiptHeader."Bin Code";
        IF "Bin Code" = '' THEN
          "Bin Code" := TransLine."Transfer-To Bin Code";
        UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
        CreateReceiptLine(WhseReceiptLine);
        LastWhseReceiptLine := WhseReceiptLine; //DOC NS2015.1
        EXIT(NOT HasErrorOccured);
      END;
    END;

    LOCAL PROCEDURE CreateShptLine@3(VAR WhseShptLine@1001 : Record 7321);
    VAR
      Item@1002 : Record 27;
      WhseWkshLine@1000 : Record 7326;
      ATOSalesLine@1004 : Record 37;
      AsmHeader@1008 : Record 900;
      AsmLineMgt@1009 : Codeunit 905;
      ItemTrackingMgt@1005 : Codeunit 6500;
      WhseSNRequired@1006 : Boolean;
      WhseLNRequired@1007 : Boolean;
    BEGIN
      WITH WhseShptLine DO BEGIN
        Item."No." := "Item No.";
        Item.ItemSKUGet(Item,"Location Code","Variant Code");
        "Shelf No." := Item."Shelf No.";
        INSERT;
        //DOC NS2015.1 >>
        VALIDATE("Location Code");
        MODIFY;
        //DOC NS2015.1 <<
        IF "Assemble to Order" THEN BEGIN
          TESTFIELD("Source Type",DATABASE::"Sales Line");
          ATOSalesLine.GET("Source Subtype","Source No.","Source Line No.");
          ATOSalesLine.AsmToOrderExists(AsmHeader);
          AsmLineMgt.CreateWhseItemTrkgForAsmLines(AsmHeader);
        END ELSE BEGIN
          ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",WhseSNRequired,WhseLNRequired,FALSE);
          IF WhseSNRequired OR WhseLNRequired THEN
            ItemTrackingMgt.InitItemTrkgForTempWkshLine(
              WhseWkshLine."Whse. Document Type"::Shipment,"No.",
              "Line No.","Source Type",
              "Source Subtype","Source No.",
              "Source Line No.",0);
        END;
      END;
    END;

    LOCAL PROCEDURE SetQtysOnShptLine@10(VAR WarehouseShipmentLine@1002 : Record 7321;Qty@1000 : Decimal;QtyBase@1001 : Decimal);
    VAR
      Location@1003 : Record 14;
    BEGIN
      WITH WarehouseShipmentLine DO BEGIN
        Quantity := Qty;
        "Qty. (Base)" := QtyBase;
        InitOutstandingQtys;
        CheckSourceDocLineQty;
        IF Location.GET("Location Code") THEN
          IF Location."Directed Put-away and Pick" THEN
            CheckBin(0,0);
      END;
    END;

    LOCAL PROCEDURE CreateReceiptLine@7(VAR WhseReceiptLine@1001 : Record 7317);
    VAR
      Item@1002 : Record 27;
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        Item."No." := "Item No.";
        Item.ItemSKUGet(Item,"Location Code","Variant Code");
        "Shelf No." := Item."Shelf No.";
        Status := GetLineStatus;
        INSERT;
        //DOC NS2015.1 >>
        VALIDATE("Location Code");
        MODIFY;
        //DOC NS2015.1 <<
      END;
    END;

    LOCAL PROCEDURE SetQtysOnRcptLine@21(VAR WarehouseReceiptLine@1002 : Record 7317;Qty@1001 : Decimal;QtyBase@1000 : Decimal);
    BEGIN
      WITH WarehouseReceiptLine DO BEGIN
        Quantity := Qty;
        "Qty. (Base)" := QtyBase;
        InitOutstandingQtys;
      END;
    END;

    LOCAL PROCEDURE UpdateShptLine@1(VAR WhseShptLine@1001 : Record 7321;WhseShptHeader@1000 : Record 7320);
    BEGIN
      WITH WhseShptLine DO BEGIN
        IF WhseShptHeader."Zone Code" <> '' THEN
          VALIDATE("Zone Code",WhseShptHeader."Zone Code");
        IF WhseShptHeader."Bin Code" <> '' THEN
          VALIDATE("Bin Code",WhseShptHeader."Bin Code");
      END;
    END;

    LOCAL PROCEDURE UpdateReceiptLine@8(VAR WhseReceiptLine@1001 : Record 7317;WhseReceiptHeader@1000 : Record 7316);
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        IF WhseReceiptHeader."Zone Code" <> '' THEN
          VALIDATE("Zone Code",WhseReceiptHeader."Zone Code");
        IF WhseReceiptHeader."Bin Code" <> '' THEN
          VALIDATE("Bin Code",WhseReceiptHeader."Bin Code");
        IF WhseReceiptHeader."Cross-Dock Zone Code" <> '' THEN
          VALIDATE("Cross-Dock Zone Code",WhseReceiptHeader."Cross-Dock Zone Code");
        IF WhseReceiptHeader."Cross-Dock Bin Code" <> '' THEN
          VALIDATE("Cross-Dock Bin Code",WhseReceiptHeader."Cross-Dock Bin Code");
      END;
    END;

    PROCEDURE CheckIfFromSalesLine2ShptLine@19(SalesLine@1001 : Record 37) : Boolean;
    BEGIN
      SalesLine.CALCFIELDS("Whse. Outstanding Qty. (Base)");
      IF ABS(SalesLine."Outstanding Qty. (Base)") <= ABS(SalesLine."Whse. Outstanding Qty. (Base)") THEN
        EXIT;
      EXIT(TRUE);
    END;

    PROCEDURE CheckIfFromServiceLine2ShptLin@20(ServiceLine@1000 : Record 5902) : Boolean;
    BEGIN
      ServiceLine.CALCFIELDS("Whse. Outstanding Qty. (Base)");
      EXIT(ABS(ServiceLine."Outstanding Qty. (Base)") > ABS(ServiceLine."Whse. Outstanding Qty. (Base)"));
    END;

    PROCEDURE CheckIfSalesLine2ReceiptLine@18(SalesLine@1001 : Record 37) : Boolean;
    VAR
      WhseReceiptLine@1002 : Record 7317;
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype",SalesLine."Document Type");
        SETRANGE("Source No.",SalesLine."Document No.");
        SETRANGE("Source Line No.",SalesLine."Line No.");
        CALCSUMS("Qty. Outstanding (Base)");
        IF ABS(SalesLine."Outstanding Qty. (Base)") <= ABS("Qty. Outstanding (Base)") THEN
          EXIT;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckIfFromPurchLine2ShptLine@17(PurchLine@1001 : Record 39) : Boolean;
    VAR
      WhseShptLine@1000 : Record 7321;
    BEGIN
      WITH WhseShptLine DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",PurchLine."Document Type");
        SETRANGE("Source No.",PurchLine."Document No.");
        SETRANGE("Source Line No.",PurchLine."Line No.");
        CALCSUMS("Qty. Outstanding (Base)");
        IF ABS(PurchLine."Outstanding Qty. (Base)") <= "Qty. Outstanding (Base)" THEN
          EXIT;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckIfPurchLine2ReceiptLine@16(PurchLine@1001 : Record 39) : Boolean;
    BEGIN
      PurchLine.CALCFIELDS("Whse. Outstanding Qty. (Base)");
      IF ABS(PurchLine."Outstanding Qty. (Base)") <= ABS(PurchLine."Whse. Outstanding Qty. (Base)") THEN
        EXIT;
      EXIT(TRUE);
    END;

    PROCEDURE CheckIfFromTransLine2ShptLine@15(TransLine@1001 : Record 5741) : Boolean;
    VAR
      Location@1005 : Record 14;
    BEGIN
      TransLine.CALCFIELDS("Whse Outbnd. Otsdg. Qty (Base)");

      IF Location.GetLocationSetup(TransLine."Transfer-from Code",Location) THEN
        IF Location."Use As In-Transit" THEN
          EXIT;
      IF TransLine."Outstanding Qty. (Base)" <= TransLine."Whse Outbnd. Otsdg. Qty (Base)" THEN
        EXIT;
      EXIT(TRUE);
    END;

    PROCEDURE CheckIfTransLine2ReceiptLine@14(TransLine@1001 : Record 5741) : Boolean;
    VAR
      Location@1005 : Record 14;
    BEGIN
      TransLine.CALCFIELDS("Whse. Inbnd. Otsdg. Qty (Base)");

      IF Location.GetLocationSetup(TransLine."Transfer-to Code",Location) THEN
        IF Location."Use As In-Transit" THEN
          EXIT;
      IF TransLine."Qty. in Transit (Base)" <= TransLine."Whse. Inbnd. Otsdg. Qty (Base)" THEN
        EXIT;

      EXIT(TRUE);
    END;

    PROCEDURE "--- NS.F ---"@1000000000();
    BEGIN
    END;

    PROCEDURE GetLastWhseReceiptLine@1000000001(VAR RetLastWhseReceiptLine@1000000000 : Record 7317);
    BEGIN
      //DOC NS2015.1 - Returning last warehouse receipt line
      //  <> pLastWhseReceiptLine: The line

      RetLastWhseReceiptLine := LastWhseReceiptLine;
    END;

    PROCEDURE ConsignmentLine2ReceiptLine@1000000002(WhseReceiptHeader@1000 : Record 7316;SrcConsignmentLine@1000000001 : Record 9062448) : Boolean;
    VAR
      PurchaseLine@1000000000 : Record 39;
    BEGIN
      //DOC NS2015.1 - Copying consignment line to receipt line
      //  -> WhseReceiptHeader: Receipt header
      //  -> SrcConsignmentLine: Consignment line

      IF (PurchaseLine.GET(PurchaseLine."Document Type"::Order, SrcConsignmentLine."Purchase Order No.",
        SrcConsignmentLine."Purchase Order Line No."))
      THEN BEGIN
        Consignment := TRUE;
        ConsignmentLine := SrcConsignmentLine;
        PurchLine2ReceiptLine(WhseReceiptHeader, PurchaseLine);
        Consignment := FALSE;
      END;
    END;

    PROCEDURE PostUpdateReceiptLine@1000000003(VAR pWarehouseReceiptLine@1000000000 : Record 7317);
    BEGIN
      //DOC NS2015.1 - Updating receipt line after creation

      pWarehouseReceiptLine.VALIDATE("Location Code");
    END;

    PROCEDURE UpdateQualityInspInReceiptLine@1000000004(VAR pWarehouseReceiptLine@1000000000 : Record 7317);
    BEGIN
      //DOC NS2015.1 - Updating quality inspection in receipt line after creation

      pWarehouseReceiptLine.UpdateQualityInspection();
    END;

    BEGIN
    {
      //DOC NS2015.1  AZ 23/01/2014 - Get last warehouse receipt line
      //DOC NS2015.1  AZ 30/01/2014 - Quality inspection
      //DOC NS2015.1  AZ 30/01/2014 - Consignments modifications
      //DOC NS2015.6  JH 13/04/2015 - "Stock Allocations" renamed to "Store Allocations"
      //DOC NS2016.16 JH 02/09/2016 - nSemble 2016
    }
    END.
  }
}

