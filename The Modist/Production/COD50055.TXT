OBJECT Codeunit 50055 The Modist - Events
{
  OBJECT-PROPERTIES
  {
    Date=17/12/18;
    Time=[ 4:56:53 PM];
    Modified=Yes;
    Version List=TM3003,TM3005,TM3013,TM3016,TM3017.01,TM3018,TM3028;
  }
  PROPERTIES
  {
    OnRun=VAR
            ItemDistribution@1170000000 : Record 50026;
            ItemDistribution2@1170000001 : Record 50026;
          BEGIN
            ItemDistribution.RESET;
            ItemDistribution.FINDSET;
            REPEAT
              ItemDistribution2 := ItemDistribution;
              ItemDistribution2.RENAME('FF',ItemDistribution."Item No.",ItemDistribution."Variant Code");
            UNTIL ItemDistribution.NEXT=0;
            MESSAGE('done');
          END;

  }
  CODE
  {
    VAR
      RefundAmtG@1170000000 : Decimal;

    [EventSubscriber(Page,50,OnAfterActionEvent,UploadWhseReceipt)]
    LOCAL PROCEDURE UploadItemExcel@1000000004(VAR Rec@1000000000 : Record 38);
    VAR
      GetSourceDocInbound@1000000001 : Codeunit 5751;
    BEGIN
      //Doc TM3003 ST 03/07/2018 -
      GetSourceDocInbound.CreateFromPurchOrderCopy(Rec);
      IF NOT Rec.FIND('=><') THEN
        Rec.INIT;
      //Doc TM3003 ST 03/07/2018 +
    END;

    [EventSubscriber(Page,42,OnAfterValidateEvent,"Currency Code")]
    LOCAL PROCEDURE CallCurrencyCodeValidation@1000000006(VAR Rec@1000000000 : Record 36;VAR xRec@1000000001 : Record 36);
    BEGIN
      ValidateCurrency(Rec); //Doc TM3005 ST 04/07/2018
    END;

    [EventSubscriber(Page,42,OnAfterValidateEvent,"Payment Method Code")]
    LOCAL PROCEDURE CallPaymentMethodValidation@1000000007(VAR Rec@1000000000 : Record 36;VAR xRec@1000000001 : Record 36);
    BEGIN
      ValidateCurrency(Rec); //Doc TM3005 ST 04/07/2018
    END;

    [EventSubscriber(Codeunit,80,OnBeforePostSalesDoc)]
    LOCAL PROCEDURE ValidateCurrency@1000000005(VAR SalesHeader@1000000000 : Record 36);
    VAR
      PaymentMethodL@1000000002 : Record 289;
      C_CurrencyValidation@1000000001 : TextConst 'ENU=%1 & %2 must have same currency.';
    BEGIN
      //Doc TM3005 ST 04/07/2018 -
      IF (SalesHeader."Currency Code" = '') OR (SalesHeader."Payment Method Code" = '') THEN
        EXIT;

      PaymentMethodL.GET(SalesHeader."Payment Method Code");
      //IF SalesHeader."Currency Code" <> PaymentMethodL."Currency Code" THEN
        //ERROR(C_CurrencyValidation, SalesHeader.FIELDCAPTION("Currency Code"), SalesHeader.FIELDCAPTION("Payment Method Code"));
      //Doc TM3005 ST 04/07/2018 +
    END;

    LOCAL PROCEDURE __Batch__@1000000001();
    BEGIN
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,"No.")]
    LOCAL PROCEDURE ReplaceItemFromSalesLine@1000000003(VAR Rec@1000000000 : Record 37;VAR xRec@1000000001 : Record 37;CurrFieldNo@1000000002 : Integer);
    VAR
      ItemL@1000000003 : Record 27;
    BEGIN
      //Doc TM3013 ST 15/07/2018 -
      WITH Rec DO BEGIN
        IF Type <> Type::Item THEN
          EXIT;
        ItemL.GET("No.");
        "No." := ItemL."No.";
      END;
      //Doc TM3013 ST 15/07/2018 +
    END;

    [EventSubscriber(Table,39,OnBeforeValidateEvent,"No.")]
    LOCAL PROCEDURE ReplaceItemFromPurchaseLine@1000000008(VAR Rec@1000000000 : Record 39;VAR xRec@1000000001 : Record 39;CurrFieldNo@1000000002 : Integer);
    VAR
      ItemL@1000000003 : Record 27;
    BEGIN
      //Doc TM3013 ST 15/07/2018 -
      WITH Rec DO BEGIN
        IF Type <> Type::Item THEN
          EXIT;
        ItemL.GET("No.");
        "No." := ItemL."No.";
      END;
      //Doc TM3013 ST 15/07/2018 +
    END;

    LOCAL PROCEDURE __BuyingSheet_@1170000000();
    BEGIN
      //DOC TM3016 ST 01/08/18 -
    END;

    [EventSubscriber(Table,9087016,OnBeforeValidateEvent,"Vendor No.")]
    LOCAL PROCEDURE BuyingStagingHeaderVendorNo@1170000004(VAR Rec@1170000000 : Record 9087016;VAR xRec@1170000001 : Record 9087016;CurrFieldNo@1170000002 : Integer);
    BEGIN
      IF CurrFieldNo = 0 THEN
        xRec.INIT;
    END;

    [EventSubscriber(Table,9087016,OnBeforeValidateEvent,"Currency Code")]
    LOCAL PROCEDURE BuyingStagingHeaderCurrencyCode@1170000010(VAR Rec@1170000000 : Record 9087016;VAR xRec@1170000001 : Record 9087016;CurrFieldNo@1170000002 : Integer);
    BEGIN
      IF CurrFieldNo = 0 THEN
        xRec.INIT;
    END;

    [EventSubscriber(Table,9087016,OnBeforeValidateEvent,"Currency Factor")]
    LOCAL PROCEDURE BuyingStagingHeaderCurrencyFactor@1170000011(VAR Rec@1170000000 : Record 9087016;VAR xRec@1170000001 : Record 9087016;CurrFieldNo@1170000002 : Integer);
    BEGIN
      IF CurrFieldNo = 0 THEN
        xRec.INIT;
    END;

    [EventSubscriber(Table,9087016,OnBeforeValidateEvent,"Season Code")]
    LOCAL PROCEDURE BuyingStagingHeaderSeasonCode@1170000012(VAR Rec@1170000000 : Record 9087016;VAR xRec@1170000001 : Record 9087016;CurrFieldNo@1170000002 : Integer);
    BEGIN
      IF CurrFieldNo = 0 THEN
        xRec.INIT;
    END;

    [EventSubscriber(Table,9087016,OnBeforeValidateEvent,"Buying Sheet No.")]
    LOCAL PROCEDURE BuyingStagingHeaderBuyingSheetNo@1170000013(VAR Rec@1170000000 : Record 9087016;VAR xRec@1170000001 : Record 9087016;CurrFieldNo@1170000002 : Integer);
    BEGIN
      IF CurrFieldNo = 0 THEN
        xRec.INIT;
    END;

    [EventSubscriber(Table,9087016,OnBeforeValidateEvent,"Size Group Code")]
    LOCAL PROCEDURE BuyingStagingHeaderSizeGroupCode@1170000014(VAR Rec@1170000000 : Record 9087016;VAR xRec@1170000001 : Record 9087016;CurrFieldNo@1170000002 : Integer);
    BEGIN
      IF CurrFieldNo = 0 THEN
        xRec.INIT;
    END;

    [EventSubscriber(Table,9087016,OnBeforeValidateEvent,Process)]
    LOCAL PROCEDURE BuyingStagingHeaderProcess@1170000016(VAR Rec@1170000000 : Record 9087016;VAR xRec@1170000001 : Record 9087016;CurrFieldNo@1170000002 : Integer);
    BEGIN
      IF CurrFieldNo = 0 THEN
        xRec.INIT;
    END;

    [EventSubscriber(Table,9087017,OnBeforeValidateEvent,"Vendor No.")]
    LOCAL PROCEDURE BuyingStagingLineVendorNo@1170000003(VAR Rec@1170000000 : Record 9087017;VAR xRec@1170000001 : Record 9087017;CurrFieldNo@1170000002 : Integer);
    BEGIN
      IF CurrFieldNo = 0 THEN
        xRec.INIT;
    END;

    [EventSubscriber(Table,9087017,OnBeforeValidateEvent,"Division Code")]
    LOCAL PROCEDURE BuyingStagingLineDivisionCode@1170000001(VAR Rec@1170000000 : Record 9087017;VAR xRec@1170000001 : Record 9087017;CurrFieldNo@1170000002 : Integer);
    BEGIN
      IF CurrFieldNo = 0 THEN
        xRec.INIT;
    END;

    [EventSubscriber(Table,9087017,OnBeforeValidateEvent,"Department Code")]
    LOCAL PROCEDURE BuyingStagingLineDepartmentCode@1170000002(VAR Rec@1170000000 : Record 9087017;VAR xRec@1170000001 : Record 9087017;CurrFieldNo@1170000002 : Integer);
    BEGIN
      IF CurrFieldNo = 0 THEN
        xRec.INIT;
    END;

    [EventSubscriber(Table,9087017,OnBeforeValidateEvent,"Group Code")]
    LOCAL PROCEDURE BuyingStagingLineGroupCode@1170000005(VAR Rec@1170000000 : Record 9087017;VAR xRec@1170000001 : Record 9087017;CurrFieldNo@1170000002 : Integer);
    BEGIN
      IF CurrFieldNo = 0 THEN
        xRec.INIT;
    END;

    [EventSubscriber(Table,9087017,OnBeforeValidateEvent,"Category Code")]
    LOCAL PROCEDURE BuyingStagingLineCategoryCode@1170000006(VAR Rec@1170000000 : Record 9087017;VAR xRec@1170000001 : Record 9087017;CurrFieldNo@1170000002 : Integer);
    BEGIN
      IF CurrFieldNo = 0 THEN
        xRec.INIT;
    END;

    [EventSubscriber(Table,9087017,OnBeforeValidateEvent,"Size Group Code")]
    LOCAL PROCEDURE BuyingStagingLineSizeGroupCode@1170000007(VAR Rec@1170000000 : Record 9087017;VAR xRec@1170000001 : Record 9087017;CurrFieldNo@1170000002 : Integer);
    BEGIN
      IF CurrFieldNo = 0 THEN
        xRec.INIT;
    END;

    LOCAL PROCEDURE "__BuyingSheet+"@1000000009();
    BEGIN
      //DOC TM3016 ST 01/08/18 +
    END;

    [EventSubscriber(Page,50010,OnAfterActionEvent,Refund2)]
    LOCAL PROCEDURE AfterRefundAction@1170000008(VAR Rec@1170000000 : Record 50008);
    VAR
      UserSessionL@1170000003 : Codeunit 50049;
      PostedSalesCreditMemoL@1170000001 : Record 114;
      CreateSROL@1170000002 : Report 50043;
      PostedSalesInvoiceL@1000000000 : Record 112;
      RefundAmtL@1000000001 : Decimal;
      C_RefundFailed@1000000002 : TextConst 'ENU=Refund Process Failed !!!';
    BEGIN
      {
      //DOC TM3017 ST 05/08/18 -
      //Rec.TESTFIELD("Refund Amount");
      PostedSalesCreditMemoL.SETRANGE("Order GuID", Rec."Order Guid");
      //DOC TM3017.01 ST 05/08/18 -
      IF NOT PostedSalesCreditMemoL.FINDFIRST THEN BEGIN
        PostedSalesInvoiceL.SETRANGE("Order GuID", Rec."Order Guid");
        PostedSalesInvoiceL.FINDFIRST;
        TransferFieldFromPostedSalesInv2PostedSalesCreditMemo(PostedSalesInvoiceL, PostedSalesCreditMemoL);
      END;
      //DOC TM3017.01 ST 05/08/18 +
      COMMIT;

      //DOC TM3017.01 ST 05/08/18 -
      RefundAmtL := UserSessionL.GetRefundAmount;
      IF RefundAmtL <> 0 THEN BEGIN
      //DOC TM3017.01 ST 05/08/18 +
      CreateSROL.SetCreditMemoHdr(PostedSalesCreditMemoL, RefundAmtL); // DOC TM3017.01 ST 07/10/18
      CreateSROL.RUNMODAL;
      END ELSE
        ERROR(C_RefundFailed);
      //DOC TM3017 ST 05/08/18 +
      }
    END;

    [EventSubscriber(Page,9087029,OnAfterValidateEvent,"Size Group Code")]
    LOCAL PROCEDURE AfterStyleGroupCodeValidate@1170000015(VAR Rec@1170000000 : Record 9087012;VAR xRec@1170000001 : Record 9087012);
    VAR
      ItemL@1170000009 : Record 27;
      StyleColorL@1170000006 : Record 9087013;
      StyleColorSizeL@1170000005 : Record 9087014;
      ItemVariantL@1170000004 : Record 5401;
      TempPurchHdrL@1170000002 : TEMPORARY Record 38;
      StyleManagementL@1170000003 : Codeunit 9087006;
      UpdateSizeCode@1170000007 : TextConst 'ENU=Do you want to update the size group code ?';
      SizeGroupUpdated@1170000008 : TextConst 'ENU=Size Group Code updated to %1 from %2';
      SizeAlertInPO@1170000010 : TextConst 'ENU=Size Code %1 which you disabled is available in the purchase order.';
    BEGIN
      //DOC TM3018.01 ST 16/08/2018 -
      IF Rec."Size Group Code" = xRec."Size Group Code" THEN
        EXIT;

      IF NOT CONFIRM(UpdateSizeCode, FALSE) THEN
        ERROR('');

      StyleColorL.SETRANGE("Style No.", Rec."No.");
      StyleColorL.FINDSET;
      REPEAT
        StyleColorL.EnableAllSizes();
        StyleColorSizeL.SETRANGE("Style No.", StyleColorL."Style No.");
        StyleColorSizeL.SETRANGE("Colour Code", StyleColorL."Colour Code");
        IF StyleColorSizeL.FINDSET(TRUE) THEN BEGIN
          REPEAT
            StyleColorSizeL.VALIDATE("Item No.", StyleColorL."Item No.");
            StyleColorSizeL.MODIFY(TRUE);
          UNTIL StyleColorSizeL.NEXT = 0;
        END;

        ItemL.GET(StyleColorL."Item No.");
        ItemL.VALIDATE("Size Group Code", Rec."Size Group Code");
        ItemL.MODIFY(TRUE);
        FindPurchOrderWithVariant(xRec."Size Group Code", ItemL."No.", TempPurchHdrL, '');

        ItemVariantL.SETAUTOCALCFIELDS(Inventory);
        ItemVariantL.SETRANGE("Item No.", ItemL."No.");
        ItemVariantL.SETRANGE(Inventory, 0);
        ItemVariantL.DELETEALL(TRUE);
      UNTIL StyleColorL.NEXT = 0;

      StyleManagementL.Release(Rec);
      StyleManagementL.UpdateStyleItems(Rec, FALSE);
      MESSAGE(SizeGroupUpdated, Rec."Size Group Code", xRec."Size Group Code");
      IF NOT TempPurchHdrL.ISEMPTY THEN BEGIN
        MESSAGE(SizeAlertInPO, xRec."Size Group Code");
        PAGE.RUN(0, TempPurchHdrL);
      END;
      //DOC TM3018.01 ST 16/08/2018 +
    END;

    [EventSubscriber(Table,27,OnAfterValidateEvent,"Size Group Code")]
    LOCAL PROCEDURE AfterItemStyleGroupCodeValidate@1170000018(VAR Rec@1170000000 : Record 27;VAR xRec@1170000001 : Record 27;CurrFieldNo@1170000002 : Integer);
    VAR
      FreezeSizeGroup@1170000003 : TextConst 'ENU=You are not allowed to change directly in Item Card. Use Style card to update.';
    BEGIN
      //DOC TM3018.01 ST 16/08/2018 -
      IF CurrFieldNo > 0 THEN
        ERROR(FreezeSizeGroup)
      //DOC TM3018.01 ST 16/08/2018 +
    END;

    [EventSubscriber(Page,9087031,OnAfterValidateEvent,Enabled)]
    LOCAL PROCEDURE AfterEnabledValidate@1170000041(VAR Rec@1170000000 : Record 9087014;VAR xRec@1170000001 : Record 9087014);
    VAR
      ItemVariantL@1170000002 : Record 5401;
      StyleColorL@1170000005 : Record 9087014;
      TempPurchHdrL@1170000003 : TEMPORARY Record 38;
      SizeAlertInPO@1170000004 : TextConst 'ENU=Size Code %1 which you disabled is available in the purchase order.';
    BEGIN
      //DOC TM3018.01 ST 16/08/2018 -
      IF NOT Rec.Enabled THEN BEGIN
        FindPurchOrderWithVariant(Rec."Size Group Code", Rec."Item No.", TempPurchHdrL, Rec."Variant Code");
        IF ItemVariantL.GET(Rec."Item No.", Rec."Variant Code") THEN
          ItemVariantL.DELETE(TRUE);

        StyleColorL.GET(Rec."Style No.", Rec."Colour Code", Rec."Size Group Code", Rec."Size Code");
        StyleColorL."Variant Code" := '';
        StyleColorL.Enabled := FALSE;
        Rec := StyleColorL;
      IF NOT TempPurchHdrL.ISEMPTY THEN BEGIN
        MESSAGE(SizeAlertInPO, Rec."Size Group Code");
        PAGE.RUN(0, TempPurchHdrL);
      END;
      END;
      //DOC TM3018.01 ST 16/08/2018 +
    END;

    [EventSubscriber(Page,9087031,OnQueryClosePageEvent)]
    LOCAL PROCEDURE AfterStyleColourSizeQueryPageClose@1170000069(VAR Rec@1170000000 : Record 9087014;VAR AllowClose@1170000001 : Boolean);
    VAR
      StyleManagementL@1170000003 : Codeunit 9087006;
      StyleL@1170000002 : Record 9087012;
    BEGIN
      //DOC TM3018.01 ST 16/08/2018 -
      StyleL.GET(Rec."Style No.");
      StyleManagementL.UpdateStyleItems(StyleL, FALSE);
      //DOC TM3018.01 ST 16/08/2018 +
    END;

    LOCAL PROCEDURE FindPurchOrderWithVariant@1170000060(SizeCodeP@1170000000 : Code[20];ItemNoP@1170000006 : Code[20];VAR TempPurchHdrP@1170000007 : TEMPORARY Record 38;VariantCodeP@1170000004 : Code[20]);
    VAR
      PurchHdrL@1170000001 : Record 38;
      PurchLineL@1170000002 : Record 39;
      xOrderNo@1170000003 : Code[20];
    BEGIN
      //DOC TM3018.01 ST 16/08/2018 -
      CLEAR(xOrderNo);
      PurchLineL.SETCURRENTKEY("Document Type", "Document No.", "Variant Code");
      PurchLineL.SETRANGE("Document Type", PurchLineL."Document Type"::Order);
      PurchLineL.SETRANGE("No.", ItemNoP);
      PurchLineL.SETRANGE("Size Group Code", SizeCodeP);
      PurchLineL.SETFILTER("Variant Code", VariantCodeP);
      IF PurchLineL.FINDSET THEN
        REPEAT
          IF xOrderNo <> PurchLineL."Document No." THEN BEGIN
            PurchHdrL.GET(PurchLineL."Document Type", PurchLineL."Document No.");
            TempPurchHdrP.TRANSFERFIELDS(PurchHdrL, TRUE);
            TempPurchHdrP.SETRECFILTER;
            IF TempPurchHdrP.ISEMPTY THEN
              TempPurchHdrP.INSERT;
          END;
          xOrderNo := PurchLineL."Document No.";
        UNTIL PurchLineL.NEXT = 0;

      IF TempPurchHdrP.FINDSET THEN BEGIN
        PurchLineL.MODIFYALL("Variant Code", '');
        PurchLineL.MODIFYALL("Size Group Code", '');
        PurchLineL.MODIFYALL("Size Code", '');
      END;
      //DOC TM3018.01 ST 16/08/2018 +
    END;

    LOCAL PROCEDURE __WS@1170000022();
    BEGIN
    END;

    [EventSubscriber(Page,50033,OnAfterActionEvent,"View XML Document")]
    LOCAL PROCEDURE OpenXmlDocumentMessageHeader@1170000026(VAR Rec@1170000000 : Record 50023);
    VAR
      XMLOutL@1170000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      InStreamL@1170000003 : InStream;
      FileManagementL@1170000001 : Codeunit 419;
      C_FileExtension@1170000005 : TextConst 'ENU=\XMLDoc.XML';
    BEGIN
      //DOC TM3027 ST 18/10/18 -
      IF ISNULL(XMLOutL) THEN
        XMLOutL := XMLOutL.XmlDocument();
      Rec.CALCFIELDS("XML Document");

      IF Rec."XML Document".HASVALUE THEN BEGIN
        Rec."XML Document".CREATEINSTREAM(InStreamL);
        XMLOutL.Load(InStreamL);
        XMLOutL.Save(TEMPORARYPATH + C_FileExtension);
        HYPERLINK(FileManagementL.DownloadTempFile(TEMPORARYPATH() + C_FileExtension));
      END;
      //DOC TM3027 ST 18/10/18 +
    END;

    [EventSubscriber(Page,50034,OnAfterActionEvent,"View XML Document")]
    LOCAL PROCEDURE OpenXmlDocumentErrorMessage@1000000000(VAR Rec@1000000000 : Record 50024);
    VAR
      XMLOutL@1000000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      InStreamL@1000000003 : InStream;
      FileManagementL@1000000001 : Codeunit 419;
      C_FileExtension@1000000002 : TextConst 'ENU=\XMLDoc.XML';
    BEGIN
      //DOC TM3027 ST 18/10/18 -
      IF ISNULL(XMLOutL) THEN
        XMLOutL := XMLOutL.XmlDocument();
      Rec.CALCFIELDS("XML Document");

      IF Rec."XML Document".HASVALUE THEN BEGIN
        Rec."XML Document".CREATEINSTREAM(InStreamL);
        XMLOutL.Load(InStreamL);
        XMLOutL.Save(TEMPORARYPATH + C_FileExtension);
        HYPERLINK(FileManagementL.DownloadTempFile(TEMPORARYPATH() + C_FileExtension));
      END;
      //DOC TM3027 ST 18/10/18 +
    END;

    [EventSubscriber(Page,50033,OnAfterActionEvent,"Close Entry")]
    LOCAL PROCEDURE CloseEntry@1170000023(VAR Rec@1000000000 : Record 50023);
    VAR
      C_CloseEntry@1000000001 : TextConst 'ENU=This will change the status of Entry No. %1 to %2. Do you want to continue ?';
    BEGIN
      //DOC TM3027 ST 18/10/18 -
      Rec.TESTFIELD("Entry No.");
      Rec.TESTFIELD(Status, Rec.Status::"To be Processed");
      IF CONFIRM(C_CloseEntry, FALSE, Rec."Entry No.", Rec.Status::"Closed Manually") THEN BEGIN
        Rec.Status := Rec.Status::"Closed Manually";
        Rec.MODIFY;
      END
      //DOC TM3027 ST 18/10/18 +
    END;

    [EventSubscriber(Table,37,OnAfterValidateEvent,"Qty. to Ship")]
    LOCAL PROCEDURE OnAfterSalesLineQtytoShipValidate@1170000027(VAR Rec@1170000000 : Record 37;VAR xRec@1170000001 : Record 37;CurrFieldNo@1170000002 : Integer);
    VAR
      SalesLineL@1170000003 : Record 37;
    BEGIN
      //DOC TM3028 ST 10/10/18 -
      IF (Rec.Type <> Rec.Type::Item) OR (CurrFieldNo > 0) OR (Rec."Qty. to Ship" = 0) OR (Rec."Line Status" <> Rec."Line Status"::Shipped) THEN
        EXIT;

      SalesLineL.SETCURRENTKEY("Document Type", "Document No.", "Main Line No.", Type);
      SalesLineL.SETRANGE("Document Type", SalesLineL."Document Type"::Order);
      SalesLineL.SETRANGE("Document No.", Rec."Document No.");
      SalesLineL.SETRANGE("Main Line No.", Rec."Line No.");
      SalesLineL.SETRANGE(Type, SalesLineL.Type::"G/L Account");
      IF SalesLineL.FINDSET THEN
        REPEAT
          SalesLineL.VALIDATE("Qty. to Ship", 1);
          SalesLineL.VALIDATE("Qty. to Invoice", 1);
          SalesLineL.MODIFY(TRUE);
        UNTIL SalesLineL.NEXT = 0;
      //DOC TM3028 ST 10/10/18 +
    END;

    LOCAL PROCEDURE TransferFieldFromPostedSalesInv2PostedSalesCreditMemo@1170000035(VAR SalesInvoiceHeaderP@1170000000 : Record 112;VAR SalesCrMemoHeaderP@1170000001 : Record 114);
    BEGIN
      //DOC TM3017.01 ST 10/10/18 -
      SalesCrMemoHeaderP."Sell-to Customer No." := SalesInvoiceHeaderP."Sell-to Customer No.";
      SalesCrMemoHeaderP."No." := SalesInvoiceHeaderP."No.";
      SalesCrMemoHeaderP."Bill-to Customer No." := SalesInvoiceHeaderP."Bill-to Customer No.";
      SalesCrMemoHeaderP."Bill-to Name" := SalesInvoiceHeaderP."Bill-to Name";
      SalesCrMemoHeaderP."Bill-to Name 2" := SalesInvoiceHeaderP."Bill-to Name 2";
      SalesCrMemoHeaderP."Bill-to Address" := SalesInvoiceHeaderP."Bill-to Address";
      SalesCrMemoHeaderP."Bill-to Address 2" := SalesInvoiceHeaderP."Bill-to Address 2";
      SalesCrMemoHeaderP."Bill-to City" := SalesInvoiceHeaderP."Bill-to City";
      SalesCrMemoHeaderP."Bill-to Contact" := SalesInvoiceHeaderP."Bill-to Contact";
      SalesCrMemoHeaderP."Your Reference" := SalesInvoiceHeaderP."Your Reference";
      SalesCrMemoHeaderP."Ship-to Code" := SalesInvoiceHeaderP."Ship-to Code";
      SalesCrMemoHeaderP."Ship-to Name" := SalesInvoiceHeaderP."Ship-to Name";
      SalesCrMemoHeaderP."Ship-to Name 2" := SalesInvoiceHeaderP."Ship-to Name 2";
      SalesCrMemoHeaderP."Ship-to Address" := SalesInvoiceHeaderP."Ship-to Address";
      SalesCrMemoHeaderP."Ship-to Address 2" := SalesInvoiceHeaderP."Ship-to Address 2";
      SalesCrMemoHeaderP."Ship-to City" := SalesInvoiceHeaderP."Ship-to City";
      SalesCrMemoHeaderP."Ship-to Contact" := SalesInvoiceHeaderP."Ship-to Contact";
      SalesCrMemoHeaderP."Posting Date" := SalesInvoiceHeaderP."Posting Date";
      SalesCrMemoHeaderP."Shipment Date" := SalesInvoiceHeaderP."Shipment Date";
      SalesCrMemoHeaderP."Posting Description" := SalesInvoiceHeaderP."Posting Description";
      SalesCrMemoHeaderP."Payment Terms Code" := SalesInvoiceHeaderP."Payment Terms Code";
      SalesCrMemoHeaderP."Due Date" := SalesInvoiceHeaderP."Due Date";
      SalesCrMemoHeaderP."Payment Discount %" := SalesInvoiceHeaderP."Payment Discount %";
      SalesCrMemoHeaderP."Pmt. Discount Date" := SalesInvoiceHeaderP."Pmt. Discount Date";
      SalesCrMemoHeaderP."Shipment Method Code" := SalesInvoiceHeaderP."Shipment Method Code";
      SalesCrMemoHeaderP."Location Code" := SalesInvoiceHeaderP."Location Code";
      SalesCrMemoHeaderP."Shortcut Dimension 1 Code" := SalesInvoiceHeaderP."Shortcut Dimension 1 Code";
      SalesCrMemoHeaderP."Shortcut Dimension 2 Code" := SalesInvoiceHeaderP."Shortcut Dimension 2 Code";
      SalesCrMemoHeaderP."Customer Posting Group" := SalesInvoiceHeaderP."Customer Posting Group";
      SalesCrMemoHeaderP."Currency Code" := SalesInvoiceHeaderP."Currency Code";
      SalesCrMemoHeaderP."Currency Factor" := SalesInvoiceHeaderP."Currency Factor";
      SalesCrMemoHeaderP."Customer Price Group" := SalesInvoiceHeaderP."Customer Price Group";
      SalesCrMemoHeaderP."Prices Including VAT" := SalesInvoiceHeaderP."Prices Including VAT";
      SalesCrMemoHeaderP."Invoice Disc. Code" := SalesInvoiceHeaderP."Invoice Disc. Code";
      SalesCrMemoHeaderP."Customer Disc. Group" := SalesInvoiceHeaderP."Customer Disc. Group";
      SalesCrMemoHeaderP."Language Code" := SalesInvoiceHeaderP."Language Code";
      SalesCrMemoHeaderP."Salesperson Code" := SalesInvoiceHeaderP."Salesperson Code";
      SalesCrMemoHeaderP.Comment := SalesInvoiceHeaderP.Comment;
      SalesCrMemoHeaderP."No. Printed" := SalesInvoiceHeaderP."No. Printed";
      SalesCrMemoHeaderP."On Hold" := SalesInvoiceHeaderP."On Hold";
      SalesCrMemoHeaderP."Applies-to Doc. Type" := SalesInvoiceHeaderP."Applies-to Doc. Type";
      SalesCrMemoHeaderP."Applies-to Doc. No." := SalesInvoiceHeaderP."Applies-to Doc. No.";
      SalesCrMemoHeaderP."Bal. Account No." := SalesInvoiceHeaderP."Bal. Account No.";
      SalesCrMemoHeaderP.Amount := SalesInvoiceHeaderP.Amount;
      SalesCrMemoHeaderP."Amount Including VAT" := SalesInvoiceHeaderP."Amount Including VAT";
      SalesCrMemoHeaderP."VAT Registration No." := SalesInvoiceHeaderP."VAT Registration No.";
      SalesCrMemoHeaderP."Reason Code" := SalesInvoiceHeaderP."Reason Code";
      SalesCrMemoHeaderP."Gen. Bus. Posting Group" := SalesInvoiceHeaderP."Gen. Bus. Posting Group";
      SalesCrMemoHeaderP."EU 3-Party Trade" := SalesInvoiceHeaderP."EU 3-Party Trade";
      SalesCrMemoHeaderP."Transaction Type" := SalesInvoiceHeaderP."Transaction Type";
      SalesCrMemoHeaderP."Transport Method" := SalesInvoiceHeaderP."Transport Method";
      SalesCrMemoHeaderP."VAT Country/Region Code" := SalesInvoiceHeaderP."VAT Country/Region Code";
      SalesCrMemoHeaderP."Sell-to Customer Name" := SalesInvoiceHeaderP."Sell-to Customer Name";
      SalesCrMemoHeaderP."Sell-to Customer Name 2" := SalesInvoiceHeaderP."Sell-to Customer Name 2";
      SalesCrMemoHeaderP."Sell-to Address" := SalesInvoiceHeaderP."Sell-to Address";
      SalesCrMemoHeaderP."Sell-to Address 2" := SalesInvoiceHeaderP."Sell-to Address 2";
      SalesCrMemoHeaderP."Sell-to City" := SalesInvoiceHeaderP."Sell-to City";
      SalesCrMemoHeaderP."Sell-to Contact" := SalesInvoiceHeaderP."Sell-to Contact";
      SalesCrMemoHeaderP."Bill-to Post Code" := SalesInvoiceHeaderP."Bill-to Post Code";
      SalesCrMemoHeaderP."Bill-to County" := SalesInvoiceHeaderP."Bill-to County";
      SalesCrMemoHeaderP."Bill-to Country/Region Code" := SalesInvoiceHeaderP."Bill-to Country/Region Code";
      SalesCrMemoHeaderP."Sell-to Post Code" := SalesInvoiceHeaderP."Sell-to Post Code";
      SalesCrMemoHeaderP."Sell-to County" := SalesInvoiceHeaderP."Sell-to County";
      SalesCrMemoHeaderP."Sell-to Country/Region Code" := SalesInvoiceHeaderP."Sell-to Country/Region Code";
      SalesCrMemoHeaderP."Ship-to Post Code" := SalesInvoiceHeaderP."Ship-to Post Code";
      SalesCrMemoHeaderP."Ship-to County" := SalesInvoiceHeaderP."Ship-to County";
      SalesCrMemoHeaderP."Ship-to Country/Region Code" := SalesInvoiceHeaderP."Ship-to Country/Region Code";
      SalesCrMemoHeaderP."Bal. Account Type" := SalesInvoiceHeaderP."Bal. Account Type";
      SalesCrMemoHeaderP."Exit Point" := SalesInvoiceHeaderP."Exit Point";
      SalesCrMemoHeaderP.Correction := SalesInvoiceHeaderP.Correction;
      SalesCrMemoHeaderP."Document Date" := SalesInvoiceHeaderP."Document Date";
      SalesCrMemoHeaderP."External Document No." := SalesInvoiceHeaderP."External Document No.";
      SalesCrMemoHeaderP.Area := SalesInvoiceHeaderP.Area;
      SalesCrMemoHeaderP."Transaction Specification" := SalesInvoiceHeaderP."Transaction Specification";
      SalesCrMemoHeaderP."Payment Method Code" := SalesInvoiceHeaderP."Payment Method Code";
      SalesCrMemoHeaderP."Pre-Assigned No. Series" := SalesInvoiceHeaderP."Pre-Assigned No. Series";
      SalesCrMemoHeaderP."No. Series" := SalesInvoiceHeaderP."No. Series";
      SalesCrMemoHeaderP."Pre-Assigned No." := SalesInvoiceHeaderP."Pre-Assigned No.";
      SalesCrMemoHeaderP."User ID" := SalesInvoiceHeaderP."User ID";
      SalesCrMemoHeaderP."Source Code" := SalesInvoiceHeaderP."Source Code";
      SalesCrMemoHeaderP."Tax Area Code" := SalesInvoiceHeaderP."Tax Area Code";
      SalesCrMemoHeaderP."Tax Liable" := SalesInvoiceHeaderP."Tax Liable";
      SalesCrMemoHeaderP."VAT Bus. Posting Group" := SalesInvoiceHeaderP."VAT Bus. Posting Group";
      SalesCrMemoHeaderP."VAT Base Discount %" := SalesInvoiceHeaderP."VAT Base Discount %";
      SalesCrMemoHeaderP."Prepayment Order No." := SalesInvoiceHeaderP."Prepayment Order No.";
      SalesCrMemoHeaderP."Dimension Set ID" := SalesInvoiceHeaderP."Dimension Set ID";
      SalesCrMemoHeaderP."Document Exchange Identifier" := SalesInvoiceHeaderP."Document Exchange Identifier";
      SalesCrMemoHeaderP."Document Exchange Status" := SalesInvoiceHeaderP."Document Exchange Status";
      SalesCrMemoHeaderP."Doc. Exch. Original Identifier" := SalesInvoiceHeaderP."Doc. Exch. Original Identifier";
      SalesCrMemoHeaderP."Credit Card No." := SalesInvoiceHeaderP."Credit Card No.";
      SalesCrMemoHeaderP.Paid := SalesInvoiceHeaderP.Paid;
      SalesCrMemoHeaderP."Remaining Amount" := SalesInvoiceHeaderP."Remaining Amount";
      SalesCrMemoHeaderP."Cust. Ledger Entry No." := SalesInvoiceHeaderP."Cust. Ledger Entry No.";
      SalesCrMemoHeaderP."Invoice Discount Amount" := SalesInvoiceHeaderP."Invoice Discount Amount";
      SalesCrMemoHeaderP."Campaign No." := SalesInvoiceHeaderP."Campaign No.";
      SalesCrMemoHeaderP."Sell-to Contact No." := SalesInvoiceHeaderP."Sell-to Contact No.";
      SalesCrMemoHeaderP."Bill-to Contact No." := SalesInvoiceHeaderP."Bill-to Contact No.";
      SalesCrMemoHeaderP."Responsibility Center" := SalesInvoiceHeaderP."Responsibility Center";
      SalesCrMemoHeaderP."Allow Line Disc." := SalesInvoiceHeaderP."Allow Line Disc.";
      SalesCrMemoHeaderP."Type of Supply Code" := SalesInvoiceHeaderP."Type of Supply Code";
      SalesCrMemoHeaderP."Order Status" := SalesInvoiceHeaderP."Order Status";
      SalesCrMemoHeaderP."Shipment ID" := SalesInvoiceHeaderP."Shipment ID";
      SalesCrMemoHeaderP."Bill-to E-Mail" := SalesInvoiceHeaderP."Bill-to E-Mail";
      SalesCrMemoHeaderP."Airway Bill No." := SalesInvoiceHeaderP."Airway Bill No.";
      SalesCrMemoHeaderP."Package Type" := SalesInvoiceHeaderP."Package Type";
      SalesCrMemoHeaderP."Message Confirmation ID" := SalesInvoiceHeaderP."Message Confirmation ID";
      SalesCrMemoHeaderP."Marketing GUID" := SalesInvoiceHeaderP."Marketing GUID";
      SalesCrMemoHeaderP."Customer Locale" := SalesInvoiceHeaderP."Customer Locale";
      SalesCrMemoHeaderP."Farfetch Order" := SalesInvoiceHeaderP."Farfetch Order";
      SalesCrMemoHeaderP."Exahange Order" := SalesInvoiceHeaderP."Exahange Order";
      SalesCrMemoHeaderP."Origianl Order No." := SalesInvoiceHeaderP."Origianl Order No.";
      SalesCrMemoHeaderP.Exchanged := SalesInvoiceHeaderP.Exchanged;
      SalesCrMemoHeaderP."Exchanged With" := SalesInvoiceHeaderP."Exchanged With";
      SalesCrMemoHeaderP."Return Type" := SalesInvoiceHeaderP."Return Type";
      SalesCrMemoHeaderP."Order Date Time" := SalesInvoiceHeaderP."Order Date Time";
      SalesCrMemoHeaderP.Intercompany := SalesInvoiceHeaderP.Intercompany;
      SalesCrMemoHeaderP."Label Code" := SalesInvoiceHeaderP."Label Code";
      SalesCrMemoHeaderP."Is An Internet Customer" := SalesInvoiceHeaderP."Is An Internet Customer";
      SalesCrMemoHeaderP.DateTimeInsertedModified := SalesInvoiceHeaderP.DateTimeInsertedModified;
      SalesCrMemoHeaderP."User GuID" := SalesInvoiceHeaderP."User GuID";
      SalesCrMemoHeaderP."Internet Source Code" := SalesInvoiceHeaderP."Internet Source Code";
      SalesCrMemoHeaderP."Internet Order Reference" := SalesInvoiceHeaderP."Internet Order Reference";
      SalesCrMemoHeaderP."Order GuID" := SalesInvoiceHeaderP."Order GuID";
      SalesCrMemoHeaderP.VIP := SalesInvoiceHeaderP.VIP;
      SalesCrMemoHeaderP."Customer Category Code" := SalesInvoiceHeaderP."Customer Category Code";
      //DOC TM3017.01 ST 10/10/18 -
    END;

    BEGIN
    {
      //Doc TM3003 ST 03/07/2018 - Added new function UploadItemExcel.
      //Doc TM3005 ST 04/07/2018 - Added new function CallCurrencyCodeValidation, CallPaymentMethodValidation & ValidateCurrency.
      //DOC TM3016 ST 01/08/2018 - Code added for excel import
      //DOC TM3017 ST 05/08/2018 - Code added for creating sales return order.
      //DOC TM3018 ST 06/08/2018 - Automate Size group code creation
      //DOC TM3017.01 ST 08/10/2018 - Code added for refund fix.
      //DOC TM3028 ST 10/10/18 - Bug fix for G/L posting all the lines in SO.
      //DOC TM3017.01 ST 10/10/2018 - Code added to refund without credit memo.
    }
    END.
  }
}

