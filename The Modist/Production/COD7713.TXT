OBJECT Codeunit 7713 Miniform Phys.-Inventory
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    TableNo=7700;
    OnRun=VAR
            MiniformMgmt@1000 : Codeunit 7702;
          BEGIN
            MiniformMgmt.Initialize(
              MiniformHeader,Rec,DOMxmlin,ReturnedNode,
              RootNode,XMLDOMMgt,ADCSCommunication,ADCSUserId,
              CurrentCode,StackCode,WhseEmpId,LocationFilter);

            IF Code <> CurrentCode THEN
              PrepareData
            ELSE
              ProcessInput;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      MiniformHeader@1015 : Record 7700;
      WhseJournalLine@1009 : Record 7311;
      XMLDOMMgt@1007 : Codeunit 6224;
      ADCSCommunication@1003 : Codeunit 7701;
      ADCSMgt@1024 : Codeunit 7700;
      RecRef@1005 : RecordRef;
      DOMxmlin@1011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReturnedNode@1012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RootNode@1010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ADCSUserId@1004 : Text[250];
      Remark@1002 : Text[250];
      WhseEmpId@1017 : Text[250];
      LocationFilter@1000 : Text[250];
      Text000@1006 : TextConst 'ENU=Function not Found.;ENG=Function not Found.';
      Text004@1021 : TextConst 'ENU=Invalid %1.;ENG=Invalid %1.';
      Text006@1001 : TextConst 'ENU=No input Node found.;ENG=No input Node found.';
      Text007@1014 : TextConst 'ENU=Record not found.;ENG=Record not found.';
      Text008@1013 : TextConst 'ENU=End of Document.;ENG=End of Document.';
      CurrentCode@1008 : Text[250];
      StackCode@1016 : Text[250];
      ActiveInputField@1026 : Integer;
      Text012@1027 : TextConst 'ENU=No Lines available.;ENG=No Lines available.';

    LOCAL PROCEDURE ProcessInput@10();
    VAR
      FuncGroup@1001 : Record 7702;
      RecId@1004 : RecordID;
      TableNo@1008 : Integer;
      FldNo@1000 : Integer;
      TextValue@1007 : Text[250];
    BEGIN
      IF XMLDOMMgt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
        TextValue := ReturnedNode.InnerText
      ELSE
        ERROR(Text006);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));    // Key1 = TableNo
      RecRef.OPEN(TableNo);
      EVALUATE(RecId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));   // Key2 = RecordID
      IF RecRef.GET(RecId) THEN BEGIN
        RecRef.SETTABLE(WhseJournalLine);
        WhseJournalLine.SETRANGE("Journal Template Name",WhseJournalLine."Journal Template Name");
        WhseJournalLine.SETRANGE("Journal Batch Name",WhseJournalLine."Journal Batch Name");
        WhseJournalLine.SETRANGE("Location Code",WhseJournalLine."Location Code");
        RecRef.GETTABLE(WhseJournalLine);
        ADCSCommunication.SetRecRef(RecRef);
      END ELSE BEGIN
        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        EXIT;
      END;

      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);
      ActiveInputField := 1;

      CASE FuncGroup.KeyDef OF
        FuncGroup.KeyDef::Esc:
          ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        FuncGroup.KeyDef::First:
          ADCSCommunication.FindRecRef(RecRef,0,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::LnDn:
          IF NOT ADCSCommunication.FindRecRef(RecRef,1,MiniformHeader."No. of Records in List") THEN
            Remark := Text008;
        FuncGroup.KeyDef::LnUp:
          ADCSCommunication.FindRecRef(RecRef,2,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Last:
          ADCSCommunication.FindRecRef(RecRef,3,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::PgDn:
          IF NOT ADCSCommunication.FindRecRef(RecRef,4,MiniformHeader."No. of Records in List") THEN
            Remark := Text008;
        FuncGroup.KeyDef::PgUp:
          ADCSCommunication.FindRecRef(RecRef,5,MiniformHeader."No. of Records in List");
        FuncGroup.KeyDef::Input:
          BEGIN
            EVALUATE(FldNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'FieldID'));

            CASE FldNo OF
              WhseJournalLine.FIELDNO("Bin Code"):
                CheckBinNo(UPPERCASE(TextValue));
              WhseJournalLine.FIELDNO("Item No."):
                CheckItemNo(UPPERCASE(TextValue));
              ELSE BEGIN
                ADCSCommunication.FieldSetvalue(RecRef,FldNo,TextValue);
                RecRef.SETTABLE(WhseJournalLine);
              END;
            END;

            WhseJournalLine.MODIFY;
            RecRef.GETTABLE(WhseJournalLine);
            ADCSCommunication.SetRecRef(RecRef);
            ActiveInputField := ADCSCommunication.GetActiveInputNo(CurrentCode,FldNo);
            IF Remark = '' THEN
              IF ADCSCommunication.LastEntryField(CurrentCode,FldNo) THEN BEGIN
                RecRef.GETTABLE(WhseJournalLine);
                IF NOT ADCSCommunication.FindRecRef(RecRef,1,ActiveInputField) THEN BEGIN
                  Remark := Text008;
                END ELSE
                  ActiveInputField := 1;
              END ELSE
                ActiveInputField += 1;
          END;
        ELSE
          ERROR(Text000);
      END;

      IF NOT (FuncGroup.KeyDef IN [FuncGroup.KeyDef::Esc,FuncGroup.KeyDef::Register]) THEN
        SendForm(ActiveInputField);
    END;

    LOCAL PROCEDURE CheckBinNo@4(InputValue@1002 : Text[250]);
    BEGIN
      IF InputValue = WhseJournalLine."Bin Code" THEN
        EXIT;

      Remark := STRSUBSTNO(Text004,WhseJournalLine.FIELDCAPTION("Bin Code"));
    END;

    LOCAL PROCEDURE CheckItemNo@2(InputValue@1005 : Text[250]);
    VAR
      ItemIdent@1000 : Record 7704;
    BEGIN
      IF InputValue = WhseJournalLine."Item No." THEN
        EXIT;

      IF NOT ItemIdent.GET(InputValue) THEN
        Remark := STRSUBSTNO(Text004,ItemIdent.FIELDCAPTION(Code));

      IF ItemIdent."Item No." <> WhseJournalLine."Item No." THEN
        Remark := STRSUBSTNO(Text004,ItemIdent.FIELDCAPTION(Code));

      IF (ItemIdent."Variant Code" <> '') AND (ItemIdent."Variant Code" <> WhseJournalLine."Variant Code") THEN
        Remark := STRSUBSTNO(Text004,ItemIdent.FIELDCAPTION(Code));

      IF ((ItemIdent."Unit of Measure Code" <> '') AND (ItemIdent."Unit of Measure Code" <> WhseJournalLine."Unit of Measure Code"))
      THEN
        Remark := STRSUBSTNO(Text004,ItemIdent.FIELDCAPTION(Code));
    END;

    LOCAL PROCEDURE PrepareData@1();
    VAR
      WhseJournalBatch@1000 : Record 7310;
      RecId@1003 : RecordID;
      TableNo@1001 : Integer;
    BEGIN
      XMLDOMMgt.FindNode(RootNode,'Header/Input',ReturnedNode);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);
      EVALUATE(RecId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      IF RecRef.GET(RecId) THEN BEGIN
        RecRef.SETTABLE(WhseJournalBatch);
        WhseJournalLine.SETRANGE("Journal Template Name",WhseJournalBatch."Journal Template Name");
        WhseJournalLine.SETRANGE("Journal Batch Name",WhseJournalBatch.Name);
        WhseJournalLine.SETRANGE("Location Code",WhseJournalBatch."Location Code");
        IF NOT WhseJournalLine.FINDFIRST THEN BEGIN
          ADCSMgt.SendError(Text012);
          EXIT;
        END;
        RecRef.GETTABLE(WhseJournalLine);
        ADCSCommunication.SetRecRef(RecRef);
        ActiveInputField := 1;
        SendForm(ActiveInputField);
      END ELSE
        ERROR(Text007);
    END;

    LOCAL PROCEDURE SendForm@3(InputField@1000 : Integer);
    BEGIN
      // Prepare Miniform
      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,InputField,Remark,ADCSUserId);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSMgt.SendXMLReply(DOMxmlin);
    END;

    BEGIN
    END.
  }
}

