OBJECT Codeunit 453 Job Queue - Enqueue
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=BEGIN
            EnqueueJobQueueEntry(Rec,TRUE);
          END;

  }
  CODE
  {
    VAR
      JobHasBeenScheduledMsg@1001 : TextConst 'ENU=The job has been scheduled, but will not be run until the appropriate job queue is running.;ENG=The job has been scheduled, but will not be run until the appropriate job queue is running.';

    PROCEDURE EnqueueJobQueueEntry@4(VAR JobQueueEntry@1000 : Record 472;CheckRunningJobQueue@1001 : Boolean);
    BEGIN
      RemoveFailedJobs(JobQueueEntry);
      JobQueueEntry.Status := JobQueueEntry.Status::"On Hold";
      JobQueueEntry.INSERT(TRUE);
      IF JobQueueEntry."Run in User Session" THEN
        STARTSESSION(JobQueueEntry."User Session ID",CODEUNIT::"Job Queue User Session",COMPANYNAME,JobQueueEntry);
      JobQueueEntry.Status := JobQueueEntry.Status::Ready;
      JobQueueEntry.MODIFY;
      COMMIT;
      IF CheckRunningJobQueue THEN
        CheckIfJobQueueIsRunning(JobQueueEntry."Job Queue Category Code");
    END;

    PROCEDURE RemoveFailedJobs@1(VAR JobQueueEntry@1000 : Record 472);
    VAR
      JobQueueEntry2@1001 : Record 472;
    BEGIN
      JobQueueEntry2.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run");
      JobQueueEntry2.SETRANGE("Object ID to Run",JobQueueEntry."Object ID to Run");
      JobQueueEntry2.SETRANGE("Record ID to Process",JobQueueEntry."Record ID to Process");
      JobQueueEntry2.SETRANGE(Status,JobQueueEntry2.Status::Error);
      IF NOT JobQueueEntry2.ISEMPTY THEN
        JobQueueEntry2.DELETEALL;
    END;

    LOCAL PROCEDURE CheckIfJobQueueIsRunning@3(JobQueueCategoryCode@1000 : Code[10]);
    BEGIN
      IF NOT JobQueueIsRunning(JobQueueCategoryCode) THEN
        MESSAGE(JobHasBeenScheduledMsg);
    END;

    PROCEDURE JobQueueIsRunning@2(JobQueueCategoryCode@1000 : Code[10]) : Boolean;
    VAR
      JobQueue@1001 : Record 470;
      TempJobQueueCategory@1002 : TEMPORARY Record 471;
      HasActiveQueue@1003 : Boolean;
      MoreRecords@1004 : Boolean;
    BEGIN
      TempJobQueueCategory.Code := JobQueueCategoryCode;
      TempJobQueueCategory.INSERT;
      IF JobQueue.FINDSET THEN
        REPEAT
          IF JobQueue.QueueIsRunning THEN
            IF JobQueue."Job Queue Category Filter" = '' THEN
              HasActiveQueue := TRUE
            ELSE BEGIN
              TempJobQueueCategory.SETFILTER(Code,JobQueue."Job Queue Category Filter");
              HasActiveQueue := NOT TempJobQueueCategory.ISEMPTY;
            END;
          IF NOT HasActiveQueue THEN
            MoreRecords := JobQueue.NEXT <> 0;
        UNTIL HasActiveQueue OR NOT MoreRecords;
      EXIT(HasActiveQueue);
    END;

    BEGIN
    END.
  }
}

