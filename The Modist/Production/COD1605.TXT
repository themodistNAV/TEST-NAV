OBJECT Codeunit 1605 PEPPOL Management
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SalespersonTxt@1000 : TextConst 'ENU=Salesperson;ENG=Salesperson';
      InvoiceDisAmtTxt@1001 : TextConst 'ENU=Invoice Discount Amount;ENG=Invoice Discount Amount';
      LineDisAmtTxt@1011 : TextConst 'ENU=Line Discount Amount;ENG=Line Discount Amount';
      GLNTxt@1008 : TextConst '@@@={locked};ENU=GLN;ENG=GLN';
      VATTxt@1007 : TextConst '@@@={locked};ENU=VAT;ENG=VAT';
      MultiplyTxt@1006 : TextConst '@@@={locked};ENU=Multiply;ENG=Multiply';
      IBANPaymentSchemeIDTxt@1005 : TextConst '@@@={locked};ENU=IBAN;ENG=IBAN';
      LocalPaymentSchemeIDTxt@1004 : TextConst '@@@={locked};ENU=LOCAL;ENG=LOCAL';
      BICTxt@1003 : TextConst '@@@={locked};ENU=BIC;ENG=BIC';
      AllowanceChargeReasonCodeTxt@1002 : TextConst '@@@={locked};ENU=78;ENG=78';
      PaymentMeansFundsTransferCodeTxt@1009 : TextConst '@@@={locked};ENU=31;ENG=31';
      GTINTxt@1010 : TextConst '@@@={locked};ENU=GTIN;ENG=GTIN';
      UoMforPieceINUNECERec20ListIDTxt@1013 : TextConst '@@@={Locked};ENU=EA;ENG=EA';
      NoUnitOfMeasureErr@1014 : TextConst '@@@=1: document type, 2: document no 3 Unit of Measure Code;ENU=The %1 %2 contains lines on which the %3 field is empty.;ENG=The %1 %2 contains lines on which the %3 field is empty.';

    PROCEDURE GetGeneralInfo@11(SalesHeader@1014 : Record 36;VAR ID@1010 : Text;VAR IssueDate@1009 : Text;VAR InvoiceTypeCode@1008 : Text;VAR InvoiceTypeCodeListID@1007 : Text;VAR Note@1006 : Text;VAR TaxPointDate@1005 : Text;VAR DocumentCurrencyCode@1004 : Text;VAR DocumentCurrencyCodeListID@1003 : Text;VAR TaxCurrencyCode@1002 : Text;VAR TaxCurrencyCodeListID@1001 : Text;VAR AccountingCost@1000 : Text);
    VAR
      GLSetup@1015 : Record 98;
    BEGIN
      ID := SalesHeader."No.";

      IssueDate := FORMAT(SalesHeader."Document Date",0,9);
      InvoiceTypeCode := GetInvoiceTypeCode;
      InvoiceTypeCodeListID := GetUNCL1001ListID;
      Note := '';

      GLSetup.GET;
      TaxPointDate := '';
      DocumentCurrencyCode := GetSalesDocCurrencyCode(SalesHeader);
      DocumentCurrencyCodeListID := GetISO4217ListID;
      TaxCurrencyCode := DocumentCurrencyCode;
      TaxCurrencyCodeListID := GetISO4217ListID;
      AccountingCost := '';
    END;

    PROCEDURE GetInvoicePeriodInfo@12(VAR StartDate@1000 : Text;VAR EndDate@1001 : Text);
    BEGIN
      StartDate := '';
      EndDate := '';
    END;

    PROCEDURE GetOrderReferenceInfo@13(SalesHeader@1001 : Record 36;VAR OrderReferenceID@1000 : Text);
    BEGIN
      OrderReferenceID := SalesHeader."External Document No.";
    END;

    PROCEDURE GetContractDocRefInfo@14(SalesHeader@1004 : Record 36;VAR ContractDocumentReferenceID@1000 : Text;VAR DocumentTypeCode@1001 : Text;VAR ContractRefDocTypeCodeListID@1002 : Text;VAR DocumentType@1003 : Text);
    BEGIN
      ContractDocumentReferenceID := SalesHeader."No.";
      DocumentTypeCode := '';
      ContractRefDocTypeCodeListID := GetUNCL1001ListID;
      DocumentType := '';
    END;

    PROCEDURE GetAdditionalDocRefInfo@15(VAR AdditionalDocumentReferenceID@1000 : Text;VAR AdditionalDocRefDocumentType@1001 : Text;VAR URI@1002 : Text;VAR MimeCode@1003 : Text;VAR EmbeddedDocumentBinaryObject@1004 : Text);
    BEGIN
      AdditionalDocumentReferenceID := '';
      AdditionalDocRefDocumentType := '';
      URI := '';
      MimeCode := '';
      EmbeddedDocumentBinaryObject := '';
    END;

    PROCEDURE GetAccountingSupplierPartyInfo@16(VAR SupplierEndpointID@1005 : Text;VAR SupplierSchemeID@1006 : Text;VAR SupplierName@1007 : Text);
    VAR
      CompanyInfo@1002 : Record 79;
    BEGIN
      CompanyInfo.GET;
      IF CompanyInfo.GLN <> '' THEN BEGIN
        SupplierEndpointID := CompanyInfo.GLN;
        SupplierSchemeID := GLNTxt;
      END ELSE
        IF CompanyInfo."VAT Registration No." <> '' THEN BEGIN
          SupplierEndpointID := CompanyInfo."VAT Registration No.";
          SupplierSchemeID := GetVATScheme(CompanyInfo."Country/Region Code");
        END;

      SupplierName := CompanyInfo.Name;
    END;

    PROCEDURE GetAccountingSupplierPartyPostalAddr@1(SalesHeader@1003 : Record 36;VAR StreetName@1008 : Text;VAR SupplierAdditionalStreetName@1009 : Text;VAR CityName@1010 : Text;VAR PostalZone@1011 : Text;VAR CountrySubentity@1012 : Text;VAR IdentificationCode@1013 : Text;VAR ListID@1014 : Text);
    VAR
      CompanyInfo@1002 : Record 79;
      RespCenter@1000 : Record 5714;
    BEGIN
      CompanyInfo.GET;
      IF RespCenter.GET(SalesHeader."Responsibility Center") THEN BEGIN
        CompanyInfo.Address := RespCenter.Address;
        CompanyInfo."Address 2" := RespCenter."Address 2";
        CompanyInfo.City := RespCenter.City;
        CompanyInfo."Post Code" := RespCenter."Post Code";
        CompanyInfo.County := RespCenter.County;
        CompanyInfo."Country/Region Code" := RespCenter."Country/Region Code";
        CompanyInfo."Phone No." := RespCenter."Phone No.";
        CompanyInfo."Fax No." := RespCenter."Fax No.";
      END;

      StreetName := CompanyInfo.Address;
      SupplierAdditionalStreetName := CompanyInfo."Address 2";
      CityName := CompanyInfo.City;
      PostalZone := CompanyInfo."Post Code";
      CountrySubentity := CompanyInfo.County;
      IdentificationCode := CompanyInfo."Country/Region Code";
      ListID := GetISO3166_1Alpha2;
    END;

    PROCEDURE GetAccountingSupplierPartyTaxScheme@4(VAR CompanyID@1015 : Text;VAR CompanyIDSchemeID@1016 : Text;VAR TaxSchemeID@1017 : Text);
    VAR
      CompanyInfo@1000 : Record 79;
    BEGIN
      CompanyInfo.GET;
      IF CompanyInfo."VAT Registration No." <> '' THEN BEGIN
        CompanyID := CompanyInfo."VAT Registration No.";
        CompanyIDSchemeID := GetVATScheme(CompanyInfo."Country/Region Code");
        TaxSchemeID := VATTxt;
      END;
    END;

    PROCEDURE GetAccountingSupplierPartyLegalEntity@6(VAR PartyLegalEntityRegName@1018 : Text;VAR PartyLegalEntityCompanyID@1019 : Text;VAR PartyLegalEntitySchemeID@1020 : Text;VAR SupplierRegAddrCityName@1021 : Text;VAR SupplierRegAddrCountryIdCode@1022 : Text;VAR SupplRegAddrCountryIdListId@1023 : Text);
    VAR
      CompanyInfo@1000 : Record 79;
    BEGIN
      CompanyInfo.GET;

      PartyLegalEntityRegName := CompanyInfo.Name;
      IF CompanyInfo.GLN <> '' THEN BEGIN
        PartyLegalEntityCompanyID := CompanyInfo.GLN;
        PartyLegalEntitySchemeID := GLNTxt;
      END ELSE
        IF CompanyInfo."VAT Registration No." <> '' THEN BEGIN
          PartyLegalEntityCompanyID := CompanyInfo."VAT Registration No.";
          PartyLegalEntitySchemeID := GetVATScheme(CompanyInfo."Country/Region Code");
        END;

      SupplierRegAddrCityName := CompanyInfo.City;
      SupplierRegAddrCountryIdCode := CompanyInfo."Country/Region Code";
      SupplRegAddrCountryIdListId := GetISO3166_1Alpha2;
    END;

    PROCEDURE GetAccountingSupplierPartyContact@7(SalesHeader@1003 : Record 36;VAR ContactID@1024 : Text;VAR ContactName@1025 : Text;VAR Telephone@1026 : Text;VAR Telefax@1027 : Text;VAR ElectronicMail@1028 : Text);
    VAR
      CompanyInfo@1000 : Record 79;
      Salesperson@1001 : Record 13;
    BEGIN
      CompanyInfo.GET;
      GetSalesperson(SalesHeader,Salesperson);
      ContactID := SalespersonTxt;
      ContactName := Salesperson.Name;
      Telephone := Salesperson."Phone No.";
      Telefax := CompanyInfo."Telex No.";
      ElectronicMail := Salesperson."E-Mail";
    END;

    PROCEDURE GetAccountingCustomerPartyInfo@17(SalesHeader@1003 : Record 36;VAR CustomerEndpointID@1004 : Text;VAR CustomerSchemeID@1005 : Text;VAR CustomerPartyIdentificationID@1006 : Text;VAR CustomerPartyIDSchemeID@1007 : Text;VAR CustomerName@1008 : Text);
    VAR
      Cust@1001 : Record 18;
    BEGIN
      Cust.GET(SalesHeader."Bill-to Customer No.");
      IF Cust.GLN <> '' THEN BEGIN
        CustomerEndpointID := Cust.GLN;
        CustomerSchemeID := GLNTxt;
      END ELSE
        IF SalesHeader."VAT Registration No." <> '' THEN BEGIN
          CustomerEndpointID := SalesHeader."VAT Registration No.";
          CustomerSchemeID := GetVATScheme(SalesHeader."Bill-to Country/Region Code");
        END;

      CustomerPartyIdentificationID := Cust.GLN;
      CustomerPartyIDSchemeID := GLNTxt;
      CustomerName := SalesHeader."Bill-to Name";
    END;

    PROCEDURE GetAccountingCustomerPartyPostalAddr@8(SalesHeader@1003 : Record 36;VAR CustomerStreetName@1009 : Text;VAR CustomerAdditionalStreetName@1010 : Text;VAR CustomerCityName@1011 : Text;VAR CustomerPostalZone@1012 : Text;VAR CustomerCountrySubentity@1013 : Text;VAR CustomerIdentificationCode@1014 : Text;VAR CustomerListID@1015 : Text);
    BEGIN
      CustomerStreetName := SalesHeader."Bill-to Address";
      CustomerAdditionalStreetName := SalesHeader."Bill-to Address 2";
      CustomerCityName := SalesHeader."Bill-to City";
      CustomerPostalZone := SalesHeader."Bill-to Post Code";
      CustomerCountrySubentity := SalesHeader."Bill-to County";
      CustomerIdentificationCode := SalesHeader."Bill-to Country/Region Code";
      CustomerListID := GetISO3166_1Alpha2;
    END;

    PROCEDURE GetAccountingCustomerPartyTaxScheme@20(SalesHeader@1003 : Record 36;VAR CustPartyTaxSchemeCompanyID@1017 : Text;VAR CustPartyTaxSchemeCompIDSchID@1018 : Text;VAR CustTaxSchemeID@1019 : Text);
    BEGIN
      IF SalesHeader."VAT Registration No." <> '' THEN BEGIN
        CustPartyTaxSchemeCompanyID := SalesHeader."VAT Registration No.";
        CustPartyTaxSchemeCompIDSchID := GetVATScheme(SalesHeader."Bill-to Country/Region Code");
        CustTaxSchemeID := VATTxt;
      END;
    END;

    PROCEDURE GetAccountingCustomerPartyLegalEntity@24(SalesHeader@1000 : Record 36;VAR CustPartyLegalEntityRegName@1020 : Text;VAR CustPartyLegalEntityCompanyID@1021 : Text;VAR CustPartyLegalEntityIDSchemeID@1022 : Text);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      IF Customer.GET(SalesHeader."Bill-to Customer No.") THEN BEGIN
        CustPartyLegalEntityRegName := Customer.Name;
        IF Customer.GLN <> '' THEN BEGIN
          CustPartyLegalEntityCompanyID := Customer.GLN;
          CustPartyLegalEntityIDSchemeID := GLNTxt;
        END ELSE
          IF SalesHeader."VAT Registration No." <> '' THEN BEGIN
            CustPartyLegalEntityCompanyID := SalesHeader."VAT Registration No.";
            CustPartyLegalEntityIDSchemeID := GetVATScheme(SalesHeader."Bill-to Country/Region Code");
          END;
      END;
    END;

    PROCEDURE GetAccountingCustomerPartyContact@25(SalesHeader@1003 : Record 36;VAR CustContactID@1023 : Text;VAR CustContactName@1024 : Text;VAR CustContactTelephone@1025 : Text;VAR CustContactTelefax@1026 : Text;VAR CustContactElectronicMail@1027 : Text);
    VAR
      Customer@1000 : Record 18;
    BEGIN
      CustContactID := SalesHeader."Your Reference";
      CustContactName := SalesHeader."Bill-to Name";

      IF Customer.GET(SalesHeader."Bill-to Customer No.") THEN BEGIN
        CustContactTelephone := Customer."Phone No.";
        CustContactTelefax := Customer."Telex No.";
        CustContactElectronicMail := Customer."E-Mail";
      END;
    END;

    PROCEDURE GetPayeePartyInfo@18(VAR PayeePartyID@1000 : Text;VAR PayeePartyIDSchemeID@1001 : Text;VAR PayeePartyNameName@1002 : Text;VAR PayeePartyLegalEntityCompanyID@1003 : Text;VAR PayeePartyLegalCompIDSchemeID@1004 : Text);
    VAR
      CompanyInfo@1005 : Record 79;
    BEGIN
      CompanyInfo.GET;

      PayeePartyID := CompanyInfo.GLN;
      PayeePartyIDSchemeID := GLNTxt;
      PayeePartyNameName := CompanyInfo.Name;
      PayeePartyLegalEntityCompanyID := CompanyInfo."VAT Registration No.";
      PayeePartyLegalCompIDSchemeID := VATTxt;
    END;

    PROCEDURE GetTaxRepresentativePartyInfo@19(VAR TaxRepPartyNameName@1000 : Text;VAR PayeePartyTaxSchemeCompanyID@1001 : Text;VAR PayeePartyTaxSchCompIDSchemeID@1002 : Text;VAR PayeePartyTaxSchemeTaxSchemeID@1003 : Text);
    BEGIN
      TaxRepPartyNameName := '';
      PayeePartyTaxSchemeCompanyID := '';
      PayeePartyTaxSchCompIDSchemeID := '';
      PayeePartyTaxSchemeTaxSchemeID := '';
    END;

    PROCEDURE GetDeliveryInfo@53(VAR ActualDeliveryDate@1000 : Text;VAR DeliveryID@1001 : Text;VAR DeliveryIDSchemeID@1002 : Text);
    BEGIN
      ActualDeliveryDate := '';
      DeliveryID := '';
      DeliveryIDSchemeID := '';
    END;

    PROCEDURE GetDeliveryAddress@33(SalesHeader@1010 : Record 36;VAR DeliveryStreetName@1003 : Text;VAR DeliveryAdditionalStreetName@1004 : Text;VAR DeliveryCityName@1005 : Text;VAR DeliveryPostalZone@1006 : Text;VAR DeliveryCountrySubentity@1007 : Text;VAR DeliveryCountryIdCode@1008 : Text;VAR DeliveryCountryListID@1009 : Text);
    BEGIN
      DeliveryStreetName := SalesHeader."Ship-to Address";
      DeliveryAdditionalStreetName := SalesHeader."Ship-to Address 2";
      DeliveryCityName := SalesHeader."Ship-to City";
      DeliveryPostalZone := SalesHeader."Ship-to Post Code";
      DeliveryCountrySubentity := SalesHeader."Ship-to County";
      DeliveryCountryIdCode := SalesHeader."Ship-to Country/Region Code";
      DeliveryCountryListID := GetISO3166_1Alpha2;
    END;

    PROCEDURE GetPaymentMeansInfo@21(SalesHeader@1015 : Record 36;VAR PaymentMeansCode@1000 : Text;VAR PaymentMeansListID@1001 : Text;VAR PaymentDueDate@1002 : Text;VAR PaymentChannelCode@1003 : Text;VAR PaymentID@1004 : Text;VAR PrimaryAccountNumberID@1005 : Text;VAR NetworkID@1006 : Text);
    BEGIN
      PaymentMeansCode := PaymentMeansFundsTransferCodeTxt;
      PaymentMeansListID := GetUNCL4461ListID;
      PaymentDueDate := FORMAT(SalesHeader."Due Date",0,9);
      PaymentChannelCode := '';
      PaymentID := '';
      PrimaryAccountNumberID := '';
      NetworkID := '';
    END;

    PROCEDURE GetPaymentMeansPayeeFinancialAcc@37(VAR PayeeFinancialAccountID@1007 : Text;VAR PaymentMeansSchemeID@1008 : Text;VAR FinancialInstitutionBranchID@1009 : Text;VAR FinancialInstitutionID@1010 : Text;VAR FinancialInstitutionSchemeID@1011 : Text;VAR FinancialInstitutionName@1012 : Text);
    VAR
      CompanyInfo@1016 : Record 79;
    BEGIN
      CompanyInfo.GET;
      IF CompanyInfo.IBAN <> '' THEN BEGIN
        PayeeFinancialAccountID := DELCHR(CompanyInfo.IBAN,'=',' ');
        PaymentMeansSchemeID := IBANPaymentSchemeIDTxt;
      END ELSE
        IF CompanyInfo."Bank Account No." <> '' THEN BEGIN
          PayeeFinancialAccountID := CompanyInfo."Bank Account No.";
          PaymentMeansSchemeID := LocalPaymentSchemeIDTxt;
        END;

      FinancialInstitutionBranchID := CompanyInfo."Bank Branch No.";
      FinancialInstitutionID := DELCHR(CompanyInfo."SWIFT Code",'=',' ');
      FinancialInstitutionSchemeID := BICTxt;
      FinancialInstitutionName := CompanyInfo."Bank Name";
    END;

    PROCEDURE GetPaymentMeansFinancialInstitutionAddr@34(VAR FinancialInstitutionStreetName@1013 : Text;VAR AdditionalStreetName@1014 : Text;VAR FinancialInstitutionCityName@1017 : Text;VAR FinancialInstitutionPostalZone@1018 : Text;VAR FinancialInstCountrySubentity@1019 : Text;VAR FinancialInstCountryIdCode@1020 : Text;VAR FinancialInstCountryListID@1021 : Text);
    BEGIN
      FinancialInstitutionStreetName := '';
      AdditionalStreetName := '';
      FinancialInstitutionCityName := '';
      FinancialInstitutionPostalZone := '';
      FinancialInstCountrySubentity := '';
      FinancialInstCountryIdCode := '';
      FinancialInstCountryListID := '';
    END;

    PROCEDURE GetPaymentTermsInfo@35(SalesHeader@1001 : Record 36;VAR PaymentTermsNote@1002 : Text);
    VAR
      PmtTerms@1000 : Record 3;
    BEGIN
      IF SalesHeader."Payment Terms Code" = '' THEN
        PmtTerms.INIT
      ELSE BEGIN
        PmtTerms.GET(SalesHeader."Payment Terms Code");
        PmtTerms.TranslateDescription(PmtTerms,SalesHeader."Language Code");
      END;

      PaymentTermsNote := PmtTerms.Description;
    END;

    PROCEDURE GetAllowanceChargeInfo@22(VATAmtLine@1000 : Record 290;SalesHeader@1011 : Record 36;VAR ChargeIndicator@1001 : Text;VAR AllowanceChargeReasonCode@1002 : Text;VAR AllowanceChargeListID@1003 : Text;VAR AllowanceChargeReason@1004 : Text;VAR Amount@1005 : Text;VAR AllowanceChargeCurrencyID@1006 : Text;VAR TaxCategoryID@1007 : Text;VAR TaxCategorySchemeID@1008 : Text;VAR Percent@1009 : Text;VAR AllowanceChargeTaxSchemeID@1010 : Text);
    BEGIN
      IF VATAmtLine."Invoice Discount Amount" = 0 THEN BEGIN
        ChargeIndicator := '';
        EXIT;
      END;

      ChargeIndicator := 'false';
      AllowanceChargeReasonCode := AllowanceChargeReasonCodeTxt;
      AllowanceChargeListID := GetUNCL4465ListID;
      AllowanceChargeReason := InvoiceDisAmtTxt;
      Amount := FORMAT(VATAmtLine."Invoice Discount Amount",0,9);
      AllowanceChargeCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
      TaxCategoryID := VATAmtLine."VAT Identifier";
      TaxCategorySchemeID := GetUNCL5305ListID;
      Percent := FORMAT(VATAmtLine."VAT %",0,9);
      AllowanceChargeTaxSchemeID := VATTxt;
    END;

    PROCEDURE GetTaxExchangeRateInfo@32(SalesHeader@1008 : Record 36;VAR SourceCurrencyCode@1001 : Text;VAR SourceCurrencyCodeListID@1002 : Text;VAR TargetCurrencyCode@1003 : Text;VAR TargetCurrencyCodeListID@1004 : Text;VAR CalculationRate@1005 : Text;VAR MathematicOperatorCode@1006 : Text;VAR Date@1007 : Text);
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      GLSetup.GET;
      IF GLSetup."LCY Code" = GetSalesDocCurrencyCode(SalesHeader) THEN
        EXIT;

      SourceCurrencyCode := GetSalesDocCurrencyCode(SalesHeader);
      SourceCurrencyCodeListID := GetISO4217ListID;
      TargetCurrencyCode := GLSetup."LCY Code";
      TargetCurrencyCodeListID := GetISO4217ListID;
      CalculationRate := FORMAT(SalesHeader."Currency Factor",0,9);
      MathematicOperatorCode := MultiplyTxt;
      Date := FORMAT(SalesHeader."Posting Date",0,9);
    END;

    PROCEDURE GetTaxTotalInfo@23(SalesHeader@1003 : Record 36;VAR VATAmtLine@1004 : Record 290;VAR TaxAmount@1000 : Text;VAR TaxTotalCurrencyID@1001 : Text);
    BEGIN
      VATAmtLine.CALCSUMS(VATAmtLine."VAT Amount");
      TaxAmount := FORMAT(VATAmtLine."VAT Amount",0,9);
      TaxTotalCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
    END;

    PROCEDURE GetTaxSubtotalInfo@89(VATAmtLine@1010 : Record 290;SalesHeader@1012 : Record 36;VAR TaxableAmount@1000 : Text;VAR TaxAmountCurrencyID@1001 : Text;VAR SubtotalTaxAmount@1002 : Text;VAR TaxSubtotalCurrencyID@1003 : Text;VAR TransactionCurrencyTaxAmount@1004 : Text;VAR TransCurrTaxAmtCurrencyID@1005 : Text;VAR TaxTotalTaxCategoryID@1006 : Text;VAR schemeID@1007 : Text;VAR TaxCategoryPercent@1008 : Text;VAR TaxTotalTaxSchemeID@1009 : Text);
    VAR
      GLSetup@1011 : Record 98;
    BEGIN
      TaxableAmount := FORMAT(VATAmtLine."VAT Base",0,9);
      TaxAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
      SubtotalTaxAmount := FORMAT(VATAmtLine."VAT Amount",0,9);
      TaxSubtotalCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
      GLSetup.GET;
      IF GLSetup."LCY Code" <> GetSalesDocCurrencyCode(SalesHeader) THEN BEGIN
        TransactionCurrencyTaxAmount :=
          FORMAT(
            VATAmtLine.GetAmountLCY(
              SalesHeader."Posting Date",
              GetSalesDocCurrencyCode(SalesHeader),
              SalesHeader."Currency Factor"),0,9);
        TransCurrTaxAmtCurrencyID := GLSetup."LCY Code";
      END;
      TaxTotalTaxCategoryID := VATAmtLine."VAT Identifier";
      schemeID := GetUNCL5305ListID;
      TaxCategoryPercent := FORMAT(VATAmtLine."VAT %",0,9);
      TaxTotalTaxSchemeID := VATTxt;
    END;

    PROCEDURE GetLegalMonetaryInfo@64(SalesHeader@1019 : Record 36;VAR VATAmtLine@1020 : Record 290;VAR LineExtensionAmount@1000 : Text;VAR LegalMonetaryTotalCurrencyID@1001 : Text;VAR TaxExclusiveAmount@1002 : Text;VAR TaxExclusiveAmountCurrencyID@1003 : Text;VAR TaxInclusiveAmount@1004 : Text;VAR TaxInclusiveAmountCurrencyID@1005 : Text;VAR AllowanceTotalAmount@1006 : Text;VAR AllowanceTotalAmountCurrencyID@1007 : Text;VAR ChargeTotalAmount@1008 : Text;VAR ChargeTotalAmountCurrencyID@1009 : Text;VAR PrepaidAmount@1010 : Text;VAR PrepaidCurrencyID@1011 : Text;VAR PayableRoundingAmount@1012 : Text;VAR PayableRndingAmountCurrencyID@1013 : Text;VAR PayableAmount@1014 : Text;VAR PayableAmountCurrencyID@1015 : Text);
    BEGIN
      VATAmtLine.RESET;
      VATAmtLine.CALCSUMS("Line Amount","VAT Base","Amount Including VAT","Invoice Discount Amount");

      LineExtensionAmount := FORMAT(ROUND(VATAmtLine."Line Amount",0.01),0,9);
      LegalMonetaryTotalCurrencyID := GetSalesDocCurrencyCode(SalesHeader);

      TaxExclusiveAmount := FORMAT(ROUND(VATAmtLine."VAT Base",0.01),0,9);
      TaxExclusiveAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);

      TaxInclusiveAmount := FORMAT(ROUND(VATAmtLine."Amount Including VAT",0.01,'>'),0,9); // Should be two decimal places
      TaxInclusiveAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);

      AllowanceTotalAmount := FORMAT(ROUND(VATAmtLine."Invoice Discount Amount",0.01),0,9);
      AllowanceTotalAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
      TaxInclusiveAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);

      ChargeTotalAmount := '';
      ChargeTotalAmountCurrencyID := '';

      PrepaidAmount := '0.00';
      PrepaidCurrencyID := GetSalesDocCurrencyCode(SalesHeader);

      PayableRoundingAmount :=
        FORMAT(VATAmtLine."Amount Including VAT" - ROUND(VATAmtLine."Amount Including VAT",0.01),0,9);
      PayableRndingAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);

      PayableAmount := FORMAT(ROUND(VATAmtLine."Amount Including VAT",0.01),0,9);
      PayableAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
    END;

    PROCEDURE GetLineGeneralInfo@65(SalesLine@1009 : Record 37;SalesHeader@1010 : Record 36;VAR InvoiceLineID@1001 : Text;VAR InvoiceLineNote@1002 : Text;VAR InvoicedQuantity@1003 : Text;VAR InvoiceLineExtensionAmount@1006 : Text;VAR LineExtensionAmountCurrencyID@1007 : Text;VAR InvoiceLineAccountingCost@1008 : Text);
    BEGIN
      InvoiceLineID := FORMAT(SalesLine."Line No.",0,9);
      InvoiceLineNote := FORMAT(SalesLine.Type);
      InvoicedQuantity := FORMAT(SalesLine.Quantity,0,9);
      InvoiceLineExtensionAmount := FORMAT(SalesLine."Line Amount",0,9);
      LineExtensionAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
      InvoiceLineAccountingCost := '';
    END;

    PROCEDURE GetLineUnitCodeInfo@39(SalesLine@1009 : Record 37;VAR unitCode@1004 : Text;VAR unitCodeListID@1005 : Text);
    VAR
      UOM@1000 : Record 204;
    BEGIN
      unitCode := '';
      unitCodeListID := GetUNECERec20ListID;

      IF SalesLine.Quantity = 0 THEN BEGIN
        unitCode := UoMforPieceINUNECERec20ListIDTxt; // unitCode is required
        EXIT;
      END;

      WITH SalesLine DO
        CASE Type OF
          Type::Item,Type::Resource:
            BEGIN
              IF UOM.GET("Unit of Measure Code") THEN
                unitCode := UOM."International Standard Code"
              ELSE
                ERROR(NoUnitOfMeasureErr,"Document Type","Document No.",FIELDCAPTION("Unit of Measure Code"));
            END;
          Type::"G/L Account",Type::"Fixed Asset",Type::"Charge (Item)":
            BEGIN
              IF UOM.GET("Unit of Measure Code") THEN
                unitCode := UOM."International Standard Code"
              ELSE
                unitCode := UoMforPieceINUNECERec20ListIDTxt;
            END;
        END;
    END;

    PROCEDURE GetLineInvoicePeriodInfo@26(VAR InvLineInvoicePeriodStartDate@1000 : Text;VAR InvLineInvoicePeriodEndDate@1001 : Text);
    BEGIN
      InvLineInvoicePeriodStartDate := '';
      InvLineInvoicePeriodEndDate := '';
    END;

    PROCEDURE GetLineOrderLineRefInfo@27();
    BEGIN
    END;

    PROCEDURE GetLineDeliveryInfo@28(VAR InvoiceLineActualDeliveryDate@1000 : Text;VAR InvoiceLineDeliveryID@1001 : Text;VAR InvoiceLineDeliveryIDSchemeID@1002 : Text);
    BEGIN
      InvoiceLineActualDeliveryDate := '';
      InvoiceLineDeliveryID := '';
      InvoiceLineDeliveryIDSchemeID := '';
    END;

    PROCEDURE GetLineDeliveryPostalAddr@36(VAR InvoiceLineDeliveryStreetName@1003 : Text;VAR InvLineDeliveryAddStreetName@1004 : Text;VAR InvoiceLineDeliveryCityName@1005 : Text;VAR InvoiceLineDeliveryPostalZone@1006 : Text;VAR InvLnDeliveryCountrySubentity@1007 : Text;VAR InvLnDeliveryCountryIdCode@1008 : Text;VAR InvLineDeliveryCountryListID@1009 : Text);
    BEGIN
      InvoiceLineDeliveryStreetName := '';
      InvLineDeliveryAddStreetName := '';
      InvoiceLineDeliveryCityName := '';
      InvoiceLineDeliveryPostalZone := '';
      InvLnDeliveryCountrySubentity := '';
      InvLnDeliveryCountryIdCode := '';
      InvLineDeliveryCountryListID := GetISO3166_1Alpha2;
    END;

    PROCEDURE GetLineAllowanceChargeInfo@29(SalesLine@1004 : Record 37;SalesHeader@1005 : Record 36;VAR InvLnAllowanceChargeIndicator@1000 : Text;VAR InvLnAllowanceChargeReason@1001 : Text;VAR InvLnAllowanceChargeAmount@1002 : Text;VAR InvLnAllowanceChargeAmtCurrID@1003 : Text);
    BEGIN
      InvLnAllowanceChargeIndicator := '';
      InvLnAllowanceChargeReason := '';
      InvLnAllowanceChargeAmount := '';
      InvLnAllowanceChargeAmtCurrID := '';
      IF SalesLine."Line Discount Amount" = 0 THEN
        EXIT;

      InvLnAllowanceChargeIndicator := 'false';
      InvLnAllowanceChargeReason := LineDisAmtTxt;
      InvLnAllowanceChargeAmount := FORMAT(SalesLine."Line Discount Amount",0,9);
      InvLnAllowanceChargeAmtCurrID := GetSalesDocCurrencyCode(SalesHeader);
    END;

    PROCEDURE GetLineTaxTotal@81(SalesLine@1002 : Record 37;SalesHeader@1003 : Record 36;VAR InvoiceLineTaxAmount@1000 : Text;VAR currencyID@1001 : Text);
    BEGIN
      InvoiceLineTaxAmount := FORMAT(SalesLine."Amount Including VAT" - SalesLine.Amount,0,9);
      currencyID := GetSalesDocCurrencyCode(SalesHeader);
    END;

    PROCEDURE GetLineItemInfo@30(SalesLine@1011 : Record 37;VAR Description@1000 : Text;VAR Name@1001 : Text;VAR SellersItemIdentificationID@1002 : Text;VAR StandardItemIdentificationID@1003 : Text;VAR StdItemIdIDSchemeID@1004 : Text;VAR OriginCountryIdCode@1005 : Text;VAR OriginCountryIdCodeListID@1006 : Text);
    VAR
      Item@1007 : Record 27;
    BEGIN
      Name := SalesLine.Description;
      Description := SalesLine."Description 2";

      IF (SalesLine.Type = SalesLine.Type::Item) AND Item.GET(SalesLine."No.") THEN BEGIN
        SellersItemIdentificationID := SalesLine."No.";
        StandardItemIdentificationID := Item.GTIN;
        StdItemIdIDSchemeID := GTINTxt;
      END ELSE BEGIN
        SellersItemIdentificationID := '';
        StandardItemIdentificationID := '';
        StdItemIdIDSchemeID := '';
      END;

      OriginCountryIdCode := '';
      OriginCountryIdCodeListID := '';
      IF SalesLine.Type <> SalesLine.Type::" " THEN
        OriginCountryIdCodeListID := GetISO3166_1Alpha2
    END;

    PROCEDURE GetLineItemCommodityClassficationInfo@61(VAR CommodityCode@1007 : Text;VAR CommodityCodeListID@1006 : Text;VAR ItemClassificationCode@1005 : Text;VAR ItemClassificationCodeListID@1004 : Text);
    BEGIN
      CommodityCode := '';
      CommodityCodeListID := '';

      ItemClassificationCode := '';
      ItemClassificationCodeListID := '';
    END;

    PROCEDURE GetLineItemClassfiedTaxCategory@40(SalesLine@1004 : Record 37;VAR ClassifiedTaxCategoryID@1003 : Text;VAR ItemSchemeID@1002 : Text;VAR InvoiceLineTaxPercent@1001 : Text;VAR ClassifiedTaxCategorySchemeID@1000 : Text);
    VAR
      VATPostingSetup@1005 : Record 325;
    BEGIN
      IF VATPostingSetup.GET(SalesLine."VAT Bus. Posting Group",SalesLine."VAT Prod. Posting Group") THEN
        ClassifiedTaxCategoryID := VATPostingSetup."Tax Category";
      ItemSchemeID := GetUNCL5305ListID;
      InvoiceLineTaxPercent := FORMAT(SalesLine."VAT %",0,9);
      ClassifiedTaxCategorySchemeID := VATTxt;
    END;

    PROCEDURE GetLineAdditionalItemPropertyInfo@97(SalesLine@1003 : Record 37;VAR AdditionalItemPropertyName@1001 : Text;VAR AdditionalItemPropertyValue@1002 : Text);
    VAR
      ItemVariant@1000 : Record 5401;
    BEGIN
      AdditionalItemPropertyName := '';
      AdditionalItemPropertyValue := '';

      IF SalesLine.Type <> SalesLine.Type::Item THEN
        EXIT;
      IF SalesLine."No." = '' THEN
        EXIT;
      IF NOT ItemVariant.GET(SalesLine."No.",SalesLine."Variant Code") THEN
        EXIT;

      AdditionalItemPropertyName := ItemVariant.Code;
      AdditionalItemPropertyValue := ItemVariant.Description;
    END;

    PROCEDURE GetLinePriceInfo@31(SalesLine@1003 : Record 37;SalesHeader@1004 : Record 36;VAR InvoiceLinePriceAmount@1000 : Text;VAR InvLinePriceAmountCurrencyID@1001 : Text;VAR BaseQuantity@1002 : Text;VAR UnitCode@1005 : Text);
    VAR
      unitCodeListID@1006 : Text;
    BEGIN
      InvoiceLinePriceAmount := FORMAT(SalesLine."Unit Price",0,9);
      InvLinePriceAmountCurrencyID := GetSalesDocCurrencyCode(SalesHeader);
      BaseQuantity := '1';
      GetLineUnitCodeInfo(SalesLine,UnitCode,unitCodeListID);
    END;

    PROCEDURE GetLinePriceAllowanceChargeInfo@90(VAR PriceChargeIndicator@1000 : Text;VAR PriceAllowanceChargeAmount@1001 : Text;VAR PriceAllowanceAmountCurrencyID@1002 : Text;VAR PriceAllowanceChargeBaseAmount@1003 : Text;VAR PriceAllowChargeBaseAmtCurrID@1004 : Text);
    BEGIN
      PriceChargeIndicator := '';
      PriceAllowanceChargeAmount := '';
      PriceAllowanceAmountCurrencyID := '';
      PriceAllowanceChargeBaseAmount := '';
      PriceAllowChargeBaseAmtCurrID := '';
    END;

    LOCAL PROCEDURE GetSalesDocCurrencyCode@3(SalesHeader@1000 : Record 36) : Code[10];
    VAR
      GLSetup@1001 : Record 98;
    BEGIN
      IF SalesHeader."Currency Code" = '' THEN BEGIN
        GLSetup.GET;
        GLSetup.TESTFIELD("LCY Code");
        EXIT(GLSetup."LCY Code");
      END;
      EXIT(SalesHeader."Currency Code");
    END;

    LOCAL PROCEDURE GetSalesperson@1170000002(SalesHeader@1001 : Record 36;VAR Salesperson@1000 : Record 13);
    BEGIN
      IF SalesHeader."Salesperson Code" = '' THEN
        Salesperson.INIT
      ELSE
        Salesperson.GET(SalesHeader."Salesperson Code");
    END;

    PROCEDURE GetCrMemoBillingReferenceInfo@5(SalesCrMemoHeader@1005 : Record 114;VAR InvoiceDocRefID@1003 : Text;VAR InvoiceDocRefIssueDate@1004 : Text);
    VAR
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      IF (SalesCrMemoHeader."Applies-to Doc. Type" = SalesCrMemoHeader."Applies-to Doc. Type"::Invoice) AND
         SalesInvoiceHeader.GET(SalesCrMemoHeader."Applies-to Doc. No.")
      THEN BEGIN
        InvoiceDocRefID := SalesInvoiceHeader."No.";
        InvoiceDocRefIssueDate := FORMAT(SalesInvoiceHeader."Posting Date",0,9);
      END;
    END;

    PROCEDURE GetTotals@1170000009(SalesLine@1000 : Record 37;VAR VATAmtLine@1007 : Record 290);
    VAR
      VATPostingSetup@1001 : Record 325;
    BEGIN
      IF NOT VATPostingSetup.GET(SalesLine."VAT Bus. Posting Group",SalesLine."VAT Prod. Posting Group") THEN
        VATPostingSetup.INIT;
      WITH VATAmtLine DO BEGIN
        INIT;
        "VAT Identifier" := VATPostingSetup."Tax Category";
        "VAT Calculation Type" := SalesLine."VAT Calculation Type";
        "Tax Group Code" := SalesLine."Tax Group Code";
        "VAT %" := SalesLine."VAT %";
        "VAT Base" := SalesLine.Amount;
        "Amount Including VAT" := SalesLine."Amount Including VAT";
        "Line Amount" := SalesLine."Line Amount";
        IF SalesLine."Allow Invoice Disc." THEN
          "Inv. Disc. Base Amount" := SalesLine."Line Amount";
        "Invoice Discount Amount" := SalesLine."Inv. Discount Amount";
        InsertLine;
      END;
    END;

    LOCAL PROCEDURE GetInvoiceTypeCode@2() : Text;
    BEGIN
      EXIT('380');
    END;

    LOCAL PROCEDURE GetUNCL1001ListID@95() : Text;
    BEGIN
      EXIT('UNCL1001');
    END;

    LOCAL PROCEDURE GetISO4217ListID@101() : Text;
    BEGIN
      EXIT('ISO4217');
    END;

    LOCAL PROCEDURE GetISO3166_1Alpha2@109() : Text;
    BEGIN
      EXIT('ISO3166-1:Alpha2');
    END;

    LOCAL PROCEDURE GetUNCL4461ListID@111() : Text;
    BEGIN
      EXIT('UNCL4461');
    END;

    LOCAL PROCEDURE GetUNCL4465ListID@94() : Text;
    BEGIN
      EXIT('UNCL4465');
    END;

    LOCAL PROCEDURE GetUNCL5305ListID@103() : Text;
    BEGIN
      EXIT('UNCL5305');
    END;

    LOCAL PROCEDURE GetUNECERec20ListID@104() : Text;
    BEGIN
      EXIT('UNECERec20');
    END;

    LOCAL PROCEDURE GetVATScheme@41(CountryRegionCode@1000 : Code[10]) : Text;
    VAR
      CountryRegion@1001 : Record 9;
      CompanyInfo@1002 : Record 79;
    BEGIN
      IF CountryRegionCode = '' THEN BEGIN
        CompanyInfo.GET;
        CompanyInfo.TESTFIELD("Country/Region Code");
        CountryRegion.GET(CompanyInfo."Country/Region Code");
      END ELSE
        CountryRegion.GET(CountryRegionCode);
      EXIT(CountryRegion."VAT Scheme");
    END;

    PROCEDURE MapServiceLineTypeToSalesLineType@9(ServiceLineType@1000 : Option) : Integer;
    VAR
      SalesLine@1001 : Record 37;
      ServiceInvoiceLine@1002 : Record 5993;
    BEGIN
      CASE ServiceLineType OF
        ServiceInvoiceLine.Type::" ":
          EXIT(SalesLine.Type::" ");
        ServiceInvoiceLine.Type::Item:
          EXIT(SalesLine.Type::Item);
        ServiceInvoiceLine.Type::Resource:
          EXIT(SalesLine.Type::Resource);
        ELSE
          EXIT(SalesLine.Type::"G/L Account");
      END;
    END;

    PROCEDURE TransferHeaderToSalesHeader@42(FromRecord@1000 : Variant;VAR ToSalesHeader@1001 : Record 36);
    VAR
      ToRecord@1003 : Variant;
    BEGIN
      ToRecord := ToSalesHeader;
      RecRefTransferFields(FromRecord,ToRecord);
      ToSalesHeader := ToRecord;
    END;

    PROCEDURE TransferLineToSalesLine@44(FromRecord@1000 : Variant;VAR ToSalesLine@1001 : Record 37);
    VAR
      ToRecord@1003 : Variant;
    BEGIN
      ToRecord := ToSalesLine;
      RecRefTransferFields(FromRecord,ToRecord);
      ToSalesLine := ToRecord;
    END;

    PROCEDURE RecRefTransferFields@10(FromRecord@1004 : Variant;VAR ToRecord@1005 : Variant);
    VAR
      FromRecRef@1000 : RecordRef;
      ToRecRef@1001 : RecordRef;
      FromFieldRef@1002 : FieldRef;
      ToFieldRef@1003 : FieldRef;
      i@1006 : Integer;
    BEGIN
      FromRecRef.GETTABLE(FromRecord);
      ToRecRef.GETTABLE(ToRecord);
      FOR i := 1 TO FromRecRef.FIELDCOUNT DO BEGIN
        FromFieldRef := FromRecRef.FIELDINDEX(i);
        IF ToRecRef.FIELDEXIST(FromFieldRef.NUMBER) THEN BEGIN
          ToFieldRef := ToRecRef.FIELD(FromFieldRef.NUMBER);
          CopyField(FromFieldRef,ToFieldRef);
        END;
      END;
      ToRecRef.SETTABLE(ToRecord);
    END;

    LOCAL PROCEDURE CopyField@38(FromFieldRef@1000 : FieldRef;VAR ToFieldRef@1001 : FieldRef);
    BEGIN
      IF FromFieldRef.CLASS <> ToFieldRef.CLASS THEN
        EXIT;

      IF FromFieldRef.TYPE <> ToFieldRef.TYPE THEN
        EXIT;

      IF FromFieldRef.LENGTH > ToFieldRef.LENGTH THEN
        EXIT;

      ToFieldRef.VALUE := FromFieldRef.VALUE;
    END;

    BEGIN
    END.
  }
}

