OBJECT Table 9087022 Buying Sheet Line
{
  OBJECT-PROPERTIES
  {
    Date=04/02/18;
    Time=[ 1:04:46 PM];
    Modified=Yes;
    Version List=NS2016.16,M0021,M0034,M0035,M0036;
  }
  PROPERTIES
  {
    OnInsert=VAR
               Rec2@1000 : Record 246;
             BEGIN
               Rec.TESTFIELD("Buying Sheet No.");
               UpdateFromBuyingSheetHeader();
               UpdateFromBuyingSheetSummaryLine();
             END;

    OnModify=BEGIN
               IF (Rec."Purchase Order Line Posted") THEN
                 ERROR(errPurchOrderLinePosted);
             END;

    OnDelete=BEGIN
               CheckStatusOpen();
             END;

    CaptionML=[ENU=Buying Sheet Line;
               ENG=Buying Sheet Line];
    LookupPageID=Page9087056;
    DrillDownPageID=Page9087056;
  }
  FIELDS
  {
    { 1   ;   ;Buying Sheet No.    ;Code20        ;TableRelation="Buying Sheet Header";
                                                   CaptionML=[ENU=Buying Sheet No.;
                                                              ENG=Buying Sheet No.] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
    { 11  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Item No." <> xRec."Item No.") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  IF (Rec."Item No." <> '') THEN
                                                                  BEGIN
                                                                    Item.GET(Rec."Item No.");
                                                                    Item.TESTFIELD(Blocked, FALSE);
                                                                    Item.TESTFIELD("Base Unit of Measure");
                                                                    UpdateDescription();
                                                                    IF (Item."Purch. Unit of Measure" <> '') THEN
                                                                      Rec.VALIDATE("Unit of Measure Code", Item."Purch. Unit of Measure")
                                                                    ELSE
                                                                      Rec.VALIDATE("Unit of Measure Code", Item."Base Unit of Measure");
                                                                    Rec.VALIDATE("Item Category Code", Item."Item Category Code");
                                                                    Rec.VALIDATE("Style No.", Item."Style No.");
                                                                    Rec.VALIDATE("Brand Code", Item."Brand Code");
                                                                    Rec.VALIDATE("Season Code", Item."Season Code");
                                                                    Rec.VALIDATE("Sub-Season Code", Item."Sub-Season Code");
                                                                    Rec.VALIDATE("Division Code", Item."Division Code");
                                                                    Rec.VALIDATE("Department Code", Item."Department Code");
                                                                    Rec.VALIDATE("Group Code", Item."Group Code");
                                                                    Rec.VALIDATE("Category Code", Item."Category Code");
                                                                    Rec.VALIDATE("Sub-Category Code", Item."Sub-Category Code");
                                                                    Rec.VALIDATE("Colour Code", Item."Colour Code");
                                                                    Rec.VALIDATE("Vendor Colour Code", Item."Vendor Colour Code");
                                                                    Rec.VALIDATE("Size Group Code", Item."Size Group Code");
                                                                    UpdateVendorItemNo();
                                                                    UpdateDirectCost();
                                                                    UpdateBinCode();
                                                                  END;
                                                                  UpdateVariantCode();
                                                                  CreateDimensions(DATABASE::Item, Rec."Item No.", DATABASE::Vendor, Rec."Vendor No.");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ENG=Item No.] }
    { 12  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Variant Code" <> xRec."Variant Code") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  IF (Rec."Variant Code" <> '') THEN
                                                                  BEGIN
                                                                    Rec.TESTFIELD("Item No.");
                                                                    ItemVariant.GET(Rec."Item No.", Rec."Variant Code");
                                                                    Rec.VALIDATE("Style No.", ItemVariant."Style No.");
                                                                    Rec.VALIDATE("Brand Code", ItemVariant."Brand Code");
                                                                    Rec.VALIDATE("Season Code", ItemVariant."Season Code");
                                                                    Rec.VALIDATE("Sub-Season Code", ItemVariant."Sub-Season Code");
                                                                    Rec.VALIDATE("Division Code", ItemVariant."Division Code");
                                                                    Rec.VALIDATE("Department Code", ItemVariant."Department Code");
                                                                    Rec.VALIDATE("Group Code", ItemVariant."Group Code");
                                                                    Rec.VALIDATE("Category Code", ItemVariant."Category Code");
                                                                    Rec.VALIDATE("Sub-Category Code", ItemVariant."Sub-Category Code");
                                                                    Rec.VALIDATE("Colour Code", ItemVariant."Colour Code");
                                                                    Rec.VALIDATE("Size Group Code", ItemVariant."Size Group Code");
                                                                    Rec.VALIDATE("Size Code", ItemVariant."Size Code");
                                                                    Rec.VALIDATE(Sequence, ItemVariant.Sequence);
                                                                    UpdateDescription();
                                                                    UpdateVendorItemNo();
                                                                    UpdateBinCode();
                                                                    UpdateDirectCost();
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ENG=Variant Code] }
    { 20  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 21  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENG=Description 2] }
    { 30  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Location Code" <> xRec."Location Code") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  UpdateVendorItemNo();
                                                                  UpdateBinCode();
                                                                  UpdateDirectCost();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code] }
    { 31  ;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                 Item Filter=FIELD(Item No.),
                                                                                 Variant Filter=FIELD(Variant Code));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Bin Code" <> xRec."Bin Code") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  IF (Rec."Bin Code" <> '') THEN
                                                                  BEGIN
                                                                    Rec.TESTFIELD("Location Code");
                                                                    Location.GET(Rec."Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    Location.TESTFIELD("Directed Put-away and Pick", FALSE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ENG=Bin Code] }
    { 40  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                "--- NS.E ---"@1000000001 : TextConst 'ENU=--- NS.E ---;ENG=--- NS.E ---';
                                                                eCantBeLower@1000000000 : TextConst 'ENU=can''t be lower than "%1";ENG=can''t be lower than "%1"';
                                                              BEGIN
                                                                IF (Rec.Quantity <> xRec.Quantity) THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  QuantityValidation := TRUE;
                                                                  Rec.CALCFIELDS("Quantity Allocated");
                                                                  IF (Rec."Quantity Allocated" > 0) THEN
                                                                    IF (Rec.Quantity < Rec."Quantity Allocated") THEN
                                                                      Rec.FIELDERROR(Quantity, STRSUBSTNO(eCantBeLower, Rec.FIELDCAPTION("Quantity Allocated")));
                                                                  UpdateQtyPerUnitOfMeasure();
                                                                  IF ( NOT (QuantityBaseValidation)) THEN
                                                                    Rec.VALIDATE("Quantity (Base)", Rec.Quantity * Rec."Qty. per Unit of Measure");
                                                                  UpdateDirectCost();
                                                                  UpdateAmounts();
                                                                  QuantityValidation := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENG=Quantity];
                                                   DecimalPlaces=0:5 }
    { 41  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Qty. per Unit of Measure" <> xRec."Qty. per Unit of Measure") THEN
                                                                BEGIN
                                                                  QtyPerUnitOfMeasureValidation := TRUE;
                                                                  CheckStatusOpen();
                                                                  IF ( NOT (QuantityBaseValidation)) THEN
                                                                    Rec.VALIDATE("Quantity (Base)", Rec.Quantity * Rec."Qty. per Unit of Measure");
                                                                  QtyPerUnitOfMeasureValidation := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENG=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 42  ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                IF (Rec."Quantity (Base)" <> xRec."Quantity (Base)") THEN
                                                                BEGIN
                                                                  QuantityBaseValidation := TRUE;
                                                                  CheckStatusOpen();
                                                                  UpdateQtyPerUnitOfMeasure();
                                                                  IF ( NOT (QuantityValidation)) THEN
                                                                    Rec.VALIDATE(Quantity, TnpToolkit.Divide(Rec."Quantity (Base)", Rec."Qty. per Unit of Measure"));
                                                                  QuantityBaseValidation := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ENG=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 50  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                lUnitOfMeasureManagement@1000000000 : Codeunit 5402;
                                                              BEGIN
                                                                IF (Rec."Unit of Measure Code" <> xRec."Unit of Measure Code") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  IF (Rec."Unit of Measure Code" <> '') THEN
                                                                  BEGIN
                                                                    Rec.TESTFIELD("Item No.");
                                                                    Item.GET(Rec."Item No.");
                                                                    Rec.VALIDATE("Qty. per Unit of Measure", lUnitOfMeasureManagement.GetQtyPerUnitOfMeasure(Item, Rec."Unit of Measure Code"));
                                                                    UpdateDirectCost();
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENG=Unit of Measure Code] }
    { 60  ;   ;Discount %          ;Decimal       ;CaptionML=[ENU=Discount %;
                                                              ENG=Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 70  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=BEGIN
                                                                IF (Rec."Direct Unit Cost" <> xRec."Direct Unit Cost") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  DirectUnitCostValidation := TRUE;
                                                                  IF ( NOT (DirectUnitCostLcyValidation)) THEN
                                                                    Rec.VALIDATE("Direct Unit Cost (LCY)", TnpToolkit.FCYToLCY(Rec."Direct Unit Cost", Rec."Currency Code", Rec."Currency Factor"));
                                                                  UpdateAmounts();
                                                                  DirectUnitCostValidation := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Direct Unit Cost;
                                                              ENG=Direct Unit Cost];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 71  ;   ;Direct Unit Cost (LCY);Decimal     ;OnValidate=BEGIN
                                                                IF (Rec."Direct Unit Cost (LCY)" <> xRec."Direct Unit Cost (LCY)") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  DirectUnitCostLcyValidation := TRUE;
                                                                  IF ( NOT (DirectUnitCostValidation)) THEN
                                                                    Rec.VALIDATE("Direct Unit Cost", TnpToolkit.LCYToFCY(Rec."Direct Unit Cost (LCY)", Rec."Currency Code", Rec."Currency Factor"));
                                                                  UpdateLandedCost();
                                                                  UpdateUnitPrice();
                                                                  UpdateAmounts();
                                                                  DirectUnitCostLcyValidation := FALSE;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Direct Unit Cost (LCY);
                                                              ENG=Direct Unit Cost (LCY)];
                                                   Editable=No }
    { 80  ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Vendor No." <> xRec."Vendor No.") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  IF (Rec."Vendor No." <> '') THEN
                                                                  BEGIN
                                                                    Vendor.GET(Rec."Vendor No.");
                                                                    Rec.VALIDATE("Currency Code", Vendor."Currency Code");
                                                                    UpdateDescription();
                                                                    UpdateDirectCost();
                                                                  END;
                                                                  CreateDimensions(DATABASE::Vendor, Rec."Vendor No.", DATABASE::Item, Rec."Item No.");
                                                                END;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Vendor No.;
                                                              ENG=Vendor No.] }
    { 81  ;   ;Vendor Colour Code  ;Code50        ;TableRelation="Vendor Colour".Code WHERE (Vendor No.=FIELD(Vendor No.));
                                                   CaptionML=[ENU=Vendor Colour Code;
                                                              ENG=Vendor Colour Code];
                                                   Description=,Increased from 20 }
    { 82  ;   ;Vendor Item No.     ;Text20        ;CaptionML=[ENU=Vendor Item No.;
                                                              ENG=Vendor Item No.] }
    { 90  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                IF (Rec."Order Date" <> xRec."Order Date") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  UpdateDirectCost();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Order Date;
                                                              ENG=Order Date] }
    { 91  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENG=Document Date] }
    { 100 ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Currency Code" <> xRec."Currency Code") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  IF (Rec."Currency Code" <> '') THEN
                                                                  BEGIN
                                                                    Currency.GET(Rec."Currency Code");
                                                                    Rec.VALIDATE("Currency Factor", CurrencyExchangeRate.ExchangeRate(WORKDATE(), Rec."Currency Code"));
                                                                  END
                                                                  ELSE
                                                                    Rec.VALIDATE("Currency Factor", 1);
                                                                  UpdateDirectCost();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ENG=Currency Code] }
    { 101 ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF (Rec."Currency Factor" <> xRec."Currency Factor") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  IF (Rec."Currency Code" <> '') THEN
                                                                    Rec.TESTFIELD("Currency Factor");
                                                                  Rec.VALIDATE("Direct Unit Cost", CurrencyExchangeRate.ExchangeAmtLCYToFCY(WORKDATE(), Rec."Currency Code",
                                                                    Rec."Direct Unit Cost", Rec."Currency Factor"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              ENG=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 120 ;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENG=Item Category Code] }
    { 121 ;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENG=Product Group Code] }
    { 140 ;   ;Buying Sheet Summary Line No.;Integer;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Buying Sheet Summary Line No." <> xRec."Buying Sheet Summary Line No.") THEN
                                                                  UpdateFromBuyingSheetSummaryLine();
                                                              END;

                                                   CaptionML=[ENU=Buying Sheet Summary Line No.;
                                                              ENG=Buying Sheet Summary Line No.] }
    { 150 ;   ;Purchase Order No.  ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   CaptionML=[ENU=Purchase Order No.;
                                                              ENG=Purchase Order No.] }
    { 151 ;   ;Purchase Order Line No.;Integer    ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                   Document No.=FIELD(Purchase Order No.));
                                                   CaptionML=[ENU=Purchase Order Line No.;
                                                              ENG=Purchase Order Line No.] }
    { 152 ;   ;Purchase Order Line Posted;Boolean ;CaptionML=[ENU=Purchase Order Line Posted;
                                                              ENG=Purchase Order Line Posted] }
    { 160 ;   ;Overhead Unit Cost (LCY);Decimal   ;OnValidate=BEGIN
                                                                IF (Rec."Overhead Unit Cost (LCY)" <> xRec."Overhead Unit Cost (LCY)") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  UpdateLandedCost();
                                                                  UpdateAmounts();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Overhead Unit Cost (LCY);
                                                              ENG=Overhead Unit Cost (LCY)] }
    { 161 ;   ;Landed Unit Cost (LCY);Decimal     ;OnValidate=BEGIN
                                                                IF (Rec."Landed Unit Cost (LCY)" <> xRec."Landed Unit Cost (LCY)") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  UpdateAmounts();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Landed Unit Cost (LCY);
                                                              ENG=Landed Unit Cost (LCY)] }
    { 170 ;   ;Mark-up             ;Decimal       ;OnValidate=BEGIN
                                                                IF (Rec."Mark-up" <> xRec."Mark-up") THEN
                                                                  CheckStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Mark-up;
                                                              ENG=Mark-up] }
    { 180 ;   ;Recommended Retail Price;Boolean   ;OnValidate=BEGIN
                                                                IF (Rec."Recommended Retail Price" <> xRec."Recommended Retail Price") THEN
                                                                  CheckStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Recommended Retail Price;
                                                              ENG=Recommended Retail Price] }
    { 190 ;   ;Style No.           ;Code20        ;TableRelation=Style;
                                                   CaptionML=[ENU=Style No.;
                                                              ENG=Style No.] }
    { 200 ;   ;Season Code         ;Code20        ;TableRelation=Season;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Season Code" <> xRec."Season Code") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  Rec.VALIDATE("Sub-Season Code", '');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Season Code;
                                                              ENG=Season Code] }
    { 201 ;   ;Sub-Season Code     ;Code20        ;TableRelation=Sub-Season.Code WHERE (Season Code=FIELD(Season Code));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Sub-Season Code" <> xRec."Sub-Season Code") THEN
                                                                  CheckStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Sub-Season Code;
                                                              ENG=Sub-Season Code] }
    { 210 ;   ;Brand Code          ;Code20        ;TableRelation=Brand;
                                                   OnValidate=BEGIN
                                                                IF (Rec."Brand Code" <> xRec."Brand Code") THEN
                                                                  CheckStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Brand Code;
                                                              ENG=Brand Code] }
    { 220 ;   ;Division Code       ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Division));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Division Code" <> xRec."Division Code") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  Rec.VALIDATE("Department Code", '');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Division Code;
                                                              ENG=Division Code] }
    { 221 ;   ;Department Code     ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Department),
                                                                                              Division Code=FIELD(Division Code));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Department Code" <> xRec."Department Code") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  Rec.VALIDATE("Group Code", '');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Department Code;
                                                              ENG=Department Code] }
    { 222 ;   ;Group Code          ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Group),
                                                                                              Division Code=FIELD(Division Code),
                                                                                              Department Code=FIELD(Department Code));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Group Code" <> xRec."Group Code") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  Rec.VALIDATE("Category Code", '');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Group Code;
                                                              ENG=Group Code] }
    { 223 ;   ;Category Code       ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Category),
                                                                                              Division Code=FIELD(Division Code),
                                                                                              Department Code=FIELD(Department Code),
                                                                                              Group Code=FIELD(Group Code));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Category Code" <> xRec."Category Code") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  Rec.VALIDATE("Sub-Category Code", '');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Category Code;
                                                              ENG=Category Code] }
    { 224 ;   ;Sub-Category Code   ;Code20        ;TableRelation="Item Hierarchy".Code WHERE (Type=CONST(Category),
                                                                                              Division Code=FIELD(Division Code),
                                                                                              Department Code=FIELD(Department Code),
                                                                                              Group Code=FIELD(Group Code),
                                                                                              Category Code=FIELD(Category Code));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Sub-Category Code" <> xRec."Sub-Category Code") THEN
                                                                  CheckStatusOpen();
                                                              END;

                                                   CaptionML=[ENU=Sub-Category Code;
                                                              ENG=Sub-Category Code] }
    { 230 ;   ;Colour Code         ;Code20        ;TableRelation=Colour;
                                                   OnValidate=VAR
                                                                Item@1000000000 : Record 27;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Colour Code;
                                                              ENG=Colour Code] }
    { 240 ;   ;Size Group Code     ;Code20        ;TableRelation="Size Group";
                                                   OnValidate=VAR
                                                                lSizeGroup@1000000000 : Record 9087001;
                                                                lStandardSizeGroupCode@1000000001 : Code[20];
                                                              BEGIN
                                                                IF (Rec."Size Group Code" <> xRec."Size Group Code") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  Rec.VALIDATE("Size Code", '');
                                                                  IF (Rec."Size Group Code" <> '') THEN
                                                                  BEGIN
                                                                    lSizeGroup.GET(Rec."Size Group Code");
                                                                    lStandardSizeGroupCode := lSizeGroup."Standard Size Group Code";
                                                                  END;
                                                                  Rec.VALIDATE("Standard Size Group Code", lStandardSizeGroupCode);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Size Group Code;
                                                              ENG=Size Group Code] }
    { 250 ;   ;Size Code           ;Code20        ;TableRelation=Size.Code WHERE (Size Group Code=FIELD(Size Group Code));
                                                   OnValidate=VAR
                                                                lSize@1000000000 : Record 9087002;
                                                                lStandardSizeCode@1000000001 : Code[20];
                                                              BEGIN
                                                                IF (Rec."Size Code" <> xRec."Size Code") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  IF ((Rec."Size Group Code" <> '') AND (Rec."Size Code" <> '')) THEN
                                                                  BEGIN
                                                                    lSize.GET(Rec."Size Group Code", Rec."Size Code");
                                                                    lStandardSizeCode := lSize."Standard Size Code";
                                                                  END;
                                                                  Rec.VALIDATE("Standard Size Code", lStandardSizeCode);
                                                                  UpdateVariantCode();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Size Code;
                                                              ENG=Size Code] }
    { 260 ;   ;Standard Size Group Code;Code20    ;TableRelation="Size Group";
                                                   OnValidate=BEGIN
                                                                IF (Rec."Standard Size Group Code" <> xRec."Standard Size Group Code") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  Rec.VALIDATE("Standard Size Code", '');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Standard Size Group Code;
                                                              ENG=Standard Size Group Code] }
    { 261 ;   ;Standard Size Code  ;Code20        ;TableRelation=Size.Code WHERE (Size Group Code=FIELD(Standard Size Group Code));
                                                   CaptionML=[ENU=Standard Size Code;
                                                              ENG=Standard Size Code] }
    { 270 ;   ;Store Allocation Code;Code20       ;OnLookup=BEGIN
                                                              ShowStoreAllocations();
                                                            END;

                                                   CaptionML=[ENU=Store Allocation Code;
                                                              ENG=Store Allocation Code] }
    { 271 ;   ;Quantity Allocated  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Store Allocation Line".Quantity WHERE (Store Allocation Code=FIELD(Store Allocation Code),
                                                                                                           Item No.=FIELD(Item No.),
                                                                                                           Variant Code=FIELD(Variant Code)));
                                                   OnLookup=BEGIN
                                                              ShowStoreAllocations();
                                                            END;

                                                   CaptionML=[ENU=Quantity Allocated;
                                                              ENG=Quantity Allocated];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 280 ;   ;Availability Message;Text250       ;CaptionML=[ENU=Availability Message;
                                                              ENG=Availability Message] }
    { 281 ;   ;Availability Calculated;Boolean    ;CaptionML=[ENU=Availability Calculated;
                                                              ENG=Availability Calculated] }
    { 290 ;   ;Transfer Order No.  ;Code20        ;TableRelation="Transfer Header";
                                                   OnValidate=BEGIN
                                                                IF (Rec."Transfer Order No." <> xRec."Transfer Order No.") THEN
                                                                  Rec.VALIDATE("Transfer Order Line No.", 0);
                                                              END;

                                                   CaptionML=[ENU=Transfer Order No.;
                                                              ENG=Transfer Order No.] }
    { 291 ;   ;Transfer Order Line No.;Integer    ;TableRelation="Transfer Line"."Line No." WHERE (Document No.=FIELD(Transfer Order No.));
                                                   CaptionML=[ENU=Transfer Order Line No.;
                                                              ENG=Transfer Order Line No.];
                                                   BlankZero=Yes }
    { 300 ;   ;Sequence            ;Integer       ;CaptionML=[ENU=Sequence;
                                                              ENG=Sequence] }
    { 310 ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateDimension(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENG=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 320 ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateDimension(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENG=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 330 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENG=Dimension Set ID];
                                                   Editable=No }
    { 340 ;   ;Unit Price (LCY)    ;Decimal       ;OnValidate=BEGIN
                                                                IF (Rec."Unit Price (LCY)" <> xRec."Unit Price (LCY)") THEN
                                                                BEGIN
                                                                  CheckStatusOpen();
                                                                  UpdateAmounts();
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Unit Price (LCY);
                                                              ENG=Unit Price (LCY)] }
    { 350 ;   ;Cost Amount         ;Decimal       ;CaptionML=[ENU=Cost Amount;
                                                              ENG=Cost Amount] }
    { 351 ;   ;Cost Amount (LCY)   ;Decimal       ;CaptionML=[ENU=Cost Amount (LCY);
                                                              ENG=Cost Amount (LCY)] }
    { 360 ;   ;Overhead Amount (LCY);Decimal      ;CaptionML=[ENU=Overhead Amount (LCY);
                                                              ENG=Overhead Amount (LCY)] }
    { 370 ;   ;Landed Amount (LCY) ;Decimal       ;CaptionML=[ENU=Landed Amount (LCY);
                                                              ENG=Landed Amount (LCY)] }
    { 380 ;   ;System Activity     ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=System Activity;
                                                              ENG=System Activity] }
    { 390 ;   ;Sales Amount (LCY)  ;Decimal       ;CaptionML=[ENU=Sales Amount (LCY);
                                                              ENG=Sales Amount (LCY)] }
    { 400 ;   ;Lead Time Calculation;DateFormula  ;AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Lead Time Calculation;
                                                              ENG=Lead Time Calculation] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
    { 50000;  ;Comments            ;Text80        ;Description=OP9031 CC }
    { 50650;  ;Shipment Date       ;Date          ;Description=OP9031 CC }
    { 50660;  ;Cancellation Date   ;Date          ;Description=OP9031 CC }
    { 50710;  ;Country of Origin   ;Code10        ;TableRelation=Country/Region;
                                                   Description=M0021 DD 13/10/16 }
    { 50720;  ;Line Status         ;Option        ;OptionCaptionML=[ENU=" ,Rejected,Cancelled";
                                                                    ENG=" ,Rejected,Cancelled"];
                                                   OptionString=[ ,Rejected,Cancelled];
                                                   Description=M0034 DD 18/10/16 }
    { 50730;  ;Runaway Look        ;Text100       ;Description=M0035 DD 18/10/16 }
    { 50740;  ;Colour Status       ;Boolean       ;Description=M0036 DD 18/10/16 }
    { 50750;  ;Sample Status       ;Boolean       ;Description=M0037 DD 18/10/16 }
    { 50780;  ;Exclusive           ;Boolean       ;Description=M0038 DD 18/10/16 }
  }
  KEYS
  {
    {    ;Buying Sheet No.,Line No.               ;SumIndexFields=Quantity (Base),Cost Amount,Cost Amount (LCY),Overhead Amount (LCY),Landed Amount (LCY),Sales Amount (LCY);
                                                   Clustered=Yes }
    {    ;Buying Sheet No.,Buying Sheet Summary Line No.;
                                                   SumIndexFields=Quantity,Quantity (Base),Cost Amount,Cost Amount (LCY),Overhead Amount (LCY),Landed Amount (LCY) }
    {    ;Purchase Order No.,Purchase Order Line No. }
    {    ;Buying Sheet No.,Style No.,Item No.     ;SumIndexFields=Quantity (Base),Cost Amount,Cost Amount (LCY),Overhead Amount (LCY),Landed Amount (LCY),Sales Amount (LCY) }
    {    ;Buying Sheet No.,Item No.               ;SumIndexFields=Quantity (Base),Cost Amount,Cost Amount (LCY),Overhead Amount (LCY),Landed Amount (LCY),Sales Amount (LCY) }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text005@1002 : TextConst 'ENU=%1 %2 does not exist.;ENG=%1 %2 does not exist.';
      Text006@1003 : TextConst 'ENU=You cannot change %1 when %2 is %3.;ENG=You cannot change %1 when %2 is %3.';
      Text007@1004 : TextConst 'ENU=There is no %1 for this line.;ENG=There is no %1 for this line.';
      Text008@1005 : TextConst 'ENU=There is no replenishment order for this line.;ENG=There is no replenishment order for this line.';
      Currency@1000000014 : Record 4;
      CurrencyExchangeRate@1000000013 : Record 330;
      Item@1000000007 : Record 27;
      ItemVariant@1000000008 : Record 5401;
      Location@1000000009 : Record 14;
      BuyingSheetHeader@1000000005 : Record 9087020;
      BuyingSheetSummaryLine@1000000017 : Record 9087021;
      BuyingSheetLine@1000000016 : Record 9087022;
      Vendor@1000000012 : Record 23;
      DimensionManagement@1000000015 : Codeunit 408;
      TnpToolkit@1000000004 : Codeunit 9062230;
      QuantityValidation@1000000006 : Boolean;
      QtyPerUnitOfMeasureValidation@1000000011 : Boolean;
      QuantityBaseValidation@1000000010 : Boolean;
      Text028@1055 : TextConst 'ENU=The %1 on this %2 must match the %1 on the sales order line it is associated with.;ENG=The %1 on this %2 must match the %1 on the sales order line it is associated with.';
      Text029@1036 : TextConst 'ENU=Line %1 has a %2 that exceeds the %3.;ENG=Line %1 has a %2 that exceeds the %3.';
      Text030@1037 : TextConst 'ENU=You cannot reserve components with status Planned.;ENG=You cannot reserve components with status Planned.';
      Text031@1059 : TextConst 'ENU=%1 %2 is blocked.;ENG=%1 %2 is blocked.';
      Text032@1060 : TextConst 'ENU=%1 %2 has no %3 defined.;ENG=%1 %2 has no %3 defined.';
      Text033@1068 : TextConst 'ENU=%1 %2 %3 is not certified.;ENG=%1 %2 %3 is not certified.';
      Text034@1053 : TextConst 'ENU=%1 %2 %3 %4 %5 is not certified.;ENG=%1 %2 %3 %4 %5 is not certified.';
      Text035@1071 : TextConst 'ENU=%1 %2 %3 specified on %4 %5 does not exist.;ENG=%1 %2 %3 specified on %4 %5 does not exist.';
      Text036@1072 : TextConst 'ENU=%1 %2 %3 does not allow default numbering.;ENG=%1 %2 %3 does not allow default numbering.';
      Text037@1065 : TextConst 'ENU=The currency exchange rate for the %1 %2 that vendor %3 uses on the order date %4, does not have an %5 specified.;ENG=The currency exchange rate for the %1 %2 that vendor %3 uses on the order date %4, does not have an %5 specified.';
      Text038@1067 : TextConst 'ENU=The currency exchange rate for the %1 %2 that vendor %3 uses on the order date %4, does not exist.;ENG=The currency exchange rate for the %1 %2 that vendor %3 uses on the order date %4, does not exist.';
      Text039@1066 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on %2.;ENG=You cannot assign new numbers from the number series %1 on %2.';
      Text040@1064 : TextConst 'ENU=You cannot assign new numbers from the number series %1.;ENG=You cannot assign new numbers from the number series %1.';
      Text041@1062 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on a date before %2.;ENG=You cannot assign new numbers from the number series %1 on a date before %2.';
      Text042@1054 : TextConst 'ENU=You cannot assign new numbers from the number series %1 line %2 because the %3 is not defined.;ENG=You cannot assign new numbers from the number series %1 line %2 because the %3 is not defined.';
      Text043@1061 : TextConst 'ENU=The number %1 on number series %2 cannot be extended to more than 20 characters.;ENG=The number %1 on number series %2 cannot be extended to more than 20 characters.';
      Text044@1069 : TextConst 'ENU=You cannot assign numbers greater than %1 from the number series %2.;ENG=You cannot assign numbers greater than %1 from the number series %2.';
      ReplenishmentErr@1073 : TextConst 'ENU=Buying Sheet cannot be used to create Prod. Order replenishment.;ENG=Buying Sheet cannot be used to create Prod. Order replenishment.';
      "--- NS.T ---"@1000003333 : TextConst 'ENU=--- NS.T ---;ENG=--- NS.T ---';
      errPurchOrderLinePosted@1000000000 : TextConst 'ENU=Record cannot be modified. Purchase order line has been posted and deleted.;ENG=Record cannot be modified. Purchase order line has been posted and deleted.';
      DirectUnitCostValidation@1000000001 : Boolean;
      DirectUnitCostLcyValidation@1000000003 : Boolean;

    PROCEDURE GetSystemActivity@1000000024() : Boolean;
    BEGIN
      //DOC NS2016.16 - Returning system activity
      //  <- The activity

      IF (Rec.GETFILTER("System Activity") <> '') THEN
        EXIT(Rec.GETRANGEMIN("System Activity"))
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE SetSystemActivity@1000000025(pSystemActivity@1000000000 : Boolean);
    BEGIN
      //DOC NS2016.16 - Setting system activity
      //  -> pSystemActivity: The activity

      IF (pSystemActivity) THEN
        Rec.SETRANGE("System Activity", TRUE)
      ELSE
        Rec.SETRANGE("System Activity");
    END;

    LOCAL PROCEDURE UpdateFromBuyingSheetHeader@1000000010();
    BEGIN
      //DOC NS2016.16 - Updating from buying sheet header

      IF (Rec."Buying Sheet Summary Line No." <> 0) THEN
        EXIT;

      BuyingSheetHeader.GET(Rec."Buying Sheet No.");
      Rec.VALIDATE("Vendor No.", BuyingSheetHeader."Vendor No.");
      Rec.VALIDATE("Location Code", BuyingSheetHeader."Location Code");
      Rec.VALIDATE("Currency Code", BuyingSheetHeader."Currency Code");
      Rec.VALIDATE("Currency Factor", BuyingSheetHeader."Currency Factor");
      Rec.VALIDATE("Document Date", BuyingSheetHeader."Document Date");
      Rec.VALIDATE("Order Date", BuyingSheetHeader."Order Date");
      Rec.VALIDATE("Discount %", BuyingSheetHeader."Discount %");
      Rec.VALIDATE("Mark-up", BuyingSheetHeader."Mark-up");
      Rec.VALIDATE("Season Code", BuyingSheetHeader."Season Code");
      Rec.VALIDATE("Sub-Season Code", BuyingSheetHeader."Sub-Season Code");
      Rec.VALIDATE("Lead Time Calculation", BuyingSheetHeader."Lead Time Calculation");
    END;

    PROCEDURE UpdateFromBuyingSheetSummaryLine@1000000011();
    BEGIN
      //DOC NS2016.16 - Updating from buying sheet summary line

      IF (Rec."Buying Sheet Summary Line No." = 0) THEN
        EXIT;

      BuyingSheetSummaryLine.GET(Rec."Buying Sheet No.", Rec."Buying Sheet Summary Line No.");
      Rec.VALIDATE("Item No.", BuyingSheetSummaryLine."Item No.");
      Rec.VALIDATE("Vendor No.", BuyingSheetSummaryLine."Vendor No.");
      Rec.VALIDATE("Location Code", BuyingSheetSummaryLine."Location Code");
      Rec.VALIDATE("Currency Code", BuyingSheetSummaryLine."Currency Code");
      Rec.VALIDATE("Currency Factor", BuyingSheetSummaryLine."Currency Factor");
      Rec.VALIDATE("Document Date", BuyingSheetSummaryLine."Document Date");
      Rec.VALIDATE("Order Date", BuyingSheetSummaryLine."Order Date");
      Rec.VALIDATE("Discount %", BuyingSheetSummaryLine."Discount %");
      Rec.VALIDATE("Mark-up", BuyingSheetSummaryLine."Mark-up");
      Rec.VALIDATE("Brand Code", BuyingSheetSummaryLine."Brand Code");
      Rec.VALIDATE("Season Code", BuyingSheetSummaryLine."Season Code");
      Rec.VALIDATE("Sub-Season Code", BuyingSheetSummaryLine."Sub-Season Code");
      Rec.VALIDATE("Division Code", BuyingSheetSummaryLine."Division Code");
      Rec.VALIDATE("Department Code", BuyingSheetSummaryLine."Department Code");
      Rec.VALIDATE("Group Code", BuyingSheetSummaryLine."Group Code");
      Rec.VALIDATE("Category Code", BuyingSheetSummaryLine."Category Code");
      Rec.VALIDATE("Sub-Category Code", BuyingSheetSummaryLine."Sub-Category Code");
      Rec.VALIDATE("Item Category Code", BuyingSheetSummaryLine."Item Category Code");
      Rec.VALIDATE("Product Group Code", BuyingSheetSummaryLine."Product Group Code");
      Rec.VALIDATE(Description, BuyingSheetSummaryLine.Description);
      Rec.VALIDATE("Description 2", BuyingSheetSummaryLine."Description 2");
      Rec.VALIDATE("Vendor Colour Code", BuyingSheetSummaryLine."Vendor Colour Code");
      Rec.VALIDATE("Unit of Measure Code", BuyingSheetSummaryLine."Unit of Measure Code");
      Rec.VALIDATE("Direct Unit Cost", BuyingSheetSummaryLine."Direct Unit Cost");
      Rec.VALIDATE("Direct Unit Cost (LCY)", BuyingSheetSummaryLine."Direct Unit Cost (LCY)");
      Rec.VALIDATE("Landed Unit Cost (LCY)", BuyingSheetSummaryLine."Landed Cost (LCY)");
      Rec.VALIDATE("Unit Price (LCY)", BuyingSheetSummaryLine."Unit Price (LCY)");
      Rec.VALIDATE("Recommended Retail Price", BuyingSheetSummaryLine."Recommended Retail Price");
      Rec.VALIDATE("Vendor Item No.", BuyingSheetSummaryLine."Vendor Item No.");
      Rec.VALIDATE("Size Group Code", BuyingSheetSummaryLine."Size Group Code");
      Rec.VALIDATE("Standard Size Group Code", BuyingSheetSummaryLine."Standard Size Group Code");
      Rec.VALIDATE("Colour Code", BuyingSheetSummaryLine."Colour Code");
      Rec.VALIDATE("Lead Time Calculation", BuyingSheetSummaryLine."Lead Time Calculation");
      //DOC OP9031 M0023 -
      Rec.VALIDATE("Country of Origin",BuyingSheetSummaryLine."Country of Origin");
      Rec.VALIDATE("Runaway Look", BuyingSheetSummaryLine."Runaway Look");
      Rec.VALIDATE("Colour Status",BuyingSheetSummaryLine."Colour Status");
      Rec.VALIDATE("Sample Status",BuyingSheetSummaryLine."Sample Status");
      Rec.VALIDATE(Exclusive,BuyingSheetSummaryLine.Exclusive);
      //DOC OP9031 M0023 +
      //DOC OP9031 CC -
      VALIDATE(Comments,BuyingSheetSummaryLine.Comments);
      VALIDATE("Shipment Date",BuyingSheetSummaryLine."Shipment Date");
      VALIDATE("Cancellation Date",BuyingSheetSummaryLine."Cancellation Date");
      //DOC OP9031 CC +
    END;

    LOCAL PROCEDURE UpdateVariantCode@1000000003();
    VAR
      lVariantCode@1000000000 : Code[10];
    BEGIN
      //DOC NS2016.16 - Updating variant code

      IF ((Rec."Item No." <> '') AND (Rec."Size Code" <> '')) THEN
      BEGIN
        ItemVariant.RESET();
        ItemVariant.SETRANGE("Item No.", Rec."Item No.");
        ItemVariant.SETRANGE("Size Code", Rec."Size Code");
        IF (ItemVariant.FINDFIRST()) THEN
          lVariantCode := ItemVariant.Code;
      END;

      IF (Rec."Variant Code" <> lVariantCode) THEN
        Rec.VALIDATE("Variant Code", lVariantCode);
    END;

    LOCAL PROCEDURE UpdateDescription@8();
    VAR
      lItemVendor@1000 : Record 99;
      ItemCrossRef@1001 : Record 5717;
      lItemTranslation@1000000000 : Record 30;
      lDescription@1000000001 : Text;
      lDescription2@1000000002 : Text;
    BEGIN
      //DOC NS2016.16 - Updating description

      IF (Rec."Item No." = '') THEN
        EXIT;

      IF (Rec."Variant Code" = '') THEN
      BEGIN
        lDescription := Item.Description;
        lDescription2 := Item."Description 2";
      END
      ELSE
      BEGIN
        ItemVariant.GET(Rec."Item No.", Rec."Variant Code");
        lDescription := ItemVariant.Description;
        lDescription2 := ItemVariant."Description 2";
      END;

      IF (Rec."Vendor No." <> '') THEN
      BEGIN
        Vendor.GET("Vendor No.");
        IF (Vendor."Language Code" <> '') THEN
          IF (lItemTranslation.GET(Rec."Item No.", Rec."Variant Code", Vendor."Language Code")) THEN
          BEGIN
            lDescription := lItemTranslation.Description;
            lDescription2 := lItemTranslation."Description 2";
          END;
      END;
    END;

    LOCAL PROCEDURE UpdateVendorItemNo@1000000015();
    VAR
      lItemVendor@1000000000 : Record 99;
      lVendorItemNo@1000000001 : Text;
    BEGIN
      //DOC NS2016.16 - Updating vendor item no.

      IF ((Rec."Vendor No." <> '') AND (Rec."Item No." <> '')) THEN
        IF (lItemVendor.GET(Rec."Vendor No.", Rec."Item No.", Rec."Variant Code")) THEN
          lVendorItemNo := lItemVendor."Vendor Item No.";

      IF (lVendorItemNo <> '') THEN  //DOC NS2016.16 PCM 27/09/2016
        IF (Rec."Vendor Item No." <> lVendorItemNo) THEN
          Rec.VALIDATE("Vendor Item No.", lVendorItemNo);
    END;

    LOCAL PROCEDURE UpdateBinCode@1000000014();
    VAR
      lWmsManagement@1000000000 : Codeunit 7302;
      lBinCode@1000000001 : Code[20];
    BEGIN
      //DOC NS2016.16 - Updating bin code

      lBinCode := '';
      IF (Rec."Location Code" <> '') THEN
      BEGIN
        Location.GET(Rec."Location Code");
        IF ((Rec."Bin Code" = '') AND (Location."Bin Mandatory") AND ( NOT (Location."Directed Put-away and Pick"))) THEN
          lWmsManagement.GetDefaultBin(Rec."Item No.", Rec."Variant Code", Rec."Location Code", lBinCode);
      END;
      IF (Rec."Bin Code" <> lBinCode) THEN
        Rec.VALIDATE("Bin Code", lBinCode);
    END;

    LOCAL PROCEDURE UpdateQtyPerUnitOfMeasure@1000000013();
    BEGIN
      //DOC NS2016.16 - Updating "Qty. per Unit of Measure"

      IF (Rec."Qty. per Unit of Measure" <> 0) THEN
        EXIT;

      IF ( NOT (QtyPerUnitOfMeasureValidation)) THEN
        Rec.VALIDATE("Qty. per Unit of Measure", 1)
      ELSE
        Rec."Qty. per Unit of Measure" := 1;
    END;

    PROCEDURE UpdateDirectCost@12();
    VAR
      lPurchPriceCalcMgt@1000000000 : Codeunit 7010;
    BEGIN
      //DOC NS2016.16 - Updating direct cost

      IF (Rec.GetSystemActivity()) THEN
        EXIT;
      IF ((Rec."Vendor No." = '') OR (Rec."Item No." = '')) THEN
        EXIT;

      lPurchPriceCalcMgt.FindBuyingSheetLinePrice(Rec);
      lPurchPriceCalcMgt.FindBuyingSheetLineDiscount(Rec);
    END;

    LOCAL PROCEDURE UpdateLandedCost@1000000009();
    BEGIN
      //DOC NS2016.16 - Updating landed cost

      Rec.VALIDATE("Landed Unit Cost (LCY)", Rec."Direct Unit Cost (LCY)" + Rec."Overhead Unit Cost (LCY)");
    END;

    LOCAL PROCEDURE UpdateUnitPrice@1000000012();
    BEGIN
      //DOC NS2016.16 - Updating unit price

      IF (Rec."Recommended Retail Price") THEN
        EXIT;

      Rec.VALIDATE("Unit Price (LCY)", Rec."Direct Unit Cost (LCY)" * Rec."Mark-up");
    END;

    PROCEDURE UpdateAmounts@1000000000();
    BEGIN
      //DOC NS2015.1

      Rec.VALIDATE("Cost Amount", Rec.Quantity * Rec."Direct Unit Cost");
      Rec.VALIDATE("Cost Amount (LCY)", Rec.Quantity * Rec."Direct Unit Cost (LCY)");
      Rec.VALIDATE("Overhead Amount (LCY)", Rec.Quantity * "Overhead Unit Cost (LCY)");
      Rec.VALIDATE("Landed Amount (LCY)", Rec.Quantity * Rec."Landed Unit Cost (LCY)");
      Rec.VALIDATE("Sales Amount (LCY)", Rec.Quantity * Rec."Unit Price (LCY)");
    END;

    PROCEDURE CreateDimensions@2(pTableId1@1000 : Integer;pNo1@1001 : Code[20];pTableId2@1002 : Integer;pNo2@1003 : Code[20]);
    VAR
      lSourceCodeSetup@1004 : Record 242;
      lTableIds@1005 : ARRAY [10] OF Integer;
      lNos@1006 : ARRAY [10] OF Code[20];
    BEGIN
      lSourceCodeSetup.GET();
      lTableIds[1] := pTableId1;
      lNos[1] := pNo1;
      lTableIds[2] := pTableId2;
      lNos[2] := pNo2;

      Rec."Shortcut Dimension 1 Code" := '';
      Rec."Shortcut Dimension 2 Code" := '';

      Rec."Dimension Set ID" := DimensionManagement.GetDefaultDimID(lTableIds, lNos, lSourceCodeSetup.Purchases,
        Rec."Shortcut Dimension 1 Code", Rec."Shortcut Dimension 2 Code", 0, 0);
      DimensionManagement.UpdateGlobalDimFromDimSetID(Rec."Dimension Set ID", Rec."Shortcut Dimension 1 Code",
        Rec."Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateDimension@9(pFieldId@1000 : Integer;VAR pDimensionValueCode@1001 : Code[20]);
    BEGIN
      DimensionManagement.ValidateShortcutDimValues(pFieldId, pDimensionValueCode, Rec."Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@10(pFieldId@1000 : Integer;VAR pDimensionValueCode@1001 : Code[20]);
    BEGIN
      DimensionManagement.LookupDimValueCode(pFieldId, pDimensionValueCode);
      DimensionManagement.ValidateShortcutDimValues(pFieldId, pDimensionValueCode, Rec."Dimension Set ID");
    END;

    PROCEDURE ShowShortcutDimCode@11(VAR pDimensionValueCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimensionManagement.GetShortcutDimensions(Rec."Dimension Set ID", pDimensionValueCode);
    END;

    PROCEDURE ShowDimensions@88();
    BEGIN
      Rec."Dimension Set ID" := DimensionManagement.EditDimensionSet2(Rec."Dimension Set ID", STRSUBSTNO('%1 %2', Rec."Buying Sheet No.",
        Rec."Line No."), Rec."Shortcut Dimension 1 Code", Rec."Shortcut Dimension 2 Code");
    END;

    PROCEDURE CheckStatusOpen@1000000002();
    BEGIN
      //DOC NS2015.1

      IF (Rec.GetSystemActivity()) THEN
        EXIT;

      BuyingSheetHeader.GET(Rec."Buying Sheet No.");
      BuyingSheetHeader.CheckStatusOpen();
    END;

    PROCEDURE ShowStoreAllocations@1000000006();
    VAR
      lStoreAllocationManagement@1000000000 : Codeunit 9087015;
    BEGIN
      //DOC NS2015.6 - Showing store allocations

      Rec.TESTFIELD("Item No.");

      IF (Rec."Store Allocation Code" = '') THEN
        CheckStatusOpen();

      IF (lStoreAllocationManagement.VerifyStoreAllocationCode(Rec."Store Allocation Code")) THEN
      BEGIN
        Rec.VALIDATE("Store Allocation Code");
        COMMIT;
      END;

      Rec.TESTFIELD("Store Allocation Code");

      BuyingSheetHeader.GET(Rec."Buying Sheet No.");

      BuyingSheetLine.RESET();
      BuyingSheetLine.SETRANGE("Buying Sheet No.", BuyingSheetHeader."No.");

      lStoreAllocationManagement.ShowStoreAllocationMatrix(Rec."Store Allocation Code", DATABASE::"Buying Sheet Line",
        BuyingSheetLine.GETVIEW(FALSE), BuyingSheetLine.FIELDNO("Item No."), BuyingSheetLine.FIELDNO("Variant Code"),
        BuyingSheetLine.FIELDNO(Description), BuyingSheetLine.FIELDNO(Quantity), BuyingSheetLine.FIELDNO("Quantity Allocated"),
        BuyingSheetLine.FIELDNO(Sequence), BuyingSheetHeader.Status <> BuyingSheetHeader.Status::Open);
    END;

    BEGIN
    {
      //DOC NS2015.1 JH 09/01/2014 - nSemble fields added, new key "Stock Allocation Code,Type,No."
      //DOC NS2015.1 AZ 14/01/2014 - nSemble fields and modifications
      //DOC NS2015.1 JH 19/02/2014 - nSemble amendments
      //DOC NS2015.3 JH 01/08/2014 - Location logic changed, system activity flag added
      //DOC NS2015.4 JH 16/02/2015 - Sequence not a FlowField, taken from item variant
      //DOC NS2015.4 JH 16/02/2015 - Key "Worksheet Template Name,Journal Batch Name,Summary Line No.,Sequence" added
      //DOC NS2015.6 JH 09/04/2015 - "Stock Allocation" renamed to "Store Allocation"
      //DOC NS2016.16 PCM 23/09/2016 - Caption update from Requisition Worksheet to Buying Sheet.
      //DOC NS2016.16 PCM 27/09/2016 - Prevent "Vendor Item No." from being cleared if no "Item Vendor" record can be found.
      //DOC M0021 DD 13/10/16 - Designed 'Country of Origin' field.
      //DOC M0035 DD 18/10/16 - Designed 'Runaway Look' field.
      //DOC M0036 DD 18/10/16 - Designed 'Colour Status' field.
      //DOC M0037 DD 18/10/16 - Designed 'Sample Status' field.
      //DOC M0038 DD 18/10/16 - Designed 'Exclusive' field.
      //DOC OP9031 M0023 PCM 22/11/16 - Added previously added fields to populate in UpdateFromBuyingSheetSummaryLine.
      //DOC OP9031 PCM 04/01/17 - Added "Shipment Date", "Cancellation Date", and "Comments" fields. Included in UpdateFromBuyingSheetSummaryLine.
    }
    END.
  }
}

