OBJECT Codeunit 9086962 nF. Diagnostics
{
  OBJECT-PROPERTIES
  {
    Date=30/10/16;
    Time=12:06:52 PM;
    Version List=NF2016.17;
  }
  PROPERTIES
  {
    OnRun=VAR
            lOptionSelected@1000000000 : ' ,ClearDown,CreateTestPermissions';
            eTitle@1000000002 : TextConst 'ENU=Choose fucntion to run...;ENG=Choose fucntion to run...';
            eMenu@1000000001 : TextConst 'ENU=Clear Down,Create Test Permissions;ENG=Clear Down,Create Test Permissions';
          BEGIN
            lOptionSelected := STRMENU(eMenu, lOptionSelected::" ", eTitle);
            CASE (lOptionSelected) OF
              lOptionSelected::ClearDown: ClearDown();
              lOptionSelected::CreateTestPermissions: CreateTestPermissions();
            END;
          END;

  }
  CODE
  {
    VAR
      NfSetup@1000000003 : Record 9086950;
      NfUser@1000000004 : Record 9086953;
      NfUserGroup@1000000005 : Record 9086955;
      NfUserGroupMember@1000000006 : Record 9086956;
      NfCompany@1000000007 : Record 9086957;
      NfPermissionGroup@1000000008 : Record 9086960;
      NfPermission@1000000009 : Record 9086958;
      NfPermissionRecordFilter@1000000001 : Record 9086959;
      NfPermissionGroupMember@1000000010 : Record 9086961;
      NfMenuSuiteTimestamp@1000000011 : Record 9086952;
      NfLog@1000000012 : Record 9086967;
      NfChecklistItem@1000000013 : Record 9086951;
      NfCues@1000000014 : Record 9086969;
      NfUserPermissionSet@1000000015 : Record 9086954;
      NfIif@1000000000 : Codeunit 9086975;

    LOCAL PROCEDURE "--- General ---"@1000000005();
    BEGIN
    END;

    LOCAL PROCEDURE ClearDown@1000000000();
    VAR
      eConfirmation@1000000000 : TextConst 'ENU=This will DELETE ALL your nForcement data.;ENG=This will DELETE ALL your nForcement data.';
      eFinalMessage@1000000001 : TextConst 'ENU=Your nForcement data have been deleted.;ENG=Your nForcement data have been deleted.';
    BEGIN
      ///<summary>Clearing down ALL nForcement data - be careful</summary>

      IF ( NOT (MultiConfirmation(eConfirmation))) THEN
        EXIT;

      NfSetup.DELETEALL();
      NfChecklistItem.DELETEALL();
      NfMenuSuiteTimestamp.DELETEALL();
      NfUser.DELETEALL();
      NfUserPermissionSet.DELETEALL();
      NfUserGroup.DELETEALL();
      NfUserGroupMember.DELETEALL();
      NfCompany.DELETEALL();
      NfPermission.DELETEALL();
      NfPermissionRecordFilter.DELETEALL();
      NfPermissionGroup.DELETEALL();
      NfPermissionGroupMember.DELETEALL();
      NfLog.DELETEALL();
      NfCues.DELETEALL();

      MESSAGE(eFinalMessage);
    END;

    LOCAL PROCEDURE CreateTestPermissions@1000000002();
    VAR
      eConfirmation@1000000001 : TextConst 'ENU=This will DELETE ALL your nForcement permission groups and replace them with test ones.;ENG=This will DELETE ALL your nForcement permission groups and replace them with test ones.';
      eFinalMessage@1000000000 : TextConst 'ENU=nForcement permission groups have been replaced with test ones.;ENG=nForcement permission groups have been replaced with test ones.';
      lPermissionGroupId@1000000002 : Integer;
      eDefault@1000000006 : TextConst 'ENU=Default;ENG=Default';
      eFinances@1000000003 : TextConst 'ENU=Finances;ENG=Finances';
      eSales@1000000004 : TextConst 'ENU=Sales;ENG=Sales';
      eService@1000000005 : TextConst 'ENU=Service;ENG=Service';
    BEGIN
      ///<summary>Creating nForcement test permissions</summary>

      IF ( NOT (MultiConfirmation(eConfirmation))) THEN
        EXIT;

      NfUserGroup.RESET();
      NfUserGroup.DELETEALL();
      NfUserGroupMember.RESET();
      NfUserGroupMember.DELETEALL();
      NfPermissionGroup.RESET();
      NfPermissionGroup.DELETEALL();
      NfPermissionGroupMember.RESET();
      NfPermissionGroupMember.DELETEALL();
      NfPermission.RESET();
      NfPermission.DELETEALL();

      lPermissionGroupId := CreatePermissionGroup(eDefault, TRUE);
        CreatePermission(lPermissionGroupId, PAGE::"Customer List");
      lPermissionGroupId := CreatePermissionGroup(eFinances, FALSE);
        CreatePermission(lPermissionGroupId, PAGE::"Customer List");
      lPermissionGroupId := CreatePermissionGroup(eSales, FALSE);
        CreatePermission(lPermissionGroupId, PAGE::"Customer List");
      lPermissionGroupId := CreatePermissionGroup(eService, FALSE);
        CreatePermission(lPermissionGroupId, PAGE::"Customer List");

      MESSAGE(eFinalMessage);
    END;

    LOCAL PROCEDURE CreatePermissionGroup@1000000012(pName@1000000000 : Text;pGiveEverything@1000000001 : Boolean) : Integer;
    BEGIN
      ///<summary>Creating one permission group</summary>
      ///<param name="pName">The group name</param>
      ///<param name="pGiveEverything">Give-everything flag</param>
      ///<returns>ID of the group created</returns>

      CLEAR(NfPermissionGroup);
      NfPermissionGroup.INIT();
      NfPermissionGroup.VALIDATE(Name, pName);
      NfPermissionGroup.VALIDATE("Give Everything", pGiveEverything);
      NfPermissionGroup.VALIDATE(Type, NfIif.Integer(pGiveEverything, NfPermissionGroup.Type::Give, NfPermissionGroup.Type::"Take Away"));
      NfPermissionGroup.INSERT(TRUE);
      EXIT(NfPermissionGroup.ID);
    END;

    LOCAL PROCEDURE CreatePermission@1000000018(pPermissionGroupId@1000000000 : Integer;pPageId@1000000001 : Integer);
    BEGIN
      ///<summary>Creating a permission</summary>
      ///<param name="pPermissionGroupId">Permission group ID to add the permission to</param>

      CLEAR(NfPermission);
      NfPermission.INIT();
      NfPermission.VALIDATE("nF. Permission Group ID", pPermissionGroupId);
      NfPermission.VALIDATE("Object Type", NfPermission."Object Type"::Page);
      NfPermission.VALIDATE("Object ID", pPageId);
      NfPermission.VALIDATE("Execute Permission", TRUE);
      NfPermission.INSERT(TRUE);
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000006();
    BEGIN
    END;

    LOCAL PROCEDURE MultiConfirmation@1000000007(pText@1000000000 : Text) : Boolean;
    VAR
      lLevelTexts@1000000002 : ARRAY [3] OF Text;
      lLevel@1000000001 : Integer;
      eLevelText1@1000000005 : TextConst 'ENU=Do you want to continue?;ENG=Do you want to continue?';
      eLevelText2@1000000004 : TextConst 'ENU=Do you REALLY want to continue?;ENG=Do you REALLY want to continue?';
      eLevelText3@1000000003 : TextConst 'ENU=Are you ABSOLUTELY sure you want to continue?;ENG=Are you ABSOLUTELY sure you want to continue?';
    BEGIN
      ///<summary>Performing multiple-level confirmation to be sure the user knows what he/she does (helpless, I know)</summary>
      ///<param name="pText">The text to show</param>
      ///<returns>Confirmation result</returns>

      lLevelTexts[1] := eLevelText1;
      lLevelTexts[2] := eLevelText2;
      lLevelTexts[3] := eLevelText3;

      FOR lLevel := 1 TO ARRAYLEN(lLevelTexts) DO
        IF ( NOT (CONFIRM(pText + ' ' + lLevelTexts[lLevel]))) THEN
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    {
      ///<summary>Purely diagnostic code; better don't touch!!!</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-07-28">Created</change>
    }
    END.
  }
}

