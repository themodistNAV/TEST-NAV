OBJECT Codeunit 1317 Aged Inventory Chart Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      YCaptionTxt@1170000001 : TextConst 'ENU=Inventory Value;ENG=Inventory Value';
      XCaptionTxt@1170000000 : TextConst 'ENU=Time on Inventory;ENG=Time on Inventory';
      PeriodStartDate@1170000002 : ARRAY [6] OF Date;
      XFromToYearsTxt@1001 : TextConst '@@@="%1=number of years,%2=number of years";ENU=%1..%2 years;ENG=%1..%2 years';
      XFromToDaysTxt@1000 : TextConst '@@@="%1=number of days,%2=number of days";ENU=%1..%2 days;ENG=%1..%2 days';
      XOverYearsTxt@1002 : TextConst 'ENU=Over %1 years;ENG=Over %1 years';
      XOverDaysTxt@1003 : TextConst 'ENU=Over %1 days;ENG=Over %1 days';

    PROCEDURE UpdateChart@3(VAR BusChartBuf@1000 : Record 485);
    VAR
      ColumnIndex@1007 : Integer;
      PeriodStartDate@1170000002 : ARRAY [6] OF Date;
      InvtValue@1170000000 : ARRAY [5] OF Decimal;
    BEGIN
      WITH BusChartBuf DO BEGIN
        Initialize;
        AddMeasure(YCaptionTxt,1,"Data Type"::Decimal,"Chart Type"::StackedColumn);
        SetXAxis(XCaptionTxt,"Data Type"::String);
        CalcPeriodStartDates(PeriodStartDate,GetPeriodLengthInDays(BusChartBuf));
        AddChartColumns(BusChartBuf);
        CalcInventoryValuePerAge(InvtValue,PeriodStartDate);
        FOR ColumnIndex := 1 TO 5 DO
          SetValueByIndex(0,ColumnIndex - 1,InvtValue[6 - ColumnIndex]);
      END;
    END;

    PROCEDURE DrillDown@5(VAR BusChartBuf@1000 : Record 485);
    VAR
      DrillDownXIndex@1001 : Integer;
    BEGIN
      CalcPeriodStartDates(PeriodStartDate,GetPeriodLengthInDays(BusChartBuf));
      DrillDownXIndex := BusChartBuf."Drill-Down X Index";
      CASE BusChartBuf."Drill-Down Measure Index" + 1 OF
        1: // Item Ledger Entries
          DrillDownItemLedgerEntries(PeriodStartDate[5 - DrillDownXIndex],PeriodStartDate[6 - DrillDownXIndex]);
      END;
    END;

    LOCAL PROCEDURE CalcInventoryValuePerAge@1170000003(VAR InvtValue@1170000001 : ARRAY [5] OF Decimal;PeriodStartDate@1170000000 : ARRAY [6] OF Date);
    VAR
      Item@1170000002 : Record 27;
      ItemLedgerEntry@1170000003 : Record 32;
      InvtQty@1170000004 : ARRAY [5] OF Decimal;
      UnitCost@1170000005 : Decimal;
      PeriodNo@1170000006 : Integer;
    BEGIN
      Item.SETRANGE(Type,Item.Type::Inventory,Item.Type::Inventory);
      IF Item.FIND('-') THEN
        REPEAT
          WITH ItemLedgerEntry DO BEGIN
            SETRANGE(Open,TRUE,TRUE);
            SETRANGE("Item No.",Item."No.",Item."No.");
            IF FIND('-') THEN
              REPEAT
                CalcRemainingQty(ItemLedgerEntry,PeriodStartDate,InvtQty,PeriodNo);
                UnitCost := CalcUnitCost(ItemLedgerEntry);
                InvtValue[PeriodNo] += UnitCost * ABS(InvtQty[PeriodNo]);
              UNTIL NEXT = 0;
          END;
        UNTIL Item.NEXT = 0;
    END;

    LOCAL PROCEDURE AddChartColumns@1170000004(VAR BusChartBuf@1170000000 : Record 485);
    VAR
      I@1170000001 : Integer;
      PeriodLengthOnXAxis@1170000002 : Integer;
      XAxisValueTxt@1000 : Text[30];
      LastXAxisValueTxt@1001 : Text[30];
    BEGIN
      WITH BusChartBuf DO BEGIN
        PeriodLengthOnXAxis := GetPeriodLengthInDays(BusChartBuf);
        IF PeriodLengthOnXAxis = 365 THEN BEGIN
          PeriodLengthOnXAxis := 1;
          XAxisValueTxt := XFromToYearsTxt;
          LastXAxisValueTxt := XOverYearsTxt;
        END ELSE BEGIN
          XAxisValueTxt := XFromToDaysTxt;
          LastXAxisValueTxt := XOverDaysTxt;
        END;
        FOR I := 0 TO 3 DO
          AddColumn(STRSUBSTNO(XAxisValueTxt,I * PeriodLengthOnXAxis,(I + 1) * PeriodLengthOnXAxis));  // X-Axis value
        AddColumn(STRSUBSTNO(LastXAxisValueTxt,FORMAT(4 * PeriodLengthOnXAxis)));  // X-Axis value
      END;
    END;

    LOCAL PROCEDURE CalcPeriodStartDates@1170000000(VAR PeriodStartDate@1170000000 : ARRAY [6] OF Date;PeriodLength@1170000002 : Integer);
    VAR
      I@1170000001 : Integer;
    BEGIN
      PeriodStartDate[6] := WORKDATE;
      PeriodStartDate[1] := 0D;
      FOR I := 2 TO 5 DO
        PeriodStartDate[I] := CALCDATE('<-' + FORMAT((6 - I) * PeriodLength) + 'D>',PeriodStartDate[6]);
    END;

    LOCAL PROCEDURE CalcRemainingQty@1170000005(ItemLedgerEntry@1170000000 : Record 32;PeriodStartDate@1170000002 : ARRAY [6] OF Date;VAR InvtQty@1170000001 : ARRAY [5] OF Decimal;VAR PeriodNo@1170000004 : Integer);
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        FOR PeriodNo := 1 TO 5 DO
          InvtQty[PeriodNo] := 0;

        FOR PeriodNo := 1 TO 5 DO
          IF ("Posting Date" > PeriodStartDate[PeriodNo]) AND
             ("Posting Date" <= PeriodStartDate[PeriodNo + 1])
          THEN
            IF "Remaining Quantity" <> 0 THEN BEGIN
              InvtQty[PeriodNo] := "Remaining Quantity";
              EXIT;
            END;
      END;
    END;

    LOCAL PROCEDURE CalcUnitCost@2(ItemLedgerEntry@1170000000 : Record 32) : Decimal;
    VAR
      ValueEntry@1055 : Record 5802;
      UnitCost@1170000001 : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETRANGE("Item Ledger Entry No.",ItemLedgerEntry."Entry No.");
        UnitCost := 0;

        IF FIND('-') THEN
          REPEAT
            IF "Partial Revaluation" THEN
              SumUnitCost(UnitCost,"Cost Amount (Actual)" + "Cost Amount (Expected)","Valued Quantity")
            ELSE
              SumUnitCost(UnitCost,"Cost Amount (Actual)" + "Cost Amount (Expected)",ItemLedgerEntry.Quantity);
          UNTIL NEXT = 0;
      END;
      EXIT(UnitCost);
    END;

    LOCAL PROCEDURE GetPeriodLengthInDays@1170000001(BusChartBuf@1170000000 : Record 485) : Integer;
    BEGIN
      WITH BusChartBuf DO
        CASE "Period Length" OF
          "Period Length"::Day:
            EXIT(1);
          "Period Length"::Week:
            EXIT(7);
          "Period Length"::Month:
            EXIT(30);
          "Period Length"::Quarter:
            EXIT(90);
          "Period Length"::Year:
            EXIT(365);
        END;
    END;

    LOCAL PROCEDURE SumUnitCost@1170000006(VAR UnitCost@1002 : Decimal;CostAmount@1000 : Decimal;Quantity@1001 : Decimal);
    BEGIN
      UnitCost := UnitCost + CostAmount / ABS(Quantity);
    END;

    LOCAL PROCEDURE DrillDownItemLedgerEntries@1000000002(StartDate@1000000000 : Date;EndDate@1170000000 : Date);
    VAR
      ItemLedgerEntry@1000000001 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE(Open,TRUE);
      // we don't want to include start date in the filter, unless it is 0D
      IF StartDate = 0D THEN
        ItemLedgerEntry.SETRANGE("Posting Date",StartDate,EndDate)
      ELSE
        ItemLedgerEntry.SETRANGE("Posting Date",CALCDATE('<1D>',StartDate),EndDate);
      ItemLedgerEntry.SETFILTER("Remaining Quantity",'<>0');
      PAGE.RUN(PAGE::"Item Ledger Entries",ItemLedgerEntry);
    END;

    BEGIN
    END.
  }
}

