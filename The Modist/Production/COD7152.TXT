OBJECT Codeunit 7152 Export Item Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00,NAVGB9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Item@1007 : Record 27;
      TempDimValue2@1042 : TEMPORARY Record 349;
      TempDimValue3@1037 : TEMPORARY Record 349;
      FileMgt@1039 : Codeunit 419;
      xlApp@1011 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      xlWorkSheet@1009 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      xlWorkSheet2@1008 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      xlPivotTable@1006 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";
      xlPivotCache@1005 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{0002441C-0000-0000-C000-000000000046}:Unknown Automation Server.PivotCache";
      xlRange@1047 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      xlPivotField@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020874-0000-0000-C000-000000000046}:Unknown Automation Server.PivotField";
      xlWorkSheet3@1038 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      NoOfColumns@1001 : Integer;
      MaxLevelDim@1019 : ARRAY [3] OF Integer;
      CharsNavision@1016 : Text[250];
      CharsWindows@1015 : Text[250];
      FileName@1013 : Text;
      Text000@1012 : TextConst 'ENU=You can only export Actual amounts and Budgeted amounts.\Please change the option in the Show field.;ENG=You can only export Actual amounts and Budgeted amounts.\Please change the option in the Show field.';
      Text002@1023 : TextConst 'ENU=General Info._;ENG=General Info._';
      Text003@1020 : TextConst 'ENU=None;ENG=None';
      Text004@1033 : TextConst 'ENU=Day;ENG=Day';
      Text005@1024 : TextConst 'ENU=Week;ENG=Week';
      Text006@1014 : TextConst 'ENU=Month;ENG=Month';
      Text007@1025 : TextConst 'ENU=Quarter;ENG=Quarter';
      Text008@1026 : TextConst 'ENU=Year;ENG=Year';
      Text009@1027 : TextConst 'ENU=Accounting Period;ENG=Accounting Period';
      Text011@1029 : TextConst 'ENU="Analysis by Dimension ";ENG="Analysis by Dimension "';
      Text012@1030 : TextConst 'ENU=Amount Type;ENG=Amount Type';
      Text015@1018 : TextConst 'ENU=Date Filter;ENG=Date Filter';
      Text016@1022 : TextConst 'ENU=Budget Filter;ENG=Budget Filter';
      Text017@1034 : TextConst 'ENU=Pivot Table_;ENG=Pivot Table_';
      Text018@1017 : TextConst 'ENU=Item;ENG=Item';
      Text019@1035 : TextConst 'ENU=Period;ENG=Period';
      Text020@1021 : TextConst 'ENU=Budg. Sales Amount;ENG=Budg. Sales Amount';
      Text022@1043 : TextConst 'ENU=Level;ENG=Level';
      Text023@1040 : TextConst 'ENU=Analysis View Name;ENG=Analysis View Name';
      Text028@1048 : TextConst 'ENU=Show Opposite Sign;ENG=Show Opposite Sign';
      Text029@1004 : TextConst 'ENU=Yes;ENG=Yes';
      Text030@1003 : TextConst 'ENU=No;ENG=No';
      Text031@1051 : TextConst 'ENU=Data_;ENG=Data_';
      Text032@1000 : TextConst 'ENU=Sales Amount;ENG=Sales Amount';
      Text033@1053 : TextConst 'ENU=Cost Amount;ENG=Cost Amount';
      Text035@1055 : TextConst 'ENU=Budg Cost Amount;ENG=Budg Cost Amount';
      Text036@1056 : TextConst 'ENU=Budg. Quantity;ENG=Budg. Quantity';
      Text037@1041 : TextConst 'ENU=There are more than %1 rows within the filters. Excel only allows up to %1 rows.\You can either narrow the filters or choose a higher %2 value on the %3.;ENG=There are more than %1 rows within the filters. Excel only allows up to %1 rows.\You can either narrow the filters or choose a higher %2 value on the %3.';
      Text038@1032 : TextConst 'ENU=The exported data result exceeds a system limit.\Limit the selection by clearing the Show Column Name field.;ENG=The exported data result exceeds a system limit.\Limit the selection by clearing the Show Column Name field.';
      Text039@1036 : TextConst 'ENU=Location;ENG=Location';
      ExcelVersion@1046 : Text[30];
      AccNoPrefix@1045 : Code[10];

    PROCEDURE ExportData@3(VAR ItemAnalysisViewEntry@1000 : Record 7154;Line@1002 : Text[30];Column@1005 : Text[30];AmountField@1009 : Option;PeriodType@1010 : Option;ShowName@1011 : Boolean;DateFilter@1013 : Code[250];ItemFilter@1004 : Code[250];BudgetFilter@1014 : Code[250];Dim1Filter@1015 : Code[250];Dim2Filter@1017 : Code[250];Dim3Filter@1018 : Code[250];ShowActualBudg@1024 : 'Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%';LocationFilter@1031 : Code[250];Sign@1006 : Boolean);
    VAR
      ItemAnalysisViewFilter@1028 : Record 7153;
      GLSetup@1025 : Record 98;
      ExcelBuffer@1023 : TEMPORARY Record 370;
      ItemAnalysisView@1001 : Record 7152;
      FormatString@1012 : Text[30];
      NoOfRows@1003 : Integer;
      RowNoCount@1020 : Integer;
      xlSheetName@1032 : Text[100];
    BEGIN
      IF (ShowActualBudg <> 0) AND (ShowActualBudg <> 1) THEN
        ERROR(Text000);
      CREATE(xlApp,TRUE,TRUE);
      InitCharTables;
      WITH ItemAnalysisViewEntry DO BEGIN
        NoOfRows := CreateFile(
            ItemAnalysisViewEntry,ShowName,ItemFilter,Dim1Filter,Dim2Filter,
            Dim3Filter,DateFilter,LocationFilter,BudgetFilter,Sign);
        FileName := FileMgt.DownloadTempFile(FileName);
        xlApp.Workbooks._OpenText(FileName);
        xlWorkSheet := xlApp.ActiveSheet;
        xlSheetName := FORMAT(Text031) + "Analysis View Code";
        xlSheetName := CONVERTSTR(xlSheetName,' -+','___');
        xlWorkSheet.Name := xlSheetName;

        IF AccNoPrefix <> '' THEN BEGIN
          ExcelBuffer.VALIDATE("Column No.",NoOfColumns);
          xlRange := xlWorkSheet.Range('A2:' + ExcelBuffer.xlColID + FORMAT(NoOfRows + 1));
          xlRange.NumberFormat('@');
          xlRange.Replace(AccNoPrefix,'''');
        END;

        xlApp.ActiveWorkbook.Sheets.Add;
        xlWorkSheet3 := xlApp.ActiveSheet;
        xlWorkSheet3.Name := FORMAT(Text002) + CONVERTSTR("Analysis View Code",' -+','___');
        xlWorkSheet3.Range('A1').Value := ItemAnalysisView.TABLECAPTION;
        xlWorkSheet3.Range('B2').Value := FIELDCAPTION("Analysis View Code");
        xlWorkSheet3.Range('C2').Value := "Analysis View Code";
        xlWorkSheet3.Range('B3').Value := FORMAT(Text023);
        ItemAnalysisView.GET("Analysis Area","Analysis View Code");
        xlWorkSheet3.Range('C3').Value := ItemAnalysisView.Name;
        RowNoCount := 3;
        IF ItemAnalysisView."Item Filter" <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := ItemAnalysisView.FIELDCAPTION("Item Filter");
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := ItemAnalysisView."Item Filter";
        END;
        RowNoCount := RowNoCount + 1;

        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := ItemAnalysisView.FIELDCAPTION("Date Compression");

        CASE ItemAnalysisView."Date Compression" OF
          0:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text003);
          1:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text004);
          2:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text005);
          3:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text006);
          4:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text007);
          5:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text008);
          6:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text009);
        END;
        IF ItemAnalysisView."Starting Date" <> 0D THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := ItemAnalysisView.FIELDCAPTION("Starting Date");
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(ItemAnalysisView."Starting Date");
        END;
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := ItemAnalysisView.FIELDCAPTION("Last Date Updated");
        xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := ItemAnalysisView."Last Date Updated";
        ItemAnalysisViewFilter.SETRANGE("Analysis Area","Analysis Area");
        ItemAnalysisViewFilter.SETFILTER("Analysis View Code","Analysis View Code");
        IF ItemAnalysisViewFilter.FIND('-') THEN
          REPEAT
            RowNoCount := RowNoCount + 1;
            xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := ItemAnalysisViewFilter."Dimension Code";
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := ItemAnalysisViewFilter."Dimension Value Filter";
          UNTIL ItemAnalysisViewFilter.NEXT = 0;
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('A' + FORMAT(RowNoCount)).Value := FORMAT(Text011);
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text012);

        IF DateFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text015);
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := DateFilter;
        END;
        IF ItemFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := ItemAnalysisView.FIELDCAPTION("Item Filter");
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := ItemFilter;
        END;
        IF LocationFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text039);
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := LocationFilter;
        END;

        IF BudgetFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text016);
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := BudgetFilter;
        END;
        IF Dim1Filter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := ItemAnalysisView."Dimension 1 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim1Filter;
        END;
        IF Dim2Filter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := ItemAnalysisView."Dimension 2 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim2Filter;
        END;
        IF Dim3Filter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := ItemAnalysisView."Dimension 3 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim3Filter;
        END;
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text028);
        IF Sign THEN
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text029)
        ELSE
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text030);

        ExcelBuffer.VALIDATE("Column No.",13 + NoOfColumns);
        xlPivotCache :=
          xlApp.ActiveWorkbook.PivotCaches.Add(1,STRSUBSTNO('%1!A1:%2%3',
              xlSheetName,ExcelBuffer.xlColID,NoOfRows + 1));
        xlPivotCache.CreatePivotTable('','PivotTable1');

        xlWorkSheet2 := xlApp.ActiveSheet;
        xlPivotTable := xlWorkSheet2.PivotTables('PivotTable1');
        xlWorkSheet2.Name := FORMAT(Text017) + CONVERTSTR("Analysis View Code",' -+','___');

        IF Line <> '' THEN
          CASE Line OF
            Text018:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text018) + ' ' + FORMAT(Text022) + ' ' + FORMAT(0));
            Text019:
              CASE PeriodType OF
                0:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text004));
                1:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text005));
                2:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text006));
                3:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text007));
                4:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text008));
                5:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text009));
              END;
            Text039:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text039));
            ItemAnalysisView."Dimension 1 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(ItemAnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[1]));
            ItemAnalysisView."Dimension 2 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(ItemAnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[2]));
            ItemAnalysisView."Dimension 3 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(ItemAnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[3]));
          END;

        xlPivotField.Orientation := 1; // xlRowField
        xlPivotField.Position := 1;

        IF Column <> '' THEN
          CASE Column OF
            Text018:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text018) + ' ' + FORMAT(Text022) + ' ' + FORMAT(0));
            Text019:
              CASE PeriodType OF
                0:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text004));
                1:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text005));
                2:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text006));
                3:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text007));
                4:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text008));
                5:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text009));
              END;
            Text039:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text039));
            ItemAnalysisView."Dimension 1 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(ItemAnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[1]));
            ItemAnalysisView."Dimension 2 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(ItemAnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[2]));
            ItemAnalysisView."Dimension 3 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(ItemAnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[3]));
          END;
        xlPivotField.Orientation := 2; // xlColumnField
        xlPivotField.Position := 1;

        IF ShowActualBudg = 0 THEN
          CASE AmountField OF
            0:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text032));
            1:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text033));
            2:
              xlPivotField := xlPivotTable.PivotFields(FIELDCAPTION(Quantity));
          END
        ELSE
          xlPivotField := xlPivotTable.PivotFields(FORMAT(Text020));

        xlPivotField.Orientation := 4; // xlDataField
        xlPivotField.Position := 1;
        xlPivotField."Function" := 0;// sum

        GLSetup.GET;
        FormatString := DELCHR(FORMAT(ROUND(1000.01,GLSetup."Amount Rounding Precision"),0),'<',' ');
        FormatString[1] := '#';
        FormatString[3] := '#';
        FormatString[4] := '#';
        IF STRLEN(FormatString) >= 8 THEN
          FormatString[8] := '0';
        xlPivotField.NumberFormat := FormatString; // '#.##0,00';

        xlPivotTable.SmallGrid := FALSE;
      END;
      xlApp.Visible := TRUE
    END;

    LOCAL PROCEDURE CreateFile@1(VAR ItemAnalysisViewEntry@1000 : Record 7154;ShowName@1018 : Boolean;ItemFilter@1020 : Code[250];Dim1Filter@1025 : Code[250];Dim2Filter@1024 : Code[250];Dim3Filter@1023 : Code[250];DateFilter@1011 : Code[250];LocationFilter@1030 : Text[250];BudgetFilter@1045 : Code[250];Sign@1009 : Boolean) : Integer;
    VAR
      ItemAnalysisViewEntry2@1001 : Record 7154;
      ItemAnalysisView@1002 : Record 7152;
      ItemAnalysisViewBudgetEntry2@1032 : Record 7156;
      TextFile@1003 : File;
      Column@1019 : Text[100];
      Line@1004 : ARRAY [5] OF Text[1024];
      Line2@1038 : Text[1024];
      Tab@1005 : Text[1];
      StartDate@1028 : Date;
      EndDate@1013 : Date;
      NoOfRows@1008 : Integer;
      WeekNo@1029 : Integer;
      Year@1026 : Integer;
      SignValue@1007 : Integer;
      i@1012 : Integer;
      j@1016 : Integer;
    BEGIN
      TextFile.CREATETEMPFILE;
      FileName := TextFile.NAME + '.txt';
      TextFile.CLOSE;

      TextFile.TEXTMODE(TRUE);
      TextFile.CREATE(FileName);
      ItemAnalysisViewEntry2.COPY(ItemAnalysisViewEntry);
      ItemAnalysisView.GET(ItemAnalysisViewEntry."Analysis Area",ItemAnalysisViewEntry."Analysis View Code");
      ItemAnalysisViewEntry2.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
      ItemAnalysisViewEntry2.SETRANGE("Analysis View Code",ItemAnalysisView.Code);
      FindDimLevel(ItemAnalysisView."Dimension 1 Code",Dim1Filter,1);
      FindDimLevel(ItemAnalysisView."Dimension 2 Code",Dim2Filter,2);
      FindDimLevel(ItemAnalysisView."Dimension 3 Code",Dim3Filter,3);

      Tab[1] := 9;
      SignValue := 1;
      IF Sign THEN
        SignValue := -1;

      NoOfRows := 0;

      WITH ItemAnalysisViewEntry2 DO BEGIN
        Line[1] := Line[1] + FORMAT(Text018) + ' ' + FORMAT(Text022) + ' ' + FORMAT(0) + Tab;
        NoOfColumns := NoOfColumns + 1;
        IF ItemAnalysisView."Dimension 1 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[1] DO BEGIN
            Line[1] := Line[1] + ItemAnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;
        IF ItemAnalysisView."Dimension 2 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[2] DO BEGIN
            Line[1] := Line[1] + ItemAnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;
        IF ItemAnalysisView."Dimension 3 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[3] DO BEGIN
            Line[1] := Line[1] + ItemAnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;

        Line[1] := Line[1] + Text004 + Tab + Text005 + Tab + Text006 + Tab + Text007 +
          Tab + Text008 + Tab + Text009 + Tab + Text032 + Tab +
          Text033 + Tab + FIELDCAPTION(Quantity) + Tab + Text039 + Tab +
          Text020 + Tab + Text035 + Tab + Text036 + Tab;

        Line[1] := CONVERTSTR(Line[1],CharsNavision,CharsWindows);
        TextFile.WRITE(Line[1]);
        StartDate := "Posting Date";

        IF FIND('-') THEN
          REPEAT
            IF "Item No." <> Item."No." THEN
              IF Item.GET("Item No.") THEN
                Item.MARK(TRUE);
            IF "Posting Date" = NORMALDATE("Posting Date") THEN BEGIN
              IF "Posting Date" >= EndDate THEN
                EndDate := "Posting Date"
              ELSE
                IF "Posting Date" <= StartDate THEN
                  StartDate := "Posting Date";
              Line[1] := '';
              Line[2] := '';
              Line[3] := '';
              Line[4] := '';
              Line[5] := '';
              NoOfRows := NoOfRows + 1;
              CheckNoOfRows(NoOfRows,ItemAnalysisView);
              Line[1] := CONVERTSTR(FillOutItem("Item No.",ShowName),CharsNavision,CharsWindows);
              IF ItemAnalysisView."Dimension 1 Code" <> '' THEN
                Line[2] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 1 Value Code",ItemAnalysisView."Dimension 1 Code",1,ShowName),
                    CharsNavision,CharsWindows);

              IF ItemAnalysisView."Dimension 2 Code" <> '' THEN
                Line[3] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 2 Value Code",ItemAnalysisView."Dimension 2 Code",2,ShowName),
                    CharsNavision,CharsWindows);

              IF ItemAnalysisView."Dimension 3 Code" <> '' THEN
                Line[4] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 3 Value Code",ItemAnalysisView."Dimension 3 Code",3,ShowName),
                    CharsNavision,CharsWindows);

              Line2 :=
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4)) + Tab +
                FORMAT(("Sales Amount (Actual)" + "Sales Amount (Expected)") * SignValue) + Tab +
                FORMAT(("Cost Amount (Actual)" + "Cost Amount (Expected)" + "Cost Amount (Non-Invtbl.)") * SignValue) + Tab +
                FORMAT(Quantity * SignValue) + Tab + FORMAT("Location Code") + Tab;
              Line2 := CONVERTSTR(Line2,CharsNavision,CharsWindows);

              TextFile.WRITE(Line[1] + Line[2] + Line[3] + Line[4] + Line2);
            END;
          UNTIL NEXT = 0;
      END;

      Line2 := '';
      WITH ItemAnalysisViewBudgetEntry2 DO BEGIN
        SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
        SETRANGE("Analysis View Code",ItemAnalysisView.Code);
        SETFILTER("Posting Date",DateFilter);
        SETFILTER("Item No.",ItemFilter);
        SETFILTER("Location Code",LocationFilter);
        SETFILTER("Budget Name",BudgetFilter);
        SETFILTER("Dimension 1 Value Code",Dim1Filter);
        SETFILTER("Dimension 2 Value Code",Dim2Filter);
        SETFILTER("Dimension 3 Value Code",Dim3Filter);
        IF FIND('-') THEN
          REPEAT
            IF "Item No." <> Item."No." THEN
              IF Item.GET("Item No.") THEN
                Item.MARK(TRUE);
            IF "Posting Date" = NORMALDATE("Posting Date") THEN BEGIN
              IF "Posting Date" >= EndDate THEN
                EndDate := "Posting Date"
              ELSE
                IF "Posting Date" <= StartDate THEN
                  StartDate := "Posting Date";
              Line[1] := '';
              Line[2] := '';
              Line[3] := '';
              Line[4] := '';
              Line[5] := '';
              NoOfRows := NoOfRows + 1;
              CheckNoOfRows(NoOfRows,ItemAnalysisView);
              Line[1] := CONVERTSTR(FillOutItem("Item No.",ShowName),
                  CharsNavision,CharsWindows);

              IF ItemAnalysisView."Dimension 1 Code" <> '' THEN
                Line[2] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 1 Value Code",ItemAnalysisView."Dimension 1 Code",1,ShowName),
                    CharsNavision,CharsWindows);

              IF ItemAnalysisView."Dimension 2 Code" <> '' THEN
                Line[3] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 2 Value Code",ItemAnalysisView."Dimension 2 Code",2,ShowName),
                    CharsNavision,CharsWindows);

              IF ItemAnalysisView."Dimension 3 Code" <> '' THEN
                Line[4] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 3 Value Code",ItemAnalysisView."Dimension 3 Code",3,ShowName),
                    CharsNavision,CharsWindows);

              Line2 :=
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4)) + Tab +
                Tab + Tab + Tab + FORMAT("Location Code") + Tab + FORMAT("Sales Amount" * SignValue) + Tab +
                FORMAT("Cost Amount" * SignValue) + Tab + FORMAT(Quantity * SignValue) + Tab ;
              Line2 := CONVERTSTR(Line2,CharsNavision,CharsWindows);

              TextFile.WRITE(Line[1] + Line[2] + Line[3] + Line[4] + Line[5] + Line2);
            END;
          UNTIL NEXT = 0;
      END;

      Line2 := '';
      IF ItemFilter <> '' THEN
        Item.SETFILTER("No.",ItemFilter);
      IF Item.FIND('-') THEN
        REPEAT
          IF NOT Item.MARK THEN BEGIN
            NoOfRows := NoOfRows + 1;
            CheckNoOfRows(NoOfRows,ItemAnalysisView);
            Line2 :=
              CONVERTSTR(
                FillOutItem(Item."No.",ShowName),
                CharsNavision,CharsWindows);
            TextFile.WRITE(Line2);
          END;
        UNTIL Item.NEXT = 0;

      IF ItemAnalysisView."Dimension 1 Code" <> '' THEN BEGIN
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim1Filter);
        TempDimValue2.SETFILTER("Dimension Code",ItemAnalysisView."Dimension 1 Code");
        Line[1] := '';
        Line2 := '';
        TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        IF TempDimValue2.FIND('-') THEN
          REPEAT
            IF NOT TempDimValue2.MARK THEN BEGIN
              NoOfRows := NoOfRows + 1;
              CheckNoOfRows(NoOfRows,ItemAnalysisView);
              Line2 :=
                CONVERTSTR(
                  FillOutDim(TempDimValue2.Code,ItemAnalysisView."Dimension 1 Code",1,ShowName),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(Tab + Line[1] + Line2);
            END;
          UNTIL TempDimValue2.NEXT = 0;
      END;

      IF ItemAnalysisView."Dimension 2 Code" <> '' THEN BEGIN
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim2Filter);
        TempDimValue2.SETFILTER("Dimension Code",ItemAnalysisView."Dimension 2 Code");
        Line[1] := '';
        FOR j := 1 TO MaxLevelDim[1] DO
          Line[1] := Line[1] + Tab;
        Line2 := '';
        TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        IF TempDimValue2.FIND('-') THEN
          REPEAT
            IF NOT TempDimValue2.MARK THEN BEGIN
              NoOfRows := NoOfRows + 1;
              CheckNoOfRows(NoOfRows,ItemAnalysisView);
              Line2 :=
                CONVERTSTR(
                  FillOutDim(TempDimValue2.Code,ItemAnalysisView."Dimension 2 Code",2,ShowName),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(Tab + Tab + Line[1] + Line2);
            END;
          UNTIL TempDimValue2.NEXT = 0;
      END;

      IF ItemAnalysisView."Dimension 3 Code" <> '' THEN BEGIN
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim3Filter);
        TempDimValue2.SETFILTER("Dimension Code",ItemAnalysisView."Dimension 3 Code");
        Line[1] := '';
        FOR j := 1 TO MaxLevelDim[1] + MaxLevelDim[2] DO
          Line[1] := Line[1] + Tab;
        Line2 := '';
        TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        IF TempDimValue2.FIND('-') THEN
          REPEAT
            IF NOT TempDimValue2.MARK THEN BEGIN
              NoOfRows := NoOfRows + 1;
              CheckNoOfRows(NoOfRows,ItemAnalysisView);
              Line2 :=
                CONVERTSTR(
                  FillOutDim(TempDimValue2.Code,ItemAnalysisView."Dimension 3 Code",3,ShowName),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(Tab + Tab + Tab + Line[1] + Line2);
            END;
          UNTIL TempDimValue2.NEXT = 0;
      END;

      WeekNo := DATE2DWY(StartDate,2);
      Year := DATE2DWY(StartDate,3);
      StartDate := DWY2DATE(1,WeekNo,Year);
      Line2 := '';
      FOR i := 1 TO NoOfColumns DO
        Line2 := Line2 + Tab;

      WHILE StartDate <= EndDate DO BEGIN
        NoOfRows := NoOfRows + 1;
        CheckNoOfRows(NoOfRows,ItemAnalysisView);
        TextFile.WRITE(
          Line2 + Tab + FORMAT(StartDate) + Tab + FORMAT(CalculatePeriodStart(StartDate,1)) + Tab +
          FORMAT(CalculatePeriodStart(StartDate,2)) + Tab + FORMAT(CalculatePeriodStart(StartDate,3)) + Tab +
          FORMAT(CalculatePeriodStart(StartDate,4)));
        StartDate := CALCDATE('<1W>',StartDate);
      END;

      TextFile.CLOSE;
      EXIT(NoOfRows);
    END;

    LOCAL PROCEDURE CalculatePeriodStart@4(PostingDate@1000 : Date;DateCompression@1001 : Integer) : Date;
    VAR
      AccountingPeriod@1002 : Record 10560;
      PrevPostingDate@1004 : Date;
      PrevCalculatedPostingDate@1005 : Date;
    BEGIN
      CASE DateCompression OF
        0:// Week :
          PostingDate := CALCDATE('<CW+1D-1W>',PostingDate);
        1:// Month :
          PostingDate := CALCDATE('<CM+1D-1M>',PostingDate);
        2:// Quarter :
          PostingDate := CALCDATE('<CQ+1D-1Q>',PostingDate);
        3:// Year :
          PostingDate := CALCDATE('<CY+1D-1Y>',PostingDate);
        4:// Period :
          BEGIN
            IF PostingDate <> PrevPostingDate THEN BEGIN
              PrevPostingDate := PostingDate;
              AccountingPeriod.SETRANGE("Period Start",0D,PostingDate);
              IF AccountingPeriod.FINDLAST THEN BEGIN
                PrevCalculatedPostingDate := AccountingPeriod."Period Start"
              END ELSE
                PrevCalculatedPostingDate := PostingDate;
            END;
            PostingDate := PrevCalculatedPostingDate;
          END;
      END;
      EXIT(PostingDate);
    END;

    PROCEDURE InitCharTables@2();
    VAR
      i@1000 : Integer;
      c@1001 : Char;
      CharFile@1002 : File;
      TempFileName@1003 : Text;
    BEGIN
      FOR i := 65 TO 255 DO BEGIN
        c := i;
        CharsWindows[i - 64] := c;
      END;
      CharFile.CREATETEMPFILE;
      TempFileName := CharFile.NAME + '.txt';
      CharFile.CLOSE;
      CharFile.CREATE(TempFileName);
      CharFile.TEXTMODE := TRUE;
      CharFile.WRITE(CharsWindows);
      CharFile.CLOSE;
      TempFileName := FileMgt.DownloadTempFile(TempFileName);
      xlApp.Workbooks.OpenText(TempFileName);
      xlWorkSheet := xlApp.ActiveSheet;
      CharsNavision := xlWorkSheet.Range('A1').Value;
      xlApp.ActiveWorkbook.Close(FALSE);
      IF STRLEN(CharsWindows) <> STRLEN(CharsNavision) THEN
        IF (STRLEN(CharsWindows) = STRLEN(CharsNavision) - 2) AND
           (CharsNavision[1] = '"') AND (CharsNavision[STRLEN(CharsNavision)] = '"')
        THEN
          CharsNavision := COPYSTR(CharsNavision,2,STRLEN(CharsNavision) - 2)
        ELSE
          CharsNavision := CharsWindows; // Not possible to translate.
    END;

    LOCAL PROCEDURE FindDimLevel@8(DimCode@1000 : Code[20];DimFilter@1001 : Code[250];ArrayNo@1003 : Integer);
    VAR
      DimValue@1002 : Record 349;
    BEGIN
      IF DimCode = '' THEN
        EXIT;
      DimValue.SETRANGE("Dimension Code",DimCode);
      IF DimValue.FIND('-') THEN
        REPEAT
          TempDimValue2.COPY(DimValue);
          TempDimValue2.INSERT;
          TempDimValue3.COPY(DimValue);
          TempDimValue3.INSERT;
        UNTIL DimValue.NEXT = 0;
      TempDimValue2.SETFILTER(Code,DimFilter);
      IF TempDimValue2.FIND('-') THEN
        REPEAT
          IF MaxLevelDim[ArrayNo] < TempDimValue2.Indentation THEN
            MaxLevelDim[ArrayNo] := TempDimValue2.Indentation;
        UNTIL TempDimValue2.NEXT = 0;
    END;

    LOCAL PROCEDURE FindDimParent@6(VAR Account@1000 : Code[20];DimensionCode@1001 : Code[20]);
    BEGIN
      TempDimValue3.RESET;
      TempDimValue3.SETRANGE("Dimension Code",DimensionCode);
      TempDimValue3.GET(DimensionCode,Account);
      IF TempDimValue3.Indentation <> 0 THEN BEGIN
        TempDimValue3.SETRANGE(Indentation,TempDimValue3.Indentation - 1);
        TempDimValue3.NEXT(-1);
      END;
      Account := TempDimValue3.Code;
    END;

    LOCAL PROCEDURE FillOutDim@9(DimValueCode@1003 : Code[20];DimCode@1004 : Code[20];DimNo@1005 : Integer;ShowName@1006 : Boolean) Line@1000 : Text[1024];
    VAR
      Indent@1002 : Integer;
      i@1001 : Integer;
      DimValueCode2@1011 : Code[20];
    BEGIN
      IF DimValueCode <> '' THEN BEGIN
        IF TempDimValue2.GET(DimCode,DimValueCode) THEN
          TempDimValue2.MARK(TRUE)
        ELSE
          TempDimValue2.INIT;
        DimValueCode2 := DimValueCode;
        Indent := TempDimValue2.Indentation;
        AddAcc(Line,ShowName,TRUE,DimValueCode2,TempDimValue2.Name);
        IF Indent <> MaxLevelDim[DimNo] THEN
          FOR i := (Indent + 1) TO MaxLevelDim[DimNo] DO
            AddAcc(Line,ShowName,TRUE,DimValueCode2,TempDimValue2.Name);
        IF Indent <> 0 THEN
          FOR i := Indent DOWNTO 1 DO BEGIN
            FindDimParent(DimValueCode2,DimCode);
            TempDimValue2.GET(DimCode,DimValueCode2);
            TempDimValue2.MARK(TRUE);
            AddAcc(Line,ShowName,FALSE,DimValueCode2,TempDimValue2.Name);
          END;
      END ELSE
        FOR i := 0 TO MaxLevelDim[DimNo] DO
          AddAcc(Line,FALSE,TRUE,'','');
      EXIT(Line)
    END;

    LOCAL PROCEDURE FillOutItem@5(ItemNo@1001 : Code[20];ShowName@1005 : Boolean) Line@1009 : Text[1024];
    BEGIN
      AddAcc(Line,ShowName AND (ItemNo <> ''),TRUE,ItemNo,Item.Description);
    END;

    PROCEDURE SetCommonFilters@10(CurrentAnalysisArea@1001 : Option;CurrentAnalysisViewCode@1002 : Code[10];VAR ItemAnalysisViewEntry@1000 : Record 7154;DateFilter@1006 : Text[30];ItemFilter@1007 : Code[250];Dim1Filter@1009 : Code[250];Dim2Filter@1010 : Code[250];Dim3Filter@1011 : Code[250];LocationFilter@1013 : Code[250]);
    BEGIN
      ItemAnalysisViewEntry.SETRANGE("Analysis Area",CurrentAnalysisArea);
      ItemAnalysisViewEntry.SETRANGE("Analysis View Code",CurrentAnalysisViewCode);
      IF DateFilter <> '' THEN
        ItemAnalysisViewEntry.SETFILTER("Posting Date",DateFilter);
      IF ItemFilter <> '' THEN
        ItemAnalysisViewEntry.SETFILTER("Item No.",ItemFilter);
      IF Dim1Filter <> '' THEN
        ItemAnalysisViewEntry.SETFILTER("Dimension 1 Value Code",Dim1Filter);
      IF Dim2Filter <> '' THEN
        ItemAnalysisViewEntry.SETFILTER("Dimension 2 Value Code",Dim2Filter);
      IF Dim3Filter <> '' THEN
        ItemAnalysisViewEntry.SETFILTER("Dimension 3 Value Code",Dim3Filter);
      IF LocationFilter <> '' THEN
        ItemAnalysisViewEntry.SETFILTER("Location Code",LocationFilter);
    END;

    LOCAL PROCEDURE CheckNoOfRows@7(NoOfRows@1000 : Integer;ItemAnalysisView@1001 : Record 7152);
    BEGIN
      IF ExcelVersion = '' THEN
        IF NOT ISCLEAR(xlApp) THEN
          ExcelVersion := COPYSTR(xlApp.Version,1,MAXSTRLEN(ExcelVersion));

      IF (ExcelVersion < '12.0') AND (NoOfRows > 65000) THEN
        ERROR(Text037,65000,ItemAnalysisView.FIELDCAPTION("Date Compression"),ItemAnalysisView.TABLECAPTION);
    END;

    LOCAL PROCEDURE AddAcc@14(VAR Line@1005 : Text[1024];ShowName@1002 : Boolean;AppendToLine@1003 : Boolean;Account@1000 : Code[20];AccName@1001 : Text[50]);
    VAR
      Tab@1007 : Text[1];
      s@1004 : Text[80];
    BEGIN
      Tab[1] := 9;
      IF Account = '' THEN
        s := ''
      ELSE
        IF ShowName THEN
          s := Account + ' ' + AccName
        ELSE
          s := AddAccPrefix(Account);

      IF STRLEN(Line) + STRLEN(s) + 1 > MAXSTRLEN(Line) THEN
        ERROR(Text038);

      IF AppendToLine THEN
        Line := Line + s + Tab
      ELSE
        Line := s + Tab + Line;
    END;

    LOCAL PROCEDURE AddAccPrefix@12(Acc@1000 : Code[20]) : Code[30];
    BEGIN
      IF AccNoPrefix = '' THEN
        AccNoPrefix := '_NAV_'; // Used to ensure that Acc. No. and Dim values are formatted as text.

      IF Acc[1] IN ['0'..'9'] THEN
        EXIT(AccNoPrefix + Acc);
      EXIT(Acc);
    END;

    EVENT xlWorkSheet2@1008::SelectionChange@1543(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet2@1008::BeforeDoubleClick@1537(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet2@1008::BeforeRightClick@1534(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet2@1008::Activate@304();
    BEGIN
    END;

    EVENT xlWorkSheet2@1008::Deactivate@1530();
    BEGIN
    END;

    EVENT xlWorkSheet2@1008::Calculate@279();
    BEGIN
    END;

    EVENT xlWorkSheet2@1008::Change@1545(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet2@1008::FollowHyperlink@1470(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlWorkSheet@1009::SelectionChange@1543(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet@1009::BeforeDoubleClick@1537(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet@1009::BeforeRightClick@1534(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet@1009::Activate@304();
    BEGIN
    END;

    EVENT xlWorkSheet@1009::Deactivate@1530();
    BEGIN
    END;

    EVENT xlWorkSheet@1009::Calculate@279();
    BEGIN
    END;

    EVENT xlWorkSheet@1009::Change@1545(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet@1009::FollowHyperlink@1470(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlApp@1011::NewWorkbook@1565(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1011::SheetSelectionChange@1558(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1011::SheetBeforeDoubleClick@1559(Sh@1002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1011::SheetBeforeRightClick@1560(Sh@1002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1011::SheetActivate@1561(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1011::SheetDeactivate@1562(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1011::SheetCalculate@1563(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1011::SheetChange@1564(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookOpen@1567(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookActivate@1568(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookDeactivate@1569(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookBeforeClose@1570(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookBeforeSave@1571(Wb@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SaveAsUI@1001 : Boolean;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookBeforePrint@1572(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookNewSheet@1573(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookAddinInstall@1574(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookAddinUninstall@1575(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1011::WindowResize@1554(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1011::WindowActivate@1556(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1011::WindowDeactivate@1557(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1011::SheetFollowHyperlink@1854(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::SelectionChange@1543(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::BeforeDoubleClick@1537(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::BeforeRightClick@1534(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::Activate@304();
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::Deactivate@1530();
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::Calculate@279();
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::Change@1545(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::FollowHyperlink@1470(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    BEGIN
    END.
  }
}

