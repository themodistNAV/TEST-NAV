OBJECT Page 99000959 Order Promising Lines
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Order Promising Lines;
               ENG=Order Promising Lines];
    InsertAllowed=No;
    SourceTable=Table99000880;
    DataCaptionExpr=AvailabilityMgt.GetCaption;
    SourceTableView=SORTING(Requested Shipment Date);
    PageType=Worksheet;
    RefreshOnActivate=Yes;
    OnInit=BEGIN
             AcceptButtonEnable := TRUE;
           END;

    OnOpenPage=VAR
                 SalesHeader@1000 : Record 36;
                 ServHeader@1001 : Record 5900;
                 Job@1002 : Record 167;
               BEGIN
                 OrderPromisingCalculationDone := FALSE;
                 Accepted := FALSE;
                 IF GETFILTER("Source ID") <> '' THEN
                   CASE CrntSourceType OF
                     "Source Type"::"Service Order":
                       BEGIN
                         ServHeader."Document Type" := ServHeader."Document Type"::Order;
                         ServHeader."No." := GETRANGEMIN("Source ID");
                         ServHeader.FIND;
                         SetServHeader(ServHeader);
                       END;
                     "Source Type"::Job:
                       BEGIN
                         Job.Status := Job.Status::Order;
                         Job."No." := GETRANGEMIN("Source ID");
                         Job.FIND;
                         SetJob(Job);
                       END;
                     ELSE
                       SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
                       SalesHeader."No." := GETRANGEMIN("Source ID");
                       SalesHeader.FIND;
                       SetSalesHeader(SalesHeader);
                       AcceptButtonEnable := SalesHeader.Status = SalesHeader.Status::Open;
                   END;
               END;

    OnClosePage=VAR
                  CapableToPromise@1000 : Codeunit 99000886;
                BEGIN
                  IF Accepted = FALSE THEN
                    CapableToPromise.RemoveReqLines(CrntSourceID,0,0,TRUE);
                END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 9       ;1   ;ActionGroup;
                      CaptionML=[ENU=&Calculate;
                                 ENG=&Calculate];
                      Image=Calculate }
      { 10      ;2   ;Action    ;
                      Name=AvailableToPromise;
                      CaptionML=[ENU=Available-to-Promise;
                                 ENG=Available-to-Promise];
                      Image=AvailableToPromise;
                      OnAction=BEGIN
                                 CheckCalculationDone;
                                 AvailabilityMgt.CalcAvailableToPromise(Rec);
                               END;
                                }
      { 11      ;2   ;Action    ;
                      Name=CapableToPromise;
                      CaptionML=[ENU=Capable-to-Promise;
                                 ENG=Capable-to-Promise];
                      Image=CapableToPromise;
                      OnAction=BEGIN
                                 CheckCalculationDone;
                                 AvailabilityMgt.CalcCapableToPromise(Rec,CrntSourceID);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 2       ;1   ;Action    ;
                      Name=AcceptButton;
                      CaptionML=[ENU=&Accept;
                                 ENG=&Accept];
                      Promoted=Yes;
                      Enabled=AcceptButtonEnable;
                      Image=Approve;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ReqLine@1001 : Record 246;
                               BEGIN
                                 Accepted := TRUE;
                                 AvailabilityMgt.UpdateSource(Rec);
                                 ReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
                                 ReqLine.SETRANGE("Order Promising ID",CrntSourceID);
                                 ReqLine.MODIFYALL("Accept Action Message",TRUE);
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 17  ;1   ;Group      }

    { 19  ;2   ;Field     ;
                CaptionML=[ENU=No.;
                           ENG=No.];
                SourceExpr=CrntSourceID;
                Editable=FALSE }

    { 16  ;1   ;Group     ;
                Editable=TRUE;
                GroupType=Repeater }

    { 29  ;2   ;Field     ;
                SourceExpr="Item No.";
                Editable=FALSE }

    { 13  ;2   ;Field     ;
                SourceExpr=Description;
                Editable=FALSE }

    { 1   ;2   ;Field     ;
                SourceExpr="Requested Delivery Date";
                Editable=FALSE }

    { 26  ;2   ;Field     ;
                SourceExpr="Requested Shipment Date" }

    { 4   ;2   ;Field     ;
                SourceExpr="Planned Delivery Date" }

    { 6   ;2   ;Field     ;
                SourceExpr="Original Shipment Date";
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                SourceExpr="Earliest Shipment Date" }

    { 15  ;2   ;Field     ;
                SourceExpr=Quantity;
                Editable=FALSE }

    { 3   ;2   ;Field     ;
                SourceExpr="Required Quantity";
                Editable=FALSE }

    { 5   ;2   ;Field     ;
                CaptionML=[ENU=Availability;
                           ENG=Availability];
                DecimalPlaces=0:5;
                SourceExpr=CalcAvailability }

    { 7   ;2   ;Field     ;
                SourceExpr="Unavailability Date";
                Editable=FALSE }

    { 20  ;2   ;Field     ;
                SourceExpr="Unavailable Quantity";
                Editable=FALSE }

    { 22  ;2   ;Field     ;
                SourceExpr="Unit of Measure Code";
                Editable=FALSE }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      AvailabilityMgt@1004 : Codeunit 99000889;
      Accepted@1005 : Boolean;
      CrntSourceID@1007 : Code[20];
      CrntSourceType@1010 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry,Prod. Order Line,Prod. Order Component,Planning Line,Planning Component,Transfer,Service Order,Job';
      AcceptButtonEnable@19001938 : Boolean INDATASET;
      OrderPromisingCalculationDone@1000 : Boolean;
      Text000@1001 : TextConst 'ENU=The order promising lines are already calculated. You must close and open the window again to perform a new calculation.;ENG=The order promising lines are already calculated. You must close and open the window again to perform a new calculation.';

    PROCEDURE SetSalesHeader@24(VAR CrntSalesHeader@1000 : Record 36);
    BEGIN
      AvailabilityMgt.SetSalesHeader(Rec,CrntSalesHeader);

      CrntSourceType := CrntSourceType::Sales;
      CrntSourceID := CrntSalesHeader."No.";
    END;

    PROCEDURE SetServHeader@1(VAR CrntServHeader@1000 : Record 5900);
    BEGIN
      AvailabilityMgt.SetServHeader(Rec,CrntServHeader);

      CrntSourceType := CrntSourceType::"Service Order";
      CrntSourceID := CrntServHeader."No.";
    END;

    PROCEDURE SetJob@2(VAR CrntJob@1000 : Record 167);
    BEGIN
      AvailabilityMgt.SetJob(Rec,CrntJob);
      CrntSourceType := CrntSourceType::Job;
      CrntSourceID := CrntJob."No.";
    END;

    PROCEDURE SetSourceType@3(SourceType@1000 : Option);
    BEGIN
      CrntSourceType := SourceType;
    END;

    LOCAL PROCEDURE CheckCalculationDone@4();
    BEGIN
      IF OrderPromisingCalculationDone THEN
        ERROR(Text000);
      OrderPromisingCalculationDone := TRUE;
    END;

    BEGIN
    END.
  }
}

