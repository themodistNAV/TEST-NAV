OBJECT Codeunit 9086974 nF. Object Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=30/10/16;
    Time=11:04:03 AM;
    Version List=NF2016.17;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AllObj@1000000000 : Record 2000000038;
      Field@1000000001 : Record 2000000041;
      String@1000000018 : Codeunit 9086971;
      TableFieldTableId@1000000017 : Integer;
      TableFieldFieldType@1000000002 : Integer;
      TableFieldFieldClass@1000000014 : Integer;
      ObjectIdFilter@1000000003 : Code[1024];
      FieldIdFilter@1000000004 : Code[1024];
      tEmpty@1000000008 : TextConst 'ENU=Empty "%1";ENG=Empty "%1"';
      FieldClass@1000000016 : Integer;
      NameFilter@1000000009 : ARRAY [4] OF Text[50];
      NameFilterIndex@1000000011 : Integer;
      NameFound@1000000010 : Boolean;
      tTableId@1000000012 : TextConst 'ENU=Table ID;ENG=Table ID';
      tFieldType@1000000013 : TextConst 'ENU=Field Type;ENG=Field Type';

    PROCEDURE "--- Object ---"@1000000028();
    BEGIN
    END;

    PROCEDURE GetObjectName@1000000042(pObjectType@1000000001 : '0';pObjectId@1000000000 : Integer) : Text;
    BEGIN
      ///<summary>Returning object name</summary>
      ///<param name="pObjectType">Object type</param>
      ///<param name="pObjectId">Object ID</param>
      ///<returns>The name</returns>

      IF ( NOT (AllObj.GET(pObjectType, pObjectId))) THEN
        CLEAR(AllObj);
      EXIT(AllObj."Object Name");
    END;

    PROCEDURE ValidateObjectId@1000000003(pObjectType@1000000001 : '0';pObjectId@1000000000 : Integer);
    VAR
      eUknownObject@1000000002 : TextConst 'ENU="%1 with ID = %2 doesn''t exist.";ENG="%1 with ID = %2 doesn''t exist."';
    BEGIN
      ///<summary>Validating object ID</summary>
      ///<param name="pObjectType">Object type</param>
      ///<param name="pObjectId">Object ID</param>

      IF ( NOT (TryToValidateObjectId(pObjectType, pObjectId))) THEN
      BEGIN
        AllObj."Object Type" := pObjectType;
        ERROR(eUknownObject, FORMAT(AllObj."Object Type"), pObjectId);
      END;
    END;

    PROCEDURE TryToValidateObjectId@1000000117(pObjectType@1000000001 : '0';pObjectId@1000000000 : Integer) : Boolean;
    BEGIN
      ///<summary>Trying to validate object ID</summary>
      ///<param name="pObjectType">Object type</param>
      ///<param name="pObjectId">Object ID</param>
      ///<returns>Result</returns>

      IF (pObjectId = 0) THEN
        EXIT(TRUE);

      IF (pObjectType = 0) THEN
        ERROR(tEmpty, AllObj.FIELDCAPTION("Object Type"));

      AllObj.RESET();
      AllObj.SETRANGE("Object Type", pObjectType);
      ApplyObjectIdFilter(pObjectId);
      EXIT(AllObj.FINDFIRST());
    END;

    PROCEDURE ValidateObjectName@1000000001(pObjectType@1000000001 : '0';VAR pObjectId@1000000000 : Integer;VAR pObjectName@1000000002 : Text;pExactMatch@1000000004 : Boolean);
    BEGIN
      ///<summary>Validating object name</summary>
      ///<param name="pObjectType">Object type</param>
      ///<param name="pObjectId">Target object ID</param>
      ///<param name="pObjectName">Source / target object name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>

      ValidateObjectNameAdv(pObjectType, pObjectId, pObjectName, pExactMatch);
    END;

    PROCEDURE ValidateObjectNameAdv@1000000029(pObjectType@1000000001 : '0';VAR pObjectId@1000000000 : Integer;VAR pObjectName@1000000002 : Text;pExactMatch@1000000006 : Boolean);
    VAR
      eUnknownObjectType@1000000003 : TextConst 'ENU=Unknown %1: "%2";ENG=Unknown %1: "%2"';
      eUnknownObject@1000000004 : TextConst 'ENU=Unknown object: "%1";ENG=Unknown object: "%1"';
      lErrorMessage@1000000005 : Text[1024];
    BEGIN
      ///<summary>Validating object name (advanced version)</summary>
      ///<param name="pObjectType">Source / target object type (if specified on function call - used as a filter)</param>
      ///<param name="pObjectId">Target object ID</param>
      ///<param name="pObjectName">Source / target object name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>

      IF ( NOT (TryToValidateObjectNameAdv(pObjectType, pObjectId, pObjectName, pExactMatch))) THEN
      BEGIN
        IF (pObjectType <> 0) THEN
        BEGIN
          AllObj."Object Type" := pObjectType;
          lErrorMessage := STRSUBSTNO(eUnknownObjectType, LOWERCASE(FORMAT(AllObj."Object Type")), pObjectName);
        END
        ELSE
          lErrorMessage := STRSUBSTNO(eUnknownObject, pObjectName);
        CheckIfNameFound(lErrorMessage);
      END;
    END;

    PROCEDURE TryToValidateObjectName@1000000114(pObjectType@1000000001 : '0';VAR pObjectId@1000000000 : Integer;VAR pObjectName@1000000002 : Text;pExactMatch@1000000004 : Boolean) : Boolean;
    VAR
      lObjectId@1000000003 : Integer;
      eUnknownObjectType@1000000007 : TextConst 'ENU=Unknown %1: "%2";ENG=Unknown %1: "%2"';
      eUnknownObject@1000000008 : TextConst 'ENU=Unknown object: "%1";ENG=Unknown object: "%1"';
    BEGIN
      ///<summary>Trying to validate object name</summary>
      ///<param name="pObjectType">Object type</param>
      ///<param name="pObjectId">Target object ID</param>
      ///<param name="pObjectName">Source / target object name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>
      ///<returns>Result</returns>

      EXIT(TryToValidateObjectNameAdv(pObjectType, pObjectId, pObjectName, pExactMatch));
    END;

    PROCEDURE TryToValidateObjectNameAdv@1000000113(pObjectType@1000000001 : '0';VAR pObjectId@1000000000 : Integer;VAR pObjectName@1000000002 : Text;pExactMatch@1000000006 : Boolean) : Boolean;
    VAR
      eUnknownObjectType@1000000003 : TextConst 'ENU=Unknown %1: "%2";ENG=Unknown %1: "%2"';
      eUnknownObject@1000000004 : TextConst 'ENU=Unknown object: "%1";ENG=Unknown object: "%1"';
      lResult@1000000005 : Boolean;
    BEGIN
      ///<summary>Trying to validate object name (advanced version)</summary>
      ///<param name="pObjectType">Source / target object type (if specified on function call - used as a filter)</param>
      ///<param name="pObjectId">Target object ID</param>
      ///<param name="pObjectName">Source / target object name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>
      ///<returns>Result</returns>

      lResult := FALSE;

      IF (pObjectName <> '') THEN
      BEGIN
        AllObj.RESET();
        IF (pObjectType <> 0) THEN
          AllObj.SETRANGE("Object Type", pObjectType);
        ApplyObjectIdFilter(0);
        PrepareNameFilters(pObjectName, pExactMatch);
        WHILE (NextNameFilter()) DO
        BEGIN
          AllObj.SETFILTER("Object Name", CurrentNameFilter());
          SetNameFound(AllObj.FINDFIRST());
        END;
        IF ( NOT (HasNameBeenFound())) THEN
          IF (EVALUATE(pObjectId, pObjectName)) THEN
          BEGIN
            AllObj.SETRANGE("Object Name");
            AllObj.SETRANGE("Object ID", pObjectId);
            SetNameFound(AllObj.FINDFIRST());
          END;
        lResult := HasNameBeenFound();
        IF (lResult) THEN
        BEGIN
          pObjectType := AllObj."Object Type";
          pObjectId := AllObj."Object ID";
          pObjectName := AllObj."Object Name";
        END;
      END
      ELSE
      BEGIN
        CLEAR(pObjectType);
        CLEAR(pObjectId);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE ObjectLookup@1000000026(pObjectType@1000000005 : '0';VAR pObjectId@1000000001 : Integer) : Boolean;
    BEGIN
      ///<summary>Lookup for objects</summary>
      ///<param name="pObjectType">Object type</param>
      ///<param name="pObjectId">Target object ID</param>
      ///<returns>Lookup result</returns>

      EXIT(ObjectLookupAdv(pObjectType, pObjectId));
    END;

    PROCEDURE ObjectLookupAdv@1000000075(VAR pObjectType@1000000005 : '0';VAR pObjectId@1000000001 : Integer) : Boolean;
    VAR
      lResult@1000000003 : Boolean;
    BEGIN
      ///<summary>Lookup for objects (advanced version)</summary>
      ///<param name="pObjectType">Source / target object type (if specified on function call - used as a filter)</param>
      ///<param name="pObjectId">Target object ID</param>
      ///<returns>Lookup result</returns>

      lResult := FALSE;

      AllObj.RESET();
      AllObj.FILTERGROUP(2);
      IF (pObjectType <> 0) THEN
        AllObj.SETRANGE("Object Type", pObjectType);
      IF (pObjectId <> 0) THEN
      BEGIN
        ApplyObjectIdFilter(pObjectId);
        IF (AllObj.FINDFIRST()) THEN;
        AllObj.SETRANGE("Object ID");
      END;
      ApplyObjectIdFilter(0);
      AllObj.FILTERGROUP(0);

      IF (PAGE.RUNMODAL(PAGE::"All Objects", AllObj) = ACTION::LookupOK) THEN
      BEGIN
        pObjectType := AllObj."Object Type";
        pObjectId := AllObj."Object ID";
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE "--- Table ---"@1000000008();
    BEGIN
    END;

    PROCEDURE GetTableName@1000000053(pTableId@1000000000 : Integer) : Text;
    BEGIN
      ///<summary>Returning table name</summary>
      ///<param name="pTableId">Table ID</param>
      ///<returns>Table name</returns>

      EXIT(GetObjectName(AllObj."Object Type"::Table, pTableId));
    END;

    PROCEDURE ValidateTableId@1000000009(pTableId@1000000000 : Integer);
    BEGIN
      ///<summary>Validating table ID</summary>
      ///<param name="pTableId">Table ID</param>

      ValidateObjectId(AllObj."Object Type"::Table, pTableId);
    END;

    PROCEDURE TryToValidateTableId@1000000119(pTableId@1000000000 : Integer) : Boolean;
    BEGIN
      ///<summary>Trying to validate table ID</summary>
      ///<param name="pTableId">Table ID</param>
      ///<returns>Result</returns>

      EXIT(TryToValidateObjectId(AllObj."Object Type"::Table, pTableId));
    END;

    PROCEDURE ValidateTableName@1000000011(VAR pTableId@1000000000 : Integer;VAR pTableName@1000000002 : Text;pExactMatch@1000000001 : Boolean);
    BEGIN
      ///<summary>Validating table name</summary>
      ///<param name="pTableId">Target table ID</param>
      ///<param name="pTableName">Source / target table name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>

      ValidateObjectName(AllObj."Object Type"::Table, pTableId, pTableName, pExactMatch);
    END;

    PROCEDURE TryToValidateTableName@1000000120(VAR pTableId@1000000000 : Integer;VAR pTableName@1000000002 : Text;pExactMatch@1000000001 : Boolean) : Boolean;
    BEGIN
      ///<summary>Trying to validate table name</summary>
      ///<param name="pTableId">Target table ID</param>
      ///<param name="pTableName">Source / target table name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>
      ///<returns>Result</returns>

      EXIT(TryToValidateObjectName(AllObj."Object Type"::Table, pTableId, pTableName, pExactMatch));
    END;

    PROCEDURE TableLookup@1000000012(VAR pTableId@1000000001 : Integer) : Boolean;
    BEGIN
      ///<summary>Table lookup</summary>
      ///<param name="pTableId">Target table ID</param>
      ///<returns>Lookup result</returns>

      EXIT(ObjectLookup(AllObj."Object Type"::Table, pTableId));
    END;

    PROCEDURE "--- Report ---"@1000000023();
    BEGIN
    END;

    PROCEDURE GetReportName@1000000059(pReportId@1000000000 : Integer) : Text;
    BEGIN
      ///<summary>Returning report name</summary>
      ///<param name="pReportId">Report ID</param>
      ///<returns>Report name</returns>

      EXIT(GetObjectName(AllObj."Object Type"::Report, pReportId));
    END;

    PROCEDURE ValidateReportId@1000000014(pReportId@1000000000 : Integer);
    BEGIN
      ///<summary>Validating report ID</summary>
      ///<param name="pReportId">Report ID</param>

      ValidateObjectId(AllObj."Object Type"::Report, pReportId);
    END;

    PROCEDURE TryToValidateReportId@1000000121(pReportId@1000000000 : Integer) : Boolean;
    BEGIN
      ///<summary>Validating report ID</summary>
      ///<param name="pReportId">Report ID</param>
      ///<returns>Result</returns>

      EXIT(TryToValidateObjectId(AllObj."Object Type"::Report, pReportId));
    END;

    PROCEDURE ValidateReportName@1000000022(VAR pReportId@1000000000 : Integer;VAR pReportName@1000000002 : Text;pExactMatch@1000000001 : Boolean);
    BEGIN
      ///<summary>Validating report name</summary>
      ///<param name="pReportId">Target report ID</param>
      ///<param name="pReportName">Source / target report name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>

      ValidateObjectName(AllObj."Object Type"::Report, pReportId, pReportName, pExactMatch);
    END;

    PROCEDURE TryToValidateReportName@1000000122(VAR pReportId@1000000000 : Integer;VAR pReportName@1000000002 : Text;pExactMatch@1000000001 : Boolean) : Boolean;
    BEGIN
      ///<summary>Trying to validate report name</summary>
      ///<param name="pReportId">Target report ID</param>
      ///<param name="pReportName">Source / target report name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>
      ///<returns>Result</returns>

      EXIT(TryToValidateObjectName(AllObj."Object Type"::Report, pReportId, pReportName, pExactMatch));
    END;

    PROCEDURE ReportLookup@1000000021(VAR pReportId@1000000001 : Integer) : Boolean;
    BEGIN
      ///<summary>Lookup for reports</summary>
      ///<param name="pReportId">Target report ID</param>
      ///<returns>Lookup result</returns>

      EXIT(ObjectLookup(AllObj."Object Type"::Report, pReportId));
    END;

    PROCEDURE "--- Codeunit ---"@1000000040();
    BEGIN
    END;

    PROCEDURE GetCodeunitName@1000000060(pCodeunitId@1000000000 : Integer) : Text;
    BEGIN
      ///<summary>Returning codeunit name</summary>
      ///<param name="pCodeunitId">Codeunit ID</param>
      ///<returns>Codeunit name</returns>

      EXIT(GetObjectName(AllObj."Object Type"::Codeunit, pCodeunitId));
    END;

    PROCEDURE ValidateCodeunitId@1000000018(pCodeunitId@1000000000 : Integer);
    BEGIN
      ///<summary>Validating codeunit ID</summary>
      ///<param name="pCodeunitId">Codeunit ID</param>

      ValidateObjectId(AllObj."Object Type"::Codeunit, pCodeunitId);
    END;

    PROCEDURE TryToValidateCodeunitId@1000000080(pCodeunitId@1000000000 : Integer) : Boolean;
    BEGIN
      ///<summary>Trying to validate codeunit ID</summary>
      ///<param name="pCodeunitId">Codeunit ID</param>
      ///<returns>Result</returns>

      EXIT(TryToValidateObjectId(AllObj."Object Type"::Codeunit, pCodeunitId));
    END;

    PROCEDURE ValidateCodeunitName@1000000039(VAR pCodeunitId@1000000000 : Integer;VAR pCodeunitName@1000000002 : Text;pExactMatch@1000000001 : Boolean);
    BEGIN
      ///<summary>Validating codeunit name</summary>
      ///<param name="pCodeunitId">Target codeunit ID</param>
      ///<param name="pCodeunitName">Source / target codeunit name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>

      ValidateObjectName(AllObj."Object Type"::Codeunit, pCodeunitId, pCodeunitName, pExactMatch);
    END;

    PROCEDURE TryToValidateCodeunitName@1000000103(VAR pCodeunitId@1000000000 : Integer;VAR pCodeunitName@1000000002 : Text;pExactMatch@1000000001 : Boolean) : Boolean;
    BEGIN
      ///<summary>Trying to validate codeunit name</summary>
      ///<param name="pCodeunitId">Target codeunit ID</param>
      ///<param name="pCodeunitName">Source / target codeunit name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>
      ///<returns>Result</returns>

      EXIT(TryToValidateObjectName(AllObj."Object Type"::Codeunit, pCodeunitId, pCodeunitName, pExactMatch));
    END;

    PROCEDURE CodeunitLookup@1000000038(VAR pCodeunitId@1000000001 : Integer) : Boolean;
    BEGIN
      ///<summary>Lookup for codeunits</summary>
      ///<param name="pCodeunitId">Target codeunit ID</param>
      ///<returns>Lookup result</returns>

      EXIT(ObjectLookup(AllObj."Object Type"::Codeunit, pCodeunitId));
    END;

    PROCEDURE "--- XMLport ---"@1000000045();
    BEGIN
    END;

    PROCEDURE GetXmlPortName@1000000068(pXmlPortId@1000000000 : Integer) : Text;
    BEGIN
      ///<summary>Returning XMLport name</summary>
      ///<param name="pXmlPortId">XMLport ID</param>
      ///<returns>XMLport name</returns>

      EXIT(GetObjectName(AllObj."Object Type"::XMLport, pXmlPortId));
    END;

    PROCEDURE ValidateXmlPortId@1000000025(pXmlPortId@1000000000 : Integer);
    BEGIN
      ///<summary>Validating XMLport ID</summary>
      ///<param name="pXmlPortId">XMLport ID</param>

      ValidateObjectId(AllObj."Object Type"::XMLport, pXmlPortId);
    END;

    PROCEDURE TryToValidateXmlPortId@1000000107(pXmlPortId@1000000000 : Integer) : Boolean;
    BEGIN
      ///<summary>Trying to validate XMLport ID</summary>
      ///<param name="pXmlPortId">XMLport ID</param>
      ///<returns>Result</returns>

      EXIT(TryToValidateObjectId(AllObj."Object Type"::XMLport, pXmlPortId));
    END;

    PROCEDURE ValidateXmlPortName@1000000044(VAR pXmlPortId@1000000000 : Integer;VAR pXmlPortName@1000000002 : Text;pExactMatch@1000000001 : Boolean);
    BEGIN
      ///<summary>Validating XMLport name</summary>
      ///<param name="pXmlPortId">Target XMLport ID</param>
      ///<param name="pXmlPortName">Source / target XMLport name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>

      ValidateObjectName(AllObj."Object Type"::XMLport, pXmlPortId, pXmlPortName, pExactMatch);
    END;

    PROCEDURE TryToValidateXmlPortName@1000000109(VAR pXmlPortId@1000000000 : Integer;VAR pXmlPortName@1000000002 : Text;pExactMatch@1000000001 : Boolean) : Boolean;
    BEGIN
      ///<summary>Validating XMLport name</summary>
      ///<param name="pXmlPortId">Target XMLport ID</param>
      ///<param name="pXmlPortName">Source / target XMLport name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>
      ///<returns>Result</returns>

      EXIT(TryToValidateObjectName(AllObj."Object Type"::XMLport, pXmlPortId, pXmlPortName, pExactMatch));
    END;

    PROCEDURE XmlPortLookup@1000000043(VAR pXmlPortId@1000000001 : Integer) : Boolean;
    BEGIN
      ///<summary>Lookup for XMLports</summary>
      ///<param name="pXmlPortId">Target XMLport ID</param>
      ///<returns>Lookup result</returns>

      EXIT(ObjectLookup(AllObj."Object Type"::XMLport, pXmlPortId));
    END;

    PROCEDURE "--- Page ---"@1000000035();
    BEGIN
    END;

    PROCEDURE GetPageName@1000000076(pPageId@1000000000 : Integer) : Text;
    BEGIN
      ///<summary>Returning page name</summary>
      ///<param name="pPageId">Page ID</param>
      ///<returns>Page name</returns>

      EXIT(GetObjectName(AllObj."Object Type"::Page, pPageId));
    END;

    PROCEDURE ValidatePageId@1000000031(pPageId@1000000000 : Integer);
    BEGIN
      ///<summary>Validating page ID</summary>
      ///<param name="pPageId">Page ID</param>

      ValidateObjectId(AllObj."Object Type"::Page, pPageId);
    END;

    PROCEDURE TryToValidatePageId@1000000116(pPageId@1000000000 : Integer) : Boolean;
    BEGIN
      ///<summary>Trying to validate page ID</summary>
      ///<param name="pPageId">Page ID</param>
      ///<returns>Result</returns>

      EXIT(TryToValidateObjectId(AllObj."Object Type"::Page, pPageId));
    END;

    PROCEDURE ValidatePageName@1000000034(VAR pPageId@1000000000 : Integer;VAR pPageName@1000000002 : Text;pExactMatch@1000000001 : Boolean);
    BEGIN
      ///<summary>Validating page name</summary>
      ///<param name="pPageId">Target page ID</param>
      ///<param name="pPageName">Source / target page name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>

      ValidateObjectName(AllObj."Object Type"::Page, pPageId, pPageName, pExactMatch);
    END;

    PROCEDURE TryToValidatePageName@1000000118(VAR pPageId@1000000000 : Integer;VAR pPageName@1000000002 : Text;pExactMatch@1000000001 : Boolean) : Boolean;
    BEGIN
      ///<summary>Trying to validate page name</summary>
      ///<param name="pPageId">Target page ID</param>
      ///<param name="pPageName">Source / target page name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>
      ///<returns>Result</returns>

      EXIT(TryToValidateObjectName(AllObj."Object Type"::Page, pPageId, pPageName, pExactMatch));
    END;

    PROCEDURE PageLookup@1000000033(VAR pPageId@1000000001 : Integer) : Boolean;
    BEGIN
      ///<summary>Lookup for pages</summary>
      ///<param name="pPageId">Target page ID</param>
      ///<returns>Lookup result</returns>

      EXIT(ObjectLookup(AllObj."Object Type"::Page, pPageId));
    END;

    PROCEDURE "--- Query ---"@1000000050();
    BEGIN
    END;

    PROCEDURE GetQueryName@1000000077(pQueryId@1000000000 : Integer) : Text;
    BEGIN
      ///<summary>Returning query name</summary>
      ///<param name="pQueryId">Query ID</param>
      ///<returns>Query name</returns>

      EXIT(GetObjectName(AllObj."Object Type"::Query, pQueryId));
    END;

    PROCEDURE ValidateQueryId@1000000041(pQueryId@1000000000 : Integer);
    BEGIN
      ///<summary>Validating query ID</summary>
      ///<param name="pQueryId">Query ID</param>

      ValidateObjectId(AllObj."Object Type"::Query, pQueryId);
    END;

    PROCEDURE TryToValidateQueryId@1000000124(pQueryId@1000000000 : Integer) : Boolean;
    BEGIN
      ///<summary>Trying to validate query ID</summary>
      ///<param name="pQueryId">Query ID</param>
      ///<returns>Result</returns>

      EXIT(TryToValidateObjectId(AllObj."Object Type"::Query, pQueryId));
    END;

    PROCEDURE ValidateQueryName@1000000049(VAR pQueryId@1000000000 : Integer;VAR pQueryName@1000000002 : Text;pExactMatch@1000000001 : Boolean);
    BEGIN
      ///<summary>Validating query name</summary>
      ///<param name="pQueryId">Target query ID</param>
      ///<param name="pQueryName">Source / target query name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>

      ValidateObjectName(AllObj."Object Type"::Query, pQueryId, pQueryName, pExactMatch);
    END;

    PROCEDURE TryToValidateQueryName@1000000125(VAR pQueryId@1000000000 : Integer;VAR pQueryName@1000000002 : Text;pExactMatch@1000000001 : Boolean) : Boolean;
    BEGIN
      ///<summary>Trying to validate query name</summary>
      ///<param name="pQueryId">Target query ID</param>
      ///<param name="pQueryName">Source / target query name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match name exactly, FALSE = Match part of a name)</param>
      ///<returns>Result</returns>

      EXIT(TryToValidateObjectName(AllObj."Object Type"::Query, pQueryId, pQueryName, pExactMatch));
    END;

    PROCEDURE QueryLookup@1000000048(VAR pQueryId@1000000001 : Integer) : Boolean;
    BEGIN
      ///<summary>Lookup for queries</summary>
      ///<param name="pQueryId">Target query ID</param>
      ///<returns>Lookup result</returns>

      EXIT(ObjectLookup(AllObj."Object Type"::Query, pQueryId));
    END;

    PROCEDURE "--- Field ---"@1000000091();
    BEGIN
    END;

    PROCEDURE GetFieldName@1000000094(pTableId@1000000001 : Integer;pFieldId@1000000000 : Integer) : Text;
    BEGIN
      ///<summary>Returning field name</summary>
      ///<param name="pTableId">Table ID</param>
      ///<param name="pFieldId">Target field ID</param>
      ///<returns>The name</returns>

      IF ( NOT (Field.GET(pTableId, pFieldId))) THEN
        CLEAR(Field);
      EXIT(Field.FieldName);
    END;

    PROCEDURE ValidateFieldId@1000000051(pTableId@1000000001 : Integer;pFieldId@1000000000 : Integer);
    VAR
      eUnknownField@1000000002 : TextConst 'ENU=Field %1 doesn''t exist in table %2.;ENG=Field %1 doesn''t exist in table %2.';
    BEGIN
      ///<summary>Validating field ID</summary>
      ///<param name="pTableId">Table ID</param>
      ///<param name="pFieldId">Target field ID</param>

      IF ( NOT (TryToValidateFieldId(pTableId, pFieldId))) THEN
        ERROR(eUnknownField, pFieldId, GetTableName(pTableId));
    END;

    PROCEDURE TryToValidateFieldId@1000000106(pTableId@1000000001 : Integer;pFieldId@1000000000 : Integer) : Boolean;
    BEGIN
      ///<summary>Trying to validate field ID</summary>
      ///<param name="pTableId">Table ID</param>
      ///<param name="pFieldId">Target field ID</param>
      ///<returns>TRUE = Field found, FALSE = Field doesn't exist</returns>

      IF (pFieldId = 0) THEN
        EXIT;

      IF (pTableId = 0) THEN
        ERROR(tEmpty, tTableId);

      Field.RESET();
      ApplyFieldTableIdFilter(pTableId);
      ApplyFieldIdFilter(pFieldId);
      EXIT(Field.FINDFIRST());
    END;

    PROCEDURE ValidateFieldName@1000000090(pTableId@1000000001 : Integer;VAR pFieldId@1000000000 : Integer;VAR pFieldName@1000000002 : Text;pExactMatch@1000000003 : Boolean);
    VAR
      eUnknownField@1000000007 : TextConst 'ENU=Field "%1" doesn''t exist in table "%2";ENG=Field "%1" doesn''t exist in table "%2"';
    BEGIN
      ///<summary>Validating field name</summary>
      ///<param name="pTableId">Table ID</param>
      ///<param name="pFieldId">Target field ID</param>
      ///<param name="pFieldName">Source / target field name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match field name exactly, FALSE = Match any part of field name)</param>

      IF ( NOT (TryToValidateFieldName(pTableId, pFieldId, pFieldName, pExactMatch))) THEN
        ERROR(eUnknownField, pFieldName, pTableId);
    END;

    PROCEDURE TryToValidateFieldName@1000000047(pTableId@1000000001 : Integer;VAR pFieldId@1000000000 : Integer;VAR pFieldName@1000000002 : Text;pExactMatch@1000000003 : Boolean) : Boolean;
    VAR
      lResult@1000000004 : Boolean;
    BEGIN
      ///<summary>Trying to validating field name</summary>
      ///<param name="pTableId">Table ID</param>
      ///<param name="pFieldId">Target field ID</param>
      ///<param name="pFieldName">Source / target field name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Match field name exactly, FALSE = Match any part of field name)</param>
      ///<returns>TRUE = Field found (or field blank), FALSE = No such field</returns>

      IF (pFieldName <> '') THEN
      BEGIN
        IF (pTableId = 0) THEN
          ERROR(tEmpty, tTableId);

        Field.RESET();
        ApplyFieldTableIdFilter(pTableId);
        ApplyFieldIdFilter(0);
        PrepareNameFilters(pFieldName, pExactMatch);
        WHILE (NextNameFilter()) DO
        BEGIN
          Field.SETFILTER(FieldName, ToFieldFilter(CurrentNameFilter()));
          SetNameFound(Field.FINDFIRST());
        END;
        IF (HasNameBeenFound()) THEN
        BEGIN
          pFieldId := Field."No.";
          pFieldName := Field.FieldName;
        END
        ELSE
          IF (EVALUATE(pFieldId, pFieldName)) THEN
          BEGIN
            Field.SETRANGE(FieldName);
            Field.SETRANGE("No.", pFieldId);
            SetNameFound(Field.FINDFIRST());
          END;

        lResult := HasNameBeenFound();
      END
      ELSE
      BEGIN
        CLEAR(pFieldId);
        CLEAR(pFieldName);

        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE FieldLookup@1000000052(pTableId@1000000000 : Integer;VAR pFieldId@1000000001 : Integer) : Boolean;
    VAR
      lResult@1000000002 : Boolean;
    BEGIN
      ///<summary>Lookup for field</summary>
      ///<param name="pTableId">Table ID</param>
      ///<param name="pFieldId">Target field ID</param>
      ///<returns>Lookup result</returns>

      lResult := FALSE;

      IF (pTableId = 0) THEN
        ERROR(tEmpty, tTableId);

      Field.RESET();
      Field.FILTERGROUP(2);
      ApplyFieldTableIdFilter(pTableId);
      IF (pFieldId <> 0) THEN
      BEGIN
        ApplyFieldIdFilter(pFieldId);
        IF (Field.FINDFIRST()) THEN;
        Field.SETRANGE("No.");
      END;
      ApplyFieldIdFilter(0);
      Field.FILTERGROUP(0);
      IF (PAGE.RUNMODAL(PAGE::Fields, Field) = ACTION::LookupOK) THEN
      BEGIN
        pFieldId := Field."No.";
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE FieldInPrimaryKey@1000000065(pTableId@1000000001 : Integer;pFieldId@1000000000 : Integer) : Boolean;
    VAR
      RecordRef@1000000002 : RecordRef;
      KeyRef@1000000003 : KeyRef;
      FieldRef@1000000004 : FieldRef;
      FieldIndex@1000000005 : Integer;
      IsPrimaryKey@1000000006 : Boolean;
    BEGIN
      ///<summary>Checks if field is part of the primary key</summary>
      ///<param name="pTableId">Table ID</param>
      ///<param name="pFieldId">Field ID</param>
      ///<returns>TRUE = Is in the primary key</returns>

      IsPrimaryKey := FALSE;
      IF (pTableId <> 0) THEN BEGIN
        RecordRef.OPEN(pTableId);
        IF (RecordRef.KEYCOUNT > 0) THEN BEGIN
          KeyRef := RecordRef.KEYINDEX(1);
          FieldIndex := 1;
          WHILE ((FieldIndex <= KeyRef.FIELDCOUNT) AND (NOT(IsPrimaryKey))) DO BEGIN
            FieldRef := KeyRef.FIELDINDEX(FieldIndex);
            IF (FieldRef.NUMBER = pFieldId) THEN
              IsPrimaryKey := TRUE;
            FieldIndex += 1;
          END;
        END;
        RecordRef.CLOSE();
      END;
      EXIT(IsPrimaryKey);
    END;

    PROCEDURE "--- Object ID Filter ---"@1000000004();
    BEGIN
    END;

    PROCEDURE GetObjectIdFilter@1000000005() : Code[1024];
    BEGIN
      ///<summary>Returning object filter</summary>
      ///<returns>The filter</returns>

      EXIT(ObjectIdFilter);
    END;

    PROCEDURE SetObjectIdFilter@1000000010(pObjectIdFilter@1000000000 : Code[1024]);
    BEGIN
      ///<summary>Setting object filter</summary>
      ///<param name="pObjectIdFilter">The filter to set</param>

      ObjectIdFilter := pObjectIdFilter;
    END;

    PROCEDURE SetNullObjectIdFilter@1000000069();
    BEGIN
      ///<summary>Setting null object filter</summary>

      SetNullFilter(ObjectIdFilter);
    END;

    PROCEDURE ClearObjectIdFilter@1000000030();
    BEGIN
      ///<summary>Clearing object filter</summary>

      CLEAR(ObjectIdFilter);
    END;

    PROCEDURE AddToObjectIdFilter@1000000036(pObjectId@1000000000 : Integer);
    BEGIN
      ///<summary>Adding to object filter</summary>
      ///<param name="pObjectId">Object ID to add to the filter</param>

      AddToFilter(ObjectIdFilter, pObjectId);
    END;

    PROCEDURE "--- Field ID Filter ---"@1000000017();
    BEGIN
    END;

    PROCEDURE GetFieldIdFilter@1000000015() : Code[1024];
    BEGIN
      ///<summary>Returning field filter</summary>
      ///<returns>The filter</returns>

      EXIT(FieldIdFilter);
    END;

    PROCEDURE SetFieldIdFilter@1000000016(pFieldIdFilter@1000000000 : Code[1024]);
    BEGIN
      ///<summary>Setting field filter</summary>
      ///<param name="pFieldIdFilter">The filter</param>

      FieldIdFilter := pFieldIdFilter;
    END;

    PROCEDURE SetNullFieldIdFilter@1000000024();
    BEGIN
      ///<summary>Setting null field filter</summary>

      SetNullFilter(FieldIdFilter);
    END;

    PROCEDURE ClearFieldIdFilter@1000000046();
    BEGIN
      ///<summary>Clearing field filter</summary>

      CLEAR(FieldIdFilter);
    END;

    PROCEDURE AddToFieldIdFilter@1000000057(pFieldId@1000000000 : Integer);
    BEGIN
      ///<summary>Adding to field filter</summary>
      ///<param name="pFieldId">Field ID</param>

      AddToFilter(FieldIdFilter, pFieldId);
    END;

    LOCAL PROCEDURE "--- Field Class Filter ---"@1000000070();
    BEGIN
    END;

    PROCEDURE GetFieldClass@1000000072() : Integer;
    BEGIN
      ///<summary>Returning current field class</summary>
      ///<returns>The field class</returns>

      EXIT(FieldClass);
    END;

    PROCEDURE SetFieldClass@1000000071(pFieldClass@1000000000 : Integer);
    BEGIN
      ///<summary>Setting field class</summary>
      ///<param name="pFieldClass">The field class to set</param>

      FieldClass := pFieldClass;
    END;

    PROCEDURE "--- Filter Application ---"@1000000058();
    BEGIN
    END;

    LOCAL PROCEDURE ApplyObjectIdFilter@1000000061(pObjectId@1000000000 : Integer);
    BEGIN
      ///<summary>Setting object ID filter</summary>
      ///<param name="pObjectId">Object ID (if 0 - set only object filter if not empty)</param>

      IF (pObjectId <> 0) THEN
      BEGIN
        IF (ObjectIdFilter <> '') THEN
          AllObj.SETFILTER("Object ID", STRSUBSTNO('(%1)&(%2)', pObjectId, ObjectIdFilter))
        ELSE
          AllObj.SETRANGE("Object ID", pObjectId);
      END
      ELSE
        IF (ObjectIdFilter <> '') THEN
          AllObj.SETFILTER("Object ID", ObjectIdFilter);
    END;

    LOCAL PROCEDURE ApplyFieldTableIdFilter@1000000064(pTableId@1000000000 : Integer);
    BEGIN
      ///<summary>Setting field table ID filter</summary>
      ///<param name="pTableId">Table ID (if 0 - set only object filter if not empty)</param>

      IF (pTableId <> 0) THEN
      BEGIN
        IF (ObjectIdFilter <> '') THEN
          Field.SETFILTER(TableNo, STRSUBSTNO('(%1)&(%2)', pTableId, ObjectIdFilter))
        ELSE
          Field.SETRANGE(TableNo, pTableId);
      END
      ELSE
        IF (ObjectIdFilter <> '') THEN
          Field.SETFILTER(TableNo, ObjectIdFilter);
    END;

    LOCAL PROCEDURE ApplyFieldIdFilter@1000000063(pFieldId@1000000000 : Integer);
    BEGIN
      ///<summary>Setting field ID filter</summary>
      ///<param name="pFieldId">Field ID (if 0 - set only field filter if not empty)</param>

      IF (pFieldId <> 0) THEN
      BEGIN
        IF (FieldIdFilter <> '') THEN
          Field.SETFILTER("No.", STRSUBSTNO('(%1)&(%2)', pFieldId, FieldIdFilter))
        ELSE
          Field.SETRANGE("No.", pFieldId);
      END
      ELSE
        IF (FieldIdFilter <> '') THEN
          Field.SETFILTER("No.", FieldIdFilter);
    END;

    LOCAL PROCEDURE ApplyTableFieldTableIdFilter@1000000112(pTableId@1000000000 : Integer);
    BEGIN
      ///<summary>Setting table field table ID filter</summary>
      ///<param name="pTableId">Table ID (if 0 - set only object filter if not empty)</param>

      IF (pTableId <> 0) THEN
      BEGIN
        IF (ObjectIdFilter <> '') THEN
          Field.SETFILTER(TableNo, STRSUBSTNO('(%1)&(%2)', pTableId, ObjectIdFilter))
        ELSE
          Field.SETRANGE(TableNo, pTableId);
      END
      ELSE
        IF (ObjectIdFilter <> '') THEN
          Field.SETFILTER(TableNo, ObjectIdFilter);
    END;

    LOCAL PROCEDURE ApplyTableFieldIdFilter@1000000110(pFieldId@1000000000 : Integer;pRequireField@1000000001 : Boolean);
    BEGIN
      ///<summary>Setting table field ID filter</summary>
      ///<param name="pFieldId">Field ID (if 0 - set only field filter if not empty)</param>
      ///<param name="pRequireField">Require field flag</param>

      IF (pFieldId <> 0) THEN
      BEGIN
        IF (FieldIdFilter <> '') THEN
          Field.SETFILTER("No.", STRSUBSTNO('(%1)&(%2)', pFieldId, FieldIdFilter))
        ELSE
          Field.SETRANGE("No.", pFieldId);
      END
      ELSE
        IF (pRequireField) THEN
          Field.SETFILTER("No.", '0&1')
        ELSE
          IF (FieldIdFilter <> '') THEN
            Field.SETFILTER("No.", FieldIdFilter);
    END;

    PROCEDURE "--- Name Filtering ---"@1000000093();
    BEGIN
    END;

    PROCEDURE PrepareNameFilters@1000000087(pName@1000000000 : Text[50];pExactMatch@1000000001 : Boolean);
    BEGIN
      ///<summary>Preparing name filters</summary>
      ///<param name="pName">The name</param>
      ///<param name="pExactMatch">Exact match flag (TRUE = Prepare filters for matching only entire name, FALSE = Prepare fitlers for matching any part of name)</param>

      CLEAR(NameFilter);
      NameFilter[1] := pName;
      IF ( NOT (pExactMatch)) THEN
      BEGIN
        NameFilter[2] := '@' + pName;
        NameFilter[3] := '@' + pName + '*';
        NameFilter[4] := '@*' + pName + '*';
      END;

      NameFound := FALSE;
      NameFilterIndex := 0;
    END;

    PROCEDURE NextNameFilter@1000000089() : Boolean;
    VAR
      lNextNameFilter@1000000000 : Boolean;
    BEGIN
      ///<summary>Going into next name filter</summary>
      ///<returns>TRUE: Next name filter found, FALSE: No next name filter or name found already</returns>

      IF (NameFound) THEN
        lNextNameFilter := FALSE
      ELSE
        IF (NameFilterIndex < ARRAYLEN(NameFilter)) THEN
        BEGIN
          NameFilterIndex += 1;
          lNextNameFilter := (NameFilter[NameFilterIndex] <> '');
        END
        ELSE
          lNextNameFilter := FALSE;

      EXIT(lNextNameFilter);
    END;

    PROCEDURE CurrentNameFilter@1000000097() : Text[250];
    BEGIN
      ///<summary>Returning current name filter</summary>
      ///<returns>The filter</returns>

      EXIT(NameFilter[NameFilterIndex]);
    END;

    PROCEDURE SetNameFound@1000000098(pNameFound@1000000000 : Boolean);
    BEGIN
      ///<summary>Setting name found flag</summary>
      ///<param name="pNameFound">The flag</param>

      NameFound := pNameFound;
    END;

    PROCEDURE HasNameBeenFound@1000000013() : Boolean;
    BEGIN
      ///<summary>Returning if name has been found</summary>
      ///<returns>The value</returns>

      EXIT(NameFound);
    END;

    PROCEDURE CheckIfNameFound@1000000096(pErrorMessage@1000000000 : Text[1024]);
    BEGIN
      ///<summary>showing the error message</summary>
      ///<param name="pErrorMessage">The error message</param>

      IF ( NOT (NameFound)) THEN
        ERROR(pErrorMessage);
    END;

    PROCEDURE "--- Tools ---"@1000000055();
    BEGIN
    END;

    LOCAL PROCEDURE AddToFilter@1000000062(VAR pFilter@1000000000 : Code[1024];pId@1000000001 : Integer);
    BEGIN
      ///<summary>Adding another (object / field) ID to (object / field) filter</summary>
      ///<param name="pFilter">The filter</param>
      ///<param name="pId">ID to add</param>

      IF (STRPOS('|' + pFilter + '|', '|' + FORMAT(pId) + '|') > 0) THEN
        EXIT;

      IF (pFilter <> '') THEN
        pFilter := pFilter + '|';
      pFilter := pFilter + FORMAT(pId);
    END;

    LOCAL PROCEDURE SetNullFilter@1000000066(VAR pFilter@1000000000 : Code[1024]);
    BEGIN
      ///<summary>Setting null filter</summary>
      ///<param name="pFilter">The filter</param>

      pFilter := '0&1';
    END;

    PROCEDURE ToFieldFilter@1000000000(pFilter@1000000000 : Text[1024]) : Text[1024];
    VAR
      eFromCharacters@1000000001 : TextConst 'ENU=()[];ENG=()[]';
      eToCharacters@1000000002 : TextConst 'ENU=????;ENG=????';
    BEGIN
      ///<summary>Turning a filter into field filter</summary>
      ///<param name="pFilter">Filter</param>
      ///<returns>Field filter</returns>

      EXIT(CONVERTSTR(pFilter, eFromCharacters, eToCharacters));
    END;

    BEGIN
    {
      ///<summary>Object</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-10-2510">Created</change>
    }
    END.
  }
}

