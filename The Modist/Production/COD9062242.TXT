OBJECT Codeunit 9062242 BLOB Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=25/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      tBase64Chars@1000000000 : TextConst 'ENU=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/;ENG=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      mBase64@1000000006 : Record 9062241;

    PROCEDURE "--- Text ---"@1000000014();
    BEGIN
    END;

    PROCEDURE TextToBlob@1000000007(pText@1000000000 : Text;VAR pBlob@1000000001 : Record 99008535);
    VAR
      lOutStream@1000000002 : OutStream;
    BEGIN
      //DOC NA2015.1 - Writing text to BLOB
      //  -> pText: The text
      //  <> pBlob: Target BLOB

      CLEAR(pBlob);
      pBlob.Blob.CREATEOUTSTREAM(lOutStream);
      lOutStream.WRITETEXT(pText);
    END;

    PROCEDURE BlobToText@1000000017(VAR pBlob@1000000000 : Record 99008535) : Text;
    VAR
      lText@1000000001 : Text;
      lTextPart@1000000002 : Text[1024];
      lBigText@1000000003 : BigText;
      lBigTextSteps@1000000004 : Integer;
      lBigTextStep@1000000005 : Integer;
      lInStream@1000000006 : InStream;
    BEGIN
      //DOC NC2015.1 - Writing BLOB to text
      //  <> pBlob: Source BLOB
      //  <- Text

      CLEAR(lText);
      pBlob.Blob.CREATEINSTREAM(lInStream);
      lBigText.READ(lInStream);
      lBigTextSteps := ROUND(lBigText.LENGTH / 1024, 1, '>');
      FOR lBigTextStep := 1 TO lBigTextSteps DO
      BEGIN
        lBigText.GETSUBTEXT(lTextPart, (lBigTextStep - 1) * 1024 + 1, 1024);
        lText := lText + lTextPart;
      END;

      EXIT(lText);
    END;

    LOCAL PROCEDURE "--- Big Text ---"@1000000021();
    BEGIN
    END;

    PROCEDURE BigTextToBlob@1000000023(pBigText@1000000000 : BigText;VAR pBlob@1000000001 : Record 99008535);
    VAR
      lOutStream@1000000002 : OutStream;
    BEGIN
      //DOC NA2015.4 - Writing big text to BLOB
      //  -> pBigText: Source big text
      //  <> pBlob: Destingation BLOB

      CLEAR(pBlob);
      pBlob.Blob.CREATEOUTSTREAM(lOutStream);
      pBigText.WRITE(lOutStream);
    END;

    PROCEDURE BlobToBigText@1000000022(VAR pBlob@1000000000 : Record 99008535;VAR pBigText@1000000007 : BigText);
    VAR
      lInStream@1000000001 : InStream;
    BEGIN
      //DOC NC2015.4 - Writing BLOB to big text
      //  <> pBlob: Source BLOB
      //  <> pBigText: Destination big text

      CLEAR(pBigText);
      pBlob.Blob.CREATEINSTREAM(lInStream);
      pBigText.READ(lInStream);
    END;

    PROCEDURE "--- Image ---"@1000000003();
    BEGIN
    END;

    PROCEDURE BlobToImageC@1000000005(pTempBlob@1000000001 : Record 99008535;VAR pImage@1000000000 : DotNet "'System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image" RUNONCLIENT);
    VAR
      lNavMemoryStreamS@1000000003 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.NavMemoryStream";
      lNavMemoryStreamC@1000000004 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.NavMemoryStream" RUNONCLIENT;
      lImageToolkit@1000000005 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.ImageToolkit" RUNONCLIENT;
      lInStream@1000000002 : InStream;
    BEGIN
      //DOC NA2015.1 - Converting BLOB to image (client version)
      //  -> pTempBlob: BLOB to convert
      //  <> pImage: Destination image

      CLEAR(pImage);
      IF (pTempBlob.Blob.HASVALUE) THEN
      BEGIN
        pTempBlob.Blob.CREATEINSTREAM(lInStream);
        lNavMemoryStreamS := lNavMemoryStreamS.NavMemoryStream();
        lNavMemoryStreamS.CopyFrom(lInStream);
        lNavMemoryStreamC := lNavMemoryStreamS;
        pImage := lImageToolkit.StreamToImageSafe(lNavMemoryStreamC);
      END;
    END;

    PROCEDURE BlobToImageS@1000000013(pTempBlob@1000000001 : Record 99008535;VAR pImage@1000000000 : DotNet "'System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image");
    VAR
      lNavMemoryStreamS@1000000003 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.NavMemoryStream";
      lImageToolkit@1000000005 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.ImageToolkit" RUNONCLIENT;
      lInStream@1000000002 : InStream;
    BEGIN
      //DOC NA2015.1 - Converting BLOB to image (server version)
      //  -> pTempBlob: BLOB to convert
      //  <> pImage: Destination image

      CLEAR(pImage);
      IF (pTempBlob.Blob.HASVALUE) THEN
      BEGIN
        pTempBlob.Blob.CREATEINSTREAM(lInStream);
        lNavMemoryStreamS := lNavMemoryStreamS.NavMemoryStream();
        lNavMemoryStreamS.CopyFrom(lInStream);
        pImage := lImageToolkit.StreamToImageSafe(lNavMemoryStreamS);
      END;
    END;

    PROCEDURE ImageToBlobC@1000000000(pImageC@1000000000 : DotNet "'System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image" RUNONCLIENT;VAR pBlob@1000000001 : Record 99008535);
    VAR
      lImageToolkitC@1000000002 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.ImageToolkit" RUNONCLIENT;
      lNavMemoryStreamC@1000000003 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.NavMemoryStream" RUNONCLIENT;
      lNavMemoryStreamS@1000000004 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.NavMemoryStream";
      lOutStream@1000000005 : OutStream;
    BEGIN
      //DOC NA2015.1 - Converting image to BLOB (client version)
      //  -> pImageC: Image to convert
      //  <> pBlob: Destination BLOB

      lNavMemoryStreamC := lImageToolkitC.ImageToStreamSafe(pImageC, lImageToolkitC.ImageFormatPng);
      lNavMemoryStreamS := lNavMemoryStreamC;
      CLEAR(pBlob);
      pBlob.Blob.CREATEOUTSTREAM(lOutStream);
      COPYSTREAM(lOutStream, lNavMemoryStreamS);
    END;

    PROCEDURE ImageToBlobS@1000000019(pImageS@1000000001 : DotNet "'System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Image";VAR pBlob@1000000000 : Record 99008535);
    VAR
      lImageToolkitS@1000000005 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.ImageToolkit";
      lNavMemoryStreamS@1000000003 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.NavMemoryStream";
      lImageFormat@1000000004 : DotNet "'System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Drawing.Imaging.ImageFormat";
      lOutStream@1000000002 : OutStream;
    BEGIN
      //DOC NA2015.1 - Converting image to BLOB (server version)
      //  -> pImageS: Image to convert
      //  <> pBlob: Destination BLOB

      lNavMemoryStreamS := lImageToolkitS.ImageToStreamSafe(pImageS, lImageToolkitS.ImageFormatPng);
      CLEAR(pBlob);
      pBlob.Blob.CREATEOUTSTREAM(lOutStream);
      COPYSTREAM(lOutStream, lNavMemoryStreamS);
    END;

    PROCEDURE "--- To Base64 ---"@1000000006();
    BEGIN
    END;

    PROCEDURE SaveToBase64@1000000012(pSourceBlob@1000000003 : Record 99008535;pParentTableId@1000000002 : Integer;pParentPosition@1000000001 : Text[250];pParentFieldId@1000000000 : Integer);
    VAR
      lBlob@1000000004 : Record 99008535;
      lInStream@1000000007 : InStream;
      lContent@1000000008 : Text[1024];
    BEGIN
      //DOC NA2015.1 - Saving given BLOB to "Base64" table encoded (as BLOB)
      //  -> pSourceBlob: Source BLOB to encode and save
      //  -> pParentTableId: Parent table ID
      //  -> pParentPosition: Parent position
      //  -> pParentFieldId: Parent field ID

      FilterBase64(pParentTableId, pParentPosition, pParentFieldId, mBase64."Content Type"::BLOB);
      IF (pSourceBlob.Blob.HASVALUE) THEN
      BEGIN
        ToBase64(pSourceBlob, lBlob);
        IF ( NOT (mBase64.FINDFIRST())) THEN
        BEGIN
          InitBase64(pParentTableId, pParentPosition, pParentFieldId, mBase64."Content Type"::BLOB);
          mBase64.INSERT(TRUE);
        END;
        mBase64.Content := lBlob.Blob;
        mBase64.MODIFY(TRUE);
      END
      ELSE
        IF (mBase64.FINDFIRST()) THEN
          mBase64.DELETE(TRUE);
    END;

    PROCEDURE SaveToBase64Lines@1000000009(pSourceBlob@1000000003 : Record 99008535;pParentTableId@1000000002 : Integer;pParentPosition@1000000001 : Text[250];pParentFieldId@1000000000 : Integer);
    VAR
      lBlob@1000000004 : Record 99008535;
      lInStream@1000000007 : InStream;
      lContent@1000000008 : Text[1024];
    BEGIN
      //DOC NA2015.1 - Saving given BLOB to "Base64" table encoded (as lines)
      //  -> pSourceBlob: Source BLOB to encode and save
      //  -> pParentTableId: Parent table ID
      //  -> pParentPosition: Parent position
      //  -> pParentFieldId: Parent field ID

      FilterBase64(pParentTableId, pParentPosition, pParentFieldId, mBase64."Content Type"::Text);
      mBase64.DELETEALL(TRUE);
      IF (pSourceBlob.Blob.HASVALUE) THEN
      BEGIN
        ToBase64(pSourceBlob, lBlob);
        lBlob.Blob.CREATEINSTREAM(lInStream);
        WHILE ( NOT (lInStream.EOS)) DO
        BEGIN
          lInStream.READTEXT(lContent, MAXSTRLEN(lContent));
          IF (lContent <> '') THEN
          BEGIN
            InitBase64(pParentTableId, pParentPosition, pParentFieldId, mBase64."Content Type"::Text);
            mBase64.SetContent(lContent);
            mBase64.INSERT(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE ToBase64@1000000010(pSourceBlob@1000000001 : Record 99008535;VAR pDestBlob@1000000000 : Record 99008535);
    VAR
      lInStream@1000000002 : InStream;
      lInMemoryStream@1000000003 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.NavMemoryStream";
      lOutStream@1000000004 : OutStream;
      lOutMemoryStream@1000000007 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.NavMemoryStream";
      lBase64Toolkit@1000000005 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.Base64Toolkit";
    BEGIN
      //DOC NA2016.10 - Encoding source BLOB with Base64 and storing in the destination BLOB (.NET version)
      //  -> pSourceBlob: Source BLOB
      //  <> pDestBlob: Destination BLOB

      CLEAR(pDestBlob);

      IF (pSourceBlob.Blob.HASVALUE) THEN
      BEGIN
        pSourceBlob.Blob.CREATEINSTREAM(lInStream);
        lInMemoryStream := lInMemoryStream.NavMemoryStream();
        lInMemoryStream.CopyFrom(lInStream);
        lOutMemoryStream := lOutMemoryStream.NavMemoryStream();
        lBase64Toolkit.Encode(lInMemoryStream, lOutMemoryStream);
        pDestBlob.Blob.CREATEOUTSTREAM(lOutStream);
        lOutMemoryStream.CopyTo(lOutStream);
      END;
    END;

    PROCEDURE ToBase64Text@1000000020(pSourceBlob@1000000000 : Record 99008535) : Text;
    VAR
      lDestBlob@1000000001 : Record 99008535;
    BEGIN
      //DOC NA2015.4 - Encoding source BLOB with Base64 and returning it as text
      //  -> pSourceBlob: Source BLOB
      //  <- Destination text

      ToBase64(pSourceBlob, lDestBlob);
      EXIT(BlobToText(lDestBlob));
    END;

    PROCEDURE ToBase64BigText@1000000028(pSourceBlob@1000000000 : Record 99008535;VAR pDestinationBigText@1000000002 : BigText) : Text;
    VAR
      lDestBlob@1000000001 : Record 99008535;
    BEGIN
      //DOC NA2015.4 - Encoding source BLOB with Base64 and returning it as big text
      //  -> pSourceBlob: Source BLOB
      //  <> pDestinationBigText: Destination big text

      ToBase64(pSourceBlob, lDestBlob);
      BlobToBigText(lDestBlob, pDestinationBigText);
    END;

    PROCEDURE "--- From Base64 ---"@1000000004();
    BEGIN
    END;

    PROCEDURE RestoreFromBase64@1000000016(pParentTableId@1000000002 : Integer;pParentPosition@1000000001 : Text[250];pParentFieldId@1000000000 : Integer;pUseNav@1000000005 : Boolean;VAR pDestBlob@1000000003 : Record 99008535);
    VAR
      lBlob@1000000006 : Record 99008535;
      lOutStream@1000000007 : OutStream;
    BEGIN
      //DOC NA2015.1 - Restoring from Base64 table (BLOB), decoding and saving in destination BLOB
      //  -> pParentTableId: Parent table ID
      //  -> pParentPosition: Parent position
      //  -> pParentFieldId: Parent field ID
      //  <> pDestBlob: Destination BLOB

      FilterBase64(pParentTableId, pParentPosition, pParentFieldId, mBase64."Content Type"::BLOB);
      IF (mBase64.FINDFIRST()) THEN
        lBlob.Blob := mBase64.Content;
      IF (lBlob.Blob.HASVALUE) THEN
        FromBase64(lBlob, pDestBlob);
    END;

    PROCEDURE RestoreFromBase64Lines@1000000018(pParentTableId@1000000002 : Integer;pParentPosition@1000000001 : Text[250];pParentFieldId@1000000000 : Integer;VAR pDestBlob@1000000003 : Record 99008535);
    VAR
      lBlob@1000000006 : Record 99008535;
      lOutStream@1000000007 : OutStream;
    BEGIN
      //DOC NA2015.1 - Restoring from Base64 table (lines), decoding and saving in destination BLOB
      //  -> pParentTableId: Parent table ID
      //  -> pParentPosition: Parent position
      //  -> pParentFieldId: Parent field ID
      //  <> pDestBlob: Destination BLOB

      FilterBase64(pParentTableId, pParentPosition, pParentFieldId, mBase64."Content Type"::Text);
      IF (mBase64.FINDSET()) THEN
      BEGIN
        lBlob.Blob.CREATEOUTSTREAM(lOutStream);
        REPEAT
          lOutStream.WRITETEXT(mBase64.GetContent());
        UNTIL (mBase64.NEXT() = 0);
      END;
      IF (lBlob.Blob.HASVALUE) THEN
        FromBase64(lBlob, pDestBlob);
    END;

    PROCEDURE FromBase64@1000000015(pSourceBlob@1000000001 : Record 99008535;VAR pDestBlob@1000000000 : Record 99008535);
    VAR
      eDecodingFailed@1000000010 : TextConst 'ENU=Decoding from Base64 failed;ENG=Decoding from Base64 failed';
      lInStream@1000000004 : InStream;
      lInMemoryStream@1000000006 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.NavMemoryStream";
      lOutStream@1000000003 : OutStream;
      lOutMemoryStream@1000000007 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.NavMemoryStream";
      lBase64Toolkit@1000000002 : DotNet "'TheNavPeople.Toolkit.9.0.2.11, Version=9.0.2.11, Culture=neutral, PublicKeyToken=a394b55686170d74'.TheNavPeople.Toolkit.Base64Toolkit";
    BEGIN
      //DOC NA2016.10 - Decoding source blob from Base64 and storing in the destination BLOB (.NET version)
      //  -> pSourceBlob: Source BLOB
      //  <> pDestBlob: Destination BLOB

      CLEAR(pDestBlob);

      IF (pSourceBlob.Blob.HASVALUE) THEN
      BEGIN
        pSourceBlob.Blob.CREATEINSTREAM(lInStream);
        lInMemoryStream := lInMemoryStream.NavMemoryStream();
        lInMemoryStream.CopyFrom(lInStream);
        lOutMemoryStream := lOutMemoryStream.NavMemoryStream();
        lBase64Toolkit.Decode(lInMemoryStream, lOutMemoryStream);
        pDestBlob.Blob.CREATEOUTSTREAM(lOutStream);
        lOutMemoryStream.CopyTo(lOutStream);
      END;
    END;

    PROCEDURE FromBase64Text@1000000027(pSourceText@1000000001 : Text;VAR pDestBlob@1000000000 : Record 99008535);
    VAR
      lSourceBlob@1000000002 : Record 99008535;
    BEGIN
      //DOC NA2015.4 - Decoding source text from Base64 and storing in the destination BLOB (.NET version)
      //  -> pSourceText: Source big text
      //  <> pDestBlob: Destination BLOB

      TextToBlob(pSourceText, lSourceBlob);
      FromBase64(lSourceBlob, pDestBlob);
    END;

    PROCEDURE FromBase64BigText@1000000029(pSourceBigText@1000000001 : BigText;VAR pDestBlob@1000000000 : Record 99008535);
    VAR
      lSourceBlob@1000000002 : Record 99008535;
    BEGIN
      //DOC NA2015.4 - Decoding source big text from Base64 and storing in the destination BLOB (.NET version)
      //  -> pSourceBigText: Source big text
      //  <> pDestBlob: Destination BLOB

      BigTextToBlob(pSourceBigText, lSourceBlob);
      FromBase64(lSourceBlob, pDestBlob);
    END;

    PROCEDURE "--- Copying and Moving ---"@1000000001();
    BEGIN
    END;

    PROCEDURE CopyBase64@1000000002(pFromParentTableId@1000000003 : Integer;pFromParentPosition@1000000002 : Text[250];pFromParentFieldId@1000000001 : Integer;pToParentTableId@1000000005 : Integer;pToParentPosition@1000000004 : Text[250];pToParentFieldId@1000000000 : Integer);
    VAR
      lFromBase64@1000000006 : Record 9062241;
      eCantCopyToThemselves@1000000009 : TextConst 'ENU=Can''t copy "%1" records to themselves.;ENG=Can''t copy "%1" records to themselves.';
      eExistsAlready@1000000007 : TextConst 'ENU="""%1"" records exist already; can''t overwrite them.";ENG="""%1"" records exist already; can''t overwrite them."';
      lToBase64@1000000010 : Record 9062241;
      lToParentFieldId@1000000011 : Integer;
    BEGIN
      //DOC NA2015.1 - Copying Base64 table content
      //  -> pFromParentTableId: Source parent table ID
      //  -> pFromParentPosition: Source parent position
      //  -> pFromParentFieldId: Source parent field ID (can be empty)
      //  -> pToParentTableId: Target parent table ID
      //  -> pToParentPosition: Target parent position
      //  -> pToParentFieldId: Target parent field ID (can be empty)

      IF ((pFromParentTableId = pToParentTableId) AND (pFromParentPosition = pToParentPosition) AND (pFromParentFieldId = pToParentFieldId)) THEN
        ERROR(eCantCopyToThemselves, lFromBase64.TABLECAPTION);

      lToBase64.RESET();
      lToBase64.SETCURRENTKEY("Parent Table ID", "Parent Position", "Parent Field ID", "Line No.");
      lToBase64.SETRANGE("Parent Table ID", pToParentTableId);
      lToBase64.SETRANGE("Parent Position", pToParentPosition);
      IF (pToParentFieldId <> 0) THEN
        lToBase64.SETRANGE("Parent Field ID", pToParentFieldId);
      IF ( NOT (lToBase64.ISEMPTY)) THEN
        lToBase64.DELETEALL(TRUE);

      lFromBase64.RESET();
      lFromBase64.SETCURRENTKEY("Parent Table ID", "Parent Position", "Parent Field ID", "Line No.");
      lFromBase64.SETRANGE("Parent Table ID", pFromParentTableId);
      lFromBase64.SETRANGE("Parent Position", pFromParentPosition);
      IF (pFromParentFieldId <> 0) THEN
        lFromBase64.SETRANGE("Parent Field ID", pFromParentFieldId);
      IF (lFromBase64.FINDSET()) THEN
      REPEAT
        IF (pToParentFieldId <> 0) THEN
          lToParentFieldId := pToParentFieldId
        ELSE
          lToParentFieldId := lFromBase64."Parent Field ID";

        CLEAR(lToBase64);
        lToBase64.INIT();
        lToBase64.TRANSFERFIELDS(lFromBase64, FALSE);
        lToBase64.VALIDATE("Parent Table ID", pToParentTableId);
        lToBase64.VALIDATE("Parent Position", pToParentPosition);
        lToBase64.VALIDATE("Parent Field ID", lToParentFieldId);
        lToBase64.VALIDATE("Line No.", 0);
        lToBase64.INSERT(TRUE);
      UNTIL (lFromBase64.NEXT() = 0);
    END;

    PROCEDURE MoveBase64@1000000008(pFromParentTableId@1000000006 : Integer;pFromParentPosition@1000000005 : Text[250];pFromParentFieldId@1000000004 : Integer;pToParentTableId@1000000003 : Integer;pToParentPosition@1000000002 : Text[250];pToParentFieldId@1000000001 : Integer);
    VAR
      lFromBase64@1000000000 : Record 9062241;
    BEGIN
      //DOC NA2015.1 - Moving Base64 table content
      //  -> pFromParentTableId: Source parent table ID
      //  -> pFromParentPosition: Source parent position
      //  -> pFromParentFieldId: Source parent field ID
      //  -> pToParentTableId: Target parent table ID
      //  -> pToParentPosition: Target parent position
      //  -> pToParentFieldId: Target parent field ID

      CopyBase64(pFromParentTableId, pFromParentPosition, pFromParentFieldId, pToParentTableId, pToParentPosition, pToParentFieldId);

      lFromBase64.RESET();
      lFromBase64.SETCURRENTKEY("Parent Table ID", "Parent Position", "Parent Field ID", "Line No.");
      lFromBase64.SETRANGE("Parent Table ID", pFromParentTableId);
      lFromBase64.SETRANGE("Parent Position", pFromParentPosition);
      IF (pFromParentFieldId <> 0) THEN
        lFromBase64.SETRANGE("Parent Field ID", pFromParentFieldId);
      lFromBase64.DELETEALL(TRUE);
    END;

    PROCEDURE "--- Tools ---"@1000000024();
    BEGIN
    END;

    PROCEDURE DeleteBase64@1000000011(pParentTableId@1000000002 : Integer;pParentPosition@1000000001 : Text[250];pParentFieldId@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Deleting Base64 records
      //  -> pParentTableId: Parent table ID
      //  -> pParentPosition: Parent position
      //  -> pParentFieldId: Parent field ID (can be empty)

      mBase64.RESET();
      mBase64.SETCURRENTKEY("Parent Table ID", "Parent Position", "Parent Field ID");
      mBase64.SETRANGE("Parent Table ID", pParentTableId);
      mBase64.SETRANGE("Parent Position", pParentPosition);
      IF (pParentFieldId <> 0) THEN
        mBase64.SETRANGE("Parent Field ID", pParentFieldId);
      mBase64.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE FilterBase64@1000000025(pParentTableId@1000000004 : Integer;pParentPosition@1000000003 : Text[250];pParentFieldId@1000000002 : Integer;pContentType@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Filtering Base64 table
      //  -> pParentTableId: Parent table ID
      //  -> pParentPosition: Parent position
      //  -> pParentFieldId: Parent field ID
      //  -> pContentType: Content type

      mBase64.RESET();
      mBase64.SETCURRENTKEY("Parent Table ID", "Parent Position", "Parent Field ID", "Content Type");
      mBase64.SETRANGE("Parent Table ID", pParentTableId);
      mBase64.SETRANGE("Parent Position", pParentPosition);
      mBase64.SETRANGE("Parent Field ID", pParentFieldId);
      mBase64.SETRANGE("Content Type", pContentType);
    END;

    LOCAL PROCEDURE InitBase64@1000000026(pParentTableId@1000000004 : Integer;pParentPosition@1000000003 : Text[250];pParentFieldId@1000000002 : Integer;pContentType@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Initialising Base64 record
      //  -> pParentTableId: Parent table ID
      //  -> pParentPosition: Parent position
      //  -> pParentFieldId: Parent field ID
      //  -> pContentType: Content type

      mBase64.INIT();
      mBase64.VALIDATE(ID, 0);
      mBase64.VALIDATE("Parent Table ID", pParentTableId);
      mBase64.VALIDATE("Parent Position", pParentPosition);
      mBase64.VALIDATE("Parent Field ID", pParentFieldId);
      mBase64.VALIDATE("Content Type", pContentType);
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 09/10/2012 - Planning Board 2013
      //DOC NA2015.1  JH 30/08/2013 - Decoding
      //DOC NA2015.1  JH 22/09/2013 - Blob to image conversion
      //DOC NA2015.1  JH 19/04/2014 - Image to BLOB functions added
      //DOC NA2015.4  JH 29/01/2015 - Updated for click-once
      //DOC NA2015.4  JH 29/01/2015 - "ToBase64Text" and "FromBase64Text" added
      //DOC NA2016.10 JH 26/08/2015 - Upgraded to 2016, fixes
      //DOC NA2016.16 JH 25/05/2016 - CfMD amendments (new .NET library)
    }
    END.
  }
}

