OBJECT Codeunit 7110 Analysis Report Management
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00,NAVGB9.00;
  }
  PROPERTIES
  {
    TableNo=7114;
    OnRun=BEGIN
            SETFILTER("Row Ref. No.",TryExpression);
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=DEFAULT;ENG=DEFAULT';
      Text002@1000 : TextConst 'ENU=Default Lines;ENG=Default Lines';
      Text003@1002 : TextConst 'ENU=Default Columns;ENG=Default Columns';
      OriginalAnalysisLineFilters@1007 : Record 7114;
      AnalysisLineTemplate@1029 : Record 7112;
      AnalysisFieldValue@1027 : TEMPORARY Record 7110;
      GLSetup@1025 : Record 98;
      InventorySetup@1024 : Record 313;
      SalesSetup@1023 : Record 311;
      CalendarSetup@1040004 : Record 10505;
      PeriodFormMgt@1040006 : Codeunit 359;
      StartDate@1019 : Date;
      EndDate@1018 : Date;
      FiscalStartDate@1017 : Date;
      FiscalEndDate@1040005 : Date;
      DivisionError@1016 : Boolean;
      PeriodError@1015 : Boolean;
      FormulaError@1043 : Boolean;
      CyclicError@1030 : Boolean;
      CallLevel@1014 : Integer;
      OldAnalysisLineFilters@1011 : Text;
      OldAnalysisColumnFilters@1010 : Text;
      OldAnalysisLineTemplate@1009 : Code[10];
      Text021@1003 : TextConst 'ENU=Conversion of dimension totaling filter %1 results in a filter that becomes too long.;ENG=Conversion of dimension totalling filter %1 results in a filter that becomes too long.';
      Text022@1042 : TextConst 'ENU=You must specify an %1 on %2 %3 %4 that includes the %5 dimension.;ENG=You must specify an %1 on %2 %3 %4 that includes the %5 dimension.';
      Text023@1020 : TextConst 'ENU=Column formula: %1;ENG=Column formula: %1';
      Text024@1008 : TextConst 'ENU=Row formula: %1;ENG=Row formula: %1';
      SalesSetupRead@1021 : Boolean;
      InventorySetupRead@1022 : Boolean;
      UseAccountingPeriod@1040003 : Boolean;
      UsePeriodType@1040002 : 'Day,Week,Month,Quarter,Year';
      CalendarSource@1040001 : ' ,System,AccPeriod';
      CalendarSetupRead@1040000 : Boolean;
      TryExpression@1028 : Text[250];
      ColumnFormulaMsg@1004 : TextConst '@@@="%1 - text of Column formula; %2 - text of Error";ENU=Column formula: %1. \Error: %2.;ENG=Column formula: %1. \Error: %2.';
      ShowError@1005 : 'None,Division by Zero,Period Error,Invalid Formula,Cyclic Formula,All';
      SeparatorTok@1006 : TextConst '@@@={Locked};ENU=";";ENG=";"';

    PROCEDURE LookupReportName@1(CurrentAnalysisArea@1000 : 'Sales,Purchase,Inventory';VAR CurrentReportName@1001 : Code[10]) : Boolean;
    VAR
      AnalysisReportName@1002 : Record 7111;
    BEGIN
      AnalysisReportName."Analysis Area" := CurrentAnalysisArea;
      AnalysisReportName.Name := CurrentReportName;
      AnalysisReportName.FILTERGROUP := 2;
      AnalysisReportName.SETRANGE("Analysis Area",CurrentAnalysisArea);
      AnalysisReportName.FILTERGROUP := 0;
      IF PAGE.RUNMODAL(0,AnalysisReportName) = ACTION::LookupOK THEN BEGIN
        CurrentReportName := AnalysisReportName.Name;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckReportName@69(CurrentReportName@1003 : Code[10];VAR AnalysisLine@1001 : Record 7114);
    VAR
      AnalysisReportName@1000 : Record 7111;
    BEGIN
      IF CurrentReportName <> '' THEN
        AnalysisReportName.GET(AnalysisLine.GETRANGEMAX("Analysis Area"),CurrentReportName);
    END;

    PROCEDURE OpenAnalysisLines@2(VAR CurrentLineTemplate@1000 : Code[10];VAR AnalysisLine@1001 : Record 7114);
    BEGIN
      CheckAnalysisLineTemplName2(AnalysisLine.GETRANGEMAX("Analysis Area"),CurrentLineTemplate);
      AnalysisLine.FILTERGROUP := 2;
      AnalysisLine.SETRANGE("Analysis Line Template Name",CurrentLineTemplate);
      AnalysisLine.FILTERGROUP := 0;
    END;

    LOCAL PROCEDURE CheckAnalysisLineTemplName2@3(CurrentAnalysisArea@1000 : 'Sale,Purchase,Inventory';VAR CurrentAnalysisLineTempl@1001 : Code[10]);
    VAR
      AnalysisLineTemplate@1002 : Record 7112;
    BEGIN
      IF NOT AnalysisLineTemplate.GET(CurrentAnalysisArea,CurrentAnalysisLineTempl) THEN BEGIN
        AnalysisLineTemplate.SETRANGE("Analysis Area",CurrentAnalysisArea);
        IF NOT AnalysisLineTemplate.FINDFIRST THEN BEGIN
          AnalysisLineTemplate.INIT;
          AnalysisLineTemplate."Analysis Area" := CurrentAnalysisArea;
          AnalysisLineTemplate.Name := Text001;
          AnalysisLineTemplate.Description := Text002;
          AnalysisLineTemplate.INSERT(TRUE);
          COMMIT;
        END;
        CurrentAnalysisLineTempl := AnalysisLineTemplate.Name;
      END;
    END;

    PROCEDURE CheckAnalysisLineTemplName@4(CurrentAnalysisLineTempl@1000 : Code[10];VAR AnalysisLine@1001 : Record 7114);
    VAR
      AnalysisLineTemplate@1002 : Record 7112;
    BEGIN
      AnalysisLineTemplate.GET(AnalysisLine.GETRANGEMAX("Analysis Area"),CurrentAnalysisLineTempl);
    END;

    PROCEDURE SetAnalysisLineTemplName@5(CurrentAnalysisLineTempl@1001 : Code[10];VAR AnalysisLine@1000 : Record 7114);
    BEGIN
      AnalysisLine.FILTERGROUP := 2;
      AnalysisLine.SETRANGE("Analysis Area",AnalysisLine.GETRANGEMAX("Analysis Area"));
      AnalysisLine.SETRANGE("Analysis Line Template Name",CurrentAnalysisLineTempl);
      AnalysisLine.FILTERGROUP := 0;
      IF AnalysisLine.FIND('-') THEN;
    END;

    PROCEDURE LookupAnalysisLineTemplName@6(VAR CurrentAnalysisLineTempl@1001 : Code[10];VAR AnalysisLine@1000 : Record 7114) : Boolean;
    VAR
      AnalysisLineTemplate@1002 : Record 7112;
    BEGIN
      COMMIT;
      AnalysisLineTemplate."Analysis Area" := AnalysisLine.GETRANGEMAX("Analysis Area");
      AnalysisLineTemplate.Name := AnalysisLine.GETRANGEMAX("Analysis Line Template Name");
      AnalysisLineTemplate.FILTERGROUP := 2;
      AnalysisLineTemplate.SETRANGE("Analysis Area",AnalysisLine.GETRANGEMAX("Analysis Area"));
      AnalysisLineTemplate.FILTERGROUP := 0;
      IF PAGE.RUNMODAL(0,AnalysisLineTemplate) = ACTION::LookupOK THEN BEGIN
        CheckAnalysisLineTemplName(AnalysisLineTemplate.Name,AnalysisLine);
        CurrentAnalysisLineTempl := AnalysisLineTemplate.Name;
        SetAnalysisLineTemplName(CurrentAnalysisLineTempl,AnalysisLine);
        EXIT(TRUE);
      END;
      OpenAnalysisLines(CurrentAnalysisLineTempl,AnalysisLine);
    END;

    PROCEDURE OpenAnalysisLinesForm@7(VAR AnalysisLine2@1000 : Record 7114;CurrentAnalysisLineTempl@1001 : Code[10]);
    VAR
      AnalysisLine@1002 : Record 7114;
      AnalysisLines@1003 : Page 7115;
      AnalysisLinesForSale@1004 : Page 7120;
      AnalysisLinesForPurchase@1005 : Page 7121;
    BEGIN
      COMMIT;
      AnalysisLine.COPY(AnalysisLine2);
      CASE AnalysisLine.GETRANGEMAX("Analysis Area") OF
        AnalysisLine."Analysis Area"::Sales:
          BEGIN
            AnalysisLinesForSale.SetCurrentAnalysisLineTempl(CurrentAnalysisLineTempl);
            AnalysisLinesForSale.SETTABLEVIEW(AnalysisLine);
            AnalysisLinesForSale.RUNMODAL;
          END;
        AnalysisLine."Analysis Area"::Purchase:
          BEGIN
            AnalysisLinesForPurchase.SetCurrentAnalysisLineTempl(CurrentAnalysisLineTempl);
            AnalysisLinesForPurchase.SETTABLEVIEW(AnalysisLine);
            AnalysisLinesForPurchase.RUNMODAL;
          END;
        ELSE
          AnalysisLines.SetCurrentAnalysisLineTempl(CurrentAnalysisLineTempl);
          AnalysisLines.SETTABLEVIEW(AnalysisLine);
          AnalysisLines.RUNMODAL;
      END;
    END;

    PROCEDURE OpenAnalysisColumnsForm@9(VAR AnalysisLine@1000 : Record 7114;CurrentColumnTempl@1002 : Code[10]);
    VAR
      AnalysisColumn@1001 : Record 7118;
      AnalysisColumns@1003 : Page 7114;
    BEGIN
      COMMIT;
      AnalysisColumn.FILTERGROUP := 2;
      AnalysisColumn.SETRANGE(
        "Analysis Area",AnalysisLine.GETRANGEMAX("Analysis Area"));
      AnalysisColumn.FILTERGROUP := 0;
      AnalysisColumns.SETTABLEVIEW(AnalysisColumn);
      AnalysisColumns.SetCurrentColumnName(CurrentColumnTempl);
      AnalysisColumns.RUNMODAL;
    END;

    PROCEDURE OpenColumns@16(VAR CurrentColumnTempl@1000 : Code[10];VAR AnalysisLine@1002 : Record 7114;VAR AnalysisColumn@1001 : Record 7118);
    BEGIN
      CheckColumnTemplate(AnalysisLine.GETRANGEMAX("Analysis Area"),CurrentColumnTempl);
      AnalysisColumn.FILTERGROUP := 2;
      AnalysisColumn.SETRANGE("Analysis Area",AnalysisLine.GETRANGEMAX("Analysis Area"));
      AnalysisColumn.SETRANGE("Analysis Column Template",CurrentColumnTempl);
      AnalysisColumn.FILTERGROUP := 0;
    END;

    PROCEDURE OpenColumns2@63(VAR CurrentColumnTempl@1000 : Code[10];VAR AnalysisColumn@1001 : Record 7118);
    BEGIN
      CheckColumnTemplate(AnalysisColumn.GETRANGEMAX("Analysis Area"),CurrentColumnTempl);
      AnalysisColumn.FILTERGROUP := 2;
      AnalysisColumn.SETRANGE("Analysis Column Template",CurrentColumnTempl);
      AnalysisColumn.FILTERGROUP := 0;
    END;

    LOCAL PROCEDURE CheckColumnTemplate@15(CurrentAnalysisArea@1000 : 'Sale,Purchase,Inventory';VAR CurrentColumnName@1002 : Code[10]);
    VAR
      AnalysisColumnTemplate@1001 : Record 7116;
    BEGIN
      IF NOT AnalysisColumnTemplate.GET(CurrentAnalysisArea,CurrentColumnName) THEN BEGIN
        AnalysisColumnTemplate.SETRANGE("Analysis Area",CurrentAnalysisArea);
        IF NOT AnalysisColumnTemplate.FINDFIRST THEN BEGIN
          AnalysisColumnTemplate.INIT;
          AnalysisColumnTemplate."Analysis Area" := CurrentAnalysisArea;
          AnalysisColumnTemplate.Name := Text001;
          AnalysisColumnTemplate.Description := Text003;
          AnalysisColumnTemplate.INSERT(TRUE);
          COMMIT;
        END;
        CurrentColumnName := AnalysisColumnTemplate.Name;
      END;
    END;

    PROCEDURE GetColumnTemplate@14(CurrentAnalysisArea@1002 : 'Sale,Purchase,Inventory';CurrentColumnTemplate@1000 : Code[10]);
    VAR
      AnalysisColumnTemplate@1001 : Record 7116;
    BEGIN
      AnalysisColumnTemplate.GET(CurrentAnalysisArea,CurrentColumnTemplate);
    END;

    PROCEDURE SetColumnName@13(CurrentAnalysisArea@1003 : 'Sale,Purchase,Inventory';CurrentColumnName@1000 : Code[10];VAR AnalysisColumn@1001 : Record 7118);
    BEGIN
      AnalysisColumn.FILTERGROUP := 2;
      AnalysisColumn.SETRANGE("Analysis Area",CurrentAnalysisArea);
      AnalysisColumn.SETRANGE("Analysis Column Template",CurrentColumnName);
      AnalysisColumn.FILTERGROUP := 0;
      IF AnalysisColumn.FIND('-') THEN;
    END;

    PROCEDURE CopyColumnsToTemp@21(VAR AnalysisLine@1003 : Record 7114;ColumnName@1000 : Code[10];VAR TempAnalysisColumn@1001 : Record 7118);
    VAR
      AnalysisColumn@1002 : Record 7118;
    BEGIN
      TempAnalysisColumn.DELETEALL;
      AnalysisColumn.SETRANGE(
        "Analysis Area",AnalysisLine.GETRANGEMAX("Analysis Area"));
      AnalysisColumn.SETRANGE("Analysis Column Template",ColumnName);
      IF AnalysisColumn.FIND('-') THEN
        REPEAT
          TempAnalysisColumn := AnalysisColumn;
          TempAnalysisColumn.INSERT;
        UNTIL AnalysisColumn.NEXT = 0;
      IF TempAnalysisColumn.FIND('-') THEN;
    END;

    PROCEDURE LookupColumnName@11(CurrentAnalysisArea@1001 : Option;VAR CurrentColumnName@1000 : Code[10]) : Boolean;
    VAR
      AnalysisColumnTemplate@1002 : Record 7116;
    BEGIN
      AnalysisColumnTemplate.FILTERGROUP := 2;
      AnalysisColumnTemplate.SETRANGE("Analysis Area",CurrentAnalysisArea);
      AnalysisColumnTemplate.FILTERGROUP := 0;
      AnalysisColumnTemplate."Analysis Area" := CurrentAnalysisArea;
      AnalysisColumnTemplate.Name := CurrentColumnName;
      IF PAGE.RUNMODAL(0,AnalysisColumnTemplate) = ACTION::LookupOK THEN BEGIN
        CurrentColumnName := AnalysisColumnTemplate.Name;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE SetSourceType@76(VAR AnalysisLine@1001 : Record 7114;CurrentSourceTypeFilter@1002 : ' ,Customer,Vendor,Item');
    BEGIN
      IF CurrentSourceTypeFilter = CurrentSourceTypeFilter::" " THEN
        EXIT;

      AnalysisLine.SETRANGE("Source Type Filter",CurrentSourceTypeFilter);
    END;

    PROCEDURE SetSourceNo@72(VAR AnalysisLine@1000 : Record 7114;CurrentSourceTypeNoFilter@1001 : Code[1024]);
    BEGIN
      AnalysisLine.SETFILTER("Source No. Filter",CurrentSourceTypeNoFilter);
    END;

    PROCEDURE LookupSourceNo@8(VAR AnalysisLine@1000 : Record 7114;CurrentSourceTypeFilter@1002 : ' ,Customer,Vendor,Item';VAR CurrentSourceTypeNoFilter@1001 : Code[1024]);
    VAR
      CustList@1005 : Page 22;
      VendList@1006 : Page 27;
      ItemList@1007 : Page 31;
    BEGIN
      CASE CurrentSourceTypeFilter OF
        CurrentSourceTypeFilter::" ":
          EXIT;
        CurrentSourceTypeFilter::Customer:
          BEGIN
            CustList.LOOKUPMODE := TRUE;
            IF CustList.RUNMODAL = ACTION::LookupOK THEN
              CurrentSourceTypeNoFilter := CustList.GetSelectionFilter;
          END;
        CurrentSourceTypeFilter::Vendor:
          BEGIN
            VendList.LOOKUPMODE := TRUE;
            IF VendList.RUNMODAL = ACTION::LookupOK THEN
              CurrentSourceTypeNoFilter := VendList.GetSelectionFilter;
          END;
        CurrentSourceTypeFilter::Item:
          BEGIN
            ItemList.LOOKUPMODE := TRUE;
            IF ItemList.RUNMODAL = ACTION::LookupOK THEN
              CurrentSourceTypeNoFilter := ItemList.GetSelectionFilter;
          END;
      END;
      SetSourceNo(AnalysisLine,CurrentSourceTypeNoFilter);
    END;

    PROCEDURE FindFiscalYear@67(BalanceDate@1000 : Date;VAR Calendar@1040000 : Record 2000000007) : Date;
    VAR
      AccountingPeriod@1001 : Record 10560;
    BEGIN
      IF UseAccountingPeriod THEN BEGIN
        WITH AccountingPeriod DO BEGIN
          RESET;
          SETRANGE("Period Type","Period Type"::Year);
          SETRANGE("Period Start",0D,BalanceDate);
          FINDLAST;
          "Period End" := NORMALDATE("Period End");
          Calendar.TRANSFERFIELDS(AccountingPeriod);
        END;
      END ELSE
        WITH Calendar DO BEGIN
          RESET;
          SETRANGE("Period Type","Period Type"::Year);
          SETRANGE("Period Start",0D,BalanceDate);
          FIND('+');
          "Period End" := NORMALDATE("Period End");
        END;
    END;

    PROCEDURE SetCalendarSource@1040004(VAR CalendarSource@1040000 : ' ,System,AccPeriod';PeriodType@1040001 : 'Day,Week,Month,Quarter,Year');
    BEGIN
      GetCalendarSetup;
      IF CalendarSource = CalendarSource::" " THEN
        GetDefaultCalendarSource(CalendarSource);
      UseAccountingPeriod := CalendarSource = CalendarSource::AccPeriod;
      UsePeriodType := PeriodType;
    END;

    LOCAL PROCEDURE GetCalendarSetup@1040005();
    BEGIN
      IF NOT CalendarSetupRead THEN
        IF NOT CalendarSetup.GET THEN
          CalendarSetup.INIT;
    END;

    PROCEDURE GetDefaultCalendarSource@1040002(VAR CalendarSource@1040000 : ',System,AccPeriod');
    VAR
      Text1041000@1041000 : TextConst 'ENU=You must specify %1 in the %2 table.;ENG=You must specify %1 in the %2 table.';
    BEGIN
      GetCalendarSetup;
      IF CalendarSetup."Default Source Calendar" = CalendarSetup."Default Source Calendar"::" " THEN
        ERROR(
          Text1041000,
          CalendarSetup.FIELDCAPTION("Default Source Calendar"),CalendarSetup.TABLECAPTION);
      CalendarSource := CalendarSetup."Default Source Calendar";
    END;

    PROCEDURE CalcCell@29(VAR AnalysisLine@1000 : Record 7114;VAR AnalysisColumn@1001 : Record 7118;DrillDown@1004 : Boolean) : Decimal;
    VAR
      ErrorText@1002 : Text;
      Result@1003 : Decimal;
      Calendar@1040000 : Record 2000000007;
    BEGIN
      IF DrillDown AND
         ((AnalysisColumn."Column Type" = AnalysisColumn."Column Type"::Formula) OR
          (AnalysisLine.Type = AnalysisLine.Type::Formula))
      THEN BEGIN
        IF AnalysisColumn."Column Type" = AnalysisColumn."Column Type"::Formula THEN BEGIN
          ErrorText := CalcFieldError(AnalysisLine."Line No.",AnalysisColumn."Line No.");
          IF ErrorText = '' THEN
            MESSAGE(Text023,AnalysisColumn.Formula)
          ELSE
            MESSAGE(ColumnFormulaMsg,AnalysisColumn.Formula,ErrorText);
        END ELSE
          MESSAGE(Text024,AnalysisLine.Range);
        EXIT(0);
      END;

      OriginalAnalysisLineFilters.COPYFILTERS(AnalysisLine);

      StartDate := AnalysisLine.GETRANGEMIN("Date Filter");
      IF EndDate <> AnalysisLine.GETRANGEMAX("Date Filter") THEN BEGIN
        EndDate := AnalysisLine.GETRANGEMAX("Date Filter");
        FindFiscalYear(EndDate,Calendar);
        FiscalStartDate := Calendar."Period Start";
        FiscalEndDate := NORMALDATE(Calendar."Period End");
      END;
      DivisionError := FALSE;
      PeriodError := FALSE;
      FormulaError := FALSE;
      CyclicError := FALSE;
      CallLevel := 0;

      IF (OldAnalysisLineFilters <> AnalysisLine.GETFILTERS) OR
         (OldAnalysisColumnFilters <> AnalysisColumn.GETFILTERS) OR
         (OldAnalysisLineTemplate <> AnalysisLine."Analysis Line Template Name") OR
         (OldAnalysisLineTemplate <> AnalysisColumn."Analysis Column Template")
      THEN BEGIN
        AnalysisFieldValue.RESET;
        AnalysisFieldValue.DELETEALL;
        OldAnalysisLineFilters := AnalysisLine.GETFILTERS;
        OldAnalysisColumnFilters := AnalysisColumn.GETFILTERS;
        OldAnalysisLineTemplate := AnalysisLine."Analysis Line Template Name";
        OldAnalysisLineTemplate := AnalysisColumn."Analysis Column Template";
      END;

      Result := CalcCellValue(AnalysisLine,AnalysisColumn,DrillDown);
      WITH AnalysisColumn DO BEGIN
        CASE Show OF
          Show::"When Positive":
            IF Result < 0 THEN
              Result := 0;
          Show::"When Negative":
            IF Result > 0 THEN
              Result := 0;
        END;
        IF "Show Opposite Sign" THEN
          Result := -Result;
      END;
      IF AnalysisLine."Show Opposite Sign" THEN
        Result := -Result;
      EXIT(Result);
    END;

    LOCAL PROCEDURE CalcCellValue@27(AnalysisLine@1000 : Record 7114;AnalysisColumn@1001 : Record 7118;DrillDown@1100 : Boolean) : Decimal;
    VAR
      Result@1003 : Decimal;
      ItemStatisticsBuf@1004 : Record 5821;
    BEGIN
      Result := 0;
      IF AnalysisLine.Range <> '' THEN BEGIN
        CASE TRUE OF
          AnalysisFieldValue.GET(AnalysisLine."Line No.",AnalysisColumn."Line No.") AND NOT DrillDown:
            BEGIN
              Result := AnalysisFieldValue.Value;
              DivisionError := DivisionError OR AnalysisFieldValue."Has Error";
              PeriodError := PeriodError OR AnalysisFieldValue."Period Error";
              FormulaError := FormulaError OR AnalysisFieldValue."Formula Error";
              CyclicError := CyclicError OR AnalysisFieldValue."Cyclic Error";
              EXIT(Result);
            END;
          AnalysisColumn."Column Type" = AnalysisColumn."Column Type"::Formula:
            Result :=
              EvaluateExpression(
                FALSE,AnalysisColumn.Formula,AnalysisLine,AnalysisColumn);
          AnalysisLine.Type = AnalysisLine.Type::Formula:
            Result :=
              EvaluateExpression(
                TRUE,AnalysisLine.Range,AnalysisLine,AnalysisColumn);
          (StartDate = 0D) OR (EndDate IN [0D,31129999D]):
            BEGIN
              Result := 0;
              PeriodError := TRUE;
            END;
          ELSE
            IF (AnalysisLineTemplate."Analysis Area" <> AnalysisLine."Analysis Area") OR
               (AnalysisLineTemplate.Name <> AnalysisLine."Analysis Line Template Name")
            THEN
              AnalysisLineTemplate.GET(AnalysisLine."Analysis Area",AnalysisLine."Analysis Line Template Name");
            AnalysisLine.COPYFILTERS(OriginalAnalysisLineFilters);
            SetItemRowFilters(ItemStatisticsBuf,AnalysisLine);
            SetItemColumnFilters(ItemStatisticsBuf,AnalysisColumn);

            Result := Result + CalcItemStatistics(ItemStatisticsBuf,AnalysisLine,AnalysisColumn,DrillDown);
        END;

        IF NOT DrillDown THEN BEGIN
          AnalysisFieldValue."Row Ref. No." := AnalysisLine."Line No.";
          AnalysisFieldValue."Column No." := AnalysisColumn."Line No.";
          AnalysisFieldValue.Value := Result;
          AnalysisFieldValue."Has Error" := DivisionError;
          AnalysisFieldValue."Period Error" := PeriodError;
          AnalysisFieldValue."Formula Error" := FormulaError;
          AnalysisFieldValue."Cyclic Error" := CyclicError;
          IF AnalysisFieldValue.INSERT THEN;
        END;
      END;
      EXIT(Result);
    END;

    LOCAL PROCEDURE CalcItemStatistics@26(VAR ItemStatisticsBuf@1001 : Record 5821;VAR AnalysisLine@1002 : Record 7114;VAR AnalysisColumn@1003 : Record 7118;DrillDown@1100 : Boolean) : Decimal;
    VAR
      ColValue@1006 : Decimal;
    BEGIN
      ColValue := 0;

      IF (AnalysisLineTemplate."Analysis Area" <> AnalysisLine."Analysis Area") OR
         (AnalysisLineTemplate.Name <> AnalysisLine."Analysis Line Template Name")
      THEN
        AnalysisLineTemplate.GET(AnalysisLine."Analysis Area",AnalysisLine."Analysis Line Template Name");

      IF AnalysisColumn."Column Type" <> AnalysisColumn."Column Type"::Formula THEN BEGIN
        WITH ItemStatisticsBuf DO BEGIN
          IF AnalysisLine.GETFILTER("Source No. Filter") <> '' THEN
            CASE FilterToValue(AnalysisLine) OF
              AnalysisLine."Source Type Filter"::Customer:
                BEGIN
                  SETRANGE("Source Type Filter","Source Type Filter"::Customer);
                  SETFILTER("Source No. Filter",GetSourceNoFilter(ItemStatisticsBuf,AnalysisLine));
                END;
              AnalysisLine."Source Type Filter"::Vendor:
                BEGIN
                  SETRANGE("Source Type Filter","Source Type Filter"::Vendor);
                  SETFILTER("Source No. Filter",GetSourceNoFilter(ItemStatisticsBuf,AnalysisLine));
                END;
              AnalysisLine."Source Type Filter"::Item:
                SETFILTER("Item Filter",GetSourceNoFilter(ItemStatisticsBuf,AnalysisLine));
            END;
          IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
            IF GETFILTER("Global Dimension 1 Filter") = '' THEN
              AnalysisLine.COPYFILTER("Dimension 1 Filter","Global Dimension 1 Filter");
            IF GETFILTER("Global Dimension 2 Filter") = '' THEN
              AnalysisLine.COPYFILTER("Dimension 2 Filter","Global Dimension 2 Filter");
            FILTERGROUP := 2;
            SETFILTER("Global Dimension 1 Filter",GetDimTotalingFilter(AnalysisLine."Dimension 1 Totaling"));
            SETFILTER("Global Dimension 2 Filter",GetDimTotalingFilter(AnalysisLine."Dimension 2 Totaling"));
            FILTERGROUP := 0;
          END ELSE BEGIN
            SETFILTER("Analysis View Filter",AnalysisLineTemplate."Item Analysis View Code");
            IF GETFILTER("Dimension 1 Filter") = '' THEN
              AnalysisLine.COPYFILTER("Dimension 1 Filter","Dimension 1 Filter");
            IF GETFILTER("Dimension 2 Filter") = '' THEN
              AnalysisLine.COPYFILTER("Dimension 2 Filter","Dimension 2 Filter");
            IF GETFILTER("Dimension 3 Filter") = '' THEN
              AnalysisLine.COPYFILTER("Dimension 3 Filter","Dimension 3 Filter");
            FILTERGROUP := 2;
            SETFILTER("Dimension 1 Filter",GetDimTotalingFilter(AnalysisLine."Dimension 1 Totaling"));
            SETFILTER("Dimension 2 Filter",GetDimTotalingFilter(AnalysisLine."Dimension 2 Totaling"));
            SETFILTER("Dimension 3 Filter",GetDimTotalingFilter(AnalysisLine."Dimension 3 Totaling"));
            FILTERGROUP := 0;
          END;
          AnalysisLine.COPYFILTER("Location Filter","Location Filter");
        END;

        CASE AnalysisColumn."Ledger Entry Type" OF
          AnalysisColumn."Ledger Entry Type"::"Item Entries":
            BEGIN
              IF DrillDown THEN
                CASE AnalysisColumn."Value Type" OF
                  AnalysisColumn."Value Type"::Quantity:
                    DrillDownQuantity(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Sales Amount":
                    DrillDownSalesAmount(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Cost Amount":
                    DrillDownCostAmount(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Non-Invntble Amount":
                    DrillDownCostAmountNonInvnt(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Unit Price":
                    DrillDownUnitPrice(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Standard Cost":
                    DrillDownStdCost(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Indirect Cost":
                    DrillDownIndirectCost(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Unit Cost":
                    DrillDownUnitCost(ItemStatisticsBuf);
                END
              ELSE
                CASE AnalysisColumn."Value Type" OF
                  AnalysisColumn."Value Type"::Quantity:
                    ColValue := CalcQuantity(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Sales Amount":
                    ColValue := CalcSalesAmount(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Cost Amount":
                    ColValue := CalcCostAmount(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Non-Invntble Amount":
                    ColValue := CalcCostAmountNonInvnt(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Unit Price":
                    ColValue := CalcUnitPrice(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Standard Cost":
                    ColValue := CalcStdCost(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Indirect Cost":
                    ColValue := CalcIndirectCost(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Unit Cost":
                    ColValue := CalcUnitCost(ItemStatisticsBuf);
                END;
            END;
          AnalysisColumn."Ledger Entry Type"::"Item Budget Entries":
            BEGIN
              IF DrillDown THEN
                CASE AnalysisColumn."Value Type" OF
                  AnalysisColumn."Value Type"::Quantity:
                    DrillDownBudgetQuantity(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Sales Amount":
                    DrillDownBudgetSalesAmount(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Cost Amount":
                    DrillDownBudgetCostAmount(ItemStatisticsBuf);
                END
              ELSE
                CASE AnalysisColumn."Value Type" OF
                  AnalysisColumn."Value Type"::Quantity:
                    ColValue := CalcBudgetQuantity(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Sales Amount":
                    ColValue := CalcBudgetSalesAmount(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Cost Amount":
                    ColValue := CalcBudgetCostAmount(ItemStatisticsBuf);
                END;
            END;
        END;
      END;
      EXIT(ColValue);
    END;

    PROCEDURE SetItemRowFilters@17(VAR ItemStatisticsBuf@1000 : Record 5821;VAR AnalysisLine@1001 : Record 7114);
    BEGIN
      WITH AnalysisLine DO BEGIN
        CASE "Analysis Area" OF
          "Analysis Area"::Sales:
            ItemStatisticsBuf.SETRANGE("Analysis Area Filter","Analysis Area"::Sales);
          "Analysis Area"::Purchase:
            ItemStatisticsBuf.SETRANGE("Analysis Area Filter","Analysis Area"::Purchase);
          "Analysis Area"::Inventory:
            ItemStatisticsBuf.SETRANGE("Analysis Area Filter","Analysis Area"::Inventory);
        END;
        ItemStatisticsBuf.SETFILTER("Budget Filter",GETFILTER("Item Budget Filter"));
        CASE Type OF
          Type::Item:
            ItemStatisticsBuf.SETFILTER("Item Filter",Range);
          Type::Customer:
            BEGIN
              ItemStatisticsBuf.SETRANGE("Source Type Filter",ItemStatisticsBuf."Source Type Filter"::Customer);
              ItemStatisticsBuf.SETFILTER("Source No. Filter",Range);
            END;
          Type::Vendor:
            BEGIN
              ItemStatisticsBuf.SETRANGE("Source Type Filter",ItemStatisticsBuf."Source Type Filter"::Vendor);
              ItemStatisticsBuf.SETFILTER("Source No. Filter",Range);
            END;
          Type::"Sales/Purchase person":
            BEGIN
              GetSalesSetup;
              SetGroupDimFilter(ItemStatisticsBuf,SalesSetup."Salesperson Dimension Code",Range);
            END;
          Type::"Customer Group":
            BEGIN
              GetSalesSetup;
              SetGroupDimFilter(ItemStatisticsBuf,SalesSetup."Customer Group Dimension Code",Range);
            END;
          Type::"Item Group":
            BEGIN
              GetInventorySetup;
              SetGroupDimFilter(ItemStatisticsBuf,InventorySetup."Item Group Dimension Code",Range);
            END;
        END;
      END;
    END;

    PROCEDURE SetItemColumnFilters@20(VAR ItemStatisticsBuf@1000 : Record 5821;VAR AnalysisColumn@1001 : Record 7118);
    VAR
      Calendar@1040007 : Record 2000000007;
      FromDate@1002 : Date;
      ToDate@1003 : Date;
      FiscalStartDate2@1004 : Date;
      FiscalEndDate2@1040008 : Date;
    BEGIN
      WITH AnalysisColumn DO BEGIN
        ItemStatisticsBuf.SETFILTER("Entry Type Filter","Value Entry Type Filter");
        ItemStatisticsBuf.SETFILTER("Item Ledger Entry Type Filter","Item Ledger Entry Type Filter");

        IF (FORMAT("Comparison Date Formula") <> '0') AND (FORMAT("Comparison Date Formula") <> '') THEN BEGIN
          FromDate := StartDate;
          PeriodFormMgt.CalcDate2("Comparison Date Formula",FromDate,Calendar);
          IF "Keep Comparison Period Scope" THEN BEGIN
            FromDate := Calendar."Period Start";
            ToDate := NORMALDATE(Calendar."Period End");
          END ELSE BEGIN
            IF UseAccountingPeriod THEN BEGIN
              CalendarSource := CalendarSource::AccPeriod;
              PeriodFormMgt.SetCalendarSource(CalendarSource);
            END ELSE BEGIN
              CalendarSource := CalendarSource::System;
              PeriodFormMgt.SetCalendarSource(CalendarSource);
            END;
            Calendar.RESET;
            Calendar."Period Start" := FromDate;
            PeriodFormMgt.FindDate('',Calendar,UsePeriodType);
            FromDate := Calendar."Period Start";
            ToDate := NORMALDATE(Calendar."Period End");
          END;
          FindFiscalYear(ToDate,Calendar);
          FiscalStartDate2 := Calendar."Period Start";
          FiscalEndDate2 := NORMALDATE(Calendar."Period End");
        END ELSE BEGIN
          FromDate := StartDate;
          ToDate := EndDate;
          FiscalStartDate2 := FiscalStartDate;
          FiscalEndDate2 := FiscalEndDate;
        END;
        CASE "Column Type" OF
          "Column Type"::"Net Change":
            ItemStatisticsBuf.SETRANGE("Date Filter",FromDate,ToDate);
          "Column Type"::"Balance at Date":
            ItemStatisticsBuf.SETRANGE("Date Filter",0D,ToDate);
          "Column Type"::"Beginning Balance":
            ItemStatisticsBuf.SETRANGE(
              "Date Filter",0D,CALCDATE('<-1D>',FromDate));
          "Column Type"::"Year to Date":
            ItemStatisticsBuf.SETRANGE(
              "Date Filter",FiscalStartDate2,ToDate);
          "Column Type"::"Rest of Fiscal Year":
            ItemStatisticsBuf.SETRANGE(
              "Date Filter",
              CALCDATE('<+1D>',ToDate),FiscalEndDate2);
        END;
      END;
    END;

    LOCAL PROCEDURE EvaluateExpression@10(IsAnalysisLineExpression@1000 : Boolean;Expression@1001 : Text[250];AnalysisLine@1002 : Record 7114;AnalysisColumn@1003 : Record 7118) : Decimal;
    VAR
      Result@1005 : Decimal;
      Parentheses@1006 : Integer;
      Operator@1007 : Char;
      LeftOperand@1008 : Text[250];
      RightOperand@1009 : Text[250];
      LeftResult@1010 : Decimal;
      RightResult@1011 : Decimal;
      i@1012 : Integer;
      IsExpression@1013 : Boolean;
      IsFilter@1014 : Boolean;
      Operators@1015 : Text[8];
      OperatorNo@1016 : Integer;
      AnalysisLineID@1017 : Integer;
    BEGIN
      Result := 0;

      CallLevel := CallLevel + 1;
      IF CallLevel > 25 THEN BEGIN
        CyclicError := TRUE;
        EXIT;
      END;

      Expression := DELCHR(Expression,'<>',' ');
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parentheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parentheses := Parentheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parentheses := Parentheses - 1;
            IF (Parentheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN
            LeftOperand := COPYSTR(Expression,1,i - 1)
          ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN
            RightOperand := COPYSTR(Expression,i + 1)
          ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult :=
            EvaluateExpression(
              IsAnalysisLineExpression,LeftOperand,AnalysisLine,AnalysisColumn);
          RightResult :=
            EvaluateExpression(
              IsAnalysisLineExpression,RightOperand,AnalysisLine,AnalysisColumn);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpression(
                IsAnalysisLineExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),
                AnalysisLine,AnalysisColumn)
          ELSE BEGIN
            IsFilter :=
              (STRPOS(Expression,'..') +
               STRPOS(Expression,'|') +
               STRPOS(Expression,'<') +
               STRPOS(Expression,'>') +
               STRPOS(Expression,'&') +
               STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsAnalysisLineExpression THEN BEGIN
                AnalysisLine.SETRANGE("Analysis Area",AnalysisLine."Analysis Area");
                AnalysisLine.SETRANGE("Analysis Line Template Name",AnalysisLine."Analysis Line Template Name");
                IF NOT IsValidAnalysisExpression(AnalysisLine,Expression) THEN
                  FormulaError := TRUE
                ELSE
                  AnalysisLine.SETFILTER("Row Ref. No.",Expression);
                AnalysisLineID := AnalysisLine."Line No.";
                IF NOT FormulaError THEN BEGIN
                  IF AnalysisLine.FIND('-') THEN
                    REPEAT
                      IF AnalysisLine."Line No." <> AnalysisLineID THEN
                        Result := Result + CalcCellValue(AnalysisLine,AnalysisColumn,FALSE);
                    UNTIL AnalysisLine.NEXT = 0
                  ELSE
                    IF IsFilter OR (NOT EVALUATE(Result,Expression)) THEN
                      FormulaError := TRUE;
                END;
              END ELSE BEGIN
                AnalysisColumn.SETRANGE("Analysis Area",AnalysisColumn."Analysis Area");
                AnalysisColumn.SETRANGE("Analysis Column Template",AnalysisColumn."Analysis Column Template");
                IF NOT IsValidAnalysisExpression(AnalysisLine,Expression) THEN
                  FormulaError := TRUE
                ELSE
                  AnalysisColumn.SETFILTER("Column No.",Expression);
                AnalysisLineID := AnalysisColumn."Line No.";
                IF NOT FormulaError THEN BEGIN
                  IF AnalysisColumn.FIND('-') THEN
                    REPEAT
                      IF AnalysisColumn."Line No." <> AnalysisLineID THEN
                        Result := Result + CalcCellValue(AnalysisLine,AnalysisColumn,FALSE);
                    UNTIL AnalysisColumn.NEXT = 0
                  ELSE
                    IF IsFilter OR (NOT EVALUATE(Result,Expression)) THEN
                      FormulaError := TRUE;
                END;
              END;
          END;
      END;
      CallLevel := CallLevel - 1;
      EXIT(Result);
    END;

    PROCEDURE GetDivisionError@18() : Boolean;
    BEGIN
      EXIT(DivisionError);
    END;

    PROCEDURE GetFormulaError@54() : Boolean;
    BEGIN
      EXIT(FormulaError);
    END;

    PROCEDURE GetCyclicError@56() : Boolean;
    BEGIN
      EXIT(CyclicError);
    END;

    PROCEDURE SetAnalysisLineTemplate@22(VAR NewAnalysisLineTemplate@1000 : Record 7112);
    BEGIN
      AnalysisLineTemplate := NewAnalysisLineTemplate;
    END;

    LOCAL PROCEDURE GetDimTotalingFilter@32(DimTotaling@1000 : Text[80]) : Text[1024];
    VAR
      DimTotaling2@1002 : Text[80];
      DimTotalPart@1005 : Text[80];
      ResultFilter@1003 : Text[1024];
      ResultFilter2@1006 : Text[1024];
      i@1004 : Integer;
    BEGIN
      IF DimTotaling = '' THEN
        EXIT(DimTotaling);
      DimTotaling2 := DimTotaling;
      REPEAT
        i := STRPOS(DimTotaling2,'|');
        IF i > 0 THEN BEGIN
          DimTotalPart := COPYSTR(DimTotaling2,1,i - 1);
          IF i < STRLEN(DimTotaling2) THEN
            DimTotaling2 := COPYSTR(DimTotaling2,i + 1)
          ELSE
            DimTotaling2 := '';
        END ELSE
          DimTotalPart := DimTotaling2;
        ResultFilter2 := ConvDimTotalingFilter(DimTotalPart);
        IF ResultFilter2 <> '' THEN
          IF STRLEN(ResultFilter) + STRLEN(ResultFilter2) + 1 > MAXSTRLEN(ResultFilter) THEN
            ERROR(Text021,DimTotaling)
          ELSE BEGIN
            IF ResultFilter <> '' THEN
              ResultFilter := ResultFilter + '|';
            ResultFilter := ResultFilter + ResultFilter2;
          END;
      UNTIL i <= 0;
      EXIT(ResultFilter);
    END;

    LOCAL PROCEDURE ConvDimTotalingFilter@28(DimTotaling@1001 : Text[80]) : Text[1024];
    VAR
      DimVal@1003 : Record 349;
      DimCode@1002 : Code[20];
      ResultFilter@1004 : Text[1024];
      DimValTotaling@1005 : Boolean;
    BEGIN
      IF DimTotaling = '' THEN
        EXIT(DimTotaling);

      IF DimCode = '' THEN
        EXIT(DimTotaling);

      DimVal.SETRANGE("Dimension Code",DimCode);
      DimVal.SETFILTER(Code,DimTotaling);
      IF DimVal.FIND('-') THEN
        REPEAT
          DimValTotaling :=
            DimVal."Dimension Value Type" IN
            [DimVal."Dimension Value Type"::Total,DimVal."Dimension Value Type"::"End-Total"];
          IF DimValTotaling AND (DimVal.Totaling <> '') THEN BEGIN
            IF STRLEN(ResultFilter) + STRLEN(DimVal.Totaling) + 1 > MAXSTRLEN(ResultFilter) THEN
              ERROR(Text021,DimTotaling);
            IF ResultFilter <> '' THEN
              ResultFilter := ResultFilter + '|';
            ResultFilter := ResultFilter + DimVal.Totaling;
          END;
        UNTIL (DimVal.NEXT = 0) OR NOT DimValTotaling;

      IF DimValTotaling THEN
        EXIT(ResultFilter);

      EXIT(DimTotaling);
    END;

    LOCAL PROCEDURE CalcSalesAmount@37(VAR ItemStatisticsBuf@1000 : Record 5821;Invoiced@1001 : Boolean) : Decimal;
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Source No. Filter") = '' THEN
          SETRANGE("Source Type Filter");

        IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
          IF Invoiced THEN BEGIN
            CALCFIELDS("Sales Amount (Actual)");
            EXIT("Sales Amount (Actual)");
          END;
          CALCFIELDS("Sales Amount (Expected)");
          EXIT("Sales Amount (Expected)");
        END;
        IF Invoiced THEN BEGIN
          CALCFIELDS("Analysis - Sales Amt. (Actual)");
          EXIT("Analysis - Sales Amt. (Actual)");
        END;
        CALCFIELDS("Analysis - Sales Amt. (Exp)");
        EXIT("Analysis - Sales Amt. (Exp)");
      END;
    END;

    LOCAL PROCEDURE CalcCostAmount@36(VAR ItemStatisticsBuf@1001 : Record 5821;Invoiced@1000 : Boolean) : Decimal;
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Source No. Filter") = '' THEN
          SETRANGE("Source Type Filter");

        IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
          IF Invoiced THEN BEGIN
            CALCFIELDS("Cost Amount (Actual)");
            EXIT("Cost Amount (Actual)");
          END;
          CALCFIELDS("Cost Amount (Expected)");
          EXIT("Cost Amount (Expected)");
        END;
        IF Invoiced THEN BEGIN
          CALCFIELDS("Analysis - Cost Amt. (Actual)");
          EXIT("Analysis - Cost Amt. (Actual)");
        END;
        CALCFIELDS("Analysis - Cost Amt. (Exp)");
        EXIT("Analysis - Cost Amt. (Exp)");
      END;
    END;

    LOCAL PROCEDURE CalcCostAmountNonInvnt@34(VAR ItemStatisticsBuf@1001 : Record 5821;Invoiced@1000 : Boolean) : Decimal;
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        SETRANGE("Item Ledger Entry Type Filter");
        IF GETFILTER("Source No. Filter") = '' THEN
          SETRANGE("Source Type Filter");

        IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
          IF Invoiced THEN BEGIN
            CALCFIELDS("Cost Amount (Non-Invtbl.)");
            EXIT("Cost Amount (Non-Invtbl.)");
          END;
          EXIT(0);
        END;
        IF Invoiced THEN BEGIN
          CALCFIELDS("Analysis CostAmt.(Non-Invtbl.)");
          EXIT("Analysis CostAmt.(Non-Invtbl.)");
        END;
      END;
    END;

    LOCAL PROCEDURE CalcQuantity@33(VAR ItemStatisticsBuf@1000 : Record 5821;Invoiced@1001 : Boolean) : Decimal;
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Source No. Filter") = '' THEN
          SETRANGE("Source Type Filter");

        IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
          SETRANGE("Entry Type Filter");
          IF Invoiced THEN BEGIN
            CALCFIELDS("Invoiced Quantity");
            EXIT("Invoiced Quantity");
          END;
          CALCFIELDS(Quantity);
          EXIT(Quantity);
        END;
        SETRANGE("Entry Type Filter");
        IF Invoiced THEN BEGIN
          CALCFIELDS("Analysis - Invoiced Quantity");
          EXIT("Analysis - Invoiced Quantity");
        END;
        CALCFIELDS("Analysis - Quantity");
        EXIT("Analysis - Quantity");
      END;
    END;

    LOCAL PROCEDURE CalcUnitPrice@38(VAR ItemStatisticsBuf@1000 : Record 5821) : Decimal;
    VAR
      Item@1001 : Record 27;
      SalesPriceCalcMgt@1002 : Codeunit 7000;
    BEGIN
      IF Item.GET(COPYSTR(ItemStatisticsBuf.GETFILTER("Item Filter"),1,MAXSTRLEN(Item."No."))) THEN
        EXIT(
          SalesPriceCalcMgt.FindAnalysisReportPrice(
            Item."No.",ItemStatisticsBuf.GETRANGEMIN("Date Filter")));
    END;

    LOCAL PROCEDURE CalcStdCost@39(VAR ItemStatisticsBuf@1000 : Record 5821) : Decimal;
    VAR
      Item@1001 : Record 27;
    BEGIN
      WITH Item DO
        IF GET(COPYSTR(ItemStatisticsBuf.GETFILTER("Item Filter"),1,MAXSTRLEN("No."))) THEN
          EXIT("Standard Cost");
    END;

    LOCAL PROCEDURE CalcIndirectCost@40(VAR ItemStatisticsBuf@1000 : Record 5821) : Decimal;
    VAR
      Item@1001 : Record 27;
    BEGIN
      WITH Item DO
        IF GET(COPYSTR(ItemStatisticsBuf.GETFILTER("Item Filter"),1,MAXSTRLEN("No."))) THEN
          EXIT("Indirect Cost %");
    END;

    LOCAL PROCEDURE CalcUnitCost@41(VAR ItemStatisticsBuf@1000 : Record 5821) : Decimal;
    VAR
      Item@1001 : Record 27;
    BEGIN
      WITH Item DO
        IF GET(COPYSTR(ItemStatisticsBuf.GETFILTER("Item Filter"),1,MAXSTRLEN("No."))) THEN
          EXIT("Unit Cost");
    END;

    LOCAL PROCEDURE CalcBudgetSalesAmount@55(VAR ItemStatisticsBuf@1000 : Record 5821) : Decimal;
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Source No. Filter") = '' THEN
          SETRANGE("Source Type Filter")
        ELSE
          SETRANGE("Item Ledger Entry Type Filter");

        IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
          CALCFIELDS("Budgeted Sales Amount");
          EXIT("Budgeted Sales Amount");
        END;
        CALCFIELDS("Analysis - Budgeted Sales Amt.");
        EXIT("Analysis - Budgeted Sales Amt.");
      END;
    END;

    LOCAL PROCEDURE CalcBudgetCostAmount@52(VAR ItemStatisticsBuf@1001 : Record 5821) : Decimal;
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Source No. Filter") = '' THEN
          SETRANGE("Source Type Filter");

        IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
          CALCFIELDS("Budgeted Cost Amount");
          EXIT("Budgeted Cost Amount");
        END;
        CALCFIELDS("Analysis - Budgeted Cost Amt.");
        EXIT("Analysis - Budgeted Cost Amt.");
      END;
    END;

    LOCAL PROCEDURE CalcBudgetQuantity@51(VAR ItemStatisticsBuf@1000 : Record 5821) : Decimal;
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Source No. Filter") = '' THEN
          SETRANGE("Source Type Filter");

        IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
          CALCFIELDS("Budgeted Quantity");
          EXIT("Budgeted Quantity");
        END;
        CALCFIELDS("Analysis - Budgeted Quantity");
        EXIT("Analysis - Budgeted Quantity");
      END;
    END;

    LOCAL PROCEDURE DrillDownSalesAmount@50(VAR ItemStatisticsBuf@1000 : Record 5821;Invoiced@1001 : Boolean);
    VAR
      ValueEntry@1002 : Record 5802;
      ItemAnalysisViewEntry@1003 : Record 7154;
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Source No. Filter") = '' THEN
          SETRANGE("Source Type Filter");

        IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
          FilterValueEntry(ItemStatisticsBuf,ValueEntry);
          IF Invoiced THEN
            PAGE.RUN(0,ValueEntry,ValueEntry."Sales Amount (Actual)")
          ELSE
            PAGE.RUN(0,ValueEntry,ValueEntry."Sales Amount (Expected)");
        END ELSE BEGIN
          FilterItemAnalyViewEntry(ItemStatisticsBuf,ItemAnalysisViewEntry);
          IF Invoiced THEN
            PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Sales Amount (Actual)")
          ELSE
            PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Sales Amount (Expected)");
        END;
      END;
    END;

    LOCAL PROCEDURE DrillDownCostAmount@49(VAR ItemStatisticsBuf@1001 : Record 5821;Invoiced@1000 : Boolean);
    VAR
      ValueEntry@1002 : Record 5802;
      ItemAnalysisViewEntry@1003 : Record 7154;
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Source No. Filter") = '' THEN
          SETRANGE("Source Type Filter");

        IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
          FilterValueEntry(ItemStatisticsBuf,ValueEntry);
          IF Invoiced THEN
            PAGE.RUN(0,ValueEntry,ValueEntry."Cost Amount (Actual)")
          ELSE
            PAGE.RUN(0,ValueEntry,ValueEntry."Cost Amount (Expected)");
        END ELSE BEGIN
          FilterItemAnalyViewEntry(ItemStatisticsBuf,ItemAnalysisViewEntry);
          IF Invoiced THEN
            PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Cost Amount (Actual)")
          ELSE
            PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Cost Amount (Expected)");
        END;
      END;
    END;

    LOCAL PROCEDURE DrillDownCostAmountNonInvnt@48(VAR ItemStatisticsBuf@1001 : Record 5821;Invoiced@1000 : Boolean);
    VAR
      ValueEntry@1002 : Record 5802;
      ItemAnalysisViewEntry@1003 : Record 7154;
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Source No. Filter") = '' THEN
          SETRANGE("Source Type Filter");

        IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
          FilterValueEntry(ItemStatisticsBuf,ValueEntry);
          IF Invoiced THEN
            PAGE.RUN(0,ValueEntry,ValueEntry."Cost Amount (Non-Invtbl.)");
        END ELSE BEGIN
          FilterItemAnalyViewEntry(ItemStatisticsBuf,ItemAnalysisViewEntry);
          IF Invoiced THEN
            PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Cost Amount (Non-Invtbl.)")
        END;
      END;
    END;

    LOCAL PROCEDURE DrillDownQuantity@47(VAR ItemStatisticsBuf@1000 : Record 5821;Invoiced@1001 : Boolean);
    VAR
      ValueEntry@1002 : Record 5802;
      ItemLedgEntry@1003 : Record 32;
      ItemAnalysisViewEntry@1004 : Record 7154;
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Source No. Filter") = '' THEN
          SETRANGE("Source Type Filter");

        SETRANGE("Entry Type Filter");

        IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
          IF Invoiced THEN BEGIN
            FilterValueEntry(ItemStatisticsBuf,ValueEntry);
            PAGE.RUN(0,ValueEntry,ValueEntry."Invoiced Quantity");
          END ELSE BEGIN
            FilterItemLedgEntry(ItemStatisticsBuf,ItemLedgEntry);
            PAGE.RUN(0,ItemLedgEntry,ItemLedgEntry.Quantity);
          END;
        END ELSE BEGIN
          FilterItemAnalyViewEntry(ItemStatisticsBuf,ItemAnalysisViewEntry);
          IF Invoiced THEN
            PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Invoiced Quantity")
          ELSE
            PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry.Quantity);
        END;
      END;
    END;

    LOCAL PROCEDURE DrillDownUnitPrice@46(VAR ItemStatisticsBuf@1000 : Record 5821);
    VAR
      Item@1001 : Record 27;
      SalesPrice@1002 : TEMPORARY Record 7002;
      SalesPriceCalcMgt@1003 : Codeunit 7000;
    BEGIN
      IF Item.GET(COPYSTR(ItemStatisticsBuf.GETFILTER("Item Filter"),1,MAXSTRLEN(Item."No."))) THEN BEGIN
        SalesPriceCalcMgt.FindAnalysisReportPrice(
          Item."No.",ItemStatisticsBuf.GETRANGEMIN("Date Filter"));
        SalesPriceCalcMgt.CopySalesPrice(SalesPrice);
        IF SalesPrice.FINDFIRST THEN
          PAGE.RUNMODAL(PAGE::"Get Sales Price",SalesPrice)
        ELSE BEGIN
          ItemStatisticsBuf.COPYFILTER("Item Filter",Item."No.");
          PAGE.RUNMODAL(PAGE::"Item Card",Item,Item."Unit Price");
        END;
      END;
    END;

    LOCAL PROCEDURE DrillDownStdCost@45(VAR ItemStatisticsBuf@1000 : Record 5821);
    VAR
      Item@1001 : Record 27;
    BEGIN
      WITH Item DO BEGIN
        ItemStatisticsBuf.COPYFILTER("Item Filter","No.");
        PAGE.RUNMODAL(PAGE::"Item Card",Item,"Standard Cost");
      END;
    END;

    LOCAL PROCEDURE DrillDownIndirectCost@44(VAR ItemStatisticsBuf@1000 : Record 5821);
    VAR
      Item@1001 : Record 27;
    BEGIN
      WITH Item DO BEGIN
        ItemStatisticsBuf.COPYFILTER("Item Filter","No.");
        PAGE.RUNMODAL(PAGE::"Item Card",Item,"Indirect Cost %");
      END;
    END;

    LOCAL PROCEDURE DrillDownUnitCost@43(VAR ItemStatisticsBuf@1000 : Record 5821);
    VAR
      Item@1001 : Record 27;
    BEGIN
      WITH Item DO BEGIN
        ItemStatisticsBuf.COPYFILTER("Item Filter","No.");
        PAGE.RUNMODAL(PAGE::"Item Card",Item,"Unit Cost");
      END;
    END;

    LOCAL PROCEDURE DrillDownBudgetSalesAmount@62(VAR ItemStatisticsBuf@1000 : Record 5821);
    VAR
      ItemBudgetEntry@1001 : Record 7134;
      ItemAnalysisViewBudgEntry@1002 : Record 7156;
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Source No. Filter") = '' THEN
          SETRANGE("Source Type Filter");

        IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
          FilterItemBudgetEntry(ItemStatisticsBuf,ItemBudgetEntry);
          PAGE.RUN(0,ItemBudgetEntry,ItemBudgetEntry."Sales Amount");
        END ELSE BEGIN
          FilterItemAnalyViewBudgEntry(ItemStatisticsBuf,ItemAnalysisViewBudgEntry);
          PAGE.RUN(0,ItemAnalysisViewBudgEntry,ItemAnalysisViewBudgEntry."Sales Amount");
        END;
      END;
    END;

    LOCAL PROCEDURE DrillDownBudgetCostAmount@61(VAR ItemStatisticsBuf@1001 : Record 5821);
    VAR
      ItemBudgetEntry@1000 : Record 7134;
      ItemAnalysisViewBudgEntry@1002 : Record 7156;
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Source No. Filter") = '' THEN
          SETRANGE("Source Type Filter");

        IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
          FilterItemBudgetEntry(ItemStatisticsBuf,ItemBudgetEntry);
          PAGE.RUN(0,ItemBudgetEntry,ItemBudgetEntry."Cost Amount");
        END ELSE BEGIN
          FilterItemAnalyViewBudgEntry(ItemStatisticsBuf,ItemAnalysisViewBudgEntry);
          PAGE.RUN(0,ItemAnalysisViewBudgEntry,ItemAnalysisViewBudgEntry."Cost Amount");
        END;
      END;
    END;

    LOCAL PROCEDURE DrillDownBudgetQuantity@60(VAR ItemStatisticsBuf@1000 : Record 5821);
    VAR
      ItemBudgetEntry@1001 : Record 7134;
      ItemAnalysisViewBudgEntry@1002 : Record 7156;
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Source No. Filter") = '' THEN
          SETRANGE("Source Type Filter");

        IF AnalysisLineTemplate."Item Analysis View Code" = '' THEN BEGIN
          FilterItemBudgetEntry(ItemStatisticsBuf,ItemBudgetEntry);
          PAGE.RUN(0,ItemBudgetEntry,ItemBudgetEntry.Quantity);
        END ELSE BEGIN
          FilterItemAnalyViewBudgEntry(ItemStatisticsBuf,ItemAnalysisViewBudgEntry);
          PAGE.RUN(0,ItemAnalysisViewBudgEntry,ItemAnalysisViewBudgEntry.Quantity);
        END;
      END;
    END;

    LOCAL PROCEDURE FilterValueEntry@53(VAR ItemStatisticsBuf@1000 : Record 5821;VAR ValueEntry@1001 : Record 5802);
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Item Filter") <> '' THEN
          COPYFILTER("Item Filter",ValueEntry."Item No.");

        IF GETFILTER("Date Filter") <> '' THEN
          COPYFILTER("Date Filter",ValueEntry."Posting Date");

        IF GETFILTER("Entry Type Filter") <> '' THEN
          COPYFILTER("Entry Type Filter",ValueEntry."Entry Type");

        IF GETFILTER("Item Ledger Entry Type Filter") <> '' THEN
          COPYFILTER("Item Ledger Entry Type Filter",ValueEntry."Item Ledger Entry Type");

        IF GETFILTER("Location Filter") <> '' THEN
          COPYFILTER("Location Filter",ValueEntry."Location Code");

        IF GETFILTER("Global Dimension 1 Filter") <> '' THEN
          COPYFILTER("Global Dimension 1 Filter",ValueEntry."Global Dimension 1 Code");

        IF GETFILTER("Global Dimension 2 Filter") <> '' THEN
          COPYFILTER("Global Dimension 2 Filter",ValueEntry."Global Dimension 2 Code");

        IF GETFILTER("Source Type Filter") <> '' THEN
          COPYFILTER("Source Type Filter",ValueEntry."Source Type");

        FILTERGROUP := 2;
        ValueEntry.FILTERGROUP := 2;
        IF GETFILTER("Global Dimension 1 Filter") <> '' THEN
          COPYFILTER("Global Dimension 1 Filter",ValueEntry."Global Dimension 1 Code");
        IF GETFILTER("Global Dimension 2 Filter") <> '' THEN
          COPYFILTER("Global Dimension 2 Filter",ValueEntry."Global Dimension 2 Code");
        FILTERGROUP := 0;
        ValueEntry.FILTERGROUP := 0;

        IF GETFILTER("Source No. Filter") <> '' THEN BEGIN
          ValueEntry.SETCURRENTKEY("Source Type","Source No.");
          COPYFILTER("Source No. Filter",ValueEntry."Source No.");
        END ELSE
          ValueEntry.SETCURRENTKEY("Item No.","Posting Date");
      END;
    END;

    LOCAL PROCEDURE FilterItemLedgEntry@57(VAR ItemStatisticsBuf@1001 : Record 5821;VAR ItemLedgEntry@1000 : Record 32);
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        IF GETFILTER("Item Filter") <> '' THEN
          COPYFILTER("Item Filter",ItemLedgEntry."Item No.");

        IF GETFILTER("Date Filter") <> '' THEN
          COPYFILTER("Date Filter",ItemLedgEntry."Posting Date");

        IF GETFILTER("Item Ledger Entry Type Filter") <> '' THEN
          COPYFILTER("Item Ledger Entry Type Filter",ItemLedgEntry."Entry Type");

        IF GETFILTER("Location Filter") <> '' THEN
          COPYFILTER("Location Filter",ItemLedgEntry."Location Code");

        IF GETFILTER("Global Dimension 1 Filter") <> '' THEN
          COPYFILTER("Global Dimension 1 Filter",ItemLedgEntry."Global Dimension 1 Code");

        IF GETFILTER("Global Dimension 2 Filter") <> '' THEN
          COPYFILTER("Global Dimension 2 Filter",ItemLedgEntry."Global Dimension 2 Code");

        IF GETFILTER("Source Type Filter") <> '' THEN
          COPYFILTER("Source Type Filter",ItemLedgEntry."Source Type");

        FILTERGROUP := 2;
        ItemLedgEntry.FILTERGROUP := 2;
        IF GETFILTER("Global Dimension 1 Filter") <> '' THEN
          COPYFILTER("Global Dimension 1 Filter",ItemLedgEntry."Global Dimension 1 Code");
        IF GETFILTER("Global Dimension 2 Filter") <> '' THEN
          COPYFILTER("Global Dimension 2 Filter",ItemLedgEntry."Global Dimension 2 Code");
        FILTERGROUP := 0;
        ItemLedgEntry.FILTERGROUP := 0;

        IF GETFILTER("Source No. Filter") <> '' THEN BEGIN
          ItemLedgEntry.SETCURRENTKEY("Source Type","Source No.");
          COPYFILTER("Source No. Filter",ItemLedgEntry."Source No.");
        END ELSE
          ItemLedgEntry.SETCURRENTKEY("Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
      END;
    END;

    LOCAL PROCEDURE FilterItemBudgetEntry@68(VAR ItemStatisticsBuf@1000 : Record 5821;VAR ItemBudgetEntry@1001 : Record 7134);
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        COPYFILTER("Analysis Area Filter",ItemBudgetEntry."Analysis Area");
        COPYFILTER("Budget Filter",ItemBudgetEntry."Budget Name");

        IF GETFILTER("Item Filter") <> '' THEN
          COPYFILTER("Item Filter",ItemBudgetEntry."Item No.");

        IF GETFILTER("Date Filter") <> '' THEN
          COPYFILTER("Date Filter",ItemBudgetEntry.Date);

        IF GETFILTER("Global Dimension 1 Filter") <> '' THEN
          COPYFILTER("Global Dimension 1 Filter",ItemBudgetEntry."Global Dimension 1 Code");

        IF GETFILTER("Global Dimension 2 Filter") <> '' THEN
          COPYFILTER("Global Dimension 2 Filter",ItemBudgetEntry."Global Dimension 2 Code");

        IF GETFILTER("Source Type Filter") <> '' THEN
          COPYFILTER("Source Type Filter",ItemBudgetEntry."Source Type");

        FILTERGROUP := 2;
        ItemBudgetEntry.FILTERGROUP := 2;
        IF GETFILTER("Global Dimension 1 Filter") <> '' THEN
          COPYFILTER("Global Dimension 1 Filter",ItemBudgetEntry."Global Dimension 1 Code");
        IF GETFILTER("Global Dimension 2 Filter") <> '' THEN
          COPYFILTER("Global Dimension 2 Filter",ItemBudgetEntry."Global Dimension 2 Code");
        FILTERGROUP := 0;
        ItemBudgetEntry.FILTERGROUP := 0;

        IF GETFILTER("Source No. Filter") <> '' THEN BEGIN
          ItemBudgetEntry.SETCURRENTKEY("Analysis Area","Budget Name","Source Type","Source No.");
          COPYFILTER("Source No. Filter",ItemBudgetEntry."Source No.");
        END ELSE
          ItemBudgetEntry.SETCURRENTKEY("Analysis Area","Budget Name","Item No.");
      END;
    END;

    LOCAL PROCEDURE FilterItemAnalyViewEntry@75(VAR ItemStatisticsBuf@1000 : Record 5821;VAR ItemAnalysisViewEntry@1001 : Record 7154);
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        COPYFILTER("Analysis Area Filter",ItemAnalysisViewEntry."Analysis Area");
        COPYFILTER("Analysis View Filter",ItemAnalysisViewEntry."Analysis View Code");

        IF GETFILTER("Item Filter") <> '' THEN
          COPYFILTER("Item Filter",ItemAnalysisViewEntry."Item No.");

        IF GETFILTER("Date Filter") <> '' THEN
          COPYFILTER("Date Filter",ItemAnalysisViewEntry."Posting Date");

        IF GETFILTER("Entry Type Filter") <> '' THEN
          COPYFILTER("Entry Type Filter",ItemAnalysisViewEntry."Entry Type");

        IF GETFILTER("Item Ledger Entry Type Filter") <> '' THEN
          COPYFILTER("Item Ledger Entry Type Filter",ItemAnalysisViewEntry."Item Ledger Entry Type");

        IF GETFILTER("Location Filter") <> '' THEN
          COPYFILTER("Location Filter",ItemAnalysisViewEntry."Location Code");

        IF GETFILTER("Dimension 1 Filter") <> '' THEN
          COPYFILTER("Dimension 1 Filter",ItemAnalysisViewEntry."Dimension 1 Value Code");

        IF GETFILTER("Dimension 2 Filter") <> '' THEN
          COPYFILTER("Dimension 2 Filter",ItemAnalysisViewEntry."Dimension 2 Value Code");

        IF GETFILTER("Dimension 3 Filter") <> '' THEN
          COPYFILTER("Dimension 3 Filter",ItemAnalysisViewEntry."Dimension 3 Value Code");

        IF GETFILTER("Source Type Filter") <> '' THEN
          COPYFILTER("Source Type Filter",ItemAnalysisViewEntry."Source Type");

        IF GETFILTER("Source No. Filter") <> '' THEN
          COPYFILTER("Source No. Filter",ItemAnalysisViewEntry."Source No.");

        FILTERGROUP := 2;
        ItemAnalysisViewEntry.FILTERGROUP := 2;
        IF GETFILTER("Dimension 1 Filter") <> '' THEN
          COPYFILTER("Dimension 1 Filter",ItemAnalysisViewEntry."Dimension 1 Value Code");
        IF GETFILTER("Dimension 2 Filter") <> '' THEN
          COPYFILTER("Dimension 2 Filter",ItemAnalysisViewEntry."Dimension 2 Value Code");
        IF GETFILTER("Dimension 3 Filter") <> '' THEN
          COPYFILTER("Dimension 3 Filter",ItemAnalysisViewEntry."Dimension 3 Value Code");
        FILTERGROUP := 0;
        ItemAnalysisViewEntry.FILTERGROUP := 0;
      END;
    END;

    LOCAL PROCEDURE FilterItemAnalyViewBudgEntry@73(VAR ItemStatisticsBuf@1000 : Record 5821;VAR ItemAnalysisViewBudgEntry@1001 : Record 7156);
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        COPYFILTER("Analysis Area Filter",ItemAnalysisViewBudgEntry."Analysis Area");
        COPYFILTER("Analysis View Filter",ItemAnalysisViewBudgEntry."Analysis View Code");
        COPYFILTER("Budget Filter",ItemAnalysisViewBudgEntry."Budget Name");

        IF GETFILTER("Item Filter") <> '' THEN
          COPYFILTER("Item Filter",ItemAnalysisViewBudgEntry."Item No.");

        IF GETFILTER("Date Filter") <> '' THEN
          COPYFILTER("Date Filter",ItemAnalysisViewBudgEntry."Posting Date");

        IF GETFILTER("Dimension 1 Filter") <> '' THEN
          COPYFILTER("Dimension 1 Filter",ItemAnalysisViewBudgEntry."Dimension 1 Value Code");

        IF GETFILTER("Dimension 2 Filter") <> '' THEN
          COPYFILTER("Dimension 2 Filter",ItemAnalysisViewBudgEntry."Dimension 2 Value Code");

        IF GETFILTER("Dimension 3 Filter") <> '' THEN
          COPYFILTER("Dimension 3 Filter",ItemAnalysisViewBudgEntry."Dimension 3 Value Code");

        IF GETFILTER("Source Type Filter") <> '' THEN
          COPYFILTER("Source Type Filter",ItemAnalysisViewBudgEntry."Source Type");

        IF GETFILTER("Source No. Filter") <> '' THEN
          COPYFILTER("Source No. Filter",ItemAnalysisViewBudgEntry."Source No.");

        FILTERGROUP := 2;
        ItemAnalysisViewBudgEntry.FILTERGROUP := 2;
        IF GETFILTER("Dimension 1 Filter") <> '' THEN
          COPYFILTER("Dimension 1 Filter",ItemAnalysisViewBudgEntry."Dimension 1 Value Code");
        IF GETFILTER("Dimension 2 Filter") <> '' THEN
          COPYFILTER("Dimension 2 Filter",ItemAnalysisViewBudgEntry."Dimension 2 Value Code");
        IF GETFILTER("Dimension 3 Filter") <> '' THEN
          COPYFILTER("Dimension 3 Filter",ItemAnalysisViewBudgEntry."Dimension 3 Value Code");
        FILTERGROUP := 0;
        ItemAnalysisViewBudgEntry.FILTERGROUP := 0;
      END;
    END;

    LOCAL PROCEDURE SetGroupDimFilter@64(VAR ItemStatisticsBuf@1004 : Record 5821;GroupDimCode@1000 : Code[20];DimValueFilter@1001 : Text[250]);
    VAR
      ItemAnalysisView@1002 : Record 7152;
    BEGIN
      IF AnalysisLineTemplate."Item Analysis View Code" <> '' THEN BEGIN
        ItemAnalysisView.GET(AnalysisLineTemplate."Analysis Area",AnalysisLineTemplate."Item Analysis View Code");
        CASE GroupDimCode OF
          '':
            EXIT;
          ItemAnalysisView."Dimension 1 Code":
            ItemStatisticsBuf.SETFILTER("Dimension 1 Filter",DimValueFilter);
          ItemAnalysisView."Dimension 2 Code":
            ItemStatisticsBuf.SETFILTER("Dimension 2 Filter",DimValueFilter);
          ItemAnalysisView."Dimension 3 Code":
            ItemStatisticsBuf.SETFILTER("Dimension 3 Filter",DimValueFilter);
          ELSE
            ERROR(Text022,
              AnalysisLineTemplate.FIELDCAPTION("Item Analysis View Code"),
              AnalysisLineTemplate.TABLECAPTION,
              AnalysisLineTemplate."Analysis Area",
              AnalysisLineTemplate.Name,
              GroupDimCode);
        END;
      END ELSE BEGIN
        GLSetup.GET;
        CASE GroupDimCode OF
          '':
            EXIT;
          GLSetup."Global Dimension 1 Code":
            ItemStatisticsBuf.SETFILTER("Global Dimension 1 Filter",DimValueFilter);
          GLSetup."Global Dimension 2 Code":
            ItemStatisticsBuf.SETFILTER("Global Dimension 2 Filter",DimValueFilter);
          ELSE
            ERROR(Text022,
              AnalysisLineTemplate.FIELDCAPTION("Item Analysis View Code"),
              AnalysisLineTemplate.TABLECAPTION,
              AnalysisLineTemplate."Analysis Area",
              AnalysisLineTemplate.Name,
              GroupDimCode);
        END;
      END;
    END;

    LOCAL PROCEDURE FilterToValue@70(VAR AnalysisLine@1000 : Record 7114) : Integer;
    VAR
      AnalysisLine2@1001 : Record 7114;
    BEGIN
      WITH AnalysisLine2 DO
        FOR "Source Type Filter" := "Source Type Filter"::" " TO "Source Type Filter"::Item DO
          IF AnalysisLine.GETFILTER("Source Type Filter") = FORMAT("Source Type Filter") THEN
            EXIT("Source Type Filter");
    END;

    LOCAL PROCEDURE GetSalesSetup@25();
    BEGIN
      IF SalesSetupRead THEN
        EXIT;
      SalesSetup.GET;
      SalesSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetInventorySetup@42();
    BEGIN
      IF InventorySetupRead THEN
        EXIT;
      InventorySetup.GET;
      InventorySetupRead := TRUE;
    END;

    PROCEDURE SetExpression@23(Expression@1000 : Text[250]);
    BEGIN
      TryExpression := Expression;
    END;

    LOCAL PROCEDURE IsValidAnalysisExpression@12(VAR AnalysisLine@1000 : Record 7114;Expression@1001 : Text[250]) : Boolean;
    VAR
      AnalysisReportMgt@1002 : Codeunit 7110;
    BEGIN
      AnalysisReportMgt.SetExpression(Expression);
      IF AnalysisReportMgt.RUN(AnalysisLine) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE ValidateFilter@71(VAR Filter@1000 : Text[250];RecNo@1001 : Integer;FieldNumber@1002 : Integer;ConvertToNumbers@1003 : Boolean);
    VAR
      AnalysisColumn@1004 : Record 7118;
      AnalysisType@1006 : Record 7113;
      ItemStatisticsBuffer@1005 : Record 5821;
    BEGIN
      CASE RecNo OF
        DATABASE::"Analysis Column":
          CASE FieldNumber OF
            AnalysisColumn.FIELDNO("Item Ledger Entry Type Filter"):
              BEGIN
                ItemStatisticsBuffer.SETFILTER("Item Ledger Entry Type Filter",Filter);
                Filter := ItemStatisticsBuffer.GETFILTER("Item Ledger Entry Type Filter");
              END;
            AnalysisColumn.FIELDNO("Value Entry Type Filter"):
              BEGIN
                ItemStatisticsBuffer.SETFILTER("Entry Type Filter",Filter);
                Filter := ItemStatisticsBuffer.GETFILTER("Entry Type Filter");
              END;
          END;
        DATABASE::"Analysis Type":
          CASE FieldNumber OF
            AnalysisType.FIELDNO("Item Ledger Entry Type Filter"):
              BEGIN
                ItemStatisticsBuffer.SETFILTER("Item Ledger Entry Type Filter",Filter);
                Filter := ItemStatisticsBuffer.GETFILTER("Item Ledger Entry Type Filter");
              END;
            AnalysisType.FIELDNO("Value Entry Type Filter"):
              BEGIN
                ItemStatisticsBuffer.SETFILTER("Entry Type Filter",Filter);
                Filter := ItemStatisticsBuffer.GETFILTER("Entry Type Filter");
              END;
          END;
      END;

      IF ConvertToNumbers THEN
        ConvertOptionNameToNo(Filter,RecNo,FieldNumber);
    END;

    LOCAL PROCEDURE ConvertOptionNameToNo@19(VAR Filter@1000 : Text[250];RecNo@1001 : Integer;FieldNumber@1008 : Integer);
    VAR
      AnalysisColumn@1009 : Record 7118;
      AnalysisType@1010 : Record 7113;
      ItemStatisticsBuffer@1011 : Record 5821;
      VarInteger@1003 : Integer;
      OptionNo@1002 : Integer;
      OptionName@1004 : Text[30];
    BEGIN
      WHILE TRUE DO BEGIN
        CASE RecNo OF
          DATABASE::"Analysis Column":
            CASE FieldNumber OF
              AnalysisColumn.FIELDNO("Item Ledger Entry Type Filter"):
                BEGIN
                  ItemStatisticsBuffer."Item Ledger Entry Type Filter" := OptionNo;
                  OptionName := FORMAT(ItemStatisticsBuffer."Item Ledger Entry Type Filter");
                END;
              AnalysisColumn.FIELDNO("Value Entry Type Filter"):
                BEGIN
                  ItemStatisticsBuffer."Entry Type Filter" := OptionNo;
                  OptionName := FORMAT(ItemStatisticsBuffer."Entry Type Filter");
                END;
            END;
          DATABASE::"Analysis Type":
            CASE FieldNumber OF
              AnalysisType.FIELDNO("Item Ledger Entry Type Filter"):
                BEGIN
                  ItemStatisticsBuffer."Item Ledger Entry Type Filter" := OptionNo;
                  OptionName := FORMAT(ItemStatisticsBuffer."Item Ledger Entry Type Filter");
                END;
              AnalysisType.FIELDNO("Value Entry Type Filter"):
                BEGIN
                  ItemStatisticsBuffer."Entry Type Filter" := OptionNo;
                  OptionName := FORMAT(ItemStatisticsBuffer."Entry Type Filter");
                END;
            END;
        END;

        IF EVALUATE(VarInteger,OptionName) THEN
          IF VarInteger = OptionNo THEN
            EXIT;

        FindAndReplace(Filter,OptionName,FORMAT(OptionNo));
        OptionNo += 1;
      END;
    END;

    LOCAL PROCEDURE FindAndReplace@58(VAR Filter@1000 : Text[250];FindWhat@1001 : Text[30];ReplaceWith@1002 : Text[30]);
    VAR
      Position@1003 : Integer;
    BEGIN
      WHILE TRUE DO BEGIN
        Position := STRPOS(Filter,FindWhat);
        IF Position = 0 THEN
          EXIT;
        Filter := INSSTR(DELSTR(Filter,Position,STRLEN(FindWhat)),ReplaceWith,Position);
      END;
    END;

    LOCAL PROCEDURE GetSourceNoFilter@80(VAR ItemStatisticsBuf@1001 : Record 5821;VAR AnalysisLine@1002 : Record 7114) : Text[30];
    BEGIN
      CASE FilterToValue(AnalysisLine) OF
        AnalysisLine."Source Type Filter"::Item:
          EXIT(DELCHR(STRSUBSTNO('%1&%2',
                ItemStatisticsBuf.GETFILTER("Item Filter"),AnalysisLine.GETFILTER("Source No. Filter")),'<>','&'));
        ELSE
          EXIT(DELCHR(STRSUBSTNO('%1&%2',
                ItemStatisticsBuf.GETFILTER("Source No. Filter"),AnalysisLine.GETFILTER("Source No. Filter")),'<>','&'));
      END;
    END;

    LOCAL PROCEDURE CalcFieldError@74(RowNo@1000 : Integer;ColumnNo@1001 : Integer) ErrorText : Text;
    VAR
      AllErrorType@1003 : Boolean;
    BEGIN
      AnalysisFieldValue.SETRANGE("Row Ref. No.",RowNo);
      AnalysisFieldValue.SETRANGE("Column No.",ColumnNo);
      IF AnalysisFieldValue.FINDFIRST THEN BEGIN
        AllErrorType :=
          AnalysisFieldValue."Has Error" AND
          AnalysisFieldValue."Period Error" AND
          AnalysisFieldValue."Formula Error" AND
          AnalysisFieldValue."Cyclic Error";
        IF AllErrorType THEN
          EXIT(FORMAT(ShowError::All));
        IF AnalysisFieldValue."Has Error" THEN
          ErrorText := FORMAT(ShowError::"Division by Zero") + SeparatorTok;
        IF AnalysisFieldValue."Period Error" THEN
          ErrorText := FORMAT(ShowError::"Period Error") + SeparatorTok;
        IF AnalysisFieldValue."Formula Error" THEN
          ErrorText := FORMAT(ShowError::"Invalid Formula") + SeparatorTok;
        IF AnalysisFieldValue."Cyclic Error" THEN
          ErrorText := FORMAT(ShowError::"Cyclic Formula") + SeparatorTok;
        ErrorText := DELCHR(ErrorText,'>',SeparatorTok);
      END;

      AnalysisFieldValue.SETRANGE("Row Ref. No.");
      AnalysisFieldValue.SETRANGE("Column No.");
    END;

    BEGIN
    END.
  }
}

