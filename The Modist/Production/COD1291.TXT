OBJECT Codeunit 1291 DotNet Exception Handler
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      OuterException@1000 : DotNet "'mscorlib'.System.Exception";

    PROCEDURE Catch@3(VAR Exception@1002 : DotNet "'mscorlib'.System.Exception";Type@1007 : DotNet "'mscorlib'.System.Type");
    BEGIN
      Collect;
      IF NOT CastToType(Exception,Type) THEN
        Rethrow;
    END;

    PROCEDURE Collect@1();
    BEGIN
      OuterException := GETLASTERROROBJECT;
    END;

    LOCAL PROCEDURE IsCollected@10() : Boolean;
    BEGIN
      EXIT(NOT ISNULL(OuterException));
    END;

    PROCEDURE TryCastToType@5(Type@1000 : DotNet "'mscorlib'.System.Type") : Boolean;
    VAR
      Exception@1001 : DotNet "'mscorlib'.System.FormatException";
    BEGIN
      EXIT(CastToType(Exception,Type));
    END;

    PROCEDURE CastToType@2(VAR Exception@1002 : DotNet "'mscorlib'.System.Exception";Type@1007 : DotNet "'mscorlib'.System.Type") : Boolean;
    BEGIN
      IF NOT IsCollected THEN
        EXIT(FALSE);

      Exception := OuterException.GetBaseException;
      IF ISNULL(Exception) THEN
        EXIT(FALSE);

      IF Type.Equals(Exception.GetType) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetMessage@6() : Text;
    VAR
      Exception@1000 : DotNet "'mscorlib'.System.Exception";
    BEGIN
      IF NOT IsCollected THEN
        EXIT;

      Exception := OuterException.GetBaseException;
      IF ISNULL(Exception) THEN
        EXIT;

      EXIT(Exception.Message);
    END;

    PROCEDURE Rethrow@4();
    VAR
      RootCauseMessage@1000 : Text;
    BEGIN
      RootCauseMessage := GetMessage;

      IF RootCauseMessage <> '' THEN
        ERROR(RootCauseMessage);

      IF ISNULL(OuterException.InnerException) THEN
        ERROR(OuterException.Message);

      ERROR(OuterException.InnerException.Message);
    END;

    BEGIN
    END.
  }
}

