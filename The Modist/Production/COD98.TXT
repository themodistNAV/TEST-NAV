OBJECT Codeunit 98 Purchase Post via Job Queue
{
  OBJECT-PROPERTIES
  {
    Date=23/09/13;
    Time=12:00:00 PM;
    Version List=NAVW17.10;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=VAR
            PurchHeader@1000 : Record 38;
            PurchPostPrint@1002 : Codeunit 92;
            RecRef@1001 : RecordRef;
          BEGIN
            TESTFIELD("Record ID to Process");
            RecRef.GET("Record ID to Process");
            RecRef.SETTABLE(PurchHeader);
            PurchHeader.FIND;
            SetJobQueueStatus(PurchHeader,PurchHeader."Job Queue Status"::Posting);
            IF NOT CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchHeader) THEN BEGIN
              SetJobQueueStatus(PurchHeader,PurchHeader."Job Queue Status"::Error);
              ERROR(GETLASTERRORTEXT);
            END;
            IF PurchHeader."Print Posted Documents" THEN
              PurchPostPrint.GetReport(PurchHeader);
            SetJobQueueStatus(PurchHeader,PurchHeader."Job Queue Status"::" ");
          END;

  }
  CODE
  {
    VAR
      PostDescription@1000 : TextConst '@@@="%1 = document type, %2 = document number. Example: Post Purchase Order 1234.";ENU=Post Purchase %1 %2.;ENG=Post Purchase %1 %2.';
      PostAndPrintDescription@1002 : TextConst '@@@="%1 = document type, %2 = document number. Example: Post Purchase Order 1234.";ENU=Post and Print Purchase %1 %2.;ENG=Post and Print Purchase %1 %2.';
      Confirmation@1001 : TextConst '@@@="%1=document type, %2=number, e.g. Order 123  or Invoice 234.";ENU=%1 %2 has been scheduled for posting.;ENG=%1 %2 has been scheduled for posting.';
      WrongJobQueueStatus@1003 : TextConst '@@@="%1 = document type, %2 = document number. Example: Purchase Order 1234 or Invoice 1234.";ENU=%1 %2 cannot be posted because it has already been scheduled for posting. Choose the Remove from Job Queue action to reset the job queue status and then post again.;ENG=%1 %2 cannot be posted because it has already been scheduled for posting. Choose the Remove from Job Queue action to reset the job queue status and then post again.';

    LOCAL PROCEDURE SetJobQueueStatus@5(VAR PurchHeader@1001 : Record 38;NewStatus@1000 : Option);
    BEGIN
      PurchHeader.LOCKTABLE;
      IF PurchHeader.FIND THEN BEGIN
        PurchHeader."Job Queue Status" := NewStatus;
        PurchHeader.MODIFY;
        COMMIT;
      END;
    END;

    PROCEDURE EnqueuePurchDoc@1(VAR PurchHeader@1000 : Record 38);
    VAR
      PurchSetup@1003 : Record 312;
      JobQueueEntry@1002 : Record 472;
      RecRef@1001 : RecordRef;
      TempInvoice@1004 : Boolean;
      TempRcpt@1005 : Boolean;
      TempShip@1006 : Boolean;
    BEGIN
      PurchSetup.GET;
      WITH PurchHeader DO BEGIN
        IF NOT ("Job Queue Status" IN ["Job Queue Status"::" ","Job Queue Status"::Error]) THEN
          ERROR(WrongJobQueueStatus,"Document Type","No.");
        TempInvoice := Invoice;
        TempRcpt := Receive;
        TempShip := Ship;
        IF Status = Status::Open THEN
          CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);
        Invoice := TempInvoice;
        Receive := TempRcpt;
        Ship := TempShip;
        "Job Queue Status" := "Job Queue Status"::"Scheduled for Posting";
        "Job Queue Entry ID" := CREATEGUID;
        MODIFY;
        RecRef.GETTABLE(PurchHeader);
        JobQueueEntry.ID := "Job Queue Entry ID";
        JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
        JobQueueEntry."Object ID to Run" := CODEUNIT::"Purchase Post via Job Queue";
        JobQueueEntry."Record ID to Process" := RecRef.RECORDID;
        JobQueueEntry."Job Queue Category Code" := PurchSetup."Job Queue Category Code";
        // Set Timeout to prevent the Job Queue from hanging (eg. as a result of a printer dialog).
        JobQueueEntry."Timeout (sec.)" := 7200;
        JobQueueEntry."Run in User Session" := TRUE;
        IF "Print Posted Documents" THEN BEGIN
          JobQueueEntry.Priority := PurchSetup."Job Q. Prio. for Post & Print";
          JobQueueEntry.Description :=
            COPYSTR(STRSUBSTNO(PostAndPrintDescription,"Document Type","No."),1,MAXSTRLEN(JobQueueEntry.Description));
        END ELSE BEGIN
          JobQueueEntry.Priority := PurchSetup."Job Queue Priority for Post";
          JobQueueEntry.Description :=
            COPYSTR(STRSUBSTNO(PostDescription,"Document Type","No."),1,MAXSTRLEN(JobQueueEntry.Description));
        END;
        JobQueueEntry."Notify On Success" := PurchSetup."Notify On Success";
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
        MESSAGE(Confirmation,"Document Type","No.");
      END;
    END;

    PROCEDURE CancelQueueEntry@2(VAR PurchHeader@1000 : Record 38);
    VAR
      JobQueueEntry@1002 : Record 472;
      RecRef@1001 : RecordRef;
    BEGIN
      WITH PurchHeader DO BEGIN
        IF "Job Queue Status" = "Job Queue Status"::" " THEN
          EXIT;
        RecRef.GETTABLE(PurchHeader);
        IF NOT ISNULLGUID("Job Queue Entry ID") THEN
          JobQueueEntry.SETRANGE(ID,"Job Queue Entry ID");
        JobQueueEntry.SETRANGE("Record ID to Process",RecRef.RECORDID);
        IF NOT JobQueueEntry.ISEMPTY THEN
          JobQueueEntry.DELETEALL;
        "Job Queue Status" := "Job Queue Status"::" ";
        MODIFY;
      END;
    END;

    BEGIN
    END.
  }
}

