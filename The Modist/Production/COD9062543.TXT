OBJECT Codeunit 9062543 Quick Report Interaction
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      QuickReportHeader@1000000002 : Record 9062697;
      QuickReportData@1000000000 : TEMPORARY Record 9062699;
      EnablementUserManagement@1000000012 : Codeunit 9062255;
      EnhancedPermissionsMgt@1000000014 : Codeunit 9062277;
      FileSystem@1000000009 : Codeunit 9062264;
      QuickReportOperations@1000000004 : Codeunit 9062537;
      QuickReportToolkit@1000000013 : Codeunit 9062538;
      String@1000000010 : Codeunit 9062236;
      TnpToolkit@1000000003 : Codeunit 9062230;
      eHTMLFail@1000000005 : TextConst 'ENU=No Quick Report data was found to export to HTML;ENG=No Quick Report data was found to export to HTML';
      eQRHeaderNotFound@1000000006 : TextConst 'ENU=The Quick Report "%1" could not be found;ENG=The Quick Report "%1" could not be found';
      tExportQuickReport@1000000007 : TextConst 'ENU=Export Quick Report;ENG=Export Quick Report';
      tExportFilterHTML@1000000008 : TextConst 'ENU=HTML Files (*.HTML)|*.html;ENG=HTML Files (*.HTML)|*.html';
      QuickReportPrintout@1000000001 : Report 9062326;
      tUnknownExportFormat@1000000011 : TextConst 'ENU=Unknown export format: %1.;ENG=Unknown export format: %1.';

    PROCEDURE "--- List ---"@1000000017();
    BEGIN
    END;

    PROCEDURE ListNew@1000000019();
    VAR
      lQuickReportHeader@1000000000 : Record 9062697;
    BEGIN
      //DOC NA2015.7 - List -> New

      QuickReportOperations.NewQuickReport(USERID, TRUE, lQuickReportHeader);
      lQuickReportHeader.SETRECFILTER();
      PAGE.RUN(PAGE::"Quick Report Card", lQuickReportHeader);
    END;

    PROCEDURE ListEdit@1000000018(pQuickReportHeader@1000000000 : Record 9062697);
    VAR
      lQuickReportHeader@1000000001 : Record 9062697;
      lQuickReportCard@1000000002 : Page 9063006;
    BEGIN
      //DOC NA2015.7 - List -> Edit
      //  -> pQuickReportHeader: The quick report header

      EnhancedPermissionsMgt.CheckQuickReportModifyPermission(pQuickReportHeader, USERID());

      QuickReportOperations.OpenQuickReport(USERID, TRUE, pQuickReportHeader, lQuickReportHeader);
      lQuickReportHeader.SETRECFILTER();

      lQuickReportCard.SETRECORD(lQuickReportHeader);
      lQuickReportCard.SETTABLEVIEW(lQuickReportHeader);
      lQuickReportCard.SetDeleteRecordOnClose(TRUE);
      lQuickReportCard.RUN();
    END;

    PROCEDURE ListDelete@1000000025(pQuickReportHeader@1000000000 : Record 9062697) : Boolean;
    VAR
      eConfirmation@1000000001 : TextConst 'ENU=Do you want to delete "%1" quick report?;ENG=Do you want to delete "%1" quick report?';
      lConfirmationText@1000000002 : Text;
    BEGIN
      //DOC NA2015.7 - List -> Delete
      //  -> pQuickReportHeader: The quick report header
      //  <- TRUE = Deleted, FALSE = Not

      EnhancedPermissionsMgt.CheckQuickReportModifyPermission(pQuickReportHeader, USERID());

      lConfirmationText := TnpToolkit.IIFText(pQuickReportHeader.Name <> '', pQuickReportHeader.Name, pQuickReportHeader.Code);
      IF ( NOT (CONFIRM(eConfirmation, TRUE, lConfirmationText))) THEN
        EXIT(FALSE);

      pQuickReportHeader.DELETE(TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE ListShow@1000000020(pQuickReportHeader@1000000000 : Record 9062697);
    BEGIN
      //DOC NA2015.7 - List -> Show
      //  -> pQuickReportHeader: The quick report header

      Show(pQuickReportHeader, TRUE);
    END;

    PROCEDURE "--- Card ---"@1000000022();
    BEGIN
    END;

    PROCEDURE CardNew@1000000027(VAR pQuickReportHeader@1000000000 : Record 9062697) : Boolean;
    VAR
      eConfirmation@1000000001 : TextConst 'ENU=Do you want to clear the current report?;ENG=Do you want to clear the current report?';
    BEGIN
      //DOC NA2015.7 - Card -> New
      //  <> pUserQuickReportHeader: Quick report header (target)
      //  <- TRUE = Cleared, FALSE = Cancelled

      IF ( NOT (CONFIRM(eConfirmation, TRUE))) THEN
        EXIT(FALSE);

      QuickReportOperations.ClearQuickReport(pQuickReportHeader);

      EXIT(TRUE);
    END;

    PROCEDURE CardEdit@1000000015(VAR pQuickReportHeader@1000000000 : Record 9062697) : Boolean;
    VAR
      lQuickReportHeader@1000000001 : Record 9062697;
      lCriteria@1000000003 : Record 9062626;
      lCriteriaId@1000000004 : Integer;
    BEGIN
      //DOC NA2015.7 - Card -> Edit
      //  <> pQuickReportHeader: Quick report header (target)
      //  <- TRUE = Loaded, FALSE = Cancelled

      EnhancedPermissionsMgt.CheckQuickReportModifyPermission(pQuickReportHeader, USERID());

      lQuickReportHeader.RESET();
      lQuickReportHeader.SETCURRENTKEY("Temporary", Blocked, Sequence);
      lQuickReportHeader.SETRANGE(Blocked, FALSE);
      lQuickReportHeader.SETRANGE("Temporary", FALSE);
      IF (PAGE.RUNMODAL(0, lQuickReportHeader) <> ACTION::LookupOK) THEN
        EXIT(FALSE);

      QuickReportOperations.CopyQuickReport(lQuickReportHeader, pQuickReportHeader, TRUE);

      EXIT(TRUE);
    END;

    PROCEDURE CardSave@1000000023(VAR pQuickReportHeader@1000000000 : Record 9062697) : Boolean;
    VAR
      lQuickReportHeader@1000000002 : Record 9062697;
      lResult@1000000001 : Boolean;
      eOverwrite@1000000003 : TextConst 'ENU=Do you want to overwrite "%1" report?;ENG=Do you want to overwrite "%1" report?';
      lText@1000000004 : Text;
    BEGIN
      //DOC NA2015.7 - Card -> Save
      //  <> pQuickReportHeader: Quick report header
      //  <- TRUE = Saved, FALSE = Cancelled

      EnhancedPermissionsMgt.CheckQuickReportModifyPermission(pQuickReportHeader, USERID());

      IF (pQuickReportHeader."Copied From" <> '') THEN
      BEGIN
        lQuickReportHeader.GET(pQuickReportHeader."Copied From");
        lText := TnpToolkit.IIFText(lQuickReportHeader.Name <> '', lQuickReportHeader.Name, lQuickReportHeader.Code);
        lResult := CONFIRM(eOverwrite, TRUE, lText);
        IF (lResult) THEN
          QuickReportOperations.CopyQuickReport(pQuickReportHeader, lQuickReportHeader, FALSE);
      END
      ELSE
        lResult := CardSaveAs(pQuickReportHeader);

      EXIT(lResult);
    END;

    PROCEDURE CardSaveAs@1000000016(VAR pQuickReportHeader@1000000000 : Record 9062697) : Boolean;
    VAR
      lQuickReportHeader@1000000003 : Record 9062697;
      lQuickReportSaveAs@1000000008 : TEMPORARY Record 9062700;
      lSaveQuickReport@1000000004 : Report 9062320;
      lError@1000000001 : Boolean;
      lSaving@1000000002 : Boolean;
      lSave@1000000005 : Boolean;
      eEmpty@1000000006 : TextConst 'ENU=Empty "%1".;ENG=Empty "%1".';
      eExistsAlready@1000000007 : TextConst 'ENU="Report with code ""%1"" exists already; please choose another code.";ENG="Report with code ""%1"" exists already; please choose another code."';
      eOverwrite@1000000009 : TextConst 'ENU=Do you want to overwrite report "%1"?;ENG=Do you want to overwrite report "%1"?';
    BEGIN
      //DOC NA2015.7 - Card -> Save As
      //  <> pQuickReportHeader: Quick report header
      //  <- TRUE = Saved, FALSE = Cancelled

      EnhancedPermissionsMgt.CheckQuickReportModifyPermission(pQuickReportHeader, USERID());

      lQuickReportSaveAs.Code := pQuickReportHeader."Copied From";
      lQuickReportSaveAs.Name := pQuickReportHeader.Name;
      lQuickReportSaveAs.Description := pQuickReportHeader.Description;
      lQuickReportSaveAs."My Report" := (pQuickReportHeader."User ID" = USERID);

      lSaving := TRUE;
      WHILE (lSaving) DO
      BEGIN
        CLEAR(lSaveQuickReport);
        lSaveQuickReport.Set(lQuickReportSaveAs);
        lSaveQuickReport.RUNMODAL();
        IF (lSaveQuickReport.OK) THEN
        BEGIN
          lSaveQuickReport.Get(lQuickReportSaveAs);
          lError := FALSE;
          IF ( NOT (lError)) THEN
            IF (lQuickReportSaveAs.Code = '') THEN
            BEGIN
              MESSAGE(eEmpty, lQuickReportSaveAs.FIELDCAPTION(Code));
              lError := TRUE;
            END;
          IF ( NOT (lError)) THEN
            IF ((lQuickReportSaveAs.Code <> pQuickReportHeader."Copied From") AND
                (lQuickReportHeader.GET(lQuickReportSaveAs.Code))) THEN
            BEGIN
              MESSAGE(eExistsAlready, lQuickReportSaveAs.Code);
              lError := TRUE;
            END;
          IF ( NOT (lError)) THEN
            IF (pQuickReportHeader."Copied From" = lQuickReportSaveAs.Code) THEN
              lError := ( NOT (CONFIRM(eOverwrite, FALSE, lQuickReportSaveAs.Code)));
          IF ( NOT (lError)) THEN
          BEGIN
            lSaving := FALSE;
            lSave := TRUE;
          END;
        END
        ELSE
        BEGIN
          lSaving := FALSE;
          lSave := FALSE;
        END;
      END;

      IF (lSave) THEN
      BEGIN
        IF ( NOT (lQuickReportHeader.GET(lQuickReportSaveAs.Code))) THEN
        BEGIN
          lQuickReportHeader.INIT();
          lQuickReportHeader.VALIDATE(Code, lQuickReportSaveAs.Code);
          lQuickReportHeader.INSERT(TRUE);
        END;
        QuickReportOperations.CopyQuickReport(pQuickReportHeader, lQuickReportHeader, FALSE);
        lQuickReportHeader.VALIDATE(Name, lQuickReportSaveAs.Name);
        lQuickReportHeader.VALIDATE(Description, lQuickReportSaveAs.Description);
        IF (lQuickReportSaveAs."My Report") THEN
          lQuickReportHeader.VALIDATE("User ID", USERID)
        ELSE
          lQuickReportHeader.VALIDATE("User ID", '');
        lQuickReportHeader.MODIFY(TRUE);
        pQuickReportHeader.VALIDATE("Copied From", lQuickReportHeader.Code);
        pQuickReportHeader.VALIDATE(Name, lQuickReportSaveAs.Name);
        pQuickReportHeader.VALIDATE(Description, lQuickReportSaveAs.Description);
        pQuickReportHeader.MODIFY(TRUE);
      END;

      EXIT(lSave);
    END;

    PROCEDURE CardShow@1000000021(pQuickReportHeader@1000000000 : Record 9062697);
    BEGIN
      //DOC NA2015.7 - Card -> Show
      //  -> pQuickReportHeader: The quick report header

      Show(pQuickReportHeader, FALSE);
    END;

    PROCEDURE "--- Common ---"@1000000012();
    BEGIN
    END;

    PROCEDURE Show@1000000013(pQuickReportHeader@1000000000 : Record 9062697;pDeleteRecordOnClose@1000000002 : Boolean);
    BEGIN
      //DOC NA2015.7 - Showing a quick report
      //  -> pQuickReportHeader: The quick report header
      //  -> pDeleteRecordOnClose: Delete record on close flag

      EnhancedPermissionsMgt.CheckQuickReportExecutePermission(pQuickReportHeader, USERID());

      QuickReportData.RESET();
      QuickReportData.SETRANGE("Quick Report Code", pQuickReportHeader.Code);
      QuickReportData.SETRANGE("Delete Record on Close", pDeleteRecordOnClose);

      IF (QuickReportToolkit.CompactMode()) THEN
        PAGE.RUN(PAGE::"Quick Report (Compact)", QuickReportData)
      ELSE
        PAGE.RUN(PAGE::"Quick Report", QuickReportData);
    END;

    PROCEDURE ShowEnhancedView@1000000000(pQuickReportHeader@1000000001 : Record 9062697;pDeleteRecordOnClose@1000000000 : Boolean);
    VAR
      QuickReportEnhViewsMgt@1000000002 : Codeunit 9062677;
    BEGIN
      //DOC NA2016.15.AZ - Showing a quick report using enhanced views page
      //  -> pQuickReportHeader: The quick report header
      //  -> pDeleteRecordOnClose: Delete record on close flag

      EnhancedPermissionsMgt.CheckQuickReportExecutePermission(pQuickReportHeader, USERID());

      QuickReportEnhViewsMgt.ShowQuickReport(pQuickReportHeader, pDeleteRecordOnClose);
    END;

    PROCEDURE Print@1000000014(pQuickReportHeader@1000000000 : Record 9062697);
    BEGIN
      //DOC NA2016.12 - Printing given quick report
      //  -> pQuickReportHeader: The quick report header

      EnhancedPermissionsMgt.CheckQuickReportExecutePermission(pQuickReportHeader, USERID());

      GetData(pQuickReportHeader);
      PrintData(QuickReportData);
    END;

    PROCEDURE PrintData@1000000002(VAR pQuickReportData@1000000000 : Record 9062699);
    BEGIN
      //DOC NA2016.12 - Printing given quick report data
      //  -> pQuickReportData: The quick report data

      GetHeader(pQuickReportData);

      EnhancedPermissionsMgt.CheckQuickReportExecutePermission(QuickReportHeader, USERID());

      CLEAR(QuickReportPrintout);
      QuickReportPrintout.Initialise(QuickReportHeader, pQuickReportData);
      QuickReportPrintout.RUN();
    END;

    LOCAL PROCEDURE "--- Internal ---"@1000000008();
    BEGIN
    END;

    LOCAL PROCEDURE GetData@1000000009(pQuickReportHeader@1000000000 : Record 9062697);
    VAR
      lQuickReportEngine@1000000001 : Codeunit 9062539;
      lQuickReportCode@1000000002 : Code[60];
    BEGIN
      //DOC NA2016.12 - Getting quick report data (using header)
      //  -> pQuickReportHeader: The quick report header to get data for

      lQuickReportCode := lQuickReportEngine.GenerateQuickReportData(pQuickReportHeader.Code, QuickReportData);

      QuickReportHeader.GET(lQuickReportCode);
      QuickReportHeader.SETRECFILTER();
    END;

    LOCAL PROCEDURE GetHeader@1000000037(VAR pQuickReportData@1000000000 : Record 9062699);
    VAR
      eNoData@1000000001 : TextConst 'ENU=The current quick report does not have data.;ENG=The current quick report does not have data.';
    BEGIN
      //DOC NA2016.12 - Getting quick report header (using data)
      //  <> pQuickReportData: The data

      IF (pQuickReportData.FINDFIRST()) THEN
        QuickReportHeader.GET(pQuickReportData."Quick Report Code")
      ELSE
        ERROR(eNoData);
    END;

    LOCAL PROCEDURE "--- Diagnostics ---"@1000000006();
    BEGIN
    END;

    LOCAL PROCEDURE SaveDataIntoRealTable@1000000011();
    VAR
      lQuickReportData@1000000000 : Record 9062699;
    BEGIN
      //DOC NA2015.7 - Saving data into real table (diagnostics function, don't use in real life)

      QuickReportData.RESET();
      IF (QuickReportData.FINDSET()) THEN
      BEGIN
        lQuickReportData.RESET();
        lQuickReportData.SETRANGE("Quick Report Code", QuickReportData."Quick Report Code");
        lQuickReportData.DELETEALL();
        REPEAT
          lQuickReportData := QuickReportData;
          lQuickReportData.INSERT();
        UNTIL (QuickReportData.NEXT() = 0);
      END;
    END;

    BEGIN
    {
      //DOC NA2015.7  JH 27/05/2015 - Created
      //DOC NA2015.9  JH 10/08/2015 - Printing added
      //DOC NA2016.9  JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.10 AZ 22/10/2015 - Different quick report pages for desktop, web and phone
      //DOC NA2016.12 JH 27/01/2016 - "Open" changed to "Edit", bugfixes
      //DOC NA2016.12 JH 04/02/2016 - "Print" and "Export" added
      //DOC NA2016.14 JH 19/02/2016 - "Show" method public, export methods moved to a separate codeunit
      //DOC NA2016.15 AZ 12/04/2016 - ShowEnhancedView function added
      //DOC NA2016.15 JH 05/05/2016 - Enhanced permissions
    }
    END.
  }
}

