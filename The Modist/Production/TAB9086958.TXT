OBJECT Table 9086958 nF. Permission
{
  OBJECT-PROPERTIES
  {
    Date=22/12/16;
    Time=12:00:00 PM;
    Version List=NF2016.17.11;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               Rec.TESTFIELD("nF. Permission Group ID");
               NfPermissionGroup.GET(Rec."nF. Permission Group ID");
               Rec.VALIDATE(Type, NfPermissionGroup.Type);
               Rec.VALIDATE(Force, NfPermissionGroup.Force);
               Rec.VALIDATE("Give Everything Group", NfPermissionGroup."Give Everything");
               Rec.VALIDATE("Permission Group Full Hash", NfPermissionGroup."Full Hash");
               MarkUsersAsPending();
               NfRecordAuditToolkit.UpdateCreated(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               MarkUsersAsPending();
               NfRecordAuditToolkit.UpdateModified(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               DeletePermissionFilters();
               MarkUsersAsPending();
             END;

    CaptionML=[ENU=nForcement Permission;
               ENG=nForcement Permission];
    LookupPageID=Page9086968;
    DrillDownPageID=Page9086968;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 10  ;   ;nF. Permission Group ID;Integer    ;TableRelation="nF. Permission Group";
                                                   CaptionML=[ENU=nForcement Permission Group ID;
                                                              ENG=nForcement Permission Group ID] }
    { 20  ;   ;Object Type         ;Option        ;OnValidate=VAR
                                                                lIsTable@1000000000 : Boolean;
                                                              BEGIN
                                                                IF (Rec."Object Type" <> xRec."Object Type") THEN
                                                                BEGIN
                                                                  Rec.VALIDATE("Object ID", 0);
                                                                  IF (xRec."Object Type" = xRec."Object Type"::Table) THEN
                                                                    DeletePermissionFilters();
                                                                END;
                                                                lIsTable := (Rec."Object Type" = Rec."Object Type"::Table);
                                                                Rec.VALIDATE("Read Permission", lIsTable);
                                                                Rec.VALIDATE("Insert Permission", lIsTable);
                                                                Rec.VALIDATE("Modify Permission", lIsTable);
                                                                Rec.VALIDATE("Delete Permission", lIsTable);
                                                                Rec.VALIDATE("Execute Permission", TRUE);
                                                              END;

                                                   CaptionML=[ENU=Object Type;
                                                              ENG=Object Type];
                                                   OptionCaptionML=[ENU=" ,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System";
                                                                    ENG=" ,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System"];
                                                   OptionString=[ ,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System] }
    { 21  ;   ;Object ID           ;Integer       ;TableRelation=IF (Object Type=CONST(Table)) AllObj."Object ID" WHERE (Object Type=CONST(Table))
                                                                 ELSE IF (Object Type=CONST(Report)) AllObj."Object ID" WHERE (Object Type=CONST(Report))
                                                                 ELSE IF (Object Type=CONST(Codeunit)) AllObj."Object ID" WHERE (Object Type=CONST(Codeunit))
                                                                 ELSE IF (Object Type=CONST(XMLport)) AllObj."Object ID" WHERE (Object Type=CONST(XMLport))
                                                                 ELSE IF (Object Type=CONST(MenuSuite)) AllObj."Object ID" WHERE (Object Type=CONST(MenuSuite))
                                                                 ELSE IF (Object Type=CONST(Page)) AllObj."Object ID" WHERE (Object Type=CONST(Page))
                                                                 ELSE IF (Object Type=CONST(Query)) AllObj."Object ID" WHERE (Object Type=CONST(Query))
                                                                 ELSE IF (Object Type=CONST(System)) AllObj."Object ID" WHERE (Object Type=CONST(System));
                                                   OnValidate=BEGIN
                                                                IF ((Rec."Object Type" = Rec."Object Type"::Table) AND (Rec."Object ID" <> xRec."Object ID")) THEN
                                                                  DeletePermissionFilters();
                                                                Rec.CALCFIELDS("Object Name");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (NfObjectToolkit.ObjectLookup(Rec."Object Type", Rec."Object ID")) THEN
                                                                Rec.VALIDATE("Object ID");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Object ID;
                                                              ENG=Object ID] }
    { 22  ;   ;Object Name         ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=FIELD(Object Type),
                                                                                                                Object ID=FIELD(Object ID)));
                                                   CaptionML=[ENU=Object Name;
                                                              ENG=Object Name];
                                                   Editable=No }
    { 30  ;   ;Read Permission     ;Boolean       ;OnValidate=BEGIN
                                                                ValidateTablePermission(Rec."Read Permission");
                                                              END;

                                                   CaptionML=[ENU=Read Permission;
                                                              ENG=Read Permission] }
    { 31  ;   ;Insert Permission   ;Boolean       ;OnValidate=BEGIN
                                                                ValidateTablePermission(Rec."Insert Permission");
                                                              END;

                                                   CaptionML=[ENU=Insert Permission;
                                                              ENG=Insert Permission] }
    { 32  ;   ;Modify Permission   ;Boolean       ;OnValidate=BEGIN
                                                                ValidateTablePermission(Rec."Modify Permission");
                                                              END;

                                                   CaptionML=[ENU=Modify Permission;
                                                              ENG=Modify Permission] }
    { 33  ;   ;Delete Permission   ;Boolean       ;OnValidate=BEGIN
                                                                ValidateTablePermission(Rec."Delete Permission");
                                                              END;

                                                   CaptionML=[ENU=Delete Permission;
                                                              ENG=Delete Permission] }
    { 34  ;   ;Execute Permission  ;Boolean       ;CaptionML=[ENU=Execute Permission;
                                                              ENG=Execute Permission] }
    { 40  ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=" ,Give,Take Away";
                                                                    ENG=" ,Give,Take Away"];
                                                   OptionString=[ ,Give,Take Away] }
    { 41  ;   ;Force               ;Boolean       ;CaptionML=[ENU=Force;
                                                              ENG=Force] }
    { 50  ;   ;Give Everything Group;Boolean      ;CaptionML=[ENU=Give Everything Group;
                                                              ENG=Give Everything Group] }
    { 60  ;   ;MenuSuite Control GUID;GUID        ;CaptionML=[ENU=MenuSuite Control GUID;
                                                              ENG=MenuSuite Control GUID] }
    { 70  ;   ;Permission Group Full Hash;Text250 ;CaptionML=[ENU=Permission Group Full Hash;
                                                              ENG=Permission Group Full Hash] }
    { 80  ;   ;Record Filter View  ;Text250       ;CaptionML=[ENU=Record Filter View;
                                                              ENG=Record Filter View] }
    { 81  ;   ;Record Filter View 2;Text250       ;CaptionML=[ENU=Record Filter View 2;
                                                              ENG=Record Filter View 2] }
    { 82  ;   ;Record Filter View 3;Text250       ;CaptionML=[ENU=Record Filter View 3;
                                                              ENG=Record Filter View 3] }
    { 83  ;   ;Record Filter View 4;Text250       ;CaptionML=[ENU=Record Filter View 4;
                                                              ENG=Record Filter View 4] }
    { 84  ;   ;Record Filter View 5;Text250       ;CaptionML=[ENU=Record Filter View 5;
                                                              ENG=Record Filter View 5] }
    { 90  ;   ;Record Filter       ;Text250       ;CaptionML=[ENU=Record Filter;
                                                              ENG=Record Filter] }
    { 91  ;   ;Record Filter 2     ;Text250       ;CaptionML=[ENU=Record Filter 2;
                                                              ENG=Record Filter 2] }
    { 92  ;   ;Record Filter 3     ;Text250       ;CaptionML=[ENU=Record Filter 3;
                                                              ENG=Record Filter 3] }
    { 93  ;   ;Record Filter 4     ;Text250       ;CaptionML=[ENU=Record Filter 4;
                                                              ENG=Record Filter 4] }
    { 94  ;   ;Record Filter 5     ;Text24        ;CaptionML=[ENU=Record Filter 5;
                                                              ENG=Record Filter 5] }
    { 100 ;   ;nF. Permission Group Name;Text100  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("nF. Permission Group".Name WHERE (ID=FIELD(nF. Permission Group ID)));
                                                   CaptionML=[ENU=nForcement Permission Group Name;
                                                              ENG=nForcement Permission Group Name];
                                                   Editable=No }
    { 110 ;   ;System Activity     ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=System Activity;
                                                              ENG=System Activity] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              NfRecordAuditToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              NfRecordAuditToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;ID                                       }
    {    ;nF. Permission Group ID,Object Type,Object ID;
                                                   Clustered=Yes }
    {    ;MenuSuite Control GUID                   }
    {    ;Permission Group Full Hash,nF. Permission Group ID }
    {    ;Give Everything Group,Permission Group Full Hash,nF. Permission Group ID }
    {    ;Object Type,Object ID,nF. Permission Group ID }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NfPermissionGroup@1000000002 : Record 9086960;
      NfPermissionFilter@1000000004 : Record 9086959;
      NfObjectToolkit@1000000000 : Codeunit 9086974;
      NfPermissionManagement@1000000001 : Codeunit 9086960;
      NfRecordAuditToolkit@1000000005 : Codeunit 9086951;

    PROCEDURE InitRecord@1000000001(pXNfPermission@1000000000 : Record 9086958);
    BEGIN
      ///<summary>Initialising record</summary>
      ///<param name="pXNfPermission">Previous record value</param>

      Rec.VALIDATE("Object Type", pXNfPermission."Object Type");
      IF (NfPermissionGroup.GET(Rec."nF. Permission Group ID")) THEN
      BEGIN
        Rec.VALIDATE(Type, NfPermissionGroup.Type);
        Rec.VALIDATE("Give Everything Group", NfPermissionGroup."Give Everything");
      END;
    END;

    LOCAL PROCEDURE ValidateTablePermission@1000000000(VAR pPermission@1000000000 : Boolean);
    BEGIN
      ///<summary>Validating table-specific permission</summary>
      ///<param name="pPermission">The permission</param>

      IF (pPermission) THEN
      BEGIN
        Rec.TESTFIELD("Object Type");
        IF (Rec."Object Type" <> Rec."Object Type"::Table) THEN
        BEGIN
          Rec.VALIDATE("Execute Permission", TRUE);
          pPermission := FALSE;
        END;
      END;
    END;

    PROCEDURE GetStyle@1000000002() : Text;
    BEGIN
      ///<summary>Returning style</summary>
      ///<returns>The style</returns>

      IF (Rec."Give Everything Group") THEN
        EXIT('Favorable')
      ELSE
        CASE (Rec.Type) OF
          Rec.Type::Give: EXIT('Standard');
          Rec.Type::"Take Away": EXIT('StandardAccent');
          ELSE EXIT('Subordinate');
        END;
    END;

    PROCEDURE MarkUsersAsPending@1000000003();
    BEGIN
      ///<summary>Marking users as pending</summary>

      IF (GetSystemActivity()) THEN
        EXIT;

      IF ( NOT (NfPermissionGroup.GET(Rec."nF. Permission Group ID"))) THEN
        EXIT;

      NfPermissionGroup.MarkUsersAsPending();
    END;

    LOCAL PROCEDURE DeletePermissionFilters@1000000006();
    BEGIN
      ///<summary>Deleting permission filters</summary>

      NfPermissionFilter.RESET();
      NfPermissionFilter.SETCURRENTKEY("nF. Permission ID");
      NfPermissionFilter.SETRANGE("nF. Permission ID", Rec.ID);
      NfPermissionFilter.DELETEALL(TRUE);
    END;

    PROCEDURE GetRecordFilterView@1000000011() : Text;
    BEGIN
      ///<summary>Returning record filter view</summary>
      ///<returns>The record filter view</returns>

      EXIT(Rec."Record Filter View" + Rec."Record Filter View 2" + Rec."Record Filter View 3" + Rec."Record Filter View 4" + Rec."Record Filter View 5");
    END;

    PROCEDURE SetRecordFilterView@1000000010(pRecordFilterView@1000000000 : Text);
    BEGIN
      ///<summary>Setting record filter view</summary>
      ///<param name="pRecordFilterView">The filter view</param>

      Rec."Record Filter View" := COPYSTR(pRecordFilterView, 1, 250);
      Rec."Record Filter View 2" := COPYSTR(pRecordFilterView, 251, 250);
      Rec."Record Filter View 3" := COPYSTR(pRecordFilterView, 501, 250);
      Rec."Record Filter View 4" := COPYSTR(pRecordFilterView, 751, 250);
      Rec."Record Filter View 5" := COPYSTR(pRecordFilterView, 1001, 24);
    END;

    PROCEDURE GetRecordFilter@1000000005() : Text;
    BEGIN
      ///<summary>Returning record filter</summary>
      ///<returns>The record filter</returns>

      EXIT(Rec."Record Filter" + Rec."Record Filter 2" + Rec."Record Filter 3" + Rec."Record Filter 4" + Rec."Record Filter 5");
    END;

    PROCEDURE SetRecordFilter@1000000007(pRecordFilter@1000000000 : Text);
    BEGIN
      ///<summary>Setting record filter</summary>
      ///<param name="pRecordFilter">The filter</param>

      Rec."Record Filter" := COPYSTR(pRecordFilter, 1, 250);
      Rec."Record Filter 2" := COPYSTR(pRecordFilter, 251, 250);
      Rec."Record Filter 3" := COPYSTR(pRecordFilter, 501, 250);
      Rec."Record Filter 4" := COPYSTR(pRecordFilter, 751, 250);
      Rec."Record Filter 5" := COPYSTR(pRecordFilter, 1001, 24);
    END;

    PROCEDURE GetSystemActivity@1000000009() : Boolean;
    BEGIN
      ///<summary>Returning if system activity is enabled</summary>
      ///<returns>The answer</returns>

      Rec.FILTERGROUP(2);
      IF (Rec.GETFILTER("System Activity") <> '') THEN
        EXIT(Rec.GETRANGEMIN("System Activity"))
      ELSE
        EXIT(FALSE);
      Rec.FILTERGROUP(0);
    END;

    PROCEDURE SetSystemActivity@1000000008(pSystemActivity@1000000000 : Boolean);
    BEGIN
      ///<summary>Enabling / disabling system activity</summary>
      ///<param name="pSystemActivity">The flag</param>

      Rec.FILTERGROUP(2);
      IF (pSystemActivity) THEN
        Rec.SETRANGE("System Activity", TRUE)
      ELSE
        Rec.SETRANGE("System Activity");
      Rec.FILTERGROUP(0);
    END;

    BEGIN
    {
      ///<summary>Table with nForcement permissions belonging to permission group</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-04-24">Created</change>
      ///<change version="NF2016.17.11" initials="JH" date="2016-11-14">Validation taken out from "Object ID" to support "System" permissions</change>
    }
    END.
  }
}

