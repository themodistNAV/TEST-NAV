OBJECT Codeunit 9062696 FF XML Management
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EmptyPrefixErr@1000 : TextConst 'ENU=Retrieval of an XML element cannot be done with an empty prefix.;ENG=Retrieval of an XML element cannot be done with an empty prefix.';
      convert@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      FileSystem@1000000001 : Codeunit 9062264;
      BLOBToolkit@1000000003 : Codeunit 9062242;
      Gint@1000000004 : Integer;
      TempRecordBuffer1@1000000005 : TEMPORARY Record 6529;
      TempRecordBuffer2@1000000002 : TEMPORARY Record 6529;
      TokenText@1000000006 : Text;
      DynamicsJSONMgt@1000000007 : Codeunit 9062670;
      TmpListBuffer@1000000008 : TEMPORARY Record 1235;
      GLineNo1@1000000009 : Integer;
      GLineNo2@1000000010 : Integer;
      FFsetup@1000000011 : Record 9062831;
      PathS@1000000012 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path";
      GRecordID@1000000013 : RecordID;
      GblLogEntryNo@1000000014 : Integer;
      String@1000000015 : Codeunit 9062236;
      ActionXMLNodeList@1000000021 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ActionTxt@1000000020 : Text;
      TableActionTxt@1000000019 : Text;
      TableKeyTxt@1000000017 : Text;
      TmpNameValueBuffer@1000000016 : TEMPORARY Record 9062730;
      TxtTableNotFound@1000000018 : TextConst 'ENU=not found in Table;ENG=not found in Table';

    PROCEDURE TestFileLoading@1000000024(pFileNameToUse@1000000000 : Text);
    VAR
      lFFEntryLog@1000000001 : Record 9062833;
    BEGIN

      lFFEntryLog.RESET;
      lFFEntryLog.INIT;
      lFFEntryLog."Entry No":=0;
      lFFEntryLog.Filename:=pFileNameToUse;
      lFFEntryLog.FilePath:=pFileNameToUse;
      lFFEntryLog."Document Type":='XML';
      lFFEntryLog.INSERT(TRUE);
      COMMIT;

      ImportXmlFileToNavTables(pFileNameToUse,lFFEntryLog);

      lFFEntryLog.DELETE(TRUE);
    END;

    PROCEDURE CreateSetupData@1000000023();
    BEGIN
      //Create Default setup data.

      //Create default entries
      CreateDefaultEntry(36,1,'1',FALSE,0,'',TRUE,0,'',FALSE,0,'',FALSE,0,'',FALSE,0,0,0,0);
      CreateDefaultEntry(37,5,'2',TRUE,0,'',FALSE,0,'',FALSE,0,'',FALSE,0,'',FALSE,4,10000,0,0);
      CreateDefaultEntry(38,1,'1',FALSE,0,'',TRUE,0,'',FALSE,0,'',FALSE,0,'',FALSE,0,0,0,0);
      CreateDefaultEntry(39,5,'2',TRUE,0,'',FALSE,0,'',FALSE,0,'',FALSE,0,'',FALSE,4,10000,0,0);

      //Create Match Fields
      CreateMatchField(37,36,1,1,3,3,2,2,0,0,0,0,0,0);
      CreateMatchField(39,38,1,1,3,3,2,2,0,0,0,0,0,0);
    END;

    LOCAL PROCEDURE CreateDefaultEntry@1000000031(TableId@1000000001 : Integer;Fld1@1000000002 : Integer;Fld1Value@1000000003 : Text;Fld1Validate@1000000016 : Boolean;Fld2@1000000005 : Integer;Fld2Value@1000000004 : Text;Fld2Validate@1000000017 : Boolean;Fld3@1000000007 : Integer;Fld3Value@1000000006 : Text;Fld3Validate@1000000018 : Boolean;Fld4@1000000009 : Integer;Fld4Value@1000000008 : Text;Fld4Validate@1000000019 : Boolean;Fld5@1000000011 : Integer;Fld5Value@1000000010 : Text;Fld5Validate@1000000020 : Boolean;AutoIncFld1@1000000012 : Integer;AutoIncFld1Step@1000000013 : Integer;AutoIncFld2@1000000014 : Integer;AutoIncFld2Step@1000000015 : Integer);
    VAR
      FFDefaultEntries@1000000000 : Record 9062832;
    BEGIN

      FFDefaultEntries.INIT;

      FFDefaultEntries."Table Id":=TableId;

      FFDefaultEntries."Default Field 1":=Fld1;
      FFDefaultEntries."Default Field 1 Value":=Fld1Value;
      FFDefaultEntries."Field 1 Validate":=Fld1Validate;

      FFDefaultEntries."Default Field 2":=Fld2;
      FFDefaultEntries."Default Field 2 Value":=Fld2Value;
      FFDefaultEntries."Field 2 Validate":=Fld2Validate;

      FFDefaultEntries."Default Field 3":=Fld3;
      FFDefaultEntries."Default Field 3 Value":=Fld3Value;
      FFDefaultEntries."Field 3 Validate":=Fld3Validate;

      FFDefaultEntries."Default Field 4":=Fld4;
      FFDefaultEntries."Default Field 4 Value":=Fld4Value;
      FFDefaultEntries."Field 4 Validate":=Fld4Validate;

      FFDefaultEntries."Default Field 5":=Fld5;
      FFDefaultEntries."Default Field 5 Value":=Fld5Value;
      FFDefaultEntries."Field 5 Validate":=Fld5Validate;

      FFDefaultEntries."Auto Inc Field 1":=AutoIncFld1;
      FFDefaultEntries."Auto Inc Field 1 Step":=AutoIncFld1Step;


      FFDefaultEntries."Auto Inc Field 2":=AutoIncFld2;
      FFDefaultEntries."Auto Inc Field 2 Step":=AutoIncFld2Step;

      FFDefaultEntries.INSERT;
    END;

    LOCAL PROCEDURE CreateMatchField@1000000032(TableID@1000000002 : Integer;ParentTable@1000000003 : Integer;CopyFld1@1000000014 : Integer;CopyParent1@1000000000 : Integer;CopyFld2@1000000005 : Integer;CopyParent2@1000000004 : Integer;CopyFld3@1000000007 : Integer;CopyParent3@1000000006 : Integer;CopyFld4@1000000009 : Integer;CopyParent4@1000000008 : Integer;CopyFld5@1000000011 : Integer;CopyParent5@1000000010 : Integer;CopyFld6@1000000013 : Integer;CopyParent6@1000000012 : Integer);
    VAR
      FFMatchFields@1000000001 : Record 9062830;
    BEGIN

      FFMatchFields.INIT;

      FFMatchFields."Table Id":=TableID;
      FFMatchFields."Parent Table":=ParentTable;

      FFMatchFields."Copy Field 1":=CopyFld1;
      FFMatchFields."Copy Parent Field 1":=CopyParent1;

      FFMatchFields."Copy Field 2":=CopyFld2;
      FFMatchFields."Copy Parent Field 2":=CopyParent2;

      FFMatchFields."Copy Field 3":=CopyFld3;
      FFMatchFields."Copy Parent Field 3":=CopyParent3;

      FFMatchFields."Copy Field 4":=CopyFld4;
      FFMatchFields."Copy Parent Field 4":=CopyParent4;

      FFMatchFields."Copy Field 5":=CopyFld5;
      FFMatchFields."Copy Parent Field 5":=CopyParent5;

      FFMatchFields."Copy Field 6":=CopyFld6;
      FFMatchFields."Copy Parent Field 6":=CopyParent6;


      FFMatchFields.INSERT;
    END;

    PROCEDURE ImportXmlFileToNavTables@1000000019(FileNameToUse@1000000014 : Text;VAR FFEntryLog@1000000018 : Record 9062833) ProcessedOK : Boolean;
    VAR
      varXmlFile@1000000010 : File;
      varInputStream@1000000009 : InStream;
      XMLRootNode@1000000008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FoundXMLNode@1000000007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Ok@1000000006 : Boolean;
      ReturnedXMLNodeList@1000000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      TableNameTxt@1000000004 : Text;
      NewFileName@1000000003 : Text;
      XMLNode@1000000002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ReturnedXMLNodeList2@1000000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      submissionIdTxt@1000000000 : Text;
      ObjTable@1000000011 : Record 2000000001;
      RecRef@1000000012 : RecordRef;
      ImageUrl@1000000013 : Text;
      FFUserName@1000000015 : Text;
      lRecRef@1000000017 : RecordRef;
      lRecRef2@1000000016 : RecordRef;
      ObjField@1000000020 : Record 2000000041;
      FldRef@1000000019 : FieldRef;
      TxtFieldName@1000000021 : Text;
    BEGIN

      GblLogEntryNo:=FFEntryLog."Entry No";

      TempRecordBuffer1.RESET;
      TempRecordBuffer1.DELETEALL;

      TempRecordBuffer2.RESET;
      TempRecordBuffer2.DELETEALL;

      IF PathS.GetExtension(FileNameToUse) <>'.xml' THEN
         EXIT(FALSE);

      varXmlFile.OPEN(FileNameToUse);
      varXmlFile.CREATEINSTREAM(varInputStream);
      LoadXMLDocumentFromInStream(varInputStream,XMLRootNode);
      varXmlFile.CLOSE;

      Ok:=FindNode(XMLRootNode,'//formMetaData',FoundXMLNode);
      IF Ok THEN
        XMLRootNode.RemoveChild(FoundXMLNode);

      Ok:=FindNode(XMLRootNode,'//workflowData',FoundXMLNode);
      IF Ok THEN
        XMLRootNode.RemoveChild(FoundXMLNode);


      Ok:=FindNode(XMLRootNode,'//submissionId',FoundXMLNode);
      IF Ok THEN
        submissionIdTxt:=FoundXMLNode.InnerXml;

      Ok:=FindNode(XMLRootNode,'//userName',FoundXMLNode);
      IF Ok THEN
        FFUserName:=FoundXMLNode.InnerXml;

      Ok:=FindNodes(XMLRootNode,'//*[contains(name(),''NAVTABLEACTION'')]',ActionXMLNodeList);

      IF Ok THEN BEGIN
        FOREACH XMLNode IN ActionXMLNodeList
          DO BEGIN
            ActionTxt:=XMLNode.InnerXml;
            IF ActionTxt <>'' THEN BEGIN
              String.Split(ActionTxt,':',TmpNameValueBuffer);

              TmpNameValueBuffer.FINDFIRST;
              TableActionTxt:=TmpNameValueBuffer.Value;

              TmpNameValueBuffer.NEXT;
              TableNameTxt:=TmpNameValueBuffer.Value;

              TmpNameValueBuffer.NEXT;
              TableKeyTxt:=TmpNameValueBuffer.Value;

              TmpNameValueBuffer.DELETEALL;

              String.Split(TableKeyTxt,'-',TmpNameValueBuffer);

              END;
            END;
      END;

      IF (TableActionTxt='ADD') OR (TableActionTxt='') THEN
        BEGIN

          ObjTable.RESET;
          ObjTable.SETRANGE(Type,ObjTable.Type::Table);
          ObjTable.SETFILTER(Name,'%1', '@'+ TableNameTxt);

          IF ObjTable.FINDFIRST THEN BEGIN
              RecRef.OPEN(ObjTable.ID);
              InsertBufferRec(RecRef,TempRecordBuffer1);
              RecRef.CLOSE;
            END ELSE
              InsertLogEntry(GblLogEntryNo,TableNameTxt + ' not found to load ');

        TempRecordBuffer1.RESET;
        IF NOT TempRecordBuffer1.FINDSET THEN BEGIN
          InsertLogEntry(GblLogEntryNo,'TempRecordBuffer Emtpy - No Found Tables to load');
          EXIT(FALSE)
        END;

        Ok:=FindNodes(XMLRootNode,'//formResult/*[contains(name(),''NAVDATA'')]',ReturnedXMLNodeList);

        IF (ReturnedXMLNodeList.Count > 0)THEN BEGIN
          ResetGints;
           ProcessNodeListIntoTable(ReturnedXMLNodeList,TableNameTxt,TRUE);
          END ELSE
            InsertLogEntry(GblLogEntryNo,'No Parent Data Fields');

        Ok:=FindNodes(XMLRootNode,'//formResult/*[contains(name(),''NAVSUBTABLE'')]',ReturnedXMLNodeList);

        IF (ReturnedXMLNodeList.Count > 0)THEN
        BEGIN
          ResetGints;
          FOREACH XMLNode IN ReturnedXMLNodeList
            DO BEGIN
              Ok:=FindNodes(XMLNode,'.//*[contains(name(),''NAVDATA'')]',ReturnedXMLNodeList2); // These need to be put into a validation order
              Ok:=FindNode(XMLNode,'.//*[contains(name(),''NAVTABLE'')]',FoundXMLNode);
              TableNameTxt:=FoundXMLNode.InnerXml;
              ProcessNodeListIntoTable(ReturnedXMLNodeList2,TableNameTxt,FALSE);
              END;
          END;
      END;

      IF TableActionTxt='ATTACH' THEN
        BEGIN
          ObjTable.RESET;
          ObjTable.SETRANGE(Type,ObjTable.Type::Table);
          ObjTable.SETFILTER(Name,'%1', '@'+ TableNameTxt);

          IF ObjTable.FINDFIRST THEN BEGIN
            RecRef.OPEN(ObjTable.ID);

            IF TmpNameValueBuffer.FINDSET THEN BEGIN
              REPEAT
                TxtFieldName:= String.Replace(TmpNameValueBuffer.Name,'NAVDATA','');
                TxtFieldName:= String.ReplaceAll(TxtFieldName,'_','?');

                ObjField.RESET;
                ObjField.SETRANGE(TableNo,ObjTable.ID);
                ObjField.SETFILTER(FieldName,'@'+TxtFieldName);

                IF ObjField.FINDFIRST THEN
                  BEGIN
                    FldRef:=RecRef.FIELD(ObjField."No.");
                    Ok:=FindNode(XMLRootNode,'//'+TmpNameValueBuffer.Name,FoundXMLNode);
                    IF Ok THEN BEGIN
                      FldRef.VALUE:=FoundXMLNode.InnerXml;
                      END;
                  END;

              UNTIL TmpNameValueBuffer.NEXT=0;
              END;

            IF RecRef.FIND THEN;

            InsertBufferRec(RecRef,TempRecordBuffer1);

            IF RecRef.FIND THEN
              GRecordID:=RecRef.RECORDID
            ELSE
              BEGIN
              //Need to create a record to attach it to.
                RecRef.INIT;

                IF TempRecordBuffer1."Primary Key Field 1 No." <> 0 THEN BEGIN
                  FldRef:=RecRef.FIELD(TempRecordBuffer1."Primary Key Field 1 No.");
                  FldRef.VALUE:=TempRecordBuffer1."Primary Key Field 1 Value";
                END;

                IF TempRecordBuffer1."Primary Key Field 2 No." <> 0 THEN BEGIN
                  FldRef:=RecRef.FIELD(TempRecordBuffer1."Primary Key Field 2 No.");
                  FldRef.VALUE:=TempRecordBuffer1."Primary Key Field 2 Value";
                END;

                IF TempRecordBuffer1."Primary Key Field 3 No." <> 0 THEN BEGIN
                  FldRef:=RecRef.FIELD(TempRecordBuffer1."Primary Key Field 3 No.");
                  FldRef.VALUE:=TempRecordBuffer1."Primary Key Field 3 Value";
                END;

                RecRef.INSERT;
                GRecordID:=RecRef.RECORDID;
                END;
            RecRef.CLOSE;
            END;

          END;

      //Now update the FFlogEntry.
      lRecRef.GET(GRecordID);
      FFEntryLog."Record Id":=GRecordID;
      FFEntryLog."Table No":=lRecRef.NUMBER;
      FFEntryLog."Postion Text":=lRecRef.GETPOSITION;
      FFEntryLog.MODIFY;

      ProcessedOK:=TRUE;

      IF AttachFilesToParent(FileNameToUse,submissionIdTxt,GRecordID) THEN;

      EXIT(ProcessedOK);
    END;

    LOCAL PROCEDURE InsertLogEntry@1000000033(FFLogEntryNo@1000000002 : Integer;ErrorMessage@1000000001 : Text);
    VAR
      FFErrorLog@1000000003 : Record 9062829;
    BEGIN
      FFErrorLog.INIT;
      FFErrorLog."Entry No":=0;
      FFErrorLog."FF Log Entry No":=FFLogEntryNo;
      FFErrorLog."Error Text":=ErrorMessage;
      FFErrorLog.INSERT(TRUE);
    END;

    LOCAL PROCEDURE ProcessNodeListIntoTable@1000000008(XMLNodeList@1000000019 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";TableName@1000000018 : Text;IsParent@1000000021 : Boolean);
    VAR
      ObjTable@1000000017 : Record 2000000001;
      XMLNode@1000000020 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      String@1000000016 : Codeunit 9062236;
      TxtFieldName@1000000015 : Text;
      ObjField@1000000014 : Record 2000000041;
      TmpText@1000000013 : Text;
      FldType@1000000012 : Text;
      Lint@1000000011 : Integer;
      LBint@1000000010 : BigInteger;
      Ldec@1000000009 : Decimal;
      LDate@1000000008 : Date;
      LTime@1000000007 : Time;
      LDateTime@1000000006 : DateTime;
      outstr@1000000005 : OutStream;
      LbigText@1000000004 : BigText;
      TmpBlob@1000000003 : TEMPORARY Record 99008535;
      InStr@1000000002 : InStream;
      RecRef2@1000000001 : RecordRef;
      fldRef2@1000000000 : FieldRef;
      RecRef@1000000023 : RecordRef;
      FldRef@1000000022 : FieldRef;
      FFMatchFields@1000000024 : Record 9062830;
      RecRefParent@1000000026 : RecordRef;
      fldRefParent@1000000025 : FieldRef;
      FFDefaultEntries@1000000027 : Record 9062832;
      eField@1000000028 : TextConst 'ENU=Field;ENG=Field';
    BEGIN
      ObjTable.RESET;
      ObjTable.SETRANGE(Type,ObjTable.Type::Table);
      ObjTable.SETFILTER(Name,'%1', '@*'+ TableName + '*');

      IF ObjTable.FINDFIRST THEN BEGIN
        RecRef.OPEN(ObjTable.ID);

        RecRef.INIT;

        IF IsParent = FALSE THEN BEGIN
            FFMatchFields.SETRANGE(FFMatchFields."Table Id",RecRef.NUMBER);
            FFMatchFields.SETRANGE(FFMatchFields."Parent Table",TempRecordBuffer2."Table No.");

            IF FFMatchFields.FINDFIRST THEN BEGIN
              RecRefParent.OPEN(FFMatchFields."Parent Table");
              RecRefParent.GET(TempRecordBuffer2."Record Identifier");

            IF FFMatchFields."Copy Field 1" <> 0 THEN BEGIN
              fldRefParent:=RecRefParent.FIELD(FFMatchFields."Copy Parent Field 1");
              FldRef:=RecRef.FIELD(FFMatchFields."Copy Field 1");
              FldRef.VALUE:=fldRefParent.VALUE;
              END;

            IF FFMatchFields."Copy Field 2" <> 0 THEN BEGIN
              fldRefParent:=RecRefParent.FIELD(FFMatchFields."Copy Parent Field 2");
              FldRef:=RecRef.FIELD(FFMatchFields."Copy Field 2");
              FldRef.VALUE:=fldRefParent.VALUE;
              END;

            IF FFMatchFields."Copy Field 3" <> 0 THEN BEGIN
              fldRefParent:=RecRefParent.FIELD(FFMatchFields."Copy Parent Field 3");
              FldRef:=RecRef.FIELD(FFMatchFields."Copy Field 3");
              FldRef.VALUE:=fldRefParent.VALUE;
              END;

            IF FFMatchFields."Copy Field 4" <> 0 THEN BEGIN
              fldRefParent:=RecRefParent.FIELD(FFMatchFields."Copy Parent Field 4");
              FldRef:=RecRef.FIELD(FFMatchFields."Copy Field 4");
              FldRef.VALUE:=fldRefParent.VALUE;
              END;

           END;
        END;

          IF FFDefaultEntries.GET(RecRef.NUMBER) THEN BEGIN

            IF FFDefaultEntries."Default Field 1" <> 0 THEN BEGIN
              FldRef:=RecRef.FIELD(FFDefaultEntries."Default Field 1");
              FldRef.VALUE:=FFDefaultEntries."Default Field 1 Value";
              IF FFDefaultEntries."Field 1 Validate" THEN
                FldRef.VALIDATE;
              END;

            IF FFDefaultEntries."Default Field 2" <> 0 THEN BEGIN
              FldRef:=RecRef.FIELD(FFDefaultEntries."Default Field 2");
              FldRef.VALUE:=FFDefaultEntries."Default Field 2 Value";
              IF FFDefaultEntries."Field 2 Validate" THEN
                FldRef.VALIDATE;
              END;

            IF FFDefaultEntries."Default Field 3" <> 0 THEN BEGIN
              FldRef:=RecRef.FIELD(FFDefaultEntries."Default Field 3");
              FldRef.VALUE:=FFDefaultEntries."Default Field 3 Value";
              IF FFDefaultEntries."Field 3 Validate" THEN
                FldRef.VALIDATE;
              END;

            IF FFDefaultEntries."Default Field 4" <> 0 THEN BEGIN
              FldRef:=RecRef.FIELD(FFDefaultEntries."Default Field 4");
              FldRef.VALUE:=FFDefaultEntries."Default Field 4 Value";
              IF FFDefaultEntries."Field 4 Validate" THEN
                FldRef.VALIDATE;
              END;

            IF FFDefaultEntries."Default Field 5" <> 0 THEN BEGIN
              FldRef:=RecRef.FIELD(FFDefaultEntries."Default Field 5");
              FldRef.VALUE:=FFDefaultEntries."Default Field 5 Value";
              IF FFDefaultEntries."Field 5 Validate" THEN
                FldRef.VALIDATE;
              END;

           IF FFDefaultEntries."Auto Inc Field 1" <> 0 THEN BEGIN
              FldRef:=RecRef.FIELD(FFDefaultEntries."Auto Inc Field 1");
              GLineNo1:=GLineNo1+FFDefaultEntries."Auto Inc Field 1 Step";
              FldRef.VALUE:=GLineNo1;
              END;

           IF FFDefaultEntries."Auto Inc Field 2" <> 0 THEN BEGIN
              FldRef:=RecRef.FIELD(FFDefaultEntries."Auto Inc Field 2");
              GLineNo2:=GLineNo2+FFDefaultEntries."Auto Inc Field 2 Step";
              FldRef.VALUE:=GLineNo2;
              END;

            END;

        RecRef.INSERT(TRUE);
        IF IsParent THEN
          GRecordID:=RecRef.RECORDID;

        FOREACH XMLNode IN XMLNodeList
        DO
        BEGIN
          TxtFieldName:= String.Replace(XMLNode.Name,'NAVDATA','');
          TxtFieldName:= String.ReplaceAll(TxtFieldName,'_','?');

          ObjField.RESET;
          ObjField.SETRANGE(ObjField.TableNo,ObjTable.ID);
          ObjField.SETFILTER(FieldName,'@'+TxtFieldName+'*');

          IF ObjField.FINDFIRST THEN
          BEGIN

              FldRef:=RecRef.FIELD(ObjField."No.");

              TmpText:=XMLNode.InnerXml;

               FldType:=LOWERCASE(FORMAT(FldRef.TYPE));
               CASE FldType OF

                 'boolean':
                 BEGIN
                 IF TmpText='true' THEN
                     FldRef.VALUE:='true';

                 IF TmpText='false' THEN
                   FldRef.VALUE:='false';
                 END;

                 'integer':
                 BEGIN
                 IF EVALUATE(Lint,TmpText) THEN
                   FldRef.VALUE:=Lint;
                 END;

                 'biginteger':
                 BEGIN
                 IF EVALUATE(LBint,TmpText) THEN
                   FldRef.VALUE:=LBint;
                   END;

                 'decimal':
                 BEGIN
                 IF EVALUATE(Ldec,TmpText) THEN
                   FldRef.VALUE:=Ldec;
                 END;

                 'option':
                 BEGIN
                 IF EVALUATE(Lint,TmpText) THEN
                   FldRef.VALUE:=Lint;
                 END;

                 'code':
                 BEGIN
                 FldRef.VALUE:=TmpText;
                 END;

                 'text':
                 BEGIN
                 FldRef.VALUE:=TmpText;
                 END;

                 'date':
                 BEGIN
                 LDateTime:= convert.ToDateTime(TmpText);
                 FldRef.VALUE:= DT2DATE(LDateTime);
                 END;

                 'time':
                 BEGIN
                 LDateTime:= convert.ToDateTime(TmpText);
                 FldRef.VALUE:= DT2TIME(LDateTime);
                 END;

                 'datetime':
                  BEGIN
                  LDateTime:= convert.ToDateTime(TmpText);
                  FldRef.VALUE:=LDateTime;
                  END;

                  'dateformula':
                  BEGIN
                    //Ignore
                  END;

                  'duration':
                  BEGIN
                  //Ignore
                  END;

                  'guid':
                  BEGIN
                  //Ignore
                  END;

                  'blob':
                  BEGIN
                    //Need to stream this one
                    TmpBlob.INIT;
                    TmpBlob.INSERT;
                    TmpBlob.Blob.CREATEOUTSTREAM(outstr);
                    outstr.WRITE(TmpText);
                    TmpBlob.MODIFY;
                    TmpBlob.CALCFIELDS(Blob);
                    RecRef2.GETTABLE(TmpBlob);
                    fldRef2:=RecRef2.FIELD(2);
                    fldRef2.CALCFIELD();
                    FldRef.VALUE:=fldRef2.VALUE;
                  END;

               END;
               FldRef.VALIDATE();
          END ELSE
          InsertLogEntry(GblLogEntryNo,eField + ' '+ String.ReplaceAll(TxtFieldName,'?',' ') + TxtTableNotFound + TableName );
        END;

        RecRef.MODIFY(TRUE);

          IF IsParent THEN BEGIN
            InsertBufferRec(RecRef,TempRecordBuffer2);
         END;

        RecRef.CLOSE;

      END;
    END;

    LOCAL PROCEDURE InsertBufferRec@1000000010(RecRef@1000 : RecordRef;VAR TempRecordBuffer@1000000001 : TEMPORARY Record 6529);
    VAR
      KeyFldRef@1003 : FieldRef;
      KeyRef1@1002 : KeyRef;
      i@1001 : Integer;
      TempField@1000000000 : TEMPORARY Record 2000000041;
    BEGIN
      TempRecordBuffer.SETRANGE("Table No.",RecRef.NUMBER);

      IF NOT TempRecordBuffer.FIND('-') THEN BEGIN
        TempRecordBuffer.INIT;
        Gint:=Gint+1;
        TempRecordBuffer."Entry No.":=Gint;
        TempRecordBuffer."Table No." := RecRef.NUMBER;
        TempRecordBuffer."Table Name" := GetTableCaption(RecRef.NUMBER);

        TempRecordBuffer."Record Identifier" := RecRef.RECORDID;
        TempRecordBuffer."Search Record ID" := FORMAT(TempRecordBuffer."Record Identifier");

        KeyRef1 := RecRef.KEYINDEX(1);
        FOR i := 1 TO KeyRef1.FIELDCOUNT DO BEGIN
          KeyFldRef := KeyRef1.FIELDINDEX(i);
          IF i = 1 THEN
            TempRecordBuffer."Primary Key" :=
              STRSUBSTNO('%1=%2',KeyFldRef.CAPTION,FormatValue(KeyFldRef,RecRef.NUMBER))
          ELSE
            IF MAXSTRLEN(TempRecordBuffer."Primary Key") >
               STRLEN(TempRecordBuffer."Primary Key") +
               STRLEN(STRSUBSTNO(', %1=%2',KeyFldRef.CAPTION,FormatValue(KeyFldRef,RecRef.NUMBER)))
            THEN
              TempRecordBuffer."Primary Key" :=
                COPYSTR(
                  TempRecordBuffer."Primary Key" +
                  STRSUBSTNO(', %1=%2',KeyFldRef.CAPTION,FormatValue(KeyFldRef,RecRef.NUMBER)),
                  1,MAXSTRLEN(TempRecordBuffer."Primary Key"));
          CASE i OF
            1:
              BEGIN
                TempRecordBuffer."Primary Key Field 1 No." := KeyFldRef.NUMBER;
                TempRecordBuffer."Primary Key Field 1 Value" := FormatValue(KeyFldRef,RecRef.NUMBER);
              END;
            2:
              BEGIN
                TempRecordBuffer."Primary Key Field 2 No." := KeyFldRef.NUMBER;
                TempRecordBuffer."Primary Key Field 2 Value" := FormatValue(KeyFldRef,RecRef.NUMBER);
              END;
            3:
              BEGIN
                TempRecordBuffer."Primary Key Field 3 No." := KeyFldRef.NUMBER;
                TempRecordBuffer."Primary Key Field 3 Value" := FormatValue(KeyFldRef,RecRef.NUMBER);
              END;
          END;
        END;

        TempRecordBuffer.INSERT;
      END;
    END;

    LOCAL PROCEDURE GetTableCaption@1000000012(TableNumber@1001 : Integer) : Text[80];
    VAR
      AllObjWithCaption@1000 : Record 2000000058;
    BEGIN
      AllObjWithCaption.RESET;
      AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::TableData);
      AllObjWithCaption.SETRANGE("Object ID",TableNumber);
      IF AllObjWithCaption.FINDFIRST THEN
        EXIT(AllObjWithCaption."Object Caption");

      EXIT('');
    END;

    LOCAL PROCEDURE GetField@1000000011(TableNumber@1001 : Integer;FieldNumber@1002 : Integer;VAR Field2@1003 : Record 2000000041);
    VAR
      Field@1000 : Record 2000000041;
      TempField@1000000000 : TEMPORARY Record 2000000041;
    BEGIN
      IF NOT TempField.GET(TableNumber,FieldNumber) THEN BEGIN
        Field.GET(TableNumber,FieldNumber);
        TempField := Field;
        TempField.INSERT;
      END;
      Field2 := TempField;
    END;

    LOCAL PROCEDURE FormatValue@1000000013(VAR FldRef@1000 : FieldRef;TableNumber@1005 : Integer) : Text[250];
    VAR
      Field@1004 : Record 2000000041;
      OptionNo@1001 : Integer;
      OptionStr@1002 : Text[1024];
      i@1003 : Integer;
    BEGIN
      GetField(TableNumber,FldRef.NUMBER,Field);
      IF Field.Type = Field.Type::Option THEN BEGIN
        OptionNo := FldRef.VALUE;
        OptionStr := FORMAT(FldRef.OPTIONCAPTION);
        FOR i := 1 TO OptionNo DO
          OptionStr := COPYSTR(OptionStr,STRPOS(OptionStr,',') + 1);
        IF STRPOS(OptionStr,',') > 0 THEN
          IF STRPOS(OptionStr,',') = 1 THEN
            OptionStr := ''
          ELSE
            OptionStr := COPYSTR(OptionStr,1,STRPOS(OptionStr,',') - 1);
        EXIT(OptionStr);
      END;
      EXIT(FORMAT(FldRef.VALUE));
    END;

    LOCAL PROCEDURE ResetGints@1000000029();
    BEGIN
      GLineNo1:=0;
      GLineNo2:=0;
    END;

    PROCEDURE CreateOrUpdateLookups@1000000025();
    BEGIN

      IF PostLookupList(18,1,2,2) THEN ;
      IF PostLookupList(5200,1,7,2) THEN;
      IF PostLookupList(23,1,2,2) THEN;
      IF PostLookupList(13,1,2,2) THEN;
      IF PostLookupList(27,1,3,2) THEN;

      IF PostLookupList(18,1,2,1) THEN ;
      IF PostLookupList(5200,1,7,1) THEN;
      IF PostLookupList(23,1,2,1) THEN;
      IF PostLookupList(13,1,2,1) THEN;
      IF PostLookupList(27,1,3,1) THEN;
    END;

    PROCEDURE AttachFilesToParent@1000000016(FileNameToUse@1000000000 : Text;SubmissionId@1000000029 : Text;pRecordId@1000000032 : RecordID) Processed : Boolean;
    VAR
      TxtTryingToAutoProcess@1000000007 : TextConst 'ENU=Trying to auto-process entry "%1";ENG=Trying to auto-process entry "%1"';
      TxtEntryMarkedAsErrored@1000000006 : TextConst 'ENU=Not auto-processing "%1" as file attachment queue entry is marked as errored;ENG=Not auto-processing "%1" as file attachment queue entry is marked as errored';
      TxtNotAutoNav@1000000005 : TextConst 'ENU=AUTONAV not auto-processing "%1" as set to not-autonav;ENG=AUTONAV not auto-processing "%1" as set to not-autonav';
      TxtDocumentTypeNotFound@1000000004 : TextConst 'ENU=Not auto-processing "%1" as the document type was not found;ENG=Not auto-processing "%1" as the document type was not found';
      TxtErrorProcessing@1000000003 : TextConst 'ENU=Error processing "%1". Codeunit %2 returned an error: "%3";ENG=Error processing "%1". Codeunit %2 returned an error: "%3"';
      TxtTypeNotAutoProcess@1000000002 : TextConst 'ENU=Not auto-proccesing "%1" as type "%2" is not set to auto-process;ENG=Not auto-proccesing "%1" as type "%2" is not set to auto-process';
      TxtFileIdentified@1000000001 : TextConst 'ENU="""%1"" identified as file extension ""%2"" and document type ""%3""";ENG="""%1"" identified as file extension ""%2"" and document type ""%3"""';
      FAttach@1000000027 : Record 9062272;
      DocType@1000000026 : Record 9062268;
      FieldRef@1000000024 : FieldRef;
      SmartDoc@1000000023 : Codeunit 9062273;
      P1Value@1000000022 : Text[100];
      P2Value@1000000021 : Text[100];
      P3Value@1000000020 : Text[100];
      MatchFrom@1000000019 : Text[250];
      Found@1000000018 : Boolean;
      FAQueue@1000000017 : Record 9062270;
      FSO@1000000016 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      FAttachErrMsg@1000000015 : Text[250];
      PrimKeyID1@1000000014 : Integer;
      PrimKeyID2@1000000013 : Integer;
      PrimKeyID3@1000000012 : Integer;
      PrimKeyValue1@1000000011 : Text[250];
      PrimKeyValue2@1000000010 : Text[250];
      PrimKeyValue3@1000000009 : Text[250];
      FAttachIdentify@1000000008 : Codeunit 9062268;
      FileAttachmentProcessing@9062229 : Codeunit 9062600;
      TNPUtils@1000000028 : Codeunit 9062229;
      pFileBuffer@1000000031 : TEMPORARY Record 9062386;
      Dir@1000000025 : Text;
      RecRef@1000000030 : RecordRef;
      LFileName@1000000033 : Text;
      eFastFormInformation@1000000034 : TextConst 'ENU=Fast Form Information;ENG=Fast Form Information';
    BEGIN
      RecRef.GET(pRecordId);

      Dir := PathS.GetDirectoryName(FileNameToUse);

      FileSystem.GetFiles(FALSE,Dir,'*'+SubmissionId+'*',pFileBuffer);

      IF pFileBuffer.FINDSET THEN BEGIN
      REPEAT

      //File Attachment
      FAttach.INIT;
      FAttach.FILTERGROUP(4);
      FAttach.SETFILTER("Table ID",FORMAT(RecRef.NUMBER));
      PrimKeyID1 := TNPUtils.GetPrimaryKeyFieldID(RecRef.NUMBER,RecRef.GETPOSITION,1);
      IF PrimKeyID1 <> 0 THEN BEGIN
        PrimKeyValue1 := TNPUtils.GetPrimaryKey(RecRef.NUMBER,RecRef.GETPOSITION,1);
        FAttach.SETFILTER(FAttach."Primary Key FieldID 1",FORMAT(PrimKeyID1));
        FAttach.SETFILTER(FAttach."Primary Key Value 1",PrimKeyValue1);
      END;

      PrimKeyID2 := TNPUtils.GetPrimaryKeyFieldID(RecRef.NUMBER,RecRef.GETPOSITION,2);
      IF PrimKeyID2 <> 0 THEN BEGIN
        PrimKeyValue2 := TNPUtils.GetPrimaryKey(RecRef.NUMBER,RecRef.GETPOSITION,2);
        FAttach.SETFILTER(FAttach."Primary Key FieldID 2",FORMAT(PrimKeyID2));
        FAttach.SETFILTER(FAttach."Primary Key Value 2",PrimKeyValue2);
      END;

      PrimKeyID3 := TNPUtils.GetPrimaryKeyFieldID(RecRef.NUMBER,RecRef.GETPOSITION,3);
      IF PrimKeyID3 <> 0 THEN BEGIN
        PrimKeyValue3 := TNPUtils.GetPrimaryKey(RecRef.NUMBER,RecRef.GETPOSITION,3);
        FAttach.SETFILTER(FAttach."Primary Key FieldID 3",FORMAT(PrimKeyID3));
        FAttach.SETFILTER(FAttach."Primary Key Value 3",PrimKeyValue3);
      END;

      FAttachErrMsg := FileAttachmentProcessing.ImportFileAdvanced(FAttach,
        pFileBuffer.Path,
        pFileBuffer.Name,
        eFastFormInformation + ' - '+PathS.GetExtension(pFileBuffer.Path),
         PathS.GetExtension(pFileBuffer.Path),
         FALSE,
         FALSE,
         TRUE,
       '' ,
        '',
        '',
        0);


      UNTIL pFileBuffer.NEXT =0;

      END;

      EXIT(TRUE);
    END;

    PROCEDURE AttachOrphanToParent@1000000018(FileNameToUse@1000000000 : Text;SubmissionId@1000000029 : Text;pRecordId@1000000032 : RecordID) Processed : Boolean;
    VAR
      TxtTryingToAutoProcess@1000000007 : TextConst 'ENU=Trying to auto-process entry "%1";ENG=Trying to auto-process entry "%1"';
      TxtEntryMarkedAsErrored@1000000006 : TextConst 'ENU=Not auto-processing "%1" as file attachment queue entry is marked as errored;ENG=Not auto-processing "%1" as file attachment queue entry is marked as errored';
      TxtNotAutoNav@1000000005 : TextConst 'ENU=AUTONAV not auto-processing "%1" as set to not-autonav;ENG=AUTONAV not auto-processing "%1" as set to not-autonav';
      TxtDocumentTypeNotFound@1000000004 : TextConst 'ENU=Not auto-processing "%1" as the document type was not found;ENG=Not auto-processing "%1" as the document type was not found';
      TxtErrorProcessing@1000000003 : TextConst 'ENU=Error processing "%1". Codeunit %2 returned an error: "%3";ENG=Error processing "%1". Codeunit %2 returned an error: "%3"';
      TxtTypeNotAutoProcess@1000000002 : TextConst 'ENU=Not auto-proccesing "%1" as type "%2" is not set to auto-process;ENG=Not auto-proccesing "%1" as type "%2" is not set to auto-process';
      TxtFileIdentified@1000000001 : TextConst 'ENU="""%1"" identified as file extension ""%2"" and document type ""%3""";ENG="""%1"" identified as file extension ""%2"" and document type ""%3"""';
      FAttach@1000000027 : Record 9062272;
      DocType@1000000026 : Record 9062268;
      FieldRef@1000000024 : FieldRef;
      SmartDoc@1000000023 : Codeunit 9062273;
      P1Value@1000000022 : Text[100];
      P2Value@1000000021 : Text[100];
      P3Value@1000000020 : Text[100];
      MatchFrom@1000000019 : Text[250];
      Found@1000000018 : Boolean;
      FAQueue@1000000017 : Record 9062270;
      FSO@1000000016 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      FAttachErrMsg@1000000015 : Text[250];
      PrimKeyID1@1000000014 : Integer;
      PrimKeyID2@1000000013 : Integer;
      PrimKeyID3@1000000012 : Integer;
      PrimKeyValue1@1000000011 : Text[250];
      PrimKeyValue2@1000000010 : Text[250];
      PrimKeyValue3@1000000009 : Text[250];
      FAttachIdentify@1000000008 : Codeunit 9062268;
      FileAttachmentProcessing@9062229 : Codeunit 9062600;
      TNPUtils@1000000028 : Codeunit 9062229;
      pFileBuffer@1000000031 : TEMPORARY Record 9062386;
      Dir@1000000025 : Text;
      RecRef@1000000030 : RecordRef;
      LFileName@1000000033 : Text;
      eFastFormInformation@1000000034 : TextConst 'ENU=Fast Form Information;ENG=Fast Form Information';
    BEGIN
      RecRef.GET(pRecordId);

      //Filename to use will be a temp file
      //Dir := PathS.GetDirectoryName(FileNameToUse);
      //Need to get all the records that match the same submisison id
      //FileSystem.GetFiles(FALSE,Dir,'*'+SubmissionId+'*',pFileBuffer);
      //IF pFileBuffer.FINDSET THEN BEGIN
      //REPEAT

      //File Attachment
      FAttach.INIT;
      FAttach.FILTERGROUP(4);
      FAttach.SETFILTER("Table ID",FORMAT(RecRef.NUMBER));
      PrimKeyID1 := TNPUtils.GetPrimaryKeyFieldID(RecRef.NUMBER,RecRef.GETPOSITION,1);
      IF PrimKeyID1 <> 0 THEN BEGIN
        PrimKeyValue1 := TNPUtils.GetPrimaryKey(RecRef.NUMBER,RecRef.GETPOSITION,1);
        FAttach.SETFILTER(FAttach."Primary Key FieldID 1",FORMAT(PrimKeyID1));
        FAttach.SETFILTER(FAttach."Primary Key Value 1",PrimKeyValue1);
      END;

      PrimKeyID2 := TNPUtils.GetPrimaryKeyFieldID(RecRef.NUMBER,RecRef.GETPOSITION,2);
      IF PrimKeyID2 <> 0 THEN BEGIN
        PrimKeyValue2 := TNPUtils.GetPrimaryKey(RecRef.NUMBER,RecRef.GETPOSITION,2);
        FAttach.SETFILTER(FAttach."Primary Key FieldID 2",FORMAT(PrimKeyID2));
        FAttach.SETFILTER(FAttach."Primary Key Value 2",PrimKeyValue2);
      END;

      PrimKeyID3 := TNPUtils.GetPrimaryKeyFieldID(RecRef.NUMBER,RecRef.GETPOSITION,3);
      IF PrimKeyID3 <> 0 THEN BEGIN
        PrimKeyValue3 := TNPUtils.GetPrimaryKey(RecRef.NUMBER,RecRef.GETPOSITION,3);
        FAttach.SETFILTER(FAttach."Primary Key FieldID 3",FORMAT(PrimKeyID3));
        FAttach.SETFILTER(FAttach."Primary Key Value 3",PrimKeyValue3);
      END;

      FAttachErrMsg := FileAttachmentProcessing.ImportFileAdvanced(FAttach,
        FileNameToUse,
        SubmissionId + PathS.GetExtension(FileNameToUse), //File Name
        eFastFormInformation + ' - '+PathS.GetExtension(FileNameToUse),
         PathS.GetExtension(FileNameToUse),
         FALSE,
         FALSE,
         TRUE,
       '' ,
        '',
        '',
        0);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "##WebCalls##"@1000000001();
    BEGIN
    END;

    PROCEDURE TestConnection@1000000022() CanConnect : Boolean;
    BEGIN
      IF TestConnectionInt THEN BEGIN
        IF TokenText<>'' THEN
        EXIT(TRUE)
        ELSE
          EXIT(FALSE);
        END
      ELSE BEGIN
        EXIT(FALSE);
        END;
    END;

    [TryFunction]
    LOCAL PROCEDURE TestConnectionInt@1000000017();
    VAR
      HttpClient@1000000000 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      URI@1000000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      HttpContent@1000000002 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpContent";
      HttpResponseMessage@1000000003 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      HttpClientHandler@1000000004 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClientHandler";
      UrlToCall@1000000005 : Text;
      UserName@1000000006 : Text;
      Password@1000000007 : Text;
      Credentials@1000000008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      HttpRequestHeaders@1000000009 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      Encoding@1000000011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      Bytes@1000000010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      TextStr@1000000012 : Text;
      TextEnc@1000000013 : Text;
      AuthenticationHeaderValue@1000000014 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.AuthenticationHeaderValue";
      JSONConvert@1000000015 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      JSONStr@1000000016 : Text;
      XMLRootNode@1000000017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BaseAddress@1000000018 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      OK@1000000020 : Boolean;
      BigTExtStr@1000000022 : Text;
      ReturnedXMLNodeList@1000000019 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNode@1000000023 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FoundXMLNode@1000000021 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FoundListNode1@1000000024 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FoundListNode2@1000000025 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      OK1@1000000026 : Boolean;
      OK2@1000000027 : Boolean;
    BEGIN
      FFsetup.GET;
      UrlToCall:=FFsetup."Fast Form Base Url" + 'authenticate';
      URI:=URI.Uri(UrlToCall);

      FFsetup.GET();
      UserName:=FFsetup."User Name";
      Password:=FFsetup.Password;

      HttpClientHandler := HttpClientHandler.HttpClientHandler();

      HttpClient:=HttpClient.HttpClient(HttpClientHandler);
      HttpRequestHeaders := HttpClient.DefaultRequestHeaders;

      TextStr:= UserName +':'+ Password;
      Bytes := Encoding.ASCII.GetBytes(TextStr);
      TextEnc:= convert.ToBase64String(Bytes);

      //This is a specific type of header value that is needed
      AuthenticationHeaderValue:=  AuthenticationHeaderValue.AuthenticationHeaderValue('Basic',TextEnc);
      HttpClient.DefaultRequestHeaders.Authorization :=AuthenticationHeaderValue;

      HttpResponseMessage:=  HttpClient.PostAsync(URI,HttpContent).Result;
      JSONStr:=HttpResponseMessage.Content.ReadAsStringAsync.Result;

      IF FFsetup."Debug Mode" THEN BEGIN
       MESSAGE(JSONStr);
      END;

      XMLRootNode:= JSONConvert.DeserializeXmlNode(JSONStr,'root');

      //Find the session token
      OK:=FindNode(XMLRootNode,'//*[contains(name(),''sessionToken'')]',FoundXMLNode);

      IF OK THEN BEGIN
        TokenText:=FoundXMLNode.InnerXml;
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE Authenticate@1000000007();
    VAR
      HttpClient@1000000000 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      URI@1000000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      HttpContent@1000000002 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpContent";
      HttpResponseMessage@1000000003 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      HttpClientHandler@1000000004 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClientHandler";
      UrlToCall@1000000005 : Text;
      UserName@1000000006 : Text;
      Password@1000000007 : Text;
      Credentials@1000000008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      HttpRequestHeaders@1000000009 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      Encoding@1000000011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      Bytes@1000000010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      TextStr@1000000012 : Text;
      TextEnc@1000000013 : Text;
      AuthenticationHeaderValue@1000000014 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.AuthenticationHeaderValue";
      JSONConvert@1000000015 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      JSONStr@1000000016 : Text;
      XMLRootNode@1000000017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BaseAddress@1000000018 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      OK@1000000020 : Boolean;
      BigTExtStr@1000000022 : Text;
      ReturnedXMLNodeList@1000000019 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNode@1000000023 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FoundXMLNode@1000000021 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FoundListNode1@1000000024 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FoundListNode2@1000000025 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      OK1@1000000026 : Boolean;
      OK2@1000000027 : Boolean;
    BEGIN
      FFsetup.GET;
      UrlToCall:=FFsetup."Fast Form Base Url" + 'authenticate';
      URI:=URI.Uri(UrlToCall);

      FFsetup.GET();
      UserName:=FFsetup."User Name";
      Password:=FFsetup.Password;

      HttpClientHandler := HttpClientHandler.HttpClientHandler();
      HttpClient:=HttpClient.HttpClient(HttpClientHandler);
      HttpRequestHeaders := HttpClient.DefaultRequestHeaders;

      TextStr:= UserName +':'+ Password;
      Bytes := Encoding.ASCII.GetBytes(TextStr);
      TextEnc:= convert.ToBase64String(Bytes);

      //This is a specific type of header value that is needed
      AuthenticationHeaderValue:=  AuthenticationHeaderValue.AuthenticationHeaderValue('Basic',TextEnc);
      HttpClient.DefaultRequestHeaders.Authorization :=AuthenticationHeaderValue;

      HttpResponseMessage:=  HttpClient.PostAsync(URI,HttpContent).Result;
      JSONStr:=HttpResponseMessage.Content.ReadAsStringAsync.Result;

      XMLRootNode:= JSONConvert.DeserializeXmlNode(JSONStr,'root');

      //Find the session token
      OK:=FindNode(XMLRootNode,'//*[contains(name(),''sessionToken'')]',FoundXMLNode);

      IF OK THEN BEGIN
        TokenText:=FoundXMLNode.InnerXml;

      //Need to get the lists
      //Global Lists
      OK:=FindNodes(XMLRootNode,'.//*[contains(name(),''globalLists'')]',ReturnedXMLNodeList);

      IF OK THEN BEGIN
          FOREACH XMLNode IN ReturnedXMLNodeList DO BEGIN

          OK1:=FindNode(XMLNode,'.//*[contains(name(),''name'')]',FoundListNode1);
          OK2:=FindNode(XMLNode,'.//*[contains(name(),''listId'')]',FoundListNode2);
          IF (OK1 AND OK2) THEN BEGIN
          TmpListBuffer.INIT;
          TmpListBuffer."Entry No.":=TmpListBuffer.COUNT+1;
          TmpListBuffer.Type:=1; //Globallist
          TmpListBuffer.Name:=FoundListNode1.InnerXml;
          TmpListBuffer.Value:=FoundListNode2.InnerXml;
          TmpListBuffer.INSERT;
          END;
          END;
      END;

      //Lookup Lists
      OK:=FindNodes(XMLRootNode,'.//*[contains(name(),''lookupLists'')]',ReturnedXMLNodeList);
      IF OK THEN BEGIN

          FOREACH XMLNode IN ReturnedXMLNodeList DO BEGIN
          OK1:=FindNode(XMLNode,'.//*[contains(name(),''name'')]',FoundListNode1);
          OK2:=FindNode(XMLNode,'.//*[contains(name(),''listId'')]',FoundListNode2);
          IF (OK1 AND OK2) THEN BEGIN

          TmpListBuffer.INIT;
          TmpListBuffer."Entry No.":=TmpListBuffer.COUNT+1;
          TmpListBuffer.Type:=2;  //lookup
          TmpListBuffer.Name:=FoundListNode1.InnerXml;
          TmpListBuffer.Value:=FoundListNode2.InnerXml;
          TmpListBuffer.INSERT;
          END;
          END;
      END;

      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE MakeWebCalls@1000000020();
    VAR
      HttpClient@1000000000 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      URI@1000000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      HttpContent@1000000002 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpContent";
      HttpResponseMessage@1000000003 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      HttpClientHandler@1000000004 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClientHandler";
      UrlToCall@1000000005 : Text;
      UserName@1000000006 : Text;
      Password@1000000007 : Text;
      Credentials@1000000008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      HttpRequestHeaders@1000000009 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      Encoding@1000000011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      Bytes@1000000010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      TextStr@1000000012 : Text;
      TextEnc@1000000013 : Text;
      AuthenticationHeaderValue@1000000014 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.AuthenticationHeaderValue";
      JSONConvert@1000000015 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      JSONStr@1000000016 : Text;
      XMLRootNode@1000000017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BaseAddress@1000000018 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      OK@1000000020 : Boolean;
      FoundXMLNode@1000000021 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BigTExtStr@1000000022 : Text;
    BEGIN

      //######################################################################################
      //######################################################################################
      //############                                                     #####################
      //############               SAMPLE CODE                           #####################
      //############                                                     #####################
      //######################################################################################
      //######################################################################################

      EXIT;

      //Not Used sample urls
      //The authentication for this comes from the token not the users authentication token
      FFsetup.GET;
      UrlToCall:=FFsetup."Fast Form Base Url" + 'authenticate';
      //UrlToCall:='https://manage.fastfieldforms.com/api/authenticate';
      URI:=URI.Uri(UrlToCall);

      HttpClientHandler := HttpClientHandler.HttpClientHandler();
      HttpClient:=HttpClient.HttpClient(HttpClientHandler);
      HttpRequestHeaders := HttpClient.DefaultRequestHeaders;

      IF TokenText='' THEN
        Authenticate();

      HttpRequestHeaders.Add('X-Gatekeeper-SessionToken',TokenText);

      FFsetup.GET;
      UrlToCall:=FFsetup."Fast Form Base Url" + 'role';
      //UrlToCall:='https://manage.fastfieldforms.com/api/role/';
      URI:=URI.Uri(UrlToCall);
      HttpResponseMessage:=HttpClient.GetStringAsync(URI).Result;

      //Lists
      //  api/account/user
      FFsetup.GET;
      UrlToCall:=FFsetup."Fast Form Base Url" + 'lookuplists';
      //UrlToCall:='https://manage.fastfieldforms.com/api/lookuplists/';
      URI:=URI.Uri(UrlToCall);
      HttpResponseMessage:=HttpClient.GetStringAsync(URI).Result;

      //Get form type
      UrlToCall:='https://manage.fastfieldforms.com/api/form/65095';
      URI:=URI.Uri(UrlToCall);
      HttpResponseMessage:=HttpClient.GetStringAsync(URI).Result;

      //Get users
      UrlToCall:='https://manage.fastfieldforms.com/api/account/user';
      URI:=URI.Uri(UrlToCall);
      HttpResponseMessage:=HttpClient.GetStringAsync(URI).Result;

      //account/formpackage
      UrlToCall:='https://manage.fastfieldforms.com/api/account/formpackage';
      URI:=URI.Uri(UrlToCall);
      HttpResponseMessage:=HttpClient.GetStringAsync(URI).Result;
    END;

    [TryFunction]
    LOCAL PROCEDURE PostLookupList@1000000021(TableNo@1000000026 : Integer;FldNo@1000000028 : Integer;FldName@1000000029 : Integer;ListType@1000000031 : Integer);
    VAR
      HttpClient@1000000000 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      URI@1000000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      HttpContent@1000000002 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpContent";
      HttpResponseMessage@1000000003 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      HttpClientHandler@1000000004 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClientHandler";
      UrlToCall@1000000005 : Text;
      UserName@1000000006 : Text;
      Password@1000000007 : Text;
      Credentials@1000000008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      HttpRequestHeaders@1000000009 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      Encoding@1000000011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      Bytes@1000000010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      TextStr@1000000012 : Text;
      TextEnc@1000000013 : Text;
      AuthenticationHeaderValue@1000000014 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.AuthenticationHeaderValue";
      JSONConvert@1000000015 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      JSONStr@1000000016 : Text;
      XMLRootNode@1000000017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BaseAddress@1000000018 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      OK@1000000020 : Boolean;
      FoundXMLNode@1000000021 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BigTextStr@1000000022 : Text;
      HttpStringContent@1000000019 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.StringContent";
      MultipartFormDataContent@1000000023 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.MultipartFormDataContent";
      HttpStringContent2@1000000024 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.StringContent";
      HttpByteArrayContent@1000000025 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.ByteArrayContent";
      TextConverter@1000000027 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      VarTableName@1000000030 : Text;
      ListTypeText@1000000032 : Text;
      ListId@1000000033 : Text;
    BEGIN
      //We do need to work out how to get / update the current one

      IF ListType=1 THEN
        ListTypeText:='globallist';

      IF ListType=2 THEN
        ListTypeText:='lookuplist';

      IF TokenText = '' THEN
          Authenticate();

      FFsetup.GET;
      UrlToCall:=FFsetup."Fast Form Base Url" + ListTypeText;
      //UrlToCall:='https://manage.fastfieldforms.com/api/'+ListTypeText;
      URI:=URI.Uri(UrlToCall);

      HttpClientHandler := HttpClientHandler.HttpClientHandler();
      HttpClient:=HttpClient.HttpClient(HttpClientHandler);
      HttpRequestHeaders := HttpClient.DefaultRequestHeaders;

      //Get the base 64 string for the column
      BigTextStr:=CreateLookupDataFromTableNo(TableNo,FldNo,FldName,VarTableName);

      MultipartFormDataContent:=MultipartFormDataContent.MultipartFormDataContent('----------------------------');

      //Need to get the id if one exists from the Buffer List table
      TmpListBuffer.SETRANGE(TmpListBuffer.Type,ListType);
      TmpListBuffer.SETFILTER(TmpListBuffer.Name,'%1','@*'+VarTableName+'*');

      IF TmpListBuffer.FINDFIRST THEN
          ListId:=TmpListBuffer.Value
        ELSE
          ListId:='';


      HttpStringContent:=HttpStringContent.StringContent(ListId);
      MultipartFormDataContent.Add(HttpStringContent,'id');

      HttpStringContent2:=HttpStringContent2.StringContent(VarTableName);
      MultipartFormDataContent.Add(HttpStringContent2,'listname');

      Bytes:=Bytes;
      TextConverter:=TextConverter;
      Bytes:= TextConverter.FromBase64String(BigTextStr);

      HttpByteArrayContent:=HttpByteArrayContent.ByteArrayContent(Bytes);
      MultipartFormDataContent.Add(HttpByteArrayContent,'file',VarTableName+'.csv');

      HttpRequestHeaders.Add('X-Gatekeeper-SessionToken',TokenText);

      //It's a POST action.
      //The HTTPStringContent variables are all still needed at this point so can't be reused..
      HttpResponseMessage :=HttpClient.PostAsync(URI,MultipartFormDataContent).Result;

      //HttpResponseMessage.EnsureSuccessStatusCode;
      //HttpClient.Dispose();
      BigTextStr:= HttpResponseMessage.Content.ReadAsStringAsync().Result;

      //MESSAGE(FORMAT(BigTextStr));
    END;

    [TryFunction]
    PROCEDURE CreateUsers@1000000004();
    VAR
      HttpClient@1000000000 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      URI@1000000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      HttpContent@1000000002 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpContent";
      HttpResponseMessage@1000000003 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      HttpClientHandler@1000000004 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClientHandler";
      UrlToCall@1000000005 : Text;
      UserName@1000000006 : Text;
      Password@1000000007 : Text;
      Credentials@1000000008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      HttpRequestHeaders@1000000009 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      Encoding@1000000011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      Bytes@1000000010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      TextStr@1000000012 : Text;
      TextEnc@1000000013 : Text;
      AuthenticationHeaderValue@1000000014 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.AuthenticationHeaderValue";
      JSONConvert@1000000015 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      JSONStr@1000000016 : Text;
      XMLRootNode@1000000017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BaseAddress@1000000018 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      OK@1000000020 : Boolean;
      FoundXMLNode@1000000021 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BigTextStr@1000000022 : Text;
      HttpStringContent@1000000019 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.StringContent";
      MultipartFormDataContent@1000000023 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.MultipartFormDataContent";
      HttpStringContent2@1000000024 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.StringContent";
      HttpByteArrayContent@1000000025 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.ByteArrayContent";
      TextConverter@1000000027 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      VarTableName@1000000030 : Text;
      ListTypeText@1000000032 : Text;
      ListId@1000000033 : Text;
      User@1000000026 : Record 9062729;
    BEGIN

      FFsetup.GET;
      UrlToCall:=FFsetup."Fast Form Base Url" +'user';
      URI:=URI.Uri(UrlToCall);

      IF TokenText = '' THEN
        Authenticate();

      HttpClientHandler := HttpClientHandler.HttpClientHandler();
      HttpClient:=HttpClient.HttpClient(HttpClientHandler);
      HttpRequestHeaders := HttpClient.DefaultRequestHeaders;
      HttpRequestHeaders.Add('X-Gatekeeper-SessionToken',TokenText);

      IF User.FINDSET THEN BEGIN

          //DynamicsJSONMgt.AddJSonBranch('Data');
          REPEAT
          IF User."E-Mail" <>'' THEN BEGIN

              DynamicsJSONMgt.StartJSon;
              DynamicsJSONMgt.AddToJSon('username',User."E-Mail");  //email address
              DynamicsJSONMgt.AddToJSon('password','P@ssword'); // need to
              DynamicsJSONMgt.AddToJSon('firstName',COPYSTR(User.Name,1,STRPOS(User.Name,' ')-1));
              DynamicsJSONMgt.AddToJSon('lastName',COPYSTR(User.Name,STRPOS(User.Name,' ')+1));
              //DynamicsJSONMgt.EndJSonBranch;
              DynamicsJSONMgt.EndJSon;

              JSONStr := DynamicsJSONMgt.GetJSon;

              HttpStringContent:=HttpStringContent.StringContent(JSONStr);
              HttpResponseMessage :=HttpClient.PostAsync(URI,HttpStringContent).Result;
              BigTextStr:= HttpResponseMessage.Content.ReadAsStringAsync().Result;
              IF FFsetup."Debug Mode" THEN BEGIN
                MESSAGE(BigTextStr);
                END;
          END;
          UNTIL User.NEXT=0;
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE GetImage@1000000006(ImageKey@1000000028 : Text);
    VAR
      HttpClient@1000000000 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      URI@1000000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      HttpContent@1000000002 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpContent";
      HttpResponseMessage@1000000003 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      HttpClientHandler@1000000004 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClientHandler";
      UrlToCall@1000000005 : Text;
      UserName@1000000006 : Text;
      Password@1000000007 : Text;
      Credentials@1000000008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      HttpRequestHeaders@1000000009 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      Encoding@1000000011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      Bytes@1000000010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      TextStr@1000000012 : Text;
      TextEnc@1000000013 : Text;
      AuthenticationHeaderValue@1000000014 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.AuthenticationHeaderValue";
      JSONConvert@1000000015 : DotNet "'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.JsonConvert";
      JSONStr@1000000016 : Text;
      XMLRootNode@1000000017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BaseAddress@1000000018 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      OK@1000000020 : Boolean;
      FoundXMLNode@1000000021 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BigTextStr@1000000022 : Text;
      HttpStringContent@1000000019 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.StringContent";
      MultipartFormDataContent@1000000023 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.MultipartFormDataContent";
      HttpStringContent2@1000000024 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.StringContent";
      HttpByteArrayContent@1000000025 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.ByteArrayContent";
      TextConverter@1000000027 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      VarTableName@1000000030 : Text;
      ListTypeText@1000000032 : Text;
      ListId@1000000033 : Text;
      User@1000000026 : Record 9062729;
      ImageUrl@1000000029 : Text;
      FileName@1000000031 : Text;
    BEGIN


      FFsetup.GET;

      IF FFsetup."Download Image In XML Process" = FALSE THEN
        EXIT;

      //Copy file if image not exist
      IF FileSystem.FileExists(FALSE,FFsetup."Base File Storage Location"+ImageKey) THEN
        EXIT;

      UrlToCall:=FFsetup."Fast Form Base Url" +'media/amazon/download';
      URI:=URI.Uri(UrlToCall);

      IF TokenText = '' THEN
        Authenticate();

      HttpClientHandler := HttpClientHandler.HttpClientHandler();
      HttpClient:=HttpClient.HttpClient(HttpClientHandler);
      HttpRequestHeaders := HttpClient.DefaultRequestHeaders;
      HttpRequestHeaders.Add('X-Gatekeeper-SessionToken',TokenText);

      DynamicsJSONMgt.StartJSon;
      DynamicsJSONMgt.AddToJSon('key',ImageKey);  //email address
      DynamicsJSONMgt.EndJSon;

      JSONStr := DynamicsJSONMgt.GetJSon;

      HttpStringContent:=HttpStringContent.StringContent(JSONStr);
      HttpResponseMessage :=HttpClient.PostAsync(URI,HttpStringContent).Result;
      BigTextStr:= HttpResponseMessage.Content.ReadAsStringAsync().Result;

      XMLRootNode:= JSONConvert.DeserializeXmlNode(BigTextStr,'root');

      OK:=FindNode(XMLRootNode,'//downloadUrl',FoundXMLNode);
      ImageUrl:=FoundXMLNode.InnerText;

      IF ImageUrl <> '' THEN BEGIN
        DownloadToFile(ImageUrl,FileName);
        //MESSAGE(FileName);

         //Now we need to move the file from the tmp location to the real location
         FileSystem.MoveFile(FALSE, FileName,FFsetup."Base File Storage Location"+ImageKey);

      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE DownloadToFile@1000000014(Url@1000000000 : Text;VAR TempFileName@1000000001 : Text);
    VAR
      FileMgt@1000000002 : Codeunit 419;
      File@1000000003 : File;
      OutputStream@1000000004 : OutStream;
    BEGIN
      TempFileName := FileMgt.ServerTempFileName('');
      File.CREATE(TempFileName);
      File.CREATEOUTSTREAM(OutputStream);
      DownloadToStream(Url, OutputStream);
      File.CLOSE();
    END;

    [TryFunction]
    LOCAL PROCEDURE DownloadToBlob@1000000005(Url@1000000000 : Text;VAR TempBlob@1000000001 : Record 99008535);
    VAR
      OutputStream@1000000002 : OutStream;
    BEGIN
      TempBlob.Blob.CREATEOUTSTREAM(OutputStream);
      DownloadToStream(Url, OutputStream);
    END;

    [TryFunction]
    LOCAL PROCEDURE DownloadToStream@1000000003(Url@1000000000 : Text;VAR OutputStream@1000000001 : OutStream);
    VAR
      Stream@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      String@1000000005 : Codeunit 9062236;
      Credentials@1000000008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      "#web#"@1000000017 : Integer;
      WebRequestHelper@1000000016 : Codeunit 1299;
      HttpWebRequest@1000000015 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpStatusCode@1000000014 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeaders@1000000013 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      ResponseInStream@1000000012 : InStream;
      HttpWebResponse@1000000011 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      GlobalProgressDialogEnabled@1000000010 : Boolean;
      ResponseInStreamTempBlob@1000000002 : TEMPORARY Record 99008535;
      DecompressionMethods@1000000003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.DecompressionMethods";
      "##"@1000000009 : Integer;
      RequestStr@1000000020 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      StreamWriter@1000000019 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
      Encoding@1000000018 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      XmlBodyText@1000000021 : Text;
      HttpRequestHeaders@1000000022 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      TextStr@1000000025 : Text;
      TextEnc@1000000024 : Text;
      AuthenticationHeaderValue@1000000023 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.AuthenticationHeaderValue";
      Bytes@1000000026 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      TxtCred@1000000027 : Text;
      AuthStr@1000000028 : Text;
      CredCache@1000000029 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.CredentialCache";
      URI@1000000030 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      HttpClient@1000000006 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
    BEGIN
      URI:=URI.Uri(Url);
      HttpClient:=HttpClient.HttpClient();

      //ResponseInStream:= HttpClient.GetStreamAsync(URI).Result;
      Stream:= HttpClient.GetStreamAsync(URI).Result;

      COPYSTREAM(OutputStream, Stream);
      //COPYSTREAM(OutputStream, ResponseInStream);
      //Stream.Close();
      //Stream.Dispose();
      //HttpWebResponse.Dispose();
    END;

    LOCAL PROCEDURE "##JSON Helpers##"@1000000026();
    BEGIN
    END;

    LOCAL PROCEDURE CreateJSONFromFileText@1000000030(FileAsText@1000000000 : Text) MyJson : Text;
    VAR
      TextConverter@1000000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      SystemDotText@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoder";
      MemoryStream@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      BigText@1000000007 : BigText;
      Bytes@1000000005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      TextEncoding@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.ASCIIEncoding";
      MyBigStr@1000000008 : Text;
    BEGIN

      DynamicsJSONMgt.StartJSon;

      //DynamicsJSONMgt.AddJSonBranch('FormData');
      DynamicsJSONMgt.AddToJSon('id',3006);
      DynamicsJSONMgt.AddToJSon('listname','Customer');
      DynamicsJSONMgt.AddToJSon('file',FileAsText);
      DynamicsJSONMgt.EndJSon;
      //DynamicsJSONMgt.EndJSonBranch;

      MyJson := DynamicsJSONMgt.GetJSon;

      EXIT(MyJson);
    END;

    LOCAL PROCEDURE ConvertTextToBase64@1000000028(TextIn@1000000000 : Text) : Text;
    VAR
      TextConverter@1000000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      Bytes@1000000004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      TextEncoding@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.ASCIIEncoding";
      MyBigStr@1000000002 : Text;
    BEGIN
      //Take a string and conver to Base 64
      Bytes:=Bytes;
      TextEncoding := TextEncoding.ASCIIEncoding;
      Bytes:=TextEncoding.GetBytes(TextIn);
      MyBigStr:=TextConverter.ToBase64String(Bytes);

      EXIT(MyBigStr);
    END;

    LOCAL PROCEDURE ConvertBase64ToText@1000000027(Bas64StrIn@1000000000 : Text) TextOut : Text;
    VAR
      TextConverter@1000000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      SystemDotText@1000000006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoder";
      MemoryStream@1000000005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      BigText@1000000004 : BigText;
      Bytes@1000000003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      TextEncoding@1000000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.ASCIIEncoding";
      MyBigStr@1000000001 : Text;
    BEGIN
      //Not yet implemented.
      Bytes:=Bytes;
      TextConverter:=TextConverter;
      Bytes:= TextConverter.FromBase64String(Bas64StrIn);

      //convert bytes to text.
      TextEncoding := TextEncoding.ASCIIEncoding;
      TextOut:= TextEncoding.GetString(Bytes);
    END;

    LOCAL PROCEDURE GetCsvFile@1000000009();
    VAR
      FileNameTxt@1000000000 : Text;
      TempBlob@1000000001 : TEMPORARY Record 99008535;
      Base64Txt@1000000002 : Text;
    BEGIN
      //read the file.
      FileSystem.ImportFileToBlob(TRUE,FileNameTxt,TempBlob,'','');
      Base64Txt:=BLOBToolkit.ToBase64Text(TempBlob);
    END;

    LOCAL PROCEDURE CreateLookupDataFromTableNo@1000000002(TableNo@1000000000 : Integer;KeyNoField@1000000001 : Integer;KeyValueField@1000000002 : Integer;VAR VarTableName@1000000008 : Text) Base64Txt : Text;
    VAR
      RecRef@1000000003 : RecordRef;
      FldRef1@1000000004 : FieldRef;
      FldRef2@1000000005 : FieldRef;
      XMLBuffer@1000000006 : TEMPORARY Record 1235;
      FFLookupListExport@1000000007 : XMLport 9062399;
      Lint@1000000009 : Integer;
      OutStr@1000000010 : OutStream;
      TempBlob@1000000012 : TEMPORARY Record 99008535;
      Fld1Val@1000000011 : Text;
      Fld2Val@1000000013 : Text;
    BEGIN
      //Need to open the rec ref for the table
      RecRef.OPEN(TableNo);
      VarTableName:=RecRef.NAME;

      IF RecRef.FINDSET THEN BEGIN
        XMLBuffer.DELETEALL;

        //Add headers to file
        FldRef1:=RecRef.FIELD(KeyNoField);
        FldRef2:=RecRef.FIELD(KeyValueField);

        XMLBuffer.INIT;
        XMLBuffer."Entry No.":=Lint;
        XMLBuffer.Name:=FldRef1.NAME;
        XMLBuffer.Value:=FldRef2.NAME;
        XMLBuffer.INSERT(TRUE);

        REPEAT

          Fld1Val:='';
          Fld2Val:='';

          Lint:=Lint+1;
          FldRef1:=RecRef.FIELD(KeyNoField);
          FldRef2:=RecRef.FIELD(KeyValueField);

          Fld1Val:=FldRef1.VALUE;
          Fld2Val:=FldRef2.VALUE;

          IF (Fld1Val <> '') AND ( Fld2Val <>'') THEN BEGIN
            XMLBuffer.INIT;
            XMLBuffer."Entry No.":=Lint;
            XMLBuffer.Name:=FldRef1.VALUE;
            XMLBuffer.Value:=FldRef2.VALUE;
            XMLBuffer.INSERT(TRUE);
          END;

      UNTIL RecRef.NEXT=0;

      XMLBuffer.FINDSET;

      FFLookupListExport.SetDataSet(XMLBuffer);

      //Write to Blob
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      FFLookupListExport.SETDESTINATION(OutStr);
      FFLookupListExport.EXPORT;

      Base64Txt:=BLOBToolkit.ToBase64Text(TempBlob);

      END;
    END;

    LOCAL PROCEDURE "##XMLFunctions##"@1000000015();
    BEGIN
    END;

    LOCAL PROCEDURE AddElement@1(VAR XMLNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1002 : Text;NodeText@1003 : Text;NameSpace@1004 : Text;VAR CreatedXMLNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Integer;
    VAR
      NewChildNode@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element',NodeName,NameSpace);
      EXIT(AddElementToNode(XMLNode,NewChildNode,NodeText,CreatedXMLNode));
    END;

    LOCAL PROCEDURE AddRootElement@21(VAR XMLDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";NodeName@1002 : Text;VAR CreatedXMLNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      CreatedXMLNode := XMLDoc.CreateElement(NodeName);
      XMLDoc.AppendChild(CreatedXMLNode);
    END;

    LOCAL PROCEDURE AddRootElementWithPrefix@18(VAR XMLDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";NodeName@1002 : Text;Prefix@1007 : Text;NameSpace@1004 : Text;VAR CreatedXMLNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      CreatedXMLNode := XMLDoc.CreateElement(Prefix,NodeName,NameSpace);
      XMLDoc.AppendChild(CreatedXMLNode);
    END;

    LOCAL PROCEDURE AddElementWithPrefix@9(VAR XMLNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1002 : Text;NodeText@1003 : Text;Prefix@1007 : Text;NameSpace@1004 : Text;VAR CreatedXMLNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Integer;
    VAR
      NewChildNode@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NewChildNode := XMLNode.OwnerDocument.CreateElement(Prefix,NodeName,NameSpace);
      EXIT(AddElementToNode(XMLNode,NewChildNode,NodeText,CreatedXMLNode));
    END;

    LOCAL PROCEDURE AddElementToNode@10(VAR XMLNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR NewChildNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeText@1001 : Text;VAR CreatedXMLNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") ExitStatus : Integer;
    BEGIN
      IF ISNULL(NewChildNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;

      IF NodeText <> '' THEN
        NewChildNode.InnerText := NodeText;

      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;

      ExitStatus := 0;
    END;

    LOCAL PROCEDURE AddAttribute@2(VAR XMLNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1002 : Text;NodeValue@1003 : Text) : Integer;
    VAR
      XMLNewAttributeNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLNewAttributeNode := XMLNode.OwnerDocument.CreateAttribute(Name);
      EXIT(AddAttributeToNode(XMLNode,XMLNewAttributeNode,NodeValue));
    END;

    LOCAL PROCEDURE AddAttributeWithPrefix@12(VAR XMLNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Name@1002 : Text;Prefix@1005 : Text;NameSpace@1006 : Text;NodeValue@1003 : Text) : Integer;
    VAR
      XMLNewAttributeNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLNewAttributeNode := XMLNode.OwnerDocument.CreateAttribute(Prefix,Name,NameSpace);
      EXIT(AddAttributeToNode(XMLNode,XMLNewAttributeNode,NodeValue));
    END;

    LOCAL PROCEDURE AddAttributeToNode@14(VAR XMLNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR XMLNewAttributeNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeValue@1001 : Text) ExitStatus : Integer;
    BEGIN
      IF ISNULL(XMLNewAttributeNode) THEN BEGIN
        ExitStatus := 60;
        EXIT(ExitStatus)
      END;

      IF NodeValue <> '' THEN
        XMLNewAttributeNode.Value := NodeValue;

      XMLNode.Attributes.SetNamedItem(XMLNewAttributeNode);
    END;

    LOCAL PROCEDURE FindNode@3(XMLRootNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1001 : Text;VAR FoundXMLNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    BEGIN
      IF ISNULL(XMLRootNode) THEN
        EXIT(FALSE);

      FoundXMLNode := XMLRootNode.SelectSingleNode(NodePath);

      IF ISNULL(FoundXMLNode) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindNodeWithNamespace@13(XMLRootNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1001 : Text;Prefix@1004 : Text;NameSpace@1005 : Text;VAR FoundXMLNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      XMLNamespaceMgr@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
    BEGIN
      IF ISNULL(XMLRootNode) THEN
        EXIT(FALSE);

      XMLNamespaceMgr := XMLNamespaceMgr.XmlNamespaceManager(XMLRootNode.OwnerDocument.NameTable);
      XMLNamespaceMgr.AddNamespace(Prefix,NameSpace);
      FoundXMLNode := XMLRootNode.SelectSingleNode(NodePath,XMLNamespaceMgr);

      IF ISNULL(FoundXMLNode) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindNodesWithNamespace@17(XMLRootNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";XPath@1001 : Text;Prefix@1004 : Text;NameSpace@1005 : Text;VAR FoundXMLNodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList") : Boolean;
    VAR
      XMLNamespaceMgr@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
    BEGIN
      XMLNamespaceMgr := XMLNamespaceMgr.XmlNamespaceManager(XMLRootNode.OwnerDocument.NameTable);
      XMLNamespaceMgr.AddNamespace(Prefix,NameSpace);
      EXIT(FindNodesWithNamespaceManager(XMLRootNode,XPath,XMLNamespaceMgr,FoundXMLNodeList));
    END;

    LOCAL PROCEDURE FindNodesWithNamespaceManager@20(XMLRootNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";XPath@1001 : Text;XMLNamespaceMgr@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";VAR FoundXMLNodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList") : Boolean;
    BEGIN
      IF ISNULL(XMLRootNode) THEN
        EXIT(FALSE);

      FoundXMLNodeList := XMLRootNode.SelectNodes(XPath,XMLNamespaceMgr);

      IF ISNULL(FoundXMLNodeList) THEN
        EXIT(FALSE);

      IF FoundXMLNodeList.Count = 0 THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindNodeText@5(XMLRootNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1001 : Text) : Text;
    VAR
      FoundXMLNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF ISNULL(XMLRootNode) THEN
        EXIT('');

      FoundXMLNode := XMLRootNode.SelectSingleNode(NodePath);

      IF ISNULL(FoundXMLNode) THEN
        EXIT('');

      EXIT(FoundXMLNode.InnerText);
    END;

    LOCAL PROCEDURE FindNodeTextWithNamespace@16(XMLRootNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1001 : Text;Prefix@1005 : Text;NameSpace@1004 : Text) : Text;
    VAR
      XMLNamespaceMgr@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
    BEGIN
      IF Prefix = '' THEN
        ERROR(EmptyPrefixErr);

      IF ISNULL(XMLRootNode) THEN
        EXIT('');

      XMLNamespaceMgr := XMLNamespaceMgr.XmlNamespaceManager(XMLRootNode.OwnerDocument.NameTable);
      XMLNamespaceMgr.AddNamespace(Prefix,NameSpace);

      EXIT(FindNodeTextNs(XMLRootNode,NodePath,XMLNamespaceMgr));
    END;

    LOCAL PROCEDURE FindNodeTextNs@15(XMLRootNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1001 : Text;XmlNsMgr@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager") : Text;
    VAR
      FoundXMLNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      FoundXMLNode := XMLRootNode.SelectSingleNode(NodePath,XmlNsMgr);

      IF ISNULL(FoundXMLNode) THEN
        EXIT('');

      EXIT(FoundXMLNode.InnerText);
    END;

    LOCAL PROCEDURE FindNodes@4(XMLRootNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodePath@1001 : Text;VAR ReturnedXMLNodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList") : Boolean;
    BEGIN
      ReturnedXMLNodeList := XMLRootNode.SelectNodes(NodePath);

      IF ISNULL(ReturnedXMLNodeList) THEN
        EXIT(FALSE);

      IF ReturnedXMLNodeList.Count = 0 THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE FindAttribute@22(VAR XmlNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR XmlAttribute@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";AttributeName@1002 : Text) : Boolean;
    BEGIN
      XmlAttribute := XmlNode.Attributes.GetNamedItem(AttributeName);
      EXIT(NOT ISNULL(XmlAttribute));
    END;

    LOCAL PROCEDURE GetAttributeValue@23(xmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";attributeName@1002 : Text) : Text;
    VAR
      xmlAttribute@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
    BEGIN
      xmlAttribute := xmlNode.Attributes.GetNamedItem(attributeName);
      IF ISNULL(xmlAttribute) THEN
        EXIT('');

      EXIT(xmlAttribute.Value)
    END;

    LOCAL PROCEDURE AddDeclaration@11(VAR XMLDoc@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Version@1002 : Text;Encoding@1003 : Text;Standalone@1004 : Text);
    VAR
      XMLDeclaration@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDeclaration";
    BEGIN
      XMLDeclaration := XMLDoc.CreateXmlDeclaration(Version,Encoding,Standalone);
      XMLDoc.InsertBefore(XMLDeclaration,XMLDoc.DocumentElement);
    END;

    LOCAL PROCEDURE AddGroupNode@6(VAR XMLNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1002 : Text);
    VAR
      XMLNewChild@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      AddElement(XMLNode,NodeName,'','',XMLNewChild);
      XMLNode := XMLNewChild;
    END;

    LOCAL PROCEDURE AddNode@7(VAR XMLNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1002 : Text;NodeText@1003 : Text);
    VAR
      XMLNewChild@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      AddElement(XMLNode,NodeName,NodeText,'',XMLNewChild);
    END;

    LOCAL PROCEDURE AddLastNode@8(VAR XMLNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1002 : Text;NodeText@1003 : Text);
    VAR
      XMLNewChild@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      AddElement(XMLNode,NodeName,NodeText,'',XMLNewChild);
      XMLNode := XMLNode.ParentNode;
    END;

    LOCAL PROCEDURE AddNamespaces@19(VAR XmlNamespaceManager@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";XmlDocument@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      XmlAttributeCollection@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      XmlAttribute@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
    BEGIN
      XmlNamespaceManager := XmlNamespaceManager.XmlNamespaceManager(XmlDocument.NameTable);
      XmlAttributeCollection := XmlDocument.DocumentElement.Attributes;

      IF XmlDocument.DocumentElement.NamespaceURI <> '' THEN
        XmlNamespaceManager.AddNamespace('',XmlDocument.DocumentElement.NamespaceURI);

      FOREACH XmlAttribute IN XmlAttributeCollection DO
        IF STRPOS(XmlAttribute.Name,'xmlns:') = 1 THEN
          XmlNamespaceManager.AddNamespace(DELSTR(XmlAttribute.Name,1,6),XmlAttribute.Value);
    END;

    LOCAL PROCEDURE XMLEscape@93(Text@1001 : Text) : Text;
    VAR
      XMLDocument@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDocument := XMLDocument.XmlDocument;
      XMLNode := XMLDocument.CreateElement('XMLEscape');

      XMLNode.InnerText(Text);
      EXIT(XMLNode.InnerXml);
    END;

    [TryFunction]
    LOCAL PROCEDURE LoadXMLDocumentFromText@24(XmlText@1000 : Text;VAR XMLRootNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLDocument@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDocument := XMLDocument.XmlDocument;
      XMLDocument.LoadXml(XmlText);
      XMLRootNode := XMLDocument.DocumentElement;
    END;

    [TryFunction]
    LOCAL PROCEDURE LoadXMLDocumentFromInStream@25(InStream@1001 : InStream;VAR XMLRootNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLDocument@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDocument := XMLDocument.XmlDocument;
      XMLDocument.Load(InStream);
      XMLRootNode := XMLDocument.DocumentElement;
    END;

    LOCAL PROCEDURE LoadXml@1000000000(OuterXML@1000 : Text;XPath@1001 : Text);
    VAR
      XMLDocument@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlDoc@1000000003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNodeList@1000000002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlNode@1000000001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDocument := XMLDocument.XmlDocument;
      XMLDocument.LoadXml(OuterXML);

      XmlNodeList := XMLDocument.GetElementsByTagName(XPath);
    END;

    BEGIN
    {
      //how to work with xml nodes
      //http://stackoverflow.com/questions/2691426/how-to-select-nodes-where-node-name-contains-mystring
      //
      //how to work with mulitpart data
      //http://stackoverflow.com/questions/19954287/how-to-upload-file-to-server-with-http-post-multipart-form-data
      //
      //globallist=1
      //Lookuplist = 2
      //DOC NA2016.15 JH 26/04/2016 - CfMD amendments
    }
    END.
  }
}

