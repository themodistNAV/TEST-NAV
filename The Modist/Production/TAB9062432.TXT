OBJECT Table 9062432 Panel Data
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD("Panel Code");
               CheckModifyPermission();
               IF (Rec.ID = 0) THEN
                 Rec.VALIDATE(ID, NewId());
               IF (Rec.Sequence = 0) THEN
                 Rec.VALIDATE(Sequence, NewSequence());
               CreateProperties();
               PanelTimestampManagement.Add(Rec."Panel Code");
               TnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               CheckModifyPermission();
               PanelTimestampManagement.Add(Rec."Panel Code");
               TnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               CheckModifyPermission();

               PanelProperty.RESET();
               PanelProperty.SETRANGE("Parent Table ID", DATABASE::"Panel Data");
               PanelProperty.SETRANGE("Parent Code", Rec."Panel Code");
               PanelProperty.SETRANGE("Parent ID", Rec.ID);
               PanelProperty.DELETEALL(TRUE);

               PanelEvent.RESET();
               PanelEvent.SETRANGE("Parent Table ID", DATABASE::"Panel Data");
               PanelEvent.SETRANGE("Parent Code", Rec."Panel Code");
               PanelEvent.SETRANGE("Parent ID", Rec.ID);
               PanelEvent.DELETEALL(TRUE);

               TableFilterManagement.DeleteTableFilter(DATABASE::"Panel Data", Rec.GETPOSITION(FALSE));

               PanelTimestampManagement.Add(Rec."Panel Code");
             END;

    OnRename=BEGIN
               CheckModifyPermission();
               ProcessRename(xRec."Panel Code", xRec.ID, Rec."Panel Code", Rec.ID);
             END;

    CaptionML=[ENU=Panel Data;
               ENG=Panel Data];
    LookupPageID=Page9062578;
    DrillDownPageID=Page9062578;
  }
  FIELDS
  {
    { 1   ;   ;Panel Code          ;Code20        ;TableRelation=Panel;
                                                   CaptionML=[ENU=Panel Code;
                                                              ENG=Panel Code] }
    { 3   ;   ;ID                  ;Integer       ;CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 11  ;   ;Sequence            ;Integer       ;CaptionML=[ENU=Sequence;
                                                              ENG=Sequence] }
    { 12  ;   ;Data Source         ;Option        ;OnValidate=BEGIN
                                                                IF (Rec."Data Source" <> xRec."Data Source") THEN
                                                                BEGIN
                                                                  IF (Rec."Data Source" <> Rec."Data Source"::Table) THEN
                                                                    Rec.VALIDATE("Table ID", 0);
                                                                  IF (Rec."Data Source" <> Rec."Data Source"::"Quick Report") THEN
                                                                    Rec.VALIDATE("Quick Report Code", '');
                                                                END;
                                                                UpdateProperties(Rec.FIELDNO("Data Source"));
                                                                UpdateDescription();
                                                              END;

                                                   CaptionML=[ENU=Data Source;
                                                              ENG=Data Source];
                                                   OptionCaptionML=[ENU=" ,Table,Quick Report";
                                                                    ENG=" ,Table,Quick Report"];
                                                   OptionString=[ ,Table,Quick Report] }
    { 13  ;   ;Table ID            ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF (Rec."Table ID" <> xRec."Table ID") THEN
                                                                BEGIN
                                                                  IF (Rec."Table ID" <> 0) THEN
                                                                    Rec.TESTFIELD("Data Source", Rec."Data Source"::Table)
                                                                  ELSE
                                                                    TableFilterManagement.DeleteTableFilter(DATABASE::"Panel Data", Rec.GETPOSITION(FALSE));
                                                                  Rec.VALIDATE("Table Filter", '');
                                                                END;
                                                                UpdateProperties(Rec.FIELDNO("Table ID"));
                                                                UpdateDescription();
                                                                Rec.CALCFIELDS("Table Name");
                                                              END;

                                                   CaptionML=[ENU=Table ID;
                                                              ENG=Table ID] }
    { 14  ;   ;Table Name          ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Table ID)));
                                                   CaptionML=[ENU=Table Name;
                                                              ENG=Table Name];
                                                   Editable=No }
    { 15  ;   ;Table Filter        ;Text250       ;OnValidate=BEGIN
                                                                IF (Rec."Table Filter" <> xRec."Table Filter") THEN
                                                                BEGIN
                                                                  IF (Rec."Table Filter" <> '') THEN
                                                                  BEGIN
                                                                    Rec.TESTFIELD("Data Source", Rec."Data Source"::Table);
                                                                    Rec.TESTFIELD("Table ID");
                                                                  END;
                                                                END;
                                                                UpdateProperties(Rec.FIELDNO("Table Filter"));
                                                                UpdateDescription();
                                                              END;

                                                   OnLookup=BEGIN
                                                              Rec.TESTFIELD("Data Source", Rec."Data Source"::Table);
                                                              Rec.TESTFIELD("Table ID");
                                                              IF (TableFilterManagement.EditTableFilter(DATABASE::"Panel Data", Rec.GETPOSITION(FALSE), Rec.FIELDNO("Table Filter"),
                                                                  Rec."Table ID", Rec."Table Filter")) THEN
                                                              BEGIN
                                                                TableFilterManagement.CreateTableFilterText(DATABASE::"Panel Data", Rec.GETPOSITION(FALSE), Rec.FIELDNO("Table Filter"),
                                                                  Rec."Table Filter");
                                                                Rec.VALIDATE("Table Filter");
                                                              END;
                                                              UpdateProperties(Rec.FIELDNO("Table Filter"));
                                                              UpdateDescription();
                                                            END;

                                                   CaptionML=[ENU=Table Filter;
                                                              ENG=Table Filter] }
    { 16  ;   ;Quick Report Code   ;Code60        ;TableRelation="Quick Report Header";
                                                   OnValidate=BEGIN
                                                                IF (Rec."Quick Report Code" <> Rec."Quick Report Code") THEN
                                                                BEGIN
                                                                  IF (Rec."Quick Report Code" <> '') THEN
                                                                    Rec.TESTFIELD("Data Source", Rec."Data Source"::"Quick Report");
                                                                END;
                                                                UpdateProperties(Rec.FIELDNO("Quick Report Code"));
                                                                UpdateDescription();
                                                                Rec.CALCFIELDS("Quick Report Name");
                                                              END;

                                                   CaptionML=[ENU=Quick Report Code;
                                                              ENG=Quick Report Code] }
    { 17  ;   ;Quick Report Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Quick Report Header".Name WHERE (Code=FIELD(Quick Report Code)));
                                                   CaptionML=[ENU=Quick Report Name;
                                                              ENG=Quick Report Name];
                                                   Editable=No }
    { 18  ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              ENG=Blocked] }
    { 19  ;   ;Tile Group ID       ;Integer       ;TableRelation="Tile Group".ID WHERE (Panel Code=FIELD(Panel Code));
                                                   CaptionML=[ENU=Tile Group ID;
                                                              ENG=Tile Group ID] }
    { 20  ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 30  ;   ;Panel Description   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Panel.Description WHERE (Code=FIELD(Panel Code)));
                                                   CaptionML=[ENU=Panel Description;
                                                              ENG=Panel Description];
                                                   Editable=No }
    { 40  ;   ;Property Table ID   ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                UpdateProperties(Rec.FIELDNO("Property Table ID"));
                                                                Rec.CALCFIELDS("Property Table Name");
                                                              END;

                                                   CaptionML=[ENU=Property Table ID;
                                                              ENG=Property Table ID] }
    { 41  ;   ;Property Table Name ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Property Table ID)));
                                                   CaptionML=[ENU=Property Table Name;
                                                              ENG=Property Table Name];
                                                   Editable=No }
    { 50  ;   ;Events              ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Panel Event" WHERE (Parent Table ID=CONST(9062432),
                                                                                          Parent Code=FIELD(Panel Code),
                                                                                          Parent ID=FIELD(ID)));
                                                   CaptionML=[ENU=Events;
                                                              ENG=Events];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 51  ;   ;Event Description   ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Panel Event".Description WHERE (Parent Table ID=CONST(9062432),
                                                                                                       Parent Code=FIELD(Panel Code),
                                                                                                       Parent ID=FIELD(ID),
                                                                                                       Type=FIELD(FILTER(Event Type Filter))));
                                                   CaptionML=[ENU=Event Description;
                                                              ENG=Event Description];
                                                   Editable=No }
    { 52  ;   ;Event Type Filter   ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Event Type Filter;
                                                              ENG=Event Type Filter];
                                                   OptionCaptionML=[ENU=" ,Click,Double Click,Right Click,Hover,Drag,Drop,Validated,TileDrop,Menu";
                                                                    ENG=" ,Click,Double Click,Right Click,Hover,Drag,Drop,Validated,TileDrop,Menu"];
                                                   OptionString=[ ,Click,Double Click,Right Click,Hover,Drag,Drop,Validated,TileDrop,Menu] }
    { 53  ;   ;Event Exists        ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Panel Event" WHERE (Parent Table ID=CONST(9062432),
                                                                                          Parent Code=FIELD(Panel Code),
                                                                                          Parent ID=FIELD(ID),
                                                                                          Type=FIELD(Event Type Filter)));
                                                   CaptionML=[ENU=Event Exists;
                                                              ENG=Event Exists];
                                                   Editable=No }
    { 60  ;   ;Tile Group Text     ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Tile Group".Text WHERE (Panel Code=FIELD(Panel Code),
                                                                                               ID=FIELD(Tile Group ID)));
                                                   CaptionML=[ENU=Tile Group Text;
                                                              ENG=Tile Group Text];
                                                   Editable=No }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              TnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Panel Code,ID                           ;Clustered=Yes }
    {    ;Panel Code,Sequence                      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Panel@1000000009 : Record 9062363;
      PanelProperty@1000000001 : Record 9062433;
      PanelEvent@1000000005 : Record 9062369;
      EnhancedPermissionsMgt@1000000010 : Codeunit 9062277;
      PanelEventManagement@1000000006 : Codeunit 9062323;
      PanelTimestampManagement@1000000007 : Codeunit 9062385;
      PanelToolkit@1000000004 : Codeunit 9062320;
      TableFilterManagement@1000000002 : Codeunit 9062238;
      TnpToolkit@1000000000 : Codeunit 9062230;
      tInfoSetsNotImplemented@1000000008 : TextConst 'ENU=Information set support hasn''t been implemented yet.;ENG=Information set support hasn''t been implemented yet.';

    PROCEDURE "--- Initialisation ---"@1000000012();
    BEGIN
    END;

    PROCEDURE NewRecord@1000000005();
    BEGIN
      //DOC NA2015.1 - Initialising record for "OnNewRecord"

      Rec.VALIDATE("Data Source", NewSequence());
    END;

    PROCEDURE NewId@1000000000() : Integer;
    VAR
      lTilePanelData@1000000000 : Record 9062432;
    BEGIN
      //DOC NA2015.1 - Returning new ID
      //  <- New ID

      Rec.TESTFIELD("Panel Code");

      lTilePanelData.RESET();
      lTilePanelData.SETRANGE("Panel Code", Rec."Panel Code");
      IF (lTilePanelData.FINDLAST()) THEN
        EXIT(lTilePanelData.ID + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE NewSequence@1000000001() : Integer;
    VAR
      lTilePanelData@1000000000 : Record 9062432;
    BEGIN
      //DOC NA2015.1 - Returning new sequence
      //  <- New sequence

      Rec.TESTFIELD("Panel Code");

      lTilePanelData.RESET();
      lTilePanelData.SETCURRENTKEY("Panel Code", Sequence);
      lTilePanelData.SETRANGE("Panel Code", Rec."Panel Code");
      IF (lTilePanelData.FINDLAST()) THEN
        EXIT(lTilePanelData.Sequence + 10)
      ELSE
        EXIT(10);
    END;

    PROCEDURE InitRecord@1000000011();
    BEGIN
      //DOC NA2015.1 - Record initialisation

      Rec.VALIDATE(Sequence, NewSequence());
    END;

    PROCEDURE "--- General ---"@1000000013();
    BEGIN
    END;

    PROCEDURE ProcessRename@1000000016(pFromPanelCode@1000000000 : Code[20];pFromId@1000000002 : Integer;pToPanelCode@1000000001 : Code[20];pToId@1000000003 : Integer);
    BEGIN
      //DOC NA2015.2 - Processing rename (tables with non-standard relations)
      //  -> pFromPanelCode: From panel code
      //  -> pFromId: From ID
      //  -> pToPanelCode: To panel code
      //  -> pToId: To ID
    END;

    PROCEDURE UpdateDescription@1000000007();
    VAR
      eTableView@1000000000 : TextConst 'ENU=Table "%1" %2;ENG=Table "%1" %2';
      eTable@1000000001 : TextConst 'ENU=Table "%1";ENG=Table "%1"';
      eQuickReport@1000000002 : TextConst 'ENU=Quick Report "%1";ENG=Quick Report "%1"';
    BEGIN
      //DOC NA2015.1 - Updating description

      CASE (Rec."Data Source") OF
        Rec."Data Source"::Table:
          BEGIN
            Rec.CALCFIELDS("Table Name");
            IF (Rec."Table Filter" <> '') THEN
              Rec.VALIDATE(Description, STRSUBSTNO(eTableView, Rec."Table Name", Rec."Table Filter"))
            ELSE
              Rec.VALIDATE(Description, STRSUBSTNO(eTable, Rec."Table Name"));
          END;
        Rec."Data Source"::"Quick Report":
          BEGIN
            Rec.CALCFIELDS("Quick Report Name");
            Rec.VALIDATE(Description, STRSUBSTNO(eQuickReport, Rec."Quick Report Name"));
          END;
        ELSE
          Rec.VALIDATE(Description, '');
      END;
    END;

    PROCEDURE CreateProperties@1000000002();
    VAR
      lTile@1000000000 : Record 9062367;
      eDataNotSupported@1000000001 : TextConst 'ENU=Panel data is not supported for panel control of type "%1";ENG=Panel data is not supported for panel control of type "%1"';
    BEGIN
      //DOC NA2015.1 - Creating properties

      Rec.VALIDATE("Property Table ID", DATABASE::Tile);
      CreateProperty(lTile.FIELDNO(Text));
      CreateProperty(lTile.FIELDNO(Info));
      CreateProperty(lTile.FIELDNO("Background Colour Code"));
      CreateProperty(lTile.FIELDNO(Image));
      CreateProperty(lTile.FIELDNO(Size));
      CreateProperty(lTile.FIELDNO("Parameter 1"));
      CreateProperty(lTile.FIELDNO("Parameter 2"));
      CreateProperty(lTile.FIELDNO("Parameter 3"));
      CreateProperty(lTile.FIELDNO("Parameter 4"));
      CreateProperty(lTile.FIELDNO("Parameter 5"));
      CreateProperty(lTile.FIELDNO("Parameter 6"));
    END;

    PROCEDURE CreateProperty@1000000004(pPropertyId@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Creating one field
      //  -> pPropertyId: Property ID

      PanelProperty.RESET();
      PanelProperty.SETRANGE("Parent Table ID", DATABASE::"Panel Data");
      PanelProperty.SETRANGE("Parent Code", Rec."Panel Code");
      PanelProperty.SETRANGE("Parent ID", Rec.ID);
      PanelProperty.SETRANGE("Property Table ID", Rec."Property Table ID");
      PanelProperty.SETRANGE("Property ID", pPropertyId);
      IF (PanelProperty.ISEMPTY) THEN
      BEGIN
        CLEAR(PanelProperty);
        PanelProperty.INIT();
        PanelProperty.VALIDATE("Parent Table ID", DATABASE::"Panel Data");
        PanelProperty.VALIDATE("Parent Code", Rec."Panel Code");
        PanelProperty."Parent ID" := Rec.ID;
        PanelProperty.VALIDATE("Property Table ID", Rec."Property Table ID");
        PanelProperty.VALIDATE("Property ID", pPropertyId);
        PanelProperty.VALIDATE("Data Source", Rec."Data Source");
        PanelProperty.VALIDATE("Table ID", Rec."Table ID");
        PanelProperty.VALIDATE("Quick Report Code", Rec."Quick Report Code");
        PanelProperty.INSERT(TRUE);
      END;
    END;

    PROCEDURE UpdateProperties@1000000003(pFieldId@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Updating tile list data field
      //  -> pFieldId: Field ID to update

      PanelProperty.RESET();
      PanelProperty.SETRANGE("Parent Table ID", DATABASE::"Panel Data");
      PanelProperty.SETRANGE("Parent Code", Rec."Panel Code");
      PanelProperty.SETRANGE("Parent ID", Rec.ID);
      IF (PanelProperty.FINDSET(TRUE)) THEN
      REPEAT
        CASE (pFieldId) OF
          Rec.FIELDNO("Data Source"):
            PanelProperty.VALIDATE(Type, Rec."Data Source");
          Rec.FIELDNO("Table ID"):
            PanelProperty.VALIDATE("Table ID", Rec."Table ID");
          Rec.FIELDNO("Table Filter"):
            PanelProperty.VALIDATE("Table Filter", Rec."Table Filter");
          Rec.FIELDNO("Property Table ID"):
            PanelProperty.VALIDATE("Property Table ID", Rec."Property Table ID");
          Rec.FIELDNO("Quick Report Code"):
            PanelProperty.VALIDATE("Quick Report Code", Rec."Quick Report Code");
        END;
        PanelProperty.MODIFY(TRUE);
      UNTIL (PanelProperty.NEXT() = 0);
    END;

    LOCAL PROCEDURE CheckModifyPermission@1000000041();
    BEGIN
      //DOC NA2016.15 - Checking modify permission (given to the panel)

      IF ( NOT (Panel.GET(Rec."Panel Code"))) THEN
        EXIT;
      EnhancedPermissionsMgt.CheckPanelModifyPermission(Panel, USERID());
    END;

    PROCEDURE "--- Information ---"@1000000026();
    BEGIN
    END;

    PROCEDURE PageCaption@1000000039() : Text[250];
    VAR
      eCaption@1000000000 : TextConst 'ENU=%1 - %2;ENG=%1 - %2';
    BEGIN
      //DOC NA2015.1 - Returning page caption
      //  <- The caption

      Rec.CALCFIELDS("Panel Description");
      EXIT(STRSUBSTNO(eCaption, Rec."Panel Description", Rec.Description));
    END;

    PROCEDURE "--- Lookups ---"@1000000019();
    BEGIN
    END;

    PROCEDURE ValidateTileGroupText@1000000017(pTileGroupText@1000000000 : Text[100]);
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2015.1 - Validating tile group text
      //  -> pTileGroupText: The text

      IF (PanelToolkit.ValidateTileGroupText(Rec."Panel Code", Rec."Tile Group ID", pTileGroupText)) THEN
        Rec.VALIDATE("Tile Group ID");
    END;

    PROCEDURE TileGroupLookup@1000000018();
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2015.1 - Performing lookup for tile group

      IF (PanelToolkit.TileGroupLookup(Rec."Panel Code", Rec."Tile Group ID")) THEN
        Rec.VALIDATE("Tile Group ID");
    END;

    PROCEDURE "--- Events ---"@1000000052();
    BEGIN
    END;

    PROCEDURE EventsInformation@1000000021() : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning events information
      //  <- The information

      Rec.CALCFIELDS(Events);
      PanelEventManagement.EventsInformation(Rec.Events);
    END;

    PROCEDURE ClickEventInformation@1000000051() : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning click event information
      //  <- The information

      EXIT(EventInformation(Rec."Event Type Filter"::Click));
    END;

    PROCEDURE EventInformation@1000000050(pEventType@1000000000 : Integer) : Text[250];
    BEGIN
      //DOC NA2015.1 - Returning event information
      //  -> pEventType: Event type
      //  <- The information

      Rec.SETRANGE("Event Type Filter", pEventType);
      Rec.CALCFIELDS("Event Description");
      EXIT(Rec."Event Description");
    END;

    PROCEDURE ShowEvents@1000000015();
    BEGIN
      //DOC NA2015.1 - Showing events

      PanelEventManagement.ShowEvents(DATABASE::"Panel Data", Rec."Panel Code", Rec.ID);
    END;

    PROCEDURE ShowEvent@1000000055(pEventType@1000000000 : Integer);
    BEGIN
      //DOC NA2015.1 - Showing an event
      //  -> pEventType: Event type

      PanelEventManagement.ShowEvent(DATABASE::"Panel Data", Rec."Panel Code", Rec.ID, pEventType);
    END;

    BEGIN
    {
      //DOC NA2015.1  JH 10/10/2013 - Created
      //DOC NA2015.1  JH 15/04/2014 - Tile panels 3
      //DOC NA2015.8  JH 22/06/2015 - Resurrected for 2015
      //DOC NA2016.8  JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.15 JH 05/05/2016 - Enhanced permissions
    }
    END.
  }
}

