OBJECT Report 7131 Import Item Budget from Excel
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Import Item Budget from Excel;
               ENG=Import Item Budget from Excel];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF ToItemBudgetName = '' THEN
                    ERROR(Text000);

                  IF NOT ItemBudgetName.GET(AnalysisArea,ToItemBudgetName) THEN BEGIN
                    IF NOT CONFIRM(Text001,FALSE,ToItemBudgetName) THEN
                      CurrReport.BREAK;
                    ItemBudgetName."Analysis Area" := AnalysisArea;
                    ItemBudgetName.Name := ToItemBudgetName;
                    ItemBudgetName.INSERT;
                  END ELSE BEGIN
                    IF ItemBudgetName.Blocked THEN
                      ERROR(Text002,ItemBudgetEntry.FIELDCAPTION("Budget Name"),ToItemBudgetName);
                    IF NOT CONFIRM(
                         Text003,FALSE,
                         LOWERCASE(FORMAT(SELECTSTR(ImportOption + 1,Text010))),
                         ToItemBudgetName)
                    THEN
                      CurrReport.BREAK;
                  END;

                  ExcelBuf.LOCKTABLE;
                  ItemBudgetBuf.LOCKTABLE;

                  ExcelBuf.OpenBook(ServerFileName,SheetName);
                  ExcelBuf.ReadSheet;

                  AnalyseData;
                END;

    OnPostReport=BEGIN
                   ExcelBuf.DELETEALL;
                   ItemBudgetBuf.DELETEALL;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;ItemBudgetBuf       ;
               DataItemTable=Table7136;
               DataItemTableView=SORTING(Item No.,Source Type,Source No.,Location Code,Global Dimension 1 Code,Global Dimension 2 Code,Budget Dimension 1 Code,Budget Dimension 2 Code,Budget Dimension 3 Code,Date);
               OnPreDataItem=BEGIN
                               RecNo := 0;

                               IF ImportOption = ImportOption::"Replace entries" THEN BEGIN
                                 ItemBudgetEntry.SETRANGE("Analysis Area",AnalysisArea);
                                 ItemBudgetEntry.SETRANGE("Budget Name",ToItemBudgetName);
                                 ItemBudgetEntry.DELETEALL(TRUE);
                               END;

                               ItemBudgetEntry.RESET;
                               IF ItemBudgetEntry.FINDLAST THEN
                                 EntryNo := ItemBudgetEntry."Entry No." + 1
                               ELSE
                                 EntryNo := 1;
                             END;

               OnAfterGetRecord=BEGIN
                                  RecNo := RecNo + 1;
                                  ItemBudgetEntry.INIT;
                                  ItemBudgetEntry.VALIDATE("Entry No.",EntryNo);
                                  ItemBudgetEntry.VALIDATE("Analysis Area",AnalysisArea);
                                  ItemBudgetEntry.VALIDATE("Budget Name",ToItemBudgetName);
                                  ItemBudgetEntry.VALIDATE("Item No.","Item No.");
                                  ItemBudgetEntry.VALIDATE("Location Code","Location Code");
                                  ItemBudgetEntry.VALIDATE(Date,Date);
                                  ItemBudgetEntry.VALIDATE(Description,Description);
                                  ItemBudgetEntry.VALIDATE("Source Type","Source Type");
                                  ItemBudgetEntry.VALIDATE("Source No.","Source No.");
                                  ItemBudgetEntry.VALIDATE("Sales Amount","Sales Amount");
                                  ItemBudgetEntry.VALIDATE(Quantity,Quantity);
                                  ItemBudgetEntry.VALIDATE("Cost Amount","Cost Amount");
                                  ItemBudgetEntry.VALIDATE("Global Dimension 1 Code","Global Dimension 1 Code");
                                  ItemBudgetEntry.VALIDATE("Global Dimension 2 Code","Global Dimension 2 Code");
                                  ItemBudgetEntry.VALIDATE("Budget Dimension 1 Code","Budget Dimension 1 Code");
                                  ItemBudgetEntry.VALIDATE("Budget Dimension 2 Code","Budget Dimension 2 Code");
                                  ItemBudgetEntry.VALIDATE("Budget Dimension 3 Code","Budget Dimension 3 Code");
                                  ItemBudgetEntry.VALIDATE("User ID",USERID);
                                  ItemBudgetEntry.INSERT(TRUE);
                                  EntryNo := EntryNo + 1;
                                END;

               OnPostDataItem=BEGIN
                                IF RecNo > 0 THEN
                                  MESSAGE(Text004,ItemBudgetEntry.TABLECAPTION,RecNo);
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               PurchValueTypeVisible := TRUE;
               SalesValueTypeVisible := TRUE;
             END;

      OnOpenPage=VAR
                   ItemBudgetName@1000 : Record 7132;
                 BEGIN
                   Description := Text005 + FORMAT(WORKDATE);
                   IF NOT ItemBudgetName.GET(AnalysisArea,ToItemBudgetName) THEN
                     ToItemBudgetName := '';

                   ValueType := ValueTypeHidden;
                   SalesValueTypeVisible := AnalysisArea = AnalysisArea::Sales;
                   PurchValueTypeVisible := AnalysisArea = AnalysisArea::Purchase;
                 END;

      OnQueryClosePage=VAR
                         FileMgt@1001 : Codeunit 419;
                       BEGIN
                         IF CloseAction = ACTION::OK THEN BEGIN
                           ServerFileName := FileMgt.UploadFile(Text006,ExcelExtensionTok);
                           IF ServerFileName = '' THEN
                             EXIT(FALSE);

                           SheetName := ExcelBuf.SelectSheetsName(ServerFileName);
                           IF SheetName = '' THEN
                             EXIT(FALSE);
                         END;
                       END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 9   ;2   ;Field     ;
                  CaptionML=[ENU=Budget Name;
                             ENG=Budget Name];
                  SourceExpr=ToItemBudgetName;
                  OnLookup=VAR
                             ItemBudgetName@1002 : Record 7132;
                           BEGIN
                             ItemBudgetName.FILTERGROUP := 2;
                             ItemBudgetName.SETRANGE("Analysis Area",AnalysisArea);
                             ItemBudgetName.FILTERGROUP := 0;
                             IF PAGE.RUNMODAL(PAGE::"Item Budget Names",ItemBudgetName) = ACTION::LookupOK THEN BEGIN
                               Text := ItemBudgetName.Name;
                               EXIT(TRUE);
                             END;
                           END;
                            }

      { 7   ;2   ;Field     ;
                  CaptionML=[ENU=Option;
                             ENG=Option];
                  OptionCaptionML=[ENU=Replace entries,Add entries;
                                   ENG=Replace entries,Add entries];
                  SourceExpr=ImportOption }

      { 5   ;2   ;Field     ;
                  CaptionML=[ENU=Description;
                             ENG=Description];
                  SourceExpr=Description }

      { 15  ;2   ;Field     ;
                  Name=PurchValueType;
                  CaptionML=[ENU=Import Value as;
                             ENG=Import Value as];
                  OptionCaptionML=[ENU=,Cost Amount,Quantity;
                                   ENG=,Cost Amount,Quantity];
                  SourceExpr=ValueType;
                  Visible=PurchValueTypeVisible }

      { 13  ;2   ;Field     ;
                  Name=SalesValueType;
                  CaptionML=[ENU=Import Value as;
                             ENG=Import Value as];
                  OptionCaptionML=[ENU=Sales Amount,COGS Amount,Quantity;
                                   ENG=Sales Amount,COGS Amount,Quantity];
                  SourceExpr=ValueType;
                  Visible=SalesValueTypeVisible }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You must specify a budget name to import to.;ENG=You must specify a budget name to import to.';
      Text001@1001 : TextConst 'ENU=Do you want to create Item Budget Name %1?;ENG=Do you want to create Item Budget Name %1?';
      Text002@1002 : TextConst 'ENU=%1 %2 is blocked. You cannot import entries.;ENG=%1 %2 is blocked. You cannot import entries.';
      Text003@1003 : TextConst 'ENU=Are you sure you want to %1 for Budget Name %2?;ENG=Are you sure you want to %1 for Budget Name %2?';
      Text004@1004 : TextConst 'ENU=%1 table has been successfully updated with %2 entries.;ENG=%1 table has been successfully updated with %2 entries.';
      Text005@1005 : TextConst 'ENU="Imported from Excel ";ENG="Imported from Excel "';
      Text006@1006 : TextConst 'ENU=Import Excel File;ENG=Import Excel File';
      Text007@1023 : TextConst 'ENU=Table Data;ENG=Table Data';
      Text008@1022 : TextConst 'ENU=Show as Lines;ENG=Show as Lines';
      Text009@1009 : TextConst 'ENU=Show as Columns;ENG=Show as Columns';
      Text010@1010 : TextConst 'ENU=Replace Entries,Add Entries;ENG=Replace Entries,Add Entries';
      Text011@1011 : TextConst 'ENU=The text %1 can only be specified once in the Excel worksheet.;ENG=The text %1 can only be specified once in the Excel worksheet.';
      Text012@1017 : TextConst 'ENU=The filters specified by worksheet must be placed in the lines before the table.;ENG=The filters specified by worksheet must be placed in the lines before the table.';
      Text013@1015 : TextConst 'ENU=Date Filter;ENG=Date Filter';
      ExcelBuf@1027 : Record 370;
      GLSetup@1034 : Record 98;
      ItemBudgetName@1053 : Record 7132;
      ItemBudgetEntry@1013 : Record 7134;
      ItemBudgetManagement@1024 : Codeunit 7130;
      Window@1040 : Dialog;
      ServerFileName@1028 : Text;
      SheetName@1038 : Text[250];
      Description@1041 : Text[50];
      ToItemBudgetName@1039 : Code[10];
      RecNo@1016 : Integer;
      EntryNo@1012 : Integer;
      ImportOption@1054 : 'Replace entries,Add entries';
      AnalysisArea@1048 : 'Sales,Purchase,Inventory';
      ValueType@1057 : 'Sales Amount,COGS / Cost Amount,Quantity';
      ValueTypeHidden@1026 : 'Sales Amount,COGS / Cost Amount,Quantity';
      GlSetupRead@1029 : Boolean;
      Text014@1014 : TextConst 'ENU=Customer Filter;ENG=Customer Filter';
      Text015@1021 : TextConst 'ENU=Vendor Filter;ENG=Vendor Filter';
      Text016@1008 : TextConst 'ENU=Analyzing Data...\\;ENG=Analysing Data...\\';
      Text017@1007 : TextConst 'ENU=Item Filter;ENG=Item Filter';
      Text018@1018 : TextConst 'ENU=%1 is not a valid dimension value.;ENG=%1 is not a valid dimension value.';
      Text019@1020 : TextConst 'ENU=%1 is not a valid line definition.;ENG=%1 is not a valid line definition.';
      Text020@1019 : TextConst 'ENU=%1 is not a valid column definition.;ENG=%1 is not a valid column definition.';
      Text021@1025 : TextConst 'ENU=You must specify a dimension value in row %1, column %2.;ENG=You must specify a dimension value in row %1, column %2.';
      SalesValueTypeVisible@19059405 : Boolean INDATASET;
      PurchValueTypeVisible@19069465 : Boolean INDATASET;
      ExcelExtensionTok@1030 : TextConst '@@@={Locked};ENU=.xlsx;ENG=.xlsx';

    LOCAL PROCEDURE AnalyseData@2();
    VAR
      DateFilter@1003 : Text[30];
      LineDimCode@1014 : Text[30];
      ColumnDimCode@1013 : Text[30];
      ItemFilter@1004 : Code[250];
      LocationFilter@1017 : Code[10];
      GlobalDim1Filter@1009 : Code[250];
      GlobalDim2Filter@1008 : Code[250];
      BudgetDim1Filter@1007 : Code[250];
      BudgetDim2Filter@1006 : Code[250];
      BudgetDim3Filter@1005 : Code[250];
      SourceNoFilter@1010 : Code[250];
      CurrLineDimValue@1000 : Code[20];
      CurrColumnDimValue@1001 : Code[20];
      TotalRecNo@1002 : Integer;
      HeaderRowNo@1011 : Integer;
      SourceTypeFilter@1012 : ' ,Customer,Vendor,Item';
      LineDimOption@1016 : 'Item,Customer,Vendor,Period,Location,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3';
      ColumnDimOption@1015 : 'Item,Customer,Vendor,Period,Location,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3';
    BEGIN
      Window.OPEN(Text016 + '@1@@@@@@@@@@@@@@@@@@@@@@@@@\');
      TotalRecNo := ExcelBuf.COUNT;

      ItemBudgetBuf.DELETEALL;

      IF ExcelBuf.FIND('-') THEN
        REPEAT
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
          CASE TRUE OF
            STRPOS(ExcelBuf."Cell Value as Text",Text007) <> 0:
              BEGIN
                IF HeaderRowNo = 0 THEN
                  HeaderRowNo := ExcelBuf."Row No."
                ELSE
                  ERROR(STRSUBSTNO(Text011,Text007));

                ConvertFiltersToValue(
                  DateFilter,
                  ItemFilter,
                  GlobalDim1Filter,
                  GlobalDim2Filter,
                  BudgetDim1Filter,
                  BudgetDim2Filter,
                  BudgetDim3Filter,
                  SourceNoFilter,
                  SourceTypeFilter);

                IF ItemBudgetManagement.DimCodeNotAllowed(LineDimCode,ItemBudgetName) THEN
                  ERROR(Text019,LineDimCode);

                IF ItemBudgetManagement.DimCodeNotAllowed(ColumnDimCode,ItemBudgetName) THEN
                  ERROR(Text020,ColumnDimCode);

                ItemBudgetManagement.SetLineAndColDim(
                  ItemBudgetName,
                  LineDimCode,
                  LineDimOption,
                  ColumnDimCode,
                  ColumnDimOption);
              END;
            STRPOS(ExcelBuf."Cell Value as Text",IsGlobalDimFilter(1)) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  GlobalDim1Filter := ExcelBuf."Cell Value as Text";
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",IsGlobalDimFilter(2)) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  GlobalDim2Filter := ExcelBuf."Cell Value as Text";
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",IsBudgetDimFilter(1)) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  BudgetDim1Filter := ExcelBuf."Cell Value as Text";
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",IsBudgetDimFilter(2)) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  BudgetDim2Filter := ExcelBuf."Cell Value as Text";
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",IsBudgetDimFilter(3)) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  BudgetDim3Filter := ExcelBuf."Cell Value as Text";
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",Text017) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  ItemFilter := ExcelBuf."Cell Value as Text";
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",Text013) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  DateFilter := ExcelBuf."Cell Value as Text";
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",Text014) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN BEGIN
                  SourceTypeFilter := SourceTypeFilter::Customer;
                  SourceNoFilter := ExcelBuf."Cell Value as Text";
                END;
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",Text015) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN BEGIN
                  SourceTypeFilter := SourceTypeFilter::Vendor;
                  SourceNoFilter := ExcelBuf."Cell Value as Text";
                END;
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",Text008) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  LineDimCode := ExcelBuf."Cell Value as Text";
                ExcelBuf.SETRANGE("Row No.");
              END;
            STRPOS(ExcelBuf."Cell Value as Text",Text009) <> 0:
              BEGIN
                CheckFilterRowNo(HeaderRowNo);
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                IF ExcelBuf.NEXT <> 0 THEN
                  ColumnDimCode := ExcelBuf."Cell Value as Text";
                ExcelBuf.SETRANGE("Row No.");
              END;
            (ExcelBuf."Row No." > HeaderRowNo) AND (HeaderRowNo <> 0):
              BEGIN
                CurrLineDimValue := ExcelBuf."Cell Value as Text";
                ExcelBuf.SETRANGE("Row No.",ExcelBuf."Row No.");
                WHILE ExcelBuf.NEXT <> 0 DO BEGIN
                  CurrColumnDimValue := GetCurrColumnDimValue(ExcelBuf."Column No.",HeaderRowNo);
                  ExchangeFiltersWithDimValue(
                    CurrLineDimValue,
                    CurrColumnDimValue,
                    LineDimOption,
                    ColumnDimOption,
                    DateFilter,
                    ItemFilter,
                    LocationFilter,
                    GlobalDim1Filter,
                    GlobalDim2Filter,
                    BudgetDim1Filter,
                    BudgetDim2Filter,
                    BudgetDim3Filter,
                    SourceNoFilter,
                    SourceTypeFilter);

                  ItemBudgetBuf.INIT;
                  ItemBudgetBuf."Item No." := ItemFilter;
                  IF SourceTypeFilter <> 0 THEN
                    ItemBudgetBuf."Source Type" := SourceTypeFilter
                  ELSE
                    ItemBudgetBuf."Source Type" := LineDimOption;
                  ItemBudgetBuf."Source No." := SourceNoFilter;
                  ItemBudgetBuf."Location Code" := LocationFilter;
                  ItemBudgetBuf."Global Dimension 1 Code" := GlobalDim1Filter;
                  ItemBudgetBuf."Global Dimension 2 Code" := GlobalDim2Filter;
                  ItemBudgetBuf."Budget Dimension 1 Code" := BudgetDim1Filter;
                  ItemBudgetBuf."Budget Dimension 2 Code" := BudgetDim2Filter;
                  ItemBudgetBuf."Budget Dimension 3 Code" := BudgetDim3Filter;
                  EVALUATE(ItemBudgetBuf.Date,DateFilter);
                  CASE ValueType OF
                    ValueType::"Sales Amount":
                      EVALUATE(ItemBudgetBuf."Sales Amount",ExcelBuf."Cell Value as Text");
                    ValueType::"COGS / Cost Amount":
                      EVALUATE(ItemBudgetBuf."Cost Amount",ExcelBuf."Cell Value as Text");
                    ValueType::Quantity:
                      EVALUATE(ItemBudgetBuf.Quantity,ExcelBuf."Cell Value as Text");
                  END;
                  ItemBudgetBuf.INSERT;
                END;
                ExcelBuf.SETRANGE("Row No.");
              END;
          END;
        UNTIL ExcelBuf.NEXT = 0;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE ExchangeFiltersWithDimValue@10(CurrLineDimValue@1000 : Code[20];CurrColumnDimValue@1001 : Code[20];LineDimOption@1003 : 'Item,Customer,Vendor,Period,Location,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3';ColumnDimOption@1002 : 'Item,Customer,Vendor,Period,Location,Global Dimension 1,Global Dimension 2,Budget Dimension 1,Budget Dimension 2,Budget Dimension 3';VAR DateFilter@1012 : Text[30];VAR ItemFilter@1011 : Code[250];VAR LocationFilter@1013 : Code[10];VAR GlobalDim1Filter@1010 : Code[250];VAR GlobalDim2Filter@1009 : Code[250];VAR BudgetDim1Filter@1008 : Code[250];VAR BudgetDim2Filter@1007 : Code[250];VAR BudgetDim3Filter@1006 : Code[250];VAR SourceNoFilter@1005 : Code[250];VAR SourceTypeFilter@1004 : ' ,Customer,Vendor,Item');
    BEGIN
      CASE LineDimOption OF
        LineDimOption::Item:
          ItemFilter := CurrLineDimValue;
        LineDimOption::Customer:
          BEGIN
            SourceNoFilter := CurrLineDimValue;
            IF SourceTypeFilter = SourceTypeFilter::" " THEN
              SourceTypeFilter := SourceTypeFilter::Customer;
          END;
        LineDimOption::Vendor:
          BEGIN
            SourceNoFilter := CurrLineDimValue;
            IF SourceTypeFilter = SourceTypeFilter::" " THEN
              SourceTypeFilter := SourceTypeFilter::Vendor;
          END;
        LineDimOption::Period:
          DateFilter := CurrLineDimValue;
        LineDimOption::Location:
          LocationFilter := COPYSTR(CurrLineDimValue,1,MAXSTRLEN(LocationFilter));
        LineDimOption::"Global Dimension 1":
          GlobalDim1Filter := CurrLineDimValue;
        LineDimOption::"Global Dimension 2":
          GlobalDim2Filter := CurrLineDimValue;
        LineDimOption::"Budget Dimension 1":
          BudgetDim1Filter := CurrLineDimValue;
        LineDimOption::"Budget Dimension 2":
          BudgetDim2Filter := CurrLineDimValue;
        LineDimOption::"Budget Dimension 3":
          BudgetDim3Filter := CurrLineDimValue;
        ELSE
          ERROR(Text018,CurrLineDimValue);
      END;

      CASE ColumnDimOption OF
        ColumnDimOption::Item:
          ItemFilter := CurrColumnDimValue;
        ColumnDimOption::Customer:
          BEGIN
            SourceNoFilter := CurrColumnDimValue;
            IF SourceTypeFilter = SourceTypeFilter::" " THEN
              SourceTypeFilter := SourceTypeFilter::Customer;
          END;
        ColumnDimOption::Vendor:
          BEGIN
            SourceNoFilter := CurrColumnDimValue;
            IF SourceTypeFilter = SourceTypeFilter::" " THEN
              SourceTypeFilter := SourceTypeFilter::Vendor;
          END;
        ColumnDimOption::Period:
          DateFilter := CurrColumnDimValue;
        ColumnDimOption::Location:
          LocationFilter := CurrColumnDimValue;
        ColumnDimOption::"Global Dimension 1":
          GlobalDim1Filter := CurrColumnDimValue;
        ColumnDimOption::"Global Dimension 2":
          GlobalDim2Filter := CurrColumnDimValue;
        ColumnDimOption::"Budget Dimension 1":
          BudgetDim1Filter := CurrColumnDimValue;
        ColumnDimOption::"Budget Dimension 2":
          BudgetDim2Filter := CurrColumnDimValue;
        ColumnDimOption::"Budget Dimension 3":
          BudgetDim3Filter := CurrColumnDimValue;
        ELSE
          ERROR(Text018,CurrColumnDimValue);
      END;
    END;

    LOCAL PROCEDURE GetCurrColumnDimValue@7(ColNo@1000 : Integer;HeaderRowNo@1002 : Integer) : Code[20];
    VAR
      ExcelBuf2@1001 : Record 370;
    BEGIN
      IF NOT ExcelBuf2.GET(HeaderRowNo,ColNo) THEN
        ERROR(Text021,HeaderRowNo,ColNo);
      EXIT(ExcelBuf2."Cell Value as Text");
    END;

    LOCAL PROCEDURE ConvertFiltersToValue@13(VAR DateFilter@1005 : Text[30];VAR ItemFilter@1006 : Code[250];VAR GlobalDim1Filter@1011 : Code[250];VAR GlobalDim2Filter@1010 : Code[250];VAR BudgetDim1Filter@1009 : Code[250];VAR BudgetDim2Filter@1008 : Code[250];VAR BudgetDim3Filter@1007 : Code[250];VAR SourceNoFilter@1012 : Code[250];SourceTypeFilter@1013 : ' ,Customer,Vendor,Item');
    VAR
      Item@1000 : Record 27;
      Calendar@1001 : Record 2000000007;
      Cust@1002 : Record 18;
      Vend@1003 : Record 23;
      DimValue@1004 : Record 349;
      CurrDate@1014 : Date;
    BEGIN
      IF ItemFilter <> '' THEN BEGIN
        Item.SETFILTER("No.",ItemFilter);
        ItemFilter := Item.GETRANGEMIN("No.");
        Item.GET(ItemFilter);
      END;

      IF DateFilter <> '' THEN BEGIN
        Calendar.SETFILTER("Period Start",DateFilter);
        DateFilter := FORMAT(Calendar.GETRANGEMIN("Period Start"));
        EVALUATE(CurrDate,DateFilter);
        Calendar.GET(Calendar."Period Type"::Date,CurrDate);
      END;

      IF SourceNoFilter <> '' THEN
        CASE SourceTypeFilter OF
          SourceTypeFilter::Customer:
            BEGIN
              Cust.SETFILTER("No.",SourceNoFilter);
              SourceNoFilter := Cust.GETRANGEMIN("No.");
              Cust.GET(SourceNoFilter);
            END;
          SourceTypeFilter::Vendor:
            BEGIN
              Vend.SETFILTER("No.",SourceNoFilter);
              SourceNoFilter := Vend.GETRANGEMIN("No.");
              Vend.GET(SourceNoFilter);
            END;
        END;

      GetGLSetup;
      IF GlobalDim1Filter <> '' THEN BEGIN
        DimValue.SETFILTER(Code,GlobalDim1Filter);
        GlobalDim1Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(GLSetup."Global Dimension 1 Code",GlobalDim1Filter);
      END;

      IF GlobalDim2Filter <> '' THEN BEGIN
        DimValue.SETFILTER(Code,GlobalDim2Filter);
        GlobalDim2Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(GLSetup."Global Dimension 2 Code",GlobalDim2Filter);
      END;

      IF BudgetDim1Filter <> '' THEN BEGIN
        DimValue.SETFILTER(Code,BudgetDim1Filter);
        BudgetDim1Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(ItemBudgetName."Budget Dimension 1 Code",BudgetDim1Filter);
      END;

      IF BudgetDim2Filter <> '' THEN BEGIN
        DimValue.SETFILTER(Code,BudgetDim2Filter);
        BudgetDim2Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(ItemBudgetName."Budget Dimension 2 Code",BudgetDim2Filter);
      END;

      IF BudgetDim3Filter <> '' THEN BEGIN
        DimValue.SETFILTER(Code,BudgetDim3Filter);
        BudgetDim3Filter := DimValue.GETRANGEMIN(Code);
        DimValue.GET(ItemBudgetName."Budget Dimension 3 Code",BudgetDim3Filter);
      END;
    END;

    LOCAL PROCEDURE CheckFilterRowNo@12(HeaderRowNo@1000 : Integer);
    BEGIN
      IF (HeaderRowNo <> 0) AND (ExcelBuf."Row No." > HeaderRowNo) THEN
        ERROR(Text012);
    END;

    LOCAL PROCEDURE IsGlobalDimFilter@3(DimNo@1000 : Integer) : Text[30];
    VAR
      Dim@1001 : Record 348;
    BEGIN
      GetGLSetup;
      CASE DimNo OF
        1:
          IF Dim.GET(GLSetup."Global Dimension 1 Code") THEN;
        2:
          IF Dim.GET(GLSetup."Global Dimension 2 Code") THEN;
      END;
      EXIT(Dim."Filter Caption");
    END;

    LOCAL PROCEDURE IsBudgetDimFilter@11(DimNo@1000 : Integer) : Text[30];
    VAR
      Dim@1001 : Record 348;
    BEGIN
      CASE DimNo OF
        1:
          IF Dim.GET(ItemBudgetName."Budget Dimension 1 Code") THEN;
        2:
          IF Dim.GET(ItemBudgetName."Budget Dimension 2 Code") THEN;
        3:
          IF Dim.GET(ItemBudgetName."Budget Dimension 3 Code") THEN;
      END;
      EXIT(Dim."Filter Caption");
    END;

    LOCAL PROCEDURE GetGLSetup@5();
    BEGIN
      IF NOT GlSetupRead THEN
        GLSetup.GET;
      GlSetupRead := TRUE;
    END;

    PROCEDURE SetParameters@6(NewToItemBudgetName@1000 : Code[10];NewAnalysisArea@1001 : Integer;NewValueType@1002 : Integer);
    BEGIN
      ToItemBudgetName := NewToItemBudgetName;
      AnalysisArea := NewAnalysisArea;
      ValueTypeHidden := NewValueType;
    END;

    PROCEDURE SetFileNameSilent@1(NewFileName@1000 : Text);
    BEGIN
      ServerFileName := NewFileName;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

