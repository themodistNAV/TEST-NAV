OBJECT Table 9062491 Panel Template
{
  OBJECT-PROPERTIES
  {
    Date=24/09/15;
    Time=12:24:24 PM;
    Version List=NA2016.8;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Rec.TESTFIELD(Code);
               mTnpToolkit.UpdateCreatedBy(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               mTnpToolkit.UpdateModifiedBy(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               CheckOnDeletion();
             END;

    CaptionML=[ENU=Panel Template;
               ENG=Panel Template];
    LookupPageID=Page9062686;
    DrillDownPageID=Page9062686;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;OnValidate=BEGIN
                                                                mTnpToolkit.CodeToName(Rec.Code, Rec.Name);
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              ENG=Code] }
    { 2   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 3   ;   ;Sequence            ;Integer       ;CaptionML=[ENU=Sequence;
                                                              ENG=Sequence] }
    { 4   ;   ;Preferred Width     ;Integer       ;OnValidate=BEGIN
                                                                IF (Rec."Minimum Width" = 0) THEN
                                                                  Rec."Minimum Width" := Rec."Preferred Width";
                                                                IF (Rec."Maximum Width" = 0) THEN
                                                                  Rec."Maximum Width" := Rec."Preferred Width";
                                                              END;

                                                   CaptionML=[ENU=Preferred Width;
                                                              ENG=Preferred Width];
                                                   MinValue=0 }
    { 5   ;   ;Preferred Height    ;Integer       ;OnValidate=BEGIN
                                                                IF (Rec."Minimum Height" = 0) THEN
                                                                  Rec."Minimum Height" := Rec."Preferred Height";
                                                                IF (Rec."Maximum Height" = 0) THEN
                                                                  Rec."Maximum Height" := Rec."Preferred Height";
                                                              END;

                                                   CaptionML=[ENU=Preferred Height;
                                                              ENG=Preferred Height];
                                                   MinValue=0 }
    { 6   ;   ;Minimum Width       ;Integer       ;CaptionML=[ENU=Minimum Width;
                                                              ENG=Minimum Width];
                                                   MinValue=0 }
    { 7   ;   ;Minimum Height      ;Integer       ;CaptionML=[ENU=Minimum Height;
                                                              ENG=Minimum Height];
                                                   MinValue=0 }
    { 8   ;   ;Maximum Width       ;Integer       ;CaptionML=[ENU=Maximum Width;
                                                              ENG=Maximum Width];
                                                   MinValue=0 }
    { 9   ;   ;Maximum Height      ;Integer       ;CaptionML=[ENU=Maximum Height;
                                                              ENG=Maximum Height];
                                                   MinValue=0 }
    { 10  ;   ;Panel Type          ;Option        ;CaptionML=[ENU=Panel Type;
                                                              ENG=Panel Type];
                                                   OptionCaptionML=[ENU=" ,Tile Panel,Tile List";
                                                                    ENG=" ,Tile Panel,Tile List"];
                                                   OptionString=[ ,Tile Panel,Tile List] }
    { 11  ;   ;Default for Panel Type;Boolean     ;OnValidate=VAR
                                                                lPanelSize@1000000000 : Record 9062491;
                                                              BEGIN
                                                                IF (Rec."Default for Panel Type" <> xRec."Default for Panel Type") THEN
                                                                 IF (Rec."Default for Panel Type") THEN
                                                                 BEGIN
                                                                    lPanelSize.RESET();
                                                                    lPanelSize.SETRANGE("Panel Type", Rec."Panel Type");
                                                                    lPanelSize.SETFILTER(Code, '<>%1', Rec.Code);
                                                                    lPanelSize.SETRANGE("Default for Panel Type", TRUE);
                                                                    lPanelSize.MODIFYALL("Default for Panel Type", FALSE, TRUE);
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Default for Panel Type;
                                                              ENG=Default for Panel Type] }
    { 12  ;   ;Auto Refresh Every  ;Integer       ;InitValue=10000;
                                                   CaptionML=[ENU=Auto Refresh Every;
                                                              ENG=Auto Refresh Every];
                                                   MinValue=0 }
    { 13  ;   ;Use Cache           ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Use Cache;
                                                              ENG=Use Cache] }
    { 14  ;   ;Show Text           ;Boolean       ;CaptionML=[ENU=Show Text;
                                                              ENG=Show Text] }
    { 15  ;   ;Text Font Size      ;Integer       ;CaptionML=[ENU=Text Font Size;
                                                              ENG=Text Font Size];
                                                   MinValue=0 }
    { 16  ;   ;Text Font Style     ;Option        ;CaptionML=[ENU=Text Font Style;
                                                              ENG=Text Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline] }
    { 17  ;   ;Text Colour Code    ;Code20        ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Text Colour Code;
                                                              ENG=Text Colour Code] }
    { 18  ;   ;Margin              ;Code20        ;OnValidate=BEGIN
                                                                mMarginToolkit.ValidateMargin(Rec.Margin);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (mMarginToolkit.MarginLookup(Rec.Margin)) THEN
                                                                Rec.VALIDATE(Margin);
                                                            END;

                                                   CaptionML=[ENU=Margin;
                                                              ENG=Margin] }
    { 19  ;   ;Padding             ;Code20        ;OnValidate=BEGIN
                                                                mMarginToolkit.ValidatePadding(Rec.Padding);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (mMarginToolkit.MarginLookup(Rec.Padding)) THEN
                                                                Rec.VALIDATE(Padding);
                                                            END;

                                                   CaptionML=[ENU=Padding;
                                                              ENG=Padding] }
    { 20  ;   ;Space Between Groups;Integer       ;CaptionML=[ENU=Space Between Groups;
                                                              ENG=Space Between Groups];
                                                   MinValue=0 }
    { 21  ;   ;Show Group Headers  ;Boolean       ;CaptionML=[ENU=Show Group Headers;
                                                              ENG=Show Group Headers] }
    { 22  ;   ;Group Header Font Size;Integer     ;CaptionML=[ENU=Group Header Font Size;
                                                              ENG=Group Header Font Size];
                                                   MinValue=0 }
    { 23  ;   ;Group Header Font Style;Option     ;CaptionML=[ENU=Group Header Font Style;
                                                              ENG=Group Header Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline] }
    { 24  ;   ;Group Header Colour Code;Code20    ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Group Header Colour Code;
                                                              ENG=Group Header Colour Code] }
    { 25  ;   ;Tile Size           ;Integer       ;CaptionML=[ENU=Tile Size;
                                                              ENG=Tile Size];
                                                   MinValue=0 }
    { 26  ;   ;Tile Background Colour Code;Code20 ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Tile Background Colour Code;
                                                              ENG=Tile Background Colour Code] }
    { 27  ;   ;Tile Rows           ;Integer       ;CaptionML=[ENU=Tile Rows;
                                                              ENG=Tile Rows];
                                                   MinValue=0 }
    { 28  ;   ;Tile Padding        ;Code20        ;OnValidate=BEGIN
                                                                mMarginToolkit.ValidatePadding(Rec."Tile Padding");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (mMarginToolkit.MarginLookup(Rec."Tile Padding")) THEN
                                                                Rec.VALIDATE("Tile Padding");
                                                            END;

                                                   CaptionML=[ENU=Tile Padding;
                                                              ENG=Tile Padding] }
    { 29  ;   ;Space Between Tiles ;Integer       ;CaptionML=[ENU=Space Between Tiles;
                                                              ENG=Space Between Tiles];
                                                   MinValue=0 }
    { 30  ;   ;Tile Text Font Size ;Integer       ;CaptionML=[ENU=Tile Text Font Size;
                                                              ENG=Tile Text Font Size];
                                                   MinValue=0 }
    { 31  ;   ;Tile Text Font Style;Option        ;CaptionML=[ENU=Tile Text Font Style;
                                                              ENG=Tile Text Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline] }
    { 32  ;   ;Tile Text Colour Code;Code20       ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Tile Text Colour Code;
                                                              ENG=Tile Text Colour Code] }
    { 33  ;   ;Tile Text Alignment ;Option        ;CaptionML=[ENU=Tile Text Alignment;
                                                              ENG=Tile Text Alignment];
                                                   OptionCaptionML=[ENU=" ,Top Left,Top Center,Top Right,Middle Left,Middle Center,Middle Right,Bottom Left,Bottom Center,Bottom Right";
                                                                    ENG=" ,Top Left,Top Center,Top Right,Middle Left,Middle Center,Middle Right,Bottom Left,Bottom Center,Bottom Right"];
                                                   OptionString=[ ,Top Left,Top Center,Top Right,Middle Left,Middle Center,Middle Right,Bottom Left,Bottom Center,Bottom Right] }
    { 34  ;   ;Tile Info Font Size ;Integer       ;CaptionML=[ENU=Tile Info Font Size;
                                                              ENG=Tile Info Font Size];
                                                   MinValue=0 }
    { 35  ;   ;Tile Info Font Style;Option        ;CaptionML=[ENU=Tile Info Font Style;
                                                              ENG=Tile Info Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline] }
    { 36  ;   ;Tile Info Colour Code;Code20       ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Tile Info Colour Code;
                                                              ENG=Tile Info Colour Code] }
    { 37  ;   ;Tile Info Alignment ;Option        ;CaptionML=[ENU=Tile Info Alignment;
                                                              ENG=Tile Info Alignment];
                                                   OptionCaptionML=[ENU=" ,Top Left,Top Center,Top Right,Middle Left,Middle Center,Middle Right,Bottom Left,Bottom Center,Bottom Right";
                                                                    ENG=" ,Top Left,Top Center,Top Right,Middle Left,Middle Center,Middle Right,Bottom Left,Bottom Center,Bottom Right"];
                                                   OptionString=[ ,Top Left,Top Center,Top Right,Middle Left,Middle Center,Middle Right,Bottom Left,Bottom Center,Bottom Right] }
    { 38  ;   ;Large Tile Text Font Size;Integer  ;CaptionML=[ENU=Large Tile Text Font Size;
                                                              ENG=Large Tile Text Font Size];
                                                   MinValue=0 }
    { 39  ;   ;Large Tile Text Font Style;Option  ;CaptionML=[ENU=Large Tile Text Font Style;
                                                              ENG=Large Tile Text Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline] }
    { 40  ;   ;Large Tile Text Colour Code;Code20 ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Large Tile Text Colour Code;
                                                              ENG=Large Tile Text Colour Code] }
    { 41  ;   ;Large Tile Info Font Size;Integer  ;CaptionML=[ENU=Large Tile Info Font Size;
                                                              ENG=Large Tile Info Font Size];
                                                   MinValue=0 }
    { 42  ;   ;Large Tile Info Font Style;Option  ;CaptionML=[ENU=Large Tile Info Font Style;
                                                              ENG=Large Tile Info Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline] }
    { 43  ;   ;Large Tile Info Colour Code;Code20 ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Large Tile Info Colour Code;
                                                              ENG=Large Tile Info Colour Code] }
    { 44  ;   ;Small Tile Text Font Size;Integer  ;CaptionML=[ENU=Small Tile Text Font Size;
                                                              ENG=Small Tile Text Font Size];
                                                   MinValue=0 }
    { 45  ;   ;Small Tile Text Font Style;Option  ;CaptionML=[ENU=Small Tile Text Font Style;
                                                              ENG=Small Tile Text Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline] }
    { 46  ;   ;Small Tile Text Colour Code;Code20 ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Small Tile Text Colour Code;
                                                              ENG=Small Tile Text Colour Code] }
    { 47  ;   ;Small Tile Info Font Size;Integer  ;CaptionML=[ENU=Small Tile Info Font Size;
                                                              ENG=Small Tile Info Font Size];
                                                   MinValue=0 }
    { 48  ;   ;Small Tile Info Font Style;Option  ;CaptionML=[ENU=Small Tile Info Font Style;
                                                              ENG=Small Tile Info Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline] }
    { 49  ;   ;Small Tile Info Colour Code;Code20 ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Small Tile Info Colour Code;
                                                              ENG=Small Tile Info Colour Code] }
    { 50  ;   ;Animate Arrival     ;Boolean       ;CaptionML=[ENU=Animate Arrival;
                                                              ENG=Animate Arrival] }
    { 51  ;   ;Animate Tiles       ;Boolean       ;CaptionML=[ENU=Animate Tiles;
                                                              ENG=Animate Tiles] }
    { 52  ;   ;Tile Animation Type ;Option        ;CaptionML=[ENU=Tile Animation Type;
                                                              ENG=Tile Animation Type];
                                                   OptionCaptionML=[ENU=" ,Default,Fade,Random Segmented Fade,Scroll Down,Scroll Left,Scroll Right,Scroll Top,Segmented Fade";
                                                                    ENG=" ,Default,Fade,Random Segmented Fade,Scroll Down,Scroll Left,Scroll Right,Scroll Top,Segmented Fade"];
                                                   OptionString=[ ,Default,Fade,Random Segmented Fade,Scroll Down,Scroll Left,Scroll Right,Scroll Top,Segmented Fade] }
    { 53  ;   ;Tile Animation Min. Interval;Integer;
                                                   CaptionML=[ENU=Tile Animation Min. Interval;
                                                              ENG=Tile Animation Min. Interval];
                                                   MinValue=0 }
    { 54  ;   ;Tile Animation Max. Interval;Integer;
                                                   CaptionML=[ENU=Tile Animation Max. Interval;
                                                              ENG=Tile Animation Max. Interval];
                                                   MinValue=0 }
    { 55  ;   ;Show Links          ;Boolean       ;CaptionML=[ENU=Show Links;
                                                              ENG=Show Links] }
    { 56  ;   ;Links Width         ;Integer       ;CaptionML=[ENU=Links Width;
                                                              ENG=Links Width];
                                                   MinValue=0 }
    { 57  ;   ;Link Font Size      ;Integer       ;CaptionML=[ENU=Link Font Size;
                                                              ENG=Link Font Size];
                                                   MinValue=0 }
    { 58  ;   ;Link Font Style     ;Option        ;CaptionML=[ENU=Link Font Style;
                                                              ENG=Link Font Style];
                                                   OptionCaptionML=[ENU=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline";
                                                                    ENG=" ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline"];
                                                   OptionString=[ ,Bold,Italic,Underline,Bold + Italic,Italic + Underline,Bold + Italic + Underline] }
    { 59  ;   ;Link Colour Code    ;Code20        ;TableRelation="System Colour";
                                                   CaptionML=[ENU=Link Colour Code;
                                                              ENG=Link Colour Code] }
    { 60  ;   ;Link Margin         ;Code20        ;OnValidate=BEGIN
                                                                mMarginToolkit.ValidateMargin(Rec."Link Margin");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (mMarginToolkit.MarginLookup(Rec."Link Margin")) THEN
                                                                Rec.VALIDATE("Link Margin");
                                                            END;

                                                   CaptionML=[ENU=Link Margin;
                                                              ENG=Link Margin] }
    { 61  ;   ;Link Padding        ;Code20        ;OnValidate=BEGIN
                                                                mMarginToolkit.ValidatePadding(Rec."Link Padding");
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF (mMarginToolkit.MarginLookup(Rec."Link Padding")) THEN
                                                                Rec.VALIDATE("Link Padding");
                                                            END;

                                                   CaptionML=[ENU=Link Padding;
                                                              ENG=Link Padding] }
    { 70  ;   ;Update Caption      ;Boolean       ;CaptionML=[ENU=Update Caption;
                                                              ENG=Update Caption] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              mTnpToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              mTnpToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Sequence,Code                            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      mMarginToolkit@1000000002 : Codeunit 9062379;
      mPanelTemplateToolkit@1000000003 : Codeunit 9062575;
      mTilePanelToolkit@1000000001 : Codeunit 9062320;
      mTnpToolkit@1000000000 : Codeunit 9062230;

    LOCAL PROCEDURE CheckOnDeletion@1000000006();
    VAR
      lDeletionCheck@1000000000 : Codeunit 9062384;
    BEGIN
      //DOC NC2015.1 - Checking on deletion

      lDeletionCheck.AddTable(DATABASE::Panel);
      lDeletionCheck.CheckMultipleTables(DATABASE::"Panel Template", Rec.Code, 'Panel Size Code');
    END;

    PROCEDURE UpdateTilePanels@1000000000();
    VAR
      eConfirmation@1000000000 : TextConst 'ENU=Do you want to update all tile panels derived from template "%1"?;ENG=Do you want to update all tile panels derived from template "%1"?';
      eConfirmation2@1000000001 : TextConst 'ENU=Are you SURE you want to update all tile panels derived from template "%1"?;ENG=Are you SURE you want to update all tile panels derived from template "%1"?';
      lTilePanel@1000000002 : Record 9062363;
      eFinalMessage@1000000003 : TextConst 'ENU=All tile panels derived from template "%1" have been updated.;ENG=All tile panels derived from template "%1" have been updated.';
    BEGIN
      //DOC NC2015.1 - Updating panels with the size

      IF (GUIALLOWED) THEN
      BEGIN
        IF ( NOT (CONFIRM(eConfirmation, FALSE, Rec.Code))) THEN
          EXIT;
        IF ( NOT (CONFIRM(eConfirmation2, FALSE, Rec.Code))) THEN
          EXIT;
      END;

      lTilePanel.RESET();
      lTilePanel.SETRANGE("Panel Template Code", Rec.Code);
      IF (lTilePanel.FINDSET(TRUE)) THEN
      REPEAT
        lTilePanel.ApplyTemplate(Rec.Code, TRUE);
        lTilePanel.MODIFY(TRUE);
      UNTIL (lTilePanel.NEXT() = 0);

      IF (GUIALLOWED) THEN
        MESSAGE(eFinalMessage, Rec.Code);
    END;

    PROCEDURE CopyFrom@1000000002() : Boolean;
    BEGIN
      //DOC NA2015.8 - Copying panel template from another one
      //  <- TRUE = Copied, FALSE = Cancelled

      EXIT(mPanelTemplateToolkit.CopyTemplate(Rec, TRUE));
    END;

    PROCEDURE ShowTilePanels@1000000001();
    VAR
      lTilePanel@1000000002 : Record 9062363;
    BEGIN
      //DOC NC2015.1 - Showing panels with the size

      lTilePanel.RESET();
      lTilePanel.SETRANGE("Panel Template Code", Rec.Code);

      PAGE.RUN(0, lTilePanel);
    END;

    BEGIN
    {
      //DOC NA2015.1 JH 19/02/2014 - Created
      //DOC NA2015.1 JH 23/04/2014 - Panels 3
      //DOC NA2015.8 JH 25/06/2015 - Tile lists, copying added
      //DOC NA2016.8 JH 28/08/2015 - Upgraded to 2016
    }
    END.
  }
}

