OBJECT Page 1292 Payment Application
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Payment Application;
               ENG=Payment Application];
    DeleteAllowed=No;
    SourceTable=Table1293;
    DelayedInsert=Yes;
    SourceTableView=SORTING(Sorting Order)
                    ORDER(Ascending);
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Review,Show,Details;
                                ENG=New,Process,Report,Review,Show,Details];
    OnOpenPage=BEGIN
                 CODEUNIT.RUN(CODEUNIT::"Get Bank Stmt. Line Candidates",Rec);
                 SETCURRENTKEY("Sorting Order","Stmt To Rem. Amount Difference");
                 ASCENDING(TRUE);

                 IF FINDFIRST THEN;
               END;

    OnNewRecord=BEGIN
                  TransferFromBankAccReconLine(BankAccReconLine);
                END;

    OnAfterGetCurrRecord=BEGIN
                           UpdateTotals;
                           LineEditable := "Applies-to Entry No." = 0;
                         END;

    ActionList=ACTIONS
    {
      { 7       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 10      ;1   ;ActionGroup;
                      CaptionML=[ENU=Review;
                                 ENG=Review] }
      { 9       ;2   ;Action    ;
                      Name=Accept;
                      CaptionML=[ENU=Accept Applications;
                                 ENG=Accept Applications];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Approve;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 IF BankAccReconLine.Difference > 0 THEN
                                   IF NOT CONFIRM(STRSUBSTNO(CreditTheAccountQst,BankAccReconLine.GetAppliedToName,BankAccReconLine.Difference)) THEN
                                     EXIT;

                                 BankAccReconLine.AcceptApplication;
                                 CurrPage.CLOSE;
                               END;
                                }
      { 8       ;2   ;Action    ;
                      Name=Reject;
                      CaptionML=[ENU=Remove Applications;
                                 ENG=Remove Applications];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Reject;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 IF CONFIRM(RemoveApplicationsQst) THEN
                                   RemoveApplications;
                               END;
                                }
      { 11      ;1   ;ActionGroup;
                      CaptionML=[ENU=Show;
                                 ENG=Show] }
      { 35      ;2   ;Action    ;
                      Name=AllOpenEntries;
                      CaptionML=[ENU=All Open Entries;
                                 ENG=All Open Entries];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ViewDetails;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 SETRANGE(Applied);
                                 SETRANGE("Account Type");
                                 SETRANGE("Account No.");

                                 IF FINDFIRST THEN;
                               END;
                                }
      { 37      ;2   ;Action    ;
                      Name=RelatedPartyOpenEntries;
                      CaptionML=[ENU=Related-Party Open Entries;
                                 ENG=Related-Party Open Entries];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ViewDocumentLine;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 SETRANGE(Applied);

                                 BankAccReconLine.GET(
                                   BankAccReconLine."Statement Type",BankAccReconLine."Bank Account No.",
                                   BankAccReconLine."Statement No.",BankAccReconLine."Statement Line No.");

                                 IF BankAccReconLine."Account No." <> '' THEN BEGIN
                                   SETRANGE("Account No.",BankAccReconLine."Account No.");
                                   SETRANGE("Account Type",BankAccReconLine."Account Type");
                                 END;

                                 IF FINDFIRST THEN;
                               END;
                                }
      { 36      ;2   ;Action    ;
                      Name=AppliedEntries;
                      CaptionML=[ENU=Applied Entries;
                                 ENG=Applied Entries];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ViewRegisteredOrder;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 SETRANGE(Applied,TRUE);
                                 SETRANGE("Account Type");
                                 SETRANGE("Account No.");

                                 IF FINDFIRST THEN;
                               END;
                                }
      { 42      ;    ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 43      ;1   ;ActionGroup;
                      CaptionML=[ENU=Details;
                                 ENG=Details] }
      { 38      ;2   ;Action    ;
                      Name=ShowBankTransactionDetails;
                      CaptionML=[ENU=Bank Transaction Details;
                                 ENG=Bank Transaction Details];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ExternalDocument;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 DataExchField@1001 : Record 1221;
                               BEGIN
                                 DataExchField.SETRANGE("Data Exch. No.",BankAccReconLine."Data Exch. Entry No.");
                                 DataExchField.SETRANGE("Line No.",BankAccReconLine."Data Exch. Line No.");
                                 PAGE.RUN(PAGE::"Bank Statement Line Details",DataExchField);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 29  ;0   ;Container ;
                ContainerType=ContentArea }

    { 30  ;1   ;Group     ;
                Name=PaymentInformation;
                CaptionML=[ENU=Payment Information;
                           ENG=Payment Information];
                GroupType=Group }

    { 39  ;2   ;Field     ;
                Name=PaymentStatus;
                CaptionML=[ENU=Payment Status;
                           ENG=Payment Status];
                SourceExpr=Status;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TRUE }

    { 31  ;2   ;Field     ;
                Name=TransactionDate;
                CaptionML=[ENU=Transaction Date;
                           ENG=Transaction Date];
                SourceExpr=BankAccReconLine."Transaction Date";
                Editable=FALSE }

    { 32  ;2   ;Field     ;
                Name=TransactionAmount;
                CaptionML=[ENU=Transaction Amount;
                           ENG=Transaction Amount];
                SourceExpr=BankAccReconLine."Statement Amount";
                Editable=FALSE }

    { 33  ;2   ;Field     ;
                Name=BankAccReconLineDescription;
                CaptionML=[ENU=Transaction Text;
                           ENG=Transaction Text];
                SourceExpr=BankAccReconLine."Transaction Text";
                Editable=FALSE }

    { 34  ;1   ;Group     ;
                CaptionML=[ENU=Open Entries;
                           ENG=Open Entries];
                GroupType=Group }

    { 28  ;2   ;Group     ;
                CaptionML=[ENU=Open Entries;
                           ENG=Open Entries];
                GroupType=Repeater }

    { 19  ;3   ;Field     ;
                Name=AppliedAmount;
                CaptionML=[ENU=Applied Amount;
                           ENG=Applied Amount];
                BlankZero=Yes;
                SourceExpr="Applied Amt. Incl. Discount";
                Style=Strong;
                StyleExpr=TRUE;
                OnValidate=BEGIN
                             UpdateAfterChangingApplication;
                           END;
                            }

    { 20  ;3   ;Field     ;
                Name=Applied;
                SourceExpr=Applied;
                OnValidate=BEGIN
                             UpdateAfterChangingApplication;
                           END;
                            }

    { 17  ;3   ;Field     ;
                Name=RemainingAmountAfterPosting;
                CaptionML=[ENU=Remaining Amount After Posting;
                           ENG=Remaining Amount After Posting];
                SourceExpr=GetRemainingAmountAfterPostingValue }

    { 14  ;3   ;Field     ;
                SourceExpr="Applies-to Entry No.";
                Editable=FALSE;
                OnDrillDown=BEGIN
                              AppliesToEntryNoDrillDown;
                            END;
                             }

    { 12  ;3   ;Field     ;
                SourceExpr="Due Date";
                Editable=FALSE }

    { 24  ;3   ;Field     ;
                SourceExpr="Document Type";
                Editable=FALSE }

    { 23  ;3   ;Field     ;
                SourceExpr="Document No.";
                Editable=FALSE }

    { 22  ;3   ;Field     ;
                SourceExpr="External Document No.";
                Editable=FALSE }

    { 21  ;3   ;Field     ;
                SourceExpr=Description;
                Editable=FALSE }

    { 44  ;3   ;Field     ;
                SourceExpr="Remaining Amount";
                Visible=FALSE;
                Enabled=FALSE;
                Editable=FALSE }

    { 41  ;3   ;Field     ;
                SourceExpr="Remaining Amt. Incl. Discount";
                Enabled=FALSE;
                Editable=FALSE }

    { 16  ;3   ;Field     ;
                CaptionML=[ENU=Pmt. Discount Date;
                           ENG=Pmt. Discount Date];
                SourceExpr="Pmt. Disc. Due Date";
                OnValidate=BEGIN
                             UpdateAfterChangingApplication;
                           END;
                            }

    { 45  ;3   ;Field     ;
                SourceExpr="Pmt. Disc. Tolerance Date";
                Visible=FALSE }

    { 15  ;3   ;Field     ;
                CaptionML=[ENU=Remaining Pmt. Discount Possible;
                           ENG=Remaining Pmt. Discount Possible];
                SourceExpr="Remaining Pmt. Disc. Possible";
                OnValidate=BEGIN
                             UpdateAfterChangingApplication;
                           END;
                            }

    { 27  ;3   ;Field     ;
                SourceExpr="Account Type";
                Editable=LineEditable }

    { 26  ;3   ;Field     ;
                SourceExpr="Account No.";
                Editable=LineEditable;
                OnValidate=BEGIN
                             CurrPage.SAVERECORD;
                           END;
                            }

    { 25  ;3   ;Field     ;
                SourceExpr="Posting Date";
                Visible=FALSE;
                Editable=FALSE }

    { 13  ;3   ;Field     ;
                SourceExpr="Match Confidence" }

    { 18  ;3   ;Field     ;
                CaptionML=[ENU=Entry Currency Code;
                           ENG=Entry Currency Code];
                SourceExpr="Currency Code";
                Visible=FALSE }

    { 40  ;1   ;Field     ;
                Name=AccountName;
                CaptionML=[ENU=Account Name:;
                           ENG=Account Name:];
                SourceExpr=GetAccountName;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              AccountNameDrillDown;
                            END;
                             }

    { 5   ;1   ;Group     ;
                GroupType=Group }

    { 6   ;2   ;Field     ;
                Name=TotalAppliedAmount;
                CaptionML=[ENU=Applied Amount;
                           ENG=Applied Amount];
                DecimalPlaces=0:5;
                SourceExpr=BankAccReconLine."Applied Amount";
                AutoFormatType=1;
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                Name=TotalRemainingAmount;
                CaptionML=[ENU=Remaining Amount to Apply;
                           ENG=Remaining Amount to Apply];
                DecimalPlaces=0:5;
                SourceExpr=BankAccReconLine."Statement Amount" - BankAccReconLine."Applied Amount";
                AutoFormatType=1;
                Editable=FALSE;
                StyleExpr=RemAmtToApplyStyleExpr }

    { 3   ;0   ;Container ;
                ContainerType=FactBoxArea }

    { 2   ;1   ;Part      ;
                SubPageLink=Bank Account No.=FIELD(Bank Account No.),
                            Statement No.=FIELD(Statement No.),
                            Statement Line No.=FIELD(Statement Line No.),
                            Statement Type=FIELD(Statement Type),
                            Account Type=FIELD(Account Type),
                            Account No.=FIELD(Account No.),
                            Applies-to Entry No.=FIELD(Applies-to Entry No.),
                            Match Confidence=FIELD(Match Confidence),
                            Quality=FIELD(Quality);
                PagePartID=Page1288;
                PartType=Page }

    { 1   ;1   ;Part      ;
                SubPageLink=Bank Account No.=FIELD(Bank Account No.),
                            Statement No.=FIELD(Statement No.),
                            Statement Line No.=FIELD(Statement Line No.),
                            Statement Type=FIELD(Statement Type);
                PagePartID=Page1289;
                PartType=Page }

  }
  CODE
  {
    VAR
      BankAccReconLine@1000 : Record 274;
      RemAmtToApplyStyleExpr@1001 : Text;
      RemoveApplicationsQst@1002 : TextConst 'ENU=Are you sure you want to remove all applications?;ENG=Are you sure you want to remove all applications?';
      Status@1003 : Text;
      AppliedManuallyStatusTxt@1004 : TextConst 'ENU=Applied Manually;ENG=Applied Manually';
      NoApplicationStatusTxt@1005 : TextConst 'ENU=Not Applied;ENG=Not Applied';
      AppliedAutomaticallyStatusTxt@1006 : TextConst 'ENU=Applied Automatically - Match Confidence: %1;ENG=Applied Automatically - Match Confidence: %1';
      AcceptedStatusTxt@1007 : TextConst 'ENU=Accepted;ENG=Accepted';
      LineEditable@1008 : Boolean;
      CreditTheAccountQst@1009 : TextConst '@@@=%1 is the account name, %2 is the amount that is not applied (there is filed on the page named Remaining Amount To Apply);ENU=Remaining Amount to Apply is %2.\\Do you want to create a new payment application line that will debit or credit %1 with the remaining amount when you post the payment?;ENG=Remaining Amount to Apply is %2.\\Do you want to create a new payment application line that will debit or credit %1 with the remaining amount when you post the payment?';

    PROCEDURE SetBankAccReconcLine@3(NewBankAccReconLine@1000 : Record 274);
    BEGIN
      BankAccReconLine := NewBankAccReconLine;
      TransferFromBankAccReconLine(NewBankAccReconLine);
    END;

    LOCAL PROCEDURE UpdateTotals@7();
    BEGIN
      BankAccReconLine.GET(
        BankAccReconLine."Statement Type",BankAccReconLine."Bank Account No.",
        BankAccReconLine."Statement No.",BankAccReconLine."Statement Line No.");

      BankAccReconLine.CALCFIELDS("Match Confidence");
      CASE BankAccReconLine."Match Confidence" OF
        BankAccReconLine."Match Confidence"::None:
          Status := NoApplicationStatusTxt;
        BankAccReconLine."Match Confidence"::Accepted:
          Status := AcceptedStatusTxt;
        BankAccReconLine."Match Confidence"::Manual:
          Status := AppliedManuallyStatusTxt;
        ELSE
          Status := STRSUBSTNO(AppliedAutomaticallyStatusTxt,BankAccReconLine."Match Confidence");
      END;

      UpdateRemAmtToApplyStyle;
    END;

    LOCAL PROCEDURE UpdateRemAmtToApplyStyle@6();
    BEGIN
      IF BankAccReconLine."Statement Amount" = BankAccReconLine."Applied Amount" THEN
        RemAmtToApplyStyleExpr := 'Favorable'
      ELSE
        RemAmtToApplyStyleExpr := 'Unfavorable';
    END;

    LOCAL PROCEDURE UpdateAfterChangingApplication@13();
    BEGIN
      BankAccReconLine.SetManualApplication;
      UpdateToSystemMatchConfidence;
      UpdateTotals;
    END;

    LOCAL PROCEDURE UpdateToSystemMatchConfidence@1();
    VAR
      BankPmtApplRule@1001 : Record 1252;
    BEGIN
      IF ("Match Confidence" = "Match Confidence"::Accepted) OR ("Match Confidence" = "Match Confidence"::Manual) THEN
        "Match Confidence" := BankPmtApplRule.GetMatchConfidence(Quality);
    END;

    BEGIN
    END.
  }
}

