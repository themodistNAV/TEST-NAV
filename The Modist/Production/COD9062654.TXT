OBJECT Codeunit 9062654 Incident Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=16/11/15;
    Time=12:06:02 PM;
    Version List=NH2016.11;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Incident@1000000008 : Record 9062305;
      SystemBehaviour@9062230 : Record 9062230;
      SequenceToolkit@9062238 : Codeunit 9062519;
      tIncidentClass1GenLkp@1000000000 : TextConst 'ENU=INCIDENT CLASS 1;ENG=INCIDENT CLASS 1';
      tIncidentClass2GenLkp@1000000001 : TextConst 'ENU=INCIDENT CLASS 2;ENG=INCIDENT CLASS 2';
      tIncidentClass3GenLkp@1000000002 : TextConst 'ENU=INCIDENT CLASS 3;ENG=INCIDENT CLASS 3';
      tIncidentClass1CaptionSysB@1000000003 : TextConst 'ENU=INC_CLASS_1_CAPTION;ENG=INC_CLASS_1_CAPTION';
      tIncidentClass2CaptionSysB@1000000004 : TextConst 'ENU=INC_CLASS_2_CAPTION;ENG=INC_CLASS_2_CAPTION';
      tIncidentClass3CaptionSysB@1000000005 : TextConst 'ENU=INC_CLASS_3_CAPTION;ENG=INC_CLASS_3_CAPTION';
      IncidentClassCaption@1000000006 : ARRAY [3] OF Text;
      IncidentClassCaptionRetrieved@1000000007 : ARRAY [3] OF Boolean;

    LOCAL PROCEDURE "--- Priorities ---"@9062237();
    BEGIN
    END;

    PROCEDURE IncidentPriorityUp@9062239(VAR pIncidentPriority@9062230 : Record 9062310) : Boolean;
    BEGIN
      //DOC NH2016.11 - Moving priority up
      //  <> pIncidentPriority: The priority
      //  <- TRUE = Sequence changed, FALSE = Not

      EXIT(IncidentPriorityUpDown(pIncidentPriority, SequenceToolkit.Up()));
    END;

    PROCEDURE IncidentPriorityDown@9062240(VAR pIncidentPriority@9062230 : Record 9062310) : Boolean;
    BEGIN
      //DOC NH2016.11 - Moving priority down
      //  <> pIncidentPriority: The priority
      //  <- TRUE = Sequence changed, FALSE = Not

      EXIT(IncidentPriorityUpDown(pIncidentPriority, SequenceToolkit.Down()));
    END;

    LOCAL PROCEDURE IncidentPriorityUpDown@9062238(VAR pIncidentPriority@9062232 : Record 9062310;pDirection@9062234 : Integer) : Boolean;
    VAR
      lIncidentPriorityVariant@9062231 : Variant;
      lResult@9062233 : Boolean;
    BEGIN
      //DOC NH2016.11 - Moving priority up / down
      //  <> pIncidentPriority: The priority
      //  -> pDirection: Direction (see SequenceToolkit.Up() / SequenceToolkit.Down() functions)
      //  <- TRUE = Sequence changed, FALSE = Not

      lIncidentPriorityVariant := pIncidentPriority;
      lResult := SequenceToolkit.SequenceUpDown(lIncidentPriorityVariant, DATABASE::"Incident Priority", pIncidentPriority.FIELDNO(Sequence), pDirection);
      pIncidentPriority := lIncidentPriorityVariant;
      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Statuses ---"@9062244();
    BEGIN
    END;

    PROCEDURE IncidentStatusUp@9062243(VAR pIncidentStatus@9062230 : Record 9062304) : Boolean;
    BEGIN
      //DOC NH2016.11 - Moving status up
      //  <> pIncidentStatus: The status
      //  <- TRUE = Sequence changed, FALSE = Not

      EXIT(IncidentStatusUpDown(pIncidentStatus, SequenceToolkit.Up()));
    END;

    PROCEDURE IncidentStatusDown@9062242(VAR pIncidentStatus@9062231 : Record 9062304) : Boolean;
    BEGIN
      //DOC NH2016.11 - Moving status down
      //  <> pIncidentStatus: The status
      //  <- TRUE = Sequence changed, FALSE = Not

      EXIT(IncidentStatusUpDown(pIncidentStatus, SequenceToolkit.Down()));
    END;

    LOCAL PROCEDURE IncidentStatusUpDown@9062241(VAR pIncidentStatus@9062230 : Record 9062304;pDirection@9062234 : Integer) : Boolean;
    VAR
      lIncidentStatusVariant@9062231 : Variant;
      lResult@9062233 : Boolean;
    BEGIN
      //DOC NH2016.11 - Moving priority up / down
      //  <> pIncidentStatus: The status
      //  -> pDirection: Direction (see SequenceToolkit.Up() / SequenceToolkit.Down() functions)
      //  <- TRUE = Sequence changed, FALSE = Not

      lIncidentStatusVariant := pIncidentStatus;
      lResult := SequenceToolkit.SequenceUpDown(lIncidentStatusVariant, DATABASE::"Incident Status", pIncidentStatus.FIELDNO(Sequence), pDirection);
      pIncidentStatus := lIncidentStatusVariant;
      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Log ---"@9062230();
    BEGIN
    END;

    PROCEDURE AddIncidentLog@9062231(pIncident@9062230 : Record 9062305;pLogDate@9062232 : Date;pLogTime@9062233 : Time;pSubject@9062234 : Text;pType@9062235 : Code[20];pOwnedBy@9062239 : Integer;pDueDate@9062236 : Date;pDueTime@9062238 : Time;pClosed@9062237 : Boolean);
    VAR
      lCrmLogEntry@9062231 : Record 9062392;
    BEGIN
      //DOC NH2016.11 - Adding something to incident log
      //  -> pIncident: The incident
      //  -> pLogDate: Log date (TODAY if empty)
      //  -> pLogTime: Log time (TIME if empty)
      //  -> pSubject: Subject
      //  -> pType: Type
      //  -> pOwnedBy: Owned by
      //  -> pDueDate: Due date (can be empty)
      //  -> pDueTime: Due time (can be empty)
      //  -> pClosed: Closed flag

      IF (pLogDate = 0D) THEN
        pLogDate := TODAY();
      IF (pLogTime = 0T) THEN
        pLogTime := TIME();

      CLEAR(lCrmLogEntry);
      lCrmLogEntry.INIT();
      lCrmLogEntry.VALIDATE("Incident No.", pIncident."No.");
      lCrmLogEntry.VALIDATE("Log Date", pLogDate);
      lCrmLogEntry.VALIDATE("Log Time", pLogTime);
      lCrmLogEntry.VALIDATE(Subject, COPYSTR(pSubject, 1, MAXSTRLEN(lCrmLogEntry.Subject)));
      lCrmLogEntry.VALIDATE(Type, pType);
      lCrmLogEntry.VALIDATE("Due Date", pDueDate);
      lCrmLogEntry.VALIDATE("Due Time", pDueTime);
      lCrmLogEntry.VALIDATE(Closed, pClosed);
      lCrmLogEntry.INSERT(TRUE);
      lCrmLogEntry.VALIDATE("Owned By Area", pOwnedBy);
      lCrmLogEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE "--- Links ---"@1000000003();
    BEGIN
    END;

    PROCEDURE AddIncidentLink@1000000008(pIncident@1000000001 : Record 9062305;pTableId@1000000002 : Integer;pRecordPosition@1000000003 : Text;pDescription@1000000005 : Text;pSource@1000000006 : Integer);
    BEGIN
      //DOC NA2016.11 - Adding another entry to incident lnks
      //  -> pIncident: Incident
      //  -> pTableId: Table ID
      //  -> pRecordPosition: Record position
      //  -> pDescription: Description
      //  -> pSource: Source

      AddIncidentLinkInternal(pIncident, pTableId, pRecordPosition, pDescription, pSource, FALSE);
    END;

    PROCEDURE AddOrModifyIncidentLink@1000000011(pIncident@1000000001 : Record 9062305;pTableId@1000000002 : Integer;pRecordPosition@1000000003 : Text;pDescription@1000000005 : Text;pSource@1000000006 : Integer);
    BEGIN
      //DOC NA2016.11 - Adding another entry to incident lnks or modifying existing one
      //  -> pIncident: Incident
      //  -> pTableId: Table ID
      //  -> pRecordPosition: Record position
      //  -> pDescription: Description
      //  -> pSource: Source

      AddIncidentLinkInternal(pIncident, pTableId, pRecordPosition, pDescription, pSource, TRUE);
    END;

    PROCEDURE AddIncidentLinkInternal@1000000012(pIncident@1000000001 : Record 9062305;pTableId@1000000002 : Integer;pRecordPosition@1000000003 : Text;pDescription@1000000005 : Text;pSource@1000000006 : Integer;pFindIfExists@1000000004 : Boolean);
    VAR
      lIncidentLink@1000000000 : Record 9062307;
      lExists@1000000007 : Boolean;
    BEGIN
      //DOC NA2016.11 - Adding another entry to incident lnks or modifying existing one (parameterised)
      //  -> pIncident: Incident
      //  -> pTableId: Table ID
      //  -> pRecordPosition: Record position
      //  -> pDescription: Description
      //  -> pSource: Source
      //  -> pFindIfExists: Flag telling to look for existing incident link (with given source)

      IF (pFindIfExists) THEN
      BEGIN
        lIncidentLink.RESET();
        lIncidentLink.SETRANGE("Incident No.", pIncident."No.");
        lIncidentLink.SETRANGE(Source, pSource);
        lExists := lIncidentLink.FINDFIRST();
      END
      ELSE
        lExists := FALSE;

      IF ( NOT (lExists)) THEN
      BEGIN
        CLEAR(lIncidentLink);
        lIncidentLink.INIT();
        lIncidentLink.VALIDATE("Incident No.", pIncident."No.");
        lIncidentLink.VALIDATE("Line No.", lIncidentLink.NewLineNo());
        lIncidentLink.INSERT(TRUE);
      END;

      lIncidentLink.VALIDATE("Table ID", pTableId);
      lIncidentLink.VALIDATE("Record Position", COPYSTR(pRecordPosition, 1, MAXSTRLEN(lIncidentLink."Record Position")));
      lIncidentLink.VALIDATE(Description, COPYSTR(pDescription, 1, MAXSTRLEN(lIncidentLink.Description)));
      lIncidentLink.VALIDATE(Source, pSource);
      lIncidentLink.MODIFY(TRUE);
    END;

    PROCEDURE GetRecordDescription@1000000004(pTableId@1000000000 : Integer;pPosition@1000000001 : Text) : Text;
    VAR
      lRecordDescription@1000000006 : Text;
      lRecordRef@1000000002 : RecordRef;
      lKeyRef@1000000003 : KeyRef;
      lField@1000000007 : Record 2000000041;
      lFieldIndex@1000000005 : Integer;
      lFieldRef@1000000004 : FieldRef;
      lFieldIdBuffer@1000000008 : TEMPORARY Record 2000000026;
    BEGIN
      //DOC NH2016.11 - Returning record description
      //  -> pTableId: Table ID
      //  -> pPosition: Position
      //  <- Record description

      CLEAR(lRecordDescription);

      IF ((pTableId <> 0) AND (pPosition <> '')) THEN
      BEGIN
        lRecordRef.OPEN(pTableId);
        lRecordRef.SETPOSITION(pPosition);
        lRecordRef.SETRECFILTER();
        IF (lRecordRef.FINDFIRST()) THEN;

        lKeyRef := lRecordRef.KEYINDEX(1);
        FOR lFieldIndex := 1 TO lKeyRef.FIELDCOUNT() DO
        BEGIN
          lFieldRef := lKeyRef.FIELDINDEX(lFieldIndex);
          IF (lRecordDescription <> '') THEN
            lRecordDescription := lRecordDescription + ', ';
          lRecordDescription := lRecordDescription + FORMAT(lFieldRef.VALUE, 0, 1);
          lFieldIdBuffer.Number := lFieldRef.NUMBER;
          lFieldIdBuffer.INSERT();
        END;

        lField.RESET();
        lField.SETRANGE(TableNo, pTableId);
        lField.SETFILTER(FieldName, 'Name|Description');
        IF (lField.FINDFIRST()) THEN
          IF ( NOT (lFieldIdBuffer.GET(lField."No."))) THEN
          BEGIN
            lFieldRef := lRecordRef.FIELD(lField."No.");
            lRecordDescription := STRSUBSTNO('%1 (%2)', FORMAT(lFieldRef.VALUE, 0, 1), lRecordDescription);
          END;

        lRecordRef.CLOSE();
      END;

      EXIT(lRecordDescription);
    END;

    LOCAL PROCEDURE "--- Classification ---"@1000000000();
    BEGIN
    END;

    PROCEDURE GetIncidentClass1GenLkp@1000000001() : Code[20];
    BEGIN
      //DOC NA2016.11 - Returning incident class 1 general lookup code
      //  <- The code

      EXIT(tIncidentClass1GenLkp);
    END;

    PROCEDURE GetIncidentClass2GenLkp@1000000005() : Code[20];
    BEGIN
      //DOC NA2016.11 - Returning incident class 2 general lookup code
      //  <- The code

      EXIT(tIncidentClass2GenLkp);
    END;

    PROCEDURE GetIncidentClass3GenLkp@1000000006() : Code[20];
    BEGIN
      //DOC NA2016.11 - Returning incident class 3 general lookup code
      //  <- The code

      EXIT(tIncidentClass3GenLkp);
    END;

    PROCEDURE GetIncidentClass1Caption@1000000002() : Text;
    BEGIN
      //DOC NA2016.11 - Returning incident classification 1 caption
      //  <- The caption

      EXIT(GetIncidentClassCaption(1, tIncidentClass1CaptionSysB, Incident.FIELDCAPTION("Classification 1 Code")));
    END;

    PROCEDURE GetIncidentClass2Caption@1000000010() : Text;
    BEGIN
      //DOC NA2016.11 - Returning incident classification 2 caption
      //  <- The caption

      EXIT(GetIncidentClassCaption(2, tIncidentClass2CaptionSysB, Incident.FIELDCAPTION("Classification 2 Code")));
    END;

    PROCEDURE GetIncidentClass3Caption@1000000009() : Text;
    BEGIN
      //DOC NA2016.11 - Returning incident classification 3 caption
      //  <- The caption

      EXIT(GetIncidentClassCaption(3, tIncidentClass3CaptionSysB, Incident.FIELDCAPTION("Classification 3 Code")));
    END;

    LOCAL PROCEDURE GetIncidentClassCaption@1000000007(pIndex@1000000000 : Integer;pSystemBehaviourCode@1000000001 : Code[20];pDefaultCaption@1000000003 : Text) : Text;
    BEGIN
      //DOC NA2016.11 - Returning incident classification 1 caption
      //  -> pIndex: Index
      //  -> pSystemBehaviourCode: System behaviour code
      //  -> pDefaultCaption: Default caption
      //  <- The caption

      IF ( NOT (IncidentClassCaptionRetrieved[pIndex])) THEN
      BEGIN
        IncidentClassCaption[pIndex] := SystemBehaviour.GetText(pSystemBehaviourCode);
        IncidentClassCaptionRetrieved[pIndex] := TRUE;
      END;

      IF (IncidentClassCaption[pIndex] <> '') THEN
        EXIT(IncidentClassCaption[pIndex])
      ELSE
        EXIT(pDefaultCaption);
    END;

    BEGIN
    {
      //DOC NH2016.11 JH 10/11/2015 - Created
    }
    END.
  }
}

