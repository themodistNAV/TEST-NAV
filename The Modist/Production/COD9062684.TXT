OBJECT Codeunit 9062684 nhanced Search Functions
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      StdAnalyser@1000000000 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Analysis.Standard.StandardAnalyzer";
      IndexWriter@1000000001 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Index.IndexWriter";
      IndexDoc@1000000002 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Documents.Document";
      IndexField@1000000003 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Documents.Field";
      FieldStore@1000000005 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Documents.Field+Store";
      FieldIndex@1000000006 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Documents.Field+Index";
      LuceneVersion@1000000007 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Util.Version";
      FSDirectory@1000000008 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Store.FSDirectory";
      IndexWriter2@1000000009 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Index.IndexWriter+MaxFieldLength";
      IndexSeacher@1000000010 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Search.IndexSearcher";
      QueryParser@1000000011 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.QueryParsers.QueryParser";
      LuceneQuery@1000000012 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Search.Query";
      TopDocs@1000000013 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Search.TopDocs";
      TopDocs2@1000000022 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Search.TopFieldDocs";
      ints@1000000014 : Integer;
      KeywordAnalyser@1000000015 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Analysis.KeywordAnalyzer";
      i@1000000018 : Integer;
      ScoreDoc@1000000020 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Search.ScoreDoc";
      ResDoc@1000000021 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Documents.Document";
      ScoreDocs@1000000023 : DotNet "'Lucene.Net, Version=3.0.3.0, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Documents.Document";
      DirectoryPath@1000000019 : Text;
      SnowballAnalyzer@1000000004 : DotNet "'Lucene.Net.Contrib.Snowball, Version=2.0.0.1, Culture=neutral, PublicKeyToken=85089178b9ac3181'.Lucene.Net.Analysis.Snowball.SnowballAnalyzer";
      nHancedSearchSetup@1000000016 : Record 9062818;
      TNPToolkit@1000000017 : Codeunit 9062230;
      TNPUtils@1000000024 : Codeunit 9062229;
      String@1000000025 : Codeunit 9062236;
      EnhancedFieldManagement@1000000026 : Codeunit 9062298;

    LOCAL PROCEDURE SetupLuceneWriter@1000000031(nHancedSearchHeader@1000000000 : Record 9062815);
    BEGIN
      nHancedSearchSetup.GET;

      //Set up the analyser
      StdAnalyser := StdAnalyser.StandardAnalyzer(LuceneVersion.LUCENE_30);

      //Set up the Directory
      DirectoryPath := nHancedSearchSetup."Index Location" + '\' + FORMAT(nHancedSearchHeader.PK) + '\';
      FSDirectory := FSDirectory.Open(DirectoryPath);
      //FSDirectory:=FSDirectory.Open('C:\LuceneIndexes\Std');

      //Might need to derive this ?
      IndexWriter2 := IndexWriter2.MaxFieldLength(200);

      //Set up the Writer
      IndexWriter := IndexWriter.IndexWriter(FSDirectory,StdAnalyser,TRUE,IndexWriter2);
    END;

    LOCAL PROCEDURE SetupLuceneReader@1000000032(nHancedSearchHeader@1000000000 : Record 9062815);
    BEGIN
      nHancedSearchSetup.GET;

      //We need to get the index to search and the path to look in from the header
      DirectoryPath := nHancedSearchSetup."Index Location" + '\' + FORMAT(nHancedSearchHeader.PK) + '\';

      //Set up the analyser
      //This needs to be set to type based on input
      StdAnalyser := StdAnalyser.StandardAnalyzer(LuceneVersion.LUCENE_30);

      //Set up the Directory
      FSDirectory := FSDirectory.Open(DirectoryPath);
      //FSDirectory:=FSDirectory.Open('C:\LuceneIndexes\Std');

      //Set up the searcher
      IndexSeacher := IndexSeacher.IndexSearcher(FSDirectory);

      QueryParser := QueryParser.QueryParser(LuceneVersion.LUCENE_30,'SearchIndex',StdAnalyser);
      QueryParser.AllowLeadingWildcard(FALSE);
    END;

    LOCAL PROCEDURE CommitAndOptimise@1000000013();
    BEGIN
      IndexWriter.Optimize();
      IndexWriter.Commit();
      IndexWriter.Close();
    END;

    LOCAL PROCEDURE IndexWithLucene@1000000011();
    VAR
      nHancedSearchHeader@1000000000 : Record 9062815;
    BEGIN
      nHancedSearchHeader.SETRANGE(Active,TRUE);
      IF nHancedSearchHeader.FINDSET THEN
        REPEAT
          ProcessIndexHeader(nHancedSearchHeader);
        UNTIL nHancedSearchHeader.NEXT = 0;
    END;

    PROCEDURE ProcessIndexHeader@1000000008(nHancedSearchHeader@1000000001 : Record 9062815);
    VAR
      nHancedSearchTables@1000000000 : Record 9062816;
    BEGIN
      SetupLuceneWriter(nHancedSearchHeader);

      //We need to find all the lines
      nHancedSearchTables.SETRANGE("Parent Id",nHancedSearchHeader.PK);
      IF nHancedSearchTables.FINDSET THEN
        REPEAT
          //We have a table entry
          //How many fields make up the document
          IndexTableEntries(nHancedSearchTables);
        UNTIL nHancedSearchTables.NEXT = 0;

      CommitAndOptimise();
    END;

    LOCAL PROCEDURE IndexTableEntries@1000000017(nHancedSearchTables@1000000002 : Record 9062816);
    VAR
      ValToIndex@1000000003 : Text;
      RecRef@1000000001 : RecordRef;
      FldRef@1000000000 : FieldRef;
      nHancedSearchFields@1000000004 : Record 9062820;
      TMPTxt@1000000005 : Text;
    BEGIN
      nHancedSearchFields.SETRANGE("Parent Id",nHancedSearchTables."Parent Id");
      nHancedSearchFields.SETRANGE("Table No",nHancedSearchTables."Table No");

      IF nHancedSearchFields.FINDSET THEN BEGIN
        RecRef.OPEN(nHancedSearchTables."Table No");

        IF RecRef.FINDSET THEN BEGIN
          REPEAT
            nHancedSearchFields.FINDSET;
            ValToIndex := '';

            REPEAT
              IF nHancedSearchFields."Field Type"=nHancedSearchFields."Field Type"::Field THEN BEGIN
                FldRef := RecRef.FIELD(nHancedSearchFields."Field No");
                TMPTxt := FORMAT(FldRef.VALUE);
                IF TMPTxt <> '' THEN
                  ValToIndex := ValToIndex + ' ' + TMPTxt;
              END;

              IF nHancedSearchFields."Field Type"=nHancedSearchFields."Field Type"::"Enhanced Field"  THEN BEGIN
                TMPTxt:= EnhancedFieldManagement.CalculateFieldValue(nHancedSearchFields."Table No",nHancedSearchFields."Field No",RecRef.GETPOSITION);
                IF TMPTxt <> '' THEN
                  ValToIndex := ValToIndex + ' ' + FORMAT(TMPTxt);
                END;

            UNTIL nHancedSearchFields.NEXT = 0;

            //Now build the document
            IndexDoc := IndexDoc.Document;

            IndexField := IndexField.Field('tableid',FORMAT(nHancedSearchTables."Table No"),FieldStore.YES,FieldIndex.NOT_ANALYZED);
            IndexDoc.Add(IndexField);

            IndexField := IndexField.Field('positiontext',RecRef.GETPOSITION,FieldStore.YES,FieldIndex.NOT_ANALYZED);
            IndexDoc.Add(IndexField);

           //This is defined on a table
            IndexField := IndexField.Field('SearchIndex',LOWERCASE(ValToIndex),FieldStore.YES,FieldIndex.ANALYZED);
            IndexDoc.Add(IndexField);

            IndexWriter.AddDocument(IndexDoc);

          UNTIL RecRef.NEXT = 0;
        END;

        RecRef.CLOSE;
      END;
    END;

    PROCEDURE FindRecordsWithHeader@1000000014(SearchFor@1000000001 : Text;VAR Results@1000000006 : TEMPORARY Record 9062817;nHancedSearchHeader@1000000007 : Record 9062815);
    VAR
      SearchText@1000000000 : Text;
      tmpint@1000000003 : Integer;
      intTableNo@1000000005 : Integer;
      txtPosText@1000000004 : Text;
      NameValueBuffer@1000000002 : TEMPORARY Record 9062730;
    BEGIN

      CheckHeaderSetup(nHancedSearchHeader);

      Results.DELETEALL;

      //Tell the reader what the setups are
      SetupLuceneReader(nHancedSearchHeader);

      SearchFor := String.Trim(SearchFor);

      SearchFor := LOWERCASE(SearchFor);

      //Consider appending a + to the search term if we are doing AND searches.
      IF nHancedSearchHeader."Default Search Type" = nHancedSearchHeader."Default Search Type"::"AND" THEN BEGIN
        String.SplitAdvanced(SearchFor,' ',TRUE,TRUE,NameValueBuffer);

        IF NameValueBuffer.FINDSET THEN BEGIN
          REPEAT
            SearchText := SearchText + '+' + NameValueBuffer.Value + ' ';
          UNTIL NameValueBuffer.NEXT = 0;
          SearchText := COPYSTR(SearchText,1,STRLEN(SearchText)-1);
        END;
      END ELSE
        SearchText := SearchFor;

      QueryParser.Escape(SearchText);
      LuceneQuery := QueryParser.Parse(SearchText);

      TopDocs := IndexSeacher.Search(LuceneQuery,nHancedSearchHeader."Records To Return");

      ints := TopDocs.TotalHits;

      FOREACH ScoreDoc IN TopDocs.ScoreDocs DO BEGIN
        ResDoc := IndexSeacher.Doc(ScoreDoc.Doc);

        EVALUATE(intTableNo,ResDoc.Get('tableid'));
        txtPosText := ResDoc.Get('positiontext');
        Results.RESET;
        Results.SETRANGE("Table No",intTableNo);
        Results.SETRANGE(PositionText,txtPosText);
        IF NOT Results.FINDFIRST THEN BEGIN
          i := i + 1;
          Results.INIT;
          Results.EntryNo := i;
          EVALUATE(Results."Table No",ResDoc.Get('tableid'));
          Results.FormNo := ResDoc.Get('formno');
          Results."Text 1" := ResDoc.Get('SearchIndex');
          Results.PositionText := ResDoc.Get('positiontext');
          Results.INSERT(TRUE);
        END;

      END;

      //If there is not enough records returned we need to do a wildcard search
      IF ints < nHancedSearchHeader."Records To Return" THEN BEGIN

        SearchText := String.ReplaceAll(SearchText,' ','* ');
        SearchText := SearchText + '*';

        QueryParser.Escape(SearchText);
        LuceneQuery := QueryParser.Parse(SearchText);
        //TopDocs := IndexSeacher.Search(LuceneQuery,200);
        TopDocs := IndexSeacher.Search(LuceneQuery,nHancedSearchHeader."Records To Return");

        ints := TopDocs.TotalHits;

        FOREACH ScoreDoc IN TopDocs.ScoreDocs DO BEGIN
      //Might need to break out of this loop if too many wildcards
          ResDoc := IndexSeacher.Doc(ScoreDoc.Doc);

          EVALUATE(intTableNo,ResDoc.Get('tableid'));
          txtPosText := ResDoc.Get('positiontext');
          Results.RESET;
          Results.SETRANGE("Table No",intTableNo);
          Results.SETRANGE(PositionText,txtPosText);
          IF NOT Results.FINDFIRST THEN BEGIN
            i := i + 1;
            Results.INIT;
            Results.EntryNo := i;
            EVALUATE(Results."Table No",ResDoc.Get('tableid'));
            Results.FormNo := ResDoc.Get('formno');
            Results."Text 1" := ResDoc.Get('SearchIndex');
            Results.PositionText := ResDoc.Get('positiontext');
            Results.INSERT(TRUE);
          END;

        END;

      END;

      Results.RESET;
    END;

    PROCEDURE FindRecordsWithHeadeAndOr@1000000019(SearchFor@1000000001 : Text;VAR Results@1000000006 : TEMPORARY Record 9062817;nHancedSearchHeader@1000000007 : Record 9062815;SearchType@1000000008 : 'OR,AND');
    VAR
      SearchText@1000000000 : Text;
      tmpint@1000000003 : Integer;
      intTableNo@1000000005 : Integer;
      txtPosText@1000000004 : Text;
      NameValueBuffer@1000000002 : TEMPORARY Record 9062730;
    BEGIN
      //This is an override to allow the user to search specifying the search type

      CheckHeaderSetup(nHancedSearchHeader);

      Results.DELETEALL;

      //Tell the reader what the setups are
      SetupLuceneReader(nHancedSearchHeader);

      SearchFor := String.Trim(SearchFor);

      SearchFor := LOWERCASE(SearchFor);

      {
      //Consider appending a + to the search term if we are doing AND searches.
      IF nHancedSearchHeader."Default Search Type" = nHancedSearchHeader."Default Search Type"::"AND" THEN BEGIN
        String.SplitAdvanced(SearchFor,' ',TRUE,TRUE,NameValueBuffer);

        IF NameValueBuffer.FINDSET THEN BEGIN
          REPEAT
            SearchText := SearchText + '+' + NameValueBuffer.Value + ' ';
          UNTIL NameValueBuffer.NEXT = 0;
          SearchText := COPYSTR(SearchText,1,STRLEN(SearchText)-1);
        END;
      END ELSE
        SearchText := SearchFor;
      }

      //Consider appending a + to the search term if we are doing AND searches.
      IF SearchType = SearchType::"AND" THEN BEGIN
        String.SplitAdvanced(SearchFor,' ',TRUE,TRUE,NameValueBuffer);

        IF NameValueBuffer.FINDSET THEN BEGIN
          REPEAT
            SearchText := SearchText + '+' + NameValueBuffer.Value + ' ';
          UNTIL NameValueBuffer.NEXT = 0;
          SearchText := COPYSTR(SearchText,1,STRLEN(SearchText)-1);
        END;
      END ELSE
        SearchText := SearchFor;

      QueryParser.Escape(SearchText);
      LuceneQuery := QueryParser.Parse(SearchText);

      TopDocs := IndexSeacher.Search(LuceneQuery,nHancedSearchHeader."Records To Return");

      ints := TopDocs.TotalHits;

      FOREACH ScoreDoc IN TopDocs.ScoreDocs DO BEGIN
        ResDoc := IndexSeacher.Doc(ScoreDoc.Doc);

        EVALUATE(intTableNo,ResDoc.Get('tableid'));
        txtPosText := ResDoc.Get('positiontext');
        Results.RESET;
        Results.SETRANGE("Table No",intTableNo);
        Results.SETRANGE(PositionText,txtPosText);
        IF NOT Results.FINDFIRST THEN BEGIN
          i := i + 1;
          Results.INIT;
          Results.EntryNo := i;
          EVALUATE(Results."Table No",ResDoc.Get('tableid'));
          Results.FormNo := ResDoc.Get('formno');
          Results."Text 1" := ResDoc.Get('SearchIndex');
          Results.PositionText := ResDoc.Get('positiontext');
          Results.INSERT(TRUE);
        END;

      END;

      //If there is not enough records returned we need to do a wildcard search
      IF ints < nHancedSearchHeader."Records To Return" THEN BEGIN

        SearchText := String.ReplaceAll(SearchText,' ','* ');
        SearchText := SearchText + '*';

        QueryParser.Escape(SearchText);
        LuceneQuery := QueryParser.Parse(SearchText);
        //TopDocs := IndexSeacher.Search(LuceneQuery,200);
        TopDocs := IndexSeacher.Search(LuceneQuery,nHancedSearchHeader."Records To Return");

        ints := TopDocs.TotalHits;

        FOREACH ScoreDoc IN TopDocs.ScoreDocs DO BEGIN
      //Might need to break out of this loop if too many wildcards
          ResDoc := IndexSeacher.Doc(ScoreDoc.Doc);

          EVALUATE(intTableNo,ResDoc.Get('tableid'));
          txtPosText := ResDoc.Get('positiontext');
          Results.RESET;
          Results.SETRANGE("Table No",intTableNo);
          Results.SETRANGE(PositionText,txtPosText);
          IF NOT Results.FINDFIRST THEN BEGIN
            i := i + 1;
            Results.INIT;
            Results.EntryNo := i;
            EVALUATE(Results."Table No",ResDoc.Get('tableid'));
            Results.FormNo := ResDoc.Get('formno');
            Results."Text 1" := ResDoc.Get('SearchIndex');
            Results.PositionText := ResDoc.Get('positiontext');
            Results.INSERT(TRUE);
          END;

        END;

      END;

      Results.RESET;
    END;

    PROCEDURE RunSearchPageWithFuncId@1000000016(pVariant@1000000001 : Variant;SearchText@1000000004 : Text;FuncId@1000000005 : Integer);
    VAR
      LuceneSearchPage@1000000000 : Page 9086429;
      RecRef@1000000002 : RecordRef;
      nHancedSearchResults@1000000003 : Record 9062817;
      nHancedSearchSetup@1000000006 : Record 9062818;
      nHancedSearchHeader@1000000007 : Record 9062815;
      nHancedSearchFunctionSetup@1000000008 : Record 9062821;
    BEGIN
      nHancedSearchSetup.GET;

      //Find the function in the table

      IF NOT nHancedSearchFunctionSetup.GET(FuncId) THEN
        EXIT;

      //Find the search index to use
      IF NOT nHancedSearchHeader.GET(nHancedSearchFunctionSetup."Search Index") THEN
        EXIT;

      CheckHeaderSetup(nHancedSearchHeader);

      SearchText := String.Trim(SearchText);

      //Run the Search Page
      LuceneSearchPage.LOOKUPMODE(TRUE);
      IF SearchText <> '' THEN
          BEGIN
            LuceneSearchPage.SetHeader(nHancedSearchHeader);
            LuceneSearchPage.FindInLuceneWithHeader(SearchText,nHancedSearchHeader);
          END;

      IF LuceneSearchPage.RUNMODAL = ACTION::LookupOK THEN BEGIN
        //Need to add a line to the item

        LuceneSearchPage.GETRECORD(nHancedSearchResults);
        nHancedSearchResults.SETRECFILTER;

        IF pVariant.ISRECORD THEN
          RecRef.GETTABLE(pVariant);

        IF pVariant.ISRECORDREF THEN
          RecRef := pVariant;

        CASE RecRef.NUMBER OF
          36:
            BEGIN
            //MESSAGE(FORMAT(RecRef.GETPOSITION));
            //Need to add a line to the order
              SalesOrderAddLine(RecRef,nHancedSearchResults);
            END;

        END;

      END;
    END;

    PROCEDURE SearchPageWithHeader@1000000006(SearchText@1000000004 : Text;nHancedSearchHeader@1000000001 : Record 9062815);
    VAR
      LuceneSearchPage@1000000000 : Page 9086429;
      RecRef@1000000002 : RecordRef;
      nHancedSearchResults@1000000003 : Record 9062817;
    BEGIN

      CheckHeaderSetup(nHancedSearchHeader);

      SearchText := String.Trim(SearchText);

      //Run the Search Page
      LuceneSearchPage.LOOKUPMODE(TRUE);
      IF SearchText <> '' THEN
        BEGIN
        LuceneSearchPage.SetHeader(nHancedSearchHeader);
        LuceneSearchPage.FindInLuceneWithHeader(SearchText,nHancedSearchHeader);

      LuceneSearchPage.RUNMODAL;
      END;
      {
      IF LuceneSearchPage.RUNMODAL = ACTION::LookupOK THEN BEGIN
      END;
      }
    END;

    PROCEDURE CheckHeaderSetup@1000000000(nHancedSearchHeader@1000000007 : Record 9062815);
    VAR
      eSearchNotActive@1000000000 : TextConst 'ENU=Search not active. Please activate and index records;ENG=Search not active. Please activate and index records';
      eRecordsToReturnZero@1000000001 : TextConst 'ENU=Records to retrun is set to 0. Please update in setup;ENG=Records to retrun is set to 0. Please update in setup';
    BEGIN
      IF nHancedSearchHeader.Active = FALSE THEN
        ERROR(eSearchNotActive);

      IF nHancedSearchHeader."Records To Return" = 0 THEN
        ERROR(eRecordsToReturnZero);
    END;

    LOCAL PROCEDURE "##DocumentFunctions##"@1000000007();
    BEGIN
    END;

    LOCAL PROCEDURE SalesOrderAddLine@1000000009(SalesHeaderRefRefIn@1000000000 : RecordRef;nHancedSearchResults@1000000006 : Record 9062817);
    VAR
      SalesHeader@1000000001 : Record 36;
      ReleaseSalesDocument@1000000002 : Codeunit 414;
      SalesLine@1000000004 : Record 37;
      ItemNo@1000000007 : Code[20];
      VariantCode@1000000008 : Code[20];
      LineNo@1000000003 : Integer;
      lRecRef@1000000005 : RecordRef;
      FldRef@1000000009 : FieldRef;
    BEGIN
      //Find the sales Order
      SalesHeader.SETPOSITION(SalesHeaderRefRefIn.GETPOSITION);

      IF SalesHeader.Status <> SalesHeader.Status::Open THEN
        ReleaseSalesDocument.Reopen(SalesHeader);

      lRecRef.OPEN(nHancedSearchResults."Table No");
      lRecRef.SETPOSITION(nHancedSearchResults.PositionText);

      //Do we have an item or a item varaint
      CASE nHancedSearchResults."Table No" OF
        27:
          BEGIN
            FldRef := lRecRef.FIELD(1);
            ItemNo := FldRef.VALUE;
          END;

        5401:
          BEGIN
            FldRef := lRecRef.FIELD(1);
            VariantCode := FldRef.VALUE;
            FldRef := lRecRef.FIELD(2);
            ItemNo := FldRef.VALUE;
          END;

      END;

      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          //SalesLine.SETRANGE(SalesLine.Type,SalesLine.Type::Item);
      IF SalesLine.FINDLAST THEN
        LineNo := SalesLine."Line No." + 10000
      ELSE
        LineNo := 10000;

      SalesLine.INIT;
      SalesLine."Document Type" := SalesHeader."Document Type";
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine."Line No." := LineNo;
      SalesLine.INSERT(TRUE);
      SalesLine.VALIDATE(Type,SalesLine.Type::Item);
      SalesLine.VALIDATE("No.",ItemNo);

      IF VariantCode <> '' THEN
        SalesLine.VALIDATE("Variant Code",VariantCode);
      SalesLine.VALIDATE(Quantity,1);

      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE "##SetupFunctions##"@1000000024();
    BEGIN
    END;

    PROCEDURE CreateStdSetup@1000000018();
    VAR
      nHancedSearchHeader@1000000000 : Record 9062815;
      nHancedSearchTables@1000000001 : Record 9062816;
      nHancedSearchFields@1000000002 : Record 9062820;
      nHancedSearchFunctionSetup@1000000003 : Record 9062821;
      eItemsAndVariants@1000000004 : TextConst 'ENU=Items and Variants;ENG=Items and Variants';
      eCustomers@1000000005 : TextConst 'ENU=Customers;ENG=Customers';
      eVendors@1000000006 : TextConst 'ENU=Vendors;ENG=Vendors';
      eResources@1000000007 : TextConst 'ENU=Resources;ENG=Resources';
    BEGIN
      //This will create a sereies of std search indexes

      //Create search index 1 - items and variants
      nHancedSearchHeader.INIT;
      nHancedSearchHeader.PK := 1;
      nHancedSearchHeader.Description := eItemsAndVariants;
      nHancedSearchHeader."Records To Return" := 50;
      nHancedSearchHeader."Default Search Type" := nHancedSearchHeader."Default Search Type"::"OR";
      nHancedSearchHeader.Active := TRUE;
      nHancedSearchHeader.INSERT;

      //Insert the tables
      nHancedSearchTables.INIT;
      nHancedSearchTables."Parent Id" := nHancedSearchHeader.PK;
      nHancedSearchTables."Table No" := 27;
      nHancedSearchTables.INSERT;

      //Insertfields
      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 1;
      nHancedSearchFields.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 3;
      nHancedSearchFields.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 5;
      nHancedSearchFields.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 32;
      nHancedSearchFields.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 1217;
      nHancedSearchFields.INSERT;

      //variants table

      nHancedSearchTables.INIT;
      nHancedSearchTables."Parent Id" := nHancedSearchHeader.PK;
      nHancedSearchTables."Table No" := 5401;
      nHancedSearchTables.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 1;
      nHancedSearchFields.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 3;
      nHancedSearchFields.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 4;
      nHancedSearchFields.INSERT;

      //create search index 2 - customers
      nHancedSearchHeader.INIT;
      nHancedSearchHeader.PK := 2;
      nHancedSearchHeader.Description := eCustomers;
      nHancedSearchHeader."Records To Return" := 50;
      nHancedSearchHeader."Default Search Type" := nHancedSearchHeader."Default Search Type"::"OR";
      nHancedSearchHeader.Active := TRUE;
      nHancedSearchHeader.INSERT;

      nHancedSearchTables.INIT;
      nHancedSearchTables."Parent Id" := nHancedSearchHeader.PK;
      nHancedSearchTables."Table No" := 18;
      nHancedSearchTables.INSERT;

      //customer fields
      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 1;
      nHancedSearchFields.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 2;
      nHancedSearchFields.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 4;
      nHancedSearchFields.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 5;
      nHancedSearchFields.INSERT;

      //create search index 2 - vendors
      nHancedSearchHeader.INIT;
      nHancedSearchHeader.PK := 3;
      nHancedSearchHeader.Description := eVendors;
      nHancedSearchHeader."Records To Return" := 50;
      nHancedSearchHeader."Default Search Type" := nHancedSearchHeader."Default Search Type"::"OR";
      nHancedSearchHeader.Active := TRUE;
      nHancedSearchHeader.INSERT;

      nHancedSearchTables.INIT;
      nHancedSearchTables."Parent Id" := nHancedSearchHeader.PK;
      nHancedSearchTables."Table No" := 23;
      nHancedSearchTables.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 2;
      nHancedSearchFields.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 4;
      nHancedSearchFields.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 5;
      nHancedSearchFields.INSERT;

      //Create index 4 - resources
      nHancedSearchHeader.INIT;
      nHancedSearchHeader.PK := 4;
      nHancedSearchHeader.Description := eResources;
      nHancedSearchHeader."Records To Return" := 50;
      nHancedSearchHeader."Default Search Type" := nHancedSearchHeader."Default Search Type"::"OR";
      nHancedSearchHeader.Active := TRUE;
      nHancedSearchHeader.INSERT;

      nHancedSearchTables.INIT;
      nHancedSearchTables."Parent Id" := nHancedSearchHeader.PK;
      nHancedSearchTables."Table No" := 156;
      nHancedSearchTables.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 1;
      nHancedSearchFields.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 3;
      nHancedSearchFields.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 5;
      nHancedSearchFields.INSERT;

      nHancedSearchFields.INIT;
      nHancedSearchFields."Parent Id" := nHancedSearchTables."Parent Id";
      nHancedSearchFields."Table No" := nHancedSearchTables."Table No";
      nHancedSearchFields."Field No" := 9;
      nHancedSearchFields.INSERT;

      //need to create the function id links
      nHancedSearchFunctionSetup.INIT;
      nHancedSearchFunctionSetup."Function Id" := 1;
      nHancedSearchFunctionSetup."Search Index" := 1;
      nHancedSearchFunctionSetup.INSERT;

      nHancedSearchFunctionSetup.INIT;
      nHancedSearchFunctionSetup."Function Id" := 2;
      nHancedSearchFunctionSetup."Search Index" := 2;
      nHancedSearchFunctionSetup.INSERT;

      nHancedSearchFunctionSetup.INIT;
      nHancedSearchFunctionSetup."Function Id" := 3;
      nHancedSearchFunctionSetup."Search Index" := 3;
      nHancedSearchFunctionSetup.INSERT;

      nHancedSearchFunctionSetup.INIT;
      nHancedSearchFunctionSetup."Function Id" := 4;
      nHancedSearchFunctionSetup."Search Index" := 4;
      nHancedSearchFunctionSetup.INSERT;
    END;

    LOCAL PROCEDURE "##Multi##"@1000000002();
    BEGIN
    END;

    PROCEDURE GlobalSearch@1000000003(SearchFor@1000000001 : Text;VAR Results@1000000006 : TEMPORARY Record 9062817;SearchType@1000000008 : 'OR,AND');
    VAR
      SearchText@1000000000 : Text;
      tmpint@1000000003 : Integer;
      intTableNo@1000000005 : Integer;
      txtPosText@1000000004 : Text;
      NameValueBuffer@1000000002 : TEMPORARY Record 9062730;
      nHancedSearchHeader@1000000007 : Record 9062815;
    BEGIN
      //This is an override to allow the user to search specifying the search type

      Results.DELETEALL;

      SearchFor := String.Trim(SearchFor);
      SearchFor := LOWERCASE(SearchFor);

      //Consider appending a + to the search term if we are doing AND searches.
      IF SearchType = SearchType::"AND" THEN BEGIN
        String.SplitAdvanced(SearchFor,' ',TRUE,TRUE,NameValueBuffer);

        IF NameValueBuffer.FINDSET THEN BEGIN
          REPEAT
            SearchText := SearchText + '+' + NameValueBuffer.Value + ' ';
          UNTIL NameValueBuffer.NEXT = 0;
          SearchText := COPYSTR(SearchText,1,STRLEN(SearchText)-1);
        END;
      END ELSE
        SearchText := SearchFor;

      nHancedSearchHeader.SETRANGE("Exclude From Global Search",FALSE);
      IF nHancedSearchHeader.FINDSET THEN REPEAT

      CheckHeaderSetup(nHancedSearchHeader);

      //Tell the reader what the setups are
      SetupLuceneReader(nHancedSearchHeader);

      QueryParser.Escape(SearchText);
      LuceneQuery := QueryParser.Parse(SearchText);

      TopDocs := IndexSeacher.Search(LuceneQuery,nHancedSearchHeader."Records To Return");

      ints := TopDocs.TotalHits;

      FOREACH ScoreDoc IN TopDocs.ScoreDocs DO BEGIN
        ResDoc := IndexSeacher.Doc(ScoreDoc.Doc);

        EVALUATE(intTableNo,ResDoc.Get('tableid'));
        txtPosText := ResDoc.Get('positiontext');
        Results.RESET;
        Results.SETRANGE("Table No",intTableNo);
        Results.SETRANGE(PositionText,txtPosText);
        IF NOT Results.FINDFIRST THEN BEGIN
          i := i + 1;
          Results.INIT;
          Results.EntryNo := i;
          EVALUATE(Results."Table No",ResDoc.Get('tableid'));
          Results.FormNo := ResDoc.Get('formno');
          Results."Text 1" := ResDoc.Get('SearchIndex');
          Results.PositionText := ResDoc.Get('positiontext');
          Results.INSERT(TRUE);
        END;

      END;

      //If there is not enough records returned we need to do a wildcard search
      IF ints < nHancedSearchHeader."Records To Return" THEN BEGIN

        SearchText := String.ReplaceAll(SearchText,' ','* ');
        SearchText := SearchText + '*';

        QueryParser.Escape(SearchText);
        LuceneQuery := QueryParser.Parse(SearchText);
        //TopDocs := IndexSeacher.Search(LuceneQuery,200);
        TopDocs := IndexSeacher.Search(LuceneQuery,nHancedSearchHeader."Records To Return");

        ints := TopDocs.TotalHits;

        FOREACH ScoreDoc IN TopDocs.ScoreDocs DO BEGIN
      //Might need to break out of this loop if too many wildcards
          ResDoc := IndexSeacher.Doc(ScoreDoc.Doc);

          EVALUATE(intTableNo,ResDoc.Get('tableid'));
          txtPosText := ResDoc.Get('positiontext');
          Results.RESET;
          Results.SETRANGE("Table No",intTableNo);
          Results.SETRANGE(PositionText,txtPosText);
          IF NOT Results.FINDFIRST THEN BEGIN
            i := i + 1;
            Results.INIT;
            Results.EntryNo := i;
            EVALUATE(Results."Table No",ResDoc.Get('tableid'));
            Results.FormNo := ResDoc.Get('formno');
            Results."Text 1" := ResDoc.Get('SearchIndex');
            Results.PositionText := ResDoc.Get('positiontext');
            Results.INSERT(TRUE);
          END;

        END;

      END;

      Results.RESET;

      UNTIL nHancedSearchHeader.NEXT=0;
    END;

    BEGIN
    {
      //DOC NA2016.12 BM 02/02/2016 - Created
      //DOC NA2016.15 JH 26/04/2016 - CfMD amendments
    }
    END.
  }
}

