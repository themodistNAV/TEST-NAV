OBJECT Codeunit 9062298 Enhanced Field Management
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnRun=VAR
            EnhFieldValue@1000000000 : Record 9062328;
          BEGIN
          END;

  }
  CODE
  {
    VAR
      ErrNonEditable@1000000002 : TextConst 'ENU=The Field "%1" on Table "%2" is Not Editable;ENG=The Field "%1" on Table "%2" is Not Editable';
      ErrNotValidOption@1000000003 : TextConst 'ENU="""%1"" is not a valid option for Field ""%2"" on Table ""%3""";ENG="""%1"" is not a valid option for Field ""%2"" on Table ""%3"""';
      EnhancedFieldValue@1000000001 : Record 9062328;
      CriteriaManagement@9062229 : Codeunit 9062462;
      GenDevUtils@1000000004 : Codeunit 9062459;
      ObjectFieldToolkit@9062230 : Codeunit 9062343;
      TNPUtils@1000000000 : Codeunit 9062229;
      GlobalPositionText@1000000005 : Text[250];
      FieldTmp@1000000006 : TEMPORARY Record 2000000041;
      tDocumentDialog01@1000000008 : TextConst 'ENU=Open,Upload New Version;ENG=Open,Upload New Version';
      tDocumentDialog02@1000000007 : TextConst 'ENU=Choose one of the following options:;ENG=Choose one of the following options:';
      String@1000000009 : Codeunit 9062236;
      tFileNotFound@1000000010 : TextConst 'ENU=File not found;ENG=File not found';

    PROCEDURE GetFieldName@1000000032(pTableId@1000000000 : Integer;pFieldId@1000000001 : Integer) : Text;
    VAR
      lEnhancedFieldDefinition@1000000002 : Record 9062327;
      lFieldName@1000000003 : Text;
      eFieldName@1000000004 : TextConst 'ENU=Field %1;ENG=Field %1';
    BEGIN
      //DOC NA2016.10 - Returning field name
      //  -> pTableId: Table ID
      //  -> pFieldId: Field ID
      //  <- Field name

      IF (lEnhancedFieldDefinition.GET(pTableId, pFieldId)) THEN
        lFieldName := lEnhancedFieldDefinition.Name;
      IF (lFieldName = '') THEN
        lFieldName := STRSUBSTNO(eFieldName, pFieldId);
      EXIT(lFieldName);
    END;

    PROCEDURE GetFieldForRecord_FromPrimKeys@1000000006(TableNo@1000000000 : Integer;EnhFieldNo@1000000008 : Integer;PrimaryKeyValue1@1000000001 : Text[250];PrimaryKeyValue2@1000000002 : Text[250];PrimaryKeyValue3@1000000003 : Text[250];PrimaryKeyValue4@1000000004 : Text[250];PrimaryKeyValue5@1000000005 : Text[250];VAR EnhFieldValue@1000000007 : Record 9062328;CreateIfMissing@1000000012 : Boolean) PositionText : Text[250];
    VAR
      EnhFieldDef@1000000009 : Record 9062327;
      RecRef@1000000006 : RecordRef;
      FieldRef@1000000010 : FieldRef;
      PrimKeyFieldID@1000000011 : Integer;
    BEGIN
      EnhFieldValue.SETRANGE("Table No.",TableNo);
      EnhFieldValue.SETRANGE("Enhanced Field No.",EnhFieldNo);
      EnhFieldValue.SETRANGE("Primary Key Value 1",PrimaryKeyValue1);
      EnhFieldValue.SETRANGE("Primary Key Value 2",PrimaryKeyValue2);
      EnhFieldValue.SETRANGE("Primary Key Value 3",PrimaryKeyValue3);
      EnhFieldValue.SETRANGE("Primary Key Value 4",PrimaryKeyValue4);
      EnhFieldValue.SETRANGE("Primary Key Value 5",PrimaryKeyValue5);

      IF EnhFieldValue.FINDFIRST THEN EXIT(EnhFieldValue."Position Text");

      EnhFieldDef.SETRANGE("Table No.",TableNo);
      EnhFieldDef.SETRANGE("Enhanced Field No.",EnhFieldNo);
      IF NOT EnhFieldDef.FINDFIRST THEN EXIT('');

      RecRef.OPEN(TableNo);
      PrimKeyFieldID := TNPUtils.GetPrimaryKeyFieldID(TableNo,'',1);
      IF PrimKeyFieldID <> 0 THEN BEGIN
        FieldRef := RecRef.FIELD(PrimKeyFieldID);
        FieldRef.SETFILTER(PrimaryKeyValue1);
      END;

      PrimKeyFieldID := TNPUtils.GetPrimaryKeyFieldID(TableNo,'',2);
      IF PrimKeyFieldID <> 0 THEN BEGIN
        FieldRef := RecRef.FIELD(PrimKeyFieldID);
        FieldRef.SETFILTER(PrimaryKeyValue2);
      END;

      PrimKeyFieldID := TNPUtils.GetPrimaryKeyFieldID(TableNo,'',3);
      IF PrimKeyFieldID <> 0 THEN BEGIN
        FieldRef := RecRef.FIELD(PrimKeyFieldID);
        FieldRef.SETFILTER(PrimaryKeyValue3);
      END;

      PrimKeyFieldID := TNPUtils.GetPrimaryKeyFieldID(TableNo,'',4);
      IF PrimKeyFieldID <> 0 THEN BEGIN
        FieldRef := RecRef.FIELD(PrimKeyFieldID);
        FieldRef.SETFILTER(PrimaryKeyValue4);
      END;

      PrimKeyFieldID := TNPUtils.GetPrimaryKeyFieldID(TableNo,'',5);
      IF PrimKeyFieldID <> 0 THEN BEGIN
        FieldRef := RecRef.FIELD(PrimKeyFieldID);
        FieldRef.SETFILTER(PrimaryKeyValue5);
      END;

      IF RecRef.FINDFIRST THEN BEGIN
        IF NOT ((EnhFieldDef."Source Type" = EnhFieldDef."Source Type"::" ") OR
                (EnhFieldDef."Source Type" = EnhFieldDef."Source Type"::"Pick From List")) THEN EXIT(RecRef.GETPOSITION);

        IF CreateIfMissing THEN BEGIN
          EnhFieldValue.INIT;
          EnhFieldValue.VALIDATE("Table No.",EnhFieldDef."Table No.");
          EnhFieldValue.VALIDATE("Enhanced Field No.",EnhFieldDef."Enhanced Field No.");
          EnhFieldValue.VALIDATE("Position Text",RecRef.GETPOSITION);
          EnhFieldValue.INSERT(TRUE);
        END;
        EXIT(RecRef.GETPOSITION);

      END ELSE EXIT('');
    END;

    PROCEDURE AddFieldsToRecord@1000000002("Table No."@1000000000 : Integer;"Position Text"@1000000001 : Text[250]);
    VAR
      EnhFieldDef@1000000002 : Record 9062327;
      EnhFieldValue@1000000003 : Record 9062328;
      RecRef@1000000004 : RecordRef;
      TheTable@1000000005 : Integer;
    BEGIN
      EXIT;
      EnhFieldDef.SETRANGE("Table No.","Table No.");
      IF EnhFieldDef.FINDSET THEN BEGIN
        REPEAT
          IF NOT EnhFieldValue.GET(EnhFieldDef."Table No.",EnhFieldDef."Enhanced Field No.","Position Text") THEN BEGIN
            EnhFieldValue.INIT;
            EnhFieldValue.VALIDATE("Table No.",EnhFieldDef."Table No.");
            EnhFieldValue.VALIDATE("Enhanced Field No.",EnhFieldDef."Enhanced Field No.");
            EnhFieldValue.VALIDATE("Position Text","Position Text");
            EnhFieldValue.INSERT(TRUE);
          END;
        UNTIL EnhFieldDef.NEXT = 0;
      END;
    END;

    PROCEDURE AddFieldsToAllRecords@1000000000(TableNo@1000000000 : Integer);
    VAR
      RecRef@1000000001 : RecordRef;
    BEGIN
      RecRef.OPEN(TableNo);
      IF RecRef.FINDSET THEN BEGIN
        REPEAT
          AddFieldsToRecord(RecRef.NUMBER,RecRef.GETPOSITION);
        UNTIL RecRef.NEXT = 0;
      END;
    END;

    PROCEDURE MoveFieldsToRecord@1000000001(TableNo@1000000000 : Integer;From_PositionText@1000000001 : Text[250];To_PositionText@1000000003 : Text[250]);
    VAR
      EnhFieldValue@1000000002 : Record 9062328;
    BEGIN
      EnhFieldValue.SETRANGE("Table No.",TableNo);
      EnhFieldValue.SETRANGE("Position Text",From_PositionText);

      IF EnhFieldValue.FINDSET THEN BEGIN
        REPEAT
          EnhFieldValue.VALIDATE("Position Text",To_PositionText);
          EnhFieldValue.MODIFY(TRUE);
        UNTIL EnhFieldValue.NEXT = 0;
      END;
    END;

    PROCEDURE DeleteFieldsFromRecord@1000000004(TableNo@1000000000 : Integer;PositionText@1000000001 : Text[250]);
    VAR
      EnhFieldValue@1000000002 : Record 9062328;
    BEGIN
      EnhFieldValue.SETRANGE("Table No.",TableNo);
      EnhFieldValue.SETRANGE("Position Text",PositionText);
      EnhFieldValue.DELETEALL(TRUE);
    END;

    PROCEDURE GetDatabaseTableTriggerSetup@1000000003(pTableId@1000000004 : Integer;VAR pLogInsert@1000000003 : Boolean;VAR pLogModify@1000000002 : Boolean;VAR pLogDelete@1000000001 : Boolean;VAR pLogRename@1000000000 : Boolean);
    VAR
      EnhFieldDef@1000000005 : Record 9062327;
    BEGIN
      EnhFieldDef.SETRANGE("Table No.",pTableId);
      IF EnhFieldDef.FINDFIRST THEN BEGIN
        pLogInsert := TRUE;
        pLogModify := TRUE;
        pLogDelete := TRUE;
        pLogRename := TRUE;
      END;
    END;

    PROCEDURE SetValue@1000000005(VAR Rec@1000000000 : Record 9062328);
    BEGIN
      WITH Rec DO BEGIN
        CALCFIELDS("Field Type");
        CASE "Field Type" OF
          "Field Type"::Text : EVALUATE("Value as Text",Value);
          "Field Type"::Code :
            BEGIN
              EVALUATE("Value as Code",Value);
              Value := FORMAT("Value as Code");
            END;
          "Field Type"::Integer :
            BEGIN
              EVALUATE("Value as Integer",Value);
              Value := FORMAT("Value as Integer");
            END;
          "Field Type"::Decimal :
            BEGIN
              EVALUATE("Value as Decimal",Value);
              Value := FORMAT("Value as Decimal");
            END;
          "Field Type"::Date :
            BEGIN
              EVALUATE("Value as Date",Value);
              Value := FORMAT("Value as Date");
            END;
          "Field Type"::Time :
            BEGIN
              EVALUATE("Value as Time",Value);
              Value := FORMAT("Value as Time");
            END;
           "Field Type"::Link:
            BEGIN
              IF (STRPOS(Value,'www') > 0) AND (NOT(STRPOS(Value,'http://') > 0)) THEN
                Value := 'http://' + Value;
            END;
        END;

      END;
    END;

    PROCEDURE CalculateFieldValue@1000000007(TableNo@1000000015 : Integer;EnhancedFieldNo@1000000016 : Integer;PositionText@1000000017 : Text[250]) Value : Text[250];
    VAR
      EnhFieldDef@1000000014 : Record 9062327;
      EnhFieldVal@1000000000 : Record 9062328;
      InputFormula@1000000001 : Text[250];
      OutputFormula@1000000004 : Text[250];
      CurrWord@1000000003 : Text[100];
      i@1000000005 : Integer;
      RecRef@1000000006 : RecordRef;
      InFieldName@1000000002 : Boolean;
      eFormulaError@1000000008 : TextConst 'ENU=Sorry, could not calculate the Formula %1 (it was translated to %2);ENG=Sorry, could not calculate the Formula %1 (it was translated to %2)';
      IsAccSchedLineExpression@1000000013 : Boolean;
      Expression@1000000012 : Text[250];
      ColumnLayout@1000000010 : Record 334;
      CalcAddCurr@1000000009 : Boolean;
      FilterFieldRef@1000000024 : FieldRef;
      SourceRecRef@1000000018 : RecordRef;
      SourceRefFilterField@1000000019 : FieldRef;
      FromRecRef@1000000020 : RecordRef;
      ReturnFieldRef@1000000021 : FieldRef;
      j@1000000022 : Integer;
      KeyRef@1000000023 : KeyRef;
      ViewText@1000000026 : Text;
      KeyFieldRef@1000000027 : FieldRef;
      AggrValue@1000000028 : Decimal;
      AggrValue_Temp@1000000029 : Decimal;
      FieldRef@1000000030 : FieldRef;
      AggrValue_Date@1000000031 : Date;
      AggrValue_Date_Temp@1000000032 : Date;
      IsDate@1000000033 : Boolean;
      LookupReturnField@1000000034 : Record 2000000041;
      LookupReturnEnhField@1000000035 : Record 9062327;
      FilterText@1000000036 : Text;
      EnhFieldValReq@1000000037 : TEMPORARY Record 9062609;
      FormulaCalculator@1000000007 : Codeunit 9062445;
      LookupRel@1000000011 : Record 9062428;
    BEGIN
      IF PositionText = '' THEN EXIT(GetNoValueText(EnhFieldDef));

      EnhFieldDef.GET(TableNo,EnhancedFieldNo);

      CASE EnhFieldDef."Source Type" OF
        EnhFieldDef."Source Type"::Codeunit :
          BEGIN
            IF EnhFieldDef."Get Value from CU No." = 0 THEN EXIT(GetNoValueText(EnhFieldDef));
            EnhFieldValReq.INIT;
            EnhFieldValReq."Table No." := TableNo;
            EnhFieldValReq."Enhanced Field No." := EnhancedFieldNo;
            EnhFieldValReq."Position Text" := PositionText;
            EnhFieldValReq.INSERT;

            CODEUNIT.RUN(EnhFieldDef."Get Value from CU No.",EnhFieldValReq);
            EXIT(EnhFieldValReq."Return Value");
          END;
        EnhFieldDef."Source Type"::"Function" :
          BEGIN
            Value := CalcFunction(TableNo,EnhancedFieldNo,PositionText);
            IF Value = '' THEN BEGIN
              IF EnhFieldDef.GET(TableNo,EnhancedFieldNo) THEN
                EXIT(GetNoValueText(EnhFieldDef))
              ELSE
                EXIT('');
            END ELSE EXIT(Value);
          END;
        EnhFieldDef."Source Type"::" ", EnhFieldDef."Source Type"::"Pick From List" :
          BEGIN
            IF EnhFieldVal.GET(TableNo,EnhancedFieldNo,PositionText) THEN
              EXIT(EnhFieldVal.Value)
            ELSE BEGIN
              IF EnhFieldDef.GET(TableNo,EnhancedFieldNo) THEN BEGIN
                Value := GetFieldDefaultValue(EnhFieldDef);
              END;
              IF Value = '' THEN BEGIN
               Value := GetNoValueText(EnhFieldDef);
              END;
              EXIT(Value);
            END;

          END;

        EnhFieldDef."Source Type"::Concatenate :
          BEGIN
            RecRef.OPEN(TableNo);
            RecRef.SETPOSITION(PositionText);
            IF RecRef.GET(RecRef.RECORDID) THEN
              EXIT(TNPUtils.ConcatenateFieldValues(EnhFieldDef.Formula,RecRef))
            ELSE
              EXIT(GetNoValueText(EnhFieldDef));
          END;
        EnhFieldDef."Source Type"::Calculated :
          BEGIN
            IF EnhFieldDef.Formula = '' THEN EXIT(GetNoValueText(EnhFieldDef));

            RecRef.OPEN(TableNo);
            RecRef.SETPOSITION(PositionText);

            IF NOT RecRef.GET(RecRef.RECORDID) THEN EXIT(GetNoValueText(EnhFieldDef));

            IF (EnhFieldDef."Formula Criteria ID" <> 0) THEN
              CriteriaManagement.ApplyCriteriaToRecRef(EnhFieldDef."Formula Criteria ID", RecRef);

            InputFormula := EnhFieldDef.Formula;

            i := 0;
            REPEAT
              i += 1;
              IF InFieldName THEN BEGIN
                IF NOT IsFieldNameBracket(InputFormula[i]) THEN BEGIN
                  CurrWord += FORMAT(InputFormula[i]);
                END ELSE BEGIN
                  CurrWord += FORMAT(InputFormula[i]);
                  InFieldName := FALSE;
                END;
              END ELSE BEGIN
                IF NOT IsSpecialChar(InputFormula[i]) THEN BEGIN
                  IF IsFieldNameBracket(InputFormula[i]) THEN InFieldName := TRUE;
                  CurrWord += FORMAT(InputFormula[i]);
                END ELSE BEGIN
                  InFieldName := FALSE;
                  IF CurrWord <> '' THEN OutputFormula += '(' + GetFieldValue(RecRef,CurrWord) + ')';
                  CurrWord := '';
                  OutputFormula += FORMAT(InputFormula[i]);
                END;
              END;

            UNTIL i = STRLEN(InputFormula);

            IF CurrWord <> '' THEN OutputFormula += '(' + GetFieldValue(RecRef,CurrWord) + ')';

            Value := FORMAT(FormulaCalculator.EvaluateExpression(OutputFormula));

            IF Value = '' THEN Value := GetNoValueText(EnhFieldDef);
            EXIT(Value);
          END;
        EnhFieldDef."Source Type"::Lookup :
          BEGIN
            //Return blank if the field to get the value of is not specified
            IF EnhFieldDef."Lookup To Table No." = 0 THEN EXIT(GetNoValueText(EnhFieldDef));
            IF EnhFieldDef."Lookup Return Field No." = 0 THEN EXIT(GetNoValueText(EnhFieldDef));

            //Get the record we're linking from
            FromRecRef.OPEN(TableNo);
            FromRecRef.SETPOSITION(PositionText);
            IF NOT FromRecRef.GET(FromRecRef.RECORDID) THEN EXIT(GetNoValueText(EnhFieldDef));

            SourceRecRef.OPEN(EnhFieldDef."Lookup To Table No.");
            IF EnhFieldDef."Lookup To Table Key No." <> 0 THEN BEGIN
              KeyRef := SourceRecRef.KEYINDEX(EnhFieldDef."Lookup To Table Key No.");
              j := 1;
              REPEAT
                KeyFieldRef := KeyRef.FIELDINDEX(j);
                IF ViewText <> '' THEN ViewText += ',';
                ViewText += KeyFieldRef.CAPTION;
                j += 1;
              UNTIL j > KeyRef.FIELDCOUNT;
            END;

            IF ViewText <> '' THEN BEGIN
              SourceRecRef.SETVIEW('SORTING(' + ViewText + ')');
            END;


            //Set the Filters on the record we're looking up to
            //DOC PC - Readded code
            LookupRel.SETRANGE("Table No.",EnhFieldDef."Table No.");
            LookupRel.SETRANGE("Enhanced Field No.",EnhFieldDef."Enhanced Field No.");
            LookupRel.SETFILTER("Where Field No.",'<>%1',0);
            IF LookupRel.FINDSET THEN BEGIN
              REPEAT
                SourceRefFilterField := SourceRecRef.FIELD(LookupRel."Where Field No.");
                CASE LookupRel."Value Type" OF
                  LookupRel."Value Type"::CONST, LookupRel."Value Type"::FILTER :
                    FilterText := LookupRel.Value;
                  LookupRel."Value Type"::FIELD, LookupRel."Value Type"::"ENHANCED FIELD" :
                    BEGIN
                      FilterText := GetFieldValue(FromRecRef,LookupRel."Value of Field Name");
                    END;
                END;

                GenDevUtils.FilterRecord(SourceRecRef,SourceRefFilterField,FilterText,FALSE);

              UNTIL LookupRel.NEXT = 0;
            END;

            CASE EnhFieldDef."Lookup Function" OF
              EnhFieldDef."Lookup Function"::First :
                IF SourceRecRef.FINDFIRST THEN EXIT(GetFieldValue(SourceRecRef,EnhFieldDef.GetLookupReturnFieldName));
              EnhFieldDef."Lookup Function"::Last  :
                IF SourceRecRef.FINDLAST THEN EXIT(GetFieldValue(SourceRecRef,EnhFieldDef.GetLookupReturnFieldName));
              EnhFieldDef."Lookup Function"::Count : EXIT(FORMAT(SourceRecRef.COUNT));
              EnhFieldDef."Lookup Function"::Sum :
                BEGIN
                  IF NOT SourceRecRef.FINDSET THEN EXIT('0');
                  IF EnhFieldDef."Lookup Return Field Type" = EnhFieldDef."Lookup Return Field Type"::Field THEN BEGIN
                    FieldRef := SourceRecRef.FIELD(EnhFieldDef."Lookup Return Field No.");
                    FieldRef.CALCSUM;
                    AggrValue := FieldRef.VALUE;
                  END ELSE BEGIN
                    AggrValue := 0;
                    AggrValue_Temp := 0;
                    REPEAT
                      IF EVALUATE(AggrValue_Temp,GetFieldValue(SourceRecRef,EnhFieldDef.GetLookupReturnFieldName)) THEN BEGIN
                        AggrValue += AggrValue_Temp;
                      END;
                    UNTIL SourceRecRef.NEXT = 0;
                  END;
                  EXIT(FORMAT(AggrValue));
                END;
              EnhFieldDef."Lookup Function"::Min :
                BEGIN
                  IF NOT SourceRecRef.FINDSET THEN EXIT('');
                  //Is Date or Number?
                  IF EnhFieldDef."Lookup Return Field Type" = EnhFieldDef."Lookup Return Field Type"::Field THEN BEGIN
                    LookupReturnField.GET(EnhFieldDef."Lookup To Table No.",EnhFieldDef."Lookup Return Field No.");
                    IsDate := FORMAT(LookupReturnField.Type) = 'Date';
                  END ELSE BEGIN
                    LookupReturnEnhField.GET(EnhFieldDef."Lookup To Table No.",EnhFieldDef."Lookup Return Field No.");
                    IsDate := LookupReturnEnhField.Type = LookupReturnEnhField.Type::Date;
                  END;

                  IF NOT IsDate THEN BEGIN
                    AggrValue := 0;
                    AggrValue_Temp := 0;
                    REPEAT
                      IF EVALUATE(AggrValue_Temp,GetFieldValue(SourceRecRef,EnhFieldDef.GetLookupReturnFieldName)) THEN BEGIN
                        IF (AggrValue_Temp < AggrValue) OR (AggrValue = 0) THEN AggrValue := AggrValue_Temp;
                      END;
                    UNTIL SourceRecRef.NEXT = 0;
                    EXIT(FORMAT(AggrValue));
                  END ELSE BEGIN
                    AggrValue_Date := 0D;
                    AggrValue_Date_Temp := 0D;
                    REPEAT
                      IF EVALUATE(AggrValue_Date_Temp,GetFieldValue(SourceRecRef,EnhFieldDef.GetLookupReturnFieldName)) THEN BEGIN
                        IF AggrValue_Date_Temp <> 0D THEN BEGIN
                          IF (AggrValue_Date_Temp < AggrValue_Date) OR (AggrValue_Date = 0D) THEN AggrValue_Date := AggrValue_Date_Temp;
                        END;
                      END;
                    UNTIL SourceRecRef.NEXT = 0;
                    EXIT(FORMAT(AggrValue_Date));
                  END;

                END;

              EnhFieldDef."Lookup Function"::Max :
                BEGIN
                  IF NOT SourceRecRef.FINDSET THEN EXIT('0');
                  //Is Date or Number?
                  IF EnhFieldDef."Lookup Return Field Type" = EnhFieldDef."Lookup Return Field Type"::Field THEN BEGIN
                    LookupReturnField.GET(EnhFieldDef."Lookup To Table No.",EnhFieldDef."Lookup Return Field No.");
                    IsDate := FORMAT(LookupReturnField.Type) = 'Date';
                  END ELSE BEGIN
                    LookupReturnEnhField.GET(EnhFieldDef."Lookup To Table No.",EnhFieldDef."Lookup Return Field No.");
                    IsDate := LookupReturnEnhField.Type = LookupReturnEnhField.Type::Date;
                  END;

                  IF NOT IsDate THEN BEGIN
                    AggrValue := 0;
                    AggrValue_Temp := 0;
                    REPEAT
                      IF EVALUATE(AggrValue_Temp,GetFieldValue(SourceRecRef,EnhFieldDef.GetLookupReturnFieldName)) THEN BEGIN
                        IF (AggrValue_Temp > AggrValue) OR (AggrValue = 0) THEN AggrValue := AggrValue_Temp;
                      END;
                    UNTIL SourceRecRef.NEXT = 0;
                    EXIT(FORMAT(AggrValue));
                  END ELSE BEGIN
                    AggrValue_Date := 0D;
                    AggrValue_Date_Temp := 0D;
                    REPEAT
                      IF EVALUATE(AggrValue_Date_Temp,GetFieldValue(SourceRecRef,EnhFieldDef.GetLookupReturnFieldName)) THEN BEGIN
                        IF AggrValue_Date_Temp <> 0D THEN BEGIN
                          IF (AggrValue_Date_Temp > AggrValue_Date) OR (AggrValue_Date = 0D) THEN AggrValue_Date := AggrValue_Date_Temp;
                        END;
                      END;
                    UNTIL SourceRecRef.NEXT = 0;
                    EXIT(FORMAT(AggrValue_Date));
                  END;

                END;

            END;
          END;


      END;

      IF Value = '' THEN GetNoValueText(EnhFieldDef) ELSE EXIT(Value);
    END;

    PROCEDURE IsSpecialChar@1000000013(theChar@1000000001 : Char) : Boolean;
    VAR
      SpecialChars@1000000000 : Text[100];
    BEGIN
      SpecialChars := ',+,-,/,*,(,),';
      EXIT(STRPOS(SpecialChars,',' + FORMAT(theChar) + ',') <> 0);
    END;

    PROCEDURE IsFieldNameBracket@1000000014(theChar@1000000001 : Char) : Boolean;
    VAR
      SpecialChars@1000000000 : Text[100];
    BEGIN
      SpecialChars := ',",[,],';
      EXIT(STRPOS(SpecialChars,',' + FORMAT(theChar) + ',') <> 0);
    END;

    PROCEDURE GetFieldValue@1000000008(VAR RecRef@1000000000 : RecordRef;FieldName@1000000001 : Text[50]) FieldValue : Text[250];
    VAR
      FieldRef@1000000002 : FieldRef;
      Fields@1000000003 : Record 2000000041;
      tmpDecimal@1000000004 : Decimal;
      EnhFieldDef@1000000005 : Record 9062327;
      EnhFieldVal@1000000006 : Record 9062328;
      PositionText@1000000007 : Text[250];
      theFilter@1000000008 : Text;
      StartTime@1000000009 : DateTime;
      EndTime@1000000010 : DateTime;
    BEGIN
      //Is it a number?
      IF EVALUATE(tmpDecimal,FieldName) THEN EXIT(FieldName);

      FieldName := String.Replace(FieldName,'"','');
      FieldName := String.Replace(FieldName,'[','');
      FieldName := String.Replace(FieldName,']','');
      FieldName := String.Replace(FieldName,'(','*');
      FieldName := String.Replace(FieldName,')','*');

      FieldTmp.RESET;
      FieldTmp.SETCURRENTKEY(TableNo,FieldName);
      FieldTmp.SETRANGE(TableNo,RecRef.NUMBER);
      IF NOT FieldTmp.FINDSET THEN BEGIN
        Fields.SETRANGE(TableNo,RecRef.NUMBER);
        Fields.FINDSET;
        REPEAT
          FieldTmp.INIT;
          FieldTmp.TableNo := Fields.TableNo;
          FieldTmp."No." := Fields."No.";
          FieldTmp.FieldName := Fields.FieldName;
          FieldTmp.Class := Fields.Class;

          IF NOT FieldTmp.INSERT THEN;

        UNTIL Fields.NEXT = 0;
      END;

      //Check for real field
      FieldTmp.SETCURRENTKEY(TableNo,FieldName);
      FieldTmp.SETRANGE(TableNo,RecRef.NUMBER);
      FieldTmp.SETFILTER(FieldName,'@'+FieldName);
      IF FieldTmp.FINDFIRST THEN BEGIN
        CLEAR(FieldRef);
        FieldRef := RecRef.FIELD(FieldTmp."No.");
        IF FieldTmp.Class = Fields.Class::FlowFilter THEN EXIT(FieldRef.GETFILTER);
        IF FieldTmp.Class = Fields.Class::FlowField THEN FieldRef.CALCFIELD;

        EXIT(FORMAT(FieldRef.VALUE));
      END;

      //Check for Enhanced Field
      EnhFieldDef.SETRANGE("Table No.",RecRef.NUMBER);
      EnhFieldDef.SETFILTER(Name,'@'+FieldName);
      IF EnhFieldDef.FINDFIRST THEN BEGIN
        EXIT(CalculateFieldValue(EnhFieldDef."Table No.",EnhFieldDef."Enhanced Field No.",RecRef.GETPOSITION));
      END;
    END;

    PROCEDURE GetFieldValue_Text@1000000010(TableNo@1000000000 : Integer;PositionText@1000000001 : Text;FieldName@1000000002 : Text[50]) FieldValue : Text[250];
    VAR
      RecRef@1000000003 : RecordRef;
    BEGIN
      IF TableNo = 0 THEN EXIT('');
      RecRef.OPEN(TableNo);
      RecRef.SETPOSITION(PositionText);

      EXIT(GetFieldValue(RecRef,FieldName));
    END;

    PROCEDURE GetFieldValue_Decimal@1000000015(TableNo@1000000000 : Integer;PositionText@1000000001 : Text;FieldName@1000000002 : Text[50]) FieldValue : Decimal;
    VAR
      RecRef@1000000003 : RecordRef;
    BEGIN
      IF TableNo = 0 THEN EXIT(0);
      RecRef.OPEN(TableNo);
      RecRef.SETPOSITION(PositionText);

      IF EVALUATE(FieldValue,GetFieldValue(RecRef,FieldName)) THEN EXIT ELSE EXIT(0);
    END;

    PROCEDURE GetFieldValue_Integer@1000000016(TableNo@1000000000 : Integer;PositionText@1000000001 : Text;FieldName@1000000002 : Text[50]) FieldValue : Integer;
    VAR
      RecRef@1000000003 : RecordRef;
    BEGIN
      IF TableNo = 0 THEN EXIT(0);
      RecRef.OPEN(TableNo);
      RecRef.SETPOSITION(PositionText);

      IF EVALUATE(FieldValue,GetFieldValue(RecRef,FieldName)) THEN EXIT ELSE EXIT(0);
    END;

    PROCEDURE GetFieldValue_Date@1000000017(TableNo@1000000000 : Integer;PositionText@1000000001 : Text;FieldName@1000000002 : Text[50]) FieldValue : Date;
    VAR
      RecRef@1000000003 : RecordRef;
    BEGIN
      IF TableNo = 0 THEN EXIT(0D);
      RecRef.OPEN(TableNo);
      RecRef.SETPOSITION(PositionText);

      IF EVALUATE(FieldValue,GetFieldValue(RecRef,FieldName)) THEN EXIT ELSE EXIT(0D);
    END;

    PROCEDURE GetFieldValue_Boolean@1000000018(TableNo@1000000000 : Integer;PositionText@1000000001 : Text;FieldName@1000000002 : Text[50]) FieldValue : Boolean;
    VAR
      RecRef@1000000003 : RecordRef;
    BEGIN
      IF TableNo = 0 THEN EXIT(FALSE);
      RecRef.OPEN(TableNo);
      RecRef.SETPOSITION(PositionText);

      IF EVALUATE(FieldValue,GetFieldValue(RecRef,FieldName)) THEN EXIT ELSE EXIT(FALSE);
    END;

    PROCEDURE GetFieldValue_YesNo@1000000023(TableNo@1000000002 : Integer;PositionText@1000000001 : Text;FieldName@1000000000 : Text[50]) FieldValue : Code[10];
    VAR
      RecRef@1000000003 : RecordRef;
    BEGIN
      IF TableNo = 0 THEN EXIT('');
      RecRef.OPEN(TableNo);
      RecRef.SETPOSITION(PositionText);

      EXIT(GetFieldValue(RecRef,FieldName));
    END;

    PROCEDURE GetFieldValue_Document@1000000024(TableNo@1000000002 : Integer;PositionText@1000000001 : Text;FieldName@1000000000 : Text[50]) FieldValue : Text[250];
    VAR
      RecRef@1000000003 : RecordRef;
      FileSystem@1000000004 : Codeunit 9062264;
      FromFolder@1000000005 : Text;
      FromFilter@1000000006 : Text;
      FromFile@1000000007 : Text;
      ToFile@1000000008 : Text;
      EnhFieldVal@1000000009 : Record 9062328;
      EnhFieldDef@1000000010 : Record 9062327;
      TempFile@1000000011 : Text;
      eSaveAs@1000000012 : TextConst 'ENU=Save As;ENG=Save As';
      eFileSavedAs@1000000013 : TextConst 'ENU=File saved as "%1";ENG=File saved as "%1"';
    BEGIN
      IF TableNo = 0 THEN EXIT('');
      RecRef.OPEN(TableNo);
      RecRef.SETPOSITION(PositionText);
      EnhFieldDef.SETRANGE("Table No.",TableNo);
      EnhFieldDef.SETRANGE(Name,FieldName);
      IF EnhFieldDef.FINDSET THEN BEGIN
        EnhFieldVal.SETRANGE("Table No.",TableNo);
        EnhFieldVal.SETRANGE("Enhanced Field No.", EnhFieldDef."Enhanced Field No.");
        EnhFieldVal.SETRANGE("Position Text",PositionText);
        IF EnhFieldVal.FINDSET THEN BEGIN
          IF EnhFieldVal.File.HASVALUE THEN BEGIN
            TempFile := FileSystem.GetTempPathForFile(FALSE, EnhFieldVal."Value as Text");
            EnhFieldVal.File.EXPORT(TempFile);
            ToFile := EnhFieldVal."Value as Text";
            IF DOWNLOAD(TempFile,eSaveAs,'','',ToFile) THEN BEGIN
              FileSystem.DeleteFileIfExists(FALSE, TempFile);
              EXIT(STRSUBSTNO(eFileSavedAs,EnhFieldVal."Value as Text"));
            END;
          END ELSE BEGIN
            EXIT(tFileNotFound);
          END;
         END;
      END;
    END;

    PROCEDURE GetFieldValue_DocumentBLOB@1000000026(TableNo@1000000002 : Integer;PositionText@1000000001 : Text;FieldName@1000000000 : Text[50];VAR TempBlob@1000000012 : TEMPORARY Record 99008535) FieldValue : Text[250];
    VAR
      RecRef@1000000003 : RecordRef;
      FileManagement@1000000004 : Codeunit 419;
      FromFolder@1000000005 : Text;
      FromFilter@1000000006 : Text;
      FromFile@1000000007 : Text;
      ToFile@1000000008 : Text;
      EnhFieldVal@1000000009 : Record 9062328;
      EnhFieldDef@1000000010 : Record 9062327;
      TempFile@1000000011 : Text;
    BEGIN
      IF TableNo = 0 THEN EXIT('');
      RecRef.OPEN(TableNo);
      RecRef.SETPOSITION(PositionText);
      EnhFieldDef.SETRANGE("Table No.",TableNo);
      EnhFieldDef.SETRANGE(Name,FieldName);
      IF EnhFieldDef.FINDSET THEN BEGIN
        EnhFieldVal.SETRANGE("Table No.",TableNo);
        EnhFieldVal.SETRANGE("Enhanced Field No.", EnhFieldDef."Enhanced Field No.");
        EnhFieldVal.SETRANGE("Position Text",PositionText);
        IF EnhFieldVal.FINDSET THEN BEGIN
          EnhFieldVal.CALCFIELDS(File);
          IF EnhFieldVal.File.HASVALUE THEN BEGIN
            TempBlob.Blob := EnhFieldVal.File;
            TempBlob.MODIFY;
          END ELSE BEGIN
            EXIT(tFileNotFound);
          END;
         END;
      END;
    END;

    PROCEDURE SetFieldValue_Document@1000000025(TableNo@1000000002 : Integer;PositionText@1000000001 : Text;FieldName@1000000000 : Text[50]) FieldValue : Text[250];
    VAR
      RecRef@1000000003 : RecordRef;
      FileManagement@1000000004 : Codeunit 419;
      FromFolder@1000000005 : Text;
      FromFilter@1000000006 : Text;
      FromFile@1000000007 : Text;
      ToFile@1000000008 : Variant;
      EnhFieldVal@1000000009 : Record 9062328;
      EnhFieldDef@1000000010 : Record 9062327;
      FileName@1000000011 : Text[250];
      eUploadTitle@1000000012 : TextConst 'ENU=Please select the document;ENG=Please select the document';
      eFinalMessage@1000000013 : TextConst 'ENU=File "%1" has been uploaded successfully;ENG=File "%1" has been uploaded successfully';
    BEGIN
      IF TableNo = 0 THEN EXIT('');
      RecRef.OPEN(TableNo);
      RecRef.SETPOSITION(PositionText);

      IF UPLOAD(eUploadTitle,FromFolder,FromFilter,FromFile,ToFile) THEN BEGIN
         FileName := FileManagement.GetFileName(ToFile);
         EnhFieldDef.SETRANGE("Table No.",TableNo);
         EnhFieldDef.SETRANGE(Name,FieldName);
         IF EnhFieldDef.FINDSET THEN BEGIN
          EnhFieldVal.SETRANGE("Table No.",TableNo);
          EnhFieldVal.SETRANGE("Enhanced Field No.", EnhFieldDef."Enhanced Field No.");
          EnhFieldVal.SETRANGE("Position Text",PositionText);
          IF EnhFieldVal.FINDSET THEN BEGIN
            CLEAR(EnhFieldVal.File);
            EnhFieldVal.File.IMPORT(ToFile);
            EnhFieldVal.VALIDATE(Value,FileName);
            EnhFieldVal.VALIDATE("Value as Text",FileName);
            EnhFieldVal.MODIFY(TRUE);
          END ELSE BEGIN
            EnhFieldVal.INIT;
            EnhFieldVal.VALIDATE("Table No.",TableNo);
            EnhFieldVal.VALIDATE("Enhanced Field No.", EnhFieldDef."Enhanced Field No.");
            EnhFieldVal.VALIDATE("Position Text",PositionText);
            EnhFieldVal.File.IMPORT(ToFile);
            EnhFieldVal.VALIDATE(Value,FileName);
            EnhFieldVal.VALIDATE("Value as Text",FileName);
            EnhFieldVal.INSERT(TRUE);
          END;
         END;
      END;
      FileManagement.DeleteServerFile(ToFile);
      EXIT(STRSUBSTNO(eFinalMessage,EnhFieldVal.Value));
    END;

    PROCEDURE GetFieldValue_ImageBLOB@1000000028(TableNo@1000000002 : Integer;PositionText@1000000001 : Text;FieldName@1000000000 : Text[50];VAR TempBlob@1000000012 : TEMPORARY Record 99008535) FieldValue : Text[250];
    VAR
      RecRef@1000000003 : RecordRef;
      FileManagement@1000000004 : Codeunit 419;
      FromFolder@1000000005 : Text;
      FromFilter@1000000006 : Text;
      FromFile@1000000007 : Text;
      ToFile@1000000008 : Text;
      EnhFieldVal@1000000009 : Record 9062328;
      EnhFieldDef@1000000010 : Record 9062327;
      TempFile@1000000011 : Text;
      eImageNotFound@1000000013 : TextConst 'ENU=Image not found;ENG=Image not found';
    BEGIN
      IF TableNo = 0 THEN EXIT('');
      RecRef.OPEN(TableNo);
      RecRef.SETPOSITION(PositionText);
      EnhFieldDef.SETRANGE("Table No.",TableNo);
      EnhFieldDef.SETRANGE(Name,FieldName);
      IF EnhFieldDef.FINDSET THEN BEGIN
        EnhFieldVal.SETRANGE("Table No.",TableNo);
        EnhFieldVal.SETRANGE("Enhanced Field No.", EnhFieldDef."Enhanced Field No.");
        EnhFieldVal.SETRANGE("Position Text",PositionText);
        IF EnhFieldVal.FINDSET THEN BEGIN
          EnhFieldVal.CALCFIELDS(Image);
          IF EnhFieldVal.Image.HASVALUE THEN BEGIN
            TempBlob.Blob := EnhFieldVal.Image;
            TempBlob.MODIFY;
          END ELSE BEGIN
            EXIT(eImageNotFound);
          END;
         END;
      END;
    END;

    PROCEDURE GetNoValueText@1000000011(EnhFieldDef@1000000000 : Record 9062327) : Text;
    BEGIN
      CASE EnhFieldDef.Type OF
        EnhFieldDef.Type::Integer,EnhFieldDef.Type::Decimal : EXIT('0');
        ELSE EXIT('');
      END;
    END;

    PROCEDURE SetFieldValue@1000000009(TableNo@1000000000 : Integer;FieldNo@1000000001 : Integer;PositionText@1000000002 : Text[1024];NewValue@1000000003 : Text[1024]) ValueSetTo : Text;
    VAR
      RecRef@1000000004 : RecordRef;
      PrimaryKeyValue1@1000000005 : Text;
      PrimaryKeyValue2@1000000006 : Text;
      PrimaryKeyValue3@1000000007 : Text;
      PrimaryKeyValue4@1000000008 : Text;
      PrimaryKeyValue5@1000000009 : Text;
      EnhFieldValue@1000000010 : Record 9062328;
      EnhFieldPos@1000000011 : Text;
      EnhFieldDef@1000000012 : Record 9062327;
      FieldLookup@1000000013 : Record 9062312;
    BEGIN
      EnhFieldDef.GET(TableNo,FieldNo);
      EnhFieldDef.CALCFIELDS("Table Name");

      IF NOT EnhFieldDef.Editable THEN BEGIN
        ERROR(ErrNonEditable,EnhFieldDef.Name,EnhFieldDef."Table Name");
      END;


      IF (EnhFieldDef."Source Type" = EnhFieldDef."Source Type"::"Pick From List") AND (NewValue <> '') THEN BEGIN
        EnhFieldDef.PopulateLookupList;
        FieldLookup.SETRANGE("Table ID",EnhFieldDef."Table No.");
        FieldLookup.SETRANGE("Field Type",FieldLookup."Field Type"::"Enhanced Field");
        FieldLookup.SETRANGE("Field No.",EnhFieldDef."Enhanced Field No.");
        FieldLookup.SETRANGE(Code,NewValue);
        IF NOT FieldLookup.FINDFIRST THEN ERROR(ErrNotValidOption,NewValue,EnhFieldDef.Name,EnhFieldDef."Table Name");
      END;

      PrimaryKeyValue1 := TNPUtils.GetPrimaryKey(TableNo,PositionText,1);
      PrimaryKeyValue2 := TNPUtils.GetPrimaryKey(TableNo,PositionText,2);
      PrimaryKeyValue3 := TNPUtils.GetPrimaryKey(TableNo,PositionText,3);
      PrimaryKeyValue4 := TNPUtils.GetPrimaryKey(TableNo,PositionText,4);
      PrimaryKeyValue5 := TNPUtils.GetPrimaryKey(TableNo,PositionText,5);


      EnhFieldPos := GetFieldForRecord_FromPrimKeys(TableNo,FieldNo,
                                        PrimaryKeyValue1,
                                        PrimaryKeyValue2,
                                        PrimaryKeyValue3,
                                        PrimaryKeyValue4,
                                        PrimaryKeyValue5,
                                        EnhFieldValue,TRUE);
      IF (EnhFieldPos <> '') AND (EnhFieldValue."Table No." <> 0 )THEN BEGIN
        EnhFieldValue.VALIDATE(Value,NewValue);
        EnhFieldValue.MODIFY(TRUE);
        ValueSetTo := CalculateFieldValue(TableNo,FieldNo,PositionText);
      END;
    END;

    PROCEDURE CalcFunction@1000000012(TableNo@1000000002 : Integer;EnhancedFieldNo@1000000001 : Integer;PositionText@1000000000 : Text[250]) Value : Text;
    VAR
      NumParams@1000000003 : Integer;
      Method@1000000004 : Text;
      Params@1000000005 : ARRAY [100] OF Text;
      i@1000000006 : Integer;
      EnhFieldDef@1000000007 : Record 9062327;
      tmpDate@1000000008 : Date;
      RecRef@1000000009 : RecordRef;
      PeriodMgt@1000000012 : Codeunit 359;
      CalendarSource@1000000011 : ' ,System,AccPeriod';
      Calendar@1000000010 : Record 2000000007;
      tmpDateFormula@1000000013 : DateFormula;
    BEGIN
      EnhFieldDef.GET(TableNo,EnhancedFieldNo);
      NumParams := TNPUtils.ParseMethodCallText(EnhFieldDef.Formula,Method,Params);

      IF NumParams = 0 THEN EXIT('');

      CASE UPPERCASE(Method) OF
        'YEAR' :
          BEGIN
            IF NOT EVALUATE(tmpDate,Params[1]) THEN BEGIN
              RecRef.OPEN(TableNo);
              RecRef.SETPOSITION(PositionText);
              IF RecRef.GET(RecRef.RECORDID) THEN BEGIN
                IF NOT EVALUATE(tmpDate,GetFieldValue(RecRef,Params[1])) THEN;
              END;
            END;
            IF tmpDate = 0D THEN BEGIN
              IF UPPERCASE(Params[1]) = 'TODAY' THEN tmpDate := TODAY;
            END;
            IF tmpDate <> 0D THEN BEGIN
              EXIT(FORMAT(DATE2DMY(tmpDate,3)));
            END ELSE EXIT('');
          END;

        'MONTH' :
          BEGIN
            IF NOT EVALUATE(tmpDate,Params[1]) THEN BEGIN
              RecRef.OPEN(TableNo);
              RecRef.SETPOSITION(PositionText);
              IF RecRef.GET(RecRef.RECORDID) THEN BEGIN
                IF NOT EVALUATE(tmpDate,GetFieldValue(RecRef,Params[1])) THEN;
              END;
            END;
            IF tmpDate = 0D THEN BEGIN
              IF UPPERCASE(Params[1]) = 'TODAY' THEN tmpDate := TODAY;
            END;
            IF tmpDate <> 0D THEN BEGIN
              EXIT(FORMAT(DATE2DMY(tmpDate,2)));
            END ELSE EXIT('');
          END;

        'PERIODSTART' :
          BEGIN
            IF NOT EVALUATE(tmpDate,Params[1]) THEN BEGIN
              RecRef.OPEN(TableNo);
              RecRef.SETPOSITION(PositionText);
              IF RecRef.GET(RecRef.RECORDID) THEN BEGIN
                IF NOT EVALUATE(tmpDate,GetFieldValue(RecRef,Params[1])) THEN;
              END;
            END;
            IF tmpDate = 0D THEN BEGIN
              IF UPPERCASE(Params[1]) = 'TODAY' THEN tmpDate := TODAY;
            END;
            IF tmpDate <> 0D THEN BEGIN
                CalendarSource := CalendarSource::AccPeriod;
                PeriodMgt.SetCalendarSource(CalendarSource);
                EVALUATE(tmpDateFormula,'CD-CM');
                PeriodMgt.CalcDate2(tmpDateFormula,tmpDate,Calendar);
                EXIT(FORMAT(tmpDate));
            END ELSE EXIT('');
          END;

      END;
    END;

    PROCEDURE GetFieldValueToleranceResult@1000000019(TableNo@1000000005 : Integer;FieldName@1000000000 : Text[50];PositionText@1000000006 : Text;FieldValue@1000000003 : Text) ToleranceResult : Integer;
    VAR
      RecRef@1000000001 : RecordRef;
      EnhFieldDef@1000000002 : Record 9062327;
      TmpInt@1000000004 : Integer;
      CriteriaValue@1000000007 : Text;
      ComparisonType@1000000008 : ' ,=,<>,>,>=,<,<=,Contains,Doesnt Contain';
    BEGIN
      // Returns:
      // -1 = Below Tolerance
      // 0  = Within Tolerance
      // 1  = Above Tolerance

      EnhFieldDef.SETRANGE("Table No.",TableNo);
      EnhFieldDef.SETRANGE(Name,FieldName);

      IF NOT EnhFieldDef.FINDFIRST THEN EXIT(0);

      IF TableNo = 0 THEN EXIT(0);
      IF PositionText = '' THEN EXIT(0);

      RecRef.OPEN(TableNo);
      RecRef.SETPOSITION(PositionText);

      IF FieldValue = '' THEN FieldValue := GetFieldValue(RecRef,FieldName);

      IF EnhFieldDef."Below Tolerance Criteria Type" <> EnhFieldDef."Below Tolerance Criteria Type"::" " THEN BEGIN
        CriteriaValue := TNPUtils.ConcatenateFieldValues(EnhFieldDef."Below Tolerance Criteria Value",RecRef);
        CASE EnhFieldDef."Below Tolerance Criteria Type" OF
          EnhFieldDef."Below Tolerance Criteria Type"::"<" : ComparisonType := ComparisonType::"<";
          EnhFieldDef."Below Tolerance Criteria Type"::"<=" : ComparisonType := ComparisonType::"<=";
        END;
        IF CompareValues(FieldValue,ComparisonType,CriteriaValue,EnhFieldDef.Type) THEN EXIT(-1);
      END;

      IF EnhFieldDef."Above Tolerance Criteria Type" <> EnhFieldDef."Above Tolerance Criteria Type"::" " THEN BEGIN
        CriteriaValue := TNPUtils.ConcatenateFieldValues(EnhFieldDef."Above Tolerance Criteria Value",RecRef);
        CASE EnhFieldDef."Above Tolerance Criteria Type" OF
          EnhFieldDef."Above Tolerance Criteria Type"::">" : ComparisonType := ComparisonType::">";
          EnhFieldDef."Above Tolerance Criteria Type"::">=" : ComparisonType := ComparisonType::">=";
        END;

        IF CompareValues(FieldValue,ComparisonType,CriteriaValue,EnhFieldDef.Type) THEN EXIT(1);
      END;

      EXIT(0);
    END;

    PROCEDURE CompareValues@1000000020(Value@1000000000 : Text;ComparisonType@1000000001 : ' ,=,<>,>,>=,<,<=,Contains,Doesn''t Contain';CompareWith@1000000002 : Text;ValueType@1000000003 : 'Text,Code,Integer,Decimal,Date,Time') : Boolean;
    VAR
      Value_Dec@1000000004 : Decimal;
      CompareWith_Dec@1000000005 : Decimal;
      Value_Date@1000000006 : Date;
      CompareWith_Date@1000000008 : Date;
      Value_Time@1000000007 : Time;
      CompareWith_Time@1000000009 : Time;
    BEGIN
      CASE ValueType OF
        ValueType::Integer,ValueType::Decimal :
          BEGIN
            EVALUATE(Value_Dec,Value);
            EVALUATE(CompareWith_Dec,CompareWith);
            CASE ComparisonType OF
              ComparisonType::"=" : EXIT(Value_Dec = CompareWith_Dec);
              ComparisonType::"<>" : EXIT(Value_Dec <> CompareWith_Dec);
              ComparisonType::">" : EXIT(Value_Dec > CompareWith_Dec);
              ComparisonType::">=" : EXIT(Value_Dec >= CompareWith_Dec);
              ComparisonType::"<" : EXIT(Value_Dec < CompareWith_Dec);
              ComparisonType::"<=" : EXIT(Value_Dec <= CompareWith_Dec);
              ELSE EXIT(FALSE);
            END;
          END;
        ValueType::Date :
          BEGIN
            EVALUATE(Value_Date,Value);
            EVALUATE(CompareWith_Date,CompareWith);
            CASE ComparisonType OF
              ComparisonType::"=" : EXIT(Value_Date = CompareWith_Date);
              ComparisonType::"<>" : EXIT(Value_Date <> CompareWith_Date);
              ComparisonType::">" : EXIT(Value_Date > CompareWith_Date);
              ComparisonType::">=" : EXIT(Value_Date >= CompareWith_Date);
              ComparisonType::"<" : EXIT(Value_Date < CompareWith_Date);
              ComparisonType::"<=" : EXIT(Value_Date <= CompareWith_Date);
              ELSE EXIT(FALSE);
            END;
          END;
        ValueType::Time :
          BEGIN
            EVALUATE(Value_Time,Value);
            EVALUATE(CompareWith_Time,CompareWith);
            CASE ComparisonType OF
              ComparisonType::"=" : EXIT(Value_Time = CompareWith_Time);
              ComparisonType::"<>" : EXIT(Value_Time <> CompareWith_Time);
              ComparisonType::">" : EXIT(Value_Time > CompareWith_Time);
              ComparisonType::">=" : EXIT(Value_Time >= CompareWith_Time);
              ComparisonType::"<" : EXIT(Value_Time < CompareWith_Time);
              ComparisonType::"<=" : EXIT(Value_Time <= CompareWith_Time);
              ELSE EXIT(FALSE);
            END;
          END;
        ValueType::Text,ValueType::Code :
          BEGIN
            CASE ComparisonType OF
              ComparisonType::"=" : EXIT(Value = CompareWith);
              ComparisonType::"<>" : EXIT(Value <> CompareWith);
              ComparisonType::">" : EXIT(Value > CompareWith);
              ComparisonType::">=" : EXIT(Value >= CompareWith);
              ComparisonType::"<" : EXIT(Value < CompareWith);
              ComparisonType::"<=" : EXIT(Value <= CompareWith);
              ComparisonType::Contains : EXIT(STRPOS(Value,CompareWith) <> 0);
              ComparisonType::"Doesn't Contain" : EXIT(STRPOS(Value,CompareWith) = 0);
            END;
          END;
      END;
    END;

    PROCEDURE CopyEnhancedField@1000000021(pFromEnhancedFieldDefinition@1000000000 : Record 9062327;pToTableId@1000000004 : Integer;pToFieldId@1000000013 : Integer;pInteraction@1000000001 : Boolean) : Boolean;
    VAR
      lToTable@1000000005 : Record 2000000038;
      lToEnhancedFieldDefinition@1000000002 : Record 9062327;
      eEmptyToTableId@1000000006 : TextConst 'ENU="Destination table ID is unknown; please provide this information before copying an enhanced field.";ENG="Destination table ID is unknown; please provide this information before copying an enhanced field."';
      eCantCopyToItself@1000000007 : TextConst 'ENU=Enhanced field "%1" (%2) can''t be copy to itself - it already exists for table "%3" (%4) specified also as the destination one.;ENG=Enhanced field "%1" (%2) can''t be copy to itself - it already exists for table "%3" (%4) specified also as the destination one.';
      eAlreadyExists@1000000009 : TextConst 'ENU=Enhanced field with number %1 is already defined for table "%2" (%3).;ENG=Enhanced field with number %1 is already defined for table "%2" (%3).';
      eConfirmation@1000000003 : TextConst 'ENU=Do you want to copy enhanced field "%1" (%2) to table "%3" (%4)?;ENG=Do you want to copy enhanced field "%1" (%2) to table "%3" (%4)?';
      lFromFieldLookup@1000000010 : Record 9062312;
      lToFieldLookup@1000000011 : Record 9062312;
      lObjectList@1000000008 : Page 358;
      eFinalMessage@1000000012 : TextConst 'ENU=Enhanced field "%1" (%2) has been copied to table "%3" (%4)?;ENG=Enhanced field "%1" (%2) has been copied to table "%3" (%4)?';
    BEGIN
      //DOC NA2015.3 - Copying enhanced field from one table to another
      //  -> pFromEnhancedFieldDefinition: Source enhanced field definition
      //  -> pToTableId: Destination table ID (if zero and interaction allowed - a question to user)
      //  -> pToFieldId: To field ID (if 0 the system will pick the first free)
      //  -> pInteraction: Interaction flag (true = with user interaction, false = without)
      //  <- Result (true = confirmed and copied, false = cancelled)

      pInteraction := ((pInteraction) AND (GUIALLOWED));

      IF (pToTableId = 0) THEN
      BEGIN
        IF (pInteraction) THEN
        BEGIN
          lToTable.RESET();
          lToTable.FILTERGROUP(2);
          lToTable.SETRANGE("Object Type", lToTable."Object Type"::Table);
          lToTable.SETFILTER("Object ID", '<>%1', pFromEnhancedFieldDefinition."Table No.");
          lToTable.FILTERGROUP(0);
          CLEAR(lObjectList);
          lObjectList.SETTABLEVIEW(lToTable);
          lObjectList.LOOKUPMODE := TRUE;
          IF (lObjectList.RUNMODAL() = ACTION::LookupOK) THEN
          BEGIN
            lObjectList.GETRECORD(lToTable);
            pToTableId := lToTable."Object ID";
          END
          ELSE
            EXIT(FALSE);
        END
        ELSE
          ERROR(eEmptyToTableId);
      END
      ELSE
        IF (pFromEnhancedFieldDefinition."Table No." = pToTableId) THEN
          ERROR(eCantCopyToItself, pFromEnhancedFieldDefinition.Name, pFromEnhancedFieldDefinition."Enhanced Field No.",
            lToTable."Object Name", lToTable."Object ID");

      IF (pToFieldId = 0) THEN
      BEGIN
        lToEnhancedFieldDefinition.RESET();
        lToEnhancedFieldDefinition.SETRANGE("Table No.", pToTableId);
        IF (lToEnhancedFieldDefinition.FINDLAST()) THEN
          pToFieldId := lToEnhancedFieldDefinition."Enhanced Field No." + 1
        ELSE
          pToFieldId := 1;
      END;

      IF (lToEnhancedFieldDefinition.GET(lToTable."Object ID", pToFieldId)) THEN
        ERROR(eAlreadyExists, pToFieldId, lToTable."Object Name", lToTable."Object ID");

      IF (pInteraction) THEN
        IF ( NOT (CONFIRM(eConfirmation, TRUE, pFromEnhancedFieldDefinition.Name, pFromEnhancedFieldDefinition."Enhanced Field No.",
             lToTable."Object Name", lToTable."Object ID"))) THEN
          EXIT(FALSE);

      lToEnhancedFieldDefinition := pFromEnhancedFieldDefinition;
      lToEnhancedFieldDefinition."Table No." := pToTableId;
      lToEnhancedFieldDefinition."Enhanced Field No." := pToFieldId;
      lToEnhancedFieldDefinition.INSERT(TRUE);

      lFromFieldLookup.RESET();
      lFromFieldLookup.SETRANGE("Table ID", pFromEnhancedFieldDefinition."Table No.");
      lFromFieldLookup.SETRANGE("Field Type", lFromFieldLookup."Field Type"::"Enhanced Field");
      lFromFieldLookup.SETRANGE("Field No.", pFromEnhancedFieldDefinition."Enhanced Field No.");
      IF (lFromFieldLookup.FINDSET()) THEN
      REPEAT
        lToFieldLookup := lFromFieldLookup;
        lToFieldLookup."Table ID" := pToTableId;
        lToFieldLookup."Field No." := pToFieldId;
        lToFieldLookup.INSERT(TRUE);
      UNTIL (lFromFieldLookup.NEXT() = 0);

      IF (pInteraction) THEN
        MESSAGE(eFinalMessage, pFromEnhancedFieldDefinition.Name, pFromEnhancedFieldDefinition."Enhanced Field No.",
          lToTable."Object Name", lToTable."Object ID");

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetFieldDefaultValue@1000000022(VAR EnhFieldDef@1000000000 : Record 9062327) : Text;
    VAR
      OpenBracket@1000000001 : TextConst 'ENU=[;ENG=[';
      CloseBracket@1000000002 : TextConst 'ENU=];ENG=]';
    BEGIN
      EXIT(EnhFieldDef."Default Value");
    END;

    PROCEDURE HasValue_Document@1000000027(TableNo@1000000002 : Integer;PositionText@1000000001 : Text;FieldName@1000000000 : Text[50]) HasValue : Boolean;
    VAR
      RecRef@1000000003 : RecordRef;
      FileManagement@1000000004 : Codeunit 419;
      FromFolder@1000000005 : Text;
      FromFilter@1000000006 : Text;
      FromFile@1000000007 : Text;
      ToFile@1000000008 : Text;
      EnhFieldVal@1000000009 : Record 9062328;
      EnhFieldDef@1000000010 : Record 9062327;
      TempFile@1000000011 : Text;
    BEGIN
      IF TableNo = 0 THEN EXIT(FALSE);
      RecRef.OPEN(TableNo);
      RecRef.SETPOSITION(PositionText);
      EnhFieldDef.SETRANGE("Table No.",TableNo);
      EnhFieldDef.SETRANGE(Name,FieldName);
      IF EnhFieldDef.FINDSET THEN BEGIN
        EnhFieldVal.SETRANGE("Table No.",TableNo);
        EnhFieldVal.SETRANGE("Enhanced Field No.", EnhFieldDef."Enhanced Field No.");
        EnhFieldVal.SETRANGE("Position Text",PositionText);
        IF EnhFieldVal.FINDSET THEN BEGIN
          EnhFieldVal.CALCFIELDS(File);
          IF EnhFieldVal.File.HASVALUE THEN
            EXIT(TRUE)
          ELSE
            EXIT(FALSE);
        END ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE HasValue_Image@1000000029(TableNo@1000000002 : Integer;PositionText@1000000001 : Text;FieldName@1000000000 : Text[50]) HasValue : Boolean;
    VAR
      RecRef@1000000003 : RecordRef;
      FileManagement@1000000004 : Codeunit 419;
      FromFolder@1000000005 : Text;
      FromFilter@1000000006 : Text;
      FromFile@1000000007 : Text;
      ToFile@1000000008 : Text;
      EnhFieldVal@1000000009 : Record 9062328;
      EnhFieldDef@1000000010 : Record 9062327;
      TempFile@1000000011 : Text;
    BEGIN
      IF TableNo = 0 THEN EXIT(FALSE);
      RecRef.OPEN(TableNo);
      RecRef.SETPOSITION(PositionText);
      EnhFieldDef.SETRANGE("Table No.",TableNo);
      EnhFieldDef.SETRANGE(Name,FieldName);
      IF EnhFieldDef.FINDSET THEN BEGIN
        EnhFieldVal.SETRANGE("Table No.",TableNo);
        EnhFieldVal.SETRANGE("Enhanced Field No.", EnhFieldDef."Enhanced Field No.");
        EnhFieldVal.SETRANGE("Position Text",PositionText);
        IF EnhFieldVal.FINDSET THEN BEGIN
          EnhFieldVal.CALCFIELDS(Image);
          IF EnhFieldVal.Image.HASVALUE THEN
            EXIT(TRUE)
          ELSE
            EXIT(FALSE);
        END ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE GetFieldDrilldown@1000000030(TableNo@1000000000 : Integer;EnhancedFieldNo@1000000001 : Integer;PositionText@1000000002 : Text[150];UsedOnFactbox@1000000003 : Boolean);
    VAR
      RecRef@1000000007 : RecordRef;
      FileManagement@1000000006 : Codeunit 419;
      EnhFieldValue@1000000005 : Record 9062328;
      EnhFieldDef@1000000004 : Record 9062327;
      LinkValue@1000000008 : Text;
      EnhancedFieldPicture@1000000009 : Page 9063021;
      DocumentResponse@1000000010 : Integer;
      PreviewText@1000000011 : Text[250];
      TxtExtMgt@1000000012 : Codeunit 9062250;
      FieldName@1000000013 : Text;
    BEGIN
      IF TableNo = 0 THEN EXIT;
      IF (EnhFieldDef.GET(TableNo, EnhancedFieldNo)) THEN BEGIN
        FieldName := EnhFieldDef.Name;
        CASE EnhFieldDef.Type OF
             EnhFieldDef.Type::Link : BEGIN
              LinkValue := CalculateFieldValue(TableNo,EnhFieldDef."Enhanced Field No.",PositionText);
              HYPERLINK(LinkValue);
             END;
             EnhFieldDef.Type::"Dynamic Link" : BEGIN
               LinkValue := CalculateFieldValue(TableNo,EnhFieldDef."Enhanced Field No.",PositionText);
               HYPERLINK(LinkValue);
             END;
             EnhFieldDef.Type::Image : BEGIN
               EnhFieldValue.SETRANGE("Table No.",TableNo);
               EnhFieldValue.SETRANGE("Enhanced Field No.",EnhFieldDef."Enhanced Field No.");
               EnhFieldValue.SETRANGE("Position Text",PositionText);
               IF EnhFieldValue.FINDSET THEN BEGIN
                 EnhancedFieldPicture.SETRECORD(EnhFieldValue);
                 COMMIT;
                 EnhancedFieldPicture.RUNMODAL;
               END ELSE BEGIN
                 EnhFieldValue.VALIDATE("Table No.",TableNo);
                 EnhFieldValue.VALIDATE("Enhanced Field No.",EnhFieldDef."Enhanced Field No.");
                 EnhFieldValue.VALIDATE("Position Text",PositionText);
                 EnhFieldValue.INSERT;
                 EnhancedFieldPicture.SETRECORD(EnhFieldValue);
                 COMMIT;
                 EnhancedFieldPicture.RUNMODAL;
               END;
             END;
             EnhFieldDef.Type::Document : BEGIN
               EnhFieldValue.SETRANGE("Table No.",TableNo);
               EnhFieldValue.SETRANGE("Enhanced Field No.",EnhFieldDef."Enhanced Field No.");
               EnhFieldValue.SETRANGE("Position Text",PositionText);
               IF EnhFieldValue.FINDSET THEN BEGIN
                 EnhFieldValue.CALCFIELDS(File);
                 IF EnhFieldValue.File.HASVALUE THEN BEGIN
                   DocumentResponse := DIALOG.STRMENU(tDocumentDialog01,1,tDocumentDialog02);
                   CASE DocumentResponse OF
                        1 : GetFieldValue_Document(TableNo,PositionText,FieldName);
                        2 : SetFieldValue_Document(TableNo,PositionText,FieldName);
                   END;
                 END ELSE BEGIN
                   SetFieldValue_Document(TableNo,PositionText,FieldName);
                 END;
               END ELSE BEGIN
                 EnhFieldValue.INIT;
                 EnhFieldValue.VALIDATE("Table No.",TableNo);
                 EnhFieldValue.VALIDATE("Enhanced Field No.",EnhFieldDef."Enhanced Field No.");
                 EnhFieldValue.VALIDATE("Position Text",PositionText);
                 EnhFieldValue.INSERT(TRUE);
                 SetFieldValue_Document(TableNo,PositionText,FieldName);
               END;
             END;
              EnhFieldDef.Type::"Extended Text" : BEGIN
                EnhFieldValue.SETRANGE("Table No.",TableNo);
                EnhFieldValue.SETRANGE("Enhanced Field No.",EnhFieldDef."Enhanced Field No.");
                EnhFieldValue.SETRANGE("Position Text",PositionText);
                IF EnhFieldValue.FINDSET THEN BEGIN
                  IF UsedOnFactbox THEN BEGIN
                    PreviewText := TxtExtMgt.OnAssistEdit(DATABASE::"Enhanced Field Value",20,EnhFieldValue.GETPOSITION,PreviewText,FALSE,FALSE,'');
                    EnhFieldValue.Value := PreviewText;
                    EnhFieldValue.MODIFY(TRUE);
                    SetValue(EnhFieldValue);
                  END ELSE BEGIN
                    PreviewText := CalculateFieldValue(TableNo,EnhFieldDef."Enhanced Field No.",PositionText);
                    PreviewText := TxtExtMgt.OnAssistEdit(DATABASE::"Enhanced Field Value",20,EnhFieldValue.GETPOSITION,PreviewText,FALSE,FALSE,'');
                    EnhFieldValue.VALIDATE(Value,PreviewText);
                    EnhFieldValue.MODIFY(TRUE);
                    SetValue(EnhFieldValue);
                  END;
                END;
              END;
        END;

        EnhFieldValue.SETRANGE("Table No.",TableNo);
        EnhFieldValue.SETRANGE("Enhanced Field No.", EnhFieldDef."Enhanced Field No.");
        EnhFieldValue.SETRANGE("Position Text",PositionText);
        IF EnhFieldValue.FINDSET THEN BEGIN
         END;
      END;
    END;

    PROCEDURE LookupField@1000000031(TableNo@1000000003 : Integer;FieldNo@1000000002 : Integer;PositionText@1000000001 : Text[150];VAR FieldValue@1000000006 : Text) : Boolean;
    VAR
      EnhFieldDef@1000000000 : Record 9062327;
      FieldLookup@1000000004 : Record 9062312;
      FieldLookupList@1000000005 : Page 9062235;
    BEGIN
      //DOC NA2016.10
      EnhFieldDef.GET(TableNo, FieldNo);
      IF EnhFieldDef."Source Type" = EnhFieldDef."Source Type"::"Pick From List" THEN BEGIN
        EnhFieldDef.PopulateLookupList;

        FieldLookup.SETRANGE("Table ID", TableNo);
        FieldLookup.SETRANGE("Field Type",FieldLookup."Field Type"::"Enhanced Field");
        FieldLookup.SETRANGE("Field No.",EnhFieldDef."Enhanced Field No.");

        FieldLookupList.SETTABLEVIEW(FieldLookup);
        FieldLookupList.LOOKUPMODE(TRUE);
        IF FieldLookupList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          FieldLookupList.GETRECORD(FieldLookup);
          FieldValue := SetFieldValue(EnhFieldDef."Table No.", FieldNo, PositionText, FieldLookup.Code);
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE AddFieldToFormula@9062229(VAR pEnhancedFieldDefinition@9062229 : Record 9062327) : Boolean;
    VAR
      lEnhancedFieldDefinition@9062235 : Record 9062327;
      lField@9062233 : Record 2000000041;
      lResult@9062230 : Boolean;
      lFieldType@9062231 : ' ,Field,Enhanced Field';
      lFieldId@9062232 : Integer;
      lFieldName@9062234 : Text;
    BEGIN
      //DOC NA2016.10 - Adding a field to a formula
      //  <> pEnhancedFieldDefinition: Source / target enhanced field definition
      //  <- TRUE = Field added, FALSE = Cancelled

      COMMIT;

      lResult := FALSE;

      IF (ObjectFieldToolkit.FieldLookupAdv(pEnhancedFieldDefinition."Table No.", lFieldType, lFieldId)) THEN
        IF ((lFieldType <> lFieldType::" ") AND (lFieldId <> 0)) THEN
          CASE (lFieldType) OF
            lFieldType::Field:
              IF (lField.GET(pEnhancedFieldDefinition."Table No.", lFieldId)) THEN
              BEGIN
                lFieldName := lField.FieldName;
                lResult := TRUE;
              END;
            lFieldType::"Enhanced Field":
              IF (lEnhancedFieldDefinition.GET(pEnhancedFieldDefinition."Table No.", lFieldId)) THEN
              BEGIN

                lFieldName := lEnhancedFieldDefinition.Name;
                lResult := TRUE;
              END;
          END;

      IF (lResult) THEN
        pEnhancedFieldDefinition.Formula := pEnhancedFieldDefinition.Formula + '[' + lFieldName + ']';

      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Lookup, DrillDown and Assist ---"@9062230();
    BEGIN
    END;

    LOCAL PROCEDURE PerformLookup@9062231();
    BEGIN
    END;

    LOCAL PROCEDURE PerformDrillDown@9062232();
    BEGIN
    END;

    LOCAL PROCEDURE PerformAssist@9062233();
    BEGIN
    END;

    LOCAL PROCEDURE "--- New Value Retrieval ---"@1000000033();
    BEGIN
    END;

    PROCEDURE GetBooleanFieldValue@1000000034(pTableId@1000000000 : Integer;pPosition@1000000001 : Text;pFieldId@1000000002 : Integer) : Boolean;
    VAR
      lValue@1000000003 : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning boolean field value
      //  -> pTableId: Table ID
      //  -> pPosition: Position
      //  -> pFieldId: Field ID
      //  <- The value

      CLEAR(lValue);
      IF (EnhancedFieldValue.GET(pTableId, pFieldId, pPosition)) THEN
        IF ( NOT (EVALUATE(lValue, CalculateFieldValue(pTableId, pFieldId, pPosition)))) THEN
          CLEAR(lValue);
      EXIT(lValue);
    END;

    PROCEDURE GetIntegerFieldValue@1000000035(pTableId@1000000002 : Integer;pPosition@1000000001 : Text;pFieldId@1000000000 : Integer) : Integer;
    VAR
      lValue@1000000003 : Integer;
    BEGIN
      //DOC NA2016.12 - Returning integer field value
      //  -> pTableId: Table ID
      //  -> pPosition: Position
      //  -> pFieldId: Field ID
      //  <- The value

      CLEAR(lValue);
      IF (EnhancedFieldValue.GET(pTableId, pFieldId, pPosition)) THEN
        IF ( NOT (EVALUATE(lValue, CalculateFieldValue(pTableId, pFieldId, pPosition)))) THEN
          CLEAR(lValue);
      EXIT(lValue);
    END;

    PROCEDURE GetDecimalFieldValue@1000000036(pTableId@1000000002 : Integer;pPosition@1000000001 : Text;pFieldId@1000000000 : Integer) : Decimal;
    VAR
      lValue@1000000003 : Decimal;
    BEGIN
      //DOC NA2016.12 - Returning decimal field value
      //  -> pTableId: Table ID
      //  -> pPosition: Position
      //  -> pFieldId: Field ID
      //  <- The value

      CLEAR(lValue);
      IF (EnhancedFieldValue.GET(pTableId, pFieldId, pPosition)) THEN
        IF ( NOT (EVALUATE(lValue, CalculateFieldValue(pTableId, pFieldId, pPosition)))) THEN
          CLEAR(lValue);
      EXIT(lValue);
    END;

    PROCEDURE GetDateFieldValue@1000000037(pTableId@1000000002 : Integer;pPosition@1000000001 : Text;pFieldId@1000000000 : Integer) : Date;
    VAR
      lValue@1000000003 : Date;
    BEGIN
      //DOC NA2016.12 - Returning date field value
      //  -> pTableId: Table ID
      //  -> pPosition: Position
      //  -> pFieldId: Field ID
      //  <- The value

      CLEAR(lValue);
      IF (EnhancedFieldValue.GET(pTableId, pFieldId, pPosition)) THEN
        IF ( NOT (EVALUATE(lValue, CalculateFieldValue(pTableId, pFieldId, pPosition)))) THEN
          CLEAR(lValue);
      EXIT(lValue);
    END;

    PROCEDURE GetTimeFieldValue@1000000041(pTableId@1000000002 : Integer;pPosition@1000000001 : Text;pFieldId@1000000000 : Integer) : Time;
    VAR
      lValue@1000000003 : Time;
    BEGIN
      //DOC NA2016.12 - Returning time field value
      //  -> pTableId: Table ID
      //  -> pPosition: Position
      //  -> pFieldId: Field ID
      //  <- The value

      CLEAR(lValue);
      IF (EnhancedFieldValue.GET(pTableId, pFieldId, pPosition)) THEN
        IF ( NOT (EVALUATE(lValue, CalculateFieldValue(pTableId, pFieldId, pPosition)))) THEN
          CLEAR(lValue);
      EXIT(lValue);
    END;

    PROCEDURE GetCodeFieldValue@1000000042(pTableId@1000000002 : Integer;pPosition@1000000001 : Text;pFieldId@1000000000 : Integer) : Code[250];
    VAR
      lValue@1000000003 : Code[1024];
    BEGIN
      //DOC NA2016.12 - Returning code field value
      //  -> pTableId: Table ID
      //  -> pPosition: Position
      //  -> pFieldId: Field ID
      //  <- The value

      CLEAR(lValue);
      IF (EnhancedFieldValue.GET(pTableId, pFieldId, pPosition)) THEN
        lValue := CalculateFieldValue(pTableId, pFieldId, pPosition);
      EXIT(lValue);
    END;

    PROCEDURE GetTextFieldValue@1000000038(pTableId@1000000002 : Integer;pPosition@1000000001 : Text;pFieldId@1000000000 : Integer) : Text;
    VAR
      lValue@1000000003 : Text;
    BEGIN
      //DOC NA2016.12 - Returning text field value
      //  -> pTableId: Table ID
      //  -> pPosition: Position
      //  -> pFieldId: Field ID
      //  <- The value

      CLEAR(lValue);
      IF (EnhancedFieldValue.GET(pTableId, pFieldId, pPosition)) THEN
        lValue := CalculateFieldValue(pTableId, pFieldId, pPosition);
      EXIT(lValue);
    END;

    PROCEDURE GetBlobFieldValue@1000000040(pTableId@1000000002 : Integer;pPosition@1000000001 : Text;pFieldId@1000000000 : Integer;VAR pBlob@1000000003 : Record 99008535);
    BEGIN
      //DOC NA2016.12 - Returning BLOB field value
      //  -> pTableId: Table ID
      //  -> pPosition: Position
      //  -> pFieldId: Field ID
      //  <> pBlob: Target BLOB value

      CLEAR(pBlob);
      IF (EnhancedFieldValue.GET(pTableId, pFieldId, pPosition)) THEN
      BEGIN
        EnhancedFieldValue.CALCFIELDS(File);
        IF (EnhancedFieldValue.File.HASVALUE()) THEN
          pBlob.Blob := EnhancedFieldValue.File;

      END;
    END;

    BEGIN
    {
      //DOC NA2015.1  PC 13/08/2013 - Changed way Calculated Field Filters are set. Now use Dataset Filters
      //DOC NA2015.1  PC 30/09/2013 - Changed method for Lookup Fields
      //DOC NA2015.1  PC 22/05/2014 - Added code to CalculateFieldValue function to get value from Codeunit
      //DOC NA2015.1  PC 22/05/2014 - Changed "SetFieldValue" function to check field is editable and new value is valid
      //DOC NA2015.3  JH 06/08/2014 - A function to copy enhanced field
      //DOC NA2015.3  PC 04/09/2014 - Change to "CalculateFieldValue" to fix issue with ignoring blank filter values on Lookup type Enh. Fields
      //DOC NA2015.4  PC 22/10/2014 - Added "Default Value" functionality
      //DOC NA2015.4  JH 10/02/2015 - Formula 250 characters
      //DOC NA2015.8  AP 26/05/2015 - Added GetFieldValue_YesNo Function
      //DOC NA2016.10 JH 01/09/2015 - Upgraded to 2016
      //DOC NA2016.10 AZ 07/09/2015 - LookupField function added
      //DOC NA2016.10 JH 02/10/2015 - Criteria introduced
      //DOC NA2016.12 JH 26/12/2015 - New quicker "get" functions
      //DOC NA2016.12 JH 28/01/2016 - New string codeunit used
      //DOC NA2016.15 JH 18/04/2016 - CfMD amendments
    }
    END.
  }
}

