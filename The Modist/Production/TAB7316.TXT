OBJECT Table 7316 Warehouse Receipt Header
{
  OBJECT-PROPERTIES
  {
    Date=07/08/18;
    Time=[ 5:24:31 PM];
    Modified=Yes;
    Version List=NAVW18.00,NS2016.16,OP9031,TM3000;
  }
  PROPERTIES
  {
    Permissions=TableData 7317=rd;
    OnInsert=BEGIN
               WhseSetup.GET;
               IF "No." = '' THEN BEGIN
                 WhseSetup.TESTFIELD("Whse. Receipt Nos.");
                 NoSeriesMgt.InitSeries(WhseSetup."Whse. Receipt Nos.",xRec."No. Series","Posting Date","No.","No. Series");
               END;

               NoSeriesMgt.SetDefaultSeries("Receiving No. Series",WhseSetup."Posted Whse. Receipt Nos.");

               GetLocation("Location Code");
               VALIDATE("Bin Code",Location."Receipt Bin Code");
               VALIDATE("Cross-Dock Bin Code",Location."Cross-Dock Bin Code");
               "Posting Date" := WORKDATE;
             END;

    OnDelete=BEGIN
               DeleteRelatedLines(TRUE);
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=[ENU=Warehouse Receipt Header;
               ENG=Warehouse Receipt Header];
    LookupPageID=Page7332;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                WhseSetup.GET;
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  NoSeriesMgt.TestManual(WhseSetup."Whse. Receipt Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 2   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=VAR
                                                                WhseRcptLine@1000 : Record 7317;
                                                              BEGIN
                                                                IF NOT WmsManagement.LocationIsAllowed("Location Code") THEN
                                                                  ERROR(Text003,"Location Code");

                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  "Zone Code" := '';
                                                                  "Bin Code" := '';
                                                                  "Cross-Dock Zone Code" := '';
                                                                  "Cross-Dock Bin Code" := '';
                                                                  WhseRcptLine.SETRANGE("No.","No.");
                                                                  IF WhseRcptLine.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text001,
                                                                      FIELDCAPTION("Location Code"));
                                                                END;

                                                                GetLocation("Location Code");
                                                                Location.TESTFIELD("Require Receive");
                                                                IF Location."Directed Put-away and Pick" OR Location."Bin Mandatory" THEN BEGIN
                                                                  VALIDATE("Bin Code",Location."Receipt Bin Code");
                                                                  VALIDATE("Cross-Dock Bin Code",Location."Cross-Dock Bin Code");
                                                                END;

                                                                IF USERID <> '' THEN BEGIN
                                                                  FILTERGROUP := 2;
                                                                  SETRANGE("Location Code","Location Code");
                                                                  FILTERGROUP := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code] }
    { 3   ;   ;Assigned User ID    ;Code50        ;TableRelation="Warehouse Employee" WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF "Assigned User ID" <> '' THEN BEGIN
                                                                  "Assignment Date" := TODAY;
                                                                  "Assignment Time" := TIME;
                                                                END ELSE BEGIN
                                                                  "Assignment Date" := 0D;
                                                                  "Assignment Time" := 0T;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Assigned User ID;
                                                              ENG=Assigned User ID] }
    { 4   ;   ;Assignment Date     ;Date          ;CaptionML=[ENU=Assignment Date;
                                                              ENG=Assignment Date];
                                                   Editable=No }
    { 5   ;   ;Assignment Time     ;Time          ;CaptionML=[ENU=Assignment Time;
                                                              ENG=Assignment Time];
                                                   Editable=No }
    { 6   ;   ;Sorting Method      ;Option        ;OnValidate=BEGIN
                                                                IF "Sorting Method" <> xRec."Sorting Method" THEN
                                                                  SortWhseDoc;
                                                              END;

                                                   CaptionML=[ENU=Sorting Method;
                                                              ENG=Sorting Method];
                                                   OptionCaptionML=[ENU=" ,Item,Document,Shelf or Bin,Due Date,Ship-To";
                                                                    ENG=" ,Item,Document,Shelf or Bin,Due Date,Ship-To"];
                                                   OptionString=[ ,Item,Document,Shelf or Bin,Due Date,Ship-To] }
    { 7   ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENG=No. Series] }
    { 8   ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF "Zone Code" <> xRec."Zone Code" THEN BEGIN
                                                                  IF "Zone Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  END;
                                                                  "Bin Code" := '';
                                                                  MessageIfRcptLinesExist(FIELDCAPTION("Zone Code"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Zone Code;
                                                              ENG=Zone Code] }
    { 9   ;   ;Bin Code            ;Code20        ;TableRelation=IF (Zone Code=FILTER('')) Bin.Code WHERE (Location Code=FIELD(Location Code))
                                                                 ELSE IF (Zone Code=FILTER(<>'')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                  Zone Code=FIELD(Zone Code));
                                                   OnValidate=VAR
                                                                Bin@1001 : Record 7354;
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                IF (xRec."Bin Code" <> "Bin Code") OR ("Zone Code" = '') THEN BEGIN
                                                                  IF "Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Warehouse Receipt Header",
                                                                      FIELDCAPTION("Bin Code"),
                                                                      "Location Code",
                                                                      "Bin Code",0);
                                                                    IF Location."Directed Put-away and Pick" THEN BEGIN
                                                                      Bin.GET("Location Code","Bin Code");
                                                                      "Zone Code" := Bin."Zone Code";
                                                                    END;
                                                                  END;
                                                                  MessageIfRcptLinesExist(FIELDCAPTION("Bin Code"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ENG=Bin Code] }
    { 10  ;   ;Document Status     ;Option        ;CaptionML=[ENU=Document Status;
                                                              ENG=Document Status];
                                                   OptionCaptionML=[ENU=" ,Partially Received,Completely Received";
                                                                    ENG=" ,Partially Received,Completely Received"];
                                                   OptionString=[ ,Partially Received,Completely Received] }
    { 11  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Warehouse Comment Line" WHERE (Table Name=CONST(Whse. Receipt),
                                                                                                     Type=CONST(" "),
                                                                                                     No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENG=Comment];
                                                   Editable=No }
    { 12  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENG=Posting Date] }
    { 13  ;   ;Vendor Shipment No. ;Code35        ;CaptionML=[ENU=Vendor Shipment No.;
                                                              ENG=Vendor Shipment No.] }
    { 16  ;   ;Cross-Dock Zone Code;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code),
                                                                                  Cross-Dock Bin Zone=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                IF "Cross-Dock Zone Code" <> xRec."Cross-Dock Zone Code" THEN BEGIN
                                                                  IF "Cross-Dock Zone Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  END;
                                                                  "Cross-Dock Bin Code" := '';
                                                                  MessageIfRcptLinesExist(FIELDCAPTION("Cross-Dock Zone Code"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Cross-Dock Zone Code;
                                                              ENG=Cross-Dock Zone Code] }
    { 17  ;   ;Cross-Dock Bin Code ;Code20        ;TableRelation=IF (Cross-Dock Zone Code=FILTER('')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                      Cross-Dock Bin=CONST(Yes))
                                                                                                                      ELSE IF (Cross-Dock Zone Code=FILTER(<>'')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                  Zone Code=FIELD(Cross-Dock Zone Code),
                                                                                                                                                                                  Cross-Dock Bin=CONST(Yes));
                                                   OnValidate=VAR
                                                                Bin@1001 : Record 7354;
                                                              BEGIN
                                                                IF (xRec."Cross-Dock Bin Code" <> "Cross-Dock Bin Code") OR ("Cross-Dock Zone Code" = '') THEN BEGIN
                                                                  IF "Cross-Dock Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    IF "Cross-Dock Bin Code" = Location."Adjustment Bin Code" THEN
                                                                      FIELDERROR(
                                                                        "Cross-Dock Bin Code",
                                                                        STRSUBSTNO(
                                                                          Text005,
                                                                          Location.FIELDCAPTION("Adjustment Bin Code"),
                                                                          Location.TABLECAPTION));

                                                                    Bin.GET("Location Code","Cross-Dock Bin Code");
                                                                    Bin.TESTFIELD("Cross-Dock Bin",TRUE);
                                                                    "Cross-Dock Zone Code" := Bin."Zone Code";
                                                                  END;
                                                                  MessageIfRcptLinesExist(FIELDCAPTION("Cross-Dock Bin Code"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Cross-Dock Bin Code;
                                                              ENG=Cross-Dock Bin Code] }
    { 50  ;   ;Create Posted Header;Boolean       ;CaptionML=[ENU=Create Posted Header;
                                                              ENG=Create Posted Header] }
    { 51  ;   ;Receiving No.       ;Code20        ;CaptionML=[ENU=Receiving No.;
                                                              ENG=Receiving No.] }
    { 62  ;   ;Last Receiving No.  ;Code20        ;TableRelation="Posted Whse. Receipt Header";
                                                   CaptionML=[ENU=Last Receiving No.;
                                                              ENG=Last Receiving No.] }
    { 63  ;   ;Receiving No. Series;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Receiving No. Series" <> '' THEN BEGIN
                                                                  WhseSetup.GET;
                                                                  WhseSetup.TESTFIELD("Posted Whse. Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(WhseSetup."Posted Whse. Receipt Nos.","Receiving No. Series");
                                                                END;
                                                                TESTFIELD("Receiving No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH WhseRcptHeader DO BEGIN
                                                                WhseRcptHeader := Rec;
                                                                WhseSetup.GET;
                                                                WhseSetup.TESTFIELD("Posted Whse. Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(WhseSetup."Posted Whse. Receipt Nos.","Receiving No. Series") THEN
                                                                  VALIDATE("Receiving No. Series");
                                                                Rec := WhseRcptHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Receiving No. Series;
                                                              ENG=Receiving No. Series] }
    { 50000;  ;Source Document No. ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Min("Warehouse Receipt Line"."Source No." WHERE (No.=FIELD(No.))) }
    { 50010;  ;Source Document     ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Min("Warehouse Receipt Line"."Source Document" WHERE (No.=FIELD(No.)));
                                                   OptionString=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,Inbound Transfer }
    { 50020;  ;Due Date            ;Date          ;OnValidate=BEGIN

                                                                  UpdateDueDateOnLines; //DOC OP9031 LF 15/12/2016 -+
                                                              END;

                                                   Description=OP9031 }
    { 50030;  ;Sent to WMS         ;Boolean       ;Description=OP9031 }
    { 50040;  ;Airway Bill No.     ;Code50        ;CaptionML=[ENU=Airway Bill No.;
                                                              ENG=Airway Bill No.];
                                                   Description=OP9031 }
    { 50050;  ;File Name           ;Text150        }
    { 50051;  ;Total Qty. to Receive;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Receipt Line"."Qty. to Receive" WHERE (No.=FIELD(No.)));
                                                   CaptionML=ENU=Total Qty. to Receive;
                                                   Description=TM3000;
                                                   Editable=No }
    { 50052;  ;Total Qty. Received ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Receipt Line"."Qty. Received" WHERE (No.=FIELD(No.)));
                                                   CaptionML=ENU=Total Qty. Received;
                                                   Description=TM3000;
                                                   Editable=No }
    { 50053;  ;Total Qty.          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Receipt Line".Quantity WHERE (No.=FIELD(No.)));
                                                   Description=TM3000.01;
                                                   Editable=No }
    { 9087000;;Expected Date       ;Date          ;OnValidate=BEGIN
                                                                UpdateStatus();
                                                              END;

                                                   CaptionML=[ENU=Expected Date;
                                                              ENG=Expected Date];
                                                   Description=NS2015.1 }
    { 9087001;;Expected Time       ;Time          ;OnValidate=BEGIN
                                                                UpdateStatus();
                                                              END;

                                                   CaptionML=[ENU=Expected Time;
                                                              ENG=Expected Time];
                                                   Description=NS2015.1 }
    { 9087002;;Actual Date         ;Date          ;OnValidate=BEGIN
                                                                UpdateStatus();
                                                              END;

                                                   CaptionML=[ENU=Actual Date;
                                                              ENG=Actual Date];
                                                   Description=NS2015.1 }
    { 9087003;;Actual Time         ;Time          ;OnValidate=BEGIN
                                                                UpdateStatus();
                                                              END;

                                                   CaptionML=[ENU=Actual Time;
                                                              ENG=Actual Time];
                                                   Description=NS2015.1 }
    { 9087004;;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=" ,Early,On Time,Late,Unexpected";
                                                                    ENG=" ,Early,On Time,Late,Unexpected"];
                                                   OptionString=[ ,Early,On Time,Late,Unexpected];
                                                   Description=NS2015.1 }
    { 9087005;;Consignment No.     ;Code20        ;TableRelation="Consignment Header";
                                                   CaptionML=[ENU=Consignment No.;
                                                              ENG=Consignment No.];
                                                   Description=NS2015.1 }
    { 9087006;;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor No.;
                                                              ENG=Vendor No.];
                                                   Description=NS2015.1 }
    { 9087007;;Vendor Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Vendor.Name WHERE (No.=FIELD(Vendor No.)));
                                                   CaptionML=[ENU=Vendor Name;
                                                              ENG=Vendor Name];
                                                   Description=NS2015.1;
                                                   Editable=No }
    { 9087008;;Priority            ;Integer       ;CaptionML=[ENU=Priority;
                                                              ENG=Priority];
                                                   Description=NS2015.1 }
    { 9087009;;Quality Inspection Finished;Boolean;FieldClass=FlowField;
                                                   CalcFormula=-Exist("Item Quality Inspection Line" WHERE (Document Type=CONST(Warehouse Receipt),
                                                                                                            Document No.=FIELD(No.),
                                                                                                            Finished=CONST(No)));
                                                   CaptionML=[ENU=Quality Inspection Finished;
                                                              ENG=Quality Inspection Finished];
                                                   Description=NS2015.1;
                                                   Editable=No }
    { 9087010;;Quality Inspection Failed;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Item Quality Inspection Line" WHERE (Document Type=CONST(Warehouse Receipt),
                                                                                                           Document No.=FIELD(No.),
                                                                                                           Inspection Failed=CONST(Yes)));
                                                   CaptionML=[ENU=Quality Inspection Failed;
                                                              ENG=Quality Inspection Failed];
                                                   Description=NS2015.1;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Location Code                            }
    {    ;Consignment No.                          }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1009 : Record 14;
      WhseRcptHeader@1002 : Record 7316;
      WhseRcptLine@1003 : Record 7317;
      WhseSetup@1001 : Record 5769;
      WhseCommentLine@1011 : Record 5770;
      NoSeriesMgt@1000 : Codeunit 396;
      WmsManagement@1004 : Codeunit 7302;
      Text000@1007 : TextConst 'ENU=You cannot rename a %1.;ENG=You cannot rename a %1.';
      Text001@1006 : TextConst 'ENU=You cannot change the %1, because the document has one or more lines.;ENG=You cannot change the %1, because the document has one or more lines.';
      Text002@1005 : TextConst 'ENU=You must first set up user %1 as a warehouse employee.;ENG=You must first set up user %1 as a warehouse employee.';
      Text003@1008 : TextConst 'ENU=You are not allowed to use location code %1.;ENG=You are not allowed to use location code %1.';
      Text005@1014 : TextConst 'ENU=must not be the %1 of the %2;ENG=must not be the %1 of the %2';
      Text006@1013 : TextConst 'ENU=You have changed %1 on the %2, but it has not been changed on the existing Warehouse Receipt Lines.\;ENG=You have changed %1 on the %2, but it has not been changed on the existing Warehouse Receipt Lines.\';
      Text007@1012 : TextConst 'ENU=You must update the existing Warehouse Receipt Lines manually.;ENG=You must update the existing Warehouse Receipt Lines manually.';
      HideValidationDialog@1015 : Boolean;
      Text008@1010 : TextConst 'ENU=The Whse. Receipt is not completely received.\Do you really want to delete the Whse. Receipt?;ENG=The Whse. Receipt is not completely received.\Do you really want to delete the Whse. Receipt?';
      Text009@1016 : TextConst 'ENU=Cancelled.;ENG=Cancelled.';

    PROCEDURE AssistEdit@8(OldWhseRcptHeader@1000 : Record 7316) : Boolean;
    BEGIN
      WhseSetup.GET;
      WITH WhseRcptHeader DO BEGIN
        WhseRcptHeader := Rec;
        WhseSetup.TESTFIELD("Whse. Receipt Nos.");
        IF NoSeriesMgt.SelectSeries(
             WhseSetup."Whse. Receipt Nos.",OldWhseRcptHeader."No. Series","No. Series")
        THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := WhseRcptHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE SortWhseDoc@3();
    VAR
      SequenceNo@1000 : Integer;
    BEGIN
      WhseRcptLine.RESET;
      WhseRcptLine.SETRANGE("No.","No.");
      GetLocation("Location Code");
      CASE "Sorting Method" OF
        "Sorting Method"::Item:
          WhseRcptLine.SETCURRENTKEY("No.","Item No.");
        "Sorting Method"::Document:
          WhseRcptLine.SETCURRENTKEY("No.","Source Document","Source No.");
        "Sorting Method"::"Shelf or Bin":
          BEGIN
            IF Location."Bin Mandatory" THEN
              WhseRcptLine.SETCURRENTKEY("No.","Bin Code")
            ELSE
              WhseRcptLine.SETCURRENTKEY("No.","Shelf No.");
          END;
        "Sorting Method"::"Due Date":
          WhseRcptLine.SETCURRENTKEY("No.","Due Date");
      END;

      IF WhseRcptLine.FIND('-') THEN BEGIN
        SequenceNo := 10000;
        REPEAT
          WhseRcptLine."Sorting Sequence No." := SequenceNo;
          WhseRcptLine.MODIFY;
          SequenceNo := SequenceNo + 10000;
        UNTIL WhseRcptLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE MessageIfRcptLinesExist@7(ChangedFieldName@1000 : Text[80]);
    VAR
      WhseRcptLine@1001 : Record 7317;
    BEGIN
      WhseRcptLine.SETRANGE("No.","No.");
      IF WhseRcptLine.FINDFIRST THEN
        IF NOT HideValidationDialog THEN
          MESSAGE(
            STRSUBSTNO(
              Text006,ChangedFieldName,TABLECAPTION) + Text007);
    END;

    PROCEDURE DeleteRelatedLines@11(UseTableTrigger@1001 : Boolean);
    VAR
      CrossDockOpp@1002 : Record 5768;
      Confirmed@1000 : Boolean;
    BEGIN
      WhseRcptLine.RESET;
      WhseRcptLine.SETRANGE("No.","No.");
      IF UseTableTrigger THEN BEGIN
        IF WhseRcptLine.FIND('-') THEN BEGIN
          REPEAT
            IF (WhseRcptLine.Quantity <> WhseRcptLine."Qty. Outstanding") AND
               (WhseRcptLine."Qty. Outstanding" <> 0)
            THEN
              IF NOT CONFIRM(Text008,FALSE) THEN
                ERROR(Text009)
              ELSE
                Confirmed := TRUE;
          UNTIL (WhseRcptLine.NEXT = 0) OR Confirmed;

          DeleteQualityInspection(); //DOC NS2015.1 >>

          WhseRcptLine.DELETEALL;
        END;
      END ELSE
        WhseRcptLine.DELETEALL(UseTableTrigger);

      CrossDockOpp.SETRANGE("Source Template Name",'');
      CrossDockOpp.SETRANGE("Source Name/No.","No.");
      CrossDockOpp.DELETEALL;

      WhseCommentLine.SETRANGE("Table Name",WhseCommentLine."Table Name"::"Whse. Receipt");
      WhseCommentLine.SETRANGE(Type,WhseCommentLine.Type::" ");
      WhseCommentLine.SETRANGE("No.","No.");
      WhseCommentLine.DELETEALL;
    END;

    PROCEDURE GetHeaderStatus@15(LineNo@1003 : Integer) : Integer;
    VAR
      WhseReceiptLine2@1001 : Record 7317;
      OrderStatus@1002 : ' ,Partially Received,Completely Received';
    BEGIN
      WhseReceiptLine2.SETRANGE("No.","No.");
      WITH WhseReceiptLine2 DO BEGIN
        IF LineNo <> 0 THEN
          SETFILTER("Line No.",'<>%1',LineNo);
        IF FIND('-') THEN
          REPEAT
            CASE OrderStatus OF
              OrderStatus::" ":
                OrderStatus := Status;
              OrderStatus::"Completely Received":
                IF Status = Status::"Partially Received" THEN
                  OrderStatus := OrderStatus::"Partially Received";
            END;
          UNTIL NEXT = 0;
      END;
      EXIT(OrderStatus);
    END;

    PROCEDURE LookupWhseRcptHeader@5(VAR WhseRcptHeader@1001 : Record 7316) : Boolean;
    BEGIN
      COMMIT;
      IF USERID <> '' THEN BEGIN
        WhseRcptHeader.FILTERGROUP := 2;
        WhseRcptHeader.SETRANGE("Location Code");
      END;
      IF PAGE.RUNMODAL(0,WhseRcptHeader) = ACTION::LookupOK THEN;
      IF USERID <> '' THEN BEGIN
        WhseRcptHeader.FILTERGROUP := 2;
        WhseRcptHeader.SETRANGE("Location Code",WhseRcptHeader."Location Code");
        WhseRcptHeader.FILTERGROUP := 0;
      END;
    END;

    PROCEDURE LookupLocation@4(VAR WhseRcptHeader@1001 : Record 7316) : Boolean;
    VAR
      Location@1000 : Record 14;
    BEGIN
      COMMIT;
      Location.FILTERGROUP := 2;
      Location.SETRANGE(Code);
      IF PAGE.RUNMODAL(PAGE::"Locations with Warehouse List",Location) = ACTION::LookupOK THEN
        WhseRcptHeader.VALIDATE("Location Code",Location.Code);
      Location.FILTERGROUP := 0;
    END;

    LOCAL PROCEDURE GetLocation@10(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE FindFirstAllowedRec@1(Which@1000 : Text[1024]) : Boolean;
    VAR
      WhseRcptHeader@1001 : Record 7316;
      WMSManagement@1002 : Codeunit 7302;
    BEGIN
      IF FIND(Which) THEN BEGIN
        WhseRcptHeader := Rec;
        WHILE TRUE DO BEGIN
          IF WMSManagement.LocationIsAllowedToView("Location Code") THEN
            EXIT(TRUE);

          IF NEXT(1) = 0 THEN BEGIN
            Rec := WhseRcptHeader;
            IF FIND(Which) THEN
              WHILE TRUE DO BEGIN
                IF WMSManagement.LocationIsAllowedToView("Location Code") THEN
                  EXIT(TRUE);

                IF NEXT(-1) = 0 THEN
                  EXIT(FALSE);
              END;
          END;
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE FindNextAllowedRec@6(Steps@1000 : Integer) : Integer;
    VAR
      WhseRcptHeader@1002 : Record 7316;
      WMSManagement@1001 : Codeunit 7302;
      RealSteps@1003 : Integer;
      NextSteps@1004 : Integer;
    BEGIN
      RealSteps := 0;
      IF Steps <> 0 THEN BEGIN
        WhseRcptHeader := Rec;
        REPEAT
          NextSteps := NEXT(Steps / ABS(Steps));
          IF WMSManagement.LocationIsAllowedToView("Location Code") THEN BEGIN
            RealSteps := RealSteps + NextSteps;
            WhseRcptHeader := Rec;
          END;
        UNTIL (NextSteps = 0) OR (RealSteps = Steps);
        Rec := WhseRcptHeader;
        IF NOT FIND THEN;
      END;
      EXIT(RealSteps);
    END;

    PROCEDURE ErrorIfUserIsNotWhseEmployee@12();
    VAR
      WhseEmployee@1000 : Record 7301;
    BEGIN
      IF USERID <> '' THEN BEGIN
        WhseEmployee.SETRANGE("User ID",USERID);
        IF NOT WhseEmployee.FINDFIRST THEN
          ERROR(Text002,USERID);
      END;
    END;

    PROCEDURE "--- NS.M ---"@1000000000();
    BEGIN
    END;

    PROCEDURE UpdateStatus@1000000001();
    VAR
      lExpectedDateTime@1000000000 : DateTime;
      lActualDateTime@1000000001 : DateTime;
    BEGIN
      //DOC NS2015.1 - Updating status

      IF ((Rec."Expected Time" = 0T) AND ((Rec."Actual Date" <> 0D) OR (Rec."Actual Time" <> 0T))) THEN
        Rec.VALIDATE(Status, Rec.Status::Unexpected)
      ELSE
        IF ((Rec."Expected Date" <> 0D) AND (Rec."Expected Time" = 0T) AND (Rec."Actual Date" <> 0D) AND (Rec."Actual Time" = 0T)) THEN
        BEGIN
          IF (Rec."Actual Date" > Rec."Expected Date") THEN
            Rec.VALIDATE(Status, Rec.Status::Late)
          ELSE IF (Rec."Actual Date" = Rec."Expected Date") THEN
            Rec.VALIDATE(Status, Rec.Status::"On Time")
          ELSE
            Rec.VALIDATE(Status, Rec.Status::Early);
        END
        ELSE
          IF ((Rec."Expected Date" <> 0D) AND (Rec."Expected Time" <> 0T) AND (Rec."Actual Date" <> 0D) AND (Rec."Actual Time" <> 0T)) THEN
          BEGIN
            lExpectedDateTime := CREATEDATETIME(Rec."Expected Date", Rec."Expected Time");
            lActualDateTime := CREATEDATETIME(Rec."Actual Date", Rec."Actual Time");
            IF (lActualDateTime > lExpectedDateTime) THEN
              Rec.VALIDATE(Status, Rec.Status::Late)
            ELSE IF (lActualDateTime = lExpectedDateTime) THEN
              Rec.VALIDATE(Status, Rec.Status::"On Time")
            ELSE
              Rec.VALIDATE(Status, Rec.Status::Early);
          END
          ELSE
            Rec.VALIDATE(Status, Rec.Status::" ");
    END;

    PROCEDURE ShowVendor@1000000002();
    VAR
      lVendor@1000000000 : Record 23;
    BEGIN
      //DOC NS2015.1 - Showing a vendor

      Rec.TESTFIELD("Vendor No.");
      lVendor.GET(Rec."Vendor No.");
      PAGE.RUN(PAGE::"Vendor Card", lVendor);
    END;

    PROCEDURE ShowConsignment@1000000003();
    VAR
      lConsignmentManagement@1000000000 : Codeunit 9062357;
    BEGIN
      //DOC NS2015.1 - Showing consignment

      Rec.TESTFIELD("Consignment No.");
      lConsignmentManagement.ShowConsignment(Rec."Consignment No.");
    END;

    PROCEDURE DeleteQualityInspection@1000006666();
    VAR
      lItemQualityInspectionLine@1000000000 : Record 9087040;
    BEGIN
      //DOC NS2016.16 - Deleting quality inspection

      lItemQualityInspectionLine.RESET();
      lItemQualityInspectionLine.SETRANGE("Document Type", lItemQualityInspectionLine."Document Type"::"Warehouse Receipt");
      lItemQualityInspectionLine.SETRANGE("Document No.", "No.");
      lItemQualityInspectionLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE UpdateDueDateOnLines@1000000005();
    VAR
      WarehouseReceiptLine@1000000000 : Record 7317;
    BEGIN
      //DOC OP9031 LF 15/12/2016 -

      WarehouseReceiptLine.RESET;
      WarehouseReceiptLine.SETRANGE("No.","No.");
      IF WarehouseReceiptLine.FINDSET THEN
        IF CONFIRM('Update Due Date on lines?') THEN
          WarehouseReceiptLine.MODIFYALL("Due Date","Due Date");

      //DOC OP9031 LF 15/12/2016 +
    END;

    BEGIN
    {
      //DOC NS2015.1  SD 22/01/2014 - New fields added and new function UpdateStatus
      //DOC NS2015.1  AZ 29/01/2014 - Quality Inspection modifications
      //DOC NS2015.1  JH 03/02/2014 - "Consignment No." fields and key added
      //DOC NS2016.16 JH 05/09/2016 - nSemble 2016
      //DOC OP9031 LF 15/12/2016 - Added Due Date field, UpdateDueDateOnLines function
      //DOC OP9031 LF 11/01/2017 - Added Field "Sent to WMS"
      //DOC OP9031 LF Added "Airway Bill No."
      //Doc TM3000 ST 02/07/2018 - Added new field "Total Qty. to Receive" & "Total Qty Received".
      //DOC TM3000.01 AW 07/08/20118 - Added new field "Total Qty."
    }
    END.
  }
}

