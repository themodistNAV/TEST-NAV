OBJECT Page 5850 Posted Sales Document Lines
{
  OBJECT-PROPERTIES
  {
    Date=26/02/16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.45243;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Posted Sales Document Lines;
               ENG=Posted Sales Document Lines];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table18;
    PageType=ListPlus;
    OnInit=BEGIN
             ShowRevLineEnable := TRUE;
           END;

    OnOpenPage=BEGIN
                 CurrentMenuType := 1;
                 ChangeSubMenu(CurrentMenuType);
                 SETRANGE("No.","No.");
               END;

    OnAfterGetRecord=BEGIN
                       CALCFIELDS(
                         "No. of Pstd. Shipments","No. of Pstd. Invoices",
                         "No. of Pstd. Return Receipts","No. of Pstd. Credit Memos");
                       CurrentMenuTypeOpt := CurrentMenuType;
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 46  ;1   ;Group     ;
                CaptionML=[ENU=Options;
                           ENG=Options] }

    { 63  ;2   ;Field     ;
                Name=ShowRevLine;
                CaptionML=[ENU=Show Reversible Lines Only;
                           ENG=Show Reversible Lines Only];
                SourceExpr=ShowRevLinesOnly;
                Enabled=ShowRevLineEnable;
                OnValidate=BEGIN
                             CASE CurrentMenuType OF
                               0:
                                 CurrPage.PostedShpts.PAGE.Initialize(
                                   ToSalesHeader,ShowRevLinesOnly,
                                   CopyDocMgt.IsSalesFillExactCostRevLink(
                                     ToSalesHeader,CurrentMenuType,ToSalesHeader."Currency Code"),TRUE);
                               1:
                                 CurrPage.PostedInvoices.PAGE.Initialize(
                                   ToSalesHeader,ShowRevLinesOnly,
                                   CopyDocMgt.IsSalesFillExactCostRevLink(
                                     ToSalesHeader,CurrentMenuType,ToSalesHeader."Currency Code"),TRUE);
                             END;
                             ShowRevLinesOnlyOnAfterValidat;
                           END;
                            }

    { 2   ;2   ;Field     ;
                CaptionML=[ENU=Return Original Quantity;
                           ENG=Return Original Quantity];
                SourceExpr=OriginalQuantity }

    { 19  ;1   ;Group      }

    { 9   ;2   ;Group      }

    { 15  ;3   ;Field     ;
                Name=PostedShipmentsBtn;
                OptionCaptionML=[ENU=Posted Shipments,Posted Invoices,Posted Return Receipts,Posted Cr. Memos;
                                 ENG=Posted Shipments,Posted Invoices,Posted Return Receipts,Posted Cr. Memos];
                SourceExpr=CurrentMenuTypeOpt;
                CaptionClass=OptionCaptionServiceTier;
                OnValidate=BEGIN
                             IF CurrentMenuTypeOpt = CurrentMenuTypeOpt::x3 THEN
                               x3CurrentMenuTypeOptOnValidate;
                             IF CurrentMenuTypeOpt = CurrentMenuTypeOpt::x2 THEN
                               x2CurrentMenuTypeOptOnValidate;
                             IF CurrentMenuTypeOpt = CurrentMenuTypeOpt::x1 THEN
                               x1CurrentMenuTypeOptOnValidate;
                             IF CurrentMenuTypeOpt = CurrentMenuTypeOpt::x0 THEN
                               x0CurrentMenuTypeOptOnValidate;
                           END;
                            }

    { 16  ;3   ;Field     ;
                CaptionML=[ENU=&Posted Shipments;
                           ENG=&Posted Shipments];
                SourceExpr=STRSUBSTNO('(%1)',"No. of Pstd. Shipments");
                Editable=FALSE }

    { 14  ;3   ;Field     ;
                Name=NoOfPostedInvoices;
                CaptionML=[ENU=Posted I&nvoices;
                           ENG=Posted I&nvoices];
                SourceExpr=STRSUBSTNO('(%1)',"No. of Pstd. Invoices" - NoOfPostedPrepmtInvoices);
                Editable=FALSE }

    { 41  ;3   ;Field     ;
                CaptionML=[ENU=Posted Ret&urn Receipts;
                           ENG=Posted Ret&urn Receipts];
                SourceExpr=STRSUBSTNO('(%1)',"No. of Pstd. Return Receipts");
                Editable=FALSE }

    { 11  ;3   ;Field     ;
                Name=NoOfPostedCrMemos;
                CaptionML=[ENU=Posted Cr. &Memos;
                           ENG=Posted Cr. &Memos];
                SourceExpr=STRSUBSTNO('(%1)',"No. of Pstd. Credit Memos" - NoOfPostedPrepmtCrMemos);
                Editable=FALSE }

    { 44  ;3   ;Field     ;
                Name=CurrentMenuTypeValue;
                SourceExpr=CurrentMenuType;
                Visible=FALSE }

    { 18  ;2   ;Group      }

    { 6   ;3   ;Part      ;
                Name=PostedInvoices;
                SubPageView=SORTING(Sell-to Customer No.);
                SubPageLink=Sell-to Customer No.=FIELD(No.);
                PagePartID=Page5852;
                Visible=PostedInvoicesVisible }

    { 7   ;3   ;Part      ;
                Name=PostedShpts;
                SubPageView=SORTING(Sell-to Customer No.);
                SubPageLink=Sell-to Customer No.=FIELD(No.);
                PagePartID=Page5851;
                Visible=PostedShptsVisible }

    { 1   ;3   ;Part      ;
                Name=PostedCrMemos;
                SubPageView=SORTING(Sell-to Customer No.);
                SubPageLink=Sell-to Customer No.=FIELD(No.);
                PagePartID=Page5854;
                Visible=PostedCrMemosVisible }

    { 5   ;3   ;Part      ;
                Name=PostedReturnRcpts;
                SubPageView=SORTING(Sell-to Customer No.);
                SubPageLink=Sell-to Customer No.=FIELD(No.);
                PagePartID=Page5853;
                Visible=PostedReturnRcptsVisible }

  }
  CODE
  {
    VAR
      ToSalesHeader@1002 : Record 36;
      CopyDocMgt@1010 : Codeunit 6620;
      OldMenuType@1001 : Integer;
      CurrentMenuType@1000 : Integer;
      LinesNotCopied@1008 : Integer;
      ShowRevLinesOnly@1004 : Boolean;
      MissingExCostRevLink@1006 : Boolean;
      Text000@1009 : TextConst 'ENU=The document lines that have a G/L account that does not allow direct posting have not been copied to the new document.;ENG=The document lines that have a G/L account that does not allow direct posting have not been copied to the new document.';
      OriginalQuantity@1003 : Boolean;
      Text002@1091 : TextConst 'ENU=Document Type Filter;ENG=Document Type Filter';
      PostedShptsVisible@19073057 : Boolean INDATASET;
      PostedInvoicesVisible@19029596 : Boolean INDATASET;
      PostedReturnRcptsVisible@19034262 : Boolean INDATASET;
      PostedCrMemosVisible@19050108 : Boolean INDATASET;
      ShowRevLineEnable@19075015 : Boolean INDATASET;
      CurrentMenuTypeOpt@19019278 : 'x0,x1,x2,x3';

    PROCEDURE CopyLineToDoc@5();
    VAR
      FromSalesShptLine@1001 : Record 111;
      FromSalesInvLine@1002 : Record 113;
      FromSalesCrMemoLine@1003 : Record 115;
      FromReturnRcptLine@1004 : Record 6661;
    BEGIN
      ToSalesHeader.TESTFIELD(Status,ToSalesHeader.Status::Open);
      LinesNotCopied := 0;
      CASE CurrentMenuType OF
        0:
          BEGIN
            CurrPage.PostedShpts.PAGE.GetSelectedLine(FromSalesShptLine);
            CopyDocMgt.SetProperties(FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,OriginalQuantity);
            CopyDocMgt.CopySalesShptLinesToDoc(
              ToSalesHeader,FromSalesShptLine,LinesNotCopied,MissingExCostRevLink);
          END;
        1:
          BEGIN
            CurrPage.PostedInvoices.PAGE.GetSelectedLine(FromSalesInvLine);
            CopyDocMgt.SetProperties(FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,OriginalQuantity);
            CopyDocMgt.CopySalesInvLinesToDoc(
              ToSalesHeader,FromSalesInvLine,LinesNotCopied,MissingExCostRevLink);
          END;
        2:
          BEGIN
            CurrPage.PostedReturnRcpts.PAGE.GetSelectedLine(FromReturnRcptLine);
            CopyDocMgt.SetProperties(FALSE,TRUE,FALSE,FALSE,TRUE,TRUE,OriginalQuantity);
            CopyDocMgt.CopySalesReturnRcptLinesToDoc(
              ToSalesHeader,FromReturnRcptLine,LinesNotCopied,MissingExCostRevLink);
          END;
        3:
          BEGIN
            CurrPage.PostedCrMemos.PAGE.GetSelectedLine(FromSalesCrMemoLine);
            CopyDocMgt.SetProperties(FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,OriginalQuantity);
            CopyDocMgt.CopySalesCrMemoLinesToDoc(
              ToSalesHeader,FromSalesCrMemoLine,LinesNotCopied,MissingExCostRevLink);
          END;
      END;
      CLEAR(CopyDocMgt);

      IF LinesNotCopied <> 0 THEN
        MESSAGE(Text000);
    END;

    LOCAL PROCEDURE ChangeSubMenu@1(NewMenuType@1000 : Integer);
    BEGIN
      IF OldMenuType <> NewMenuType THEN
        SetSubMenu(OldMenuType,FALSE);
      SetSubMenu(NewMenuType,TRUE);
      OldMenuType := NewMenuType;
      CurrentMenuType := NewMenuType;
    END;

    LOCAL PROCEDURE SetSubMenu@2(MenuType@1000 : Integer;Visible@1001 : Boolean);
    BEGIN
      IF ShowRevLinesOnly AND (MenuType IN [0,1]) THEN
        ShowRevLinesOnly :=
          CopyDocMgt.IsSalesFillExactCostRevLink(ToSalesHeader,MenuType,ToSalesHeader."Currency Code");
      ShowRevLineEnable := MenuType IN [0,1];
      CASE MenuType OF
        0:
          BEGIN
            PostedShptsVisible := Visible;
            CurrPage.PostedShpts.PAGE.Initialize(
              ToSalesHeader,ShowRevLinesOnly,
              CopyDocMgt.IsSalesFillExactCostRevLink(
                ToSalesHeader,MenuType,ToSalesHeader."Currency Code"),Visible);
          END;
        1:
          BEGIN
            PostedInvoicesVisible := Visible;
            CurrPage.PostedInvoices.PAGE.Initialize(
              ToSalesHeader,ShowRevLinesOnly,
              CopyDocMgt.IsSalesFillExactCostRevLink(
                ToSalesHeader,MenuType,ToSalesHeader."Currency Code"),Visible);
          END;
        2:
          PostedReturnRcptsVisible := Visible;
        3:
          PostedCrMemosVisible := Visible;
      END;
    END;

    PROCEDURE SetToSalesHeader@4(NewToSalesHeader@1000 : Record 36);
    BEGIN
      ToSalesHeader := NewToSalesHeader;
    END;

    LOCAL PROCEDURE OptionCaptionServiceTier@1088() : Text[70];
    BEGIN
      EXIT(Text002);
    END;

    LOCAL PROCEDURE ShowRevLinesOnlyOnAfterValidat@19064108();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE x0CurrentMenuTypeOptOnPush@19052720();
    BEGIN
      ChangeSubMenu(0);
    END;

    LOCAL PROCEDURE x0CurrentMenuTypeOptOnValidate@19061499();
    BEGIN
      x0CurrentMenuTypeOptOnPush;
    END;

    LOCAL PROCEDURE x1CurrentMenuTypeOptOnPush@19049100();
    BEGIN
      ChangeSubMenu(1);
    END;

    LOCAL PROCEDURE x1CurrentMenuTypeOptOnValidate@19066842();
    BEGIN
      x1CurrentMenuTypeOptOnPush;
    END;

    LOCAL PROCEDURE x2CurrentMenuTypeOptOnPush@19056045();
    BEGIN
      ChangeSubMenu(2);
    END;

    LOCAL PROCEDURE x2CurrentMenuTypeOptOnValidate@19009894();
    BEGIN
      x2CurrentMenuTypeOptOnPush;
    END;

    LOCAL PROCEDURE x3CurrentMenuTypeOptOnPush@19036287();
    BEGIN
      ChangeSubMenu(3);
    END;

    LOCAL PROCEDURE x3CurrentMenuTypeOptOnValidate@19044768();
    BEGIN
      x3CurrentMenuTypeOptOnPush;
    END;

    LOCAL PROCEDURE NoOfPostedPrepmtInvoices@3() : Integer;
    VAR
      SalesInvHeader@1000 : Record 112;
    BEGIN
      SalesInvHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesInvHeader.SETRANGE("Prepayment Invoice",TRUE);
      EXIT(SalesInvHeader.COUNT);
    END;

    LOCAL PROCEDURE NoOfPostedPrepmtCrMemos@6() : Integer;
    VAR
      SalesCrMemoHeader@1000 : Record 114;
    BEGIN
      SalesCrMemoHeader.SETRANGE("Sell-to Customer No.","No.");
      SalesCrMemoHeader.SETRANGE("Prepayment Credit Memo",TRUE);
      EXIT(SalesCrMemoHeader.COUNT);
    END;

    BEGIN
    END.
  }
}

