OBJECT Table 9086955 nF. User Group
{
  OBJECT-PROPERTIES
  {
    Date=30/10/16;
    Time=11:23:24 AM;
    Version List=NF2016.17;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    OnInsert=BEGIN
               Rec.TESTFIELD(Name);
               CheckNameUnique();
               NfRecordAuditToolkit.UpdateCreated(Rec."Created By", Rec."Created Date Time");
             END;

    OnModify=BEGIN
               CheckNameUnique();
               NfRecordAuditToolkit.UpdateModified(Rec."Modified By", Rec."Modified Date Time");
             END;

    OnDelete=BEGIN
               NfUserGroupMember.RESET();
               NfUserGroupMember.SETRANGE("nF. User Group ID", Rec.ID);
               NfUserGroupMember.DELETEALL(TRUE);

               NfPermissionGroupMember.RESET();
               NfPermissionGroupMember.SETRANGE(Type, NfPermissionGroupMember.Type::"User Group");
               NfPermissionGroupMember.SETRANGE("nF. User / User Group ID", Rec.ID);
               NfPermissionGroupMember.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=nForcement User Group;
               ENG=nForcement User Group];
    LookupPageID=Page9086962;
    DrillDownPageID=Page9086962;
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=ID;
                                                              ENG=ID] }
    { 11  ;   ;Name                ;Text100       ;CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 12  ;   ;Description         ;Text250       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 20  ;   ;Hidden              ;Boolean       ;CaptionML=[ENU=Hidden;
                                                              ENG=Hidden] }
    { 30  ;   ;Sequence            ;Integer       ;CaptionML=[ENU=Sequence;
                                                              ENG=Sequence] }
    { 1000;   ;Created By          ;Code50        ;OnLookup=BEGIN
                                                              NfRecordAuditToolkit.UserLookup(Rec."Created By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Created By;
                                                              ENG=Created By] }
    { 1001;   ;Created Date Time   ;DateTime      ;CaptionML=[ENU=Created Date Time;
                                                              ENG=Created Date Time] }
    { 1002;   ;Modified By         ;Code50        ;OnLookup=BEGIN
                                                              NfRecordAuditToolkit.UserLookup(Rec."Modified By", FALSE);
                                                            END;

                                                   CaptionML=[ENU=Modified By;
                                                              ENG=Modified By] }
    { 1003;   ;Modified Date Time  ;DateTime      ;CaptionML=[ENU=Modified Date Time;
                                                              ENG=Modified Date Time] }
  }
  KEYS
  {
    {    ;ID                                       }
    {    ;Name                                    ;Clustered=Yes }
    {    ;Hidden,Name                              }
    {    ;Hidden,Sequence                          }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      NfUserGroup@1000000004 : Record 9086955;
      NfUserGroupMember@1000000002 : Record 9086956;
      NfPermissionGroupMember@1000000003 : Record 9086961;
      NfIif@1000000000 : Codeunit 9086975;
      NfRecordAuditToolkit@1000000001 : Codeunit 9086951;
      MarkingUsersAsPendingBlocked@1000000005 : Boolean;

    LOCAL PROCEDURE CheckNameUnique@1000000001();
    VAR
      eNameMustBeUnique@1000000000 : TextConst 'ENU="Name must be unique; ''%1'' is already used.";ENG="Name must be unique; ''%1'' is already used."';
    BEGIN
      ///<summary>Checking if user group name is unique</summary>

      IF (Rec.Name = '') THEN
        EXIT;

      NfUserGroup.RESET();
      NfUserGroup.SETCURRENTKEY(Name);
      NfUserGroup.SETRANGE(Name, Rec.Name);
      NfUserGroup.SETFILTER(ID, '<>%1', Rec.ID);
      IF (NfUserGroup.FINDFIRST()) THEN
        ERROR(eNameMustBeUnique, Rec.Name);
    END;

    PROCEDURE BlockMarkingUsersAsPending@1000000002(pBlock@1000000000 : Boolean);
    BEGIN
      ///<summary>Blocking marking users as pending</summary>
      ///<param name="pBlock">The flag</param>

      MarkingUsersAsPendingBlocked := pBlock;
    END;

    PROCEDURE MarkUsersAsPending@1000000000();
    BEGIN
      ///<summary>Marking users as pending</summary>

      IF (MarkingUsersAsPendingBlocked) THEN
        EXIT;

      NfUserGroupMember.RESET();
      NfUserGroupMember.SETRANGE("nF. User Group ID", Rec.ID);
      IF (NfUserGroupMember.FINDSET()) THEN
      REPEAT
        NfUserGroupMember.MarkUserAsPending();
      UNTIL (NfUserGroupMember.NEXT() = 0);
    END;

    PROCEDURE GetStyle@1000000003() : Text;
    BEGIN
      ///<summary>Returning record style</summary>
      ///<returns>The style</returns>

      EXIT(NfIif.Text(Rec.Hidden, 'Subordinate', 'Standard'));
    END;

    BEGIN
    {
      ///<summary>Table with nForcement permission groups</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-04-22">Created</change>
    }
    END.
  }
}

