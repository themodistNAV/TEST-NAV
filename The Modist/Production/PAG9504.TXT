OBJECT Page 9504 Debugger Code Viewer
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Debugger Code Viewer;
               ENG=Debugger Code Viewer];
    LinksAllowed=No;
    SourceTable=Table2000000101;
    PageType=CardPart;
    ShowFilter=No;
    OnFindRecord=VAR
                   CallStack@1001 : Record 2000000101;
                   BreakpointCollection@1002 : DotNet "'Microsoft.Dynamics.Nav.Client.CodeViewerTypes, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.BreakpointCollection";
                 BEGIN
                   IF CallStack.ISEMPTY THEN BEGIN
                     GetBreakpointCollection(ObjType,ObjectId,BreakpointCollection);
                     PaintBreakpoints(BreakpointCollection);
                     CurrBreakpointCollection := BreakpointCollection;

                     IF LineNo <> -1 THEN BEGIN
                       // Set line to -1 to remove the current line marker
                       LineNo := -1;
                       CurrPage.CodeViewer.UpdateLine(LineNo,TRUE);
                     END;
                     EXIT(FALSE);
                   END;

                   EXIT(FIND(Which));
                 END;

    OnAfterGetRecord=VAR
                       ObjectMetadata@1009 : Record 2000000071;
                       NAVAppObjectMetadata@1008 : Record 2000000150;
                       AllObj@1010 : Record 2000000038;
                       CodeStream@1007 : InStream;
                       BreakpointCollection@1006 : DotNet "'Microsoft.Dynamics.Nav.Client.CodeViewerTypes, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.BreakpointCollection";
                       Code@1005 : BigText;
                       NewObjectType@1004 : Option;
                       NewObjectId@1003 : Integer;
                       NewCallstackId@1001 : Integer;
                       IsBreakAfterRunningCodeAction@1000 : Boolean;
                       NewLineNo@1002 : Integer;
                     BEGIN
                       NewObjectType := "Object Type";
                       NewObjectId := "Object ID";
                       NewCallstackId := ID;
                       NewLineNo := "Line No.";

                       IF DebuggerManagement.IsBreakAfterCodeTrackingAction THEN BEGIN
                         DebuggerManagement.ResetActionState;
                         BreakpointCollection := CurrBreakpointCollection;
                       END ELSE
                         GetBreakpointCollection(NewObjectType,NewObjectId,BreakpointCollection);

                       IsBreakAfterRunningCodeAction := DebuggerManagement.IsBreakAfterRunningCodeAction;

                       IF (ObjType <> NewObjectType) OR
                          (ObjectId <> NewObjectId) OR (CallstackId <> NewCallstackId) OR IsBreakAfterRunningCodeAction
                       THEN BEGIN
                         CallstackId := NewCallstackId;

                         IF (ObjType <> NewObjectType) OR (ObjectId <> NewObjectId) OR IsBreakAfterRunningCodeAction THEN BEGIN
                           ObjType := NewObjectType;
                           ObjectId := NewObjectId;

                           ObjectMetadata.INIT;
                           NAVAppObjectMetadata.INIT;

                           IF AllObj.GET(ObjType,ObjectId) AND NOT ISNULLGUID(AllObj."App Package ID") THEN BEGIN
                             IF NAVAppObjectMetadata.GET(AllObj."App Package ID",ObjType,ObjectId) THEN BEGIN
                               NAVAppObjectMetadata.CALCFIELDS("User AL Code");
                               NAVAppObjectMetadata."User AL Code".CREATEINSTREAM(CodeStream,TEXTENCODING::UTF8);
                               Code.READ(CodeStream);

                               LineNo := NewLineNo;
                               CurrBreakpointCollection := BreakpointCollection;
                               CurrPage.CodeViewer.LoadCode(Code,NewLineNo,BreakpointCollection,(NewCallstackId = 1));
                             END
                           END ELSE
                             IF ObjectMetadata.GET(ObjType,ObjectId) THEN BEGIN
                               ObjectMetadata.CALCFIELDS("User AL Code");
                               ObjectMetadata."User AL Code".CREATEINSTREAM(CodeStream,TEXTENCODING::UTF8);
                               Code.READ(CodeStream);

                               LineNo := NewLineNo;
                               CurrBreakpointCollection := BreakpointCollection;
                               CurrPage.CodeViewer.LoadCode(Code,NewLineNo,BreakpointCollection,(NewCallstackId = 1));
                             END;

                           IF IsBreakAfterRunningCodeAction THEN
                             DebuggerManagement.ResetActionState;

                           // Refresh to update data caption on debugger page

                           DebuggerManagement.RefreshDebuggerTaskPage;

                           EXIT;
                         END;
                       END;

                       IF NewLineNo <> LineNo THEN BEGIN
                         LineNo := NewLineNo;
                         IF ISNULL(BreakpointCollection) THEN
                           IF ISNULL(CurrBreakpointCollection) THEN
                             CurrPage.CodeViewer.UpdateLine(NewLineNo,(NewCallstackId = 1))
                           ELSE
                             CurrPage.CodeViewer.Update(NewLineNo,BreakpointCollection,(NewCallstackId = 1))
                         ELSE
                           IF NOT BreakpointCollection.Equals(CurrBreakpointCollection) THEN
                             CurrPage.CodeViewer.Update(NewLineNo,BreakpointCollection,(NewCallstackId = 1))
                           ELSE
                             CurrPage.CodeViewer.UpdateLine(NewLineNo,(NewCallstackId = 1))
                       END ELSE
                         PaintBreakpoints(BreakpointCollection);

                       CurrBreakpointCollection := BreakpointCollection;
                     END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Field     ;
                Name=CodeViewer;
                CaptionML=[ENU=Code Viewer;
                           ENG=Code Viewer];
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.CodeViewer;PublicKeyToken=31bf3856ad364e35] }

  }
  CODE
  {
    VAR
      DebuggerManagement@1007 : Codeunit 9500;
      CurrBreakpointCollection@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.CodeViewerTypes, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.BreakpointCollection";
      Variables@1006 : DotNet "'Microsoft.Dynamics.Nav.Client.CodeViewerTypes, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.VariableCollection";
      ObjType@1001 : Option;
      ObjectId@1008 : Integer;
      CallstackId@1000 : Integer;
      Text001@1002 : TextConst '@@@=Shown when hovering over text in the code viewer that has no context as a variable.;ENU=The name ''%1'' does not exist in the current context.;ENG=The name ''%1'' does not exist in the current context.';
      LineNo@1003 : Integer;

    LOCAL PROCEDURE GetBreakpointCollection@1(ObjType@1000 : Integer;ObjectId@1001 : Integer;VAR BreakpointCollection@1002 : DotNet "'Microsoft.Dynamics.Nav.Client.CodeViewerTypes, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.BreakpointCollection");
    VAR
      DebuggerBreakpoint@1003 : Record 2000000100;
    BEGIN
      WITH DebuggerBreakpoint DO BEGIN
        SETRANGE("Object Type",ObjType);
        SETRANGE("Object ID",ObjectId);

        IF FINDSET THEN BEGIN
          BreakpointCollection := BreakpointCollection.BreakpointCollection;
          REPEAT
            BreakpointCollection.AddBreakpoint("Line No.",Enabled,Condition);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ToggleBreakpoint@2();
    BEGIN
      UpdateBreakpoint(CurrPage.CodeViewer.CaretLine);
    END;

    LOCAL PROCEDURE UpdateBreakpoint@3(LineNo@1000 : Integer);
    VAR
      DebuggerBreakpoint@1001 : Record 2000000100;
    BEGIN
      IF (ObjType = 0) OR (ObjectId = 0) THEN
        EXIT;

      WITH DebuggerBreakpoint DO BEGIN
        INIT;
        "Object Type" := ObjType;
        "Object ID" := ObjectId;
        "Line No." := LineNo;
        IF NOT INSERT(TRUE) THEN BEGIN
          SETRANGE("Object Type",ObjType);
          SETRANGE("Object ID",ObjectId);
          SETRANGE("Line No.","Line No.");
          SETRANGE("Column No.","Column No.");

          IF FINDFIRST THEN BEGIN
            IF Enabled THEN
              DELETE(TRUE)
            ELSE BEGIN
              Enabled := TRUE;
              MODIFY(TRUE);
            END
          END
        END
      END
    END;

    PROCEDURE SetBreakpointCondition@4();
    VAR
      DebuggerBreakpoint@1000 : Record 2000000100;
      DebuggerBreakpointTemp@1001 : TEMPORARY Record 2000000100;
      IsNewRecord@1002 : Boolean;
    BEGIN
      IF (ObjType = 0) OR (ObjectId = 0) THEN
        EXIT;

      WITH DebuggerBreakpoint DO BEGIN
        INIT;
        "Object Type" := ObjType;
        "Object ID" := ObjectId;
        "Line No." := CurrPage.CodeViewer.CaretLine;

        IsNewRecord := INSERT(TRUE);

        SETRANGE("Object Type",ObjType);
        SETRANGE("Object ID",ObjectId);
        SETRANGE("Line No.","Line No.");
        SETRANGE("Column No.","Column No.");

        IF FINDFIRST THEN BEGIN
          COMMIT;
          DebuggerBreakpointTemp := DebuggerBreakpoint;
          DebuggerBreakpointTemp.INSERT;
          IF PAGE.RUNMODAL(PAGE::"Debugger Breakpoint Condition",DebuggerBreakpointTemp) = ACTION::LookupOK THEN BEGIN
            Condition := DebuggerBreakpointTemp.Condition;
            MODIFY(TRUE)
          END ELSE
            IF IsNewRecord THEN
              DELETE(TRUE);
        END
      END
    END;

    LOCAL PROCEDURE GetVariables@6(VariableName@1000 : Text;LeftContext@1001 : Text;VAR Variables@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.CodeViewerTypes, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.VariableCollection") Found : Boolean;
    VAR
      VariablesRec@1002 : Record 2000000102;
      VariableValue@1005 : Text[1024];
      VariableWithoutQoutes@1003 : Text[1024];
      Global@1007 : Boolean;
    BEGIN
      Found := TRUE;
      VariableWithoutQoutes := DebuggerManagement.RemoveQuotes(VariableName);
      Variables := Variables.VariableCollection;

      WITH VariablesRec DO BEGIN
        SETRANGE("Call Stack ID",CallstackId);
        SETRANGE(Name,VariableWithoutQoutes);

        IF FINDSET THEN
          REPEAT
            IF DebuggerManagement.ShouldBeInTooltip(Path,LeftContext) THEN BEGIN
              IF Value = '' THEN
                VariableValue := '<...>'
              ELSE
                VariableValue := Value;

              Global := STRPOS(Path,'"<Globals>"') = 1;

              Variables.AddVariable(VariableName,Path,VariableValue,Type,Global);
            END
          UNTIL NEXT = 0;
      END;

      Found := Variables.Count <> 0;
    END;

    LOCAL PROCEDURE ShowTooltip@16(VariableName@1000 : Text;LeftContext@1001 : Text);
    VAR
      CallStack@1003 : Record 2000000101;
      TooltipText@1002 : Text;
    BEGIN
      IF CallStack.ISEMPTY THEN
        CurrPage.CodeViewer.ShowTooltip('')
      ELSE
        IF GetVariables(VariableName,LeftContext,Variables) THEN
          CurrPage.CodeViewer.ShowTooltip(Variables)
        ELSE BEGIN
          TooltipText := STRSUBSTNO(Text001,VariableName);
          CurrPage.CodeViewer.ShowTooltip(TooltipText);
        END;
    END;

    LOCAL PROCEDURE PaintBreakpoints@14(VAR BreakpointCollection@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.CodeViewerTypes, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.BreakpointCollection");
    BEGIN
      IF ISNULL(BreakpointCollection) THEN BEGIN
        IF NOT ISNULL(CurrBreakpointCollection) THEN
          CurrPage.CodeViewer.UpdateBreakpoints(BreakpointCollection);
      END ELSE
        IF NOT BreakpointCollection.Equals(CurrBreakpointCollection) THEN
          CurrPage.CodeViewer.UpdateBreakpoints(BreakpointCollection);
    END;

    EVENT CodeViewer@-2::SetBreakpoint@8(lineNo@1000 : Integer);
    BEGIN
      UpdateBreakpoint(lineNo);
      CurrPage.UPDATE;
    END;

    EVENT CodeViewer@-2::GetVariableValue@9(variableName@1001 : Text;leftContext@1000 : Text);
    BEGIN
      ShowTooltip(variableName,leftContext);
    END;

    EVENT CodeViewer@-2::AddWatch@10(variablePath@1000 : Text);
    BEGIN
      DebuggerManagement.AddWatch(variablePath,TRUE);
    END;

    BEGIN
    END.
  }
}

