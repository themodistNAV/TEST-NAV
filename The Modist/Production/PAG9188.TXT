OBJECT Page 9188 Generic Chart Customization
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Generic Chart Customization;
               ENG=Generic Chart Customisation];
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table2000000078;
    PageType=Card;
    ShowFilter=No;
    OnAfterGetRecord=BEGIN
                       IF NOT XMLRetrieved THEN BEGIN
                         SetFieldValues;
                         EnableControls;
                       END;
                       XMLRetrieved := TRUE;
                     END;

    ActionList=ACTIONS
    {
      { 17      ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 37      ;1   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=E&xport Chart;
                                 ENG=E&xport Chart];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Export;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ExportChartDefinition;
                               END;
                                }
      { 41      ;1   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Copy Chart;
                                 ENG=Copy Chart];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Copy;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 CopyGenericChart@1034 : Page 9187;
                               BEGIN
                                 CALCFIELDS(BLOB);
                                 CopyGenericChart.SetSourceChart(Rec);
                                 CopyGenericChart.RUNMODAL;
                               END;
                                }
      { 14      ;    ;ActionContainer;
                      Name=Action;
                      CaptionML=[ENU=Actions;
                                 ENG=Actions];
                      ActionContainerType=RelatedInformation }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 18  ;1   ;Group     ;
                Name=Measures (Y-Axis);
                CaptionML=[ENU=Measures (Y-Axis);
                           ENG=Measures (Y-Axis)];
                GroupType=Group;
                Layout=Rows }

    { 25  ;2   ;Group     ;
                GroupType=GridLayout;
                Layout=Rows }

    { 19  ;3   ;Group     ;
                Name=Required Measure;
                CaptionML=[ENU=Required Measure;
                           ENG=Required Measure];
                GroupType=Group }

    { 20  ;4   ;Field     ;
                CaptionML=[ENU=Data Column;
                           ENG=Data Column];
                SourceExpr=DataColumn[1];
                Enabled=DataColumn1Enabled;
                Editable=DataColumn1Enabled;
                RowSpan=1;
                ColumnSpan=1;
                OnValidate=BEGIN
                             ValidateDataColumn(1);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[1],DummyCaption,2,FALSE);
                           ValidateDataColumn(1);
                         END;
                          }

    { 21  ;4   ;Field     ;
                CaptionML=[ENU=Aggregation;
                           ENG=Aggregation];
                OptionCaptionML=[ENU=None,Count,Sum,Min,Max,Avg;
                                 ENG=None,Count,Sum,Min,Max,Avg];
                SourceExpr=Aggregation[1];
                RowSpan=1;
                ColumnSpan=1;
                OnValidate=BEGIN
                             CheckAggregation(1);
                             UpdateChartDefinition;
                           END;
                            }

    { 22  ;4   ;Field     ;
                CaptionML=[ENU=Graph Type;
                           ENG=Graph Type];
                OptionCaptionML=[ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,Pie,Doughnut,Range,Radar,Funnel;
                                 ENG=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,Pie,Doughnut,Range,Radar,Funnel];
                SourceExpr=ChartType;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;
                            }

    { 39  ;4   ;Field     ;
                AssistEdit=No;
                CaptionML=[ENU=Caption;
                           ENG=Caption];
                SourceExpr=MeasureCaption[1];
                Enabled=DataColumn1Enabled;
                Editable=DataColumn1Enabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.RequiredMeasureCode,GenericChartMgt.GetUserLanguage,MeasureCaption[1]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[1] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.RequiredMeasureCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 23  ;3   ;Group     ;
                Name=Optional Measure 1;
                CaptionML=[ENU=Optional Measure;
                           ENG=Optional Measure];
                GroupType=Group }

    { 24  ;4   ;Field     ;
                SourceExpr=DataColumn[2];
                Enabled=OptionalMeasuresEnabled AND DataColumn2Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(2);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[2],DummyCaption,2,FALSE);
                           ValidateDataColumn(2);
                         END;
                          }

    { 26  ;4   ;Field     ;
                OptionCaptionML=[ENU=None,Count,Sum,Min,Max,Avg;
                                 ENG=None,Count,Sum,Min,Max,Avg];
                SourceExpr=Aggregation[2];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(2);
                             UpdateChartDefinition;
                           END;
                            }

    { 27  ;4   ;Field     ;
                OptionCaptionML=[ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range;
                                 ENG=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range];
                SourceExpr=ChartTypeReduced[2];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;
                            }

    { 40  ;4   ;Field     ;
                AssistEdit=No;
                SourceExpr=MeasureCaption[2];
                Enabled=OptionalMeasuresEnabled AND DataColumn2Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure1Code,GenericChartMgt.GetUserLanguage,MeasureCaption[2]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[2] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure1Code);
                               UpdateChartDefinition;
                             END;
                              }

    { 28  ;3   ;Group     ;
                Name=Optional Measure 2;
                CaptionML=[ENU=Optional Measure;
                           ENG=Optional Measure];
                GroupType=Group }

    { 29  ;4   ;Field     ;
                SourceExpr=DataColumn[3];
                Enabled=OptionalMeasuresEnabled AND DataColumn3Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(3);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[3],DummyCaption,2,FALSE);
                           ValidateDataColumn(3);
                         END;
                          }

    { 30  ;4   ;Field     ;
                OptionCaptionML=[ENU=None,Count,Sum,Min,Max,Avg;
                                 ENG=None,Count,Sum,Min,Max,Avg];
                SourceExpr=Aggregation[3];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(3);
                             UpdateChartDefinition;
                           END;
                            }

    { 31  ;4   ;Field     ;
                OptionCaptionML=[ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range;
                                 ENG=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range];
                SourceExpr=ChartTypeReduced[3];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;
                            }

    { 43  ;4   ;Field     ;
                AssistEdit=No;
                SourceExpr=MeasureCaption[3];
                Enabled=OptionalMeasuresEnabled AND DataColumn3Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure2Code,GenericChartMgt.GetUserLanguage,MeasureCaption[3]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[3] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure2Code);
                               UpdateChartDefinition;
                             END;
                              }

    { 32  ;3   ;Group     ;
                Name=Optional Measure 3;
                CaptionML=[ENU=Optional Measure;
                           ENG=Optional Measure];
                GroupType=Group }

    { 33  ;4   ;Field     ;
                SourceExpr=DataColumn[4];
                Enabled=OptionalMeasuresEnabled AND DataColumn4Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(4);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[4],DummyCaption,2,FALSE);
                           ValidateDataColumn(4);
                         END;
                          }

    { 34  ;4   ;Field     ;
                OptionCaptionML=[ENU=None,Count,Sum,Min,Max,Avg;
                                 ENG=None,Count,Sum,Min,Max,Avg];
                SourceExpr=Aggregation[4];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(4);
                             UpdateChartDefinition;
                           END;
                            }

    { 35  ;4   ;Field     ;
                SourceExpr=ChartTypeReduced[4];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;
                            }

    { 45  ;4   ;Field     ;
                AssistEdit=No;
                SourceExpr=MeasureCaption[4];
                Enabled=OptionalMeasuresEnabled AND DataColumn4Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure3Code,GenericChartMgt.GetUserLanguage,MeasureCaption[4]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[4] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure3Code);
                               UpdateChartDefinition;
                             END;
                              }

    { 7   ;3   ;Group     ;
                Name=Optional Measure 4;
                CaptionML=[ENU=Optional Measure;
                           ENG=Optional Measure];
                GroupType=Group }

    { 6   ;4   ;Field     ;
                SourceExpr=DataColumn[5];
                Enabled=OptionalMeasuresEnabled AND DataColumn5Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(5);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[5],DummyCaption,2,FALSE);
                           ValidateDataColumn(5);
                         END;
                          }

    { 4   ;4   ;Field     ;
                OptionCaptionML=[ENU=None,Count,Sum,Min,Max,Avg;
                                 ENG=None,Count,Sum,Min,Max,Avg];
                SourceExpr=Aggregation[5];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(5);
                             UpdateChartDefinition;
                           END;
                            }

    { 3   ;4   ;Field     ;
                OptionCaptionML=[ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range;
                                 ENG=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range];
                SourceExpr=ChartTypeReduced[5];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;
                            }

    { 46  ;4   ;Field     ;
                AssistEdit=No;
                SourceExpr=MeasureCaption[5];
                Enabled=OptionalMeasuresEnabled AND DataColumn5Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure4Code,GenericChartMgt.GetUserLanguage,MeasureCaption[5]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[5] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure4Code);
                               UpdateChartDefinition;
                             END;
                              }

    { 11  ;3   ;Group     ;
                Name=Optional Measure 5;
                CaptionML=[ENU=Optional Measure;
                           ENG=Optional Measure];
                GroupType=Group }

    { 10  ;4   ;Field     ;
                SourceExpr=DataColumn[6];
                Enabled=OptionalMeasuresEnabled AND DataColumn6Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(6);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[6],DummyCaption,2,FALSE);
                           ValidateDataColumn(6);
                         END;
                          }

    { 9   ;4   ;Field     ;
                OptionCaptionML=[ENU=None,Count,Sum,Min,Max,Avg;
                                 ENG=None,Count,Sum,Min,Max,Avg];
                SourceExpr=Aggregation[6];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(6);
                             UpdateChartDefinition;
                           END;
                            }

    { 8   ;4   ;Field     ;
                OptionCaptionML=[ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range;
                                 ENG=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range];
                SourceExpr=ChartTypeReduced[6];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;
                            }

    { 47  ;4   ;Field     ;
                AssistEdit=No;
                SourceExpr=MeasureCaption[6];
                Enabled=OptionalMeasuresEnabled AND DataColumn6Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure5Code,GenericChartMgt.GetUserLanguage,MeasureCaption[6]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[6] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure5Code);
                               UpdateChartDefinition;
                             END;
                              }

    { 38  ;2   ;Field     ;
                Name=Y-Axis Title;
                AssistEdit=No;
                CaptionML=[ENU=Y-Axis Title;
                           ENG=Y-Axis Title];
                SourceExpr=TempGenericChartSetup."Y-Axis Title";
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.YAxisTitleCode,GenericChartMgt.GetUserLanguage,
                               TempGenericChartSetup."Y-Axis Title");
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               TempGenericChartSetup."Y-Axis Title" :=
                                 GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.YAxisTitleCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 15  ;2   ;Field     ;
                Name=Show Y-Axis Title;
                CaptionML=[ENU=Show Y-Axis Title;
                           ENG=Show Y-Axis Title];
                SourceExpr=TempGenericChartSetup."Y-Axis Show Title";
                OnValidate=VAR
                             GenericChartMgt@1001 : Codeunit 9180;
                           BEGIN
                             GenericChartMgt.CheckSourceTypeID(TempGenericChartSetup,TRUE);
                             UpdateChartDefinition;
                           END;
                            }

    { 12  ;1   ;Group     ;
                Name=<Control35>;
                CaptionML=[ENU=Dimensions (X- and Z-Axes);
                           ENG=Dimensions (X- and Z-Axes)];
                GroupType=Group }

    { 49  ;2   ;Field     ;
                Name=X-Axis Field;
                CaptionML=[ENU=X-Axis Field;
                           ENG=X-Axis Field];
                SourceExpr=TempGenericChartSetup."X-Axis Field Name";
                OnValidate=BEGIN
                             ValidateDimension(1);
                           END;

                OnLookup=VAR
                           GenericChartMgt@1000 : Codeunit 9180;
                         BEGIN
                           WITH TempGenericChartSetup DO
                             GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,"X-Axis Field ID","X-Axis Field Name","X-Axis Title",0,FALSE);
                           TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.XAxisTitleCode,GenericChartMgt.GetUserLanguage,
                             TempGenericChartSetup."X-Axis Title");
                           ValidateDimension(1);
                         END;
                          }

    { 42  ;2   ;Field     ;
                Name=X-Axis Title;
                AssistEdit=No;
                CaptionML=[ENU=X-Axis Title;
                           ENG=X-Axis Title];
                SourceExpr=TempGenericChartSetup."X-Axis Title";
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.XAxisTitleCode,GenericChartMgt.GetUserLanguage,
                               TempGenericChartSetup."X-Axis Title");
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               TempGenericChartSetup."X-Axis Title" :=
                                 GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.XAxisTitleCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 48  ;2   ;Field     ;
                Name=Show X-Axis Title;
                CaptionML=[ENU=Show X-Axis Title;
                           ENG=Show X-Axis Title];
                SourceExpr=TempGenericChartSetup."X-Axis Show Title";
                OnValidate=VAR
                             GenericChartMgt@1001 : Codeunit 9180;
                           BEGIN
                             GenericChartMgt.CheckSourceTypeID(TempGenericChartSetup,TRUE);
                             UpdateChartDefinition;
                           END;
                            }

    { 13  ;2   ;Field     ;
                Name=Data Point X Label;
                AssistEdit=No;
                CaptionML=[ENU=Data Point X Label;
                           ENG=Data Point X Label];
                SourceExpr=TempGenericChartSetup."X-Axis Field Caption";
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.XAxisCaptionCode,GenericChartMgt.GetUserLanguage,
                               TempGenericChartSetup."X-Axis Field Caption");
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               TempGenericChartSetup."X-Axis Field Caption" :=
                                 GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.XAxisCaptionCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 16  ;2   ;Field     ;
                Name=Z-Axis Field;
                CaptionML=[ENU=Z-Axis Field;
                           ENG=Z-Axis Field];
                SourceExpr=TempGenericChartSetup."Z-Axis Field Name";
                Enabled=ZAxisEnabled;
                Editable=ZAxisEnabled;
                OnValidate=BEGIN
                             ValidateDimension(2);
                           END;

                OnLookup=VAR
                           GenericChartMgt@1000 : Codeunit 9180;
                         BEGIN
                           WITH TempGenericChartSetup DO
                             GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,"Z-Axis Field ID","Z-Axis Field Name","Z-Axis Title",0,FALSE);
                           ValidateDimension(2);
                         END;
                          }

    { 5   ;2   ;Field     ;
                Name=Data Point Z Label;
                AssistEdit=No;
                CaptionML=[ENU=Data Point Z Label;
                           ENG=Data Point Z Label];
                SourceExpr=TempGenericChartSetup."Z-Axis Field Caption";
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.ZAxisCaptionCode,GenericChartMgt.GetUserLanguage,
                               TempGenericChartSetup."Z-Axis Field Caption");
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               TempGenericChartSetup."Z-Axis Field Caption" :=
                                 GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.ZAxisCaptionCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 44  ;1   ;Group     ;
                Name=Chart Description;
                CaptionML=[ENU=Chart Description;
                           ENG=Chart Description];
                GroupType=Group }

    { 36  ;2   ;Field     ;
                Name=Description;
                AssistEdit=No;
                CaptionML=[ENU=Description;
                           ENG=Description];
                SourceExpr=ChartDescription;
                Editable=TitleEnabled;
                MultiLine=Yes;
                OnValidate=BEGIN
                             TempGenericChartMemoBuf.SetMemo(GenericChartMgt.DescriptionCode,GenericChartMgt.GetUserLanguage,ChartDescription);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               ChartDescription := GenericChartMgt.MemoMLAssistEdit(TempGenericChartMemoBuf,GenericChartMgt.DescriptionCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 2   ;1   ;Part      ;
                Name=PreviewPart;
                CaptionML=[ENU=Preview Part;
                           ENG=Preview Part];
                PagePartID=Page9184;
                PartType=Page }

  }
  CODE
  {
    VAR
      TempGenericChartSetup@1004 : TEMPORARY Record 9180;
      TempGenericChartFilter@1020 : TEMPORARY Record 9181;
      TempGenericChartYAxis@1001 : TEMPORARY Record 9182;
      TempGenericChartCaptionsBuf@1029 : TEMPORARY Record 9185;
      TempGenericChartMemoBuf@1028 : TEMPORARY Record 9186;
      GenericChartMgt@1016 : Codeunit 9180;
      DataColumn@1013 : ARRAY [6] OF Text[50];
      MeasureCaption@1024 : ARRAY [6] OF Text[250];
      Aggregation@1014 : ARRAY [6] OF 'None,Count,Sum,Min,Max,Avg';
      ChartType@1015 : 'Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,Pie,Doughnut,Range,Radar,Funnel';
      ChartTypeReduced@1003 : ARRAY [6] OF 'Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range';
      ChartDescription@1011 : Text;
      DummyInt@1017 : Integer;
      DummyCaption@1030 : Text[50];
      OptionalMeasuresEnabled@1005 : Boolean INDATASET;
      Text002@1006 : TextConst 'ENU=Field %1 is already assigned to a measure or dimension. Select a different field.;ENG=Field %1 is already assigned to a measure or dimension. Select a different field.';
      ZAxisEnabled@1008 : Boolean INDATASET;
      Text004@1018 : TextConst 'ENU=You can only select one Measure with aggregation type Count.;ENG=You can only select one Measure with aggregation type Count.';
      Text005@1019 : TextConst 'ENU=If you select Aggregation Count, the Data Column will be modified for this measure. Do you want to continue?;ENG=If you select Aggregation Count, the Data Column will be modified for this measure. Do you want to continue?';
      TitleEnabled@1002 : Boolean;
      XMLRetrieved@1000 : Boolean;
      DataColumn1Enabled@1007 : Boolean INDATASET;
      DataColumn2Enabled@1009 : Boolean INDATASET;
      DataColumn3Enabled@1010 : Boolean INDATASET;
      DataColumn4Enabled@1012 : Boolean INDATASET;
      DataColumn5Enabled@1022 : Boolean INDATASET;
      DataColumn6Enabled@1023 : Boolean INDATASET;

    LOCAL PROCEDURE SetFieldValues@6();
    BEGIN
      ClearAllVariables;
      GenericChartMgt.RetrieveXML(
        Rec,TempGenericChartSetup,TempGenericChartYAxis,TempGenericChartCaptionsBuf,TempGenericChartMemoBuf,TempGenericChartFilter);
      ChartDescription := TempGenericChartMemoBuf.GetMemo(GenericChartMgt.DescriptionCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup."Y-Axis Title" :=
        TempGenericChartCaptionsBuf.GetCaption(GenericChartMgt.YAxisTitleCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup."X-Axis Field Caption" :=
        TempGenericChartCaptionsBuf.GetCaption(GenericChartMgt.XAxisCaptionCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup."X-Axis Title" :=
        TempGenericChartCaptionsBuf.GetCaption(GenericChartMgt.XAxisTitleCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup."Z-Axis Field Caption" :=
        TempGenericChartCaptionsBuf.GetCaption(GenericChartMgt.ZAxisCaptionCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup.INSERT;
      FillMatrixWhenOpenPage;
      UpdateTempGenericChartYAXis;
      RefreshPreview;
    END;

    LOCAL PROCEDURE ValidateDataColumn@13(Index@1000 : Integer);
    VAR
      FieldAlreadyExists@1002 : Boolean;
      i@1001 : Integer;
    BEGIN
      GenericChartMgt.CheckSourceTypeID(TempGenericChartSetup,TRUE);
      FOR i := 1 TO ARRAYLEN(DataColumn) DO BEGIN
        IF (DataColumn[i] <> '') AND (Index <> i) THEN
          FieldAlreadyExists := (DataColumn[Index] = DataColumn[i]) OR FieldAlreadyExists;
      END;

      IF FieldAlreadyExists THEN
        ERROR(Text002,DataColumn[Index]);

      GenericChartMgt.CheckDataTypeAggregationCompliance(TempGenericChartSetup,DataColumn[Index],Aggregation[Index]);
      GenericChartMgt.ValidateFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[1],DummyCaption,2,FALSE,Aggregation[Index]);
      UpdateChartDefinition;
      EnableControls;
    END;

    LOCAL PROCEDURE ValidateDimension@14(Index@1000 : Integer);
    VAR
      DummyAggregation@1001 : 'None,Count,Sum,Min,Max,Avg';
    BEGIN
      GenericChartMgt.CheckSourceTypeID(TempGenericChartSetup,TRUE);
      WITH TempGenericChartSetup DO BEGIN
        IF ("X-Axis Field Name" <> '') AND ("Z-Axis Field Name" <> '') AND ("X-Axis Field Name" = "Z-Axis Field Name") THEN
          ERROR(Text002,DataColumn[Index]);
      END;
      WITH TempGenericChartSetup DO
        CASE Index OF
          1:
            GenericChartMgt.ValidateFieldColumn(
              TempGenericChartSetup,"X-Axis Field ID","X-Axis Field Name","X-Axis Title",0,FALSE,DummyAggregation);
          2:
            GenericChartMgt.ValidateFieldColumn(
              TempGenericChartSetup,"Z-Axis Field ID","Z-Axis Field Name","Z-Axis Title",0,FALSE,DummyAggregation);
        END;
      UpdateChartDefinition;
      EnableControls;
    END;

    LOCAL PROCEDURE UpdateTempGenericChartYAXis@2();
    VAR
      i@1000 : Integer;
      Count@1001 : Integer;
    BEGIN
      TempGenericChartYAxis.DELETEALL;

      IF ChartCapableOfOptionalMeasures THEN
        Count := ARRAYLEN(DataColumn)
      ELSE
        Count := 1;

      FOR i := 1 TO Count DO
        IF AddYAxisMeasure(i) THEN BEGIN
          CLEAR(TempGenericChartYAxis);
          TempGenericChartYAxis.ID := ID;
          TempGenericChartYAxis."Line No." := i * 10000;
          TempGenericChartYAxis."Y-Axis Measure Field Name" := DataColumn[i];
          TempGenericChartYAxis."Y-Axis Measure Field Caption" := MeasureCaption[i];
          GenericChartMgt.RetrieveFieldColumnIDFromName(
            TempGenericChartSetup."Source Type",TempGenericChartSetup."Source ID",TempGenericChartYAxis."Y-Axis Measure Field ID",
            DataColumn[i]);
          TempGenericChartYAxis.Aggregation := Aggregation[i];
          IF i = 1 THEN
            TempGenericChartYAxis."Chart Type" := ChartType
          ELSE
            TempGenericChartYAxis."Chart Type" := ChartTypeReduced[i];
          TempGenericChartYAxis.INSERT;
        END;
    END;

    LOCAL PROCEDURE FillMatrixWhenOpenPage@1();
    VAR
      i@1001 : Integer;
      CurrentCaptionCode@1002 : Code[10];
    BEGIN
      CLEAR(DataColumn);
      CLEAR(MeasureCaption);
      CLEAR(Aggregation);
      CLEAR(ChartType);
      i := 0;
      IF TempGenericChartYAxis.FINDSET THEN BEGIN
        CurrentCaptionCode := GenericChartMgt.RequiredMeasureCode;
        REPEAT
          i += 1;
          DataColumn[i] := TempGenericChartYAxis."Y-Axis Measure Field Name";
          MeasureCaption[i] := TempGenericChartCaptionsBuf.GetCaption(CurrentCaptionCode,GenericChartMgt.GetUserLanguage);
          Aggregation[i] := TempGenericChartYAxis.Aggregation;
          IF i = 1 THEN
            ChartType := TempGenericChartYAxis."Chart Type"
          ELSE
            ChartTypeReduced[i] := TempGenericChartYAxis."Chart Type";

          IF CurrentCaptionCode = GenericChartMgt.RequiredMeasureCode THEN
            CurrentCaptionCode := GenericChartMgt.OptionalMeasure1Code
          ELSE
            CurrentCaptionCode := INCSTR(CurrentCaptionCode)
        UNTIL TempGenericChartYAxis.NEXT = 0;
      END
    END;

    LOCAL PROCEDURE UpdateChartDefinition@5();
    BEGIN
      UpdateTempGenericChartYAXis;
      GenericChartMgt.SaveChanges(Rec,TempGenericChartSetup,TempGenericChartYAxis,TempGenericChartFilter,
        TempGenericChartCaptionsBuf,TempGenericChartMemoBuf);
      EnableControls;
      RefreshPreview;
    END;

    LOCAL PROCEDURE RefreshPreview@8();
    VAR
      chartBuilder@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartBuilder";
    BEGIN
      chartBuilder := chartBuilder.Empty;
      GenericChartMgt.FillChartHelper(chartBuilder,TempGenericChartSetup,TempGenericChartYAxis,TempGenericChartFilter,
        TempGenericChartCaptionsBuf,TempGenericChartMemoBuf);
      CurrPage.PreviewPart.PAGE.SetChartDefinition(chartBuilder);
    END;

    LOCAL PROCEDURE ClearAllVariables@9();
    BEGIN
      TempGenericChartSetup.DELETEALL;
      TempGenericChartFilter.DELETEALL;
      TempGenericChartYAxis.DELETEALL;
      TempGenericChartCaptionsBuf.DELETEALL;
      TempGenericChartMemoBuf.DELETEALL;

      CLEAR(TempGenericChartFilter);
      CLEAR(TempGenericChartYAxis);
      CLEAR(TempGenericChartSetup);
      CLEAR(TempGenericChartCaptionsBuf);
      CLEAR(TempGenericChartMemoBuf);
      CLEAR(GenericChartMgt);
      CLEAR(DataColumn);
      CLEAR(MeasureCaption);
      CLEAR(Aggregation);
      CLEAR(ChartType);
      CLEAR(ChartTypeReduced);
      CLEAR(DummyInt);
      CLEAR(DummyCaption);
    END;

    LOCAL PROCEDURE ChartCapableOfOptionalMeasures@12() : Boolean;
    BEGIN
      EXIT(NOT (ChartType IN [ChartType::Pie,ChartType::Doughnut,ChartType::Funnel,ChartType::Radar]));
    END;

    LOCAL PROCEDURE ExportChartDefinition@10();
    VAR
      TempBlob@1000 : Record 99008535;
      FileMgt@1001 : Codeunit 419;
    BEGIN
      CALCFIELDS(BLOB);
      IF BLOB.HASVALUE THEN BEGIN
        TempBlob.Blob := BLOB;
        FileMgt.BLOBExport(TempBlob,'*.xml',TRUE);
      END;
    END;

    LOCAL PROCEDURE EnableControls@17();
    BEGIN
      OptionalMeasuresEnabled := ChartCapableOfOptionalMeasures AND (TempGenericChartSetup."Z-Axis Field Name" = '');
      ZAxisEnabled :=
        ChartCapableOfOptionalMeasures AND
        (DataColumn[2] = '') AND (DataColumn[3] = '') AND (DataColumn[4] = '') AND (DataColumn[5] = '') AND (DataColumn[6] = '');
      TitleEnabled := TRUE;
      DataColumn1Enabled := Aggregation[1] <> Aggregation[1]::Count;
      DataColumn2Enabled := Aggregation[2] <> Aggregation[2]::Count;
      DataColumn3Enabled := Aggregation[3] <> Aggregation[3]::Count;
      DataColumn4Enabled := Aggregation[4] <> Aggregation[4]::Count;
      DataColumn5Enabled := Aggregation[5] <> Aggregation[5]::Count;
      DataColumn6Enabled := Aggregation[6] <> Aggregation[6]::Count;
    END;

    LOCAL PROCEDURE AddYAxisMeasure@19(index@1000 : Integer) : Boolean;
    BEGIN
      IF Aggregation[index] = Aggregation[index]::Count THEN
        EXIT(TRUE);
      EXIT(DataColumn[index] <> '');
    END;

    LOCAL PROCEDURE CheckAggregation@30(index@1000 : Integer);
    VAR
      i@1001 : Integer;
      FieldOfTypeCountAlreadyExists@1002 : Boolean;
      CountColumnName@1003 : Text[50];
      ReplaceDataColumn@1004 : Boolean;
    BEGIN
      FOR i := 1 TO ARRAYLEN(Aggregation) DO BEGIN
        IF (Aggregation[i] = Aggregation[i]::Count) AND (index <> i) THEN
          FieldOfTypeCountAlreadyExists := (Aggregation[index] = Aggregation[i]) OR FieldOfTypeCountAlreadyExists;
      END;

      IF FieldOfTypeCountAlreadyExists THEN
        ERROR(Text004);

      GenericChartMgt.CheckDataTypeAggregationCompliance(TempGenericChartSetup,DataColumn[index],Aggregation[index]);
      IF Aggregation[index] = Aggregation[index]::Count THEN BEGIN
        CountColumnName := GenericChartMgt.GetQueryCountColumnName(TempGenericChartSetup);
        IF DataColumn[index] <> CountColumnName THEN BEGIN
          ReplaceDataColumn := TRUE;
          IF DataColumn[index] <> '' THEN
            ReplaceDataColumn := CONFIRM(Text005,FALSE);
          IF ReplaceDataColumn THEN
            DataColumn[index] := CountColumnName
          ELSE
            ERROR('');
        END;
      END;
    END;

    BEGIN
    END.
  }
}

