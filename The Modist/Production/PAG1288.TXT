OBJECT Page 1288 Payment-to-Entry Match
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Payment-to-Entry Match;
               ENG=Payment-to-Entry Match];
    SourceTable=Table1294;
    PageType=CardPart;
    OnAfterGetCurrRecord=BEGIN
                           FetchData;
                         END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 6   ;1   ;Group     ;
                GroupType=Group }

    { 2   ;2   ;Field     ;
                Name=MatchConfidence;
                CaptionML=[ENU=Match Confidence;
                           ENG=Match Confidence];
                SourceExpr=BankPmtApplRule."Match Confidence" }

    { 10  ;2   ;Field     ;
                Name=RelatedPatryMatchedOverview;
                CaptionML=[ENU=Related Party Matched;
                           ENG=Related Party Matched];
                SourceExpr=BankPmtApplRule."Related Party Matched";
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                Name=DocExtDocNoMatchedOverview;
                CaptionML=[ENU=Document No./Ext. Document No. Matched;
                           ENG=Document No./Ext. Document No. Matched];
                SourceExpr=BankPmtApplRule."Doc. No./Ext. Doc. No. Matched";
                Editable=FALSE }

    { 5   ;2   ;Field     ;
                CaptionML=[ENU=Amount Incl. Tolerance Matched:;
                           ENG=Amount Incl. Tolerance Matched:];
                SourceExpr=AmountMatchText }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=No. of Open Entries for;
                           ENG=No. of Open Entries for];
                SourceExpr=BankAccReconciliationLine.GetAppliedToName;
                OnDrillDown=BEGIN
                              BankAccReconciliationLine.AppliedToDrillDown;
                            END;
                             }

    { 9   ;2   ;Field     ;
                Name=NoOfLedgerEntriesWithinAmount;
                CaptionML=[ENU=Within Amount Tolerance;
                           ENG=Within Amount Tolerance];
                SourceExpr=NoOfLedgerEntriesWithinAmountTolerance;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              BankAccReconciliationLine.DrillDownOnNoOfLedgerEntriesWithinAmountTolerance;
                            END;
                             }

    { 8   ;2   ;Field     ;
                Name=NoOfLedgerEntriesOutsideAmount;
                CaptionML=[ENU=Outside Amount Tolerance;
                           ENG=Outside Amount Tolerance];
                SourceExpr=NoOfLedgerEntriesOutsideAmountTolerance;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              BankAccReconciliationLine.DrillDownOnNoOfLedgerEntriesOutsideOfAmountTolerance;
                            END;
                             }

  }
  CODE
  {
    VAR
      BankPmtApplRule@1000 : Record 1252;
      BankAccReconciliationLine@1003 : Record 274;
      AccTypeErr@1004 : TextConst 'ENU=Wrong account type.;ENG=Wrong account type.';
      NoOfLedgerEntriesWithinAmountTolerance@1001 : Integer;
      NoOfLedgerEntriesOutsideAmountTolerance@1002 : Integer;
      AmountMatchText@1005 : Text;
      OneAmountInclToleranceMatchedTxt@1006 : TextConst 'ENU=Yes - Single;ENG=Yes - Single';
      MultipleAmountInclToleranceMatchedTxt@1007 : TextConst 'ENU=Yes - Multiple;ENG=Yes - Multiple';
      NoMatchOnAmountInclToleranceTxt@1008 : TextConst 'ENU=No;ENG=No';

    LOCAL PROCEDURE FetchData@1();
    VAR
      MatchBankPayments@1000 : Codeunit 1255;
      TypeHelper@1005 : Codeunit 10;
      RecRef@1007 : RecordRef;
      AccountTypeFieldRef@1006 : FieldRef;
      StatementTypeFieldRef@1012 : FieldRef;
      MatchConfidenceFieldRef@1014 : FieldRef;
      AppliesToEntryNo@1003 : Integer;
      AccountType@1004 : Option;
      StatementType@1013 : Option;
      BankAccountNo@1009 : Text;
      StatementNo@1010 : Text;
      StatementLineNo@1011 : Integer;
      Quality@1001 : Decimal;
    BEGIN
      FILTERGROUP(4);
      EVALUATE(AppliesToEntryNo,GETFILTER("Applies-to Entry No."));
      RecRef.GETTABLE(Rec);
      AccountTypeFieldRef := RecRef.FIELD(FIELDNO("Account Type"));
      AccountType := TypeHelper.GetOptionNo(GETFILTER("Account Type"),AccountTypeFieldRef.OPTIONCAPTION);
      StatementTypeFieldRef := RecRef.FIELD(FIELDNO("Statement Type"));
      StatementType := TypeHelper.GetOptionNo(GETFILTER("Statement Type"),StatementTypeFieldRef.OPTIONCAPTION);

      BankAccountNo := GETFILTER("Bank Account No.");
      StatementNo := GETFILTER("Statement No.");
      EVALUATE(StatementLineNo,GETFILTER("Statement Line No."));

      GetBankAccReconciliationLine(StatementType,BankAccountNo,StatementNo,StatementLineNo,AccountType);

      IF AppliesToEntryNo = 0 THEN BEGIN // TextMapper
        BankPmtApplRule.INIT;
        NoOfLedgerEntriesWithinAmountTolerance := 0;
        NoOfLedgerEntriesOutsideAmountTolerance := 0;
      END ELSE BEGIN
        CASE AccountType OF
          "Account Type"::Customer:
            MatchBankPayments.MatchSingleLineCustomer(
              BankPmtApplRule,BankAccReconciliationLine,AppliesToEntryNo,
              NoOfLedgerEntriesWithinAmountTolerance,NoOfLedgerEntriesOutsideAmountTolerance);
          "Account Type"::Vendor:
            MatchBankPayments.MatchSingleLineVendor(
              BankPmtApplRule,BankAccReconciliationLine,AppliesToEntryNo,
              NoOfLedgerEntriesWithinAmountTolerance,NoOfLedgerEntriesOutsideAmountTolerance);
          ELSE
            ERROR(AccTypeErr);
        END;

        EVALUATE(Quality,GETFILTER(Quality));
        BankPmtApplRule.SETRANGE(Score,Quality);
        IF NOT BankPmtApplRule.FINDFIRST THEN
          BankPmtApplRule."Match Confidence" := BankPmtApplRule."Match Confidence"::None;
      END;

      RecRef.GETTABLE(BankAccReconciliationLine);
      MatchConfidenceFieldRef := RecRef.FIELD(BankAccReconciliationLine.FIELDNO("Match Confidence"));
      BankAccReconciliationLine."Match Confidence" := TypeHelper.GetOptionNo(
          GETFILTER("Match Confidence"),MatchConfidenceFieldRef.OPTIONCAPTION);

      SetAmountInclToleranceMatched(BankPmtApplRule);
    END;

    LOCAL PROCEDURE GetBankAccReconciliationLine@7(StatementType@1007 : Option;BankAccountNo@1006 : Text;StatementNo@1005 : Text;StatementLineNo@1004 : Integer;AccountType@1001 : Option);
    BEGIN
      BankAccReconciliationLine.GET(StatementType,BankAccountNo,StatementNo,StatementLineNo);
      BankAccReconciliationLine."Account Type" := AccountType;
      BankAccReconciliationLine."Account No." := COPYSTR(GETFILTER("Account No."),1);
    END;

    LOCAL PROCEDURE SetAmountInclToleranceMatched@2(BankPmtApplRule@1000 : Record 1252);
    BEGIN
      CASE BankPmtApplRule."Amount Incl. Tolerance Matched" OF
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match":
          AmountMatchText := OneAmountInclToleranceMatchedTxt;
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches":
          AmountMatchText := MultipleAmountInclToleranceMatchedTxt;
        BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches":
          AmountMatchText := NoMatchOnAmountInclToleranceTxt;
      END;
    END;

    BEGIN
    END.
  }
}

