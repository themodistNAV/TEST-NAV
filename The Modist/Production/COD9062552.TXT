OBJECT Codeunit 9062552 CSV Format Management
{
  OBJECT-PROPERTIES
  {
    Date=02/03/16;
    Time=12:00:00 PM;
    Version List=NA2016.14;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CsvFormat@1000000000 : Record 9062701;

    PROCEDURE VerifyCsvFormats@1000000002() : Boolean;
    VAR
      eCsvCode@1000000001 : TextConst 'ENU=CSV;ENG=CSV';
      eCsvName@1000000000 : TextConst 'ENU=CSV;ENG=CSV';
      eCsvWithHeadersCode@1000000003 : TextConst 'ENU=CSV (WITH HEADERS);ENG=CSV (WITH HEADERS)';
      eCsvWithHeadersName@1000000002 : TextConst 'ENU=CSV (With Headers);ENG=CSV (With Headers)';
      eCsvFileFilter@1000000008 : TextConst 'ENU=CSV Files (*.csv)|All Files (*.*);ENG=CSV Files (*.csv)|All Files (*.*)';
      eTextCode@1000000007 : TextConst 'ENU=TEXT;ENG=TEXT';
      eTextName@1000000006 : TextConst 'ENU=Text;ENG=Text';
      eTextWithHeadersCode@1000000005 : TextConst 'ENU=TEXT (WITH HEADERS);ENG=TEXT (WITH HEADERS)';
      eTextWithHeadersName@1000000004 : TextConst 'ENU=Text (With Headers);ENG=Text (With Headers)';
      eTextFileFilter@1000000009 : TextConst 'ENU=Text Files (*.txt)|All Files (*.*);ENG=Text Files (*.txt)|All Files (*.*)';
    BEGIN
      //DOC NA2016.14 - Verifying CSV formats - creating default ones if the table is empty
      //  <- TRUE = CSV formats created, FALSE = Formats already OK

      CsvFormat.RESET();
      IF ( NOT (CsvFormat.ISEMPTY())) THEN
        EXIT(FALSE);

      CreateCsvFormat(eCsvCode, eCsvName, 'csv', eCsvFileFilter, ';', '"', FALSE, TRUE, TRUE);
      CreateCsvFormat(eCsvWithHeadersCode, eCsvWithHeadersName, 'csv', eCsvFileFilter, ';', '"', TRUE, FALSE, TRUE);
      CreateCsvFormat(eTextCode, eTextName, 'txt', eTextFileFilter, ',', '', FALSE, FALSE, TRUE);
      CreateCsvFormat(eTextWithHeadersCode, eTextWithHeadersName, 'txt', eTextFileFilter, ',', '', TRUE, FALSE, TRUE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateCsvFormat@1000000004(pCode@1000000000 : Code[20];pName@1000000001 : Text;pFileExtension@1000000002 : Text;pFileFilter@1000000008 : Text;pFieldSeparator@1000000003 : Text;pFieldDelimiter@1000000004 : Text;pAddFieldHeaders@1000000005 : Boolean;pDefault@1000000006 : Boolean;pInsert@1000000007 : Boolean);
    BEGIN
      //DOC NA2016.14 - Creating CSV format
      //  -> pCode: The format code
      //  -> pName: The format name
      //  -> pFileExtension: File extension
      //  -> pFileFilter: File filter
      //  -> pFieldSeparator: Field separator
      //  -> pFieldDelimiter: Field delimiter
      //  -> pAddFieldHeaders: Flag to add field headers
      //  -> pDefault: Default flag
      //  -> pInsert: Flag to insert the record into the database

      CLEAR(CsvFormat);
      CsvFormat.INIT();
      CsvFormat.VALIDATE(Code, pCode);
      CsvFormat.VALIDATE(Name, pName);
      CsvFormat.VALIDATE("File Extension", pFileExtension);
      CsvFormat.VALIDATE("File Filter", pFileFilter);
      CsvFormat.VALIDATE("Field Separator", pFieldSeparator);
      CsvFormat.VALIDATE("Field Delimiter", pFieldDelimiter);
      CsvFormat.VALIDATE("Add Field Headers", pAddFieldHeaders);
      CsvFormat.VALIDATE(Default, pDefault);
      IF (pInsert) THEN
        CsvFormat.INSERT(TRUE);
    END;

    PROCEDURE SelectCsvFormat@1000000000(VAR pCsvFormat@1000000000 : Record 9062701) : Boolean;
    VAR
      lCsvFormat@1000000001 : Record 9062701;
      lSelectCsvFormatReport@1000000002 : Report 9062239;
      lResult@1000000003 : Boolean;
    BEGIN
      //DOC NA2016.14 - Selecting CSV format
      //  <> pCsvFormat: Source / target record (shouldn't be save later; we'll write into it)
      //  <- TRUE = Selected, FALSE = Cancelled

      IF (VerifyCsvFormats()) THEN
        COMMIT;

      CLEAR(lResult);

      IF (CsvFormat.GET(pCsvFormat)) THEN
        lCsvFormat.TRANSFERFIELDS(CsvFormat, FALSE)
      ELSE
        IF ((pCsvFormat."File Extension" <> '') OR (pCsvFormat."Field Delimiter" <> '') OR (pCsvFormat."Field Separator" <> '')) THEN
          lCsvFormat.TRANSFERFIELDS(pCsvFormat, FALSE)
        ELSE
        BEGIN
          lCsvFormat.RESET();
          lCsvFormat.SETRANGE(Default, TRUE);
          IF ( NOT (lCsvFormat.FINDFIRST())) THEN
          BEGIN
            lCsvFormat.SETRANGE(Default);
            IF ( NOT (lCsvFormat.FINDFIRST())) THEN
              CLEAR(lCsvFormat);
          END;
        END;

      lSelectCsvFormatReport.Initialise(lCsvFormat);
      lSelectCsvFormatReport.RUNMODAL();
      IF (lSelectCsvFormatReport.GetOk()) THEN
      BEGIN
        lSelectCsvFormatReport.GetCsvFormat(pCsvFormat);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE DefaultCsvFormat@1000000001(VAR pCsvFormat@1000000002 : Record 9062701);
    VAR
      eDefaultCode@1000000000 : TextConst 'ENU=(DEFAULT);ENG=(DEFAULT)';
      eDefaultName@1000000001 : TextConst 'ENU=(Default);ENG=(Default)';
      eDefaultFileFilter@1000000003 : TextConst 'ENU=CSV Files (*.csv)|All Files (*.*);ENG=CSV Files (*.csv)|All Files (*.*)';
    BEGIN
      //DOC NA2016.14 - Returning default CSV format
      //  <> pCsvFormat: Target CSV format

      CreateCsvFormat(eDefaultCode, eDefaultName, 'csv', eDefaultFileFilter, ';', '"', FALSE, TRUE, FALSE);
      pCsvFormat := CsvFormat;
    END;

    BEGIN
    {
      //DOC NA2016.14 JH 22/02/2016 - Created
    }
    END.
  }
}

