OBJECT Codeunit 5063 ArchiveManagement
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=Document %1 has been archived.;ENG=Document %1 has been archived.';
      Text002@1003 : TextConst 'ENU=Do you want to Restore %1 %2 Version %3?;ENG=Do you want to Restore %1 %2 Version %3?';
      Text003@1002 : TextConst 'ENU=%1 %2 has been restored.;ENG=%1 %2 has been restored.';
      Text004@1001 : TextConst 'ENU=Document restored from Version %1.;ENG=Document restored from Version %1.';
      Text005@1004 : TextConst 'ENU=%1 %2 has been partly posted.\Restore not possible.;ENG=%1 %2 has been partly posted.\Restore not possible.';
      Text006@1005 : TextConst 'ENU=Entries exist for on or more of the following:\  - %1\  - %2\  - %3.\Restoration of document will delete these entries.\Continue with restore?;ENG=Entries exist for on or more of the following:\  - %1\  - %2\  - %3.\Restoration of document will delete these entries.\Continue with restore?';
      Text007@1006 : TextConst 'ENU=Archive %1 no.: %2?;ENG=Archive %1 no.: %2?';
      Text008@1007 : TextConst 'ENU=Item Tracking Line;ENG=Item Tracking Line';
      ReleaseSalesDoc@1008 : Codeunit 414;
      Text009@1009 : TextConst 'ENU=Unposted %1 %2 does not exist anymore.\It is not possible to restore the %1.;ENG=Unposted %1 %2 does not exist anymore.\It is not possible to restore the %1.';
      DeferralUtilities@1010 : Codeunit 1720;

    PROCEDURE ArchiveSalesDocument@2(VAR SalesHeader@1004 : Record 36);
    BEGIN
      IF CONFIRM(
           Text007,TRUE,SalesHeader."Document Type",
           SalesHeader."No.")
      THEN BEGIN
        StoreSalesDocument(SalesHeader,FALSE);
        MESSAGE(Text001,SalesHeader."No.");
      END;
    END;

    PROCEDURE ArchivePurchDocument@10(VAR PurchHeader@1000 : Record 38);
    BEGIN
      IF CONFIRM(
           Text007,TRUE,PurchHeader."Document Type",
           PurchHeader."No.")
      THEN BEGIN
        StorePurchDocument(PurchHeader,FALSE);
        MESSAGE(Text001,PurchHeader."No.");
      END;
    END;

    PROCEDURE StoreSalesDocument@4(VAR SalesHeader@1000 : Record 36;InteractionExist@1005 : Boolean);
    VAR
      SalesLine@1002 : Record 37;
      SalesHeaderArchive@1004 : Record 5107;
      SalesLineArchive@1001 : Record 5108;
      RecordLinkManagement@1003 : Codeunit 447;
    BEGIN
      SalesHeaderArchive.INIT;
      SalesHeaderArchive.TRANSFERFIELDS(SalesHeader);
      SalesHeaderArchive."Archived By" := USERID;
      SalesHeaderArchive."Date Archived" := WORKDATE;
      SalesHeaderArchive."Time Archived" := TIME;
      SalesHeaderArchive."Version No." := GetNextVersionNo(
          DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Doc. No. Occurrence");
      SalesHeaderArchive."Interaction Exist" := InteractionExist;
      RecordLinkManagement.CopyLinks(SalesHeader,SalesHeaderArchive);
      SalesHeaderArchive.INSERT;

      StoreSalesDocumentComments(
        SalesHeader."Document Type",SalesHeader."No.",
        SalesHeader."Doc. No. Occurrence",SalesHeaderArchive."Version No.");

      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      IF SalesLine.FINDSET THEN
        REPEAT
          WITH SalesLineArchive DO BEGIN
            INIT;
            TRANSFERFIELDS(SalesLine);
            "Doc. No. Occurrence" := SalesHeader."Doc. No. Occurrence";
            "Version No." := SalesHeaderArchive."Version No.";
            RecordLinkManagement.CopyLinks(SalesLine,SalesLineArchive);
            INSERT;
          END;
          IF SalesLine."Deferral Code" <> '' THEN
            StoreDeferrals(DeferralUtilities.GetSalesDeferralDocType,SalesLine."Document Type",
              SalesLine."Document No.",SalesLine."Line No.",SalesHeader."Doc. No. Occurrence",SalesHeaderArchive."Version No.");

        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE StorePurchDocument@12(VAR PurchHeader@1001 : Record 38;InteractionExist@1000 : Boolean);
    VAR
      PurchLine@1005 : Record 39;
      PurchHeaderArchive@1004 : Record 5109;
      PurchLineArchive@1003 : Record 5110;
      RecordLinkManagement@1002 : Codeunit 447;
    BEGIN
      PurchHeaderArchive.INIT;
      PurchHeaderArchive.TRANSFERFIELDS(PurchHeader);
      PurchHeaderArchive."Archived By" := USERID;
      PurchHeaderArchive."Date Archived" := WORKDATE;
      PurchHeaderArchive."Time Archived" := TIME;
      PurchHeaderArchive."Version No." := GetNextVersionNo(
          DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",PurchHeader."Doc. No. Occurrence");
      PurchHeaderArchive."Interaction Exist" := InteractionExist;
      RecordLinkManagement.CopyLinks(PurchHeader,PurchHeaderArchive);
      PurchHeaderArchive.INSERT;

      StorePurchDocumentComments(
        PurchHeader."Document Type",PurchHeader."No.",
        PurchHeader."Doc. No. Occurrence",PurchHeaderArchive."Version No.");

      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      IF PurchLine.FINDSET THEN
        REPEAT
          WITH PurchLineArchive DO BEGIN
            INIT;
            TRANSFERFIELDS(PurchLine);
            "Doc. No. Occurrence" := PurchHeader."Doc. No. Occurrence";
            "Version No." := PurchHeaderArchive."Version No.";
            RecordLinkManagement.CopyLinks(PurchLine,PurchLineArchive);
            INSERT;
          END;
          IF PurchLine."Deferral Code" <> '' THEN
            StoreDeferrals(DeferralUtilities.GetPurchDeferralDocType,PurchLine."Document Type",
              PurchLine."Document No.",PurchLine."Line No.",PurchHeader."Doc. No. Occurrence",PurchHeaderArchive."Version No.");
        UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE RestoreSalesDocument@7(VAR SalesHeaderArchive@1000 : Record 5107);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1004 : Record 37;
      SalesLineArchive@1003 : Record 5108;
      SalesShptHeader@1000000001 : Record 110;
      SalesInvHeader@1000000002 : Record 112;
      ReservEntry@1000000005 : Record 337;
      ItemChargeAssgntSales@1000000007 : Record 5809;
      RecordLinkManagement@1005 : Codeunit 447;
      ConfirmRequired@1000000006 : Boolean;
      RestoreDocument@1000000009 : Boolean;
      OldOpportunityNo@1015 : Code[20];
    BEGIN
      IF NOT SalesHeader.GET(SalesHeaderArchive."Document Type",SalesHeaderArchive."No.") THEN
        ERROR(Text009,SalesHeaderArchive."Document Type",SalesHeaderArchive."No.");
      SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Order THEN BEGIN
        SalesShptHeader.RESET;
        SalesShptHeader.SETCURRENTKEY("Order No.");
        SalesShptHeader.SETRANGE("Order No.",SalesHeader."No.");
        IF NOT SalesShptHeader.ISEMPTY THEN
          ERROR(Text005,SalesHeader."Document Type",SalesHeader."No.");
        SalesInvHeader.RESET;
        SalesInvHeader.SETCURRENTKEY("Order No.");
        SalesInvHeader.SETRANGE("Order No.",SalesHeader."No.");
        IF NOT SalesInvHeader.ISEMPTY THEN
          ERROR(Text005,SalesHeader."Document Type",SalesHeader."No.");
      END;

      ConfirmRequired := FALSE;
      ReservEntry.RESET;
      ReservEntry.SETCURRENTKEY(
        "Source ID",
        "Source Ref. No.",
        "Source Type",
        "Source Subtype");

      ReservEntry.SETRANGE("Source ID",SalesHeader."No.");
      ReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
      ReservEntry.SETRANGE("Source Subtype",SalesHeader."Document Type");
      IF ReservEntry.FINDFIRST THEN
        ConfirmRequired := TRUE;

      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type",SalesHeader."Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.",SalesHeader."No.");
      IF ItemChargeAssgntSales.FINDFIRST THEN
        ConfirmRequired := TRUE;

      RestoreDocument := FALSE;
      IF ConfirmRequired THEN BEGIN
        IF CONFIRM(
             Text006,FALSE,ReservEntry.TABLECAPTION,ItemChargeAssgntSales.TABLECAPTION,Text008)
        THEN
          RestoreDocument := TRUE;
      END ELSE
        IF CONFIRM(
             Text002,TRUE,SalesHeaderArchive."Document Type",
             SalesHeaderArchive."No.",SalesHeaderArchive."Version No.")
        THEN
          RestoreDocument := TRUE;
      IF RestoreDocument THEN BEGIN
        SalesHeader.TESTFIELD("Doc. No. Occurrence",SalesHeaderArchive."Doc. No. Occurrence");
        IF SalesHeader."Opportunity No." <> '' THEN BEGIN
          OldOpportunityNo := SalesHeader."Opportunity No.";
          SalesHeader."Opportunity No." := '';
        END;
        SalesHeader.DELETELINKS;
        SalesHeader.DELETE(TRUE);
        SalesHeader.INIT;

        SalesHeader.SetHideValidationDialog(TRUE);
        SalesHeader."Document Type" := SalesHeaderArchive."Document Type";
        SalesHeader."No." := SalesHeaderArchive."No.";
        SalesHeader.INSERT(TRUE);
        SalesHeader.TRANSFERFIELDS(SalesHeaderArchive);
        SalesHeader.Status := SalesHeader.Status::Open;

        IF SalesHeaderArchive."Sell-to Contact No." <> '' THEN
          SalesHeader.VALIDATE("Sell-to Contact No.",SalesHeaderArchive."Sell-to Contact No.")
        ELSE
          SalesHeader.VALIDATE("Sell-to Customer No.",SalesHeaderArchive."Sell-to Customer No.");
        IF SalesHeaderArchive."Bill-to Contact No." <> '' THEN
          SalesHeader.VALIDATE("Bill-to Contact No.",SalesHeaderArchive."Bill-to Contact No.")
        ELSE
          SalesHeader.VALIDATE("Bill-to Customer No.",SalesHeaderArchive."Bill-to Customer No.");
        SalesHeader.VALIDATE("Salesperson Code",SalesHeaderArchive."Salesperson Code");
        SalesHeader.VALIDATE("Payment Terms Code",SalesHeaderArchive."Payment Terms Code");
        SalesHeader.VALIDATE("Payment Discount %",SalesHeaderArchive."Payment Discount %");
        SalesHeader."Shortcut Dimension 1 Code" := SalesHeaderArchive."Shortcut Dimension 1 Code";
        SalesHeader."Shortcut Dimension 2 Code" := SalesHeaderArchive."Shortcut Dimension 2 Code";
        SalesHeader."Dimension Set ID" := SalesHeaderArchive."Dimension Set ID";
        RecordLinkManagement.CopyLinks(SalesHeaderArchive,SalesHeader);

        SalesHeader.LinkSalesDocWithOpportunity(OldOpportunityNo);

        SalesHeader.MODIFY(TRUE);
        RestoreSalesLineComments(SalesHeaderArchive,SalesHeader);

        SalesLineArchive.SETRANGE("Document Type",SalesHeaderArchive."Document Type");
        SalesLineArchive.SETRANGE("Document No.",SalesHeaderArchive."No.");
        SalesLineArchive.SETRANGE("Doc. No. Occurrence",SalesHeaderArchive."Doc. No. Occurrence");
        SalesLineArchive.SETRANGE("Version No.",SalesHeaderArchive."Version No.");
        IF SalesLineArchive.FINDSET THEN
          REPEAT
            WITH SalesLine DO BEGIN
              INIT;
              TRANSFERFIELDS(SalesLineArchive);
              INSERT(TRUE);
              IF Type <> Type::" " THEN BEGIN
                VALIDATE("No.");
                IF SalesLineArchive."Variant Code" <> '' THEN
                  VALIDATE("Variant Code",SalesLineArchive."Variant Code");
                IF SalesLineArchive."Unit of Measure Code" <> '' THEN
                  VALIDATE("Unit of Measure Code",SalesLineArchive."Unit of Measure Code");
                VALIDATE("Location Code",SalesLineArchive."Location Code");
                IF Quantity <> 0 THEN
                  VALIDATE(Quantity,SalesLineArchive.Quantity);
                VALIDATE("Unit Price",SalesLineArchive."Unit Price");
                VALIDATE("Line Discount %",SalesLineArchive."Line Discount %");
                IF SalesLineArchive."Inv. Discount Amount" <> 0 THEN
                  VALIDATE("Inv. Discount Amount",SalesLineArchive."Inv. Discount Amount");
                IF Amount <> SalesLineArchive.Amount THEN
                  VALIDATE(Amount,SalesLineArchive.Amount);
                VALIDATE(Description,SalesLineArchive.Description);
              END;
              "Shortcut Dimension 1 Code" := SalesLineArchive."Shortcut Dimension 1 Code";
              "Shortcut Dimension 2 Code" := SalesLineArchive."Shortcut Dimension 2 Code";
              "Dimension Set ID" := SalesLineArchive."Dimension Set ID";
              "Deferral Code" := SalesLineArchive."Deferral Code";
              RestoreDeferrals(DeferralUtilities.GetSalesDeferralDocType,
                SalesLineArchive."Document Type",
                SalesLineArchive."Document No.",
                SalesLineArchive."Line No.",
                SalesHeaderArchive."Doc. No. Occurrence",
                SalesHeaderArchive."Version No.");
              RecordLinkManagement.CopyLinks(SalesLineArchive,SalesLine);
              MODIFY(TRUE);
            END
          UNTIL SalesLineArchive.NEXT = 0;

        SalesHeader.Status := SalesHeader.Status::Released;
        ReleaseSalesDoc.Reopen(SalesHeader);
        MESSAGE(Text003,SalesHeader."Document Type",SalesHeader."No.");
      END;
    END;

    PROCEDURE GetNextOccurrenceNo@3(TableId@1003 : Integer;DocType@1001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1000 : Code[20]) : Integer;
    VAR
      SalesHeaderArchive@1002 : Record 5107;
      PurchHeaderArchive@1004 : Record 5109;
    BEGIN
      CASE TableId OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeaderArchive.LOCKTABLE;
            SalesHeaderArchive.SETRANGE("Document Type",DocType);
            SalesHeaderArchive.SETRANGE("No.",DocNo);
            IF SalesHeaderArchive.FINDLAST THEN
              EXIT(SalesHeaderArchive."Doc. No. Occurrence" + 1);

            EXIT(1);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeaderArchive.LOCKTABLE;
            PurchHeaderArchive.SETRANGE("Document Type",DocType);
            PurchHeaderArchive.SETRANGE("No.",DocNo);
            IF PurchHeaderArchive.FINDLAST THEN
              EXIT(PurchHeaderArchive."Doc. No. Occurrence" + 1);

            EXIT(1);
          END;
      END;
    END;

    PROCEDURE GetNextVersionNo@1(TableId@1004 : Integer;DocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1001 : Code[20];DocNoOccurrence@1003 : Integer) : Integer;
    VAR
      SalesHeaderArchive@1002 : Record 5107;
      PurchHeaderArchive@1005 : Record 5109;
    BEGIN
      CASE TableId OF
        DATABASE::"Sales Header":
          BEGIN
            SalesHeaderArchive.LOCKTABLE;
            SalesHeaderArchive.SETRANGE("Document Type",DocType);
            SalesHeaderArchive.SETRANGE("No.",DocNo);
            SalesHeaderArchive.SETRANGE("Doc. No. Occurrence",DocNoOccurrence);
            IF SalesHeaderArchive.FINDLAST THEN
              EXIT(SalesHeaderArchive."Version No." + 1);

            EXIT(1);
          END;
        DATABASE::"Purchase Header":
          BEGIN
            PurchHeaderArchive.LOCKTABLE;
            PurchHeaderArchive.SETRANGE("Document Type",DocType);
            PurchHeaderArchive.SETRANGE("No.",DocNo);
            PurchHeaderArchive.SETRANGE("Doc. No. Occurrence",DocNoOccurrence);
            IF PurchHeaderArchive.FINDLAST THEN
              EXIT(PurchHeaderArchive."Version No." + 1);

            EXIT(1);
          END;
      END;
    END;

    PROCEDURE SalesDocArchiveGranule@6() : Boolean;
    VAR
      SalesHeaderArchive@1000 : Record 5107;
    BEGIN
      EXIT(SalesHeaderArchive.WRITEPERMISSION);
    END;

    PROCEDURE PurchaseDocArchiveGranule@5() : Boolean;
    VAR
      PurchaseHeaderArchive@1000 : Record 5109;
    BEGIN
      EXIT(PurchaseHeaderArchive.WRITEPERMISSION);
    END;

    LOCAL PROCEDURE StoreSalesDocumentComments@8(DocType@1005 : Option;DocNo@1004 : Code[20];DocNoOccurrence@1002 : Integer;VersionNo@1001 : Integer);
    VAR
      SalesCommentLine@1008 : Record 44;
      SalesCommentLineArch@1007 : Record 5126;
    BEGIN
      SalesCommentLine.SETRANGE("Document Type",DocType);
      SalesCommentLine.SETRANGE("No.",DocNo);
      IF SalesCommentLine.FINDSET THEN
        REPEAT
          SalesCommentLineArch.INIT;
          SalesCommentLineArch.TRANSFERFIELDS(SalesCommentLine);
          SalesCommentLineArch."Doc. No. Occurrence" := DocNoOccurrence;
          SalesCommentLineArch."Version No." := VersionNo;
          SalesCommentLineArch.INSERT;
        UNTIL SalesCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE StorePurchDocumentComments@15(DocType@1005 : Option;DocNo@1004 : Code[20];DocNoOccurrence@1002 : Integer;VersionNo@1001 : Integer);
    VAR
      PurchCommentLine@1009 : Record 43;
      PurchCommentLineArch@1010 : Record 5125;
    BEGIN
      PurchCommentLine.SETRANGE("Document Type",DocType);
      PurchCommentLine.SETRANGE("No.",DocNo);
      IF PurchCommentLine.FINDSET THEN
        REPEAT
          PurchCommentLineArch.INIT;
          PurchCommentLineArch.TRANSFERFIELDS(PurchCommentLine);
          PurchCommentLineArch."Doc. No. Occurrence" := DocNoOccurrence;
          PurchCommentLineArch."Version No." := VersionNo;
          PurchCommentLineArch.INSERT;
        UNTIL PurchCommentLine.NEXT = 0;
    END;

    PROCEDURE ArchSalesDocumentNoConfirm@13(VAR SalesHeader@1004 : Record 36);
    BEGIN
      StoreSalesDocument(SalesHeader,FALSE);
    END;

    PROCEDURE ArchPurchDocumentNoConfirm@9(VAR PurchHeader@1000 : Record 38);
    BEGIN
      StorePurchDocument(PurchHeader,FALSE);
    END;

    LOCAL PROCEDURE StoreDeferrals@11(DeferralDocType@1004 : Integer;DocType@1003 : Integer;DocNo@1002 : Code[20];LineNo@1009 : Integer;DocNoOccurrence@1001 : Integer;VersionNo@1000 : Integer);
    VAR
      DeferralHeaderArchive@1005 : Record 5127;
      DeferralLineArchive@1006 : Record 5128;
      DeferralHeader@1007 : Record 1701;
      DeferralLine@1008 : Record 1702;
    BEGIN
      IF DeferralHeader.GET(DeferralDocType,'','',DocType,DocNo,LineNo) THEN BEGIN
        DeferralHeaderArchive.INIT;
        DeferralHeaderArchive.TRANSFERFIELDS(DeferralHeader);
        DeferralHeaderArchive."Doc. No. Occurrence" := DocNoOccurrence;
        DeferralHeaderArchive."Version No." := VersionNo;
        DeferralHeaderArchive.INSERT;

        DeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType);
        DeferralLine.SETRANGE("Gen. Jnl. Template Name",'');
        DeferralLine.SETRANGE("Gen. Jnl. Batch Name",'');
        DeferralLine.SETRANGE("Document Type",DocType);
        DeferralLine.SETRANGE("Document No.",DocNo);
        DeferralLine.SETRANGE("Line No.",LineNo);
        IF DeferralLine.FINDSET THEN
          REPEAT
            DeferralLineArchive.INIT;
            DeferralLineArchive.TRANSFERFIELDS(DeferralLine);
            DeferralLineArchive."Doc. No. Occurrence" := DocNoOccurrence;
            DeferralLineArchive."Version No." := VersionNo;
            DeferralLineArchive.INSERT;
          UNTIL DeferralLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RestoreDeferrals@16(DeferralDocType@1005 : Integer;DocType@1004 : Integer;DocNo@1003 : Code[20];LineNo@1002 : Integer;DocNoOccurrence@1001 : Integer;VersionNo@1000 : Integer);
    VAR
      DeferralHeaderArchive@1009 : Record 5127;
      DeferralLineArchive@1008 : Record 5128;
      DeferralHeader@1007 : Record 1701;
      DeferralLine@1006 : Record 1702;
    BEGIN
      IF DeferralHeaderArchive.GET(DeferralDocType,DocType,DocNo,DocNoOccurrence,VersionNo,LineNo) THEN BEGIN
        // Updates the header if is exists already and removes all the lines
        DeferralUtilities.SetDeferralRecords(DeferralHeader,
          DeferralDocType,'','',
          DocType,DocNo,LineNo,
          DeferralHeaderArchive."Calc. Method",
          DeferralHeaderArchive."No. of Periods",
          DeferralHeaderArchive."Amount to Defer",
          DeferralHeaderArchive."Start Date",
          DeferralHeaderArchive."Deferral Code",
          DeferralHeaderArchive."Schedule Description",
          DeferralHeaderArchive."Initial Amount to Defer",
          TRUE,
          DeferralHeaderArchive."Currency Code");

        // Add lines as exist in the archives
        DeferralLineArchive.SETRANGE("Deferral Doc. Type",DeferralDocType);
        DeferralLineArchive.SETRANGE("Document Type",DocType);
        DeferralLineArchive.SETRANGE("Document No.",DocNo);
        DeferralLineArchive.SETRANGE("Doc. No. Occurrence",DocNoOccurrence);
        DeferralLineArchive.SETRANGE("Version No.",VersionNo);
        DeferralLineArchive.SETRANGE("Line No.",LineNo);
        IF DeferralLineArchive.FINDSET THEN
          REPEAT
            DeferralLine.INIT;
            DeferralLine.TRANSFERFIELDS(DeferralLineArchive);
            DeferralLine.INSERT;
          UNTIL DeferralLineArchive.NEXT = 0;
      END ELSE
        // Removes any lines that may have been defaulted
        DeferralUtilities.RemoveOrSetDeferralSchedule('',DeferralDocType,'','',DocType,DocNo,LineNo,0,0D,'','',TRUE);
    END;

    LOCAL PROCEDURE RestoreSalesLineComments@14(SalesHeaderArchive@1000 : Record 5107;SalesHeader@1003 : Record 36);
    VAR
      SalesCommentLineArchive@1001 : Record 5126;
      SalesCommentLine@1002 : Record 44;
      NextLine@1004 : Integer;
    BEGIN
      SalesCommentLineArchive.SETRANGE("Document Type",SalesHeaderArchive."Document Type");
      SalesCommentLineArchive.SETRANGE("No.",SalesHeaderArchive."No.");
      SalesCommentLineArchive.SETRANGE("Doc. No. Occurrence",SalesHeaderArchive."Doc. No. Occurrence");
      SalesCommentLineArchive.SETRANGE("Version No.",SalesHeaderArchive."Version No.");
      IF SalesCommentLineArchive.FINDSET THEN
        REPEAT
          SalesCommentLine.INIT;
          SalesCommentLine.TRANSFERFIELDS(SalesCommentLineArchive);
          SalesCommentLine.INSERT;
        UNTIL SalesCommentLineArchive.NEXT = 0;

      SalesCommentLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesCommentLine.SETRANGE("No.",SalesHeader."No.");
      SalesCommentLine.SETRANGE("Document Line No.",0);
      IF SalesCommentLine.FINDLAST THEN
        NextLine := SalesCommentLine."Line No.";
      NextLine += 10000;
      SalesCommentLine.INIT;
      SalesCommentLine."Document Type" := SalesHeader."Document Type";
      SalesCommentLine."No." := SalesHeader."No.";
      SalesCommentLine."Document Line No." := 0;
      SalesCommentLine."Line No." := NextLine;
      SalesCommentLine.Date := WORKDATE;
      SalesCommentLine.Comment := STRSUBSTNO(Text004,FORMAT(SalesHeaderArchive."Version No."));
      SalesCommentLine.INSERT;
    END;

    BEGIN
    END.
  }
}

