OBJECT Report 9062328 Add Windows User
{
  OBJECT-PROPERTIES
  {
    Date=10/09/15;
    Time=[ 2:23:23 PM];
    Version List=NA2016.10;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Add Windows User;
               ENG=Add Windows User];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   Ok := FALSE;
                   NablementUserManagement.DefaultRelationshipsOnOff(TRUE, TRUE, Relationships);
                   OpenUserCardAfter := TRUE;
                   UpdateShortCodeText();
                   UpdateNavUser();
                 END;

    OnPreReport=BEGIN
                  Ok := TRUE;
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               UpdateShortCodeText();
               UpdateNavUser();
             END;

    }
    CONTROLS
    {
      { 1000000000;;Container;
                  ContainerType=ContentArea }

      { 1000000010;1;Group  ;
                  Name=GeneralGroup;
                  CaptionML=[ENU=General;
                             ENG=General];
                  GroupType=Group }

      { 1000000001;2;Field  ;
                  Name=WindowsUserNameField;
                  CaptionML=[ENU=Windows User Name;
                             ENG=Windows User Name];
                  SourceExpr=WindowsUserName;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 WindowsUserNameAssistEdit();
                               END;
                                }

      { 1000000015;2;Group  ;
                  Name=ShortCodeGroup;
                  CaptionML=[ENU=Short Code;
                             ENG=Short Code];
                  GroupType=Group }

      { 1000000012;3;Field  ;
                  Name=ShortCodeTextField;
                  CaptionML=[ENU=Short Code Text;
                             ENG=Short Code Text];
                  SourceExpr=ShortCodeText;
                  Enabled=ShortCodeNotUnique;
                  Editable=FALSE;
                  OnDrillDown=BEGIN
                                ShortCode := NablementUserManagement.ShortCodeToUniqueShortCode(ShortCode, '', TRUE);
                              END;

                  ShowCaption=No }

      { 1000000011;3;Field  ;
                  Name=ShortCodeField;
                  CaptionML=[ENU=Short Code;
                             ENG=Short Code];
                  SourceExpr=ShortCode;
                  OnValidate=BEGIN
                               ShortCodeValidate();
                             END;
                              }

      { 1000000016;2;Group  ;
                  Name=NavUserGroup;
                  CaptionML=ENU=NAV User;
                  GroupType=Group }

      { 1000000013;3;Field  ;
                  Name=NavUserTextField;
                  CaptionML=[ENU=NAV User Text;
                             ENG=NAV User Text];
                  SourceExpr=NavUserText;
                  Enabled=FALSE;
                  Editable=FALSE;
                  OnDrillDown=BEGIN
                                ;
                              END;

                  ShowCaption=No }

      { 1000000014;3;Field  ;
                  Name=CreateNavUserField;
                  CaptionML=[ENU=Create NAV User;
                             ENG=Create NAV User];
                  SourceExpr=Relationships[NablementUser.Relationship::User];
                  Enabled=CreateNavUserEnabled }

      { 1000000007;1;Group  ;
                  Name=RelationshipsCreationGroup;
                  CaptionML=[ENU=Relationships Creation;
                             ENG=Relationships Creation];
                  GroupType=Group }

      { 1000000003;2;Field  ;
                  Name=CreateContactField;
                  CaptionML=ENU=Create Contact;
                  SourceExpr=Relationships[NablementUser.Relationship::Contact] }

      { 1000000002;2;Field  ;
                  Name=CreateSalespersonPurchaserField;
                  CaptionML=ENU=Create Salesperson/Purchaser;
                  SourceExpr=Relationships[NablementUser.Relationship::"Salesperson/Purchaser"] }

      { 1000000004;2;Field  ;
                  Name=CreateVendorField;
                  CaptionML=ENU=Create Vendor;
                  SourceExpr=Relationships[NablementUser.Relationship::Vendor] }

      { 1000000005;2;Field  ;
                  Name=CreateResource;
                  CaptionML=ENU=Create Resource;
                  SourceExpr=Relationships[NablementUser.Relationship::Resource] }

      { 1000000006;2;Field  ;
                  Name=CreateEmployee;
                  CaptionML=ENU=Create Employee;
                  SourceExpr=Relationships[NablementUser.Relationship::Employee] }

      { 1000000008;2;Field  ;
                  Name=CreateAllField;
                  CaptionML=[ENU=Create All;
                             ENG=Create All];
                  SourceExpr=tCreateAll;
                  Editable=FALSE;
                  OnDrillDown=BEGIN
                                CreateAllNone(TRUE);
                              END;

                  ShowCaption=No }

      { 1000000009;2;Field  ;
                  Name=CreateNoneField;
                  CaptionML=[ENU=Create None;
                             ENG=Create None];
                  SourceExpr=tCreateNone;
                  Editable=FALSE;
                  OnDrillDown=BEGIN
                                CreateAllNone(FALSE);
                              END;

                  ShowCaption=No }

      { 1000000017;1;Group  ;
                  Name=OptionsGroup;
                  CaptionML=[ENU=Options;
                             ENG=Options];
                  GroupType=Group }

      { 1000000018;2;Field  ;
                  Name=OpenUserCardAfterField;
                  CaptionML=[ENU=Open User Card After;
                             ENG=Open User Card After];
                  SourceExpr=OpenUserCardAfter }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      NablementUser@1000000004 : Record 9062729;
      User@1000000019 : Record 2000000120;
      NablementUserManagement@1000000012 : Codeunit 9062255;
      Ok@1000000000 : Boolean;
      WindowsSecurityId@1000000001 : Text;
      WindowsUserName@1000000002 : Text;
      ShortCode@1000000010 : Code[10];
      ShortCodeNotUnique@1000000013 : Boolean INDATASET;
      ShortCodeText@1000000014 : Text;
      CreateNavUserEnabled@1000000024 : Boolean INDATASET;
      NavUserExists@1000000018 : Boolean;
      NavUserText@1000000020 : Text;
      Relationships@1000000003 : ARRAY [20] OF Boolean;
      tCreateAll@1000000008 : TextConst 'ENU=Create All;ENG=Create All';
      tCreateNone@1000000009 : TextConst 'ENU=Create None;ENG=Create None';
      tPleaseEnterShortCode@1000000015 : TextConst 'ENU=Please enter the Short Code.;ENG=Please enter the Short Code.';
      tMakeShortCodeUnique@1000000011 : TextConst 'ENU=Make the Short Code unique;ENG=Make the Short Code unique';
      tShortCodeIsUnique@1000000016 : TextConst 'ENU=The Short Code is unique.;ENG=The Short Code is unique.';
      tPleaseSelectUser@1000000023 : TextConst 'ENU=Please select the user.;ENG=Please select the user.';
      tNavUserExistsAlready@1000000021 : TextConst 'ENU=NAV user exists already.;ENG=NAV user exists already.';
      tNavUserDoesntExist@1000000022 : TextConst 'ENU=NAV user doesn''t exist.;ENG=NAV user doesn''t exist.';
      OpenUserCardAfter@1000000005 : Boolean;

    PROCEDURE GetOk@1000000000() : Boolean;
    BEGIN
      EXIT(Ok);
    END;

    PROCEDURE GetWindowsSecurityId@1000000004() : Text;
    BEGIN
      EXIT(WindowsSecurityId);
    END;

    PROCEDURE GetWindowsUserName@1000000001() : Text;
    BEGIN
      EXIT(WindowsUserName);
    END;

    PROCEDURE GetShortCode@1000000002() : Code[10];
    BEGIN
      EXIT(ShortCode);
    END;

    PROCEDURE GetRelationships@1000000003(VAR pRelationships@1000000000 : ARRAY [20] OF Boolean) : Boolean;
    BEGIN
      COPYARRAY(pRelationships, Relationships, 1);
    END;

    PROCEDURE GetOpenUserCardAfter@1000000007() : Boolean;
    BEGIN
      EXIT(OpenUserCardAfter);
    END;

    LOCAL PROCEDURE WindowsUserNameAssistEdit@1000000023();
    VAR
      lDsObjectPickerWrapper@1000000006 : DotNet "'Microsoft.Dynamics.Nav.Management.DSObjectPickerWrapper, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Management.DSObjectPicker.DSObjectPickerWrapper" RUNONCLIENT;
      lIdentityManagement@1000000005 : Codeunit 9801;
      lUserId@1000000000 : Code[50];
    BEGIN
      lDsObjectPickerWrapper := lDsObjectPickerWrapper.DSObjectPickerWrapper();
      WindowsSecurityId := lDsObjectPickerWrapper.InvokeDialogAndReturnSid();
      IF (WindowsSecurityId <> '') THEN
        WindowsUserName := lIdentityManagement.UserName(WindowsSecurityId)
      ELSE
        WindowsUserName := '';
      lUserId := NablementUserManagement.WindowsUserNameToUserId(WindowsUserName);
      ShortCode := NablementUserManagement.UserIdToShortCode(lUserId);

      ShortCodeValidate();
      UpdateNavUser();
    END;

    LOCAL PROCEDURE ShortCodeValidate@1000000005();
    BEGIN
      ShortCodeNotUnique := ((ShortCode <> '') AND ( NOT (NablementUserManagement.ShortCodeIsUnique(ShortCode, ''))));
      UpdateShortCodeText();
    END;

    LOCAL PROCEDURE CreateAllNone@1000000011(pCreate@1000000000 : Boolean);
    BEGIN
      RequestOptionsPage.UPDATE(TRUE);
      NablementUserManagement.AllRelationshipsOnOff(pCreate, FALSE, Relationships);
      RequestOptionsPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE UpdateShortCodeText@1000000006();
    BEGIN
      IF (ShortCode = '') THEN
        ShortCodeText := tPleaseEnterShortCode
      ELSE IF (ShortCodeNotUnique) THEN
        ShortCodeText := tMakeShortCodeUnique
      ELSE
        ShortCodeText := tShortCodeIsUnique;
    END;

    LOCAL PROCEDURE UpdateNavUser@1000000012();
    BEGIN
      IF (WindowsUserName <> '') THEN
      BEGIN
        User.RESET();
        User.SETCURRENTKEY("User Name");
        User.SETRANGE("User Name", WindowsUserName);
        NavUserExists := ( NOT (User.ISEMPTY()));
        IF (NavUserExists) THEN
          NavUserText := tNavUserExistsAlready
        ELSE
          NavUserText := tNavUserDoesntExist;
        CreateNavUserEnabled := ( NOT (NavUserExists));
      END
      ELSE
      BEGIN
        NavUserExists := FALSE;
        NavUserText := tPleaseSelectUser;
        CreateNavUserEnabled := FALSE;
      END;
      Relationships[NablementUser.Relationship::User] := CreateNavUserEnabled;
    END;

    BEGIN
    {
      //DOC NA2016.10 JH 08/09/2015 - Created
    }
    END.
  }
  RDLDATA
  {
  }
}

