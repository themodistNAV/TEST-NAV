OBJECT Codeunit 9062231 Smart Filter Management
{
  OBJECT-PROPERTIES
  {
    Date=14/07/16;
    Time=12:34:49 PM;
    Version List=NA2016.16;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
            Test();
          END;

  }
  CODE
  {
    VAR
      Date@1000000009 : Record 2000000007;
      EnablementUser@1000000006 : Record 9062729;
      SmartFilter@1000000000 : TEMPORARY Record 9062233;
      AccountingPeriodToolkit@1000000022 : Codeunit 9062297;
      BlobToolkit@1000000020 : Codeunit 9062242;
      DateTime@1000000025 : Codeunit 9062252;
      PeriodFormManagement@1000000005 : Codeunit 359;
      RecordRefManagement@1000000050 : Codeunit 9062241;
      String@1000000021 : Codeunit 9062236;
      TnpToolkit@1000000002 : Codeunit 9062230;
      Filter@1000000004 : Text;
      Initialised@1000000001 : Boolean;
      InFilterPosition@1000000003 : Integer;
      tThis@1000000016 : TextConst 'ENU=THIS;ENG=THIS';
      tLast@1000000015 : TextConst 'ENU=LAST;ENG=LAST';
      tNext@1000000014 : TextConst 'ENU=NEXT;ENG=NEXT';
      tStart@1000000018 : TextConst 'ENU=START;ENG=START';
      tEnd@1000000019 : TextConst 'ENU=END;ENG=END';
      tWeek@1000000010 : TextConst 'ENU=WEEK;ENG=WEEK';
      tMonth@1000000011 : TextConst 'ENU=MONTH;ENG=MONTH';
      tQuarter@1000000012 : TextConst 'ENU=QUARTER;ENG=QUARTER';
      tYear@1000000013 : TextConst 'ENU=YEAR;ENG=YEAR';
      tPeriod@1000000017 : TextConst 'ENU=PERIOD;ENG=PERIOD';
      tHourUnit@1000000007 : TextConst 'ENU=H;ENG=H';
      tMinuteUnit@1000000008 : TextConst 'ENU=M;ENG=M';
      tSecondUnit@1000000023 : TextConst 'ENU=S;ENG=S';
      tCurrentTime@1000000024 : TextConst 'ENU=C;ENG=C';
      tToday@1000000039 : TextConst 'ENU=TODAY;ENG=TODAY';
      tWorkdate@1000000036 : TextConst 'ENU=WORKDATE;ENG=WORKDATE';
      tCalcDate@1000000033 : TextConst 'ENU=CALCDATE;ENG=CALCDATE';
      tCalcTime@1000000029 : TextConst 'ENU=CALCTIME;ENG=CALCTIME';
      tMyUserId@1000000027 : TextConst 'ENU=MYUSESRID;ENG=MYUSESRID';
      tMyUser@1000000026 : TextConst 'ENU=MYUSER;ENG=MYUSER';
      tMyContactNo@1000000048 : TextConst 'ENU=MYCONTACTNO;ENG=MYCONTACTNO';
      tMyContact@1000000047 : TextConst 'ENU=MYCONTACT;ENG=MYCONTACT';
      tMySalespersonCode@1000000046 : TextConst 'ENU=MYSALESPERSONCODE;ENG=MYSALESPERSONCODE';
      tMySalesperson@1000000045 : TextConst 'ENU=MYSALESPERSON;ENG=MYSALESPERSON';
      tMyVendorNo@1000000044 : TextConst 'ENU=MYVENDORNO;ENG=MYVENDORNO';
      tMyVendor@1000000043 : TextConst 'ENU=MYVENDOR;ENG=MYVENDOR';
      tMyResourceNo@1000000042 : TextConst 'ENU=MYRESOURCENO;ENG=MYRESOURCENO';
      tMyResource@1000000041 : TextConst 'ENU=MYRESOURCE;ENG=MYRESOURCE';
      tMyEmployeeNo@1000000040 : TextConst 'ENU=MYEMPLOYEENO;ENG=MYEMPLOYEENO';
      tMyEmployee@1000000038 : TextConst 'ENU=MYEMPLOYEE;ENG=MYEMPLOYEE';
      tMyTeam@1000000037 : TextConst 'ENU=MYTEAM;ENG=MYTEAM';
      tMyLocationCode@1000000035 : TextConst 'ENU=MYLOCATIONCODE;ENG=MYLOCATIONCODE';
      tMyLocation@1000000034 : TextConst 'ENU=MYLOCATION;ENG=MYLOCATION';
      tMyName@1000000032 : TextConst 'ENU=MYNAME;ENG=MYNAME';
      tMyEMail@1000000031 : TextConst 'ENU=MYEMAIL;ENG=MYEMAIL';
      tMyShortCode@1000000030 : TextConst 'ENU=MYSHORTCODE;ENG=MYSHORTCODE';
      tUser@1000000028 : TextConst 'ENU=USER;ENG=USER';
      tCurrentDateTime@1000000049 : TextConst 'ENU=CURRENTDATETIME;ENG=CURRENTDATETIME';

    LOCAL PROCEDURE "--- General ---"@1000000001();
    BEGIN
    END;

    PROCEDURE ApplySmartFilters@1000000000(pFilter@1000000000 : Text) : Text;
    VAR
      lApplying@1000000001 : Boolean;
      lApplied@1000000002 : Boolean;
      lRegexMatch@1000000003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";
    BEGIN
      //DOC NA2016.12 - Applying smart filters to given filter
      //  -> pFilter: The filter
      //  <- Amended filter

      Filter := pFilter;

      Initialise();

      lApplying := TRUE;
      WHILE (lApplying) DO
      BEGIN
        lApplied := FALSE;
        IF (SmartFilter.FINDSET()) THEN
        REPEAT
          IF (SmartFilterMatches(lRegexMatch)) THEN
            IF (SmartFilter."Use Regular Expressions") THEN
              ApplyRegExSmartFilter(lRegexMatch, lApplied)
            ELSE
              ApplySmartFilter(lApplied);
        UNTIL (SmartFilter.NEXT() = 0);
        lApplying := lApplied;
      END;

      EXIT(Filter);
    END;

    PROCEDURE SmartFilterLookup@1000000010(VAR pSyntax@1000000000 : Text) : Boolean;
    VAR
      lResult@1000000001 : Boolean;
    BEGIN
      //DOC NA2016.12 - Performing smart filter lookup
      //  <> pSyntax: Target syntax for smart filter selected
      //  <- Lookup result

      lResult := FALSE;

      Initialise();

      SmartFilter.RESET();
      SmartFilter.SETRANGE(Syntax, pSyntax);
      IF (SmartFilter.FINDFIRST()) THEN;
      SmartFilter.SETRANGE(Syntax);
      IF (PAGE.RUNMODAL(0, SmartFilter) = ACTION::LookupOK) THEN
      BEGIN
        pSyntax := SmartFilter.Syntax;
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Initialisation ---"@1000000014();
    BEGIN
    END;

    LOCAL PROCEDURE Initialise@1000000005();
    VAR
      lCalendarSource@1000000022 : ' ,System,AccPeriod';
    BEGIN
      //DOC NA2016.12 - Initialising the codeunit

      IF (Initialised) THEN
        EXIT;

      InitialiseDatesAndTimes();
      InitialisePeriods();
      InitialisePeriodBounds();
      InitialiseAccountingPeriods();
      InitialiseAccountingPeriodBounds();
      InitialiseMy();

      SmartFilter.RESET();
      IF (SmartFilter.FINDFIRST()) THEN;

      lCalendarSource := lCalendarSource::AccPeriod;
      PeriodFormManagement.SetCalendarSource(lCalendarSource);

      Initialised := TRUE;
    END;

    LOCAL PROCEDURE InitialiseDatesAndTimes@1000000016();
    VAR
      eTodayDescription@1000000009 : TextConst 'ENU=Today date;ENG=Today date';
      eTodayHelp@1000000008 : TextConst 'ENU=Returns the current date of your system.;ENG=Returns the current date of your system.';
      eWorkdateDescription@1000000007 : TextConst 'ENU=The current system workdate;ENG=The current system workdate';
      eWorkdateHelp@1000000006 : TextConst 'ENU=Returns the date set as current one in Dynamics NAV (workdate).;ENG=Returns the date set as current one in Dynamics NAV (workdate).';
      eCalcDateDescription@1000000002 : TextConst 'ENU=Calculated date;ENG=Calculated date';
      eCalcDateSyntax@1000000001 : TextConst 'ENU=CALCATE(Formula,Date);ENG=CALCATE(Formula,Date)';
      eCalcDateHelp@1000000000 : TextConst 'ENU=Calculates date using formula and base date: CALCDATE(Formula, Base_Date).|As the formula you can use any NAV-specific date formula (for instance: +1M, -3W, -CY).|As the base date - a fixed date or one of smart filters.;ENG=Calculates date using formula and base date: CALCDATE(Formula, Base_Date).|As the formula you can use any NAV-specific date formula (for instance: +1M, -3W, -CY).|As the base date - a fixed date or one of smart filters.';
      eCalcTimeDescription@1000000005 : TextConst 'ENU=Calculated time;ENG=Calculated time';
      eCalcTimeSyntax@1000000004 : TextConst 'ENU=CALCTIME(Formula);ENG=CALCTIME(Formula)';
      eCalcTimeHelp@1000000003 : TextConst 'ENU=Calculates time using formula and current time: CALCTIME(Formula).|As the formula you can use any NAV-specific time formula (for instance: +1H, -5M).;ENG=Calculates time using formula and current time: CALCTIME(Formula).|As the formula you can use any NAV-specific time formula (for instance: +1H, -5M).';
      eCurrentDateTimeDescription@1000000010 : TextConst 'ENU=Current Date and Time;ENG=Current Date and Time';
      eCurrentDateTimeHelp@1000000011 : TextConst 'ENU=Returns the current date and time of your system;ENG=Returns the current date and time of your system';
    BEGIN
      //DOC NA2016.12 - Initialising dates and times

      SmartFilter.SetCurrentCategory(SmartFilter.Category::"Dates and Times");

      SmartFilter.Add(tToday, eTodayDescription, eTodayHelp);
      SmartFilter.Add(tWorkdate, eWorkdateDescription, eWorkdateHelp);
      SmartFilter.AddRegEx(tCalcDate, eCalcDateDescription, tCalcDate + '\((.+?)\)', eCalcDateSyntax, eCalcDateHelp);
      SmartFilter.AddRegEx(tCalcTime, eCalcTimeDescription, tCalcTime + '\((.+?)\)', eCalcTimeSyntax, eCalcTimeHelp);
      SmartFilter.Add(tCurrentDateTime, eCurrentDateTimeDescription, eCurrentDateTimeHelp); //DOC NA2016.16 PC 07/07/2016
    END;

    LOCAL PROCEDURE InitialisePeriods@1000000015();
    VAR
      lPeriods@1000000018 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      eDateRangeCode@1000000016 : TextConst 'ENU=%2%1;ENG=%2%1';
      eDateRangeDescription@1000000010 : TextConst 'ENU=Date range of %2 %1;ENG=Date range of %2 %1';
      eDateRangeHelp@1000000009 : TextConst 'ENU=Returns date range representing %2 %1. The calculation is based on the current workdate.;ENG=Returns date range representing %2 %1. The calculation is based on the current workdate.';
      eDateBoundCode@1000000017 : TextConst 'ENU=%1%2;ENG=%1%2';
      eDateBoundDescription@1000000012 : TextConst 'ENU=Date of %1 %2;ENG=Date of %1 %2';
      eDateBoundHelp@1000000011 : TextConst 'ENU=Returns %2 date of the %1. The calculation is based on the current workdate.;ENG=Returns %2 date of the %1. The calculation is based on the current workdate.';
    BEGIN
      //DOC NA2016.12 - Initialising periods

      SmartFilter.SetCurrentCategory(SmartFilter.Category::Periods);
      CreatePeriodsArray(lPeriods);
      InitialisePeriodsInternal(lPeriods);
    END;

    LOCAL PROCEDURE InitialisePeriodBounds@1000000021();
    VAR
      lPeriods@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      eDateRangeCode@1000000016 : TextConst 'ENU=%2%1;ENG=%2%1';
      eDateRangeDescription@1000000010 : TextConst 'ENU=Date range of %2 %1;ENG=Date range of %2 %1';
      eDateRangeHelp@1000000009 : TextConst 'ENU=Returns date range representing %2 %1. The calculation is based on the current workdate.;ENG=Returns date range representing %2 %1. The calculation is based on the current workdate.';
      eDateBoundCode@1000000017 : TextConst 'ENU=%1%2;ENG=%1%2';
      eDateBoundDescription@1000000012 : TextConst 'ENU=Date of %1 %2;ENG=Date of %1 %2';
      eDateBoundHelp@1000000011 : TextConst 'ENU=Returns %2 date of the %1. The calculation is based on the current workdate.;ENG=Returns %2 date of the %1. The calculation is based on the current workdate.';
    BEGIN
      //DOC NA2016.12 - Initialising period bounds

      SmartFilter.SetCurrentCategory(SmartFilter.Category::"Period Bounds");
      CreatePeriodsArray(lPeriods);
      InitialisePeriodBoundsInternal(lPeriods);
    END;

    LOCAL PROCEDURE InitialiseAccountingPeriods@1000000026();
    VAR
      lPeriods@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      ePeriodDescription@1000000002 : TextConst 'ENU=Specified period dates range;ENG=Specified period dates range';
      ePeriodSyntax@1000000004 : TextConst 'ENU=Period(+/-Number);ENG=Period(+/-Number)';
      ePeriodHelp@1000000001 : TextConst 'ENU=There are 3 varieties of the smart filter:|  1) PERIOD(Number) returns dates representing Number-th period in the current year,|  2) PERIOD(+Number) returns dates representing Number-th next period in the current year|  3) PERIOD(-Number) returns dates representing Number-th previous period in the current year.;ENG=There are 3 varieties of the smart filter:|  1) PERIOD(Number) returns dates representing Number-th period in the current year,|  2) PERIOD(+Number) returns dates representing Number-th next period in the current year|  3) PERIOD(-Number) returns dates representing Number-th previous period in the current year.';
      ePeriod@1000000003 : TextConst 'ENU=PERIOD;ENG=PERIOD';
    BEGIN
      //DOC NA2016.12 - Initialising accounting periods

      SmartFilter.SetCurrentCategory(SmartFilter.Category::"Accounting Periods");
      CreateAccountingPeriodsArray(lPeriods);
      InitialisePeriodsInternal(lPeriods);

      SmartFilter.AddRegEx(ePeriod, ePeriodDescription, ePeriod + '\(([-+]?)(\d+)\)', ePeriodSyntax, ePeriodHelp);
    END;

    LOCAL PROCEDURE InitialiseAccountingPeriodBounds@1000000006();
    VAR
      lPeriods@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
    BEGIN
      //DOC NA2016.12 - Initialising accounting period bounds

      SmartFilter.SetCurrentCategory(SmartFilter.Category::"Accounting Period Bounds");
      CreateAccountingPeriodsArray(lPeriods);
      InitialisePeriodBoundsInternal(lPeriods);
    END;

    LOCAL PROCEDURE InitialiseMy@1000000035();
    VAR
      eMyUserIdDescription@1000000006 : TextConst 'ENU=Your user identifier;ENG=Your user identifier';
      eMyUserIdHelp@1000000000 : TextConst 'ENU=Returns your user identifier (including domain name).|Your current user ID is: %1.;ENG=Returns your user identifier (including domain name).|Your current user ID is: %1.';
      eUserDescription@1000000002 : TextConst 'ENU="""%1"" field value";ENG="""%1"" field value"';
      eUserSyntax@1000000023 : TextConst 'ENU=USER.[Field_Name];ENG=USER.[Field_Name]';
      eUserHelp@1000000001 : TextConst 'ENU=Returns any field from "%1" table for your user ID.|You specify this filter typing USER.[Field_Name].;ENG=Returns any field from "%1" table for your user ID.|You specify this filter typing USER.[Field_Name].';
    BEGIN
      //DOC NA2016.12 - Initialising "My"s

      SmartFilter.SetCurrentCategory(SmartFilter.Category::My);

      SmartFilter.Add(tMyUserId, eMyUserIdDescription, STRSUBSTNO(eMyUserIdHelp, USERID()));
      SmartFilter.Add(tMyUser, eMyUserIdDescription, STRSUBSTNO(eMyUserIdHelp, USERID()));

      InitialiseMyInternal(tMyContactNo, EnablementUser.FIELDNO("Contact No."));
      InitialiseMyInternal(tMyContact, EnablementUser.FIELDNO("Contact No."));
      InitialiseMyInternal(tMySalespersonCode, EnablementUser.FIELDNO("Salesperson/Purchaser Code"));
      InitialiseMyInternal(tMySalesperson, EnablementUser.FIELDNO("Salesperson/Purchaser Code"));
      InitialiseMyInternal(tMyVendorNo, EnablementUser.FIELDNO("Vendor No."));
      InitialiseMyInternal(tMyVendor, EnablementUser.FIELDNO("Vendor No."));
      InitialiseMyInternal(tMyResourceNo, EnablementUser.FIELDNO("Resource No."));
      InitialiseMyInternal(tMyResource, EnablementUser.FIELDNO("Resource No."));
      InitialiseMyInternal(tMyEmployeeNo, EnablementUser.FIELDNO("Employee No."));
      InitialiseMyInternal(tMyEmployee, EnablementUser.FIELDNO("Employee No."));
      InitialiseMyInternal(tMyTeam, EnablementUser.FIELDNO("Team Filter"));
      InitialiseMyInternal(tMyLocationCode, EnablementUser.FIELDNO("Location Code"));
      InitialiseMyInternal(tMyLocation, EnablementUser.FIELDNO("Location Code"));
      InitialiseMyInternal(tMyName, EnablementUser.FIELDNO(Name));
      InitialiseMyInternal(tMyEMail, EnablementUser.FIELDNO("E-Mail"));
      InitialiseMyInternal(tMyShortCode, EnablementUser.FIELDNO("Short Code"));

      SmartFilter.AddRegEx(tUser, STRSUBSTNO(eUserDescription, EnablementUser.TABLECAPTION()), tUser + '\.\[(.+)\]', eUserSyntax,
        STRSUBSTNO(eUserHelp, EnablementUser.TABLECAPTION()));
    END;

    LOCAL PROCEDURE "--- Initialisation (Internal) ---"@1000000022();
    BEGIN
    END;

    LOCAL PROCEDURE InitialisePeriodsInternal@1000000020(pPeriods@1000000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1");
    VAR
      lPeriod@1000000013 : Text;
      lPeriodRanges@1000000020 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      lPeriodRange@1000000019 : Text;
      ePeriodRangeCode@1000000016 : TextConst 'ENU=%2%1;ENG=%2%1';
      ePeriodRangeDescription@1000000010 : TextConst 'ENU=Date range of %2 %1;ENG=Date range of %2 %1';
      ePeriodRangeHelp@1000000009 : TextConst 'ENU=Returns date range representing %2 %1. The calculation is based on the current workdate.;ENG=Returns date range representing %2 %1. The calculation is based on the current workdate.';
    BEGIN
      //DOC NA2016.12 - Initialising periods (internal)
      //  -> pPeriods: List of periods

      lPeriodRanges := lPeriodRanges.List();
      lPeriodRanges.Add(tThis);
      lPeriodRanges.Add(tLast);
      lPeriodRanges.Add(tNext);

      FOREACH lPeriod IN pPeriods DO
        FOREACH lPeriodRange IN lPeriodRanges DO
          SmartFilter.Add(
            STRSUBSTNO(ePeriodRangeCode, lPeriod, lPeriodRange),
            STRSUBSTNO(ePeriodRangeDescription, LOWERCASE(lPeriod), LOWERCASE(lPeriodRange)),
            STRSUBSTNO(ePeriodRangeHelp, LOWERCASE(lPeriod), LOWERCASE(lPeriodRange)));
    END;

    LOCAL PROCEDURE InitialisePeriodBoundsInternal@1000000025(pPeriods@1000000002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1");
    VAR
      lPeriod@1000000013 : Text;
      lPeriodBounds@1000000001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      lPeriodBound@1000000000 : Text;
      ePeriodBoundCode@1000000017 : TextConst 'ENU=%1%2;ENG=%1%2';
      ePeriodBoundDescription@1000000012 : TextConst 'ENU=Date of %1 %2;ENG=Date of %1 %2';
      ePeriodBoundHelp@1000000011 : TextConst 'ENU=Returns %2 date of the %1. The calculation is based on the current workdate.;ENG=Returns %2 date of the %1. The calculation is based on the current workdate.';
    BEGIN
      //DOC NA2016.12 - Initialising period types
      //  -> pPeriods: List of period types

      lPeriodBounds := lPeriodBounds.List();
      lPeriodBounds.Add(tStart);
      lPeriodBounds.Add(tEnd);

      FOREACH lPeriod IN pPeriods DO
        FOREACH lPeriodBound IN lPeriodBounds DO
          SmartFilter.Add(
            STRSUBSTNO(ePeriodBoundCode, LOWERCASE(lPeriod), LOWERCASE(lPeriodBound)),
            STRSUBSTNO(ePeriodBoundDescription, LOWERCASE(lPeriod), LOWERCASE(lPeriodBound)),
            STRSUBSTNO(ePeriodBoundHelp, LOWERCASE(lPeriod), LOWERCASE(lPeriodBound)));
    END;

    LOCAL PROCEDURE InitialiseMyInternal@1000000049(pCode@1000000007 : Code[20];pFieldId@1000000009 : Integer);
    VAR
      eDescription@1000000010 : TextConst 'ENU=Returns your %2 from "%1" table.;ENG=Returns your %2 from "%1" table.';
      lField@1000000001 : Record 2000000041;
      lTableCaption@1000000012 : Text;
      lFieldCaption@1000000011 : Text;
      eHelp@1000000000 : TextConst 'ENU=Returns %2 from "%1" table specified against your user ID.|Currently your user ID is: %3.;ENG=Returns %2 from "%1" table specified against your user ID.|Currently your user ID is: %3.';
    BEGIN
      //DOC NA2016.12 - Initialising "My"
      //  -> pCode: Code (for the smart filter)
      //  -> pFieldId: Field ID (from "Enablement User" table)

      lTableCaption := EnablementUser.TABLECAPTION();
      lField.GET(DATABASE::"Enablement User", pFieldId);
      lFieldCaption := lField."Field Caption";

      SmartFilter.Add(
        pCode,
        STRSUBSTNO(eDescription, lTableCaption, LOWERCASE(lFieldCaption)),
        STRSUBSTNO(eHelp, lTableCaption, LOWERCASE(lFieldCaption), USERID()));
    END;

    LOCAL PROCEDURE "--- Internal ---"@1000000004();
    BEGIN
    END;

    LOCAL PROCEDURE SmartFilterMatches@1000000007(VAR pRegexMatch@1000000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match") : Boolean;
    VAR
      lRegex@1000000002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NA2016.12 - Returns if the current smart filter matches content of the filter
      //  <> pRegexMatch: Regex match object used for regular expression smart filters

      lResult := FALSE;

      IF (SmartFilter."Use Regular Expressions") THEN
      BEGIN
        pRegexMatch := lRegex.Match(Filter, SmartFilter.Pattern);
        lResult := pRegexMatch.Success;
      END
      ELSE
      BEGIN
        InFilterPosition := STRPOS(Filter, SmartFilter.Code);
        lResult := (InFilterPosition > 0);
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE ApplySmartFilter@1000000008(VAR pApplied@1000000001 : Boolean);
    VAR
      lReplace@1000000000 : Text;
      lApplied@1000000002 : Boolean;
    BEGIN
      //DOC NA2016.12 - Applying smart filter
      //  <> pApplied: Applied flag (to be modified)

      lApplied := TRUE;

      CASE (SmartFilter.Pattern) OF
        tToday: lReplace := FORMAT(TODAY);
        tWorkdate: lReplace := FORMAT(WORKDATE);

        UPPERCASE(tThis + tWeek): lReplace := CreateDateRange('<-CW>', '<+CW>');
        UPPERCASE(tLast + tWeek): lReplace := CreateDateRange('<-1W-CW>', '<-1W+CW>');
        UPPERCASE(tNext + tWeek): lReplace := CreateDateRange('<+1W-CW>', '<+1W+CW>');
        UPPERCASE(tWeek + tStart): lReplace := CreateDate('<-CW>');
        UPPERCASE(tWeek + tEnd): lReplace := CreateDate('<+CW>');

        UPPERCASE(tThis + tMonth): lReplace := CreateDateRange('<-CM>', '<+CM>');
        UPPERCASE(tLast + tMonth): lReplace := CreateDateRange('<-1M-CM>', '<-1M+CM>');
        UPPERCASE(tNext + tMonth): lReplace := CreateDateRange('<+1M-CM>', '<+1M+CM>');
        UPPERCASE(tMonth + tStart): lReplace := CreateDate('<-CM>');
        UPPERCASE(tMonth + tEnd): lReplace := CreateDate('<+CM>');

        UPPERCASE(tThis + tQuarter): lReplace := CreateDateRange('<-CQ>', '<+CQ>');
        UPPERCASE(tLast + tQuarter): lReplace := CreateDateRange('<-1Q-CQ>', '<-1Q+CQ>');
        UPPERCASE(tNext + tQuarter): lReplace := CreateDateRange('<+1Q-CQ>', '<+1Q+CQ>');
        UPPERCASE(tQuarter + tStart): lReplace := CreateDate('<-CQ>');
        UPPERCASE(tQuarter + tEnd):  lReplace := CreateDate('<+CQ>');

        UPPERCASE(tThis + tYear): lReplace := CreateDateRange('<-CY>', '<+CY>');
        UPPERCASE(tLast + tYear): lReplace := CreateDateRange('<-1Y-CY>', '<-1Y+CY>');
        UPPERCASE(tNext + tYear): lReplace := CreateDateRange('<+1Y-CY>', '<+1Y+CY>');
        UPPERCASE(tYear + tStart): lReplace := CreateDate('<-CY>');
        UPPERCASE(tYear + tEnd): lReplace := CreateDate('<+CY>');

        UPPERCASE(tThis + tPeriod): lReplace := ApplyThisLastNextPeriod(0);
        UPPERCASE(tLast + tPeriod): lReplace := ApplyThisLastNextPeriod(-1);
        UPPERCASE(tNext + tPeriod): lReplace := ApplyThisLastNextPeriod(1);
        UPPERCASE(tPeriod + tStart): lReplace := ApplyPeriodStart();
        UPPERCASE(tPeriod + tEnd): lReplace := ApplyPeriodEnd();

        UPPERCASE(tCurrentDateTime) : lReplace := FORMAT(CURRENTDATETIME); //DOC NA2016.16 PC 07/07/2016

        tMyUserId, tMyUser: lReplace := USERID();
        tMyContactNo, tMyContact: lReplace := MyField(EnablementUser.FIELDNO("Contact No."));
        tMySalespersonCode, tMySalesperson: lReplace := MyField(EnablementUser.FIELDNO("Salesperson/Purchaser Code"));
        tMyVendorNo, tMyVendor: lReplace := MyField(EnablementUser.FIELDNO("Vendor No."));
        tMyResourceNo, tMyResource: lReplace := MyField(EnablementUser.FIELDNO("Resource No."));
        tMyTeam: lReplace := MyField(EnablementUser.FIELDNO("Team Filter"));
        tMyLocationCode, tMyLocation: lReplace := MyField(EnablementUser.FIELDNO("Location Code"));
        tMyName: lReplace := MyField(EnablementUser.FIELDNO(Name));
        tMyEMail: lReplace := MyField(EnablementUser.FIELDNO("E-Mail"));
        tMyShortCode: lReplace := MyField(EnablementUser.FIELDNO("Short Code"));

        ELSE lApplied := FALSE;
      END;

      IF (lApplied) THEN
        pApplied := lApplied;

      ReplaceInFilter(lReplace);
    END;

    LOCAL PROCEDURE ApplyRegExSmartFilter@1000000009(pRegexMatch@1000000002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";VAR pApplied@1000000000 : Boolean);
    VAR
      lApplied@1000000001 : Boolean;
    BEGIN
      //DOC NA2016.12 - Applying regular expression smart filter
      //  -> pRegexMatch: The regex match object
      //  <> pApplied: Applied flag (to be modified)

      lApplied := TRUE;

      CASE (SmartFilter.Code) OF
        tPeriod: ApplyPeriod(pRegexMatch);
        tUser: ApplyUser(pRegexMatch);
        tCalcDate: ApplyCalcDate(pRegexMatch);
        tCalcTime: ApplyCalcTime(pRegexMatch);
        ELSE lApplied := FALSE;
      END;

      IF (lApplied) THEN
        pApplied := lApplied;
    END;

    LOCAL PROCEDURE "--- Logic ---"@1000000041();
    BEGIN
    END;

    LOCAL PROCEDURE ApplyThisLastNextPeriod@1000000024(pPeriodShift@1000000002 : Integer) : Text;
    VAR
      lAccountingPeriod@1000000004 : Record 10560;
      lPeriodFound@1000000001 : Boolean;
      lPeriodShift@1000000003 : Integer;
      lReplace@1000000000 : Text;
    BEGIN
      //DOC NA2016.12 - Applying this / last / next period logic
      //  -> pPeriodShift: -1 = Last, 0 = This, 1 = Next
      //  <- Replace text

      lPeriodFound := AccountingPeriodToolkit.FindMonthPeriodForDate(WORKDATE(), lAccountingPeriod);
      IF (lPeriodFound) THEN
        IF (pPeriodShift IN [-1, 0, 1]) THEN
          CASE (pPeriodShift) OF
            -1: lPeriodFound := AccountingPeriodToolkit.FindPreviousPeriod(lAccountingPeriod, lAccountingPeriod);
            1: lPeriodFound := AccountingPeriodToolkit.FindNextPeriod(lAccountingPeriod, lAccountingPeriod);
          END
        ELSE
          lPeriodFound := FALSE;

      IF (lPeriodFound) THEN
        lReplace := STRSUBSTNO('%1..%2', lAccountingPeriod."Period Start", lAccountingPeriod."Period End");

      EXIT(lReplace);
    END;

    LOCAL PROCEDURE ApplyPeriodStart@1000000030() : Text;
    VAR
      lPeriodStart@1000000001 : Date;
      lReplace@1000000000 : Text;
    BEGIN
      //DOC NA2016.12 - Applying period start logic
      //  <- Replace text

      IF (AccountingPeriodToolkit.FindMonthPeriodStartForDate(WORKDATE(), lPeriodStart)) THEN
        lReplace := FORMAT(lPeriodStart);
      EXIT(lReplace);
    END;

    LOCAL PROCEDURE ApplyPeriodEnd@1000000037() : Text;
    VAR
      lPeriodEnd@1000000001 : Date;
      lReplace@1000000000 : Text;
    BEGIN
      //DOC NA2016.12 - Applying period end logic
      //  <- Replace text

      IF (AccountingPeriodToolkit.FindMonthPeriodEndForDate(WORKDATE(), lPeriodEnd)) THEN
        lReplace := FORMAT(lPeriodEnd);
      EXIT(lReplace);
    END;

    LOCAL PROCEDURE ApplyPeriod@1000000044(pRegexMatch@1000000006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match");
    VAR
      lAccountingPeriod@1000000005 : Record 10560;
      lPlusMinus@1000000000 : Text;
      lNumberText@1000000001 : Text;
      lNumber@1000000002 : Integer;
      lReplace@1000000003 : Text;
      lPeriodFound@1000000004 : Boolean;
    BEGIN
      //DOC NA2016.12 - Applying period logic to the filter
      //  -> pRegexMatch: The regex match object

      lPlusMinus := GetRegexGroupValue(pRegexMatch, 1);
      lNumberText := GetRegexGroupValue(pRegexMatch, 2);
      EVALUATE(lNumber, lNumberText);

      lPeriodFound := AccountingPeriodToolkit.FindMonthPeriodForDate(WORKDATE(), lAccountingPeriod);
      IF (lPeriodFound) THEN
        CASE (lPlusMinus) OF
          '+': lPeriodFound := AccountingPeriodToolkit.FindSucceedingPeriod(lAccountingPeriod, lNumber, lAccountingPeriod);
          '-': lPeriodFound := AccountingPeriodToolkit.FindPrecedingPeriod(lAccountingPeriod, lNumber, lAccountingPeriod);
          '': lPeriodFound := AccountingPeriodToolkit.FindMonthPeriodNoInAYear(lAccountingPeriod, lNumber, lAccountingPeriod);
        END;

      IF (lPeriodFound) THEN
        lReplace := STRSUBSTNO('%1..%2', lAccountingPeriod."Period Start", lAccountingPeriod."Period End");

      ReplaceRegexInFilter(pRegexMatch, lReplace);
    END;

    LOCAL PROCEDURE ApplyUser@1000000042(pRegexMatch@1000000002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match");
    VAR
      lField@1000000001 : Record 2000000041;
      lFieldName@1000000000 : Text;
    BEGIN
      //DOC NA2016.12 - Applying user (field) logic to the filter
      //  -> pRegexMatch: The regex match object

      lFieldName := DELCHR(GetRegexGroupValue(pRegexMatch, 1), '<>', ' ');
      lField.RESET();
      lField.SETRANGE(TableNo, DATABASE::"Enablement User");
      lField.SETFILTER("Field Caption", '@' + lFieldName);
      lField.FINDFIRST();

      ReplaceRegexInFilter(pRegexMatch, MyField(lField."No."));
    END;

    LOCAL PROCEDURE ApplyCalcDate@1000000043(pRegexMatch@1000000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match");
    VAR
      lDateCalculation@1000000000 : Text;
      lDateCalculationCount@1000000005 : Integer;
      lDateCalculationArray@1000000006 : ARRAY [2] OF Text;
      lDateCalculationFormula@1000000007 : Text;
      lDateCalculationDateText@1000000008 : Text;
      lDateCalculationDate@1000000009 : Date;
    BEGIN
      //DOC NA2016.12 - Applying CALCDATE logic to the filter
      //  -> pRegexMatch: The regex match object

      lDateCalculation := GetRegexGroupValue(pRegexMatch, 1);
      lDateCalculationCount := SplitText(lDateCalculation, ',', lDateCalculationArray);
      lDateCalculationFormula := DELCHR(lDateCalculationArray[1], '<>', ' ');
      lDateCalculationFormula := DELCHR(lDateCalculationFormula, '<>', '''');
      IF (lDateCalculationCount > 1) THEN
      BEGIN
        lDateCalculationDateText := lDateCalculationArray[2];
        IF ( NOT (EVALUATE(lDateCalculationDate, lDateCalculationDateText))) THEN
        BEGIN
          lDateCalculationDateText := ApplySmartFilters(lDateCalculationDateText);
          EVALUATE(lDateCalculationDate, lDateCalculationDateText);
        END;
      END
      ELSE
        lDateCalculationDate := WORKDATE();

      IF (lDateCalculationFormula <> '') THEN
        lDateCalculationDate := CALCDATE(lDateCalculationFormula, lDateCalculationDate);

      ReplaceRegexInFilter(pRegexMatch, FORMAT(lDateCalculationDate));
    END;

    LOCAL PROCEDURE ApplyCalcTime@1000000034(pRegexMatch@1000000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match");
    VAR
      lFormula@1000000012 : Text;
      lTime@1000000004 : Time;
      eUnrecognisedTimeFormula@1000000009 : TextConst 'ENU=Unrecognised time formula: "%1";ENG=Unrecognised time formula: "%1"';
    BEGIN
      //DOC NA2016.12 - Applying CALCTIME logic to the filter
      //  -> pRegexMatch: The regex match object

      lFormula := GetRegexGroupValue(pRegexMatch, 1);
      lTime := TIME();

      lTime := DateTime.CalcTime(lFormula, lTime);

      ReplaceRegexInFilter(pRegexMatch, FORMAT(lTime));
    END;

    LOCAL PROCEDURE "--- Tools ---"@1000000003();
    BEGIN
    END;

    LOCAL PROCEDURE CreatePeriodsArray@1000000028(VAR pPeriods@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1");
    VAR
      eDateRangeCode@1000000016 : TextConst 'ENU=%2%1;ENG=%2%1';
      eDateRangeDescription@1000000010 : TextConst 'ENU=Date range of %2 %1;ENG=Date range of %2 %1';
      eDateRangeHelp@1000000009 : TextConst 'ENU=Returns date range representing %2 %1. The calculation is based on the current workdate.;ENG=Returns date range representing %2 %1. The calculation is based on the current workdate.';
      eDateBoundCode@1000000017 : TextConst 'ENU=%1%2;ENG=%1%2';
      eDateBoundDescription@1000000012 : TextConst 'ENU=Date of %1 %2;ENG=Date of %1 %2';
      eDateBoundHelp@1000000011 : TextConst 'ENU=Returns %2 date of the %1. The calculation is based on the current workdate.;ENG=Returns %2 date of the %1. The calculation is based on the current workdate.';
    BEGIN
      //DOC NA2016.12 - Creating periods array
      //  <> pPeriods: The array

      pPeriods := pPeriods.List();
      pPeriods.Add(tWeek);
      pPeriods.Add(tMonth);
      pPeriods.Add(tQuarter);
      pPeriods.Add(tYear);
    END;

    LOCAL PROCEDURE CreateAccountingPeriodsArray@1000000032(VAR pPeriods@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1");
    VAR
      eDateRangeCode@1000000016 : TextConst 'ENU=%2%1;ENG=%2%1';
      eDateRangeDescription@1000000010 : TextConst 'ENU=Date range of %2 %1;ENG=Date range of %2 %1';
      eDateRangeHelp@1000000009 : TextConst 'ENU=Returns date range representing %2 %1. The calculation is based on the current workdate.;ENG=Returns date range representing %2 %1. The calculation is based on the current workdate.';
      eDateBoundCode@1000000017 : TextConst 'ENU=%1%2;ENG=%1%2';
      eDateBoundDescription@1000000012 : TextConst 'ENU=Date of %1 %2;ENG=Date of %1 %2';
      eDateBoundHelp@1000000011 : TextConst 'ENU=Returns %2 date of the %1. The calculation is based on the current workdate.;ENG=Returns %2 date of the %1. The calculation is based on the current workdate.';
    BEGIN
      //DOC NA2016.12 - Creating accounting periods array
      //  <> pPeriods: The array

      pPeriods := pPeriods.List();
      pPeriods.Add(tPeriod);
    END;

    LOCAL PROCEDURE ReplaceInFilter@1190000035(pReplace@1190000014 : Text);
    VAR
      lPos@1190000015 : Integer;
    BEGIN
      //DOC NA2015.3 - Replacing text inside filter
      //  -> pReplace: Replacement

      lPos := STRPOS(Filter, SmartFilter.Code);
      IF (lPos > 0) THEN
        Filter := COPYSTR(Filter, 1, lPos - 1) + pReplace + COPYSTR(Filter, lPos + STRLEN(SmartFilter.Code));
    END;

    LOCAL PROCEDURE ReplaceRegexInFilter@1000000048(pRegexMatch@1000000002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";pReplace@1000000000 : Text);
    VAR
      lFilter@1000000001 : Text;
    BEGIN
      //DOC NA2016.12 - Replacing regex inside filter
      //  -> pRegexMatch: The regex match
      //  -> pReplace: Replacement

      IF (pRegexMatch.Index > 0) THEN
        lFilter := COPYSTR(Filter, 1, pRegexMatch.Index);
      lFilter := lFilter + pReplace;
      IF (pRegexMatch.Index + pRegexMatch.Length <= STRLEN(Filter)) THEN
        lFilter := lFilter + COPYSTR(Filter, pRegexMatch.Index + pRegexMatch.Length + 1, STRLEN(Filter) - pRegexMatch.Index - pRegexMatch.Length + 1);
      Filter := lFilter;
    END;

    LOCAL PROCEDURE CreateDate@1000000023(pDateFormula@1000000000 : Text) : Text;
    BEGIN
      //DOC NA2016.12 - Creating date calculated from WORKDATE
      //  -> pDateFormula: Date formula
      //  <- The date created

      EXIT(FORMAT(CALCDATE(pDateFormula, WORKDATE())));
    END;

    LOCAL PROCEDURE CreateDateRange@1000000012(pFromDateFormula@1000000000 : Text;pToDateFormula@1000000003 : Text) : Text;
    BEGIN
      //DOC NA2016.12 - Creating date range calculated from WORKDATE
      //  -> pFromDateFormula: Start date formula
      //  -> pToDateFormula: End date formula
      //  <- The range created

      EXIT(STRSUBSTNO('%1..%2', CALCDATE(pFromDateFormula, WORKDATE()), CALCDATE(pToDateFormula, WORKDATE())));
    END;

    LOCAL PROCEDURE MyField@1000000027(pFieldId@1000000000 : Integer) : Text;
    VAR
      lRecordRef@1000000001 : RecordRef;
      lFieldRef@1000000002 : FieldRef;
      lFieldValue@1000000003 : Text;
    BEGIN
      //DOC NA2016.12 - Teturning "My" field (field from "Enablement User" table)
      //  -> pFieldId: Field ID
      //  <- The field

      lFieldValue := '';

      IF (EnablementUser.GET(USERID())) THEN
      BEGIN
        lRecordRef.OPEN(DATABASE::"Enablement User");
        lRecordRef.GETTABLE(EnablementUser);
        lFieldRef := lRecordRef.FIELD(pFieldId);
        IF (RecordRefManagement.FieldRefIsFlowField(lFieldRef)) THEN
          lFieldRef.CALCFIELD();
        lFieldValue := FORMAT(lFieldRef.VALUE);
        lRecordRef.CLOSE();
      END;

      EXIT(lFieldValue);
    END;

    LOCAL PROCEDURE GetRegexGroupValue@1000000050(pRegexMatch@1000000001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";pGroupIndex@1000000000 : Integer) : Text;
    BEGIN
      //DOC NA2016.12 - Returning regex group value
      //  -> pRegexMatch: The regex match object
      //  -> pGroupIndex: Group index
      //  <- Group value

      EXIT(pRegexMatch.Groups.Item(pGroupIndex).Value);
    END;

    LOCAL PROCEDURE SplitText@1000000011(pText@1000000000 : Text;pDelimiter@1000000002 : Text;VAR pTextParts@1000000001 : ARRAY [2] OF Text) : Integer;
    VAR
      lDelimiterIndex@1000000003 : Integer;
      lDelimiterLength@1000000005 : Integer;
      lNoOfParts@1000000004 : Integer;
    BEGIN
      //DOC NA2016.12 - Splitting text into one or two parts
      //  -> pText: Text to search
      //  -> pDelimiter: Delimiter to split with
      //  <> pTextParts: Target text parts
      //  <- Number of parts

      CLEAR(pTextParts);

      lDelimiterIndex := STRPOS(pText, pDelimiter);
      IF (lDelimiterIndex > 0) THEN
      BEGIN
        lDelimiterLength := STRLEN(pDelimiter);
        IF (lDelimiterIndex > 1) THEN
          pTextParts[1] := COPYSTR(pText, 1, lDelimiterIndex - 1);
        IF (STRLEN(pText) >= lDelimiterIndex + lDelimiterLength) THEN
          pTextParts[2] := COPYSTR(pText, lDelimiterIndex + lDelimiterLength, STRLEN(pText) - lDelimiterIndex - lDelimiterLength + 1);
        lNoOfParts := 2;
      END
      ELSE
      BEGIN
        pTextParts[1] := pText;
        lNoOfParts := 1;
      END;

      EXIT(lNoOfParts);
    END;

    LOCAL PROCEDURE SentenceCase@1000000013(pText@1000000000 : Text) : Text;
    BEGIN
      //DOC NA2016.12 - Returning string with sentence case
      //  -> pText: The text
      //  <- Amended text

      EXIT(String.ToSentenceCase(pText));
    END;

    LOCAL PROCEDURE "--- UI ---"@1000000018();
    BEGIN
    END;

    PROCEDURE UnpackHelp@1000000019(VAR pSmartFilter@1000000001 : Record 9062233;VAR pHelpBuffer@1000000000 : Record 9062730);
    VAR
      lHelpBlob@1000000002 : Record 99008535;
      lHelpText@1000000003 : Text;
    BEGIN
      //DOC NA2016.12 - Unpacking help into "Name Value" temporary recordset
      //  <> pSmartFilter: The smart filter to take help from
      //  <> pHelpBuffer: Target buffer

      pHelpBuffer.RESET();
      pHelpBuffer.DELETEALL();

      pSmartFilter.CALCFIELDS(Help);
      IF (pSmartFilter.Help.HASVALUE()) THEN
      BEGIN
        lHelpBlob.Blob := pSmartFilter.Help;
        lHelpText := BlobToolkit.BlobToText(lHelpBlob);
        String.Split(lHelpText, '|', pHelpBuffer);
      END;

      pHelpBuffer.RESET();
    END;

    LOCAL PROCEDURE "--- Diagnostics ---"@1000000002();
    BEGIN
    END;

    LOCAL PROCEDURE Test@1000000017();
    VAR
      lSyntax@1000000000 : Text;
    BEGIN
      SmartFilterLookup(lSyntax);
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 28/01/2016 - Created
      //DOC NA2016.14 JH 18/02/2016 - "USERID", "Contact No." filters fixed
      //DOC NA2016.15 JH 18/04/2016 - CfMD amendments
      //DOC NA2016.16 PC 07/07/2016 - Added CURRENTDATETIME keyword
      //DOC NA2016.16 JH 11/07/2016 - Calculating FlowFields in "User" table
    }
    END.
  }
}

