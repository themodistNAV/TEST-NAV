OBJECT Report 99001026 Replan Production Order
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Replan Production Order;
               ENG=Replan Production Order];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   Direction := Direction::Backward;
                 END;

    OnPreReport=BEGIN
                  MfgSetup.GET;
                END;

  }
  DATASET
  {
    { 4824;    ;DataItem;                    ;
               DataItemTable=Table5405;
               DataItemTableView=SORTING(Status,No.)
                                 WHERE(Status=FILTER(..Released));
               OnPreDataItem=BEGIN
                               First := TRUE;
                               MfgSetup.GET;

                               Window.OPEN(
                                 Text000 +
                                 Text001 +
                                 Text002);
                             END;

               OnAfterGetRecord=VAR
                                  ProdOrderLine@1001 : Record 5406;
                                BEGIN
                                  IF (CalcMethod = CalcMethod::"One level") AND NOT First THEN
                                    CurrReport.BREAK;

                                  Window.UPDATE(1,Status);
                                  Window.UPDATE(2,"No.");
                                  ProdOrderLine.LOCKTABLE;

                                  ProdOrderLine.SETRANGE(Status,Status);
                                  ProdOrderLine.SETRANGE("Prod. Order No.","No.");
                                  IF ProdOrderLine.FIND('-') THEN
                                    REPEAT
                                      ProdOrderLine.BlockDynamicTracking(TRUE);
                                      IF ProdOrderLine."Planning Level Code" > 0 THEN BEGIN
                                        ProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
                                        IF ProdOrderLine."Reserved Qty. (Base)" = 0 THEN
                                          ProdOrderLine.DELETE(TRUE);
                                      END;
                                    UNTIL ProdOrderLine.NEXT = 0;

                                  IF "Replan Ref. No." = '' THEN BEGIN
                                    "Replan Ref. No." := "No.";
                                    "Replan Ref. Status" := Status;
                                    MODIFY;
                                  END;
                                  IF First THEN BEGIN
                                    RESET;
                                    SETRANGE("Replan Ref. No.","Replan Ref. No.");
                                    SETRANGE("Replan Ref. Status","Replan Ref. Status");
                                    First := FALSE;
                                    IF CalcMethod <> CalcMethod::"No Levels" THEN
                                      DeleteProdOrders("Production Order","Low-Level Code",CalcMethod = CalcMethod::"All levels");
                                  END;
                                  CreateProdOrderLines.CheckStructure(
                                    Status,"No.",Direction,TRUE,TRUE);
                                END;
                                 }

    { 3581;1   ;DataItem;                    ;
               DataItemTable=Table5406;
               DataItemTableView=SORTING(Status,Prod. Order No.,Planning Level Code);
               OnAfterGetRecord=VAR
                                  ProdOrderRouteMgt@1000 : Codeunit 99000772;
                                BEGIN
                                  BlockDynamicTracking(TRUE);
                                  IF "Routing No." = '' THEN BEGIN
                                    CalcProdOrder.BlockDynamicTracking(TRUE);
                                    CalcProdOrder.Recalculate("Prod. Order Line",Direction,TRUE);

                                    MODIFY;
                                  END ELSE
                                    ProdOrderRouteMgt.Calculate("Prod. Order Line");
                                END;

               DataItemLink=Status=FIELD(Status),
                            Prod. Order No.=FIELD(No.) }

    { 4877;2   ;DataItem;                    ;
               DataItemTable=Table5409;
               DataItemTableView=SORTING(Status,Prod. Order No.,Routing Reference No.,Routing No.,Operation No.);
               OnPreDataItem=BEGIN
                               IF Direction = Direction::Forward THEN
                                 SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.","Routing No.","Sequence No. (Forward)")
                               ELSE
                                 SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.","Routing No.","Sequence No. (Backward)");
                             END;

               OnAfterGetRecord=VAR
                                  ProdOrderLine@1000 : Record 5406;
                                  CalcProdOrderRtngLine@1001 : Codeunit 99000774;
                                  PlanLevel@1002 : Integer;
                                BEGIN
                                  IF "Routing Status" = "Routing Status"::Finished THEN
                                    CurrReport.SKIP;

                                  PlanLevel := "Prod. Order Line"."Planning Level Code";

                                  ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing No.");
                                  ProdOrderLine.SETRANGE(Status,Status);
                                  ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
                                  ProdOrderLine.SETRANGE("Routing No.","Routing No.");
                                  IF ProdOrderLine.FIND('-') THEN
                                    REPEAT
                                      IF PlanLevel < ProdOrderLine."Planning Level Code" THEN
                                        PlanLevel := ProdOrderLine."Planning Level Code";
                                    UNTIL (ProdOrderLine.NEXT = 0) OR (PlanLevel > "Prod. Order Line"."Planning Level Code");

                                  ProdOrderLine.RESET;

                                  IF PlanLevel = "Prod. Order Line"."Planning Level Code" THEN BEGIN
                                    IF Direction = Direction::Forward THEN BEGIN
                                      "Starting Date" := "Prod. Order Line"."Starting Date";
                                      "Starting Time" := "Prod. Order Line"."Starting Time";
                                      MODIFY;
                                    END ELSE BEGIN
                                      "Ending Date" := "Prod. Order Line"."Ending Date";
                                      "Ending Time" := "Prod. Order Line"."Ending Time";
                                      MODIFY;
                                    END;
                                    CalcProdOrderRtngLine.CalculateRoutingLine("Prod. Order Routing Line",Direction,TRUE);
                                  END;
                                  MODIFY;
                                END;

               OnPostDataItem=BEGIN
                                CalcProdOrder.CalculateProdOrderDates("Prod. Order Line",TRUE);
                              END;

               DataItemLink=Status=FIELD(Status),
                            Prod. Order No.=FIELD(Prod. Order No.),
                            Routing No.=FIELD(Routing No.) }

    { 7771;2   ;DataItem;                    ;
               DataItemTable=Table5407;
               DataItemTableView=SORTING(Status,Prod. Order No.,Prod. Order Line No.,Line No.);
               OnPreDataItem=BEGIN
                               SETFILTER("Item No.",'<>%1','');
                             END;

               OnAfterGetRecord=VAR
                                  SKU@1001 : TEMPORARY Record 5700;
                                  CompItem@1000 : Record 27;
                                  MainProdOrder@1002 : Record 5405;
                                  ProdOrder@1003 : Record 5405;
                                  ProdOrderLine@1004 : Record 5406;
                                  AvailabilityMgt@1005 : Codeunit 5400;
                                  CreateProdOrderLines@1006 : Codeunit 99000787;
                                  GetPlanningParameters@1011 : Codeunit 99000855;
                                  InvtProfileOffsetting@1010 : Codeunit 99000854;
                                  ReqQty@1007 : Decimal;
                                BEGIN
                                  BlockDynamicTracking(TRUE);
                                  VALIDATE("Routing Link Code");
                                  MODIFY;

                                  CALCFIELDS("Reserved Qty. (Base)");
                                  IF "Reserved Qty. (Base)" = "Remaining Qty. (Base)" THEN
                                    EXIT;

                                  CompItem.GET("Item No.");

                                  IF CalcMethod = CalcMethod::"No Levels" THEN
                                    CurrReport.BREAK;

                                  CompItem.SETRANGE("Variant Filter","Variant Code");
                                  CompItem.SETRANGE("Location Filter","Location Code");
                                  CompItem.SETRANGE("Date Filter",0D,"Due Date");

                                  AvailabilityMgt.ExpectedQtyOnHand(
                                    CompItem,
                                    TRUE,
                                    0,
                                    ReqQty,
                                    "Due Date");

                                  IF ReqQty >= 0 THEN
                                    CurrReport.SKIP;

                                  ReqQty := ABS(ReqQty);
                                  IF ReqQty > "Remaining Qty. (Base)" THEN
                                    ReqQty := "Remaining Qty. (Base)";

                                  GetPlanningParameters.AtSKU(SKU,"Item No.","Variant Code","Location Code");
                                  ReqQty += InvtProfileOffsetting.AdjustReorderQty(ReqQty,SKU,0,0);

                                  IF ReqQty = 0 THEN
                                    CurrReport.SKIP;

                                  MainProdOrder.GET("Production Order".Status,"Prod. Order No.");

                                  IF CompItem."Replenishment System" = CompItem."Replenishment System"::"Prod. Order" THEN BEGIN
                                    ProdOrder.Status := MainProdOrder.Status;
                                    ProdOrder."Replan Ref. No." := MainProdOrder."Replan Ref. No.";
                                    ProdOrder."Replan Ref. Status" := MainProdOrder."Replan Ref. Status";
                                    ProdOrder.INSERT(TRUE);

                                    ProdOrder."Starting Date" := WORKDATE;
                                    ProdOrder."Creation Date" := WORKDATE;
                                    ProdOrder."Starting Time" := MfgSetup."Normal Starting Time";
                                    ProdOrder."Ending Time" := MfgSetup."Normal Ending Time";
                                    ProdOrder."Due Date" := "Due Date";
                                    ProdOrder."Ending Date" := "Due Date";
                                    ProdOrder."Low-Level Code" := MainProdOrder."Low-Level Code" + 1;
                                    ProdOrder."Source Type" := ProdOrder."Source Type"::Item;
                                    ProdOrder.VALIDATE("Source No.","Item No.");
                                    ProdOrder.VALIDATE(Quantity,ReqQty);
                                    ProdOrder."Location Code" := "Location Code";
                                    ProdOrder.MODIFY;
                                    CreateProdOrderLines.Copy(ProdOrder,1,"Variant Code",TRUE);
                                    ProdOrderLine.SETRANGE(Status,ProdOrder.Status);
                                    ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrder."No.");
                                    ProdOrderLine.FIND('-');

                                    MODIFY;
                                    ProdOrderLine.MODIFY;

                                    ProdOrderLine.SETRANGE(Status,Status);
                                    ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrder."No.");

                                    IF ProdOrderLine.FIND('-') THEN
                                      REPEAT
                                        CalcProdOrder.BlockDynamicTracking(TRUE);
                                        CalcProdOrder.Recalculate(ProdOrderLine,1,TRUE);
                                      UNTIL ProdOrderLine.NEXT = 0;

                                    MODIFY;
                                  END;
                                  ReservMgt.SetProdOrderComponent("Prod. Order Component");
                                  ReservMgt.AutoTrack("Remaining Qty. (Base)");
                                END;

               DataItemLink=Status=FIELD(Status),
                            Prod. Order No.=FIELD(Prod. Order No.),
                            Prod. Order Line No.=FIELD(Line No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 6   ;2   ;Field     ;
                  CaptionML=[ENU=Scheduling Direction;
                             ENG=Scheduling Direction];
                  OptionCaptionML=[ENU=Forward,Back;
                                   ENG=Forward,Back];
                  SourceExpr=Direction }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Plan;
                             ENG=Plan];
                  OptionCaptionML=[ENU=No Levels,One Level,All Levels;
                                   ENG=No Levels,One Level,All Levels];
                  SourceExpr=CalcMethod }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Replanning Production Orders...\\;ENG=Replanning Production Orders...\\';
      Text001@1001 : TextConst 'ENU=Status         #1##########\;ENG=Status         #1##########\';
      Text002@1002 : TextConst 'ENU=No.            #2##########;ENG=No.            #2##########';
      MfgSetup@1003 : Record 99000765;
      CalcProdOrder@1005 : Codeunit 99000773;
      CreateProdOrderLines@1006 : Codeunit 99000787;
      ReservMgt@1007 : Codeunit 99000845;
      Window@1010 : Dialog;
      Direction@1011 : 'Forward,Backward';
      CalcMethod@1012 : 'No Levels,One level,All levels';
      First@1013 : Boolean;

    PROCEDURE InitializeRequest@1(NewDirection@1000 : Option;NewCalcMethod@1001 : Option);
    BEGIN
      Direction := NewDirection;
      CalcMethod := NewCalcMethod;
    END;

    LOCAL PROCEDURE DeleteProdOrders@2(ProdOrder@1000 : Record 5405;LowLevelCode@1001 : Integer;AllLevels@1002 : Boolean);
    VAR
      ProdOrderComponent@1003 : Record 5407;
    BEGIN
      IF LowLevelCode > 99 THEN
        EXIT;

      ProdOrder.SETCURRENTKEY("Low-Level Code");
      ProdOrder.SETRANGE("Replan Ref. No.",ProdOrder."Replan Ref. No.");
      ProdOrder.SETRANGE("Replan Ref. Status",ProdOrder."Replan Ref. Status");
      ProdOrder.SETRANGE("Low-Level Code",LowLevelCode + 1);

      ProdOrderComponent.SETRANGE(Status,ProdOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrder."No.");
      IF ProdOrderComponent.FINDSET THEN
        REPEAT
          ProdOrder.SETRANGE("Source No.",ProdOrderComponent."Item No.");
          IF ProdOrder.FINDFIRST THEN BEGIN
            IF AllLevels THEN
              DeleteProdOrders(ProdOrder,LowLevelCode + 1,AllLevels);
            ProdOrder.DELETE(TRUE);
          END;
        UNTIL ProdOrderComponent.NEXT = 0;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

