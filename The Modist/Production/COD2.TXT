OBJECT Codeunit 2 Company-Initialize
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00,NAVGB9.00;
  }
  PROPERTIES
  {
    OnRun=VAR
            BankPmtApplRule@1003 : Record 1252;
            TransformationRule@1005 : Record 1237;
            ApplicationLaunchMgt@1001 : Codeunit 403;
            AddOnIntegrMgt@1000 : Codeunit 5403;
            WorkflowSetup@1004 : Codeunit 1502;
            Window@1002 : Dialog;
          BEGIN
            Window.OPEN(Text000);

            InitSetupTables;
            AddOnIntegrMgt.InitMfgSetup;
            InitSourceCodeSetup;
            InitStandardTexts;
            InitReportSelection;
            InitJobWIPMethods;
            InitBankExportImportSetup;
            InitBankDataConversionPmtType;
            InitBankClearingStandard;
            InitBankDataConvServiceSetup;
            InitOcrServiceSetup;
            InitDocExchServiceSetup;
            BankPmtApplRule.InsertDefaultMatchingRules;
            ApplicationLaunchMgt.InsertStyleSheets;
            InsertClientAddIns;
            InitVATRegNrValidationSetup;
            WorkflowSetup.InitWorkflow;
            TransformationRule.CreateDefaultTransformations;
            InitElectronicFormats;

            Window.CLOSE;

            IF STRPOS(COMPANYNAME,Text093) = 1 THEN
              EXIT;

            COMMIT;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Initializing company...;ENG=Initialising company...';
      SEPACTCodeTxt@1076 : TextConst '@@@=No need to translate - but can be translated at will.;ENU=SEPACT;ENG=SEPACT';
      SEPACTNameTxt@1083 : TextConst 'ENU=SEPA Credit Transfer;ENG=SEPA Credit Transfer';
      SEPADDCodeTxt@1033 : TextConst '@@@=No need to translate - but can be translated at will.;ENU=SEPADD;ENG=SEPADD';
      SEPADDNameTxt@1020 : TextConst 'ENU=SEPA Direct Debit;ENG=SEPA Direct Debit';
      BACSBankExportCodeTxt@1040005 : TextConst '@@@=No need to translate - but can be translated at will.;ENU=BACS;ENG=BACS';
      BACSBankExportNameTxt@1040004 : TextConst 'ENU=Bankers Automated Clearing Service;ENG=Bankers Automated Clearing Service';
      Text001@1001 : TextConst 'ENU=SALES;ENG=SALES';
      Text002@1002 : TextConst 'ENU=Sales;ENG=Sales';
      Text003@1003 : TextConst 'ENU=PURCHASES;ENG=PURCHASES';
      Text004@1004 : TextConst 'ENU=Purchases;ENG=Purchases';
      Text005@1005 : TextConst 'ENU=DELETE;ENG=DELETE';
      Text006@1006 : TextConst 'ENU=INVTPCOST;ENG=INVTPCOST';
      Text007@1007 : TextConst 'ENU=EXCHRATADJ;ENG=EXCHRATADJ';
      Text010@1010 : TextConst 'ENU=CLSINCOME;ENG=CLSINCOME';
      Text011@1011 : TextConst 'ENU=CONSOLID;ENG=CONSOLID';
      Text012@1012 : TextConst 'ENU=Consolidation;ENG=Consolidation';
      Text013@1013 : TextConst 'ENU=GENJNL;ENG=GENJNL';
      Text014@1014 : TextConst 'ENU=SALESJNL;ENG=SALESJNL';
      Text015@1015 : TextConst 'ENU=PURCHJNL;ENG=PURCHJNL';
      Text016@1016 : TextConst 'ENU=CASHRECJNL;ENG=CASHRECJNL';
      Text017@1017 : TextConst 'ENU=PAYMENTJNL;ENG=PAYMENTJNL';
      Text018@1018 : TextConst 'ENU=ITEMJNL;ENG=ITEMJNL';
      Text020@1019 : TextConst 'ENU=PHYSINVJNL;ENG=PHYSINVJNL';
      Text022@1021 : TextConst 'ENU=RESJNL;ENG=RESJNL';
      Text023@1022 : TextConst 'ENU=JOBJNL;ENG=JOBJNL';
      Text024@1023 : TextConst 'ENU=SALESAPPL;ENG=SALESAPPL';
      Text025@1024 : TextConst 'ENU=Sales Entry Application;ENG=Sales Entry Application';
      PaymentReconJnlTok@1169 : TextConst '@@@=Payment Reconciliation Journal Code;ENU=PAYMTRECON;ENG=PAYMTRECON';
      Text026@1025 : TextConst 'ENU=PURCHAPPL;ENG=PURCHAPPL';
      Text027@1026 : TextConst 'ENU=Purchase Entry Application;ENG=Purchase Entry Application';
      Text028@1027 : TextConst 'ENU=VATSTMT;ENG=VATSTMT';
      Text029@1028 : TextConst 'ENU=COMPRGL;ENG=COMPRGL';
      Text030@1029 : TextConst 'ENU=COMPRVAT;ENG=COMPRVAT';
      Text031@1030 : TextConst 'ENU=COMPRCUST;ENG=COMPRCUST';
      Text032@1031 : TextConst 'ENU=COMPRVEND;ENG=COMPRVEND';
      Text035@1034 : TextConst 'ENU=COMPRRES;ENG=COMPRRES';
      Text036@1035 : TextConst 'ENU=COMPRJOB;ENG=COMPRJOB';
      Text037@1036 : TextConst 'ENU=COMPRBANK;ENG=COMPRBANK';
      Text038@1037 : TextConst 'ENU=COMPRCHECK;ENG=COMPRCHEQ';
      Text039@1038 : TextConst 'ENU=FINVOIDCHK;ENG=FINVOIDCHK';
      Text040@1039 : TextConst 'ENU=Financially Voided Check;ENG=Financially Voided Cheque';
      Text041@1040 : TextConst 'ENU=REMINDER;ENG=REMINDER';
      Text042@1041 : TextConst 'ENU=Reminder;ENG=Reminder';
      Text043@1042 : TextConst 'ENU=FINCHRG;ENG=FINCHRG';
      Text044@1043 : TextConst 'ENU=Finance Charge Memo;ENG=Finance Charge Memo';
      Text045@1044 : TextConst 'ENU=FAGLJNL;ENG=FAGLJNL';
      Text046@1045 : TextConst 'ENU=FAJNL;ENG=FAJNL';
      Text047@1046 : TextConst 'ENU=INSJNL;ENG=INSJNL';
      Text048@1047 : TextConst 'ENU=COMPRFA;ENG=COMPRFA';
      Text049@1048 : TextConst 'ENU=COMPRMAINT;ENG=COMPRMAINT';
      Text050@1049 : TextConst 'ENU=COMPRINS;ENG=COMPRINS';
      Text051@1050 : TextConst 'ENU=ADJADDCURR;ENG=ADJADDCURR';
      Text052@1051 : TextConst 'ENU=MD;ENG=MD';
      Text053@1052 : TextConst 'ENU=Monthly Depreciation;ENG=Monthly Depreciation';
      Text054@1053 : TextConst 'ENU=SC;ENG=SC';
      Text055@1054 : TextConst 'ENU=Shipping Charge;ENG=Shipping Charge';
      Text056@1055 : TextConst 'ENU=SUC;ENG=SUC';
      Text057@1056 : TextConst 'ENU=Sale under Contract;ENG=Sale under Contract';
      Text058@1057 : TextConst 'ENU=TE;ENG=TE';
      Text059@1058 : TextConst 'ENU=Travel Expenses;ENG=Travel Expenses';
      Text063@1062 : TextConst 'ENU=TRANSFER;ENG=TRANSFER';
      Text064@1063 : TextConst 'ENU=Transfer;ENG=Transfer';
      Text065@1064 : TextConst 'ENU=RECLASSJNL;ENG=RECLASSJNL';
      Text066@1065 : TextConst 'ENU=REVALJNL;ENG=REVALJNL';
      Text067@1066 : TextConst 'ENU=CONSUMPJNL;ENG=CONSUMPJNL';
      Text068@1067 : TextConst 'ENU=INVTADJMT;ENG=INVTADJMT';
      Text069@1069 : TextConst 'ENU=POINOUTJNL;ENG=POINOUTJNL';
      Text070@1073 : TextConst 'ENU=CAPACITJNL;ENG=CAPACITJNL';
      Text071@1107 : TextConst 'ENU=WHITEM;ENG=WHITEM';
      Text072@1105 : TextConst 'ENU=WHPHYSINVT;ENG=WHPHYSINVT';
      Text073@1068 : TextConst 'ENU=WHRCLSSJNL;ENG=WHRCLSSJNL';
      Text074@1070 : TextConst 'ENU=SERVICE;ENG=SERVICE';
      Text075@1074 : TextConst 'ENU=Service Management;ENG=Service Management';
      Text076@1075 : TextConst 'ENU=BANKREC;ENG=BANKREC';
      Text077@1077 : TextConst 'ENU=WHPUTAWAY;ENG=WHPUTAWAY';
      Text078@1078 : TextConst 'ENU=WHPICK;ENG=WHPICK';
      Text079@1079 : TextConst 'ENU=WHMOVEMENT;ENG=WHMOVEMENT';
      Text080@1080 : TextConst 'ENU=Whse. Put-away;ENG=Whse. Put-away';
      Text081@1081 : TextConst 'ENU=Whse. Pick;ENG=Whse. Pick';
      Text082@1082 : TextConst 'ENU=Whse. Movement;ENG=Whse. Movement';
      Text083@1100 : TextConst 'ENU=COMPRWHSE;ENG=COMPRWHSE';
      Text084@1106 : TextConst 'ENU=INTERCOMP;ENG=INTERCOMP';
      Text085@1108 : TextConst 'ENU=Intercompany;ENG=Intercompany';
      Text086@1114 : TextConst 'ENU=UNAPPSALES;ENG=UNAPPSALES';
      Text087@1113 : TextConst 'ENU=Unapplied Sales Entry Application;ENG=Unapplied Sales Entry Application';
      Text088@1112 : TextConst 'ENU=UNAPPPURCH;ENG=UNAPPPURCH';
      Text089@1111 : TextConst 'ENU=Unapplied Purchase Entry Application;ENG=Unapplied Purchase Entry Application';
      Text090@1110 : TextConst 'ENU=REVERSAL;ENG=REVERSAL';
      Text091@1109 : TextConst 'ENU="Reversal Entry ";ENG="Reversal Entry "';
      Text092@1115 : TextConst 'ENU=PRODORDER;ENG=PRODORDER';
      Text093@1059 : TextConst 'ENU=CRONUS;ENG=CRONUS';
      Text99000004@1071 : TextConst 'ENU=FLUSHING;ENG=FLUSHING';
      Text99000005@1072 : TextConst 'ENU=Flushing;ENG=Flushing';
      Text096@1008 : TextConst 'ENU=JOBGLJNL;ENG=JOBGLJNL';
      Text097@1009 : TextConst 'ENU=JOBGLWIP;ENG=JOBGLWIP';
      Text098@1122 : TextConst 'ENU=WIP Entry;ENG=WIP Entry';
      Text099@1123 : TextConst 'ENU=Date Compress Job Ledge;ENG=Date Compress Job Ledge';
      Text100@1032 : TextConst '@@@="{Locked} ";ENU=COMPRIBUDG;ENG=COMPRIBUDG';
      Text101@1117 : TextConst 'ENU=Completed Contract;ENG=Completed Contract';
      Text102@1116 : TextConst 'ENU=Cost of Sales;ENG=Cost of Sales';
      Text103@1101 : TextConst 'ENU=Cost Value;ENG=Cost Value';
      Text104@1061 : TextConst 'ENU=Sales Value;ENG=Sales Value';
      Text105@1060 : TextConst 'ENU=Percentage of Completion;ENG=Percentage of Completion';
      Text106@1084 : TextConst 'ENU=POC;ENG=POC';
      Text109@1127 : TextConst '@@@=Uppercase of the translation of cash flow work sheet with a max of 10 char;ENU=CFWKSH;ENG=CFWKSH';
      Text110@1128 : TextConst 'ENU=Cash Flow Worksheet;ENG=Cash Flow Worksheet';
      Text107@1121 : TextConst '@@@=Uppercase of the translation of assembly with a max of 10 char;ENU=ASSEMBLY;ENG=ASSEMBLY';
      Text108@1125 : TextConst 'ENU=Assembly;ENG=Assembly';
      Text111@1130 : TextConst 'ENU=GL;ENG=GL';
      Text112@1131 : TextConst 'ENU=G/L Entry to Cost Accounting;ENG=G/L Entry to Cost Accounting';
      Text113@1132 : TextConst '@@@=Uppercase of the translation of cost accounting journal with a max of 10 char;ENU=CAJOUR;ENG=CAJOUR';
      Text114@1133 : TextConst 'ENU=Cost Journal;ENG=Cost Journal';
      Text115@1134 : TextConst '@@@=Uppercase of the translation of allocation with a max of 10 char;ENU=ALLOC;ENG=ALLOC';
      Text116@1135 : TextConst 'ENU=Cost Allocation;ENG=Cost Allocation';
      Text117@1137 : TextConst '@@@=Uppercase of the translation of Transfer Budget to Actual with a max of 10 char;ENU=TRABUD;ENG=TRABUD';
      Text118@1138 : TextConst 'ENU=Transfer Budget to Actual;ENG=Transfer Budget to Actual';
      Text1040001@1040000 : TextConst 'ENU=FINVDBACS;ENG=FINVDBACS';
      Text1040002@1040001 : TextConst 'ENU=COMPRBACS;ENG=COMPRBACS';
      Text1040003@1040002 : TextConst 'ENU=Financially Voided BACS;ENG=Financially Voided BACS';
      Text1040004@1040003 : TextConst 'ENU=Delete Cheque Ledger Entries;ENG=Delete Cheque Ledger Entries';
      BankClearingStandardCode1Tok@1085 : TextConst '@@@={Locked};ENU=AustrianBankleitzahl;ENG=AustrianBankleitzahl';
      BankClearingStandardDesc1Txt@1086 : TextConst 'ENU=Austrian BLZ number;ENG=Austrian BLZ number';
      BankClearingStandardCode2Tok@1088 : TextConst '@@@={Locked};ENU=CanadianPaymentsARN;ENG=CanadianPaymentsARN';
      BankClearingStandardDesc2Txt@1087 : TextConst 'ENU=Canadian ARN number;ENG=Canadian ARN number';
      BankClearingStandardCode3Tok@1090 : TextConst '@@@={Locked};ENU=CHIPSParticipant;ENG=CHIPSParticipant';
      BankClearingStandardDesc3Txt@1089 : TextConst 'ENU=American CHIPS number;ENG=American CHIPS number';
      BankClearingStandardCode4Tok@1092 : TextConst '@@@={Locked};ENU=CHIPSUniversal;ENG=CHIPSUniversal';
      BankClearingStandardDesc4Txt@1091 : TextConst 'ENU=American CHIPS universal number;ENG=American CHIPS universal number';
      BankClearingStandardCode5Tok@1094 : TextConst '@@@={Locked};ENU=ExtensiveBranchNetwork;ENG=ExtensiveBranchNetwork';
      BankClearingStandardDesc5Txt@1093 : TextConst 'ENU=Extensive branch network number;ENG=Extensive branch network number';
      BankClearingStandardCode6Tok@1096 : TextConst '@@@={Locked};ENU=FedwireRoutingNumber;ENG=FedwireRoutingNumber';
      BankClearingStandardDesc6Txt@1095 : TextConst 'ENU=American Fedwire/ABA routing number;ENG=American Fedwire/ABA routing number';
      BankClearingStandardCode7Tok@1098 : TextConst '@@@={Locked};ENU=GermanBankleitzahl;ENG=GermanBankleitzahl';
      BankClearingStandardDesc7Txt@1097 : TextConst 'ENU=German BLZ number;ENG=German BLZ number';
      BankClearingStandardCode8Tok@1102 : TextConst '@@@={Locked};ENU=HongKongBank;ENG=HongKongBank';
      BankClearingStandardDesc8Txt@1099 : TextConst 'ENU=Hong Kong branch number;ENG=Hong Kong branch number';
      BankClearingStandardCode9Tok@1104 : TextConst '@@@={Locked};ENU=IrishNSC;ENG=IrishNSC';
      BankClearingStandardDesc9Txt@1103 : TextConst 'ENU=Irish NSC number;ENG=Irish NSC number';
      BankClearingStandardCode10Tok@1119 : TextConst '@@@={Locked};ENU=ItalianDomestic;ENG=ItalianDomestic';
      BankClearingStandardDesc10Txt@1118 : TextConst 'ENU=Italian domestic code;ENG=Italian domestic code';
      BankClearingStandardCode11Tok@1124 : TextConst '@@@={Locked};ENU=NewZealandNCC;ENG=NewZealandNCC';
      BankClearingStandardDesc11Txt@1120 : TextConst 'ENU=New Zealand NCC number;ENG=New Zealand NCC number';
      BankClearingStandardCode12Tok@1129 : TextConst '@@@={Locked};ENU=PortugueseNCC;ENG=PortugueseNCC';
      BankClearingStandardDesc12Txt@1126 : TextConst 'ENU=Portuguese NCC number;ENG=Portuguese NCC number';
      BankClearingStandardCode13Tok@1139 : TextConst '@@@={Locked};ENU=RussianCentralBankIdentificationCode;ENG=RussianCentralBankIdentificationCode';
      BankClearingStandardDesc13Txt@1136 : TextConst 'ENU=Russian CBI code;ENG=Russian CBI code';
      BankClearingStandardCode14Tok@1143 : TextConst '@@@={Locked};ENU=SouthAfricanNCC;ENG=SouthAfricanNCC';
      BankClearingStandardDesc14Txt@1142 : TextConst 'ENU=South African NCC number;ENG=South African NCC number';
      BankClearingStandardCode15Tok@1145 : TextConst '@@@={Locked};ENU=SpanishDomesticInterbanking;ENG=SpanishDomesticInterbanking';
      BankClearingStandardDesc15Txt@1144 : TextConst 'ENU=Spanish domestic interbanking number;ENG=Spanish domestic interbanking number';
      BankClearingStandardCode16Tok@1147 : TextConst '@@@={Locked};ENU=SwissBC;ENG=SwissBC';
      BankClearingStandardDesc16Txt@1146 : TextConst 'ENU=Swiss BC number;ENG=Swiss BC number';
      BankClearingStandardCode17Tok@1151 : TextConst '@@@={Locked};ENU=SwissSIC;ENG=SwissSIC';
      BankClearingStandardDesc17Txt@1150 : TextConst 'ENU=Swiss SIC number;ENG=Swiss SIC number';
      BankClearingStandardCode18Tok@1149 : TextConst '@@@={Locked};ENU=UKDomesticSortCode;ENG=UKDomesticSortCode';
      BankClearingStandardDesc18Txt@1148 : TextConst 'ENU=British sorting code;ENG=British sorting code';
      BankDataConvPmtTypeCode1Tok@1140 : TextConst '@@@={Locked};ENU=IntAcc2Acc;ENG=IntAcc2Acc';
      BankDataConvPmtTypeDesc1Txt@1141 : TextConst 'ENU=International account to account transfer (standard);ENG=International account to account transfer (standard)';
      BankDataConvPmtTypeCode2Tok@1152 : TextConst '@@@={Locked};ENU=IntAcc2AccExp;ENG=IntAcc2AccExp';
      BankDataConvPmtTypeDesc2Txt@1153 : TextConst 'ENU=International account to account transfer (express);ENG=International account to account transfer (express)';
      BankDataConvPmtTypeCode3Tok@1155 : TextConst '@@@={Locked};ENU=IntAcc2AccFoFa;ENG=IntAcc2AccFoFa';
      BankDataConvPmtTypeDesc3Txt@1154 : TextConst 'ENU=International account to account transfer;ENG=International account to account transfer';
      BankDataConvPmtTypeCode4Tok@1157 : TextConst '@@@={Locked};ENU=IntAcc2AccHighVal;ENG=IntAcc2AccHighVal';
      BankDataConvPmtTypeDesc4Txt@1156 : TextConst 'ENU=International account to account transfer (high value);ENG=International account to account transfer (high value)';
      BankDataConvPmtTypeCode5Tok@1159 : TextConst '@@@={Locked};ENU=IntAcc2AccInterComp;ENG=IntAcc2AccInterComp';
      BankDataConvPmtTypeDesc5Txt@1158 : TextConst 'ENU=International account to account transfer (inter company);ENG=International account to account transfer (inter company)';
      BankDataConvPmtTypeCode6Tok@1161 : TextConst '@@@={Locked};ENU=DomAcc2Acc;ENG=DomAcc2Acc';
      BankDataConvPmtTypeDesc6Txt@1160 : TextConst 'ENU=Domestic account to account transfer;ENG=Domestic account to account transfer';
      BankDataConvPmtTypeCode7Tok@1163 : TextConst '@@@={Locked};ENU=DomAcc2AccHighVal;ENG=DomAcc2AccHighVal';
      BankDataConvPmtTypeDesc7Txt@1162 : TextConst 'ENU=Domestic account to account transfer (high value);ENG=Domestic account to account transfer (high value)';
      BankDataConvPmtTypeCode8Tok@1165 : TextConst '@@@={Locked};ENU=DomAcc2AccInterComp;ENG=DomAcc2AccInterComp';
      BankDataConvPmtTypeDesc8Txt@1164 : TextConst 'ENU=Domestic account to account transfer (inter company);ENG=Domestic account to account transfer (inter company)';
      BankDataConvPmtTypeCode9Tok@1167 : TextConst '@@@={Locked};ENU=EurAcc2AccSepa;ENG=EurAcc2AccSepa';
      BankDataConvPmtTypeDesc9Txt@1166 : TextConst 'ENU=SEPA credit transfer;ENG=SEPA credit transfer';
      PEPPOL21_ElectronicFormatTxt@1168 : TextConst '@@@={Locked};ENU=PEPPOL 2.1;ENG=PEPPOL 2.1';
      PEPPOL21_ElectronicFormatDescriptionTxt@1170 : TextConst 'ENU=PEPPOL 2.1 Format (Pan-European Public Procurement Online);ENG=PEPPOL 2.1 Format (Pan-European Public Procurement Online)';
      PEPPOL20_ElectronicFormatTxt@1172 : TextConst '@@@={Locked};ENU=PEPPOL 2.0;ENG=PEPPOL 2.0';
      PEPPOL20_ElectronicFormatDescriptionTxt@1171 : TextConst 'ENU=PEPPOL 2.0 Format (Pan-European Public Procurement Online);ENG=PEPPOL 2.0 Format (Pan-European Public Procurement Online)';

    LOCAL PROCEDURE InitSetupTables@3();
    VAR
      GLSetup@1025 : Record 98;
      SalesSetup@1024 : Record 311;
      PurchSetup@1023 : Record 312;
      InvtSetup@1022 : Record 313;
      ResourcesSetup@1021 : Record 314;
      JobsSetup@1020 : Record 315;
      HumanResourcesSetup@1019 : Record 5218;
      MarketingSetup@1018 : Record 5079;
      InteractionTemplateSetup@1017 : Record 5122;
      ServiceMgtSetup@1016 : Record 5911;
      NonstockItemSetup@1015 : Record 5719;
      FASetup@1014 : Record 5603;
      CashFlowSetup@1007 : Record 843;
      CostAccSetup@1006 : Record 1108;
      WhseSetup@1004 : Record 5769;
      AssemblySetup@1002 : Record 905;
      VATReportSetup@1000 : Record 743;
      ConfigSetup@1001 : Record 8627;
      CalendarSetup@1040000 : Record 10505;
      IncomingDocumentsSetup@1008 : Record 131;
      CompanyInfo@1003 : Record 79;
      SocialListeningSetup@1005 : Record 870;
    BEGIN
      WITH GLSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH SalesSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH MarketingSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH InteractionTemplateSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH ServiceMgtSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH SocialListeningSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT(TRUE);
        END;

      WITH PurchSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH InvtSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH ResourcesSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH JobsSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH FASetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH HumanResourcesSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH WhseSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH NonstockItemSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH CashFlowSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH CostAccSetup DO
        IF WRITEPERMISSION THEN
          IF NOT FINDFIRST THEN BEGIN
            INIT;
            INSERT;
          END;

      WITH AssemblySetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH VATReportSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH ConfigSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH IncomingDocumentsSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH CompanyInfo DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;

      WITH CalendarSetup DO
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InitSourceCodeSetup@9();
    VAR
      SourceCode@1001 : Record 230;
      SourceCodeSetup@1000 : Record 242;
    BEGIN
      IF NOT (SourceCodeSetup.FINDFIRST OR SourceCode.FINDFIRST) THEN
        WITH SourceCodeSetup DO BEGIN
          INIT;
          InsertSourceCode(Sales,Text001,Text002);
          InsertSourceCode(Purchases,Text003,Text004);
          InsertSourceCode("Deleted Document",Text005,COPYSTR(FIELDCAPTION("Deleted Document"),1,30));
          InsertSourceCode("Inventory Post Cost",Text006,ReportName(REPORT::"Post Inventory Cost to G/L"));
          InsertSourceCode("Exchange Rate Adjmt.",Text007,ReportName(REPORT::"Adjust Exchange Rates"));
          InsertSourceCode("Close Income Statement",Text010,ReportName(REPORT::"Close Income Statement"));
          InsertSourceCode(Consolidation,Text011,Text012);
          InsertSourceCode("General Journal",Text013,PageName(PAGE::"General Journal"));
          InsertSourceCode("Sales Journal",Text014,PageName(PAGE::"Sales Journal"));
          InsertSourceCode("Purchase Journal",Text015,PageName(PAGE::"Purchase Journal"));
          InsertSourceCode("Cash Receipt Journal",Text016,PageName(PAGE::"Cash Receipt Journal"));
          InsertSourceCode("Payment Journal",Text017,PageName(PAGE::"Payment Journal"));
          InsertSourceCode("Payment Reconciliation Journal",PaymentReconJnlTok,PageName(PAGE::"Payment Reconciliation Journal"));
          InsertSourceCode("Item Journal",Text018,PageName(PAGE::"Item Journal"));
          InsertSourceCode(Transfer,Text063,Text064);
          InsertSourceCode("Item Reclass. Journal",Text065,PageName(PAGE::"Item Reclass. Journal"));
          InsertSourceCode("Phys. Inventory Journal",Text020,PageName(PAGE::"Phys. Inventory Journal"));
          InsertSourceCode("Revaluation Journal",Text066,PageName(PAGE::"Revaluation Journal"));
          InsertSourceCode("Consumption Journal",Text067,PageName(PAGE::"Consumption Journal"));
          InsertSourceCode("Output Journal",Text069,PageName(PAGE::"Output Journal"));
          InsertSourceCode("Production Journal",Text092,PageName(PAGE::"Production Journal"));
          InsertSourceCode("Capacity Journal",Text070,PageName(PAGE::"Capacity Journal"));
          InsertSourceCode("Resource Journal",Text022,PageName(PAGE::"Resource Journal"));
          InsertSourceCode("Job Journal",Text023,PageName(PAGE::"Job Journal"));
          InsertSourceCode("Job G/L Journal",Text096,PageName(PAGE::"Job G/L Journal"));
          InsertSourceCode("Job G/L WIP",Text097,Text098);
          InsertSourceCode("Sales Entry Application",Text024,Text025);
          InsertSourceCode("Unapplied Sales Entry Appln.",Text086,Text087);
          InsertSourceCode("Unapplied Purch. Entry Appln.",Text088,Text089);
          InsertSourceCode(Reversal,Text090,Text091);
          InsertSourceCode("Purchase Entry Application",Text026,Text027);
          InsertSourceCode("VAT Settlement",Text028,ReportName(REPORT::"Calc. and Post VAT Settlement"));
          InsertSourceCode("Compress G/L",Text029,ReportName(REPORT::"Date Compress General Ledger"));
          InsertSourceCode("Compress VAT Entries",Text030,ReportName(REPORT::"Date Compress VAT Entries"));
          InsertSourceCode("Compress Cust. Ledger",Text031,ReportName(REPORT::"Date Compress Customer Ledger"));
          InsertSourceCode("Compress Vend. Ledger",Text032,ReportName(REPORT::"Date Compress Vendor Ledger"));
          InsertSourceCode("Compress Res. Ledger",Text035,ReportName(REPORT::"Date Compress Resource Ledger"));
          InsertSourceCode("Compress Job Ledger",Text036,Text099);
          InsertSourceCode("Compress Bank Acc. Ledger",Text037,ReportName(REPORT::"Date Compress Bank Acc. Ledger"));
          InsertSourceCode("Compress Check Ledger",Text038,ReportName(REPORT::"Delete Check Ledger Entries"));
          InsertSourceCode("Financially Voided Check",Text039,Text040);
          InsertSourceCode(Reminder,Text041,Text042);
          InsertSourceCode("Finance Charge Memo",Text043,Text044);
          InsertSourceCode("Trans. Bank Rec. to Gen. Jnl.",Text076,ReportName(REPORT::"Trans. Bank Rec. to Gen. Jnl."));
          InsertSourceCode("Fixed Asset G/L Journal",Text045,PageName(PAGE::"Fixed Asset G/L Journal"));
          InsertSourceCode("Fixed Asset Journal",Text046,PageName(PAGE::"Fixed Asset Journal"));
          InsertSourceCode("Insurance Journal",Text047,PageName(PAGE::"Insurance Journal"));
          InsertSourceCode("Compress FA Ledger",Text048,ReportName(REPORT::"Date Compress FA Ledger"));
          InsertSourceCode("Compress Maintenance Ledger",Text049,ReportName(REPORT::"Date Compress Maint. Ledger"));
          InsertSourceCode("Compress Insurance Ledger",Text050,ReportName(REPORT::"Date Compress Insurance Ledger"));
          InsertSourceCode("Adjust Add. Reporting Currency",Text051,ReportName(REPORT::"Adjust Add. Reporting Currency"));
          InsertSourceCode(Flushing,Text99000004,Text99000005);
          InsertSourceCode("Adjust Cost",Text068,ReportName(REPORT::"Adjust Cost - Item Entries"));
          InsertSourceCode("Compress Item Budget",Text100,ReportName(REPORT::"Date Comp. Item Budget Entries"));
          InsertSourceCode("Whse. Item Journal",Text071,PageName(PAGE::"Whse. Item Journal"));
          InsertSourceCode("Whse. Phys. Invt. Journal",Text072,PageName(PAGE::"Whse. Phys. Invt. Journal"));
          InsertSourceCode("Whse. Reclassification Journal",Text073,PageName(PAGE::"Whse. Reclassification Journal"));
          InsertSourceCode("Compress Whse. Entries",Text083,ReportName(REPORT::"Date Compress Whse. Entries"));
          InsertSourceCode("Whse. Put-away",Text077,Text080);
          InsertSourceCode("Whse. Pick",Text078,Text081);
          InsertSourceCode("Whse. Movement",Text079,Text082);
          InsertSourceCode("Service Management",Text074,Text075);
          InsertSourceCode("IC General Journal",Text084,Text085);
          InsertSourceCode("Cash Flow Worksheet",Text109,Text110);
          InsertSourceCode(Assembly,Text107,Text108);
          InsertSourceCode("G/L Entry to CA",Text111,Text112);
          InsertSourceCode("Cost Journal",Text113,Text114);
          InsertSourceCode("Cost Allocation",Text115,Text116);
          InsertSourceCode("Transfer Budget to Actual",Text117,Text118);
          InsertSourceCode("Financially Voided BACS",Text1040001,Text1040003);
          InsertSourceCode("Compress BACS Ledger",Text1040002,ReportName(REPORT::"Delete BACS Ledger Entries"));
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InitStandardTexts@11();
    VAR
      StandardText@1000 : Record 7;
    BEGIN
      IF NOT StandardText.FINDFIRST THEN BEGIN
        InsertStandardText(Text052,Text053);
        InsertStandardText(Text054,Text055);
        InsertStandardText(Text056,Text057);
        InsertStandardText(Text058,Text059);
      END;
    END;

    LOCAL PROCEDURE InitReportSelection@13();
    VAR
      ReportSelections@1000 : Record 77;
    BEGIN
      WITH ReportSelections DO
        IF NOT FINDFIRST THEN BEGIN
          InsertRepSelection(Usage::"S.Quote",'1',REPORT::"Sales - Quote");
          InsertRepSelection(Usage::"S.Blanket",'1',REPORT::"Blanket Sales Order");
          InsertRepSelection(Usage::"S.Order",'1',REPORT::"Order Confirmation");
          InsertRepSelection(Usage::"S.Work Order",'1',REPORT::"Work Order");
          InsertRepSelection(Usage::"S.Invoice",'1',REPORT::"Sales - Invoice");
          InsertRepSelection(Usage::"S.Return",'1',REPORT::"Return Order Confirmation");
          InsertRepSelection(Usage::"S.Cr.Memo",'1',REPORT::"Sales - Credit Memo");
          InsertRepSelection(Usage::"S.Shipment",'1',REPORT::"Sales - Shipment");
          InsertRepSelection(Usage::"S.Ret.Rcpt.",'1',REPORT::"Sales - Return Receipt");
          InsertRepSelection(Usage::"S.Test",'1',REPORT::"Sales Document - Test");
          InsertRepSelection(Usage::"P.Quote",'1',REPORT::"Purchase - Quote");
          InsertRepSelection(Usage::"P.Blanket",'1',REPORT::"Blanket Purchase Order");
          InsertRepSelection(Usage::"P.Order",'1',REPORT::Order);
          InsertRepSelection(Usage::"P.Invoice",'1',REPORT::"Purchase - Invoice");
          InsertRepSelection(Usage::"P.Return",'1',REPORT::"Return Order");
          InsertRepSelection(Usage::"P.Cr.Memo",'1',REPORT::"Purchase - Credit Memo");
          InsertRepSelection(Usage::"P.Receipt",'1',REPORT::"Purchase - Receipt");
          InsertRepSelection(Usage::"P.Ret.Shpt.",'1',REPORT::"Purchase - Return Shipment");
          InsertRepSelection(Usage::"P.Test",'1',REPORT::"Purchase Document - Test");
          InsertRepSelection(Usage::"B.Stmt",'1',REPORT::"Bank Account Statement");
          InsertRepSelection(Usage::"B.Recon.Test",'1',REPORT::"Bank Acc. Recon. - Test");
          InsertRepSelection(Usage::"B.Check",'1',REPORT::Check);
          InsertRepSelection(Usage::Reminder,'1',REPORT::Reminder);
          InsertRepSelection(Usage::"Fin.Charge",'1',REPORT::"Finance Charge Memo");
          InsertRepSelection(Usage::"Rem.Test",'1',REPORT::"Reminder - Test");
          InsertRepSelection(Usage::"F.C.Test",'1',REPORT::"Finance Charge Memo - Test");
          InsertRepSelection(Usage::Inv1,'1',REPORT::"Transfer Order");
          InsertRepSelection(Usage::Inv2,'1',REPORT::"Transfer Shipment");
          InsertRepSelection(Usage::Inv3,'1',REPORT::"Transfer Receipt");
          InsertRepSelection(Usage::"Invt. Period Test",'1',REPORT::"Close Inventory Period - Test");
          InsertRepSelection(Usage::"Prod. Order",'1',REPORT::"Prod. Order - Job Card");
          InsertRepSelection(Usage::M1,'1',REPORT::"Prod. Order - Job Card");
          InsertRepSelection(Usage::M2,'1',REPORT::"Prod. Order - Mat. Requisition");
          InsertRepSelection(Usage::M3,'1',REPORT::"Prod. Order - Shortage List");
          InsertRepSelection(Usage::"SM.Quote",'1',REPORT::"Service Quote");
          InsertRepSelection(Usage::"SM.Order",'1',REPORT::"Service Order");
          InsertRepSelection(Usage::"SM.Invoice",'1',REPORT::"Service - Invoice");
          InsertRepSelection(Usage::"SM.Credit Memo",'1',REPORT::"Service - Credit Memo");
          InsertRepSelection(Usage::"SM.Shipment",'1',REPORT::"Service - Shipment");
          InsertRepSelection(Usage::"SM.Contract Quote",'1',REPORT::"Service Contract Quote");
          InsertRepSelection(Usage::"SM.Contract",'1',REPORT::"Service Contract");
          InsertRepSelection(Usage::"SM.Test",'1',REPORT::"Service Document - Test");
          InsertRepSelection(Usage::"Asm. Order",'1',REPORT::"Assembly Order");
          InsertRepSelection(Usage::"P.Assembly Order",'1',REPORT::"Posted Assembly Order");
          InsertRepSelection(Usage::"S.Test Prepmt.",'1',REPORT::"Sales Prepmt. Document Test");
          InsertRepSelection(Usage::"P.Test Prepmt.",'1',REPORT::"Purchase Prepmt. Doc. - Test");
          InsertRepSelection(Usage::"S.Arch. Quote",'1',REPORT::"Archived Sales Quote");
          InsertRepSelection(Usage::"S.Arch. Order",'1',REPORT::"Archived Sales Order");
          InsertRepSelection(Usage::"P.Arch. Quote",'1',REPORT::"Archived Purchase Quote");
          InsertRepSelection(Usage::"P.Arch. Order",'1',REPORT::"Archived Purchase Order");
          InsertRepSelection(Usage::"P. Arch. Return Order",'1',REPORT::"Arch.Purch. Return Order");
          InsertRepSelection(Usage::"S. Arch. Return Order",'1',REPORT::"Arch. Sales Return Order");
          InsertRepSelection(Usage::"S.Order Pick Instruction",'1',REPORT::"Pick Instruction");
          InsertRepSelection(Usage::"C.Statement",'1',REPORT::Statement);
        END;
    END;

    LOCAL PROCEDURE InitJobWIPMethods@15();
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      IF NOT JobWIPMethod.FINDFIRST THEN BEGIN
        InsertJobWIPMethod(Text101,Text101,JobWIPMethod."Recognized Costs"::"At Completion",
          JobWIPMethod."Recognized Sales"::"At Completion",4);
        InsertJobWIPMethod(Text102,Text102,JobWIPMethod."Recognized Costs"::"Cost of Sales",
          JobWIPMethod."Recognized Sales"::"Contract (Invoiced Price)",2);
        InsertJobWIPMethod(Text103,Text103,JobWIPMethod."Recognized Costs"::"Cost Value",
          JobWIPMethod."Recognized Sales"::"Contract (Invoiced Price)",0);
        InsertJobWIPMethod(Text104,Text104,JobWIPMethod."Recognized Costs"::"Usage (Total Cost)",
          JobWIPMethod."Recognized Sales"::"Sales Value",1);
        InsertJobWIPMethod(Text106,Text105,JobWIPMethod."Recognized Costs"::"Usage (Total Cost)",
          JobWIPMethod."Recognized Sales"::"Percentage of Completion",3);
      END;
    END;

    LOCAL PROCEDURE InitBankExportImportSetup@14();
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      IF NOT BankExportImportSetup.FINDFIRST THEN BEGIN
        InsertBankExportImportSetup(SEPACTCodeTxt,SEPACTNameTxt,BankExportImportSetup.Direction::Export,
          CODEUNIT::"SEPA CT-Export File",XMLPORT::"SEPA CT pain.001.001.03",CODEUNIT::"SEPA CT-Check Line");
        InsertBankExportImportSetup(SEPADDCodeTxt,SEPADDNameTxt,BankExportImportSetup.Direction::Export,
          CODEUNIT::"SEPA DD-Export File",XMLPORT::"SEPA DD pain.008.001.02",CODEUNIT::"SEPA DD-Check Line");
        InsertBankExportImportSetup(BACSBankExportCodeTxt,BACSBankExportNameTxt,BankExportImportSetup.Direction::Export,
          CODEUNIT::"BACS Create Payment File",0,0);
      END;
    END;

    LOCAL PROCEDURE InitBankClearingStandard@18();
    VAR
      BankClearingStandard@1000 : Record 1280;
    BEGIN
      IF NOT BankClearingStandard.FINDFIRST THEN BEGIN
        InsertBankClearingStandard(BankClearingStandardCode1Tok,BankClearingStandardDesc1Txt);
        InsertBankClearingStandard(BankClearingStandardCode2Tok,BankClearingStandardDesc2Txt);
        InsertBankClearingStandard(BankClearingStandardCode3Tok,BankClearingStandardDesc3Txt);
        InsertBankClearingStandard(BankClearingStandardCode4Tok,BankClearingStandardDesc4Txt);
        InsertBankClearingStandard(BankClearingStandardCode5Tok,BankClearingStandardDesc5Txt);
        InsertBankClearingStandard(BankClearingStandardCode6Tok,BankClearingStandardDesc6Txt);
        InsertBankClearingStandard(BankClearingStandardCode7Tok,BankClearingStandardDesc7Txt);
        InsertBankClearingStandard(BankClearingStandardCode8Tok,BankClearingStandardDesc8Txt);
        InsertBankClearingStandard(BankClearingStandardCode9Tok,BankClearingStandardDesc9Txt);
        InsertBankClearingStandard(BankClearingStandardCode10Tok,BankClearingStandardDesc10Txt);
        InsertBankClearingStandard(BankClearingStandardCode11Tok,BankClearingStandardDesc11Txt);
        InsertBankClearingStandard(BankClearingStandardCode12Tok,BankClearingStandardDesc12Txt);
        InsertBankClearingStandard(BankClearingStandardCode13Tok,BankClearingStandardDesc13Txt);
        InsertBankClearingStandard(BankClearingStandardCode14Tok,BankClearingStandardDesc14Txt);
        InsertBankClearingStandard(BankClearingStandardCode15Tok,BankClearingStandardDesc15Txt);
        InsertBankClearingStandard(BankClearingStandardCode16Tok,BankClearingStandardDesc16Txt);
        InsertBankClearingStandard(BankClearingStandardCode17Tok,BankClearingStandardDesc17Txt);
        InsertBankClearingStandard(BankClearingStandardCode18Tok,BankClearingStandardDesc18Txt);
      END;
    END;

    LOCAL PROCEDURE InitBankDataConvServiceSetup@19();
    VAR
      BankDataConvServiceSetup@1000 : Record 1260;
      BankDataConvServMgt@1001 : Codeunit 1265;
    BEGIN
      IF NOT BankDataConvServiceSetup.GET THEN BEGIN
        BankDataConvServiceSetup.INIT;
        BankDataConvServiceSetup.INSERT;
        BankDataConvServMgt.SetURLsToDefault(BankDataConvServiceSetup);
      END;
    END;

    LOCAL PROCEDURE InitOcrServiceSetup@10();
    VAR
      OCRServiceSetup@1000 : Record 1270;
    BEGIN
      WITH OCRServiceSetup DO
        IF NOT GET THEN BEGIN
          INIT;
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InitDocExchServiceSetup@26();
    VAR
      DocExchServiceSetup@1000 : Record 1275;
    BEGIN
      WITH DocExchServiceSetup DO
        IF NOT GET THEN BEGIN
          INIT;
          INSERT;
        END;
    END;

    LOCAL PROCEDURE InitBankDataConversionPmtType@21();
    VAR
      BankDataConversionPmtType@1000 : Record 1281;
    BEGIN
      IF NOT BankDataConversionPmtType.FINDFIRST THEN BEGIN
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode1Tok,BankDataConvPmtTypeDesc1Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode2Tok,BankDataConvPmtTypeDesc2Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode3Tok,BankDataConvPmtTypeDesc3Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode4Tok,BankDataConvPmtTypeDesc4Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode5Tok,BankDataConvPmtTypeDesc5Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode6Tok,BankDataConvPmtTypeDesc6Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode7Tok,BankDataConvPmtTypeDesc7Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode8Tok,BankDataConvPmtTypeDesc8Txt);
        InsertBankDataConversionPmtType(BankDataConvPmtTypeCode9Tok,BankDataConvPmtTypeDesc9Txt);
      END;
    END;

    LOCAL PROCEDURE InitVATRegNrValidationSetup@22();
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      VATLookupExtDataHndl@1001 : Codeunit 248;
    BEGIN
      IF GeneralLedgerSetup.GET THEN
        IF GeneralLedgerSetup."VAT Reg. No. Validation URL" = '' THEN BEGIN
          GeneralLedgerSetup."VAT Reg. No. Validation URL" := VATLookupExtDataHndl.GetVATRegNrValidationWebServiceURL;
          GeneralLedgerSetup.MODIFY;
        END;
    END;

    LOCAL PROCEDURE InitElectronicFormats@23();
    VAR
      ElectronicDocumentFormat@1000 : Record 61;
    BEGIN
      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Inv. - PEPPOL 2.1",ElectronicDocumentFormat.Usage::"Sales Invoice");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Cr.M. - PEPPOL2.1",ElectronicDocumentFormat.Usage::"Sales Credit Memo");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Serv. Inv. - PEPPOL 2.1",ElectronicDocumentFormat.Usage::"Service Invoice");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Exp. Service Cr.M. - PEPPOL2.1",ElectronicDocumentFormat.Usage::"Service Credit Memo");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Validation",ElectronicDocumentFormat.Usage::"Sales Validation");

      InsertElectronicFormat(
        PEPPOL21_ElectronicFormatTxt,PEPPOL21_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Service Validation",ElectronicDocumentFormat.Usage::"Service Validation");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Inv. - PEPPOL 2.0",ElectronicDocumentFormat.Usage::"Sales Invoice");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Sales Cr.M. - PEPPOL2.0",ElectronicDocumentFormat.Usage::"Sales Credit Memo");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Export Serv. Inv. - PEPPOL 2.0",ElectronicDocumentFormat.Usage::"Service Invoice");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"Exp. Service Cr.M. - PEPPOL2.0",ElectronicDocumentFormat.Usage::"Service Credit Memo");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Validation",ElectronicDocumentFormat.Usage::"Sales Validation");

      InsertElectronicFormat(
        PEPPOL20_ElectronicFormatTxt,PEPPOL20_ElectronicFormatDescriptionTxt,
        CODEUNIT::"PEPPOL Service Validation",ElectronicDocumentFormat.Usage::"Service Validation");
    END;

    LOCAL PROCEDURE InsertSourceCode@1(VAR SourceCodeDefCode@1000 : Code[10];Code@1001 : Code[10];Description@1002 : Text[50]);
    VAR
      SourceCode@1003 : Record 230;
    BEGIN
      SourceCodeDefCode := Code;
      SourceCode.INIT;
      SourceCode.Code := Code;
      SourceCode.Description := Description;
      SourceCode.INSERT;
    END;

    LOCAL PROCEDURE InsertStandardText@4(Code@1000 : Code[20];Description@1001 : Text[50]);
    VAR
      StandardText@1002 : Record 7;
    BEGIN
      StandardText.INIT;
      StandardText.Code := Code;
      StandardText.Description := Description;
      StandardText.INSERT;
    END;

    LOCAL PROCEDURE InsertRepSelection@2(ReportUsage@1000 : Integer;Sequence@1001 : Code[10];ReportID@1002 : Integer);
    VAR
      ReportSelections@1003 : Record 77;
    BEGIN
      ReportSelections.INIT;
      ReportSelections.Usage := ReportUsage;
      ReportSelections.Sequence := Sequence;
      ReportSelections."Report ID" := ReportID;
      ReportSelections.INSERT;
    END;

    LOCAL PROCEDURE PageName@5(PageID@1000 : Integer) : Text[50];
    VAR
      ObjectTranslation@1001 : Record 377;
    BEGIN
      EXIT(COPYSTR(ObjectTranslation.TranslateObject(ObjectTranslation."Object Type"::Page,PageID),1,30));
    END;

    LOCAL PROCEDURE ReportName@6(ReportID@1000 : Integer) : Text[50];
    VAR
      ObjectTranslation@1001 : Record 377;
    BEGIN
      EXIT(COPYSTR(ObjectTranslation.TranslateObject(ObjectTranslation."Object Type"::Report,ReportID),1,30));
    END;

    LOCAL PROCEDURE InsertClientAddIns@8();
    VAR
      ClientAddIn@1000 : Record 2000000069;
    BEGIN
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.DynamicsOnlineConnect','31bf3856ad364e35','',
        ClientAddIn.Category::"DotNet Control Add-in",
        'Microsoft Dynamics Online Connect control add-in','');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.BusinessChart','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Dynamics BusinessChart control add-in',
        APPLICATIONPATH + 'Add-ins\BusinessChart\Microsoft.Dynamics.Nav.Client.BusinessChart.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.TimelineVisualization','31bf3856ad364e35','',
        ClientAddIn.Category::"DotNet Control Add-in",
        'Interactive visualizion for a timeline of events','');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.PingPong','31bf3856ad364e35','',
        ClientAddIn.Category::"DotNet Control Add-in",
        'Microsoft Dynamics PingPong control add-in','');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.VideoPlayer','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Dynamics VideoPlayer control add-in',
        APPLICATIONPATH + 'Add-ins\VideoPlayer\Microsoft.Dynamics.Nav.Client.VideoPlayer.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.PageReady','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Dynamics PageReady control add-in',
        APPLICATIONPATH + 'Add-ins\PageReady\Microsoft.Dynamics.Nav.Client.PageReady.zip');
      InsertClientAddIn(
        'Microsoft.Dynamics.Nav.Client.SocialListening','31bf3856ad364e35','',
        ClientAddIn.Category::"JavaScript Control Add-in",
        'Microsoft Social Listening control add-in',
        APPLICATIONPATH + 'Add-ins\SocialListening\Microsoft.Dynamics.Nav.Client.SocialListening.zip');
    END;

    LOCAL PROCEDURE InsertClientAddIn@17(ControlAddInName@1000 : Text[220];PublicKeyToken@1001 : Text[20];Version@1002 : Text[25];Category@1006 : Option;Description@1003 : Text[250];ResourceFilePath@1005 : Text[250]);
    VAR
      ClientAddIn@1004 : Record 2000000069;
    BEGIN
      IF ClientAddIn.GET(ControlAddInName,PublicKeyToken,Version) THEN
        EXIT;

      ClientAddIn.INIT;
      ClientAddIn."Add-in Name" := ControlAddInName;
      ClientAddIn."Public Key Token" := PublicKeyToken;
      ClientAddIn.Version := Version;
      ClientAddIn.Category := Category;
      ClientAddIn.Description := Description;
      IF EXISTS(ResourceFilePath) THEN
        ClientAddIn.Resource.IMPORT(ResourceFilePath);
      IF ClientAddIn.INSERT THEN;
    END;

    LOCAL PROCEDURE InsertJobWIPMethod@7(Code@1000 : Code[20];Description@1001 : Text[50];RecognizedCosts@1002 : Option;RecognizedSales@1003 : Option;SystemDefinedIndex@1004 : Integer);
    VAR
      JobWIPMethod@1005 : Record 1006;
    BEGIN
      JobWIPMethod.INIT;
      JobWIPMethod.Code := Code;
      JobWIPMethod.Description := Description;
      JobWIPMethod."WIP Cost" := TRUE;
      JobWIPMethod."WIP Sales" := TRUE;
      JobWIPMethod."Recognized Costs" := RecognizedCosts;
      JobWIPMethod."Recognized Sales" := RecognizedSales;
      JobWIPMethod.Valid := TRUE;
      JobWIPMethod."System Defined" := TRUE;
      JobWIPMethod."System-Defined Index" := SystemDefinedIndex;
      JobWIPMethod.INSERT;
    END;

    LOCAL PROCEDURE InsertBankExportImportSetup@16(CodeTxt@1000 : Text[20];NameTxt@1001 : Text[100];DirectionOpt@1002 : Option;CodeunitID@1003 : Integer;XMLPortID@1004 : Integer;CheckCodeunitID@1006 : Integer);
    VAR
      BankExportImportSetup@1005 : Record 1200;
    BEGIN
      WITH BankExportImportSetup DO BEGIN
        INIT;
        Code := CodeTxt;
        Name := NameTxt;
        Direction := DirectionOpt;
        "Processing Codeunit ID" := CodeunitID;
        "Processing XMLport ID" := XMLPortID;
        "Check Export Codeunit" := CheckCodeunitID;
        "Preserve Non-Latin Characters" := FALSE;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertBankClearingStandard@12(CodeText@1001 : Text[50];DescriptionText@1002 : Text[80]);
    VAR
      BankClearingStandard@1000 : Record 1280;
    BEGIN
      WITH BankClearingStandard DO BEGIN
        INIT;
        Code := CodeText;
        Description := DescriptionText;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertBankDataConversionPmtType@20(CodeText@1001 : Text[50];DescriptionText@1002 : Text[80]);
    VAR
      BankDataConversionPmtType@1000 : Record 1281;
    BEGIN
      WITH BankDataConversionPmtType DO BEGIN
        INIT;
        Code := CodeText;
        Description := DescriptionText;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertElectronicFormat@24(Code@1000 : Code[20];Description@1001 : Text[250];CodeunitID@1002 : Integer;Usage@1004 : Option);
    VAR
      ElectronicDocumentFormat@1003 : Record 61;
    BEGIN
      IF ElectronicDocumentFormat.GET(Code,Usage) THEN
        EXIT;

      ElectronicDocumentFormat.INIT;
      ElectronicDocumentFormat.Code := Code;
      ElectronicDocumentFormat.Description := Description;
      ElectronicDocumentFormat."Codeunit ID" := CodeunitID;
      ElectronicDocumentFormat.Usage := Usage;
      ElectronicDocumentFormat.INSERT;
    END;

    BEGIN
    END.
  }
}

