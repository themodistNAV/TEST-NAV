OBJECT Table 9062714 PSM Setup
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    CaptionML=[ENU=PSM Setup;
               ENG=PSM Setup];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              ENG=Primary Key] }
    { 2   ;   ;Default Server Name ;Text30        ;CaptionML=[ENU=Default Server Name;
                                                              ENG=Default Server Name] }
    { 3   ;   ;User ID Store       ;BLOB          ;CaptionML=[ENU=User ID Store;
                                                              ISL=Geymsla notandakennis;
                                                              ENG=User ID Store] }
    { 4   ;   ;Password Store      ;BLOB          ;CaptionML=[ENU=Password Store;
                                                              ISL=Geymsla lykilor–s;
                                                              ENG=Password Store] }
    { 5   ;   ;Domain (Optional)   ;Text30        ;CaptionML=[ENU=Domain (Optional);
                                                              ENG=Domain (Optional)] }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CheckEncryption@10000201();
    VAR
      EncryptionIsNotEnabled@10000200 : TextConst 'ENU=Encryption has not been enabled, enable now ?;ISL=Dulk¢–un hefur ekki veri– virkju–, virkja n£na ?;ENG=Encryption has not been enabled, enable now ?';
    BEGIN
      IF NOT ENCRYPTIONENABLED THEN
        IF CONFIRM(EncryptionIsNotEnabled,TRUE) THEN
          PAGE.RUNMODAL(PAGE::"Data Encryption Management");
    END;

    PROCEDURE SetUserID@10000202(Value@1000 : Text[1024]);
    VAR
      DataStream@1001 : OutStream;
      DataText@1002 : BigText;
    BEGIN
      CLEAR("User ID Store");
      DataText.ADDTEXT(ENCRYPT(Value));
      "User ID Store".CREATEOUTSTREAM(DataStream);
      DataText.WRITE(DataStream);
    END;

    PROCEDURE GetUserID@10000203() Value : Text[1024];
    VAR
      DataStream@1000 : InStream;
      DataText@1001 : BigText;
    BEGIN
      Value := '';
      CALCFIELDS("User ID Store");
      IF "User ID Store".HASVALUE THEN BEGIN
        "User ID Store".CREATEINSTREAM(DataStream);
        DataText.READ(DataStream);
        DataText.GETSUBTEXT(Value,1);
      END;
      EXIT(DECRYPT(Value));
    END;

    PROCEDURE SetPassword@10000204(Value@1000 : Text[1024]);
    VAR
      DataStream@1001 : OutStream;
      DataText@1002 : BigText;
    BEGIN
      CLEAR("Password Store");
      DataText.ADDTEXT(ENCRYPT(Value));
      "Password Store".CREATEOUTSTREAM(DataStream);
      DataText.WRITE(DataStream);
    END;

    PROCEDURE GetPassword@10000205() Value : Text[1024];
    VAR
      DataStream@1000 : InStream;
      DataText@1001 : BigText;
    BEGIN
      Value := '';
      CALCFIELDS("Password Store");
      IF "Password Store".HASVALUE THEN BEGIN
        "Password Store".CREATEINSTREAM(DataStream);
        DataText.READ(DataStream);
        DataText.GETSUBTEXT(Value,1);
      END;
      EXIT(DECRYPT(Value));
    END;

    PROCEDURE GetLoginID@2() : Text[1024];
    BEGIN
      IF "Domain (Optional)" <> '' THEN
        EXIT("Domain (Optional)" + '\' + GetUserID)
      ELSE
        EXIT(GetUserID);
    END;

    BEGIN
    {
      //DOC NA2015.7  AP 03/06/2015 - Created
      //DOC NA2016.7  JH 26/08/2015 - Upgraded to 2016
      //DOC NA2016.15 JH 06/05/2016 - CfMD amendments
    }
    END.
  }
}

