OBJECT Codeunit 1250 Match General Journal Lines
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00 PM;
    Version List=NAVW18.00;
  }
  PROPERTIES
  {
    TableNo=81;
    OnRun=VAR
            GenJnlLine@1000 : Record 81;
          BEGIN
            GenJnlLine.COPY(Rec);
            Code(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
            Rec := GenJnlLine;
          END;

  }
  CODE
  {
    VAR
      MatchSummaryMsg@1000 : TextConst 'ENU=%1 payment lines out of %2 are matched.\\;ENG=%1 payment lines out of %2 are matched.\\';
      MissingMatchMsg@1001 : TextConst 'ENU=Text shorter than %1 characters cannot be matched.;ENG=Text shorter than %1 characters cannot be matched.';
      ProgressBarMsg@1002 : TextConst 'ENU=Please wait while the operation is being completed.;ENG=Please wait while the operation is being completed.';
      MatchLengthTreshold@1061 : Integer;
      NormalizingFactor@1062 : Integer;

    PROCEDURE Code@1(TemplateName@1000 : Code[10];BatchName@1003 : Code[10]);
    VAR
      TempBankStatementMatchingBuffer@1004 : TEMPORARY Record 1250;
      GenJournalBatch@1001 : Record 232;
      TempGenJournalLine@1002 : TEMPORARY Record 81;
      Window@1005 : Dialog;
    BEGIN
      GenJournalBatch.GET(TemplateName,BatchName);
      Window.OPEN(ProgressBarMsg);
      SetMatchLengthThreshold(4);
      SetNormalizingFactor(10);
      FillTempGenJournalLine(GenJournalBatch,TempGenJournalLine);
      FindMatchingCustEntries(TempBankStatementMatchingBuffer,TempGenJournalLine);
      FindMatchingVendorEntries(TempBankStatementMatchingBuffer,TempGenJournalLine);
      SaveOneToOneMatching(TempBankStatementMatchingBuffer,GenJournalBatch);

      FillTempGenJournalLine(GenJournalBatch,TempGenJournalLine);
      FindAccountMappings(TempGenJournalLine);

      Window.CLOSE;
      ShowMatchSummary(GenJournalBatch);
    END;

    LOCAL PROCEDURE FindMatchingCustEntries@8(VAR TempBankStatementMatchingBuffer@1000 : TEMPORARY Record 1250;VAR TempGenJournalLine@1001 : TEMPORARY Record 81);
    VAR
      CustLedgerEntry@1002 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.SETFILTER("Document Type",'<>%1&<>%2',
        CustLedgerEntry."Document Type"::Payment,CustLedgerEntry."Document Type"::Refund);
      CustLedgerEntry.SETRANGE("Applies-to ID",'');
      CustLedgerEntry.SETAUTOCALCFIELDS("Remaining Amt. (LCY)");
      IF CustLedgerEntry.FINDSET THEN
        REPEAT
          FindMatchingCustEntry(TempBankStatementMatchingBuffer,CustLedgerEntry,TempGenJournalLine);
        UNTIL CustLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE FindMatchingCustEntry@10(VAR TempBankStatementMatchingBuffer@1001 : TEMPORARY Record 1250;VAR CustLedgerEntry@1004 : Record 21;VAR GenJournalLine@1000 : Record 81);
    VAR
      Customer@1005 : Record 18;
      Score@1003 : Integer;
    BEGIN
      Customer.GET(CustLedgerEntry."Customer No.");
      IF GenJournalLine.FINDSET THEN
        REPEAT
          Score := GetMatchScore(GenJournalLine,CustLedgerEntry."Document No.",Customer."No.",CustLedgerEntry."External Document No.",
              Customer.Name,CustLedgerEntry."Remaining Amt. (LCY)",1,CustLedgerEntry."Posting Date");
          IF Score > 5 THEN
            TempBankStatementMatchingBuffer.AddMatchCandidate(GenJournalLine."Line No.",CustLedgerEntry."Entry No.",Score,
              TempBankStatementMatchingBuffer."Account Type"::Customer,CustLedgerEntry."Customer No.");
        UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FindMatchingVendorEntries@7(VAR TempBankStatementMatchingBuffer@1000 : TEMPORARY Record 1250;VAR TempGenJournalLine@1001 : TEMPORARY Record 81);
    VAR
      VendorLedgerEntry@1002 : Record 25;
    BEGIN
      VendorLedgerEntry.SETRANGE(Open,TRUE);
      VendorLedgerEntry.SETFILTER("Document Type",'<>%1&<>%2',
        VendorLedgerEntry."Document Type"::Payment,VendorLedgerEntry."Document Type"::Refund);
      VendorLedgerEntry.SETRANGE("Applies-to ID",'');
      VendorLedgerEntry.SETAUTOCALCFIELDS("Remaining Amt. (LCY)");
      IF VendorLedgerEntry.FINDSET THEN
        REPEAT
          FindMatchingVendorEntry(TempBankStatementMatchingBuffer,VendorLedgerEntry,TempGenJournalLine);
        UNTIL VendorLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE FindMatchingVendorEntry@2(VAR TempBankStatementMatchingBuffer@1001 : TEMPORARY Record 1250;VAR VendorLedgerEntry@1004 : Record 25;VAR GenJournalLine@1000 : Record 81);
    VAR
      Vendor@1002 : Record 23;
      Score@1003 : Integer;
    BEGIN
      Vendor.GET(VendorLedgerEntry."Vendor No.");
      IF GenJournalLine.FINDSET THEN
        REPEAT
          Score := GetMatchScore(GenJournalLine,VendorLedgerEntry."Document No.",Vendor."No.",
              VendorLedgerEntry."External Document No.",Vendor.Name,VendorLedgerEntry."Remaining Amt. (LCY)",-1,
              VendorLedgerEntry."Posting Date");
          IF Score > 5 THEN
            TempBankStatementMatchingBuffer.AddMatchCandidate(GenJournalLine."Line No.",VendorLedgerEntry."Entry No.",Score,
              TempBankStatementMatchingBuffer."Account Type"::Vendor,VendorLedgerEntry."Vendor No.");
        UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FindAccountMappings@9(VAR TempGenJournalLine@1000 : TEMPORARY Record 81);
    VAR
      TextToAccMapping@1002 : Record 1251;
      GenJournalLine@1003 : Record 81;
      PaymentDocType@1001 : Option;
      InvoiceDocType@1005 : Option;
    BEGIN
      WITH TempGenJournalLine DO
        IF FINDSET THEN
          REPEAT
            IF GetAccountMapping(TextToAccMapping,Description) THEN BEGIN
              GenJournalLine.GET("Journal Template Name","Journal Batch Name","Line No.");
              CASE TextToAccMapping."Bal. Source Type" OF
                TextToAccMapping."Bal. Source Type"::"G/L Account":
                  UpdateGenJnlLine(
                    GenJournalLine,GenJournalLine."Document Type",
                    GenJournalLine."Account Type"::"G/L Account",
                    TextToAccMapping.GetAccountNo(GenJournalLine.Amount),'');
                TextToAccMapping."Bal. Source Type"::Customer,
                TextToAccMapping."Bal. Source Type"::Vendor:
                  IF TextToAccMapping."Bal. Source No." <> '' THEN BEGIN
                    TextToAccMapping.GetPaymentDocType(PaymentDocType,TextToAccMapping."Bal. Source Type",GenJournalLine.Amount);
                    TextToAccMapping.GetDocTypeForPmt(InvoiceDocType,PaymentDocType);
                    UpdateGenJnlLine(
                      GenJournalLine,PaymentDocType,
                      TextToAccMapping."Bal. Source Type",TextToAccMapping."Bal. Source No.",'');
                    CreateInvoiceLineFromPayment(
                      GenJournalLine,InvoiceDocType,
                      PaymentDocType,TextToAccMapping.GetAccountNo(GenJournalLine.Amount));
                  END;
              END;
            END;
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE GetAccountMapping@11(VAR TextToAccMapping@1000 : Record 1251;Description@1001 : Text) : Boolean;
    VAR
      RecordMatchMgt@1002 : Codeunit 1251;
      MaxNearness@1004 : Integer;
      Nearness@1005 : Integer;
      MatchLineNo@1006 : Integer;
    BEGIN
      Description := RecordMatchMgt.Trim(Description);
      TextToAccMapping.SETFILTER("Mapping Text",'%1','@' + Description);
      IF TextToAccMapping.FINDFIRST THEN
        EXIT(TRUE);

      TextToAccMapping.RESET;
      MaxNearness := 0;
      IF TextToAccMapping.FINDSET THEN
        REPEAT
          IF Description = RecordMatchMgt.Trim(TextToAccMapping."Mapping Text") THEN
            EXIT(TRUE);

          Nearness := RecordMatchMgt.CalculateStringNearness(' ' + RecordMatchMgt.Trim(TextToAccMapping."Mapping Text") + ' ',
              Description,STRLEN(TextToAccMapping."Mapping Text") + 1,10);
          IF Nearness > MaxNearness THEN BEGIN
            MaxNearness := Nearness;
            MatchLineNo := TextToAccMapping."Line No.";
          END;
        UNTIL TextToAccMapping.NEXT = 0;

      IF TextToAccMapping.GET(MatchLineNo) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetNextAvailableLineNo@36(GenJournalLine@1001 : Record 81) : Integer;
    VAR
      GenJournalLine2@1000 : Record 81;
    BEGIN
      WITH GenJournalLine2 DO BEGIN
        SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
        SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
        SETFILTER("Line No.",'>%1',GenJournalLine."Line No.");
        IF FINDFIRST THEN
          EXIT(GenJournalLine."Line No." + ("Line No." - GenJournalLine."Line No.") DIV 2);
      END;

      EXIT(GenJournalLine."Line No." + 10000);
    END;

    LOCAL PROCEDURE SaveOneToOneMatching@28(VAR TempBankStatementMatchingBuffer@1000 : TEMPORARY Record 1250;VAR GenJournalBatch@1001 : Record 232);
    VAR
      GenJournalLine@1003 : Record 81;
    BEGIN
      TempBankStatementMatchingBuffer.RESET;
      TempBankStatementMatchingBuffer.SETCURRENTKEY(Quality);
      TempBankStatementMatchingBuffer.ASCENDING(FALSE);

      IF TempBankStatementMatchingBuffer.FINDSET THEN
        REPEAT
          GenJournalLine.GET(GenJournalBatch."Journal Template Name",
            GenJournalBatch.Name,TempBankStatementMatchingBuffer."Line No.");
          ApplyRecords(GenJournalLine,TempBankStatementMatchingBuffer);
        UNTIL TempBankStatementMatchingBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE ApplyRecords@30(VAR GenJournalLine@1000 : Record 81;VAR TempBankStatementMatchingBuffer@1003 : TEMPORARY Record 1250);
    VAR
      CustLedgerEntry@1002 : Record 21;
      VendorLedgerEntry@1001 : Record 25;
    BEGIN
      CASE TempBankStatementMatchingBuffer."Account Type" OF
        TempBankStatementMatchingBuffer."Account Type"::Customer:
          IF CustLedgerEntry.GET(TempBankStatementMatchingBuffer."Entry No.") THEN
            IF (GenJournalLine."Applies-to ID" = '') AND (CustLedgerEntry."Applies-to ID" = '') THEN BEGIN
              UpdateGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Payment,
                GenJournalLine."Account Type"::Customer,CustLedgerEntry."Customer No.",GenJournalLine."Document No.");
              PrepareCustLedgerEntryForApplication(CustLedgerEntry,GenJournalLine);
            END;
        TempBankStatementMatchingBuffer."Account Type"::Vendor:
          IF VendorLedgerEntry.GET(TempBankStatementMatchingBuffer."Entry No.") THEN
            IF (GenJournalLine."Applies-to ID" = '') AND (VendorLedgerEntry."Applies-to ID" = '') THEN BEGIN
              UpdateGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Payment,
                GenJournalLine."Account Type"::Vendor,VendorLedgerEntry."Vendor No.",GenJournalLine."Document No.");
              PrepareVendorLedgerEntryForApplication(VendorLedgerEntry,GenJournalLine);
            END;
      END;
    END;

    LOCAL PROCEDURE CreateInvoiceLineFromPayment@17(VAR GenJournalLine@1000 : Record 81;DocType@1004 : Option;AppliesToDocType@1001 : Option;BalAccountNo@1002 : Code[20]);
    VAR
      GenJournalLine2@1003 : Record 81;
    BEGIN
      WITH GenJournalLine2 DO BEGIN
        COPY(GenJournalLine);
        "Line No." := GetNextAvailableLineNo(GenJournalLine);
        IF "Line No." = GenJournalLine."Line No." THEN
          EXIT;
        VALIDATE(Amount,-Amount);
        VALIDATE("Document Type",DocType);
        VALIDATE("Applies-to Doc. Type",AppliesToDocType);
        VALIDATE("Applies-to Doc. No.",GenJournalLine."Document No.");
        VALIDATE("Bal. Account Type","Bal. Account Type"::"G/L Account");
        VALIDATE("Bal. Account No.",BalAccountNo);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateGenJnlLine@3(VAR GenJournalLine@1000 : Record 81;DocType@1005 : Option;AccountType@1001 : Option;AccountNo@1002 : Code[20];AppliesToDocID@1004 : Code[50]);
    VAR
      OrigCurrencyCode@1060 : Code[10];
    BEGIN
      OrigCurrencyCode := GenJournalLine."Currency Code";
      GenJournalLine.VALIDATE("Document Type",DocType);
      GenJournalLine.VALIDATE("Account Type",AccountType);
      GenJournalLine.VALIDATE("Account No.",AccountNo);
      GenJournalLine.VALIDATE("Applies-to ID",AppliesToDocID);
      IF OrigCurrencyCode <> GenJournalLine."Currency Code" THEN
        GenJournalLine.VALIDATE("Currency Code",OrigCurrencyCode);
      GenJournalLine.VALIDATE("Applied Automatically",TRUE);
      GenJournalLine.MODIFY(TRUE);
    END;

    PROCEDURE PrepareCustLedgerEntryForApplication@4(VAR CustLedgerEntry@1000 : Record 21;VAR GenJournalLine@1001 : Record 81);
    BEGIN
      CustLedgerEntry.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      CustLedgerEntry."Applies-to ID" := GenJournalLine."Document No.";
      IF ABS(CustLedgerEntry."Remaining Amt. (LCY)") < ABS(GenJournalLine."Amount (LCY)") THEN
        CustLedgerEntry."Amount to Apply" := CustLedgerEntry."Remaining Amount"
      ELSE
        CustLedgerEntry."Amount to Apply" := -GenJournalLine.Amount;

      CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgerEntry);
    END;

    LOCAL PROCEDURE PrepareVendorLedgerEntryForApplication@5(VAR VendorLedgerEntry@1000 : Record 25;VAR GenJournalLine@1001 : Record 81);
    BEGIN
      VendorLedgerEntry.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      VendorLedgerEntry."Applies-to ID" := GenJournalLine."Document No.";
      IF ABS(VendorLedgerEntry."Remaining Amt. (LCY)") < ABS(GenJournalLine."Amount (LCY)") THEN
        VendorLedgerEntry."Amount to Apply" := VendorLedgerEntry."Remaining Amount"
      ELSE
        VendorLedgerEntry."Amount to Apply" := -GenJournalLine.Amount;

      CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendorLedgerEntry);
    END;

    PROCEDURE FillTempGenJournalLine@6(VAR GenJournalBatch@1000 : Record 232;VAR TempGenJournalLine@1001 : TEMPORARY Record 81);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      TempGenJournalLine.DELETEALL;
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.SETRANGE("Applies-to ID",'');
      GenJournalLine.SETRANGE("Account No.",'');
      GenJournalLine.SETRANGE("Applied Automatically",FALSE);
      GenJournalLine.SETFILTER("Document Type",'%1|%2',
        GenJournalLine."Document Type"::" ",
        GenJournalLine."Document Type"::Payment);
      IF GenJournalLine.FINDSET THEN
        REPEAT
          TempGenJournalLine := GenJournalLine;
          TempGenJournalLine.INSERT;
        UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ShowMatchSummary@13(GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalLine@1001 : Record 81;
      FinalText@1006 : Text;
      AdditionalText@1005 : Text;
      TotalCount@1002 : Integer;
      MatchedCount@1003 : Integer;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.SETFILTER("Document Type",'%1|%2|%3',
        GenJournalLine."Document Type"::" ",GenJournalLine."Document Type"::Payment,GenJournalLine."Document Type"::Refund);
      TotalCount := GenJournalLine.COUNT;

      GenJournalLine.SETRANGE("Applied Automatically",TRUE);
      MatchedCount := GenJournalLine.COUNT;

      IF MatchedCount < TotalCount THEN
        AdditionalText := STRSUBSTNO(MissingMatchMsg,FORMAT(GetMatchLengthTreshold));
      FinalText := STRSUBSTNO(MatchSummaryMsg,MatchedCount,TotalCount) + AdditionalText;
      MESSAGE(FinalText);
    END;

    LOCAL PROCEDURE GetMatchScore@14(GenJournalLine@1001 : Record 81;DocumentNo@1003 : Code[20];CustVendorNo@1009 : Code[20];ExternalDocNo@1007 : Code[35];CustVendorName@1004 : Text[50];RemainingAmountLCY@1005 : Decimal;PreferredSign@1006 : Integer;EntryPostingDate@1060 : Date) : Integer;
    VAR
      Score@1000 : Integer;
    BEGIN
      IF GenJournalLine."Amount (LCY)" * RemainingAmountLCY > 0 THEN
        EXIT(0);

      IF GenJournalLine."Posting Date" < EntryPostingDate THEN
        EXIT(0);

      Score += GetDescriptionMatchScore(GenJournalLine.Description,DocumentNo,CustVendorNo,ExternalDocNo,CustVendorName);

      Score += GetDescriptionMatchScore(GenJournalLine."Payer Information",DocumentNo,CustVendorNo,ExternalDocNo,CustVendorName);

      Score += GetDescriptionMatchScore(GenJournalLine."Transaction Information",DocumentNo,CustVendorNo,ExternalDocNo,CustVendorName);

      IF GenJournalLine."Amount (LCY)" = -RemainingAmountLCY THEN
        Score += 4;

      IF PreferredSign * GenJournalLine.Amount < 0 THEN
        Score += 2;

      EXIT(Score);
    END;

    LOCAL PROCEDURE GetDescriptionMatchScore@12(Description@1002 : Text;DocumentNo@1003 : Code[20];CustVendorNo@1006 : Code[20];ExternalDocNo@1004 : Code[35];CustVendorName@1005 : Text[50]) : Integer;
    VAR
      RecordMatchMgt@1007 : Codeunit 1251;
      Score@1000 : Integer;
      Nearness@1001 : Integer;
      MatchLengthTreshold@1061 : Integer;
      NormalizingFactor@1060 : Integer;
    BEGIN
      Description := RecordMatchMgt.Trim(Description);
      MatchLengthTreshold := GetMatchLengthTreshold;
      NormalizingFactor := GetNormalizingFactor;
      Score := 0;

      Nearness := RecordMatchMgt.CalculateStringNearness(DocumentNo,Description,MatchLengthTreshold,NormalizingFactor);
      IF Nearness = NormalizingFactor THEN
        Score += 13;

      Nearness := RecordMatchMgt.CalculateStringNearness(CustVendorNo,Description,MatchLengthTreshold,NormalizingFactor);
      IF Nearness = NormalizingFactor THEN
        Score += Nearness;

      Nearness := RecordMatchMgt.CalculateStringNearness(ExternalDocNo,Description,MatchLengthTreshold,NormalizingFactor);
      IF Nearness = NormalizingFactor THEN
        Score += Nearness;

      Nearness := RecordMatchMgt.CalculateStringNearness(CustVendorName,Description,MatchLengthTreshold,NormalizingFactor);
      IF Nearness >= 0.8 * NormalizingFactor THEN
        Score += Nearness;

      EXIT(Score)
    END;

    PROCEDURE SetMatchLengthThreshold@1060(NewMatchLengthThreshold@1060 : Integer);
    BEGIN
      MatchLengthTreshold := NewMatchLengthThreshold;
    END;

    PROCEDURE SetNormalizingFactor@15(NewNormalizingFactor@1061 : Integer);
    BEGIN
      NormalizingFactor := NewNormalizingFactor;
    END;

    PROCEDURE GetMatchLengthTreshold@1062() : Integer;
    BEGIN
      EXIT(MatchLengthTreshold);
    END;

    PROCEDURE GetNormalizingFactor@1063() : Integer;
    BEGIN
      EXIT(NormalizingFactor);
    END;

    BEGIN
    END.
  }
}

