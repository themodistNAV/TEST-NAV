OBJECT Codeunit 9086950 nF. Management
{
  OBJECT-PROPERTIES
  {
    Date=22/12/16;
    Time=10:39:47 AM;
    Version List=NF2016.17.11;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NfSetup@1000000000 : Record 9086950;
      NfLog@1000000013 : Record 9086967;
      NfPermissionManagement@1000000016 : Codeunit 9086960;
      tProfileId@1000000003 : TextConst 'ENU=nFORCEMENT;ENG=nFORCEMENT';
      tProfileDescription@1000000002 : TextConst 'ENU=nForcement;ENG=nForcement';
      NfIIf@1000000001 : Codeunit 9086975;
      NfObjectToolkit@1000000017 : Codeunit 9086974;
      Profile@1000000004 : Record 2000000072;
      JobQueue@1000000005 : Record 470;
      JobQueueCategory@1000000010 : Record 471;
      JobQueueEntry@1000000006 : Record 472;
      tJobQueueCode@1000000007 : TextConst 'ENU=nFORCEMNT;ENG=nFORCEMNT';
      tJobQueueDescription@1000000008 : TextConst 'ENU=nForcement;ENG=nForcement';
      tJobQueueCategoryCode@1000000009 : TextConst 'ENU=nFORCEMNT;ENG=nFORCEMNT';
      tJobQueueCategoryDescription@1000000011 : TextConst 'ENU=nForcement;ENG=nForcement';
      tProfileLogActivity@1000000012 : TextConst 'ENU=Profile;ENG=Profile';
      tJobQueueLogActivity@1000000015 : TextConst 'ENU=Job Queue;ENG=Job Queue';
      tLogCreatedMessage@1000000014 : TextConst 'ENU="""%1"" ''%2'' has been created.";ENG="""%1"" ''%2'' has been created."';

    LOCAL PROCEDURE "--- Activity ---"@1000000000();
    BEGIN
    END;

    PROCEDURE UpdateActivity@1000000001(VAR pActivity@1000000002 : Integer;pRecordExists@1000000001 : Boolean) : Integer;
    VAR
      lActivity@1000000000 : Integer;
    BEGIN
      ///<summary>Updating activity</summary>
      ///<param name="pActivity">The activity</param>
      ///<param name="pRecordExists">Flag if record exists</param>
      ///<returns>Updated activity</returns>

      CASE (pActivity) OF
        NfSetup.Activity::Insert,
        NfSetup.Activity::Modify:
          lActivity := NfIIf.Integer(pRecordExists, NfSetup.Activity::Modify, NfSetup.Activity::Insert);
        NfSetup.Activity::Delete:
          lActivity := NfIIf.Integer(pRecordExists, NfSetup.Activity::Delete, NfSetup.Activity::" ");
        NfSetup.Activity::Rename:
          lActivity := NfIIf.Integer(pRecordExists, NfSetup.Activity::Rename, NfSetup.Activity::" ");
      END;

      EXIT(lActivity);
    END;

    LOCAL PROCEDURE "--- Domain ---"@1000000002();
    BEGIN
    END;

    PROCEDURE RemoveDomain@1000000003(pUserId@1000000000 : Text) : Text;
    VAR
      lPosition@1000000001 : Integer;
      lUserId@1000000002 : Text;
    BEGIN
      ///<summary>Removing domain from passed user ID</summary>
      ///<param name="pUserId">The user ID</param>
      ///<returns>User ID without domain</returns>

      lPosition := STRPOS(pUserId, '\');
      IF (lPosition > 0) THEN
        lUserId := COPYSTR(pUserId, lPosition + 1)
      ELSE
        lUserId := pUserId;
      EXIT(lUserId);
    END;

    LOCAL PROCEDURE "--- Profile ---"@1000000005();
    BEGIN
    END;

    PROCEDURE ProfileExists@1000000007() : Boolean;
    BEGIN
      ///<summary>Answering if nForcement profile exists</summary>
      ///<returns>The answer</returns>

      EXIT(Profile.GET(tProfileId));
    END;

    PROCEDURE CreateProfile@1000000006() : Boolean;
    VAR
      lResult@1000000003 : Boolean;
    BEGIN
      ///<summary>Creating nForcement profile</summary>
      ///<returns>TRUE = Created, FALSE = Already there</returns>

      lResult := FALSE;

      IF ( NOT (Profile.GET(tProfileId))) THEN
      BEGIN
        CLEAR(Profile);
        Profile.INIT();
        Profile.VALIDATE("Profile ID", tProfileId);
        Profile.VALIDATE(Description, tProfileDescription);
        Profile.VALIDATE("Role Center ID", PAGE::"nF. Role Centre");
        Profile.INSERT(TRUE);
        lResult := TRUE;
        NfLog.AddSuccessActivity(tProfileLogActivity, STRSUBSTNO(tLogCreatedMessage, Profile.TABLECAPTION(), tProfileId), FALSE);
      END;

      EXIT(lResult);
    END;

    LOCAL PROCEDURE "--- Job Queue ---"@1000000008();
    BEGIN
    END;

    PROCEDURE GetJobQueueCode@1000000012() : Code[10];
    BEGIN
      ///<summary>Returning job queue code</summary>
      ///<returns>The code</returns>

      EXIT(tJobQueueCode);
    END;

    PROCEDURE GetJobQueueCategoryCode@1000000014() : Code[10];
    BEGIN
      ///<summary>Returning job queue category code</summary>
      ///<returns>The code</returns>

      EXIT(tJobQueueCategoryCode);
    END;

    PROCEDURE JobQueueExists@1000000009() : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      ///<summary>Answering if nForcement job queue exists</summary>
      ///<returns>The answer</returns>

      lResult := JobQueue.GET(tJobQueueCode);

      lResult := JobQueueEntryExists(CODEUNIT::"nF. Auto Update Default Group", lResult);
      lResult := JobQueueEntryExists(CODEUNIT::"nF. Auto Update Users Perms.", lResult);
      lResult := JobQueueEntryExists(CODEUNIT::"nF. Auto Clear Log", lResult);

      EXIT(lResult);
    END;

    LOCAL PROCEDURE JobQueueEntryExists@1000000011(pCodeunitId@1000000000 : Integer;pResult@1000000001 : Boolean) : Boolean;
    BEGIN
      ///<summary>Answering if nForcement job queue entry exists</summary>
      ///<param name="pCodeunitId">Codeunit ID</param>
      ///<param name="pResult">Current checking result</param>
      ///<returns>Final result</returns>

      IF (pResult) THEN
      BEGIN
        JobQueueEntry.RESET();
        JobQueueEntry.SETRANGE("Object Type to Run", JobQueueEntry."Object Type to Run"::Codeunit);
        JobQueueEntry.SETRANGE("Object ID to Run", pCodeunitId);
        JobQueueEntry.SETRANGE("Job Queue Category Code", tJobQueueCategoryCode);
        pResult := ( NOT (JobQueueEntry.ISEMPTY()));
      END;

      EXIT(pResult);
    END;

    PROCEDURE CreateJobQueue@1000000010() : Boolean;
    VAR
      lResult@1000000003 : Boolean;
    BEGIN
      ///<summary>Creating nForcement job queue</summary>
      ///<returns>TRUE = Created, FALSE = Already there</returns>

      lResult := FALSE;

      IF ( NOT (JobQueueCategory.GET(tJobQueueCategoryCode))) THEN
      BEGIN
        CLEAR(JobQueueCategory);
        JobQueueCategory.INIT();
        JobQueueCategory.VALIDATE(Code, tJobQueueCategoryCode);
        JobQueueCategory.VALIDATE(Description, tJobQueueCategoryDescription);
        JobQueueCategory.INSERT(TRUE);
        lResult := TRUE;
        NfLog.AddSuccessActivity(tProfileLogActivity, STRSUBSTNO(tLogCreatedMessage, JobQueueCategory.TABLECAPTION(), tJobQueueCategoryCode), FALSE);
      END;

      IF ( NOT (JobQueue.GET(tJobQueueCode))) THEN
      BEGIN
        CLEAR(JobQueue);
        JobQueue.INIT();
        JobQueue.VALIDATE(Code, tJobQueueCode);
        JobQueue.VALIDATE(Description, tJobQueueDescription);
        JobQueue.VALIDATE("Job Queue Category Filter", tJobQueueCategoryCode);
        JobQueue.INSERT(TRUE);
        lResult := TRUE;
        NfLog.AddSuccessActivity(tProfileLogActivity, STRSUBSTNO(tLogCreatedMessage, JobQueue.TABLECAPTION(), tJobQueueCode), FALSE);
      END;

      lResult := CreateJobQueueEntry(CODEUNIT::"nF. Auto Update Default Group", lResult);
      lResult := CreateJobQueueEntry(CODEUNIT::"nF. Auto Update Users Perms.", lResult);
      lResult := CreateJobQueueEntry(CODEUNIT::"nF. Auto Clear Log", lResult);

      EXIT(lResult);
    END;

    LOCAL PROCEDURE CreateJobQueueEntry@1000000015(pCodeunitId@1000000000 : Integer;pResult@1000000001 : Boolean) : Boolean;
    VAR
      eCreated@1000000002 : TextConst 'ENU="""%1"" for %2 ""%3"" (%4) has been created.";ENG="""%1"" for %2 ""%3"" (%4) has been created."';
      lObject@1000000003 : Record 2000000038;
    BEGIN
      ///<summary>Creating nForcement job queue entry</summary>
      ///<param name="pCodeunitId">Codeunit ID</param>
      ///<param name="pResult">Current creation result</param>
      ///<returns>Final result</returns>

      JobQueueEntry.RESET();
      JobQueueEntry.SETRANGE("Object Type to Run", JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETRANGE("Object ID to Run", pCodeunitId);
      JobQueueEntry.SETRANGE("Job Queue Category Code", tJobQueueCategoryCode);
      IF (JobQueueEntry.ISEMPTY()) THEN
      BEGIN
        CLEAR(JobQueueEntry);
        JobQueueEntry.INIT();
        JobQueueEntry.VALIDATE("Object Type to Run", JobQueueEntry."Object Type to Run"::Codeunit);
        JobQueueEntry.VALIDATE("Object ID to Run", pCodeunitId);
        JobQueueEntry.VALIDATE("Job Queue Category Code", tJobQueueCategoryCode);
        JobQueueEntry.VALIDATE(Status, JobQueueEntry.Status::"On Hold");
        JobQueueEntry.VALIDATE("Recurring Job", TRUE);
        JobQueueEntry.VALIDATE("Run on Mondays", TRUE);
        JobQueueEntry.VALIDATE("Run on Tuesdays", TRUE);
        JobQueueEntry.VALIDATE("Run on Wednesdays", TRUE);
        JobQueueEntry.VALIDATE("Run on Thursdays", TRUE);
        JobQueueEntry.VALIDATE("Run on Fridays", TRUE);
        JobQueueEntry.VALIDATE("Run on Saturdays", TRUE);
        JobQueueEntry.VALIDATE("Run on Sundays", TRUE);
        JobQueueEntry.VALIDATE("Starting Time", 000000T);
        JobQueueEntry.VALIDATE("Ending Time", 235900T);
        JobQueueEntry.VALIDATE("No. of Minutes between Runs", 60);
        JobQueueEntry.INSERT(TRUE);
        pResult := TRUE;
        NfLog.AddSuccessActivity(tProfileLogActivity, STRSUBSTNO(eCreated, JobQueueEntry.TABLECAPTION(),
          JobQueueEntry."Object Type to Run"::Codeunit, pCodeunitId,
          NfObjectToolkit.GetObjectName(lObject."Object Type"::Codeunit, pCodeunitId)), FALSE);
      END;

      EXIT(pResult);
    END;

    BEGIN
    {
      ///<summary>General nForcement functions</summary>
      ///<change version="NF2016.17" initials="JH" date="2016-04-22">Created</change>
      ///<change version="NF2016.17.11" initials="JH" date="2016-11-02">Activities calls changed</change>
    }
    END.
  }
}

