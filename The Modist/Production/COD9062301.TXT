OBJECT Codeunit 9062301 Planning Board Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=08/12/15;
    Time=[ 7:29:59 PM];
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PlanningBoardSetup@1000000005 : Record 9062335;
      SystemColour@1000000001 : Record 9062336;
      LanguageToolkit@1000000000 : Codeunit 9062586;
      tWhiteColourCode@1000000004 : TextConst 'ENU=WHITE;ENG=WHITE';
      tBlackColourCode@1000000003 : TextConst 'ENU=BLACK;ENG=BLACK';
      tLightSteelBlueColourCode@1000000002 : TextConst 'ENU=LIGHT STEEL BLUE;ENG=LIGHT STEEL BLUE';
      TnpToolkit@1000000006 : Codeunit 9062230;

    PROCEDURE DesktopControlEnabled@1000000006() : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning if desktop control is enabled
      //  <- The answer

      PlanningBoardSetup.GET();
      IF (PlanningBoardSetup."Use Web Control for Desktop") THEN
        EXIT(FALSE)
      ELSE
        EXIT(TnpToolkit.IsWindowsClient());
    END;

    PROCEDURE WebControlEnabled@1000000007() : Boolean;
    BEGIN
      //DOC NA2016.12 - Returning if web control is enabled
      //  <- The answer

      PlanningBoardSetup.GET();
      IF (PlanningBoardSetup."Use Web Control for Desktop") THEN
        EXIT(TRUE)
      ELSE
        EXIT(TnpToolkit.IsWebClient());
    END;

    PROCEDURE IntegerText@1000000000(pName@1000000001 : Text;pInteger@1000000000 : Integer) : Text;
    VAR
      eNo@1000000002 : TextConst 'ENU=No %1;ENG=No %1';
      eOne@1000000003 : TextConst 'ENU=1 %1;ENG=1 %1';
      eMany@1000000004 : TextConst 'ENU=%1 %2;ENG=%1 %2';
    BEGIN
      //DOC NA2016.12 - Returning no / one / many integer text
      //  -> pName: Name to use building the text
      //  -> pInteger: The integer

      CASE (pInteger) OF
        0:
          EXIT(STRSUBSTNO(eNo, LanguageToolkit.ToPlural(pName)));
        1:
          EXIT(STRSUBSTNO(eOne, pName));
        ELSE
          EXIT(STRSUBSTNO(eMany, pInteger, LanguageToolkit.ToPlural(pName)));
      END;
    END;

    PROCEDURE FindOrCreateSystemColour@1000000001(pCode@1000000000 : Code[20];pRed@1000000001 : Integer;pGreen@1000000002 : Integer;pBlue@1000000003 : Integer;pSequence@1000000004 : Integer) : Code[20];
    BEGIN
      //DOC NA2016.12 - Trying to find or creating (if not found) a system colour record
      //  -> pCode: Code
      //  -> pRed: RGB Red
      //  -> pGreen: RGB Green
      //  -> pBlue: RGB Blue
      //  <- Colour code found or created

      IF ( NOT (SystemColour.GET(pCode))) THEN
      BEGIN
        CLEAR(SystemColour);
        SystemColour.INIT();
        SystemColour.VALIDATE(Code, pCode);
        SystemColour.VALIDATE(Red, pRed);
        SystemColour.VALIDATE(Green, pGreen);
        SystemColour.VALIDATE(Blue, pBlue);
        SystemColour.VALIDATE(Sequence, pSequence);
        SystemColour.INSERT(TRUE);
      END;

      EXIT(pCode);
    END;

    PROCEDURE DefaultResourceForegroundColourCode@1000000002() : Code[20];
    BEGIN
      //DOC NA2016.12 - Returning default resource foreground colour code
      //  <- The code

      EXIT(FindOrCreateSystemColour(tBlackColourCode, 0, 0, 0, 0));
    END;

    PROCEDURE DefaultEntryForegroundColourCode@1000000003() : Code[20];
    BEGIN
      //DOC NA2016.12 - Returning default entry foreground colour code
      //  <- The code

      EXIT(FindOrCreateSystemColour(tBlackColourCode, 0, 0, 0, 0));
    END;

    PROCEDURE DefaultEntryBackgroundColourCode@1000000004() : Code[20];
    BEGIN
      //DOC NA2016.12 - Returning default entry background colour code
      //  <- The code

      EXIT(FindOrCreateSystemColour(tLightSteelBlueColourCode, 176, 196, 222, 0));
    END;

    PROCEDURE DefaultEntryBorderColourCode@1000000005() : Code[20];
    BEGIN
      //DOC NA2016.12 - Returning default entry border colour code
      //  <- The code

      EXIT(FindOrCreateSystemColour(tBlackColourCode, 0, 0, 0, 0));
    END;

    PROCEDURE SystemColourLookup@9062230(VAR pSystemColourCode@9062230 : Code[20]) : Boolean;
    VAR
      lResult@9062231 : Boolean;
    BEGIN
      //DOC NA2016.12 - Performing system colour lookup
      //  <> pSystemColourCode: System colour code
      //  <- Lookup result

      lResult := FALSE;

      SystemColour.RESET();
      IF (SystemColour.GET(pSystemColourCode)) THEN;
      IF (PAGE.RUNMODAL(0, SystemColour) = ACTION::LookupOK) THEN
      BEGIN
        pSystemColourCode := SystemColour.Code;
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 10/10/2015 - Created
    }
    END.
  }
}

