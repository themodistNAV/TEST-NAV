OBJECT Codeunit 9087038 Replenishment Parameters Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=21/09/16;
    Time=[ 5:55:46 PM];
    Version List=NS2016.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      tDefaultTemplateCode@1000000008 : TextConst 'ENU=DEFAULT;ENG=DEFAULT';
      tDefaultTemplateDescription@1000000009 : TextConst 'ENU=Default Replenishment Template;ENG=Default Replenishment Template';
      tDefaultBatchCode@1000000001 : TextConst 'ENU=DEFAULT;ENG=DEFAULT';
      tDefaultBatchDescription@1000000000 : TextConst 'ENU=Default Replenishment Batch;ENG=Default Replenishment Batch';
      tEmptyTemplate@1000000002 : TextConst 'ENU=Replenishment template code is empty;ENG=Replenishment template code is empty';
      tEmptyBatch@1000000003 : TextConst 'ENU=Replenishment batch code is empty;ENG=Replenishment batch code is empty';
      ReplenishmentParameter@1000000005 : Record 9087047;

    PROCEDURE AddParameter@1000000010(pReplenishmentContext@1000000004 : Record 9087044;pName@1000000002 : Text[30];pType@1000000003 : Option);
    BEGIN
      //DOC NS2016.16 - Adding a new parameter
      //  -> pReplenishmentContext: Replenishment context
      //  -> pName: Parameter name
      //  -> pType: Parameter type

      AddParameterAdv(pReplenishmentContext, pName, pType, '', FALSE, 0);
    END;

    PROCEDURE AddParameterAdv@1000000013(pReplenishmentContext@1000000007 : Record 9087044;pName@1000000002 : Text[30];pType@1000000003 : Option;pValue@1000000006 : Variant;pInteraction@1000000004 : Boolean;pTableId@1000000005 : Integer);
    BEGIN
      //DOC NS2016.16 - Adding a new parameter (advanced version)
      //  -> pReplenishmentContext: Replenishment context
      //  -> pName: Parameter name
      //  -> pType: Parameter type
      //  -> pValue: Parameter Value
      //  -> pInteraction: Interaction flag
      //  -> pTableId: Table ID

      CLEAR(ReplenishmentParameter);
      ReplenishmentParameter.INIT();
      ReplenishmentParameter.VALIDATE("Replenishment Template Code", pReplenishmentContext."Replenishment Template Code");
      ReplenishmentParameter.VALIDATE("Replenishment Batch Code", pReplenishmentContext."Replenishment Batch Code");
      ReplenishmentParameter.VALIDATE(Name, pName);
      ReplenishmentParameter.VALIDATE(Type, pType);
      ReplenishmentParameter.VALIDATE(Value, pValue);
      ReplenishmentParameter.VALIDATE(Interaction, pInteraction);
      ReplenishmentParameter.VALIDATE("Table ID", pTableId);
      ReplenishmentParameter.INSERT(TRUE);
    END;

    LOCAL PROCEDURE GetParameter@1000000012(pReplenishmentContext@1000000004 : Record 9087044;pName@1000000002 : Text[30];pType@1000000003 : Option;VAR pValue@1000000005 : Variant) : Boolean;
    VAR
      lResult@1000000000 : Boolean;
    BEGIN
      //DOC NS2016.16 - Returning parameter as variant
      //  -> pReplenishmentContext: Replenishment context
      //  -> pName: Parameter name
      //  -> pType: Paremter type (to be tested)
      //  <> pValue: Target parameter value
      //  <- Parameter search result

      lResult := FALSE;

      IF (ReplenishmentParameter.GET(pReplenishmentContext."Replenishment Template Code", pReplenishmentContext."Replenishment Batch Code", pName)) THEN
      BEGIN
        ReplenishmentParameter.TESTFIELD(Type, pType);
        ReplenishmentParameter.GetValue(pValue);
        lResult := TRUE;
      END;

      EXIT(lResult);
    END;

    PROCEDURE GetBooleanParameter@1000000011(pReplenishmentContext@1000000005 : Record 9087044;pName@1000000002 : Text[30]) : Boolean;
    VAR
      lValue@1000000004 : Variant;
      lBooleanValue@1000000003 : Boolean;
    BEGIN
      //DOC NS2016.16 - Returning boolean parameter
      //  -> pReplenishmentContext: Replenishment context
      //  -> pName: Parameter name
      //  <- Parameter value

      IF (GetParameter(pReplenishmentContext, pName, ReplenishmentParameter.Type::Boolean, lValue)) THEN
        lBooleanValue := lValue;
      EXIT(lBooleanValue);
    END;

    PROCEDURE GetIntegerParameter@1000000015(pReplenishmentContext@1000000005 : Record 9087044;pName@1000000002 : Text[30]) : Integer;
    VAR
      lValue@1000000004 : Variant;
      lIntegerValue@1000000003 : Integer;
    BEGIN
      //DOC NS2016.16 - Returning integer parameter
      //  -> pReplenishmentContext: Replenishment context
      //  -> pName: Parameter name
      //  <- Parameter value

      IF (GetParameter(pReplenishmentContext, pName, ReplenishmentParameter.Type::Integer, lValue)) THEN
        lIntegerValue := lValue;
      EXIT(lIntegerValue);
    END;

    PROCEDURE GetDecimalParameter@1000000016(pReplenishmentContext@1000000005 : Record 9087044;pName@1000000002 : Text[30]) : Decimal;
    VAR
      lValue@1000000004 : Variant;
      lDecimalValue@1000000003 : Decimal;
    BEGIN
      //DOC NS2016.16 - Returning decimal parameter
      //  -> pReplenishmentContext: Replenishment context
      //  -> pName: Parameter name
      //  <- Parameter value

      IF (GetParameter(pReplenishmentContext, pName, ReplenishmentParameter.Type::Decimal, lValue)) THEN
        lDecimalValue := lValue;
      EXIT(lDecimalValue);
    END;

    PROCEDURE GetTextParameter@1000000022(pReplenishmentContext@1000000005 : Record 9087044;pName@1000000002 : Text[30]) : Text;
    VAR
      lValue@1000000004 : Variant;
      lTextValue@1000000003 : Text;
    BEGIN
      //DOC NS2016.16 - Returning text parameter
      //  -> pReplenishmentContext: Replenishment context
      //  -> pName: Parameter name
      //  <- Parameter value

      IF (GetParameter(pReplenishmentContext, pName, ReplenishmentParameter.Type::Text, lValue)) THEN
        lTextValue := lValue;
      EXIT(lTextValue);
    END;

    PROCEDURE GetDateParameter@1000000021(pReplenishmentContext@1000000005 : Record 9087044;pName@1000000002 : Text[30]) : Date;
    VAR
      lValue@1000000004 : Variant;
      lDateValue@1000000003 : Date;
    BEGIN
      //DOC NS2016.16 - Returning date parameter
      //  -> pReplenishmentContext: Replenishment context
      //  -> pName: Parameter name
      //  <- Parameter value

      IF (GetParameter(pReplenishmentContext, pName, ReplenishmentParameter.Type::Date, lValue)) THEN
        lDateValue := lValue;
      EXIT(lDateValue);
    END;

    PROCEDURE GetTimeParameter@1000000020(pReplenishmentContext@1000000005 : Record 9087044;pName@1000000002 : Text[30]) : Time;
    VAR
      lValue@1000000004 : Variant;
      lTimeValue@1000000003 : Time;
    BEGIN
      //DOC NS2016.16 - Returning time parameter
      //  -> pReplenishmentContext: Replenishment context
      //  -> pName: Parameter name
      //  <- Parameter value

      IF (GetParameter(pReplenishmentContext, pName, ReplenishmentParameter.Type::Time, lValue)) THEN
        lTimeValue := lValue;
      EXIT(lTimeValue);
    END;

    PROCEDURE GetDateTimeParameter@1000000019(pReplenishmentContext@1000000005 : Record 9087044;pName@1000000002 : Text[30]) : DateTime;
    VAR
      lValue@1000000004 : Variant;
      lDateTimeValue@1000000003 : DateTime;
    BEGIN
      //DOC NS2016.16 - Returning datetime parameter
      //  -> pReplenishmentContext: Replenishment context
      //  -> pName: Parameter name
      //  <- Parameter value

      IF (GetParameter(pReplenishmentContext, pName, ReplenishmentParameter.Type::DateTime, lValue)) THEN
        lDateTimeValue := lValue;
      EXIT(lDateTimeValue);
    END;

    PROCEDURE GetDateFormulaParameter@1000000018(pReplenishmentContext@1000000003 : Record 9087044;pName@1000000002 : Text[30];VAR pValue@1000000005 : DateFormula);
    VAR
      lValue@1000000004 : Variant;
    BEGIN
      //DOC NS2016.16 - Returning date formula parameter
      //  -> pReplenishmentTemplateCode: Replenishment template code
      //  -> pReplenishmentBatchCode: Replenishment batch code
      //  -> pName: Parameter name
      //  <> pValue: Target parameter value

      IF (GetParameter(pReplenishmentContext, pName, ReplenishmentParameter.Type::DateFormula, lValue)) THEN
        pValue := lValue;
    END;

    BEGIN
    {
      //DOC NS2016.16 JH 15/09/2016 - Created
    }
    END.
  }
}

