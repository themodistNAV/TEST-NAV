OBJECT Table 9021656 Promotion Header
{
  OBJECT-PROPERTIES
  {
    Date=13/07/16;
    Time=[ 1:50:05 PM];
    Version List=EC2016.6;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Internal Description;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 InternetSetup.GET;
                 InternetSetup.TESTFIELD("Promotion Nos.");
                 NoSeriesMgt.InitSeries(InternetSetup."Promotion Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               Label.RESET;
               Label.SETRANGE("Used-in Company",COMPANYNAME);
               IF Label.COUNT = 1 THEN BEGIN
                 Label.FINDFIRST;
                 VALIDATE("Label Code",Label.Code);
               END;

               VALIDATE(Valid,FALSE);
             END;

    OnModify=BEGIN
               //DOC EC2013.3.10 -
               IF Released THEN
                 ERROR(Text018,"No.");
               //DOC EC2013.3.10 +
               VALIDATE(Valid,FALSE);
             END;

    OnDelete=BEGIN
               TESTFIELD(Released,FALSE);
               PromoQualLine.RESET;
               PromoQualLine.SETRANGE("Promotion No.","No.");
               PromoQualLine.DELETEALL(TRUE);

               PromoBenLine.RESET;
               PromoBenLine.SETRANGE("Promotion No.","No.");
               PromoBenLine.DELETEALL(TRUE);

               eComCommentLine.RESET;
               eComCommentLine.SETRANGE("Table Name",eComCommentLine."Table Name"::Promotion);
               eComCommentLine.SETRANGE("No.","No.");
               eComCommentLine.DELETEALL;

               PromoProb.RESET;
               PromoProb.SETRANGE("Promotion No.","No.");
               PromoProb.DELETEALL;

               PromoSummary.RESET;
               PromoSummary.SETRANGE("Promotion No.","No.");
               PromoSummary.DELETEALL;

               //Promotion Segment
               PromoSegment.RESET;
               PromoSegment.SETRANGE("Promotion No.","No.");
               PromoSegment.DELETEALL;

               //Promo History Summary
               PromoHistSum.RESET;
               PromoHistSum.SETRANGE("Promotion No.","No.");
               PromoHistSum.DELETEALL;

               //Promotion Ledger Entry
               PromoLedEnt.RESET;
               PromoLedEnt.SETRANGE("Promotion No.","No.");
               PromoLedEnt.DELETEALL;
             END;

    CaptionML=[ENU=Promotion Header;
               ENG=Promotion Header];
    LookupPageID=Page9021697;
    DrillDownPageID=Page9021697;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  InternetSetup.GET;
                                                                  NoSeriesMgt.TestManual(InternetSetup."Promotion Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 5   ;   ;Internal Description;Text100       ;OnValidate=BEGIN
                                                                IF "Internal Description" <> xRec."Internal Description" THEN
                                                                  "Promo Text for Product" := "Internal Description";
                                                              END;

                                                   CaptionML=[ENU=Internal Description;
                                                              ENG=Internal Description] }
    { 7   ;   ;Start Date          ;Date          ;OnValidate=BEGIN
                                                                //DOC EC2009.2.71 -
                                                                InternetSetup.GET;
                                                                IF InternetSetup."Do Not Use Campaigns" THEN EXIT;
                                                                //DOC EC2009.2.71 +

                                                                IF "Start Date" <> 0D THEN BEGIN
                                                                  IF Campaign.GET("Campaign No.") THEN BEGIN
                                                                    IF "Start Date" < Campaign."Starting Date" THEN
                                                                      ERROR(Text006,Campaign."Starting Date");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Start Date;
                                                              ENG=Start Date] }
    { 8   ;   ;End Date            ;Date          ;OnValidate=BEGIN
                                                                //DOC EC2009.2.71 -
                                                                InternetSetup.GET;
                                                                IF InternetSetup."Do Not Use Campaigns" THEN EXIT;
                                                                //DOC EC2009.2.71 +

                                                                IF "End Date" <> 0D THEN BEGIN
                                                                  IF Campaign.GET("Campaign No.") THEN
                                                                    IF "End Date" > Campaign."Ending Date" THEN
                                                                      ERROR(Text007,Campaign."Ending Date");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=End Date;
                                                              ENG=End Date] }
    { 9   ;   ;Campaign No.        ;Code20        ;TableRelation=Campaign.No.;
                                                   OnValidate=BEGIN
                                                                IF NOT Campaign.GET("Campaign No.") THEN BEGIN
                                                                  "Start Date" := 0D;
                                                                  "End Date" := 0D;
                                                                END ELSE BEGIN
                                                                  "Start Date" := Campaign."Starting Date";
                                                                  "End Date" := Campaign."Ending Date";
                                                                END;

                                                                IF ("Campaign No." <> xRec."Campaign No.") THEN BEGIN
                                                                  CALCFIELDS("Segments Exist");
                                                                  IF "Segments Exist" THEN
                                                                    IF NOT CONFIRM(Text003) THEN
                                                                      ERROR(Text004);
                                                                END;

                                                                IF xRec."Campaign No." <> '' THEN
                                                                  DeletePromoSegment(xRec."Campaign No.");
                                                                IF "Campaign No." <> '' THEN
                                                                  AutoCreatePromoSegment;
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              ENG=Campaign No.] }
    { 10  ;   ;Start Time          ;Time          ;CaptionML=[ENU=Start Time;
                                                              ENG=Start Time] }
    { 11  ;   ;End Time            ;Time          ;CaptionML=[ENU=End Time;
                                                              ENG=End Time] }
    { 12  ;   ;Label Code          ;Code10        ;TableRelation=Label;
                                                   OnValidate=BEGIN
                                                                IF "Label Code" <> '' THEN BEGIN
                                                                  Label.GET("Label Code");
                                                                  IF Label."Used-in Company" <> COMPANYNAME THEN
                                                                    ERROR(Text000,Label."Used-in Company");
                                                                  IF "Resource No. for Discounts" = '' THEN
                                                                    "Resource No. for Discounts" := Label."Resource for Promo Discounts";
                                                                  //DOC EC2013.3.00 -
                                                                  IF "No." = '' THEN
                                                                    ERROR(Text015,FIELDCAPTION("No."));
                                                                  VALIDATE("In Multi Language Mode",Label."Multi-Language Mode");
                                                                  //DOC EC2013.3.00 +
                                                                END;
                                                                IF "Label Code" <> xRec."Label Code" THEN BEGIN
                                                                  PromoQualLine.RESET;
                                                                  PromoQualLine.SETRANGE("Promotion No.","No.");
                                                                  IF PromoQualLine.FINDFIRST THEN
                                                                    ERROR(Text001,'Qualifying');
                                                                  PromoBenLine.RESET;
                                                                  PromoBenLine.SETRANGE("Promotion No.","No.");
                                                                  IF PromoBenLine.FINDFIRST THEN
                                                                    ERROR(Text001,'Benefit');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Label Code;
                                                              ENG=Label Code];
                                                   NotBlank=Yes }
    { 15  ;   ;Required Qualifiers ;Option        ;CaptionML=[ENU=Required Qualifiers;
                                                              ENG=Required Qualifiers];
                                                   OptionCaptionML=[ENU=All,Any;
                                                                    ENG=All,Any];
                                                   OptionString=All,Any;
                                                   Description=Indicates whether all Promo Qualifying Lines are required to trigger benefits, or any line triggers the benefit }
    { 17  ;   ;Qualifying Line Count;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Promotion Qualifying Line" WHERE (Promotion No.=FIELD(No.)));
                                                   CaptionML=[ENU=Qualifying Line Count;
                                                              ENG=Qualifying Line Count];
                                                   Description=Flowfield }
    { 18  ;   ;Extract             ;Boolean       ;CaptionML=[ENU=Extract;
                                                              ENG=Extract] }
    { 19  ;   ;Released            ;Boolean       ;CaptionML=[ENU=Released;
                                                              ENG=Released];
                                                   Editable=No }
    { 21  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("ECommerce Comment Line" WHERE (Table Name=CONST(Promotion),
                                                                                                     No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENG=Comment];
                                                   Description=Flowfield;
                                                   Editable=No }
    { 22  ;   ;Released DateTime   ;DateTime      ;CaptionML=[ENU=Released DateTime;
                                                              ENG=Released DateTime];
                                                   Editable=No }
    { 23  ;   ;Released By User    ;Code40        ;TableRelation="User Setup";
                                                   CaptionML=[ENU=Released By User;
                                                              ENG=Released By User];
                                                   Description=MQ 10/01/2014 - GW140110 from C20;
                                                   Editable=No }
    { 24  ;   ;Resource No. for Discounts;Code20  ;TableRelation=Resource.No.;
                                                   CaptionML=[ENU=Resource No. for Discounts;
                                                              ENG=Resource No. for Discounts] }
    { 26  ;   ;Is Qualified by Order Total;Boolean;FieldClass=FlowField;
                                                   CalcFormula=Exist("Promotion Qualifying Line" WHERE (Promotion No.=FIELD(No.),
                                                                                                        Applies-to Type=CONST(Order Total)));
                                                   CaptionML=[ENU=Is Qualified by Order Total;
                                                              ENG=Is Qualified by Order Total];
                                                   Description=Flowfield;
                                                   Editable=No }
    { 28  ;   ;Segments Exist      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Promotion Segment" WHERE (Promotion No.=FIELD(No.),
                                                                                                Label Code=FIELD(Label Code)));
                                                   CaptionML=[ENU=Segments Exist;
                                                              ENG=Segments Exist];
                                                   Description=Flowfield;
                                                   Editable=No }
    { 29  ;   ;Issues              ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Promotion Problems" WHERE (Promotion No.=FIELD(No.)));
                                                   CaptionML=[ENU=Issues;
                                                              ENG=Issues];
                                                   Description=Flowfield }
    { 50  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENG=No. Series] }
    { 51  ;   ;Promo Text for Product;Text250     ;OnValidate=BEGIN
                                                                //DOC EC2013.3.00
                                                                IF ("In Multi Language Mode" = TRUE) AND
                                                                  ("Promo Text for Product" <> '') THEN
                                                                  MESSAGE(Text013,FIELDCAPTION("Promo Text for Product"));
                                                              END;

                                                   CaptionML=[ENU=Promo Text for Product;
                                                              ENG=Promo Text for Product];
                                                   Description=Message to be displayed on order, will only work if promotion is item based }
    { 52  ;   ;Display Sort Order  ;Integer       ;CaptionML=[ENU=Display Sort Order;
                                                              ENG=Display Sort Order] }
    { 55  ;   ;Promo Text for Basket;Text100      ;OnValidate=BEGIN
                                                                //DOC EC2013.3.00
                                                                IF ("In Multi Language Mode" = TRUE) AND
                                                                  ("Promo Text for Basket" <> '') THEN
                                                                  MESSAGE(Text013,FIELDCAPTION("Promo Text for Basket"));
                                                              END;

                                                   CaptionML=[ENU=Promo Text for Basket;
                                                              ENG=Promo Text for Basket] }
    { 58  ;   ;DateTime Last Validated;DateTime   ;CaptionML=[ENU=DateTime Last Validated;
                                                              ENG=DateTime Last Validated] }
    { 59  ;   ;DateTime Last Valid ;DateTime      ;CaptionML=[ENU=DateTime Last Valid;
                                                              ENG=DateTime Last Valid] }
    { 61  ;   ;Valid               ;Boolean       ;OnValidate=BEGIN
                                                                PromoSegment.RESET;
                                                                PromoSegment.SETRANGE("Promotion No.","No.");
                                                                PromoSegment.MODIFYALL("Promotion is Valid",Valid);
                                                              END;

                                                   CaptionML=[ENU=Valid;
                                                              ENG=Valid];
                                                   Editable=No }
    { 63  ;   ;Threshold Type      ;Option        ;OnValidate=VAR
                                                                IsLimitedByUsage@1190000005 : Boolean;
                                                              BEGIN
                                                                //DOC EC2013.3.10 -
                                                                IF ("Threshold Type" <> "Threshold Type"::"Qualified Item Quantity") AND
                                                                  ("Threshold Type" <> "Threshold Type"::"Benefit Item Quantity") THEN
                                                                  "Cannot Buy More Than Max Qty." := FALSE
                                                                //DOC EC2013.3.10 +
                                                              END;

                                                   CaptionML=[ENU=Threshold Type;
                                                              ENG=Threshold Type];
                                                   OptionCaptionML=[ENU=" ,Value,Qualified Item Quantity,Usage Count,Benefit Item Quantity";
                                                                    ENG=" ,Value,Qualified Item Quantity,Usage Count,Benefit Item Quantity"];
                                                   OptionString=[ ,Value,Qualified Item Quantity,Usage Count,Benefit Item Quantity];
                                                   Description=GW add 110510 }
    { 64  ;   ;Threshold           ;Decimal       ;CaptionML=[ENU=Threshold;
                                                              ENG=Threshold];
                                                   Description=GW add 110510 }
    { 65  ;   ;Cannot Buy More Than Max Qty.;Boolean;
                                                   OnValidate=BEGIN
                                                                IF ("Threshold Type" <> "Threshold Type"::"Qualified Item Quantity") AND
                                                                  ("Threshold Type" <> "Threshold Type"::"Benefit Item Quantity") AND
                                                                   ("Cannot Buy More Than Max Qty." = TRUE) THEN
                                                                  ERROR(Text017);
                                                              END;

                                                   CaptionML=[ENU=Cannot Buy More Than Max Qty.;
                                                              ENG=Cannot Buy More Than Max Qty.];
                                                   Description=GW add 120821 V3.10 }
    { 66  ;   ;Threshold Applies-To Who;Option    ;OnValidate=BEGIN
                                                                IF ("Threshold Type" = "Threshold Type"::" ") AND
                                                                   ("Threshold Applies-To Who" <> "Threshold Applies-To Who"::" ") THEN
                                                                  ERROR(Text012,FIELDCAPTION("Threshold Applies-To Who"),FIELDCAPTION("Threshold Type"));
                                                                //disable Each Contact option for DERM as their promo history integration doesn't support per-Contact history
                                                                IF ((COPYSTR("Label Code",1,4)) = 'DERM') AND        //DOC EC2013.4.00 add CopyStr for both UK and AUS
                                                                   ("Threshold Applies-To Who" = "Threshold Applies-To Who"::"Each Contact") THEN
                                                                  ERROR(Text011,FIELDCAPTION("Threshold Applies-To Who"),'Each Contact','DERM');
                                                                IF "Threshold Applies-To Who" <> xRec."Threshold Applies-To Who" THEN BEGIN
                                                                  IF PromoHistProcess.PromoLedEntriesExist("No.") THEN
                                                                    IF NOT CONFIRM(Text010) THEN
                                                                      ERROR(Text004);
                                                                END;
                                                                VALIDATE(Application);  //DOC EC2013.4.50
                                                                PromoHistProcess.TotalReBuildPromoHistorySum("Threshold Applies-To Who","No.","Label Code");
                                                              END;

                                                   CaptionML=[ENU=Threshold Applies-To Who;
                                                              ENG=Threshold Applies-To Who];
                                                   OptionCaptionML=[ENU=" ,Each Customer,Each Contact,All Customers";
                                                                    ENG=" ,Each Customer,Each Contact,All Customers"];
                                                   OptionString=[ ,Each Customer,Each Contact,All Customers];
                                                   Description=GW add 110510 }
    { 68  ;   ;Item Count Type for Threshold;Option;
                                                   CaptionML=[ENU=Item Count Type for Threshold;
                                                              ENG=Item Count Type for Threshold];
                                                   OptionCaptionML=[ENU=" ,Qualifier,Benefit";
                                                                    ENG=" ,Qualifier,Benefit"];
                                                   OptionString=[ ,Qualifier,Benefit];
                                                   Description=GW add 120731 }
    { 78  ;   ;In Multi Language Mode;Boolean     ;OnValidate=BEGIN
                                                                IF "No." = '' THEN
                                                                  ERROR(Text015,FIELDCAPTION("No."));
                                                                IF "Label Code" = '' THEN BEGIN
                                                                  "In Multi Language Mode" := FALSE;
                                                                  "Product Text Multi Lang Key" := '';
                                                                  "Basket Text Multi Lang Key" := '';
                                                                END ELSE BEGIN
                                                                  IF "In Multi Language Mode" THEN BEGIN
                                                                    IF CONFIRM(Text016) THEN BEGIN
                                                                      IF "Product Text Multi Lang Key" = '' THEN
                                                                        "Product Text Multi Lang Key" :=
                                                                          MultiLangFunc.CreateKey(9021656,"Label Code","No.",0);
                                                                      IF "Basket Text Multi Lang Key" = '' THEN
                                                                        "Basket Text Multi Lang Key" :=
                                                                          MultiLangFunc.CreateKey(9021656,"Label Code","No.",1);
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=In Multi Language Mode;
                                                              ENG=In Multi Language Mode];
                                                   Description=GW add 120709 }
    { 80  ;   ;Product Text Multi Lang Key;Code80 ;OnValidate=BEGIN
                                                                IF ("In Multi Language Mode" = FALSE) AND
                                                                  ("Product Text Multi Lang Key" <> '') THEN
                                                                  ERROR(Text014,FIELDCAPTION("Product Text Multi Lang Key"));
                                                                IF "Product Text Multi Lang Key" = '?' THEN
                                                                  "Product Text Multi Lang Key" :=
                                                                    MultiLangFunc.CreateKey(9021656,"Label Code","No.",0);
                                                                IF "Product Text Multi Lang Key" <> '' THEN
                                                                  MultiLangFunc.UpdateMultiLang("Product Text Multi Lang Key","Label Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              VALIDATE("Product Text Multi Lang Key",
                                                                       MultiLangFunc.ReturnResxName("Product Text Multi Lang Key","Label Code"));
                                                            END;

                                                   CaptionML=[ENU=Product Text Multi Lang Key;
                                                              ENG=Product Text Multi Lang Key];
                                                   Description=GW add 120709 }
    { 82  ;   ;Basket Text Multi Lang Key;Code80  ;OnValidate=BEGIN
                                                                IF ("In Multi Language Mode" = FALSE) AND
                                                                  ("Basket Text Multi Lang Key" <> '') THEN
                                                                  ERROR(Text014,FIELDCAPTION("Basket Text Multi Lang Key"));
                                                                IF "Basket Text Multi Lang Key" = '?' THEN
                                                                  "Basket Text Multi Lang Key" :=
                                                                    MultiLangFunc.CreateKey(9021656,"Label Code","No.",1);
                                                                IF "Basket Text Multi Lang Key" <> '' THEN
                                                                  MultiLangFunc.UpdateMultiLang("Basket Text Multi Lang Key","Label Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              VALIDATE("Basket Text Multi Lang Key",
                                                                       MultiLangFunc.ReturnResxName("Basket Text Multi Lang Key","Label Code"));
                                                            END;

                                                   CaptionML=[ENU=Basket Text Multi Lang Key;
                                                              ENG=Basket Text Multi Lang Key];
                                                   Description=GW add 120709 }
    { 101 ;   ;Temp Qualify for Promotion;Boolean ;CaptionML=[ENU=Temp Qualify for Promotion;
                                                              ENG=Temp Qualify for Promotion];
                                                   Description=Temp field used for calculation }
    { 102 ;   ;Apply Sort Order    ;Integer       ;InitValue=0;
                                                   CaptionML=[ENU=Apply Sort Order;
                                                              ENG=Apply Sort Order];
                                                   Description=Specifies which order to apply promos in }
    { 104 ;   ;Application         ;Option        ;OnValidate=BEGIN
                                                                IF ((Application = Application::NAV) OR
                                                                  (Application = Application::"Web and NAV")) AND
                                                                  ("Threshold Applies-To Who" = "Threshold Applies-To Who"::"Each Contact") THEN
                                                                  ERROR(Text022);
                                                              END;

                                                   CaptionML=[ENU=Application;
                                                              ENG=Application];
                                                   OptionCaptionML=[ENU=Web,NAV,Web and NAV;
                                                                    ENG=Web,NAV,Web and NAV];
                                                   OptionString=Web,NAV,Web and NAV;
                                                   Description=GW add 140210 }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Campaign No.,Released,Start Date,End Date }
    {    ;Display Sort Order                       }
    {    ;Apply Sort Order                         }
    {    ;Released                                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Campaign@1040002 : Record 5071;
      Label@1000000001 : Record 9021618;
      PromoQualLine@1000000005 : Record 9021657;
      PromoQualLine1@1000000021 : Record 9021657;
      PromoBenLine@1000000004 : Record 9021658;
      PromoSegment@1000000009 : Record 9021652;
      SegmentHeader@1040006 : Record 5076;
      eComCommentLine@1000000010 : Record 9021680;
      InternetSetup@1000000000 : Record 9021609;
      Text000@1000000002 : TextConst 'ENU=You cannot use this label as it can only be used in Company %1.;ENG=You cannot use this label as it can only be used in Company %1.';
      Text001@1000000003 : TextConst 'ENU=You cannot change the label code as Promotion %1 Lines exist.;ENG=You cannot change the label code as Promotion %1 Lines exist.';
      Text002@1000000006 : TextConst 'ENU=The %1 must not be blank for the %2.;ENG=The %1 must not be blank for the %2.';
      Text003@1000000007 : TextConst 'ENU=Segment lines exist which may not be compatible with the Campaign No. on this Promotion.\\Are you sure you want to change the campaign no?;ENG=Segment lines exist which may not be compatible with the Campaign No. on this Promotion.\\Are you sure you want to change the campaign no?';
      Text004@1000000008 : TextConst 'ENU=Change Abandoned.;ENG=Change Abandoned.';
      ValidPromos@1000000011 : Record 9021655;
      PromoProb@1000000030 : Record 9021662;
      VouchEntry@1000000013 : Record 9021672;
      VouchSch@1000000015 : Record 9021659;
      Item@1000000016 : Record 27;
      PromoGroup@1000000017 : Record 9021651;
      ItemsInPromoGroup@1000000025 : Record 9021650;
      PromoSummary@1040003 : Record 9021663;
      PromoHistSum@1190000005 : Record 9021679;
      PromoLedEnt@1190000006 : Record 9021678;
      NoSeriesMgt@1000000012 : Codeunit 396;
      PromoHistProcess@1190000009 : Codeunit 9021631;
      MultiLangFunc@1190000012 : Codeunit 9021603;
      HideDialog@1000000014 : Boolean;
      Happy@1000000031 : Boolean;
      Text005@1000000018 : TextConst 'ENU=The Promotion is not valid so you cannot release it.;ENG=The Promotion is not valid so you cannot release it.';
      Text006@1040001 : TextConst 'ENU=Start Date must not be < %1;ENG=Start Date must not be < %1';
      Text007@1040000 : TextConst 'ENU=End Date must not be > %1;ENG=End Date must not be > %1';
      Text008@1040004 : TextConst 'ENU=AutoCreatePromoSegments;ENG=AutoCreatePromoSegments';
      Text009@1040005 : TextConst 'ENU=Release;ENG=Release';
      Text010@1190000007 : TextConst 'ENU=Changing the Threshold Applies-To Who may give unexpected results.  Are you sure you want to continue?;ENG=Changing the Threshold Applies-To Who may give unexpected results.  Are you sure you want to continue?';
      Text011@1190000008 : TextConst 'ENU=You cannot make the %1 %2 when the Label Code is %3.;ENG=You cannot make the %1 %2 when the Label Code is %3.';
      Text012@1190000010 : TextConst 'ENU=You cannot specify the %1 while the %2 is blank.;ENG=You cannot specify the %1 while the %2 is blank.';
      MultiLang@1190000011 : Record 9021603;
      Text013@1190000013 : TextConst 'ENU=The %1 field has no function in Multi Language Mode.;ENG=The %1 field has no function in Multi Language Mode.';
      Text014@1190000014 : TextConst 'ENU=The %1 field has no function as you are not in Multi Language Mode.;ENG=The %1 field has no function as you are not in Multi Language Mode.';
      Text015@1190000015 : TextConst 'ENU=The %1 field must be filled in first.;ENG=The %1 field must be filled in first.';
      Text016@1190000016 : TextConst 'ENU=Do you wish to auto create Multi Language keys?;ENG=Do you wish to auto create Multi Language keys?';
      Text017@1000000019 : TextConst 'ENU=The Cannot Buy More Than Max Qty. must be FALSE (not ticked) unless the Threshold Type is Qualified Quantity or Benefit Item Quantity.;ENG=The Cannot Buy More Than Max Qty. must be FALSE (not ticked) unless the Threshold Type is Qualified Quantity or Benefit Item Quantity.';
      Text018@1000000020 : TextConst 'ENU=You cannot modify this Promotion %1 while it is Released.;ENG=You cannot modify this Promotion %1 while it is Released.';
      Text019@1000000022 : TextConst 'ENU=This is already Released.;ENG=This is already Released.';
      Text020@1000000023 : TextConst 'ENU=This is already not Released.;ENG=This is already not Released.';
      Text021@1000000024 : TextConst 'ENU=You cannot check this Promotion %1 while it is Released.;ENG=You cannot check this Promotion %1 while it is Released.';
      Text022@1000000026 : TextConst 'ENU=You cannot have a Threshold Applies-To Who of By Contact if the Promotion applies to NAV;ENG=You cannot have a Threshold Applies-To Who of By Contact if the Promotion applies to NAV';

    PROCEDURE AssistEdit@1040016(OldPromotionHeader@1040000 : Record 9021656) : Boolean;
    VAR
      PromotionHeader@1040001 : Record 9021656;
    BEGIN
      WITH PromotionHeader DO BEGIN
        PromotionHeader := Rec;
        InternetSetup.GET;
        InternetSetup.TESTFIELD("Promotion Nos.");
        IF NoSeriesMgt.SelectSeries(InternetSetup."Promotion Nos.",OldPromotionHeader."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := PromotionHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE Release@1040000();
    BEGIN
      //DOC EC2013.3.10 -
      IF Released = TRUE THEN
        ERROR(Text019);
      //DOC EC2013.3.10 +
      IF "Label Code" = '' THEN
        ERROR(Text002,FIELDNAME("Label Code"),Text009);
      CheckValid;
      IF Valid THEN BEGIN
        Released := TRUE;
        //DOC EC2013.3.20 IF ("Label Code" <> 'TN') AND ("Label Code" <> 'BC') THEN
        Extract := TRUE;
        "Released DateTime" := CURRENTDATETIME;
        "Released By User" := USERID;
        MODIFY;
        //DOC EC2015.5.03 -
        PromoQualLine.RESET;
        PromoQualLine.SETRANGE("Promotion No.","No.");
        PromoQualLine.SETFILTER("Applies-to Type",'%1|%2',
                                PromoQualLine."Applies-to Type"::"Distinct Promo Group Items",
                                PromoQualLine."Applies-to Type"::"Promotion Group");
        IF PromoQualLine.FIND('-') THEN
        REPEAT
          PromoGroup.PopulateNotActive("Label Code",PromoQualLine."No.");
        UNTIL PromoQualLine.NEXT = 0;
        //DOC EC2015.5.03 +
      END ELSE BEGIN
        MODIFY;
        COMMIT;
        ERROR(Text005);
      END;
    END;

    PROCEDURE CancelRelease@1040001();
    BEGIN
      //DOC EC2013.3.10 -
      IF Released = FALSE THEN
        ERROR(Text020);
      //DOC EC2013.3.10 +

      Released := FALSE;
      CheckValid;
      "Released DateTime" := 0DT;
      "Released By User" := '';
      VALIDATE(Valid,FALSE);
      MODIFY;

      //DOC EC2015.5.03 -
      PromoQualLine.RESET;
      PromoQualLine.SETRANGE("Promotion No.","No.");
      PromoQualLine.SETFILTER("Applies-to Type",'%1|%2',
                              PromoQualLine."Applies-to Type"::"Distinct Promo Group Items",
                              PromoQualLine."Applies-to Type"::"Promotion Group");
      IF PromoQualLine.FIND('-') THEN
      REPEAT
        PromoGroup.PopulateNotActive("Label Code",PromoQualLine."No.");
      UNTIL PromoQualLine.NEXT = 0;
      //DOC EC2015.5.03 +
    END;

    PROCEDURE CheckValid@1000000000();
    VAR
      QLItemMarked@1000000001 : Boolean;
      QLOrderTotalMarked@1000000007 : Boolean;
      QLVoucherMarked@1000000008 : Boolean;
      QLPromoGroupMarked@1000000002 : Boolean;
      QLDistPromoGroupMarked@1000000047 : Boolean;
      QLItemHead@1000000003 : Boolean;
      QLOrderTotalHead@1000000004 : Boolean;
      QLVoucherHead@1000000005 : Boolean;
      QLPromoGroupHead@1000000006 : Boolean;
      QLDistPromoGroupHead@1000000048 : Boolean;
      BLDealHead@1000000009 : Boolean;
      BLDisAmtHead@1000000010 : Boolean;
      BLDisPercentHead@1000000011 : Boolean;
      BLPromoItemHead@1000000012 : Boolean;
      BLCheapDearHead@1000000036 : Boolean;
      BLCheapHead@1000000040 : Boolean;
      BLDearHead@1000000041 : Boolean;
      BLShipDisAmtHead@1000000049 : Boolean;
      BLShipDisPercentHead@1000000050 : Boolean;
      BLDealMarked@1000000013 : Boolean;
      BLDisAmtMarked@1000000014 : Boolean;
      BLDisPercentMarked@1000000015 : Boolean;
      BLPromoItemMarked@1000000016 : Boolean;
      BLCheapDearMarked@1000000037 : Boolean;
      BLCheapMarked@1000000042 : Boolean;
      BLDearMarked@1000000043 : Boolean;
      BLShipDisAmtMarked@1000000052 : Boolean;
      BLShipDisPercentMarked@1000000051 : Boolean;
      TextMess@1000000017 : Text[250];
      TextMess1@1000000035 : Text[250];
      QLItemHeadAccepted@1000000020 : Boolean;
      QLOrderTotalHeadAccepted@1000000019 : Boolean;
      QLVoucherHeadAccepted@1000000018 : Boolean;
      QLPromoGroupHeadAccepted@1000000000 : Boolean;
      QLDistPromoGroupHeadAccepted@1000000045 : Boolean;
      QLItemMarkedAccepted@1000000024 : Boolean;
      QLOrderTotalMarkedAccepted@1000000023 : Boolean;
      QLVoucherMarkedAccepted@1000000022 : Boolean;
      QLPromoGroupMarkedAccepted@1000000021 : Boolean;
      QLDistPromoGroupMarkedAccepted@1000000046 : Boolean;
      BLDealPriceHeadAccepted@1000000025 : Boolean;
      BLDiscAmtHeadAccepted@1000000026 : Boolean;
      BLDiscPercentHeadAccepted@1000000027 : Boolean;
      BLPromoItemHeadAccepted@1000000028 : Boolean;
      BLCheapDearHeadAccepted@1000000038 : Boolean;
      BLShipDiscAmtHeadAccepted@1000000054 : Boolean;
      BLShipDiscPercentHeadAccepted@1000000053 : Boolean;
      BLDealPriceMarkedAccepted@1000000032 : Boolean;
      BLDiscAmtMarkedAccepted@1000000031 : Boolean;
      BLDiscPercentMarkedAccepted@1000000030 : Boolean;
      BLPromoItemMarkedAccepted@1000000029 : Boolean;
      BLCheapDearMarkedAccepted@1000000039 : Boolean;
      BLShipDiscAmtMarkedAccepted@1000000056 : Boolean;
      BLShipDiscPercentMarkedAccept@1000000055 : Boolean;
      FoundMultiQualifyByType@1000000034 : Boolean;
      NoOfItemQualLines@1000000044 : Integer;
      QualifyByType@1000000033 : 'Quantity,Amount';
      Txt1001@1000000057 : TextConst 'ENU=All Qualifying Lines must have the same Qualify-by-Type;ENG=All Qualifying Lines must have the same Qualify-by-Type';
      Txt1002@1000000058 : TextConst 'ENU=A Threshold Type of Value requires all Qualifying Lines to have a Qualify-by-Type of Amount;ENG=A Threshold Type of Value requires all Qualifying Lines to have a Qualify-by-Type of Amount';
      Txt1003@1000000059 : TextConst 'ENU=A Threshold Type of Value is not valid when the Required Qualifiers is All.;ENG=A Threshold Type of Value is not valid when the Required Qualifiers is All.';
      Txt1004@1000000060 : TextConst 'ENU=A Threshold Type of Qualified Item Quantity requires all Qualifying Lines to have a Qualify-by-Type of Quantity;ENG=A Threshold Type of Qualified Item Quantity requires all Qualifying Lines to have a Qualify-by-Type of Quantity';
      Txt1005@1000000061 : TextConst 'ENU=A Threshold Type of Qualified Item Quantity is not valid when the Required Qualifiers is All.;ENG=A Threshold Type of Qualified Item Quantity is not valid when the Required Qualifiers is All.';
      Txt1006@1000000062 : TextConst 'ENU=You cannot have a Benefit Line of Applies-to Type of Order Header and have Cannot Buy More Than Max Qty. ticked.;ENG=You cannot have a Benefit Line of Applies-to Type of Order Header and have Cannot Buy More Than Max Qty. ticked.';
      Txt1007@1000000063 : TextConst 'ENU=If you have a Threshold Type of Qualified Item Quantity you must have a Qualifying Line Mark Line for Benefit.;ENG=If you have a Threshold Type of Qualified Item Quantity you must have a Qualifying Line Mark Line for Benefit.';
      Txt1008@1000000064 : TextConst 'ENU=If you have a Threshold Type of Benefit Item Quantity you must have a Benefit Line of Type Promo Item.;ENG=If you have a Threshold Type of Benefit Item Quantity you must have a Benefit Line of Type Promo Item.';
      Txt1009@1000000065 : TextConst 'ENU=The label code must not be blank;ENG=The label code must not be blank';
      Txt1010@1000000066 : TextConst 'ENU=The Resource No. for Discounts must not be blank;ENG=The Resource No. for Discounts must not be blank';
      Txt1011@1000000067 : TextConst 'ENU=The Start Date must not be blank;ENG=The Start Date must not be blank';
      Txt1012@1000000068 : TextConst 'ENU=The End Date must not be blank;ENG=The End Date must not be blank';
      Txt1013@1000000069 : TextConst 'ENU=The promotion has already ended;ENG=The promotion has already ended';
      Txt1014@1000000070 : TextConst 'ENU=You must fill in the Threshod Applies-to Who when the Threshold Type is not blank;ENG=You must fill in the Threshod Applies-to Who when the Threshold Type is not blank';
      Txt1015@1000000071 : TextConst 'ENU=Campaign No. %1 is not Activated;ENG=Campaign No. %1 is not Activated';
      Txt1016@1000000072 : TextConst 'ENU=Campaign No. %1 has already ended;ENG=Campaign No. %1 has already ended';
      Txt1017@1000000073 : TextConst 'ENU=No. must not be blank on Qualifying Line type %1;ENG=No. must not be blank on Qualifying Line type %1';
      Txt1018@1000000074 : TextConst 'ENU=Qualifying Line Item No. %1;ENG=Qualifying Line Item No. %1';
      Txt1019@1000000075 : TextConst 'ENU=Cannot find the;ENG=Cannot find the';
      Txt1020@1000000076 : TextConst 'ENU=is blocked;ENG=is blocked';
      Txt1021@1000000077 : TextConst 'ENU=is Blocked Online;ENG=is Blocked Online';
      Txt1022@1000000078 : TextConst 'ENU=is not on any web page;ENG=is not on any web page';
      Txt1023@1000000079 : TextConst 'ENU=Voucher Scheme %1;ENG=Voucher Scheme %1';
      Txt1024@1000000080 : TextConst 'ENU=has already ended;ENG=has already ended';
      Txt1025@1000000081 : TextConst 'ENU=is not activated;ENG=is not activated';
      Txt1026@1000000082 : TextConst 'ENU=Promotion Group Code %1;ENG=Promotion Group Code %1';
      Txt1027@1000000083 : TextConst 'ENU=must not be Blocked;ENG=must not be Blocked';
      Txt1028@1000000084 : TextConst 'ENU=must not be Blocked Online;ENG=must not be Blocked Online';
      Txt1029@1000000085 : TextConst 'ENU=must be on a web page.;ENG=must be on a web page.';
      Txt1030@1000000086 : TextConst 'ENU=There are no items in;ENG=There are no items in';
      Txt1031@1000000087 : TextConst 'ENU=Cannot find;ENG=Cannot find';
      Txt1032@1000000088 : TextConst 'ENU=Either the Qualifying Quantity or the Qualifying Amount must be filled in on Qualifying Line type %1;ENG=Either the Qualifying Quantity or the Qualifying Amount must be filled in on Qualifying Line type %1';
      Txt1033@1000000089 : TextConst 'ENU=There must be at least one Qualifying Line;ENG=There must be at least one Qualifying Line';
      Txt1034@1000000090 : TextConst 'ENU=QL of Order Total with Mark Line;ENG=QL of Order Total with Mark Line';
      Txt1035@1000000091 : TextConst 'ENU=QL of Voucher with Mark Line;ENG=QL of Voucher with Mark Line';
      Txt1036@1000000092 : TextConst 'ENU=Benefit Line Type %1 Applies-to Type %2 is not enabled;ENG=Benefit Line Type %1 Applies-to Type %2 is not enabled';
      Txt1037@1000000093 : TextConst 'ENU=Benefit Line Type %1 Applies-to Type %2 has no qualifying lines;ENG=Benefit Line Type %1 Applies-to Type %2 has no qualifying lines';
      Txt1038@1000000094 : TextConst 'ENU=A Valid Promotion does not exist for Benefit Line Type %1 Applies-to Type %2;ENG=A Valid Promotion does not exist for Benefit Line Type %1 Applies-to Type %2';
      Txt1039@1000000095 : TextConst 'ENU=The Deal Price must not be 0 on Benefit Line Type %1 Applies-to Type %2;ENG=The Deal Price must not be 0 on Benefit Line Type %1 Applies-to Type %2';
      Txt1040@1000000096 : TextConst 'ENU=The Discount Amount must not be 0 on Benefit Line Type %1 Applies-to Type %2;ENG=The Discount Amount must not be 0 on Benefit Line Type %1 Applies-to Type %2';
      Txt1041@1000000097 : TextConst 'ENU=The Discount Percentage must not be 0 on Benefit Line Type %1 Applies-to Type %2;ENG=The Discount Percentage must not be 0 on Benefit Line Type %1 Applies-to Type %2';
      Txt1042@1000000098 : TextConst 'ENU=The Item No. must not be blank on Benefit Line Type %1 Applies-to Type %2;ENG=The Item No. must not be blank on Benefit Line Type %1 Applies-to Type %2';
      Txt1043@1000000099 : TextConst 'ENU=Benefit Line Item No. %1;ENG=Benefit Line Item No. %1';
      Txt1044@1000000100 : TextConst 'ENU=The Item Quantity must not be 0 on Benefit Line Type %1 Applies-to Type %2;ENG=The Item Quantity must not be 0 on Benefit Line Type %1 Applies-to Type %2';
      Txt1045@1000000101 : TextConst 'ENU=The Discount Amount must not be 0 on Benefit Line Type %1 Applies-to Type %2;ENG=The Discount Amount must not be 0 on Benefit Line Type %1 Applies-to Type %2';
      Txt1046@1000000102 : TextConst 'ENU=The Discount Percentage must not be 0 on Benefit Line Type %1 Applies-to Type %2;ENG=The Discount Percentage must not be 0 on Benefit Line Type %1 Applies-to Type %2';
      Txt1047@1000000103 : TextConst 'ENU=There must be at least one Benefit Line;ENG=There must be at least one Benefit Line';
      Txt1048@1000000104 : TextConst 'ENU=QL Item Marked Lines set but no valid BL;ENG=QL Item Marked Lines set but no valid BL';
      Txt1049@1000000105 : TextConst 'ENU=QL Order Total Marked Lines set but no valid BL;ENG=QL Order Total Marked Lines set but no valid BL';
      Txt1050@1000000106 : TextConst 'ENU=QL Voucher Marked Lines set but no valid BL;ENG=QL Voucher Marked Lines set but no valid BL';
      Txt1051@1000000107 : TextConst 'ENU=QL Promotion Group Marked Lines set but no valid BL;ENG=QL Promotion Group Marked Lines set but no valid BL';
      Txt1052@1000000108 : TextConst 'ENU=QL Dist. Promo Group Items Marked Lines set but no valid BL;ENG=QL Dist. Promo Group Items Marked Lines set but no valid BL';
      Txt1053@1000000109 : TextConst 'ENU=QL Item Header set but no valid BL;ENG=QL Item Header set but no valid BL';
      Txt1054@1000000110 : TextConst 'ENU=QL Order Total Header set but no valid BL;ENG=QL Order Total Header set but no valid BL';
      Txt1055@1000000111 : TextConst 'ENU=QL Promotion Group Header set but no valid BL;ENG=QL Promotion Group Header set but no valid BL';
      Txt1056@1000000112 : TextConst 'ENU=QL Dist. Promo Group Items Header set but no valid BL;ENG=QL Dist. Promo Group Items Header set but no valid BL';
      Txt1057@1000000113 : TextConst 'ENU=BL Deal Price, Order Header set but no valid QL;ENG=BL Deal Price, Order Header set but no valid QL';
      Txt1058@1000000114 : TextConst 'ENU=BL Discount Amount, Order Header set but no valid QL;ENG=BL Discount Amount, Order Header set but no valid QL';
      Txt1059@1000000115 : TextConst 'ENU=BL Discount %, Order Header set but no valid QL;ENG=BL Discount %, Order Header set but no valid QL';
      Txt1060@1000000116 : TextConst 'ENU=BL Promo Item, Order Header set but no valid QL;ENG=BL Promo Item, Order Header set but no valid QL';
      Txt1061@1000000117 : TextConst 'ENU=BL Cheapest/Dearest, Order Header set but no valid QL;ENG=BL Cheapest/Dearest, Order Header set but no valid QL';
      Txt1062@1000000118 : TextConst 'ENU=BL Cheapest/Dearest, you need at least 2 items;ENG=BL Cheapest/Dearest, you need at least 2 items';
      Txt1063@1000000119 : TextConst 'ENU=BL Shipping Discount Amount, Order Header set but no valid QL;ENG=BL Shipping Discount Amount, Order Header set but no valid QL';
      Txt1064@1000000120 : TextConst 'ENU=BL Shipping Discount %, Order Header set but no valid QL;ENG=BL Shipping Discount %, Order Header set but no valid QL';
      Txt1065@1000000121 : TextConst 'ENU=BL Deal Price, Marked Lines set but no valid QL;ENG=BL Deal Price, Marked Lines set but no valid QL';
      Txt1066@1000000122 : TextConst 'ENU=BL Discount Amount, Marked Lines set but no valid QL;ENG=BL Discount Amount, Marked Lines set but no valid QL';
      Txt1067@1000000123 : TextConst 'ENU=BL Discount %, Marked Lines set but no valid QL;ENG=BL Discount %, Marked Lines set but no valid QL';
      Txt1068@1000000124 : TextConst 'ENU=BL Promo Item, Marked Lines set but no valid QL;ENG=BL Promo Item, Marked Lines set but no valid QL';
      Txt1069@1000000125 : TextConst 'ENU=BL Cheapest/Dearest, Marked Lines set but no valid QL;ENG=BL Cheapest/Dearest, Marked Lines set but no valid QL';
      Txt1070@1000000126 : TextConst 'ENU=BL Cheapest/Dearest, you need at least 2 items;ENG=BL Cheapest/Dearest, you need at least 2 items';
      Txt1071@1000000127 : TextConst 'ENU=BL Shipping Discount Amount, Marked Lines set but no valid QL;ENG=BL Shipping Discount Amount, Marked Lines set but no valid QL';
      Txt1072@1000000128 : TextConst 'ENU=BL Shipping Discount %, Marked Lines set but no valid QL;ENG=BL Shipping Discount %, Marked Lines set but no valid QL';
      Txt1073@1000000129 : TextConst 'ENU="You can only have a Voucher Qualifying Line with a Benefit Line of Applies-to Type Marked Lines if there is a Qualifying Line of either Item or Promotion Group which must be Mark Line for Benefit = TRUE";ENG="You can only have a Voucher Qualifying Line with a Benefit Line of Applies-to Type Marked Lines if there is a Qualifying Line of either Item or Promotion Group which must be Mark Line for Benefit = TRUE"';
      Txt1074@1000000130 : TextConst 'ENU=QL Voucher Header set but no valid BL;ENG=QL Voucher Header set but no valid BL';
      Txt1075@1000000131 : TextConst 'ENU=For a Benefit Line of Type %1 and Applies-to Type %2 you need a Qualifying Line of a Type of either Promotion Group Distinct Promo Group Items or Item with Mark Line for Benefit ticked (1);ENG=For a Benefit Line of Type %1 and Applies-to Type %2 you need a Qualifying Line of a Type of either Promotion Group Distinct Promo Group Items or Item with Mark Line for Benefit ticked (1)';
      Txt1076@1000000132 : TextConst 'ENU=For a Benefit Line of Type %1 and Applies-to Type %2 you need a Qualifying Line of a Type of either Promotion Group or Item with Mark Line for Benefit ticked (2);ENG=For a Benefit Line of Type %1 and Applies-to Type %2 you need a Qualifying Line of a Type of either Promotion Group or Item with Mark Line for Benefit ticked (2)';
      Txt1077@1000000133 : TextConst 'ENU=For a Benefit Line of Type %1 and Applies-to Type %2 you need a Qualifying Line of a Type of either Distinct Promo Group Items, or Item with Mark Line for Benefit ticked (3);ENG=For a Benefit Line of Type %1 and Applies-to Type %2 you need a Qualifying Line of a Type of either Distinct Promo Group Items, or Item with Mark Line for Benefit ticked (3)';
      Txt1078@1000000134 : TextConst 'ENU=The only valid Qualifying Line for Benefit Line Type %1 Applies-to Type %2 is Type Item with Mark Line for Benefit ticked (4);ENG=The only valid Qualifying Line for Benefit Line Type %1 Applies-to Type %2 is Type Item with Mark Line for Benefit ticked (4)';
      Txt1079@1000000135 : TextConst 'ENU=The only valid Qualifying Line for Benefit Line Type %1 Applies-to Type %2 is Type Promotion Group with Mark Line for Benefit ticked (8);ENG=The only valid Qualifying Line for Benefit Line Type %1 Applies-to Type %2 is Type Promotion Group with Mark Line for Benefit ticked (8)';
      Txt1080@1000000136 : TextConst 'ENU=There is no valid Qualifying Line for Benefit Line Type %1 Applies-to Type %2'' (9);ENG=There is no valid Qualifying Line for Benefit Line Type %1 Applies-to Type %2'' (9)';
      Txt1081@1000000137 : TextConst 'ENU=There is no valid Qualifying Line for Benefit Line Type %1 Applies-to Type %2 (10);ENG=There is no valid Qualifying Line for Benefit Line Type %1 Applies-to Type %2 (10)';
      Txt1082@1000000138 : TextConst 'ENU=There is no valid Qualifying Line for Benefit Line Type %1 Applies-to Type %2 (11);ENG=There is no valid Qualifying Line for Benefit Line Type %1 Applies-to Type %2 (11)';
      Txt1083@1000000139 : TextConst 'ENU=To see the valid combinations, click on Valid field in the Promotion Header;ENG=To see the valid combinations, click on Valid field in the Promotion Header';
    BEGIN
      //DOC EC2013.3.10 -
      IF Released = TRUE THEN
        ERROR(Text021,"No.");
      //DOC EC2013.3.10 +

      "DateTime Last Validated" := CURRENTDATETIME;
      MODIFY;
      COMMIT;
      Happy := TRUE;

      PromoProb.RESET;
      PromoProb.SETRANGE("Promotion No.","No.");
      PromoProb.DELETEALL;
      PromoSummary.RESET;
      PromoSummary.SETCURRENTKEY("Promotion No.");
      PromoSummary.SETRANGE("Promotion No.","No.");
      PromoSummary.DELETEALL;

      //DOC EC2013.3.10 -
      //Additional checks
      PromoQualLine.RESET;
      PromoQualLine.SETRANGE("Promotion No.","No.");
      //0
      PromoQualLine.SETFILTER("Applies-to Type",'<>%1',
                             PromoQualLine."Applies-to Type"::Voucher); //DOC EC2013.3.60
      //DOC EC2013.3.60 -
      IF PromoQualLine.FIND('-') THEN BEGIN
        QualifyByType := PromoQualLine."Qualify-by Type";
        IF PromoQualLine.COUNT > 1 THEN BEGIN
          PromoQualLine.FIND('-');
          QualifyByType := PromoQualLine."Qualify-by Type";
          FoundMultiQualifyByType := FALSE;
          REPEAT
            IF QualifyByType <> PromoQualLine."Qualify-by Type" THEN
              FoundMultiQualifyByType := TRUE;
          UNTIL PromoQualLine.NEXT = 0;
          IF FoundMultiQualifyByType = TRUE THEN BEGIN
            TextMess := Txt1001;
            InsertPromoProb(TextMess);
          END;
        END;
        PromoQualLine.SETRANGE("Applies-to Type");
      END ELSE BEGIN
        PromoQualLine.SETRANGE("Applies-to Type");
        PromoQualLine.FIND('-'); //Want it to error if no lines at all.
        QualifyByType := PromoQualLine."Qualify-by Type";
      END;
      //DOC EC2013.3.60 +

      IF "Threshold Type" = "Threshold Type"::Value THEN BEGIN
        IF QualifyByType <> QualifyByType::Amount THEN BEGIN
          TextMess := Txt1002;
          InsertPromoProb(TextMess);
        END;
        //DOC EC2013.3.30 - New Restriction. May work with Ben Line of Discount %, Discount Amt is a definite problem
        IF "Required Qualifiers" = "Required Qualifiers"::All THEN BEGIN
          TextMess := Txt1003;
          InsertPromoProb(TextMess);
        END;
        //DOC EC2013.3.30 +
      END;
      IF "Threshold Type" = "Threshold Type"::"Qualified Item Quantity" THEN BEGIN
        IF QualifyByType <> QualifyByType::Quantity THEN BEGIN
          TextMess := Txt1004;
          InsertPromoProb(TextMess);
        END;
        //DOC EC2013.3.30 - New Restriction. May work with Ben Line of Discount %, Discount Amt is a definite problem
        IF "Required Qualifiers" = "Required Qualifiers"::All THEN BEGIN
          TextMess := Txt1005;
          InsertPromoProb(TextMess);
        END;
        //DOC EC2013.3.30 +
      END;
      //1
      IF "Cannot Buy More Than Max Qty." THEN BEGIN
        PromoQualLine.SETRANGE("Applies-to Type",PromoQualLine."Applies-to Type"::"Order Total");
        IF PromoQualLine.FINDFIRST THEN BEGIN
          TextMess := Txt1006;
          InsertPromoProb(TextMess);
        END;
        PromoQualLine.SETRANGE("Applies-to Type");
      END;
      //2
      IF "Threshold Type" = "Threshold Type"::"Qualified Item Quantity" THEN BEGIN
        PromoQualLine.SETRANGE("Mark Line for Benefit",TRUE);
        IF NOT PromoQualLine.FINDFIRST THEN BEGIN
          TextMess := Txt1007;
          InsertPromoProb(TextMess);
        END;
        PromoQualLine.SETRANGE("Mark Line for Benefit");
      END;
      //3
      PromoBenLine.RESET;
      PromoBenLine.SETRANGE("Promotion No.","No.");
      IF "Threshold Type" = "Threshold Type"::"Benefit Item Quantity" THEN BEGIN
        PromoBenLine.SETRANGE(Type,PromoBenLine.Type::"Promo Item");
        IF NOT PromoBenLine.FINDFIRST THEN BEGIN
          TextMess := Txt1008;
          InsertPromoProb(TextMess);
        END;
        PromoBenLine.SETRANGE(Type);
      END;
      //DOC EC2013.3.10 +

      IF "Label Code" = '' THEN InsertPromoProb(Txt1009);
      IF "Resource No. for Discounts" = '' THEN InsertPromoProb(Txt1010);
      IF "Start Date" = 0D THEN InsertPromoProb(Txt1011);
      IF "End Date" = 0D THEN InsertPromoProb(Txt1012);
      IF "End Date" < TODAY THEN InsertPromoProb(Txt1013);

      IF ("Threshold Type" <> "Threshold Type"::" ") AND
        ("Threshold Applies-To Who" = "Threshold Applies-To Who"::" ") THEN
        InsertPromoProb(Txt1014);

      IF "Campaign No." <> '' THEN BEGIN
        Campaign.GET("Campaign No.");
        //DOC EC2009.2.71 -
        InternetSetup.GET;
        IF InternetSetup."Dont Check Campaign Activation" = FALSE THEN BEGIN
        //DOC EC2009.2.71 +
          Campaign.CALCFIELDS(Activated);
          IF Campaign.Activated = FALSE THEN BEGIN
            TextMess := STRSUBSTNO(Txt1015, "Campaign No.");
            InsertPromoProb(TextMess);
          END;
        END;  //DOC EC2009.2.71
        IF (Campaign."Ending Date" <> 0D) AND
           (Campaign."Ending Date" < TODAY) THEN BEGIN
          TextMess := STRSUBSTNO(Txt1016, "Campaign No.");
          InsertPromoProb(TextMess);
        END;
      END;

      //setting these as run through QLs
      QLItemMarked := FALSE;
      QLOrderTotalMarked := FALSE;
      QLVoucherMarked := FALSE;
      QLPromoGroupMarked := FALSE;
      QLDistPromoGroupMarked := FALSE; //DOC EC2015.5.01
      QLItemHead := FALSE;
      QLOrderTotalHead := FALSE;
      QLVoucherHead := FALSE;
      QLPromoGroupHead := FALSE;
      QLDistPromoGroupHead := FALSE; //DOC EC2015.5.01
      NoOfItemQualLines := 0;  //DOC EC2013.4.60

      //setting these as run through BLs
      BLDealHead := FALSE;
      BLDisAmtHead := FALSE;
      BLDisPercentHead := FALSE;
      BLPromoItemHead := FALSE;
      BLCheapDearHead := FALSE; //DOC EC2013.4.60
      BLCheapHead := FALSE; //DOC EC2013.4.60
      BLDearHead := FALSE; //DOC EC2013.4.60
      BLShipDisAmtHead := FALSE; //DOC EC2015.5.01
      BLShipDisPercentHead := FALSE; //DOC EC2015.5.01
      BLDealMarked := FALSE;
      BLDisAmtMarked := FALSE;
      BLDisPercentMarked := FALSE;
      BLPromoItemMarked := FALSE;
      BLCheapDearMarked := FALSE; //DOC EC2013.4.60
      BLCheapMarked := FALSE; //DOC EC2013.4.60
      BLDearMarked := FALSE; //DOC EC2013.4.60
      BLShipDisAmtMarked := FALSE; //DOC EC2015.5.01
      BLShipDisPercentMarked := FALSE; //DOC EC2015.5.01

      //setting these as run through BLs to find out which QLs to accept
      QLItemHeadAccepted := FALSE;
      QLOrderTotalHeadAccepted := FALSE;
      QLVoucherHeadAccepted := FALSE;
      QLPromoGroupHeadAccepted := FALSE;
      QLDistPromoGroupHeadAccepted := FALSE;    //DOC EC2015.5.01
      QLItemMarkedAccepted := FALSE;
      QLOrderTotalMarkedAccepted := FALSE;
      QLVoucherMarkedAccepted := FALSE;
      QLPromoGroupMarkedAccepted := FALSE;
      QLDistPromoGroupMarkedAccepted := FALSE;    //DOC EC2015.5.01

      //setting these as run through QLs to find out which BLs to accept
      BLDealPriceHeadAccepted := FALSE;
      BLDiscAmtHeadAccepted := FALSE;
      BLDiscPercentHeadAccepted := FALSE;
      BLPromoItemHeadAccepted := FALSE;
      BLCheapDearHeadAccepted := FALSE; //DOC EC2013.4.60
      BLShipDiscAmtHeadAccepted := FALSE; //DOC EC2015.5.01
      BLShipDiscPercentHeadAccepted := FALSE;  //DOC EC2015.5.01
      BLDealPriceMarkedAccepted := FALSE;
      BLDiscAmtMarkedAccepted := FALSE;
      BLDiscPercentMarkedAccepted := FALSE;
      BLPromoItemMarkedAccepted := FALSE;
      BLCheapDearMarkedAccepted := FALSE; //DOC EC2013.4.60
      BLShipDiscAmtMarkedAccepted := FALSE; //DOC EC2015.5.01
      BLShipDiscPercentMarkedAccept := FALSE; //DOC EC2015.5.01

      //checking Qualifying Lines for logic and completeness
      ValidPromos.RESET;
      PromoQualLine.RESET;
      PromoQualLine.SETRANGE("Promotion No.","No.");
      PromoBenLine.RESET;
      PromoBenLine.SETRANGE("Promotion No.","No.");
      IF PromoQualLine.FIND('-') THEN
        REPEAT
          CASE PromoQualLine."Applies-to Type" OF
            PromoQualLine."Applies-to Type"::Item,
            PromoQualLine."Applies-to Type"::Voucher,
            PromoQualLine."Applies-to Type"::"Distinct Promo Group Items",  //DOC EC2015.5.01
            PromoQualLine."Applies-to Type"::"Promotion Group" :
            IF PromoQualLine."No." = '' THEN BEGIN
              TextMess := STRSUBSTNO(Txt1017, PromoQualLine."Applies-to Type");
              InsertPromoProb(TextMess);
            END;
          END;
          CASE PromoQualLine."Applies-to Type" OF
            PromoQualLine."Applies-to Type"::Item :
              BEGIN
                NoOfItemQualLines := NoOfItemQualLines + 1;  //DOC EC2013.4.60
                IF PromoQualLine."No." <> '' THEN BEGIN
                  TextMess := STRSUBSTNO(Txt1018, PromoQualLine."No.");
                  IF NOT Item.GET(PromoQualLine."No.") THEN
                    InsertPromoProb(Txt1019 + ' ' + TextMess)
                  ELSE BEGIN
                    IF Item.Blocked THEN
                      InsertPromoProb((TextMess + ' ' + Txt1020));
                    IF Item."Blocked Online" THEN
                      InsertPromoProb((TextMess + ' ' + Txt1021)); //DOC EC2013.3.60
                    Item.CALCFIELDS("No. of Web Pages");  //DOC EC2013.3.60
                    IF Item."No. of Web Pages" < 1 THEN
                      InsertPromoProb((TextMess + ' ' + Txt1022)); //DOC EC2013.3.60
                  END;
                END;
                IF PromoQualLine."Mark Line for Benefit" THEN BEGIN
                  QLItemMarked := TRUE;
                  ValidPromos.RESET;
                  ValidPromos.SETRANGE("Qual Line ATT Item",TRUE);
                  ValidPromos.SETRANGE("Benefit Line Applies-to Type",
                           ValidPromos."Benefit Line Applies-to Type"::"Marked Lines");
                  IF ValidPromos.FIND('-') THEN
                    REPEAT
                      CASE ValidPromos."Benefit Line Type" OF
                        ValidPromos."Benefit Line Type"::"Deal Price" :
                          BLDealPriceMarkedAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Discount Amount" :
                          BLDiscAmtMarkedAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Discount %" :
                          BLDiscPercentMarkedAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Promo Item" :
                          BLPromoItemMarkedAccepted := TRUE;
                        //DOC EC2013.4.60 -
                        ValidPromos."Benefit Line Type"::"Cheapest Free",
                                    ValidPromos."Benefit Line Type"::"Dearest Free" :
                          BLCheapDearMarkedAccepted := TRUE;
                        //DOC EC2013.4.60 +
                        //DOC EC2015.5.01 -
                        ValidPromos."Benefit Line Type"::"Shipping Discount Amount" :
                          BLShipDiscAmtMarkedAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Shipping Discount %" :
                          BLShipDiscPercentMarkedAccept := TRUE;
                        //DOC EC2015.5.01 +
                      END;
                    UNTIL ValidPromos.NEXT = 0;
                END ELSE BEGIN
                  QLItemHead := TRUE;
                  ValidPromos.RESET;
                  ValidPromos.SETRANGE("Qual Line ATT Item",TRUE);
                  ValidPromos.SETRANGE("Benefit Line Applies-to Type",
                           ValidPromos."Benefit Line Applies-to Type"::"Order Header");
                  IF ValidPromos.FIND('-') THEN
                    REPEAT
                      CASE ValidPromos."Benefit Line Type" OF
                        ValidPromos."Benefit Line Type"::"Deal Price" :
                          BLDealPriceHeadAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Discount Amount" :
                          BLDiscAmtHeadAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Discount %" :
                          BLDiscPercentHeadAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Promo Item" :
                          BLPromoItemHeadAccepted := TRUE;
                        //DOC EC2013.4.60 -
                        ValidPromos."Benefit Line Type"::"Cheapest Free",
                                    ValidPromos."Benefit Line Type"::"Dearest Free" :
                          BLCheapDearHeadAccepted := TRUE;
                        //DOC EC2013.4.60 +
                        //DOC EC2015.5.01 -
                        ValidPromos."Benefit Line Type"::"Shipping Discount Amount" :
                          BLShipDiscAmtHeadAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Shipping Discount %" :
                          BLShipDiscPercentHeadAccepted := TRUE;
                        //DOC EC2015.5.01 +
                      END;
                    UNTIL ValidPromos.NEXT = 0;
                END;
              END;
            PromoQualLine."Applies-to Type"::"Order Total" :
              BEGIN
                IF PromoQualLine."Mark Line for Benefit" THEN BEGIN
                  QLOrderTotalMarked := TRUE;
                  ValidPromos.RESET;
                  ValidPromos.SETRANGE("Qual Line ATT Order Total",TRUE);
                  ValidPromos.SETRANGE("Benefit Line Applies-to Type",
                           ValidPromos."Benefit Line Applies-to Type"::"Marked Lines");
                  IF ValidPromos.FIND('-') THEN
                    REPEAT
                      CASE ValidPromos."Benefit Line Type" OF
                        ValidPromos."Benefit Line Type"::"Deal Price" :
                          BLDealPriceMarkedAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Discount Amount" :
                          BLDiscAmtMarkedAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Discount %" :
                          BLDiscPercentMarkedAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Promo Item" :
                          BLPromoItemMarkedAccepted := TRUE;
                        //DOC EC2015.5.01 -
                        ValidPromos."Benefit Line Type"::"Shipping Discount Amount" :
                          BLShipDiscAmtMarkedAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Shipping Discount %" :
                          BLShipDiscPercentMarkedAccept := TRUE;
                        //DOC EC2015.5.01 +
                      END;
                    UNTIL ValidPromos.NEXT = 0;
                END ELSE BEGIN
                  QLOrderTotalHead := TRUE;
                  ValidPromos.RESET;
                  ValidPromos.SETRANGE("Qual Line ATT Order Total",TRUE);
                  ValidPromos.SETRANGE("Benefit Line Applies-to Type",
                           ValidPromos."Benefit Line Applies-to Type"::"Order Header");
                  IF ValidPromos.FIND('-') THEN
                    REPEAT
                      CASE ValidPromos."Benefit Line Type" OF
                        ValidPromos."Benefit Line Type"::"Deal Price" :
                          BLDealPriceHeadAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Discount Amount" :
                          BLDiscAmtHeadAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Discount %" :
                          BLDiscPercentHeadAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Promo Item" :
                          BLPromoItemHeadAccepted := TRUE;
                        //DOC EC2015.5.01 -
                        ValidPromos."Benefit Line Type"::"Shipping Discount Amount" :
                          BLShipDiscAmtHeadAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Shipping Discount %" :
                          BLShipDiscPercentHeadAccepted := TRUE;
                        //DOC EC2015.5.01 +
                      END;
                    UNTIL ValidPromos.NEXT = 0;
                END;
              END;
            PromoQualLine."Applies-to Type"::Voucher :
              BEGIN
                IF PromoQualLine."No." <> '' THEN BEGIN
                  //DOC EC2013.4.60 -
                  TextMess := STRSUBSTNO(Txt1023, PromoQualLine."No.");
                  IF NOT VouchSch.GET(PromoQualLine."No.") THEN
                    InsertPromoProb((Txt1019 + TextMess))
                  ELSE BEGIN
                    IF (VouchSch."Expiry Date" <> 0D) AND
                       (VouchSch."Expiry Date" < TODAY) THEN
                      InsertPromoProb((TextMess + ' ' + Txt1024));
                    IF VouchSch.Activated = FALSE THEN
                      InsertPromoProb((TextMess + ' ' + Txt1025));
                  END;
                  {
                  VouchEntry.RESET;
                  VouchEntry.SETCURRENTKEY("Customer No.","Voucher No.",Open);
                  VouchEntry.SETRANGE("Voucher Type",VouchEntry."Voucher Type"::Promotional);
                  //VouchEntry.SETRANGE(Open,TRUE);
                  VouchEntry.SETRANGE("Voucher No.",PromoQualLine."No.");
                  TextMess := 'Voucher No. ' + FORMAT(PromoQualLine."No.");
                  IF NOT VouchEntry.FINDFIRST THEN
                    InsertPromoProb(('Cannot find ' + TextMess))
                  ELSE BEGIN
                    IF (VouchEntry."Expiry Date" <> 0D) AND
                       (VouchEntry."Expiry Date" < TODAY) THEN
                      InsertPromoProb((TextMess + ' has already ended'));
                    IF VouchEntry.Open = FALSE THEN
                      InsertPromoProb((TextMess + ' is not open'));
                    IF VouchEntry.Expired THEN
                      InsertPromoProb((TextMess + ' has expired'));
                    IF VouchEntry.Blocked THEN
                      InsertPromoProb((TextMess + ' is blocked'));
                    IF VouchEntry."One Off Has Been Used" THEN
                      InsertPromoProb((TextMess + ' is a One Off and has been Used'));
                    IF VouchEntry."Voucher Scheme Code" = '' THEN
                      InsertPromoProb((TextMess + ' has no Voucher Scheme Code'));
                    TextMess := 'Voucher Scheme ' + FORMAT(VouchEntry."Voucher Scheme Code");
                    IF NOT VouchSch.GET(VouchEntry."Voucher Scheme Code") THEN
                      InsertPromoProb(('Cannot find ' + TextMess))
                    ELSE BEGIN
                      IF (VouchSch."Expiry Date" <> 0D) AND
                         (VouchSch."Expiry Date" < TODAY) THEN
                        InsertPromoProb((TextMess + ' has already ended'));
                      IF VouchSch.Activated = FALSE THEN
                        InsertPromoProb((TextMess + ' is not activated'));
                    END;
                  END;
                  }
                  //DOC EC2013.4.60 +
                END;
                IF PromoQualLine."Mark Line for Benefit" THEN BEGIN
                  QLVoucherMarked := TRUE;
                  ValidPromos.RESET;
                  ValidPromos.SETRANGE("Qual Line ATT Voucher",TRUE);
                  ValidPromos.SETRANGE("Benefit Line Applies-to Type",
                           ValidPromos."Benefit Line Applies-to Type"::"Marked Lines");
                  IF ValidPromos.FIND('-') THEN
                    REPEAT
                      CASE ValidPromos."Benefit Line Type" OF
                        ValidPromos."Benefit Line Type"::"Deal Price" :
                          BLDealPriceMarkedAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Discount Amount" :
                          BLDiscAmtMarkedAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Discount %" :
                          BLDiscPercentMarkedAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Promo Item" :
                          BLPromoItemMarkedAccepted := TRUE;
                        //DOC EC2015.5.01 -
                        ValidPromos."Benefit Line Type"::"Shipping Discount Amount" :
                          BLShipDiscAmtMarkedAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Shipping Discount %" :
                          BLShipDiscPercentMarkedAccept := TRUE;
                        //DOC EC2015.5.01 +
                      END;
                    UNTIL ValidPromos.NEXT = 0;
                END ELSE BEGIN
                  QLVoucherHead := TRUE;
                  ValidPromos.RESET;
                  ValidPromos.SETRANGE("Qual Line ATT Voucher",TRUE);
                  ValidPromos.SETRANGE("Benefit Line Applies-to Type",
                           ValidPromos."Benefit Line Applies-to Type"::"Order Header");
                  IF ValidPromos.FIND('-') THEN
                    REPEAT
                      CASE ValidPromos."Benefit Line Type" OF
                        ValidPromos."Benefit Line Type"::"Deal Price" :
                          BLDealPriceHeadAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Discount Amount" :
                          BLDiscAmtHeadAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Discount %" :
                          BLDiscPercentHeadAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Promo Item" :
                          BLPromoItemHeadAccepted := TRUE;
                        //DOC EC2015.5.01 -
                        ValidPromos."Benefit Line Type"::"Shipping Discount Amount" :
                          BLShipDiscAmtHeadAccepted := TRUE;
                        ValidPromos."Benefit Line Type"::"Shipping Discount %" :
                          BLShipDiscPercentHeadAccepted := TRUE;
                        //DOC EC2015.5.01 +
                      END;
                    UNTIL ValidPromos.NEXT = 0;
                END;
              END;
            PromoQualLine."Applies-to Type"::"Distinct Promo Group Items",  //DOC EC2015.5.01
            PromoQualLine."Applies-to Type"::"Promotion Group" :
              BEGIN
                IF PromoQualLine."No." <> '' THEN BEGIN
                  TextMess := STRSUBSTNO(Txt1026, PromoQualLine."No.");
                  //DOC EC2013.3.60 -
                  //Orig IF NOT PromoGroup.GET(PromoQualLine."Label Code",PromoQualLine."No.") THEN
                  //Orig   InsertPromoProb(('Cannot find ' + TextMess))
                  IF PromoGroup.GET(PromoQualLine."Label Code",PromoQualLine."No.")
                  THEN BEGIN
                    ItemsInPromoGroup.RESET;
                    ItemsInPromoGroup.SETRANGE("Label Code",PromoQualLine."Label Code");
                    ItemsInPromoGroup.SETRANGE("Promotion Group Code",
                                               PromoQualLine."No.");
                    IF ItemsInPromoGroup.FIND('-') THEN BEGIN
                      TextMess := 'Item No. %1 in ' + TextMess;
                      REPEAT
                        NoOfItemQualLines := NoOfItemQualLines + 1; //DOC EC2013.4.60
                        Item.GET(ItemsInPromoGroup."Item No.");
                        TextMess1 := STRSUBSTNO(TextMess,ItemsInPromoGroup."Item No.");
                        IF Item.Blocked THEN
                          InsertPromoProb((TextMess1 + ' ' + Txt1027));
                        IF Item."Blocked Online" THEN
                          InsertPromoProb((TextMess1 + ' ' + Txt1028));
                        Item.CALCFIELDS("No. of Web Pages");
                        IF Item."No. of Web Pages" < 1 THEN
                          InsertPromoProb((TextMess1 + ' ' + Txt1029));
                      UNTIL ItemsInPromoGroup.NEXT = 0;
                    END ELSE
                      InsertPromoProb((Txt1030 + ' ' + TextMess));
                  END ELSE
                     InsertPromoProb((Txt1031 + ' ' + TextMess));
                  //DOC EC2013.3.60 +
                END;
                IF PromoQualLine."Mark Line for Benefit" THEN BEGIN
                  IF PromoQualLine."Applies-to Type" = PromoQualLine."Applies-to Type"::"Promotion Group" THEN BEGIN //DOC EC2015.5.01
                    QLPromoGroupMarked := TRUE;
                    ValidPromos.RESET;
                    ValidPromos.SETRANGE("Qual Line ATT Promotion Group",TRUE);
                    ValidPromos.SETRANGE("Benefit Line Applies-to Type",
                             ValidPromos."Benefit Line Applies-to Type"::"Marked Lines");
                    IF ValidPromos.FIND('-') THEN
                      REPEAT
                        CASE ValidPromos."Benefit Line Type" OF
                          ValidPromos."Benefit Line Type"::"Deal Price" :
                            BLDealPriceMarkedAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Discount Amount" :
                            BLDiscAmtMarkedAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Discount %" :
                            BLDiscPercentMarkedAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Promo Item" :
                            BLPromoItemMarkedAccepted := TRUE;
                          //DOC EC2013.4.60 -
                          ValidPromos."Benefit Line Type"::"Cheapest Free",
                                      ValidPromos."Benefit Line Type"::"Dearest Free" :
                            BLCheapDearMarkedAccepted := TRUE;
                          //DOC EC2013.4.60 +
                          //DOC EC2015.5.01 -
                          ValidPromos."Benefit Line Type"::"Shipping Discount Amount" :
                            BLShipDiscAmtMarkedAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Shipping Discount %" :
                            BLShipDiscPercentMarkedAccept := TRUE;
                          //DOC EC2015.5.01 +
                        END;
                      UNTIL ValidPromos.NEXT = 0;
                  //DOC EC2015.5.01 -
                  END ELSE BEGIN
                    //PromoQualLine."Applies-to Type"::"Distinct Promo Group Items"
                    QLDistPromoGroupMarked := TRUE;
                    ValidPromos.RESET;
                    ValidPromos.SETRANGE("QL ATT Dist. Promo Group Items",TRUE);
                    ValidPromos.SETRANGE("Benefit Line Applies-to Type",
                             ValidPromos."Benefit Line Applies-to Type"::"Marked Lines");
                    IF ValidPromos.FIND('-') THEN
                      REPEAT
                        CASE ValidPromos."Benefit Line Type" OF
                          ValidPromos."Benefit Line Type"::"Deal Price" :
                            BLDealPriceMarkedAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Discount Amount" :
                            BLDiscAmtMarkedAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Discount %" :
                            BLDiscPercentMarkedAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Promo Item" :
                            BLPromoItemMarkedAccepted := TRUE;
                          //DOC EC2013.4.60 -
                          ValidPromos."Benefit Line Type"::"Cheapest Free",
                                      ValidPromos."Benefit Line Type"::"Dearest Free" :
                            BLCheapDearMarkedAccepted := TRUE;
                          //DOC EC2013.4.60 +
                          //DOC EC2015.5.01 -
                          ValidPromos."Benefit Line Type"::"Shipping Discount Amount" :
                            BLShipDiscAmtMarkedAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Shipping Discount %" :
                            BLShipDiscPercentMarkedAccept := TRUE;
                          //DOC EC2015.5.01 +
                        END;
                      UNTIL ValidPromos.NEXT = 0;
                  END;
                  //DOC EC2015.5.01 +
                END ELSE BEGIN
                  QLPromoGroupHead := TRUE;
                  IF PromoQualLine."Applies-to Type" = PromoQualLine."Applies-to Type"::"Promotion Group" THEN BEGIN //DOC EC2015.5.01
                    ValidPromos.RESET;
                    ValidPromos.SETRANGE("Qual Line ATT Promotion Group",TRUE);
                    ValidPromos.SETRANGE("Benefit Line Applies-to Type",
                             ValidPromos."Benefit Line Applies-to Type"::"Order Header");
                    IF ValidPromos.FIND('-') THEN
                      REPEAT
                        CASE ValidPromos."Benefit Line Type" OF
                          ValidPromos."Benefit Line Type"::"Deal Price" :
                            BLDealPriceHeadAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Discount Amount" :
                            BLDiscAmtHeadAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Discount %" :
                            BLDiscPercentHeadAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Promo Item" :
                            BLPromoItemHeadAccepted := TRUE;
                          //DOC EC2013.4.60 -
                          ValidPromos."Benefit Line Type"::"Cheapest Free",
                                      ValidPromos."Benefit Line Type"::"Dearest Free" :
                            BLCheapDearHeadAccepted := TRUE;
                          //DOC EC2013.4.60 +
                          //DOC EC2015.5.01 -
                          ValidPromos."Benefit Line Type"::"Shipping Discount Amount" :
                            BLShipDiscAmtHeadAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Shipping Discount %" :
                            BLShipDiscPercentHeadAccepted := TRUE;
                          //DOC EC2015.5.01 +
                        END;
                      UNTIL ValidPromos.NEXT = 0;
                  //DOC EC2015.5.01 -
                  END ELSE BEGIN
                    //PromoQualLine."Applies-to Type"::"Distinct Promo Group Items"
                    ValidPromos.RESET;
                    ValidPromos.SETRANGE("QL ATT Dist. Promo Group Items",TRUE);
                    ValidPromos.SETRANGE("Benefit Line Applies-to Type",
                             ValidPromos."Benefit Line Applies-to Type"::"Order Header");
                    IF ValidPromos.FIND('-') THEN
                      REPEAT
                        CASE ValidPromos."Benefit Line Type" OF
                          ValidPromos."Benefit Line Type"::"Deal Price" :
                            BLDealPriceHeadAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Discount Amount" :
                            BLDiscAmtHeadAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Discount %" :
                            BLDiscPercentHeadAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Promo Item" :
                            BLPromoItemHeadAccepted := TRUE;
                          //DOC EC2013.4.60 -
                          ValidPromos."Benefit Line Type"::"Cheapest Free",
                                      ValidPromos."Benefit Line Type"::"Dearest Free" :
                            BLCheapDearHeadAccepted := TRUE;
                          //DOC EC2013.4.60 +
                          //DOC EC2015.5.01 -
                          ValidPromos."Benefit Line Type"::"Shipping Discount Amount" :
                            BLShipDiscAmtHeadAccepted := TRUE;
                          ValidPromos."Benefit Line Type"::"Shipping Discount %" :
                            BLShipDiscPercentHeadAccepted := TRUE;
                          //DOC EC2015.5.01 +
                        END;
                      UNTIL ValidPromos.NEXT = 0;
                  END;
                  //DOC EC2015.5.01 +
                END;
              END;
          END;
          IF (PromoQualLine."Qualifying Qty." = 0) AND
             (PromoQualLine."Qualifying Amount" = 0) THEN BEGIN
            TextMess := STRSUBSTNO(Txt1032, PromoQualLine."Applies-to Type");
            InsertPromoProb(TextMess);
          END;
        UNTIL PromoQualLine.NEXT = 0
      ELSE
        InsertPromoProb(Txt1033);
      //QLPromoGroupHeadAccepted QLPromoGroupMarkedAccepted
      //These should not occur because of validation on qualifying lines.
      IF QLOrderTotalMarked THEN InsertPromoProb(Txt1034);
      IF QLVoucherMarked THEN InsertPromoProb(Txt1035);

      //checking Benefit Lines for logic and completeness
      PromoQualLine.RESET;
      PromoQualLine.SETRANGE("Promotion No.","No.");
      PromoBenLine.RESET;
      PromoBenLine.SETRANGE("Promotion No.","No.");
      IF PromoBenLine.FIND('-') THEN
        REPEAT
          IF ValidPromos.GET(PromoBenLine."Applies-to Type",PromoBenLine.Type) THEN BEGIN
            IF PromoBenLine."Applies-to Type" = PromoBenLine."Applies-to Type"::"Order Header" THEN BEGIN
              IF ValidPromos."Qual Line ATT Item" THEN QLItemHeadAccepted := TRUE;
              IF ValidPromos."Qual Line ATT Order Total" THEN QLOrderTotalHeadAccepted:= TRUE;
              IF ValidPromos."Qual Line ATT Voucher" THEN QLVoucherHeadAccepted:= TRUE;
              IF ValidPromos."Qual Line ATT Promotion Group" THEN QLPromoGroupHeadAccepted:= TRUE;
              IF ValidPromos."QL ATT Dist. Promo Group Items" THEN QLDistPromoGroupHeadAccepted:= TRUE; //DOC EC2015.5.01
            END ELSE BEGIN
              IF ValidPromos."Qual Line ATT Item" THEN QLItemMarkedAccepted := TRUE;
              IF ValidPromos."Qual Line ATT Order Total" THEN QLOrderTotalMarkedAccepted:= TRUE;
              IF ValidPromos."Qual Line ATT Voucher" THEN QLVoucherMarkedAccepted:= TRUE;
              IF ValidPromos."Qual Line ATT Promotion Group" THEN QLPromoGroupMarkedAccepted:= TRUE;
              IF ValidPromos."QL ATT Dist. Promo Group Items" THEN QLDistPromoGroupMarkedAccepted:= TRUE;  //DOC EC2015.5.01
            END;
            IF ValidPromos.Enabled = FALSE THEN BEGIN
              TextMess := STRSUBSTNO(Txt1036, PromoBenLine.Type, PromoBenLine."Applies-to Type");
              InsertPromoProb(TextMess);
            END ELSE BEGIN
              IF ValidPromos."Qualifying Line Allowed" = FALSE THEN BEGIN
                TextMess := STRSUBSTNO(Txt1037, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                InsertPromoProb(TextMess);
              END;
            END;
          END ELSE BEGIN
            TextMess := STRSUBSTNO(Txt1038, PromoBenLine.Type, PromoBenLine."Applies-to Type");
            InsertPromoProb(TextMess);
          END;
          CASE PromoBenLine.Type OF
            PromoBenLine.Type::"Deal Price" :
              BEGIN
                IF PromoBenLine."Deal Price" = 0 THEN BEGIN
                  TextMess := STRSUBSTNO(Txt1039, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                  InsertPromoProb(TextMess);
                END;
                IF PromoBenLine."Applies-to Type" = PromoBenLine."Applies-to Type"::"Order Header" THEN
                  BLDealHead := TRUE
                ELSE
                  BLDealMarked := TRUE;
              END;
            PromoBenLine.Type::"Discount Amount" :
              BEGIN
                IF PromoBenLine."Discount Amount" = 0 THEN BEGIN
                  TextMess := STRSUBSTNO(Txt1040, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                  InsertPromoProb(TextMess);
                END;
                IF PromoBenLine."Applies-to Type" = PromoBenLine."Applies-to Type"::"Order Header" THEN
                  BLDisAmtHead := TRUE
                ELSE
                  BLDisAmtMarked := TRUE;
              END;
            PromoBenLine.Type::"Discount %" :
              BEGIN
                IF (PromoBenLine."Discount %" = 0) AND
                   ("Label Code" <> 'WARD') THEN BEGIN  //DOC EC2013.3.30
                  TextMess := STRSUBSTNO(Txt1041, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                  InsertPromoProb(TextMess);
                END;
                IF PromoBenLine."Applies-to Type" = PromoBenLine."Applies-to Type"::"Order Header" THEN
                  BLDisPercentHead := TRUE
                ELSE
                  BLDisPercentMarked := TRUE;
              END;
            PromoBenLine.Type::"Promo Item" :
              BEGIN
                IF PromoBenLine."Item No." = '' THEN BEGIN
                  TextMess := STRSUBSTNO(Txt1042, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                  InsertPromoProb(TextMess);
                END ELSE BEGIN
                  TextMess := STRSUBSTNO(Txt1043, PromoBenLine."Item No.");
                  IF NOT Item.GET(PromoBenLine."Item No.") THEN
                    InsertPromoProb((Txt1043 + ' ' + TextMess))
                  ELSE BEGIN
                    IF Item.Blocked THEN
                      InsertPromoProb((TextMess + ' ' + Txt1020));
                    IF Item."Blocked Online" THEN
                      InsertPromoProb((TextMess + ' ' + Txt1021)); //DOC EC2013.3.60
                    Item.CALCFIELDS("No. of Web Pages");
                    IF Item."No. of Web Pages" < 1 THEN
                      InsertPromoProb((TextMess + ' ' + Txt1022));
                  END;
                END;
                IF PromoBenLine."Item Quantity" = 0 THEN BEGIN
                  TextMess := STRSUBSTNO(Txt1044, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                  InsertPromoProb(TextMess);
                END;
                //IF PromoBenLine."Max Item Quantity" = 0 THEN BEGIN
                //  TextMess := 'The Max Item Quantity must not be 0 on Benefit Line Type ' + FORMAT(PromoBenLine.Type) +
                //              ', Applies-to Type ' + FORMAT(PromoBenLine."Applies-to Type");
                //  InsertPromoProb(TextMess);
                //END;
                IF PromoBenLine."Applies-to Type" = PromoBenLine."Applies-to Type"::"Order Header" THEN
                  BLPromoItemHead := TRUE
                ELSE
                  BLPromoItemMarked := TRUE;
              END;
            //DOC EC2013.4.60 -
            PromoBenLine.Type::"Cheapest Free" :
              BEGIN
                IF PromoBenLine."Applies-to Type" = PromoBenLine."Applies-to Type"::"Order Header" THEN BEGIN
                  BLCheapDearHead := TRUE;
                  BLCheapHead := TRUE;
                END ELSE BEGIN
                  BLCheapDearMarked := TRUE;
                  BLCheapMarked := TRUE;
                END;
              END;
            PromoBenLine.Type::"Dearest Free" :
              BEGIN
                IF PromoBenLine."Applies-to Type" = PromoBenLine."Applies-to Type"::"Order Header" THEN BEGIN
                  BLCheapDearHead := TRUE;
                  BLDearHead := TRUE;
                END ELSE BEGIN
                  BLCheapDearMarked := TRUE;
                  BLDearMarked := TRUE;
                END;
              END;
            //DOC EC2013.4.60 +
            //DOC EC2015.5.01 -
            PromoBenLine.Type::"Shipping Discount Amount" :
              BEGIN
                IF PromoBenLine."Discount Amount" = 0 THEN BEGIN
                  TextMess := STRSUBSTNO(Txt1045, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                  InsertPromoProb(TextMess);
                END;
                IF PromoBenLine."Applies-to Type" = PromoBenLine."Applies-to Type"::"Order Header" THEN
                  BLShipDisAmtHead := TRUE
                ELSE
                  BLShipDisAmtMarked := TRUE;
              END;
            PromoBenLine.Type::"Shipping Discount %" :
              BEGIN
                IF (PromoBenLine."Discount %" = 0) AND
                   ("Label Code" <> 'WARD') THEN BEGIN  //DOC EC2013.3.30
                  TextMess := STRSUBSTNO(Txt1046, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                  InsertPromoProb(TextMess);
                END;
                IF PromoBenLine."Applies-to Type" = PromoBenLine."Applies-to Type"::"Order Header" THEN
                  BLShipDisPercentHead := TRUE
                ELSE
                  BLShipDisPercentMarked := TRUE;
              END;
            //DOC EC2015.5.01 +
          END;
        UNTIL PromoBenLine.NEXT = 0
      ELSE
        InsertPromoProb(Txt1047);

      IF "Required Qualifiers" = "Required Qualifiers"::All THEN BEGIN
        //DOC EC2015.5.01 IF (QLItemMarked = TRUE) OR (QLPromoGroupMarked = TRUE) THEN BEGIN
        IF (QLItemMarked = TRUE) OR (QLPromoGroupMarked = TRUE) OR (QLDistPromoGroupMarked = TRUE) THEN BEGIN //DOC EC2015.5.01
          //Setting some combinations as allowed which would not be allowed
          //if Required Qualifiers were not all
          QLItemHeadAccepted := TRUE;
          QLPromoGroupHeadAccepted := TRUE;
          QLDistPromoGroupHeadAccepted := TRUE; //DOC EC2015.5.01
        END;
      END;

      IF QLItemMarked AND (QLItemMarkedAccepted = FALSE) THEN
        InsertPromoProb(Txt1048);
      IF QLOrderTotalMarked AND (QLOrderTotalMarkedAccepted = FALSE) THEN
        InsertPromoProb(Txt1049);
      IF QLVoucherMarked AND (QLVoucherMarkedAccepted = FALSE) THEN
        InsertPromoProb(Txt1050);
      IF QLPromoGroupMarked AND (QLPromoGroupMarkedAccepted = FALSE) THEN
        InsertPromoProb(Txt1051);
      //DOC EC2015.5.01 -
      IF QLDistPromoGroupMarked AND (QLDistPromoGroupMarkedAccepted = FALSE) THEN
        InsertPromoProb(Txt1052);
      //DOC EC2015.5.01+

      IF QLItemHead AND (QLItemHeadAccepted = FALSE) THEN
        InsertPromoProb(Txt1053);
      IF QLOrderTotalHead AND (QLOrderTotalHeadAccepted = FALSE) THEN
        InsertPromoProb(Txt1054);
      //Moved lower down cos this maybe valid
      //IF QLVoucherHead AND (QLVoucherHeadAccepted = FALSE) THEN
      //  InsertPromoProb('QL Voucher Header set but no valid BL');
      IF QLPromoGroupHead AND (QLPromoGroupHeadAccepted = FALSE) THEN
        InsertPromoProb(Txt1055);
      //DOC EC2015.5.01 -
      IF QLDistPromoGroupHead AND (QLDistPromoGroupHeadAccepted = FALSE) THEN
        InsertPromoProb(Txt1056);
      //DOC EC2015.5.01 +

      IF BLDealHead AND (BLDealPriceHeadAccepted = FALSE) THEN
        InsertPromoProb(Txt1057);
      IF BLDisAmtHead AND (BLDiscAmtHeadAccepted = FALSE) THEN
        InsertPromoProb(Txt1058);
      IF BLDisPercentHead AND (BLDiscPercentHeadAccepted = FALSE) THEN
        InsertPromoProb(Txt1059);
      IF BLPromoItemHead AND (BLPromoItemHeadAccepted = FALSE) THEN
        InsertPromoProb(Txt1060);
      //DOC EC2013.4.60 -
      IF BLCheapDearHead AND (BLCheapDearHeadAccepted = FALSE) THEN
        InsertPromoProb(Txt1061);
      IF BLCheapDearHead AND (NoOfItemQualLines < 2) THEN
        InsertPromoProb(Txt1062);
      //DOC EC2013.4.60 +
      //DOC EC2015.5.01 -
      IF BLShipDisAmtHead AND (BLShipDiscAmtHeadAccepted = FALSE) THEN
        InsertPromoProb(Txt1063);
      IF BLShipDisPercentHead AND (BLShipDiscPercentHeadAccepted = FALSE) THEN
        InsertPromoProb(Txt1064);
      //DOC EC2015.5.01 +
      IF BLDealMarked AND (BLDealPriceMarkedAccepted = FALSE) THEN
        InsertPromoProb(Txt1065);
      IF BLDisAmtMarked AND (BLDiscAmtMarkedAccepted = FALSE) THEN
        InsertPromoProb(Txt1066);
      IF BLDisPercentMarked AND (BLDiscPercentMarkedAccepted = FALSE) THEN
        InsertPromoProb(Txt1067);
      IF BLPromoItemMarked AND (BLPromoItemMarkedAccepted = FALSE) THEN
        InsertPromoProb(Txt1068);
      //DOC EC2013.4.60 -
      IF BLCheapDearMarked AND (BLCheapDearMarkedAccepted = FALSE) THEN
        InsertPromoProb(Txt1069);
      IF BLCheapDearMarked AND (NoOfItemQualLines < 2) THEN
        InsertPromoProb(Txt1070);
      //DOC EC2013.4.60 +
      //DOC EC2015.5.01 -
      IF BLShipDisAmtMarked AND (BLShipDiscAmtMarkedAccepted = FALSE) THEN
        InsertPromoProb(Txt1071);
      IF BLShipDisPercentMarked AND (BLShipDiscPercentMarkedAccept = FALSE) THEN
        InsertPromoProb(Txt1072);
      //DOC EC2015.5.01 +
      //Checking Benefit Lines of Applies-to Type Marked Lines.

      //IF QLVoucherHead AND (QLVoucherHeadAccepted = FALSE) THEN
      //  InsertPromoProb('QL Voucher Header set but no valid BL');

      PromoQualLine.RESET;
      PromoQualLine.SETRANGE("Promotion No.","No.");

      PromoQualLine1.RESET;
      PromoQualLine1.SETRANGE("Promotion No.","No.");

      PromoBenLine.RESET;
      PromoBenLine.SETRANGE("Promotion No.","No.");
      PromoBenLine.SETRANGE("Applies-to Type",PromoBenLine."Applies-to Type"::"Marked Lines");
      IF PromoBenLine.FIND('-') THEN BEGIN
        //If got a Qual Line of Promotion need to check got some other valid line
        PromoQualLine.SETRANGE("Applies-to Type",
                      PromoQualLine."Applies-to Type"::Voucher);
        IF PromoQualLine.FINDFIRST THEN BEGIN
          PromoQualLine1.SETFILTER("Applies-to Type",'<>%1&<>%2',
                         PromoQualLine1."Applies-to Type"::"Order Total",
                         PromoQualLine1."Applies-to Type"::Voucher);
          PromoQualLine1.SETRANGE("Mark Line for Benefit",TRUE);
          IF NOT PromoQualLine1.FINDFIRST THEN BEGIN
            InsertPromoProb(Txt1073);
            IF QLVoucherHead AND (QLVoucherHeadAccepted = FALSE) THEN
              InsertPromoProb(Txt1074);
          END;
        END;
        PromoQualLine.SETRANGE("Applies-to Type");
        PromoQualLine1.SETRANGE("Applies-to Type");
        PromoQualLine1.SETRANGE("Mark Line for Benefit");
        REPEAT
          IF ValidPromos.GET(PromoBenLine.Type,PromoBenLine."Applies-to Type") THEN BEGIN
            IF (ValidPromos.Enabled = TRUE) AND
               (ValidPromos."Qualifying Line Allowed" = TRUE) THEN BEGIN
              //Now need to cycle through Qualifying Lines
              //If got a Qual Line of Promotion need to check got some other valid line
              PromoQualLine.SETRANGE("Mark Line for Benefit",TRUE);
              IF ValidPromos."Qual Line ATT Item" THEN BEGIN
                PromoQualLine.SETRANGE("Applies-to Type",PromoQualLine."Applies-to Type"::Item);
                IF NOT PromoQualLine.FINDFIRST THEN BEGIN
                  IF ValidPromos."Qual Line ATT Promotion Group" THEN BEGIN
                    PromoQualLine.SETRANGE("Applies-to Type",PromoQualLine."Applies-to Type"::"Promotion Group");
                    IF NOT PromoQualLine.FINDFIRST THEN BEGIN
                      //DOC EC2015.5.01 -
                      IF ValidPromos."QL ATT Dist. Promo Group Items" THEN BEGIN
                        PromoQualLine.SETRANGE("Applies-to Type",PromoQualLine."Applies-to Type"::"Distinct Promo Group Items");
                        IF NOT PromoQualLine.FINDFIRST THEN BEGIN
                      //DOC EC2015.5.01 +
                          TextMess := STRSUBSTNO(Txt1075, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                          InsertPromoProb(TextMess);
                        END;
                      END ELSE BEGIN
                        TextMess := STRSUBSTNO(Txt1076, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                        InsertPromoProb(TextMess);
                      END;//DOC EC2015.5.01
                    END;
                  END ELSE BEGIN
                    //DOC EC2015.5.01 -
                    IF ValidPromos."QL ATT Dist. Promo Group Items" THEN BEGIN
                      PromoQualLine.SETRANGE("Applies-to Type",PromoQualLine."Applies-to Type"::"Distinct Promo Group Items");
                      IF NOT PromoQualLine.FINDFIRST THEN BEGIN
                        TextMess := STRSUBSTNO(Txt1077, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                        InsertPromoProb(TextMess);
                      END;
                    END ELSE BEGIN
                    //DOC EC2015.5.01 +
                    TextMess := STRSUBSTNO(Txt1078, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                    InsertPromoProb(TextMess);
                    END; //DOC EC2015.5.01
                  END;
                END;
              END ELSE BEGIN
                IF ValidPromos."Qual Line ATT Promotion Group" THEN BEGIN
                  PromoQualLine.SETRANGE("Applies-to Type",PromoQualLine."Applies-to Type"::"Promotion Group");
                  IF NOT PromoQualLine.FINDFIRST THEN BEGIN
                    //DOC EC2015.5.01 -
                    IF ValidPromos."QL ATT Dist. Promo Group Items" THEN BEGIN
                      PromoQualLine.SETRANGE("Applies-to Type",PromoQualLine."Applies-to Type"::"Distinct Promo Group Items");
                      IF NOT PromoQualLine.FINDFIRST THEN BEGIN
                      //DOC EC2015.5.01 +
                        TextMess := STRSUBSTNO(Txt1079, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                        InsertPromoProb(TextMess);
                      END;
                    END ELSE BEGIN
                      TextMess := STRSUBSTNO(Txt1080, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                      InsertPromoProb(TextMess);
                    END;
                  END;
                END ELSE BEGIN
                  IF ValidPromos."QL ATT Dist. Promo Group Items" THEN BEGIN
                    PromoQualLine.SETRANGE("Applies-to Type",PromoQualLine."Applies-to Type"::"Distinct Promo Group Items");
                    IF NOT PromoQualLine.FINDFIRST THEN BEGIN
                      TextMess := STRSUBSTNO(Txt1081, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                      InsertPromoProb(TextMess);
                    END;
                  END ELSE BEGIN
                    TextMess := STRSUBSTNO(Txt1082, PromoBenLine.Type, PromoBenLine."Applies-to Type");
                    InsertPromoProb(TextMess);
                  END;
                END;
              END;
            END;
          END;
        UNTIL PromoBenLine.NEXT = 0;
      END;

      //CreateSummary(BenLineType,BenLineAppliesToType,QualLineATTItem,QualLineATTOrderTotal,QualLineATTVoucher,QualLineATTPromotionGroup)
      IF BLDealHead THEN BEGIN
        IF QLItemHead THEN       CreateSummary(0,1,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalHead THEN CreateSummary(0,1,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherHead THEN    CreateSummary(0,1,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupHead THEN CreateSummary(0,1,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupHead OR QLDistPromoGroupHead THEN CreateSummary(0,1,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      IF BLDisAmtHead THEN BEGIN
        IF QLItemHead THEN       CreateSummary(1,1,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalHead THEN CreateSummary(1,1,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherHead THEN    CreateSummary(1,1,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupHead THEN CreateSummary(1,1,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupHead OR QLDistPromoGroupHead THEN CreateSummary(1,1,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      IF BLDisPercentHead THEN BEGIN
        IF QLItemHead THEN       CreateSummary(2,1,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalHead THEN CreateSummary(2,1,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherHead THEN    CreateSummary(2,1,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupHead THEN CreateSummary(2,1,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupHead OR QLDistPromoGroupHead THEN CreateSummary(2,1,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      IF BLPromoItemHead THEN BEGIN
        IF QLItemHead THEN       CreateSummary(3,1,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalHead THEN CreateSummary(3,1,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherHead THEN    CreateSummary(3,1,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupHead THEN CreateSummary(3,1,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupHead OR QLDistPromoGroupHead THEN CreateSummary(3,1,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      //DOC EC2013.4.60 -
      IF BLCheapHead THEN BEGIN
        IF QLItemHead THEN       CreateSummary(4,1,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalHead THEN CreateSummary(4,1,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherHead THEN    CreateSummary(4,1,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupHead THEN CreateSummary(4,1,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupHead OR QLDistPromoGroupHead THEN CreateSummary(4,1,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01

      END;
      IF BLDearHead THEN BEGIN
        IF QLItemHead THEN       CreateSummary(5,1,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalHead THEN CreateSummary(5,1,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherHead THEN    CreateSummary(5,1,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupHead THEN CreateSummary(5,1,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupHead OR QLDistPromoGroupHead THEN CreateSummary(5,1,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      //DOC EC2013.4.60 +
      //DOC EC2015.5.01 -
      IF BLShipDisAmtHead THEN BEGIN
        IF QLItemHead THEN       CreateSummary(6,1,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalHead THEN CreateSummary(6,1,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherHead THEN    CreateSummary(6,1,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupHead THEN CreateSummary(1,1,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupHead OR QLDistPromoGroupHead THEN CreateSummary(6,1,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      IF BLShipDisPercentHead THEN BEGIN
        IF QLItemHead THEN       CreateSummary(7,1,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalHead THEN CreateSummary(7,1,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherHead THEN    CreateSummary(7,1,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupHead THEN CreateSummary(2,1,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupHead OR QLDistPromoGroupHead THEN CreateSummary(7,1,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      //DOC EC2015.5.01 +

      IF BLDealMarked THEN BEGIN
        IF QLItemMarked THEN       CreateSummary(0,2,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalMarked THEN CreateSummary(0,2,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherMarked THEN    CreateSummary(0,2,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupMarked THEN CreateSummary(0,2,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupMarked OR QLDistPromoGroupMarked THEN CreateSummary(0,2,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      IF BLDisAmtMarked THEN BEGIN
        IF QLItemMarked THEN       CreateSummary(1,2,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalMarked THEN CreateSummary(1,2,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherMarked THEN    CreateSummary(1,2,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupMarked THEN CreateSummary(1,2,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupMarked OR QLDistPromoGroupMarked THEN CreateSummary(1,2,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      IF BLDisPercentMarked THEN BEGIN
        IF QLItemMarked THEN       CreateSummary(2,2,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalMarked THEN CreateSummary(2,2,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherMarked THEN    CreateSummary(2,2,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupMarked THEN CreateSummary(2,2,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupMarked OR QLDistPromoGroupMarked THEN CreateSummary(2,2,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      IF BLPromoItemMarked THEN BEGIN
        IF QLItemMarked THEN       CreateSummary(3,2,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalMarked THEN CreateSummary(3,2,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherMarked THEN    CreateSummary(3,2,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupMarked THEN CreateSummary(3,2,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupMarked OR QLDistPromoGroupMarked THEN CreateSummary(3,2,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      //DOC EC2013.4.60 -
      IF BLCheapMarked THEN BEGIN
        IF QLItemMarked THEN       CreateSummary(4,2,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalMarked THEN CreateSummary(4,2,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherMarked THEN    CreateSummary(4,2,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupMarked THEN CreateSummary(4,2,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupMarked OR QLDistPromoGroupMarked THEN CreateSummary(4,2,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      IF BLDearMarked THEN BEGIN
        IF QLItemMarked THEN       CreateSummary(5,2,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalMarked THEN CreateSummary(5,2,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherMarked THEN    CreateSummary(5,2,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupMarked THEN CreateSummary(5,2,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupMarked OR QLDistPromoGroupMarked THEN CreateSummary(5,2,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      //DOC EC2013.4.60 +
      //DOC EC2015.5.01 -
      IF BLShipDisAmtMarked THEN BEGIN
        IF QLItemMarked THEN       CreateSummary(6,2,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalMarked THEN CreateSummary(6,2,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherMarked THEN    CreateSummary(6,2,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupMarked THEN CreateSummary(1,2,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupMarked OR QLDistPromoGroupMarked THEN CreateSummary(6,2,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      IF BLShipDisPercentMarked THEN BEGIN
        IF QLItemMarked THEN       CreateSummary(7,2,TRUE,FALSE,FALSE,FALSE);
        IF QLOrderTotalMarked THEN CreateSummary(7,2,FALSE,TRUE,FALSE,FALSE);
        IF QLVoucherMarked THEN    CreateSummary(7,2,FALSE,FALSE,TRUE,FALSE);
        //DOC EC2015.5.01 IF QLPromoGroupMarked THEN CreateSummary(2,2,TRUE,FALSE,FALSE,TRUE);
        IF QLPromoGroupMarked OR QLDistPromoGroupMarked THEN CreateSummary(7,2,TRUE,FALSE,FALSE,TRUE); //DOC EC2015.5.01
      END;
      //DOC EC2015.5.01 +

      IF Happy THEN BEGIN
        "DateTime Last Valid" := CURRENTDATETIME;
        VALIDATE(Valid,TRUE);
      END ELSE BEGIN
        InsertPromoProb(Txt1083);
        VALIDATE(Valid,FALSE);
      END;

      MODIFY;
    END;

    PROCEDURE SetHideDialog@1000000002(WantToHideDialog@1000000000 : Boolean);
    BEGIN
      HideDialog := WantToHideDialog;
    END;

    PROCEDURE InsertPromoProb@1000000001(ProblemText@1000000000 : Text[250]);
    BEGIN
      PromoProb.RESET;
      PromoProb.INIT;
      PromoProb."Promotion No." := "No.";
      PromoProb.Problem := ProblemText;
      PromoProb.INSERT(TRUE);
      Happy := FALSE;
    END;

    PROCEDURE CreateSummary@1040003(BenLineType@1040000 : 'Deal Price,Discount Amount,Discount %,Promo Item,Cheapest Free,Dearest Free';BenLineAppliesToType@1040001 : ' ,Order Header,Marked Lines';QualLineATTItem@1040002 : Boolean;QualLineATTOrderTotal@1040003 : Boolean;QualLineATTVoucher@1040004 : Boolean;QualLineATTPromotionGroup@1040005 : Boolean);
    BEGIN
      PromoSummary.RESET;
      IF PromoSummary.GET(BenLineAppliesToType,BenLineType,"No.") THEN BEGIN
        IF QualLineATTItem THEN
          PromoSummary."Qual Line ATT Item" := TRUE;
        IF QualLineATTOrderTotal THEN
          PromoSummary."Qual Line ATT Order Total" := TRUE;
        IF QualLineATTVoucher THEN
          PromoSummary."Qual Line ATT Voucher" := TRUE;
        IF QualLineATTPromotionGroup THEN
          PromoSummary."Qual Line ATT Promotion Group" := TRUE;
        PromoSummary.MODIFY;
      END ELSE BEGIN
        PromoSummary.INIT;
        PromoSummary."Benefit Line Applies-to Type" := BenLineAppliesToType;
        PromoSummary."Benefit Line Type" := BenLineType;
        PromoSummary."Promotion No." := "No.";
        PromoSummary."Qual Line ATT Item" := QualLineATTItem;
        PromoSummary."Qual Line ATT Order Total" := QualLineATTOrderTotal;
        PromoSummary."Qual Line ATT Voucher" := QualLineATTVoucher;
        PromoSummary."Qual Line ATT Promotion Group" := QualLineATTPromotionGroup;
        PromoSummary.INSERT;
      END;
    END;

    PROCEDURE AutoCreatePromoSegment@1040004();
    BEGIN
      IF "Label Code" = '' THEN
        ERROR(Text002,FIELDNAME("Label Code"),Text008);
      Label.GET("Label Code");
      IF Label."Auto Populate Promo Segments" = FALSE THEN
        EXIT;
      IF "Campaign No." = '' THEN
        ERROR(Text002,FIELDNAME("Campaign No."),Text008);
      SegmentHeader.RESET;
      SegmentHeader.SETCURRENTKEY("Campaign No.");
      SegmentHeader.SETRANGE("Campaign No.","Campaign No.");
      IF SegmentHeader.FIND('-') THEN
      REPEAT
        IF NOT PromoSegment.GET("No.",SegmentHeader."No.") THEN BEGIN
          PromoSegment.INIT;
          PromoSegment."Promotion No." := "No.";
          PromoSegment."Segment No." := SegmentHeader."No.";
          PromoSegment."Promotion is Valid" := Valid;
          PromoSegment."Label Code" := "Label Code";
          PromoSegment."Promotion Campaign No." := "Campaign No.";
          PromoSegment."Auto Created" := TRUE;
          PromoSegment.INSERT;
        END;
      UNTIL SegmentHeader.NEXT = 0;
    END;

    PROCEDURE DeletePromoSegment@1040005(CampaignNoToDelete@1040000 : Code[20]);
    BEGIN
      PromoSegment.RESET;
      PromoSegment.SETRANGE("Promotion No.","No.");
      IF CampaignNoToDelete = '' THEN
        PromoSegment.SETRANGE("Promotion Campaign No.")
      ELSE
        PromoSegment.SETRANGE("Promotion Campaign No.",CampaignNoToDelete);
      PromoSegment.SETRANGE("Auto Created",TRUE);
      PromoSegment.DELETEALL;
    END;

    BEGIN
    {
      //DOC EC2009.2.71 MQ 25/11/2011 - GW111125 Made Start/End Date editable and do no validation if field set on Internet Setup.
      //DOC EC2009.2.71 MQ 25/11/2011 - Do not check Campaign Activation of field set on Internet Setup
      //DOC EC2009.2.72 MQ 01/01/2012 - Begin to create multilanguage captions on fields
      //DOC EC2009.2.74 MQ 01/01/2012 - Update PromoHistProcess.TotalReBuildPromoHistorySum with Label Code
      //DOC EC2013.3.00 MQ 01/01/2012 - Add fields 78, 80, 82.  Code in Label Code
      //DOC EC2013.3.10 MQ 01/01/2012 - Add field 65 and code in Threshold Type. In Threshold Type, option Item Quantity renamed to Qualified Item Quantity
      //DOC EC2013.3.10 MQ 07/09/2012 - GW120907 Additional checks in CheckValid
      //DOC EC2013.3.10 MQ 17/09/2012 - GW120917 Code in OnModify - required for RTC and additional checks.
      //DOC EC2013.3.20 MQ 17/10/2012 - GW121017 Take out specific TN/BC code as going to use our Promos.
      //DOC EC2013.3.30 MQ 16/11/2012 - GW121116 Additional restrictions and WARD specific code
      //DOC EC2013.3.60 MQ 01/07/2013 - GW130701 Enhancements to restrictions and validations; Add key Released - used in Blocked/ Blocked Online Item checks
      //DOC EC2013.4.00 MQ 05/11/2013 - GW131105 Removed function ShowPromoCard, had code FORM.RUN(FORM::"Promotions Card",Rec); Not called from this table.
      //DOC EC2013.4.00 MQ 26/11/2013 - GW131126 Small mod to include DERMAUS
      //DOC EC2013.4.00 MQ 10/01/2014 - GW140110 Made USERID fields C40
      //DOC EC2013.4.50 MQ 10/02/2014 - GW140210 Add field Application and call Validate in Threshold Applies-To Who
      //DOC EC2013.4.60 MQ 19/03/2014 - GW140319 Add code in CheckValid to deal with new Benefit Line Types
      //DOC EC2013.4.60 MQ 17/04/2014 - GW140417 Code in CheckValid to deal with Qualifying Lines now points to Voucher Schemes
      //DOC EC2013.4.60 MQ 17/04/2014 - And small change in code in Application
      //DOC EC2015.5.01 MQ 13/01/2015 - GW150113 Enhance CheckValid for new Applies to Type
      //DOC EC2015.5.03 MQ 02/07/2015 - GW150702 Updates Not On Active Promotion on Promotion Groups
      //DOC EC2016.6    JH 05/10/2016 - ECom 2016
    }
    END.
  }
}

