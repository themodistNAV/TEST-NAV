OBJECT Table 9062705 Questionnaire Line
{
  OBJECT-PROPERTIES
  {
    Date=10/05/16;
    Time=12:00:00 PM;
    Version List=NA2016.15;
  }
  PROPERTIES
  {
    OnDelete=VAR
               QuestLineLogicCrit@1000000001 : Record 9062708;
               TextCommentExtension@1000000000 : Record 9062238;
             BEGIN
               QuestLineLogicCrit.RESET();
               QuestLineLogicCrit.SETRANGE("Questionnaire No.","Questionnaire No.");
               QuestLineLogicCrit.SETFILTER("Line Type", '%1|%2', QuestLineLogicCrit."Line Type"::"Before Question",
                 QuestLineLogicCrit."Line Type"::"After Question");
               QuestLineLogicCrit.SETRANGE("Source Entry No.","Line No.");
               QuestLineLogicCrit.DELETEALL(TRUE);

               QuestLineLogicCrit.RESET();
               QuestLineLogicCrit.SETRANGE("Questionnaire No.","Questionnaire No.");
               QuestLineLogicCrit.SETRANGE("Related Line No.","Line No.");
               QuestLineLogicCrit.DELETEALL(TRUE);

               TextCommentExtension.SETRANGE("Table No.",DATABASE::"Questionnaire Line");
               TextCommentExtension.SETRANGE(PositionText,GETPOSITION);
               IF TextCommentExtension.FINDSET THEN TextCommentExtension.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Questionnaire Line;
               ENG=Questionnaire Line];
  }
  FIELDS
  {
    { 1   ;   ;Questionnaire Template Code;Code20 ;TableRelation=Questionnaire."Questionnaire Template Code";
                                                   CaptionML=[ENU=Questionnaire Template Code;
                                                              ENG=Questionnaire Template Code] }
    { 2   ;   ;Questionnaire No.   ;Integer       ;TableRelation=Questionnaire."Questionnaire No." WHERE (Questionnaire Template Code=FIELD(Questionnaire Template Code));
                                                   CaptionML=[ENU=Questionnaire No.;
                                                              ENG=Questionnaire No.] }
    { 3   ;   ;Line No.            ;Integer       ;OnValidate=BEGIN
                                                                VALIDATE("Line No. (Text)",FORMAT("Line No."));
                                                              END;

                                                   CaptionML=[ENU=Line No.;
                                                              ENG=Line No.] }
    { 4   ;   ;Line No. (Text)     ;Text10        ;CaptionML=[ENU=Line No. (Text);
                                                              ENG=Line No. (Text)];
                                                   Editable=No }
    { 8   ;   ;Sequence            ;Integer       ;CaptionML=[ENU=Sequence;
                                                              ENG=Sequence] }
    { 9   ;   ;Question Name       ;Text50        ;CaptionML=[ENU=Question Name;
                                                              ENG=Question Name] }
    { 10  ;   ;Line Type           ;Option        ;CaptionML=[ENU=Line Type;
                                                              ENG=Line Type];
                                                   OptionCaptionML=[ENU=Question,Group Header,Block;
                                                                    ENG=Question,Group Header,Block];
                                                   OptionString=Question,Group Header,Block }
    { 11  ;   ;Group No.           ;Integer       ;CaptionML=[ENU=Group No.;
                                                              ENG=Group No.] }
    { 12  ;   ;Page No.            ;Integer       ;CaptionML=[ENU=Page No.;
                                                              ENG=Page No.] }
    { 13  ;   ;Question No.        ;Text30        ;CaptionML=[ENU=Question No.;
                                                              ENG=Question No.] }
    { 14  ;   ;Question Description;Text80        ;CaptionML=[ENU=Question Description;
                                                              ENG=Question Description] }
    { 15  ;   ;Indent              ;Integer       ;CaptionML=[ENU=Indent;
                                                              ENG=Indent] }
    { 16  ;   ;New Page            ;Boolean       ;CaptionML=[ENU=New Page;
                                                              ENG=New Page] }
    { 17  ;   ;Required            ;Boolean       ;CaptionML=[ENU=Required;
                                                              ENG=Required] }
    { 18  ;   ;Group Sequence      ;Integer       ;CaptionML=[ENU=Group Sequence;
                                                              ENG=Group Sequence] }
    { 19  ;   ;Hidden              ;Boolean       ;CaptionML=[ENU=Hidden;
                                                              ENG=Hidden] }
    { 20  ;   ;Questionnaire GUID  ;GUID          ;CaptionML=[ENU=Questionnaire GUID;
                                                              ENG=Questionnaire GUID] }
    { 21  ;   ;Before Question Actions;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("Questionnaire Logic Criteria" WHERE (Questionnaire No.=FIELD(Questionnaire No.),
                                                                                                           Source Entry No.=FIELD(Line No.),
                                                                                                           Line Type=CONST(Before Question)));
                                                   CaptionML=[ENU=Before Question Actions;
                                                              ENG=Before Question Actions];
                                                   BlankZero=Yes;
                                                   Description=NA2015.9;
                                                   Editable=No }
    { 22  ;   ;After Question Actions;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Questionnaire Logic Criteria" WHERE (Questionnaire No.=FIELD(Questionnaire No.),
                                                                                                           Source Entry No.=FIELD(Line No.),
                                                                                                           Line Type=CONST(After Question)));
                                                   CaptionML=[ENU=After Question Actions;
                                                              ENG=After Question Actions];
                                                   BlankZero=Yes;
                                                   Description=NA2015.9;
                                                   Editable=No }
    { 23  ;   ;Question Block No.  ;Integer       ;CaptionML=[ENU=Question Block No.;
                                                              ENG=Question Block No.];
                                                   Description=NA2015.9 }
    { 24  ;   ;Question Block Instance No.;Integer;CaptionML=[ENU=Question Block Instance No.;
                                                              ENG=Question Block Instance No.];
                                                   Description=NA2015.9 }
    { 25  ;   ;First Block Inst. Line No.;Integer ;CaptionML=[ENU=First Block Inst. Line No.;
                                                              ENG=First Block Inst. Line No.];
                                                   Description=NA2015.9 }
    { 26  ;   ;First Block Inst. Sequence No.;Integer;
                                                   CaptionML=[ENU=First Block Inst. Sequence No.;
                                                              ENG=First Block Inst. Sequence No.];
                                                   Description=NA2015.9 }
    { 27  ;   ;Question Indent     ;Integer       ;CaptionML=[ENU=Question Indent;
                                                              ENG=Question Indent];
                                                   Description=NA2015.9 }
    { 28  ;   ;Show Drop Down      ;Boolean       ;CaptionML=[ENU=Show Drop Down;
                                                              ENG=Show Drop Down];
                                                   Description=NA2015.9 }
    { 100 ;   ;Question Text       ;Text250       ;CaptionML=[ENU=Question Text;
                                                              ENG=Question Text];
                                                   Description=--- Question Fields --- }
    { 101 ;   ;Question Help Text  ;Text250       ;CaptionML=[ENU=Question Help Text;
                                                              ENG=Question Help Text] }
    { 102 ;   ;Question Help URL   ;Text250       ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Question Help URL;
                                                              ENG=Question Help URL] }
    { 103 ;   ;Question Help URL Name;Text100     ;CaptionML=[ENU=Question Help URL Name;
                                                              ENG=Question Help URL Name] }
    { 200 ;   ;Answer Type         ;Option        ;InitValue=Text;
                                                   CaptionML=[ENU=Answer Type;
                                                              ENG=Answer Type];
                                                   OptionCaptionML=[ENU=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime;
                                                                    ENG=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime];
                                                   OptionString=TableFilter,RecordID,OemText,Date,Time,DateFormula,Decimal,Text,Code,Binary,BLOB,Boolean,Integer,OemCode,Option,BigInteger,Duration,GUID,DateTime;
                                                   ValuesAllowed=[Date;Time;DateFormula;Decimal;Text;Code;Boolean;Integer;Option;BigInteger;DateTime];
                                                   Description=--- Answer Definition Fields --- }
    { 201 ;   ;Answer Table Id     ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   CaptionML=[ENU=Answer Table Id;
                                                              ENG=Answer Table Id] }
    { 202 ;   ;Answer Field Id     ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Answer Table Id));
                                                   OnValidate=VAR
                                                                ValueProcessing@1000000000 : Codeunit 9062475;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Answer Field Id;
                                                              ENG=Answer Field Id] }
    { 204 ;   ;Answer Option String;Text250       ;CaptionML=[ENU=Answer Option String;
                                                              ENG=Answer Option String] }
    { 205 ;   ;Answer Table Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObj."Object Name" WHERE (Object Type=CONST(Table),
                                                                                                  Object ID=FIELD(Answer Table Id)));
                                                   CaptionML=[ENU=Answer Table Name;
                                                              ENG=Answer Table Name];
                                                   Editable=No }
    { 206 ;   ;Answer Field Name   ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Field.FieldName WHERE (TableNo=FIELD(Answer Table Id),
                                                                                             No.=FIELD(Answer Field Id)));
                                                   CaptionML=[ENU=Answer Field Name;
                                                              ENG=Answer Field Name];
                                                   Editable=No }
    { 208 ;   ;Answer Criteria Id  ;Integer       ;TableRelation=Criteria;
                                                   CaptionML=[ENU=Answer Criteria Id;
                                                              ENG=Answer Criteria Id];
                                                   Description=NA2015.9 }
    { 209 ;   ;Answer Criteria View;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Criteria.View WHERE (ID=FIELD(Answer Criteria Id)));
                                                   CaptionML=[ENU=Answer Criteria View;
                                                              ENG=Answer Criteria View];
                                                   Description=NA2015.9;
                                                   Editable=No }
    { 220 ;   ;Source Table Id     ;Integer       ;CaptionML=[ENU=Source Table Id;
                                                              ENG=Source Table Id];
                                                   Description=NA2016.15 }
    { 221 ;   ;Source Field Type   ;Option        ;CaptionML=[ENU=Source Field Type;
                                                              ENG=Source Field Type];
                                                   OptionCaptionML=[ENU=" ,Field,Enhanced Field";
                                                                    ENG=" ,Field,Enhanced Field"];
                                                   OptionString=[ ,Field,Enhanced Field];
                                                   Description=NA2016.15 }
    { 222 ;   ;Source Field Id     ;Integer       ;CaptionML=[ENU=Source Field Id;
                                                              ENG=Source Field Id];
                                                   Description=NA2016.15 }
    { 223 ;   ;Source Table Name   ;Text50        ;CaptionML=[ENU=Source Table Name;
                                                              ENG=Source Table Name];
                                                   Description=NA2016.15 }
    { 224 ;   ;Source Field Name   ;Text50        ;CaptionML=[ENU=Source Field Name;
                                                              ENG=Source Field Name];
                                                   Description=NA2016.15 }
    { 225 ;   ;Source Criteria Id  ;Integer       ;TableRelation=Criteria.ID;
                                                   CaptionML=[ENU=Source Criteria Id;
                                                              ENG=Source Criteria Id];
                                                   Description=NA2016.15 }
    { 226 ;   ;Source Criteria View;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Criteria.View WHERE (ID=FIELD(Source Criteria Id)));
                                                   CaptionML=[ENU=Source Criteria View;
                                                              ENG=Source Criteria View];
                                                   Description=NA2016.15;
                                                   Editable=No }
    { 227 ;   ;Source Action       ;Option        ;CaptionML=[ENU=Source Action;
                                                              ENG=Source Action];
                                                   OptionCaptionML=[ENU=Load and Save,Load,Save;
                                                                    ENG=Load and Save,Load,Save];
                                                   OptionString=Load and Save,Load,Save;
                                                   Description=NA2016.15 }
    { 300 ;   ;Skip                ;Boolean       ;OnValidate=VAR
                                                                QuestCriteriaLine@1000000000 : Record 9062708;
                                                              BEGIN
                                                                IF (Skip <> xRec.Skip) THEN BEGIN
                                                                  QuestCriteriaLine.RESET();
                                                                  QuestCriteriaLine.SETCURRENTKEY("Questionnaire No.", "Line Type", "Related Line No.");
                                                                  QuestCriteriaLine.SETRANGE("Questionnaire No.", "Questionnaire No.");
                                                                  QuestCriteriaLine.SETRANGE("Line Type", QuestCriteriaLine."Line Type"::"Before Question");
                                                                  QuestCriteriaLine.SETRANGE("Related Line No.", "Line No.");
                                                                  QuestCriteriaLine.MODIFYALL(Active, NOT(Skip));

                                                                  QuestCriteriaLine.RESET();
                                                                  QuestCriteriaLine.SETCURRENTKEY("Questionnaire No.", "Line Type", "Source Entry No.");
                                                                  QuestCriteriaLine.SETRANGE("Questionnaire No.", "Questionnaire No.");
                                                                  QuestCriteriaLine.SETRANGE("Line Type", QuestCriteriaLine."Line Type"::"After Question");
                                                                  QuestCriteriaLine.SETRANGE("Source Entry No.", "Line No.");
                                                                  QuestCriteriaLine.MODIFYALL(Active, NOT(Skip));
                                                                END;

                                                                UpdateAnswered();
                                                              END;

                                                   CaptionML=[ENU=Skip;
                                                              ENG=Skip];
                                                   Description=--- Logic Fields --- }
    { 301 ;   ;Skipped from Line No.;Integer      ;CaptionML=[ENU=Skipped from Line No.;
                                                              ENG=Skipped from Line No.] }
    { 302 ;   ;Has Value           ;Boolean       ;CaptionML=[ENU=Has Value;
                                                              ENG=Has Value] }
    { 400 ;   ;Answer              ;Text250       ;CaptionML=[ENU=Answer;
                                                              ENG=Answer];
                                                   Description=--- Answer Fields --- }
    { 401 ;   ;Answered            ;Boolean       ;CaptionML=[ENU=Answered;
                                                              ENG=Answered] }
    { 402 ;   ;Date Answer         ;Date          ;CaptionML=[ENU=Date Answer;
                                                              ENG=Date Answer] }
    { 403 ;   ;Time Answer         ;Time          ;CaptionML=[ENU=Time Answer;
                                                              ENG=Time Answer] }
    { 404 ;   ;DateTime Answer     ;DateTime      ;CaptionML=[ENU=DateTime Answer;
                                                              ENG=DateTime Answer] }
    { 405 ;   ;DateFormula Answer  ;DateFormula   ;CaptionML=[ENU=DateFormula Answer;
                                                              ENG=DateFormula Answer] }
    { 406 ;   ;Decimal Answer      ;Decimal       ;CaptionML=[ENU=Decimal Answer;
                                                              ENG=Decimal Answer] }
    { 407 ;   ;Boolean Answer      ;Boolean       ;CaptionML=[ENU=Boolean Answer;
                                                              ENG=Boolean Answer] }
    { 408 ;   ;Integer Answer      ;Integer       ;CaptionML=[ENU=Integer Answer;
                                                              ENG=Integer Answer] }
    { 409 ;   ;BigInteger Answer   ;BigInteger    ;CaptionML=[ENU=BigInteger Answer;
                                                              ENG=BigInteger Answer] }
    { 410 ;   ;Duration Answer     ;Duration      ;CaptionML=[ENU=Duration Answer;
                                                              ENG=Duration Answer] }
    { 411 ;   ;GUID Answer         ;GUID          ;CaptionML=[ENU=GUID Answer;
                                                              ENG=GUID Answer] }
    { 500 ;   ;Text Input          ;Text250       ;OnValidate=VAR
                                                                ValueProcessing@1000000000 : Codeunit 9062475;
                                                              BEGIN
                                                                //TESTFIELD(Skip, FALSE);

                                                                IF ("Line Type" = "Line Type"::Question) THEN BEGIN
                                                                  ValueProcessing.SetSkipErrors(SkipErrors);
                                                                  ValueProcessing.SetDateFormat(DateFormat);
                                                                  ValueProcessing.SetDateTimeFormat(DateTimeFormat);
                                                                  ValueProcessing.SetParameters("Answer Type", "Answer Table Id", "Answer Field Id");
                                                                  ValueCalculation := ValueCalculation::Const;
                                                                  IF ("Answer Option String" <> '') THEN
                                                                    ValueProcessing.SetOptionString("Answer Option String");
                                                                  ValueProcessing.ProcessValue(ValueCalculation, "Text Input", "Has Value", "Date Input", "Time Input", "DateTime Input", "DateFormula Input",
                                                                    "Decimal Input", "Boolean Input", "Integer Input", "BigInteger Input", "Duration Input", "GUID Input");
                                                                  ValueProcessing.CheckAnswerInTableField("Text Input");
                                                                  ValueProcessing.GetErrorState(WasError, ErrorText);

                                                                  "Input Errored" := WasError;
                                                                  "Input Error Text" := COPYSTR(ErrorText,1,MAXSTRLEN("Input Error Text"));

                                                                END ELSE
                                                                  "Text Input" := '';

                                                                ProcessInputData();
                                                              END;

                                                   OnLookup=VAR
                                                              RunWithRecordRef@1000000000 : Codeunit 9062239;
                                                              ValueProcessing@1000000004 : Codeunit 9062475;
                                                              RecRef@1000000001 : RecordRef;
                                                              FieldRef@1000000002 : FieldRef;
                                                              FieldValue@1000000003 : Text;
                                                            BEGIN
                                                              IF ("Line Type" = "Line Type"::Question) THEN BEGIN
                                                                IF ("Answer Table Id" <> 0) AND ("Answer Field Id" <> 0) THEN BEGIN
                                                                  RecRef.OPEN("Answer Table Id");
                                                                  IF (RunWithRecordRef.RunListPage(RecRef, TRUE)) THEN BEGIN
                                                                    FieldRef := RecRef.FIELD("Answer Field Id");
                                                                    FieldValue := FORMAT(FieldRef.VALUE);
                                                                    VALIDATE("Text Input", FieldValue);
                                                                  END;
                                                                  RecRef.CLOSE();
                                                                END ELSE BEGIN

                                                                  FieldValue := "Text Input";
                                                                  ValueProcessing.SetParameters("Answer Type", "Answer Table Id", "Answer Field Id");
                                                                  ValueCalculation := ValueCalculation::Const;
                                                                  IF ("Answer Option String" <> '') THEN
                                                                    ValueProcessing.SetOptionString("Answer Option String");
                                                                  IF (ValueProcessing.SingleValueLookup(FieldValue)) THEN
                                                                    VALIDATE("Text Input", FieldValue);
                                                                END;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Text Input;
                                                              ENG=Text Input] }
    { 501 ;   ;Date Input          ;Date          ;CaptionML=[ENU=Date Input;
                                                              ENG=Date Input] }
    { 502 ;   ;Time Input          ;Time          ;CaptionML=[ENU=Time Input;
                                                              ENG=Time Input] }
    { 503 ;   ;DateTime Input      ;DateTime      ;CaptionML=[ENU=DateTime Input;
                                                              ENG=DateTime Input] }
    { 504 ;   ;DateFormula Input   ;DateFormula   ;CaptionML=[ENU=DateFormula Input;
                                                              ENG=DateFormula Input] }
    { 505 ;   ;Decimal Input       ;Decimal       ;CaptionML=[ENU=Decimal Input;
                                                              ENG=Decimal Input] }
    { 506 ;   ;Boolean Input       ;Boolean       ;CaptionML=[ENU=Boolean Input;
                                                              ENG=Boolean Input] }
    { 507 ;   ;Integer Input       ;Integer       ;CaptionML=[ENU=Integer Input;
                                                              ENG=Integer Input] }
    { 508 ;   ;BigInteger Input    ;BigInteger    ;CaptionML=[ENU=BigInteger Input;
                                                              ENG=BigInteger Input] }
    { 509 ;   ;Duration Input      ;Duration      ;CaptionML=[ENU=Duration Input;
                                                              ENG=Duration Input] }
    { 510 ;   ;GUID Input          ;GUID          ;CaptionML=[ENU=GUID Input;
                                                              ENG=GUID Input] }
    { 511 ;   ;Input Record Position;Text250      ;CaptionML=[ENU=Input Record Position;
                                                              ENG=Input Record Position] }
    { 520 ;   ;Input Errored       ;Boolean       ;CaptionML=[ENU=Input Errored;
                                                              ENG=Input Errored] }
    { 521 ;   ;Input Error Text    ;Text250       ;CaptionML=[ENU=Input Error Text;
                                                              ENG=Input Error Text] }
  }
  KEYS
  {
    {    ;Questionnaire No.,Line No.              ;Clustered=Yes }
    {    ;Questionnaire No.,Sequence               }
    {    ;Questionnaire No.,Page No.               }
    {    ;Questionnaire No.,Question Name          }
    {    ;Questionnaire No.,Question Block Instance No.,First Block Inst. Line No. }
    {    ;Questionnaire No.,Question Block No.,Question Block Instance No.,First Block Inst. Sequence No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ValueCalculation@1000000000 : 'Const,Range,First Record,Last Record,Random Record,Record Variable,No.Series,Smart Value';
      SkipErrors@1000000001 : Boolean;
      WasError@1000000002 : Boolean;
      ErrorText@1000000003 : Text;
      DateFormat@1000000004 : Text;
      DateTimeFormat@1000000005 : Text;
      tRequiredIdentifier@1000000006 : TextConst 'ENU=(*);ENG=(*)';

    LOCAL PROCEDURE ProcessInput@1000000001();
    BEGIN
      Answer := "Text Input";
      "Date Answer" := "Date Input";
      "Time Answer" := "Time Input";
      "DateTime Answer" := "DateTime Input";
      "DateFormula Answer" := "DateFormula Input";
      "Decimal Answer" := "Decimal Input";
      "Boolean Answer" := "Boolean Input";
      "Integer Answer" := "Integer Input";
      "BigInteger Answer" := "BigInteger Input";
      "Duration Answer" := "Duration Input";
      "GUID Answer" := "GUID Input";
    END;

    LOCAL PROCEDURE ProcessAnswer@1000000002();
    VAR
      QuestMgt@1000000000 : Codeunit 9062540;
    BEGIN
      //process "Ask" criteria lines

      QuestMgt.ProcessLineCriteria(Rec);
      QuestMgt.ProcessVisibility("Questionnaire No.", Sequence);

      QuestMgt.UpdateQuestionnaire(Rec);
    END;

    LOCAL PROCEDURE UpdateAnswered@1000000005();
    BEGIN
      Answered := ("Has Value") AND (NOT(Skip));
    END;

    PROCEDURE SetSkipErrors@1000000003(Value@1000000000 : Boolean);
    BEGIN
      SkipErrors := Value;
    END;

    PROCEDURE GetError@1000000007() : Boolean;
    BEGIN
      EXIT(WasError);
    END;

    PROCEDURE GetErrorText@1000000008() : Text;
    BEGIN
      EXIT(ErrorText);
    END;

    LOCAL PROCEDURE SetError@1000000006(ErrorTextValue@1000000000 : Text);
    BEGIN
      WasError := TRUE;
      ErrorText := ErrorTextValue;
    END;

    PROCEDURE ClearError@1000000009();
    BEGIN
      WasError := FALSE;
      ErrorText := '';
    END;

    PROCEDURE SetDateFormat@1000000028(Value@1000000000 : Text);
    BEGIN
      DateFormat := Value;
    END;

    PROCEDURE SetDateTimeFormat@1000000034(Value@1000000000 : Text);
    BEGIN
      DateTimeFormat := Value;
    END;

    PROCEDURE GetQuestionText@1000000000(StarForRequired@1000000000 : Boolean) : Text;
    BEGIN
      IF StarForRequired AND Required THEN
        EXIT("Question Text" + tRequiredIdentifier)
      ELSE
        EXIT("Question Text");
    END;

    PROCEDURE GetHelpText@1000000004() HelpText : Text;
    VAR
      TextExtensionManagement@1000000000 : Codeunit 9062250;
    BEGIN
      HelpText := TextExtensionManagement.GetFullText(DATABASE::"Questionnaire Line",FIELDNO("Question Help Text"),GETPOSITION);
      IF HelpText = '' THEN HelpText := "Question Help Text";
    END;

    PROCEDURE GetExtendedQuestionText@1000000011(StarForRequired@1000000001 : Boolean) ExtendedQuestionText : Text;
    VAR
      TextExtensionManagement@1000000000 : Codeunit 9062250;
    BEGIN
      ExtendedQuestionText := TextExtensionManagement.GetFullText(DATABASE::"Questionnaire Line",FIELDNO("Question Text"),GETPOSITION);
      IF ExtendedQuestionText = '' THEN
        ExtendedQuestionText := "Question Text";

      IF StarForRequired AND Required THEN
        EXIT(ExtendedQuestionText + tRequiredIdentifier)
      ELSE
        EXIT(ExtendedQuestionText);
    END;

    PROCEDURE GetAnswerValue@1000000010(VAR Value@1000000000 : Variant);
    VAR
      ValueProcessing@1000000001 : Codeunit 9062475;
    BEGIN
      IF ("Line Type" = "Line Type"::Question) THEN BEGIN
        ValueProcessing.SetParameters("Answer Type", "Answer Table Id", "Answer Field Id");
        ValueProcessing.GetSingleValue(Value, Answer, "Date Answer", "Time Answer", "DateTime Answer", "DateFormula Answer",
          "Decimal Answer", "Boolean Answer", "Integer Answer", "BigInteger Answer", "Duration Answer", "GUID Answer");
      END;
    END;

    PROCEDURE ProcessInputData@1000000012();
    BEGIN
      UpdateAnswered();

      ProcessInput();

      ProcessAnswer();
    END;

    PROCEDURE GetInputRecord@1000000017(VAR RecRef@1000000000 : RecordRef;CloseTable@1000000001 : Boolean) : Boolean;
    VAR
      AnswerField@1000000003 : FieldRef;
      ValueFound@1000000002 : Boolean;
    BEGIN
      IF ("Answer Table Id" = 0) OR ("Answer Field Id" = 0) THEN
        EXIT(FALSE);

      RecRef.OPEN("Answer Table Id");

      AnswerField := RecRef.FIELD("Answer Field Id");
      AnswerField.SETRANGE("Text Input");
      ValueFound := RecRef.FINDFIRST();

      IF (CloseTable) THEN
        RecRef.CLOSE();

      EXIT(ValueFound);
    END;

    PROCEDURE SetValueFromVariant@1000000013(VAR VariantValue@1000000000 : Variant);
    VAR
      ValueProcessing@1000000001 : Codeunit 9062475;
    BEGIN
      IF ("Line Type" = "Line Type"::Question) THEN BEGIN
        ValueProcessing.SetParameters("Answer Type", "Answer Table Id", "Answer Field Id");
        ValueProcessing.SetValue(VariantValue, "Text Input", "Date Input", "Time Input", "DateTime Input", "DateFormula Input",
          "Decimal Input", "Boolean Input", "Integer Input", "BigInteger Input", "Duration Input", "GUID Input");
      END;
    END;

    PROCEDURE ClearContent@1000000014();
    BEGIN
      CLEAR(Skip);
      CLEAR("Skipped from Line No.");
      CLEAR("Has Value");
      CLEAR(Answer);
      CLEAR(Answered);
      CLEAR("Date Answer");
      CLEAR("Time Answer");
      CLEAR("DateTime Answer");
      CLEAR("DateFormula Answer");
      CLEAR("Decimal Answer");
      CLEAR("Boolean Answer");
      CLEAR("Integer Answer");
      CLEAR("BigInteger Answer");
      CLEAR("Duration Answer");
      CLEAR("GUID Answer");
      CLEAR("Text Input");
      CLEAR("Date Input");
      CLEAR("Time Input");
      CLEAR("DateTime Input");
      CLEAR("DateFormula Input");
      CLEAR("Decimal Input");
      CLEAR("Boolean Input");
      CLEAR("Integer Input");
      CLEAR("BigInteger Input");
      CLEAR("Duration Input");
      CLEAR("GUID Input");
      CLEAR("Input Record Position");
      CLEAR("Input Errored");
      CLEAR("Input Error Text");
    END;

    PROCEDURE GetLineStyle@1000000015() : Text;
    BEGIN
      CASE ("Line Type") OF
        "Line Type"::Question:
          BEGIN
            IF (Hidden) OR (Skip) THEN
              EXIT('Subordinate');
            IF (Required) THEN
              EXIT('Strong');
          END;
        "Line Type"::"Group Header":
          BEGIN
            EXIT('StrongAccent');
          END;
        "Line Type"::Block:
          BEGIN
            EXIT('StringAccent');
          END;
      END;

      EXIT('Standard');
    END;

    BEGIN
    {
      //DOC NA2015.7  AZ 05/06/2015 - Created
      //DOC NA2015.9  AZ 05/08/2015 - Questionnaire actions, criteria changes and bugfixes
      //DOC NA2015.9  AZ 18/08/2015 - Question groups and loops
      //DOC NA2016.10 JH 28/08/2015 - Upgraded to 2016
      //DOC NA2016.15 AZ 10/03/2016 - Source fields added
      //DOC NA2016.15 JH 06/05/2016 - CfMD amendments
    }
    END.
  }
}

