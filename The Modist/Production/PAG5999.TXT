OBJECT Page 5999 Available - Service Lines
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 5902=rm;
    Editable=No;
    CaptionML=[ENU=Available - Service Lines;
               ENG=Available - Service Lines];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table5902;
    DataCaptionExpr=CaptionText;
    SourceTableView=SORTING(Type,No.,Variant Code,Location Code,Needed by Date,Document Type,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code);
    PageType=List;
    OnOpenPage=BEGIN
                 ReservEntry.TESTFIELD("Source Type");

                 SETRANGE(Type,Type::Item);
                 SETRANGE("No.",ReservEntry."Item No.");
                 SETRANGE("Variant Code",ReservEntry."Variant Code");
                 SETRANGE("Location Code",ReservEntry."Location Code");

                 SETFILTER("Needed by Date",ReservMgt.GetAvailabilityFilter(ReservEntry."Shipment Date"));

                 CASE ReservEntry."Source Subtype" OF
                   0,1,2,4:
                     IF ReservMgt.IsPositive THEN
                       SETFILTER("Quantity (Base)",'<0')
                     ELSE
                       SETFILTER("Quantity (Base)",'>0');
                   3:
                     IF NOT ReservMgt.IsPositive THEN
                       SETFILTER("Quantity (Base)",'<0')
                     ELSE
                       SETFILTER("Quantity (Base)",'>0');
                 END;
               END;

    OnAfterGetRecord=BEGIN
                       ReservMgt.ServiceInvLineUpdateValues(Rec,QtyToReserve,QtyToReserveBase,QtyReservedThisLine,QtyReservedThisLineBase);
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 21      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 22      ;2   ;Action    ;
                      CaptionML=[ENU=&Reserve;
                                 ENG=&Reserve];
                      Image=Reserve;
                      OnAction=BEGIN
                                 ReservEntry.LOCKTABLE;
                                 UpdateReservMgt;
                                 ReservMgt.ServiceInvLineUpdateValues(Rec,QtyToReserve,QtyToReserveBase,QtyReservedThisLine,QtyReservedThisLineBase);
                                 ReservMgt.CalculateRemainingQty(NewQtyReservedThisLine,NewQtyReservedThisLineBase);
                                 ReservMgt.CopySign(NewQtyReservedThisLine,QtyToReserve);
                                 ReservMgt.CopySign(NewQtyReservedThisLineBase,QtyToReserveBase);
                                 IF NewQtyReservedThisLineBase <> 0 THEN
                                   IF ABS(NewQtyReservedThisLineBase) > ABS(QtyToReserveBase) THEN
                                     CreateReservation(QtyToReserve,QtyToReserveBase)
                                   ELSE
                                     CreateReservation(NewQtyReservedThisLine,NewQtyReservedThisLineBase)
                                 ELSE
                                   ERROR(Text000);
                               END;
                                }
      { 23      ;2   ;Action    ;
                      AccessByPermission=TableData 27=R;
                      CaptionML=[ENU=&Cancel Reservation;
                                 ENG=&Cancel Reservation];
                      Image=Cancel;
                      OnAction=BEGIN
                                 IF NOT CONFIRM(Text001,FALSE) THEN
                                   EXIT;

                                 ReservEntry2.COPY(ReservEntry);
                                 ReserveServiceInvLine.FilterReservFor(ReservEntry2,Rec);

                                 IF ReservEntry2.FIND('-') THEN BEGIN
                                   UpdateReservMgt;
                                   REPEAT
                                     ReservEngineMgt.CancelReservation(ReservEntry2);
                                   UNTIL ReservEntry2.NEXT = 0;

                                   UpdateReservFrom;
                                 END;
                               END;
                                }
      { 24      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[ENU=&Show Document;
                                 ENG=&Show Document];
                      Image=View;
                      OnAction=BEGIN
                                 ServHeader.GET("Document Type","Document No.");
                                 PAGE.RUN(PAGE::"Service Order",ServHeader);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 4   ;2   ;Field     ;
                SourceExpr="Document No." }

    { 6   ;2   ;Field     ;
                SourceExpr="Location Code" }

    { 8   ;2   ;Field     ;
                SourceExpr="Needed by Date" }

    { 10  ;2   ;Field     ;
                SourceExpr="Outstanding Qty. (Base)" }

    { 12  ;2   ;Field     ;
                SourceExpr="Reserved Qty. (Base)";
                Editable=FALSE }

    { 17  ;2   ;Field     ;
                CaptionML=[ENU=Available Quantity;
                           ENG=Available Quantity];
                DecimalPlaces=0:5;
                SourceExpr=QtyToReserveBase;
                Editable=FALSE }

    { 19  ;2   ;Field     ;
                CaptionML=[ENU=Current Reserved Quantity;
                           ENG=Current Reserved Quantity];
                DecimalPlaces=0:5;
                SourceExpr=ReservedThisLine;
                OnDrillDown=BEGIN
                              ReservEntry2.RESET;
                              ReserveServiceInvLine.FilterReservFor(ReservEntry2,Rec);
                              ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
                              ReservMgt.MarkReservConnection(ReservEntry2,ReservEntry);
                              PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry2);
                              UpdateReservFrom;
                              CurrPage.UPDATE;
                            END;
                             }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Fully reserved.;ENG=Fully reserved.';
      Text001@1001 : TextConst 'ENU=Do you want to cancel the reservation?;ENG=Do you want to cancel the reservation?';
      Text002@1002 : TextConst 'ENU=The available quantity is %1.;ENG=The available quantity is %1.';
      ReservEntry@1003 : Record 337;
      ReservEntry2@1004 : Record 337;
      ServHeader@1005 : Record 5900;
      SalesLine@1006 : Record 37;
      PurchLine@1007 : Record 39;
      ReqLine@1009 : Record 246;
      ProdOrderLine@1010 : Record 5406;
      ProdOrderComp@1011 : Record 5407;
      PlanningComponent@1012 : Record 99000829;
      TransLine@1013 : Record 5741;
      ServInvLine@1014 : Record 5902;
      JobPlanningLine@1030 : Record 1003;
      AssemblyLine@1036 : Record 901;
      AssemblyHeader@1035 : Record 900;
      AssemblyLineReserve@1034 : Codeunit 926;
      AssemblyHeaderReserve@1033 : Codeunit 925;
      ReservMgt@1015 : Codeunit 99000845;
      ReservEngineMgt@1016 : Codeunit 99000831;
      ReserveSalesLine@1017 : Codeunit 99000832;
      ReserveReqLine@1018 : Codeunit 99000833;
      ReservePurchLine@1019 : Codeunit 99000834;
      ReserveProdOrderLine@1021 : Codeunit 99000837;
      ReserveProdOrderComp@1022 : Codeunit 99000838;
      ReservePlanningComponent@1023 : Codeunit 99000840;
      ReserveTransLine@1024 : Codeunit 99000836;
      ReserveServiceInvLine@1025 : Codeunit 99000842;
      JobPlanningLineReserve@1031 : Codeunit 1032;
      QtyToReserve@1026 : Decimal;
      QtyToReserveBase@1008 : Decimal;
      QtyReservedThisLine@1027 : Decimal;
      QtyReservedThisLineBase@1020 : Decimal;
      NewQtyReservedThisLine@1028 : Decimal;
      NewQtyReservedThisLineBase@1037 : Decimal;
      CaptionText@1029 : Text[80];
      CurrentSubType@1032 : Option;

    PROCEDURE SetSalesLine@1(VAR CurrentSalesLine@1000 : Record 37;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentSalesLine.TESTFIELD(Type,CurrentSalesLine.Type::Item);
      SalesLine := CurrentSalesLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetSalesLine(SalesLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveSalesLine.FilterReservFor(ReservEntry,SalesLine);
      CaptionText := ReserveSalesLine.Caption(SalesLine);
      CurrentSubType := CurrentSubType;
    END;

    PROCEDURE SetReqLine@2(VAR CurrentReqLine@1000 : Record 246;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ReqLine := CurrentReqLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetReqLine(ReqLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveReqLine.FilterReservFor(ReservEntry,ReqLine);
      CaptionText := ReserveReqLine.Caption(ReqLine);
    END;

    PROCEDURE SetPurchLine@3(VAR CurrentPurchLine@1000 : Record 39;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentPurchLine.TESTFIELD(Type,CurrentPurchLine.Type::Item);
      PurchLine := CurrentPurchLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPurchLine(PurchLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReservePurchLine.FilterReservFor(ReservEntry,PurchLine);
      CaptionText := ReservePurchLine.Caption(PurchLine);
    END;

    PROCEDURE SetProdOrderLine@16(VAR CurrentProdOrderLine@1000 : Record 5406;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ProdOrderLine := CurrentProdOrderLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderLine(ProdOrderLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveProdOrderLine.FilterReservFor(ReservEntry,ProdOrderLine);
      CaptionText := ReserveProdOrderLine.Caption(ProdOrderLine);
    END;

    PROCEDURE SetProdOrderComponent@15(VAR CurrentProdOrderComp@1000 : Record 5407;CurrentReservEntry@1001 : Record 337);
    BEGIN
      ProdOrderComp := CurrentProdOrderComp;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetProdOrderComponent(ProdOrderComp);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
      CaptionText := ReserveProdOrderComp.Caption(ProdOrderComp);
    END;

    PROCEDURE SetPlanningComponent@13(VAR CurrentPlanningComponent@1000 : Record 99000829;CurrentReservEntry@1001 : Record 337);
    BEGIN
      PlanningComponent := CurrentPlanningComponent;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetPlanningComponent(PlanningComponent);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReservePlanningComponent.FilterReservFor(ReservEntry,PlanningComponent);
      CaptionText := ReservePlanningComponent.Caption(PlanningComponent);
    END;

    PROCEDURE SetTransferLine@9(VAR CurrentTransLine@1000 : Record 5741;CurrentReservEntry@1001 : Record 337;Direction@1002 : 'Outbound,Inbound');
    BEGIN
      TransLine := CurrentTransLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetTransferLine(TransLine,Direction);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,Direction);
      CaptionText := ReserveTransLine.Caption(TransLine);
    END;

    PROCEDURE SetServInvLine@8(VAR CurrentServInvLine@1000 : Record 5902;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentServInvLine.TESTFIELD(Type,CurrentServInvLine.Type::Item);
      ServInvLine := CurrentServInvLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetServLine(ServInvLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      ReserveServiceInvLine.FilterReservFor(ReservEntry,ServInvLine);
      CaptionText := ReserveServiceInvLine.Caption(ServInvLine);
    END;

    PROCEDURE SetJobPlanningLine@10(VAR CurrentJobPlanningLine@1000 : Record 1003;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentJobPlanningLine.TESTFIELD(Type,CurrentJobPlanningLine.Type::Item);
      JobPlanningLine := CurrentJobPlanningLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetJobPlanningLine(JobPlanningLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      JobPlanningLineReserve.FilterReservFor(ReservEntry,JobPlanningLine);
      CaptionText := JobPlanningLineReserve.Caption(JobPlanningLine);
    END;

    LOCAL PROCEDURE CreateReservation@6(ReserveQuantity@1001 : Decimal;ReserveQuantityBase@1000 : Decimal);
    VAR
      TrackingSpecification@1002 : Record 336;
    BEGIN
      IF ABS("Outstanding Qty. (Base)") + "Reserved Qty. (Base)" < ReserveQuantityBase THEN
        ERROR(Text002,ABS("Outstanding Qty. (Base)") + "Reserved Qty. (Base)");

      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.",ReservEntry."Item No.");
      TESTFIELD("Variant Code",ReservEntry."Variant Code");
      TESTFIELD("Location Code",ReservEntry."Location Code");

      ReservMgt.CreateTrackingSpecification(TrackingSpecification,
        DATABASE::"Service Line","Document Type","Document No.",'',0,"Line No.",
        "Variant Code","Location Code",'','',"Qty. per Unit of Measure");
      ReservMgt.CreateReservation(
        ReservEntry.Description,"Posting Date",ReserveQuantity,ReserveQuantityBase,TrackingSpecification);
      UpdateReservFrom;
    END;

    LOCAL PROCEDURE UpdateReservFrom@17();
    BEGIN
      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.FIND;
            SetSalesLine(SalesLine,ReservEntry);
          END;
        DATABASE::"Requisition Line":
          BEGIN
            ReqLine.FIND;
            SetReqLine(ReqLine,ReservEntry);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchLine.FIND;
            SetPurchLine(PurchLine,ReservEntry);
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            ProdOrderLine.FIND;
            SetProdOrderLine(ProdOrderLine,ReservEntry);
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.FIND;
            SetProdOrderComponent(ProdOrderComp,ReservEntry);
          END;
        DATABASE::"Planning Component":
          BEGIN
            PlanningComponent.FIND;
            SetPlanningComponent(PlanningComponent,ReservEntry);
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TransLine.FIND;
            SetTransferLine(TransLine,ReservEntry,ReservEntry."Source Subtype");
          END;
        DATABASE::"Service Line":
          BEGIN
            ServInvLine.FIND;
            SetServInvLine(ServInvLine,ReservEntry);
          END;
        DATABASE::"Job Planning Line":
          BEGIN
            JobPlanningLine.FIND;
            SetJobPlanningLine(JobPlanningLine,ReservEntry);
          END;
      END;
    END;

    LOCAL PROCEDURE UpdateReservMgt@7();
    BEGIN
      CLEAR(ReservMgt);
      CASE ReservEntry."Source Type" OF
        DATABASE::"Sales Line":
          ReservMgt.SetSalesLine(SalesLine);
        DATABASE::"Requisition Line":
          ReservMgt.SetReqLine(ReqLine);
        DATABASE::"Purchase Line":
          ReservMgt.SetPurchLine(PurchLine);
        DATABASE::"Prod. Order Line":
          ReservMgt.SetProdOrderLine(ProdOrderLine);
        DATABASE::"Prod. Order Component":
          ReservMgt.SetProdOrderComponent(ProdOrderComp);
        DATABASE::"Planning Component":
          ReservMgt.SetPlanningComponent(PlanningComponent);
        DATABASE::"Transfer Line":
          ReservMgt.SetTransferLine(TransLine,ReservEntry."Source Subtype");
        DATABASE::"Service Line":
          ReservMgt.SetServLine(ServInvLine);
      END;
    END;

    LOCAL PROCEDURE ReservedThisLine@5() : Decimal;
    BEGIN
      ReservEntry2.RESET;
      ReserveServiceInvLine.FilterReservFor(ReservEntry2,Rec);
      ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);
      EXIT(ReservMgt.MarkReservConnection(ReservEntry2,ReservEntry));
    END;

    PROCEDURE SetCurrentSubType@11(SubType@1000 : Option);
    BEGIN
      CurrentSubType := SubType;
    END;

    PROCEDURE SetAssemblyLine@14(VAR CurrentAsmLine@1002 : Record 901;CurrentReservEntry@1001 : Record 337);
    BEGIN
      CurrentAsmLine.TESTFIELD(Type,CurrentAsmLine.Type::Item);
      AssemblyLine := CurrentAsmLine;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetAssemblyLine(AssemblyLine);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      AssemblyLineReserve.FilterReservFor(ReservEntry,AssemblyLine);
      CaptionText := AssemblyLineReserve.Caption(AssemblyLine);
    END;

    PROCEDURE SetAssemblyHeader@12(VAR CurrentAsmHeader@1000 : Record 900;CurrentReservEntry@1001 : Record 337);
    BEGIN
      AssemblyHeader := CurrentAsmHeader;
      ReservEntry := CurrentReservEntry;

      CLEAR(ReservMgt);
      ReservMgt.SetAssemblyHeader(AssemblyHeader);
      ReservEngineMgt.InitFilterAndSortingFor(ReservEntry,TRUE);
      AssemblyHeaderReserve.FilterReservFor(ReservEntry,AssemblyHeader);
      CaptionText := AssemblyHeaderReserve.Caption(AssemblyHeader);
    END;

    BEGIN
    END.
  }
}

