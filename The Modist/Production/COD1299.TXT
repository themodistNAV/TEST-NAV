OBJECT Codeunit 1299 Web Request Helper
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ConnectionErr@1001 : TextConst 'ENU=Connection to the remote service could not be established.\\;ENG=Connection to the remote service could not be established.\\';
      InvalidUriErr@1002 : TextConst 'ENU=The URI is not valid.;ENG=The URI is not valid.';
      NonSecureUriErr@1004 : TextConst 'ENU=The URI is not secure.;ENG=The URI is not secure.';
      ProcessingWindowMsg@1003 : TextConst 'ENU=Please wait while the server is processing your request.\This may take several minutes.;ENG=Please wait while the server is processing your request.\This may take several minutes.';
      ServiceURLTxt@1000 : TextConst '@@@=Example: ServiceURL: http://www.contoso.com/;ENU=\\Service URL: %1.;ENG=\\Service URL: %1.';
      GlobalHttpWebResponseError@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";

    [TryFunction]
    PROCEDURE IsValidUri@6(Url@1001 : Text);
    VAR
      ResultUri@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      Uri@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      UriKind@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.UriKind";
    BEGIN
      IF NOT Uri.IsWellFormedUriString(Url,UriKind.Absolute) THEN
        IF NOT Uri.TryCreate(Url,UriKind.Absolute,ResultUri) THEN
          ERROR(InvalidUriErr);
    END;

    [TryFunction]
    PROCEDURE IsSecureHttpUrl@8(Url@1000 : Text);
    VAR
      Uri@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
    BEGIN
      IsValidUri(Url);
      Uri := Uri.Uri(Url);
      IF Uri.Scheme <> 'https' THEN
        ERROR(NonSecureUriErr);
    END;

    [TryFunction]
    PROCEDURE IsHttpUrl@2(Url@1000 : Text);
    VAR
      Uri@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
    BEGIN
      IsValidUri(Url);
      Uri := Uri.Uri(Url);
      IF (Uri.Scheme <> 'http') AND (Uri.Scheme <> 'https') THEN
        ERROR(InvalidUriErr);
    END;

    [TryFunction]
    PROCEDURE GetWebResponse@1(VAR HttpWebRequest@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";VAR HttpWebResponse@1004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";VAR ResponseInStream@1002 : InStream;VAR HttpStatusCode@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";VAR ResponseHeaders@1008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";ProgressDialogEnabled@1003 : Boolean);
    VAR
      ProcessingWindow@1000 : Dialog;
    BEGIN
      IF ProgressDialogEnabled THEN
        ProcessingWindow.OPEN(ProcessingWindowMsg);

      CLEARLASTERROR;
      HttpWebResponse := HttpWebRequest.GetResponse;
      HttpWebResponse.GetResponseStream.CopyTo(ResponseInStream);
      HttpStatusCode := HttpWebResponse.StatusCode;
      ResponseHeaders := HttpWebResponse.Headers;

      IF ProgressDialogEnabled THEN
        ProcessingWindow.CLOSE;
    END;

    PROCEDURE GetWebResponseError@15(VAR WebException@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebException";VAR ServiceURL@1006 : Text) : Text;
    VAR
      DotNetExceptionHandler@1000 : Codeunit 1291;
      WebExceptionStatus@1004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebExceptionStatus";
      HttpStatusCode@1008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ErrorText@1009 : Text;
    BEGIN
      DotNetExceptionHandler.Collect;

      IF NOT DotNetExceptionHandler.CastToType(WebException,GETDOTNETTYPE(WebException)) THEN
        DotNetExceptionHandler.Rethrow;

      IF NOT ISNULL(WebException.Response) THEN
        IF NOT ISNULL(WebException.Response.ResponseUri) THEN
          ServiceURL := STRSUBSTNO(ServiceURLTxt,WebException.Response.ResponseUri.AbsoluteUri);

      ErrorText := ConnectionErr + WebException.Message + ServiceURL;
      IF NOT WebException.Status.Equals(WebExceptionStatus.ProtocolError) THEN
        EXIT(ErrorText);

      IF ISNULL(WebException.Response) THEN
        DotNetExceptionHandler.Rethrow;

      GlobalHttpWebResponseError := WebException.Response;
      IF NOT (GlobalHttpWebResponseError.StatusCode.Equals(HttpStatusCode.Found) OR
              GlobalHttpWebResponseError.StatusCode.Equals(HttpStatusCode.InternalServerError))
      THEN
        EXIT(ErrorText);

      EXIT('');
    END;

    BEGIN
    END.
  }
}

