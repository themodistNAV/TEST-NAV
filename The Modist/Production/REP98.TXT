OBJECT Report 98 Date Compress General Ledger
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00 PM;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 17=rimd,
                TableData 45=rimd,
                TableData 87=rimd,
                TableData 253=rimd,
                TableData 355=imd,
                TableData 5823=rimd;
    CaptionML=[ENU=Date Compress General Ledger;
               ENG=Date Compress General Ledger];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  DimSelectionBuf.CompareDimText(3,REPORT::"Date Compress General Ledger",'',RetainDimText,Text010);
                END;

  }
  DATASET
  {
    { 7069;    ;DataItem;                    ;
               DataItemTable=Table17;
               DataItemTableView=SORTING(G/L Account No.,Posting Date);
               OnPreDataItem=VAR
                               GLSetup@1000 : Record 98;
                             BEGIN
                               IF NOT
                                  CONFIRM(
                                    Text000 +
                                    Text002,FALSE)
                               THEN
                                 CurrReport.BREAK;

                               IF EntrdDateComprReg."Ending Date" = 0D THEN
                                 ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                               IF AnalysisView.FINDFIRST THEN BEGIN
                                 AnalysisView.CheckDimensionsAreRetained(3,REPORT::"Date Compress General Ledger",FALSE);
                                 AnalysisView.CheckViewsAreUpdated;
                                 COMMIT;
                               END;

                               Window.OPEN(
                                 Text004 +
                                 Text005 +
                                 Text006 +
                                 Text007 +
                                 Text008);

                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Compress G/L");

                               SelectedDim.GetSelectedDim(
                                 USERID,3,REPORT::"Date Compress General Ledger",'',TempSelectedDim);
                               GLSetup.GET;
                               Retain[5] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress General Ledger",'',GLSetup."Global Dimension 1 Code");
                               Retain[6] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress General Ledger",'',GLSetup."Global Dimension 2 Code");

                               NewGLEntry.LOCKTABLE;
                               GLReg.LOCKTABLE;
                               DateComprReg.LOCKTABLE;
                               IF GLEntry2.FIND('+') THEN;
                               LastEntryNo := GLEntry2."Entry No.";
                               NextTransactionNo := GLEntry2."Transaction No." + 1;
                               SETRANGE("Entry No.",0,LastEntryNo);
                               SETRANGE("Posting Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");

                               InitRegisters;
                             END;

               OnAfterGetRecord=BEGIN
                                  GLEntry2 := "G/L Entry";
                                  WITH GLEntry2 DO BEGIN
                                    SETCURRENTKEY("G/L Account No.","Posting Date");
                                    COPYFILTERS("G/L Entry");
                                    SETFILTER("Posting Date",DateComprMgt.GetDateFilter("Posting Date",EntrdDateComprReg,TRUE));
                                    REPEAT
                                      SETRANGE("G/L Account No.","G/L Account No.");
                                      SETRANGE("Gen. Posting Type","Gen. Posting Type");
                                      SETRANGE("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                                      SETRANGE("Gen. Prod. Posting Group","Gen. Prod. Posting Group");

                                      IF RetainNo(FIELDNO("Document Type")) THEN
                                        SETRANGE("Document Type","Document Type");
                                      IF RetainNo(FIELDNO("Document No.")) THEN
                                        SETRANGE("Document No.","Document No.");
                                      IF RetainNo(FIELDNO("Job No.")) THEN
                                        SETRANGE("Job No.","Job No.");
                                      IF RetainNo(FIELDNO("Business Unit Code")) THEN
                                        SETRANGE("Business Unit Code","Business Unit Code");
                                      IF RetainNo(FIELDNO("Global Dimension 1 Code")) THEN
                                        SETRANGE("Global Dimension 1 Code","Global Dimension 1 Code");
                                      IF RetainNo(FIELDNO("Global Dimension 2 Code")) THEN
                                        SETRANGE("Global Dimension 2 Code","Global Dimension 2 Code");
                                      IF Amount <> 0 THEN BEGIN
                                        IF Amount > 0 THEN
                                          SETFILTER(Amount,'>0')
                                        ELSE
                                          SETFILTER(Amount,'<0');
                                      END ELSE BEGIN
                                        SETRANGE(Amount,0);
                                        IF "Additional-Currency Amount" >= 0 THEN
                                          SETFILTER("Additional-Currency Amount",'>=0')
                                        ELSE
                                          SETFILTER("Additional-Currency Amount",'<0');
                                      END;

                                      InitNewEntry(NewGLEntry);

                                      DimBufMgt.CollectDimEntryNo(
                                        TempSelectedDim,"Dimension Set ID","Entry No.",
                                        0,FALSE,DimEntryNo);
                                      ComprDimEntryNo := DimEntryNo;
                                      SummarizeEntry(NewGLEntry,GLEntry2);
                                      WHILE NEXT <> 0 DO BEGIN
                                        DimBufMgt.CollectDimEntryNo(
                                          TempSelectedDim,"Dimension Set ID","Entry No.",
                                          ComprDimEntryNo,TRUE,DimEntryNo);
                                        IF DimEntryNo = ComprDimEntryNo THEN
                                          SummarizeEntry(NewGLEntry,GLEntry2);
                                      END;

                                      InsertNewEntry(NewGLEntry,ComprDimEntryNo);

                                      ComprCollectedEntries;

                                      COPYFILTERS("G/L Entry");
                                      SETFILTER("Posting Date",DateComprMgt.GetDateFilter("Posting Date",EntrdDateComprReg,TRUE));
                                    UNTIL NOT FIND('-');
                                  END;

                                  IF DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 THEN BEGIN
                                    NoOfDeleted := DateComprReg."No. Records Deleted";
                                    InsertRegisters(GLReg,DateComprReg);
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF DateComprReg."No. Records Deleted" > NoOfDeleted THEN
                                  InsertRegisters(GLReg,DateComprReg);

                                IF AnalysisView.FINDFIRST THEN
                                  AnalysisView.UpdateLastEntryNo;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   InitializeParameter;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Starting Date;
                             ENG=Starting Date];
                  ClosingDates=Yes;
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  Name=EndingDate;
                  CaptionML=[ENU=Ending Date;
                             ENG=Ending Date];
                  ClosingDates=Yes;
                  SourceExpr=EntrdDateComprReg."Ending Date" }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Period Length;
                             ENG=Period Length];
                  OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year,Period;
                                   ENG=Day,Week,Month,Quarter,Year,Period];
                  SourceExpr=EntrdDateComprReg."Period Length" }

      { 4   ;2   ;Field     ;
                  CaptionML=[ENU=Posting Description;
                             ENG=Posting Description];
                  SourceExpr=EntrdGLEntry.Description }

      { 1907651001;2;Group  ;
                  CaptionML=[ENU=Retain Field Contents;
                             ENG=Retain Field Contents] }

      { 5   ;3   ;Field     ;
                  CaptionML=[ENU=Document Type;
                             ENG=Document Type];
                  SourceExpr=Retain[1] }

      { 6   ;3   ;Field     ;
                  CaptionML=[ENU=Document No.;
                             ENG=Document No.];
                  SourceExpr=Retain[2] }

      { 7   ;3   ;Field     ;
                  CaptionML=[ENU=Job No.;
                             ENG=Job No.];
                  SourceExpr=Retain[3] }

      { 8   ;3   ;Field     ;
                  CaptionML=[ENU=Business Unit Code;
                             ENG=Business Unit Code];
                  SourceExpr=Retain[4] }

      { 12  ;2   ;Field     ;
                  CaptionML=[ENU=Retain Dimensions;
                             ENG=Retain Dimensions];
                  SourceExpr=RetainDimText;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Date Compress General Ledger",RetainDimText);
                               END;
                                }

      { 1907155901;2;Group  ;
                  CaptionML=[ENU=Retain Totals;
                             ENG=Retain Totals] }

      { 11  ;3   ;Field     ;
                  CaptionML=[ENU=Quantity;
                             ENG=Quantity];
                  SourceExpr=Retain[7] }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\;ENG=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\';
      Text002@1002 : TextConst 'ENU=Do you want to date compress the entries?;ENG=Do you want to date compress the entries?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.;ENG=%1 must be specified.';
      Text004@1004 : TextConst 'ENU=Date compressing G/L entries...\\;ENG=Date compressing G/L entries...\\';
      Text005@1005 : TextConst 'ENU=G/L Account No.      #1##########\;ENG=G/L Account No.      #1##########\';
      Text006@1006 : TextConst 'ENU=Date                 #2######\\;ENG=Date                 #2######\\';
      Text007@1007 : TextConst 'ENU=No. of new entries   #3######\;ENG=No. of new entries   #3######\';
      Text008@1008 : TextConst 'ENU=No. of entries del.  #4######;ENG=No. of entries del.  #4######';
      Text009@1009 : TextConst 'ENU=Date Compressed;ENG=Date Compressed';
      Text010@1010 : TextConst 'ENU=Retain Dimensions;ENG=Retain Dimensions';
      SourceCodeSetup@1011 : Record 242;
      DateComprReg@1012 : Record 87;
      EntrdDateComprReg@1013 : Record 87;
      GLReg@1014 : Record 45;
      EntrdGLEntry@1015 : Record 17;
      NewGLEntry@1016 : Record 17;
      GLEntry2@1017 : Record 17;
      SelectedDim@1018 : Record 369;
      TempSelectedDim@1019 : TEMPORARY Record 369;
      DimSelectionBuf@1020 : Record 368;
      AnalysisView@1021 : Record 363;
      DateComprMgt@1022 : Codeunit 356;
      DimBufMgt@1023 : Codeunit 411;
      DimMgt@1024 : Codeunit 408;
      Window@1025 : Dialog;
      NoOfFields@1026 : Integer;
      NoOfFieldsContents@1027 : Integer;
      Retain@1028 : ARRAY [10] OF Boolean;
      FieldNumber@1029 : ARRAY [10] OF Integer;
      FieldNameArray@1030 : ARRAY [10] OF Text[100];
      LastEntryNo@1031 : Integer;
      NextTransactionNo@1032 : Integer;
      NoOfDeleted@1033 : Integer;
      GLRegExists@1034 : Boolean;
      i@1035 : Integer;
      ComprDimEntryNo@1036 : Integer;
      DimEntryNo@1037 : Integer;
      RetainDimText@1038 : Text[250];

    LOCAL PROCEDURE InitRegisters@4();
    BEGIN
      IF GLReg.FIND('+') THEN;
      GLReg.INIT;
      GLReg."No." := GLReg."No." + 1;
      GLReg."Creation Date" := TODAY;
      GLReg."Source Code" := SourceCodeSetup."Compress G/L";
      GLReg."User ID" := USERID;
      GLReg."From Entry No." := LastEntryNo + 1;

      IF DateComprReg.FIND('+') THEN;
      DateComprReg.INIT;
      DateComprReg."No." := DateComprReg."No." + 1;
      DateComprReg."Table ID" := DATABASE::"G/L Entry";
      DateComprReg."Creation Date" := TODAY;
      DateComprReg."Starting Date" := EntrdDateComprReg."Starting Date";
      DateComprReg."Ending Date" := EntrdDateComprReg."Ending Date";
      DateComprReg."Period Length" := EntrdDateComprReg."Period Length";
      FOR i := 1 TO NoOfFieldsContents DO
        IF Retain[i] THEN
          DateComprReg."Retain Field Contents" :=
            COPYSTR(
              DateComprReg."Retain Field Contents" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Field Contents"));
      DateComprReg."Retain Field Contents" := COPYSTR(DateComprReg."Retain Field Contents",2);
      FOR i := NoOfFieldsContents + 1 TO NoOfFields DO
        IF Retain[i] THEN
          DateComprReg."Retain Totals" :=
            COPYSTR(
              DateComprReg."Retain Totals" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Totals"));
      DateComprReg."Retain Totals" := COPYSTR(DateComprReg."Retain Totals",2);
      DateComprReg."Register No." := GLReg."No.";
      DateComprReg."Source Code" := SourceCodeSetup."Compress G/L";
      DateComprReg."User ID" := USERID;

      GLRegExists := FALSE;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(VAR GLReg@1000 : Record 45;VAR DateComprReg@1001 : Record 87);
    BEGIN
      GLReg."To Entry No." := NewGLEntry."Entry No.";

      IF GLRegExists THEN BEGIN
        GLReg.MODIFY;
        DateComprReg.MODIFY;
      END ELSE BEGIN
        GLReg.INSERT;
        DateComprReg.INSERT;
        GLRegExists := TRUE;
      END;
      COMMIT;

      NewGLEntry.LOCKTABLE;
      GLReg.LOCKTABLE;
      DateComprReg.LOCKTABLE;

      GLEntry2.RESET;
      IF GLEntry2.FIND('+') THEN;
      IF LastEntryNo <> GLEntry2."Entry No." THEN BEGIN
        LastEntryNo := GLEntry2."Entry No.";
        NextTransactionNo := GLEntry2."Transaction No." + 1;
        InitRegisters;
      END;
    END;

    LOCAL PROCEDURE InsertField@2(Number@1000 : Integer;Name@1001 : Text[100]);
    BEGIN
      NoOfFields := NoOfFields + 1;
      FieldNumber[NoOfFields] := Number;
      FieldNameArray[NoOfFields] := Name;
    END;

    LOCAL PROCEDURE RetainNo@3(Number@1000 : Integer) : Boolean;
    BEGIN
      EXIT(Retain[Index(Number)]);
    END;

    LOCAL PROCEDURE Index@6(Number@1000 : Integer) : Integer;
    BEGIN
      FOR i := 1 TO NoOfFields DO
        IF Number = FieldNumber[i] THEN
          EXIT(i);
    END;

    LOCAL PROCEDURE SummarizeEntry@5(VAR NewGLEntry@1000 : Record 17;GLEntry@1001 : Record 17);
    VAR
      GLItemLedgRelation@1003 : Record 5823;
      GLEntryVatEntrylink@1004 : Record 253;
      GLEntryVatEntrylink2@1005 : Record 253;
    BEGIN
      WITH GLEntry DO BEGIN
        NewGLEntry.Amount := NewGLEntry.Amount + Amount;
        NewGLEntry."VAT Amount" := NewGLEntry."VAT Amount" + "VAT Amount";
        NewGLEntry."Debit Amount" := NewGLEntry."Debit Amount" + "Debit Amount";
        NewGLEntry."Credit Amount" := NewGLEntry."Credit Amount" + "Credit Amount";
        NewGLEntry."Additional-Currency Amount" :=
          NewGLEntry."Additional-Currency Amount" + "Additional-Currency Amount";
        NewGLEntry."Add.-Currency Debit Amount" :=
          NewGLEntry."Add.-Currency Debit Amount" + "Add.-Currency Debit Amount";
        NewGLEntry."Add.-Currency Credit Amount" :=
          NewGLEntry."Add.-Currency Credit Amount" + "Add.-Currency Credit Amount";
        IF RetainNo(FIELDNO(Quantity)) THEN
          NewGLEntry.Quantity := NewGLEntry.Quantity + Quantity;
        DELETE;

        GLItemLedgRelation.SETRANGE("G/L Entry No.","Entry No.");
        GLItemLedgRelation.DELETEALL;

        GLEntryVatEntrylink.SETRANGE("G/L Entry No.","Entry No.");
        IF GLEntryVatEntrylink.FINDSET THEN
          REPEAT
            GLEntryVatEntrylink2 := GLEntryVatEntrylink;
            GLEntryVatEntrylink2.DELETE;
            GLEntryVatEntrylink2."G/L Entry No." := NewGLEntry."Entry No.";
            IF GLEntryVatEntrylink2.INSERT THEN;
          UNTIL GLEntryVatEntrylink.NEXT = 0;
        DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
        Window.UPDATE(4,DateComprReg."No. Records Deleted");
      END;
    END;

    PROCEDURE ComprCollectedEntries@12();
    VAR
      GLEntry@1000 : Record 17;
      OldDimEntryNo@1001 : Integer;
      Found@1002 : Boolean;
      GLEntryNo@1003 : Integer;
    BEGIN
      OldDimEntryNo := 0;
      IF DimBufMgt.FindFirstDimEntryNo(DimEntryNo,GLEntryNo) THEN BEGIN
        InitNewEntry(NewGLEntry);
        REPEAT
          GLEntry.GET(GLEntryNo);
          SummarizeEntry(NewGLEntry,GLEntry);
          OldDimEntryNo := DimEntryNo;
          Found := DimBufMgt.NextDimEntryNo(DimEntryNo,GLEntryNo);
          IF (OldDimEntryNo <> DimEntryNo) OR NOT Found THEN BEGIN
            InsertNewEntry(NewGLEntry,OldDimEntryNo);
            IF Found THEN
              InitNewEntry(NewGLEntry);
          END;
          OldDimEntryNo := DimEntryNo;
        UNTIL NOT Found;
      END;
      DimBufMgt.DeleteAllDimEntryNo;
    END;

    PROCEDURE InitNewEntry@7(VAR NewGLEntry@1000 : Record 17);
    BEGIN
      LastEntryNo := LastEntryNo + 1;

      WITH GLEntry2 DO BEGIN
        NewGLEntry.INIT;
        NewGLEntry."Entry No." := LastEntryNo;
        NewGLEntry."G/L Account No." := "G/L Account No.";
        NewGLEntry."Posting Date" := GETRANGEMIN("Posting Date");
        NewGLEntry.Description := EntrdGLEntry.Description;
        NewGLEntry."Gen. Posting Type" := "Gen. Posting Type";
        NewGLEntry."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        NewGLEntry."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        NewGLEntry."System-Created Entry" := TRUE;
        NewGLEntry."Prior-Year Entry" := TRUE;
        NewGLEntry."Source Code" := SourceCodeSetup."Compress G/L";
        NewGLEntry."User ID" := USERID;
        NewGLEntry."Transaction No." := NextTransactionNo;

        IF RetainNo(FIELDNO("Document Type")) THEN
          NewGLEntry."Document Type" := "Document Type";
        IF RetainNo(FIELDNO("Document No.")) THEN
          NewGLEntry."Document No." := "Document No.";
        IF RetainNo(FIELDNO("Job No.")) THEN
          NewGLEntry."Job No." := "Job No.";
        IF RetainNo(FIELDNO("Business Unit Code")) THEN
          NewGLEntry."Business Unit Code" := "Business Unit Code";
        IF RetainNo(FIELDNO("Global Dimension 1 Code")) THEN
          NewGLEntry."Global Dimension 1 Code" := "Global Dimension 1 Code";
        IF RetainNo(FIELDNO("Global Dimension 2 Code")) THEN
          NewGLEntry."Global Dimension 2 Code" := "Global Dimension 2 Code";

        Window.UPDATE(1,NewGLEntry."G/L Account No.");
        Window.UPDATE(2,NewGLEntry."Posting Date");
        DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
        Window.UPDATE(3,DateComprReg."No. of New Records");
      END;
    END;

    LOCAL PROCEDURE InsertNewEntry@23(VAR NewGLEntry@1000 : Record 17;DimEntryNo@1001 : Integer);
    VAR
      TempDimBuf@1002 : TEMPORARY Record 360;
      TempDimSetEntry@1005 : TEMPORARY Record 480;
      DimVal@1004 : Record 349;
    BEGIN
      TempDimBuf.DELETEALL;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
      IF TempDimBuf.FINDSET THEN
        REPEAT
          DimVal.GET(TempDimBuf."Dimension Code",TempDimBuf."Dimension Value Code");
          TempDimSetEntry."Dimension Code" := TempDimBuf."Dimension Code";
          TempDimSetEntry."Dimension Value Code" := TempDimBuf."Dimension Value Code";
          TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
          TempDimSetEntry.INSERT;
        UNTIL TempDimBuf.NEXT = 0;
      NewGLEntry."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      NewGLEntry.INSERT;
    END;

    LOCAL PROCEDURE InitializeParameter@10();
    BEGIN
      IF EntrdDateComprReg."Ending Date" = 0D THEN
        EntrdDateComprReg."Ending Date" := TODAY;
      IF EntrdGLEntry.Description = '' THEN
        EntrdGLEntry.Description := Text009;

      WITH "G/L Entry" DO BEGIN
        InsertField(FIELDNO("Document Type"),FIELDCAPTION("Document Type"));
        InsertField(FIELDNO("Document No."),FIELDCAPTION("Document No."));
        InsertField(FIELDNO("Job No."),FIELDCAPTION("Job No."));
        InsertField(FIELDNO("Business Unit Code"),FIELDCAPTION("Business Unit Code"));
        InsertField(FIELDNO("Global Dimension 1 Code"),FIELDCAPTION("Global Dimension 1 Code"));
        InsertField(FIELDNO("Global Dimension 2 Code"),FIELDCAPTION("Global Dimension 2 Code"));
        NoOfFieldsContents := NoOfFields;
        InsertField(FIELDNO(Quantity),FIELDCAPTION(Quantity));
      END;

      RetainDimText := DimSelectionBuf.GetDimSelectionText(3,REPORT::"Date Compress General Ledger",'');
    END;

    PROCEDURE InitializeRequest@15(StartingDate@1007 : Date;EndingDate@1006 : Date;PeriodLength@1005 : Option;Description@1004 : Text[50];RetainDocumentType@1008 : Boolean;RetainDocumentNo@1003 : Boolean;RetainJobNo@1002 : Boolean;RetainBuisnessUnitCode@1001 : Boolean;RetainQuantity@1009 : Boolean;RetainDimensionText@1000 : Text[250]);
    BEGIN
      InitializeParameter;
      EntrdDateComprReg."Starting Date" := StartingDate;
      EntrdDateComprReg."Ending Date" := EndingDate;
      EntrdDateComprReg."Period Length" := PeriodLength;
      EntrdGLEntry.Description := Description;
      Retain[1] := RetainDocumentType;
      Retain[2] := RetainDocumentNo;
      Retain[3] := RetainJobNo;
      Retain[4] := RetainBuisnessUnitCode;
      Retain[7] := RetainQuantity;
      RetainDimText := RetainDimensionText;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

