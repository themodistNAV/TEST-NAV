OBJECT Codeunit 9062685 SOAP Management
{
  OBJECT-PROPERTIES
  {
    Date=27/01/16;
    Time=12:00:00 PM;
    Version List=NA2016.12;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      RequestXmlDocument@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ResponseXmlDocument@1000000010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      SoapNamespace@1000000001 : TEMPORARY Record 9062819;
      Initialised@1000000003 : Boolean;
      Address@1000000004 : Text;
      User@1000000005 : Text;
      Password@1000000006 : Text;
      Domain@1000000002 : Text;
      ContentType@1000000008 : Text;
      Timeout@1000000007 : Integer;
      tNotInitialised@1000000009 : TextConst 'ENU="The SOAP Management hasn''t been initialised; please call ""Initialise"" function first.";ENG="The SOAP Management hasn''t been initialised; please call ""Initialise"" function first."';

    LOCAL PROCEDURE "--- General ---"@1000000003();
    BEGIN
    END;

    PROCEDURE Initialise@1000000012(pAddress@1000000003 : Text;pUser@1000000002 : Text;pPassword@1000000001 : Text);
    BEGIN
      //DOC NA2016.12 - Initialising the SOAP
      //  -> pAddress: SOAP web services address
      //  -> pUser: User to authenticate with
      //  -> pPassword: Password to authenticate with

      InitialiseAdv(pAddress, pUser, pPassword, '', XmlContentType(), 60000);
    END;

    PROCEDURE InitialiseAdv@1000000016(pAddress@1000000003 : Text;pUser@1000000002 : Text;pPassword@1000000001 : Text;pDomain@1000000000 : Text;pContentType@1000000004 : Text;pTimeout@1000000005 : Integer);
    BEGIN
      //DOC NA2016.12 - Initialising the SOAP (advanced version)
      //  -> pAddress: SOAP web services address
      //  -> pUser: User to authenticate with
      //  -> pPassword: Password to authenticate with
      //  -> pDomain: Domain
      //  -> pContentType: Content type
      //  -> pTimeout: Timeout

      Address := pAddress;
      User := pUser;
      Password := pPassword;
      Domain := pDomain;
      ContentType := pContentType;
      Timeout := pTimeout;

      Initialised := TRUE;
    END;

    PROCEDURE ExecuteSoapMethod@1000000055(pMethod@1000000008 : Text) result : Boolean;
    VAR
      lMethodXmlElement@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      eName@1000000025 : TextConst 'ENU=FindFolder;ENG=FindFolder';
    BEGIN
      //DOC NA2016.12 - Executing SOAP method (simple version)
      //  -> pMethod: Method to execute

      AddRequestElement(pMethod, lMethodXmlElement);
      ExecuteSoapMethodAdv(lMethodXmlElement);
    END;

    PROCEDURE ExecuteSoapMethodAdv@1000000021(pMethodXmlElement@1000000007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      lSoapEnvelopeXmlElement@1000000017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      lSoapBodyXmlElement@1000000018 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      lMethodXmlElement@1000000023 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      "------"@1000000015 : Integer;
      xmlhttp@1000000000 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequest";
      soapEnvelope@1000000002 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapBody@1000000003 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      soapMethod@1000000004 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMElement";
      node@1000000005 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node2@1000000010 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node3@1000000013 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node4@1000000016 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      node5@1000000024 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      attribute@1000000014 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMAttribute";
      parametersXmlDoc@1000000006 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMDocument";
      nodeList@1000000012 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNodeList";
      xmldocclass@1000000022 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.DOMDocumentClass";
      xmlhttpclass@1000000021 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.XMLHTTPRequestClass";
      attributes@1000000020 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNamedNodeMap";
      attributenode@1000000019 : DotNet "'Microsoft.MSXML, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.MSXML.IXMLDOMNode";
      XMLHTTPSend@1000000001 : Codeunit 9062253;
      eName@1000000025 : TextConst 'ENU=FindFolder;ENG=FindFolder';
    BEGIN
      //DOC NA2016.12 - Executing SOAP method (advanced version)
      //  -> pMethodXmlElement: Method XML element

      CheckInitialised();
      CheckRequestXmlDocument();

      AddNamespace(SoapEnvelopeElement(), 'xmlns:soap', 'http://schemas.xmlsoap.org/soap/envelope/');
      CreateAndAppendElement(RequestXmlDocument, SoapEnvelopeElement(), lSoapEnvelopeXmlElement);
      CreateAndAppendElement(lSoapEnvelopeXmlElement, SoapBodyElement(), lSoapBodyXmlElement);
      lSoapBodyXmlElement.AppendChild(pMethodXmlElement);

      RunSoap(pMethodXmlElement.Name);
    END;

    PROCEDURE GetSoapResponseXml@1000000014(VAR pResponseXmlDocument@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    BEGIN
      //DOC NA2016.12 - Returning SOAP response XML
      //  <> pResponseXmlDocument: Target XML document

      pResponseXmlDocument := ResponseXmlDocument;
    END;

    LOCAL PROCEDURE "--- Request ---"@1000000031();
    BEGIN
    END;

    PROCEDURE AddRequestElement@1000000032(pName@1000000000 : Text;VAR pXmlElement@1000000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    BEGIN
      //DOC NA2016.12 - Adding a new request element
      //  -> pName: Element name
      //  <> pXmlElement: Target XML element

      CheckRequestXmlDocument();
      pXmlElement := RequestXmlDocument.CreateElement(pName);
    END;

    PROCEDURE AddRequestElementAdv@1000000020(pName@1000000000 : Text;pValue@1000000002 : Text;VAR pXmlElement@1000000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    BEGIN
      //DOC NA2016.12 - Adding a new request element (advanced version)
      //  -> pName: Element name
      //  -> pValue: Element value
      //  <> pXmlElement: Target XML element

      AddRequestElement(pName, pXmlElement);
      pXmlElement.Value := pValue;
    END;

    PROCEDURE AddRequestElementTo@1000000034(pParentXmlElement@1000000002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pName@1000000001 : Text;VAR pXmlElement@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    BEGIN
      //DOC NA2016.12 - Adding a new request element to parent element
      //  -> pParentXmlElement: Parent XML element
      //  -> pName: Element name
      //  <> pXmlElement: Target XML element

      AddRequestElement(pName, pXmlElement);
      pParentXmlElement.AppendChild(pXmlElement);
    END;

    PROCEDURE AddRequestElementToAdv@1000000024(pParentXmlElement@1000000002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pName@1000000001 : Text;pValue@1000000003 : Text;VAR pXmlElement@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    BEGIN
      //DOC NA2016.12 - Adding a new request element to parent element (advanced version)
      //  -> pParentXmlElement: Parent XML element
      //  -> pName: Element name
      //  -> pValue: Element value
      //  <> pXmlElement: Target XML element

      AddRequestElementAdv(pName, pValue, pXmlElement);
      pParentXmlElement.AppendChild(pXmlElement);
    END;

    PROCEDURE AddRequestAttribute@1000000033(pXmlElement@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pName@1000000001 : Text;pValue@1000000002 : Text);
    BEGIN
      //DOC NA2016.12 - Adding request attribute
      //  -> pXmlElement: XML element to add attribute to
      //  -> pName: Attribute name
      //  -> pValue: Attribute value

      pXmlElement.SetAttribute(pName, pValue);
    END;

    PROCEDURE AddRequestAttributeAdv@1000000039(pXmlElement@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pName@1000000001 : Text;pNamespace@1000000003 : Text;pValue@1000000002 : Text);
    BEGIN
      //DOC NA2016.12 - Adding request attribute (advanced version)
      //  -> pXmlElement: XML element to add attribute to
      //  -> pName: Attribute name
      //  -> pNamespace: Attribute namespace
      //  -> pValue: Attribute value

      pXmlElement.SetAttribute(pName, pNamespace, pValue);
    END;

    LOCAL PROCEDURE "--- Namespaces ---"@1000000002();
    BEGIN
    END;

    PROCEDURE ClearNamespaces@1000000001();
    BEGIN
      //DOC NA2016.12 - Clearing namespaces

      SoapNamespace.ClearAll();
    END;

    PROCEDURE AddNamespace@1000000000(pElement@1000000000 : Text;pNamespace@1000000001 : Text;pUrl@1000000002 : Text);
    BEGIN
      //DOC NA2016.12 - Adding a namespace
      //  -> pElement: Element to add the namespace for
      //  -> pNamespace: Namespace
      //  -> pUrl: URL

      SoapNamespace.Add(pElement, pNamespace, pUrl);
    END;

    PROCEDURE AddSelectionNamespace@1000000019(pNamespace@1000000001 : Text;pUrl@1000000000 : Text);
    BEGIN
      //DOC NA2016.12 - Adding selection namespace
      //  -> pNamespace: Namespace
      //  -> pUrl: URL

      SoapNamespace.Add(SelectionNamespacesElement(), pNamespace, pUrl);
    END;

    PROCEDURE ApplyNamespaces@1000000008(pXmlElement@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    BEGIN
      //DOC NA2016.12 - Applying namespaces to XML element
      //  -> pXmlElement: The element

      SoapNamespace.RESET();
      SoapNamespace.SETCURRENTKEY(Element, Namespace);
      SoapNamespace.SETRANGE(Element, pXmlElement.Name);
      IF (SoapNamespace.FINDSET()) THEN
      REPEAT
        pXmlElement.SetAttribute(SoapNamespace.Namespace, SoapNamespace.URL);
      UNTIL (SoapNamespace.NEXT() = 0);
    END;

    PROCEDURE ApplySelectionNamespaces@1000000023(pXmlElement@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    VAR
      lNamespaces@1000000001 : Text;
    BEGIN
      //DOC NA2016.12 - Apply selection namespaces to XML element
      //  -> pNamespace: Namespace
      //  -> pUrl: URL

      SoapNamespace.RESET();
      SoapNamespace.SETCURRENTKEY(Element, Namespace);
      SoapNamespace.SETRANGE(Element, SelectionNamespacesElement());
      IF (SoapNamespace.FINDSET()) THEN
      REPEAT
        IF (lNamespaces <> '') THEN
          lNamespaces := lNamespaces + ' ';
        lNamespaces := lNamespaces + STRSUBSTNO('%1=''%2''', SoapNamespace.Namespace, SoapNamespace.URL);
      UNTIL (SoapNamespace.NEXT() = 0);

      pXmlElement.SetAttribute(SelectionNamespacesElement(), lNamespaces);
    END;

    LOCAL PROCEDURE "--- Internal ---"@1000000007();
    BEGIN
    END;

    LOCAL PROCEDURE RunSoap@1000000011(pActivityName@1000000007 : Text);
    VAR
      lNetworkCredential@1000000004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      lRequest@1000000000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      lRequestStream@1000000005 : OutStream;
      lResponse@1000000002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      lResponseStream@1000000003 : InStream;
      lResponseBlob@1000000001 : Record 99008535;
      lResponseStatusCode@1000000008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      lResponseStatusNumber@1000000010 : Integer;
      lResponseStatusDescription@1000000009 : Text;
      lHttpStatusCodeNumber@1000000006 : Integer;
    BEGIN
      //DOC NA2016.12 - Initialising request
      //  -> pActivityName: Activity name (for error handling)

      CLEARLASTERROR();

      IF (Domain <> '') THEN
        lNetworkCredential := lNetworkCredential.NetworkCredential(User, Password, Domain)
      ELSE
        lNetworkCredential := lNetworkCredential.NetworkCredential(User, Password);

      lRequest := lRequest.Create(Address);
      lRequest.Method := 'POST';
      lRequest.Credentials := lNetworkCredential;
      lRequest.KeepAlive := TRUE;
      lRequest.AllowAutoRedirect := TRUE;
      lRequest.ContentType := ContentType;
      lRequest.Timeout := Timeout;

      RequestXmlDocument.Save(lRequestStream);

      CLEAR(lResponseBlob);
      lResponseBlob.Blob.CREATEINSTREAM(lResponseStream);

      lResponse := lRequest.GetResponse();
      IF (lResponse.StatusCode.Equals(lResponse.StatusCode.OK)) THEN
      BEGIN
        lResponse.GetResponseStream.CopyTo(lResponseStream);
        IF ( NOT (ReceiveSoapResponseXml(lResponseStream))) THEN
          CLEAR(ResponseXmlDocument);
      END
      ELSE
      BEGIN
        lResponseStatusNumber := lResponse.StatusCode;
        lResponseStatusDescription := lResponse.StatusDescription;
        DetectSoapResponseError(lResponseStream, pActivityName, lResponseStatusNumber, lResponseStatusDescription);
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE ReceiveSoapResponseXml@1000000036(VAR pResponseStream@1000000000 : InStream);
    BEGIN
      //DOC NA2016.12 - Turning response stream into response XML document
      //  <> pResponseStream: Response stream

      ResponseXmlDocument := ResponseXmlDocument.XmlDocument();
      ResponseXmlDocument.Load(pResponseStream);
    END;

    LOCAL PROCEDURE DetectSoapResponseError@1000000022(VAR pResponseStream@1000000000 : InStream;pActivityName@1000000002 : Text;pResponseStatusNumber@1000000005 : Integer;pResponseStatusDescription@1000000004 : Text);
    VAR
      lErrorMessage@1000000001 : Text;
      eErrorMessage@1000000008 : TextConst 'ENU="""%1"" completed with error ""%2"" (status %3 ""%4"").";ENG="""%1"" completed with error ""%2"" (status %3 ""%4"")."';
      eGenericErrorMessage@1000000003 : TextConst 'ENU="""%1"" completed with error; status %2 ""%3"".";ENG="""%1"" completed with error; status %2 ""%3""."';
      lFaultStringXPath@1000000006 : Text;
      lFaultStringXmlElement@1000000007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      //DOC NA2016.12 - Detecting SOAP response error
      //  <> pResponseStream: Response stream
      //  -> pActivityName: Activity name (for error handling)
      //  -> pResponseStatusNumber: Response status number
      //  -> pResponseStatusDescription: Response status description

      IF (ReceiveSoapResponseXml(pResponseStream)) THEN
      BEGIN
        AddSelectionNamespace('xmlns:s', 'http://schemas.xmlsoap.org/soap/envelope/');
        AddSelectionNamespace('xmlns:a', 'urn:microsoft-dynamics-schemas/error');
        ApplySelectionNamespaces(ResponseXmlDocument);
        lFaultStringXPath := 's:Envelope/s:Body/s:Fault/faultstring';
        lFaultStringXmlElement := ResponseXmlDocument.SelectSingleNode(lFaultStringXPath);
        IF ( NOT (ISNULL(lFaultStringXmlElement))) THEN
          lErrorMessage := lFaultStringXmlElement.Value;
      END;

      IF (lErrorMessage <> '') THEN
        lErrorMessage := STRSUBSTNO(eErrorMessage, pActivityName, lErrorMessage, pResponseStatusNumber, pResponseStatusDescription)
      ELSE
        lErrorMessage := STRSUBSTNO(eGenericErrorMessage, pActivityName, pResponseStatusNumber, pResponseStatusDescription);

      ERROR(lErrorMessage);
    END;

    LOCAL PROCEDURE "--- (Pseudo) Constants ---"@1000000004();
    BEGIN
    END;

    PROCEDURE XmlContentType@1000000015() : Text;
    BEGIN
      //DOC NA2016.12 - Returning XML content type
      //  <- The content type

      EXIT('text/xml; charset=utf-8');
    END;

    PROCEDURE SoapEnvelopeElement@1000000005() : Text;
    BEGIN
      //DOC NA2016.12 - Returning soap:element element
      //  <- The element

      EXIT('soap:Element');
    END;

    PROCEDURE SoapBodyElement@1000000006() : Text;
    BEGIN
      //DOC NA2016.12 - Returning soap:body element
      //  <- The element

      EXIT('soap:Body');
    END;

    LOCAL PROCEDURE SelectionNamespacesElement@1000000013() : Text;
    BEGIN
      //DOC NA2016.12 - Returning selection namespaces element (for XPath)
      //  <- The element

      EXIT('SelectionNamespaces');
    END;

    LOCAL PROCEDURE "--- XML Tools ---"@1000000009();
    BEGIN
    END;

    LOCAL PROCEDURE CreateAndAppendElement@1000000010(pParentXmlElement@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";pName@1000000001 : Text;VAR pXmlElement@1000000002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement");
    BEGIN
      //DOC NA2016.12 - Creating and appending XML element
      //  -> pParentXmlElement: Parent XML element
      //  -> pName: Name (new element name)
      //  <> pXmlElement: Target new element reference

      pXmlElement := RequestXmlDocument.CreateElement(pName);
      pParentXmlElement.AppendChild(pXmlElement);
      ApplyNamespaces(pXmlElement);
    END;

    LOCAL PROCEDURE "--- Miscellaneous ---"@1000000017();
    BEGIN
    END;

    LOCAL PROCEDURE CheckRequestXmlDocument@1000000026();
    BEGIN
      //DOC NA2016.12 - Checking request XML document and creating it if it hasn't been created

      IF (ISNULL(RequestXmlDocument)) THEN
        RequestXmlDocument := RequestXmlDocument.XmlDocument();
    END;

    LOCAL PROCEDURE CheckInitialised@1000000018();
    BEGIN
      //DOC NA2016.12 - Checking if the codeunit has been initialised

      IF ( NOT (Initialised)) THEN
        ERROR(tNotInitialised);
    END;

    EVENT ResponseXmlDocument@1000000010::NodeInserting@93(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXmlDocument@1000000010::NodeInserted@94(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXmlDocument@1000000010::NodeRemoving@95(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXmlDocument@1000000010::NodeRemoved@96(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXmlDocument@1000000010::NodeChanging@97(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT ResponseXmlDocument@1000000010::NodeChanged@98(sender@1000000001 : Variant;e@1000000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    {
      //DOC NA2016.12 JH 18/01/2016 - Created
    }
    END.
  }
}

