OBJECT Codeunit 9062453 Purchase Printout Toolkit
{
  OBJECT-PROPERTIES
  {
    Date=23/09/15;
    Time=[ 1:44:06 PM];
    Version List=NH2016.4;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      mPurchaseHeader@1000000009 : Record 38;
      mPurchaseLine@1000000011 : Record 39;
      mDocumentPrintoutToolkit@1000000010 : Codeunit 9062447;

    LOCAL PROCEDURE "--- Setting Document ---"@1000000052();
    BEGIN
    END;

    PROCEDURE SetPurchaseHeader@1000000060(pPurchaseHeader@1000000000 : Record 38);
    BEGIN
      //DOC NH2015.4 - Setting purchase header
      //  -> pPurchaseHeader: The header

      mPurchaseHeader := pPurchaseHeader;
    END;

    PROCEDURE SetPurchRcptHeader@1000000063(pPurchRcptHeader@1000000000 : Record 120);
    BEGIN
      //DOC NH2015.4 - Setting purchase receipt header
      //  -> pPurchRcptHeader: The header

      CLEAR(mPurchaseHeader);
      mPurchaseHeader.TRANSFERFIELDS(pPurchRcptHeader);
    END;

    PROCEDURE SetPurchInvHeader@1000000062(pPurchInvHeader@1000000000 : Record 122);
    BEGIN
      //DOC NH2015.4 - Setting purchase invoice header
      //  -> pPurchInvHeader: The header

      CLEAR(mPurchaseHeader);
      mPurchaseHeader.TRANSFERFIELDS(pPurchInvHeader);
    END;

    PROCEDURE SetPurchCrMemoHdr@1000000061(pPurchCrMemoHdr@1000000000 : Record 124);
    BEGIN
      //DOC NH2015.4 - Setting purchase credit memo header
      //  -> pPurchCrMemoHdr: The header

      CLEAR(mPurchaseHeader);
      mPurchaseHeader.TRANSFERFIELDS(pPurchCrMemoHdr);
    END;

    PROCEDURE SetReturnShipmentHeader@1000000026(pReturnShipmentHeader@1000000000 : Record 6650);
    BEGIN
      //DOC NH2015.4 - Setting return shipment header
      //  -> pReturnShipmentHeader: The header

      CLEAR(mPurchaseHeader);
      mPurchaseHeader.TRANSFERFIELDS(pReturnShipmentHeader);
    END;

    LOCAL PROCEDURE "--- Setting Line ---"@1000000029();
    BEGIN
    END;

    PROCEDURE SetPurchaseLine@1000000048(pPurchaseLine@1000000000 : Record 39);
    BEGIN
      //DOC NH2015.4 - Setting purchase line
      //  -> pPurchaseLine: The line

      mPurchaseLine := pPurchaseLine;
    END;

    PROCEDURE SetPurchRcptLine@1000000046(pPurchRcptLine@1000000000 : Record 121);
    BEGIN
      //DOC NH2015.4 - Setting purchase receipt line
      //  -> pPurchRcptLine: The line

      CLEAR(mPurchaseLine);
      mPurchaseLine.TRANSFERFIELDS(pPurchRcptLine);
    END;

    PROCEDURE SetPurchInvLine@1000000038(pPurchInvLine@1000000000 : Record 123);
    BEGIN
      //DOC NH2015.4 - Setting purchase invoice line
      //  -> pPurchInvLine: The line

      CLEAR(mPurchaseLine);
      mPurchaseLine.TRANSFERFIELDS(pPurchInvLine);
    END;

    PROCEDURE SetPurchCrMemoLine@1000000030(pPurchCrMemoLine@1000000000 : Record 125);
    BEGIN
      //DOC NH2015.4 - Setting purchase credit memo line
      //  -> pPurchCrMemoLine: The line

      CLEAR(mPurchaseLine);
      mPurchaseLine.TRANSFERFIELDS(pPurchCrMemoLine);
    END;

    PROCEDURE SetReturnShipmentLine@1000000028(pReturnShipmentLine@1000000000 : Record 6651);
    BEGIN
      //DOC NH2015.4 - Setting return shipment line
      //  -> pReturnShipmentLine: The line

      CLEAR(mPurchaseLine);
      mPurchaseLine.TRANSFERFIELDS(pReturnShipmentLine);
    END;

    LOCAL PROCEDURE "--- Getting Line ---"@1000000021();
    BEGIN
    END;

    PROCEDURE GetPurchaseLine@1000000013(VAR pPurchaseLine@1000000000 : Record 39);
    BEGIN
      //DOC NH2015.4 - Getting purchase line
      //  <> pPurchaseLine: Target line

      pPurchaseLine := mPurchaseLine;
    END;

    PROCEDURE GetPurchRcptLine@1000000011(VAR pPurchRcptLine@1000000000 : Record 121);
    BEGIN
      //DOC NH2015.4 - Getting purchase receipt line
      //  <> pPurchRcptLine: Target line

      pPurchRcptLine.TRANSFERFIELDS(mPurchaseLine);
    END;

    PROCEDURE GetPurchInvLine@1000000008(VAR pPurchInvLine@1000000000 : Record 123);
    BEGIN
      //DOC NH2015.4 - Getting purchase invoice line
      //  <> pPurchInvLine: Target line

      pPurchInvLine.TRANSFERFIELDS(mPurchaseLine);
    END;

    PROCEDURE GetPurchCrMemoLine@1000000006(VAR pPurchCrMemoLine@1000000000 : Record 125);
    BEGIN
      //DOC NH2015.4 - Getting purchase credit memo line
      //  <> pPurchCrMemoLine: Target line

      pPurchCrMemoLine.TRANSFERFIELDS(mPurchaseLine);
    END;

    PROCEDURE GetReturnShipmentLine@1000000034(VAR pReturnShipmentLine@1000000000 : Record 6651);
    BEGIN
      //DOC NH2015.4 - Getting return shipment line
      //  <> pReturnShipmentLine: Target line

      pReturnShipmentLine.TRANSFERFIELDS(mPurchaseLine);
    END;

    PROCEDURE "--- System-Wide ---"@1000000005();
    BEGIN
    END;

    PROCEDURE CompanyShortAddress@1000000003(VAR pCompanyShortAddress@1000000000 : ARRAY [2] OF Text[250]);
    BEGIN
      //DOC TMPM1.04 - Creating company short address
      //  <> pCompanyShortAddress: Target array

      mDocumentPrintoutToolkit.CompanyShortAddress(pCompanyShortAddress);
    END;

    PROCEDURE ReportImages@1000000049(VAR pImage@1000000000 : Record 99008535;pAlternative@1000000002 : Boolean);
    BEGIN
      //DOC TMPM1.04 - Returning report images
      //  <> pImage: Target image
      //  -> pAlternative: Flag to load alternative images

      mDocumentPrintoutToolkit.ReportImages(pImage, pAlternative);
    END;

    PROCEDURE "--- General Information ---"@1000000017();
    BEGIN
    END;

    PROCEDURE CurrencyInformation@1000000022(VAR pCurrencyText@1000000004 : Text[100];VAR pCurrencyFactorText@1000000003 : Text[100];VAR pAmountCaption@1000000002 : Text[100];VAR pAmountInclVatCaption@1000000001 : Text[100]);
    BEGIN
      //DOC TMPM1.00 - Preparing currency information
      //  <> pCurrencyText: Target currency text
      //  <> pCurrencyFactorText: Target currency factor text
      //  <> pAmountCaption: Target amount caption (including currency)
      //  <> pAmountInclVatCaption: Target amount including vat caption (including currency)

      mDocumentPrintoutToolkit.CurrencyInformation(mPurchaseHeader."Currency Code", mPurchaseHeader."Currency Factor", pCurrencyText,
        pCurrencyFactorText, pAmountCaption, pAmountInclVatCaption);
    END;

    PROCEDURE ContactInformation@1000000020(VAR pContact@1000000000 : Record 5050);
    VAR
      lCustomer@1000000002 : Record 18;
      lCustomerContact@1000000001 : Record 5050;
    BEGIN
      //DOC NH2015.4 - Returning contact information
      //  <> pContact: Target contact record

      IF (lCustomer.GET(mPurchaseHeader."Sell-to Customer No.")) THEN
        lCustomerContact.TRANSFERFIELDS(lCustomer);

      mDocumentPrintoutToolkit.ContactInformation(mPurchaseHeader."Buy-from Contact No.", mPurchaseHeader."Buy-from Contact",
        lCustomerContact, pContact);
    END;

    LOCAL PROCEDURE "--- Texts ---"@1000000018();
    BEGIN
    END;

    PROCEDURE SalespersonPurchaserText@1000000023() : Text[100];
    BEGIN
      //DOC TMPM1.04 - Returning salesperson / purchaser text
      //  <- The text

      EXIT(mDocumentPrintoutToolkit.SalespersonPurchaserText(mPurchaseHeader."Purchaser Code"));
    END;

    PROCEDURE PaymentTermsText@1000000027() : Text[100];
    BEGIN
      //DOC TMPM1.04 - Returning payment terms text
      //  <- The text

      EXIT(mDocumentPrintoutToolkit.PaymentTermsText(mPurchaseHeader."Payment Terms Code"));
    END;

    PROCEDURE PaymentMethodText@1000000025() : Text[100];
    BEGIN
      //DOC TMPM1.04 - Returning payment method text
      //  <- The text

      EXIT(mDocumentPrintoutToolkit.PaymentMethodText(mPurchaseHeader."Payment Method Code"));
    END;

    PROCEDURE ShipmentMethodText@1000000024() : Text[100];
    BEGIN
      //DOC TMPM1.04 - Returning shipment method text
      //  <- The text

      EXIT(mDocumentPrintoutToolkit.ShipmentMethodText(mPurchaseHeader."Shipment Method Code"));
    END;

    PROCEDURE "--- Copy Tools ---"@1000000012();
    BEGIN
    END;

    PROCEDURE FilterCopy@1000000016(pCopies@1000000000 : Integer;VAR pCopy@1000000001 : Record 2000000026);
    BEGIN
      //DOC TMPM1.00 - Filtering copies recordset (Integer)
      //  -> pCopies: Number of copies
      //  <> pCopy: Copies recordset (Integer) to filter

      mDocumentPrintoutToolkit.FilterCopy(pCopies, pCopy);
    END;

    PROCEDURE NextCopy@1000000019(pCopy@1000000000 : Record 2000000026;VAR pCopyText@1000000001 : Text[10]);
    BEGIN
      //DOC TMPM1.00 - Next copy
      //  -> pCopy: Copy record (Integer)
      //  <> pCopyText: Target copy text

      mDocumentPrintoutToolkit.NextCopy(pCopy, pCopyText);
    END;

    PROCEDURE "--- Line Tools ---"@1000000002();
    BEGIN
    END;

    PROCEDURE ClearLineIndex@1000000007();
    BEGIN
      //DOC TMPM1.00 - Clearing line index

      mDocumentPrintoutToolkit.ClearLineIndex();
    END;

    PROCEDURE NextLineIndex@1000000033(VAR pLineIndex@1000000002 : Integer;VAR pLineIndexText@1000000001 : Text[10]);
    BEGIN
      //DOC TMPM1.00 - Processing line index
      //  <> pLineIndex: Target line index
      //  <> pLineIndexText: Target line index text

      mDocumentPrintoutToolkit.NextLineIndex(mPurchaseLine.Type, pLineIndex, pLineIndexText);
    END;

    PROCEDURE LineDescription@1000000010() : Text;
    BEGIN
      //DOC NH2015.4 - Returning line description
      //  <- The description

      EXIT(mDocumentPrintoutToolkit.LineDescription(mPurchaseLine.Description, mPurchaseLine."Description 2"));
    END;

    PROCEDURE LineInternalInformation@1000000039(pShowInternalInformation@1000000001 : Boolean);
    VAR
      lSalesLine@1000000002 : Record 37;
    BEGIN
      //DOC NH2015.2 - Amending sales line internal information
      //  -> pShowInternalInformation: Show internal information flag

      mDocumentPrintoutToolkit.LineInternalInformation(pShowInternalInformation, mPurchaseLine.Type, mPurchaseLine."No.");
    END;

    PROCEDURE "--- Summary Tools ---"@1000000000();
    BEGIN
    END;

    PROCEDURE Summary@1000000037(VAR pAmount@1000000002 : Decimal;VAR pAmountInclVat@1000000001 : Decimal;VAR pAmountInWordsText@1000000000 : Text);
    VAR
      lPurchaseLineTmp@1000000005 : TEMPORARY Record 39;
      lPurchPost@1000000004 : Codeunit 90;
      lVatAmountLineTmp@1000000006 : TEMPORARY Record 290;
    BEGIN
      //DOC NH2015.4 - Calculating purchase summary
      //  -> pPurchaseHeader: Purchase header
      //  <> pAmount: Target amount
      //  <> pAmountInclVat: Target amount including VAT
      //  <> pVatAmountLine: Target VAT amount line recordset (for VAT lines)
      //  <> pAmountInWordsText: Target amount in words

      CLEAR(lPurchPost);
      lPurchPost.GetPurchLines(mPurchaseHeader, lPurchaseLineTmp, 0);
      lPurchaseLineTmp.CalcVATAmountLines(0, mPurchaseHeader, lPurchaseLineTmp, lVatAmountLineTmp);
      lPurchaseLineTmp.UpdateVATOnLines(0, mPurchaseHeader, lPurchaseLineTmp, lVatAmountLineTmp);

      pAmountInclVat := lVatAmountLineTmp.GetTotalAmountInclVAT();
      pAmount := pAmountInclVat - lVatAmountLineTmp.GetTotalVATAmount();
      pAmountInWordsText := mDocumentPrintoutToolkit.AmountInWords(pAmountInclVat);

      mDocumentPrintoutToolkit.SetSummary(lVatAmountLineTmp);
    END;

    PROCEDURE ClearSummary@1000000001();
    BEGIN
      //DOC TMPM1.00 - Clearing summary

      mDocumentPrintoutToolkit.ClearSummary();
    END;

    PROCEDURE AddLineToSummary@1000000004();
    BEGIN
      //DOC TMPM1.00 - Adding line to summary

      mDocumentPrintoutToolkit.AddLineToSummary(mPurchaseLine."VAT Identifier", mPurchaseLine."VAT Calculation Type",
        mPurchaseLine."Tax Group Code", mPurchaseLine."VAT %", mPurchaseLine.Amount, mPurchaseLine."Amount Including VAT",
        mPurchaseLine."Line Amount", mPurchaseLine."Allow Invoice Disc.", mPurchaseLine."Inv. Discount Amount",
        '');
    END;

    PROCEDURE GetSummaryAmounts@1000000009(VAR pSummaryAmount@1000000000 : Decimal;VAR pSummaryAmountInclVat@1000000001 : Decimal;VAR pAmountInWordsText@1000000002 : Text);
    BEGIN
      //DOC TMPM1.00 - Returning summary amounts
      //  <> pSummaryAmount: Target summary amount
      //  <> pSummaryAmountInclVat: Target summary amount including VAT
      //  <> pAmountInWordsText: Target summary amount in words

      mDocumentPrintoutToolkit.GetSummaryAmounts(pSummaryAmount, pSummaryAmountInclVat, pAmountInWordsText);
    END;

    PROCEDURE FilterSummary@1000000014(VAR pSummary@1000000000 : Record 2000000026);
    BEGIN
      //DOC TMPM1.00 - Filtering summary
      //  <> pSummary: Summary recordset (Integer)
      //  <- Result

      mDocumentPrintoutToolkit.FilterSummary(pSummary);
    END;

    PROCEDURE NextSummary@1000000015(pSummary@1000000000 : Record 2000000026;VAR pVatAmountLine@1000000001 : Record 290;VAR pVatIdentifierText@1000000003 : Text[100]) : Boolean;
    BEGIN
      //DOC TMPM1.00 - Dooing NEXT on buffer
      //  -> pSummary: Current summary record (Integer)
      //  <> pVatAmountLine: Target VAT amount line
      //  <- Result (TRUE = Next summary buffer retrieved, FALSE = No more records)

      EXIT(mDocumentPrintoutToolkit.NextSummary(pSummary, pVatAmountLine, pVatIdentifierText));
    END;

    LOCAL PROCEDURE "--- Formatting ---"@1000000042();
    BEGIN
    END;

    PROCEDURE FormatDate@1000000036(pDate@1000000000 : Date) : Text;
    BEGIN
      //DOC NH2015.4 - Formatting date
      //  -> pDate: Date to format
      //  <- Formatted date

      EXIT(mDocumentPrintoutToolkit.FormatDate(pDate));
    END;

    PROCEDURE FormatTime@1000000035(pTime@1000000000 : Time) : Text;
    BEGIN
      //DOC NH2015.4 - Formatting time
      //  -> pTime: Time to format
      //  <- Formatted time

      EXIT(mDocumentPrintoutToolkit.FormatTime(pTime));
    END;

    PROCEDURE FormatDateTime@1000000031(pDateTime@1000000000 : DateTime) : Text;
    BEGIN
      //DOC NH2015.4 - Formatting datetime
      //  -> pDateTime: Datetime to format
      //  <- Formatted datetime

      EXIT(mDocumentPrintoutToolkit.FormatDateTime(pDateTime));
    END;

    BEGIN
    {
      //DOC NH2015.1 JH 27/05/2014 - Created
      //DOC NH2015.4 JH 07/12/2014 - Purchase documents support added
      //DOC NH2016.4 JH 23/09/2015 - Upgraded to 2016
    }
    END.
  }
}

